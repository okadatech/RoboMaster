
F427IIH_Saramander_Standard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006db4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  08006f68  08006f68  00016f68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007270  08007270  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007270  08007270  00017270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007278  08007278  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007278  08007278  00017278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800727c  0800727c  0001727c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000510  200001e0  08007460  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f0  08007460  000206f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018eb0  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000399a  00000000  00000000  000390c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000e450  00000000  00000000  0003ca5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000da0  00000000  00000000  0004aeb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002420  00000000  00000000  0004bc50  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002596a  00000000  00000000  0004e070  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000f744  00000000  00000000  000739da  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000dbeac  00000000  00000000  0008311e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0015efca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d70  00000000  00000000  0015f048  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006f4c 	.word	0x08006f4c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	08006f4c 	.word	0x08006f4c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b972 	b.w	8000f64 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	4688      	mov	r8, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14b      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4615      	mov	r5, r2
 8000caa:	d967      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0720 	rsb	r7, r2, #32
 8000cb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cba:	fa20 f707 	lsr.w	r7, r0, r7
 8000cbe:	4095      	lsls	r5, r2
 8000cc0:	ea47 0803 	orr.w	r8, r7, r3
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cd0:	fa1f fc85 	uxth.w	ip, r5
 8000cd4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cd8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cdc:	fb07 f10c 	mul.w	r1, r7, ip
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18eb      	adds	r3, r5, r3
 8000ce6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cea:	f080 811b 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8118 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000cf4:	3f02      	subs	r7, #2
 8000cf6:	442b      	add	r3, r5
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0c:	45a4      	cmp	ip, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	192c      	adds	r4, r5, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 8107 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000d1a:	45a4      	cmp	ip, r4
 8000d1c:	f240 8104 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000d20:	3802      	subs	r0, #2
 8000d22:	442c      	add	r4, r5
 8000d24:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d28:	eba4 040c 	sub.w	r4, r4, ip
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	b11e      	cbz	r6, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c6 4300 	strd	r4, r3, [r6]
 8000d38:	4639      	mov	r1, r7
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0xbe>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80eb 	beq.w	8000f1e <__udivmoddi4+0x286>
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d4e:	4638      	mov	r0, r7
 8000d50:	4639      	mov	r1, r7
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f783 	clz	r7, r3
 8000d5a:	2f00      	cmp	r7, #0
 8000d5c:	d147      	bne.n	8000dee <__udivmoddi4+0x156>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0xd0>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80fa 	bhi.w	8000f5c <__udivmoddi4+0x2c4>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	4698      	mov	r8, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d0e0      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000d76:	e9c6 4800 	strd	r4, r8, [r6]
 8000d7a:	e7dd      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000d7c:	b902      	cbnz	r2, 8000d80 <__udivmoddi4+0xe8>
 8000d7e:	deff      	udf	#255	; 0xff
 8000d80:	fab2 f282 	clz	r2, r2
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f040 808f 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d8a:	1b49      	subs	r1, r1, r5
 8000d8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d90:	fa1f f885 	uxth.w	r8, r5
 8000d94:	2701      	movs	r7, #1
 8000d96:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d9a:	0c23      	lsrs	r3, r4, #16
 8000d9c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb08 f10c 	mul.w	r1, r8, ip
 8000da8:	4299      	cmp	r1, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000dac:	18eb      	adds	r3, r5, r3
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4299      	cmp	r1, r3
 8000db6:	f200 80cd 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1a59      	subs	r1, r3, r1
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dc8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x14c>
 8000dd4:	192c      	adds	r4, r5, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x14a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80b6 	bhi.w	8000f4e <__udivmoddi4+0x2b6>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e79f      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dee:	f1c7 0c20 	rsb	ip, r7, #32
 8000df2:	40bb      	lsls	r3, r7
 8000df4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000df8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dfc:	fa01 f407 	lsl.w	r4, r1, r7
 8000e00:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e04:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e08:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e0c:	4325      	orrs	r5, r4
 8000e0e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e12:	0c2c      	lsrs	r4, r5, #16
 8000e14:	fb08 3319 	mls	r3, r8, r9, r3
 8000e18:	fa1f fa8e 	uxth.w	sl, lr
 8000e1c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e20:	fb09 f40a 	mul.w	r4, r9, sl
 8000e24:	429c      	cmp	r4, r3
 8000e26:	fa02 f207 	lsl.w	r2, r2, r7
 8000e2a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1e 0303 	adds.w	r3, lr, r3
 8000e34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e38:	f080 8087 	bcs.w	8000f4a <__udivmoddi4+0x2b2>
 8000e3c:	429c      	cmp	r4, r3
 8000e3e:	f240 8084 	bls.w	8000f4a <__udivmoddi4+0x2b2>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4473      	add	r3, lr
 8000e48:	1b1b      	subs	r3, r3, r4
 8000e4a:	b2ad      	uxth	r5, r5
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3310 	mls	r3, r8, r0, r3
 8000e54:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e58:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e5c:	45a2      	cmp	sl, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1e 0404 	adds.w	r4, lr, r4
 8000e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e68:	d26b      	bcs.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6a:	45a2      	cmp	sl, r4
 8000e6c:	d969      	bls.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4474      	add	r4, lr
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7a:	eba4 040a 	sub.w	r4, r4, sl
 8000e7e:	454c      	cmp	r4, r9
 8000e80:	46c2      	mov	sl, r8
 8000e82:	464b      	mov	r3, r9
 8000e84:	d354      	bcc.n	8000f30 <__udivmoddi4+0x298>
 8000e86:	d051      	beq.n	8000f2c <__udivmoddi4+0x294>
 8000e88:	2e00      	cmp	r6, #0
 8000e8a:	d069      	beq.n	8000f60 <__udivmoddi4+0x2c8>
 8000e8c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e90:	eb64 0403 	sbc.w	r4, r4, r3
 8000e94:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e98:	40fd      	lsrs	r5, r7
 8000e9a:	40fc      	lsrs	r4, r7
 8000e9c:	ea4c 0505 	orr.w	r5, ip, r5
 8000ea0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ea4:	2700      	movs	r7, #0
 8000ea6:	e747      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f703 	lsr.w	r7, r0, r3
 8000eb0:	4095      	lsls	r5, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ebe:	4338      	orrs	r0, r7
 8000ec0:	0c01      	lsrs	r1, r0, #16
 8000ec2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ec6:	fa1f f885 	uxth.w	r8, r5
 8000eca:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb07 f308 	mul.w	r3, r7, r8
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	fa04 f402 	lsl.w	r4, r4, r2
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x256>
 8000ede:	1869      	adds	r1, r5, r1
 8000ee0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ee4:	d22f      	bcs.n	8000f46 <__udivmoddi4+0x2ae>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	d92d      	bls.n	8000f46 <__udivmoddi4+0x2ae>
 8000eea:	3f02      	subs	r7, #2
 8000eec:	4429      	add	r1, r5
 8000eee:	1acb      	subs	r3, r1, r3
 8000ef0:	b281      	uxth	r1, r0
 8000ef2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000efe:	fb00 f308 	mul.w	r3, r0, r8
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x27e>
 8000f06:	1869      	adds	r1, r5, r1
 8000f08:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0c:	d217      	bcs.n	8000f3e <__udivmoddi4+0x2a6>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d915      	bls.n	8000f3e <__udivmoddi4+0x2a6>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4429      	add	r1, r5
 8000f16:	1ac9      	subs	r1, r1, r3
 8000f18:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f1c:	e73b      	b.n	8000d96 <__udivmoddi4+0xfe>
 8000f1e:	4637      	mov	r7, r6
 8000f20:	4630      	mov	r0, r6
 8000f22:	e709      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f24:	4607      	mov	r7, r0
 8000f26:	e6e7      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fb      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f2c:	4541      	cmp	r1, r8
 8000f2e:	d2ab      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f30:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f34:	eb69 020e 	sbc.w	r2, r9, lr
 8000f38:	3801      	subs	r0, #1
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	e7a4      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f3e:	4660      	mov	r0, ip
 8000f40:	e7e9      	b.n	8000f16 <__udivmoddi4+0x27e>
 8000f42:	4618      	mov	r0, r3
 8000f44:	e795      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f46:	4667      	mov	r7, ip
 8000f48:	e7d1      	b.n	8000eee <__udivmoddi4+0x256>
 8000f4a:	4681      	mov	r9, r0
 8000f4c:	e77c      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	442c      	add	r4, r5
 8000f52:	e747      	b.n	8000de4 <__udivmoddi4+0x14c>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	442b      	add	r3, r5
 8000f5a:	e72f      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f5c:	4638      	mov	r0, r7
 8000f5e:	e708      	b.n	8000d72 <__udivmoddi4+0xda>
 8000f60:	4637      	mov	r7, r6
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0xa0>

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f6a:	4a0e      	ldr	r2, [pc, #56]	; (8000fa4 <HAL_InitTick+0x3c>)
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <HAL_InitTick+0x40>)
 8000f6e:	7812      	ldrb	r2, [r2, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
{
 8000f72:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f78:	fbb0 f0f2 	udiv	r0, r0, r2
 8000f7c:	fbb3 f0f0 	udiv	r0, r3, r0
 8000f80:	f000 fc0a 	bl	8001798 <HAL_SYSTICK_Config>
 8000f84:	b908      	cbnz	r0, 8000f8a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f86:	2d0f      	cmp	r5, #15
 8000f88:	d901      	bls.n	8000f8e <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000f8a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000f8c:	bd38      	pop	{r3, r4, r5, pc}
 8000f8e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f90:	4602      	mov	r2, r0
 8000f92:	4629      	mov	r1, r5
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295
 8000f98:	f000 fbba 	bl	8001710 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f9c:	4b03      	ldr	r3, [pc, #12]	; (8000fac <HAL_InitTick+0x44>)
 8000f9e:	4620      	mov	r0, r4
 8000fa0:	601d      	str	r5, [r3, #0]
}
 8000fa2:	bd38      	pop	{r3, r4, r5, pc}
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	2000000c 	.word	0x2000000c
 8000fac:	20000004 	.word	0x20000004

08000fb0 <HAL_Init>:
{
 8000fb0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <HAL_Init+0x30>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fba:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fc2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fca:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f000 fb8d 	bl	80016ec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f7ff ffc8 	bl	8000f68 <HAL_InitTick>
  HAL_MspInit();
 8000fd8:	f002 ff5e 	bl	8003e98 <HAL_MspInit>
}
 8000fdc:	2000      	movs	r0, #0
 8000fde:	bd08      	pop	{r3, pc}
 8000fe0:	40023c00 	.word	0x40023c00

08000fe4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000fe4:	4a03      	ldr	r2, [pc, #12]	; (8000ff4 <HAL_IncTick+0x10>)
 8000fe6:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <HAL_IncTick+0x14>)
 8000fe8:	6811      	ldr	r1, [r2, #0]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	440b      	add	r3, r1
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000210 	.word	0x20000210
 8000ff8:	20000000 	.word	0x20000000

08000ffc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ffc:	4b01      	ldr	r3, [pc, #4]	; (8001004 <HAL_GetTick+0x8>)
 8000ffe:	6818      	ldr	r0, [r3, #0]
}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000210 	.word	0x20000210

08001008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001008:	b538      	push	{r3, r4, r5, lr}
 800100a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800100c:	f7ff fff6 	bl	8000ffc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001010:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001012:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001014:	d002      	beq.n	800101c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001016:	4b04      	ldr	r3, [pc, #16]	; (8001028 <HAL_Delay+0x20>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800101c:	f7ff ffee 	bl	8000ffc <HAL_GetTick>
 8001020:	1b40      	subs	r0, r0, r5
 8001022:	42a0      	cmp	r0, r4
 8001024:	d3fa      	bcc.n	800101c <HAL_Delay+0x14>
  {
  }
}
 8001026:	bd38      	pop	{r3, r4, r5, pc}
 8001028:	20000000 	.word	0x20000000

0800102c <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800102c:	2800      	cmp	r0, #0
 800102e:	d07c      	beq.n	800112a <HAL_CAN_Init+0xfe>
{
 8001030:	b538      	push	{r3, r4, r5, lr}
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001032:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001036:	4604      	mov	r4, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d073      	beq.n	8001124 <HAL_CAN_Init+0xf8>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800103c:	6822      	ldr	r2, [r4, #0]
 800103e:	6813      	ldr	r3, [r2, #0]
 8001040:	f023 0302 	bic.w	r3, r3, #2
 8001044:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001046:	f7ff ffd9 	bl	8000ffc <HAL_GetTick>
 800104a:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800104c:	e004      	b.n	8001058 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800104e:	f7ff ffd5 	bl	8000ffc <HAL_GetTick>
 8001052:	1b40      	subs	r0, r0, r5
 8001054:	280a      	cmp	r0, #10
 8001056:	d85c      	bhi.n	8001112 <HAL_CAN_Init+0xe6>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001058:	6823      	ldr	r3, [r4, #0]
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	0791      	lsls	r1, r2, #30
 800105e:	d4f6      	bmi.n	800104e <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	f042 0201 	orr.w	r2, r2, #1
 8001066:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001068:	f7ff ffc8 	bl	8000ffc <HAL_GetTick>
 800106c:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800106e:	e004      	b.n	800107a <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001070:	f7ff ffc4 	bl	8000ffc <HAL_GetTick>
 8001074:	1b40      	subs	r0, r0, r5
 8001076:	280a      	cmp	r0, #10
 8001078:	d84b      	bhi.n	8001112 <HAL_CAN_Init+0xe6>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800107a:	6823      	ldr	r3, [r4, #0]
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	07d2      	lsls	r2, r2, #31
 8001080:	d5f6      	bpl.n	8001070 <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001082:	7e22      	ldrb	r2, [r4, #24]
 8001084:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	bf0c      	ite	eq
 800108a:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800108e:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8001092:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001094:	7e62      	ldrb	r2, [r4, #25]
 8001096:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	bf0c      	ite	eq
 800109c:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010a0:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80010a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010a6:	7ea2      	ldrb	r2, [r4, #26]
 80010a8:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	bf0c      	ite	eq
 80010ae:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010b2:	f022 0220 	bicne.w	r2, r2, #32
 80010b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010b8:	7ee2      	ldrb	r2, [r4, #27]
 80010ba:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	bf0c      	ite	eq
 80010c0:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010c4:	f042 0210 	orrne.w	r2, r2, #16
 80010c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010ca:	7f22      	ldrb	r2, [r4, #28]
 80010cc:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	bf0c      	ite	eq
 80010d2:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010d6:	f022 0208 	bicne.w	r2, r2, #8
 80010da:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80010dc:	7f62      	ldrb	r2, [r4, #29]
 80010de:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	bf0c      	ite	eq
 80010e4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010e8:	f022 0204 	bicne.w	r2, r2, #4
 80010ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80010ee:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80010f2:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
 80010f6:	430a      	orrs	r2, r1
 80010f8:	6861      	ldr	r1, [r4, #4]
 80010fa:	432a      	orrs	r2, r5
 80010fc:	4302      	orrs	r2, r0
 80010fe:	3901      	subs	r1, #1
 8001100:	430a      	orrs	r2, r1

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001102:	2501      	movs	r5, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001104:	2100      	movs	r1, #0
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001106:	61da      	str	r2, [r3, #28]

  /* Return function status */
  return HAL_OK;
 8001108:	4608      	mov	r0, r1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800110a:	6261      	str	r1, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800110c:	f884 5020 	strb.w	r5, [r4, #32]
}
 8001110:	bd38      	pop	{r3, r4, r5, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001112:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8001114:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001116:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800111a:	6263      	str	r3, [r4, #36]	; 0x24
      return HAL_ERROR;
 800111c:	2001      	movs	r0, #1
      hcan->State = HAL_CAN_STATE_ERROR;
 800111e:	f884 2020 	strb.w	r2, [r4, #32]
}
 8001122:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8001124:	f001 fe66 	bl	8002df4 <HAL_CAN_MspInit>
 8001128:	e788      	b.n	800103c <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 800112a:	2001      	movs	r0, #1
}
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop

08001130 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001130:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8001134:	3b01      	subs	r3, #1
 8001136:	2b01      	cmp	r3, #1
 8001138:	d905      	bls.n	8001146 <HAL_CAN_ConfigFilter+0x16>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800113a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800113c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001140:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001142:	2001      	movs	r0, #1
  }
}
 8001144:	4770      	bx	lr
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001146:	4b3c      	ldr	r3, [pc, #240]	; (8001238 <HAL_CAN_ConfigFilter+0x108>)
 8001148:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800114c:	f042 0201 	orr.w	r2, r2, #1
{
 8001150:	b4f0      	push	{r4, r5, r6, r7}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001152:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001156:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800115a:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800115e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001162:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001166:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8001168:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800116c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001170:	694a      	ldr	r2, [r1, #20]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001172:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001176:	2401      	movs	r4, #1
 8001178:	f002 001f 	and.w	r0, r2, #31
 800117c:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001180:	43c4      	mvns	r4, r0
 8001182:	4025      	ands	r5, r4
 8001184:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001188:	69cd      	ldr	r5, [r1, #28]
 800118a:	2d00      	cmp	r5, #0
 800118c:	d03a      	beq.n	8001204 <HAL_CAN_ConfigFilter+0xd4>
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800118e:	2d01      	cmp	r5, #1
 8001190:	d115      	bne.n	80011be <HAL_CAN_ConfigFilter+0x8e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001192:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8001196:	4305      	orrs	r5, r0
 8001198:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
 800119c:	00d2      	lsls	r2, r2, #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800119e:	680f      	ldr	r7, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011a0:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011a2:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80011a4:	898b      	ldrh	r3, [r1, #12]
 80011a6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80011aa:	f502 42c8 	add.w	r2, r2, #25600	; 0x6400
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011ae:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011b2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011b6:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011ba:	f8c2 3244 	str.w	r3, [r2, #580]	; 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80011be:	698b      	ldr	r3, [r1, #24]
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80011c0:	4a1d      	ldr	r2, [pc, #116]	; (8001238 <HAL_CAN_ConfigFilter+0x108>)
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80011c2:	bb9b      	cbnz	r3, 800122c <HAL_CAN_ConfigFilter+0xfc>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80011c4:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 80011c8:	4023      	ands	r3, r4
 80011ca:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80011ce:	690b      	ldr	r3, [r1, #16]
 80011d0:	bb2b      	cbnz	r3, 800121e <HAL_CAN_ConfigFilter+0xee>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <HAL_CAN_ConfigFilter+0x108>)
 80011d4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80011d8:	4014      	ands	r4, r2
 80011da:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80011de:	6a0b      	ldr	r3, [r1, #32]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d105      	bne.n	80011f0 <HAL_CAN_ConfigFilter+0xc0>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80011e4:	4a14      	ldr	r2, [pc, #80]	; (8001238 <HAL_CAN_ConfigFilter+0x108>)
 80011e6:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
 80011ea:	4318      	orrs	r0, r3
 80011ec:	f8c2 021c 	str.w	r0, [r2, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011f0:	4a11      	ldr	r2, [pc, #68]	; (8001238 <HAL_CAN_ConfigFilter+0x108>)
 80011f2:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 80011f6:	f023 0301 	bic.w	r3, r3, #1
    return HAL_OK;
 80011fa:	2000      	movs	r0, #0
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011fc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 8001200:	bcf0      	pop	{r4, r5, r6, r7}
 8001202:	4770      	bx	lr
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001204:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8001208:	4025      	ands	r5, r4
 800120a:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
 800120e:	00d2      	lsls	r2, r2, #3
 8001210:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001214:	68cf      	ldr	r7, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001216:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001218:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800121a:	880b      	ldrh	r3, [r1, #0]
 800121c:	e7c5      	b.n	80011aa <HAL_CAN_ConfigFilter+0x7a>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800121e:	4a06      	ldr	r2, [pc, #24]	; (8001238 <HAL_CAN_ConfigFilter+0x108>)
 8001220:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8001224:	4303      	orrs	r3, r0
 8001226:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 800122a:	e7d8      	b.n	80011de <HAL_CAN_ConfigFilter+0xae>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800122c:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 8001230:	4303      	orrs	r3, r0
 8001232:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 8001236:	e7ca      	b.n	80011ce <HAL_CAN_ConfigFilter+0x9e>
 8001238:	40006400 	.word	0x40006400

0800123c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800123c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800123e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d005      	beq.n	8001252 <HAL_CAN_Start+0x16>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001246:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001248:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800124c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800124e:	2001      	movs	r0, #1
  }
}
 8001250:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001252:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001254:	2302      	movs	r3, #2
 8001256:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800125a:	6813      	ldr	r3, [r2, #0]
 800125c:	f023 0301 	bic.w	r3, r3, #1
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8001264:	f7ff feca 	bl	8000ffc <HAL_GetTick>
 8001268:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800126a:	e004      	b.n	8001276 <HAL_CAN_Start+0x3a>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800126c:	f7ff fec6 	bl	8000ffc <HAL_GetTick>
 8001270:	1b40      	subs	r0, r0, r5
 8001272:	280a      	cmp	r0, #10
 8001274:	d807      	bhi.n	8001286 <HAL_CAN_Start+0x4a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001276:	6823      	ldr	r3, [r4, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f013 0301 	ands.w	r3, r3, #1
 800127e:	d1f5      	bne.n	800126c <HAL_CAN_Start+0x30>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001280:	6263      	str	r3, [r4, #36]	; 0x24
    return HAL_OK;
 8001282:	4618      	mov	r0, r3
}
 8001284:	bd38      	pop	{r3, r4, r5, pc}
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001286:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8001288:	2205      	movs	r2, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800128a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800128e:	6263      	str	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 8001290:	2001      	movs	r0, #1
        hcan->State = HAL_CAN_STATE_ERROR;
 8001292:	f884 2020 	strb.w	r2, [r4, #32]
}
 8001296:	bd38      	pop	{r3, r4, r5, pc}

08001298 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001298:	b470      	push	{r4, r5, r6}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800129a:	f890 4020 	ldrb.w	r4, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800129e:	6805      	ldr	r5, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80012a0:	3c01      	subs	r4, #1
 80012a2:	2c01      	cmp	r4, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80012a4:	68ae      	ldr	r6, [r5, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 80012a6:	d906      	bls.n	80012b6 <HAL_CAN_AddTxMessage+0x1e>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80012aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ae:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80012b0:	2001      	movs	r0, #1
  }
}
 80012b2:	bc70      	pop	{r4, r5, r6}
 80012b4:	4770      	bx	lr
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012b6:	f016 5fe0 	tst.w	r6, #469762048	; 0x1c000000
 80012ba:	d02e      	beq.n	800131a <HAL_CAN_AddTxMessage+0x82>
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80012bc:	f3c6 6601 	ubfx	r6, r6, #24, #2
      if (transmitmailbox > 2U)
 80012c0:	2e03      	cmp	r6, #3
 80012c2:	d031      	beq.n	8001328 <HAL_CAN_AddTxMessage+0x90>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80012c4:	2001      	movs	r0, #1
 80012c6:	40b0      	lsls	r0, r6
 80012c8:	6018      	str	r0, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 80012ca:	688b      	ldr	r3, [r1, #8]
 80012cc:	bb93      	cbnz	r3, 8001334 <HAL_CAN_AddTxMessage+0x9c>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012ce:	680c      	ldr	r4, [r1, #0]
 80012d0:	68c8      	ldr	r0, [r1, #12]
 80012d2:	f106 0318 	add.w	r3, r6, #24
 80012d6:	011b      	lsls	r3, r3, #4
 80012d8:	ea40 5044 	orr.w	r0, r0, r4, lsl #21
 80012dc:	50e8      	str	r0, [r5, r3]
      if (pHeader->TransmitGlobalTime == ENABLE)
 80012de:	7d08      	ldrb	r0, [r1, #20]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80012e0:	6909      	ldr	r1, [r1, #16]
 80012e2:	0136      	lsls	r6, r6, #4
 80012e4:	19ab      	adds	r3, r5, r6
      if (pHeader->TransmitGlobalTime == ENABLE)
 80012e6:	2801      	cmp	r0, #1
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80012e8:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 80012ec:	d105      	bne.n	80012fa <HAL_CAN_AddTxMessage+0x62>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80012ee:	f8d3 1184 	ldr.w	r1, [r3, #388]	; 0x184
 80012f2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80012f6:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80012fa:	4435      	add	r5, r6
 80012fc:	6851      	ldr	r1, [r2, #4]
 80012fe:	f8c5 118c 	str.w	r1, [r5, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001302:	6812      	ldr	r2, [r2, #0]
 8001304:	f8c5 2188 	str.w	r2, [r5, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001308:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800130c:	f042 0201 	orr.w	r2, r2, #1
      return HAL_OK;
 8001310:	2000      	movs	r0, #0
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001312:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
 8001316:	bc70      	pop	{r4, r5, r6}
 8001318:	4770      	bx	lr
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800131a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800131c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001320:	6243      	str	r3, [r0, #36]	; 0x24
}
 8001322:	bc70      	pop	{r4, r5, r6}
      return HAL_ERROR;
 8001324:	2001      	movs	r0, #1
}
 8001326:	4770      	bx	lr
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001328:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800132a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800132e:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 8001330:	2001      	movs	r0, #1
 8001332:	e7be      	b.n	80012b2 <HAL_CAN_AddTxMessage+0x1a>
                                                           pHeader->IDE |
 8001334:	68c8      	ldr	r0, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001336:	684c      	ldr	r4, [r1, #4]
                                                           pHeader->IDE |
 8001338:	4303      	orrs	r3, r0
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800133a:	f106 0018 	add.w	r0, r6, #24
 800133e:	0100      	lsls	r0, r0, #4
                                                           pHeader->IDE |
 8001340:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001344:	502b      	str	r3, [r5, r0]
 8001346:	e7ca      	b.n	80012de <HAL_CAN_AddTxMessage+0x46>

08001348 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 800134c:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001350:	3c01      	subs	r4, #1
 8001352:	2c01      	cmp	r4, #1
 8001354:	d906      	bls.n	8001364 <HAL_CAN_GetRxMessage+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001356:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800135c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800135e:	2001      	movs	r0, #1
  }
}
 8001360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001364:	6805      	ldr	r5, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001366:	2900      	cmp	r1, #0
 8001368:	d058      	beq.n	800141c <HAL_CAN_GetRxMessage+0xd4>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800136a:	692c      	ldr	r4, [r5, #16]
 800136c:	07a4      	lsls	r4, r4, #30
 800136e:	d058      	beq.n	8001422 <HAL_CAN_GetRxMessage+0xda>
 8001370:	010c      	lsls	r4, r1, #4
 8001372:	192e      	adds	r6, r5, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001374:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 8001378:	f007 0704 	and.w	r7, r7, #4
 800137c:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800137e:	2f00      	cmp	r7, #0
 8001380:	d15c      	bne.n	800143c <HAL_CAN_GetRxMessage+0xf4>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001382:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 8001386:	0d7f      	lsrs	r7, r7, #21
 8001388:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 800138a:	f8d6 e1b0 	ldr.w	lr, [r6, #432]	; 0x1b0
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800138e:	f8d6 c1b4 	ldr.w	ip, [r6, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001392:	f8d6 71b4 	ldr.w	r7, [r6, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001396:	f8d6 61b4 	ldr.w	r6, [r6, #436]	; 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800139a:	4425      	add	r5, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 800139c:	f3ce 0e40 	ubfx	lr, lr, #1, #1
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80013a0:	f8d5 81b8 	ldr.w	r8, [r5, #440]	; 0x1b8
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80013a4:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80013a8:	f00c 050f 	and.w	r5, ip, #15
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80013ac:	0c36      	lsrs	r6, r6, #16
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80013ae:	e9c2 e503 	strd	lr, r5, [r2, #12]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80013b2:	e9c2 6705 	strd	r6, r7, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80013b6:	f883 8000 	strb.w	r8, [r3]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80013ba:	6802      	ldr	r2, [r0, #0]
 80013bc:	4422      	add	r2, r4
 80013be:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80013c2:	0a12      	lsrs	r2, r2, #8
 80013c4:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80013c6:	6802      	ldr	r2, [r0, #0]
 80013c8:	4422      	add	r2, r4
 80013ca:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80013ce:	0c12      	lsrs	r2, r2, #16
 80013d0:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80013d2:	6802      	ldr	r2, [r0, #0]
 80013d4:	4422      	add	r2, r4
 80013d6:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80013da:	0e12      	lsrs	r2, r2, #24
 80013dc:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80013de:	6802      	ldr	r2, [r0, #0]
 80013e0:	4422      	add	r2, r4
 80013e2:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80013e6:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80013e8:	6802      	ldr	r2, [r0, #0]
 80013ea:	4422      	add	r2, r4
 80013ec:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80013f0:	0a12      	lsrs	r2, r2, #8
 80013f2:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80013f4:	6802      	ldr	r2, [r0, #0]
 80013f6:	4422      	add	r2, r4
 80013f8:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80013fc:	0c12      	lsrs	r2, r2, #16
 80013fe:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001400:	6802      	ldr	r2, [r0, #0]
 8001402:	4414      	add	r4, r2
 8001404:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 8001408:	0e12      	lsrs	r2, r2, #24
 800140a:	71da      	strb	r2, [r3, #7]
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800140c:	6802      	ldr	r2, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800140e:	b979      	cbnz	r1, 8001430 <HAL_CAN_GetRxMessage+0xe8>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001410:	68d3      	ldr	r3, [r2, #12]
 8001412:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 8001416:	4608      	mov	r0, r1
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001418:	60d3      	str	r3, [r2, #12]
 800141a:	e7a1      	b.n	8001360 <HAL_CAN_GetRxMessage+0x18>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800141c:	68ec      	ldr	r4, [r5, #12]
 800141e:	07a6      	lsls	r6, r4, #30
 8001420:	d1a6      	bne.n	8001370 <HAL_CAN_GetRxMessage+0x28>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001422:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001424:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001428:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 800142a:	2001      	movs	r0, #1
}
 800142c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001430:	6913      	ldr	r3, [r2, #16]
 8001432:	f043 0320 	orr.w	r3, r3, #32
 8001436:	6113      	str	r3, [r2, #16]
    return HAL_OK;
 8001438:	2000      	movs	r0, #0
 800143a:	e791      	b.n	8001360 <HAL_CAN_GetRxMessage+0x18>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800143c:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 8001440:	08ff      	lsrs	r7, r7, #3
 8001442:	6057      	str	r7, [r2, #4]
 8001444:	e7a1      	b.n	800138a <HAL_CAN_GetRxMessage+0x42>
 8001446:	bf00      	nop

08001448 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8001448:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800144c:	3b01      	subs	r3, #1
 800144e:	2b01      	cmp	r3, #1
 8001450:	d905      	bls.n	800145e <HAL_CAN_ActivateNotification+0x16>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001452:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001458:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800145a:	2001      	movs	r0, #1
  }
}
 800145c:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800145e:	6802      	ldr	r2, [r0, #0]
 8001460:	6953      	ldr	r3, [r2, #20]
 8001462:	4319      	orrs	r1, r3
 8001464:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8001466:	2000      	movs	r0, #0
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop

0800146c <HAL_CAN_TxMailbox0CompleteCallback>:
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop

08001470 <HAL_CAN_TxMailbox1CompleteCallback>:
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop

08001474 <HAL_CAN_TxMailbox2CompleteCallback>:
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop

08001478 <HAL_CAN_TxMailbox0AbortCallback>:
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop

0800147c <HAL_CAN_TxMailbox1AbortCallback>:
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop

08001480 <HAL_CAN_TxMailbox2AbortCallback>:
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop

08001484 <HAL_CAN_RxFifo0FullCallback>:
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop

08001488 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop

0800148c <HAL_CAN_RxFifo1FullCallback>:
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop

08001490 <HAL_CAN_SleepCallback>:
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop

08001494 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop

08001498 <HAL_CAN_ErrorCallback>:
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop

0800149c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800149c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80014a0:	6803      	ldr	r3, [r0, #0]
 80014a2:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80014a4:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80014a8:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80014aa:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80014ae:	f8d3 9010 	ldr.w	r9, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80014b2:	f8d3 a018 	ldr.w	sl, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80014b6:	f014 0601 	ands.w	r6, r4, #1
{
 80014ba:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80014bc:	d025      	beq.n	800150a <HAL_CAN_IRQHandler+0x6e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80014be:	f017 0601 	ands.w	r6, r7, #1
 80014c2:	f040 809c 	bne.w	80015fe <HAL_CAN_IRQHandler+0x162>
 80014c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80014ce:	05f8      	lsls	r0, r7, #23
 80014d0:	d50d      	bpl.n	80014ee <HAL_CAN_IRQHandler+0x52>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80014d2:	682b      	ldr	r3, [r5, #0]
 80014d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80014d8:	6098      	str	r0, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80014da:	05bb      	lsls	r3, r7, #22
 80014dc:	f100 80c7 	bmi.w	800166e <HAL_CAN_IRQHandler+0x1d2>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80014e0:	0578      	lsls	r0, r7, #21
 80014e2:	f100 80d7 	bmi.w	8001694 <HAL_CAN_IRQHandler+0x1f8>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80014e6:	053a      	lsls	r2, r7, #20
 80014e8:	f140 80e8 	bpl.w	80016bc <HAL_CAN_IRQHandler+0x220>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80014ec:	460e      	mov	r6, r1
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80014ee:	03fb      	lsls	r3, r7, #15
 80014f0:	d50b      	bpl.n	800150a <HAL_CAN_IRQHandler+0x6e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80014f2:	682b      	ldr	r3, [r5, #0]
 80014f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80014f8:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80014fa:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80014fc:	f100 80b3 	bmi.w	8001666 <HAL_CAN_IRQHandler+0x1ca>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001500:	0379      	lsls	r1, r7, #13
 8001502:	f140 80c9 	bpl.w	8001698 <HAL_CAN_IRQHandler+0x1fc>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001506:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800150a:	0723      	lsls	r3, r4, #28
 800150c:	d502      	bpl.n	8001514 <HAL_CAN_IRQHandler+0x78>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800150e:	f01b 0f10 	tst.w	fp, #16
 8001512:	d16e      	bne.n	80015f2 <HAL_CAN_IRQHandler+0x156>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001514:	0767      	lsls	r7, r4, #29
 8001516:	d502      	bpl.n	800151e <HAL_CAN_IRQHandler+0x82>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001518:	f01b 0f08 	tst.w	fp, #8
 800151c:	d17f      	bne.n	800161e <HAL_CAN_IRQHandler+0x182>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800151e:	07a0      	lsls	r0, r4, #30
 8001520:	d504      	bpl.n	800152c <HAL_CAN_IRQHandler+0x90>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001522:	682b      	ldr	r3, [r5, #0]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	0799      	lsls	r1, r3, #30
 8001528:	f040 808e 	bne.w	8001648 <HAL_CAN_IRQHandler+0x1ac>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800152c:	0662      	lsls	r2, r4, #25
 800152e:	d502      	bpl.n	8001536 <HAL_CAN_IRQHandler+0x9a>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001530:	f019 0f10 	tst.w	r9, #16
 8001534:	d157      	bne.n	80015e6 <HAL_CAN_IRQHandler+0x14a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001536:	06a3      	lsls	r3, r4, #26
 8001538:	d503      	bpl.n	8001542 <HAL_CAN_IRQHandler+0xa6>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800153a:	f019 0f08 	tst.w	r9, #8
 800153e:	f040 8087 	bne.w	8001650 <HAL_CAN_IRQHandler+0x1b4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001542:	06e7      	lsls	r7, r4, #27
 8001544:	d504      	bpl.n	8001550 <HAL_CAN_IRQHandler+0xb4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001546:	682b      	ldr	r3, [r5, #0]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	0798      	lsls	r0, r3, #30
 800154c:	f040 8087 	bne.w	800165e <HAL_CAN_IRQHandler+0x1c2>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001550:	03a1      	lsls	r1, r4, #14
 8001552:	d502      	bpl.n	800155a <HAL_CAN_IRQHandler+0xbe>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001554:	f018 0f10 	tst.w	r8, #16
 8001558:	d168      	bne.n	800162c <HAL_CAN_IRQHandler+0x190>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800155a:	03e2      	lsls	r2, r4, #15
 800155c:	d502      	bpl.n	8001564 <HAL_CAN_IRQHandler+0xc8>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800155e:	f018 0f08 	tst.w	r8, #8
 8001562:	d16a      	bne.n	800163a <HAL_CAN_IRQHandler+0x19e>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001564:	0423      	lsls	r3, r4, #16
 8001566:	d535      	bpl.n	80015d4 <HAL_CAN_IRQHandler+0x138>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001568:	f018 0f04 	tst.w	r8, #4
 800156c:	682b      	ldr	r3, [r5, #0]
 800156e:	d02f      	beq.n	80015d0 <HAL_CAN_IRQHandler+0x134>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001570:	05e7      	lsls	r7, r4, #23
 8001572:	d504      	bpl.n	800157e <HAL_CAN_IRQHandler+0xe2>
 8001574:	f01a 0f01 	tst.w	sl, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001578:	bf18      	it	ne
 800157a:	f046 0601 	orrne.w	r6, r6, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800157e:	05a0      	lsls	r0, r4, #22
 8001580:	d504      	bpl.n	800158c <HAL_CAN_IRQHandler+0xf0>
 8001582:	f01a 0f02 	tst.w	sl, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001586:	bf18      	it	ne
 8001588:	f046 0602 	orrne.w	r6, r6, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800158c:	0561      	lsls	r1, r4, #21
 800158e:	d504      	bpl.n	800159a <HAL_CAN_IRQHandler+0xfe>
 8001590:	f01a 0f04 	tst.w	sl, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001594:	bf18      	it	ne
 8001596:	f046 0604 	orrne.w	r6, r6, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800159a:	0522      	lsls	r2, r4, #20
 800159c:	d518      	bpl.n	80015d0 <HAL_CAN_IRQHandler+0x134>
 800159e:	f01a 0a70 	ands.w	sl, sl, #112	; 0x70
 80015a2:	d015      	beq.n	80015d0 <HAL_CAN_IRQHandler+0x134>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 80015a4:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 80015a8:	f000 8096 	beq.w	80016d8 <HAL_CAN_IRQHandler+0x23c>
 80015ac:	d979      	bls.n	80016a2 <HAL_CAN_IRQHandler+0x206>
 80015ae:	f1ba 0f50 	cmp.w	sl, #80	; 0x50
 80015b2:	f000 808e 	beq.w	80016d2 <HAL_CAN_IRQHandler+0x236>
 80015b6:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 80015ba:	f000 8090 	beq.w	80016de <HAL_CAN_IRQHandler+0x242>
 80015be:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 80015c2:	d101      	bne.n	80015c8 <HAL_CAN_IRQHandler+0x12c>
            /* Set CAN error code to Acknowledgement error */
            errorcode |= HAL_CAN_ERROR_ACK;
            break;
          case (CAN_ESR_LEC_2):
            /* Set CAN error code to Bit recessive error */
            errorcode |= HAL_CAN_ERROR_BR;
 80015c4:	f046 0640 	orr.w	r6, r6, #64	; 0x40
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80015c8:	699a      	ldr	r2, [r3, #24]
 80015ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80015ce:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80015d0:	2204      	movs	r2, #4
 80015d2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80015d4:	b12e      	cbz	r6, 80015e2 <HAL_CAN_IRQHandler+0x146>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80015d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80015d8:	431e      	orrs	r6, r3
 80015da:	626e      	str	r6, [r5, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80015dc:	4628      	mov	r0, r5
 80015de:	f7ff ff5b 	bl	8001498 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80015e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80015e6:	682b      	ldr	r3, [r5, #0]
 80015e8:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80015ea:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80015ee:	611a      	str	r2, [r3, #16]
 80015f0:	e7a1      	b.n	8001536 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80015f2:	682b      	ldr	r3, [r5, #0]
 80015f4:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80015f6:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	e78a      	b.n	8001514 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80015fe:	2201      	movs	r2, #1
 8001600:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001602:	07bb      	lsls	r3, r7, #30
 8001604:	d437      	bmi.n	8001676 <HAL_CAN_IRQHandler+0x1da>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001606:	077e      	lsls	r6, r7, #29
 8001608:	d43d      	bmi.n	8001686 <HAL_CAN_IRQHandler+0x1ea>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800160a:	f017 0608 	ands.w	r6, r7, #8
 800160e:	d059      	beq.n	80016c4 <HAL_CAN_IRQHandler+0x228>
 8001610:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001614:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001618:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 800161c:	e757      	b.n	80014ce <HAL_CAN_IRQHandler+0x32>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800161e:	682b      	ldr	r3, [r5, #0]
 8001620:	2208      	movs	r2, #8
 8001622:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001624:	4628      	mov	r0, r5
 8001626:	f7ff ff2d 	bl	8001484 <HAL_CAN_RxFifo0FullCallback>
 800162a:	e778      	b.n	800151e <HAL_CAN_IRQHandler+0x82>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800162c:	682b      	ldr	r3, [r5, #0]
 800162e:	2210      	movs	r2, #16
 8001630:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8001632:	4628      	mov	r0, r5
 8001634:	f7ff ff2c 	bl	8001490 <HAL_CAN_SleepCallback>
 8001638:	e78f      	b.n	800155a <HAL_CAN_IRQHandler+0xbe>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800163a:	682b      	ldr	r3, [r5, #0]
 800163c:	2208      	movs	r2, #8
 800163e:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001640:	4628      	mov	r0, r5
 8001642:	f7ff ff27 	bl	8001494 <HAL_CAN_WakeUpFromRxMsgCallback>
 8001646:	e78d      	b.n	8001564 <HAL_CAN_IRQHandler+0xc8>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001648:	4628      	mov	r0, r5
 800164a:	f001 fe6d 	bl	8003328 <HAL_CAN_RxFifo0MsgPendingCallback>
 800164e:	e76d      	b.n	800152c <HAL_CAN_IRQHandler+0x90>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001650:	682b      	ldr	r3, [r5, #0]
 8001652:	2208      	movs	r2, #8
 8001654:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001656:	4628      	mov	r0, r5
 8001658:	f7ff ff18 	bl	800148c <HAL_CAN_RxFifo1FullCallback>
 800165c:	e771      	b.n	8001542 <HAL_CAN_IRQHandler+0xa6>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800165e:	4628      	mov	r0, r5
 8001660:	f7ff ff12 	bl	8001488 <HAL_CAN_RxFifo1MsgPendingCallback>
 8001664:	e774      	b.n	8001550 <HAL_CAN_IRQHandler+0xb4>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001666:	4628      	mov	r0, r5
 8001668:	f7ff ff04 	bl	8001474 <HAL_CAN_TxMailbox2CompleteCallback>
 800166c:	e74d      	b.n	800150a <HAL_CAN_IRQHandler+0x6e>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800166e:	4628      	mov	r0, r5
 8001670:	f7ff fefe 	bl	8001470 <HAL_CAN_TxMailbox1CompleteCallback>
 8001674:	e73b      	b.n	80014ee <HAL_CAN_IRQHandler+0x52>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001676:	f7ff fef9 	bl	800146c <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800167a:	2600      	movs	r6, #0
 800167c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001680:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001684:	e723      	b.n	80014ce <HAL_CAN_IRQHandler+0x32>
 8001686:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800168a:	f44f 4190 	mov.w	r1, #18432	; 0x4800
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800168e:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8001692:	e71c      	b.n	80014ce <HAL_CAN_IRQHandler+0x32>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001694:	4616      	mov	r6, r2
 8001696:	e72a      	b.n	80014ee <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001698:	033a      	lsls	r2, r7, #12
 800169a:	d50b      	bpl.n	80016b4 <HAL_CAN_IRQHandler+0x218>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800169c:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 80016a0:	e733      	b.n	800150a <HAL_CAN_IRQHandler+0x6e>
        switch (esrflags & CAN_ESR_LEC)
 80016a2:	f1ba 0f10 	cmp.w	sl, #16
 80016a6:	d01d      	beq.n	80016e4 <HAL_CAN_IRQHandler+0x248>
 80016a8:	f1ba 0f20 	cmp.w	sl, #32
 80016ac:	d18c      	bne.n	80015c8 <HAL_CAN_IRQHandler+0x12c>
            errorcode |= HAL_CAN_ERROR_FOR;
 80016ae:	f046 0610 	orr.w	r6, r6, #16
            break;
 80016b2:	e789      	b.n	80015c8 <HAL_CAN_IRQHandler+0x12c>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80016b4:	4628      	mov	r0, r5
 80016b6:	f7ff fee3 	bl	8001480 <HAL_CAN_TxMailbox2AbortCallback>
 80016ba:	e726      	b.n	800150a <HAL_CAN_IRQHandler+0x6e>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80016bc:	4628      	mov	r0, r5
 80016be:	f7ff fedd 	bl	800147c <HAL_CAN_TxMailbox1AbortCallback>
 80016c2:	e714      	b.n	80014ee <HAL_CAN_IRQHandler+0x52>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80016c4:	f7ff fed8 	bl	8001478 <HAL_CAN_TxMailbox0AbortCallback>
 80016c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016d0:	e6fd      	b.n	80014ce <HAL_CAN_IRQHandler+0x32>
            errorcode |= HAL_CAN_ERROR_BD;
 80016d2:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 80016d6:	e777      	b.n	80015c8 <HAL_CAN_IRQHandler+0x12c>
            errorcode |= HAL_CAN_ERROR_ACK;
 80016d8:	f046 0620 	orr.w	r6, r6, #32
            break;
 80016dc:	e774      	b.n	80015c8 <HAL_CAN_IRQHandler+0x12c>
            errorcode |= HAL_CAN_ERROR_CRC;
 80016de:	f446 7680 	orr.w	r6, r6, #256	; 0x100
            break;
 80016e2:	e771      	b.n	80015c8 <HAL_CAN_IRQHandler+0x12c>
            errorcode |= HAL_CAN_ERROR_STF;
 80016e4:	f046 0608 	orr.w	r6, r6, #8
            break;
 80016e8:	e76e      	b.n	80015c8 <HAL_CAN_IRQHandler+0x12c>
 80016ea:	bf00      	nop

080016ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ec:	4a07      	ldr	r2, [pc, #28]	; (800170c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80016ee:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f0:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 80016f4:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f6:	0200      	lsls	r0, r0, #8
 80016f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016fc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001704:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001706:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001710:	4b18      	ldr	r3, [pc, #96]	; (8001774 <HAL_NVIC_SetPriority+0x64>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001718:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800171a:	f1c3 0507 	rsb	r5, r3, #7
 800171e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001720:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001724:	bf28      	it	cs
 8001726:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001728:	2c06      	cmp	r4, #6
 800172a:	d919      	bls.n	8001760 <HAL_NVIC_SetPriority+0x50>
 800172c:	3b03      	subs	r3, #3
 800172e:	f04f 34ff 	mov.w	r4, #4294967295
 8001732:	409c      	lsls	r4, r3
 8001734:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001738:	f04f 32ff 	mov.w	r2, #4294967295
 800173c:	40aa      	lsls	r2, r5
 800173e:	ea21 0102 	bic.w	r1, r1, r2
 8001742:	fa01 f203 	lsl.w	r2, r1, r3
 8001746:	4322      	orrs	r2, r4
 8001748:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 800174a:	2800      	cmp	r0, #0
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	db0a      	blt.n	8001766 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001750:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001754:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001758:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800175c:	bc30      	pop	{r4, r5}
 800175e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001760:	2400      	movs	r4, #0
 8001762:	4623      	mov	r3, r4
 8001764:	e7e8      	b.n	8001738 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001766:	4b04      	ldr	r3, [pc, #16]	; (8001778 <HAL_NVIC_SetPriority+0x68>)
 8001768:	f000 000f 	and.w	r0, r0, #15
 800176c:	4403      	add	r3, r0
 800176e:	761a      	strb	r2, [r3, #24]
 8001770:	bc30      	pop	{r4, r5}
 8001772:	4770      	bx	lr
 8001774:	e000ed00 	.word	0xe000ed00
 8001778:	e000ecfc 	.word	0xe000ecfc

0800177c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800177c:	2800      	cmp	r0, #0
 800177e:	db07      	blt.n	8001790 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001780:	f000 011f 	and.w	r1, r0, #31
 8001784:	2301      	movs	r3, #1
 8001786:	0940      	lsrs	r0, r0, #5
 8001788:	4a02      	ldr	r2, [pc, #8]	; (8001794 <HAL_NVIC_EnableIRQ+0x18>)
 800178a:	408b      	lsls	r3, r1
 800178c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000e100 	.word	0xe000e100

08001798 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001798:	3801      	subs	r0, #1
 800179a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800179e:	d20e      	bcs.n	80017be <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a2:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a4:	4c08      	ldr	r4, [pc, #32]	; (80017c8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a8:	20f0      	movs	r0, #240	; 0xf0
 80017aa:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ae:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b0:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b6:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80017b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017bc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80017be:	2001      	movs	r0, #1
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000e010 	.word	0xe000e010
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017cc:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d003      	beq.n	80017dc <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017d4:	2380      	movs	r3, #128	; 0x80
 80017d6:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80017d8:	2001      	movs	r0, #1
 80017da:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017dc:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80017de:	2305      	movs	r3, #5
 80017e0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80017e4:	6813      	ldr	r3, [r2, #0]
 80017e6:	f023 0301 	bic.w	r3, r3, #1
 80017ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80017ec:	2000      	movs	r0, #0
}
 80017ee:	4770      	bx	lr

080017f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017f4:	f8df c260 	ldr.w	ip, [pc, #608]	; 8001a58 <HAL_GPIO_Init+0x268>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f8:	f8df 8260 	ldr.w	r8, [pc, #608]	; 8001a5c <HAL_GPIO_Init+0x26c>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fc:	f8d1 e000 	ldr.w	lr, [r1]
{
 8001800:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001802:	2500      	movs	r5, #0
 8001804:	e003      	b.n	800180e <HAL_GPIO_Init+0x1e>
 8001806:	3501      	adds	r5, #1
 8001808:	2d10      	cmp	r5, #16
 800180a:	f000 80a4 	beq.w	8001956 <HAL_GPIO_Init+0x166>
    ioposition = 0x01U << position;
 800180e:	2301      	movs	r3, #1
 8001810:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001812:	ea0e 0403 	and.w	r4, lr, r3
    if(iocurrent == ioposition)
 8001816:	42a3      	cmp	r3, r4
 8001818:	d1f5      	bne.n	8001806 <HAL_GPIO_Init+0x16>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800181a:	684e      	ldr	r6, [r1, #4]
 800181c:	f026 0a10 	bic.w	sl, r6, #16
 8001820:	f1ba 0f02 	cmp.w	sl, #2
 8001824:	f000 809a 	beq.w	800195c <HAL_GPIO_Init+0x16c>
 8001828:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800182c:	2203      	movs	r2, #3
      temp = GPIOx->MODER;
 800182e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001832:	fa02 f209 	lsl.w	r2, r2, r9
 8001836:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001838:	f006 0703 	and.w	r7, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800183c:	ea02 0b0b 	and.w	fp, r2, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001840:	fa07 f709 	lsl.w	r7, r7, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001844:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001848:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800184c:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8001850:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001852:	f240 80a9 	bls.w	80019a8 <HAL_GPIO_Init+0x1b8>
      temp = GPIOx->PUPDR;
 8001856:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001858:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800185a:	403a      	ands	r2, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800185c:	fa03 f309 	lsl.w	r3, r3, r9
 8001860:	4313      	orrs	r3, r2
      GPIOx->PUPDR = temp;
 8001862:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001864:	00f3      	lsls	r3, r6, #3
 8001866:	d5ce      	bpl.n	8001806 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001868:	2300      	movs	r3, #0
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8001870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001874:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
 8001878:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800187c:	f025 0203 	bic.w	r2, r5, #3
 8001880:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001884:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001888:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 800188c:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800188e:	f005 0703 	and.w	r7, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001892:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001894:	f8d2 9008 	ldr.w	r9, [r2, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001898:	00bf      	lsls	r7, r7, #2
 800189a:	230f      	movs	r3, #15
 800189c:	40bb      	lsls	r3, r7
 800189e:	ea29 0a03 	bic.w	sl, r9, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018a2:	4b67      	ldr	r3, [pc, #412]	; (8001a40 <HAL_GPIO_Init+0x250>)
 80018a4:	4298      	cmp	r0, r3
 80018a6:	d02e      	beq.n	8001906 <HAL_GPIO_Init+0x116>
 80018a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018ac:	4298      	cmp	r0, r3
 80018ae:	f000 808e 	beq.w	80019ce <HAL_GPIO_Init+0x1de>
 80018b2:	4b64      	ldr	r3, [pc, #400]	; (8001a44 <HAL_GPIO_Init+0x254>)
 80018b4:	4298      	cmp	r0, r3
 80018b6:	f000 8091 	beq.w	80019dc <HAL_GPIO_Init+0x1ec>
 80018ba:	4b63      	ldr	r3, [pc, #396]	; (8001a48 <HAL_GPIO_Init+0x258>)
 80018bc:	4298      	cmp	r0, r3
 80018be:	f000 8094 	beq.w	80019ea <HAL_GPIO_Init+0x1fa>
 80018c2:	4b62      	ldr	r3, [pc, #392]	; (8001a4c <HAL_GPIO_Init+0x25c>)
 80018c4:	4298      	cmp	r0, r3
 80018c6:	f000 8097 	beq.w	80019f8 <HAL_GPIO_Init+0x208>
 80018ca:	4b61      	ldr	r3, [pc, #388]	; (8001a50 <HAL_GPIO_Init+0x260>)
 80018cc:	4298      	cmp	r0, r3
 80018ce:	f000 80a1 	beq.w	8001a14 <HAL_GPIO_Init+0x224>
 80018d2:	4b60      	ldr	r3, [pc, #384]	; (8001a54 <HAL_GPIO_Init+0x264>)
 80018d4:	4298      	cmp	r0, r3
 80018d6:	f000 80a4 	beq.w	8001a22 <HAL_GPIO_Init+0x232>
 80018da:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8001a60 <HAL_GPIO_Init+0x270>
 80018de:	4548      	cmp	r0, r9
 80018e0:	f000 8091 	beq.w	8001a06 <HAL_GPIO_Init+0x216>
 80018e4:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8001a64 <HAL_GPIO_Init+0x274>
 80018e8:	4548      	cmp	r0, r9
 80018ea:	f000 80a1 	beq.w	8001a30 <HAL_GPIO_Init+0x240>
 80018ee:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8001a68 <HAL_GPIO_Init+0x278>
 80018f2:	4548      	cmp	r0, r9
 80018f4:	bf0c      	ite	eq
 80018f6:	f04f 0909 	moveq.w	r9, #9
 80018fa:	f04f 090a 	movne.w	r9, #10
 80018fe:	fa09 f707 	lsl.w	r7, r9, r7
 8001902:	ea4a 0a07 	orr.w	sl, sl, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001906:	f8c2 a008 	str.w	sl, [r2, #8]
        temp = EXTI->IMR;
 800190a:	f8dc 3000 	ldr.w	r3, [ip]
        temp &= ~((uint32_t)iocurrent);
 800190e:	43e2      	mvns	r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001910:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 8001912:	bf54      	ite	pl
 8001914:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001916:	4323      	orrmi	r3, r4
        }
        EXTI->IMR = temp;
 8001918:	f8cc 3000 	str.w	r3, [ip]

        temp = EXTI->EMR;
 800191c:	f8dc 3004 	ldr.w	r3, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001920:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 8001922:	bf54      	ite	pl
 8001924:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001926:	4323      	orrmi	r3, r4
        }
        EXTI->EMR = temp;
 8001928:	f8cc 3004 	str.w	r3, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800192c:	f8dc 3008 	ldr.w	r3, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001930:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 8001932:	bf54      	ite	pl
 8001934:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001936:	4323      	orrmi	r3, r4
        }
        EXTI->RTSR = temp;
 8001938:	f8cc 3008 	str.w	r3, [ip, #8]

        temp = EXTI->FTSR;
 800193c:	f8dc 300c 	ldr.w	r3, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001940:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001942:	f105 0501 	add.w	r5, r5, #1
        temp &= ~((uint32_t)iocurrent);
 8001946:	bf54      	ite	pl
 8001948:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800194a:	4323      	orrmi	r3, r4
  for(position = 0U; position < GPIO_NUMBER; position++)
 800194c:	2d10      	cmp	r5, #16
        }
        EXTI->FTSR = temp;
 800194e:	f8cc 300c 	str.w	r3, [ip, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001952:	f47f af5c 	bne.w	800180e <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8001956:	b003      	add	sp, #12
 8001958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->AFR[position >> 3U];
 800195c:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 8001960:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001964:	f005 0707 	and.w	r7, r5, #7
        temp = GPIOx->AFR[position >> 3U];
 8001968:	f8d9 2020 	ldr.w	r2, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800196c:	00bf      	lsls	r7, r7, #2
 800196e:	f04f 0b0f 	mov.w	fp, #15
 8001972:	fa0b fb07 	lsl.w	fp, fp, r7
 8001976:	ea22 0a0b 	bic.w	sl, r2, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800197a:	690a      	ldr	r2, [r1, #16]
 800197c:	40ba      	lsls	r2, r7
 800197e:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->AFR[position >> 3U] = temp;
 8001982:	f8c9 2020 	str.w	r2, [r9, #32]
 8001986:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800198a:	2203      	movs	r2, #3
      temp = GPIOx->MODER;
 800198c:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001990:	fa02 f209 	lsl.w	r2, r2, r9
 8001994:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001996:	f006 0703 	and.w	r7, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800199a:	ea02 0a0a 	and.w	sl, r2, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800199e:	fa07 f709 	lsl.w	r7, r7, r9
 80019a2:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->MODER = temp;
 80019a6:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 80019a8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019aa:	ea07 0a02 	and.w	sl, r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ae:	68cf      	ldr	r7, [r1, #12]
 80019b0:	fa07 f709 	lsl.w	r7, r7, r9
 80019b4:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80019b8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80019ba:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019be:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019c2:	ea2a 0303 	bic.w	r3, sl, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019c6:	40af      	lsls	r7, r5
 80019c8:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 80019ca:	6047      	str	r7, [r0, #4]
 80019cc:	e743      	b.n	8001856 <HAL_GPIO_Init+0x66>
 80019ce:	f04f 0901 	mov.w	r9, #1
 80019d2:	fa09 f707 	lsl.w	r7, r9, r7
 80019d6:	ea4a 0a07 	orr.w	sl, sl, r7
 80019da:	e794      	b.n	8001906 <HAL_GPIO_Init+0x116>
 80019dc:	f04f 0902 	mov.w	r9, #2
 80019e0:	fa09 f707 	lsl.w	r7, r9, r7
 80019e4:	ea4a 0a07 	orr.w	sl, sl, r7
 80019e8:	e78d      	b.n	8001906 <HAL_GPIO_Init+0x116>
 80019ea:	f04f 0903 	mov.w	r9, #3
 80019ee:	fa09 f707 	lsl.w	r7, r9, r7
 80019f2:	ea4a 0a07 	orr.w	sl, sl, r7
 80019f6:	e786      	b.n	8001906 <HAL_GPIO_Init+0x116>
 80019f8:	f04f 0904 	mov.w	r9, #4
 80019fc:	fa09 f707 	lsl.w	r7, r9, r7
 8001a00:	ea4a 0a07 	orr.w	sl, sl, r7
 8001a04:	e77f      	b.n	8001906 <HAL_GPIO_Init+0x116>
 8001a06:	f04f 0907 	mov.w	r9, #7
 8001a0a:	fa09 f707 	lsl.w	r7, r9, r7
 8001a0e:	ea4a 0a07 	orr.w	sl, sl, r7
 8001a12:	e778      	b.n	8001906 <HAL_GPIO_Init+0x116>
 8001a14:	f04f 0905 	mov.w	r9, #5
 8001a18:	fa09 f707 	lsl.w	r7, r9, r7
 8001a1c:	ea4a 0a07 	orr.w	sl, sl, r7
 8001a20:	e771      	b.n	8001906 <HAL_GPIO_Init+0x116>
 8001a22:	f04f 0906 	mov.w	r9, #6
 8001a26:	fa09 f707 	lsl.w	r7, r9, r7
 8001a2a:	ea4a 0a07 	orr.w	sl, sl, r7
 8001a2e:	e76a      	b.n	8001906 <HAL_GPIO_Init+0x116>
 8001a30:	f04f 0908 	mov.w	r9, #8
 8001a34:	fa09 f707 	lsl.w	r7, r9, r7
 8001a38:	ea4a 0a07 	orr.w	sl, sl, r7
 8001a3c:	e763      	b.n	8001906 <HAL_GPIO_Init+0x116>
 8001a3e:	bf00      	nop
 8001a40:	40020000 	.word	0x40020000
 8001a44:	40020800 	.word	0x40020800
 8001a48:	40020c00 	.word	0x40020c00
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40021400 	.word	0x40021400
 8001a54:	40021800 	.word	0x40021800
 8001a58:	40013c00 	.word	0x40013c00
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40021c00 	.word	0x40021c00
 8001a64:	40022000 	.word	0x40022000
 8001a68:	40022400 	.word	0x40022400

08001a6c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a6c:	b902      	cbnz	r2, 8001a70 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a6e:	0409      	lsls	r1, r1, #16
 8001a70:	6181      	str	r1, [r0, #24]
  }
}
 8001a72:	4770      	bx	lr

08001a74 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001a74:	6943      	ldr	r3, [r0, #20]
 8001a76:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001a7a:	bf08      	it	eq
 8001a7c:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a7e:	6181      	str	r1, [r0, #24]
  }
}
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop

08001a84 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a84:	2800      	cmp	r0, #0
 8001a86:	f000 8132 	beq.w	8001cee <HAL_RCC_OscConfig+0x26a>
{
 8001a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a8e:	6803      	ldr	r3, [r0, #0]
 8001a90:	07dd      	lsls	r5, r3, #31
{
 8001a92:	b082      	sub	sp, #8
 8001a94:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a96:	d52f      	bpl.n	8001af8 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a98:	49ac      	ldr	r1, [pc, #688]	; (8001d4c <HAL_RCC_OscConfig+0x2c8>)
 8001a9a:	688a      	ldr	r2, [r1, #8]
 8001a9c:	f002 020c 	and.w	r2, r2, #12
 8001aa0:	2a04      	cmp	r2, #4
 8001aa2:	f000 80ea 	beq.w	8001c7a <HAL_RCC_OscConfig+0x1f6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aa6:	688a      	ldr	r2, [r1, #8]
 8001aa8:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001aac:	2a08      	cmp	r2, #8
 8001aae:	f000 80e0 	beq.w	8001c72 <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab2:	6863      	ldr	r3, [r4, #4]
 8001ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab8:	f000 80e9 	beq.w	8001c8e <HAL_RCC_OscConfig+0x20a>
 8001abc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ac0:	f000 8154 	beq.w	8001d6c <HAL_RCC_OscConfig+0x2e8>
 8001ac4:	4da1      	ldr	r5, [pc, #644]	; (8001d4c <HAL_RCC_OscConfig+0x2c8>)
 8001ac6:	682a      	ldr	r2, [r5, #0]
 8001ac8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001acc:	602a      	str	r2, [r5, #0]
 8001ace:	682a      	ldr	r2, [r5, #0]
 8001ad0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ad4:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f040 80de 	bne.w	8001c98 <HAL_RCC_OscConfig+0x214>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7ff fa8e 	bl	8000ffc <HAL_GetTick>
 8001ae0:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae2:	e005      	b.n	8001af0 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ae4:	f7ff fa8a 	bl	8000ffc <HAL_GetTick>
 8001ae8:	1b80      	subs	r0, r0, r6
 8001aea:	2864      	cmp	r0, #100	; 0x64
 8001aec:	f200 80f2 	bhi.w	8001cd4 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af0:	682b      	ldr	r3, [r5, #0]
 8001af2:	039b      	lsls	r3, r3, #14
 8001af4:	d4f6      	bmi.n	8001ae4 <HAL_RCC_OscConfig+0x60>
 8001af6:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af8:	079f      	lsls	r7, r3, #30
 8001afa:	d475      	bmi.n	8001be8 <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001afc:	071a      	lsls	r2, r3, #28
 8001afe:	d515      	bpl.n	8001b2c <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b00:	6963      	ldr	r3, [r4, #20]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 80a5 	beq.w	8001c52 <HAL_RCC_OscConfig+0x1ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b08:	4b91      	ldr	r3, [pc, #580]	; (8001d50 <HAL_RCC_OscConfig+0x2cc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b0a:	4d90      	ldr	r5, [pc, #576]	; (8001d4c <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001b10:	f7ff fa74 	bl	8000ffc <HAL_GetTick>
 8001b14:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b16:	e005      	b.n	8001b24 <HAL_RCC_OscConfig+0xa0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b18:	f7ff fa70 	bl	8000ffc <HAL_GetTick>
 8001b1c:	1b80      	subs	r0, r0, r6
 8001b1e:	2802      	cmp	r0, #2
 8001b20:	f200 80d8 	bhi.w	8001cd4 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b24:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001b26:	079b      	lsls	r3, r3, #30
 8001b28:	d5f6      	bpl.n	8001b18 <HAL_RCC_OscConfig+0x94>
 8001b2a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b2c:	0758      	lsls	r0, r3, #29
 8001b2e:	d53b      	bpl.n	8001ba8 <HAL_RCC_OscConfig+0x124>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b30:	4a86      	ldr	r2, [pc, #536]	; (8001d4c <HAL_RCC_OscConfig+0x2c8>)
 8001b32:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001b34:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8001b38:	f040 80db 	bne.w	8001cf2 <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b3c:	9301      	str	r3, [sp, #4]
 8001b3e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b44:	6413      	str	r3, [r2, #64]	; 0x40
 8001b46:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	9301      	str	r3, [sp, #4]
 8001b4e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001b50:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b52:	4d80      	ldr	r5, [pc, #512]	; (8001d54 <HAL_RCC_OscConfig+0x2d0>)
 8001b54:	682a      	ldr	r2, [r5, #0]
 8001b56:	05d1      	lsls	r1, r2, #23
 8001b58:	f140 80ac 	bpl.w	8001cb4 <HAL_RCC_OscConfig+0x230>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b5c:	68a3      	ldr	r3, [r4, #8]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	f000 80c9 	beq.w	8001cf6 <HAL_RCC_OscConfig+0x272>
 8001b64:	2b05      	cmp	r3, #5
 8001b66:	f000 810b 	beq.w	8001d80 <HAL_RCC_OscConfig+0x2fc>
 8001b6a:	4d78      	ldr	r5, [pc, #480]	; (8001d4c <HAL_RCC_OscConfig+0x2c8>)
 8001b6c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001b6e:	f022 0201 	bic.w	r2, r2, #1
 8001b72:	672a      	str	r2, [r5, #112]	; 0x70
 8001b74:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001b76:	f022 0204 	bic.w	r2, r2, #4
 8001b7a:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f040 80bf 	bne.w	8001d00 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b82:	f7ff fa3b 	bl	8000ffc <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b86:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001b8a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b8c:	e006      	b.n	8001b9c <HAL_RCC_OscConfig+0x118>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b8e:	f7ff fa35 	bl	8000ffc <HAL_GetTick>
 8001b92:	eba0 0008 	sub.w	r0, r0, r8
 8001b96:	42b8      	cmp	r0, r7
 8001b98:	f200 809c 	bhi.w	8001cd4 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b9c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b9e:	0798      	lsls	r0, r3, #30
 8001ba0:	d4f5      	bmi.n	8001b8e <HAL_RCC_OscConfig+0x10a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ba2:	2e00      	cmp	r6, #0
 8001ba4:	f040 80dc 	bne.w	8001d60 <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba8:	69a2      	ldr	r2, [r4, #24]
 8001baa:	b1ca      	cbz	r2, 8001be0 <HAL_RCC_OscConfig+0x15c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bac:	4d67      	ldr	r5, [pc, #412]	; (8001d4c <HAL_RCC_OscConfig+0x2c8>)
 8001bae:	68a9      	ldr	r1, [r5, #8]
 8001bb0:	f001 010c 	and.w	r1, r1, #12
 8001bb4:	2908      	cmp	r1, #8
 8001bb6:	d048      	beq.n	8001c4a <HAL_RCC_OscConfig+0x1c6>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bb8:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bba:	4a67      	ldr	r2, [pc, #412]	; (8001d58 <HAL_RCC_OscConfig+0x2d4>)
 8001bbc:	f04f 0100 	mov.w	r1, #0
 8001bc0:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bc2:	f000 80e7 	beq.w	8001d94 <HAL_RCC_OscConfig+0x310>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc6:	f7ff fa19 	bl	8000ffc <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bca:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8001bcc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bce:	e004      	b.n	8001bda <HAL_RCC_OscConfig+0x156>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd0:	f7ff fa14 	bl	8000ffc <HAL_GetTick>
 8001bd4:	1b40      	subs	r0, r0, r5
 8001bd6:	2802      	cmp	r0, #2
 8001bd8:	d87c      	bhi.n	8001cd4 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bda:	6823      	ldr	r3, [r4, #0]
 8001bdc:	019b      	lsls	r3, r3, #6
 8001bde:	d4f7      	bmi.n	8001bd0 <HAL_RCC_OscConfig+0x14c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001be0:	2000      	movs	r0, #0
}
 8001be2:	b002      	add	sp, #8
 8001be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001be8:	4a58      	ldr	r2, [pc, #352]	; (8001d4c <HAL_RCC_OscConfig+0x2c8>)
 8001bea:	6891      	ldr	r1, [r2, #8]
 8001bec:	f011 0f0c 	tst.w	r1, #12
 8001bf0:	d024      	beq.n	8001c3c <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bf2:	6891      	ldr	r1, [r2, #8]
 8001bf4:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bf8:	2908      	cmp	r1, #8
 8001bfa:	d01c      	beq.n	8001c36 <HAL_RCC_OscConfig+0x1b2>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bfc:	68e3      	ldr	r3, [r4, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 8092 	beq.w	8001d28 <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSI_ENABLE();
 8001c04:	4b55      	ldr	r3, [pc, #340]	; (8001d5c <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c06:	4d51      	ldr	r5, [pc, #324]	; (8001d4c <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 8001c08:	2201      	movs	r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c0c:	f7ff f9f6 	bl	8000ffc <HAL_GetTick>
 8001c10:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c12:	e004      	b.n	8001c1e <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c14:	f7ff f9f2 	bl	8000ffc <HAL_GetTick>
 8001c18:	1b80      	subs	r0, r0, r6
 8001c1a:	2802      	cmp	r0, #2
 8001c1c:	d85a      	bhi.n	8001cd4 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1e:	682b      	ldr	r3, [r5, #0]
 8001c20:	0798      	lsls	r0, r3, #30
 8001c22:	d5f7      	bpl.n	8001c14 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c24:	682b      	ldr	r3, [r5, #0]
 8001c26:	6922      	ldr	r2, [r4, #16]
 8001c28:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c2c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001c30:	602b      	str	r3, [r5, #0]
 8001c32:	6823      	ldr	r3, [r4, #0]
 8001c34:	e762      	b.n	8001afc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c36:	6852      	ldr	r2, [r2, #4]
 8001c38:	0256      	lsls	r6, r2, #9
 8001c3a:	d4df      	bmi.n	8001bfc <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3c:	4a43      	ldr	r2, [pc, #268]	; (8001d4c <HAL_RCC_OscConfig+0x2c8>)
 8001c3e:	6812      	ldr	r2, [r2, #0]
 8001c40:	0795      	lsls	r5, r2, #30
 8001c42:	d54b      	bpl.n	8001cdc <HAL_RCC_OscConfig+0x258>
 8001c44:	68e2      	ldr	r2, [r4, #12]
 8001c46:	2a01      	cmp	r2, #1
 8001c48:	d048      	beq.n	8001cdc <HAL_RCC_OscConfig+0x258>
    return HAL_ERROR;
 8001c4a:	2001      	movs	r0, #1
}
 8001c4c:	b002      	add	sp, #8
 8001c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8001c52:	4a3f      	ldr	r2, [pc, #252]	; (8001d50 <HAL_RCC_OscConfig+0x2cc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c54:	4d3d      	ldr	r5, [pc, #244]	; (8001d4c <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 8001c56:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001c58:	f7ff f9d0 	bl	8000ffc <HAL_GetTick>
 8001c5c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c5e:	e004      	b.n	8001c6a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c60:	f7ff f9cc 	bl	8000ffc <HAL_GetTick>
 8001c64:	1b80      	subs	r0, r0, r6
 8001c66:	2802      	cmp	r0, #2
 8001c68:	d834      	bhi.n	8001cd4 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c6a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001c6c:	079f      	lsls	r7, r3, #30
 8001c6e:	d4f7      	bmi.n	8001c60 <HAL_RCC_OscConfig+0x1dc>
 8001c70:	e75b      	b.n	8001b2a <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c72:	684a      	ldr	r2, [r1, #4]
 8001c74:	0250      	lsls	r0, r2, #9
 8001c76:	f57f af1c 	bpl.w	8001ab2 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c7a:	4a34      	ldr	r2, [pc, #208]	; (8001d4c <HAL_RCC_OscConfig+0x2c8>)
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	0391      	lsls	r1, r2, #14
 8001c80:	f57f af3a 	bpl.w	8001af8 <HAL_RCC_OscConfig+0x74>
 8001c84:	6862      	ldr	r2, [r4, #4]
 8001c86:	2a00      	cmp	r2, #0
 8001c88:	f47f af36 	bne.w	8001af8 <HAL_RCC_OscConfig+0x74>
 8001c8c:	e7dd      	b.n	8001c4a <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c8e:	4a2f      	ldr	r2, [pc, #188]	; (8001d4c <HAL_RCC_OscConfig+0x2c8>)
 8001c90:	6813      	ldr	r3, [r2, #0]
 8001c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c96:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001c98:	f7ff f9b0 	bl	8000ffc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9c:	4d2b      	ldr	r5, [pc, #172]	; (8001d4c <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001c9e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca0:	e004      	b.n	8001cac <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ca2:	f7ff f9ab 	bl	8000ffc <HAL_GetTick>
 8001ca6:	1b80      	subs	r0, r0, r6
 8001ca8:	2864      	cmp	r0, #100	; 0x64
 8001caa:	d813      	bhi.n	8001cd4 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cac:	682b      	ldr	r3, [r5, #0]
 8001cae:	039a      	lsls	r2, r3, #14
 8001cb0:	d5f7      	bpl.n	8001ca2 <HAL_RCC_OscConfig+0x21e>
 8001cb2:	e720      	b.n	8001af6 <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cb4:	682a      	ldr	r2, [r5, #0]
 8001cb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cba:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8001cbc:	f7ff f99e 	bl	8000ffc <HAL_GetTick>
 8001cc0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc2:	682b      	ldr	r3, [r5, #0]
 8001cc4:	05da      	lsls	r2, r3, #23
 8001cc6:	f53f af49 	bmi.w	8001b5c <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cca:	f7ff f997 	bl	8000ffc <HAL_GetTick>
 8001cce:	1bc0      	subs	r0, r0, r7
 8001cd0:	2802      	cmp	r0, #2
 8001cd2:	d9f6      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x23e>
            return HAL_TIMEOUT;
 8001cd4:	2003      	movs	r0, #3
}
 8001cd6:	b002      	add	sp, #8
 8001cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cdc:	491b      	ldr	r1, [pc, #108]	; (8001d4c <HAL_RCC_OscConfig+0x2c8>)
 8001cde:	6920      	ldr	r0, [r4, #16]
 8001ce0:	680a      	ldr	r2, [r1, #0]
 8001ce2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001ce6:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001cea:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cec:	e706      	b.n	8001afc <HAL_RCC_OscConfig+0x78>
    return HAL_ERROR;
 8001cee:	2001      	movs	r0, #1
}
 8001cf0:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 8001cf2:	2600      	movs	r6, #0
 8001cf4:	e72d      	b.n	8001b52 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf6:	4a15      	ldr	r2, [pc, #84]	; (8001d4c <HAL_RCC_OscConfig+0x2c8>)
 8001cf8:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001d00:	f7ff f97c 	bl	8000ffc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d04:	4d11      	ldr	r5, [pc, #68]	; (8001d4c <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001d06:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d08:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d0c:	e005      	b.n	8001d1a <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d0e:	f7ff f975 	bl	8000ffc <HAL_GetTick>
 8001d12:	eba0 0008 	sub.w	r0, r0, r8
 8001d16:	42b8      	cmp	r0, r7
 8001d18:	d8dc      	bhi.n	8001cd4 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d1a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001d1c:	079b      	lsls	r3, r3, #30
 8001d1e:	d5f6      	bpl.n	8001d0e <HAL_RCC_OscConfig+0x28a>
    if(pwrclkchanged == SET)
 8001d20:	2e00      	cmp	r6, #0
 8001d22:	f43f af41 	beq.w	8001ba8 <HAL_RCC_OscConfig+0x124>
 8001d26:	e01b      	b.n	8001d60 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_HSI_DISABLE();
 8001d28:	4a0c      	ldr	r2, [pc, #48]	; (8001d5c <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2a:	4d08      	ldr	r5, [pc, #32]	; (8001d4c <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8001d2c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001d2e:	f7ff f965 	bl	8000ffc <HAL_GetTick>
 8001d32:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d34:	e004      	b.n	8001d40 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d36:	f7ff f961 	bl	8000ffc <HAL_GetTick>
 8001d3a:	1b80      	subs	r0, r0, r6
 8001d3c:	2802      	cmp	r0, #2
 8001d3e:	d8c9      	bhi.n	8001cd4 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d40:	682b      	ldr	r3, [r5, #0]
 8001d42:	0799      	lsls	r1, r3, #30
 8001d44:	d4f7      	bmi.n	8001d36 <HAL_RCC_OscConfig+0x2b2>
 8001d46:	6823      	ldr	r3, [r4, #0]
 8001d48:	e6d8      	b.n	8001afc <HAL_RCC_OscConfig+0x78>
 8001d4a:	bf00      	nop
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	42470e80 	.word	0x42470e80
 8001d54:	40007000 	.word	0x40007000
 8001d58:	42470060 	.word	0x42470060
 8001d5c:	42470000 	.word	0x42470000
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d60:	4a23      	ldr	r2, [pc, #140]	; (8001df0 <HAL_RCC_OscConfig+0x36c>)
 8001d62:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d68:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6a:	e71d      	b.n	8001ba8 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d6c:	4b20      	ldr	r3, [pc, #128]	; (8001df0 <HAL_RCC_OscConfig+0x36c>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	e78b      	b.n	8001c98 <HAL_RCC_OscConfig+0x214>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d80:	4b1b      	ldr	r3, [pc, #108]	; (8001df0 <HAL_RCC_OscConfig+0x36c>)
 8001d82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d84:	f042 0204 	orr.w	r2, r2, #4
 8001d88:	671a      	str	r2, [r3, #112]	; 0x70
 8001d8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d8c:	f042 0201 	orr.w	r2, r2, #1
 8001d90:	671a      	str	r2, [r3, #112]	; 0x70
 8001d92:	e7b5      	b.n	8001d00 <HAL_RCC_OscConfig+0x27c>
        tickstart = HAL_GetTick();
 8001d94:	f7ff f932 	bl	8000ffc <HAL_GetTick>
 8001d98:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d9a:	e004      	b.n	8001da6 <HAL_RCC_OscConfig+0x322>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7ff f92e 	bl	8000ffc <HAL_GetTick>
 8001da0:	1b80      	subs	r0, r0, r6
 8001da2:	2802      	cmp	r0, #2
 8001da4:	d896      	bhi.n	8001cd4 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da6:	682b      	ldr	r3, [r5, #0]
 8001da8:	0199      	lsls	r1, r3, #6
 8001daa:	d4f7      	bmi.n	8001d9c <HAL_RCC_OscConfig+0x318>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dac:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 8001db0:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8001db4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db6:	4c0e      	ldr	r4, [pc, #56]	; (8001df0 <HAL_RCC_OscConfig+0x36c>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001db8:	4333      	orrs	r3, r6
 8001dba:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001dbe:	0852      	lsrs	r2, r2, #1
 8001dc0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001dc4:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8001dc6:	490b      	ldr	r1, [pc, #44]	; (8001df4 <HAL_RCC_OscConfig+0x370>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8001dcc:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dce:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001dd0:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8001dd2:	f7ff f913 	bl	8000ffc <HAL_GetTick>
 8001dd6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd8:	e005      	b.n	8001de6 <HAL_RCC_OscConfig+0x362>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dda:	f7ff f90f 	bl	8000ffc <HAL_GetTick>
 8001dde:	1b40      	subs	r0, r0, r5
 8001de0:	2802      	cmp	r0, #2
 8001de2:	f63f af77 	bhi.w	8001cd4 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de6:	6823      	ldr	r3, [r4, #0]
 8001de8:	019a      	lsls	r2, r3, #6
 8001dea:	d5f6      	bpl.n	8001dda <HAL_RCC_OscConfig+0x356>
 8001dec:	e6f8      	b.n	8001be0 <HAL_RCC_OscConfig+0x15c>
 8001dee:	bf00      	nop
 8001df0:	40023800 	.word	0x40023800
 8001df4:	42470060 	.word	0x42470060

08001df8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001df8:	4917      	ldr	r1, [pc, #92]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x60>)
{
 8001dfa:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dfc:	688b      	ldr	r3, [r1, #8]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d01b      	beq.n	8001e3e <HAL_RCC_GetSysClockFreq+0x46>
 8001e06:	2b08      	cmp	r3, #8
 8001e08:	d117      	bne.n	8001e3a <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e0a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e0c:	684b      	ldr	r3, [r1, #4]
 8001e0e:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e12:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e16:	d114      	bne.n	8001e42 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e18:	6849      	ldr	r1, [r1, #4]
 8001e1a:	4810      	ldr	r0, [pc, #64]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x64>)
 8001e1c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001e20:	fba1 0100 	umull	r0, r1, r1, r0
 8001e24:	f7fe ff20 	bl	8000c68 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x60>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001e30:	3301      	adds	r3, #1
 8001e32:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001e34:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001e38:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8001e3a:	4808      	ldr	r0, [pc, #32]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001e3c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001e3e:	4808      	ldr	r0, [pc, #32]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8001e40:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e42:	684b      	ldr	r3, [r1, #4]
 8001e44:	4806      	ldr	r0, [pc, #24]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x68>)
 8001e46:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001e4a:	fba3 0100 	umull	r0, r1, r3, r0
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f7fe ff0a 	bl	8000c68 <__aeabi_uldivmod>
 8001e54:	e7e8      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0x30>
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	00f42400 	.word	0x00f42400
 8001e60:	00b71b00 	.word	0x00b71b00

08001e64 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001e64:	b160      	cbz	r0, 8001e80 <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e66:	4a48      	ldr	r2, [pc, #288]	; (8001f88 <HAL_RCC_ClockConfig+0x124>)
 8001e68:	6813      	ldr	r3, [r2, #0]
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	428b      	cmp	r3, r1
 8001e70:	d208      	bcs.n	8001e84 <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e72:	b2cb      	uxtb	r3, r1
 8001e74:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e76:	6813      	ldr	r3, [r2, #0]
 8001e78:	f003 030f 	and.w	r3, r3, #15
 8001e7c:	428b      	cmp	r3, r1
 8001e7e:	d001      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 8001e80:	2001      	movs	r0, #1
}
 8001e82:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e84:	6803      	ldr	r3, [r0, #0]
{
 8001e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e8a:	079d      	lsls	r5, r3, #30
 8001e8c:	d514      	bpl.n	8001eb8 <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e8e:	075c      	lsls	r4, r3, #29
 8001e90:	d504      	bpl.n	8001e9c <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e92:	4c3e      	ldr	r4, [pc, #248]	; (8001f8c <HAL_RCC_ClockConfig+0x128>)
 8001e94:	68a2      	ldr	r2, [r4, #8]
 8001e96:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001e9a:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e9c:	071a      	lsls	r2, r3, #28
 8001e9e:	d504      	bpl.n	8001eaa <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ea0:	4c3a      	ldr	r4, [pc, #232]	; (8001f8c <HAL_RCC_ClockConfig+0x128>)
 8001ea2:	68a2      	ldr	r2, [r4, #8]
 8001ea4:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001ea8:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eaa:	4c38      	ldr	r4, [pc, #224]	; (8001f8c <HAL_RCC_ClockConfig+0x128>)
 8001eac:	6885      	ldr	r5, [r0, #8]
 8001eae:	68a2      	ldr	r2, [r4, #8]
 8001eb0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001eb4:	432a      	orrs	r2, r5
 8001eb6:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eb8:	07df      	lsls	r7, r3, #31
 8001eba:	4604      	mov	r4, r0
 8001ebc:	460d      	mov	r5, r1
 8001ebe:	d522      	bpl.n	8001f06 <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ec0:	6842      	ldr	r2, [r0, #4]
 8001ec2:	2a01      	cmp	r2, #1
 8001ec4:	d056      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x110>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ec6:	1e93      	subs	r3, r2, #2
 8001ec8:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eca:	4b30      	ldr	r3, [pc, #192]	; (8001f8c <HAL_RCC_ClockConfig+0x128>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ece:	d958      	bls.n	8001f82 <HAL_RCC_ClockConfig+0x11e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed0:	0799      	lsls	r1, r3, #30
 8001ed2:	d525      	bpl.n	8001f20 <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ed4:	4e2d      	ldr	r6, [pc, #180]	; (8001f8c <HAL_RCC_ClockConfig+0x128>)
 8001ed6:	68b3      	ldr	r3, [r6, #8]
 8001ed8:	f023 0303 	bic.w	r3, r3, #3
 8001edc:	4313      	orrs	r3, r2
 8001ede:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001ee0:	f7ff f88c 	bl	8000ffc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee4:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001ee8:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eea:	e005      	b.n	8001ef8 <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eec:	f7ff f886 	bl	8000ffc <HAL_GetTick>
 8001ef0:	eba0 0008 	sub.w	r0, r0, r8
 8001ef4:	42b8      	cmp	r0, r7
 8001ef6:	d842      	bhi.n	8001f7e <HAL_RCC_ClockConfig+0x11a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef8:	68b3      	ldr	r3, [r6, #8]
 8001efa:	6862      	ldr	r2, [r4, #4]
 8001efc:	f003 030c 	and.w	r3, r3, #12
 8001f00:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001f04:	d1f2      	bne.n	8001eec <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f06:	4a20      	ldr	r2, [pc, #128]	; (8001f88 <HAL_RCC_ClockConfig+0x124>)
 8001f08:	6813      	ldr	r3, [r2, #0]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	42ab      	cmp	r3, r5
 8001f10:	d909      	bls.n	8001f26 <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f12:	b2eb      	uxtb	r3, r5
 8001f14:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f16:	6813      	ldr	r3, [r2, #0]
 8001f18:	f003 030f 	and.w	r3, r3, #15
 8001f1c:	42ab      	cmp	r3, r5
 8001f1e:	d002      	beq.n	8001f26 <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 8001f20:	2001      	movs	r0, #1
}
 8001f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	075a      	lsls	r2, r3, #29
 8001f2a:	d506      	bpl.n	8001f3a <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f2c:	4917      	ldr	r1, [pc, #92]	; (8001f8c <HAL_RCC_ClockConfig+0x128>)
 8001f2e:	68e0      	ldr	r0, [r4, #12]
 8001f30:	688a      	ldr	r2, [r1, #8]
 8001f32:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8001f36:	4302      	orrs	r2, r0
 8001f38:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f3a:	071b      	lsls	r3, r3, #28
 8001f3c:	d411      	bmi.n	8001f62 <HAL_RCC_ClockConfig+0xfe>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f3e:	f7ff ff5b 	bl	8001df8 <HAL_RCC_GetSysClockFreq>
 8001f42:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <HAL_RCC_ClockConfig+0x128>)
 8001f44:	4912      	ldr	r1, [pc, #72]	; (8001f90 <HAL_RCC_ClockConfig+0x12c>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	4a12      	ldr	r2, [pc, #72]	; (8001f94 <HAL_RCC_ClockConfig+0x130>)
 8001f4a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001f4e:	5ccb      	ldrb	r3, [r1, r3]
 8001f50:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f54:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f56:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f58:	f7ff f806 	bl	8000f68 <HAL_InitTick>
  return HAL_OK;
 8001f5c:	2000      	movs	r0, #0
}
 8001f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f62:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <HAL_RCC_ClockConfig+0x128>)
 8001f64:	6921      	ldr	r1, [r4, #16]
 8001f66:	6893      	ldr	r3, [r2, #8]
 8001f68:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001f6c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001f70:	6093      	str	r3, [r2, #8]
 8001f72:	e7e4      	b.n	8001f3e <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <HAL_RCC_ClockConfig+0x128>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	039e      	lsls	r6, r3, #14
 8001f7a:	d4ab      	bmi.n	8001ed4 <HAL_RCC_ClockConfig+0x70>
 8001f7c:	e7d0      	b.n	8001f20 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8001f7e:	2003      	movs	r0, #3
 8001f80:	e7ed      	b.n	8001f5e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f82:	0198      	lsls	r0, r3, #6
 8001f84:	d4a6      	bmi.n	8001ed4 <HAL_RCC_ClockConfig+0x70>
 8001f86:	e7cb      	b.n	8001f20 <HAL_RCC_ClockConfig+0xbc>
 8001f88:	40023c00 	.word	0x40023c00
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	08006f94 	.word	0x08006f94
 8001f94:	2000000c 	.word	0x2000000c

08001f98 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f98:	4b04      	ldr	r3, [pc, #16]	; (8001fac <HAL_RCC_GetPCLK1Freq+0x14>)
 8001f9a:	4a05      	ldr	r2, [pc, #20]	; (8001fb0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8001f9e:	4905      	ldr	r1, [pc, #20]	; (8001fb4 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fa0:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001fa4:	6808      	ldr	r0, [r1, #0]
 8001fa6:	5cd3      	ldrb	r3, [r2, r3]
}
 8001fa8:	40d8      	lsrs	r0, r3
 8001faa:	4770      	bx	lr
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	08006fa4 	.word	0x08006fa4
 8001fb4:	2000000c 	.word	0x2000000c

08001fb8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fb8:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <HAL_RCC_GetPCLK2Freq+0x14>)
 8001fba:	4a05      	ldr	r2, [pc, #20]	; (8001fd0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8001fbe:	4905      	ldr	r1, [pc, #20]	; (8001fd4 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fc0:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001fc4:	6808      	ldr	r0, [r1, #0]
 8001fc6:	5cd3      	ldrb	r3, [r2, r3]
}
 8001fc8:	40d8      	lsrs	r0, r3
 8001fca:	4770      	bx	lr
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	08006fa4 	.word	0x08006fa4
 8001fd4:	2000000c 	.word	0x2000000c

08001fd8 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fd8:	2800      	cmp	r0, #0
 8001fda:	d03b      	beq.n	8002054 <HAL_SPI_Init+0x7c>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fdc:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fe0:	2300      	movs	r3, #0
{
 8001fe2:	b570      	push	{r4, r5, r6, lr}
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fe4:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8001fe8:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fea:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fec:	b362      	cbz	r2, 8002048 <HAL_SPI_Init+0x70>
 8001fee:	4618      	mov	r0, r3
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001ff0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8001ff4:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 8001ff8:	432b      	orrs	r3, r5
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	6962      	ldr	r2, [r4, #20]
 8001ffe:	69e5      	ldr	r5, [r4, #28]
 8002000:	6a26      	ldr	r6, [r4, #32]
 8002002:	430b      	orrs	r3, r1
 8002004:	4313      	orrs	r3, r2
 8002006:	69a2      	ldr	r2, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8002008:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800200a:	432b      	orrs	r3, r5
  hspi->State = HAL_SPI_STATE_BUSY;
 800200c:	2502      	movs	r5, #2
 800200e:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002012:	4333      	orrs	r3, r6
 8002014:	f402 7500 	and.w	r5, r2, #512	; 0x200
  __HAL_SPI_DISABLE(hspi);
 8002018:	680e      	ldr	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800201a:	432b      	orrs	r3, r5
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800201c:	0c12      	lsrs	r2, r2, #16
 800201e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002020:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002024:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002026:	432a      	orrs	r2, r5
  __HAL_SPI_DISABLE(hspi);
 8002028:	f026 0640 	bic.w	r6, r6, #64	; 0x40
 800202c:	600e      	str	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800202e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002030:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002032:	69cb      	ldr	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002034:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002036:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 800203a:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800203c:	61cb      	str	r3, [r1, #28]

  return HAL_OK;
 800203e:	4610      	mov	r0, r2
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002040:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002042:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
}
 8002046:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002048:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800204c:	f001 feec 	bl	8003e28 <HAL_SPI_MspInit>
 8002050:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002052:	e7cd      	b.n	8001ff0 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8002054:	2001      	movs	r0, #1
}
 8002056:	4770      	bx	lr

08002058 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002058:	2800      	cmp	r0, #0
 800205a:	d05c      	beq.n	8002116 <HAL_TIM_Base_Init+0xbe>
{
 800205c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800205e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002062:	4604      	mov	r4, r0
 8002064:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002068:	b3bb      	cbz	r3, 80020da <HAL_TIM_Base_Init+0x82>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800206a:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800206c:	4e3a      	ldr	r6, [pc, #232]	; (8002158 <HAL_TIM_Base_Init+0x100>)
 800206e:	69a5      	ldr	r5, [r4, #24]
 8002070:	68e0      	ldr	r0, [r4, #12]
 8002072:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8002074:	2302      	movs	r3, #2
 8002076:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800207a:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 800207c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800207e:	d04c      	beq.n	800211a <HAL_TIM_Base_Init+0xc2>
 8002080:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002084:	d058      	beq.n	8002138 <HAL_TIM_Base_Init+0xe0>
 8002086:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 800208a:	42b2      	cmp	r2, r6
 800208c:	d02a      	beq.n	80020e4 <HAL_TIM_Base_Init+0x8c>
 800208e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002092:	42b2      	cmp	r2, r6
 8002094:	d026      	beq.n	80020e4 <HAL_TIM_Base_Init+0x8c>
 8002096:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800209a:	42b2      	cmp	r2, r6
 800209c:	d022      	beq.n	80020e4 <HAL_TIM_Base_Init+0x8c>
 800209e:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 80020a2:	42b2      	cmp	r2, r6
 80020a4:	d01e      	beq.n	80020e4 <HAL_TIM_Base_Init+0x8c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020a6:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 80020aa:	42b2      	cmp	r2, r6
 80020ac:	d013      	beq.n	80020d6 <HAL_TIM_Base_Init+0x7e>
 80020ae:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80020b2:	42b2      	cmp	r2, r6
 80020b4:	d00f      	beq.n	80020d6 <HAL_TIM_Base_Init+0x7e>
 80020b6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80020ba:	42b2      	cmp	r2, r6
 80020bc:	d00b      	beq.n	80020d6 <HAL_TIM_Base_Init+0x7e>
 80020be:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 80020c2:	42b2      	cmp	r2, r6
 80020c4:	d007      	beq.n	80020d6 <HAL_TIM_Base_Init+0x7e>
 80020c6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80020ca:	42b2      	cmp	r2, r6
 80020cc:	d003      	beq.n	80020d6 <HAL_TIM_Base_Init+0x7e>
 80020ce:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80020d2:	42b2      	cmp	r2, r6
 80020d4:	d138      	bne.n	8002148 <HAL_TIM_Base_Init+0xf0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020d6:	6926      	ldr	r6, [r4, #16]
 80020d8:	e033      	b.n	8002142 <HAL_TIM_Base_Init+0xea>
    htim->Lock = HAL_UNLOCKED;
 80020da:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80020de:	f002 f92f 	bl	8004340 <HAL_TIM_Base_MspInit>
 80020e2:	e7c2      	b.n	800206a <HAL_TIM_Base_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 80020e4:	68a6      	ldr	r6, [r4, #8]
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020e6:	4f1d      	ldr	r7, [pc, #116]	; (800215c <HAL_TIM_Base_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80020ec:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020ee:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80020f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020f4:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020fa:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020fc:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 80020fe:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002100:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002102:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002104:	d101      	bne.n	800210a <HAL_TIM_Base_Init+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002106:	6963      	ldr	r3, [r4, #20]
 8002108:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800210a:	2301      	movs	r3, #1
 800210c:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 800210e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002110:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002116:	2001      	movs	r0, #1
}
 8002118:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800211a:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800211c:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800211e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002122:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8002124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002128:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800212a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800212e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002130:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002132:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002134:	6291      	str	r1, [r2, #40]	; 0x28
 8002136:	e7e6      	b.n	8002106 <HAL_TIM_Base_Init+0xae>
    tmpcr1 |= Structure->CounterMode;
 8002138:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800213a:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800213c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002140:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8002142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002146:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002148:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800214c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800214e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002150:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002152:	6291      	str	r1, [r2, #40]	; 0x28
 8002154:	e7d9      	b.n	800210a <HAL_TIM_Base_Init+0xb2>
 8002156:	bf00      	nop
 8002158:	40010000 	.word	0x40010000
 800215c:	40010400 	.word	0x40010400

08002160 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002160:	6803      	ldr	r3, [r0, #0]
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	f042 0201 	orr.w	r2, r2, #1
 8002168:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002170:	2a06      	cmp	r2, #6
 8002172:	d003      	beq.n	800217c <HAL_TIM_Base_Start_IT+0x1c>
    __HAL_TIM_ENABLE(htim);
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	f042 0201 	orr.w	r2, r2, #1
 800217a:	601a      	str	r2, [r3, #0]
}
 800217c:	2000      	movs	r0, #0
 800217e:	4770      	bx	lr

08002180 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002180:	2800      	cmp	r0, #0
 8002182:	d05c      	beq.n	800223e <HAL_TIM_PWM_Init+0xbe>
{
 8002184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8002186:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800218a:	4604      	mov	r4, r0
 800218c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002190:	b3bb      	cbz	r3, 8002202 <HAL_TIM_PWM_Init+0x82>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002192:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002194:	4e3a      	ldr	r6, [pc, #232]	; (8002280 <HAL_TIM_PWM_Init+0x100>)
 8002196:	69a5      	ldr	r5, [r4, #24]
 8002198:	68e0      	ldr	r0, [r4, #12]
 800219a:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 800219c:	2302      	movs	r3, #2
 800219e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021a2:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 80021a4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021a6:	d04c      	beq.n	8002242 <HAL_TIM_PWM_Init+0xc2>
 80021a8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80021ac:	d058      	beq.n	8002260 <HAL_TIM_PWM_Init+0xe0>
 80021ae:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 80021b2:	42b2      	cmp	r2, r6
 80021b4:	d02a      	beq.n	800220c <HAL_TIM_PWM_Init+0x8c>
 80021b6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80021ba:	42b2      	cmp	r2, r6
 80021bc:	d026      	beq.n	800220c <HAL_TIM_PWM_Init+0x8c>
 80021be:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80021c2:	42b2      	cmp	r2, r6
 80021c4:	d022      	beq.n	800220c <HAL_TIM_PWM_Init+0x8c>
 80021c6:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 80021ca:	42b2      	cmp	r2, r6
 80021cc:	d01e      	beq.n	800220c <HAL_TIM_PWM_Init+0x8c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ce:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 80021d2:	42b2      	cmp	r2, r6
 80021d4:	d013      	beq.n	80021fe <HAL_TIM_PWM_Init+0x7e>
 80021d6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80021da:	42b2      	cmp	r2, r6
 80021dc:	d00f      	beq.n	80021fe <HAL_TIM_PWM_Init+0x7e>
 80021de:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80021e2:	42b2      	cmp	r2, r6
 80021e4:	d00b      	beq.n	80021fe <HAL_TIM_PWM_Init+0x7e>
 80021e6:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 80021ea:	42b2      	cmp	r2, r6
 80021ec:	d007      	beq.n	80021fe <HAL_TIM_PWM_Init+0x7e>
 80021ee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80021f2:	42b2      	cmp	r2, r6
 80021f4:	d003      	beq.n	80021fe <HAL_TIM_PWM_Init+0x7e>
 80021f6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80021fa:	42b2      	cmp	r2, r6
 80021fc:	d138      	bne.n	8002270 <HAL_TIM_PWM_Init+0xf0>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021fe:	6926      	ldr	r6, [r4, #16]
 8002200:	e033      	b.n	800226a <HAL_TIM_PWM_Init+0xea>
    htim->Lock = HAL_UNLOCKED;
 8002202:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002206:	f002 f86f 	bl	80042e8 <HAL_TIM_PWM_MspInit>
 800220a:	e7c2      	b.n	8002192 <HAL_TIM_PWM_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 800220c:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800220e:	4f1d      	ldr	r7, [pc, #116]	; (8002284 <HAL_TIM_PWM_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002214:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002216:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800221c:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800221e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002222:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002224:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 8002226:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002228:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800222a:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800222c:	d101      	bne.n	8002232 <HAL_TIM_PWM_Init+0xb2>
    TIMx->RCR = Structure->RepetitionCounter;
 800222e:	6963      	ldr	r3, [r4, #20]
 8002230:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002232:	2301      	movs	r3, #1
 8002234:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8002236:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002238:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800223c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800223e:	2001      	movs	r0, #1
}
 8002240:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8002242:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002244:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800224a:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 800224c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002250:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002252:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002256:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002258:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800225a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800225c:	6291      	str	r1, [r2, #40]	; 0x28
 800225e:	e7e6      	b.n	800222e <HAL_TIM_PWM_Init+0xae>
    tmpcr1 |= Structure->CounterMode;
 8002260:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002262:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002268:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 800226a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800226e:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002274:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002276:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002278:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800227a:	6291      	str	r1, [r2, #40]	; 0x28
 800227c:	e7d9      	b.n	8002232 <HAL_TIM_PWM_Init+0xb2>
 800227e:	bf00      	nop
 8002280:	40010000 	.word	0x40010000
 8002284:	40010400 	.word	0x40010400

08002288 <HAL_TIM_PWM_Start>:
 8002288:	6803      	ldr	r3, [r0, #0]
 800228a:	2201      	movs	r2, #1
 800228c:	6a18      	ldr	r0, [r3, #32]
 800228e:	f001 011f 	and.w	r1, r1, #31
 8002292:	fa02 f101 	lsl.w	r1, r2, r1
 8002296:	ea20 0001 	bic.w	r0, r0, r1
 800229a:	b410      	push	{r4}
 800229c:	6218      	str	r0, [r3, #32]
 800229e:	6a1a      	ldr	r2, [r3, #32]
 80022a0:	4c0c      	ldr	r4, [pc, #48]	; (80022d4 <HAL_TIM_PWM_Start+0x4c>)
 80022a2:	4311      	orrs	r1, r2
 80022a4:	42a3      	cmp	r3, r4
 80022a6:	6219      	str	r1, [r3, #32]
 80022a8:	d00f      	beq.n	80022ca <HAL_TIM_PWM_Start+0x42>
 80022aa:	4a0b      	ldr	r2, [pc, #44]	; (80022d8 <HAL_TIM_PWM_Start+0x50>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d00c      	beq.n	80022ca <HAL_TIM_PWM_Start+0x42>
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	f002 0207 	and.w	r2, r2, #7
 80022b6:	2a06      	cmp	r2, #6
 80022b8:	d003      	beq.n	80022c2 <HAL_TIM_PWM_Start+0x3a>
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	f042 0201 	orr.w	r2, r2, #1
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	2000      	movs	r0, #0
 80022c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022d0:	645a      	str	r2, [r3, #68]	; 0x44
 80022d2:	e7ed      	b.n	80022b0 <HAL_TIM_PWM_Start+0x28>
 80022d4:	40010000 	.word	0x40010000
 80022d8:	40010400 	.word	0x40010400

080022dc <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80022dc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	f000 80cc 	beq.w	800247e <HAL_TIM_PWM_ConfigChannel+0x1a2>
{
 80022e6:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80022e8:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80022ea:	2401      	movs	r4, #1
 80022ec:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80022f0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 80022f4:	2a0c      	cmp	r2, #12
 80022f6:	d835      	bhi.n	8002364 <HAL_TIM_PWM_ConfigChannel+0x88>
 80022f8:	e8df f002 	tbb	[pc, r2]
 80022fc:	34343407 	.word	0x34343407
 8002300:	3434346a 	.word	0x3434346a
 8002304:	34343496 	.word	0x34343496
 8002308:	3d          	.byte	0x3d
 8002309:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800230a:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800230c:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002310:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8002312:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002314:	4e74      	ldr	r6, [pc, #464]	; (80024e8 <HAL_TIM_PWM_ConfigChannel+0x20c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002316:	f025 0501 	bic.w	r5, r5, #1
 800231a:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800231c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800231e:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8002320:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8002322:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002326:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800232a:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 800232c:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmrx |= OC_Config->OCMode;
 8002330:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002334:	f000 80bb 	beq.w	80024ae <HAL_TIM_PWM_ConfigChannel+0x1d2>
 8002338:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800233c:	42b3      	cmp	r3, r6
 800233e:	f000 80b6 	beq.w	80024ae <HAL_TIM_PWM_ConfigChannel+0x1d2>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002342:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002344:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002346:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002348:	635e      	str	r6, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800234a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800234c:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800234e:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002350:	f044 0408 	orr.w	r4, r4, #8
 8002354:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002356:	6999      	ldr	r1, [r3, #24]
 8002358:	f021 0104 	bic.w	r1, r1, #4
 800235c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800235e:	699a      	ldr	r2, [r3, #24]
 8002360:	432a      	orrs	r2, r5
 8002362:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8002364:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002366:	2201      	movs	r2, #1
 8002368:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800236c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8002370:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8002372:	4618      	mov	r0, r3
}
 8002374:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002376:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002378:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800237c:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800237e:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002380:	4e59      	ldr	r6, [pc, #356]	; (80024e8 <HAL_TIM_PWM_ConfigChannel+0x20c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002382:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8002386:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8002388:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800238a:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800238c:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 800238e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002392:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002396:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002398:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800239c:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023a0:	d06f      	beq.n	8002482 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 80023a2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80023a6:	42b3      	cmp	r3, r6
 80023a8:	d06b      	beq.n	8002482 <HAL_TIM_PWM_ConfigChannel+0x1a6>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80023aa:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80023ac:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80023ae:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80023b0:	641e      	str	r6, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023b2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023b4:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023b6:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023b8:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 80023bc:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023be:	69d9      	ldr	r1, [r3, #28]
 80023c0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80023c4:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023c6:	69da      	ldr	r2, [r3, #28]
 80023c8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80023cc:	61da      	str	r2, [r3, #28]
      break;
 80023ce:	e7c9      	b.n	8002364 <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023d0:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023d2:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023d4:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023d6:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80023d8:	f8df c10c 	ldr.w	ip, [pc, #268]	; 80024e8 <HAL_TIM_PWM_ConfigChannel+0x20c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023dc:	f025 0510 	bic.w	r5, r5, #16
 80023e0:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80023e2:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80023e4:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80023e6:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 80023e8:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80023ec:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80023f0:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023f2:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023f6:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80023fa:	d065      	beq.n	80024c8 <HAL_TIM_PWM_ConfigChannel+0x1ec>
 80023fc:	4f3b      	ldr	r7, [pc, #236]	; (80024ec <HAL_TIM_PWM_ConfigChannel+0x210>)
 80023fe:	42bb      	cmp	r3, r7
 8002400:	d062      	beq.n	80024c8 <HAL_TIM_PWM_ConfigChannel+0x1ec>
  TIMx->CCR2 = OC_Config->Pulse;
 8002402:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002404:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002406:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002408:	639e      	str	r6, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800240a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800240c:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800240e:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002410:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8002414:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002416:	6999      	ldr	r1, [r3, #24]
 8002418:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800241c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800241e:	699a      	ldr	r2, [r3, #24]
 8002420:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8002424:	619a      	str	r2, [r3, #24]
      break;
 8002426:	e79d      	b.n	8002364 <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002428:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800242a:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800242c:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800242e:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002430:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80024e8 <HAL_TIM_PWM_ConfigChannel+0x20c>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002434:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8002438:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800243a:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800243c:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800243e:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8002440:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002444:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002448:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800244a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 800244e:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002452:	d01c      	beq.n	800248e <HAL_TIM_PWM_ConfigChannel+0x1b2>
 8002454:	4f25      	ldr	r7, [pc, #148]	; (80024ec <HAL_TIM_PWM_ConfigChannel+0x210>)
 8002456:	42bb      	cmp	r3, r7
 8002458:	d019      	beq.n	800248e <HAL_TIM_PWM_ConfigChannel+0x1b2>
  TIMx->CCR3 = OC_Config->Pulse;
 800245a:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800245c:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800245e:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002460:	63de      	str	r6, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8002462:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002464:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002466:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002468:	f044 0408 	orr.w	r4, r4, #8
 800246c:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800246e:	69d9      	ldr	r1, [r3, #28]
 8002470:	f021 0104 	bic.w	r1, r1, #4
 8002474:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002476:	69da      	ldr	r2, [r3, #28]
 8002478:	432a      	orrs	r2, r5
 800247a:	61da      	str	r2, [r3, #28]
      break;
 800247c:	e772      	b.n	8002364 <HAL_TIM_PWM_ConfigChannel+0x88>
  __HAL_LOCK(htim);
 800247e:	2002      	movs	r0, #2
}
 8002480:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002482:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002484:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002488:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 800248c:	e78d      	b.n	80023aa <HAL_TIM_PWM_ConfigChannel+0xce>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800248e:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002490:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002494:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002498:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800249c:	f425 5c40 	bic.w	ip, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80024a0:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 80024a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80024a8:	ea4c 1505 	orr.w	r5, ip, r5, lsl #4
 80024ac:	e7d5      	b.n	800245a <HAL_TIM_PWM_ConfigChannel+0x17e>
    tmpccer |= OC_Config->OCNPolarity;
 80024ae:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80024b0:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 80024b4:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 80024b6:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80024ba:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80024be:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 80024c0:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80024c4:	4335      	orrs	r5, r6
 80024c6:	e73c      	b.n	8002342 <HAL_TIM_PWM_ConfigChannel+0x66>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024c8:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80024ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024ce:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80024d2:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024d6:	f425 6c40 	bic.w	ip, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80024da:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 80024de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80024e2:	ea4c 0585 	orr.w	r5, ip, r5, lsl #2
 80024e6:	e78c      	b.n	8002402 <HAL_TIM_PWM_ConfigChannel+0x126>
 80024e8:	40010000 	.word	0x40010000
 80024ec:	40010400 	.word	0x40010400

080024f0 <HAL_TIM_OC_DelayElapsedCallback>:
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop

080024f4 <HAL_TIM_IC_CaptureCallback>:
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop

080024f8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop

080024fc <HAL_TIM_TriggerCallback>:
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop

08002500 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002500:	6803      	ldr	r3, [r0, #0]
 8002502:	691a      	ldr	r2, [r3, #16]
 8002504:	0791      	lsls	r1, r2, #30
{
 8002506:	b510      	push	{r4, lr}
 8002508:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800250a:	d502      	bpl.n	8002512 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	0792      	lsls	r2, r2, #30
 8002510:	d45f      	bmi.n	80025d2 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	0750      	lsls	r0, r2, #29
 8002516:	d502      	bpl.n	800251e <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	0751      	lsls	r1, r2, #29
 800251c:	d446      	bmi.n	80025ac <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	0712      	lsls	r2, r2, #28
 8002522:	d502      	bpl.n	800252a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	0710      	lsls	r0, r2, #28
 8002528:	d42e      	bmi.n	8002588 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	06d2      	lsls	r2, r2, #27
 800252e:	d502      	bpl.n	8002536 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	06d0      	lsls	r0, r2, #27
 8002534:	d418      	bmi.n	8002568 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	07d1      	lsls	r1, r2, #31
 800253a:	d502      	bpl.n	8002542 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	07d2      	lsls	r2, r2, #31
 8002540:	d45d      	bmi.n	80025fe <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	0610      	lsls	r0, r2, #24
 8002546:	d502      	bpl.n	800254e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	0611      	lsls	r1, r2, #24
 800254c:	d45f      	bmi.n	800260e <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	0652      	lsls	r2, r2, #25
 8002552:	d502      	bpl.n	800255a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	0650      	lsls	r0, r2, #25
 8002558:	d461      	bmi.n	800261e <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	0691      	lsls	r1, r2, #26
 800255e:	d502      	bpl.n	8002566 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	0692      	lsls	r2, r2, #26
 8002564:	d443      	bmi.n	80025ee <HAL_TIM_IRQHandler+0xee>
}
 8002566:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002568:	f06f 0210 	mvn.w	r2, #16
 800256c:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800256e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002570:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002572:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002576:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002578:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800257a:	d064      	beq.n	8002646 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800257c:	f7ff ffba 	bl	80024f4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002580:	2200      	movs	r2, #0
 8002582:	6823      	ldr	r3, [r4, #0]
 8002584:	7722      	strb	r2, [r4, #28]
 8002586:	e7d6      	b.n	8002536 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002588:	f06f 0208 	mvn.w	r2, #8
 800258c:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800258e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002590:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002592:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002594:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002596:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002598:	d152      	bne.n	8002640 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800259a:	f7ff ffa9 	bl	80024f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800259e:	4620      	mov	r0, r4
 80025a0:	f7ff ffaa 	bl	80024f8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025a4:	2200      	movs	r2, #0
 80025a6:	6823      	ldr	r3, [r4, #0]
 80025a8:	7722      	strb	r2, [r4, #28]
 80025aa:	e7be      	b.n	800252a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025ac:	f06f 0204 	mvn.w	r2, #4
 80025b0:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025b2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025b4:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025b6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025ba:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80025bc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025be:	d13c      	bne.n	800263a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025c0:	f7ff ff96 	bl	80024f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c4:	4620      	mov	r0, r4
 80025c6:	f7ff ff97 	bl	80024f8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ca:	2200      	movs	r2, #0
 80025cc:	6823      	ldr	r3, [r4, #0]
 80025ce:	7722      	strb	r2, [r4, #28]
 80025d0:	e7a5      	b.n	800251e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025d2:	f06f 0202 	mvn.w	r2, #2
 80025d6:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025d8:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025da:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025dc:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025de:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025e0:	d025      	beq.n	800262e <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80025e2:	f7ff ff87 	bl	80024f4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e6:	2200      	movs	r2, #0
 80025e8:	6823      	ldr	r3, [r4, #0]
 80025ea:	7722      	strb	r2, [r4, #28]
 80025ec:	e791      	b.n	8002512 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025ee:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80025f2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025f4:	611a      	str	r2, [r3, #16]
}
 80025f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80025fa:	f000 b877 	b.w	80026ec <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025fe:	f06f 0201 	mvn.w	r2, #1
 8002602:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002604:	4620      	mov	r0, r4
 8002606:	f001 f93f 	bl	8003888 <HAL_TIM_PeriodElapsedCallback>
 800260a:	6823      	ldr	r3, [r4, #0]
 800260c:	e799      	b.n	8002542 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800260e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002612:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002614:	4620      	mov	r0, r4
 8002616:	f000 f86b 	bl	80026f0 <HAL_TIMEx_BreakCallback>
 800261a:	6823      	ldr	r3, [r4, #0]
 800261c:	e797      	b.n	800254e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800261e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002622:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002624:	4620      	mov	r0, r4
 8002626:	f7ff ff69 	bl	80024fc <HAL_TIM_TriggerCallback>
 800262a:	6823      	ldr	r3, [r4, #0]
 800262c:	e795      	b.n	800255a <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800262e:	f7ff ff5f 	bl	80024f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002632:	4620      	mov	r0, r4
 8002634:	f7ff ff60 	bl	80024f8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002638:	e7d5      	b.n	80025e6 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 800263a:	f7ff ff5b 	bl	80024f4 <HAL_TIM_IC_CaptureCallback>
 800263e:	e7c4      	b.n	80025ca <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8002640:	f7ff ff58 	bl	80024f4 <HAL_TIM_IC_CaptureCallback>
 8002644:	e7ae      	b.n	80025a4 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002646:	f7ff ff53 	bl	80024f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800264a:	4620      	mov	r0, r4
 800264c:	f7ff ff54 	bl	80024f8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002650:	e796      	b.n	8002580 <HAL_TIM_IRQHandler+0x80>
 8002652:	bf00      	nop

08002654 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002654:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8002658:	2a01      	cmp	r2, #1
 800265a:	d01a      	beq.n	8002692 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
{
 800265c:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800265e:	2202      	movs	r2, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002660:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002662:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002666:	e9d1 6500 	ldrd	r6, r5, [r1]
 800266a:	4603      	mov	r3, r0
  tmpcr2 = htim->Instance->CR2;
 800266c:	6860      	ldr	r0, [r4, #4]
  tmpsmcr = htim->Instance->SMCR;
 800266e:	68a2      	ldr	r2, [r4, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002670:	f020 0170 	bic.w	r1, r0, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002674:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002678:	4331      	orrs	r1, r6
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800267a:	432a      	orrs	r2, r5

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800267c:	2601      	movs	r6, #1

  __HAL_UNLOCK(htim);
 800267e:	2500      	movs	r5, #0
  htim->Instance->CR2 = tmpcr2;
 8002680:	6061      	str	r1, [r4, #4]

  return HAL_OK;
 8002682:	4628      	mov	r0, r5
  htim->Instance->SMCR = tmpsmcr;
 8002684:	60a2      	str	r2, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002686:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800268a:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
}
 800268e:	bc70      	pop	{r4, r5, r6}
 8002690:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002692:	2002      	movs	r0, #2
}
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop

08002698 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002698:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800269c:	2b01      	cmp	r3, #1
 800269e:	d021      	beq.n	80026e4 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>
{
 80026a0:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80026a2:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80026a6:	e9d1 2400 	ldrd	r2, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80026aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ae:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80026b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026b4:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80026b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80026ba:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80026be:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80026c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026c4:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80026c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80026ca:	69c9      	ldr	r1, [r1, #28]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80026cc:	6802      	ldr	r2, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80026ce:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80026d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026d4:	430b      	orrs	r3, r1

  __HAL_UNLOCK(htim);
 80026d6:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 80026d8:	6453      	str	r3, [r2, #68]	; 0x44

  return HAL_OK;
}
 80026da:	bc30      	pop	{r4, r5}
  __HAL_UNLOCK(htim);
 80026dc:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
}
 80026e0:	4608      	mov	r0, r1
 80026e2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80026e4:	2302      	movs	r3, #2
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop

080026ec <HAL_TIMEx_CommutCallback>:
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop

080026f0 <HAL_TIMEx_BreakCallback>:
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop

080026f4 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026f4:	2800      	cmp	r0, #0
 80026f6:	f000 8104 	beq.w	8002902 <HAL_UART_Init+0x20e>
{
 80026fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026fe:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002702:	4604      	mov	r4, r0
 8002704:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 80f5 	beq.w	80028f8 <HAL_UART_Init+0x204>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800270e:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002710:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8002712:	2224      	movs	r2, #36	; 0x24
 8002714:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002718:	68d8      	ldr	r0, [r3, #12]
 800271a:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800271e:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8002722:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002724:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002726:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002728:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800272c:	4329      	orrs	r1, r5
 800272e:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002730:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002732:	6965      	ldr	r5, [r4, #20]
 8002734:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 8002736:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800273a:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 800273c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002740:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002742:	430a      	orrs	r2, r1
 8002744:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002746:	695a      	ldr	r2, [r3, #20]
 8002748:	69a1      	ldr	r1, [r4, #24]
 800274a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800274e:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002750:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002754:	615a      	str	r2, [r3, #20]
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002756:	4aaa      	ldr	r2, [pc, #680]	; (8002a00 <HAL_UART_Init+0x30c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002758:	d071      	beq.n	800283e <HAL_UART_Init+0x14a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800275a:	4293      	cmp	r3, r2
 800275c:	f000 80d3 	beq.w	8002906 <HAL_UART_Init+0x212>
 8002760:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002764:	4293      	cmp	r3, r2
 8002766:	f000 80ce 	beq.w	8002906 <HAL_UART_Init+0x212>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800276a:	f7ff fc15 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 800276e:	4fa5      	ldr	r7, [pc, #660]	; (8002a04 <HAL_UART_Init+0x310>)
 8002770:	6863      	ldr	r3, [r4, #4]
 8002772:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002776:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002780:	fba7 2303 	umull	r2, r3, r7, r3
 8002784:	095b      	lsrs	r3, r3, #5
 8002786:	011d      	lsls	r5, r3, #4
 8002788:	f7ff fc06 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 800278c:	6866      	ldr	r6, [r4, #4]
 800278e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002792:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002796:	00b6      	lsls	r6, r6, #2
 8002798:	fbb0 f6f6 	udiv	r6, r0, r6
 800279c:	f7ff fbfc 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 80027a0:	6863      	ldr	r3, [r4, #4]
 80027a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80027b0:	fba7 2303 	umull	r2, r3, r7, r3
 80027b4:	095b      	lsrs	r3, r3, #5
 80027b6:	f04f 0964 	mov.w	r9, #100	; 0x64
 80027ba:	fb09 6313 	mls	r3, r9, r3, r6
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	3332      	adds	r3, #50	; 0x32
 80027c2:	fba7 2303 	umull	r2, r3, r7, r3
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 80027cc:	f7ff fbe4 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 80027d0:	6862      	ldr	r2, [r4, #4]
 80027d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027da:	0093      	lsls	r3, r2, #2
 80027dc:	fbb0 f8f3 	udiv	r8, r0, r3
 80027e0:	f7ff fbda 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 80027e4:	e9d4 2100 	ldrd	r2, r1, [r4]
 80027e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027ec:	008b      	lsls	r3, r1, #2
 80027ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027f6:	fba7 1303 	umull	r1, r3, r7, r3
 80027fa:	095b      	lsrs	r3, r3, #5
 80027fc:	fb09 8313 	mls	r3, r9, r3, r8
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	3332      	adds	r3, #50	; 0x32
 8002804:	fba7 1303 	umull	r1, r3, r7, r3
 8002808:	f3c3 1343 	ubfx	r3, r3, #5, #4
 800280c:	4333      	orrs	r3, r6
 800280e:	442b      	add	r3, r5
 8002810:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002812:	6913      	ldr	r3, [r2, #16]
 8002814:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002818:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800281a:	6953      	ldr	r3, [r2, #20]
 800281c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002820:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002822:	68d3      	ldr	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002824:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8002826:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8002828:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800282c:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 800282e:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002830:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002832:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002836:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 800283a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800283e:	4293      	cmp	r3, r2
 8002840:	f000 809f 	beq.w	8002982 <HAL_UART_Init+0x28e>
 8002844:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002848:	4293      	cmp	r3, r2
 800284a:	f000 809a 	beq.w	8002982 <HAL_UART_Init+0x28e>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800284e:	f7ff fba3 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 8002852:	4f6c      	ldr	r7, [pc, #432]	; (8002a04 <HAL_UART_Init+0x310>)
 8002854:	6863      	ldr	r3, [r4, #4]
 8002856:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800285a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	fbb0 f3f3 	udiv	r3, r0, r3
 8002864:	fba7 2303 	umull	r2, r3, r7, r3
 8002868:	095b      	lsrs	r3, r3, #5
 800286a:	011e      	lsls	r6, r3, #4
 800286c:	f7ff fb94 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 8002870:	6865      	ldr	r5, [r4, #4]
 8002872:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002876:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800287a:	006d      	lsls	r5, r5, #1
 800287c:	fbb0 f5f5 	udiv	r5, r0, r5
 8002880:	f7ff fb8a 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 8002884:	6863      	ldr	r3, [r4, #4]
 8002886:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800288a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	fbb0 f3f3 	udiv	r3, r0, r3
 8002894:	fba7 2303 	umull	r2, r3, r7, r3
 8002898:	095b      	lsrs	r3, r3, #5
 800289a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800289e:	fb09 5313 	mls	r3, r9, r3, r5
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	3332      	adds	r3, #50	; 0x32
 80028a6:	fba7 2303 	umull	r2, r3, r7, r3
 80028aa:	091b      	lsrs	r3, r3, #4
 80028ac:	f403 75f8 	and.w	r5, r3, #496	; 0x1f0
 80028b0:	f7ff fb72 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 80028b4:	6862      	ldr	r2, [r4, #4]
 80028b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028be:	0053      	lsls	r3, r2, #1
 80028c0:	fbb0 f8f3 	udiv	r8, r0, r3
 80028c4:	f7ff fb68 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 80028c8:	e9d4 2100 	ldrd	r2, r1, [r4]
 80028cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028d0:	004b      	lsls	r3, r1, #1
 80028d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028da:	fba7 1303 	umull	r1, r3, r7, r3
 80028de:	095b      	lsrs	r3, r3, #5
 80028e0:	fb09 8313 	mls	r3, r9, r3, r8
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	3332      	adds	r3, #50	; 0x32
 80028e8:	fba7 1303 	umull	r1, r3, r7, r3
 80028ec:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80028f0:	4433      	add	r3, r6
 80028f2:	442b      	add	r3, r5
 80028f4:	6093      	str	r3, [r2, #8]
 80028f6:	e78c      	b.n	8002812 <HAL_UART_Init+0x11e>
    huart->Lock = HAL_UNLOCKED;
 80028f8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80028fc:	f001 fdb2 	bl	8004464 <HAL_UART_MspInit>
 8002900:	e705      	b.n	800270e <HAL_UART_Init+0x1a>
    return HAL_ERROR;
 8002902:	2001      	movs	r0, #1
}
 8002904:	4770      	bx	lr
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002906:	f7ff fb57 	bl	8001fb8 <HAL_RCC_GetPCLK2Freq>
 800290a:	4f3e      	ldr	r7, [pc, #248]	; (8002a04 <HAL_UART_Init+0x310>)
 800290c:	6863      	ldr	r3, [r4, #4]
 800290e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002912:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	fbb0 f3f3 	udiv	r3, r0, r3
 800291c:	fba7 2303 	umull	r2, r3, r7, r3
 8002920:	095b      	lsrs	r3, r3, #5
 8002922:	011d      	lsls	r5, r3, #4
 8002924:	f7ff fb48 	bl	8001fb8 <HAL_RCC_GetPCLK2Freq>
 8002928:	6866      	ldr	r6, [r4, #4]
 800292a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800292e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002932:	00b6      	lsls	r6, r6, #2
 8002934:	fbb0 f6f6 	udiv	r6, r0, r6
 8002938:	f7ff fb3e 	bl	8001fb8 <HAL_RCC_GetPCLK2Freq>
 800293c:	6863      	ldr	r3, [r4, #4]
 800293e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002942:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	fbb0 f3f3 	udiv	r3, r0, r3
 800294c:	fba7 2303 	umull	r2, r3, r7, r3
 8002950:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002954:	095b      	lsrs	r3, r3, #5
 8002956:	fb09 6313 	mls	r3, r9, r3, r6
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	3332      	adds	r3, #50	; 0x32
 800295e:	fba7 2303 	umull	r2, r3, r7, r3
 8002962:	095b      	lsrs	r3, r3, #5
 8002964:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8002968:	f7ff fb26 	bl	8001fb8 <HAL_RCC_GetPCLK2Freq>
 800296c:	6862      	ldr	r2, [r4, #4]
 800296e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002972:	0093      	lsls	r3, r2, #2
 8002974:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002978:	fbb0 f8f3 	udiv	r8, r0, r3
 800297c:	f7ff fb1c 	bl	8001fb8 <HAL_RCC_GetPCLK2Freq>
 8002980:	e730      	b.n	80027e4 <HAL_UART_Init+0xf0>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002982:	f7ff fb19 	bl	8001fb8 <HAL_RCC_GetPCLK2Freq>
 8002986:	4f1f      	ldr	r7, [pc, #124]	; (8002a04 <HAL_UART_Init+0x310>)
 8002988:	6863      	ldr	r3, [r4, #4]
 800298a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800298e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	fbb0 f3f3 	udiv	r3, r0, r3
 8002998:	fba7 2303 	umull	r2, r3, r7, r3
 800299c:	095b      	lsrs	r3, r3, #5
 800299e:	011e      	lsls	r6, r3, #4
 80029a0:	f7ff fb0a 	bl	8001fb8 <HAL_RCC_GetPCLK2Freq>
 80029a4:	6865      	ldr	r5, [r4, #4]
 80029a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029ae:	006d      	lsls	r5, r5, #1
 80029b0:	fbb0 f5f5 	udiv	r5, r0, r5
 80029b4:	f7ff fb00 	bl	8001fb8 <HAL_RCC_GetPCLK2Freq>
 80029b8:	6863      	ldr	r3, [r4, #4]
 80029ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80029c8:	fba7 2303 	umull	r2, r3, r7, r3
 80029cc:	f04f 0964 	mov.w	r9, #100	; 0x64
 80029d0:	095b      	lsrs	r3, r3, #5
 80029d2:	fb09 5313 	mls	r3, r9, r3, r5
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	3332      	adds	r3, #50	; 0x32
 80029da:	fba7 2303 	umull	r2, r3, r7, r3
 80029de:	091b      	lsrs	r3, r3, #4
 80029e0:	f403 75f8 	and.w	r5, r3, #496	; 0x1f0
 80029e4:	f7ff fae8 	bl	8001fb8 <HAL_RCC_GetPCLK2Freq>
 80029e8:	6862      	ldr	r2, [r4, #4]
 80029ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029ee:	0053      	lsls	r3, r2, #1
 80029f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029f4:	fbb0 f8f3 	udiv	r8, r0, r3
 80029f8:	f7ff fade 	bl	8001fb8 <HAL_RCC_GetPCLK2Freq>
 80029fc:	e764      	b.n	80028c8 <HAL_UART_Init+0x1d4>
 80029fe:	bf00      	nop
 8002a00:	40011000 	.word	0x40011000
 8002a04:	51eb851f 	.word	0x51eb851f

08002a08 <HAL_UART_Transmit>:
{
 8002a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a0a:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8002a0c:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8002a10:	2920      	cmp	r1, #32
{
 8002a12:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8002a14:	d12d      	bne.n	8002a72 <HAL_UART_Transmit+0x6a>
    if ((pData == NULL) || (Size == 0U))
 8002a16:	2e00      	cmp	r6, #0
 8002a18:	d02e      	beq.n	8002a78 <HAL_UART_Transmit+0x70>
 8002a1a:	9201      	str	r2, [sp, #4]
 8002a1c:	b362      	cbz	r2, 8002a78 <HAL_UART_Transmit+0x70>
 8002a1e:	461f      	mov	r7, r3
    __HAL_LOCK(huart);
 8002a20:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	4604      	mov	r4, r0
 8002a28:	d023      	beq.n	8002a72 <HAL_UART_Transmit+0x6a>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_LOCK(huart);
 8002a2e:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a30:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8002a32:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a36:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002a3a:	f7fe fadf 	bl	8000ffc <HAL_GetTick>
    huart->TxXferSize = Size;
 8002a3e:	9a01      	ldr	r2, [sp, #4]
 8002a40:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a42:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002a44:	6822      	ldr	r2, [r4, #0]
    tickstart = HAL_GetTick();
 8002a46:	4605      	mov	r5, r0
    while (huart->TxXferCount > 0U)
 8002a48:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d039      	beq.n	8002ac4 <HAL_UART_Transmit+0xbc>
      huart->TxXferCount--;
 8002a50:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a52:	68a1      	ldr	r1, [r4, #8]
      huart->TxXferCount--;
 8002a54:	3801      	subs	r0, #1
 8002a56:	b280      	uxth	r0, r0
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a58:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      huart->TxXferCount--;
 8002a5c:	84e0      	strh	r0, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a5e:	d019      	beq.n	8002a94 <HAL_UART_Transmit+0x8c>
 8002a60:	1c78      	adds	r0, r7, #1
 8002a62:	d13b      	bne.n	8002adc <HAL_UART_Transmit+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a64:	6810      	ldr	r0, [r2, #0]
 8002a66:	0601      	lsls	r1, r0, #24
 8002a68:	d5fc      	bpl.n	8002a64 <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002a6a:	7833      	ldrb	r3, [r6, #0]
 8002a6c:	6053      	str	r3, [r2, #4]
 8002a6e:	3601      	adds	r6, #1
 8002a70:	e7ea      	b.n	8002a48 <HAL_UART_Transmit+0x40>
    return HAL_BUSY;
 8002a72:	2002      	movs	r0, #2
}
 8002a74:	b003      	add	sp, #12
 8002a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 8002a78:	2001      	movs	r0, #1
}
 8002a7a:	b003      	add	sp, #12
 8002a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a7e:	6813      	ldr	r3, [r2, #0]
 8002a80:	061b      	lsls	r3, r3, #24
 8002a82:	d40c      	bmi.n	8002a9e <HAL_UART_Transmit+0x96>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a84:	2f00      	cmp	r7, #0
 8002a86:	d033      	beq.n	8002af0 <HAL_UART_Transmit+0xe8>
 8002a88:	f7fe fab8 	bl	8000ffc <HAL_GetTick>
 8002a8c:	1b40      	subs	r0, r0, r5
 8002a8e:	4287      	cmp	r7, r0
 8002a90:	6822      	ldr	r2, [r4, #0]
 8002a92:	d32d      	bcc.n	8002af0 <HAL_UART_Transmit+0xe8>
 8002a94:	1c78      	adds	r0, r7, #1
 8002a96:	d1f2      	bne.n	8002a7e <HAL_UART_Transmit+0x76>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a98:	6810      	ldr	r0, [r2, #0]
 8002a9a:	0601      	lsls	r1, r0, #24
 8002a9c:	d5fc      	bpl.n	8002a98 <HAL_UART_Transmit+0x90>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002a9e:	8833      	ldrh	r3, [r6, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002aa0:	6921      	ldr	r1, [r4, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aa6:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002aa8:	2900      	cmp	r1, #0
 8002aaa:	d1e0      	bne.n	8002a6e <HAL_UART_Transmit+0x66>
          pData += 2U;
 8002aac:	3602      	adds	r6, #2
 8002aae:	e7cb      	b.n	8002a48 <HAL_UART_Transmit+0x40>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ab0:	6813      	ldr	r3, [r2, #0]
 8002ab2:	065b      	lsls	r3, r3, #25
 8002ab4:	d40b      	bmi.n	8002ace <HAL_UART_Transmit+0xc6>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ab6:	b1df      	cbz	r7, 8002af0 <HAL_UART_Transmit+0xe8>
 8002ab8:	f7fe faa0 	bl	8000ffc <HAL_GetTick>
 8002abc:	1b40      	subs	r0, r0, r5
 8002abe:	4287      	cmp	r7, r0
 8002ac0:	6822      	ldr	r2, [r4, #0]
 8002ac2:	d315      	bcc.n	8002af0 <HAL_UART_Transmit+0xe8>
 8002ac4:	1c78      	adds	r0, r7, #1
 8002ac6:	d1f3      	bne.n	8002ab0 <HAL_UART_Transmit+0xa8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ac8:	6813      	ldr	r3, [r2, #0]
 8002aca:	0659      	lsls	r1, r3, #25
 8002acc:	d5fc      	bpl.n	8002ac8 <HAL_UART_Transmit+0xc0>
    huart->gState = HAL_UART_STATE_READY;
 8002ace:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002ad0:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 8002ad2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002ad6:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002ada:	e7cb      	b.n	8002a74 <HAL_UART_Transmit+0x6c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002adc:	6813      	ldr	r3, [r2, #0]
 8002ade:	061b      	lsls	r3, r3, #24
 8002ae0:	d4c3      	bmi.n	8002a6a <HAL_UART_Transmit+0x62>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ae2:	b12f      	cbz	r7, 8002af0 <HAL_UART_Transmit+0xe8>
 8002ae4:	f7fe fa8a 	bl	8000ffc <HAL_GetTick>
 8002ae8:	1b40      	subs	r0, r0, r5
 8002aea:	4287      	cmp	r7, r0
 8002aec:	6822      	ldr	r2, [r4, #0]
 8002aee:	d2b7      	bcs.n	8002a60 <HAL_UART_Transmit+0x58>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002af0:	68d3      	ldr	r3, [r2, #12]
 8002af2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002af6:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002af8:	6953      	ldr	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002afa:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002afc:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8002b00:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 8002b02:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b04:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002b06:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
        __HAL_UNLOCK(huart);
 8002b0a:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 8002b0e:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8002b12:	b003      	add	sp, #12
 8002b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b16:	bf00      	nop

08002b18 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b18:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002b1c:	2b20      	cmp	r3, #32
 8002b1e:	d120      	bne.n	8002b62 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8002b20:	b309      	cbz	r1, 8002b66 <HAL_UART_Receive_IT+0x4e>
 8002b22:	b302      	cbz	r2, 8002b66 <HAL_UART_Receive_IT+0x4e>
    __HAL_LOCK(huart);
 8002b24:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d01a      	beq.n	8002b62 <HAL_UART_Receive_IT+0x4a>
{
 8002b2c:	b430      	push	{r4, r5}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b2e:	2300      	movs	r3, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b30:	6804      	ldr	r4, [r0, #0]
    huart->RxXferCount = Size;
 8002b32:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b34:	2522      	movs	r5, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b36:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b38:	f880 503a 	strb.w	r5, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b3c:	68e5      	ldr	r5, [r4, #12]
    huart->RxXferSize = Size;
 8002b3e:	8582      	strh	r2, [r0, #44]	; 0x2c
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b40:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    huart->pRxBuffPtr = pData;
 8002b44:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UNLOCK(huart);
 8002b46:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b4a:	60e5      	str	r5, [r4, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002b4c:	6962      	ldr	r2, [r4, #20]
 8002b4e:	f042 0201 	orr.w	r2, r2, #1
 8002b52:	6162      	str	r2, [r4, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002b54:	68e2      	ldr	r2, [r4, #12]
 8002b56:	f042 0220 	orr.w	r2, r2, #32
    return HAL_OK;
 8002b5a:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002b5c:	60e2      	str	r2, [r4, #12]
}
 8002b5e:	bc30      	pop	{r4, r5}
 8002b60:	4770      	bx	lr
    return HAL_BUSY;
 8002b62:	2002      	movs	r0, #2
}
 8002b64:	4770      	bx	lr
      return HAL_ERROR;
 8002b66:	2001      	movs	r0, #1
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop

08002b6c <HAL_UART_TxCpltCallback>:
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop

08002b70 <UART_Receive_IT.part.1>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8002b70:	b510      	push	{r4, lr}
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b72:	6884      	ldr	r4, [r0, #8]
 8002b74:	6901      	ldr	r1, [r0, #16]
 8002b76:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002b78:	6802      	ldr	r2, [r0, #0]
 8002b7a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8002b7e:	d020      	beq.n	8002bc2 <UART_Receive_IT.part.1+0x52>
 8002b80:	1c5c      	adds	r4, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b82:	6852      	ldr	r2, [r2, #4]
 8002b84:	6284      	str	r4, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002b86:	b9c9      	cbnz	r1, 8002bbc <UART_Receive_IT.part.1+0x4c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b88:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 8002b8a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8002b92:	b98b      	cbnz	r3, 8002bb8 <UART_Receive_IT.part.1+0x48>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b94:	6802      	ldr	r2, [r0, #0]
 8002b96:	68d1      	ldr	r1, [r2, #12]
 8002b98:	f021 0120 	bic.w	r1, r1, #32
 8002b9c:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b9e:	68d1      	ldr	r1, [r2, #12]
 8002ba0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002ba4:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ba6:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002ba8:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002baa:	f021 0101 	bic.w	r1, r1, #1
 8002bae:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002bb0:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002bb4:	f000 fafa 	bl	80031ac <HAL_UART_RxCpltCallback>
}
 8002bb8:	2000      	movs	r0, #0
 8002bba:	bd10      	pop	{r4, pc}
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002bbc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002bc0:	e7e2      	b.n	8002b88 <UART_Receive_IT.part.1+0x18>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002bc2:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002bc4:	b929      	cbnz	r1, 8002bd2 <UART_Receive_IT.part.1+0x62>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002bc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bca:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 2U;
 8002bce:	6283      	str	r3, [r0, #40]	; 0x28
 8002bd0:	e7db      	b.n	8002b8a <UART_Receive_IT.part.1+0x1a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1U;
 8002bd8:	6283      	str	r3, [r0, #40]	; 0x28
 8002bda:	e7d6      	b.n	8002b8a <UART_Receive_IT.part.1+0x1a>

08002bdc <HAL_UART_ErrorCallback>:
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop

08002be0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002be0:	6803      	ldr	r3, [r0, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
{
 8002be4:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8002be6:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002be8:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bea:	6959      	ldr	r1, [r3, #20]
{
 8002bec:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8002bee:	d049      	beq.n	8002c84 <HAL_UART_IRQHandler+0xa4>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002bf0:	f011 0101 	ands.w	r1, r1, #1
 8002bf4:	d04f      	beq.n	8002c96 <HAL_UART_IRQHandler+0xb6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002bf6:	07d6      	lsls	r6, r2, #31
 8002bf8:	d505      	bpl.n	8002c06 <HAL_UART_IRQHandler+0x26>
 8002bfa:	05e8      	lsls	r0, r5, #23
 8002bfc:	d503      	bpl.n	8002c06 <HAL_UART_IRQHandler+0x26>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bfe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002c00:	f040 0001 	orr.w	r0, r0, #1
 8002c04:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c06:	0756      	lsls	r6, r2, #29
 8002c08:	f002 0002 	and.w	r0, r2, #2
 8002c0c:	d575      	bpl.n	8002cfa <HAL_UART_IRQHandler+0x11a>
 8002c0e:	b161      	cbz	r1, 8002c2a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c10:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002c12:	f041 0102 	orr.w	r1, r1, #2
 8002c16:	63e1      	str	r1, [r4, #60]	; 0x3c
 8002c18:	f002 0608 	and.w	r6, r2, #8
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c1c:	2800      	cmp	r0, #0
 8002c1e:	d171      	bne.n	8002d04 <HAL_UART_IRQHandler+0x124>
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c20:	b11e      	cbz	r6, 8002c2a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c22:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002c24:	f041 0108 	orr.w	r1, r1, #8
 8002c28:	63e1      	str	r1, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c2a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002c2c:	2900      	cmp	r1, #0
 8002c2e:	d031      	beq.n	8002c94 <HAL_UART_IRQHandler+0xb4>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c30:	0696      	lsls	r6, r2, #26
 8002c32:	d501      	bpl.n	8002c38 <HAL_UART_IRQHandler+0x58>
 8002c34:	06a8      	lsls	r0, r5, #26
 8002c36:	d473      	bmi.n	8002d20 <HAL_UART_IRQHandler+0x140>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c38:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c3a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002c3c:	0709      	lsls	r1, r1, #28
 8002c3e:	d402      	bmi.n	8002c46 <HAL_UART_IRQHandler+0x66>
 8002c40:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002c44:	d079      	beq.n	8002d3a <HAL_UART_IRQHandler+0x15a>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c4c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c4e:	695a      	ldr	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8002c50:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c52:	f022 0201 	bic.w	r2, r2, #1
 8002c56:	615a      	str	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8002c58:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c5c:	695a      	ldr	r2, [r3, #20]
 8002c5e:	0652      	lsls	r2, r2, #25
 8002c60:	d55a      	bpl.n	8002d18 <HAL_UART_IRQHandler+0x138>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c62:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002c64:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c6a:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002c6c:	2800      	cmp	r0, #0
 8002c6e:	d053      	beq.n	8002d18 <HAL_UART_IRQHandler+0x138>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c70:	4b3a      	ldr	r3, [pc, #232]	; (8002d5c <HAL_UART_IRQHandler+0x17c>)
 8002c72:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c74:	f7fe fdaa 	bl	80017cc <HAL_DMA_Abort_IT>
 8002c78:	b160      	cbz	r0, 8002c94 <HAL_UART_IRQHandler+0xb4>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c7a:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002c7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c80:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002c82:	4718      	bx	r3
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c84:	0696      	lsls	r6, r2, #26
 8002c86:	d509      	bpl.n	8002c9c <HAL_UART_IRQHandler+0xbc>
 8002c88:	06a9      	lsls	r1, r5, #26
 8002c8a:	d507      	bpl.n	8002c9c <HAL_UART_IRQHandler+0xbc>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c8c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002c90:	2b22      	cmp	r3, #34	; 0x22
 8002c92:	d04e      	beq.n	8002d32 <HAL_UART_IRQHandler+0x152>
}
 8002c94:	bd70      	pop	{r4, r5, r6, pc}
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c96:	f415 7f90 	tst.w	r5, #288	; 0x120
 8002c9a:	d1ac      	bne.n	8002bf6 <HAL_UART_IRQHandler+0x16>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c9c:	0616      	lsls	r6, r2, #24
 8002c9e:	d40e      	bmi.n	8002cbe <HAL_UART_IRQHandler+0xde>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ca0:	0651      	lsls	r1, r2, #25
 8002ca2:	d5f7      	bpl.n	8002c94 <HAL_UART_IRQHandler+0xb4>
 8002ca4:	066a      	lsls	r2, r5, #25
 8002ca6:	d5f5      	bpl.n	8002c94 <HAL_UART_IRQHandler+0xb4>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ca8:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002caa:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002cac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cb0:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002cb2:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8002cb4:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002cb8:	f7ff ff58 	bl	8002b6c <HAL_UART_TxCpltCallback>
}
 8002cbc:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cbe:	0628      	lsls	r0, r5, #24
 8002cc0:	d5ee      	bpl.n	8002ca0 <HAL_UART_IRQHandler+0xc0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002cc2:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002cc6:	2a21      	cmp	r2, #33	; 0x21
 8002cc8:	d1e4      	bne.n	8002c94 <HAL_UART_IRQHandler+0xb4>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002cca:	68a1      	ldr	r1, [r4, #8]
 8002ccc:	6a22      	ldr	r2, [r4, #32]
 8002cce:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002cd2:	d037      	beq.n	8002d44 <HAL_UART_IRQHandler+0x164>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002cd4:	1c51      	adds	r1, r2, #1
 8002cd6:	6221      	str	r1, [r4, #32]
 8002cd8:	7812      	ldrb	r2, [r2, #0]
 8002cda:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8002cdc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002cde:	3a01      	subs	r2, #1
 8002ce0:	b292      	uxth	r2, r2
 8002ce2:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002ce4:	2a00      	cmp	r2, #0
 8002ce6:	d1d5      	bne.n	8002c94 <HAL_UART_IRQHandler+0xb4>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cee:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cf6:	60da      	str	r2, [r3, #12]
}
 8002cf8:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cfa:	b140      	cbz	r0, 8002d0e <HAL_UART_IRQHandler+0x12e>
 8002cfc:	2900      	cmp	r1, #0
 8002cfe:	d094      	beq.n	8002c2a <HAL_UART_IRQHandler+0x4a>
 8002d00:	f002 0608 	and.w	r6, r2, #8
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d04:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002d06:	f041 0104 	orr.w	r1, r1, #4
 8002d0a:	63e1      	str	r1, [r4, #60]	; 0x3c
 8002d0c:	e788      	b.n	8002c20 <HAL_UART_IRQHandler+0x40>
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d0e:	0710      	lsls	r0, r2, #28
 8002d10:	d58b      	bpl.n	8002c2a <HAL_UART_IRQHandler+0x4a>
 8002d12:	2900      	cmp	r1, #0
 8002d14:	d185      	bne.n	8002c22 <HAL_UART_IRQHandler+0x42>
 8002d16:	e788      	b.n	8002c2a <HAL_UART_IRQHandler+0x4a>
            HAL_UART_ErrorCallback(huart);
 8002d18:	4620      	mov	r0, r4
 8002d1a:	f7ff ff5f 	bl	8002bdc <HAL_UART_ErrorCallback>
}
 8002d1e:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d20:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
 8002d24:	2a22      	cmp	r2, #34	; 0x22
 8002d26:	d187      	bne.n	8002c38 <HAL_UART_IRQHandler+0x58>
 8002d28:	4620      	mov	r0, r4
 8002d2a:	f7ff ff21 	bl	8002b70 <UART_Receive_IT.part.1>
 8002d2e:	6823      	ldr	r3, [r4, #0]
 8002d30:	e782      	b.n	8002c38 <HAL_UART_IRQHandler+0x58>
}
 8002d32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002d36:	f7ff bf1b 	b.w	8002b70 <UART_Receive_IT.part.1>
        HAL_UART_ErrorCallback(huart);
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	f7ff ff4e 	bl	8002bdc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d40:	63e5      	str	r5, [r4, #60]	; 0x3c
}
 8002d42:	bd70      	pop	{r4, r5, r6, pc}
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d44:	8811      	ldrh	r1, [r2, #0]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002d46:	6920      	ldr	r0, [r4, #16]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d48:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002d4c:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002d4e:	b910      	cbnz	r0, 8002d56 <HAL_UART_IRQHandler+0x176>
        huart->pTxBuffPtr += 2U;
 8002d50:	3202      	adds	r2, #2
 8002d52:	6222      	str	r2, [r4, #32]
 8002d54:	e7c2      	b.n	8002cdc <HAL_UART_IRQHandler+0xfc>
        huart->pTxBuffPtr += 1U;
 8002d56:	3201      	adds	r2, #1
 8002d58:	6222      	str	r2, [r4, #32]
 8002d5a:	e7bf      	b.n	8002cdc <HAL_UART_IRQHandler+0xfc>
 8002d5c:	08002d61 	.word	0x08002d61

08002d60 <UART_DMAAbortOnError>:
{
 8002d60:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d62:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8002d64:	2200      	movs	r2, #0
 8002d66:	85da      	strh	r2, [r3, #46]	; 0x2e
  HAL_UART_ErrorCallback(huart);
 8002d68:	4618      	mov	r0, r3
  huart->TxXferCount = 0x00U;
 8002d6a:	84da      	strh	r2, [r3, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002d6c:	f7ff ff36 	bl	8002bdc <HAL_UART_ErrorCallback>
}
 8002d70:	bd08      	pop	{r3, pc}
 8002d72:	bf00      	nop

08002d74 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002d74:	b538      	push	{r3, r4, r5, lr}

  hcan1.Instance = CAN1;
 8002d76:	4b0d      	ldr	r3, [pc, #52]	; (8002dac <MX_CAN1_Init+0x38>)
 8002d78:	4a0d      	ldr	r2, [pc, #52]	; (8002db0 <MX_CAN1_Init+0x3c>)
 8002d7a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 8002d7c:	2207      	movs	r2, #7
 8002d7e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002d80:	2200      	movs	r2, #0
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8002d82:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002d86:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
  hcan1.Init.TimeTriggeredMode = DISABLE;
  hcan1.Init.AutoBusOff = DISABLE;
  hcan1.Init.AutoWakeUp = DISABLE;
  hcan1.Init.AutoRetransmission = DISABLE;
  hcan1.Init.ReceiveFifoLocked = DISABLE;
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8002d8a:	2101      	movs	r1, #1
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002d8c:	4618      	mov	r0, r3
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002d8e:	619a      	str	r2, [r3, #24]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002d90:	e9c3 5404 	strd	r5, r4, [r3, #16]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8002d94:	7759      	strb	r1, [r3, #29]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002d96:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002d9a:	771a      	strb	r2, [r3, #28]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002d9c:	f7fe f946 	bl	800102c <HAL_CAN_Init>
 8002da0:	b900      	cbnz	r0, 8002da4 <MX_CAN1_Init+0x30>
  {
    Error_Handler();
  }

}
 8002da2:	bd38      	pop	{r3, r4, r5, pc}
 8002da4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002da8:	f000 be0e 	b.w	80039c8 <Error_Handler>
 8002dac:	2000023c 	.word	0x2000023c
 8002db0:	40006400 	.word	0x40006400

08002db4 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8002db4:	b538      	push	{r3, r4, r5, lr}

  hcan2.Instance = CAN2;
 8002db6:	4b0d      	ldr	r3, [pc, #52]	; (8002dec <MX_CAN2_Init+0x38>)
 8002db8:	4a0d      	ldr	r2, [pc, #52]	; (8002df0 <MX_CAN2_Init+0x3c>)
 8002dba:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 7;
 8002dbc:	2207      	movs	r2, #7
 8002dbe:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002dc0:	2200      	movs	r2, #0
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8002dc2:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002dc6:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
  hcan2.Init.TimeTriggeredMode = DISABLE;
  hcan2.Init.AutoBusOff = DISABLE;
  hcan2.Init.AutoWakeUp = DISABLE;
  hcan2.Init.AutoRetransmission = DISABLE;
  hcan2.Init.ReceiveFifoLocked = DISABLE;
  hcan2.Init.TransmitFifoPriority = ENABLE;
 8002dca:	2101      	movs	r1, #1
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002dcc:	4618      	mov	r0, r3
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002dce:	619a      	str	r2, [r3, #24]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002dd0:	e9c3 5404 	strd	r5, r4, [r3, #16]
  hcan2.Init.TransmitFifoPriority = ENABLE;
 8002dd4:	7759      	strb	r1, [r3, #29]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002dd6:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002dda:	771a      	strb	r2, [r3, #28]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002ddc:	f7fe f926 	bl	800102c <HAL_CAN_Init>
 8002de0:	b900      	cbnz	r0, 8002de4 <MX_CAN2_Init+0x30>
  {
    Error_Handler();
  }

}
 8002de2:	bd38      	pop	{r3, r4, r5, pc}
 8002de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002de8:	f000 bdee 	b.w	80039c8 <Error_Handler>
 8002dec:	20000214 	.word	0x20000214
 8002df0:	40006800 	.word	0x40006800

08002df4 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002df4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(canHandle->Instance==CAN1)
 8002df6:	6802      	ldr	r2, [r0, #0]
 8002df8:	4948      	ldr	r1, [pc, #288]	; (8002f1c <HAL_CAN_MspInit+0x128>)
{
 8002dfa:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dfc:	2300      	movs	r3, #0
  if(canHandle->Instance==CAN1)
 8002dfe:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e00:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8002e04:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8002e08:	9309      	str	r3, [sp, #36]	; 0x24
  if(canHandle->Instance==CAN1)
 8002e0a:	d040      	beq.n	8002e8e <HAL_CAN_MspInit+0x9a>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
  else if(canHandle->Instance==CAN2)
 8002e0c:	4944      	ldr	r1, [pc, #272]	; (8002f20 <HAL_CAN_MspInit+0x12c>)
 8002e0e:	428a      	cmp	r2, r1
 8002e10:	d001      	beq.n	8002e16 <HAL_CAN_MspInit+0x22>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8002e12:	b00a      	add	sp, #40	; 0x28
 8002e14:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002e16:	4a43      	ldr	r2, [pc, #268]	; (8002f24 <HAL_CAN_MspInit+0x130>)
 8002e18:	9302      	str	r3, [sp, #8]
 8002e1a:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002e1c:	4c42      	ldr	r4, [pc, #264]	; (8002f28 <HAL_CAN_MspInit+0x134>)
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002e1e:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8002e22:	6411      	str	r1, [r2, #64]	; 0x40
 8002e24:	6c10      	ldr	r0, [r2, #64]	; 0x40
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002e26:	6821      	ldr	r1, [r4, #0]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002e28:	f000 6080 	and.w	r0, r0, #67108864	; 0x4000000
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002e2c:	3101      	adds	r1, #1
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002e2e:	9002      	str	r0, [sp, #8]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002e30:	2901      	cmp	r1, #1
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002e32:	9802      	ldr	r0, [sp, #8]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002e34:	6021      	str	r1, [r4, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002e36:	d065      	beq.n	8002f04 <HAL_CAN_MspInit+0x110>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e38:	2400      	movs	r4, #0
 8002e3a:	4b3a      	ldr	r3, [pc, #232]	; (8002f24 <HAL_CAN_MspInit+0x130>)
 8002e3c:	9404      	str	r4, [sp, #16]
 8002e3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e40:	483a      	ldr	r0, [pc, #232]	; (8002f2c <HAL_CAN_MspInit+0x138>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e42:	f042 0202 	orr.w	r2, r2, #2
 8002e46:	631a      	str	r2, [r3, #48]	; 0x30
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002e50:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e54:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e56:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002e58:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5a:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002e5c:	2309      	movs	r3, #9
 8002e5e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e62:	9e04      	ldr	r6, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e64:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e66:	f7fe fcc3 	bl	80017f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8002e6a:	4622      	mov	r2, r4
 8002e6c:	4621      	mov	r1, r4
 8002e6e:	2040      	movs	r0, #64	; 0x40
 8002e70:	f7fe fc4e 	bl	8001710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002e74:	2040      	movs	r0, #64	; 0x40
 8002e76:	f7fe fc81 	bl	800177c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8002e7a:	4622      	mov	r2, r4
 8002e7c:	4621      	mov	r1, r4
 8002e7e:	2041      	movs	r0, #65	; 0x41
 8002e80:	f7fe fc46 	bl	8001710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8002e84:	2041      	movs	r0, #65	; 0x41
 8002e86:	f7fe fc79 	bl	800177c <HAL_NVIC_EnableIRQ>
}
 8002e8a:	b00a      	add	sp, #40	; 0x28
 8002e8c:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002e8e:	4926      	ldr	r1, [pc, #152]	; (8002f28 <HAL_CAN_MspInit+0x134>)
 8002e90:	680a      	ldr	r2, [r1, #0]
 8002e92:	3201      	adds	r2, #1
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002e94:	2a01      	cmp	r2, #1
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002e96:	600a      	str	r2, [r1, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002e98:	d028      	beq.n	8002eec <HAL_CAN_MspInit+0xf8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e9a:	2400      	movs	r4, #0
 8002e9c:	4b21      	ldr	r3, [pc, #132]	; (8002f24 <HAL_CAN_MspInit+0x130>)
 8002e9e:	9401      	str	r4, [sp, #4]
 8002ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ea2:	4823      	ldr	r0, [pc, #140]	; (8002f30 <HAL_CAN_MspInit+0x13c>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ea4:	f042 0208 	orr.w	r2, r2, #8
 8002ea8:	631a      	str	r2, [r3, #48]	; 0x30
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	f003 0308 	and.w	r3, r3, #8
 8002eb0:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002eb2:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002eb4:	2303      	movs	r3, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002eb6:	2209      	movs	r2, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb8:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002eba:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ebc:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002ebe:	9209      	str	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ec0:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec2:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ec4:	f7fe fc94 	bl	80017f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002ec8:	4622      	mov	r2, r4
 8002eca:	4621      	mov	r1, r4
 8002ecc:	2014      	movs	r0, #20
 8002ece:	f7fe fc1f 	bl	8001710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002ed2:	2014      	movs	r0, #20
 8002ed4:	f7fe fc52 	bl	800177c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8002ed8:	4622      	mov	r2, r4
 8002eda:	4621      	mov	r1, r4
 8002edc:	2015      	movs	r0, #21
 8002ede:	f7fe fc17 	bl	8001710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002ee2:	2015      	movs	r0, #21
 8002ee4:	f7fe fc4a 	bl	800177c <HAL_NVIC_EnableIRQ>
}
 8002ee8:	b00a      	add	sp, #40	; 0x28
 8002eea:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002eec:	4a0d      	ldr	r2, [pc, #52]	; (8002f24 <HAL_CAN_MspInit+0x130>)
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002ef2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ef6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ef8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	9b00      	ldr	r3, [sp, #0]
 8002f02:	e7ca      	b.n	8002e9a <HAL_CAN_MspInit+0xa6>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002f04:	9303      	str	r3, [sp, #12]
 8002f06:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002f08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f0e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f14:	9303      	str	r3, [sp, #12]
 8002f16:	9b03      	ldr	r3, [sp, #12]
 8002f18:	e78e      	b.n	8002e38 <HAL_CAN_MspInit+0x44>
 8002f1a:	bf00      	nop
 8002f1c:	40006400 	.word	0x40006400
 8002f20:	40006800 	.word	0x40006800
 8002f24:	40023800 	.word	0x40023800
 8002f28:	200001fc 	.word	0x200001fc
 8002f2c:	40020400 	.word	0x40020400
 8002f30:	40020c00 	.word	0x40020c00

08002f34 <initCanFilter>:
  /* USER CODE END CAN2_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void initCanFilter() {
 8002f34:	b510      	push	{r4, lr}
 8002f36:	b08a      	sub	sp, #40	; 0x28
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8002f38:	2400      	movs	r4, #0
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002f3a:	2301      	movs	r3, #1
	sFilterConfig.FilterMaskIdLow = 0x0000;
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
	sFilterConfig.FilterActivation = ENABLE;
	sFilterConfig.SlaveStartFilterBank = 0;

	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8002f3c:	4669      	mov	r1, sp
 8002f3e:	480a      	ldr	r0, [pc, #40]	; (8002f68 <initCanFilter+0x34>)
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002f40:	9404      	str	r4, [sp, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8002f42:	e9cd 3307 	strd	r3, r3, [sp, #28]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002f46:	e9cd 4405 	strd	r4, r4, [sp, #20]
	sFilterConfig.FilterIdLow = 0x0000;
 8002f4a:	e9cd 4400 	strd	r4, r4, [sp]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8002f4e:	e9cd 4402 	strd	r4, r4, [sp, #8]
	sFilterConfig.SlaveStartFilterBank = 0;
 8002f52:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8002f54:	f7fe f8ec 	bl	8001130 <HAL_CAN_ConfigFilter>

	sFilterConfig.SlaveStartFilterBank = 0;
	sFilterConfig.FilterBank = 0;

	HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig);
 8002f58:	4669      	mov	r1, sp
 8002f5a:	4804      	ldr	r0, [pc, #16]	; (8002f6c <initCanFilter+0x38>)
	sFilterConfig.SlaveStartFilterBank = 0;
 8002f5c:	9409      	str	r4, [sp, #36]	; 0x24
	sFilterConfig.FilterBank = 0;
 8002f5e:	9405      	str	r4, [sp, #20]
	HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig);
 8002f60:	f7fe f8e6 	bl	8001130 <HAL_CAN_ConfigFilter>
}
 8002f64:	b00a      	add	sp, #40	; 0x28
 8002f66:	bd10      	pop	{r4, pc}
 8002f68:	2000023c 	.word	0x2000023c
 8002f6c:	20000214 	.word	0x20000214

08002f70 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f74:	2400      	movs	r4, #0
{
 8002f76:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f78:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8002f7c:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f80:	4b54      	ldr	r3, [pc, #336]	; (80030d4 <MX_GPIO_Init+0x164>)
 8002f82:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f84:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 8002f88:	f8df a154 	ldr.w	sl, [pc, #340]	; 80030e0 <MX_GPIO_Init+0x170>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, POWER_OUT1_Pin|POWER_OUT2_Pin|POWER_OUT3_Pin|POWER_OUT4_Pin, GPIO_PIN_RESET);
 8002f8c:	f8df 9154 	ldr.w	r9, [pc, #340]	; 80030e4 <MX_GPIO_Init+0x174>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5 
 8002f90:	f8df 8154 	ldr.w	r8, [pc, #340]	; 80030e8 <MX_GPIO_Init+0x178>
                          |GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI_MPU_CS_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8002f94:	4f50      	ldr	r7, [pc, #320]	; (80030d8 <MX_GPIO_Init+0x168>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8002f96:	4e51      	ldr	r6, [pc, #324]	; (80030dc <MX_GPIO_Init+0x16c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f98:	f042 0210 	orr.w	r2, r2, #16
 8002f9c:	631a      	str	r2, [r3, #48]	; 0x30
 8002f9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fa0:	f002 0210 	and.w	r2, r2, #16
 8002fa4:	9201      	str	r2, [sp, #4]
 8002fa6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002fa8:	9402      	str	r4, [sp, #8]
 8002faa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fb0:	631a      	str	r2, [r3, #48]	; 0x30
 8002fb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fb4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002fb8:	9202      	str	r2, [sp, #8]
 8002fba:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fbc:	9403      	str	r4, [sp, #12]
 8002fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fc0:	f042 0201 	orr.w	r2, r2, #1
 8002fc4:	631a      	str	r2, [r3, #48]	; 0x30
 8002fc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fc8:	f002 0201 	and.w	r2, r2, #1
 8002fcc:	9203      	str	r2, [sp, #12]
 8002fce:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fd0:	9404      	str	r4, [sp, #16]
 8002fd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fd4:	f042 0202 	orr.w	r2, r2, #2
 8002fd8:	631a      	str	r2, [r3, #48]	; 0x30
 8002fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fdc:	f002 0202 	and.w	r2, r2, #2
 8002fe0:	9204      	str	r2, [sp, #16]
 8002fe2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fe4:	9405      	str	r4, [sp, #20]
 8002fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fe8:	f042 0208 	orr.w	r2, r2, #8
 8002fec:	631a      	str	r2, [r3, #48]	; 0x30
 8002fee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ff0:	f002 0208 	and.w	r2, r2, #8
 8002ff4:	9205      	str	r2, [sp, #20]
 8002ff6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002ff8:	9406      	str	r4, [sp, #24]
 8002ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ffc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003000:	631a      	str	r2, [r3, #48]	; 0x30
 8003002:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003004:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003008:	9206      	str	r2, [sp, #24]
 800300a:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800300c:	9407      	str	r4, [sp, #28]
 800300e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003010:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003014:	631a      	str	r2, [r3, #48]	; 0x30
 8003016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003018:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800301c:	9207      	str	r2, [sp, #28]
 800301e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003020:	9408      	str	r4, [sp, #32]
 8003022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003024:	f042 0220 	orr.w	r2, r2, #32
 8003028:	631a      	str	r2, [r3, #48]	; 0x30
 800302a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302c:	f003 0320 	and.w	r3, r3, #32
 8003030:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 8003032:	4622      	mov	r2, r4
 8003034:	4650      	mov	r0, sl
 8003036:	2101      	movs	r1, #1
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003038:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 800303a:	f7fe fd17 	bl	8001a6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOH, POWER_OUT1_Pin|POWER_OUT2_Pin|POWER_OUT3_Pin|POWER_OUT4_Pin, GPIO_PIN_RESET);
 800303e:	4622      	mov	r2, r4
 8003040:	4648      	mov	r0, r9
 8003042:	213c      	movs	r1, #60	; 0x3c
 8003044:	f7fe fd12 	bl	8001a6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5 
 8003048:	4622      	mov	r2, r4
 800304a:	4640      	mov	r0, r8
 800304c:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8003050:	f7fe fd0c 	bl	8001a6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, SPI_MPU_CS_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8003054:	4622      	mov	r2, r4
 8003056:	4638      	mov	r0, r7
 8003058:	f244 0140 	movw	r1, #16448	; 0x4040
 800305c:	f7fe fd06 	bl	8001a6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8003060:	4622      	mov	r2, r4
 8003062:	4630      	mov	r0, r6
 8003064:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003068:	f7fe fd00 	bl	8001a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800306c:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800306e:	4650      	mov	r0, sl
 8003070:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003072:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003076:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800307a:	f7fe fbb9 	bl	80017f0 <HAL_GPIO_Init>
  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = POWER_OUT1_Pin|POWER_OUT2_Pin|POWER_OUT3_Pin|POWER_OUT4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800307e:	4648      	mov	r0, r9
 8003080:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = POWER_OUT1_Pin|POWER_OUT2_Pin|POWER_OUT3_Pin|POWER_OUT4_Pin;
 8003082:	233c      	movs	r3, #60	; 0x3c
 8003084:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003086:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800308c:	f7fe fbb0 	bl	80017f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5 
                          |GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003090:	4640      	mov	r0, r8
 8003092:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5 
 8003094:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8003098:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309a:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309e:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80030a0:	f7fe fba6 	bl	80017f0 <HAL_GPIO_Init>
  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = SPI_MPU_CS_Pin|LED_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80030a4:	4638      	mov	r0, r7
 80030a6:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = SPI_MPU_CS_Pin|LED_G_Pin;
 80030a8:	f244 0340 	movw	r3, #16448	; 0x4040
 80030ac:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ae:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b2:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80030b4:	f7fe fb9c 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 80030b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 80030bc:	a909      	add	r1, sp, #36	; 0x24
 80030be:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c0:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c4:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = LED_R_Pin;
 80030c6:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 80030c8:	f7fe fb92 	bl	80017f0 <HAL_GPIO_Init>

}
 80030cc:	b00e      	add	sp, #56	; 0x38
 80030ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030d2:	bf00      	nop
 80030d4:	40023800 	.word	0x40023800
 80030d8:	40021400 	.word	0x40021400
 80030dc:	40021000 	.word	0x40021000
 80030e0:	40022000 	.word	0x40022000
 80030e4:	40021c00 	.word	0x40021c00
 80030e8:	40021800 	.word	0x40021800

080030ec <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch) {
 80030ec:	b500      	push	{lr}
 80030ee:	b083      	sub	sp, #12
 80030f0:	a902      	add	r1, sp, #8
HAL_UART_Transmit(&huart7, &ch, 1, 1);
 80030f2:	2301      	movs	r3, #1
void __io_putchar(uint8_t ch) {
 80030f4:	f801 0d01 	strb.w	r0, [r1, #-1]!
HAL_UART_Transmit(&huart7, &ch, 1, 1);
 80030f8:	461a      	mov	r2, r3
 80030fa:	4803      	ldr	r0, [pc, #12]	; (8003108 <__io_putchar+0x1c>)
 80030fc:	f7ff fc84 	bl	8002a08 <HAL_UART_Transmit>
}
 8003100:	b003      	add	sp, #12
 8003102:	f85d fb04 	ldr.w	pc, [sp], #4
 8003106:	bf00      	nop
 8003108:	200005ec 	.word	0x200005ec

0800310c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800310c:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800310e:	2300      	movs	r3, #0
{
 8003110:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003112:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8003116:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800311a:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800311e:	e9cd 3306 	strd	r3, r3, [sp, #24]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003122:	4920      	ldr	r1, [pc, #128]	; (80031a4 <SystemClock_Config+0x98>)
 8003124:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003126:	9303      	str	r3, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003128:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800312a:	4a1f      	ldr	r2, [pc, #124]	; (80031a8 <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800312c:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8003130:	6408      	str	r0, [r1, #64]	; 0x40
 8003132:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003134:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8003138:	9101      	str	r1, [sp, #4]
 800313a:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800313c:	9302      	str	r3, [sp, #8]
 800313e:	6813      	ldr	r3, [r2, #0]
 8003140:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003144:	6013      	str	r3, [r2, #0]
 8003146:	6813      	ldr	r3, [r2, #0]
 8003148:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800314c:	9302      	str	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800314e:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003150:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003154:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003158:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 6;
 800315a:	2106      	movs	r1, #6
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800315c:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800315e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003160:	22a8      	movs	r2, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003162:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003164:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003166:	a808      	add	r0, sp, #32
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003168:	9d02      	ldr	r5, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800316a:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800316c:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 168;
 800316e:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003172:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003174:	f7fe fc86 	bl	8001a84 <HAL_RCC_OscConfig>
 8003178:	b100      	cbz	r0, 800317c <SystemClock_Config+0x70>
 800317a:	e7fe      	b.n	800317a <SystemClock_Config+0x6e>
 800317c:	4603      	mov	r3, r0
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800317e:	260f      	movs	r6, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003180:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003184:	f44f 5280 	mov.w	r2, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003188:	a803      	add	r0, sp, #12
 800318a:	2105      	movs	r1, #5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800318c:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800318e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003190:	9603      	str	r6, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003192:	e9cd 5206 	strd	r5, r2, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003196:	f7fe fe65 	bl	8001e64 <HAL_RCC_ClockConfig>
 800319a:	b100      	cbz	r0, 800319e <SystemClock_Config+0x92>
 800319c:	e7fe      	b.n	800319c <SystemClock_Config+0x90>
  {
    Error_Handler();
  }
}
 800319e:	b014      	add	sp, #80	; 0x50
 80031a0:	bd70      	pop	{r4, r5, r6, pc}
 80031a2:	bf00      	nop
 80031a4:	40023800 	.word	0x40023800
 80031a8:	40007000 	.word	0x40007000

080031ac <HAL_UART_RxCpltCallback>:
		cnt_tim++;
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
	if (UartHandle->Instance == huart1.Instance) {	//Propo-receive Interrupts
 80031ac:	4b55      	ldr	r3, [pc, #340]	; (8003304 <HAL_UART_RxCpltCallback+0x158>)
 80031ae:	6801      	ldr	r1, [r0, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	4291      	cmp	r1, r2
 80031b4:	d000      	beq.n	80031b8 <HAL_UART_RxCpltCallback+0xc>
 80031b6:	4770      	bx	lr
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 80031b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		HAL_UART_Receive_IT(&huart1, rcData, 18);
 80031bc:	4c52      	ldr	r4, [pc, #328]	; (8003308 <HAL_UART_RxCpltCallback+0x15c>)
 80031be:	4618      	mov	r0, r3
 80031c0:	4621      	mov	r1, r4
 80031c2:	2212      	movs	r2, #18
 80031c4:	f7ff fca8 	bl	8002b18 <HAL_UART_Receive_IT>
		HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_1);
 80031c8:	2102      	movs	r1, #2
 80031ca:	4850      	ldr	r0, [pc, #320]	; (800330c <HAL_UART_RxCpltCallback+0x160>)
 80031cc:	f7fe fc52 	bl	8001a74 <HAL_GPIO_TogglePin>
		rc.ch1 = (((rcData[1] & 0x07) << 8) | rcData[0]);
		rc.ch1 -= 1024;
		rc.ch2 = (((rcData[2] & 0x3F) << 5) | (rcData[1] >> 3));
 80031d0:	78a1      	ldrb	r1, [r4, #2]
		rc.ch2 -= 1024;
		rc.ch3 = (((rcData[4] & 0x01) << 10) | (rcData[3] << 2) | (rcData[2] >> 6));
		rc.ch3 -= 1024;
		rc.ch4 = (((rcData[5] & 0x0F) << 7) | (rcData[4] >> 1));
		rc.ch4 -= 1024;
		rc.ch5 = (rcData[17]<<8) | rcData[16];
 80031d2:	7c60      	ldrb	r0, [r4, #17]
 80031d4:	f894 c010 	ldrb.w	ip, [r4, #16]
		rc.ch3 = (((rcData[4] & 0x01) << 10) | (rcData[3] << 2) | (rcData[2] >> 6));
 80031d8:	7927      	ldrb	r7, [r4, #4]
 80031da:	78e5      	ldrb	r5, [r4, #3]
		rc.ch1 = (((rcData[1] & 0x07) << 8) | rcData[0]);
 80031dc:	7862      	ldrb	r2, [r4, #1]
		rc.ch4 = (((rcData[5] & 0x0F) << 7) | (rcData[4] >> 1));
 80031de:	7966      	ldrb	r6, [r4, #5]
		rc.ch1 = (((rcData[1] & 0x07) << 8) | rcData[0]);
 80031e0:	f894 e000 	ldrb.w	lr, [r4]
		rc.ch5 = 1024-rc.ch5;
		rc.sw1 = ((rcData[5] & 0x30) >> 4);
		rc.sw2 = ((rcData[5] & 0xC0) >> 6);
		rc.mouse_x = ((int16_t)rcData[6]) | ((int16_t)rcData[7] << 8);
 80031e4:	f894 8007 	ldrb.w	r8, [r4, #7]
		rc.ch5 = (rcData[17]<<8) | rcData[16];
 80031e8:	ea4c 2c00 	orr.w	ip, ip, r0, lsl #8
		rc.ch2 = (((rcData[2] & 0x3F) << 5) | (rcData[1] >> 3));
 80031ec:	0148      	lsls	r0, r1, #5
		rc.ch3 = (((rcData[4] & 0x01) << 10) | (rcData[3] << 2) | (rcData[2] >> 6));
 80031ee:	0989      	lsrs	r1, r1, #6
 80031f0:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
 80031f4:	02bd      	lsls	r5, r7, #10
		rc.ch1 = (((rcData[1] & 0x07) << 8) | rcData[0]);
 80031f6:	0213      	lsls	r3, r2, #8
		rc.ch3 = (((rcData[4] & 0x01) << 10) | (rcData[3] << 2) | (rcData[2] >> 6));
 80031f8:	f405 6580 	and.w	r5, r5, #1024	; 0x400
		rc.ch2 = (((rcData[2] & 0x3F) << 5) | (rcData[1] >> 3));
 80031fc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
		rc.ch1 = (((rcData[1] & 0x07) << 8) | rcData[0]);
 8003200:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
		rc.ch2 = (((rcData[2] & 0x3F) << 5) | (rcData[1] >> 3));
 8003204:	ea40 00d2 	orr.w	r0, r0, r2, lsr #3
		rc.ch3 = (((rcData[4] & 0x01) << 10) | (rcData[3] << 2) | (rcData[2] >> 6));
 8003208:	4329      	orrs	r1, r5
		rc.ch4 = (((rcData[5] & 0x0F) << 7) | (rcData[4] >> 1));
 800320a:	01f2      	lsls	r2, r6, #7
		rc.mouse_x = ((int16_t)rcData[6]) | ((int16_t)rcData[7] << 8);
 800320c:	79a5      	ldrb	r5, [r4, #6]
		rc.ch1 = (((rcData[1] & 0x07) << 8) | rcData[0]);
 800320e:	ea4e 0e03 	orr.w	lr, lr, r3
		rc.ch4 = (((rcData[5] & 0x0F) << 7) | (rcData[4] >> 1));
 8003212:	f402 62f0 	and.w	r2, r2, #1920	; 0x780
		rc.ch1 -= 1024;
 8003216:	4b3e      	ldr	r3, [pc, #248]	; (8003310 <HAL_UART_RxCpltCallback+0x164>)
		rc.ch4 = (((rcData[5] & 0x0F) << 7) | (rcData[4] >> 1));
 8003218:	ea42 0257 	orr.w	r2, r2, r7, lsr #1
		rc.mouse_x = ((int16_t)rcData[6]) | ((int16_t)rcData[7] << 8);
 800321c:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
		rc.ch1 -= 1024;
 8003220:	f5ae 6e80 	sub.w	lr, lr, #1024	; 0x400
		rc.ch2 -= 1024;
 8003224:	f5a0 6080 	sub.w	r0, r0, #1024	; 0x400
		rc.ch3 -= 1024;
 8003228:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
		rc.mouse_y = ((int16_t)rcData[8]) | ((int16_t)rcData[9] << 8);
		rc.mouse_z = ((int16_t)rcData[10]) | ((int16_t)rcData[11] << 8);
		rc.mouse_press_l = rcData[12];
		rc.mouse_press_r = rcData[13];
		rc.key_v = ((int16_t)rcData[14]);
 800322c:	7ba7      	ldrb	r7, [r4, #14]
		rc.ch1 -= 1024;
 800322e:	f8a3 e000 	strh.w	lr, [r3]
		rc.ch4 -= 1024;
 8003232:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
		rc.mouse_y = ((int16_t)rcData[8]) | ((int16_t)rcData[9] << 8);
 8003236:	f894 e009 	ldrb.w	lr, [r4, #9]
		rc.ch2 -= 1024;
 800323a:	8058      	strh	r0, [r3, #2]
		rc.mouse_x = ((int16_t)rcData[6]) | ((int16_t)rcData[7] << 8);
 800323c:	fa0f f885 	sxth.w	r8, r5
		rc.mouse_z = ((int16_t)rcData[10]) | ((int16_t)rcData[11] << 8);
 8003240:	7aa0      	ldrb	r0, [r4, #10]
		rc.mouse_y = ((int16_t)rcData[8]) | ((int16_t)rcData[9] << 8);
 8003242:	7a25      	ldrb	r5, [r4, #8]
		rc.ch3 -= 1024;
 8003244:	8099      	strh	r1, [r3, #4]
		rc.mouse_z = ((int16_t)rcData[10]) | ((int16_t)rcData[11] << 8);
 8003246:	7ae1      	ldrb	r1, [r4, #11]
		rc.ch4 -= 1024;
 8003248:	80da      	strh	r2, [r3, #6]
		rc.sw1 = ((rcData[5] & 0x30) >> 4);
 800324a:	f3c6 1201 	ubfx	r2, r6, #4, #2
		rc.mouse_z = ((int16_t)rcData[10]) | ((int16_t)rcData[11] << 8);
 800324e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
		rc.sw1 = ((rcData[5] & 0x30) >> 4);
 8003252:	729a      	strb	r2, [r3, #10]
		rc.key_W =     (0b0000000000000001 & rc.key_v);
 8003254:	f007 0101 	and.w	r1, r7, #1
		rc.key_v = ((int16_t)rcData[14]);
 8003258:	b23a      	sxth	r2, r7
		rc.mouse_y = ((int16_t)rcData[8]) | ((int16_t)rcData[9] << 8);
 800325a:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
		rc.mouse_press_r = rcData[13];
 800325e:	7b67      	ldrb	r7, [r4, #13]
		rc.mouse_z = ((int16_t)rcData[10]) | ((int16_t)rcData[11] << 8);
 8003260:	8218      	strh	r0, [r3, #16]
		rc.sw2 = ((rcData[5] & 0xC0) >> 6);
 8003262:	09b6      	lsrs	r6, r6, #6
		rc.mouse_press_l = rcData[12];
 8003264:	7b20      	ldrb	r0, [r4, #12]
		rc.key_W =     (0b0000000000000001 & rc.key_v);
 8003266:	7619      	strb	r1, [r3, #24]
		rc.key_S =     (0b0000000000000010 & rc.key_v)>>1;
 8003268:	f3c2 0440 	ubfx	r4, r2, #1, #1
		rc.key_A =     (0b0000000000000100 & rc.key_v)>>2;
 800326c:	f3c2 0180 	ubfx	r1, r2, #2, #1
		rc.ch5 = 1024-rc.ch5;
 8003270:	f5cc 6c80 	rsb	ip, ip, #1024	; 0x400
		rc.mouse_y = ((int16_t)rcData[8]) | ((int16_t)rcData[9] << 8);
 8003274:	b22d      	sxth	r5, r5
		rc.key_v = ((int16_t)rcData[14]);
 8003276:	82da      	strh	r2, [r3, #22]
		rc.key_S =     (0b0000000000000010 & rc.key_v)>>1;
 8003278:	769c      	strb	r4, [r3, #26]
		rc.ch5 = 1024-rc.ch5;
 800327a:	f8a3 c008 	strh.w	ip, [r3, #8]
		rc.key_D =     (0b0000000000001000 & rc.key_v)>>3;
 800327e:	f3c2 04c0 	ubfx	r4, r2, #3, #1
		rc.sw2 = ((rcData[5] & 0xC0) >> 6);
 8003282:	72de      	strb	r6, [r3, #11]
		rc.mouse_press_r = rcData[13];
 8003284:	829f      	strh	r7, [r3, #20]
		rc.mouse_x = ((int16_t)rcData[6]) | ((int16_t)rcData[7] << 8);
 8003286:	f8a3 800c 	strh.w	r8, [r3, #12]
		rc.mouse_press_l = rcData[12];
 800328a:	8258      	strh	r0, [r3, #18]
		rc.mouse_y = ((int16_t)rcData[8]) | ((int16_t)rcData[9] << 8);
 800328c:	81dd      	strh	r5, [r3, #14]
		rc.key_A =     (0b0000000000000100 & rc.key_v)>>2;
 800328e:	7659      	strb	r1, [r3, #25]
		rc.key_Shift = (0b0000000000010000 & rc.key_v)>>4;
 8003290:	f3c2 1100 	ubfx	r1, r2, #4, #1
		rc.key_D =     (0b0000000000001000 & rc.key_v)>>3;
 8003294:	76dc      	strb	r4, [r3, #27]
		rc.key_Shift = (0b0000000000010000 & rc.key_v)>>4;
 8003296:	7799      	strb	r1, [r3, #30]
		rc.key_Ctrl =  (0b0000000000100000 & rc.key_v)>>5;
 8003298:	f3c2 1440 	ubfx	r4, r2, #5, #1
		rc.key_Q =     (0b0000000001000000 & rc.key_v)>>6;
 800329c:	f3c2 1180 	ubfx	r1, r2, #6, #1
		rc.key_E =     (0b0000000010000000 & rc.key_v)>>7;

		if(rc.sw2==2){
 80032a0:	2e02      	cmp	r6, #2
		rc.key_E =     (0b0000000010000000 & rc.key_v)>>7;
 80032a2:	ea4f 12e2 	mov.w	r2, r2, asr #7
		rc.key_Ctrl =  (0b0000000000100000 & rc.key_v)>>5;
 80032a6:	77dc      	strb	r4, [r3, #31]
		rc.key_Q =     (0b0000000001000000 & rc.key_v)>>6;
 80032a8:	7719      	strb	r1, [r3, #28]
		rc.key_E =     (0b0000000010000000 & rc.key_v)>>7;
 80032aa:	775a      	strb	r2, [r3, #29]
		if(rc.sw2==2){
 80032ac:	d003      	beq.n	80032b6 <HAL_UART_RxCpltCallback+0x10a>
			PC_mouse_x=0;
			PC_mouse_y=0;
		}
		else{
			if(rc.mouse_press_l==1){
 80032ae:	2801      	cmp	r0, #1
 80032b0:	d007      	beq.n	80032c2 <HAL_UART_RxCpltCallback+0x116>
			if(PC_mouse_y < -1*yaw_MAX*yaw_magnification){	PC_mouse_y = -1*yaw_MAX*yaw_magnification;}
			}
		}

	}
}
 80032b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			PC_mouse_x=0;
 80032b6:	4917      	ldr	r1, [pc, #92]	; (8003314 <HAL_UART_RxCpltCallback+0x168>)
			PC_mouse_y=0;
 80032b8:	4a17      	ldr	r2, [pc, #92]	; (8003318 <HAL_UART_RxCpltCallback+0x16c>)
			PC_mouse_x=0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	600b      	str	r3, [r1, #0]
			PC_mouse_y=0;
 80032be:	6013      	str	r3, [r2, #0]
 80032c0:	e7f7      	b.n	80032b2 <HAL_UART_RxCpltCallback+0x106>
			PC_mouse_x=PC_mouse_x+rc.mouse_x;
 80032c2:	4914      	ldr	r1, [pc, #80]	; (8003314 <HAL_UART_RxCpltCallback+0x168>)
			PC_mouse_y=PC_mouse_y+rc.mouse_y;
 80032c4:	4a14      	ldr	r2, [pc, #80]	; (8003318 <HAL_UART_RxCpltCallback+0x16c>)
			PC_mouse_x=PC_mouse_x+rc.mouse_x;
 80032c6:	680b      	ldr	r3, [r1, #0]
			PC_mouse_y=PC_mouse_y+rc.mouse_y;
 80032c8:	6810      	ldr	r0, [r2, #0]
			PC_mouse_x=PC_mouse_x+rc.mouse_x;
 80032ca:	4443      	add	r3, r8
			PC_mouse_y=PC_mouse_y+rc.mouse_y;
 80032cc:	4405      	add	r5, r0
			if(PC_mouse_x > pich_MAX*pich_magnification){	PC_mouse_x = pich_MAX*pich_magnification;}
 80032ce:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
			PC_mouse_x=PC_mouse_x+rc.mouse_x;
 80032d2:	600b      	str	r3, [r1, #0]
			PC_mouse_y=PC_mouse_y+rc.mouse_y;
 80032d4:	6015      	str	r5, [r2, #0]
			if(PC_mouse_x > pich_MAX*pich_magnification){	PC_mouse_x = pich_MAX*pich_magnification;}
 80032d6:	dc0b      	bgt.n	80032f0 <HAL_UART_RxCpltCallback+0x144>
			if(PC_mouse_x < -1*pich_MAX*pich_magnification){PC_mouse_x = -1*pich_MAX*pich_magnification;}
 80032d8:	4810      	ldr	r0, [pc, #64]	; (800331c <HAL_UART_RxCpltCallback+0x170>)
 80032da:	4283      	cmp	r3, r0
 80032dc:	bfb8      	it	lt
 80032de:	6008      	strlt	r0, [r1, #0]
			if(PC_mouse_y > yaw_MAX*yaw_magnification){		PC_mouse_y = pich_MAX*pich_magnification;}
 80032e0:	f640 0334 	movw	r3, #2100	; 0x834
 80032e4:	429d      	cmp	r5, r3
 80032e6:	dd07      	ble.n	80032f8 <HAL_UART_RxCpltCallback+0x14c>
 80032e8:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	e7e0      	b.n	80032b2 <HAL_UART_RxCpltCallback+0x106>
			if(PC_mouse_x > pich_MAX*pich_magnification){	PC_mouse_x = pich_MAX*pich_magnification;}
 80032f0:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80032f4:	600b      	str	r3, [r1, #0]
 80032f6:	e7f3      	b.n	80032e0 <HAL_UART_RxCpltCallback+0x134>
			if(PC_mouse_y < -1*yaw_MAX*yaw_magnification){	PC_mouse_y = -1*yaw_MAX*yaw_magnification;}
 80032f8:	4b09      	ldr	r3, [pc, #36]	; (8003320 <HAL_UART_RxCpltCallback+0x174>)
 80032fa:	429d      	cmp	r5, r3
 80032fc:	bfb8      	it	lt
 80032fe:	6013      	strlt	r3, [r2, #0]
}
 8003300:	e7d7      	b.n	80032b2 <HAL_UART_RxCpltCallback+0x106>
 8003302:	bf00      	nop
 8003304:	2000062c 	.word	0x2000062c
 8003308:	20000490 	.word	0x20000490
 800330c:	40021800 	.word	0x40021800
 8003310:	20000264 	.word	0x20000264
 8003314:	200002c0 	.word	0x200002c0
 8003318:	20000348 	.word	0x20000348
 800331c:	fffff6a0 	.word	0xfffff6a0
 8003320:	fffff7cc 	.word	0xfffff7cc
 8003324:	00000000 	.word	0x00000000

08003328 <HAL_CAN_RxFifo0MsgPendingCallback>:

//can fifo0 receive interrupt
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
	/* Get RX message */
	if (hcan->Instance == hcan2.Instance) {// can2 bus receive interrupt
 8003328:	4a39      	ldr	r2, [pc, #228]	; (8003410 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800332a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (hcan->Instance == hcan2.Instance) {// can2 bus receive interrupt
 800332c:	6812      	ldr	r2, [r2, #0]
 800332e:	6803      	ldr	r3, [r0, #0]
 8003330:	4293      	cmp	r3, r2
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8003332:	4604      	mov	r4, r0
	if (hcan->Instance == hcan2.Instance) {// can2 bus receive interrupt
 8003334:	d035      	beq.n	80033a2 <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
		wheelFdb[id].rpm = canRxData[2] * 256 + canRxData[3];
		wheelFdb[id].torque = canRxData[4] * 256 + canRxData[5];
		wheelFdb[id].temp = canRxData[6];
		wheelFdb[id].omg = 6.28318530718 * (wheelFdb[id].rpm) / 1140.0;
	}
	if (hcan->Instance == hcan1.Instance) {// can1 bus receive interrupt
 8003336:	4a37      	ldr	r2, [pc, #220]	; (8003414 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8003338:	6812      	ldr	r2, [r2, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d000      	beq.n	8003340 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>
		fdb->rpm = canRxData[2] * 256 + canRxData[3];
		fdb->torque = canRxData[4] * 256 + canRxData[5];
		fdb->temp = canRxData[6];
		fdb->omg = 6.28318530718 * (fdb->rpm) / 1140.0;
	}
}
 800333e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, canRxData);
 8003340:	4e35      	ldr	r6, [pc, #212]	; (8003418 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8003342:	4d36      	ldr	r5, [pc, #216]	; (800341c <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8003344:	4632      	mov	r2, r6
 8003346:	462b      	mov	r3, r5
 8003348:	4620      	mov	r0, r4
 800334a:	2100      	movs	r1, #0
 800334c:	f7fd fffc 	bl	8001348 <HAL_CAN_GetRxMessage>
 8003350:	6833      	ldr	r3, [r6, #0]
 8003352:	f46f 7201 	mvn.w	r2, #516	; 0x204
 8003356:	4413      	add	r3, r2
 8003358:	2b02      	cmp	r3, #2
 800335a:	d81f      	bhi.n	800339c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
 800335c:	4830      	ldr	r0, [pc, #192]	; (8003420 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
		fdb->angle = canRxData[0] * 256 + canRxData[1];
 800335e:	786a      	ldrb	r2, [r5, #1]
 8003360:	7829      	ldrb	r1, [r5, #0]
 8003362:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8003366:	eb02 2301 	add.w	r3, r2, r1, lsl #8
 800336a:	8023      	strh	r3, [r4, #0]
		fdb->rpm = canRxData[2] * 256 + canRxData[3];
 800336c:	78ab      	ldrb	r3, [r5, #2]
 800336e:	78e8      	ldrb	r0, [r5, #3]
 8003370:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8003374:	b200      	sxth	r0, r0
 8003376:	8060      	strh	r0, [r4, #2]
		fdb->torque = canRxData[4] * 256 + canRxData[5];
 8003378:	792a      	ldrb	r2, [r5, #4]
 800337a:	796b      	ldrb	r3, [r5, #5]
 800337c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003380:	80a3      	strh	r3, [r4, #4]
		fdb->temp = canRxData[6];
 8003382:	79ab      	ldrb	r3, [r5, #6]
 8003384:	80e3      	strh	r3, [r4, #6]
		fdb->omg = 6.28318530718 * (fdb->rpm) / 1140.0;
 8003386:	f7fd f8dd 	bl	8000544 <__aeabi_i2d>
 800338a:	a31f      	add	r3, pc, #124	; (adr r3, 8003408 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 800338c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003390:	f7fd f942 	bl	8000618 <__aeabi_dmul>
 8003394:	f7fd fc18 	bl	8000bc8 <__aeabi_d2f>
 8003398:	60a0      	str	r0, [r4, #8]
}
 800339a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		fdb->angle = canRxData[0] * 256 + canRxData[1];
 800339c:	2300      	movs	r3, #0
 800339e:	801b      	strh	r3, [r3, #0]
 80033a0:	deff      	udf	#255	; 0xff
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, canRxData);
 80033a2:	4d1e      	ldr	r5, [pc, #120]	; (800341c <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 80033a4:	4e1c      	ldr	r6, [pc, #112]	; (8003418 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 80033a6:	462b      	mov	r3, r5
 80033a8:	4632      	mov	r2, r6
 80033aa:	2100      	movs	r1, #0
 80033ac:	f7fd ffcc 	bl	8001348 <HAL_CAN_GetRxMessage>
		int id = canRxHeader.StdId - 513;
 80033b0:	6833      	ldr	r3, [r6, #0]
		wheelFdb[id].rpm = canRxData[2] * 256 + canRxData[3];
 80033b2:	78aa      	ldrb	r2, [r5, #2]
 80033b4:	78e8      	ldrb	r0, [r5, #3]
		wheelFdb[id].angle = canRxData[0] * 256 + canRxData[1];
 80033b6:	4e1b      	ldr	r6, [pc, #108]	; (8003424 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
		wheelFdb[id].torque = canRxData[4] * 256 + canRxData[5];
 80033b8:	f895 c004 	ldrb.w	ip, [r5, #4]
		wheelFdb[id].angle = canRxData[0] * 256 + canRxData[1];
 80033bc:	f895 e000 	ldrb.w	lr, [r5]
 80033c0:	7869      	ldrb	r1, [r5, #1]
		int id = canRxHeader.StdId - 513;
 80033c2:	f46f 7700 	mvn.w	r7, #512	; 0x200
 80033c6:	443b      	add	r3, r7
		wheelFdb[id].angle = canRxData[0] * 256 + canRxData[1];
 80033c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80033cc:	009b      	lsls	r3, r3, #2
		wheelFdb[id].rpm = canRxData[2] * 256 + canRxData[3];
 80033ce:	eb00 2002 	add.w	r0, r0, r2, lsl #8
		wheelFdb[id].torque = canRxData[4] * 256 + canRxData[5];
 80033d2:	796a      	ldrb	r2, [r5, #5]
		wheelFdb[id].temp = canRxData[6];
 80033d4:	79af      	ldrb	r7, [r5, #6]
		wheelFdb[id].angle = canRxData[0] * 256 + canRxData[1];
 80033d6:	18f5      	adds	r5, r6, r3
		wheelFdb[id].torque = canRxData[4] * 256 + canRxData[5];
 80033d8:	eb02 220c 	add.w	r2, r2, ip, lsl #8
		wheelFdb[id].angle = canRxData[0] * 256 + canRxData[1];
 80033dc:	eb01 210e 	add.w	r1, r1, lr, lsl #8
		wheelFdb[id].rpm = canRxData[2] * 256 + canRxData[3];
 80033e0:	b200      	sxth	r0, r0
		wheelFdb[id].angle = canRxData[0] * 256 + canRxData[1];
 80033e2:	52f1      	strh	r1, [r6, r3]
		wheelFdb[id].torque = canRxData[4] * 256 + canRxData[5];
 80033e4:	80aa      	strh	r2, [r5, #4]
		wheelFdb[id].temp = canRxData[6];
 80033e6:	80ef      	strh	r7, [r5, #6]
		wheelFdb[id].rpm = canRxData[2] * 256 + canRxData[3];
 80033e8:	8068      	strh	r0, [r5, #2]
		wheelFdb[id].omg = 6.28318530718 * (wheelFdb[id].rpm) / 1140.0;
 80033ea:	f7fd f8ab 	bl	8000544 <__aeabi_i2d>
 80033ee:	a306      	add	r3, pc, #24	; (adr r3, 8003408 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80033f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f4:	f7fd f910 	bl	8000618 <__aeabi_dmul>
 80033f8:	f7fd fbe6 	bl	8000bc8 <__aeabi_d2f>
 80033fc:	6823      	ldr	r3, [r4, #0]
 80033fe:	60a8      	str	r0, [r5, #8]
 8003400:	e799      	b.n	8003336 <HAL_CAN_RxFifo0MsgPendingCallback+0xe>
 8003402:	bf00      	nop
 8003404:	f3af 8000 	nop.w
 8003408:	bf90c83b 	.word	0xbf90c83b
 800340c:	3f76934b 	.word	0x3f76934b
 8003410:	20000214 	.word	0x20000214
 8003414:	2000023c 	.word	0x2000023c
 8003418:	20000454 	.word	0x20000454
 800341c:	200003fc 	.word	0x200003fc
 8003420:	08006f68 	.word	0x08006f68
 8003424:	20000290 	.word	0x20000290

08003428 <initFriction>:
	mecanum.param.wheelbase = WHEELBASE;
	mecanum.param.rotate_x_offset = 0;
	mecanum.param.rotate_y_offset = 0;
}

void initFriction() {
 8003428:	b510      	push	{r4, lr}
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1500);
 800342a:	4c0a      	ldr	r4, [pc, #40]	; (8003454 <initFriction+0x2c>)
 800342c:	6823      	ldr	r3, [r4, #0]
 800342e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003432:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1500);
	HAL_Delay(3000);
 8003434:	f640 30b8 	movw	r0, #3000	; 0xbb8
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1500);
 8003438:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(3000);
 800343a:	f7fd fde5 	bl	8001008 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1220);
 800343e:	6823      	ldr	r3, [r4, #0]
 8003440:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8003444:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1220);
	HAL_Delay(5000);
 8003446:	f241 3088 	movw	r0, #5000	; 0x1388
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1220);
 800344a:	641a      	str	r2, [r3, #64]	; 0x40

}
 800344c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(5000);
 8003450:	f7fd bdda 	b.w	8001008 <HAL_Delay>
 8003454:	2000056c 	.word	0x2000056c

08003458 <main>:
{
 8003458:	b580      	push	{r7, lr}
  HAL_Init();
 800345a:	f7fd fda9 	bl	8000fb0 <HAL_Init>
  SystemClock_Config();
 800345e:	f7ff fe55 	bl	800310c <SystemClock_Config>
  MX_GPIO_Init();
 8003462:	f7ff fd85 	bl	8002f70 <MX_GPIO_Init>
  MX_CAN1_Init();
 8003466:	f7ff fc85 	bl	8002d74 <MX_CAN1_Init>
  MX_CAN2_Init();
 800346a:	f7ff fca3 	bl	8002db4 <MX_CAN2_Init>
  MX_SPI5_Init();
 800346e:	f000 fcb7 	bl	8003de0 <MX_SPI5_Init>
  MX_TIM1_Init();
 8003472:	f000 fddf 	bl	8004034 <MX_TIM1_Init>
  MX_TIM6_Init();
 8003476:	f000 fe8f 	bl	8004198 <MX_TIM6_Init>
  MX_TIM12_Init();
 800347a:	f000 feb1 	bl	80041e0 <MX_TIM12_Init>
  MX_UART7_Init();
 800347e:	f000 ff7f 	bl	8004380 <MX_UART7_Init>
  MX_UART8_Init();
 8003482:	f000 ff99 	bl	80043b8 <MX_UART8_Init>
  MX_USART1_UART_Init();
 8003486:	f000 ffb3 	bl	80043f0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800348a:	f000 ffcf 	bl	800442c <MX_USART6_UART_Init>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 800348e:	2200      	movs	r2, #0
 8003490:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003494:	4865      	ldr	r0, [pc, #404]	; (800362c <main+0x1d4>)
  PC_mouse_x=0;
 8003496:	4d66      	ldr	r5, [pc, #408]	; (8003630 <main+0x1d8>)
  PC_mouse_y=0;
 8003498:	4c66      	ldr	r4, [pc, #408]	; (8003634 <main+0x1dc>)
	  printf("PC_mouse_x=%d PC_mouse_y=%d",PC_mouse_x,PC_mouse_y);
 800349a:	4f67      	ldr	r7, [pc, #412]	; (8003638 <main+0x1e0>)
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 800349c:	f7fe fae6 	bl	8001a6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, 1);
 80034a0:	2201      	movs	r2, #1
 80034a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034a6:	4865      	ldr	r0, [pc, #404]	; (800363c <main+0x1e4>)
 80034a8:	f7fe fae0 	bl	8001a6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 1);
 80034ac:	2201      	movs	r2, #1
 80034ae:	2102      	movs	r1, #2
 80034b0:	4863      	ldr	r0, [pc, #396]	; (8003640 <main+0x1e8>)
 80034b2:	f7fe fadb 	bl	8001a6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 80034b6:	2201      	movs	r2, #1
 80034b8:	2104      	movs	r1, #4
 80034ba:	4861      	ldr	r0, [pc, #388]	; (8003640 <main+0x1e8>)
 80034bc:	f7fe fad6 	bl	8001a6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 80034c0:	2201      	movs	r2, #1
 80034c2:	2108      	movs	r1, #8
 80034c4:	485e      	ldr	r0, [pc, #376]	; (8003640 <main+0x1e8>)
 80034c6:	f7fe fad1 	bl	8001a6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, 1);
 80034ca:	2201      	movs	r2, #1
 80034cc:	2110      	movs	r1, #16
 80034ce:	485c      	ldr	r0, [pc, #368]	; (8003640 <main+0x1e8>)
 80034d0:	f7fe facc 	bl	8001a6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, 1);
 80034d4:	2201      	movs	r2, #1
 80034d6:	2120      	movs	r1, #32
 80034d8:	4859      	ldr	r0, [pc, #356]	; (8003640 <main+0x1e8>)
 80034da:	f7fe fac7 	bl	8001a6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, 1);
 80034de:	2201      	movs	r2, #1
 80034e0:	2140      	movs	r1, #64	; 0x40
 80034e2:	4857      	ldr	r0, [pc, #348]	; (8003640 <main+0x1e8>)
 80034e4:	f7fe fac2 	bl	8001a6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, 1);
 80034e8:	2201      	movs	r2, #1
 80034ea:	2180      	movs	r1, #128	; 0x80
 80034ec:	4854      	ldr	r0, [pc, #336]	; (8003640 <main+0x1e8>)
 80034ee:	f7fe fabd 	bl	8001a6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8, 1);
 80034f2:	2201      	movs	r2, #1
 80034f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034f8:	4851      	ldr	r0, [pc, #324]	; (8003640 <main+0x1e8>)
 80034fa:	f7fe fab7 	bl	8001a6c <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // friction wheel
 80034fe:	2100      	movs	r1, #0
 8003500:	4850      	ldr	r0, [pc, #320]	; (8003644 <main+0x1ec>)
 8003502:	f7fe fec1 	bl	8002288 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8003506:	210c      	movs	r1, #12
 8003508:	484e      	ldr	r0, [pc, #312]	; (8003644 <main+0x1ec>)
 800350a:	f7fe febd 	bl	8002288 <HAL_TIM_PWM_Start>
  initFriction();
 800350e:	f7ff ff8b 	bl	8003428 <initFriction>
		wheelPID[i].t = 2.0f;
 8003512:	4b4d      	ldr	r3, [pc, #308]	; (8003648 <main+0x1f0>)

void initLoadPID() {
	loadPID.t = 2.0f;
 8003514:	4a4d      	ldr	r2, [pc, #308]	; (800364c <main+0x1f4>)
	loadPID.p = 10.0f;
	loadPID.i = 0.1f*500;
	loadPID.d = 0.07f;
 8003516:	484e      	ldr	r0, [pc, #312]	; (8003650 <main+0x1f8>)
 8003518:	60d0      	str	r0, [r2, #12]
		wheelPID[i].t = 2.0f;
 800351a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	loadPID.t = 2.0f;
 800351e:	6011      	str	r1, [r2, #0]
		wheelPID[i].t = 2.0f;
 8003520:	6019      	str	r1, [r3, #0]
 8003522:	62d9      	str	r1, [r3, #44]	; 0x2c
 8003524:	6599      	str	r1, [r3, #88]	; 0x58
 8003526:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	loadPID.p = 10.0f;
 800352a:	494a      	ldr	r1, [pc, #296]	; (8003654 <main+0x1fc>)
		wheelPID[i].p = 6.5f;
 800352c:	484a      	ldr	r0, [pc, #296]	; (8003658 <main+0x200>)
	loadPID.p = 10.0f;
 800352e:	6051      	str	r1, [r2, #4]
		wheelPID[i].i = 50.0f;
 8003530:	494a      	ldr	r1, [pc, #296]	; (800365c <main+0x204>)
		wheelPID[i].outLimit = 15000.0f;
 8003532:	f8df c16c 	ldr.w	ip, [pc, #364]	; 80036a0 <main+0x248>
	loadPID.i = 0.1f*500;
 8003536:	6091      	str	r1, [r2, #8]
		wheelPID[i].d = 0.0f;
 8003538:	2600      	movs	r6, #0
		wheelPID[i].p = 6.5f;
 800353a:	6058      	str	r0, [r3, #4]
 800353c:	6318      	str	r0, [r3, #48]	; 0x30
 800353e:	65d8      	str	r0, [r3, #92]	; 0x5c
 8003540:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
		wheelPID[i].i = 50.0f;
 8003544:	6099      	str	r1, [r3, #8]
		wheelPID[i].integralOutLimit = 500.0f;
 8003546:	4846      	ldr	r0, [pc, #280]	; (8003660 <main+0x208>)
		wheelPID[i].i = 50.0f;
 8003548:	6359      	str	r1, [r3, #52]	; 0x34
 800354a:	6619      	str	r1, [r3, #96]	; 0x60
 800354c:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
		wheelPID[i].differentialFilterRate = 0.9f;
 8003550:	4944      	ldr	r1, [pc, #272]	; (8003664 <main+0x20c>)
		wheelPID[i].outLimit = 15000.0f;
 8003552:	f8c3 c010 	str.w	ip, [r3, #16]
 8003556:	f8c3 c03c 	str.w	ip, [r3, #60]	; 0x3c
 800355a:	f8c3 c068 	str.w	ip, [r3, #104]	; 0x68
 800355e:	f8c3 c094 	str.w	ip, [r3, #148]	; 0x94
		wheelPID[i].differentialFilterRate = 0.9f;
 8003562:	6199      	str	r1, [r3, #24]
 8003564:	6459      	str	r1, [r3, #68]	; 0x44
 8003566:	6719      	str	r1, [r3, #112]	; 0x70
 8003568:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
		wheelPID[i].d = 0.0f;
 800356c:	60de      	str	r6, [r3, #12]
 800356e:	639e      	str	r6, [r3, #56]	; 0x38
 8003570:	665e      	str	r6, [r3, #100]	; 0x64
 8003572:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
		wheelPID[i].integralOutLimit = 500.0f;
 8003576:	6158      	str	r0, [r3, #20]
 8003578:	6418      	str	r0, [r3, #64]	; 0x40
 800357a:	66d8      	str	r0, [r3, #108]	; 0x6c
 800357c:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	loadPID.outLimit = 30000.0f;
 8003580:	4839      	ldr	r0, [pc, #228]	; (8003668 <main+0x210>)
	loadPID.integralOutLimit = 10000.0f;
 8003582:	4b3a      	ldr	r3, [pc, #232]	; (800366c <main+0x214>)
	loadPID.outLimit = 30000.0f;
 8003584:	6110      	str	r0, [r2, #16]
	loadPID.differentialFilterRate = 0.9f;
 8003586:	6191      	str	r1, [r2, #24]
	loadPID.integralOutLimit = 10000.0f;
 8003588:	6153      	str	r3, [r2, #20]
  initCanFilter();
 800358a:	f7ff fcd3 	bl	8002f34 <initCanFilter>
	mecanum.param.wheel_perimeter = PERIMETER;
 800358e:	4b38      	ldr	r3, [pc, #224]	; (8003670 <main+0x218>)
 8003590:	4a38      	ldr	r2, [pc, #224]	; (8003674 <main+0x21c>)
	mecanum.param.wheeltrack = WHEELTRACK;
 8003592:	4939      	ldr	r1, [pc, #228]	; (8003678 <main+0x220>)
	mecanum.param.wheelbase = WHEELBASE;
 8003594:	4839      	ldr	r0, [pc, #228]	; (800367c <main+0x224>)
	mecanum.param.wheel_perimeter = PERIMETER;
 8003596:	601a      	str	r2, [r3, #0]
	mecanum.param.wheeltrack = WHEELTRACK;
 8003598:	6059      	str	r1, [r3, #4]
  HAL_UART_Receive_IT(&huart1, rcData, 18);
 800359a:	2212      	movs	r2, #18
	mecanum.param.wheelbase = WHEELBASE;
 800359c:	6098      	str	r0, [r3, #8]
  HAL_UART_Receive_IT(&huart1, rcData, 18);
 800359e:	4938      	ldr	r1, [pc, #224]	; (8003680 <main+0x228>)
 80035a0:	4838      	ldr	r0, [pc, #224]	; (8003684 <main+0x22c>)
	mecanum.param.rotate_x_offset = 0;
 80035a2:	60de      	str	r6, [r3, #12]
	mecanum.param.rotate_y_offset = 0;
 80035a4:	611e      	str	r6, [r3, #16]
  HAL_UART_Receive_IT(&huart1, rcData, 18);
 80035a6:	f7ff fab7 	bl	8002b18 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80035aa:	4837      	ldr	r0, [pc, #220]	; (8003688 <main+0x230>)
	  printf("\r\n");
 80035ac:	4e37      	ldr	r6, [pc, #220]	; (800368c <main+0x234>)
  HAL_TIM_Base_Start_IT(&htim6);
 80035ae:	f7fe fdd7 	bl	8002160 <HAL_TIM_Base_Start_IT>
  setbuf(stdout, NULL);
 80035b2:	4b37      	ldr	r3, [pc, #220]	; (8003690 <main+0x238>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2100      	movs	r1, #0
 80035b8:	6898      	ldr	r0, [r3, #8]
 80035ba:	f001 fd5d 	bl	8005078 <setbuf>
  HAL_CAN_Start(&hcan1);
 80035be:	4835      	ldr	r0, [pc, #212]	; (8003694 <main+0x23c>)
 80035c0:	f7fd fe3c 	bl	800123c <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 80035c4:	4834      	ldr	r0, [pc, #208]	; (8003698 <main+0x240>)
 80035c6:	f7fd fe39 	bl	800123c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80035ca:	2102      	movs	r1, #2
 80035cc:	4831      	ldr	r0, [pc, #196]	; (8003694 <main+0x23c>)
 80035ce:	f7fd ff3b 	bl	8001448 <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80035d2:	2102      	movs	r1, #2
 80035d4:	4830      	ldr	r0, [pc, #192]	; (8003698 <main+0x240>)
 80035d6:	f7fd ff37 	bl	8001448 <HAL_CAN_ActivateNotification>
  HAL_GPIO_WritePin(POWER_OUT1_GPIO_Port, POWER_OUT1_Pin, 1);
 80035da:	2201      	movs	r2, #1
 80035dc:	2104      	movs	r1, #4
 80035de:	482f      	ldr	r0, [pc, #188]	; (800369c <main+0x244>)
 80035e0:	f7fe fa44 	bl	8001a6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(POWER_OUT2_GPIO_Port, POWER_OUT2_Pin, 1);
 80035e4:	2201      	movs	r2, #1
 80035e6:	2108      	movs	r1, #8
 80035e8:	482c      	ldr	r0, [pc, #176]	; (800369c <main+0x244>)
 80035ea:	f7fe fa3f 	bl	8001a6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(POWER_OUT3_GPIO_Port, POWER_OUT3_Pin, 1);
 80035ee:	2201      	movs	r2, #1
 80035f0:	2110      	movs	r1, #16
 80035f2:	482a      	ldr	r0, [pc, #168]	; (800369c <main+0x244>)
 80035f4:	f7fe fa3a 	bl	8001a6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(POWER_OUT4_GPIO_Port, POWER_OUT4_Pin, 1);
 80035f8:	2201      	movs	r2, #1
 80035fa:	2120      	movs	r1, #32
 80035fc:	4827      	ldr	r0, [pc, #156]	; (800369c <main+0x244>)
 80035fe:	f7fe fa35 	bl	8001a6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 8003602:	2201      	movs	r2, #1
 8003604:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003608:	4808      	ldr	r0, [pc, #32]	; (800362c <main+0x1d4>)
 800360a:	f7fe fa2f 	bl	8001a6c <HAL_GPIO_WritePin>
  PC_mouse_x=0;
 800360e:	2300      	movs	r3, #0
  PC_mouse_y=0;
 8003610:	461a      	mov	r2, r3
 8003612:	4619      	mov	r1, r3
  PC_mouse_x=0;
 8003614:	602b      	str	r3, [r5, #0]
  PC_mouse_y=0;
 8003616:	6023      	str	r3, [r4, #0]
	  printf("PC_mouse_x=%d PC_mouse_y=%d",PC_mouse_x,PC_mouse_y);
 8003618:	4638      	mov	r0, r7
 800361a:	f001 fcb1 	bl	8004f80 <iprintf>
	  printf("\r\n");
 800361e:	4630      	mov	r0, r6
 8003620:	f001 fd22 	bl	8005068 <puts>
 8003624:	6829      	ldr	r1, [r5, #0]
 8003626:	6822      	ldr	r2, [r4, #0]
 8003628:	e7f6      	b.n	8003618 <main+0x1c0>
 800362a:	bf00      	nop
 800362c:	40021000 	.word	0x40021000
 8003630:	200002c0 	.word	0x200002c0
 8003634:	20000348 	.word	0x20000348
 8003638:	08006f74 	.word	0x08006f74
 800363c:	40021400 	.word	0x40021400
 8003640:	40021800 	.word	0x40021800
 8003644:	2000056c 	.word	0x2000056c
 8003648:	2000034c 	.word	0x2000034c
 800364c:	200004a4 	.word	0x200004a4
 8003650:	3d8f5c29 	.word	0x3d8f5c29
 8003654:	41200000 	.word	0x41200000
 8003658:	40d00000 	.word	0x40d00000
 800365c:	42480000 	.word	0x42480000
 8003660:	43fa0000 	.word	0x43fa0000
 8003664:	3f666666 	.word	0x3f666666
 8003668:	46ea6000 	.word	0x46ea6000
 800366c:	461c4000 	.word	0x461c4000
 8003670:	20000404 	.word	0x20000404
 8003674:	43ef0000 	.word	0x43ef0000
 8003678:	43c50000 	.word	0x43c50000
 800367c:	43cf8000 	.word	0x43cf8000
 8003680:	20000490 	.word	0x20000490
 8003684:	2000062c 	.word	0x2000062c
 8003688:	2000052c 	.word	0x2000052c
 800368c:	08006f90 	.word	0x08006f90
 8003690:	20000010 	.word	0x20000010
 8003694:	2000023c 	.word	0x2000023c
 8003698:	20000214 	.word	0x20000214
 800369c:	40021c00 	.word	0x40021c00
 80036a0:	466a6000 	.word	0x466a6000
 80036a4:	00000000 	.word	0x00000000

080036a8 <Gimbal_Task>:
}


void Gimbal_Task(){
 80036a8:	b570      	push	{r4, r5, r6, lr}
	int fire = 0;
	int16_t u[4];
	if (rc.mouse_press_r == 1) {
 80036aa:	4c65      	ldr	r4, [pc, #404]	; (8003840 <Gimbal_Task+0x198>)
		fire = 1;
	} else {
		fire = 0;
	}
	DBUFF[1] = loadPID.error = -900.0f*fire*rc.sw1 - loadMotorFdb.rpm;
 80036ac:	4a65      	ldr	r2, [pc, #404]	; (8003844 <Gimbal_Task+0x19c>)
 80036ae:	7aa3      	ldrb	r3, [r4, #10]
 80036b0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80036b4:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003848 <Gimbal_Task+0x1a0>
 80036b8:	4d64      	ldr	r5, [pc, #400]	; (800384c <Gimbal_Task+0x1a4>)
 80036ba:	ee07 3a10 	vmov	s14, r3
	if (rc.mouse_press_r == 1) {
 80036be:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 80036c2:	f1a3 0301 	sub.w	r3, r3, #1
	DBUFF[1] = loadPID.error = -900.0f*fire*rc.sw1 - loadMotorFdb.rpm;
 80036c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	if (rc.mouse_press_r == 1) {
 80036ca:	fab3 f383 	clz	r3, r3
 80036ce:	095b      	lsrs	r3, r3, #5
	DBUFF[1] = loadPID.error = -900.0f*fire*rc.sw1 - loadMotorFdb.rpm;
 80036d0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80036d4:	ee07 2a90 	vmov	s15, r2
 80036d8:	ee06 3a90 	vmov	s13, r3
 80036dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036e0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80036e4:	4a5a      	ldr	r2, [pc, #360]	; (8003850 <Gimbal_Task+0x1a8>)
 80036e6:	eed6 7a87 	vfnms.f32	s15, s13, s14
void Gimbal_Task(){
 80036ea:	b082      	sub	sp, #8
	DBUFF[3] = u[2] = pidExecute(&loadPID);
 80036ec:	4610      	mov	r0, r2
	DBUFF[1] = loadPID.error = -900.0f*fire*rc.sw1 - loadMotorFdb.rpm;
 80036ee:	edc2 7a0a 	vstr	s15, [r2, #40]	; 0x28
 80036f2:	edc5 7a01 	vstr	s15, [r5, #4]
	DBUFF[3] = u[2] = pidExecute(&loadPID);
 80036f6:	f000 fb13 	bl	8003d20 <pidExecute>
 80036fa:	eebd 0ac0 	vcvt.s32.f32	s0, s0


	if(rc.sw2==2){target_yaw=0;}
 80036fe:	7ae4      	ldrb	r4, [r4, #11]
	DBUFF[3] = u[2] = pidExecute(&loadPID);
 8003700:	ee10 3a10 	vmov	r3, s0
 8003704:	b21b      	sxth	r3, r3
 8003706:	ee07 3a90 	vmov	s15, r3
 800370a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	if(rc.sw2==2){target_yaw=0;}
 800370e:	2c02      	cmp	r4, #2
	DBUFF[3] = u[2] = pidExecute(&loadPID);
 8003710:	f8ad 3004 	strh.w	r3, [sp, #4]
 8003714:	edc5 7a03 	vstr	s15, [r5, #12]
	if(rc.sw2==2){target_yaw=0;}
 8003718:	f000 8085 	beq.w	8003826 <Gimbal_Task+0x17e>
	else{target_yaw =(float)PC_mouse_x / yaw_magnification;}
 800371c:	4b4d      	ldr	r3, [pc, #308]	; (8003854 <Gimbal_Task+0x1ac>)
 800371e:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8003858 <Gimbal_Task+0x1b0>
 8003722:	edd3 7a00 	vldr	s15, [r3]
 8003726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800372a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800372e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003732:	ee17 3a90 	vmov	r3, s15
 8003736:	b21b      	sxth	r3, r3
 8003738:	461d      	mov	r5, r3
	yaw_now=(float)((gimbalYawFdb.angle-4096.0)/8191.0*360.0);
 800373a:	4a48      	ldr	r2, [pc, #288]	; (800385c <Gimbal_Task+0x1b4>)
 800373c:	4948      	ldr	r1, [pc, #288]	; (8003860 <Gimbal_Task+0x1b8>)
 800373e:	f9b2 0000 	ldrsh.w	r0, [r2]
 8003742:	800b      	strh	r3, [r1, #0]
 8003744:	f7fc fefe 	bl	8000544 <__aeabi_i2d>
 8003748:	2200      	movs	r2, #0
 800374a:	4b46      	ldr	r3, [pc, #280]	; (8003864 <Gimbal_Task+0x1bc>)
 800374c:	4e46      	ldr	r6, [pc, #280]	; (8003868 <Gimbal_Task+0x1c0>)
 800374e:	f7fc fdab 	bl	80002a8 <__aeabi_dsub>
 8003752:	a339      	add	r3, pc, #228	; (adr r3, 8003838 <Gimbal_Task+0x190>)
 8003754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003758:	f7fc ff5e 	bl	8000618 <__aeabi_dmul>
 800375c:	f7fd fa34 	bl	8000bc8 <__aeabi_d2f>
 8003760:	ee07 0a90 	vmov	s15, r0
 8003764:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003768:	f64e 2260 	movw	r2, #60000	; 0xea60
	yaw_now=(float)((gimbalYawFdb.angle-4096.0)/8191.0*360.0);
 800376c:	ee17 3a90 	vmov	r3, s15
 8003770:	b218      	sxth	r0, r3
	u[0]=map(target_yaw-yaw_now, -180, 180, -30000, 30000);
 8003772:	1a2d      	subs	r5, r5, r0
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003774:	35b4      	adds	r5, #180	; 0xb4
 8003776:	4b3d      	ldr	r3, [pc, #244]	; (800386c <Gimbal_Task+0x1c4>)
	yaw_now=(float)((gimbalYawFdb.angle-4096.0)/8191.0*360.0);
 8003778:	8030      	strh	r0, [r6, #0]
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800377a:	fb02 f205 	mul.w	r2, r2, r5
 800377e:	fb83 1302 	smull	r1, r3, r3, r2
 8003782:	1899      	adds	r1, r3, r2
 8003784:	17d3      	asrs	r3, r2, #31
 8003786:	ebc3 2321 	rsb	r3, r3, r1, asr #8
 800378a:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 800378e:	3b30      	subs	r3, #48	; 0x30

	if(rc.sw2==2){target_pich=0;}
 8003790:	2c02      	cmp	r4, #2
	u[0]=map(target_yaw-yaw_now, -180, 180, -30000, 30000);
 8003792:	f8ad 3000 	strh.w	r3, [sp]
	if(rc.sw2==2){target_pich=0;}
 8003796:	d049      	beq.n	800382c <Gimbal_Task+0x184>
	else{target_pich=(float)PC_mouse_y / pich_magnification;}
 8003798:	4b35      	ldr	r3, [pc, #212]	; (8003870 <Gimbal_Task+0x1c8>)
 800379a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003874 <Gimbal_Task+0x1cc>
 800379e:	edd3 7a00 	vldr	s15, [r3]
 80037a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037ae:	ee17 3a90 	vmov	r3, s15
 80037b2:	b21b      	sxth	r3, r3
 80037b4:	461c      	mov	r4, r3
	pich_now=(float)((gimbalPitchFdb.angle-4096.0)/8191.0*360.0)+24;
 80037b6:	4a30      	ldr	r2, [pc, #192]	; (8003878 <Gimbal_Task+0x1d0>)
 80037b8:	4930      	ldr	r1, [pc, #192]	; (800387c <Gimbal_Task+0x1d4>)
 80037ba:	f9b2 0000 	ldrsh.w	r0, [r2]
 80037be:	800b      	strh	r3, [r1, #0]
 80037c0:	f7fc fec0 	bl	8000544 <__aeabi_i2d>
 80037c4:	2200      	movs	r2, #0
 80037c6:	4b27      	ldr	r3, [pc, #156]	; (8003864 <Gimbal_Task+0x1bc>)
 80037c8:	4d2d      	ldr	r5, [pc, #180]	; (8003880 <Gimbal_Task+0x1d8>)
 80037ca:	f7fc fd6d 	bl	80002a8 <__aeabi_dsub>
 80037ce:	a31a      	add	r3, pc, #104	; (adr r3, 8003838 <Gimbal_Task+0x190>)
 80037d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d4:	f7fc ff20 	bl	8000618 <__aeabi_dmul>
 80037d8:	f7fd f9f6 	bl	8000bc8 <__aeabi_d2f>
 80037dc:	ee07 0a10 	vmov	s14, r0
 80037e0:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
 80037e4:	ee77 7a27 	vadd.f32	s15, s14, s15
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80037e8:	f247 5230 	movw	r2, #30000	; 0x7530
	pich_now=(float)((gimbalPitchFdb.angle-4096.0)/8191.0*360.0)+24;
 80037ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80037f0:	4824      	ldr	r0, [pc, #144]	; (8003884 <Gimbal_Task+0x1dc>)
	pich_now=(float)((gimbalPitchFdb.angle-4096.0)/8191.0*360.0)+24;
 80037f2:	ee17 3a90 	vmov	r3, s15
 80037f6:	b219      	sxth	r1, r3
	u[1]=map(target_pich-pich_now, -30, 20, -15000, 15000);
 80037f8:	1a64      	subs	r4, r4, r1
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80037fa:	341e      	adds	r4, #30
 80037fc:	fb02 f204 	mul.w	r2, r2, r4
 8003800:	fb80 3002 	smull	r3, r0, r0, r2
 8003804:	17d3      	asrs	r3, r2, #31
 8003806:	ebc3 1320 	rsb	r3, r3, r0, asr #4
 800380a:	f5a3 536a 	sub.w	r3, r3, #14976	; 0x3a80
 800380e:	3b18      	subs	r3, #24


	u[3]=0;
 8003810:	2200      	movs	r2, #0
	driveGimbalMotors(u);
 8003812:	4668      	mov	r0, sp
	pich_now=(float)((gimbalPitchFdb.angle-4096.0)/8191.0*360.0)+24;
 8003814:	8029      	strh	r1, [r5, #0]
	u[1]=map(target_pich-pich_now, -30, 20, -15000, 15000);
 8003816:	f8ad 3002 	strh.w	r3, [sp, #2]
	u[3]=0;
 800381a:	f8ad 2006 	strh.w	r2, [sp, #6]
	driveGimbalMotors(u);
 800381e:	f000 fa3f 	bl	8003ca0 <driveGimbalMotors>
}
 8003822:	b002      	add	sp, #8
 8003824:	bd70      	pop	{r4, r5, r6, pc}
 8003826:	2500      	movs	r5, #0
	if(rc.sw2==2){target_yaw=0;}
 8003828:	462b      	mov	r3, r5
 800382a:	e786      	b.n	800373a <Gimbal_Task+0x92>
 800382c:	2400      	movs	r4, #0
	if(rc.sw2==2){target_pich=0;}
 800382e:	4623      	mov	r3, r4
 8003830:	e7c1      	b.n	80037b6 <Gimbal_Task+0x10e>
 8003832:	bf00      	nop
 8003834:	f3af 8000 	nop.w
 8003838:	05a02d01 	.word	0x05a02d01
 800383c:	3fa680b4 	.word	0x3fa680b4
 8003840:	20000264 	.word	0x20000264
 8003844:	20000474 	.word	0x20000474
 8003848:	c4610000 	.word	0xc4610000
 800384c:	200002c8 	.word	0x200002c8
 8003850:	200004a4 	.word	0x200004a4
 8003854:	200002c0 	.word	0x200002c0
 8003858:	3d088889 	.word	0x3d088889
 800385c:	20000284 	.word	0x20000284
 8003860:	2000048c 	.word	0x2000048c
 8003864:	40b00000 	.word	0x40b00000
 8003868:	200004a2 	.word	0x200004a2
 800386c:	b60b60b7 	.word	0xb60b60b7
 8003870:	20000348 	.word	0x20000348
 8003874:	3c4ccccd 	.word	0x3c4ccccd
 8003878:	20000480 	.word	0x20000480
 800387c:	200002c4 	.word	0x200002c4
 8003880:	200004d0 	.word	0x200004d0
 8003884:	51eb851f 	.word	0x51eb851f

08003888 <HAL_TIM_PeriodElapsedCallback>:
	c++;
 8003888:	4a44      	ldr	r2, [pc, #272]	; (800399c <HAL_TIM_PeriodElapsedCallback+0x114>)
	if (htim->Instance == htim6.Instance) {//500Hz
 800388a:	4945      	ldr	r1, [pc, #276]	; (80039a0 <HAL_TIM_PeriodElapsedCallback+0x118>)
	c++;
 800388c:	6813      	ldr	r3, [r2, #0]
	if (htim->Instance == htim6.Instance) {//500Hz
 800388e:	6800      	ldr	r0, [r0, #0]
 8003890:	6809      	ldr	r1, [r1, #0]
	c++;
 8003892:	3301      	adds	r3, #1
	if (htim->Instance == htim6.Instance) {//500Hz
 8003894:	4288      	cmp	r0, r1
	c++;
 8003896:	6013      	str	r3, [r2, #0]
	if (htim->Instance == htim6.Instance) {//500Hz
 8003898:	d000      	beq.n	800389c <HAL_TIM_PeriodElapsedCallback+0x14>
 800389a:	4770      	bx	lr
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800389c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	mecanum.speed.vx = (float) rc.ch4 / 660 * MAX_CHASSIS_VX_SPEED;
 80038a0:	f8df 9120 	ldr.w	r9, [pc, #288]	; 80039c4 <HAL_TIM_PeriodElapsedCallback+0x13c>
	mecanum.speed.vw = -(float) rc.ch5 / 660 * MAX_CHASSIS_VW_SPEED;
 80038a4:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 80039a4 <HAL_TIM_PeriodElapsedCallback+0x11c>
	mecanum.speed.vx = (float) rc.ch4 / 660 * MAX_CHASSIS_VX_SPEED;
 80038a8:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 80038ac:	4f3e      	ldr	r7, [pc, #248]	; (80039a8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80038ae:	4e3f      	ldr	r6, [pc, #252]	; (80039ac <HAL_TIM_PeriodElapsedCallback+0x124>)
 80038b0:	4c3f      	ldr	r4, [pc, #252]	; (80039b0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80038b2:	ee06 3a90 	vmov	s13, r3
	mecanum.speed.vy = -(float) rc.ch3 / 660 * MAX_CHASSIS_VX_SPEED;
 80038b6:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
 80038ba:	ee07 3a10 	vmov	s14, r3
	mecanum.speed.vw = -(float) rc.ch5 / 660 * MAX_CHASSIS_VW_SPEED;
 80038be:	f9b9 3008 	ldrsh.w	r3, [r9, #8]
 80038c2:	ee07 3a90 	vmov	s15, r3
	mecanum.speed.vx = (float) rc.ch4 / 660 * MAX_CHASSIS_VX_SPEED;
 80038c6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	mecanum.speed.vy = -(float) rc.ch3 / 660 * MAX_CHASSIS_VX_SPEED;
 80038ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	mecanum.speed.vw = -(float) rc.ch5 / 660 * MAX_CHASSIS_VW_SPEED;
 80038ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	mecanum.speed.vx = (float) rc.ch4 / 660 * MAX_CHASSIS_VX_SPEED;
 80038d2:	eeb1 5a04 	vmov.f32	s10, #20	; 0x40a00000  5.0
	mecanum.speed.vy = -(float) rc.ch3 / 660 * MAX_CHASSIS_VX_SPEED;
 80038d6:	eef9 5a04 	vmov.f32	s11, #148	; 0xc0a00000 -5.0
	mecanum.speed.vx = (float) rc.ch4 / 660 * MAX_CHASSIS_VX_SPEED;
 80038da:	ee66 6a85 	vmul.f32	s13, s13, s10
	mecanum.speed.vy = -(float) rc.ch3 / 660 * MAX_CHASSIS_VX_SPEED;
 80038de:	ee27 7a25 	vmul.f32	s14, s14, s11
	mecanum.speed.vw = -(float) rc.ch5 / 660 * MAX_CHASSIS_VW_SPEED;
 80038e2:	ee67 7a86 	vmul.f32	s15, s15, s12
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80038e6:	b083      	sub	sp, #12
	mecanum_calculate(&mecanum);
 80038e8:	4638      	mov	r0, r7
	mecanum.speed.vx = (float) rc.ch4 / 660 * MAX_CHASSIS_VX_SPEED;
 80038ea:	edc7 6a05 	vstr	s13, [r7, #20]
	mecanum.speed.vy = -(float) rc.ch3 / 660 * MAX_CHASSIS_VX_SPEED;
 80038ee:	ed87 7a06 	vstr	s14, [r7, #24]
	mecanum.speed.vw = -(float) rc.ch5 / 660 * MAX_CHASSIS_VW_SPEED;
 80038f2:	edc7 7a07 	vstr	s15, [r7, #28]
	mecanum_calculate(&mecanum);
 80038f6:	f000 f869 	bl	80039cc <mecanum_calculate>
 80038fa:	f107 0540 	add.w	r5, r7, #64	; 0x40
 80038fe:	46e8      	mov	r8, sp
 8003900:	3750      	adds	r7, #80	; 0x50
		int error = mecanum.wheel_rpm[i] - wheelFdb[i].rpm;
 8003902:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8003906:	ecb5 7a01 	vldmia	r5!, {s14}
 800390a:	ee07 3a90 	vmov	s15, r3
 800390e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		u[i] = (int16_t) pidExecute(&(wheelPID[i]));
 8003912:	4620      	mov	r0, r4
		int error = mecanum.wheel_rpm[i] - wheelFdb[i].rpm;
 8003914:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003918:	360c      	adds	r6, #12
 800391a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800391e:	342c      	adds	r4, #44	; 0x2c
		wheelPID[i].error = error;
 8003920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003924:	ed44 7a01 	vstr	s15, [r4, #-4]
		u[i] = (int16_t) pidExecute(&(wheelPID[i]));
 8003928:	f000 f9fa 	bl	8003d20 <pidExecute>
 800392c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	for (int i = 0; i < 4; i++) {
 8003930:	42af      	cmp	r7, r5
		u[i] = (int16_t) pidExecute(&(wheelPID[i]));
 8003932:	ee10 3a10 	vmov	r3, s0
 8003936:	f828 3b02 	strh.w	r3, [r8], #2
	for (int i = 0; i < 4; i++) {
 800393a:	d1e2      	bne.n	8003902 <HAL_TIM_PeriodElapsedCallback+0x7a>
	driveWheel(u);
 800393c:	4668      	mov	r0, sp
 800393e:	f000 f92f 	bl	8003ba0 <driveWheel>
	Gimbal_Task();
 8003942:	f7ff feb1 	bl	80036a8 <Gimbal_Task>

void fire_Task(){
	if(rc.sw2==1){
 8003946:	f899 300b 	ldrb.w	r3, [r9, #11]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d018      	beq.n	8003980 <HAL_TIM_PeriodElapsedCallback+0xf8>
		}
		else{sw1_cnt++;}
	}
	else{
		sw1_cnt=1220;
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, sw1_cnt);
 800394e:	4b19      	ldr	r3, [pc, #100]	; (80039b4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
		sw1_cnt=1220;
 8003950:	4919      	ldr	r1, [pc, #100]	; (80039b8 <HAL_TIM_PeriodElapsedCallback+0x130>)
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, sw1_cnt);
 8003952:	681a      	ldr	r2, [r3, #0]
		sw1_cnt=1220;
 8003954:	f240 43c4 	movw	r3, #1220	; 0x4c4
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, sw1_cnt);
 8003958:	6353      	str	r3, [r2, #52]	; 0x34
		sw1_cnt=1220;
 800395a:	800b      	strh	r3, [r1, #0]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, sw1_cnt);
 800395c:	6413      	str	r3, [r2, #64]	; 0x40
		if(cnt_tim>20){
 800395e:	4c17      	ldr	r4, [pc, #92]	; (80039bc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003960:	7823      	ldrb	r3, [r4, #0]
 8003962:	2b14      	cmp	r3, #20
 8003964:	d805      	bhi.n	8003972 <HAL_TIM_PeriodElapsedCallback+0xea>
 8003966:	3301      	adds	r3, #1
 8003968:	b2db      	uxtb	r3, r3
		cnt_tim++;
 800396a:	7023      	strb	r3, [r4, #0]
}
 800396c:	b003      	add	sp, #12
 800396e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8003972:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003976:	4812      	ldr	r0, [pc, #72]	; (80039c0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003978:	f7fe f87c 	bl	8001a74 <HAL_GPIO_TogglePin>
 800397c:	2301      	movs	r3, #1
 800397e:	e7f4      	b.n	800396a <HAL_TIM_PeriodElapsedCallback+0xe2>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, sw1_cnt);
 8003980:	490d      	ldr	r1, [pc, #52]	; (80039b8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003982:	4a0c      	ldr	r2, [pc, #48]	; (80039b4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003984:	880b      	ldrh	r3, [r1, #0]
 8003986:	6812      	ldr	r2, [r2, #0]
		if(sw1_cnt>=1400){
 8003988:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, sw1_cnt);
 800398c:	6353      	str	r3, [r2, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, sw1_cnt);
 800398e:	6413      	str	r3, [r2, #64]	; 0x40
			sw1_cnt=1400;
 8003990:	bf2c      	ite	cs
 8003992:	f44f 63af 	movcs.w	r3, #1400	; 0x578
		else{sw1_cnt++;}
 8003996:	3301      	addcc	r3, #1
 8003998:	800b      	strh	r3, [r1, #0]
 800399a:	e7e0      	b.n	800395e <HAL_TIM_PeriodElapsedCallback+0xd6>
 800399c:	20000200 	.word	0x20000200
 80039a0:	2000052c 	.word	0x2000052c
 80039a4:	bee8ba2e 	.word	0xbee8ba2e
 80039a8:	20000404 	.word	0x20000404
 80039ac:	20000290 	.word	0x20000290
 80039b0:	2000034c 	.word	0x2000034c
 80039b4:	2000056c 	.word	0x2000056c
 80039b8:	20000008 	.word	0x20000008
 80039bc:	20000470 	.word	0x20000470
 80039c0:	40021400 	.word	0x40021400
 80039c4:	20000264 	.word	0x20000264

080039c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039c8:	e7fe      	b.n	80039c8 <Error_Handler>
 80039ca:	bf00      	nop

080039cc <mecanum_calculate>:
  static float rotate_ratio_fl;
  static float rotate_ratio_bl;
  static float rotate_ratio_br;
  static float wheel_rpm_ratio;

  rotate_ratio_fr = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 80039cc:	edd0 7a01 	vldr	s15, [r0, #4]
 80039d0:	edd0 6a02 	vldr	s13, [r0, #8]
 80039d4:	ed90 5a03 	vldr	s10, [r0, #12]
  rotate_ratio_bl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f + mec->param.rotate_x_offset - mec->param.rotate_y_offset) / RADIAN_COEF;
  rotate_ratio_br = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f + mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;

  wheel_rpm_ratio = 60.0f / (mec->param.wheel_perimeter * MOTOR_DECELE_RATIO);

  MEC_VAL_LIMIT(mec->speed.vx, -MAX_CHASSIS_VX_SPEED, MAX_CHASSIS_VX_SPEED); //mm/s
 80039d8:	edd0 4a05 	vldr	s9, [r0, #20]
 80039dc:	ed9f 6a67 	vldr	s12, [pc, #412]	; 8003b7c <mecanum_calculate+0x1b0>
  rotate_ratio_fr = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 80039e0:	ed90 7a04 	vldr	s14, [r0, #16]
  wheel_rpm_ratio = 60.0f / (mec->param.wheel_perimeter * MOTOR_DECELE_RATIO);
 80039e4:	ed90 2a00 	vldr	s4, [r0]
 80039e8:	eddf 1a65 	vldr	s3, [pc, #404]	; 8003b80 <mecanum_calculate+0x1b4>
  rotate_ratio_fr = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 80039ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
{
 80039f0:	b430      	push	{r4, r5}
  rotate_ratio_fr = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 80039f2:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80039f6:	eef0 7a45 	vmov.f32	s15, s10
 80039fa:	eed6 7aa5 	vfnms.f32	s15, s13, s11
{
 80039fe:	b084      	sub	sp, #16
 8003a00:	4604      	mov	r4, r0
  rotate_ratio_bl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f + mec->param.rotate_x_offset - mec->param.rotate_y_offset) / RADIAN_COEF;
 8003a02:	eea6 5aa5 	vfma.f32	s10, s13, s11
  MEC_VAL_LIMIT(mec->speed.vx, -MAX_CHASSIS_VX_SPEED, MAX_CHASSIS_VX_SPEED); //mm/s
 8003a06:	eef4 4ac6 	vcmpe.f32	s9, s12
 8003a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  rotate_ratio_bl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f + mec->param.rotate_x_offset - mec->param.rotate_y_offset) / RADIAN_COEF;
 8003a0e:	ee35 3a47 	vsub.f32	s6, s10, s14
  rotate_ratio_fr = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 8003a12:	ee77 2a87 	vadd.f32	s5, s15, s14
  rotate_ratio_fl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset - mec->param.rotate_y_offset) / RADIAN_COEF;
 8003a16:	ee77 3ac7 	vsub.f32	s7, s15, s14
  rotate_ratio_br = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f + mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 8003a1a:	ee37 5a05 	vadd.f32	s10, s14, s10
  wheel_rpm_ratio = 60.0f / (mec->param.wheel_perimeter * MOTOR_DECELE_RATIO);
 8003a1e:	ee81 4a82 	vdiv.f32	s8, s3, s4
  MEC_VAL_LIMIT(mec->speed.vx, -MAX_CHASSIS_VX_SPEED, MAX_CHASSIS_VX_SPEED); //mm/s
 8003a22:	f200 809e 	bhi.w	8003b62 <mecanum_calculate+0x196>
 8003a26:	ed80 6a05 	vstr	s12, [r0, #20]
 8003a2a:	eef0 4a46 	vmov.f32	s9, s12
  MEC_VAL_LIMIT(mec->speed.vy, -MAX_CHASSIS_VY_SPEED, MAX_CHASSIS_VY_SPEED); //mm/s
 8003a2e:	edd4 7a06 	vldr	s15, [r4, #24]
 8003a32:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8003b7c <mecanum_calculate+0x1b0>
 8003a36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a3e:	f200 8084 	bhi.w	8003b4a <mecanum_calculate+0x17e>
 8003a42:	ed84 7a06 	vstr	s14, [r4, #24]
 8003a46:	eef0 7a47 	vmov.f32	s15, s14
  MEC_VAL_LIMIT(mec->speed.vw, -MAX_CHASSIS_VW_SPEED, MAX_CHASSIS_VW_SPEED); //deg/s
 8003a4a:	edd4 5a07 	vldr	s11, [r4, #28]
 8003a4e:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003b84 <mecanum_calculate+0x1b8>
 8003a52:	eef4 5ac7 	vcmpe.f32	s11, s14
 8003a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a5a:	d866      	bhi.n	8003b2a <mecanum_calculate+0x15e>
 8003a5c:	eddf 5a4a 	vldr	s11, [pc, #296]	; 8003b88 <mecanum_calculate+0x1bc>
 8003a60:	ed84 7a07 	vstr	s14, [r4, #28]
 8003a64:	ee34 7aa7 	vadd.f32	s14, s9, s15

  float wheel_rpm[4];
  float max = 0;

  wheel_rpm[0] = (-mec->speed.vx - mec->speed.vy - mec->speed.vw * rotate_ratio_fr) * wheel_rpm_ratio;
  wheel_rpm[1] = (mec->speed.vx - mec->speed.vy - mec->speed.vw * rotate_ratio_fl) * wheel_rpm_ratio;
 8003a68:	ee74 6ae7 	vsub.f32	s13, s9, s15
 8003a6c:	eeb0 6a47 	vmov.f32	s12, s14
 8003a70:	eea2 6aa5 	vfma.f32	s12, s5, s11
 8003a74:	eee3 6ae5 	vfms.f32	s13, s7, s11
  wheel_rpm[2] = (mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_bl) * wheel_rpm_ratio;
 8003a78:	eea3 7a65 	vfms.f32	s14, s6, s11
 8003a7c:	ee26 6a04 	vmul.f32	s12, s12, s8
  wheel_rpm[1] = (mec->speed.vx - mec->speed.vy - mec->speed.vw * rotate_ratio_fl) * wheel_rpm_ratio;
 8003a80:	ee66 6a84 	vmul.f32	s13, s13, s8
  wheel_rpm[3] = (-mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_br) * wheel_rpm_ratio;
 8003a84:	ee77 7ae4 	vsub.f32	s15, s15, s9

  //find max item
  for (uint8_t i = 0; i < 4; i++)
  {
    if (fabs(wheel_rpm[i]) > max)
 8003a88:	eef0 4ac6 	vabs.f32	s9, s12
  wheel_rpm[3] = (-mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_br) * wheel_rpm_ratio;
 8003a8c:	eee5 7a65 	vfms.f32	s15, s10, s11
    if (fabs(wheel_rpm[i]) > max)
 8003a90:	eef0 5ae6 	vabs.f32	s11, s13
 8003a94:	eef4 5ae4 	vcmpe.f32	s11, s9
  wheel_rpm[2] = (mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_bl) * wheel_rpm_ratio;
 8003a98:	ee27 7a04 	vmul.f32	s14, s14, s8
 8003a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa0:	bfb4      	ite	lt
 8003aa2:	eeb0 5a64 	vmovlt.f32	s10, s9
 8003aa6:	eeb0 5a65 	vmovge.f32	s10, s11
    if (fabs(wheel_rpm[i]) > max)
 8003aaa:	eef0 5ac7 	vabs.f32	s11, s14
 8003aae:	eef4 5ac5 	vcmpe.f32	s11, s10
  wheel_rpm[3] = (-mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_br) * wheel_rpm_ratio;
 8003ab2:	ee67 7a84 	vmul.f32	s15, s15, s8
 8003ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aba:	bfb8      	it	lt
 8003abc:	eef0 5a45 	vmovlt.f32	s11, s10
    if (fabs(wheel_rpm[i]) > max)
 8003ac0:	eeb0 5ae7 	vabs.f32	s10, s15
 8003ac4:	eeb4 5ae5 	vcmpe.f32	s10, s11
 8003ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      max = fabs(wheel_rpm[i]);
  }

  //equal proportion
  if (max > MAX_WHEEL_RPM)
 8003acc:	eddf 4a2f 	vldr	s9, [pc, #188]	; 8003b8c <mecanum_calculate+0x1c0>
  wheel_rpm[1] = (mec->speed.vx - mec->speed.vy - mec->speed.vw * rotate_ratio_fl) * wheel_rpm_ratio;
 8003ad0:	edcd 6a01 	vstr	s13, [sp, #4]
 8003ad4:	bfa8      	it	ge
 8003ad6:	eef0 5a45 	vmovge.f32	s11, s10
  if (max > MAX_WHEEL_RPM)
 8003ada:	eef4 5ae4 	vcmpe.f32	s11, s9
 8003ade:	eeb1 6a46 	vneg.f32	s12, s12
 8003ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  wheel_rpm[2] = (mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_bl) * wheel_rpm_ratio;
 8003ae6:	ed8d 7a02 	vstr	s14, [sp, #8]
  wheel_rpm[0] = (-mec->speed.vx - mec->speed.vy - mec->speed.vw * rotate_ratio_fr) * wheel_rpm_ratio;
 8003aea:	ed8d 6a00 	vstr	s12, [sp]
  wheel_rpm[3] = (-mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_br) * wheel_rpm_ratio;
 8003aee:	edcd 7a03 	vstr	s15, [sp, #12]
  if (max > MAX_WHEEL_RPM)
 8003af2:	dd11      	ble.n	8003b18 <mecanum_calculate+0x14c>
  {
    float rate = MAX_WHEEL_RPM / max;
 8003af4:	ee84 5aa5 	vdiv.f32	s10, s9, s11
    for (uint8_t i = 0; i < 4; i++)
      wheel_rpm[i] *= rate;
 8003af8:	ee26 6a05 	vmul.f32	s12, s12, s10
 8003afc:	ee66 6a85 	vmul.f32	s13, s13, s10
 8003b00:	ee27 7a05 	vmul.f32	s14, s14, s10
 8003b04:	ee67 7a85 	vmul.f32	s15, s15, s10
 8003b08:	ed8d 6a00 	vstr	s12, [sp]
 8003b0c:	edcd 6a01 	vstr	s13, [sp, #4]
 8003b10:	ed8d 7a02 	vstr	s14, [sp, #8]
 8003b14:	edcd 7a03 	vstr	s15, [sp, #12]
  }
  memcpy(mec->wheel_rpm, wheel_rpm, 4 * sizeof(float));
 8003b18:	466d      	mov	r5, sp
 8003b1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b1c:	6420      	str	r0, [r4, #64]	; 0x40
 8003b1e:	6461      	str	r1, [r4, #68]	; 0x44
 8003b20:	64a2      	str	r2, [r4, #72]	; 0x48
 8003b22:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8003b24:	b004      	add	sp, #16
 8003b26:	bc30      	pop	{r4, r5}
 8003b28:	4770      	bx	lr
  MEC_VAL_LIMIT(mec->speed.vw, -MAX_CHASSIS_VW_SPEED, MAX_CHASSIS_VW_SPEED); //deg/s
 8003b2a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003b90 <mecanum_calculate+0x1c4>
 8003b2e:	eef4 5ac7 	vcmpe.f32	s11, s14
 8003b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b36:	bfb3      	iteet	lt
 8003b38:	ed9f 7a16 	vldrlt	s14, [pc, #88]	; 8003b94 <mecanum_calculate+0x1c8>
 8003b3c:	eddf 5a16 	vldrge	s11, [pc, #88]	; 8003b98 <mecanum_calculate+0x1cc>
 8003b40:	ed84 7a07 	vstrge	s14, [r4, #28]
 8003b44:	ee65 5a87 	vmullt.f32	s11, s11, s14
 8003b48:	e78c      	b.n	8003a64 <mecanum_calculate+0x98>
  MEC_VAL_LIMIT(mec->speed.vy, -MAX_CHASSIS_VY_SPEED, MAX_CHASSIS_VY_SPEED); //mm/s
 8003b4a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003b9c <mecanum_calculate+0x1d0>
 8003b4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b56:	bfa4      	itt	ge
 8003b58:	eef0 7a47 	vmovge.f32	s15, s14
 8003b5c:	ed84 7a06 	vstrge	s14, [r4, #24]
 8003b60:	e773      	b.n	8003a4a <mecanum_calculate+0x7e>
  MEC_VAL_LIMIT(mec->speed.vx, -MAX_CHASSIS_VX_SPEED, MAX_CHASSIS_VX_SPEED); //mm/s
 8003b62:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8003b9c <mecanum_calculate+0x1d0>
 8003b66:	eef4 4ae7 	vcmpe.f32	s9, s15
 8003b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b6e:	bfa4      	itt	ge
 8003b70:	eef0 4a67 	vmovge.f32	s9, s15
 8003b74:	edc0 7a05 	vstrge	s15, [r0, #20]
 8003b78:	e759      	b.n	8003a2e <mecanum_calculate+0x62>
 8003b7a:	bf00      	nop
 8003b7c:	c54e4000 	.word	0xc54e4000
 8003b80:	448e8000 	.word	0x448e8000
 8003b84:	c3960000 	.word	0xc3960000
 8003b88:	c0a78a0e 	.word	0xc0a78a0e
 8003b8c:	4604d000 	.word	0x4604d000
 8003b90:	43960000 	.word	0x43960000
 8003b94:	3c8ef783 	.word	0x3c8ef783
 8003b98:	40a78a0e 	.word	0x40a78a0e
 8003b9c:	454e4000 	.word	0x454e4000

08003ba0 <driveWheel>:
 */
#include "motor.h"

const int CaseMotor_MaxSpeed = 30 * 256;

void driveWheel(int16_t *u) {
 8003ba0:	b530      	push	{r4, r5, lr}
	header.IDE = CAN_ID_STD;
	header.DLC = 8;
	//header.TransmitGlobalTime = DISABLE;

	for (int i = 0; i < 4; i++) {
		if (CaseMotor_MaxSpeed < u[i]) {
 8003ba2:	f9b0 3000 	ldrsh.w	r3, [r0]
void driveWheel(int16_t *u) {
 8003ba6:	b08b      	sub	sp, #44	; 0x2c
	uint8_t TxData[8] = { 0 };
 8003ba8:	2200      	movs	r2, #0
	header.StdId = 0x200;
 8003baa:	f44f 7400 	mov.w	r4, #512	; 0x200
	header.DLC = 8;
 8003bae:	2108      	movs	r1, #8
		if (CaseMotor_MaxSpeed < u[i]) {
 8003bb0:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
	header.RTR = CAN_RTR_DATA;
 8003bb4:	9207      	str	r2, [sp, #28]
	header.IDE = CAN_ID_STD;
 8003bb6:	9206      	str	r2, [sp, #24]
	header.StdId = 0x200;
 8003bb8:	9404      	str	r4, [sp, #16]
	header.DLC = 8;
 8003bba:	9108      	str	r1, [sp, #32]
		if (CaseMotor_MaxSpeed < u[i]) {
 8003bbc:	dc08      	bgt.n	8003bd0 <driveWheel+0x30>
			u[i] = CaseMotor_MaxSpeed - 1;
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 8003bbe:	f513 5ff0 	cmn.w	r3, #7680	; 0x1e00
 8003bc2:	da67      	bge.n	8003c94 <driveWheel+0xf4>
			u[i] = -CaseMotor_MaxSpeed + 1;
 8003bc4:	f24e 2301 	movw	r3, #57857	; 0xe201
 8003bc8:	8003      	strh	r3, [r0, #0]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	21e2      	movs	r1, #226	; 0xe2
 8003bce:	e004      	b.n	8003bda <driveWheel+0x3a>
			u[i] = CaseMotor_MaxSpeed - 1;
 8003bd0:	f641 53ff 	movw	r3, #7679	; 0x1dff
 8003bd4:	8003      	strh	r3, [r0, #0]
 8003bd6:	22ff      	movs	r2, #255	; 0xff
 8003bd8:	211d      	movs	r1, #29
		if (CaseMotor_MaxSpeed < u[i]) {
 8003bda:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
		}
		TxData[i * 2] = u[i] >> 8;
 8003bde:	f88d 1008 	strb.w	r1, [sp, #8]
		if (CaseMotor_MaxSpeed < u[i]) {
 8003be2:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
		TxData[i * 2 + 1] = u[i] & 0xFF;
 8003be6:	f88d 2009 	strb.w	r2, [sp, #9]
		if (CaseMotor_MaxSpeed < u[i]) {
 8003bea:	dc08      	bgt.n	8003bfe <driveWheel+0x5e>
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 8003bec:	f513 5ff0 	cmn.w	r3, #7680	; 0x1e00
 8003bf0:	da4c      	bge.n	8003c8c <driveWheel+0xec>
			u[i] = -CaseMotor_MaxSpeed + 1;
 8003bf2:	f24e 2301 	movw	r3, #57857	; 0xe201
 8003bf6:	8043      	strh	r3, [r0, #2]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	21e2      	movs	r1, #226	; 0xe2
 8003bfc:	e004      	b.n	8003c08 <driveWheel+0x68>
			u[i] = CaseMotor_MaxSpeed - 1;
 8003bfe:	f641 53ff 	movw	r3, #7679	; 0x1dff
 8003c02:	8043      	strh	r3, [r0, #2]
 8003c04:	22ff      	movs	r2, #255	; 0xff
 8003c06:	211d      	movs	r1, #29
		if (CaseMotor_MaxSpeed < u[i]) {
 8003c08:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
		TxData[i * 2] = u[i] >> 8;
 8003c0c:	f88d 100a 	strb.w	r1, [sp, #10]
		if (CaseMotor_MaxSpeed < u[i]) {
 8003c10:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
		TxData[i * 2 + 1] = u[i] & 0xFF;
 8003c14:	f88d 200b 	strb.w	r2, [sp, #11]
		if (CaseMotor_MaxSpeed < u[i]) {
 8003c18:	dc08      	bgt.n	8003c2c <driveWheel+0x8c>
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 8003c1a:	f513 5ff0 	cmn.w	r3, #7680	; 0x1e00
 8003c1e:	da31      	bge.n	8003c84 <driveWheel+0xe4>
			u[i] = -CaseMotor_MaxSpeed + 1;
 8003c20:	f24e 2301 	movw	r3, #57857	; 0xe201
 8003c24:	8083      	strh	r3, [r0, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	21e2      	movs	r1, #226	; 0xe2
 8003c2a:	e004      	b.n	8003c36 <driveWheel+0x96>
			u[i] = CaseMotor_MaxSpeed - 1;
 8003c2c:	f641 53ff 	movw	r3, #7679	; 0x1dff
 8003c30:	8083      	strh	r3, [r0, #4]
 8003c32:	22ff      	movs	r2, #255	; 0xff
 8003c34:	211d      	movs	r1, #29
		if (CaseMotor_MaxSpeed < u[i]) {
 8003c36:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
		TxData[i * 2] = u[i] >> 8;
 8003c3a:	f88d 100c 	strb.w	r1, [sp, #12]
		if (CaseMotor_MaxSpeed < u[i]) {
 8003c3e:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
		TxData[i * 2 + 1] = u[i] & 0xFF;
 8003c42:	f88d 200d 	strb.w	r2, [sp, #13]
		if (CaseMotor_MaxSpeed < u[i]) {
 8003c46:	dd10      	ble.n	8003c6a <driveWheel+0xca>
			u[i] = CaseMotor_MaxSpeed - 1;
 8003c48:	f641 53ff 	movw	r3, #7679	; 0x1dff
 8003c4c:	80c3      	strh	r3, [r0, #6]
 8003c4e:	24ff      	movs	r4, #255	; 0xff
 8003c50:	251d      	movs	r5, #29
	}

	HAL_CAN_AddTxMessage(&hcan2, &header, TxData, &TxMailbox);
 8003c52:	aa02      	add	r2, sp, #8
 8003c54:	ab01      	add	r3, sp, #4
 8003c56:	a904      	add	r1, sp, #16
 8003c58:	4810      	ldr	r0, [pc, #64]	; (8003c9c <driveWheel+0xfc>)
		TxData[i * 2] = u[i] >> 8;
 8003c5a:	f88d 500e 	strb.w	r5, [sp, #14]
		TxData[i * 2 + 1] = u[i] & 0xFF;
 8003c5e:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_CAN_AddTxMessage(&hcan2, &header, TxData, &TxMailbox);
 8003c62:	f7fd fb19 	bl	8001298 <HAL_CAN_AddTxMessage>

}
 8003c66:	b00b      	add	sp, #44	; 0x2c
 8003c68:	bd30      	pop	{r4, r5, pc}
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 8003c6a:	f513 5ff0 	cmn.w	r3, #7680	; 0x1e00
 8003c6e:	da05      	bge.n	8003c7c <driveWheel+0xdc>
			u[i] = -CaseMotor_MaxSpeed + 1;
 8003c70:	f24e 2301 	movw	r3, #57857	; 0xe201
 8003c74:	80c3      	strh	r3, [r0, #6]
 8003c76:	2401      	movs	r4, #1
 8003c78:	25e2      	movs	r5, #226	; 0xe2
 8003c7a:	e7ea      	b.n	8003c52 <driveWheel+0xb2>
 8003c7c:	f3c3 2507 	ubfx	r5, r3, #8, #8
 8003c80:	b2dc      	uxtb	r4, r3
 8003c82:	e7e6      	b.n	8003c52 <driveWheel+0xb2>
 8003c84:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	e7d4      	b.n	8003c36 <driveWheel+0x96>
 8003c8c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	e7b9      	b.n	8003c08 <driveWheel+0x68>
 8003c94:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	e79e      	b.n	8003bda <driveWheel+0x3a>
 8003c9c:	20000214 	.word	0x20000214

08003ca0 <driveGimbalMotors>:

void driveGimbalMotors(int16_t *u) {
 8003ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
			u[i] = CaseMotor_MaxSpeed - 1;
		} else if (u[i] < -CaseMotor_MaxSpeed) {
			u[i] = -CaseMotor_MaxSpeed + 1;
		}
		}
		TxData[i * 2] = u[i] >> 8;
 8003ca2:	f9b0 3000 	ldrsh.w	r3, [r0]
 8003ca6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
		if (CaseMotor_MaxSpeed < u[i]) {
 8003caa:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
void driveGimbalMotors(int16_t *u) {
 8003cae:	b08b      	sub	sp, #44	; 0x2c
	header.StdId = 0x1ff;
 8003cb0:	f240 11ff 	movw	r1, #511	; 0x1ff
		TxData[i * 2 + 1] = u[i] & 0xFF;
 8003cb4:	f88d 3009 	strb.w	r3, [sp, #9]
		TxData[i * 2] = u[i] >> 8;
 8003cb8:	121b      	asrs	r3, r3, #8
 8003cba:	1215      	asrs	r5, r2, #8
 8003cbc:	f88d 3008 	strb.w	r3, [sp, #8]
	header.IDE = CAN_ID_STD;
 8003cc0:	2600      	movs	r6, #0
	header.DLC = 8;
 8003cc2:	2308      	movs	r3, #8
	header.IDE = CAN_ID_STD;
 8003cc4:	2700      	movs	r7, #0
		if (CaseMotor_MaxSpeed < u[i]) {
 8003cc6:	f5b4 5ff0 	cmp.w	r4, #7680	; 0x1e00
		TxData[i * 2 + 1] = u[i] & 0xFF;
 8003cca:	f88d 200b 	strb.w	r2, [sp, #11]
		TxData[i * 2] = u[i] >> 8;
 8003cce:	f88d 500a 	strb.w	r5, [sp, #10]
	header.StdId = 0x1ff;
 8003cd2:	9104      	str	r1, [sp, #16]
	header.IDE = CAN_ID_STD;
 8003cd4:	e9cd 6706 	strd	r6, r7, [sp, #24]
	header.DLC = 8;
 8003cd8:	9308      	str	r3, [sp, #32]
		if (CaseMotor_MaxSpeed < u[i]) {
 8003cda:	dd16      	ble.n	8003d0a <driveGimbalMotors+0x6a>
			u[i] = CaseMotor_MaxSpeed - 1;
 8003cdc:	f641 54ff 	movw	r4, #7679	; 0x1dff
 8003ce0:	8084      	strh	r4, [r0, #4]
		TxData[i * 2] = u[i] >> 8;
 8003ce2:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
		TxData[i * 2 + 1] = u[i] & 0xFF;
 8003ce6:	f88d 300f 	strb.w	r3, [sp, #15]
		TxData[i * 2] = u[i] >> 8;
 8003cea:	1219      	asrs	r1, r3, #8
 8003cec:	f88d 100e 	strb.w	r1, [sp, #14]
 8003cf0:	1225      	asrs	r5, r4, #8
	}

	HAL_CAN_AddTxMessage(&hcan1, &header, TxData, &TxMailbox);
 8003cf2:	ab01      	add	r3, sp, #4
 8003cf4:	aa02      	add	r2, sp, #8
 8003cf6:	a904      	add	r1, sp, #16
 8003cf8:	4808      	ldr	r0, [pc, #32]	; (8003d1c <driveGimbalMotors+0x7c>)
		TxData[i * 2 + 1] = u[i] & 0xFF;
 8003cfa:	f88d 400d 	strb.w	r4, [sp, #13]
		TxData[i * 2] = u[i] >> 8;
 8003cfe:	f88d 500c 	strb.w	r5, [sp, #12]
	HAL_CAN_AddTxMessage(&hcan1, &header, TxData, &TxMailbox);
 8003d02:	f7fd fac9 	bl	8001298 <HAL_CAN_AddTxMessage>
}
 8003d06:	b00b      	add	sp, #44	; 0x2c
 8003d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 8003d0a:	f514 5ff0 	cmn.w	r4, #7680	; 0x1e00
 8003d0e:	dae8      	bge.n	8003ce2 <driveGimbalMotors+0x42>
			u[i] = -CaseMotor_MaxSpeed + 1;
 8003d10:	f24e 2401 	movw	r4, #57857	; 0xe201
 8003d14:	8084      	strh	r4, [r0, #4]
 8003d16:	b224      	sxth	r4, r4
 8003d18:	e7e3      	b.n	8003ce2 <driveGimbalMotors+0x42>
 8003d1a:	bf00      	nop
 8003d1c:	2000023c 	.word	0x2000023c

08003d20 <pidExecute>:
 */
#include "pid.h"

float pidExecute(_pid_t *pid) {
	float u = 0;
	pid->integralOut += pid->i * pid->error * (pid->t/1000.0f);
 8003d20:	ed90 6a0a 	vldr	s12, [r0, #40]	; 0x28
 8003d24:	edd0 7a02 	vldr	s15, [r0, #8]
 8003d28:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8003dd8 <pidExecute+0xb8>
 8003d2c:	ed90 7a07 	vldr	s14, [r0, #28]
 8003d30:	edd0 4a00 	vldr	s9, [r0]
	if (pid->integralOutLimit < pid->integralOut) pid->integralOut = pid->integralOutLimit;
 8003d34:	edd0 6a05 	vldr	s13, [r0, #20]
	pid->integralOut += pid->i * pid->error * (pid->t/1000.0f);
 8003d38:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003d3c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003d40:	eea4 7aa7 	vfma.f32	s14, s9, s15
	if (pid->integralOutLimit < pid->integralOut) pid->integralOut = pid->integralOutLimit;
 8003d44:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8003d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	pid->integralOut += pid->i * pid->error * (pid->t/1000.0f);
 8003d4c:	ed80 7a07 	vstr	s14, [r0, #28]
	if (pid->integralOutLimit < pid->integralOut) pid->integralOut = pid->integralOutLimit;
 8003d50:	dc06      	bgt.n	8003d60 <pidExecute+0x40>
	else if (pid->integralOut < -pid->integralOutLimit) pid->integralOut = -pid->integralOutLimit;
 8003d52:	eef1 6a66 	vneg.f32	s13, s13
 8003d56:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8003d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d5e:	d538      	bpl.n	8003dd2 <pidExecute+0xb2>
 8003d60:	edc0 6a07 	vstr	s13, [r0, #28]
	pid->differentialFilter = pid->differentialFilter * pid->differentialFilterRate + (pid->d * (pid->error - pid->lastError)*(1000.0f/pid->t)) * (1 - pid->differentialFilterRate);
 8003d64:	ed9f 3a1d 	vldr	s6, [pc, #116]	; 8003ddc <pidExecute+0xbc>
 8003d68:	ed90 7a03 	vldr	s14, [r0, #12]
 8003d6c:	edd0 5a08 	vldr	s11, [r0, #32]
 8003d70:	ed90 5a06 	vldr	s10, [r0, #24]
 8003d74:	edd0 3a09 	vldr	s7, [r0, #36]	; 0x24
	u = pid->p * pid->error + pid->integralOut + pid->differentialFilter;
 8003d78:	ed90 4a01 	vldr	s8, [r0, #4]
	if (pid->outLimit < u) u = pid->outLimit;
 8003d7c:	ed90 0a04 	vldr	s0, [r0, #16]
	pid->differentialFilter = pid->differentialFilter * pid->differentialFilterRate + (pid->d * (pid->error - pid->lastError)*(1000.0f/pid->t)) * (1 - pid->differentialFilterRate);
 8003d80:	eec3 7a24 	vdiv.f32	s15, s6, s9
 8003d84:	ee76 5a65 	vsub.f32	s11, s12, s11
 8003d88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d90:	ee37 7a45 	vsub.f32	s14, s14, s10
 8003d94:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003d98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d9c:	eee3 7a85 	vfma.f32	s15, s7, s10
	u = pid->p * pid->error + pid->integralOut + pid->differentialFilter;
 8003da0:	eeb0 7a67 	vmov.f32	s14, s15
 8003da4:	eea6 7a04 	vfma.f32	s14, s12, s8
	pid->differentialFilter = pid->differentialFilter * pid->differentialFilterRate + (pid->d * (pid->error - pid->lastError)*(1000.0f/pid->t)) * (1 - pid->differentialFilterRate);
 8003da8:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
	u = pid->p * pid->error + pid->integralOut + pid->differentialFilter;
 8003dac:	ee77 6a26 	vadd.f32	s13, s14, s13
	if (pid->outLimit < u) u = pid->outLimit;
 8003db0:	eeb4 0ae6 	vcmpe.f32	s0, s13
 8003db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db8:	d408      	bmi.n	8003dcc <pidExecute+0xac>
	else if (u < -pid->outLimit)u = -pid->outLimit;
 8003dba:	eeb1 0a40 	vneg.f32	s0, s0
 8003dbe:	eeb4 0ae6 	vcmpe.f32	s0, s13
 8003dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dc6:	bfb8      	it	lt
 8003dc8:	eeb0 0a66 	vmovlt.f32	s0, s13
	pid->lastError = pid->error;
 8003dcc:	ed80 6a08 	vstr	s12, [r0, #32]
	return u;
}
 8003dd0:	4770      	bx	lr
 8003dd2:	eef0 6a47 	vmov.f32	s13, s14
 8003dd6:	e7c5      	b.n	8003d64 <pidExecute+0x44>
 8003dd8:	3a83126f 	.word	0x3a83126f
 8003ddc:	447a0000 	.word	0x447a0000

08003de0 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8003de0:	b538      	push	{r3, r4, r5, lr}

  hspi5.Instance = SPI5;
 8003de2:	4b0f      	ldr	r3, [pc, #60]	; (8003e20 <MX_SPI5_Init+0x40>)
 8003de4:	4a0f      	ldr	r2, [pc, #60]	; (8003e24 <MX_SPI5_Init+0x44>)
 8003de6:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003de8:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8003dec:	f44f 7500 	mov.w	r5, #512	; 0x200
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003df0:	2430      	movs	r4, #48	; 0x30
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi5.Init.CRCPolynomial = 10;
 8003df2:	210a      	movs	r1, #10
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003df4:	605a      	str	r2, [r3, #4]
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003df6:	4618      	mov	r0, r3
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003df8:	2200      	movs	r2, #0
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003dfa:	e9c3 5406 	strd	r5, r4, [r3, #24]
  hspi5.Init.CRCPolynomial = 10;
 8003dfe:	62d9      	str	r1, [r3, #44]	; 0x2c
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e00:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003e04:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e08:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e0c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003e0e:	f7fe f8e3 	bl	8001fd8 <HAL_SPI_Init>
 8003e12:	b900      	cbnz	r0, 8003e16 <MX_SPI5_Init+0x36>
  {
    Error_Handler();
  }

}
 8003e14:	bd38      	pop	{r3, r4, r5, pc}
 8003e16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8003e1a:	f7ff bdd5 	b.w	80039c8 <Error_Handler>
 8003e1e:	bf00      	nop
 8003e20:	200004d4 	.word	0x200004d4
 8003e24:	40015000 	.word	0x40015000

08003e28 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003e28:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI5)
 8003e2a:	6801      	ldr	r1, [r0, #0]
 8003e2c:	4a18      	ldr	r2, [pc, #96]	; (8003e90 <HAL_SPI_MspInit+0x68>)
{
 8003e2e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e30:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI5)
 8003e32:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e34:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8003e38:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003e3c:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI5)
 8003e3e:	d001      	beq.n	8003e44 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8003e40:	b008      	add	sp, #32
 8003e42:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003e44:	f502 4268 	add.w	r2, r2, #59392	; 0xe800
 8003e48:	9301      	str	r3, [sp, #4]
 8003e4a:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e4c:	4811      	ldr	r0, [pc, #68]	; (8003e94 <HAL_SPI_MspInit+0x6c>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003e4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003e52:	6451      	str	r1, [r2, #68]	; 0x44
 8003e54:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003e56:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
 8003e5a:	9101      	str	r1, [sp, #4]
 8003e5c:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e5e:	9302      	str	r3, [sp, #8]
 8003e60:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003e62:	f043 0320 	orr.w	r3, r3, #32
 8003e66:	6313      	str	r3, [r2, #48]	; 0x30
 8003e68:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003e6a:	f003 0320 	and.w	r3, r3, #32
 8003e6e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e70:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003e72:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e74:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 8003e76:	f44f 7560 	mov.w	r5, #896	; 0x380
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e7a:	2402      	movs	r4, #2
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e7c:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e7e:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003e82:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e86:	f7fd fcb3 	bl	80017f0 <HAL_GPIO_Init>
}
 8003e8a:	b008      	add	sp, #32
 8003e8c:	bd70      	pop	{r4, r5, r6, pc}
 8003e8e:	bf00      	nop
 8003e90:	40015000 	.word	0x40015000
 8003e94:	40021400 	.word	0x40021400

08003e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e98:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e9a:	4b0c      	ldr	r3, [pc, #48]	; (8003ecc <HAL_MspInit+0x34>)
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	9100      	str	r1, [sp, #0]
 8003ea0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ea2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ea6:	645a      	str	r2, [r3, #68]	; 0x44
 8003ea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eaa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003eae:	9200      	str	r2, [sp, #0]
 8003eb0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003eb2:	9101      	str	r1, [sp, #4]
 8003eb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eb6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003eba:	641a      	str	r2, [r3, #64]	; 0x40
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec2:	9301      	str	r3, [sp, #4]
 8003ec4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ec6:	b002      	add	sp, #8
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	40023800 	.word	0x40023800

08003ed0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop

08003ed4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ed4:	e7fe      	b.n	8003ed4 <HardFault_Handler>
 8003ed6:	bf00      	nop

08003ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ed8:	e7fe      	b.n	8003ed8 <MemManage_Handler>
 8003eda:	bf00      	nop

08003edc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003edc:	e7fe      	b.n	8003edc <BusFault_Handler>
 8003ede:	bf00      	nop

08003ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ee0:	e7fe      	b.n	8003ee0 <UsageFault_Handler>
 8003ee2:	bf00      	nop

08003ee4 <SVC_Handler>:
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop

08003ee8 <DebugMon_Handler>:
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop

08003eec <PendSV_Handler>:
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop

08003ef0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ef0:	f7fd b878 	b.w	8000fe4 <HAL_IncTick>

08003ef4 <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003ef4:	4801      	ldr	r0, [pc, #4]	; (8003efc <CAN1_RX0_IRQHandler+0x8>)
 8003ef6:	f7fd bad1 	b.w	800149c <HAL_CAN_IRQHandler>
 8003efa:	bf00      	nop
 8003efc:	2000023c 	.word	0x2000023c

08003f00 <CAN1_RX1_IRQHandler>:
 8003f00:	4801      	ldr	r0, [pc, #4]	; (8003f08 <CAN1_RX1_IRQHandler+0x8>)
 8003f02:	f7fd bacb 	b.w	800149c <HAL_CAN_IRQHandler>
 8003f06:	bf00      	nop
 8003f08:	2000023c 	.word	0x2000023c

08003f0c <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003f0c:	4801      	ldr	r0, [pc, #4]	; (8003f14 <USART1_IRQHandler+0x8>)
 8003f0e:	f7fe be67 	b.w	8002be0 <HAL_UART_IRQHandler>
 8003f12:	bf00      	nop
 8003f14:	2000062c 	.word	0x2000062c

08003f18 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003f18:	4801      	ldr	r0, [pc, #4]	; (8003f20 <TIM6_DAC_IRQHandler+0x8>)
 8003f1a:	f7fe baf1 	b.w	8002500 <HAL_TIM_IRQHandler>
 8003f1e:	bf00      	nop
 8003f20:	2000052c 	.word	0x2000052c

08003f24 <CAN2_RX0_IRQHandler>:
void CAN2_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003f24:	4801      	ldr	r0, [pc, #4]	; (8003f2c <CAN2_RX0_IRQHandler+0x8>)
 8003f26:	f7fd bab9 	b.w	800149c <HAL_CAN_IRQHandler>
 8003f2a:	bf00      	nop
 8003f2c:	20000214 	.word	0x20000214

08003f30 <CAN2_RX1_IRQHandler>:
 8003f30:	4801      	ldr	r0, [pc, #4]	; (8003f38 <CAN2_RX1_IRQHandler+0x8>)
 8003f32:	f7fd bab3 	b.w	800149c <HAL_CAN_IRQHandler>
 8003f36:	bf00      	nop
 8003f38:	20000214 	.word	0x20000214

08003f3c <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003f3c:	4801      	ldr	r0, [pc, #4]	; (8003f44 <USART6_IRQHandler+0x8>)
 8003f3e:	f7fe be4f 	b.w	8002be0 <HAL_UART_IRQHandler>
 8003f42:	bf00      	nop
 8003f44:	200006ac 	.word	0x200006ac

08003f48 <UART8_IRQHandler>:
void UART8_IRQHandler(void)
{
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8003f48:	4801      	ldr	r0, [pc, #4]	; (8003f50 <UART8_IRQHandler+0x8>)
 8003f4a:	f7fe be49 	b.w	8002be0 <HAL_UART_IRQHandler>
 8003f4e:	bf00      	nop
 8003f50:	2000066c 	.word	0x2000066c

08003f54 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8003f54:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f56:	1e16      	subs	r6, r2, #0
 8003f58:	dd07      	ble.n	8003f6a <_read+0x16>
 8003f5a:	460c      	mov	r4, r1
 8003f5c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8003f5e:	f3af 8000 	nop.w
 8003f62:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f66:	42a5      	cmp	r5, r4
 8003f68:	d1f9      	bne.n	8003f5e <_read+0xa>
	}

return len;
}
 8003f6a:	4630      	mov	r0, r6
 8003f6c:	bd70      	pop	{r4, r5, r6, pc}
 8003f6e:	bf00      	nop

08003f70 <_write>:

int _write(int file, char *ptr, int len)
{
 8003f70:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f72:	1e16      	subs	r6, r2, #0
 8003f74:	dd07      	ble.n	8003f86 <_write+0x16>
 8003f76:	460c      	mov	r4, r1
 8003f78:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8003f7a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003f7e:	f7ff f8b5 	bl	80030ec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f82:	42ac      	cmp	r4, r5
 8003f84:	d1f9      	bne.n	8003f7a <_write+0xa>
	}
	return len;
}
 8003f86:	4630      	mov	r0, r6
 8003f88:	bd70      	pop	{r4, r5, r6, pc}
 8003f8a:	bf00      	nop

08003f8c <_close>:


int _close(int file)
{
	return -1;
}
 8003f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop

08003f94 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003f94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f98:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003f9a:	2000      	movs	r0, #0
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop

08003fa0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003fa0:	2001      	movs	r0, #1
 8003fa2:	4770      	bx	lr

08003fa4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003fa4:	2000      	movs	r0, #0
 8003fa6:	4770      	bx	lr

08003fa8 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003fa8:	4a0c      	ldr	r2, [pc, #48]	; (8003fdc <_sbrk+0x34>)
{
 8003faa:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8003fac:	6813      	ldr	r3, [r2, #0]
 8003fae:	b133      	cbz	r3, 8003fbe <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8003fb0:	4418      	add	r0, r3
 8003fb2:	4669      	mov	r1, sp
 8003fb4:	4288      	cmp	r0, r1
 8003fb6:	d808      	bhi.n	8003fca <_sbrk+0x22>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8003fb8:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8003fbe:	4b08      	ldr	r3, [pc, #32]	; (8003fe0 <_sbrk+0x38>)
 8003fc0:	6013      	str	r3, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8003fc2:	4418      	add	r0, r3
 8003fc4:	4669      	mov	r1, sp
 8003fc6:	4288      	cmp	r0, r1
 8003fc8:	d9f6      	bls.n	8003fb8 <_sbrk+0x10>
		errno = ENOMEM;
 8003fca:	f000 fb4b 	bl	8004664 <__errno>
 8003fce:	230c      	movs	r3, #12
 8003fd0:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003fd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	bd08      	pop	{r3, pc}
 8003fda:	bf00      	nop
 8003fdc:	20000204 	.word	0x20000204
 8003fe0:	200006f0 	.word	0x200006f0

08003fe4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fe4:	4910      	ldr	r1, [pc, #64]	; (8004028 <SystemInit+0x44>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003fe6:	4b11      	ldr	r3, [pc, #68]	; (800402c <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fe8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003fec:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 8003ff0:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ff2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8003ff6:	681a      	ldr	r2, [r3, #0]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003ff8:	4c0d      	ldr	r4, [pc, #52]	; (8004030 <SystemInit+0x4c>)
  RCC->CFGR = 0x00000000;
 8003ffa:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003ffc:	f042 0201 	orr.w	r2, r2, #1
 8004000:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004002:	6098      	str	r0, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800400a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800400e:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8004010:	605c      	str	r4, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004012:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004014:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004018:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800401c:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x00000000;
 800401e:	60d8      	str	r0, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004020:	608c      	str	r4, [r1, #8]
#endif
}
 8004022:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	e000ed00 	.word	0xe000ed00
 800402c:	40023800 	.word	0x40023800
 8004030:	24003010 	.word	0x24003010

08004034 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004034:	b570      	push	{r4, r5, r6, lr}
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
 8004036:	4c51      	ldr	r4, [pc, #324]	; (800417c <MX_TIM1_Init+0x148>)
 8004038:	4b51      	ldr	r3, [pc, #324]	; (8004180 <MX_TIM1_Init+0x14c>)
 800403a:	6023      	str	r3, [r4, #0]
{
 800403c:	b09a      	sub	sp, #104	; 0x68
  htim1.Init.Prescaler = 167;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800403e:	2300      	movs	r3, #0
  htim1.Init.Prescaler = 167;
 8004040:	21a7      	movs	r1, #167	; 0xa7
  htim1.Init.Period = 20000-1;
 8004042:	f644 621f 	movw	r2, #19999	; 0x4e1f
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004046:	4620      	mov	r0, r4
  htim1.Init.Prescaler = 167;
 8004048:	6061      	str	r1, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800404a:	e9c4 3202 	strd	r3, r2, [r4, #8]
  htim1.Init.RepetitionCounter = 0;
 800404e:	e9c4 3304 	strd	r3, r3, [r4, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004052:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004054:	f7fe f894 	bl	8002180 <HAL_TIM_PWM_Init>
 8004058:	2800      	cmp	r0, #0
 800405a:	d148      	bne.n	80040ee <MX_TIM1_Init+0xba>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800405c:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800405e:	a904      	add	r1, sp, #16
 8004060:	4846      	ldr	r0, [pc, #280]	; (800417c <MX_TIM1_Init+0x148>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004062:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004066:	f7fe faf5 	bl	8002654 <HAL_TIMEx_MasterConfigSynchronization>
 800406a:	2800      	cmp	r0, #0
 800406c:	d13c      	bne.n	80040e8 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 1000;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800406e:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004070:	2060      	movs	r0, #96	; 0x60
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004072:	461a      	mov	r2, r3
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004074:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004078:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800407c:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800407e:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 1000;
 8004080:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004084:	a90b      	add	r1, sp, #44	; 0x2c
 8004086:	483d      	ldr	r0, [pc, #244]	; (800417c <MX_TIM1_Init+0x148>)
  sConfigOC.Pulse = 1000;
 8004088:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800408a:	f7fe f927 	bl	80022dc <HAL_TIM_PWM_ConfigChannel>
 800408e:	bb40      	cbnz	r0, 80040e2 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004090:	a90b      	add	r1, sp, #44	; 0x2c
 8004092:	220c      	movs	r2, #12
 8004094:	4839      	ldr	r0, [pc, #228]	; (800417c <MX_TIM1_Init+0x148>)
 8004096:	f7fe f921 	bl	80022dc <HAL_TIM_PWM_ConfigChannel>
 800409a:	b9f8      	cbnz	r0, 80040dc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800409c:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800409e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80040a2:	a912      	add	r1, sp, #72	; 0x48
 80040a4:	4835      	ldr	r0, [pc, #212]	; (800417c <MX_TIM1_Init+0x148>)
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80040a6:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80040a8:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.DeadTime = 0;
 80040ac:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80040b0:	9319      	str	r3, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80040b2:	9217      	str	r2, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80040b4:	f7fe faf0 	bl	8002698 <HAL_TIMEx_ConfigBreakDeadTime>
 80040b8:	b108      	cbz	r0, 80040be <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80040ba:	f7ff fc85 	bl	80039c8 <Error_Handler>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	4a2f      	ldr	r2, [pc, #188]	; (8004180 <MX_TIM1_Init+0x14c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040c2:	2400      	movs	r4, #0
  if(timHandle->Instance==TIM1)
 80040c4:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040c6:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80040ca:	e9cd 4408 	strd	r4, r4, [sp, #32]
 80040ce:	940a      	str	r4, [sp, #40]	; 0x28
  if(timHandle->Instance==TIM1)
 80040d0:	d027      	beq.n	8004122 <MX_TIM1_Init+0xee>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM12)
 80040d2:	4a2c      	ldr	r2, [pc, #176]	; (8004184 <MX_TIM1_Init+0x150>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d00d      	beq.n	80040f4 <MX_TIM1_Init+0xc0>
}
 80040d8:	b01a      	add	sp, #104	; 0x68
 80040da:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 80040dc:	f7ff fc74 	bl	80039c8 <Error_Handler>
 80040e0:	e7dc      	b.n	800409c <MX_TIM1_Init+0x68>
    Error_Handler();
 80040e2:	f7ff fc71 	bl	80039c8 <Error_Handler>
 80040e6:	e7d3      	b.n	8004090 <MX_TIM1_Init+0x5c>
    Error_Handler();
 80040e8:	f7ff fc6e 	bl	80039c8 <Error_Handler>
 80040ec:	e7bf      	b.n	800406e <MX_TIM1_Init+0x3a>
    Error_Handler();
 80040ee:	f7ff fc6b 	bl	80039c8 <Error_Handler>
 80040f2:	e7b3      	b.n	800405c <MX_TIM1_Init+0x28>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
  
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80040f4:	4b24      	ldr	r3, [pc, #144]	; (8004188 <MX_TIM1_Init+0x154>)
 80040f6:	9403      	str	r4, [sp, #12]
 80040f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = BEEP_CTRL_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 80040fa:	4824      	ldr	r0, [pc, #144]	; (800418c <MX_TIM1_Init+0x158>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80040fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004100:	631a      	str	r2, [r3, #48]	; 0x30
 8004102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004108:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800410a:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800410c:	2309      	movs	r3, #9
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 800410e:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = BEEP_CTRL_Pin;
 8004110:	2440      	movs	r4, #64	; 0x40
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004112:	9d03      	ldr	r5, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004114:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004116:	e9cd 4206 	strd	r4, r2, [sp, #24]
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 800411a:	f7fd fb69 	bl	80017f0 <HAL_GPIO_Init>
}
 800411e:	b01a      	add	sp, #104	; 0x68
 8004120:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004122:	4b19      	ldr	r3, [pc, #100]	; (8004188 <MX_TIM1_Init+0x154>)
 8004124:	9401      	str	r4, [sp, #4]
 8004126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 8004128:	4819      	ldr	r0, [pc, #100]	; (8004190 <MX_TIM1_Init+0x15c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800412a:	f042 0201 	orr.w	r2, r2, #1
 800412e:	631a      	str	r2, [r3, #48]	; 0x30
 8004130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004132:	f002 0201 	and.w	r2, r2, #1
 8004136:	9201      	str	r2, [sp, #4]
 8004138:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800413a:	9402      	str	r4, [sp, #8]
 800413c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800413e:	f042 0210 	orr.w	r2, r2, #16
 8004142:	631a      	str	r2, [r3, #48]	; 0x30
 8004144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004146:	f003 0310 	and.w	r3, r3, #16
 800414a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800414c:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = FRICTION_L_Pin;
 800414e:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004152:	2501      	movs	r5, #1
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 8004154:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004156:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004158:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800415a:	e9cd 3606 	strd	r3, r6, [sp, #24]
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 800415e:	f7fd fb47 	bl	80017f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = FRICTION_R_Pin;
 8004162:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    HAL_GPIO_Init(FRICTION_R_GPIO_Port, &GPIO_InitStruct);
 8004166:	a906      	add	r1, sp, #24
 8004168:	480a      	ldr	r0, [pc, #40]	; (8004194 <MX_TIM1_Init+0x160>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800416a:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800416c:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800416e:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Pin = FRICTION_R_Pin;
 8004172:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(FRICTION_R_GPIO_Port, &GPIO_InitStruct);
 8004174:	f7fd fb3c 	bl	80017f0 <HAL_GPIO_Init>
}
 8004178:	b01a      	add	sp, #104	; 0x68
 800417a:	bd70      	pop	{r4, r5, r6, pc}
 800417c:	2000056c 	.word	0x2000056c
 8004180:	40010000 	.word	0x40010000
 8004184:	40001800 	.word	0x40001800
 8004188:	40023800 	.word	0x40023800
 800418c:	40021c00 	.word	0x40021c00
 8004190:	40020000 	.word	0x40020000
 8004194:	40021000 	.word	0x40021000

08004198 <MX_TIM6_Init>:
{
 8004198:	b510      	push	{r4, lr}
  htim6.Instance = TIM6;
 800419a:	4b0f      	ldr	r3, [pc, #60]	; (80041d8 <MX_TIM6_Init+0x40>)
 800419c:	4a0f      	ldr	r2, [pc, #60]	; (80041dc <MX_TIM6_Init+0x44>)
 800419e:	601a      	str	r2, [r3, #0]
{
 80041a0:	b082      	sub	sp, #8
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041a2:	2200      	movs	r2, #0
  htim6.Init.Prescaler = 10-1;
 80041a4:	2409      	movs	r4, #9
  htim6.Init.Period = 16800;
 80041a6:	f244 11a0 	movw	r1, #16800	; 0x41a0
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80041aa:	4618      	mov	r0, r3
  htim6.Init.Prescaler = 10-1;
 80041ac:	605c      	str	r4, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041ae:	e9c3 2102 	strd	r2, r1, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80041b4:	f7fd ff50 	bl	8002058 <HAL_TIM_Base_Init>
 80041b8:	b958      	cbnz	r0, 80041d2 <MX_TIM6_Init+0x3a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041ba:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80041bc:	4669      	mov	r1, sp
 80041be:	4806      	ldr	r0, [pc, #24]	; (80041d8 <MX_TIM6_Init+0x40>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041c0:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80041c4:	f7fe fa46 	bl	8002654 <HAL_TIMEx_MasterConfigSynchronization>
 80041c8:	b108      	cbz	r0, 80041ce <MX_TIM6_Init+0x36>
    Error_Handler();
 80041ca:	f7ff fbfd 	bl	80039c8 <Error_Handler>
}
 80041ce:	b002      	add	sp, #8
 80041d0:	bd10      	pop	{r4, pc}
    Error_Handler();
 80041d2:	f7ff fbf9 	bl	80039c8 <Error_Handler>
 80041d6:	e7f0      	b.n	80041ba <MX_TIM6_Init+0x22>
 80041d8:	2000052c 	.word	0x2000052c
 80041dc:	40001000 	.word	0x40001000

080041e0 <MX_TIM12_Init>:
{
 80041e0:	b570      	push	{r4, r5, r6, lr}
  htim12.Instance = TIM12;
 80041e2:	4c3a      	ldr	r4, [pc, #232]	; (80042cc <MX_TIM12_Init+0xec>)
 80041e4:	4b3a      	ldr	r3, [pc, #232]	; (80042d0 <MX_TIM12_Init+0xf0>)
 80041e6:	6023      	str	r3, [r4, #0]
{
 80041e8:	b090      	sub	sp, #64	; 0x40
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041ea:	2300      	movs	r3, #0
  htim12.Init.Prescaler = 83;
 80041ec:	2153      	movs	r1, #83	; 0x53
  htim12.Init.Period = 20000-1;
 80041ee:	f644 621f 	movw	r2, #19999	; 0x4e1f
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80041f2:	4620      	mov	r0, r4
  htim12.Init.Prescaler = 83;
 80041f4:	6061      	str	r1, [r4, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041f6:	e9c4 3202 	strd	r3, r2, [r4, #8]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041fa:	6123      	str	r3, [r4, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041fc:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80041fe:	f7fd ffbf 	bl	8002180 <HAL_TIM_PWM_Init>
 8004202:	b9e0      	cbnz	r0, 800423e <MX_TIM12_Init+0x5e>
  sConfigOC.Pulse = 0;
 8004204:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004206:	2560      	movs	r5, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004208:	461a      	mov	r2, r3
 800420a:	a909      	add	r1, sp, #36	; 0x24
 800420c:	482f      	ldr	r0, [pc, #188]	; (80042cc <MX_TIM12_Init+0xec>)
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800420e:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004210:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004214:	9509      	str	r5, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004216:	f7fe f861 	bl	80022dc <HAL_TIM_PWM_ConfigChannel>
 800421a:	b108      	cbz	r0, 8004220 <MX_TIM12_Init+0x40>
    Error_Handler();
 800421c:	f7ff fbd4 	bl	80039c8 <Error_Handler>
  if(timHandle->Instance==TIM1)
 8004220:	6823      	ldr	r3, [r4, #0]
 8004222:	4a2c      	ldr	r2, [pc, #176]	; (80042d4 <MX_TIM12_Init+0xf4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004224:	2400      	movs	r4, #0
  if(timHandle->Instance==TIM1)
 8004226:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004228:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800422c:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8004230:	9408      	str	r4, [sp, #32]
  if(timHandle->Instance==TIM1)
 8004232:	d01e      	beq.n	8004272 <MX_TIM12_Init+0x92>
  else if(timHandle->Instance==TIM12)
 8004234:	4a26      	ldr	r2, [pc, #152]	; (80042d0 <MX_TIM12_Init+0xf0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d004      	beq.n	8004244 <MX_TIM12_Init+0x64>
}
 800423a:	b010      	add	sp, #64	; 0x40
 800423c:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 800423e:	f7ff fbc3 	bl	80039c8 <Error_Handler>
 8004242:	e7df      	b.n	8004204 <MX_TIM12_Init+0x24>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004244:	4b24      	ldr	r3, [pc, #144]	; (80042d8 <MX_TIM12_Init+0xf8>)
 8004246:	9403      	str	r4, [sp, #12]
 8004248:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 800424a:	4824      	ldr	r0, [pc, #144]	; (80042dc <MX_TIM12_Init+0xfc>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800424c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004250:	631a      	str	r2, [r3, #48]	; 0x30
 8004252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004258:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800425a:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800425c:	2309      	movs	r3, #9
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 800425e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = BEEP_CTRL_Pin;
 8004260:	2440      	movs	r4, #64	; 0x40
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004262:	9d03      	ldr	r5, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004264:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004266:	e9cd 4204 	strd	r4, r2, [sp, #16]
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 800426a:	f7fd fac1 	bl	80017f0 <HAL_GPIO_Init>
}
 800426e:	b010      	add	sp, #64	; 0x40
 8004270:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004272:	4b19      	ldr	r3, [pc, #100]	; (80042d8 <MX_TIM12_Init+0xf8>)
 8004274:	9401      	str	r4, [sp, #4]
 8004276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 8004278:	4819      	ldr	r0, [pc, #100]	; (80042e0 <MX_TIM12_Init+0x100>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800427a:	f042 0201 	orr.w	r2, r2, #1
 800427e:	631a      	str	r2, [r3, #48]	; 0x30
 8004280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004282:	f002 0201 	and.w	r2, r2, #1
 8004286:	9201      	str	r2, [sp, #4]
 8004288:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800428a:	9402      	str	r4, [sp, #8]
 800428c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800428e:	f042 0210 	orr.w	r2, r2, #16
 8004292:	631a      	str	r2, [r3, #48]	; 0x30
 8004294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004296:	f003 0310 	and.w	r3, r3, #16
 800429a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800429c:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = FRICTION_L_Pin;
 800429e:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80042a2:	2501      	movs	r5, #1
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 80042a4:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80042a6:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80042a8:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042aa:	e9cd 3604 	strd	r3, r6, [sp, #16]
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 80042ae:	f7fd fa9f 	bl	80017f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = FRICTION_R_Pin;
 80042b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    HAL_GPIO_Init(FRICTION_R_GPIO_Port, &GPIO_InitStruct);
 80042b6:	a904      	add	r1, sp, #16
 80042b8:	480a      	ldr	r0, [pc, #40]	; (80042e4 <MX_TIM12_Init+0x104>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ba:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80042bc:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042be:	e9cd 4406 	strd	r4, r4, [sp, #24]
    GPIO_InitStruct.Pin = FRICTION_R_Pin;
 80042c2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(FRICTION_R_GPIO_Port, &GPIO_InitStruct);
 80042c4:	f7fd fa94 	bl	80017f0 <HAL_GPIO_Init>
}
 80042c8:	b010      	add	sp, #64	; 0x40
 80042ca:	bd70      	pop	{r4, r5, r6, pc}
 80042cc:	200005ac 	.word	0x200005ac
 80042d0:	40001800 	.word	0x40001800
 80042d4:	40010000 	.word	0x40010000
 80042d8:	40023800 	.word	0x40023800
 80042dc:	40021c00 	.word	0x40021c00
 80042e0:	40020000 	.word	0x40020000
 80042e4:	40021000 	.word	0x40021000

080042e8 <HAL_TIM_PWM_MspInit>:
  if(tim_pwmHandle->Instance==TIM1)
 80042e8:	6803      	ldr	r3, [r0, #0]
 80042ea:	4a12      	ldr	r2, [pc, #72]	; (8004334 <HAL_TIM_PWM_MspInit+0x4c>)
 80042ec:	4293      	cmp	r3, r2
{
 80042ee:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM1)
 80042f0:	d012      	beq.n	8004318 <HAL_TIM_PWM_MspInit+0x30>
  else if(tim_pwmHandle->Instance==TIM12)
 80042f2:	4a11      	ldr	r2, [pc, #68]	; (8004338 <HAL_TIM_PWM_MspInit+0x50>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d001      	beq.n	80042fc <HAL_TIM_PWM_MspInit+0x14>
}
 80042f8:	b002      	add	sp, #8
 80042fa:	4770      	bx	lr
    __HAL_RCC_TIM12_CLK_ENABLE();
 80042fc:	4b0f      	ldr	r3, [pc, #60]	; (800433c <HAL_TIM_PWM_MspInit+0x54>)
 80042fe:	2200      	movs	r2, #0
 8004300:	9201      	str	r2, [sp, #4]
 8004302:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004304:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004308:	641a      	str	r2, [r3, #64]	; 0x40
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004310:	9301      	str	r3, [sp, #4]
 8004312:	9b01      	ldr	r3, [sp, #4]
}
 8004314:	b002      	add	sp, #8
 8004316:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004318:	4b08      	ldr	r3, [pc, #32]	; (800433c <HAL_TIM_PWM_MspInit+0x54>)
 800431a:	2200      	movs	r2, #0
 800431c:	9200      	str	r2, [sp, #0]
 800431e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004320:	f042 0201 	orr.w	r2, r2, #1
 8004324:	645a      	str	r2, [r3, #68]	; 0x44
 8004326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	9b00      	ldr	r3, [sp, #0]
}
 8004330:	b002      	add	sp, #8
 8004332:	4770      	bx	lr
 8004334:	40010000 	.word	0x40010000
 8004338:	40001800 	.word	0x40001800
 800433c:	40023800 	.word	0x40023800

08004340 <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM6)
 8004340:	6802      	ldr	r2, [r0, #0]
 8004342:	4b0e      	ldr	r3, [pc, #56]	; (800437c <HAL_TIM_Base_MspInit+0x3c>)
 8004344:	429a      	cmp	r2, r3
 8004346:	d000      	beq.n	800434a <HAL_TIM_Base_MspInit+0xa>
 8004348:	4770      	bx	lr
{
 800434a:	b500      	push	{lr}
 800434c:	b083      	sub	sp, #12
    __HAL_RCC_TIM6_CLK_ENABLE();
 800434e:	2200      	movs	r2, #0
 8004350:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 8004354:	9201      	str	r2, [sp, #4]
 8004356:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004358:	f041 0110 	orr.w	r1, r1, #16
 800435c:	6419      	str	r1, [r3, #64]	; 0x40
 800435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004360:	f003 0310 	and.w	r3, r3, #16
 8004364:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8004366:	2101      	movs	r1, #1
 8004368:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 800436a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800436c:	f7fd f9d0 	bl	8001710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004370:	2036      	movs	r0, #54	; 0x36
}
 8004372:	b003      	add	sp, #12
 8004374:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004378:	f7fd ba00 	b.w	800177c <HAL_NVIC_EnableIRQ>
 800437c:	40001000 	.word	0x40001000

08004380 <MX_UART7_Init>:

/* UART7 init function */
void MX_UART7_Init(void)
{

  huart7.Instance = UART7;
 8004380:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <MX_UART7_Init+0x30>)
 8004382:	4a0c      	ldr	r2, [pc, #48]	; (80043b4 <MX_UART7_Init+0x34>)
{
 8004384:	b510      	push	{r4, lr}
  huart7.Init.BaudRate = 115200;
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
  huart7.Init.StopBits = UART_STOPBITS_1;
  huart7.Init.Parity = UART_PARITY_NONE;
  huart7.Init.Mode = UART_MODE_TX_RX;
 8004386:	210c      	movs	r1, #12
  huart7.Instance = UART7;
 8004388:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800438a:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800438e:	2200      	movs	r2, #0
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8004390:	4618      	mov	r0, r3
  huart7.Init.BaudRate = 115200;
 8004392:	605c      	str	r4, [r3, #4]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8004394:	6159      	str	r1, [r3, #20]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8004396:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart7.Init.Parity = UART_PARITY_NONE;
 800439a:	611a      	str	r2, [r3, #16]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800439c:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80043a0:	f7fe f9a8 	bl	80026f4 <HAL_UART_Init>
 80043a4:	b900      	cbnz	r0, 80043a8 <MX_UART7_Init+0x28>
  {
    Error_Handler();
  }

}
 80043a6:	bd10      	pop	{r4, pc}
 80043a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80043ac:	f7ff bb0c 	b.w	80039c8 <Error_Handler>
 80043b0:	200005ec 	.word	0x200005ec
 80043b4:	40007800 	.word	0x40007800

080043b8 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{

  huart8.Instance = UART8;
 80043b8:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <MX_UART8_Init+0x30>)
 80043ba:	4a0c      	ldr	r2, [pc, #48]	; (80043ec <MX_UART8_Init+0x34>)
{
 80043bc:	b510      	push	{r4, lr}
  huart8.Init.BaudRate = 115200;
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
  huart8.Init.StopBits = UART_STOPBITS_1;
  huart8.Init.Parity = UART_PARITY_NONE;
  huart8.Init.Mode = UART_MODE_TX_RX;
 80043be:	210c      	movs	r1, #12
  huart8.Instance = UART8;
 80043c0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80043c2:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80043c6:	2200      	movs	r2, #0
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80043c8:	4618      	mov	r0, r3
  huart8.Init.BaudRate = 115200;
 80043ca:	605c      	str	r4, [r3, #4]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80043cc:	6159      	str	r1, [r3, #20]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80043ce:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart8.Init.Parity = UART_PARITY_NONE;
 80043d2:	611a      	str	r2, [r3, #16]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80043d4:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80043d8:	f7fe f98c 	bl	80026f4 <HAL_UART_Init>
 80043dc:	b900      	cbnz	r0, 80043e0 <MX_UART8_Init+0x28>
  {
    Error_Handler();
  }

}
 80043de:	bd10      	pop	{r4, pc}
 80043e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80043e4:	f7ff baf0 	b.w	80039c8 <Error_Handler>
 80043e8:	2000066c 	.word	0x2000066c
 80043ec:	40007c00 	.word	0x40007c00

080043f0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 80043f0:	4b0b      	ldr	r3, [pc, #44]	; (8004420 <MX_USART1_UART_Init+0x30>)
 80043f2:	4a0c      	ldr	r2, [pc, #48]	; (8004424 <MX_USART1_UART_Init+0x34>)
{
 80043f4:	b510      	push	{r4, lr}
  huart1.Init.BaudRate = 100000;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80043f6:	210c      	movs	r1, #12
  huart1.Init.BaudRate = 100000;
 80043f8:	4c0b      	ldr	r4, [pc, #44]	; (8004428 <MX_USART1_UART_Init+0x38>)
  huart1.Instance = USART1;
 80043fa:	601a      	str	r2, [r3, #0]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80043fc:	4618      	mov	r0, r3
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80043fe:	2200      	movs	r2, #0
  huart1.Init.BaudRate = 100000;
 8004400:	605c      	str	r4, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004402:	6159      	str	r1, [r3, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004404:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004408:	611a      	str	r2, [r3, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800440a:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800440e:	f7fe f971 	bl	80026f4 <HAL_UART_Init>
 8004412:	b900      	cbnz	r0, 8004416 <MX_USART1_UART_Init+0x26>
  {
    Error_Handler();
  }

}
 8004414:	bd10      	pop	{r4, pc}
 8004416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800441a:	f7ff bad5 	b.w	80039c8 <Error_Handler>
 800441e:	bf00      	nop
 8004420:	2000062c 	.word	0x2000062c
 8004424:	40011000 	.word	0x40011000
 8004428:	000186a0 	.word	0x000186a0

0800442c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{

  huart6.Instance = USART6;
 800442c:	4b0b      	ldr	r3, [pc, #44]	; (800445c <MX_USART6_UART_Init+0x30>)
 800442e:	4a0c      	ldr	r2, [pc, #48]	; (8004460 <MX_USART6_UART_Init+0x34>)
{
 8004430:	b510      	push	{r4, lr}
  huart6.Init.BaudRate = 115200;
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004432:	210c      	movs	r1, #12
  huart6.Instance = USART6;
 8004434:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004436:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800443a:	2200      	movs	r2, #0
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800443c:	4618      	mov	r0, r3
  huart6.Init.BaudRate = 115200;
 800443e:	605c      	str	r4, [r3, #4]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004440:	6159      	str	r1, [r3, #20]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004442:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004446:	611a      	str	r2, [r3, #16]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004448:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800444c:	f7fe f952 	bl	80026f4 <HAL_UART_Init>
 8004450:	b900      	cbnz	r0, 8004454 <MX_USART6_UART_Init+0x28>
  {
    Error_Handler();
  }

}
 8004452:	bd10      	pop	{r4, pc}
 8004454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8004458:	f7ff bab6 	b.w	80039c8 <Error_Handler>
 800445c:	200006ac 	.word	0x200006ac
 8004460:	40011400 	.word	0x40011400

08004464 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004464:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==UART7)
 8004466:	6803      	ldr	r3, [r0, #0]
 8004468:	4a61      	ldr	r2, [pc, #388]	; (80045f0 <HAL_UART_MspInit+0x18c>)
{
 800446a:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800446c:	2400      	movs	r4, #0
  if(uartHandle->Instance==UART7)
 800446e:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004470:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8004474:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8004478:	940d      	str	r4, [sp, #52]	; 0x34
  if(uartHandle->Instance==UART7)
 800447a:	d039      	beq.n	80044f0 <HAL_UART_MspInit+0x8c>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(uartHandle->Instance==UART8)
 800447c:	4a5d      	ldr	r2, [pc, #372]	; (80045f4 <HAL_UART_MspInit+0x190>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d05c      	beq.n	800453c <HAL_UART_MspInit+0xd8>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 8004482:	4a5d      	ldr	r2, [pc, #372]	; (80045f8 <HAL_UART_MspInit+0x194>)
 8004484:	4293      	cmp	r3, r2
 8004486:	f000 8085 	beq.w	8004594 <HAL_UART_MspInit+0x130>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART6)
 800448a:	4a5c      	ldr	r2, [pc, #368]	; (80045fc <HAL_UART_MspInit+0x198>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d001      	beq.n	8004494 <HAL_UART_MspInit+0x30>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004490:	b00e      	add	sp, #56	; 0x38
 8004492:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART6_CLK_ENABLE();
 8004494:	4b5a      	ldr	r3, [pc, #360]	; (8004600 <HAL_UART_MspInit+0x19c>)
 8004496:	9407      	str	r4, [sp, #28]
 8004498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800449a:	485a      	ldr	r0, [pc, #360]	; (8004604 <HAL_UART_MspInit+0x1a0>)
    __HAL_RCC_USART6_CLK_ENABLE();
 800449c:	f042 0220 	orr.w	r2, r2, #32
 80044a0:	645a      	str	r2, [r3, #68]	; 0x44
 80044a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044a4:	f002 0220 	and.w	r2, r2, #32
 80044a8:	9207      	str	r2, [sp, #28]
 80044aa:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80044ac:	9408      	str	r4, [sp, #32]
 80044ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044b4:	631a      	str	r2, [r3, #48]	; 0x30
 80044b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044bc:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80044be:	f44f 4284 	mov.w	r2, #16896	; 0x4200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c2:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80044c4:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80044c6:	9209      	str	r2, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c8:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044ca:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80044cc:	2308      	movs	r3, #8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044ce:	2501      	movs	r5, #1
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80044d0:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044d2:	e9cd 520b 	strd	r5, r2, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80044d6:	9e08      	ldr	r6, [sp, #32]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80044d8:	f7fd f98a 	bl	80017f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80044dc:	4622      	mov	r2, r4
 80044de:	4621      	mov	r1, r4
 80044e0:	2047      	movs	r0, #71	; 0x47
 80044e2:	f7fd f915 	bl	8001710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80044e6:	2047      	movs	r0, #71	; 0x47
 80044e8:	f7fd f948 	bl	800177c <HAL_NVIC_EnableIRQ>
}
 80044ec:	b00e      	add	sp, #56	; 0x38
 80044ee:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_UART7_CLK_ENABLE();
 80044f0:	4b43      	ldr	r3, [pc, #268]	; (8004600 <HAL_UART_MspInit+0x19c>)
 80044f2:	9401      	str	r4, [sp, #4]
 80044f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044f6:	4844      	ldr	r0, [pc, #272]	; (8004608 <HAL_UART_MspInit+0x1a4>)
    __HAL_RCC_UART7_CLK_ENABLE();
 80044f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80044fc:	641a      	str	r2, [r3, #64]	; 0x40
 80044fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004500:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004504:	9201      	str	r2, [sp, #4]
 8004506:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004508:	9402      	str	r4, [sp, #8]
 800450a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800450c:	f042 0210 	orr.w	r2, r2, #16
 8004510:	631a      	str	r2, [r3, #48]	; 0x30
 8004512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004514:	f003 0310 	and.w	r3, r3, #16
 8004518:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 800451a:	f44f 73c0 	mov.w	r3, #384	; 0x180
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800451e:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8004520:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004522:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004524:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004526:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004528:	2401      	movs	r4, #1
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800452a:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800452c:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004530:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004534:	f7fd f95c 	bl	80017f0 <HAL_GPIO_Init>
}
 8004538:	b00e      	add	sp, #56	; 0x38
 800453a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_UART8_CLK_ENABLE();
 800453c:	4b30      	ldr	r3, [pc, #192]	; (8004600 <HAL_UART_MspInit+0x19c>)
 800453e:	9403      	str	r4, [sp, #12]
 8004540:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004542:	4831      	ldr	r0, [pc, #196]	; (8004608 <HAL_UART_MspInit+0x1a4>)
    __HAL_RCC_UART8_CLK_ENABLE();
 8004544:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004548:	641a      	str	r2, [r3, #64]	; 0x40
 800454a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800454c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004550:	9203      	str	r2, [sp, #12]
 8004552:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004554:	9404      	str	r4, [sp, #16]
 8004556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004558:	f042 0210 	orr.w	r2, r2, #16
 800455c:	631a      	str	r2, [r3, #48]	; 0x30
 800455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004560:	f003 0310 	and.w	r3, r3, #16
 8004564:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8004566:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004568:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800456a:	2201      	movs	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800456c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800456e:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004570:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8004572:	2308      	movs	r3, #8
 8004574:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004576:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800457a:	9e04      	ldr	r6, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800457c:	f7fd f938 	bl	80017f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8004580:	4622      	mov	r2, r4
 8004582:	4621      	mov	r1, r4
 8004584:	2053      	movs	r0, #83	; 0x53
 8004586:	f7fd f8c3 	bl	8001710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800458a:	2053      	movs	r0, #83	; 0x53
 800458c:	f7fd f8f6 	bl	800177c <HAL_NVIC_EnableIRQ>
}
 8004590:	b00e      	add	sp, #56	; 0x38
 8004592:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8004594:	4b1a      	ldr	r3, [pc, #104]	; (8004600 <HAL_UART_MspInit+0x19c>)
 8004596:	9405      	str	r4, [sp, #20]
 8004598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800459a:	481c      	ldr	r0, [pc, #112]	; (800460c <HAL_UART_MspInit+0x1a8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800459c:	f042 0210 	orr.w	r2, r2, #16
 80045a0:	645a      	str	r2, [r3, #68]	; 0x44
 80045a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045a4:	f002 0210 	and.w	r2, r2, #16
 80045a8:	9205      	str	r2, [sp, #20]
 80045aa:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045ac:	9406      	str	r4, [sp, #24]
 80045ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045b0:	f042 0202 	orr.w	r2, r2, #2
 80045b4:	631a      	str	r2, [r3, #48]	; 0x30
 80045b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80045be:	22c0      	movs	r2, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045c0:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045c2:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80045c4:	9209      	str	r2, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045c6:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045c8:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80045ca:	2307      	movs	r3, #7
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045cc:	2501      	movs	r5, #1
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80045ce:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045d0:	e9cd 520b 	strd	r5, r2, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045d4:	9e06      	ldr	r6, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045d6:	f7fd f90b 	bl	80017f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80045da:	4622      	mov	r2, r4
 80045dc:	4621      	mov	r1, r4
 80045de:	2025      	movs	r0, #37	; 0x25
 80045e0:	f7fd f896 	bl	8001710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80045e4:	2025      	movs	r0, #37	; 0x25
 80045e6:	f7fd f8c9 	bl	800177c <HAL_NVIC_EnableIRQ>
}
 80045ea:	b00e      	add	sp, #56	; 0x38
 80045ec:	bd70      	pop	{r4, r5, r6, pc}
 80045ee:	bf00      	nop
 80045f0:	40007800 	.word	0x40007800
 80045f4:	40007c00 	.word	0x40007c00
 80045f8:	40011000 	.word	0x40011000
 80045fc:	40011400 	.word	0x40011400
 8004600:	40023800 	.word	0x40023800
 8004604:	40021800 	.word	0x40021800
 8004608:	40021000 	.word	0x40021000
 800460c:	40020400 	.word	0x40020400

08004610 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004610:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004648 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004614:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004616:	e003      	b.n	8004620 <LoopCopyDataInit>

08004618 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004618:	4b0c      	ldr	r3, [pc, #48]	; (800464c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800461a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800461c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800461e:	3104      	adds	r1, #4

08004620 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004620:	480b      	ldr	r0, [pc, #44]	; (8004650 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004622:	4b0c      	ldr	r3, [pc, #48]	; (8004654 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004624:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004626:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004628:	d3f6      	bcc.n	8004618 <CopyDataInit>
  ldr  r2, =_sbss
 800462a:	4a0b      	ldr	r2, [pc, #44]	; (8004658 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800462c:	e002      	b.n	8004634 <LoopFillZerobss>

0800462e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800462e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004630:	f842 3b04 	str.w	r3, [r2], #4

08004634 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004634:	4b09      	ldr	r3, [pc, #36]	; (800465c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004636:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004638:	d3f9      	bcc.n	800462e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800463a:	f7ff fcd3 	bl	8003fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800463e:	f000 f817 	bl	8004670 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004642:	f7fe ff09 	bl	8003458 <main>
  bx  lr    
 8004646:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004648:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800464c:	08007280 	.word	0x08007280
  ldr  r0, =_sdata
 8004650:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004654:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8004658:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800465c:	200006f0 	.word	0x200006f0

08004660 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004660:	e7fe      	b.n	8004660 <ADC_IRQHandler>
	...

08004664 <__errno>:
 8004664:	4b01      	ldr	r3, [pc, #4]	; (800466c <__errno+0x8>)
 8004666:	6818      	ldr	r0, [r3, #0]
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	20000010 	.word	0x20000010

08004670 <__libc_init_array>:
 8004670:	b570      	push	{r4, r5, r6, lr}
 8004672:	4e0d      	ldr	r6, [pc, #52]	; (80046a8 <__libc_init_array+0x38>)
 8004674:	4c0d      	ldr	r4, [pc, #52]	; (80046ac <__libc_init_array+0x3c>)
 8004676:	1ba4      	subs	r4, r4, r6
 8004678:	10a4      	asrs	r4, r4, #2
 800467a:	2500      	movs	r5, #0
 800467c:	42a5      	cmp	r5, r4
 800467e:	d109      	bne.n	8004694 <__libc_init_array+0x24>
 8004680:	4e0b      	ldr	r6, [pc, #44]	; (80046b0 <__libc_init_array+0x40>)
 8004682:	4c0c      	ldr	r4, [pc, #48]	; (80046b4 <__libc_init_array+0x44>)
 8004684:	f002 fc62 	bl	8006f4c <_init>
 8004688:	1ba4      	subs	r4, r4, r6
 800468a:	10a4      	asrs	r4, r4, #2
 800468c:	2500      	movs	r5, #0
 800468e:	42a5      	cmp	r5, r4
 8004690:	d105      	bne.n	800469e <__libc_init_array+0x2e>
 8004692:	bd70      	pop	{r4, r5, r6, pc}
 8004694:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004698:	4798      	blx	r3
 800469a:	3501      	adds	r5, #1
 800469c:	e7ee      	b.n	800467c <__libc_init_array+0xc>
 800469e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046a2:	4798      	blx	r3
 80046a4:	3501      	adds	r5, #1
 80046a6:	e7f2      	b.n	800468e <__libc_init_array+0x1e>
 80046a8:	08007278 	.word	0x08007278
 80046ac:	08007278 	.word	0x08007278
 80046b0:	08007278 	.word	0x08007278
 80046b4:	0800727c 	.word	0x0800727c

080046b8 <memset>:
 80046b8:	4402      	add	r2, r0
 80046ba:	4603      	mov	r3, r0
 80046bc:	4293      	cmp	r3, r2
 80046be:	d100      	bne.n	80046c2 <memset+0xa>
 80046c0:	4770      	bx	lr
 80046c2:	f803 1b01 	strb.w	r1, [r3], #1
 80046c6:	e7f9      	b.n	80046bc <memset+0x4>

080046c8 <__cvt>:
 80046c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046cc:	ec55 4b10 	vmov	r4, r5, d0
 80046d0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80046d2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80046d6:	2d00      	cmp	r5, #0
 80046d8:	460e      	mov	r6, r1
 80046da:	4691      	mov	r9, r2
 80046dc:	4619      	mov	r1, r3
 80046de:	bfb8      	it	lt
 80046e0:	4622      	movlt	r2, r4
 80046e2:	462b      	mov	r3, r5
 80046e4:	f027 0720 	bic.w	r7, r7, #32
 80046e8:	bfbb      	ittet	lt
 80046ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80046ee:	461d      	movlt	r5, r3
 80046f0:	2300      	movge	r3, #0
 80046f2:	232d      	movlt	r3, #45	; 0x2d
 80046f4:	bfb8      	it	lt
 80046f6:	4614      	movlt	r4, r2
 80046f8:	2f46      	cmp	r7, #70	; 0x46
 80046fa:	700b      	strb	r3, [r1, #0]
 80046fc:	d004      	beq.n	8004708 <__cvt+0x40>
 80046fe:	2f45      	cmp	r7, #69	; 0x45
 8004700:	d100      	bne.n	8004704 <__cvt+0x3c>
 8004702:	3601      	adds	r6, #1
 8004704:	2102      	movs	r1, #2
 8004706:	e000      	b.n	800470a <__cvt+0x42>
 8004708:	2103      	movs	r1, #3
 800470a:	ab03      	add	r3, sp, #12
 800470c:	9301      	str	r3, [sp, #4]
 800470e:	ab02      	add	r3, sp, #8
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	4632      	mov	r2, r6
 8004714:	4653      	mov	r3, sl
 8004716:	ec45 4b10 	vmov	d0, r4, r5
 800471a:	f000 feb1 	bl	8005480 <_dtoa_r>
 800471e:	2f47      	cmp	r7, #71	; 0x47
 8004720:	4680      	mov	r8, r0
 8004722:	d102      	bne.n	800472a <__cvt+0x62>
 8004724:	f019 0f01 	tst.w	r9, #1
 8004728:	d026      	beq.n	8004778 <__cvt+0xb0>
 800472a:	2f46      	cmp	r7, #70	; 0x46
 800472c:	eb08 0906 	add.w	r9, r8, r6
 8004730:	d111      	bne.n	8004756 <__cvt+0x8e>
 8004732:	f898 3000 	ldrb.w	r3, [r8]
 8004736:	2b30      	cmp	r3, #48	; 0x30
 8004738:	d10a      	bne.n	8004750 <__cvt+0x88>
 800473a:	2200      	movs	r2, #0
 800473c:	2300      	movs	r3, #0
 800473e:	4620      	mov	r0, r4
 8004740:	4629      	mov	r1, r5
 8004742:	f7fc f9d1 	bl	8000ae8 <__aeabi_dcmpeq>
 8004746:	b918      	cbnz	r0, 8004750 <__cvt+0x88>
 8004748:	f1c6 0601 	rsb	r6, r6, #1
 800474c:	f8ca 6000 	str.w	r6, [sl]
 8004750:	f8da 3000 	ldr.w	r3, [sl]
 8004754:	4499      	add	r9, r3
 8004756:	2200      	movs	r2, #0
 8004758:	2300      	movs	r3, #0
 800475a:	4620      	mov	r0, r4
 800475c:	4629      	mov	r1, r5
 800475e:	f7fc f9c3 	bl	8000ae8 <__aeabi_dcmpeq>
 8004762:	b938      	cbnz	r0, 8004774 <__cvt+0xac>
 8004764:	2230      	movs	r2, #48	; 0x30
 8004766:	9b03      	ldr	r3, [sp, #12]
 8004768:	454b      	cmp	r3, r9
 800476a:	d205      	bcs.n	8004778 <__cvt+0xb0>
 800476c:	1c59      	adds	r1, r3, #1
 800476e:	9103      	str	r1, [sp, #12]
 8004770:	701a      	strb	r2, [r3, #0]
 8004772:	e7f8      	b.n	8004766 <__cvt+0x9e>
 8004774:	f8cd 900c 	str.w	r9, [sp, #12]
 8004778:	9b03      	ldr	r3, [sp, #12]
 800477a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800477c:	eba3 0308 	sub.w	r3, r3, r8
 8004780:	4640      	mov	r0, r8
 8004782:	6013      	str	r3, [r2, #0]
 8004784:	b004      	add	sp, #16
 8004786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800478a <__exponent>:
 800478a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800478c:	2900      	cmp	r1, #0
 800478e:	4604      	mov	r4, r0
 8004790:	bfba      	itte	lt
 8004792:	4249      	neglt	r1, r1
 8004794:	232d      	movlt	r3, #45	; 0x2d
 8004796:	232b      	movge	r3, #43	; 0x2b
 8004798:	2909      	cmp	r1, #9
 800479a:	f804 2b02 	strb.w	r2, [r4], #2
 800479e:	7043      	strb	r3, [r0, #1]
 80047a0:	dd20      	ble.n	80047e4 <__exponent+0x5a>
 80047a2:	f10d 0307 	add.w	r3, sp, #7
 80047a6:	461f      	mov	r7, r3
 80047a8:	260a      	movs	r6, #10
 80047aa:	fb91 f5f6 	sdiv	r5, r1, r6
 80047ae:	fb06 1115 	mls	r1, r6, r5, r1
 80047b2:	3130      	adds	r1, #48	; 0x30
 80047b4:	2d09      	cmp	r5, #9
 80047b6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80047ba:	f103 32ff 	add.w	r2, r3, #4294967295
 80047be:	4629      	mov	r1, r5
 80047c0:	dc09      	bgt.n	80047d6 <__exponent+0x4c>
 80047c2:	3130      	adds	r1, #48	; 0x30
 80047c4:	3b02      	subs	r3, #2
 80047c6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80047ca:	42bb      	cmp	r3, r7
 80047cc:	4622      	mov	r2, r4
 80047ce:	d304      	bcc.n	80047da <__exponent+0x50>
 80047d0:	1a10      	subs	r0, r2, r0
 80047d2:	b003      	add	sp, #12
 80047d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047d6:	4613      	mov	r3, r2
 80047d8:	e7e7      	b.n	80047aa <__exponent+0x20>
 80047da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047de:	f804 2b01 	strb.w	r2, [r4], #1
 80047e2:	e7f2      	b.n	80047ca <__exponent+0x40>
 80047e4:	2330      	movs	r3, #48	; 0x30
 80047e6:	4419      	add	r1, r3
 80047e8:	7083      	strb	r3, [r0, #2]
 80047ea:	1d02      	adds	r2, r0, #4
 80047ec:	70c1      	strb	r1, [r0, #3]
 80047ee:	e7ef      	b.n	80047d0 <__exponent+0x46>

080047f0 <_printf_float>:
 80047f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047f4:	b08d      	sub	sp, #52	; 0x34
 80047f6:	460c      	mov	r4, r1
 80047f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80047fc:	4616      	mov	r6, r2
 80047fe:	461f      	mov	r7, r3
 8004800:	4605      	mov	r5, r0
 8004802:	f001 fd6f 	bl	80062e4 <_localeconv_r>
 8004806:	6803      	ldr	r3, [r0, #0]
 8004808:	9304      	str	r3, [sp, #16]
 800480a:	4618      	mov	r0, r3
 800480c:	f7fb fcf0 	bl	80001f0 <strlen>
 8004810:	2300      	movs	r3, #0
 8004812:	930a      	str	r3, [sp, #40]	; 0x28
 8004814:	f8d8 3000 	ldr.w	r3, [r8]
 8004818:	9005      	str	r0, [sp, #20]
 800481a:	3307      	adds	r3, #7
 800481c:	f023 0307 	bic.w	r3, r3, #7
 8004820:	f103 0208 	add.w	r2, r3, #8
 8004824:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004828:	f8d4 b000 	ldr.w	fp, [r4]
 800482c:	f8c8 2000 	str.w	r2, [r8]
 8004830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004834:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004838:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800483c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004840:	9307      	str	r3, [sp, #28]
 8004842:	f8cd 8018 	str.w	r8, [sp, #24]
 8004846:	f04f 32ff 	mov.w	r2, #4294967295
 800484a:	4ba7      	ldr	r3, [pc, #668]	; (8004ae8 <_printf_float+0x2f8>)
 800484c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004850:	f7fc f97c 	bl	8000b4c <__aeabi_dcmpun>
 8004854:	bb70      	cbnz	r0, 80048b4 <_printf_float+0xc4>
 8004856:	f04f 32ff 	mov.w	r2, #4294967295
 800485a:	4ba3      	ldr	r3, [pc, #652]	; (8004ae8 <_printf_float+0x2f8>)
 800485c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004860:	f7fc f956 	bl	8000b10 <__aeabi_dcmple>
 8004864:	bb30      	cbnz	r0, 80048b4 <_printf_float+0xc4>
 8004866:	2200      	movs	r2, #0
 8004868:	2300      	movs	r3, #0
 800486a:	4640      	mov	r0, r8
 800486c:	4649      	mov	r1, r9
 800486e:	f7fc f945 	bl	8000afc <__aeabi_dcmplt>
 8004872:	b110      	cbz	r0, 800487a <_printf_float+0x8a>
 8004874:	232d      	movs	r3, #45	; 0x2d
 8004876:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800487a:	4a9c      	ldr	r2, [pc, #624]	; (8004aec <_printf_float+0x2fc>)
 800487c:	4b9c      	ldr	r3, [pc, #624]	; (8004af0 <_printf_float+0x300>)
 800487e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004882:	bf8c      	ite	hi
 8004884:	4690      	movhi	r8, r2
 8004886:	4698      	movls	r8, r3
 8004888:	2303      	movs	r3, #3
 800488a:	f02b 0204 	bic.w	r2, fp, #4
 800488e:	6123      	str	r3, [r4, #16]
 8004890:	6022      	str	r2, [r4, #0]
 8004892:	f04f 0900 	mov.w	r9, #0
 8004896:	9700      	str	r7, [sp, #0]
 8004898:	4633      	mov	r3, r6
 800489a:	aa0b      	add	r2, sp, #44	; 0x2c
 800489c:	4621      	mov	r1, r4
 800489e:	4628      	mov	r0, r5
 80048a0:	f000 f9e6 	bl	8004c70 <_printf_common>
 80048a4:	3001      	adds	r0, #1
 80048a6:	f040 808d 	bne.w	80049c4 <_printf_float+0x1d4>
 80048aa:	f04f 30ff 	mov.w	r0, #4294967295
 80048ae:	b00d      	add	sp, #52	; 0x34
 80048b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048b4:	4642      	mov	r2, r8
 80048b6:	464b      	mov	r3, r9
 80048b8:	4640      	mov	r0, r8
 80048ba:	4649      	mov	r1, r9
 80048bc:	f7fc f946 	bl	8000b4c <__aeabi_dcmpun>
 80048c0:	b110      	cbz	r0, 80048c8 <_printf_float+0xd8>
 80048c2:	4a8c      	ldr	r2, [pc, #560]	; (8004af4 <_printf_float+0x304>)
 80048c4:	4b8c      	ldr	r3, [pc, #560]	; (8004af8 <_printf_float+0x308>)
 80048c6:	e7da      	b.n	800487e <_printf_float+0x8e>
 80048c8:	6861      	ldr	r1, [r4, #4]
 80048ca:	1c4b      	adds	r3, r1, #1
 80048cc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80048d0:	a80a      	add	r0, sp, #40	; 0x28
 80048d2:	d13e      	bne.n	8004952 <_printf_float+0x162>
 80048d4:	2306      	movs	r3, #6
 80048d6:	6063      	str	r3, [r4, #4]
 80048d8:	2300      	movs	r3, #0
 80048da:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80048de:	ab09      	add	r3, sp, #36	; 0x24
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	ec49 8b10 	vmov	d0, r8, r9
 80048e6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80048ea:	6022      	str	r2, [r4, #0]
 80048ec:	f8cd a004 	str.w	sl, [sp, #4]
 80048f0:	6861      	ldr	r1, [r4, #4]
 80048f2:	4628      	mov	r0, r5
 80048f4:	f7ff fee8 	bl	80046c8 <__cvt>
 80048f8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80048fc:	2b47      	cmp	r3, #71	; 0x47
 80048fe:	4680      	mov	r8, r0
 8004900:	d109      	bne.n	8004916 <_printf_float+0x126>
 8004902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004904:	1cd8      	adds	r0, r3, #3
 8004906:	db02      	blt.n	800490e <_printf_float+0x11e>
 8004908:	6862      	ldr	r2, [r4, #4]
 800490a:	4293      	cmp	r3, r2
 800490c:	dd47      	ble.n	800499e <_printf_float+0x1ae>
 800490e:	f1aa 0a02 	sub.w	sl, sl, #2
 8004912:	fa5f fa8a 	uxtb.w	sl, sl
 8004916:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800491a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800491c:	d824      	bhi.n	8004968 <_printf_float+0x178>
 800491e:	3901      	subs	r1, #1
 8004920:	4652      	mov	r2, sl
 8004922:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004926:	9109      	str	r1, [sp, #36]	; 0x24
 8004928:	f7ff ff2f 	bl	800478a <__exponent>
 800492c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800492e:	1813      	adds	r3, r2, r0
 8004930:	2a01      	cmp	r2, #1
 8004932:	4681      	mov	r9, r0
 8004934:	6123      	str	r3, [r4, #16]
 8004936:	dc02      	bgt.n	800493e <_printf_float+0x14e>
 8004938:	6822      	ldr	r2, [r4, #0]
 800493a:	07d1      	lsls	r1, r2, #31
 800493c:	d501      	bpl.n	8004942 <_printf_float+0x152>
 800493e:	3301      	adds	r3, #1
 8004940:	6123      	str	r3, [r4, #16]
 8004942:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0a5      	beq.n	8004896 <_printf_float+0xa6>
 800494a:	232d      	movs	r3, #45	; 0x2d
 800494c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004950:	e7a1      	b.n	8004896 <_printf_float+0xa6>
 8004952:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004956:	f000 8177 	beq.w	8004c48 <_printf_float+0x458>
 800495a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800495e:	d1bb      	bne.n	80048d8 <_printf_float+0xe8>
 8004960:	2900      	cmp	r1, #0
 8004962:	d1b9      	bne.n	80048d8 <_printf_float+0xe8>
 8004964:	2301      	movs	r3, #1
 8004966:	e7b6      	b.n	80048d6 <_printf_float+0xe6>
 8004968:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800496c:	d119      	bne.n	80049a2 <_printf_float+0x1b2>
 800496e:	2900      	cmp	r1, #0
 8004970:	6863      	ldr	r3, [r4, #4]
 8004972:	dd0c      	ble.n	800498e <_printf_float+0x19e>
 8004974:	6121      	str	r1, [r4, #16]
 8004976:	b913      	cbnz	r3, 800497e <_printf_float+0x18e>
 8004978:	6822      	ldr	r2, [r4, #0]
 800497a:	07d2      	lsls	r2, r2, #31
 800497c:	d502      	bpl.n	8004984 <_printf_float+0x194>
 800497e:	3301      	adds	r3, #1
 8004980:	440b      	add	r3, r1
 8004982:	6123      	str	r3, [r4, #16]
 8004984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004986:	65a3      	str	r3, [r4, #88]	; 0x58
 8004988:	f04f 0900 	mov.w	r9, #0
 800498c:	e7d9      	b.n	8004942 <_printf_float+0x152>
 800498e:	b913      	cbnz	r3, 8004996 <_printf_float+0x1a6>
 8004990:	6822      	ldr	r2, [r4, #0]
 8004992:	07d0      	lsls	r0, r2, #31
 8004994:	d501      	bpl.n	800499a <_printf_float+0x1aa>
 8004996:	3302      	adds	r3, #2
 8004998:	e7f3      	b.n	8004982 <_printf_float+0x192>
 800499a:	2301      	movs	r3, #1
 800499c:	e7f1      	b.n	8004982 <_printf_float+0x192>
 800499e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80049a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80049a6:	4293      	cmp	r3, r2
 80049a8:	db05      	blt.n	80049b6 <_printf_float+0x1c6>
 80049aa:	6822      	ldr	r2, [r4, #0]
 80049ac:	6123      	str	r3, [r4, #16]
 80049ae:	07d1      	lsls	r1, r2, #31
 80049b0:	d5e8      	bpl.n	8004984 <_printf_float+0x194>
 80049b2:	3301      	adds	r3, #1
 80049b4:	e7e5      	b.n	8004982 <_printf_float+0x192>
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	bfd4      	ite	le
 80049ba:	f1c3 0302 	rsble	r3, r3, #2
 80049be:	2301      	movgt	r3, #1
 80049c0:	4413      	add	r3, r2
 80049c2:	e7de      	b.n	8004982 <_printf_float+0x192>
 80049c4:	6823      	ldr	r3, [r4, #0]
 80049c6:	055a      	lsls	r2, r3, #21
 80049c8:	d407      	bmi.n	80049da <_printf_float+0x1ea>
 80049ca:	6923      	ldr	r3, [r4, #16]
 80049cc:	4642      	mov	r2, r8
 80049ce:	4631      	mov	r1, r6
 80049d0:	4628      	mov	r0, r5
 80049d2:	47b8      	blx	r7
 80049d4:	3001      	adds	r0, #1
 80049d6:	d12b      	bne.n	8004a30 <_printf_float+0x240>
 80049d8:	e767      	b.n	80048aa <_printf_float+0xba>
 80049da:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80049de:	f240 80dc 	bls.w	8004b9a <_printf_float+0x3aa>
 80049e2:	2200      	movs	r2, #0
 80049e4:	2300      	movs	r3, #0
 80049e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049ea:	f7fc f87d 	bl	8000ae8 <__aeabi_dcmpeq>
 80049ee:	2800      	cmp	r0, #0
 80049f0:	d033      	beq.n	8004a5a <_printf_float+0x26a>
 80049f2:	2301      	movs	r3, #1
 80049f4:	4a41      	ldr	r2, [pc, #260]	; (8004afc <_printf_float+0x30c>)
 80049f6:	4631      	mov	r1, r6
 80049f8:	4628      	mov	r0, r5
 80049fa:	47b8      	blx	r7
 80049fc:	3001      	adds	r0, #1
 80049fe:	f43f af54 	beq.w	80048aa <_printf_float+0xba>
 8004a02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a06:	429a      	cmp	r2, r3
 8004a08:	db02      	blt.n	8004a10 <_printf_float+0x220>
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	07d8      	lsls	r0, r3, #31
 8004a0e:	d50f      	bpl.n	8004a30 <_printf_float+0x240>
 8004a10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a14:	4631      	mov	r1, r6
 8004a16:	4628      	mov	r0, r5
 8004a18:	47b8      	blx	r7
 8004a1a:	3001      	adds	r0, #1
 8004a1c:	f43f af45 	beq.w	80048aa <_printf_float+0xba>
 8004a20:	f04f 0800 	mov.w	r8, #0
 8004a24:	f104 091a 	add.w	r9, r4, #26
 8004a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	4543      	cmp	r3, r8
 8004a2e:	dc09      	bgt.n	8004a44 <_printf_float+0x254>
 8004a30:	6823      	ldr	r3, [r4, #0]
 8004a32:	079b      	lsls	r3, r3, #30
 8004a34:	f100 8103 	bmi.w	8004c3e <_printf_float+0x44e>
 8004a38:	68e0      	ldr	r0, [r4, #12]
 8004a3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a3c:	4298      	cmp	r0, r3
 8004a3e:	bfb8      	it	lt
 8004a40:	4618      	movlt	r0, r3
 8004a42:	e734      	b.n	80048ae <_printf_float+0xbe>
 8004a44:	2301      	movs	r3, #1
 8004a46:	464a      	mov	r2, r9
 8004a48:	4631      	mov	r1, r6
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	47b8      	blx	r7
 8004a4e:	3001      	adds	r0, #1
 8004a50:	f43f af2b 	beq.w	80048aa <_printf_float+0xba>
 8004a54:	f108 0801 	add.w	r8, r8, #1
 8004a58:	e7e6      	b.n	8004a28 <_printf_float+0x238>
 8004a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	dc2b      	bgt.n	8004ab8 <_printf_float+0x2c8>
 8004a60:	2301      	movs	r3, #1
 8004a62:	4a26      	ldr	r2, [pc, #152]	; (8004afc <_printf_float+0x30c>)
 8004a64:	4631      	mov	r1, r6
 8004a66:	4628      	mov	r0, r5
 8004a68:	47b8      	blx	r7
 8004a6a:	3001      	adds	r0, #1
 8004a6c:	f43f af1d 	beq.w	80048aa <_printf_float+0xba>
 8004a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a72:	b923      	cbnz	r3, 8004a7e <_printf_float+0x28e>
 8004a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a76:	b913      	cbnz	r3, 8004a7e <_printf_float+0x28e>
 8004a78:	6823      	ldr	r3, [r4, #0]
 8004a7a:	07d9      	lsls	r1, r3, #31
 8004a7c:	d5d8      	bpl.n	8004a30 <_printf_float+0x240>
 8004a7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a82:	4631      	mov	r1, r6
 8004a84:	4628      	mov	r0, r5
 8004a86:	47b8      	blx	r7
 8004a88:	3001      	adds	r0, #1
 8004a8a:	f43f af0e 	beq.w	80048aa <_printf_float+0xba>
 8004a8e:	f04f 0900 	mov.w	r9, #0
 8004a92:	f104 0a1a 	add.w	sl, r4, #26
 8004a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a98:	425b      	negs	r3, r3
 8004a9a:	454b      	cmp	r3, r9
 8004a9c:	dc01      	bgt.n	8004aa2 <_printf_float+0x2b2>
 8004a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004aa0:	e794      	b.n	80049cc <_printf_float+0x1dc>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	4652      	mov	r2, sl
 8004aa6:	4631      	mov	r1, r6
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	47b8      	blx	r7
 8004aac:	3001      	adds	r0, #1
 8004aae:	f43f aefc 	beq.w	80048aa <_printf_float+0xba>
 8004ab2:	f109 0901 	add.w	r9, r9, #1
 8004ab6:	e7ee      	b.n	8004a96 <_printf_float+0x2a6>
 8004ab8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004aba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004abc:	429a      	cmp	r2, r3
 8004abe:	bfa8      	it	ge
 8004ac0:	461a      	movge	r2, r3
 8004ac2:	2a00      	cmp	r2, #0
 8004ac4:	4691      	mov	r9, r2
 8004ac6:	dd07      	ble.n	8004ad8 <_printf_float+0x2e8>
 8004ac8:	4613      	mov	r3, r2
 8004aca:	4631      	mov	r1, r6
 8004acc:	4642      	mov	r2, r8
 8004ace:	4628      	mov	r0, r5
 8004ad0:	47b8      	blx	r7
 8004ad2:	3001      	adds	r0, #1
 8004ad4:	f43f aee9 	beq.w	80048aa <_printf_float+0xba>
 8004ad8:	f104 031a 	add.w	r3, r4, #26
 8004adc:	f04f 0b00 	mov.w	fp, #0
 8004ae0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ae4:	9306      	str	r3, [sp, #24]
 8004ae6:	e015      	b.n	8004b14 <_printf_float+0x324>
 8004ae8:	7fefffff 	.word	0x7fefffff
 8004aec:	08006fb4 	.word	0x08006fb4
 8004af0:	08006fb0 	.word	0x08006fb0
 8004af4:	08006fbc 	.word	0x08006fbc
 8004af8:	08006fb8 	.word	0x08006fb8
 8004afc:	08006fc0 	.word	0x08006fc0
 8004b00:	2301      	movs	r3, #1
 8004b02:	9a06      	ldr	r2, [sp, #24]
 8004b04:	4631      	mov	r1, r6
 8004b06:	4628      	mov	r0, r5
 8004b08:	47b8      	blx	r7
 8004b0a:	3001      	adds	r0, #1
 8004b0c:	f43f aecd 	beq.w	80048aa <_printf_float+0xba>
 8004b10:	f10b 0b01 	add.w	fp, fp, #1
 8004b14:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004b18:	ebaa 0309 	sub.w	r3, sl, r9
 8004b1c:	455b      	cmp	r3, fp
 8004b1e:	dcef      	bgt.n	8004b00 <_printf_float+0x310>
 8004b20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b24:	429a      	cmp	r2, r3
 8004b26:	44d0      	add	r8, sl
 8004b28:	db15      	blt.n	8004b56 <_printf_float+0x366>
 8004b2a:	6823      	ldr	r3, [r4, #0]
 8004b2c:	07da      	lsls	r2, r3, #31
 8004b2e:	d412      	bmi.n	8004b56 <_printf_float+0x366>
 8004b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b34:	eba3 020a 	sub.w	r2, r3, sl
 8004b38:	eba3 0a01 	sub.w	sl, r3, r1
 8004b3c:	4592      	cmp	sl, r2
 8004b3e:	bfa8      	it	ge
 8004b40:	4692      	movge	sl, r2
 8004b42:	f1ba 0f00 	cmp.w	sl, #0
 8004b46:	dc0e      	bgt.n	8004b66 <_printf_float+0x376>
 8004b48:	f04f 0800 	mov.w	r8, #0
 8004b4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004b50:	f104 091a 	add.w	r9, r4, #26
 8004b54:	e019      	b.n	8004b8a <_printf_float+0x39a>
 8004b56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b5a:	4631      	mov	r1, r6
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	47b8      	blx	r7
 8004b60:	3001      	adds	r0, #1
 8004b62:	d1e5      	bne.n	8004b30 <_printf_float+0x340>
 8004b64:	e6a1      	b.n	80048aa <_printf_float+0xba>
 8004b66:	4653      	mov	r3, sl
 8004b68:	4642      	mov	r2, r8
 8004b6a:	4631      	mov	r1, r6
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	47b8      	blx	r7
 8004b70:	3001      	adds	r0, #1
 8004b72:	d1e9      	bne.n	8004b48 <_printf_float+0x358>
 8004b74:	e699      	b.n	80048aa <_printf_float+0xba>
 8004b76:	2301      	movs	r3, #1
 8004b78:	464a      	mov	r2, r9
 8004b7a:	4631      	mov	r1, r6
 8004b7c:	4628      	mov	r0, r5
 8004b7e:	47b8      	blx	r7
 8004b80:	3001      	adds	r0, #1
 8004b82:	f43f ae92 	beq.w	80048aa <_printf_float+0xba>
 8004b86:	f108 0801 	add.w	r8, r8, #1
 8004b8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b8e:	1a9b      	subs	r3, r3, r2
 8004b90:	eba3 030a 	sub.w	r3, r3, sl
 8004b94:	4543      	cmp	r3, r8
 8004b96:	dcee      	bgt.n	8004b76 <_printf_float+0x386>
 8004b98:	e74a      	b.n	8004a30 <_printf_float+0x240>
 8004b9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b9c:	2a01      	cmp	r2, #1
 8004b9e:	dc01      	bgt.n	8004ba4 <_printf_float+0x3b4>
 8004ba0:	07db      	lsls	r3, r3, #31
 8004ba2:	d53a      	bpl.n	8004c1a <_printf_float+0x42a>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	4642      	mov	r2, r8
 8004ba8:	4631      	mov	r1, r6
 8004baa:	4628      	mov	r0, r5
 8004bac:	47b8      	blx	r7
 8004bae:	3001      	adds	r0, #1
 8004bb0:	f43f ae7b 	beq.w	80048aa <_printf_float+0xba>
 8004bb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bb8:	4631      	mov	r1, r6
 8004bba:	4628      	mov	r0, r5
 8004bbc:	47b8      	blx	r7
 8004bbe:	3001      	adds	r0, #1
 8004bc0:	f108 0801 	add.w	r8, r8, #1
 8004bc4:	f43f ae71 	beq.w	80048aa <_printf_float+0xba>
 8004bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f103 3aff 	add.w	sl, r3, #4294967295
 8004bd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	f7fb ff87 	bl	8000ae8 <__aeabi_dcmpeq>
 8004bda:	b9c8      	cbnz	r0, 8004c10 <_printf_float+0x420>
 8004bdc:	4653      	mov	r3, sl
 8004bde:	4642      	mov	r2, r8
 8004be0:	4631      	mov	r1, r6
 8004be2:	4628      	mov	r0, r5
 8004be4:	47b8      	blx	r7
 8004be6:	3001      	adds	r0, #1
 8004be8:	d10e      	bne.n	8004c08 <_printf_float+0x418>
 8004bea:	e65e      	b.n	80048aa <_printf_float+0xba>
 8004bec:	2301      	movs	r3, #1
 8004bee:	4652      	mov	r2, sl
 8004bf0:	4631      	mov	r1, r6
 8004bf2:	4628      	mov	r0, r5
 8004bf4:	47b8      	blx	r7
 8004bf6:	3001      	adds	r0, #1
 8004bf8:	f43f ae57 	beq.w	80048aa <_printf_float+0xba>
 8004bfc:	f108 0801 	add.w	r8, r8, #1
 8004c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c02:	3b01      	subs	r3, #1
 8004c04:	4543      	cmp	r3, r8
 8004c06:	dcf1      	bgt.n	8004bec <_printf_float+0x3fc>
 8004c08:	464b      	mov	r3, r9
 8004c0a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004c0e:	e6de      	b.n	80049ce <_printf_float+0x1de>
 8004c10:	f04f 0800 	mov.w	r8, #0
 8004c14:	f104 0a1a 	add.w	sl, r4, #26
 8004c18:	e7f2      	b.n	8004c00 <_printf_float+0x410>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e7df      	b.n	8004bde <_printf_float+0x3ee>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	464a      	mov	r2, r9
 8004c22:	4631      	mov	r1, r6
 8004c24:	4628      	mov	r0, r5
 8004c26:	47b8      	blx	r7
 8004c28:	3001      	adds	r0, #1
 8004c2a:	f43f ae3e 	beq.w	80048aa <_printf_float+0xba>
 8004c2e:	f108 0801 	add.w	r8, r8, #1
 8004c32:	68e3      	ldr	r3, [r4, #12]
 8004c34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c36:	1a9b      	subs	r3, r3, r2
 8004c38:	4543      	cmp	r3, r8
 8004c3a:	dcf0      	bgt.n	8004c1e <_printf_float+0x42e>
 8004c3c:	e6fc      	b.n	8004a38 <_printf_float+0x248>
 8004c3e:	f04f 0800 	mov.w	r8, #0
 8004c42:	f104 0919 	add.w	r9, r4, #25
 8004c46:	e7f4      	b.n	8004c32 <_printf_float+0x442>
 8004c48:	2900      	cmp	r1, #0
 8004c4a:	f43f ae8b 	beq.w	8004964 <_printf_float+0x174>
 8004c4e:	2300      	movs	r3, #0
 8004c50:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004c54:	ab09      	add	r3, sp, #36	; 0x24
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	ec49 8b10 	vmov	d0, r8, r9
 8004c5c:	6022      	str	r2, [r4, #0]
 8004c5e:	f8cd a004 	str.w	sl, [sp, #4]
 8004c62:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004c66:	4628      	mov	r0, r5
 8004c68:	f7ff fd2e 	bl	80046c8 <__cvt>
 8004c6c:	4680      	mov	r8, r0
 8004c6e:	e648      	b.n	8004902 <_printf_float+0x112>

08004c70 <_printf_common>:
 8004c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c74:	4691      	mov	r9, r2
 8004c76:	461f      	mov	r7, r3
 8004c78:	688a      	ldr	r2, [r1, #8]
 8004c7a:	690b      	ldr	r3, [r1, #16]
 8004c7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c80:	4293      	cmp	r3, r2
 8004c82:	bfb8      	it	lt
 8004c84:	4613      	movlt	r3, r2
 8004c86:	f8c9 3000 	str.w	r3, [r9]
 8004c8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c8e:	4606      	mov	r6, r0
 8004c90:	460c      	mov	r4, r1
 8004c92:	b112      	cbz	r2, 8004c9a <_printf_common+0x2a>
 8004c94:	3301      	adds	r3, #1
 8004c96:	f8c9 3000 	str.w	r3, [r9]
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	0699      	lsls	r1, r3, #26
 8004c9e:	bf42      	ittt	mi
 8004ca0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004ca4:	3302      	addmi	r3, #2
 8004ca6:	f8c9 3000 	strmi.w	r3, [r9]
 8004caa:	6825      	ldr	r5, [r4, #0]
 8004cac:	f015 0506 	ands.w	r5, r5, #6
 8004cb0:	d107      	bne.n	8004cc2 <_printf_common+0x52>
 8004cb2:	f104 0a19 	add.w	sl, r4, #25
 8004cb6:	68e3      	ldr	r3, [r4, #12]
 8004cb8:	f8d9 2000 	ldr.w	r2, [r9]
 8004cbc:	1a9b      	subs	r3, r3, r2
 8004cbe:	42ab      	cmp	r3, r5
 8004cc0:	dc28      	bgt.n	8004d14 <_printf_common+0xa4>
 8004cc2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004cc6:	6822      	ldr	r2, [r4, #0]
 8004cc8:	3300      	adds	r3, #0
 8004cca:	bf18      	it	ne
 8004ccc:	2301      	movne	r3, #1
 8004cce:	0692      	lsls	r2, r2, #26
 8004cd0:	d42d      	bmi.n	8004d2e <_printf_common+0xbe>
 8004cd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cd6:	4639      	mov	r1, r7
 8004cd8:	4630      	mov	r0, r6
 8004cda:	47c0      	blx	r8
 8004cdc:	3001      	adds	r0, #1
 8004cde:	d020      	beq.n	8004d22 <_printf_common+0xb2>
 8004ce0:	6823      	ldr	r3, [r4, #0]
 8004ce2:	68e5      	ldr	r5, [r4, #12]
 8004ce4:	f8d9 2000 	ldr.w	r2, [r9]
 8004ce8:	f003 0306 	and.w	r3, r3, #6
 8004cec:	2b04      	cmp	r3, #4
 8004cee:	bf08      	it	eq
 8004cf0:	1aad      	subeq	r5, r5, r2
 8004cf2:	68a3      	ldr	r3, [r4, #8]
 8004cf4:	6922      	ldr	r2, [r4, #16]
 8004cf6:	bf0c      	ite	eq
 8004cf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cfc:	2500      	movne	r5, #0
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	bfc4      	itt	gt
 8004d02:	1a9b      	subgt	r3, r3, r2
 8004d04:	18ed      	addgt	r5, r5, r3
 8004d06:	f04f 0900 	mov.w	r9, #0
 8004d0a:	341a      	adds	r4, #26
 8004d0c:	454d      	cmp	r5, r9
 8004d0e:	d11a      	bne.n	8004d46 <_printf_common+0xd6>
 8004d10:	2000      	movs	r0, #0
 8004d12:	e008      	b.n	8004d26 <_printf_common+0xb6>
 8004d14:	2301      	movs	r3, #1
 8004d16:	4652      	mov	r2, sl
 8004d18:	4639      	mov	r1, r7
 8004d1a:	4630      	mov	r0, r6
 8004d1c:	47c0      	blx	r8
 8004d1e:	3001      	adds	r0, #1
 8004d20:	d103      	bne.n	8004d2a <_printf_common+0xba>
 8004d22:	f04f 30ff 	mov.w	r0, #4294967295
 8004d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d2a:	3501      	adds	r5, #1
 8004d2c:	e7c3      	b.n	8004cb6 <_printf_common+0x46>
 8004d2e:	18e1      	adds	r1, r4, r3
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	2030      	movs	r0, #48	; 0x30
 8004d34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d38:	4422      	add	r2, r4
 8004d3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d42:	3302      	adds	r3, #2
 8004d44:	e7c5      	b.n	8004cd2 <_printf_common+0x62>
 8004d46:	2301      	movs	r3, #1
 8004d48:	4622      	mov	r2, r4
 8004d4a:	4639      	mov	r1, r7
 8004d4c:	4630      	mov	r0, r6
 8004d4e:	47c0      	blx	r8
 8004d50:	3001      	adds	r0, #1
 8004d52:	d0e6      	beq.n	8004d22 <_printf_common+0xb2>
 8004d54:	f109 0901 	add.w	r9, r9, #1
 8004d58:	e7d8      	b.n	8004d0c <_printf_common+0x9c>
	...

08004d5c <_printf_i>:
 8004d5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d60:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004d64:	460c      	mov	r4, r1
 8004d66:	7e09      	ldrb	r1, [r1, #24]
 8004d68:	b085      	sub	sp, #20
 8004d6a:	296e      	cmp	r1, #110	; 0x6e
 8004d6c:	4617      	mov	r7, r2
 8004d6e:	4606      	mov	r6, r0
 8004d70:	4698      	mov	r8, r3
 8004d72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d74:	f000 80b3 	beq.w	8004ede <_printf_i+0x182>
 8004d78:	d822      	bhi.n	8004dc0 <_printf_i+0x64>
 8004d7a:	2963      	cmp	r1, #99	; 0x63
 8004d7c:	d036      	beq.n	8004dec <_printf_i+0x90>
 8004d7e:	d80a      	bhi.n	8004d96 <_printf_i+0x3a>
 8004d80:	2900      	cmp	r1, #0
 8004d82:	f000 80b9 	beq.w	8004ef8 <_printf_i+0x19c>
 8004d86:	2958      	cmp	r1, #88	; 0x58
 8004d88:	f000 8083 	beq.w	8004e92 <_printf_i+0x136>
 8004d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d90:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004d94:	e032      	b.n	8004dfc <_printf_i+0xa0>
 8004d96:	2964      	cmp	r1, #100	; 0x64
 8004d98:	d001      	beq.n	8004d9e <_printf_i+0x42>
 8004d9a:	2969      	cmp	r1, #105	; 0x69
 8004d9c:	d1f6      	bne.n	8004d8c <_printf_i+0x30>
 8004d9e:	6820      	ldr	r0, [r4, #0]
 8004da0:	6813      	ldr	r3, [r2, #0]
 8004da2:	0605      	lsls	r5, r0, #24
 8004da4:	f103 0104 	add.w	r1, r3, #4
 8004da8:	d52a      	bpl.n	8004e00 <_printf_i+0xa4>
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6011      	str	r1, [r2, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	da03      	bge.n	8004dba <_printf_i+0x5e>
 8004db2:	222d      	movs	r2, #45	; 0x2d
 8004db4:	425b      	negs	r3, r3
 8004db6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004dba:	486f      	ldr	r0, [pc, #444]	; (8004f78 <_printf_i+0x21c>)
 8004dbc:	220a      	movs	r2, #10
 8004dbe:	e039      	b.n	8004e34 <_printf_i+0xd8>
 8004dc0:	2973      	cmp	r1, #115	; 0x73
 8004dc2:	f000 809d 	beq.w	8004f00 <_printf_i+0x1a4>
 8004dc6:	d808      	bhi.n	8004dda <_printf_i+0x7e>
 8004dc8:	296f      	cmp	r1, #111	; 0x6f
 8004dca:	d020      	beq.n	8004e0e <_printf_i+0xb2>
 8004dcc:	2970      	cmp	r1, #112	; 0x70
 8004dce:	d1dd      	bne.n	8004d8c <_printf_i+0x30>
 8004dd0:	6823      	ldr	r3, [r4, #0]
 8004dd2:	f043 0320 	orr.w	r3, r3, #32
 8004dd6:	6023      	str	r3, [r4, #0]
 8004dd8:	e003      	b.n	8004de2 <_printf_i+0x86>
 8004dda:	2975      	cmp	r1, #117	; 0x75
 8004ddc:	d017      	beq.n	8004e0e <_printf_i+0xb2>
 8004dde:	2978      	cmp	r1, #120	; 0x78
 8004de0:	d1d4      	bne.n	8004d8c <_printf_i+0x30>
 8004de2:	2378      	movs	r3, #120	; 0x78
 8004de4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004de8:	4864      	ldr	r0, [pc, #400]	; (8004f7c <_printf_i+0x220>)
 8004dea:	e055      	b.n	8004e98 <_printf_i+0x13c>
 8004dec:	6813      	ldr	r3, [r2, #0]
 8004dee:	1d19      	adds	r1, r3, #4
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6011      	str	r1, [r2, #0]
 8004df4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004df8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e08c      	b.n	8004f1a <_printf_i+0x1be>
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6011      	str	r1, [r2, #0]
 8004e04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e08:	bf18      	it	ne
 8004e0a:	b21b      	sxthne	r3, r3
 8004e0c:	e7cf      	b.n	8004dae <_printf_i+0x52>
 8004e0e:	6813      	ldr	r3, [r2, #0]
 8004e10:	6825      	ldr	r5, [r4, #0]
 8004e12:	1d18      	adds	r0, r3, #4
 8004e14:	6010      	str	r0, [r2, #0]
 8004e16:	0628      	lsls	r0, r5, #24
 8004e18:	d501      	bpl.n	8004e1e <_printf_i+0xc2>
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	e002      	b.n	8004e24 <_printf_i+0xc8>
 8004e1e:	0668      	lsls	r0, r5, #25
 8004e20:	d5fb      	bpl.n	8004e1a <_printf_i+0xbe>
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	4854      	ldr	r0, [pc, #336]	; (8004f78 <_printf_i+0x21c>)
 8004e26:	296f      	cmp	r1, #111	; 0x6f
 8004e28:	bf14      	ite	ne
 8004e2a:	220a      	movne	r2, #10
 8004e2c:	2208      	moveq	r2, #8
 8004e2e:	2100      	movs	r1, #0
 8004e30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e34:	6865      	ldr	r5, [r4, #4]
 8004e36:	60a5      	str	r5, [r4, #8]
 8004e38:	2d00      	cmp	r5, #0
 8004e3a:	f2c0 8095 	blt.w	8004f68 <_printf_i+0x20c>
 8004e3e:	6821      	ldr	r1, [r4, #0]
 8004e40:	f021 0104 	bic.w	r1, r1, #4
 8004e44:	6021      	str	r1, [r4, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d13d      	bne.n	8004ec6 <_printf_i+0x16a>
 8004e4a:	2d00      	cmp	r5, #0
 8004e4c:	f040 808e 	bne.w	8004f6c <_printf_i+0x210>
 8004e50:	4665      	mov	r5, ip
 8004e52:	2a08      	cmp	r2, #8
 8004e54:	d10b      	bne.n	8004e6e <_printf_i+0x112>
 8004e56:	6823      	ldr	r3, [r4, #0]
 8004e58:	07db      	lsls	r3, r3, #31
 8004e5a:	d508      	bpl.n	8004e6e <_printf_i+0x112>
 8004e5c:	6923      	ldr	r3, [r4, #16]
 8004e5e:	6862      	ldr	r2, [r4, #4]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	bfde      	ittt	le
 8004e64:	2330      	movle	r3, #48	; 0x30
 8004e66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e6e:	ebac 0305 	sub.w	r3, ip, r5
 8004e72:	6123      	str	r3, [r4, #16]
 8004e74:	f8cd 8000 	str.w	r8, [sp]
 8004e78:	463b      	mov	r3, r7
 8004e7a:	aa03      	add	r2, sp, #12
 8004e7c:	4621      	mov	r1, r4
 8004e7e:	4630      	mov	r0, r6
 8004e80:	f7ff fef6 	bl	8004c70 <_printf_common>
 8004e84:	3001      	adds	r0, #1
 8004e86:	d14d      	bne.n	8004f24 <_printf_i+0x1c8>
 8004e88:	f04f 30ff 	mov.w	r0, #4294967295
 8004e8c:	b005      	add	sp, #20
 8004e8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e92:	4839      	ldr	r0, [pc, #228]	; (8004f78 <_printf_i+0x21c>)
 8004e94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004e98:	6813      	ldr	r3, [r2, #0]
 8004e9a:	6821      	ldr	r1, [r4, #0]
 8004e9c:	1d1d      	adds	r5, r3, #4
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6015      	str	r5, [r2, #0]
 8004ea2:	060a      	lsls	r2, r1, #24
 8004ea4:	d50b      	bpl.n	8004ebe <_printf_i+0x162>
 8004ea6:	07ca      	lsls	r2, r1, #31
 8004ea8:	bf44      	itt	mi
 8004eaa:	f041 0120 	orrmi.w	r1, r1, #32
 8004eae:	6021      	strmi	r1, [r4, #0]
 8004eb0:	b91b      	cbnz	r3, 8004eba <_printf_i+0x15e>
 8004eb2:	6822      	ldr	r2, [r4, #0]
 8004eb4:	f022 0220 	bic.w	r2, r2, #32
 8004eb8:	6022      	str	r2, [r4, #0]
 8004eba:	2210      	movs	r2, #16
 8004ebc:	e7b7      	b.n	8004e2e <_printf_i+0xd2>
 8004ebe:	064d      	lsls	r5, r1, #25
 8004ec0:	bf48      	it	mi
 8004ec2:	b29b      	uxthmi	r3, r3
 8004ec4:	e7ef      	b.n	8004ea6 <_printf_i+0x14a>
 8004ec6:	4665      	mov	r5, ip
 8004ec8:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ecc:	fb02 3311 	mls	r3, r2, r1, r3
 8004ed0:	5cc3      	ldrb	r3, [r0, r3]
 8004ed2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	2900      	cmp	r1, #0
 8004eda:	d1f5      	bne.n	8004ec8 <_printf_i+0x16c>
 8004edc:	e7b9      	b.n	8004e52 <_printf_i+0xf6>
 8004ede:	6813      	ldr	r3, [r2, #0]
 8004ee0:	6825      	ldr	r5, [r4, #0]
 8004ee2:	6961      	ldr	r1, [r4, #20]
 8004ee4:	1d18      	adds	r0, r3, #4
 8004ee6:	6010      	str	r0, [r2, #0]
 8004ee8:	0628      	lsls	r0, r5, #24
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	d501      	bpl.n	8004ef2 <_printf_i+0x196>
 8004eee:	6019      	str	r1, [r3, #0]
 8004ef0:	e002      	b.n	8004ef8 <_printf_i+0x19c>
 8004ef2:	066a      	lsls	r2, r5, #25
 8004ef4:	d5fb      	bpl.n	8004eee <_printf_i+0x192>
 8004ef6:	8019      	strh	r1, [r3, #0]
 8004ef8:	2300      	movs	r3, #0
 8004efa:	6123      	str	r3, [r4, #16]
 8004efc:	4665      	mov	r5, ip
 8004efe:	e7b9      	b.n	8004e74 <_printf_i+0x118>
 8004f00:	6813      	ldr	r3, [r2, #0]
 8004f02:	1d19      	adds	r1, r3, #4
 8004f04:	6011      	str	r1, [r2, #0]
 8004f06:	681d      	ldr	r5, [r3, #0]
 8004f08:	6862      	ldr	r2, [r4, #4]
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	f7fb f977 	bl	8000200 <memchr>
 8004f12:	b108      	cbz	r0, 8004f18 <_printf_i+0x1bc>
 8004f14:	1b40      	subs	r0, r0, r5
 8004f16:	6060      	str	r0, [r4, #4]
 8004f18:	6863      	ldr	r3, [r4, #4]
 8004f1a:	6123      	str	r3, [r4, #16]
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f22:	e7a7      	b.n	8004e74 <_printf_i+0x118>
 8004f24:	6923      	ldr	r3, [r4, #16]
 8004f26:	462a      	mov	r2, r5
 8004f28:	4639      	mov	r1, r7
 8004f2a:	4630      	mov	r0, r6
 8004f2c:	47c0      	blx	r8
 8004f2e:	3001      	adds	r0, #1
 8004f30:	d0aa      	beq.n	8004e88 <_printf_i+0x12c>
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	079b      	lsls	r3, r3, #30
 8004f36:	d413      	bmi.n	8004f60 <_printf_i+0x204>
 8004f38:	68e0      	ldr	r0, [r4, #12]
 8004f3a:	9b03      	ldr	r3, [sp, #12]
 8004f3c:	4298      	cmp	r0, r3
 8004f3e:	bfb8      	it	lt
 8004f40:	4618      	movlt	r0, r3
 8004f42:	e7a3      	b.n	8004e8c <_printf_i+0x130>
 8004f44:	2301      	movs	r3, #1
 8004f46:	464a      	mov	r2, r9
 8004f48:	4639      	mov	r1, r7
 8004f4a:	4630      	mov	r0, r6
 8004f4c:	47c0      	blx	r8
 8004f4e:	3001      	adds	r0, #1
 8004f50:	d09a      	beq.n	8004e88 <_printf_i+0x12c>
 8004f52:	3501      	adds	r5, #1
 8004f54:	68e3      	ldr	r3, [r4, #12]
 8004f56:	9a03      	ldr	r2, [sp, #12]
 8004f58:	1a9b      	subs	r3, r3, r2
 8004f5a:	42ab      	cmp	r3, r5
 8004f5c:	dcf2      	bgt.n	8004f44 <_printf_i+0x1e8>
 8004f5e:	e7eb      	b.n	8004f38 <_printf_i+0x1dc>
 8004f60:	2500      	movs	r5, #0
 8004f62:	f104 0919 	add.w	r9, r4, #25
 8004f66:	e7f5      	b.n	8004f54 <_printf_i+0x1f8>
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1ac      	bne.n	8004ec6 <_printf_i+0x16a>
 8004f6c:	7803      	ldrb	r3, [r0, #0]
 8004f6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f76:	e76c      	b.n	8004e52 <_printf_i+0xf6>
 8004f78:	08006fc2 	.word	0x08006fc2
 8004f7c:	08006fd3 	.word	0x08006fd3

08004f80 <iprintf>:
 8004f80:	b40f      	push	{r0, r1, r2, r3}
 8004f82:	4b0a      	ldr	r3, [pc, #40]	; (8004fac <iprintf+0x2c>)
 8004f84:	b513      	push	{r0, r1, r4, lr}
 8004f86:	681c      	ldr	r4, [r3, #0]
 8004f88:	b124      	cbz	r4, 8004f94 <iprintf+0x14>
 8004f8a:	69a3      	ldr	r3, [r4, #24]
 8004f8c:	b913      	cbnz	r3, 8004f94 <iprintf+0x14>
 8004f8e:	4620      	mov	r0, r4
 8004f90:	f001 f91e 	bl	80061d0 <__sinit>
 8004f94:	ab05      	add	r3, sp, #20
 8004f96:	9a04      	ldr	r2, [sp, #16]
 8004f98:	68a1      	ldr	r1, [r4, #8]
 8004f9a:	9301      	str	r3, [sp, #4]
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	f001 fde1 	bl	8006b64 <_vfiprintf_r>
 8004fa2:	b002      	add	sp, #8
 8004fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fa8:	b004      	add	sp, #16
 8004faa:	4770      	bx	lr
 8004fac:	20000010 	.word	0x20000010

08004fb0 <_puts_r>:
 8004fb0:	b570      	push	{r4, r5, r6, lr}
 8004fb2:	460e      	mov	r6, r1
 8004fb4:	4605      	mov	r5, r0
 8004fb6:	b118      	cbz	r0, 8004fc0 <_puts_r+0x10>
 8004fb8:	6983      	ldr	r3, [r0, #24]
 8004fba:	b90b      	cbnz	r3, 8004fc0 <_puts_r+0x10>
 8004fbc:	f001 f908 	bl	80061d0 <__sinit>
 8004fc0:	69ab      	ldr	r3, [r5, #24]
 8004fc2:	68ac      	ldr	r4, [r5, #8]
 8004fc4:	b913      	cbnz	r3, 8004fcc <_puts_r+0x1c>
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	f001 f902 	bl	80061d0 <__sinit>
 8004fcc:	4b23      	ldr	r3, [pc, #140]	; (800505c <_puts_r+0xac>)
 8004fce:	429c      	cmp	r4, r3
 8004fd0:	d117      	bne.n	8005002 <_puts_r+0x52>
 8004fd2:	686c      	ldr	r4, [r5, #4]
 8004fd4:	89a3      	ldrh	r3, [r4, #12]
 8004fd6:	071b      	lsls	r3, r3, #28
 8004fd8:	d51d      	bpl.n	8005016 <_puts_r+0x66>
 8004fda:	6923      	ldr	r3, [r4, #16]
 8004fdc:	b1db      	cbz	r3, 8005016 <_puts_r+0x66>
 8004fde:	3e01      	subs	r6, #1
 8004fe0:	68a3      	ldr	r3, [r4, #8]
 8004fe2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	60a3      	str	r3, [r4, #8]
 8004fea:	b9e9      	cbnz	r1, 8005028 <_puts_r+0x78>
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	da2e      	bge.n	800504e <_puts_r+0x9e>
 8004ff0:	4622      	mov	r2, r4
 8004ff2:	210a      	movs	r1, #10
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	f000 f8f5 	bl	80051e4 <__swbuf_r>
 8004ffa:	3001      	adds	r0, #1
 8004ffc:	d011      	beq.n	8005022 <_puts_r+0x72>
 8004ffe:	200a      	movs	r0, #10
 8005000:	e011      	b.n	8005026 <_puts_r+0x76>
 8005002:	4b17      	ldr	r3, [pc, #92]	; (8005060 <_puts_r+0xb0>)
 8005004:	429c      	cmp	r4, r3
 8005006:	d101      	bne.n	800500c <_puts_r+0x5c>
 8005008:	68ac      	ldr	r4, [r5, #8]
 800500a:	e7e3      	b.n	8004fd4 <_puts_r+0x24>
 800500c:	4b15      	ldr	r3, [pc, #84]	; (8005064 <_puts_r+0xb4>)
 800500e:	429c      	cmp	r4, r3
 8005010:	bf08      	it	eq
 8005012:	68ec      	ldreq	r4, [r5, #12]
 8005014:	e7de      	b.n	8004fd4 <_puts_r+0x24>
 8005016:	4621      	mov	r1, r4
 8005018:	4628      	mov	r0, r5
 800501a:	f000 f935 	bl	8005288 <__swsetup_r>
 800501e:	2800      	cmp	r0, #0
 8005020:	d0dd      	beq.n	8004fde <_puts_r+0x2e>
 8005022:	f04f 30ff 	mov.w	r0, #4294967295
 8005026:	bd70      	pop	{r4, r5, r6, pc}
 8005028:	2b00      	cmp	r3, #0
 800502a:	da04      	bge.n	8005036 <_puts_r+0x86>
 800502c:	69a2      	ldr	r2, [r4, #24]
 800502e:	429a      	cmp	r2, r3
 8005030:	dc06      	bgt.n	8005040 <_puts_r+0x90>
 8005032:	290a      	cmp	r1, #10
 8005034:	d004      	beq.n	8005040 <_puts_r+0x90>
 8005036:	6823      	ldr	r3, [r4, #0]
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	6022      	str	r2, [r4, #0]
 800503c:	7019      	strb	r1, [r3, #0]
 800503e:	e7cf      	b.n	8004fe0 <_puts_r+0x30>
 8005040:	4622      	mov	r2, r4
 8005042:	4628      	mov	r0, r5
 8005044:	f000 f8ce 	bl	80051e4 <__swbuf_r>
 8005048:	3001      	adds	r0, #1
 800504a:	d1c9      	bne.n	8004fe0 <_puts_r+0x30>
 800504c:	e7e9      	b.n	8005022 <_puts_r+0x72>
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	200a      	movs	r0, #10
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	6022      	str	r2, [r4, #0]
 8005056:	7018      	strb	r0, [r3, #0]
 8005058:	e7e5      	b.n	8005026 <_puts_r+0x76>
 800505a:	bf00      	nop
 800505c:	08007014 	.word	0x08007014
 8005060:	08007034 	.word	0x08007034
 8005064:	08006ff4 	.word	0x08006ff4

08005068 <puts>:
 8005068:	4b02      	ldr	r3, [pc, #8]	; (8005074 <puts+0xc>)
 800506a:	4601      	mov	r1, r0
 800506c:	6818      	ldr	r0, [r3, #0]
 800506e:	f7ff bf9f 	b.w	8004fb0 <_puts_r>
 8005072:	bf00      	nop
 8005074:	20000010 	.word	0x20000010

08005078 <setbuf>:
 8005078:	2900      	cmp	r1, #0
 800507a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800507e:	bf0c      	ite	eq
 8005080:	2202      	moveq	r2, #2
 8005082:	2200      	movne	r2, #0
 8005084:	f000 b800 	b.w	8005088 <setvbuf>

08005088 <setvbuf>:
 8005088:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800508c:	461d      	mov	r5, r3
 800508e:	4b51      	ldr	r3, [pc, #324]	; (80051d4 <setvbuf+0x14c>)
 8005090:	681e      	ldr	r6, [r3, #0]
 8005092:	4604      	mov	r4, r0
 8005094:	460f      	mov	r7, r1
 8005096:	4690      	mov	r8, r2
 8005098:	b126      	cbz	r6, 80050a4 <setvbuf+0x1c>
 800509a:	69b3      	ldr	r3, [r6, #24]
 800509c:	b913      	cbnz	r3, 80050a4 <setvbuf+0x1c>
 800509e:	4630      	mov	r0, r6
 80050a0:	f001 f896 	bl	80061d0 <__sinit>
 80050a4:	4b4c      	ldr	r3, [pc, #304]	; (80051d8 <setvbuf+0x150>)
 80050a6:	429c      	cmp	r4, r3
 80050a8:	d152      	bne.n	8005150 <setvbuf+0xc8>
 80050aa:	6874      	ldr	r4, [r6, #4]
 80050ac:	f1b8 0f02 	cmp.w	r8, #2
 80050b0:	d006      	beq.n	80050c0 <setvbuf+0x38>
 80050b2:	f1b8 0f01 	cmp.w	r8, #1
 80050b6:	f200 8089 	bhi.w	80051cc <setvbuf+0x144>
 80050ba:	2d00      	cmp	r5, #0
 80050bc:	f2c0 8086 	blt.w	80051cc <setvbuf+0x144>
 80050c0:	4621      	mov	r1, r4
 80050c2:	4630      	mov	r0, r6
 80050c4:	f001 f81a 	bl	80060fc <_fflush_r>
 80050c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050ca:	b141      	cbz	r1, 80050de <setvbuf+0x56>
 80050cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050d0:	4299      	cmp	r1, r3
 80050d2:	d002      	beq.n	80050da <setvbuf+0x52>
 80050d4:	4630      	mov	r0, r6
 80050d6:	f001 fc73 	bl	80069c0 <_free_r>
 80050da:	2300      	movs	r3, #0
 80050dc:	6363      	str	r3, [r4, #52]	; 0x34
 80050de:	2300      	movs	r3, #0
 80050e0:	61a3      	str	r3, [r4, #24]
 80050e2:	6063      	str	r3, [r4, #4]
 80050e4:	89a3      	ldrh	r3, [r4, #12]
 80050e6:	061b      	lsls	r3, r3, #24
 80050e8:	d503      	bpl.n	80050f2 <setvbuf+0x6a>
 80050ea:	6921      	ldr	r1, [r4, #16]
 80050ec:	4630      	mov	r0, r6
 80050ee:	f001 fc67 	bl	80069c0 <_free_r>
 80050f2:	89a3      	ldrh	r3, [r4, #12]
 80050f4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80050f8:	f023 0303 	bic.w	r3, r3, #3
 80050fc:	f1b8 0f02 	cmp.w	r8, #2
 8005100:	81a3      	strh	r3, [r4, #12]
 8005102:	d05d      	beq.n	80051c0 <setvbuf+0x138>
 8005104:	ab01      	add	r3, sp, #4
 8005106:	466a      	mov	r2, sp
 8005108:	4621      	mov	r1, r4
 800510a:	4630      	mov	r0, r6
 800510c:	f001 f8f8 	bl	8006300 <__swhatbuf_r>
 8005110:	89a3      	ldrh	r3, [r4, #12]
 8005112:	4318      	orrs	r0, r3
 8005114:	81a0      	strh	r0, [r4, #12]
 8005116:	bb2d      	cbnz	r5, 8005164 <setvbuf+0xdc>
 8005118:	9d00      	ldr	r5, [sp, #0]
 800511a:	4628      	mov	r0, r5
 800511c:	f001 f954 	bl	80063c8 <malloc>
 8005120:	4607      	mov	r7, r0
 8005122:	2800      	cmp	r0, #0
 8005124:	d14e      	bne.n	80051c4 <setvbuf+0x13c>
 8005126:	f8dd 9000 	ldr.w	r9, [sp]
 800512a:	45a9      	cmp	r9, r5
 800512c:	d13c      	bne.n	80051a8 <setvbuf+0x120>
 800512e:	f04f 30ff 	mov.w	r0, #4294967295
 8005132:	89a3      	ldrh	r3, [r4, #12]
 8005134:	f043 0302 	orr.w	r3, r3, #2
 8005138:	81a3      	strh	r3, [r4, #12]
 800513a:	2300      	movs	r3, #0
 800513c:	60a3      	str	r3, [r4, #8]
 800513e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005142:	6023      	str	r3, [r4, #0]
 8005144:	6123      	str	r3, [r4, #16]
 8005146:	2301      	movs	r3, #1
 8005148:	6163      	str	r3, [r4, #20]
 800514a:	b003      	add	sp, #12
 800514c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005150:	4b22      	ldr	r3, [pc, #136]	; (80051dc <setvbuf+0x154>)
 8005152:	429c      	cmp	r4, r3
 8005154:	d101      	bne.n	800515a <setvbuf+0xd2>
 8005156:	68b4      	ldr	r4, [r6, #8]
 8005158:	e7a8      	b.n	80050ac <setvbuf+0x24>
 800515a:	4b21      	ldr	r3, [pc, #132]	; (80051e0 <setvbuf+0x158>)
 800515c:	429c      	cmp	r4, r3
 800515e:	bf08      	it	eq
 8005160:	68f4      	ldreq	r4, [r6, #12]
 8005162:	e7a3      	b.n	80050ac <setvbuf+0x24>
 8005164:	2f00      	cmp	r7, #0
 8005166:	d0d8      	beq.n	800511a <setvbuf+0x92>
 8005168:	69b3      	ldr	r3, [r6, #24]
 800516a:	b913      	cbnz	r3, 8005172 <setvbuf+0xea>
 800516c:	4630      	mov	r0, r6
 800516e:	f001 f82f 	bl	80061d0 <__sinit>
 8005172:	f1b8 0f01 	cmp.w	r8, #1
 8005176:	bf08      	it	eq
 8005178:	89a3      	ldrheq	r3, [r4, #12]
 800517a:	6027      	str	r7, [r4, #0]
 800517c:	bf04      	itt	eq
 800517e:	f043 0301 	orreq.w	r3, r3, #1
 8005182:	81a3      	strheq	r3, [r4, #12]
 8005184:	89a3      	ldrh	r3, [r4, #12]
 8005186:	f013 0008 	ands.w	r0, r3, #8
 800518a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800518e:	d01b      	beq.n	80051c8 <setvbuf+0x140>
 8005190:	f013 0001 	ands.w	r0, r3, #1
 8005194:	bf18      	it	ne
 8005196:	426d      	negne	r5, r5
 8005198:	f04f 0300 	mov.w	r3, #0
 800519c:	bf1d      	ittte	ne
 800519e:	60a3      	strne	r3, [r4, #8]
 80051a0:	61a5      	strne	r5, [r4, #24]
 80051a2:	4618      	movne	r0, r3
 80051a4:	60a5      	streq	r5, [r4, #8]
 80051a6:	e7d0      	b.n	800514a <setvbuf+0xc2>
 80051a8:	4648      	mov	r0, r9
 80051aa:	f001 f90d 	bl	80063c8 <malloc>
 80051ae:	4607      	mov	r7, r0
 80051b0:	2800      	cmp	r0, #0
 80051b2:	d0bc      	beq.n	800512e <setvbuf+0xa6>
 80051b4:	89a3      	ldrh	r3, [r4, #12]
 80051b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ba:	81a3      	strh	r3, [r4, #12]
 80051bc:	464d      	mov	r5, r9
 80051be:	e7d3      	b.n	8005168 <setvbuf+0xe0>
 80051c0:	2000      	movs	r0, #0
 80051c2:	e7b6      	b.n	8005132 <setvbuf+0xaa>
 80051c4:	46a9      	mov	r9, r5
 80051c6:	e7f5      	b.n	80051b4 <setvbuf+0x12c>
 80051c8:	60a0      	str	r0, [r4, #8]
 80051ca:	e7be      	b.n	800514a <setvbuf+0xc2>
 80051cc:	f04f 30ff 	mov.w	r0, #4294967295
 80051d0:	e7bb      	b.n	800514a <setvbuf+0xc2>
 80051d2:	bf00      	nop
 80051d4:	20000010 	.word	0x20000010
 80051d8:	08007014 	.word	0x08007014
 80051dc:	08007034 	.word	0x08007034
 80051e0:	08006ff4 	.word	0x08006ff4

080051e4 <__swbuf_r>:
 80051e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e6:	460e      	mov	r6, r1
 80051e8:	4614      	mov	r4, r2
 80051ea:	4605      	mov	r5, r0
 80051ec:	b118      	cbz	r0, 80051f6 <__swbuf_r+0x12>
 80051ee:	6983      	ldr	r3, [r0, #24]
 80051f0:	b90b      	cbnz	r3, 80051f6 <__swbuf_r+0x12>
 80051f2:	f000 ffed 	bl	80061d0 <__sinit>
 80051f6:	4b21      	ldr	r3, [pc, #132]	; (800527c <__swbuf_r+0x98>)
 80051f8:	429c      	cmp	r4, r3
 80051fa:	d12a      	bne.n	8005252 <__swbuf_r+0x6e>
 80051fc:	686c      	ldr	r4, [r5, #4]
 80051fe:	69a3      	ldr	r3, [r4, #24]
 8005200:	60a3      	str	r3, [r4, #8]
 8005202:	89a3      	ldrh	r3, [r4, #12]
 8005204:	071a      	lsls	r2, r3, #28
 8005206:	d52e      	bpl.n	8005266 <__swbuf_r+0x82>
 8005208:	6923      	ldr	r3, [r4, #16]
 800520a:	b363      	cbz	r3, 8005266 <__swbuf_r+0x82>
 800520c:	6923      	ldr	r3, [r4, #16]
 800520e:	6820      	ldr	r0, [r4, #0]
 8005210:	1ac0      	subs	r0, r0, r3
 8005212:	6963      	ldr	r3, [r4, #20]
 8005214:	b2f6      	uxtb	r6, r6
 8005216:	4283      	cmp	r3, r0
 8005218:	4637      	mov	r7, r6
 800521a:	dc04      	bgt.n	8005226 <__swbuf_r+0x42>
 800521c:	4621      	mov	r1, r4
 800521e:	4628      	mov	r0, r5
 8005220:	f000 ff6c 	bl	80060fc <_fflush_r>
 8005224:	bb28      	cbnz	r0, 8005272 <__swbuf_r+0x8e>
 8005226:	68a3      	ldr	r3, [r4, #8]
 8005228:	3b01      	subs	r3, #1
 800522a:	60a3      	str	r3, [r4, #8]
 800522c:	6823      	ldr	r3, [r4, #0]
 800522e:	1c5a      	adds	r2, r3, #1
 8005230:	6022      	str	r2, [r4, #0]
 8005232:	701e      	strb	r6, [r3, #0]
 8005234:	6963      	ldr	r3, [r4, #20]
 8005236:	3001      	adds	r0, #1
 8005238:	4283      	cmp	r3, r0
 800523a:	d004      	beq.n	8005246 <__swbuf_r+0x62>
 800523c:	89a3      	ldrh	r3, [r4, #12]
 800523e:	07db      	lsls	r3, r3, #31
 8005240:	d519      	bpl.n	8005276 <__swbuf_r+0x92>
 8005242:	2e0a      	cmp	r6, #10
 8005244:	d117      	bne.n	8005276 <__swbuf_r+0x92>
 8005246:	4621      	mov	r1, r4
 8005248:	4628      	mov	r0, r5
 800524a:	f000 ff57 	bl	80060fc <_fflush_r>
 800524e:	b190      	cbz	r0, 8005276 <__swbuf_r+0x92>
 8005250:	e00f      	b.n	8005272 <__swbuf_r+0x8e>
 8005252:	4b0b      	ldr	r3, [pc, #44]	; (8005280 <__swbuf_r+0x9c>)
 8005254:	429c      	cmp	r4, r3
 8005256:	d101      	bne.n	800525c <__swbuf_r+0x78>
 8005258:	68ac      	ldr	r4, [r5, #8]
 800525a:	e7d0      	b.n	80051fe <__swbuf_r+0x1a>
 800525c:	4b09      	ldr	r3, [pc, #36]	; (8005284 <__swbuf_r+0xa0>)
 800525e:	429c      	cmp	r4, r3
 8005260:	bf08      	it	eq
 8005262:	68ec      	ldreq	r4, [r5, #12]
 8005264:	e7cb      	b.n	80051fe <__swbuf_r+0x1a>
 8005266:	4621      	mov	r1, r4
 8005268:	4628      	mov	r0, r5
 800526a:	f000 f80d 	bl	8005288 <__swsetup_r>
 800526e:	2800      	cmp	r0, #0
 8005270:	d0cc      	beq.n	800520c <__swbuf_r+0x28>
 8005272:	f04f 37ff 	mov.w	r7, #4294967295
 8005276:	4638      	mov	r0, r7
 8005278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800527a:	bf00      	nop
 800527c:	08007014 	.word	0x08007014
 8005280:	08007034 	.word	0x08007034
 8005284:	08006ff4 	.word	0x08006ff4

08005288 <__swsetup_r>:
 8005288:	4b32      	ldr	r3, [pc, #200]	; (8005354 <__swsetup_r+0xcc>)
 800528a:	b570      	push	{r4, r5, r6, lr}
 800528c:	681d      	ldr	r5, [r3, #0]
 800528e:	4606      	mov	r6, r0
 8005290:	460c      	mov	r4, r1
 8005292:	b125      	cbz	r5, 800529e <__swsetup_r+0x16>
 8005294:	69ab      	ldr	r3, [r5, #24]
 8005296:	b913      	cbnz	r3, 800529e <__swsetup_r+0x16>
 8005298:	4628      	mov	r0, r5
 800529a:	f000 ff99 	bl	80061d0 <__sinit>
 800529e:	4b2e      	ldr	r3, [pc, #184]	; (8005358 <__swsetup_r+0xd0>)
 80052a0:	429c      	cmp	r4, r3
 80052a2:	d10f      	bne.n	80052c4 <__swsetup_r+0x3c>
 80052a4:	686c      	ldr	r4, [r5, #4]
 80052a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	0715      	lsls	r5, r2, #28
 80052ae:	d42c      	bmi.n	800530a <__swsetup_r+0x82>
 80052b0:	06d0      	lsls	r0, r2, #27
 80052b2:	d411      	bmi.n	80052d8 <__swsetup_r+0x50>
 80052b4:	2209      	movs	r2, #9
 80052b6:	6032      	str	r2, [r6, #0]
 80052b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052bc:	81a3      	strh	r3, [r4, #12]
 80052be:	f04f 30ff 	mov.w	r0, #4294967295
 80052c2:	e03e      	b.n	8005342 <__swsetup_r+0xba>
 80052c4:	4b25      	ldr	r3, [pc, #148]	; (800535c <__swsetup_r+0xd4>)
 80052c6:	429c      	cmp	r4, r3
 80052c8:	d101      	bne.n	80052ce <__swsetup_r+0x46>
 80052ca:	68ac      	ldr	r4, [r5, #8]
 80052cc:	e7eb      	b.n	80052a6 <__swsetup_r+0x1e>
 80052ce:	4b24      	ldr	r3, [pc, #144]	; (8005360 <__swsetup_r+0xd8>)
 80052d0:	429c      	cmp	r4, r3
 80052d2:	bf08      	it	eq
 80052d4:	68ec      	ldreq	r4, [r5, #12]
 80052d6:	e7e6      	b.n	80052a6 <__swsetup_r+0x1e>
 80052d8:	0751      	lsls	r1, r2, #29
 80052da:	d512      	bpl.n	8005302 <__swsetup_r+0x7a>
 80052dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052de:	b141      	cbz	r1, 80052f2 <__swsetup_r+0x6a>
 80052e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052e4:	4299      	cmp	r1, r3
 80052e6:	d002      	beq.n	80052ee <__swsetup_r+0x66>
 80052e8:	4630      	mov	r0, r6
 80052ea:	f001 fb69 	bl	80069c0 <_free_r>
 80052ee:	2300      	movs	r3, #0
 80052f0:	6363      	str	r3, [r4, #52]	; 0x34
 80052f2:	89a3      	ldrh	r3, [r4, #12]
 80052f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80052f8:	81a3      	strh	r3, [r4, #12]
 80052fa:	2300      	movs	r3, #0
 80052fc:	6063      	str	r3, [r4, #4]
 80052fe:	6923      	ldr	r3, [r4, #16]
 8005300:	6023      	str	r3, [r4, #0]
 8005302:	89a3      	ldrh	r3, [r4, #12]
 8005304:	f043 0308 	orr.w	r3, r3, #8
 8005308:	81a3      	strh	r3, [r4, #12]
 800530a:	6923      	ldr	r3, [r4, #16]
 800530c:	b94b      	cbnz	r3, 8005322 <__swsetup_r+0x9a>
 800530e:	89a3      	ldrh	r3, [r4, #12]
 8005310:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005318:	d003      	beq.n	8005322 <__swsetup_r+0x9a>
 800531a:	4621      	mov	r1, r4
 800531c:	4630      	mov	r0, r6
 800531e:	f001 f813 	bl	8006348 <__smakebuf_r>
 8005322:	89a2      	ldrh	r2, [r4, #12]
 8005324:	f012 0301 	ands.w	r3, r2, #1
 8005328:	d00c      	beq.n	8005344 <__swsetup_r+0xbc>
 800532a:	2300      	movs	r3, #0
 800532c:	60a3      	str	r3, [r4, #8]
 800532e:	6963      	ldr	r3, [r4, #20]
 8005330:	425b      	negs	r3, r3
 8005332:	61a3      	str	r3, [r4, #24]
 8005334:	6923      	ldr	r3, [r4, #16]
 8005336:	b953      	cbnz	r3, 800534e <__swsetup_r+0xc6>
 8005338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800533c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005340:	d1ba      	bne.n	80052b8 <__swsetup_r+0x30>
 8005342:	bd70      	pop	{r4, r5, r6, pc}
 8005344:	0792      	lsls	r2, r2, #30
 8005346:	bf58      	it	pl
 8005348:	6963      	ldrpl	r3, [r4, #20]
 800534a:	60a3      	str	r3, [r4, #8]
 800534c:	e7f2      	b.n	8005334 <__swsetup_r+0xac>
 800534e:	2000      	movs	r0, #0
 8005350:	e7f7      	b.n	8005342 <__swsetup_r+0xba>
 8005352:	bf00      	nop
 8005354:	20000010 	.word	0x20000010
 8005358:	08007014 	.word	0x08007014
 800535c:	08007034 	.word	0x08007034
 8005360:	08006ff4 	.word	0x08006ff4

08005364 <quorem>:
 8005364:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005368:	6903      	ldr	r3, [r0, #16]
 800536a:	690c      	ldr	r4, [r1, #16]
 800536c:	42a3      	cmp	r3, r4
 800536e:	4680      	mov	r8, r0
 8005370:	f2c0 8082 	blt.w	8005478 <quorem+0x114>
 8005374:	3c01      	subs	r4, #1
 8005376:	f101 0714 	add.w	r7, r1, #20
 800537a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800537e:	f100 0614 	add.w	r6, r0, #20
 8005382:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005386:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800538a:	eb06 030c 	add.w	r3, r6, ip
 800538e:	3501      	adds	r5, #1
 8005390:	eb07 090c 	add.w	r9, r7, ip
 8005394:	9301      	str	r3, [sp, #4]
 8005396:	fbb0 f5f5 	udiv	r5, r0, r5
 800539a:	b395      	cbz	r5, 8005402 <quorem+0x9e>
 800539c:	f04f 0a00 	mov.w	sl, #0
 80053a0:	4638      	mov	r0, r7
 80053a2:	46b6      	mov	lr, r6
 80053a4:	46d3      	mov	fp, sl
 80053a6:	f850 2b04 	ldr.w	r2, [r0], #4
 80053aa:	b293      	uxth	r3, r2
 80053ac:	fb05 a303 	mla	r3, r5, r3, sl
 80053b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	ebab 0303 	sub.w	r3, fp, r3
 80053ba:	0c12      	lsrs	r2, r2, #16
 80053bc:	f8de b000 	ldr.w	fp, [lr]
 80053c0:	fb05 a202 	mla	r2, r5, r2, sl
 80053c4:	fa13 f38b 	uxtah	r3, r3, fp
 80053c8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80053cc:	fa1f fb82 	uxth.w	fp, r2
 80053d0:	f8de 2000 	ldr.w	r2, [lr]
 80053d4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80053d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053dc:	b29b      	uxth	r3, r3
 80053de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053e2:	4581      	cmp	r9, r0
 80053e4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80053e8:	f84e 3b04 	str.w	r3, [lr], #4
 80053ec:	d2db      	bcs.n	80053a6 <quorem+0x42>
 80053ee:	f856 300c 	ldr.w	r3, [r6, ip]
 80053f2:	b933      	cbnz	r3, 8005402 <quorem+0x9e>
 80053f4:	9b01      	ldr	r3, [sp, #4]
 80053f6:	3b04      	subs	r3, #4
 80053f8:	429e      	cmp	r6, r3
 80053fa:	461a      	mov	r2, r3
 80053fc:	d330      	bcc.n	8005460 <quorem+0xfc>
 80053fe:	f8c8 4010 	str.w	r4, [r8, #16]
 8005402:	4640      	mov	r0, r8
 8005404:	f001 fa08 	bl	8006818 <__mcmp>
 8005408:	2800      	cmp	r0, #0
 800540a:	db25      	blt.n	8005458 <quorem+0xf4>
 800540c:	3501      	adds	r5, #1
 800540e:	4630      	mov	r0, r6
 8005410:	f04f 0c00 	mov.w	ip, #0
 8005414:	f857 2b04 	ldr.w	r2, [r7], #4
 8005418:	f8d0 e000 	ldr.w	lr, [r0]
 800541c:	b293      	uxth	r3, r2
 800541e:	ebac 0303 	sub.w	r3, ip, r3
 8005422:	0c12      	lsrs	r2, r2, #16
 8005424:	fa13 f38e 	uxtah	r3, r3, lr
 8005428:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800542c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005430:	b29b      	uxth	r3, r3
 8005432:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005436:	45b9      	cmp	r9, r7
 8005438:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800543c:	f840 3b04 	str.w	r3, [r0], #4
 8005440:	d2e8      	bcs.n	8005414 <quorem+0xb0>
 8005442:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005446:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800544a:	b92a      	cbnz	r2, 8005458 <quorem+0xf4>
 800544c:	3b04      	subs	r3, #4
 800544e:	429e      	cmp	r6, r3
 8005450:	461a      	mov	r2, r3
 8005452:	d30b      	bcc.n	800546c <quorem+0x108>
 8005454:	f8c8 4010 	str.w	r4, [r8, #16]
 8005458:	4628      	mov	r0, r5
 800545a:	b003      	add	sp, #12
 800545c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005460:	6812      	ldr	r2, [r2, #0]
 8005462:	3b04      	subs	r3, #4
 8005464:	2a00      	cmp	r2, #0
 8005466:	d1ca      	bne.n	80053fe <quorem+0x9a>
 8005468:	3c01      	subs	r4, #1
 800546a:	e7c5      	b.n	80053f8 <quorem+0x94>
 800546c:	6812      	ldr	r2, [r2, #0]
 800546e:	3b04      	subs	r3, #4
 8005470:	2a00      	cmp	r2, #0
 8005472:	d1ef      	bne.n	8005454 <quorem+0xf0>
 8005474:	3c01      	subs	r4, #1
 8005476:	e7ea      	b.n	800544e <quorem+0xea>
 8005478:	2000      	movs	r0, #0
 800547a:	e7ee      	b.n	800545a <quorem+0xf6>
 800547c:	0000      	movs	r0, r0
	...

08005480 <_dtoa_r>:
 8005480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005484:	ec57 6b10 	vmov	r6, r7, d0
 8005488:	b097      	sub	sp, #92	; 0x5c
 800548a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800548c:	9106      	str	r1, [sp, #24]
 800548e:	4604      	mov	r4, r0
 8005490:	920b      	str	r2, [sp, #44]	; 0x2c
 8005492:	9312      	str	r3, [sp, #72]	; 0x48
 8005494:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005498:	e9cd 6700 	strd	r6, r7, [sp]
 800549c:	b93d      	cbnz	r5, 80054ae <_dtoa_r+0x2e>
 800549e:	2010      	movs	r0, #16
 80054a0:	f000 ff92 	bl	80063c8 <malloc>
 80054a4:	6260      	str	r0, [r4, #36]	; 0x24
 80054a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80054aa:	6005      	str	r5, [r0, #0]
 80054ac:	60c5      	str	r5, [r0, #12]
 80054ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054b0:	6819      	ldr	r1, [r3, #0]
 80054b2:	b151      	cbz	r1, 80054ca <_dtoa_r+0x4a>
 80054b4:	685a      	ldr	r2, [r3, #4]
 80054b6:	604a      	str	r2, [r1, #4]
 80054b8:	2301      	movs	r3, #1
 80054ba:	4093      	lsls	r3, r2
 80054bc:	608b      	str	r3, [r1, #8]
 80054be:	4620      	mov	r0, r4
 80054c0:	f000 ffc9 	bl	8006456 <_Bfree>
 80054c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054c6:	2200      	movs	r2, #0
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	1e3b      	subs	r3, r7, #0
 80054cc:	bfbb      	ittet	lt
 80054ce:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80054d2:	9301      	strlt	r3, [sp, #4]
 80054d4:	2300      	movge	r3, #0
 80054d6:	2201      	movlt	r2, #1
 80054d8:	bfac      	ite	ge
 80054da:	f8c8 3000 	strge.w	r3, [r8]
 80054de:	f8c8 2000 	strlt.w	r2, [r8]
 80054e2:	4baf      	ldr	r3, [pc, #700]	; (80057a0 <_dtoa_r+0x320>)
 80054e4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80054e8:	ea33 0308 	bics.w	r3, r3, r8
 80054ec:	d114      	bne.n	8005518 <_dtoa_r+0x98>
 80054ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80054f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	9b00      	ldr	r3, [sp, #0]
 80054f8:	b923      	cbnz	r3, 8005504 <_dtoa_r+0x84>
 80054fa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80054fe:	2800      	cmp	r0, #0
 8005500:	f000 8542 	beq.w	8005f88 <_dtoa_r+0xb08>
 8005504:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005506:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80057b4 <_dtoa_r+0x334>
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 8544 	beq.w	8005f98 <_dtoa_r+0xb18>
 8005510:	f10b 0303 	add.w	r3, fp, #3
 8005514:	f000 bd3e 	b.w	8005f94 <_dtoa_r+0xb14>
 8005518:	e9dd 6700 	ldrd	r6, r7, [sp]
 800551c:	2200      	movs	r2, #0
 800551e:	2300      	movs	r3, #0
 8005520:	4630      	mov	r0, r6
 8005522:	4639      	mov	r1, r7
 8005524:	f7fb fae0 	bl	8000ae8 <__aeabi_dcmpeq>
 8005528:	4681      	mov	r9, r0
 800552a:	b168      	cbz	r0, 8005548 <_dtoa_r+0xc8>
 800552c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800552e:	2301      	movs	r3, #1
 8005530:	6013      	str	r3, [r2, #0]
 8005532:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005534:	2b00      	cmp	r3, #0
 8005536:	f000 8524 	beq.w	8005f82 <_dtoa_r+0xb02>
 800553a:	4b9a      	ldr	r3, [pc, #616]	; (80057a4 <_dtoa_r+0x324>)
 800553c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800553e:	f103 3bff 	add.w	fp, r3, #4294967295
 8005542:	6013      	str	r3, [r2, #0]
 8005544:	f000 bd28 	b.w	8005f98 <_dtoa_r+0xb18>
 8005548:	aa14      	add	r2, sp, #80	; 0x50
 800554a:	a915      	add	r1, sp, #84	; 0x54
 800554c:	ec47 6b10 	vmov	d0, r6, r7
 8005550:	4620      	mov	r0, r4
 8005552:	f001 f9d8 	bl	8006906 <__d2b>
 8005556:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800555a:	9004      	str	r0, [sp, #16]
 800555c:	2d00      	cmp	r5, #0
 800555e:	d07c      	beq.n	800565a <_dtoa_r+0x1da>
 8005560:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005564:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005568:	46b2      	mov	sl, r6
 800556a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800556e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005572:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005576:	2200      	movs	r2, #0
 8005578:	4b8b      	ldr	r3, [pc, #556]	; (80057a8 <_dtoa_r+0x328>)
 800557a:	4650      	mov	r0, sl
 800557c:	4659      	mov	r1, fp
 800557e:	f7fa fe93 	bl	80002a8 <__aeabi_dsub>
 8005582:	a381      	add	r3, pc, #516	; (adr r3, 8005788 <_dtoa_r+0x308>)
 8005584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005588:	f7fb f846 	bl	8000618 <__aeabi_dmul>
 800558c:	a380      	add	r3, pc, #512	; (adr r3, 8005790 <_dtoa_r+0x310>)
 800558e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005592:	f7fa fe8b 	bl	80002ac <__adddf3>
 8005596:	4606      	mov	r6, r0
 8005598:	4628      	mov	r0, r5
 800559a:	460f      	mov	r7, r1
 800559c:	f7fa ffd2 	bl	8000544 <__aeabi_i2d>
 80055a0:	a37d      	add	r3, pc, #500	; (adr r3, 8005798 <_dtoa_r+0x318>)
 80055a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a6:	f7fb f837 	bl	8000618 <__aeabi_dmul>
 80055aa:	4602      	mov	r2, r0
 80055ac:	460b      	mov	r3, r1
 80055ae:	4630      	mov	r0, r6
 80055b0:	4639      	mov	r1, r7
 80055b2:	f7fa fe7b 	bl	80002ac <__adddf3>
 80055b6:	4606      	mov	r6, r0
 80055b8:	460f      	mov	r7, r1
 80055ba:	f7fb fadd 	bl	8000b78 <__aeabi_d2iz>
 80055be:	2200      	movs	r2, #0
 80055c0:	4682      	mov	sl, r0
 80055c2:	2300      	movs	r3, #0
 80055c4:	4630      	mov	r0, r6
 80055c6:	4639      	mov	r1, r7
 80055c8:	f7fb fa98 	bl	8000afc <__aeabi_dcmplt>
 80055cc:	b148      	cbz	r0, 80055e2 <_dtoa_r+0x162>
 80055ce:	4650      	mov	r0, sl
 80055d0:	f7fa ffb8 	bl	8000544 <__aeabi_i2d>
 80055d4:	4632      	mov	r2, r6
 80055d6:	463b      	mov	r3, r7
 80055d8:	f7fb fa86 	bl	8000ae8 <__aeabi_dcmpeq>
 80055dc:	b908      	cbnz	r0, 80055e2 <_dtoa_r+0x162>
 80055de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055e2:	f1ba 0f16 	cmp.w	sl, #22
 80055e6:	d859      	bhi.n	800569c <_dtoa_r+0x21c>
 80055e8:	4970      	ldr	r1, [pc, #448]	; (80057ac <_dtoa_r+0x32c>)
 80055ea:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80055ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80055f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055f6:	f7fb fa9f 	bl	8000b38 <__aeabi_dcmpgt>
 80055fa:	2800      	cmp	r0, #0
 80055fc:	d050      	beq.n	80056a0 <_dtoa_r+0x220>
 80055fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005602:	2300      	movs	r3, #0
 8005604:	930f      	str	r3, [sp, #60]	; 0x3c
 8005606:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005608:	1b5d      	subs	r5, r3, r5
 800560a:	f1b5 0801 	subs.w	r8, r5, #1
 800560e:	bf49      	itett	mi
 8005610:	f1c5 0301 	rsbmi	r3, r5, #1
 8005614:	2300      	movpl	r3, #0
 8005616:	9305      	strmi	r3, [sp, #20]
 8005618:	f04f 0800 	movmi.w	r8, #0
 800561c:	bf58      	it	pl
 800561e:	9305      	strpl	r3, [sp, #20]
 8005620:	f1ba 0f00 	cmp.w	sl, #0
 8005624:	db3e      	blt.n	80056a4 <_dtoa_r+0x224>
 8005626:	2300      	movs	r3, #0
 8005628:	44d0      	add	r8, sl
 800562a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800562e:	9307      	str	r3, [sp, #28]
 8005630:	9b06      	ldr	r3, [sp, #24]
 8005632:	2b09      	cmp	r3, #9
 8005634:	f200 8090 	bhi.w	8005758 <_dtoa_r+0x2d8>
 8005638:	2b05      	cmp	r3, #5
 800563a:	bfc4      	itt	gt
 800563c:	3b04      	subgt	r3, #4
 800563e:	9306      	strgt	r3, [sp, #24]
 8005640:	9b06      	ldr	r3, [sp, #24]
 8005642:	f1a3 0302 	sub.w	r3, r3, #2
 8005646:	bfcc      	ite	gt
 8005648:	2500      	movgt	r5, #0
 800564a:	2501      	movle	r5, #1
 800564c:	2b03      	cmp	r3, #3
 800564e:	f200 808f 	bhi.w	8005770 <_dtoa_r+0x2f0>
 8005652:	e8df f003 	tbb	[pc, r3]
 8005656:	7f7d      	.short	0x7f7d
 8005658:	7131      	.short	0x7131
 800565a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800565e:	441d      	add	r5, r3
 8005660:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005664:	2820      	cmp	r0, #32
 8005666:	dd13      	ble.n	8005690 <_dtoa_r+0x210>
 8005668:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800566c:	9b00      	ldr	r3, [sp, #0]
 800566e:	fa08 f800 	lsl.w	r8, r8, r0
 8005672:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005676:	fa23 f000 	lsr.w	r0, r3, r0
 800567a:	ea48 0000 	orr.w	r0, r8, r0
 800567e:	f7fa ff51 	bl	8000524 <__aeabi_ui2d>
 8005682:	2301      	movs	r3, #1
 8005684:	4682      	mov	sl, r0
 8005686:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800568a:	3d01      	subs	r5, #1
 800568c:	9313      	str	r3, [sp, #76]	; 0x4c
 800568e:	e772      	b.n	8005576 <_dtoa_r+0xf6>
 8005690:	9b00      	ldr	r3, [sp, #0]
 8005692:	f1c0 0020 	rsb	r0, r0, #32
 8005696:	fa03 f000 	lsl.w	r0, r3, r0
 800569a:	e7f0      	b.n	800567e <_dtoa_r+0x1fe>
 800569c:	2301      	movs	r3, #1
 800569e:	e7b1      	b.n	8005604 <_dtoa_r+0x184>
 80056a0:	900f      	str	r0, [sp, #60]	; 0x3c
 80056a2:	e7b0      	b.n	8005606 <_dtoa_r+0x186>
 80056a4:	9b05      	ldr	r3, [sp, #20]
 80056a6:	eba3 030a 	sub.w	r3, r3, sl
 80056aa:	9305      	str	r3, [sp, #20]
 80056ac:	f1ca 0300 	rsb	r3, sl, #0
 80056b0:	9307      	str	r3, [sp, #28]
 80056b2:	2300      	movs	r3, #0
 80056b4:	930e      	str	r3, [sp, #56]	; 0x38
 80056b6:	e7bb      	b.n	8005630 <_dtoa_r+0x1b0>
 80056b8:	2301      	movs	r3, #1
 80056ba:	930a      	str	r3, [sp, #40]	; 0x28
 80056bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056be:	2b00      	cmp	r3, #0
 80056c0:	dd59      	ble.n	8005776 <_dtoa_r+0x2f6>
 80056c2:	9302      	str	r3, [sp, #8]
 80056c4:	4699      	mov	r9, r3
 80056c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80056c8:	2200      	movs	r2, #0
 80056ca:	6072      	str	r2, [r6, #4]
 80056cc:	2204      	movs	r2, #4
 80056ce:	f102 0014 	add.w	r0, r2, #20
 80056d2:	4298      	cmp	r0, r3
 80056d4:	6871      	ldr	r1, [r6, #4]
 80056d6:	d953      	bls.n	8005780 <_dtoa_r+0x300>
 80056d8:	4620      	mov	r0, r4
 80056da:	f000 fe88 	bl	80063ee <_Balloc>
 80056de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056e0:	6030      	str	r0, [r6, #0]
 80056e2:	f1b9 0f0e 	cmp.w	r9, #14
 80056e6:	f8d3 b000 	ldr.w	fp, [r3]
 80056ea:	f200 80e6 	bhi.w	80058ba <_dtoa_r+0x43a>
 80056ee:	2d00      	cmp	r5, #0
 80056f0:	f000 80e3 	beq.w	80058ba <_dtoa_r+0x43a>
 80056f4:	ed9d 7b00 	vldr	d7, [sp]
 80056f8:	f1ba 0f00 	cmp.w	sl, #0
 80056fc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005700:	dd74      	ble.n	80057ec <_dtoa_r+0x36c>
 8005702:	4a2a      	ldr	r2, [pc, #168]	; (80057ac <_dtoa_r+0x32c>)
 8005704:	f00a 030f 	and.w	r3, sl, #15
 8005708:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800570c:	ed93 7b00 	vldr	d7, [r3]
 8005710:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005714:	06f0      	lsls	r0, r6, #27
 8005716:	ed8d 7b08 	vstr	d7, [sp, #32]
 800571a:	d565      	bpl.n	80057e8 <_dtoa_r+0x368>
 800571c:	4b24      	ldr	r3, [pc, #144]	; (80057b0 <_dtoa_r+0x330>)
 800571e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005722:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005726:	f7fb f8a1 	bl	800086c <__aeabi_ddiv>
 800572a:	e9cd 0100 	strd	r0, r1, [sp]
 800572e:	f006 060f 	and.w	r6, r6, #15
 8005732:	2503      	movs	r5, #3
 8005734:	4f1e      	ldr	r7, [pc, #120]	; (80057b0 <_dtoa_r+0x330>)
 8005736:	e04c      	b.n	80057d2 <_dtoa_r+0x352>
 8005738:	2301      	movs	r3, #1
 800573a:	930a      	str	r3, [sp, #40]	; 0x28
 800573c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800573e:	4453      	add	r3, sl
 8005740:	f103 0901 	add.w	r9, r3, #1
 8005744:	9302      	str	r3, [sp, #8]
 8005746:	464b      	mov	r3, r9
 8005748:	2b01      	cmp	r3, #1
 800574a:	bfb8      	it	lt
 800574c:	2301      	movlt	r3, #1
 800574e:	e7ba      	b.n	80056c6 <_dtoa_r+0x246>
 8005750:	2300      	movs	r3, #0
 8005752:	e7b2      	b.n	80056ba <_dtoa_r+0x23a>
 8005754:	2300      	movs	r3, #0
 8005756:	e7f0      	b.n	800573a <_dtoa_r+0x2ba>
 8005758:	2501      	movs	r5, #1
 800575a:	2300      	movs	r3, #0
 800575c:	9306      	str	r3, [sp, #24]
 800575e:	950a      	str	r5, [sp, #40]	; 0x28
 8005760:	f04f 33ff 	mov.w	r3, #4294967295
 8005764:	9302      	str	r3, [sp, #8]
 8005766:	4699      	mov	r9, r3
 8005768:	2200      	movs	r2, #0
 800576a:	2312      	movs	r3, #18
 800576c:	920b      	str	r2, [sp, #44]	; 0x2c
 800576e:	e7aa      	b.n	80056c6 <_dtoa_r+0x246>
 8005770:	2301      	movs	r3, #1
 8005772:	930a      	str	r3, [sp, #40]	; 0x28
 8005774:	e7f4      	b.n	8005760 <_dtoa_r+0x2e0>
 8005776:	2301      	movs	r3, #1
 8005778:	9302      	str	r3, [sp, #8]
 800577a:	4699      	mov	r9, r3
 800577c:	461a      	mov	r2, r3
 800577e:	e7f5      	b.n	800576c <_dtoa_r+0x2ec>
 8005780:	3101      	adds	r1, #1
 8005782:	6071      	str	r1, [r6, #4]
 8005784:	0052      	lsls	r2, r2, #1
 8005786:	e7a2      	b.n	80056ce <_dtoa_r+0x24e>
 8005788:	636f4361 	.word	0x636f4361
 800578c:	3fd287a7 	.word	0x3fd287a7
 8005790:	8b60c8b3 	.word	0x8b60c8b3
 8005794:	3fc68a28 	.word	0x3fc68a28
 8005798:	509f79fb 	.word	0x509f79fb
 800579c:	3fd34413 	.word	0x3fd34413
 80057a0:	7ff00000 	.word	0x7ff00000
 80057a4:	08006fc1 	.word	0x08006fc1
 80057a8:	3ff80000 	.word	0x3ff80000
 80057ac:	08007080 	.word	0x08007080
 80057b0:	08007058 	.word	0x08007058
 80057b4:	08006fed 	.word	0x08006fed
 80057b8:	07f1      	lsls	r1, r6, #31
 80057ba:	d508      	bpl.n	80057ce <_dtoa_r+0x34e>
 80057bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80057c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057c4:	f7fa ff28 	bl	8000618 <__aeabi_dmul>
 80057c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80057cc:	3501      	adds	r5, #1
 80057ce:	1076      	asrs	r6, r6, #1
 80057d0:	3708      	adds	r7, #8
 80057d2:	2e00      	cmp	r6, #0
 80057d4:	d1f0      	bne.n	80057b8 <_dtoa_r+0x338>
 80057d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80057da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057de:	f7fb f845 	bl	800086c <__aeabi_ddiv>
 80057e2:	e9cd 0100 	strd	r0, r1, [sp]
 80057e6:	e01a      	b.n	800581e <_dtoa_r+0x39e>
 80057e8:	2502      	movs	r5, #2
 80057ea:	e7a3      	b.n	8005734 <_dtoa_r+0x2b4>
 80057ec:	f000 80a0 	beq.w	8005930 <_dtoa_r+0x4b0>
 80057f0:	f1ca 0600 	rsb	r6, sl, #0
 80057f4:	4b9f      	ldr	r3, [pc, #636]	; (8005a74 <_dtoa_r+0x5f4>)
 80057f6:	4fa0      	ldr	r7, [pc, #640]	; (8005a78 <_dtoa_r+0x5f8>)
 80057f8:	f006 020f 	and.w	r2, r6, #15
 80057fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005804:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005808:	f7fa ff06 	bl	8000618 <__aeabi_dmul>
 800580c:	e9cd 0100 	strd	r0, r1, [sp]
 8005810:	1136      	asrs	r6, r6, #4
 8005812:	2300      	movs	r3, #0
 8005814:	2502      	movs	r5, #2
 8005816:	2e00      	cmp	r6, #0
 8005818:	d17f      	bne.n	800591a <_dtoa_r+0x49a>
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1e1      	bne.n	80057e2 <_dtoa_r+0x362>
 800581e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 8087 	beq.w	8005934 <_dtoa_r+0x4b4>
 8005826:	e9dd 6700 	ldrd	r6, r7, [sp]
 800582a:	2200      	movs	r2, #0
 800582c:	4b93      	ldr	r3, [pc, #588]	; (8005a7c <_dtoa_r+0x5fc>)
 800582e:	4630      	mov	r0, r6
 8005830:	4639      	mov	r1, r7
 8005832:	f7fb f963 	bl	8000afc <__aeabi_dcmplt>
 8005836:	2800      	cmp	r0, #0
 8005838:	d07c      	beq.n	8005934 <_dtoa_r+0x4b4>
 800583a:	f1b9 0f00 	cmp.w	r9, #0
 800583e:	d079      	beq.n	8005934 <_dtoa_r+0x4b4>
 8005840:	9b02      	ldr	r3, [sp, #8]
 8005842:	2b00      	cmp	r3, #0
 8005844:	dd35      	ble.n	80058b2 <_dtoa_r+0x432>
 8005846:	f10a 33ff 	add.w	r3, sl, #4294967295
 800584a:	9308      	str	r3, [sp, #32]
 800584c:	4639      	mov	r1, r7
 800584e:	2200      	movs	r2, #0
 8005850:	4b8b      	ldr	r3, [pc, #556]	; (8005a80 <_dtoa_r+0x600>)
 8005852:	4630      	mov	r0, r6
 8005854:	f7fa fee0 	bl	8000618 <__aeabi_dmul>
 8005858:	e9cd 0100 	strd	r0, r1, [sp]
 800585c:	9f02      	ldr	r7, [sp, #8]
 800585e:	3501      	adds	r5, #1
 8005860:	4628      	mov	r0, r5
 8005862:	f7fa fe6f 	bl	8000544 <__aeabi_i2d>
 8005866:	e9dd 2300 	ldrd	r2, r3, [sp]
 800586a:	f7fa fed5 	bl	8000618 <__aeabi_dmul>
 800586e:	2200      	movs	r2, #0
 8005870:	4b84      	ldr	r3, [pc, #528]	; (8005a84 <_dtoa_r+0x604>)
 8005872:	f7fa fd1b 	bl	80002ac <__adddf3>
 8005876:	4605      	mov	r5, r0
 8005878:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800587c:	2f00      	cmp	r7, #0
 800587e:	d15d      	bne.n	800593c <_dtoa_r+0x4bc>
 8005880:	2200      	movs	r2, #0
 8005882:	4b81      	ldr	r3, [pc, #516]	; (8005a88 <_dtoa_r+0x608>)
 8005884:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005888:	f7fa fd0e 	bl	80002a8 <__aeabi_dsub>
 800588c:	462a      	mov	r2, r5
 800588e:	4633      	mov	r3, r6
 8005890:	e9cd 0100 	strd	r0, r1, [sp]
 8005894:	f7fb f950 	bl	8000b38 <__aeabi_dcmpgt>
 8005898:	2800      	cmp	r0, #0
 800589a:	f040 8288 	bne.w	8005dae <_dtoa_r+0x92e>
 800589e:	462a      	mov	r2, r5
 80058a0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80058a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058a8:	f7fb f928 	bl	8000afc <__aeabi_dcmplt>
 80058ac:	2800      	cmp	r0, #0
 80058ae:	f040 827c 	bne.w	8005daa <_dtoa_r+0x92a>
 80058b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80058b6:	e9cd 2300 	strd	r2, r3, [sp]
 80058ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f2c0 8150 	blt.w	8005b62 <_dtoa_r+0x6e2>
 80058c2:	f1ba 0f0e 	cmp.w	sl, #14
 80058c6:	f300 814c 	bgt.w	8005b62 <_dtoa_r+0x6e2>
 80058ca:	4b6a      	ldr	r3, [pc, #424]	; (8005a74 <_dtoa_r+0x5f4>)
 80058cc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80058d0:	ed93 7b00 	vldr	d7, [r3]
 80058d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80058dc:	f280 80d8 	bge.w	8005a90 <_dtoa_r+0x610>
 80058e0:	f1b9 0f00 	cmp.w	r9, #0
 80058e4:	f300 80d4 	bgt.w	8005a90 <_dtoa_r+0x610>
 80058e8:	f040 825e 	bne.w	8005da8 <_dtoa_r+0x928>
 80058ec:	2200      	movs	r2, #0
 80058ee:	4b66      	ldr	r3, [pc, #408]	; (8005a88 <_dtoa_r+0x608>)
 80058f0:	ec51 0b17 	vmov	r0, r1, d7
 80058f4:	f7fa fe90 	bl	8000618 <__aeabi_dmul>
 80058f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058fc:	f7fb f912 	bl	8000b24 <__aeabi_dcmpge>
 8005900:	464f      	mov	r7, r9
 8005902:	464e      	mov	r6, r9
 8005904:	2800      	cmp	r0, #0
 8005906:	f040 8234 	bne.w	8005d72 <_dtoa_r+0x8f2>
 800590a:	2331      	movs	r3, #49	; 0x31
 800590c:	f10b 0501 	add.w	r5, fp, #1
 8005910:	f88b 3000 	strb.w	r3, [fp]
 8005914:	f10a 0a01 	add.w	sl, sl, #1
 8005918:	e22f      	b.n	8005d7a <_dtoa_r+0x8fa>
 800591a:	07f2      	lsls	r2, r6, #31
 800591c:	d505      	bpl.n	800592a <_dtoa_r+0x4aa>
 800591e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005922:	f7fa fe79 	bl	8000618 <__aeabi_dmul>
 8005926:	3501      	adds	r5, #1
 8005928:	2301      	movs	r3, #1
 800592a:	1076      	asrs	r6, r6, #1
 800592c:	3708      	adds	r7, #8
 800592e:	e772      	b.n	8005816 <_dtoa_r+0x396>
 8005930:	2502      	movs	r5, #2
 8005932:	e774      	b.n	800581e <_dtoa_r+0x39e>
 8005934:	f8cd a020 	str.w	sl, [sp, #32]
 8005938:	464f      	mov	r7, r9
 800593a:	e791      	b.n	8005860 <_dtoa_r+0x3e0>
 800593c:	4b4d      	ldr	r3, [pc, #308]	; (8005a74 <_dtoa_r+0x5f4>)
 800593e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005942:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005948:	2b00      	cmp	r3, #0
 800594a:	d047      	beq.n	80059dc <_dtoa_r+0x55c>
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	2000      	movs	r0, #0
 8005952:	494e      	ldr	r1, [pc, #312]	; (8005a8c <_dtoa_r+0x60c>)
 8005954:	f7fa ff8a 	bl	800086c <__aeabi_ddiv>
 8005958:	462a      	mov	r2, r5
 800595a:	4633      	mov	r3, r6
 800595c:	f7fa fca4 	bl	80002a8 <__aeabi_dsub>
 8005960:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005964:	465d      	mov	r5, fp
 8005966:	e9dd 0100 	ldrd	r0, r1, [sp]
 800596a:	f7fb f905 	bl	8000b78 <__aeabi_d2iz>
 800596e:	4606      	mov	r6, r0
 8005970:	f7fa fde8 	bl	8000544 <__aeabi_i2d>
 8005974:	4602      	mov	r2, r0
 8005976:	460b      	mov	r3, r1
 8005978:	e9dd 0100 	ldrd	r0, r1, [sp]
 800597c:	f7fa fc94 	bl	80002a8 <__aeabi_dsub>
 8005980:	3630      	adds	r6, #48	; 0x30
 8005982:	f805 6b01 	strb.w	r6, [r5], #1
 8005986:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800598a:	e9cd 0100 	strd	r0, r1, [sp]
 800598e:	f7fb f8b5 	bl	8000afc <__aeabi_dcmplt>
 8005992:	2800      	cmp	r0, #0
 8005994:	d163      	bne.n	8005a5e <_dtoa_r+0x5de>
 8005996:	e9dd 2300 	ldrd	r2, r3, [sp]
 800599a:	2000      	movs	r0, #0
 800599c:	4937      	ldr	r1, [pc, #220]	; (8005a7c <_dtoa_r+0x5fc>)
 800599e:	f7fa fc83 	bl	80002a8 <__aeabi_dsub>
 80059a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80059a6:	f7fb f8a9 	bl	8000afc <__aeabi_dcmplt>
 80059aa:	2800      	cmp	r0, #0
 80059ac:	f040 80b7 	bne.w	8005b1e <_dtoa_r+0x69e>
 80059b0:	eba5 030b 	sub.w	r3, r5, fp
 80059b4:	429f      	cmp	r7, r3
 80059b6:	f77f af7c 	ble.w	80058b2 <_dtoa_r+0x432>
 80059ba:	2200      	movs	r2, #0
 80059bc:	4b30      	ldr	r3, [pc, #192]	; (8005a80 <_dtoa_r+0x600>)
 80059be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80059c2:	f7fa fe29 	bl	8000618 <__aeabi_dmul>
 80059c6:	2200      	movs	r2, #0
 80059c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80059cc:	4b2c      	ldr	r3, [pc, #176]	; (8005a80 <_dtoa_r+0x600>)
 80059ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059d2:	f7fa fe21 	bl	8000618 <__aeabi_dmul>
 80059d6:	e9cd 0100 	strd	r0, r1, [sp]
 80059da:	e7c4      	b.n	8005966 <_dtoa_r+0x4e6>
 80059dc:	462a      	mov	r2, r5
 80059de:	4633      	mov	r3, r6
 80059e0:	f7fa fe1a 	bl	8000618 <__aeabi_dmul>
 80059e4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80059e8:	eb0b 0507 	add.w	r5, fp, r7
 80059ec:	465e      	mov	r6, fp
 80059ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059f2:	f7fb f8c1 	bl	8000b78 <__aeabi_d2iz>
 80059f6:	4607      	mov	r7, r0
 80059f8:	f7fa fda4 	bl	8000544 <__aeabi_i2d>
 80059fc:	3730      	adds	r7, #48	; 0x30
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a06:	f7fa fc4f 	bl	80002a8 <__aeabi_dsub>
 8005a0a:	f806 7b01 	strb.w	r7, [r6], #1
 8005a0e:	42ae      	cmp	r6, r5
 8005a10:	e9cd 0100 	strd	r0, r1, [sp]
 8005a14:	f04f 0200 	mov.w	r2, #0
 8005a18:	d126      	bne.n	8005a68 <_dtoa_r+0x5e8>
 8005a1a:	4b1c      	ldr	r3, [pc, #112]	; (8005a8c <_dtoa_r+0x60c>)
 8005a1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a20:	f7fa fc44 	bl	80002ac <__adddf3>
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a2c:	f7fb f884 	bl	8000b38 <__aeabi_dcmpgt>
 8005a30:	2800      	cmp	r0, #0
 8005a32:	d174      	bne.n	8005b1e <_dtoa_r+0x69e>
 8005a34:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005a38:	2000      	movs	r0, #0
 8005a3a:	4914      	ldr	r1, [pc, #80]	; (8005a8c <_dtoa_r+0x60c>)
 8005a3c:	f7fa fc34 	bl	80002a8 <__aeabi_dsub>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a48:	f7fb f858 	bl	8000afc <__aeabi_dcmplt>
 8005a4c:	2800      	cmp	r0, #0
 8005a4e:	f43f af30 	beq.w	80058b2 <_dtoa_r+0x432>
 8005a52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005a56:	2b30      	cmp	r3, #48	; 0x30
 8005a58:	f105 32ff 	add.w	r2, r5, #4294967295
 8005a5c:	d002      	beq.n	8005a64 <_dtoa_r+0x5e4>
 8005a5e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005a62:	e04a      	b.n	8005afa <_dtoa_r+0x67a>
 8005a64:	4615      	mov	r5, r2
 8005a66:	e7f4      	b.n	8005a52 <_dtoa_r+0x5d2>
 8005a68:	4b05      	ldr	r3, [pc, #20]	; (8005a80 <_dtoa_r+0x600>)
 8005a6a:	f7fa fdd5 	bl	8000618 <__aeabi_dmul>
 8005a6e:	e9cd 0100 	strd	r0, r1, [sp]
 8005a72:	e7bc      	b.n	80059ee <_dtoa_r+0x56e>
 8005a74:	08007080 	.word	0x08007080
 8005a78:	08007058 	.word	0x08007058
 8005a7c:	3ff00000 	.word	0x3ff00000
 8005a80:	40240000 	.word	0x40240000
 8005a84:	401c0000 	.word	0x401c0000
 8005a88:	40140000 	.word	0x40140000
 8005a8c:	3fe00000 	.word	0x3fe00000
 8005a90:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005a94:	465d      	mov	r5, fp
 8005a96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a9a:	4630      	mov	r0, r6
 8005a9c:	4639      	mov	r1, r7
 8005a9e:	f7fa fee5 	bl	800086c <__aeabi_ddiv>
 8005aa2:	f7fb f869 	bl	8000b78 <__aeabi_d2iz>
 8005aa6:	4680      	mov	r8, r0
 8005aa8:	f7fa fd4c 	bl	8000544 <__aeabi_i2d>
 8005aac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ab0:	f7fa fdb2 	bl	8000618 <__aeabi_dmul>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	4630      	mov	r0, r6
 8005aba:	4639      	mov	r1, r7
 8005abc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005ac0:	f7fa fbf2 	bl	80002a8 <__aeabi_dsub>
 8005ac4:	f805 6b01 	strb.w	r6, [r5], #1
 8005ac8:	eba5 060b 	sub.w	r6, r5, fp
 8005acc:	45b1      	cmp	r9, r6
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	d139      	bne.n	8005b48 <_dtoa_r+0x6c8>
 8005ad4:	f7fa fbea 	bl	80002ac <__adddf3>
 8005ad8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005adc:	4606      	mov	r6, r0
 8005ade:	460f      	mov	r7, r1
 8005ae0:	f7fb f82a 	bl	8000b38 <__aeabi_dcmpgt>
 8005ae4:	b9c8      	cbnz	r0, 8005b1a <_dtoa_r+0x69a>
 8005ae6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005aea:	4630      	mov	r0, r6
 8005aec:	4639      	mov	r1, r7
 8005aee:	f7fa fffb 	bl	8000ae8 <__aeabi_dcmpeq>
 8005af2:	b110      	cbz	r0, 8005afa <_dtoa_r+0x67a>
 8005af4:	f018 0f01 	tst.w	r8, #1
 8005af8:	d10f      	bne.n	8005b1a <_dtoa_r+0x69a>
 8005afa:	9904      	ldr	r1, [sp, #16]
 8005afc:	4620      	mov	r0, r4
 8005afe:	f000 fcaa 	bl	8006456 <_Bfree>
 8005b02:	2300      	movs	r3, #0
 8005b04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b06:	702b      	strb	r3, [r5, #0]
 8005b08:	f10a 0301 	add.w	r3, sl, #1
 8005b0c:	6013      	str	r3, [r2, #0]
 8005b0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 8241 	beq.w	8005f98 <_dtoa_r+0xb18>
 8005b16:	601d      	str	r5, [r3, #0]
 8005b18:	e23e      	b.n	8005f98 <_dtoa_r+0xb18>
 8005b1a:	f8cd a020 	str.w	sl, [sp, #32]
 8005b1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005b22:	2a39      	cmp	r2, #57	; 0x39
 8005b24:	f105 33ff 	add.w	r3, r5, #4294967295
 8005b28:	d108      	bne.n	8005b3c <_dtoa_r+0x6bc>
 8005b2a:	459b      	cmp	fp, r3
 8005b2c:	d10a      	bne.n	8005b44 <_dtoa_r+0x6c4>
 8005b2e:	9b08      	ldr	r3, [sp, #32]
 8005b30:	3301      	adds	r3, #1
 8005b32:	9308      	str	r3, [sp, #32]
 8005b34:	2330      	movs	r3, #48	; 0x30
 8005b36:	f88b 3000 	strb.w	r3, [fp]
 8005b3a:	465b      	mov	r3, fp
 8005b3c:	781a      	ldrb	r2, [r3, #0]
 8005b3e:	3201      	adds	r2, #1
 8005b40:	701a      	strb	r2, [r3, #0]
 8005b42:	e78c      	b.n	8005a5e <_dtoa_r+0x5de>
 8005b44:	461d      	mov	r5, r3
 8005b46:	e7ea      	b.n	8005b1e <_dtoa_r+0x69e>
 8005b48:	2200      	movs	r2, #0
 8005b4a:	4b9b      	ldr	r3, [pc, #620]	; (8005db8 <_dtoa_r+0x938>)
 8005b4c:	f7fa fd64 	bl	8000618 <__aeabi_dmul>
 8005b50:	2200      	movs	r2, #0
 8005b52:	2300      	movs	r3, #0
 8005b54:	4606      	mov	r6, r0
 8005b56:	460f      	mov	r7, r1
 8005b58:	f7fa ffc6 	bl	8000ae8 <__aeabi_dcmpeq>
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	d09a      	beq.n	8005a96 <_dtoa_r+0x616>
 8005b60:	e7cb      	b.n	8005afa <_dtoa_r+0x67a>
 8005b62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b64:	2a00      	cmp	r2, #0
 8005b66:	f000 808b 	beq.w	8005c80 <_dtoa_r+0x800>
 8005b6a:	9a06      	ldr	r2, [sp, #24]
 8005b6c:	2a01      	cmp	r2, #1
 8005b6e:	dc6e      	bgt.n	8005c4e <_dtoa_r+0x7ce>
 8005b70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005b72:	2a00      	cmp	r2, #0
 8005b74:	d067      	beq.n	8005c46 <_dtoa_r+0x7c6>
 8005b76:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005b7a:	9f07      	ldr	r7, [sp, #28]
 8005b7c:	9d05      	ldr	r5, [sp, #20]
 8005b7e:	9a05      	ldr	r2, [sp, #20]
 8005b80:	2101      	movs	r1, #1
 8005b82:	441a      	add	r2, r3
 8005b84:	4620      	mov	r0, r4
 8005b86:	9205      	str	r2, [sp, #20]
 8005b88:	4498      	add	r8, r3
 8005b8a:	f000 fd04 	bl	8006596 <__i2b>
 8005b8e:	4606      	mov	r6, r0
 8005b90:	2d00      	cmp	r5, #0
 8005b92:	dd0c      	ble.n	8005bae <_dtoa_r+0x72e>
 8005b94:	f1b8 0f00 	cmp.w	r8, #0
 8005b98:	dd09      	ble.n	8005bae <_dtoa_r+0x72e>
 8005b9a:	4545      	cmp	r5, r8
 8005b9c:	9a05      	ldr	r2, [sp, #20]
 8005b9e:	462b      	mov	r3, r5
 8005ba0:	bfa8      	it	ge
 8005ba2:	4643      	movge	r3, r8
 8005ba4:	1ad2      	subs	r2, r2, r3
 8005ba6:	9205      	str	r2, [sp, #20]
 8005ba8:	1aed      	subs	r5, r5, r3
 8005baa:	eba8 0803 	sub.w	r8, r8, r3
 8005bae:	9b07      	ldr	r3, [sp, #28]
 8005bb0:	b1eb      	cbz	r3, 8005bee <_dtoa_r+0x76e>
 8005bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d067      	beq.n	8005c88 <_dtoa_r+0x808>
 8005bb8:	b18f      	cbz	r7, 8005bde <_dtoa_r+0x75e>
 8005bba:	4631      	mov	r1, r6
 8005bbc:	463a      	mov	r2, r7
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	f000 fd88 	bl	80066d4 <__pow5mult>
 8005bc4:	9a04      	ldr	r2, [sp, #16]
 8005bc6:	4601      	mov	r1, r0
 8005bc8:	4606      	mov	r6, r0
 8005bca:	4620      	mov	r0, r4
 8005bcc:	f000 fcec 	bl	80065a8 <__multiply>
 8005bd0:	9904      	ldr	r1, [sp, #16]
 8005bd2:	9008      	str	r0, [sp, #32]
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	f000 fc3e 	bl	8006456 <_Bfree>
 8005bda:	9b08      	ldr	r3, [sp, #32]
 8005bdc:	9304      	str	r3, [sp, #16]
 8005bde:	9b07      	ldr	r3, [sp, #28]
 8005be0:	1bda      	subs	r2, r3, r7
 8005be2:	d004      	beq.n	8005bee <_dtoa_r+0x76e>
 8005be4:	9904      	ldr	r1, [sp, #16]
 8005be6:	4620      	mov	r0, r4
 8005be8:	f000 fd74 	bl	80066d4 <__pow5mult>
 8005bec:	9004      	str	r0, [sp, #16]
 8005bee:	2101      	movs	r1, #1
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	f000 fcd0 	bl	8006596 <__i2b>
 8005bf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bf8:	4607      	mov	r7, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f000 81d0 	beq.w	8005fa0 <_dtoa_r+0xb20>
 8005c00:	461a      	mov	r2, r3
 8005c02:	4601      	mov	r1, r0
 8005c04:	4620      	mov	r0, r4
 8005c06:	f000 fd65 	bl	80066d4 <__pow5mult>
 8005c0a:	9b06      	ldr	r3, [sp, #24]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	4607      	mov	r7, r0
 8005c10:	dc40      	bgt.n	8005c94 <_dtoa_r+0x814>
 8005c12:	9b00      	ldr	r3, [sp, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d139      	bne.n	8005c8c <_dtoa_r+0x80c>
 8005c18:	9b01      	ldr	r3, [sp, #4]
 8005c1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d136      	bne.n	8005c90 <_dtoa_r+0x810>
 8005c22:	9b01      	ldr	r3, [sp, #4]
 8005c24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c28:	0d1b      	lsrs	r3, r3, #20
 8005c2a:	051b      	lsls	r3, r3, #20
 8005c2c:	b12b      	cbz	r3, 8005c3a <_dtoa_r+0x7ba>
 8005c2e:	9b05      	ldr	r3, [sp, #20]
 8005c30:	3301      	adds	r3, #1
 8005c32:	9305      	str	r3, [sp, #20]
 8005c34:	f108 0801 	add.w	r8, r8, #1
 8005c38:	2301      	movs	r3, #1
 8005c3a:	9307      	str	r3, [sp, #28]
 8005c3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d12a      	bne.n	8005c98 <_dtoa_r+0x818>
 8005c42:	2001      	movs	r0, #1
 8005c44:	e030      	b.n	8005ca8 <_dtoa_r+0x828>
 8005c46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c48:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005c4c:	e795      	b.n	8005b7a <_dtoa_r+0x6fa>
 8005c4e:	9b07      	ldr	r3, [sp, #28]
 8005c50:	f109 37ff 	add.w	r7, r9, #4294967295
 8005c54:	42bb      	cmp	r3, r7
 8005c56:	bfbf      	itttt	lt
 8005c58:	9b07      	ldrlt	r3, [sp, #28]
 8005c5a:	9707      	strlt	r7, [sp, #28]
 8005c5c:	1afa      	sublt	r2, r7, r3
 8005c5e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005c60:	bfbb      	ittet	lt
 8005c62:	189b      	addlt	r3, r3, r2
 8005c64:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005c66:	1bdf      	subge	r7, r3, r7
 8005c68:	2700      	movlt	r7, #0
 8005c6a:	f1b9 0f00 	cmp.w	r9, #0
 8005c6e:	bfb5      	itete	lt
 8005c70:	9b05      	ldrlt	r3, [sp, #20]
 8005c72:	9d05      	ldrge	r5, [sp, #20]
 8005c74:	eba3 0509 	sublt.w	r5, r3, r9
 8005c78:	464b      	movge	r3, r9
 8005c7a:	bfb8      	it	lt
 8005c7c:	2300      	movlt	r3, #0
 8005c7e:	e77e      	b.n	8005b7e <_dtoa_r+0x6fe>
 8005c80:	9f07      	ldr	r7, [sp, #28]
 8005c82:	9d05      	ldr	r5, [sp, #20]
 8005c84:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005c86:	e783      	b.n	8005b90 <_dtoa_r+0x710>
 8005c88:	9a07      	ldr	r2, [sp, #28]
 8005c8a:	e7ab      	b.n	8005be4 <_dtoa_r+0x764>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	e7d4      	b.n	8005c3a <_dtoa_r+0x7ba>
 8005c90:	9b00      	ldr	r3, [sp, #0]
 8005c92:	e7d2      	b.n	8005c3a <_dtoa_r+0x7ba>
 8005c94:	2300      	movs	r3, #0
 8005c96:	9307      	str	r3, [sp, #28]
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005c9e:	6918      	ldr	r0, [r3, #16]
 8005ca0:	f000 fc2b 	bl	80064fa <__hi0bits>
 8005ca4:	f1c0 0020 	rsb	r0, r0, #32
 8005ca8:	4440      	add	r0, r8
 8005caa:	f010 001f 	ands.w	r0, r0, #31
 8005cae:	d047      	beq.n	8005d40 <_dtoa_r+0x8c0>
 8005cb0:	f1c0 0320 	rsb	r3, r0, #32
 8005cb4:	2b04      	cmp	r3, #4
 8005cb6:	dd3b      	ble.n	8005d30 <_dtoa_r+0x8b0>
 8005cb8:	9b05      	ldr	r3, [sp, #20]
 8005cba:	f1c0 001c 	rsb	r0, r0, #28
 8005cbe:	4403      	add	r3, r0
 8005cc0:	9305      	str	r3, [sp, #20]
 8005cc2:	4405      	add	r5, r0
 8005cc4:	4480      	add	r8, r0
 8005cc6:	9b05      	ldr	r3, [sp, #20]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	dd05      	ble.n	8005cd8 <_dtoa_r+0x858>
 8005ccc:	461a      	mov	r2, r3
 8005cce:	9904      	ldr	r1, [sp, #16]
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	f000 fd4d 	bl	8006770 <__lshift>
 8005cd6:	9004      	str	r0, [sp, #16]
 8005cd8:	f1b8 0f00 	cmp.w	r8, #0
 8005cdc:	dd05      	ble.n	8005cea <_dtoa_r+0x86a>
 8005cde:	4639      	mov	r1, r7
 8005ce0:	4642      	mov	r2, r8
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	f000 fd44 	bl	8006770 <__lshift>
 8005ce8:	4607      	mov	r7, r0
 8005cea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005cec:	b353      	cbz	r3, 8005d44 <_dtoa_r+0x8c4>
 8005cee:	4639      	mov	r1, r7
 8005cf0:	9804      	ldr	r0, [sp, #16]
 8005cf2:	f000 fd91 	bl	8006818 <__mcmp>
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	da24      	bge.n	8005d44 <_dtoa_r+0x8c4>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	220a      	movs	r2, #10
 8005cfe:	9904      	ldr	r1, [sp, #16]
 8005d00:	4620      	mov	r0, r4
 8005d02:	f000 fbbf 	bl	8006484 <__multadd>
 8005d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d08:	9004      	str	r0, [sp, #16]
 8005d0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 814d 	beq.w	8005fae <_dtoa_r+0xb2e>
 8005d14:	2300      	movs	r3, #0
 8005d16:	4631      	mov	r1, r6
 8005d18:	220a      	movs	r2, #10
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	f000 fbb2 	bl	8006484 <__multadd>
 8005d20:	9b02      	ldr	r3, [sp, #8]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	4606      	mov	r6, r0
 8005d26:	dc4f      	bgt.n	8005dc8 <_dtoa_r+0x948>
 8005d28:	9b06      	ldr	r3, [sp, #24]
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	dd4c      	ble.n	8005dc8 <_dtoa_r+0x948>
 8005d2e:	e011      	b.n	8005d54 <_dtoa_r+0x8d4>
 8005d30:	d0c9      	beq.n	8005cc6 <_dtoa_r+0x846>
 8005d32:	9a05      	ldr	r2, [sp, #20]
 8005d34:	331c      	adds	r3, #28
 8005d36:	441a      	add	r2, r3
 8005d38:	9205      	str	r2, [sp, #20]
 8005d3a:	441d      	add	r5, r3
 8005d3c:	4498      	add	r8, r3
 8005d3e:	e7c2      	b.n	8005cc6 <_dtoa_r+0x846>
 8005d40:	4603      	mov	r3, r0
 8005d42:	e7f6      	b.n	8005d32 <_dtoa_r+0x8b2>
 8005d44:	f1b9 0f00 	cmp.w	r9, #0
 8005d48:	dc38      	bgt.n	8005dbc <_dtoa_r+0x93c>
 8005d4a:	9b06      	ldr	r3, [sp, #24]
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	dd35      	ble.n	8005dbc <_dtoa_r+0x93c>
 8005d50:	f8cd 9008 	str.w	r9, [sp, #8]
 8005d54:	9b02      	ldr	r3, [sp, #8]
 8005d56:	b963      	cbnz	r3, 8005d72 <_dtoa_r+0x8f2>
 8005d58:	4639      	mov	r1, r7
 8005d5a:	2205      	movs	r2, #5
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	f000 fb91 	bl	8006484 <__multadd>
 8005d62:	4601      	mov	r1, r0
 8005d64:	4607      	mov	r7, r0
 8005d66:	9804      	ldr	r0, [sp, #16]
 8005d68:	f000 fd56 	bl	8006818 <__mcmp>
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	f73f adcc 	bgt.w	800590a <_dtoa_r+0x48a>
 8005d72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d74:	465d      	mov	r5, fp
 8005d76:	ea6f 0a03 	mvn.w	sl, r3
 8005d7a:	f04f 0900 	mov.w	r9, #0
 8005d7e:	4639      	mov	r1, r7
 8005d80:	4620      	mov	r0, r4
 8005d82:	f000 fb68 	bl	8006456 <_Bfree>
 8005d86:	2e00      	cmp	r6, #0
 8005d88:	f43f aeb7 	beq.w	8005afa <_dtoa_r+0x67a>
 8005d8c:	f1b9 0f00 	cmp.w	r9, #0
 8005d90:	d005      	beq.n	8005d9e <_dtoa_r+0x91e>
 8005d92:	45b1      	cmp	r9, r6
 8005d94:	d003      	beq.n	8005d9e <_dtoa_r+0x91e>
 8005d96:	4649      	mov	r1, r9
 8005d98:	4620      	mov	r0, r4
 8005d9a:	f000 fb5c 	bl	8006456 <_Bfree>
 8005d9e:	4631      	mov	r1, r6
 8005da0:	4620      	mov	r0, r4
 8005da2:	f000 fb58 	bl	8006456 <_Bfree>
 8005da6:	e6a8      	b.n	8005afa <_dtoa_r+0x67a>
 8005da8:	2700      	movs	r7, #0
 8005daa:	463e      	mov	r6, r7
 8005dac:	e7e1      	b.n	8005d72 <_dtoa_r+0x8f2>
 8005dae:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005db2:	463e      	mov	r6, r7
 8005db4:	e5a9      	b.n	800590a <_dtoa_r+0x48a>
 8005db6:	bf00      	nop
 8005db8:	40240000 	.word	0x40240000
 8005dbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dbe:	f8cd 9008 	str.w	r9, [sp, #8]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f000 80fa 	beq.w	8005fbc <_dtoa_r+0xb3c>
 8005dc8:	2d00      	cmp	r5, #0
 8005dca:	dd05      	ble.n	8005dd8 <_dtoa_r+0x958>
 8005dcc:	4631      	mov	r1, r6
 8005dce:	462a      	mov	r2, r5
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	f000 fccd 	bl	8006770 <__lshift>
 8005dd6:	4606      	mov	r6, r0
 8005dd8:	9b07      	ldr	r3, [sp, #28]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d04c      	beq.n	8005e78 <_dtoa_r+0x9f8>
 8005dde:	6871      	ldr	r1, [r6, #4]
 8005de0:	4620      	mov	r0, r4
 8005de2:	f000 fb04 	bl	80063ee <_Balloc>
 8005de6:	6932      	ldr	r2, [r6, #16]
 8005de8:	3202      	adds	r2, #2
 8005dea:	4605      	mov	r5, r0
 8005dec:	0092      	lsls	r2, r2, #2
 8005dee:	f106 010c 	add.w	r1, r6, #12
 8005df2:	300c      	adds	r0, #12
 8005df4:	f000 faf0 	bl	80063d8 <memcpy>
 8005df8:	2201      	movs	r2, #1
 8005dfa:	4629      	mov	r1, r5
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	f000 fcb7 	bl	8006770 <__lshift>
 8005e02:	9b00      	ldr	r3, [sp, #0]
 8005e04:	f8cd b014 	str.w	fp, [sp, #20]
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	46b1      	mov	r9, r6
 8005e0e:	9307      	str	r3, [sp, #28]
 8005e10:	4606      	mov	r6, r0
 8005e12:	4639      	mov	r1, r7
 8005e14:	9804      	ldr	r0, [sp, #16]
 8005e16:	f7ff faa5 	bl	8005364 <quorem>
 8005e1a:	4649      	mov	r1, r9
 8005e1c:	4605      	mov	r5, r0
 8005e1e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005e22:	9804      	ldr	r0, [sp, #16]
 8005e24:	f000 fcf8 	bl	8006818 <__mcmp>
 8005e28:	4632      	mov	r2, r6
 8005e2a:	9000      	str	r0, [sp, #0]
 8005e2c:	4639      	mov	r1, r7
 8005e2e:	4620      	mov	r0, r4
 8005e30:	f000 fd0c 	bl	800684c <__mdiff>
 8005e34:	68c3      	ldr	r3, [r0, #12]
 8005e36:	4602      	mov	r2, r0
 8005e38:	bb03      	cbnz	r3, 8005e7c <_dtoa_r+0x9fc>
 8005e3a:	4601      	mov	r1, r0
 8005e3c:	9008      	str	r0, [sp, #32]
 8005e3e:	9804      	ldr	r0, [sp, #16]
 8005e40:	f000 fcea 	bl	8006818 <__mcmp>
 8005e44:	9a08      	ldr	r2, [sp, #32]
 8005e46:	4603      	mov	r3, r0
 8005e48:	4611      	mov	r1, r2
 8005e4a:	4620      	mov	r0, r4
 8005e4c:	9308      	str	r3, [sp, #32]
 8005e4e:	f000 fb02 	bl	8006456 <_Bfree>
 8005e52:	9b08      	ldr	r3, [sp, #32]
 8005e54:	b9a3      	cbnz	r3, 8005e80 <_dtoa_r+0xa00>
 8005e56:	9a06      	ldr	r2, [sp, #24]
 8005e58:	b992      	cbnz	r2, 8005e80 <_dtoa_r+0xa00>
 8005e5a:	9a07      	ldr	r2, [sp, #28]
 8005e5c:	b982      	cbnz	r2, 8005e80 <_dtoa_r+0xa00>
 8005e5e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005e62:	d029      	beq.n	8005eb8 <_dtoa_r+0xa38>
 8005e64:	9b00      	ldr	r3, [sp, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	dd01      	ble.n	8005e6e <_dtoa_r+0x9ee>
 8005e6a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005e6e:	9b05      	ldr	r3, [sp, #20]
 8005e70:	1c5d      	adds	r5, r3, #1
 8005e72:	f883 8000 	strb.w	r8, [r3]
 8005e76:	e782      	b.n	8005d7e <_dtoa_r+0x8fe>
 8005e78:	4630      	mov	r0, r6
 8005e7a:	e7c2      	b.n	8005e02 <_dtoa_r+0x982>
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e7e3      	b.n	8005e48 <_dtoa_r+0x9c8>
 8005e80:	9a00      	ldr	r2, [sp, #0]
 8005e82:	2a00      	cmp	r2, #0
 8005e84:	db04      	blt.n	8005e90 <_dtoa_r+0xa10>
 8005e86:	d125      	bne.n	8005ed4 <_dtoa_r+0xa54>
 8005e88:	9a06      	ldr	r2, [sp, #24]
 8005e8a:	bb1a      	cbnz	r2, 8005ed4 <_dtoa_r+0xa54>
 8005e8c:	9a07      	ldr	r2, [sp, #28]
 8005e8e:	bb0a      	cbnz	r2, 8005ed4 <_dtoa_r+0xa54>
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	ddec      	ble.n	8005e6e <_dtoa_r+0x9ee>
 8005e94:	2201      	movs	r2, #1
 8005e96:	9904      	ldr	r1, [sp, #16]
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f000 fc69 	bl	8006770 <__lshift>
 8005e9e:	4639      	mov	r1, r7
 8005ea0:	9004      	str	r0, [sp, #16]
 8005ea2:	f000 fcb9 	bl	8006818 <__mcmp>
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	dc03      	bgt.n	8005eb2 <_dtoa_r+0xa32>
 8005eaa:	d1e0      	bne.n	8005e6e <_dtoa_r+0x9ee>
 8005eac:	f018 0f01 	tst.w	r8, #1
 8005eb0:	d0dd      	beq.n	8005e6e <_dtoa_r+0x9ee>
 8005eb2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005eb6:	d1d8      	bne.n	8005e6a <_dtoa_r+0x9ea>
 8005eb8:	9b05      	ldr	r3, [sp, #20]
 8005eba:	9a05      	ldr	r2, [sp, #20]
 8005ebc:	1c5d      	adds	r5, r3, #1
 8005ebe:	2339      	movs	r3, #57	; 0x39
 8005ec0:	7013      	strb	r3, [r2, #0]
 8005ec2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005ec6:	2b39      	cmp	r3, #57	; 0x39
 8005ec8:	f105 32ff 	add.w	r2, r5, #4294967295
 8005ecc:	d04f      	beq.n	8005f6e <_dtoa_r+0xaee>
 8005ece:	3301      	adds	r3, #1
 8005ed0:	7013      	strb	r3, [r2, #0]
 8005ed2:	e754      	b.n	8005d7e <_dtoa_r+0x8fe>
 8005ed4:	9a05      	ldr	r2, [sp, #20]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f102 0501 	add.w	r5, r2, #1
 8005edc:	dd06      	ble.n	8005eec <_dtoa_r+0xa6c>
 8005ede:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005ee2:	d0e9      	beq.n	8005eb8 <_dtoa_r+0xa38>
 8005ee4:	f108 0801 	add.w	r8, r8, #1
 8005ee8:	9b05      	ldr	r3, [sp, #20]
 8005eea:	e7c2      	b.n	8005e72 <_dtoa_r+0x9f2>
 8005eec:	9a02      	ldr	r2, [sp, #8]
 8005eee:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005ef2:	eba5 030b 	sub.w	r3, r5, fp
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d021      	beq.n	8005f3e <_dtoa_r+0xabe>
 8005efa:	2300      	movs	r3, #0
 8005efc:	220a      	movs	r2, #10
 8005efe:	9904      	ldr	r1, [sp, #16]
 8005f00:	4620      	mov	r0, r4
 8005f02:	f000 fabf 	bl	8006484 <__multadd>
 8005f06:	45b1      	cmp	r9, r6
 8005f08:	9004      	str	r0, [sp, #16]
 8005f0a:	f04f 0300 	mov.w	r3, #0
 8005f0e:	f04f 020a 	mov.w	r2, #10
 8005f12:	4649      	mov	r1, r9
 8005f14:	4620      	mov	r0, r4
 8005f16:	d105      	bne.n	8005f24 <_dtoa_r+0xaa4>
 8005f18:	f000 fab4 	bl	8006484 <__multadd>
 8005f1c:	4681      	mov	r9, r0
 8005f1e:	4606      	mov	r6, r0
 8005f20:	9505      	str	r5, [sp, #20]
 8005f22:	e776      	b.n	8005e12 <_dtoa_r+0x992>
 8005f24:	f000 faae 	bl	8006484 <__multadd>
 8005f28:	4631      	mov	r1, r6
 8005f2a:	4681      	mov	r9, r0
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	220a      	movs	r2, #10
 8005f30:	4620      	mov	r0, r4
 8005f32:	f000 faa7 	bl	8006484 <__multadd>
 8005f36:	4606      	mov	r6, r0
 8005f38:	e7f2      	b.n	8005f20 <_dtoa_r+0xaa0>
 8005f3a:	f04f 0900 	mov.w	r9, #0
 8005f3e:	2201      	movs	r2, #1
 8005f40:	9904      	ldr	r1, [sp, #16]
 8005f42:	4620      	mov	r0, r4
 8005f44:	f000 fc14 	bl	8006770 <__lshift>
 8005f48:	4639      	mov	r1, r7
 8005f4a:	9004      	str	r0, [sp, #16]
 8005f4c:	f000 fc64 	bl	8006818 <__mcmp>
 8005f50:	2800      	cmp	r0, #0
 8005f52:	dcb6      	bgt.n	8005ec2 <_dtoa_r+0xa42>
 8005f54:	d102      	bne.n	8005f5c <_dtoa_r+0xadc>
 8005f56:	f018 0f01 	tst.w	r8, #1
 8005f5a:	d1b2      	bne.n	8005ec2 <_dtoa_r+0xa42>
 8005f5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005f60:	2b30      	cmp	r3, #48	; 0x30
 8005f62:	f105 32ff 	add.w	r2, r5, #4294967295
 8005f66:	f47f af0a 	bne.w	8005d7e <_dtoa_r+0x8fe>
 8005f6a:	4615      	mov	r5, r2
 8005f6c:	e7f6      	b.n	8005f5c <_dtoa_r+0xadc>
 8005f6e:	4593      	cmp	fp, r2
 8005f70:	d105      	bne.n	8005f7e <_dtoa_r+0xafe>
 8005f72:	2331      	movs	r3, #49	; 0x31
 8005f74:	f10a 0a01 	add.w	sl, sl, #1
 8005f78:	f88b 3000 	strb.w	r3, [fp]
 8005f7c:	e6ff      	b.n	8005d7e <_dtoa_r+0x8fe>
 8005f7e:	4615      	mov	r5, r2
 8005f80:	e79f      	b.n	8005ec2 <_dtoa_r+0xa42>
 8005f82:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005fe8 <_dtoa_r+0xb68>
 8005f86:	e007      	b.n	8005f98 <_dtoa_r+0xb18>
 8005f88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f8a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005fec <_dtoa_r+0xb6c>
 8005f8e:	b11b      	cbz	r3, 8005f98 <_dtoa_r+0xb18>
 8005f90:	f10b 0308 	add.w	r3, fp, #8
 8005f94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f96:	6013      	str	r3, [r2, #0]
 8005f98:	4658      	mov	r0, fp
 8005f9a:	b017      	add	sp, #92	; 0x5c
 8005f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fa0:	9b06      	ldr	r3, [sp, #24]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	f77f ae35 	ble.w	8005c12 <_dtoa_r+0x792>
 8005fa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005faa:	9307      	str	r3, [sp, #28]
 8005fac:	e649      	b.n	8005c42 <_dtoa_r+0x7c2>
 8005fae:	9b02      	ldr	r3, [sp, #8]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	dc03      	bgt.n	8005fbc <_dtoa_r+0xb3c>
 8005fb4:	9b06      	ldr	r3, [sp, #24]
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	f73f aecc 	bgt.w	8005d54 <_dtoa_r+0x8d4>
 8005fbc:	465d      	mov	r5, fp
 8005fbe:	4639      	mov	r1, r7
 8005fc0:	9804      	ldr	r0, [sp, #16]
 8005fc2:	f7ff f9cf 	bl	8005364 <quorem>
 8005fc6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005fca:	f805 8b01 	strb.w	r8, [r5], #1
 8005fce:	9a02      	ldr	r2, [sp, #8]
 8005fd0:	eba5 030b 	sub.w	r3, r5, fp
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	ddb0      	ble.n	8005f3a <_dtoa_r+0xaba>
 8005fd8:	2300      	movs	r3, #0
 8005fda:	220a      	movs	r2, #10
 8005fdc:	9904      	ldr	r1, [sp, #16]
 8005fde:	4620      	mov	r0, r4
 8005fe0:	f000 fa50 	bl	8006484 <__multadd>
 8005fe4:	9004      	str	r0, [sp, #16]
 8005fe6:	e7ea      	b.n	8005fbe <_dtoa_r+0xb3e>
 8005fe8:	08006fc0 	.word	0x08006fc0
 8005fec:	08006fe4 	.word	0x08006fe4

08005ff0 <__sflush_r>:
 8005ff0:	898a      	ldrh	r2, [r1, #12]
 8005ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ff6:	4605      	mov	r5, r0
 8005ff8:	0710      	lsls	r0, r2, #28
 8005ffa:	460c      	mov	r4, r1
 8005ffc:	d458      	bmi.n	80060b0 <__sflush_r+0xc0>
 8005ffe:	684b      	ldr	r3, [r1, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	dc05      	bgt.n	8006010 <__sflush_r+0x20>
 8006004:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006006:	2b00      	cmp	r3, #0
 8006008:	dc02      	bgt.n	8006010 <__sflush_r+0x20>
 800600a:	2000      	movs	r0, #0
 800600c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006010:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006012:	2e00      	cmp	r6, #0
 8006014:	d0f9      	beq.n	800600a <__sflush_r+0x1a>
 8006016:	2300      	movs	r3, #0
 8006018:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800601c:	682f      	ldr	r7, [r5, #0]
 800601e:	6a21      	ldr	r1, [r4, #32]
 8006020:	602b      	str	r3, [r5, #0]
 8006022:	d032      	beq.n	800608a <__sflush_r+0x9a>
 8006024:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006026:	89a3      	ldrh	r3, [r4, #12]
 8006028:	075a      	lsls	r2, r3, #29
 800602a:	d505      	bpl.n	8006038 <__sflush_r+0x48>
 800602c:	6863      	ldr	r3, [r4, #4]
 800602e:	1ac0      	subs	r0, r0, r3
 8006030:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006032:	b10b      	cbz	r3, 8006038 <__sflush_r+0x48>
 8006034:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006036:	1ac0      	subs	r0, r0, r3
 8006038:	2300      	movs	r3, #0
 800603a:	4602      	mov	r2, r0
 800603c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800603e:	6a21      	ldr	r1, [r4, #32]
 8006040:	4628      	mov	r0, r5
 8006042:	47b0      	blx	r6
 8006044:	1c43      	adds	r3, r0, #1
 8006046:	89a3      	ldrh	r3, [r4, #12]
 8006048:	d106      	bne.n	8006058 <__sflush_r+0x68>
 800604a:	6829      	ldr	r1, [r5, #0]
 800604c:	291d      	cmp	r1, #29
 800604e:	d848      	bhi.n	80060e2 <__sflush_r+0xf2>
 8006050:	4a29      	ldr	r2, [pc, #164]	; (80060f8 <__sflush_r+0x108>)
 8006052:	40ca      	lsrs	r2, r1
 8006054:	07d6      	lsls	r6, r2, #31
 8006056:	d544      	bpl.n	80060e2 <__sflush_r+0xf2>
 8006058:	2200      	movs	r2, #0
 800605a:	6062      	str	r2, [r4, #4]
 800605c:	04d9      	lsls	r1, r3, #19
 800605e:	6922      	ldr	r2, [r4, #16]
 8006060:	6022      	str	r2, [r4, #0]
 8006062:	d504      	bpl.n	800606e <__sflush_r+0x7e>
 8006064:	1c42      	adds	r2, r0, #1
 8006066:	d101      	bne.n	800606c <__sflush_r+0x7c>
 8006068:	682b      	ldr	r3, [r5, #0]
 800606a:	b903      	cbnz	r3, 800606e <__sflush_r+0x7e>
 800606c:	6560      	str	r0, [r4, #84]	; 0x54
 800606e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006070:	602f      	str	r7, [r5, #0]
 8006072:	2900      	cmp	r1, #0
 8006074:	d0c9      	beq.n	800600a <__sflush_r+0x1a>
 8006076:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800607a:	4299      	cmp	r1, r3
 800607c:	d002      	beq.n	8006084 <__sflush_r+0x94>
 800607e:	4628      	mov	r0, r5
 8006080:	f000 fc9e 	bl	80069c0 <_free_r>
 8006084:	2000      	movs	r0, #0
 8006086:	6360      	str	r0, [r4, #52]	; 0x34
 8006088:	e7c0      	b.n	800600c <__sflush_r+0x1c>
 800608a:	2301      	movs	r3, #1
 800608c:	4628      	mov	r0, r5
 800608e:	47b0      	blx	r6
 8006090:	1c41      	adds	r1, r0, #1
 8006092:	d1c8      	bne.n	8006026 <__sflush_r+0x36>
 8006094:	682b      	ldr	r3, [r5, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d0c5      	beq.n	8006026 <__sflush_r+0x36>
 800609a:	2b1d      	cmp	r3, #29
 800609c:	d001      	beq.n	80060a2 <__sflush_r+0xb2>
 800609e:	2b16      	cmp	r3, #22
 80060a0:	d101      	bne.n	80060a6 <__sflush_r+0xb6>
 80060a2:	602f      	str	r7, [r5, #0]
 80060a4:	e7b1      	b.n	800600a <__sflush_r+0x1a>
 80060a6:	89a3      	ldrh	r3, [r4, #12]
 80060a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060ac:	81a3      	strh	r3, [r4, #12]
 80060ae:	e7ad      	b.n	800600c <__sflush_r+0x1c>
 80060b0:	690f      	ldr	r7, [r1, #16]
 80060b2:	2f00      	cmp	r7, #0
 80060b4:	d0a9      	beq.n	800600a <__sflush_r+0x1a>
 80060b6:	0793      	lsls	r3, r2, #30
 80060b8:	680e      	ldr	r6, [r1, #0]
 80060ba:	bf08      	it	eq
 80060bc:	694b      	ldreq	r3, [r1, #20]
 80060be:	600f      	str	r7, [r1, #0]
 80060c0:	bf18      	it	ne
 80060c2:	2300      	movne	r3, #0
 80060c4:	eba6 0807 	sub.w	r8, r6, r7
 80060c8:	608b      	str	r3, [r1, #8]
 80060ca:	f1b8 0f00 	cmp.w	r8, #0
 80060ce:	dd9c      	ble.n	800600a <__sflush_r+0x1a>
 80060d0:	4643      	mov	r3, r8
 80060d2:	463a      	mov	r2, r7
 80060d4:	6a21      	ldr	r1, [r4, #32]
 80060d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80060d8:	4628      	mov	r0, r5
 80060da:	47b0      	blx	r6
 80060dc:	2800      	cmp	r0, #0
 80060de:	dc06      	bgt.n	80060ee <__sflush_r+0xfe>
 80060e0:	89a3      	ldrh	r3, [r4, #12]
 80060e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060e6:	81a3      	strh	r3, [r4, #12]
 80060e8:	f04f 30ff 	mov.w	r0, #4294967295
 80060ec:	e78e      	b.n	800600c <__sflush_r+0x1c>
 80060ee:	4407      	add	r7, r0
 80060f0:	eba8 0800 	sub.w	r8, r8, r0
 80060f4:	e7e9      	b.n	80060ca <__sflush_r+0xda>
 80060f6:	bf00      	nop
 80060f8:	20400001 	.word	0x20400001

080060fc <_fflush_r>:
 80060fc:	b538      	push	{r3, r4, r5, lr}
 80060fe:	690b      	ldr	r3, [r1, #16]
 8006100:	4605      	mov	r5, r0
 8006102:	460c      	mov	r4, r1
 8006104:	b1db      	cbz	r3, 800613e <_fflush_r+0x42>
 8006106:	b118      	cbz	r0, 8006110 <_fflush_r+0x14>
 8006108:	6983      	ldr	r3, [r0, #24]
 800610a:	b90b      	cbnz	r3, 8006110 <_fflush_r+0x14>
 800610c:	f000 f860 	bl	80061d0 <__sinit>
 8006110:	4b0c      	ldr	r3, [pc, #48]	; (8006144 <_fflush_r+0x48>)
 8006112:	429c      	cmp	r4, r3
 8006114:	d109      	bne.n	800612a <_fflush_r+0x2e>
 8006116:	686c      	ldr	r4, [r5, #4]
 8006118:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800611c:	b17b      	cbz	r3, 800613e <_fflush_r+0x42>
 800611e:	4621      	mov	r1, r4
 8006120:	4628      	mov	r0, r5
 8006122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006126:	f7ff bf63 	b.w	8005ff0 <__sflush_r>
 800612a:	4b07      	ldr	r3, [pc, #28]	; (8006148 <_fflush_r+0x4c>)
 800612c:	429c      	cmp	r4, r3
 800612e:	d101      	bne.n	8006134 <_fflush_r+0x38>
 8006130:	68ac      	ldr	r4, [r5, #8]
 8006132:	e7f1      	b.n	8006118 <_fflush_r+0x1c>
 8006134:	4b05      	ldr	r3, [pc, #20]	; (800614c <_fflush_r+0x50>)
 8006136:	429c      	cmp	r4, r3
 8006138:	bf08      	it	eq
 800613a:	68ec      	ldreq	r4, [r5, #12]
 800613c:	e7ec      	b.n	8006118 <_fflush_r+0x1c>
 800613e:	2000      	movs	r0, #0
 8006140:	bd38      	pop	{r3, r4, r5, pc}
 8006142:	bf00      	nop
 8006144:	08007014 	.word	0x08007014
 8006148:	08007034 	.word	0x08007034
 800614c:	08006ff4 	.word	0x08006ff4

08006150 <std>:
 8006150:	2300      	movs	r3, #0
 8006152:	b510      	push	{r4, lr}
 8006154:	4604      	mov	r4, r0
 8006156:	e9c0 3300 	strd	r3, r3, [r0]
 800615a:	6083      	str	r3, [r0, #8]
 800615c:	8181      	strh	r1, [r0, #12]
 800615e:	6643      	str	r3, [r0, #100]	; 0x64
 8006160:	81c2      	strh	r2, [r0, #14]
 8006162:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006166:	6183      	str	r3, [r0, #24]
 8006168:	4619      	mov	r1, r3
 800616a:	2208      	movs	r2, #8
 800616c:	305c      	adds	r0, #92	; 0x5c
 800616e:	f7fe faa3 	bl	80046b8 <memset>
 8006172:	4b05      	ldr	r3, [pc, #20]	; (8006188 <std+0x38>)
 8006174:	6263      	str	r3, [r4, #36]	; 0x24
 8006176:	4b05      	ldr	r3, [pc, #20]	; (800618c <std+0x3c>)
 8006178:	62a3      	str	r3, [r4, #40]	; 0x28
 800617a:	4b05      	ldr	r3, [pc, #20]	; (8006190 <std+0x40>)
 800617c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800617e:	4b05      	ldr	r3, [pc, #20]	; (8006194 <std+0x44>)
 8006180:	6224      	str	r4, [r4, #32]
 8006182:	6323      	str	r3, [r4, #48]	; 0x30
 8006184:	bd10      	pop	{r4, pc}
 8006186:	bf00      	nop
 8006188:	08006db1 	.word	0x08006db1
 800618c:	08006dd3 	.word	0x08006dd3
 8006190:	08006e0b 	.word	0x08006e0b
 8006194:	08006e2f 	.word	0x08006e2f

08006198 <_cleanup_r>:
 8006198:	4901      	ldr	r1, [pc, #4]	; (80061a0 <_cleanup_r+0x8>)
 800619a:	f000 b885 	b.w	80062a8 <_fwalk_reent>
 800619e:	bf00      	nop
 80061a0:	080060fd 	.word	0x080060fd

080061a4 <__sfmoreglue>:
 80061a4:	b570      	push	{r4, r5, r6, lr}
 80061a6:	1e4a      	subs	r2, r1, #1
 80061a8:	2568      	movs	r5, #104	; 0x68
 80061aa:	4355      	muls	r5, r2
 80061ac:	460e      	mov	r6, r1
 80061ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80061b2:	f000 fc53 	bl	8006a5c <_malloc_r>
 80061b6:	4604      	mov	r4, r0
 80061b8:	b140      	cbz	r0, 80061cc <__sfmoreglue+0x28>
 80061ba:	2100      	movs	r1, #0
 80061bc:	e9c0 1600 	strd	r1, r6, [r0]
 80061c0:	300c      	adds	r0, #12
 80061c2:	60a0      	str	r0, [r4, #8]
 80061c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80061c8:	f7fe fa76 	bl	80046b8 <memset>
 80061cc:	4620      	mov	r0, r4
 80061ce:	bd70      	pop	{r4, r5, r6, pc}

080061d0 <__sinit>:
 80061d0:	6983      	ldr	r3, [r0, #24]
 80061d2:	b510      	push	{r4, lr}
 80061d4:	4604      	mov	r4, r0
 80061d6:	bb33      	cbnz	r3, 8006226 <__sinit+0x56>
 80061d8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80061dc:	6503      	str	r3, [r0, #80]	; 0x50
 80061de:	4b12      	ldr	r3, [pc, #72]	; (8006228 <__sinit+0x58>)
 80061e0:	4a12      	ldr	r2, [pc, #72]	; (800622c <__sinit+0x5c>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6282      	str	r2, [r0, #40]	; 0x28
 80061e6:	4298      	cmp	r0, r3
 80061e8:	bf04      	itt	eq
 80061ea:	2301      	moveq	r3, #1
 80061ec:	6183      	streq	r3, [r0, #24]
 80061ee:	f000 f81f 	bl	8006230 <__sfp>
 80061f2:	6060      	str	r0, [r4, #4]
 80061f4:	4620      	mov	r0, r4
 80061f6:	f000 f81b 	bl	8006230 <__sfp>
 80061fa:	60a0      	str	r0, [r4, #8]
 80061fc:	4620      	mov	r0, r4
 80061fe:	f000 f817 	bl	8006230 <__sfp>
 8006202:	2200      	movs	r2, #0
 8006204:	60e0      	str	r0, [r4, #12]
 8006206:	2104      	movs	r1, #4
 8006208:	6860      	ldr	r0, [r4, #4]
 800620a:	f7ff ffa1 	bl	8006150 <std>
 800620e:	2201      	movs	r2, #1
 8006210:	2109      	movs	r1, #9
 8006212:	68a0      	ldr	r0, [r4, #8]
 8006214:	f7ff ff9c 	bl	8006150 <std>
 8006218:	2202      	movs	r2, #2
 800621a:	2112      	movs	r1, #18
 800621c:	68e0      	ldr	r0, [r4, #12]
 800621e:	f7ff ff97 	bl	8006150 <std>
 8006222:	2301      	movs	r3, #1
 8006224:	61a3      	str	r3, [r4, #24]
 8006226:	bd10      	pop	{r4, pc}
 8006228:	08006fac 	.word	0x08006fac
 800622c:	08006199 	.word	0x08006199

08006230 <__sfp>:
 8006230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006232:	4b1b      	ldr	r3, [pc, #108]	; (80062a0 <__sfp+0x70>)
 8006234:	681e      	ldr	r6, [r3, #0]
 8006236:	69b3      	ldr	r3, [r6, #24]
 8006238:	4607      	mov	r7, r0
 800623a:	b913      	cbnz	r3, 8006242 <__sfp+0x12>
 800623c:	4630      	mov	r0, r6
 800623e:	f7ff ffc7 	bl	80061d0 <__sinit>
 8006242:	3648      	adds	r6, #72	; 0x48
 8006244:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006248:	3b01      	subs	r3, #1
 800624a:	d503      	bpl.n	8006254 <__sfp+0x24>
 800624c:	6833      	ldr	r3, [r6, #0]
 800624e:	b133      	cbz	r3, 800625e <__sfp+0x2e>
 8006250:	6836      	ldr	r6, [r6, #0]
 8006252:	e7f7      	b.n	8006244 <__sfp+0x14>
 8006254:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006258:	b16d      	cbz	r5, 8006276 <__sfp+0x46>
 800625a:	3468      	adds	r4, #104	; 0x68
 800625c:	e7f4      	b.n	8006248 <__sfp+0x18>
 800625e:	2104      	movs	r1, #4
 8006260:	4638      	mov	r0, r7
 8006262:	f7ff ff9f 	bl	80061a4 <__sfmoreglue>
 8006266:	6030      	str	r0, [r6, #0]
 8006268:	2800      	cmp	r0, #0
 800626a:	d1f1      	bne.n	8006250 <__sfp+0x20>
 800626c:	230c      	movs	r3, #12
 800626e:	603b      	str	r3, [r7, #0]
 8006270:	4604      	mov	r4, r0
 8006272:	4620      	mov	r0, r4
 8006274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006276:	4b0b      	ldr	r3, [pc, #44]	; (80062a4 <__sfp+0x74>)
 8006278:	6665      	str	r5, [r4, #100]	; 0x64
 800627a:	e9c4 5500 	strd	r5, r5, [r4]
 800627e:	60a5      	str	r5, [r4, #8]
 8006280:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006284:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006288:	2208      	movs	r2, #8
 800628a:	4629      	mov	r1, r5
 800628c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006290:	f7fe fa12 	bl	80046b8 <memset>
 8006294:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006298:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800629c:	e7e9      	b.n	8006272 <__sfp+0x42>
 800629e:	bf00      	nop
 80062a0:	08006fac 	.word	0x08006fac
 80062a4:	ffff0001 	.word	0xffff0001

080062a8 <_fwalk_reent>:
 80062a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062ac:	4680      	mov	r8, r0
 80062ae:	4689      	mov	r9, r1
 80062b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80062b4:	2600      	movs	r6, #0
 80062b6:	b914      	cbnz	r4, 80062be <_fwalk_reent+0x16>
 80062b8:	4630      	mov	r0, r6
 80062ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062be:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80062c2:	3f01      	subs	r7, #1
 80062c4:	d501      	bpl.n	80062ca <_fwalk_reent+0x22>
 80062c6:	6824      	ldr	r4, [r4, #0]
 80062c8:	e7f5      	b.n	80062b6 <_fwalk_reent+0xe>
 80062ca:	89ab      	ldrh	r3, [r5, #12]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d907      	bls.n	80062e0 <_fwalk_reent+0x38>
 80062d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062d4:	3301      	adds	r3, #1
 80062d6:	d003      	beq.n	80062e0 <_fwalk_reent+0x38>
 80062d8:	4629      	mov	r1, r5
 80062da:	4640      	mov	r0, r8
 80062dc:	47c8      	blx	r9
 80062de:	4306      	orrs	r6, r0
 80062e0:	3568      	adds	r5, #104	; 0x68
 80062e2:	e7ee      	b.n	80062c2 <_fwalk_reent+0x1a>

080062e4 <_localeconv_r>:
 80062e4:	4b04      	ldr	r3, [pc, #16]	; (80062f8 <_localeconv_r+0x14>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6a18      	ldr	r0, [r3, #32]
 80062ea:	4b04      	ldr	r3, [pc, #16]	; (80062fc <_localeconv_r+0x18>)
 80062ec:	2800      	cmp	r0, #0
 80062ee:	bf08      	it	eq
 80062f0:	4618      	moveq	r0, r3
 80062f2:	30f0      	adds	r0, #240	; 0xf0
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	20000010 	.word	0x20000010
 80062fc:	20000074 	.word	0x20000074

08006300 <__swhatbuf_r>:
 8006300:	b570      	push	{r4, r5, r6, lr}
 8006302:	460e      	mov	r6, r1
 8006304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006308:	2900      	cmp	r1, #0
 800630a:	b096      	sub	sp, #88	; 0x58
 800630c:	4614      	mov	r4, r2
 800630e:	461d      	mov	r5, r3
 8006310:	da07      	bge.n	8006322 <__swhatbuf_r+0x22>
 8006312:	2300      	movs	r3, #0
 8006314:	602b      	str	r3, [r5, #0]
 8006316:	89b3      	ldrh	r3, [r6, #12]
 8006318:	061a      	lsls	r2, r3, #24
 800631a:	d410      	bmi.n	800633e <__swhatbuf_r+0x3e>
 800631c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006320:	e00e      	b.n	8006340 <__swhatbuf_r+0x40>
 8006322:	466a      	mov	r2, sp
 8006324:	f000 fdaa 	bl	8006e7c <_fstat_r>
 8006328:	2800      	cmp	r0, #0
 800632a:	dbf2      	blt.n	8006312 <__swhatbuf_r+0x12>
 800632c:	9a01      	ldr	r2, [sp, #4]
 800632e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006332:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006336:	425a      	negs	r2, r3
 8006338:	415a      	adcs	r2, r3
 800633a:	602a      	str	r2, [r5, #0]
 800633c:	e7ee      	b.n	800631c <__swhatbuf_r+0x1c>
 800633e:	2340      	movs	r3, #64	; 0x40
 8006340:	2000      	movs	r0, #0
 8006342:	6023      	str	r3, [r4, #0]
 8006344:	b016      	add	sp, #88	; 0x58
 8006346:	bd70      	pop	{r4, r5, r6, pc}

08006348 <__smakebuf_r>:
 8006348:	898b      	ldrh	r3, [r1, #12]
 800634a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800634c:	079d      	lsls	r5, r3, #30
 800634e:	4606      	mov	r6, r0
 8006350:	460c      	mov	r4, r1
 8006352:	d507      	bpl.n	8006364 <__smakebuf_r+0x1c>
 8006354:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006358:	6023      	str	r3, [r4, #0]
 800635a:	6123      	str	r3, [r4, #16]
 800635c:	2301      	movs	r3, #1
 800635e:	6163      	str	r3, [r4, #20]
 8006360:	b002      	add	sp, #8
 8006362:	bd70      	pop	{r4, r5, r6, pc}
 8006364:	ab01      	add	r3, sp, #4
 8006366:	466a      	mov	r2, sp
 8006368:	f7ff ffca 	bl	8006300 <__swhatbuf_r>
 800636c:	9900      	ldr	r1, [sp, #0]
 800636e:	4605      	mov	r5, r0
 8006370:	4630      	mov	r0, r6
 8006372:	f000 fb73 	bl	8006a5c <_malloc_r>
 8006376:	b948      	cbnz	r0, 800638c <__smakebuf_r+0x44>
 8006378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800637c:	059a      	lsls	r2, r3, #22
 800637e:	d4ef      	bmi.n	8006360 <__smakebuf_r+0x18>
 8006380:	f023 0303 	bic.w	r3, r3, #3
 8006384:	f043 0302 	orr.w	r3, r3, #2
 8006388:	81a3      	strh	r3, [r4, #12]
 800638a:	e7e3      	b.n	8006354 <__smakebuf_r+0xc>
 800638c:	4b0d      	ldr	r3, [pc, #52]	; (80063c4 <__smakebuf_r+0x7c>)
 800638e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006390:	89a3      	ldrh	r3, [r4, #12]
 8006392:	6020      	str	r0, [r4, #0]
 8006394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006398:	81a3      	strh	r3, [r4, #12]
 800639a:	9b00      	ldr	r3, [sp, #0]
 800639c:	6163      	str	r3, [r4, #20]
 800639e:	9b01      	ldr	r3, [sp, #4]
 80063a0:	6120      	str	r0, [r4, #16]
 80063a2:	b15b      	cbz	r3, 80063bc <__smakebuf_r+0x74>
 80063a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063a8:	4630      	mov	r0, r6
 80063aa:	f000 fd79 	bl	8006ea0 <_isatty_r>
 80063ae:	b128      	cbz	r0, 80063bc <__smakebuf_r+0x74>
 80063b0:	89a3      	ldrh	r3, [r4, #12]
 80063b2:	f023 0303 	bic.w	r3, r3, #3
 80063b6:	f043 0301 	orr.w	r3, r3, #1
 80063ba:	81a3      	strh	r3, [r4, #12]
 80063bc:	89a3      	ldrh	r3, [r4, #12]
 80063be:	431d      	orrs	r5, r3
 80063c0:	81a5      	strh	r5, [r4, #12]
 80063c2:	e7cd      	b.n	8006360 <__smakebuf_r+0x18>
 80063c4:	08006199 	.word	0x08006199

080063c8 <malloc>:
 80063c8:	4b02      	ldr	r3, [pc, #8]	; (80063d4 <malloc+0xc>)
 80063ca:	4601      	mov	r1, r0
 80063cc:	6818      	ldr	r0, [r3, #0]
 80063ce:	f000 bb45 	b.w	8006a5c <_malloc_r>
 80063d2:	bf00      	nop
 80063d4:	20000010 	.word	0x20000010

080063d8 <memcpy>:
 80063d8:	b510      	push	{r4, lr}
 80063da:	1e43      	subs	r3, r0, #1
 80063dc:	440a      	add	r2, r1
 80063de:	4291      	cmp	r1, r2
 80063e0:	d100      	bne.n	80063e4 <memcpy+0xc>
 80063e2:	bd10      	pop	{r4, pc}
 80063e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063ec:	e7f7      	b.n	80063de <memcpy+0x6>

080063ee <_Balloc>:
 80063ee:	b570      	push	{r4, r5, r6, lr}
 80063f0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80063f2:	4604      	mov	r4, r0
 80063f4:	460e      	mov	r6, r1
 80063f6:	b93d      	cbnz	r5, 8006408 <_Balloc+0x1a>
 80063f8:	2010      	movs	r0, #16
 80063fa:	f7ff ffe5 	bl	80063c8 <malloc>
 80063fe:	6260      	str	r0, [r4, #36]	; 0x24
 8006400:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006404:	6005      	str	r5, [r0, #0]
 8006406:	60c5      	str	r5, [r0, #12]
 8006408:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800640a:	68eb      	ldr	r3, [r5, #12]
 800640c:	b183      	cbz	r3, 8006430 <_Balloc+0x42>
 800640e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006416:	b9b8      	cbnz	r0, 8006448 <_Balloc+0x5a>
 8006418:	2101      	movs	r1, #1
 800641a:	fa01 f506 	lsl.w	r5, r1, r6
 800641e:	1d6a      	adds	r2, r5, #5
 8006420:	0092      	lsls	r2, r2, #2
 8006422:	4620      	mov	r0, r4
 8006424:	f000 fabe 	bl	80069a4 <_calloc_r>
 8006428:	b160      	cbz	r0, 8006444 <_Balloc+0x56>
 800642a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800642e:	e00e      	b.n	800644e <_Balloc+0x60>
 8006430:	2221      	movs	r2, #33	; 0x21
 8006432:	2104      	movs	r1, #4
 8006434:	4620      	mov	r0, r4
 8006436:	f000 fab5 	bl	80069a4 <_calloc_r>
 800643a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800643c:	60e8      	str	r0, [r5, #12]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1e4      	bne.n	800640e <_Balloc+0x20>
 8006444:	2000      	movs	r0, #0
 8006446:	bd70      	pop	{r4, r5, r6, pc}
 8006448:	6802      	ldr	r2, [r0, #0]
 800644a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800644e:	2300      	movs	r3, #0
 8006450:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006454:	e7f7      	b.n	8006446 <_Balloc+0x58>

08006456 <_Bfree>:
 8006456:	b570      	push	{r4, r5, r6, lr}
 8006458:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800645a:	4606      	mov	r6, r0
 800645c:	460d      	mov	r5, r1
 800645e:	b93c      	cbnz	r4, 8006470 <_Bfree+0x1a>
 8006460:	2010      	movs	r0, #16
 8006462:	f7ff ffb1 	bl	80063c8 <malloc>
 8006466:	6270      	str	r0, [r6, #36]	; 0x24
 8006468:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800646c:	6004      	str	r4, [r0, #0]
 800646e:	60c4      	str	r4, [r0, #12]
 8006470:	b13d      	cbz	r5, 8006482 <_Bfree+0x2c>
 8006472:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006474:	686a      	ldr	r2, [r5, #4]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800647c:	6029      	str	r1, [r5, #0]
 800647e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006482:	bd70      	pop	{r4, r5, r6, pc}

08006484 <__multadd>:
 8006484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006488:	690d      	ldr	r5, [r1, #16]
 800648a:	461f      	mov	r7, r3
 800648c:	4606      	mov	r6, r0
 800648e:	460c      	mov	r4, r1
 8006490:	f101 0c14 	add.w	ip, r1, #20
 8006494:	2300      	movs	r3, #0
 8006496:	f8dc 0000 	ldr.w	r0, [ip]
 800649a:	b281      	uxth	r1, r0
 800649c:	fb02 7101 	mla	r1, r2, r1, r7
 80064a0:	0c0f      	lsrs	r7, r1, #16
 80064a2:	0c00      	lsrs	r0, r0, #16
 80064a4:	fb02 7000 	mla	r0, r2, r0, r7
 80064a8:	b289      	uxth	r1, r1
 80064aa:	3301      	adds	r3, #1
 80064ac:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80064b0:	429d      	cmp	r5, r3
 80064b2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80064b6:	f84c 1b04 	str.w	r1, [ip], #4
 80064ba:	dcec      	bgt.n	8006496 <__multadd+0x12>
 80064bc:	b1d7      	cbz	r7, 80064f4 <__multadd+0x70>
 80064be:	68a3      	ldr	r3, [r4, #8]
 80064c0:	42ab      	cmp	r3, r5
 80064c2:	dc12      	bgt.n	80064ea <__multadd+0x66>
 80064c4:	6861      	ldr	r1, [r4, #4]
 80064c6:	4630      	mov	r0, r6
 80064c8:	3101      	adds	r1, #1
 80064ca:	f7ff ff90 	bl	80063ee <_Balloc>
 80064ce:	6922      	ldr	r2, [r4, #16]
 80064d0:	3202      	adds	r2, #2
 80064d2:	f104 010c 	add.w	r1, r4, #12
 80064d6:	4680      	mov	r8, r0
 80064d8:	0092      	lsls	r2, r2, #2
 80064da:	300c      	adds	r0, #12
 80064dc:	f7ff ff7c 	bl	80063d8 <memcpy>
 80064e0:	4621      	mov	r1, r4
 80064e2:	4630      	mov	r0, r6
 80064e4:	f7ff ffb7 	bl	8006456 <_Bfree>
 80064e8:	4644      	mov	r4, r8
 80064ea:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80064ee:	3501      	adds	r5, #1
 80064f0:	615f      	str	r7, [r3, #20]
 80064f2:	6125      	str	r5, [r4, #16]
 80064f4:	4620      	mov	r0, r4
 80064f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080064fa <__hi0bits>:
 80064fa:	0c02      	lsrs	r2, r0, #16
 80064fc:	0412      	lsls	r2, r2, #16
 80064fe:	4603      	mov	r3, r0
 8006500:	b9b2      	cbnz	r2, 8006530 <__hi0bits+0x36>
 8006502:	0403      	lsls	r3, r0, #16
 8006504:	2010      	movs	r0, #16
 8006506:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800650a:	bf04      	itt	eq
 800650c:	021b      	lsleq	r3, r3, #8
 800650e:	3008      	addeq	r0, #8
 8006510:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006514:	bf04      	itt	eq
 8006516:	011b      	lsleq	r3, r3, #4
 8006518:	3004      	addeq	r0, #4
 800651a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800651e:	bf04      	itt	eq
 8006520:	009b      	lsleq	r3, r3, #2
 8006522:	3002      	addeq	r0, #2
 8006524:	2b00      	cmp	r3, #0
 8006526:	db06      	blt.n	8006536 <__hi0bits+0x3c>
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	d503      	bpl.n	8006534 <__hi0bits+0x3a>
 800652c:	3001      	adds	r0, #1
 800652e:	4770      	bx	lr
 8006530:	2000      	movs	r0, #0
 8006532:	e7e8      	b.n	8006506 <__hi0bits+0xc>
 8006534:	2020      	movs	r0, #32
 8006536:	4770      	bx	lr

08006538 <__lo0bits>:
 8006538:	6803      	ldr	r3, [r0, #0]
 800653a:	f013 0207 	ands.w	r2, r3, #7
 800653e:	4601      	mov	r1, r0
 8006540:	d00b      	beq.n	800655a <__lo0bits+0x22>
 8006542:	07da      	lsls	r2, r3, #31
 8006544:	d423      	bmi.n	800658e <__lo0bits+0x56>
 8006546:	0798      	lsls	r0, r3, #30
 8006548:	bf49      	itett	mi
 800654a:	085b      	lsrmi	r3, r3, #1
 800654c:	089b      	lsrpl	r3, r3, #2
 800654e:	2001      	movmi	r0, #1
 8006550:	600b      	strmi	r3, [r1, #0]
 8006552:	bf5c      	itt	pl
 8006554:	600b      	strpl	r3, [r1, #0]
 8006556:	2002      	movpl	r0, #2
 8006558:	4770      	bx	lr
 800655a:	b298      	uxth	r0, r3
 800655c:	b9a8      	cbnz	r0, 800658a <__lo0bits+0x52>
 800655e:	0c1b      	lsrs	r3, r3, #16
 8006560:	2010      	movs	r0, #16
 8006562:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006566:	bf04      	itt	eq
 8006568:	0a1b      	lsreq	r3, r3, #8
 800656a:	3008      	addeq	r0, #8
 800656c:	071a      	lsls	r2, r3, #28
 800656e:	bf04      	itt	eq
 8006570:	091b      	lsreq	r3, r3, #4
 8006572:	3004      	addeq	r0, #4
 8006574:	079a      	lsls	r2, r3, #30
 8006576:	bf04      	itt	eq
 8006578:	089b      	lsreq	r3, r3, #2
 800657a:	3002      	addeq	r0, #2
 800657c:	07da      	lsls	r2, r3, #31
 800657e:	d402      	bmi.n	8006586 <__lo0bits+0x4e>
 8006580:	085b      	lsrs	r3, r3, #1
 8006582:	d006      	beq.n	8006592 <__lo0bits+0x5a>
 8006584:	3001      	adds	r0, #1
 8006586:	600b      	str	r3, [r1, #0]
 8006588:	4770      	bx	lr
 800658a:	4610      	mov	r0, r2
 800658c:	e7e9      	b.n	8006562 <__lo0bits+0x2a>
 800658e:	2000      	movs	r0, #0
 8006590:	4770      	bx	lr
 8006592:	2020      	movs	r0, #32
 8006594:	4770      	bx	lr

08006596 <__i2b>:
 8006596:	b510      	push	{r4, lr}
 8006598:	460c      	mov	r4, r1
 800659a:	2101      	movs	r1, #1
 800659c:	f7ff ff27 	bl	80063ee <_Balloc>
 80065a0:	2201      	movs	r2, #1
 80065a2:	6144      	str	r4, [r0, #20]
 80065a4:	6102      	str	r2, [r0, #16]
 80065a6:	bd10      	pop	{r4, pc}

080065a8 <__multiply>:
 80065a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ac:	4614      	mov	r4, r2
 80065ae:	690a      	ldr	r2, [r1, #16]
 80065b0:	6923      	ldr	r3, [r4, #16]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	bfb8      	it	lt
 80065b6:	460b      	movlt	r3, r1
 80065b8:	4688      	mov	r8, r1
 80065ba:	bfbc      	itt	lt
 80065bc:	46a0      	movlt	r8, r4
 80065be:	461c      	movlt	r4, r3
 80065c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80065c4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80065c8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80065cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80065d0:	eb07 0609 	add.w	r6, r7, r9
 80065d4:	42b3      	cmp	r3, r6
 80065d6:	bfb8      	it	lt
 80065d8:	3101      	addlt	r1, #1
 80065da:	f7ff ff08 	bl	80063ee <_Balloc>
 80065de:	f100 0514 	add.w	r5, r0, #20
 80065e2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80065e6:	462b      	mov	r3, r5
 80065e8:	2200      	movs	r2, #0
 80065ea:	4573      	cmp	r3, lr
 80065ec:	d316      	bcc.n	800661c <__multiply+0x74>
 80065ee:	f104 0214 	add.w	r2, r4, #20
 80065f2:	f108 0114 	add.w	r1, r8, #20
 80065f6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80065fa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80065fe:	9300      	str	r3, [sp, #0]
 8006600:	9b00      	ldr	r3, [sp, #0]
 8006602:	9201      	str	r2, [sp, #4]
 8006604:	4293      	cmp	r3, r2
 8006606:	d80c      	bhi.n	8006622 <__multiply+0x7a>
 8006608:	2e00      	cmp	r6, #0
 800660a:	dd03      	ble.n	8006614 <__multiply+0x6c>
 800660c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006610:	2b00      	cmp	r3, #0
 8006612:	d05d      	beq.n	80066d0 <__multiply+0x128>
 8006614:	6106      	str	r6, [r0, #16]
 8006616:	b003      	add	sp, #12
 8006618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800661c:	f843 2b04 	str.w	r2, [r3], #4
 8006620:	e7e3      	b.n	80065ea <__multiply+0x42>
 8006622:	f8b2 b000 	ldrh.w	fp, [r2]
 8006626:	f1bb 0f00 	cmp.w	fp, #0
 800662a:	d023      	beq.n	8006674 <__multiply+0xcc>
 800662c:	4689      	mov	r9, r1
 800662e:	46ac      	mov	ip, r5
 8006630:	f04f 0800 	mov.w	r8, #0
 8006634:	f859 4b04 	ldr.w	r4, [r9], #4
 8006638:	f8dc a000 	ldr.w	sl, [ip]
 800663c:	b2a3      	uxth	r3, r4
 800663e:	fa1f fa8a 	uxth.w	sl, sl
 8006642:	fb0b a303 	mla	r3, fp, r3, sl
 8006646:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800664a:	f8dc 4000 	ldr.w	r4, [ip]
 800664e:	4443      	add	r3, r8
 8006650:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006654:	fb0b 840a 	mla	r4, fp, sl, r8
 8006658:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800665c:	46e2      	mov	sl, ip
 800665e:	b29b      	uxth	r3, r3
 8006660:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006664:	454f      	cmp	r7, r9
 8006666:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800666a:	f84a 3b04 	str.w	r3, [sl], #4
 800666e:	d82b      	bhi.n	80066c8 <__multiply+0x120>
 8006670:	f8cc 8004 	str.w	r8, [ip, #4]
 8006674:	9b01      	ldr	r3, [sp, #4]
 8006676:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800667a:	3204      	adds	r2, #4
 800667c:	f1ba 0f00 	cmp.w	sl, #0
 8006680:	d020      	beq.n	80066c4 <__multiply+0x11c>
 8006682:	682b      	ldr	r3, [r5, #0]
 8006684:	4689      	mov	r9, r1
 8006686:	46a8      	mov	r8, r5
 8006688:	f04f 0b00 	mov.w	fp, #0
 800668c:	f8b9 c000 	ldrh.w	ip, [r9]
 8006690:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006694:	fb0a 440c 	mla	r4, sl, ip, r4
 8006698:	445c      	add	r4, fp
 800669a:	46c4      	mov	ip, r8
 800669c:	b29b      	uxth	r3, r3
 800669e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80066a2:	f84c 3b04 	str.w	r3, [ip], #4
 80066a6:	f859 3b04 	ldr.w	r3, [r9], #4
 80066aa:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80066ae:	0c1b      	lsrs	r3, r3, #16
 80066b0:	fb0a b303 	mla	r3, sl, r3, fp
 80066b4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80066b8:	454f      	cmp	r7, r9
 80066ba:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80066be:	d805      	bhi.n	80066cc <__multiply+0x124>
 80066c0:	f8c8 3004 	str.w	r3, [r8, #4]
 80066c4:	3504      	adds	r5, #4
 80066c6:	e79b      	b.n	8006600 <__multiply+0x58>
 80066c8:	46d4      	mov	ip, sl
 80066ca:	e7b3      	b.n	8006634 <__multiply+0x8c>
 80066cc:	46e0      	mov	r8, ip
 80066ce:	e7dd      	b.n	800668c <__multiply+0xe4>
 80066d0:	3e01      	subs	r6, #1
 80066d2:	e799      	b.n	8006608 <__multiply+0x60>

080066d4 <__pow5mult>:
 80066d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066d8:	4615      	mov	r5, r2
 80066da:	f012 0203 	ands.w	r2, r2, #3
 80066de:	4606      	mov	r6, r0
 80066e0:	460f      	mov	r7, r1
 80066e2:	d007      	beq.n	80066f4 <__pow5mult+0x20>
 80066e4:	3a01      	subs	r2, #1
 80066e6:	4c21      	ldr	r4, [pc, #132]	; (800676c <__pow5mult+0x98>)
 80066e8:	2300      	movs	r3, #0
 80066ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80066ee:	f7ff fec9 	bl	8006484 <__multadd>
 80066f2:	4607      	mov	r7, r0
 80066f4:	10ad      	asrs	r5, r5, #2
 80066f6:	d035      	beq.n	8006764 <__pow5mult+0x90>
 80066f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80066fa:	b93c      	cbnz	r4, 800670c <__pow5mult+0x38>
 80066fc:	2010      	movs	r0, #16
 80066fe:	f7ff fe63 	bl	80063c8 <malloc>
 8006702:	6270      	str	r0, [r6, #36]	; 0x24
 8006704:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006708:	6004      	str	r4, [r0, #0]
 800670a:	60c4      	str	r4, [r0, #12]
 800670c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006710:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006714:	b94c      	cbnz	r4, 800672a <__pow5mult+0x56>
 8006716:	f240 2171 	movw	r1, #625	; 0x271
 800671a:	4630      	mov	r0, r6
 800671c:	f7ff ff3b 	bl	8006596 <__i2b>
 8006720:	2300      	movs	r3, #0
 8006722:	f8c8 0008 	str.w	r0, [r8, #8]
 8006726:	4604      	mov	r4, r0
 8006728:	6003      	str	r3, [r0, #0]
 800672a:	f04f 0800 	mov.w	r8, #0
 800672e:	07eb      	lsls	r3, r5, #31
 8006730:	d50a      	bpl.n	8006748 <__pow5mult+0x74>
 8006732:	4639      	mov	r1, r7
 8006734:	4622      	mov	r2, r4
 8006736:	4630      	mov	r0, r6
 8006738:	f7ff ff36 	bl	80065a8 <__multiply>
 800673c:	4639      	mov	r1, r7
 800673e:	4681      	mov	r9, r0
 8006740:	4630      	mov	r0, r6
 8006742:	f7ff fe88 	bl	8006456 <_Bfree>
 8006746:	464f      	mov	r7, r9
 8006748:	106d      	asrs	r5, r5, #1
 800674a:	d00b      	beq.n	8006764 <__pow5mult+0x90>
 800674c:	6820      	ldr	r0, [r4, #0]
 800674e:	b938      	cbnz	r0, 8006760 <__pow5mult+0x8c>
 8006750:	4622      	mov	r2, r4
 8006752:	4621      	mov	r1, r4
 8006754:	4630      	mov	r0, r6
 8006756:	f7ff ff27 	bl	80065a8 <__multiply>
 800675a:	6020      	str	r0, [r4, #0]
 800675c:	f8c0 8000 	str.w	r8, [r0]
 8006760:	4604      	mov	r4, r0
 8006762:	e7e4      	b.n	800672e <__pow5mult+0x5a>
 8006764:	4638      	mov	r0, r7
 8006766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800676a:	bf00      	nop
 800676c:	08007148 	.word	0x08007148

08006770 <__lshift>:
 8006770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006774:	460c      	mov	r4, r1
 8006776:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800677a:	6923      	ldr	r3, [r4, #16]
 800677c:	6849      	ldr	r1, [r1, #4]
 800677e:	eb0a 0903 	add.w	r9, sl, r3
 8006782:	68a3      	ldr	r3, [r4, #8]
 8006784:	4607      	mov	r7, r0
 8006786:	4616      	mov	r6, r2
 8006788:	f109 0501 	add.w	r5, r9, #1
 800678c:	42ab      	cmp	r3, r5
 800678e:	db32      	blt.n	80067f6 <__lshift+0x86>
 8006790:	4638      	mov	r0, r7
 8006792:	f7ff fe2c 	bl	80063ee <_Balloc>
 8006796:	2300      	movs	r3, #0
 8006798:	4680      	mov	r8, r0
 800679a:	f100 0114 	add.w	r1, r0, #20
 800679e:	461a      	mov	r2, r3
 80067a0:	4553      	cmp	r3, sl
 80067a2:	db2b      	blt.n	80067fc <__lshift+0x8c>
 80067a4:	6920      	ldr	r0, [r4, #16]
 80067a6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80067aa:	f104 0314 	add.w	r3, r4, #20
 80067ae:	f016 021f 	ands.w	r2, r6, #31
 80067b2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80067b6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80067ba:	d025      	beq.n	8006808 <__lshift+0x98>
 80067bc:	f1c2 0e20 	rsb	lr, r2, #32
 80067c0:	2000      	movs	r0, #0
 80067c2:	681e      	ldr	r6, [r3, #0]
 80067c4:	468a      	mov	sl, r1
 80067c6:	4096      	lsls	r6, r2
 80067c8:	4330      	orrs	r0, r6
 80067ca:	f84a 0b04 	str.w	r0, [sl], #4
 80067ce:	f853 0b04 	ldr.w	r0, [r3], #4
 80067d2:	459c      	cmp	ip, r3
 80067d4:	fa20 f00e 	lsr.w	r0, r0, lr
 80067d8:	d814      	bhi.n	8006804 <__lshift+0x94>
 80067da:	6048      	str	r0, [r1, #4]
 80067dc:	b108      	cbz	r0, 80067e2 <__lshift+0x72>
 80067de:	f109 0502 	add.w	r5, r9, #2
 80067e2:	3d01      	subs	r5, #1
 80067e4:	4638      	mov	r0, r7
 80067e6:	f8c8 5010 	str.w	r5, [r8, #16]
 80067ea:	4621      	mov	r1, r4
 80067ec:	f7ff fe33 	bl	8006456 <_Bfree>
 80067f0:	4640      	mov	r0, r8
 80067f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067f6:	3101      	adds	r1, #1
 80067f8:	005b      	lsls	r3, r3, #1
 80067fa:	e7c7      	b.n	800678c <__lshift+0x1c>
 80067fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006800:	3301      	adds	r3, #1
 8006802:	e7cd      	b.n	80067a0 <__lshift+0x30>
 8006804:	4651      	mov	r1, sl
 8006806:	e7dc      	b.n	80067c2 <__lshift+0x52>
 8006808:	3904      	subs	r1, #4
 800680a:	f853 2b04 	ldr.w	r2, [r3], #4
 800680e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006812:	459c      	cmp	ip, r3
 8006814:	d8f9      	bhi.n	800680a <__lshift+0x9a>
 8006816:	e7e4      	b.n	80067e2 <__lshift+0x72>

08006818 <__mcmp>:
 8006818:	6903      	ldr	r3, [r0, #16]
 800681a:	690a      	ldr	r2, [r1, #16]
 800681c:	1a9b      	subs	r3, r3, r2
 800681e:	b530      	push	{r4, r5, lr}
 8006820:	d10c      	bne.n	800683c <__mcmp+0x24>
 8006822:	0092      	lsls	r2, r2, #2
 8006824:	3014      	adds	r0, #20
 8006826:	3114      	adds	r1, #20
 8006828:	1884      	adds	r4, r0, r2
 800682a:	4411      	add	r1, r2
 800682c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006830:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006834:	4295      	cmp	r5, r2
 8006836:	d003      	beq.n	8006840 <__mcmp+0x28>
 8006838:	d305      	bcc.n	8006846 <__mcmp+0x2e>
 800683a:	2301      	movs	r3, #1
 800683c:	4618      	mov	r0, r3
 800683e:	bd30      	pop	{r4, r5, pc}
 8006840:	42a0      	cmp	r0, r4
 8006842:	d3f3      	bcc.n	800682c <__mcmp+0x14>
 8006844:	e7fa      	b.n	800683c <__mcmp+0x24>
 8006846:	f04f 33ff 	mov.w	r3, #4294967295
 800684a:	e7f7      	b.n	800683c <__mcmp+0x24>

0800684c <__mdiff>:
 800684c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006850:	460d      	mov	r5, r1
 8006852:	4607      	mov	r7, r0
 8006854:	4611      	mov	r1, r2
 8006856:	4628      	mov	r0, r5
 8006858:	4614      	mov	r4, r2
 800685a:	f7ff ffdd 	bl	8006818 <__mcmp>
 800685e:	1e06      	subs	r6, r0, #0
 8006860:	d108      	bne.n	8006874 <__mdiff+0x28>
 8006862:	4631      	mov	r1, r6
 8006864:	4638      	mov	r0, r7
 8006866:	f7ff fdc2 	bl	80063ee <_Balloc>
 800686a:	2301      	movs	r3, #1
 800686c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006874:	bfa4      	itt	ge
 8006876:	4623      	movge	r3, r4
 8006878:	462c      	movge	r4, r5
 800687a:	4638      	mov	r0, r7
 800687c:	6861      	ldr	r1, [r4, #4]
 800687e:	bfa6      	itte	ge
 8006880:	461d      	movge	r5, r3
 8006882:	2600      	movge	r6, #0
 8006884:	2601      	movlt	r6, #1
 8006886:	f7ff fdb2 	bl	80063ee <_Balloc>
 800688a:	692b      	ldr	r3, [r5, #16]
 800688c:	60c6      	str	r6, [r0, #12]
 800688e:	6926      	ldr	r6, [r4, #16]
 8006890:	f105 0914 	add.w	r9, r5, #20
 8006894:	f104 0214 	add.w	r2, r4, #20
 8006898:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800689c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80068a0:	f100 0514 	add.w	r5, r0, #20
 80068a4:	f04f 0e00 	mov.w	lr, #0
 80068a8:	f852 ab04 	ldr.w	sl, [r2], #4
 80068ac:	f859 4b04 	ldr.w	r4, [r9], #4
 80068b0:	fa1e f18a 	uxtah	r1, lr, sl
 80068b4:	b2a3      	uxth	r3, r4
 80068b6:	1ac9      	subs	r1, r1, r3
 80068b8:	0c23      	lsrs	r3, r4, #16
 80068ba:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80068be:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80068c2:	b289      	uxth	r1, r1
 80068c4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80068c8:	45c8      	cmp	r8, r9
 80068ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80068ce:	4694      	mov	ip, r2
 80068d0:	f845 3b04 	str.w	r3, [r5], #4
 80068d4:	d8e8      	bhi.n	80068a8 <__mdiff+0x5c>
 80068d6:	45bc      	cmp	ip, r7
 80068d8:	d304      	bcc.n	80068e4 <__mdiff+0x98>
 80068da:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80068de:	b183      	cbz	r3, 8006902 <__mdiff+0xb6>
 80068e0:	6106      	str	r6, [r0, #16]
 80068e2:	e7c5      	b.n	8006870 <__mdiff+0x24>
 80068e4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80068e8:	fa1e f381 	uxtah	r3, lr, r1
 80068ec:	141a      	asrs	r2, r3, #16
 80068ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068f8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80068fc:	f845 3b04 	str.w	r3, [r5], #4
 8006900:	e7e9      	b.n	80068d6 <__mdiff+0x8a>
 8006902:	3e01      	subs	r6, #1
 8006904:	e7e9      	b.n	80068da <__mdiff+0x8e>

08006906 <__d2b>:
 8006906:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800690a:	460e      	mov	r6, r1
 800690c:	2101      	movs	r1, #1
 800690e:	ec59 8b10 	vmov	r8, r9, d0
 8006912:	4615      	mov	r5, r2
 8006914:	f7ff fd6b 	bl	80063ee <_Balloc>
 8006918:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800691c:	4607      	mov	r7, r0
 800691e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006922:	bb34      	cbnz	r4, 8006972 <__d2b+0x6c>
 8006924:	9301      	str	r3, [sp, #4]
 8006926:	f1b8 0300 	subs.w	r3, r8, #0
 800692a:	d027      	beq.n	800697c <__d2b+0x76>
 800692c:	a802      	add	r0, sp, #8
 800692e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006932:	f7ff fe01 	bl	8006538 <__lo0bits>
 8006936:	9900      	ldr	r1, [sp, #0]
 8006938:	b1f0      	cbz	r0, 8006978 <__d2b+0x72>
 800693a:	9a01      	ldr	r2, [sp, #4]
 800693c:	f1c0 0320 	rsb	r3, r0, #32
 8006940:	fa02 f303 	lsl.w	r3, r2, r3
 8006944:	430b      	orrs	r3, r1
 8006946:	40c2      	lsrs	r2, r0
 8006948:	617b      	str	r3, [r7, #20]
 800694a:	9201      	str	r2, [sp, #4]
 800694c:	9b01      	ldr	r3, [sp, #4]
 800694e:	61bb      	str	r3, [r7, #24]
 8006950:	2b00      	cmp	r3, #0
 8006952:	bf14      	ite	ne
 8006954:	2102      	movne	r1, #2
 8006956:	2101      	moveq	r1, #1
 8006958:	6139      	str	r1, [r7, #16]
 800695a:	b1c4      	cbz	r4, 800698e <__d2b+0x88>
 800695c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006960:	4404      	add	r4, r0
 8006962:	6034      	str	r4, [r6, #0]
 8006964:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006968:	6028      	str	r0, [r5, #0]
 800696a:	4638      	mov	r0, r7
 800696c:	b003      	add	sp, #12
 800696e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006972:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006976:	e7d5      	b.n	8006924 <__d2b+0x1e>
 8006978:	6179      	str	r1, [r7, #20]
 800697a:	e7e7      	b.n	800694c <__d2b+0x46>
 800697c:	a801      	add	r0, sp, #4
 800697e:	f7ff fddb 	bl	8006538 <__lo0bits>
 8006982:	9b01      	ldr	r3, [sp, #4]
 8006984:	617b      	str	r3, [r7, #20]
 8006986:	2101      	movs	r1, #1
 8006988:	6139      	str	r1, [r7, #16]
 800698a:	3020      	adds	r0, #32
 800698c:	e7e5      	b.n	800695a <__d2b+0x54>
 800698e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006992:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006996:	6030      	str	r0, [r6, #0]
 8006998:	6918      	ldr	r0, [r3, #16]
 800699a:	f7ff fdae 	bl	80064fa <__hi0bits>
 800699e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80069a2:	e7e1      	b.n	8006968 <__d2b+0x62>

080069a4 <_calloc_r>:
 80069a4:	b538      	push	{r3, r4, r5, lr}
 80069a6:	fb02 f401 	mul.w	r4, r2, r1
 80069aa:	4621      	mov	r1, r4
 80069ac:	f000 f856 	bl	8006a5c <_malloc_r>
 80069b0:	4605      	mov	r5, r0
 80069b2:	b118      	cbz	r0, 80069bc <_calloc_r+0x18>
 80069b4:	4622      	mov	r2, r4
 80069b6:	2100      	movs	r1, #0
 80069b8:	f7fd fe7e 	bl	80046b8 <memset>
 80069bc:	4628      	mov	r0, r5
 80069be:	bd38      	pop	{r3, r4, r5, pc}

080069c0 <_free_r>:
 80069c0:	b538      	push	{r3, r4, r5, lr}
 80069c2:	4605      	mov	r5, r0
 80069c4:	2900      	cmp	r1, #0
 80069c6:	d045      	beq.n	8006a54 <_free_r+0x94>
 80069c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069cc:	1f0c      	subs	r4, r1, #4
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	bfb8      	it	lt
 80069d2:	18e4      	addlt	r4, r4, r3
 80069d4:	f000 fa98 	bl	8006f08 <__malloc_lock>
 80069d8:	4a1f      	ldr	r2, [pc, #124]	; (8006a58 <_free_r+0x98>)
 80069da:	6813      	ldr	r3, [r2, #0]
 80069dc:	4610      	mov	r0, r2
 80069de:	b933      	cbnz	r3, 80069ee <_free_r+0x2e>
 80069e0:	6063      	str	r3, [r4, #4]
 80069e2:	6014      	str	r4, [r2, #0]
 80069e4:	4628      	mov	r0, r5
 80069e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069ea:	f000 ba8e 	b.w	8006f0a <__malloc_unlock>
 80069ee:	42a3      	cmp	r3, r4
 80069f0:	d90c      	bls.n	8006a0c <_free_r+0x4c>
 80069f2:	6821      	ldr	r1, [r4, #0]
 80069f4:	1862      	adds	r2, r4, r1
 80069f6:	4293      	cmp	r3, r2
 80069f8:	bf04      	itt	eq
 80069fa:	681a      	ldreq	r2, [r3, #0]
 80069fc:	685b      	ldreq	r3, [r3, #4]
 80069fe:	6063      	str	r3, [r4, #4]
 8006a00:	bf04      	itt	eq
 8006a02:	1852      	addeq	r2, r2, r1
 8006a04:	6022      	streq	r2, [r4, #0]
 8006a06:	6004      	str	r4, [r0, #0]
 8006a08:	e7ec      	b.n	80069e4 <_free_r+0x24>
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	b10a      	cbz	r2, 8006a14 <_free_r+0x54>
 8006a10:	42a2      	cmp	r2, r4
 8006a12:	d9fa      	bls.n	8006a0a <_free_r+0x4a>
 8006a14:	6819      	ldr	r1, [r3, #0]
 8006a16:	1858      	adds	r0, r3, r1
 8006a18:	42a0      	cmp	r0, r4
 8006a1a:	d10b      	bne.n	8006a34 <_free_r+0x74>
 8006a1c:	6820      	ldr	r0, [r4, #0]
 8006a1e:	4401      	add	r1, r0
 8006a20:	1858      	adds	r0, r3, r1
 8006a22:	4282      	cmp	r2, r0
 8006a24:	6019      	str	r1, [r3, #0]
 8006a26:	d1dd      	bne.n	80069e4 <_free_r+0x24>
 8006a28:	6810      	ldr	r0, [r2, #0]
 8006a2a:	6852      	ldr	r2, [r2, #4]
 8006a2c:	605a      	str	r2, [r3, #4]
 8006a2e:	4401      	add	r1, r0
 8006a30:	6019      	str	r1, [r3, #0]
 8006a32:	e7d7      	b.n	80069e4 <_free_r+0x24>
 8006a34:	d902      	bls.n	8006a3c <_free_r+0x7c>
 8006a36:	230c      	movs	r3, #12
 8006a38:	602b      	str	r3, [r5, #0]
 8006a3a:	e7d3      	b.n	80069e4 <_free_r+0x24>
 8006a3c:	6820      	ldr	r0, [r4, #0]
 8006a3e:	1821      	adds	r1, r4, r0
 8006a40:	428a      	cmp	r2, r1
 8006a42:	bf04      	itt	eq
 8006a44:	6811      	ldreq	r1, [r2, #0]
 8006a46:	6852      	ldreq	r2, [r2, #4]
 8006a48:	6062      	str	r2, [r4, #4]
 8006a4a:	bf04      	itt	eq
 8006a4c:	1809      	addeq	r1, r1, r0
 8006a4e:	6021      	streq	r1, [r4, #0]
 8006a50:	605c      	str	r4, [r3, #4]
 8006a52:	e7c7      	b.n	80069e4 <_free_r+0x24>
 8006a54:	bd38      	pop	{r3, r4, r5, pc}
 8006a56:	bf00      	nop
 8006a58:	20000208 	.word	0x20000208

08006a5c <_malloc_r>:
 8006a5c:	b570      	push	{r4, r5, r6, lr}
 8006a5e:	1ccd      	adds	r5, r1, #3
 8006a60:	f025 0503 	bic.w	r5, r5, #3
 8006a64:	3508      	adds	r5, #8
 8006a66:	2d0c      	cmp	r5, #12
 8006a68:	bf38      	it	cc
 8006a6a:	250c      	movcc	r5, #12
 8006a6c:	2d00      	cmp	r5, #0
 8006a6e:	4606      	mov	r6, r0
 8006a70:	db01      	blt.n	8006a76 <_malloc_r+0x1a>
 8006a72:	42a9      	cmp	r1, r5
 8006a74:	d903      	bls.n	8006a7e <_malloc_r+0x22>
 8006a76:	230c      	movs	r3, #12
 8006a78:	6033      	str	r3, [r6, #0]
 8006a7a:	2000      	movs	r0, #0
 8006a7c:	bd70      	pop	{r4, r5, r6, pc}
 8006a7e:	f000 fa43 	bl	8006f08 <__malloc_lock>
 8006a82:	4a21      	ldr	r2, [pc, #132]	; (8006b08 <_malloc_r+0xac>)
 8006a84:	6814      	ldr	r4, [r2, #0]
 8006a86:	4621      	mov	r1, r4
 8006a88:	b991      	cbnz	r1, 8006ab0 <_malloc_r+0x54>
 8006a8a:	4c20      	ldr	r4, [pc, #128]	; (8006b0c <_malloc_r+0xb0>)
 8006a8c:	6823      	ldr	r3, [r4, #0]
 8006a8e:	b91b      	cbnz	r3, 8006a98 <_malloc_r+0x3c>
 8006a90:	4630      	mov	r0, r6
 8006a92:	f000 f97d 	bl	8006d90 <_sbrk_r>
 8006a96:	6020      	str	r0, [r4, #0]
 8006a98:	4629      	mov	r1, r5
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	f000 f978 	bl	8006d90 <_sbrk_r>
 8006aa0:	1c43      	adds	r3, r0, #1
 8006aa2:	d124      	bne.n	8006aee <_malloc_r+0x92>
 8006aa4:	230c      	movs	r3, #12
 8006aa6:	6033      	str	r3, [r6, #0]
 8006aa8:	4630      	mov	r0, r6
 8006aaa:	f000 fa2e 	bl	8006f0a <__malloc_unlock>
 8006aae:	e7e4      	b.n	8006a7a <_malloc_r+0x1e>
 8006ab0:	680b      	ldr	r3, [r1, #0]
 8006ab2:	1b5b      	subs	r3, r3, r5
 8006ab4:	d418      	bmi.n	8006ae8 <_malloc_r+0x8c>
 8006ab6:	2b0b      	cmp	r3, #11
 8006ab8:	d90f      	bls.n	8006ada <_malloc_r+0x7e>
 8006aba:	600b      	str	r3, [r1, #0]
 8006abc:	50cd      	str	r5, [r1, r3]
 8006abe:	18cc      	adds	r4, r1, r3
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	f000 fa22 	bl	8006f0a <__malloc_unlock>
 8006ac6:	f104 000b 	add.w	r0, r4, #11
 8006aca:	1d23      	adds	r3, r4, #4
 8006acc:	f020 0007 	bic.w	r0, r0, #7
 8006ad0:	1ac3      	subs	r3, r0, r3
 8006ad2:	d0d3      	beq.n	8006a7c <_malloc_r+0x20>
 8006ad4:	425a      	negs	r2, r3
 8006ad6:	50e2      	str	r2, [r4, r3]
 8006ad8:	e7d0      	b.n	8006a7c <_malloc_r+0x20>
 8006ada:	428c      	cmp	r4, r1
 8006adc:	684b      	ldr	r3, [r1, #4]
 8006ade:	bf16      	itet	ne
 8006ae0:	6063      	strne	r3, [r4, #4]
 8006ae2:	6013      	streq	r3, [r2, #0]
 8006ae4:	460c      	movne	r4, r1
 8006ae6:	e7eb      	b.n	8006ac0 <_malloc_r+0x64>
 8006ae8:	460c      	mov	r4, r1
 8006aea:	6849      	ldr	r1, [r1, #4]
 8006aec:	e7cc      	b.n	8006a88 <_malloc_r+0x2c>
 8006aee:	1cc4      	adds	r4, r0, #3
 8006af0:	f024 0403 	bic.w	r4, r4, #3
 8006af4:	42a0      	cmp	r0, r4
 8006af6:	d005      	beq.n	8006b04 <_malloc_r+0xa8>
 8006af8:	1a21      	subs	r1, r4, r0
 8006afa:	4630      	mov	r0, r6
 8006afc:	f000 f948 	bl	8006d90 <_sbrk_r>
 8006b00:	3001      	adds	r0, #1
 8006b02:	d0cf      	beq.n	8006aa4 <_malloc_r+0x48>
 8006b04:	6025      	str	r5, [r4, #0]
 8006b06:	e7db      	b.n	8006ac0 <_malloc_r+0x64>
 8006b08:	20000208 	.word	0x20000208
 8006b0c:	2000020c 	.word	0x2000020c

08006b10 <__sfputc_r>:
 8006b10:	6893      	ldr	r3, [r2, #8]
 8006b12:	3b01      	subs	r3, #1
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	b410      	push	{r4}
 8006b18:	6093      	str	r3, [r2, #8]
 8006b1a:	da08      	bge.n	8006b2e <__sfputc_r+0x1e>
 8006b1c:	6994      	ldr	r4, [r2, #24]
 8006b1e:	42a3      	cmp	r3, r4
 8006b20:	db01      	blt.n	8006b26 <__sfputc_r+0x16>
 8006b22:	290a      	cmp	r1, #10
 8006b24:	d103      	bne.n	8006b2e <__sfputc_r+0x1e>
 8006b26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b2a:	f7fe bb5b 	b.w	80051e4 <__swbuf_r>
 8006b2e:	6813      	ldr	r3, [r2, #0]
 8006b30:	1c58      	adds	r0, r3, #1
 8006b32:	6010      	str	r0, [r2, #0]
 8006b34:	7019      	strb	r1, [r3, #0]
 8006b36:	4608      	mov	r0, r1
 8006b38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <__sfputs_r>:
 8006b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b40:	4606      	mov	r6, r0
 8006b42:	460f      	mov	r7, r1
 8006b44:	4614      	mov	r4, r2
 8006b46:	18d5      	adds	r5, r2, r3
 8006b48:	42ac      	cmp	r4, r5
 8006b4a:	d101      	bne.n	8006b50 <__sfputs_r+0x12>
 8006b4c:	2000      	movs	r0, #0
 8006b4e:	e007      	b.n	8006b60 <__sfputs_r+0x22>
 8006b50:	463a      	mov	r2, r7
 8006b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b56:	4630      	mov	r0, r6
 8006b58:	f7ff ffda 	bl	8006b10 <__sfputc_r>
 8006b5c:	1c43      	adds	r3, r0, #1
 8006b5e:	d1f3      	bne.n	8006b48 <__sfputs_r+0xa>
 8006b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b64 <_vfiprintf_r>:
 8006b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b68:	460c      	mov	r4, r1
 8006b6a:	b09d      	sub	sp, #116	; 0x74
 8006b6c:	4617      	mov	r7, r2
 8006b6e:	461d      	mov	r5, r3
 8006b70:	4606      	mov	r6, r0
 8006b72:	b118      	cbz	r0, 8006b7c <_vfiprintf_r+0x18>
 8006b74:	6983      	ldr	r3, [r0, #24]
 8006b76:	b90b      	cbnz	r3, 8006b7c <_vfiprintf_r+0x18>
 8006b78:	f7ff fb2a 	bl	80061d0 <__sinit>
 8006b7c:	4b7c      	ldr	r3, [pc, #496]	; (8006d70 <_vfiprintf_r+0x20c>)
 8006b7e:	429c      	cmp	r4, r3
 8006b80:	d158      	bne.n	8006c34 <_vfiprintf_r+0xd0>
 8006b82:	6874      	ldr	r4, [r6, #4]
 8006b84:	89a3      	ldrh	r3, [r4, #12]
 8006b86:	0718      	lsls	r0, r3, #28
 8006b88:	d55e      	bpl.n	8006c48 <_vfiprintf_r+0xe4>
 8006b8a:	6923      	ldr	r3, [r4, #16]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d05b      	beq.n	8006c48 <_vfiprintf_r+0xe4>
 8006b90:	2300      	movs	r3, #0
 8006b92:	9309      	str	r3, [sp, #36]	; 0x24
 8006b94:	2320      	movs	r3, #32
 8006b96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b9a:	2330      	movs	r3, #48	; 0x30
 8006b9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ba0:	9503      	str	r5, [sp, #12]
 8006ba2:	f04f 0b01 	mov.w	fp, #1
 8006ba6:	46b8      	mov	r8, r7
 8006ba8:	4645      	mov	r5, r8
 8006baa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006bae:	b10b      	cbz	r3, 8006bb4 <_vfiprintf_r+0x50>
 8006bb0:	2b25      	cmp	r3, #37	; 0x25
 8006bb2:	d154      	bne.n	8006c5e <_vfiprintf_r+0xfa>
 8006bb4:	ebb8 0a07 	subs.w	sl, r8, r7
 8006bb8:	d00b      	beq.n	8006bd2 <_vfiprintf_r+0x6e>
 8006bba:	4653      	mov	r3, sl
 8006bbc:	463a      	mov	r2, r7
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	4630      	mov	r0, r6
 8006bc2:	f7ff ffbc 	bl	8006b3e <__sfputs_r>
 8006bc6:	3001      	adds	r0, #1
 8006bc8:	f000 80c2 	beq.w	8006d50 <_vfiprintf_r+0x1ec>
 8006bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bce:	4453      	add	r3, sl
 8006bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8006bd2:	f898 3000 	ldrb.w	r3, [r8]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f000 80ba 	beq.w	8006d50 <_vfiprintf_r+0x1ec>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	f04f 32ff 	mov.w	r2, #4294967295
 8006be2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006be6:	9304      	str	r3, [sp, #16]
 8006be8:	9307      	str	r3, [sp, #28]
 8006bea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bee:	931a      	str	r3, [sp, #104]	; 0x68
 8006bf0:	46a8      	mov	r8, r5
 8006bf2:	2205      	movs	r2, #5
 8006bf4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006bf8:	485e      	ldr	r0, [pc, #376]	; (8006d74 <_vfiprintf_r+0x210>)
 8006bfa:	f7f9 fb01 	bl	8000200 <memchr>
 8006bfe:	9b04      	ldr	r3, [sp, #16]
 8006c00:	bb78      	cbnz	r0, 8006c62 <_vfiprintf_r+0xfe>
 8006c02:	06d9      	lsls	r1, r3, #27
 8006c04:	bf44      	itt	mi
 8006c06:	2220      	movmi	r2, #32
 8006c08:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006c0c:	071a      	lsls	r2, r3, #28
 8006c0e:	bf44      	itt	mi
 8006c10:	222b      	movmi	r2, #43	; 0x2b
 8006c12:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006c16:	782a      	ldrb	r2, [r5, #0]
 8006c18:	2a2a      	cmp	r2, #42	; 0x2a
 8006c1a:	d02a      	beq.n	8006c72 <_vfiprintf_r+0x10e>
 8006c1c:	9a07      	ldr	r2, [sp, #28]
 8006c1e:	46a8      	mov	r8, r5
 8006c20:	2000      	movs	r0, #0
 8006c22:	250a      	movs	r5, #10
 8006c24:	4641      	mov	r1, r8
 8006c26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c2a:	3b30      	subs	r3, #48	; 0x30
 8006c2c:	2b09      	cmp	r3, #9
 8006c2e:	d969      	bls.n	8006d04 <_vfiprintf_r+0x1a0>
 8006c30:	b360      	cbz	r0, 8006c8c <_vfiprintf_r+0x128>
 8006c32:	e024      	b.n	8006c7e <_vfiprintf_r+0x11a>
 8006c34:	4b50      	ldr	r3, [pc, #320]	; (8006d78 <_vfiprintf_r+0x214>)
 8006c36:	429c      	cmp	r4, r3
 8006c38:	d101      	bne.n	8006c3e <_vfiprintf_r+0xda>
 8006c3a:	68b4      	ldr	r4, [r6, #8]
 8006c3c:	e7a2      	b.n	8006b84 <_vfiprintf_r+0x20>
 8006c3e:	4b4f      	ldr	r3, [pc, #316]	; (8006d7c <_vfiprintf_r+0x218>)
 8006c40:	429c      	cmp	r4, r3
 8006c42:	bf08      	it	eq
 8006c44:	68f4      	ldreq	r4, [r6, #12]
 8006c46:	e79d      	b.n	8006b84 <_vfiprintf_r+0x20>
 8006c48:	4621      	mov	r1, r4
 8006c4a:	4630      	mov	r0, r6
 8006c4c:	f7fe fb1c 	bl	8005288 <__swsetup_r>
 8006c50:	2800      	cmp	r0, #0
 8006c52:	d09d      	beq.n	8006b90 <_vfiprintf_r+0x2c>
 8006c54:	f04f 30ff 	mov.w	r0, #4294967295
 8006c58:	b01d      	add	sp, #116	; 0x74
 8006c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c5e:	46a8      	mov	r8, r5
 8006c60:	e7a2      	b.n	8006ba8 <_vfiprintf_r+0x44>
 8006c62:	4a44      	ldr	r2, [pc, #272]	; (8006d74 <_vfiprintf_r+0x210>)
 8006c64:	1a80      	subs	r0, r0, r2
 8006c66:	fa0b f000 	lsl.w	r0, fp, r0
 8006c6a:	4318      	orrs	r0, r3
 8006c6c:	9004      	str	r0, [sp, #16]
 8006c6e:	4645      	mov	r5, r8
 8006c70:	e7be      	b.n	8006bf0 <_vfiprintf_r+0x8c>
 8006c72:	9a03      	ldr	r2, [sp, #12]
 8006c74:	1d11      	adds	r1, r2, #4
 8006c76:	6812      	ldr	r2, [r2, #0]
 8006c78:	9103      	str	r1, [sp, #12]
 8006c7a:	2a00      	cmp	r2, #0
 8006c7c:	db01      	blt.n	8006c82 <_vfiprintf_r+0x11e>
 8006c7e:	9207      	str	r2, [sp, #28]
 8006c80:	e004      	b.n	8006c8c <_vfiprintf_r+0x128>
 8006c82:	4252      	negs	r2, r2
 8006c84:	f043 0302 	orr.w	r3, r3, #2
 8006c88:	9207      	str	r2, [sp, #28]
 8006c8a:	9304      	str	r3, [sp, #16]
 8006c8c:	f898 3000 	ldrb.w	r3, [r8]
 8006c90:	2b2e      	cmp	r3, #46	; 0x2e
 8006c92:	d10e      	bne.n	8006cb2 <_vfiprintf_r+0x14e>
 8006c94:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006c98:	2b2a      	cmp	r3, #42	; 0x2a
 8006c9a:	d138      	bne.n	8006d0e <_vfiprintf_r+0x1aa>
 8006c9c:	9b03      	ldr	r3, [sp, #12]
 8006c9e:	1d1a      	adds	r2, r3, #4
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	9203      	str	r2, [sp, #12]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	bfb8      	it	lt
 8006ca8:	f04f 33ff 	movlt.w	r3, #4294967295
 8006cac:	f108 0802 	add.w	r8, r8, #2
 8006cb0:	9305      	str	r3, [sp, #20]
 8006cb2:	4d33      	ldr	r5, [pc, #204]	; (8006d80 <_vfiprintf_r+0x21c>)
 8006cb4:	f898 1000 	ldrb.w	r1, [r8]
 8006cb8:	2203      	movs	r2, #3
 8006cba:	4628      	mov	r0, r5
 8006cbc:	f7f9 faa0 	bl	8000200 <memchr>
 8006cc0:	b140      	cbz	r0, 8006cd4 <_vfiprintf_r+0x170>
 8006cc2:	2340      	movs	r3, #64	; 0x40
 8006cc4:	1b40      	subs	r0, r0, r5
 8006cc6:	fa03 f000 	lsl.w	r0, r3, r0
 8006cca:	9b04      	ldr	r3, [sp, #16]
 8006ccc:	4303      	orrs	r3, r0
 8006cce:	f108 0801 	add.w	r8, r8, #1
 8006cd2:	9304      	str	r3, [sp, #16]
 8006cd4:	f898 1000 	ldrb.w	r1, [r8]
 8006cd8:	482a      	ldr	r0, [pc, #168]	; (8006d84 <_vfiprintf_r+0x220>)
 8006cda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006cde:	2206      	movs	r2, #6
 8006ce0:	f108 0701 	add.w	r7, r8, #1
 8006ce4:	f7f9 fa8c 	bl	8000200 <memchr>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	d037      	beq.n	8006d5c <_vfiprintf_r+0x1f8>
 8006cec:	4b26      	ldr	r3, [pc, #152]	; (8006d88 <_vfiprintf_r+0x224>)
 8006cee:	bb1b      	cbnz	r3, 8006d38 <_vfiprintf_r+0x1d4>
 8006cf0:	9b03      	ldr	r3, [sp, #12]
 8006cf2:	3307      	adds	r3, #7
 8006cf4:	f023 0307 	bic.w	r3, r3, #7
 8006cf8:	3308      	adds	r3, #8
 8006cfa:	9303      	str	r3, [sp, #12]
 8006cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cfe:	444b      	add	r3, r9
 8006d00:	9309      	str	r3, [sp, #36]	; 0x24
 8006d02:	e750      	b.n	8006ba6 <_vfiprintf_r+0x42>
 8006d04:	fb05 3202 	mla	r2, r5, r2, r3
 8006d08:	2001      	movs	r0, #1
 8006d0a:	4688      	mov	r8, r1
 8006d0c:	e78a      	b.n	8006c24 <_vfiprintf_r+0xc0>
 8006d0e:	2300      	movs	r3, #0
 8006d10:	f108 0801 	add.w	r8, r8, #1
 8006d14:	9305      	str	r3, [sp, #20]
 8006d16:	4619      	mov	r1, r3
 8006d18:	250a      	movs	r5, #10
 8006d1a:	4640      	mov	r0, r8
 8006d1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d20:	3a30      	subs	r2, #48	; 0x30
 8006d22:	2a09      	cmp	r2, #9
 8006d24:	d903      	bls.n	8006d2e <_vfiprintf_r+0x1ca>
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d0c3      	beq.n	8006cb2 <_vfiprintf_r+0x14e>
 8006d2a:	9105      	str	r1, [sp, #20]
 8006d2c:	e7c1      	b.n	8006cb2 <_vfiprintf_r+0x14e>
 8006d2e:	fb05 2101 	mla	r1, r5, r1, r2
 8006d32:	2301      	movs	r3, #1
 8006d34:	4680      	mov	r8, r0
 8006d36:	e7f0      	b.n	8006d1a <_vfiprintf_r+0x1b6>
 8006d38:	ab03      	add	r3, sp, #12
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	4622      	mov	r2, r4
 8006d3e:	4b13      	ldr	r3, [pc, #76]	; (8006d8c <_vfiprintf_r+0x228>)
 8006d40:	a904      	add	r1, sp, #16
 8006d42:	4630      	mov	r0, r6
 8006d44:	f7fd fd54 	bl	80047f0 <_printf_float>
 8006d48:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006d4c:	4681      	mov	r9, r0
 8006d4e:	d1d5      	bne.n	8006cfc <_vfiprintf_r+0x198>
 8006d50:	89a3      	ldrh	r3, [r4, #12]
 8006d52:	065b      	lsls	r3, r3, #25
 8006d54:	f53f af7e 	bmi.w	8006c54 <_vfiprintf_r+0xf0>
 8006d58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d5a:	e77d      	b.n	8006c58 <_vfiprintf_r+0xf4>
 8006d5c:	ab03      	add	r3, sp, #12
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	4622      	mov	r2, r4
 8006d62:	4b0a      	ldr	r3, [pc, #40]	; (8006d8c <_vfiprintf_r+0x228>)
 8006d64:	a904      	add	r1, sp, #16
 8006d66:	4630      	mov	r0, r6
 8006d68:	f7fd fff8 	bl	8004d5c <_printf_i>
 8006d6c:	e7ec      	b.n	8006d48 <_vfiprintf_r+0x1e4>
 8006d6e:	bf00      	nop
 8006d70:	08007014 	.word	0x08007014
 8006d74:	08007154 	.word	0x08007154
 8006d78:	08007034 	.word	0x08007034
 8006d7c:	08006ff4 	.word	0x08006ff4
 8006d80:	0800715a 	.word	0x0800715a
 8006d84:	0800715e 	.word	0x0800715e
 8006d88:	080047f1 	.word	0x080047f1
 8006d8c:	08006b3f 	.word	0x08006b3f

08006d90 <_sbrk_r>:
 8006d90:	b538      	push	{r3, r4, r5, lr}
 8006d92:	4c06      	ldr	r4, [pc, #24]	; (8006dac <_sbrk_r+0x1c>)
 8006d94:	2300      	movs	r3, #0
 8006d96:	4605      	mov	r5, r0
 8006d98:	4608      	mov	r0, r1
 8006d9a:	6023      	str	r3, [r4, #0]
 8006d9c:	f7fd f904 	bl	8003fa8 <_sbrk>
 8006da0:	1c43      	adds	r3, r0, #1
 8006da2:	d102      	bne.n	8006daa <_sbrk_r+0x1a>
 8006da4:	6823      	ldr	r3, [r4, #0]
 8006da6:	b103      	cbz	r3, 8006daa <_sbrk_r+0x1a>
 8006da8:	602b      	str	r3, [r5, #0]
 8006daa:	bd38      	pop	{r3, r4, r5, pc}
 8006dac:	200006ec 	.word	0x200006ec

08006db0 <__sread>:
 8006db0:	b510      	push	{r4, lr}
 8006db2:	460c      	mov	r4, r1
 8006db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006db8:	f000 f8a8 	bl	8006f0c <_read_r>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	bfab      	itete	ge
 8006dc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006dc2:	89a3      	ldrhlt	r3, [r4, #12]
 8006dc4:	181b      	addge	r3, r3, r0
 8006dc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006dca:	bfac      	ite	ge
 8006dcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8006dce:	81a3      	strhlt	r3, [r4, #12]
 8006dd0:	bd10      	pop	{r4, pc}

08006dd2 <__swrite>:
 8006dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd6:	461f      	mov	r7, r3
 8006dd8:	898b      	ldrh	r3, [r1, #12]
 8006dda:	05db      	lsls	r3, r3, #23
 8006ddc:	4605      	mov	r5, r0
 8006dde:	460c      	mov	r4, r1
 8006de0:	4616      	mov	r6, r2
 8006de2:	d505      	bpl.n	8006df0 <__swrite+0x1e>
 8006de4:	2302      	movs	r3, #2
 8006de6:	2200      	movs	r2, #0
 8006de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dec:	f000 f868 	bl	8006ec0 <_lseek_r>
 8006df0:	89a3      	ldrh	r3, [r4, #12]
 8006df2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006df6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006dfa:	81a3      	strh	r3, [r4, #12]
 8006dfc:	4632      	mov	r2, r6
 8006dfe:	463b      	mov	r3, r7
 8006e00:	4628      	mov	r0, r5
 8006e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e06:	f000 b817 	b.w	8006e38 <_write_r>

08006e0a <__sseek>:
 8006e0a:	b510      	push	{r4, lr}
 8006e0c:	460c      	mov	r4, r1
 8006e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e12:	f000 f855 	bl	8006ec0 <_lseek_r>
 8006e16:	1c43      	adds	r3, r0, #1
 8006e18:	89a3      	ldrh	r3, [r4, #12]
 8006e1a:	bf15      	itete	ne
 8006e1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e26:	81a3      	strheq	r3, [r4, #12]
 8006e28:	bf18      	it	ne
 8006e2a:	81a3      	strhne	r3, [r4, #12]
 8006e2c:	bd10      	pop	{r4, pc}

08006e2e <__sclose>:
 8006e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e32:	f000 b813 	b.w	8006e5c <_close_r>
	...

08006e38 <_write_r>:
 8006e38:	b538      	push	{r3, r4, r5, lr}
 8006e3a:	4c07      	ldr	r4, [pc, #28]	; (8006e58 <_write_r+0x20>)
 8006e3c:	4605      	mov	r5, r0
 8006e3e:	4608      	mov	r0, r1
 8006e40:	4611      	mov	r1, r2
 8006e42:	2200      	movs	r2, #0
 8006e44:	6022      	str	r2, [r4, #0]
 8006e46:	461a      	mov	r2, r3
 8006e48:	f7fd f892 	bl	8003f70 <_write>
 8006e4c:	1c43      	adds	r3, r0, #1
 8006e4e:	d102      	bne.n	8006e56 <_write_r+0x1e>
 8006e50:	6823      	ldr	r3, [r4, #0]
 8006e52:	b103      	cbz	r3, 8006e56 <_write_r+0x1e>
 8006e54:	602b      	str	r3, [r5, #0]
 8006e56:	bd38      	pop	{r3, r4, r5, pc}
 8006e58:	200006ec 	.word	0x200006ec

08006e5c <_close_r>:
 8006e5c:	b538      	push	{r3, r4, r5, lr}
 8006e5e:	4c06      	ldr	r4, [pc, #24]	; (8006e78 <_close_r+0x1c>)
 8006e60:	2300      	movs	r3, #0
 8006e62:	4605      	mov	r5, r0
 8006e64:	4608      	mov	r0, r1
 8006e66:	6023      	str	r3, [r4, #0]
 8006e68:	f7fd f890 	bl	8003f8c <_close>
 8006e6c:	1c43      	adds	r3, r0, #1
 8006e6e:	d102      	bne.n	8006e76 <_close_r+0x1a>
 8006e70:	6823      	ldr	r3, [r4, #0]
 8006e72:	b103      	cbz	r3, 8006e76 <_close_r+0x1a>
 8006e74:	602b      	str	r3, [r5, #0]
 8006e76:	bd38      	pop	{r3, r4, r5, pc}
 8006e78:	200006ec 	.word	0x200006ec

08006e7c <_fstat_r>:
 8006e7c:	b538      	push	{r3, r4, r5, lr}
 8006e7e:	4c07      	ldr	r4, [pc, #28]	; (8006e9c <_fstat_r+0x20>)
 8006e80:	2300      	movs	r3, #0
 8006e82:	4605      	mov	r5, r0
 8006e84:	4608      	mov	r0, r1
 8006e86:	4611      	mov	r1, r2
 8006e88:	6023      	str	r3, [r4, #0]
 8006e8a:	f7fd f883 	bl	8003f94 <_fstat>
 8006e8e:	1c43      	adds	r3, r0, #1
 8006e90:	d102      	bne.n	8006e98 <_fstat_r+0x1c>
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	b103      	cbz	r3, 8006e98 <_fstat_r+0x1c>
 8006e96:	602b      	str	r3, [r5, #0]
 8006e98:	bd38      	pop	{r3, r4, r5, pc}
 8006e9a:	bf00      	nop
 8006e9c:	200006ec 	.word	0x200006ec

08006ea0 <_isatty_r>:
 8006ea0:	b538      	push	{r3, r4, r5, lr}
 8006ea2:	4c06      	ldr	r4, [pc, #24]	; (8006ebc <_isatty_r+0x1c>)
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	4605      	mov	r5, r0
 8006ea8:	4608      	mov	r0, r1
 8006eaa:	6023      	str	r3, [r4, #0]
 8006eac:	f7fd f878 	bl	8003fa0 <_isatty>
 8006eb0:	1c43      	adds	r3, r0, #1
 8006eb2:	d102      	bne.n	8006eba <_isatty_r+0x1a>
 8006eb4:	6823      	ldr	r3, [r4, #0]
 8006eb6:	b103      	cbz	r3, 8006eba <_isatty_r+0x1a>
 8006eb8:	602b      	str	r3, [r5, #0]
 8006eba:	bd38      	pop	{r3, r4, r5, pc}
 8006ebc:	200006ec 	.word	0x200006ec

08006ec0 <_lseek_r>:
 8006ec0:	b538      	push	{r3, r4, r5, lr}
 8006ec2:	4c07      	ldr	r4, [pc, #28]	; (8006ee0 <_lseek_r+0x20>)
 8006ec4:	4605      	mov	r5, r0
 8006ec6:	4608      	mov	r0, r1
 8006ec8:	4611      	mov	r1, r2
 8006eca:	2200      	movs	r2, #0
 8006ecc:	6022      	str	r2, [r4, #0]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	f7fd f868 	bl	8003fa4 <_lseek>
 8006ed4:	1c43      	adds	r3, r0, #1
 8006ed6:	d102      	bne.n	8006ede <_lseek_r+0x1e>
 8006ed8:	6823      	ldr	r3, [r4, #0]
 8006eda:	b103      	cbz	r3, 8006ede <_lseek_r+0x1e>
 8006edc:	602b      	str	r3, [r5, #0]
 8006ede:	bd38      	pop	{r3, r4, r5, pc}
 8006ee0:	200006ec 	.word	0x200006ec

08006ee4 <__ascii_mbtowc>:
 8006ee4:	b082      	sub	sp, #8
 8006ee6:	b901      	cbnz	r1, 8006eea <__ascii_mbtowc+0x6>
 8006ee8:	a901      	add	r1, sp, #4
 8006eea:	b142      	cbz	r2, 8006efe <__ascii_mbtowc+0x1a>
 8006eec:	b14b      	cbz	r3, 8006f02 <__ascii_mbtowc+0x1e>
 8006eee:	7813      	ldrb	r3, [r2, #0]
 8006ef0:	600b      	str	r3, [r1, #0]
 8006ef2:	7812      	ldrb	r2, [r2, #0]
 8006ef4:	1c10      	adds	r0, r2, #0
 8006ef6:	bf18      	it	ne
 8006ef8:	2001      	movne	r0, #1
 8006efa:	b002      	add	sp, #8
 8006efc:	4770      	bx	lr
 8006efe:	4610      	mov	r0, r2
 8006f00:	e7fb      	b.n	8006efa <__ascii_mbtowc+0x16>
 8006f02:	f06f 0001 	mvn.w	r0, #1
 8006f06:	e7f8      	b.n	8006efa <__ascii_mbtowc+0x16>

08006f08 <__malloc_lock>:
 8006f08:	4770      	bx	lr

08006f0a <__malloc_unlock>:
 8006f0a:	4770      	bx	lr

08006f0c <_read_r>:
 8006f0c:	b538      	push	{r3, r4, r5, lr}
 8006f0e:	4c07      	ldr	r4, [pc, #28]	; (8006f2c <_read_r+0x20>)
 8006f10:	4605      	mov	r5, r0
 8006f12:	4608      	mov	r0, r1
 8006f14:	4611      	mov	r1, r2
 8006f16:	2200      	movs	r2, #0
 8006f18:	6022      	str	r2, [r4, #0]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	f7fd f81a 	bl	8003f54 <_read>
 8006f20:	1c43      	adds	r3, r0, #1
 8006f22:	d102      	bne.n	8006f2a <_read_r+0x1e>
 8006f24:	6823      	ldr	r3, [r4, #0]
 8006f26:	b103      	cbz	r3, 8006f2a <_read_r+0x1e>
 8006f28:	602b      	str	r3, [r5, #0]
 8006f2a:	bd38      	pop	{r3, r4, r5, pc}
 8006f2c:	200006ec 	.word	0x200006ec

08006f30 <__ascii_wctomb>:
 8006f30:	b149      	cbz	r1, 8006f46 <__ascii_wctomb+0x16>
 8006f32:	2aff      	cmp	r2, #255	; 0xff
 8006f34:	bf85      	ittet	hi
 8006f36:	238a      	movhi	r3, #138	; 0x8a
 8006f38:	6003      	strhi	r3, [r0, #0]
 8006f3a:	700a      	strbls	r2, [r1, #0]
 8006f3c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006f40:	bf98      	it	ls
 8006f42:	2001      	movls	r0, #1
 8006f44:	4770      	bx	lr
 8006f46:	4608      	mov	r0, r1
 8006f48:	4770      	bx	lr
	...

08006f4c <_init>:
 8006f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4e:	bf00      	nop
 8006f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f52:	bc08      	pop	{r3}
 8006f54:	469e      	mov	lr, r3
 8006f56:	4770      	bx	lr

08006f58 <_fini>:
 8006f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5a:	bf00      	nop
 8006f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f5e:	bc08      	pop	{r3}
 8006f60:	469e      	mov	lr, r3
 8006f62:	4770      	bx	lr
