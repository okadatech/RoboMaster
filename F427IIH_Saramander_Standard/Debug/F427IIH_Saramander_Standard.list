
F427IIH_Saramander_Standard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009920  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  08009ad0  08009ad0  00019ad0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e50  08009e50  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08009e50  08009e50  00019e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e58  08009e58  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e58  08009e58  00019e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e5c  08009e5c  00019e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08009e60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e0  200001f4  0800a054  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007d4  0800a054  000207d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001da72  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e0d  00000000  00000000  0003dc96  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000f615  00000000  00000000  00041aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000e38  00000000  00000000  000510b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000026a8  00000000  00000000  00051ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002600c  00000000  00000000  00054598  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00010926  00000000  00000000  0007a5a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000dcfab  00000000  00000000  0008aeca  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00167e75  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000428c  00000000  00000000  00167ef0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009ab8 	.word	0x08009ab8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	08009ab8 	.word	0x08009ab8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b972 	b.w	8000f64 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	4688      	mov	r8, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14b      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4615      	mov	r5, r2
 8000caa:	d967      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0720 	rsb	r7, r2, #32
 8000cb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cba:	fa20 f707 	lsr.w	r7, r0, r7
 8000cbe:	4095      	lsls	r5, r2
 8000cc0:	ea47 0803 	orr.w	r8, r7, r3
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cd0:	fa1f fc85 	uxth.w	ip, r5
 8000cd4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cd8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cdc:	fb07 f10c 	mul.w	r1, r7, ip
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18eb      	adds	r3, r5, r3
 8000ce6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cea:	f080 811b 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8118 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000cf4:	3f02      	subs	r7, #2
 8000cf6:	442b      	add	r3, r5
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0c:	45a4      	cmp	ip, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	192c      	adds	r4, r5, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 8107 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000d1a:	45a4      	cmp	ip, r4
 8000d1c:	f240 8104 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000d20:	3802      	subs	r0, #2
 8000d22:	442c      	add	r4, r5
 8000d24:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d28:	eba4 040c 	sub.w	r4, r4, ip
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	b11e      	cbz	r6, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c6 4300 	strd	r4, r3, [r6]
 8000d38:	4639      	mov	r1, r7
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0xbe>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80eb 	beq.w	8000f1e <__udivmoddi4+0x286>
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d4e:	4638      	mov	r0, r7
 8000d50:	4639      	mov	r1, r7
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f783 	clz	r7, r3
 8000d5a:	2f00      	cmp	r7, #0
 8000d5c:	d147      	bne.n	8000dee <__udivmoddi4+0x156>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0xd0>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80fa 	bhi.w	8000f5c <__udivmoddi4+0x2c4>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	4698      	mov	r8, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d0e0      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000d76:	e9c6 4800 	strd	r4, r8, [r6]
 8000d7a:	e7dd      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000d7c:	b902      	cbnz	r2, 8000d80 <__udivmoddi4+0xe8>
 8000d7e:	deff      	udf	#255	; 0xff
 8000d80:	fab2 f282 	clz	r2, r2
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f040 808f 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d8a:	1b49      	subs	r1, r1, r5
 8000d8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d90:	fa1f f885 	uxth.w	r8, r5
 8000d94:	2701      	movs	r7, #1
 8000d96:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d9a:	0c23      	lsrs	r3, r4, #16
 8000d9c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb08 f10c 	mul.w	r1, r8, ip
 8000da8:	4299      	cmp	r1, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000dac:	18eb      	adds	r3, r5, r3
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4299      	cmp	r1, r3
 8000db6:	f200 80cd 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1a59      	subs	r1, r3, r1
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dc8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x14c>
 8000dd4:	192c      	adds	r4, r5, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x14a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80b6 	bhi.w	8000f4e <__udivmoddi4+0x2b6>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e79f      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dee:	f1c7 0c20 	rsb	ip, r7, #32
 8000df2:	40bb      	lsls	r3, r7
 8000df4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000df8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dfc:	fa01 f407 	lsl.w	r4, r1, r7
 8000e00:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e04:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e08:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e0c:	4325      	orrs	r5, r4
 8000e0e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e12:	0c2c      	lsrs	r4, r5, #16
 8000e14:	fb08 3319 	mls	r3, r8, r9, r3
 8000e18:	fa1f fa8e 	uxth.w	sl, lr
 8000e1c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e20:	fb09 f40a 	mul.w	r4, r9, sl
 8000e24:	429c      	cmp	r4, r3
 8000e26:	fa02 f207 	lsl.w	r2, r2, r7
 8000e2a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1e 0303 	adds.w	r3, lr, r3
 8000e34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e38:	f080 8087 	bcs.w	8000f4a <__udivmoddi4+0x2b2>
 8000e3c:	429c      	cmp	r4, r3
 8000e3e:	f240 8084 	bls.w	8000f4a <__udivmoddi4+0x2b2>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4473      	add	r3, lr
 8000e48:	1b1b      	subs	r3, r3, r4
 8000e4a:	b2ad      	uxth	r5, r5
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3310 	mls	r3, r8, r0, r3
 8000e54:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e58:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e5c:	45a2      	cmp	sl, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1e 0404 	adds.w	r4, lr, r4
 8000e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e68:	d26b      	bcs.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6a:	45a2      	cmp	sl, r4
 8000e6c:	d969      	bls.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4474      	add	r4, lr
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7a:	eba4 040a 	sub.w	r4, r4, sl
 8000e7e:	454c      	cmp	r4, r9
 8000e80:	46c2      	mov	sl, r8
 8000e82:	464b      	mov	r3, r9
 8000e84:	d354      	bcc.n	8000f30 <__udivmoddi4+0x298>
 8000e86:	d051      	beq.n	8000f2c <__udivmoddi4+0x294>
 8000e88:	2e00      	cmp	r6, #0
 8000e8a:	d069      	beq.n	8000f60 <__udivmoddi4+0x2c8>
 8000e8c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e90:	eb64 0403 	sbc.w	r4, r4, r3
 8000e94:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e98:	40fd      	lsrs	r5, r7
 8000e9a:	40fc      	lsrs	r4, r7
 8000e9c:	ea4c 0505 	orr.w	r5, ip, r5
 8000ea0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ea4:	2700      	movs	r7, #0
 8000ea6:	e747      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f703 	lsr.w	r7, r0, r3
 8000eb0:	4095      	lsls	r5, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ebe:	4338      	orrs	r0, r7
 8000ec0:	0c01      	lsrs	r1, r0, #16
 8000ec2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ec6:	fa1f f885 	uxth.w	r8, r5
 8000eca:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb07 f308 	mul.w	r3, r7, r8
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	fa04 f402 	lsl.w	r4, r4, r2
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x256>
 8000ede:	1869      	adds	r1, r5, r1
 8000ee0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ee4:	d22f      	bcs.n	8000f46 <__udivmoddi4+0x2ae>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	d92d      	bls.n	8000f46 <__udivmoddi4+0x2ae>
 8000eea:	3f02      	subs	r7, #2
 8000eec:	4429      	add	r1, r5
 8000eee:	1acb      	subs	r3, r1, r3
 8000ef0:	b281      	uxth	r1, r0
 8000ef2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000efe:	fb00 f308 	mul.w	r3, r0, r8
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x27e>
 8000f06:	1869      	adds	r1, r5, r1
 8000f08:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0c:	d217      	bcs.n	8000f3e <__udivmoddi4+0x2a6>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d915      	bls.n	8000f3e <__udivmoddi4+0x2a6>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4429      	add	r1, r5
 8000f16:	1ac9      	subs	r1, r1, r3
 8000f18:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f1c:	e73b      	b.n	8000d96 <__udivmoddi4+0xfe>
 8000f1e:	4637      	mov	r7, r6
 8000f20:	4630      	mov	r0, r6
 8000f22:	e709      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f24:	4607      	mov	r7, r0
 8000f26:	e6e7      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fb      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f2c:	4541      	cmp	r1, r8
 8000f2e:	d2ab      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f30:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f34:	eb69 020e 	sbc.w	r2, r9, lr
 8000f38:	3801      	subs	r0, #1
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	e7a4      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f3e:	4660      	mov	r0, ip
 8000f40:	e7e9      	b.n	8000f16 <__udivmoddi4+0x27e>
 8000f42:	4618      	mov	r0, r3
 8000f44:	e795      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f46:	4667      	mov	r7, ip
 8000f48:	e7d1      	b.n	8000eee <__udivmoddi4+0x256>
 8000f4a:	4681      	mov	r9, r0
 8000f4c:	e77c      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	442c      	add	r4, r5
 8000f52:	e747      	b.n	8000de4 <__udivmoddi4+0x14c>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	442b      	add	r3, r5
 8000f5a:	e72f      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f5c:	4638      	mov	r0, r7
 8000f5e:	e708      	b.n	8000d72 <__udivmoddi4+0xda>
 8000f60:	4637      	mov	r7, r6
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0xa0>

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f6a:	4a0e      	ldr	r2, [pc, #56]	; (8000fa4 <HAL_InitTick+0x3c>)
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <HAL_InitTick+0x40>)
 8000f6e:	7812      	ldrb	r2, [r2, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
{
 8000f72:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f78:	fbb0 f0f2 	udiv	r0, r0, r2
 8000f7c:	fbb3 f0f0 	udiv	r0, r3, r0
 8000f80:	f000 fc0a 	bl	8001798 <HAL_SYSTICK_Config>
 8000f84:	b908      	cbnz	r0, 8000f8a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f86:	2d0f      	cmp	r5, #15
 8000f88:	d901      	bls.n	8000f8e <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000f8a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000f8c:	bd38      	pop	{r3, r4, r5, pc}
 8000f8e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f90:	4602      	mov	r2, r0
 8000f92:	4629      	mov	r1, r5
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295
 8000f98:	f000 fbba 	bl	8001710 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f9c:	4b03      	ldr	r3, [pc, #12]	; (8000fac <HAL_InitTick+0x44>)
 8000f9e:	4620      	mov	r0, r4
 8000fa0:	601d      	str	r5, [r3, #0]
}
 8000fa2:	bd38      	pop	{r3, r4, r5, pc}
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	2000001c 	.word	0x2000001c
 8000fac:	20000004 	.word	0x20000004

08000fb0 <HAL_Init>:
{
 8000fb0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <HAL_Init+0x30>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fba:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fc2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fca:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f000 fb8d 	bl	80016ec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f7ff ffc8 	bl	8000f68 <HAL_InitTick>
  HAL_MspInit();
 8000fd8:	f004 ff0c 	bl	8005df4 <HAL_MspInit>
}
 8000fdc:	2000      	movs	r0, #0
 8000fde:	bd08      	pop	{r3, pc}
 8000fe0:	40023c00 	.word	0x40023c00

08000fe4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000fe4:	4a03      	ldr	r2, [pc, #12]	; (8000ff4 <HAL_IncTick+0x10>)
 8000fe6:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <HAL_IncTick+0x14>)
 8000fe8:	6811      	ldr	r1, [r2, #0]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	440b      	add	r3, r1
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	2000028c 	.word	0x2000028c
 8000ff8:	20000000 	.word	0x20000000

08000ffc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ffc:	4b01      	ldr	r3, [pc, #4]	; (8001004 <HAL_GetTick+0x8>)
 8000ffe:	6818      	ldr	r0, [r3, #0]
}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	2000028c 	.word	0x2000028c

08001008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001008:	b538      	push	{r3, r4, r5, lr}
 800100a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800100c:	f7ff fff6 	bl	8000ffc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001010:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001012:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001014:	d002      	beq.n	800101c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001016:	4b04      	ldr	r3, [pc, #16]	; (8001028 <HAL_Delay+0x20>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800101c:	f7ff ffee 	bl	8000ffc <HAL_GetTick>
 8001020:	1b40      	subs	r0, r0, r5
 8001022:	42a0      	cmp	r0, r4
 8001024:	d3fa      	bcc.n	800101c <HAL_Delay+0x14>
  {
  }
}
 8001026:	bd38      	pop	{r3, r4, r5, pc}
 8001028:	20000000 	.word	0x20000000

0800102c <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800102c:	2800      	cmp	r0, #0
 800102e:	d07c      	beq.n	800112a <HAL_CAN_Init+0xfe>
{
 8001030:	b538      	push	{r3, r4, r5, lr}
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001032:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001036:	4604      	mov	r4, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d073      	beq.n	8001124 <HAL_CAN_Init+0xf8>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800103c:	6822      	ldr	r2, [r4, #0]
 800103e:	6813      	ldr	r3, [r2, #0]
 8001040:	f023 0302 	bic.w	r3, r3, #2
 8001044:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001046:	f7ff ffd9 	bl	8000ffc <HAL_GetTick>
 800104a:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800104c:	e004      	b.n	8001058 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800104e:	f7ff ffd5 	bl	8000ffc <HAL_GetTick>
 8001052:	1b40      	subs	r0, r0, r5
 8001054:	280a      	cmp	r0, #10
 8001056:	d85c      	bhi.n	8001112 <HAL_CAN_Init+0xe6>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001058:	6823      	ldr	r3, [r4, #0]
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	0791      	lsls	r1, r2, #30
 800105e:	d4f6      	bmi.n	800104e <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	f042 0201 	orr.w	r2, r2, #1
 8001066:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001068:	f7ff ffc8 	bl	8000ffc <HAL_GetTick>
 800106c:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800106e:	e004      	b.n	800107a <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001070:	f7ff ffc4 	bl	8000ffc <HAL_GetTick>
 8001074:	1b40      	subs	r0, r0, r5
 8001076:	280a      	cmp	r0, #10
 8001078:	d84b      	bhi.n	8001112 <HAL_CAN_Init+0xe6>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800107a:	6823      	ldr	r3, [r4, #0]
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	07d2      	lsls	r2, r2, #31
 8001080:	d5f6      	bpl.n	8001070 <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001082:	7e22      	ldrb	r2, [r4, #24]
 8001084:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	bf0c      	ite	eq
 800108a:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800108e:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8001092:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001094:	7e62      	ldrb	r2, [r4, #25]
 8001096:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	bf0c      	ite	eq
 800109c:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010a0:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80010a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010a6:	7ea2      	ldrb	r2, [r4, #26]
 80010a8:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	bf0c      	ite	eq
 80010ae:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010b2:	f022 0220 	bicne.w	r2, r2, #32
 80010b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010b8:	7ee2      	ldrb	r2, [r4, #27]
 80010ba:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	bf0c      	ite	eq
 80010c0:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010c4:	f042 0210 	orrne.w	r2, r2, #16
 80010c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010ca:	7f22      	ldrb	r2, [r4, #28]
 80010cc:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	bf0c      	ite	eq
 80010d2:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010d6:	f022 0208 	bicne.w	r2, r2, #8
 80010da:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80010dc:	7f62      	ldrb	r2, [r4, #29]
 80010de:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	bf0c      	ite	eq
 80010e4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010e8:	f022 0204 	bicne.w	r2, r2, #4
 80010ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80010ee:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80010f2:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
 80010f6:	430a      	orrs	r2, r1
 80010f8:	6861      	ldr	r1, [r4, #4]
 80010fa:	432a      	orrs	r2, r5
 80010fc:	4302      	orrs	r2, r0
 80010fe:	3901      	subs	r1, #1
 8001100:	430a      	orrs	r2, r1

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001102:	2501      	movs	r5, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001104:	2100      	movs	r1, #0
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001106:	61da      	str	r2, [r3, #28]

  /* Return function status */
  return HAL_OK;
 8001108:	4608      	mov	r0, r1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800110a:	6261      	str	r1, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800110c:	f884 5020 	strb.w	r5, [r4, #32]
}
 8001110:	bd38      	pop	{r3, r4, r5, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001112:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8001114:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001116:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800111a:	6263      	str	r3, [r4, #36]	; 0x24
      return HAL_ERROR;
 800111c:	2001      	movs	r0, #1
      hcan->State = HAL_CAN_STATE_ERROR;
 800111e:	f884 2020 	strb.w	r2, [r4, #32]
}
 8001122:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8001124:	f003 fd4e 	bl	8004bc4 <HAL_CAN_MspInit>
 8001128:	e788      	b.n	800103c <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 800112a:	2001      	movs	r0, #1
}
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop

08001130 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001130:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8001134:	3b01      	subs	r3, #1
 8001136:	2b01      	cmp	r3, #1
 8001138:	d905      	bls.n	8001146 <HAL_CAN_ConfigFilter+0x16>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800113a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800113c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001140:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001142:	2001      	movs	r0, #1
  }
}
 8001144:	4770      	bx	lr
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001146:	4b3c      	ldr	r3, [pc, #240]	; (8001238 <HAL_CAN_ConfigFilter+0x108>)
 8001148:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800114c:	f042 0201 	orr.w	r2, r2, #1
{
 8001150:	b4f0      	push	{r4, r5, r6, r7}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001152:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001156:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800115a:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800115e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001162:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001166:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8001168:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800116c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001170:	694a      	ldr	r2, [r1, #20]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001172:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001176:	2401      	movs	r4, #1
 8001178:	f002 001f 	and.w	r0, r2, #31
 800117c:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001180:	43c4      	mvns	r4, r0
 8001182:	4025      	ands	r5, r4
 8001184:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001188:	69cd      	ldr	r5, [r1, #28]
 800118a:	2d00      	cmp	r5, #0
 800118c:	d03a      	beq.n	8001204 <HAL_CAN_ConfigFilter+0xd4>
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800118e:	2d01      	cmp	r5, #1
 8001190:	d115      	bne.n	80011be <HAL_CAN_ConfigFilter+0x8e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001192:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8001196:	4305      	orrs	r5, r0
 8001198:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
 800119c:	00d2      	lsls	r2, r2, #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800119e:	680f      	ldr	r7, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011a0:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011a2:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80011a4:	898b      	ldrh	r3, [r1, #12]
 80011a6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80011aa:	f502 42c8 	add.w	r2, r2, #25600	; 0x6400
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011ae:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011b2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011b6:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011ba:	f8c2 3244 	str.w	r3, [r2, #580]	; 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80011be:	698b      	ldr	r3, [r1, #24]
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80011c0:	4a1d      	ldr	r2, [pc, #116]	; (8001238 <HAL_CAN_ConfigFilter+0x108>)
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80011c2:	bb9b      	cbnz	r3, 800122c <HAL_CAN_ConfigFilter+0xfc>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80011c4:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 80011c8:	4023      	ands	r3, r4
 80011ca:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80011ce:	690b      	ldr	r3, [r1, #16]
 80011d0:	bb2b      	cbnz	r3, 800121e <HAL_CAN_ConfigFilter+0xee>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <HAL_CAN_ConfigFilter+0x108>)
 80011d4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80011d8:	4014      	ands	r4, r2
 80011da:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80011de:	6a0b      	ldr	r3, [r1, #32]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d105      	bne.n	80011f0 <HAL_CAN_ConfigFilter+0xc0>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80011e4:	4a14      	ldr	r2, [pc, #80]	; (8001238 <HAL_CAN_ConfigFilter+0x108>)
 80011e6:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
 80011ea:	4318      	orrs	r0, r3
 80011ec:	f8c2 021c 	str.w	r0, [r2, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011f0:	4a11      	ldr	r2, [pc, #68]	; (8001238 <HAL_CAN_ConfigFilter+0x108>)
 80011f2:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 80011f6:	f023 0301 	bic.w	r3, r3, #1
    return HAL_OK;
 80011fa:	2000      	movs	r0, #0
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011fc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 8001200:	bcf0      	pop	{r4, r5, r6, r7}
 8001202:	4770      	bx	lr
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001204:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8001208:	4025      	ands	r5, r4
 800120a:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
 800120e:	00d2      	lsls	r2, r2, #3
 8001210:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001214:	68cf      	ldr	r7, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001216:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001218:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800121a:	880b      	ldrh	r3, [r1, #0]
 800121c:	e7c5      	b.n	80011aa <HAL_CAN_ConfigFilter+0x7a>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800121e:	4a06      	ldr	r2, [pc, #24]	; (8001238 <HAL_CAN_ConfigFilter+0x108>)
 8001220:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8001224:	4303      	orrs	r3, r0
 8001226:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 800122a:	e7d8      	b.n	80011de <HAL_CAN_ConfigFilter+0xae>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800122c:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 8001230:	4303      	orrs	r3, r0
 8001232:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 8001236:	e7ca      	b.n	80011ce <HAL_CAN_ConfigFilter+0x9e>
 8001238:	40006400 	.word	0x40006400

0800123c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800123c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800123e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d005      	beq.n	8001252 <HAL_CAN_Start+0x16>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001246:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001248:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800124c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800124e:	2001      	movs	r0, #1
  }
}
 8001250:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001252:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001254:	2302      	movs	r3, #2
 8001256:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800125a:	6813      	ldr	r3, [r2, #0]
 800125c:	f023 0301 	bic.w	r3, r3, #1
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8001264:	f7ff feca 	bl	8000ffc <HAL_GetTick>
 8001268:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800126a:	e004      	b.n	8001276 <HAL_CAN_Start+0x3a>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800126c:	f7ff fec6 	bl	8000ffc <HAL_GetTick>
 8001270:	1b40      	subs	r0, r0, r5
 8001272:	280a      	cmp	r0, #10
 8001274:	d807      	bhi.n	8001286 <HAL_CAN_Start+0x4a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001276:	6823      	ldr	r3, [r4, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f013 0301 	ands.w	r3, r3, #1
 800127e:	d1f5      	bne.n	800126c <HAL_CAN_Start+0x30>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001280:	6263      	str	r3, [r4, #36]	; 0x24
    return HAL_OK;
 8001282:	4618      	mov	r0, r3
}
 8001284:	bd38      	pop	{r3, r4, r5, pc}
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001286:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8001288:	2205      	movs	r2, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800128a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800128e:	6263      	str	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 8001290:	2001      	movs	r0, #1
        hcan->State = HAL_CAN_STATE_ERROR;
 8001292:	f884 2020 	strb.w	r2, [r4, #32]
}
 8001296:	bd38      	pop	{r3, r4, r5, pc}

08001298 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001298:	b470      	push	{r4, r5, r6}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800129a:	f890 4020 	ldrb.w	r4, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800129e:	6805      	ldr	r5, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80012a0:	3c01      	subs	r4, #1
 80012a2:	2c01      	cmp	r4, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80012a4:	68ae      	ldr	r6, [r5, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 80012a6:	d906      	bls.n	80012b6 <HAL_CAN_AddTxMessage+0x1e>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80012aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ae:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80012b0:	2001      	movs	r0, #1
  }
}
 80012b2:	bc70      	pop	{r4, r5, r6}
 80012b4:	4770      	bx	lr
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012b6:	f016 5fe0 	tst.w	r6, #469762048	; 0x1c000000
 80012ba:	d02e      	beq.n	800131a <HAL_CAN_AddTxMessage+0x82>
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80012bc:	f3c6 6601 	ubfx	r6, r6, #24, #2
      if (transmitmailbox > 2U)
 80012c0:	2e03      	cmp	r6, #3
 80012c2:	d031      	beq.n	8001328 <HAL_CAN_AddTxMessage+0x90>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80012c4:	2001      	movs	r0, #1
 80012c6:	40b0      	lsls	r0, r6
 80012c8:	6018      	str	r0, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 80012ca:	688b      	ldr	r3, [r1, #8]
 80012cc:	bb93      	cbnz	r3, 8001334 <HAL_CAN_AddTxMessage+0x9c>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012ce:	680c      	ldr	r4, [r1, #0]
 80012d0:	68c8      	ldr	r0, [r1, #12]
 80012d2:	f106 0318 	add.w	r3, r6, #24
 80012d6:	011b      	lsls	r3, r3, #4
 80012d8:	ea40 5044 	orr.w	r0, r0, r4, lsl #21
 80012dc:	50e8      	str	r0, [r5, r3]
      if (pHeader->TransmitGlobalTime == ENABLE)
 80012de:	7d08      	ldrb	r0, [r1, #20]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80012e0:	6909      	ldr	r1, [r1, #16]
 80012e2:	0136      	lsls	r6, r6, #4
 80012e4:	19ab      	adds	r3, r5, r6
      if (pHeader->TransmitGlobalTime == ENABLE)
 80012e6:	2801      	cmp	r0, #1
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80012e8:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 80012ec:	d105      	bne.n	80012fa <HAL_CAN_AddTxMessage+0x62>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80012ee:	f8d3 1184 	ldr.w	r1, [r3, #388]	; 0x184
 80012f2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80012f6:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80012fa:	4435      	add	r5, r6
 80012fc:	6851      	ldr	r1, [r2, #4]
 80012fe:	f8c5 118c 	str.w	r1, [r5, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001302:	6812      	ldr	r2, [r2, #0]
 8001304:	f8c5 2188 	str.w	r2, [r5, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001308:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800130c:	f042 0201 	orr.w	r2, r2, #1
      return HAL_OK;
 8001310:	2000      	movs	r0, #0
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001312:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
 8001316:	bc70      	pop	{r4, r5, r6}
 8001318:	4770      	bx	lr
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800131a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800131c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001320:	6243      	str	r3, [r0, #36]	; 0x24
}
 8001322:	bc70      	pop	{r4, r5, r6}
      return HAL_ERROR;
 8001324:	2001      	movs	r0, #1
}
 8001326:	4770      	bx	lr
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001328:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800132a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800132e:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 8001330:	2001      	movs	r0, #1
 8001332:	e7be      	b.n	80012b2 <HAL_CAN_AddTxMessage+0x1a>
                                                           pHeader->IDE |
 8001334:	68c8      	ldr	r0, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001336:	684c      	ldr	r4, [r1, #4]
                                                           pHeader->IDE |
 8001338:	4303      	orrs	r3, r0
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800133a:	f106 0018 	add.w	r0, r6, #24
 800133e:	0100      	lsls	r0, r0, #4
                                                           pHeader->IDE |
 8001340:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001344:	502b      	str	r3, [r5, r0]
 8001346:	e7ca      	b.n	80012de <HAL_CAN_AddTxMessage+0x46>

08001348 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 800134c:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001350:	3c01      	subs	r4, #1
 8001352:	2c01      	cmp	r4, #1
 8001354:	d906      	bls.n	8001364 <HAL_CAN_GetRxMessage+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001356:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800135c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800135e:	2001      	movs	r0, #1
  }
}
 8001360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001364:	6805      	ldr	r5, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001366:	2900      	cmp	r1, #0
 8001368:	d058      	beq.n	800141c <HAL_CAN_GetRxMessage+0xd4>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800136a:	692c      	ldr	r4, [r5, #16]
 800136c:	07a4      	lsls	r4, r4, #30
 800136e:	d058      	beq.n	8001422 <HAL_CAN_GetRxMessage+0xda>
 8001370:	010c      	lsls	r4, r1, #4
 8001372:	192e      	adds	r6, r5, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001374:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 8001378:	f007 0704 	and.w	r7, r7, #4
 800137c:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800137e:	2f00      	cmp	r7, #0
 8001380:	d15c      	bne.n	800143c <HAL_CAN_GetRxMessage+0xf4>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001382:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 8001386:	0d7f      	lsrs	r7, r7, #21
 8001388:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 800138a:	f8d6 e1b0 	ldr.w	lr, [r6, #432]	; 0x1b0
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800138e:	f8d6 c1b4 	ldr.w	ip, [r6, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001392:	f8d6 71b4 	ldr.w	r7, [r6, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001396:	f8d6 61b4 	ldr.w	r6, [r6, #436]	; 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800139a:	4425      	add	r5, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 800139c:	f3ce 0e40 	ubfx	lr, lr, #1, #1
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80013a0:	f8d5 81b8 	ldr.w	r8, [r5, #440]	; 0x1b8
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80013a4:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80013a8:	f00c 050f 	and.w	r5, ip, #15
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80013ac:	0c36      	lsrs	r6, r6, #16
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80013ae:	e9c2 e503 	strd	lr, r5, [r2, #12]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80013b2:	e9c2 6705 	strd	r6, r7, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80013b6:	f883 8000 	strb.w	r8, [r3]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80013ba:	6802      	ldr	r2, [r0, #0]
 80013bc:	4422      	add	r2, r4
 80013be:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80013c2:	0a12      	lsrs	r2, r2, #8
 80013c4:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80013c6:	6802      	ldr	r2, [r0, #0]
 80013c8:	4422      	add	r2, r4
 80013ca:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80013ce:	0c12      	lsrs	r2, r2, #16
 80013d0:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80013d2:	6802      	ldr	r2, [r0, #0]
 80013d4:	4422      	add	r2, r4
 80013d6:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80013da:	0e12      	lsrs	r2, r2, #24
 80013dc:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80013de:	6802      	ldr	r2, [r0, #0]
 80013e0:	4422      	add	r2, r4
 80013e2:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80013e6:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80013e8:	6802      	ldr	r2, [r0, #0]
 80013ea:	4422      	add	r2, r4
 80013ec:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80013f0:	0a12      	lsrs	r2, r2, #8
 80013f2:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80013f4:	6802      	ldr	r2, [r0, #0]
 80013f6:	4422      	add	r2, r4
 80013f8:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80013fc:	0c12      	lsrs	r2, r2, #16
 80013fe:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001400:	6802      	ldr	r2, [r0, #0]
 8001402:	4414      	add	r4, r2
 8001404:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 8001408:	0e12      	lsrs	r2, r2, #24
 800140a:	71da      	strb	r2, [r3, #7]
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800140c:	6802      	ldr	r2, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800140e:	b979      	cbnz	r1, 8001430 <HAL_CAN_GetRxMessage+0xe8>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001410:	68d3      	ldr	r3, [r2, #12]
 8001412:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 8001416:	4608      	mov	r0, r1
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001418:	60d3      	str	r3, [r2, #12]
 800141a:	e7a1      	b.n	8001360 <HAL_CAN_GetRxMessage+0x18>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800141c:	68ec      	ldr	r4, [r5, #12]
 800141e:	07a6      	lsls	r6, r4, #30
 8001420:	d1a6      	bne.n	8001370 <HAL_CAN_GetRxMessage+0x28>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001422:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001424:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001428:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 800142a:	2001      	movs	r0, #1
}
 800142c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001430:	6913      	ldr	r3, [r2, #16]
 8001432:	f043 0320 	orr.w	r3, r3, #32
 8001436:	6113      	str	r3, [r2, #16]
    return HAL_OK;
 8001438:	2000      	movs	r0, #0
 800143a:	e791      	b.n	8001360 <HAL_CAN_GetRxMessage+0x18>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800143c:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 8001440:	08ff      	lsrs	r7, r7, #3
 8001442:	6057      	str	r7, [r2, #4]
 8001444:	e7a1      	b.n	800138a <HAL_CAN_GetRxMessage+0x42>
 8001446:	bf00      	nop

08001448 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8001448:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800144c:	3b01      	subs	r3, #1
 800144e:	2b01      	cmp	r3, #1
 8001450:	d905      	bls.n	800145e <HAL_CAN_ActivateNotification+0x16>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001452:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001458:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800145a:	2001      	movs	r0, #1
  }
}
 800145c:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800145e:	6802      	ldr	r2, [r0, #0]
 8001460:	6953      	ldr	r3, [r2, #20]
 8001462:	4319      	orrs	r1, r3
 8001464:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8001466:	2000      	movs	r0, #0
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop

0800146c <HAL_CAN_TxMailbox0CompleteCallback>:
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop

08001470 <HAL_CAN_TxMailbox1CompleteCallback>:
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop

08001474 <HAL_CAN_TxMailbox2CompleteCallback>:
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop

08001478 <HAL_CAN_TxMailbox0AbortCallback>:
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop

0800147c <HAL_CAN_TxMailbox1AbortCallback>:
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop

08001480 <HAL_CAN_TxMailbox2AbortCallback>:
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop

08001484 <HAL_CAN_RxFifo0FullCallback>:
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop

08001488 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop

0800148c <HAL_CAN_RxFifo1FullCallback>:
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop

08001490 <HAL_CAN_SleepCallback>:
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop

08001494 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop

08001498 <HAL_CAN_ErrorCallback>:
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop

0800149c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800149c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80014a0:	6803      	ldr	r3, [r0, #0]
 80014a2:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80014a4:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80014a8:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80014aa:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80014ae:	f8d3 9010 	ldr.w	r9, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80014b2:	f8d3 a018 	ldr.w	sl, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80014b6:	f014 0601 	ands.w	r6, r4, #1
{
 80014ba:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80014bc:	d025      	beq.n	800150a <HAL_CAN_IRQHandler+0x6e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80014be:	f017 0601 	ands.w	r6, r7, #1
 80014c2:	f040 809c 	bne.w	80015fe <HAL_CAN_IRQHandler+0x162>
 80014c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80014ce:	05f8      	lsls	r0, r7, #23
 80014d0:	d50d      	bpl.n	80014ee <HAL_CAN_IRQHandler+0x52>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80014d2:	682b      	ldr	r3, [r5, #0]
 80014d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80014d8:	6098      	str	r0, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80014da:	05bb      	lsls	r3, r7, #22
 80014dc:	f100 80c7 	bmi.w	800166e <HAL_CAN_IRQHandler+0x1d2>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80014e0:	0578      	lsls	r0, r7, #21
 80014e2:	f100 80d7 	bmi.w	8001694 <HAL_CAN_IRQHandler+0x1f8>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80014e6:	053a      	lsls	r2, r7, #20
 80014e8:	f140 80e8 	bpl.w	80016bc <HAL_CAN_IRQHandler+0x220>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80014ec:	460e      	mov	r6, r1
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80014ee:	03fb      	lsls	r3, r7, #15
 80014f0:	d50b      	bpl.n	800150a <HAL_CAN_IRQHandler+0x6e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80014f2:	682b      	ldr	r3, [r5, #0]
 80014f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80014f8:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80014fa:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80014fc:	f100 80b3 	bmi.w	8001666 <HAL_CAN_IRQHandler+0x1ca>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001500:	0379      	lsls	r1, r7, #13
 8001502:	f140 80c9 	bpl.w	8001698 <HAL_CAN_IRQHandler+0x1fc>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001506:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800150a:	0723      	lsls	r3, r4, #28
 800150c:	d502      	bpl.n	8001514 <HAL_CAN_IRQHandler+0x78>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800150e:	f01b 0f10 	tst.w	fp, #16
 8001512:	d16e      	bne.n	80015f2 <HAL_CAN_IRQHandler+0x156>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001514:	0767      	lsls	r7, r4, #29
 8001516:	d502      	bpl.n	800151e <HAL_CAN_IRQHandler+0x82>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001518:	f01b 0f08 	tst.w	fp, #8
 800151c:	d17f      	bne.n	800161e <HAL_CAN_IRQHandler+0x182>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800151e:	07a0      	lsls	r0, r4, #30
 8001520:	d504      	bpl.n	800152c <HAL_CAN_IRQHandler+0x90>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001522:	682b      	ldr	r3, [r5, #0]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	0799      	lsls	r1, r3, #30
 8001528:	f040 808e 	bne.w	8001648 <HAL_CAN_IRQHandler+0x1ac>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800152c:	0662      	lsls	r2, r4, #25
 800152e:	d502      	bpl.n	8001536 <HAL_CAN_IRQHandler+0x9a>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001530:	f019 0f10 	tst.w	r9, #16
 8001534:	d157      	bne.n	80015e6 <HAL_CAN_IRQHandler+0x14a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001536:	06a3      	lsls	r3, r4, #26
 8001538:	d503      	bpl.n	8001542 <HAL_CAN_IRQHandler+0xa6>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800153a:	f019 0f08 	tst.w	r9, #8
 800153e:	f040 8087 	bne.w	8001650 <HAL_CAN_IRQHandler+0x1b4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001542:	06e7      	lsls	r7, r4, #27
 8001544:	d504      	bpl.n	8001550 <HAL_CAN_IRQHandler+0xb4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001546:	682b      	ldr	r3, [r5, #0]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	0798      	lsls	r0, r3, #30
 800154c:	f040 8087 	bne.w	800165e <HAL_CAN_IRQHandler+0x1c2>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001550:	03a1      	lsls	r1, r4, #14
 8001552:	d502      	bpl.n	800155a <HAL_CAN_IRQHandler+0xbe>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001554:	f018 0f10 	tst.w	r8, #16
 8001558:	d168      	bne.n	800162c <HAL_CAN_IRQHandler+0x190>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800155a:	03e2      	lsls	r2, r4, #15
 800155c:	d502      	bpl.n	8001564 <HAL_CAN_IRQHandler+0xc8>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800155e:	f018 0f08 	tst.w	r8, #8
 8001562:	d16a      	bne.n	800163a <HAL_CAN_IRQHandler+0x19e>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001564:	0423      	lsls	r3, r4, #16
 8001566:	d535      	bpl.n	80015d4 <HAL_CAN_IRQHandler+0x138>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001568:	f018 0f04 	tst.w	r8, #4
 800156c:	682b      	ldr	r3, [r5, #0]
 800156e:	d02f      	beq.n	80015d0 <HAL_CAN_IRQHandler+0x134>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001570:	05e7      	lsls	r7, r4, #23
 8001572:	d504      	bpl.n	800157e <HAL_CAN_IRQHandler+0xe2>
 8001574:	f01a 0f01 	tst.w	sl, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001578:	bf18      	it	ne
 800157a:	f046 0601 	orrne.w	r6, r6, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800157e:	05a0      	lsls	r0, r4, #22
 8001580:	d504      	bpl.n	800158c <HAL_CAN_IRQHandler+0xf0>
 8001582:	f01a 0f02 	tst.w	sl, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001586:	bf18      	it	ne
 8001588:	f046 0602 	orrne.w	r6, r6, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800158c:	0561      	lsls	r1, r4, #21
 800158e:	d504      	bpl.n	800159a <HAL_CAN_IRQHandler+0xfe>
 8001590:	f01a 0f04 	tst.w	sl, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001594:	bf18      	it	ne
 8001596:	f046 0604 	orrne.w	r6, r6, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800159a:	0522      	lsls	r2, r4, #20
 800159c:	d518      	bpl.n	80015d0 <HAL_CAN_IRQHandler+0x134>
 800159e:	f01a 0a70 	ands.w	sl, sl, #112	; 0x70
 80015a2:	d015      	beq.n	80015d0 <HAL_CAN_IRQHandler+0x134>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 80015a4:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 80015a8:	f000 8096 	beq.w	80016d8 <HAL_CAN_IRQHandler+0x23c>
 80015ac:	d979      	bls.n	80016a2 <HAL_CAN_IRQHandler+0x206>
 80015ae:	f1ba 0f50 	cmp.w	sl, #80	; 0x50
 80015b2:	f000 808e 	beq.w	80016d2 <HAL_CAN_IRQHandler+0x236>
 80015b6:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 80015ba:	f000 8090 	beq.w	80016de <HAL_CAN_IRQHandler+0x242>
 80015be:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 80015c2:	d101      	bne.n	80015c8 <HAL_CAN_IRQHandler+0x12c>
            /* Set CAN error code to Acknowledgement error */
            errorcode |= HAL_CAN_ERROR_ACK;
            break;
          case (CAN_ESR_LEC_2):
            /* Set CAN error code to Bit recessive error */
            errorcode |= HAL_CAN_ERROR_BR;
 80015c4:	f046 0640 	orr.w	r6, r6, #64	; 0x40
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80015c8:	699a      	ldr	r2, [r3, #24]
 80015ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80015ce:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80015d0:	2204      	movs	r2, #4
 80015d2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80015d4:	b12e      	cbz	r6, 80015e2 <HAL_CAN_IRQHandler+0x146>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80015d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80015d8:	431e      	orrs	r6, r3
 80015da:	626e      	str	r6, [r5, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80015dc:	4628      	mov	r0, r5
 80015de:	f7ff ff5b 	bl	8001498 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80015e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80015e6:	682b      	ldr	r3, [r5, #0]
 80015e8:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80015ea:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80015ee:	611a      	str	r2, [r3, #16]
 80015f0:	e7a1      	b.n	8001536 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80015f2:	682b      	ldr	r3, [r5, #0]
 80015f4:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80015f6:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	e78a      	b.n	8001514 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80015fe:	2201      	movs	r2, #1
 8001600:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001602:	07bb      	lsls	r3, r7, #30
 8001604:	d437      	bmi.n	8001676 <HAL_CAN_IRQHandler+0x1da>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001606:	077e      	lsls	r6, r7, #29
 8001608:	d43d      	bmi.n	8001686 <HAL_CAN_IRQHandler+0x1ea>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800160a:	f017 0608 	ands.w	r6, r7, #8
 800160e:	d059      	beq.n	80016c4 <HAL_CAN_IRQHandler+0x228>
 8001610:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001614:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001618:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 800161c:	e757      	b.n	80014ce <HAL_CAN_IRQHandler+0x32>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800161e:	682b      	ldr	r3, [r5, #0]
 8001620:	2208      	movs	r2, #8
 8001622:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001624:	4628      	mov	r0, r5
 8001626:	f7ff ff2d 	bl	8001484 <HAL_CAN_RxFifo0FullCallback>
 800162a:	e778      	b.n	800151e <HAL_CAN_IRQHandler+0x82>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800162c:	682b      	ldr	r3, [r5, #0]
 800162e:	2210      	movs	r2, #16
 8001630:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8001632:	4628      	mov	r0, r5
 8001634:	f7ff ff2c 	bl	8001490 <HAL_CAN_SleepCallback>
 8001638:	e78f      	b.n	800155a <HAL_CAN_IRQHandler+0xbe>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800163a:	682b      	ldr	r3, [r5, #0]
 800163c:	2208      	movs	r2, #8
 800163e:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001640:	4628      	mov	r0, r5
 8001642:	f7ff ff27 	bl	8001494 <HAL_CAN_WakeUpFromRxMsgCallback>
 8001646:	e78d      	b.n	8001564 <HAL_CAN_IRQHandler+0xc8>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001648:	4628      	mov	r0, r5
 800164a:	f003 fd5d 	bl	8005108 <HAL_CAN_RxFifo0MsgPendingCallback>
 800164e:	e76d      	b.n	800152c <HAL_CAN_IRQHandler+0x90>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001650:	682b      	ldr	r3, [r5, #0]
 8001652:	2208      	movs	r2, #8
 8001654:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001656:	4628      	mov	r0, r5
 8001658:	f7ff ff18 	bl	800148c <HAL_CAN_RxFifo1FullCallback>
 800165c:	e771      	b.n	8001542 <HAL_CAN_IRQHandler+0xa6>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800165e:	4628      	mov	r0, r5
 8001660:	f7ff ff12 	bl	8001488 <HAL_CAN_RxFifo1MsgPendingCallback>
 8001664:	e774      	b.n	8001550 <HAL_CAN_IRQHandler+0xb4>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001666:	4628      	mov	r0, r5
 8001668:	f7ff ff04 	bl	8001474 <HAL_CAN_TxMailbox2CompleteCallback>
 800166c:	e74d      	b.n	800150a <HAL_CAN_IRQHandler+0x6e>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800166e:	4628      	mov	r0, r5
 8001670:	f7ff fefe 	bl	8001470 <HAL_CAN_TxMailbox1CompleteCallback>
 8001674:	e73b      	b.n	80014ee <HAL_CAN_IRQHandler+0x52>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001676:	f7ff fef9 	bl	800146c <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800167a:	2600      	movs	r6, #0
 800167c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001680:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001684:	e723      	b.n	80014ce <HAL_CAN_IRQHandler+0x32>
 8001686:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800168a:	f44f 4190 	mov.w	r1, #18432	; 0x4800
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800168e:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8001692:	e71c      	b.n	80014ce <HAL_CAN_IRQHandler+0x32>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001694:	4616      	mov	r6, r2
 8001696:	e72a      	b.n	80014ee <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001698:	033a      	lsls	r2, r7, #12
 800169a:	d50b      	bpl.n	80016b4 <HAL_CAN_IRQHandler+0x218>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800169c:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 80016a0:	e733      	b.n	800150a <HAL_CAN_IRQHandler+0x6e>
        switch (esrflags & CAN_ESR_LEC)
 80016a2:	f1ba 0f10 	cmp.w	sl, #16
 80016a6:	d01d      	beq.n	80016e4 <HAL_CAN_IRQHandler+0x248>
 80016a8:	f1ba 0f20 	cmp.w	sl, #32
 80016ac:	d18c      	bne.n	80015c8 <HAL_CAN_IRQHandler+0x12c>
            errorcode |= HAL_CAN_ERROR_FOR;
 80016ae:	f046 0610 	orr.w	r6, r6, #16
            break;
 80016b2:	e789      	b.n	80015c8 <HAL_CAN_IRQHandler+0x12c>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80016b4:	4628      	mov	r0, r5
 80016b6:	f7ff fee3 	bl	8001480 <HAL_CAN_TxMailbox2AbortCallback>
 80016ba:	e726      	b.n	800150a <HAL_CAN_IRQHandler+0x6e>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80016bc:	4628      	mov	r0, r5
 80016be:	f7ff fedd 	bl	800147c <HAL_CAN_TxMailbox1AbortCallback>
 80016c2:	e714      	b.n	80014ee <HAL_CAN_IRQHandler+0x52>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80016c4:	f7ff fed8 	bl	8001478 <HAL_CAN_TxMailbox0AbortCallback>
 80016c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016d0:	e6fd      	b.n	80014ce <HAL_CAN_IRQHandler+0x32>
            errorcode |= HAL_CAN_ERROR_BD;
 80016d2:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 80016d6:	e777      	b.n	80015c8 <HAL_CAN_IRQHandler+0x12c>
            errorcode |= HAL_CAN_ERROR_ACK;
 80016d8:	f046 0620 	orr.w	r6, r6, #32
            break;
 80016dc:	e774      	b.n	80015c8 <HAL_CAN_IRQHandler+0x12c>
            errorcode |= HAL_CAN_ERROR_CRC;
 80016de:	f446 7680 	orr.w	r6, r6, #256	; 0x100
            break;
 80016e2:	e771      	b.n	80015c8 <HAL_CAN_IRQHandler+0x12c>
            errorcode |= HAL_CAN_ERROR_STF;
 80016e4:	f046 0608 	orr.w	r6, r6, #8
            break;
 80016e8:	e76e      	b.n	80015c8 <HAL_CAN_IRQHandler+0x12c>
 80016ea:	bf00      	nop

080016ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ec:	4a07      	ldr	r2, [pc, #28]	; (800170c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80016ee:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f0:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 80016f4:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f6:	0200      	lsls	r0, r0, #8
 80016f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016fc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001704:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001706:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001710:	4b18      	ldr	r3, [pc, #96]	; (8001774 <HAL_NVIC_SetPriority+0x64>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001718:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800171a:	f1c3 0507 	rsb	r5, r3, #7
 800171e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001720:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001724:	bf28      	it	cs
 8001726:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001728:	2c06      	cmp	r4, #6
 800172a:	d919      	bls.n	8001760 <HAL_NVIC_SetPriority+0x50>
 800172c:	3b03      	subs	r3, #3
 800172e:	f04f 34ff 	mov.w	r4, #4294967295
 8001732:	409c      	lsls	r4, r3
 8001734:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001738:	f04f 32ff 	mov.w	r2, #4294967295
 800173c:	40aa      	lsls	r2, r5
 800173e:	ea21 0102 	bic.w	r1, r1, r2
 8001742:	fa01 f203 	lsl.w	r2, r1, r3
 8001746:	4322      	orrs	r2, r4
 8001748:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 800174a:	2800      	cmp	r0, #0
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	db0a      	blt.n	8001766 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001750:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001754:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001758:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800175c:	bc30      	pop	{r4, r5}
 800175e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001760:	2400      	movs	r4, #0
 8001762:	4623      	mov	r3, r4
 8001764:	e7e8      	b.n	8001738 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001766:	4b04      	ldr	r3, [pc, #16]	; (8001778 <HAL_NVIC_SetPriority+0x68>)
 8001768:	f000 000f 	and.w	r0, r0, #15
 800176c:	4403      	add	r3, r0
 800176e:	761a      	strb	r2, [r3, #24]
 8001770:	bc30      	pop	{r4, r5}
 8001772:	4770      	bx	lr
 8001774:	e000ed00 	.word	0xe000ed00
 8001778:	e000ecfc 	.word	0xe000ecfc

0800177c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800177c:	2800      	cmp	r0, #0
 800177e:	db07      	blt.n	8001790 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001780:	f000 011f 	and.w	r1, r0, #31
 8001784:	2301      	movs	r3, #1
 8001786:	0940      	lsrs	r0, r0, #5
 8001788:	4a02      	ldr	r2, [pc, #8]	; (8001794 <HAL_NVIC_EnableIRQ+0x18>)
 800178a:	408b      	lsls	r3, r1
 800178c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000e100 	.word	0xe000e100

08001798 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001798:	3801      	subs	r0, #1
 800179a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800179e:	d20e      	bcs.n	80017be <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a2:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a4:	4c08      	ldr	r4, [pc, #32]	; (80017c8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a8:	20f0      	movs	r0, #240	; 0xf0
 80017aa:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ae:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b0:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b6:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80017b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017bc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80017be:	2001      	movs	r0, #1
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000e010 	.word	0xe000e010
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017cc:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d003      	beq.n	80017dc <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017d4:	2380      	movs	r3, #128	; 0x80
 80017d6:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80017d8:	2001      	movs	r0, #1
 80017da:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017dc:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80017de:	2305      	movs	r3, #5
 80017e0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80017e4:	6813      	ldr	r3, [r2, #0]
 80017e6:	f023 0301 	bic.w	r3, r3, #1
 80017ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80017ec:	2000      	movs	r0, #0
}
 80017ee:	4770      	bx	lr

080017f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017f4:	f8df c260 	ldr.w	ip, [pc, #608]	; 8001a58 <HAL_GPIO_Init+0x268>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f8:	f8df 8260 	ldr.w	r8, [pc, #608]	; 8001a5c <HAL_GPIO_Init+0x26c>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fc:	f8d1 e000 	ldr.w	lr, [r1]
{
 8001800:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001802:	2500      	movs	r5, #0
 8001804:	e003      	b.n	800180e <HAL_GPIO_Init+0x1e>
 8001806:	3501      	adds	r5, #1
 8001808:	2d10      	cmp	r5, #16
 800180a:	f000 80a4 	beq.w	8001956 <HAL_GPIO_Init+0x166>
    ioposition = 0x01U << position;
 800180e:	2301      	movs	r3, #1
 8001810:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001812:	ea0e 0403 	and.w	r4, lr, r3
    if(iocurrent == ioposition)
 8001816:	42a3      	cmp	r3, r4
 8001818:	d1f5      	bne.n	8001806 <HAL_GPIO_Init+0x16>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800181a:	684e      	ldr	r6, [r1, #4]
 800181c:	f026 0a10 	bic.w	sl, r6, #16
 8001820:	f1ba 0f02 	cmp.w	sl, #2
 8001824:	f000 809a 	beq.w	800195c <HAL_GPIO_Init+0x16c>
 8001828:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800182c:	2203      	movs	r2, #3
      temp = GPIOx->MODER;
 800182e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001832:	fa02 f209 	lsl.w	r2, r2, r9
 8001836:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001838:	f006 0703 	and.w	r7, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800183c:	ea02 0b0b 	and.w	fp, r2, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001840:	fa07 f709 	lsl.w	r7, r7, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001844:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001848:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800184c:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8001850:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001852:	f240 80a9 	bls.w	80019a8 <HAL_GPIO_Init+0x1b8>
      temp = GPIOx->PUPDR;
 8001856:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001858:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800185a:	403a      	ands	r2, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800185c:	fa03 f309 	lsl.w	r3, r3, r9
 8001860:	4313      	orrs	r3, r2
      GPIOx->PUPDR = temp;
 8001862:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001864:	00f3      	lsls	r3, r6, #3
 8001866:	d5ce      	bpl.n	8001806 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001868:	2300      	movs	r3, #0
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8001870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001874:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
 8001878:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800187c:	f025 0203 	bic.w	r2, r5, #3
 8001880:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001884:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001888:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 800188c:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800188e:	f005 0703 	and.w	r7, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001892:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001894:	f8d2 9008 	ldr.w	r9, [r2, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001898:	00bf      	lsls	r7, r7, #2
 800189a:	230f      	movs	r3, #15
 800189c:	40bb      	lsls	r3, r7
 800189e:	ea29 0a03 	bic.w	sl, r9, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018a2:	4b67      	ldr	r3, [pc, #412]	; (8001a40 <HAL_GPIO_Init+0x250>)
 80018a4:	4298      	cmp	r0, r3
 80018a6:	d02e      	beq.n	8001906 <HAL_GPIO_Init+0x116>
 80018a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018ac:	4298      	cmp	r0, r3
 80018ae:	f000 808e 	beq.w	80019ce <HAL_GPIO_Init+0x1de>
 80018b2:	4b64      	ldr	r3, [pc, #400]	; (8001a44 <HAL_GPIO_Init+0x254>)
 80018b4:	4298      	cmp	r0, r3
 80018b6:	f000 8091 	beq.w	80019dc <HAL_GPIO_Init+0x1ec>
 80018ba:	4b63      	ldr	r3, [pc, #396]	; (8001a48 <HAL_GPIO_Init+0x258>)
 80018bc:	4298      	cmp	r0, r3
 80018be:	f000 8094 	beq.w	80019ea <HAL_GPIO_Init+0x1fa>
 80018c2:	4b62      	ldr	r3, [pc, #392]	; (8001a4c <HAL_GPIO_Init+0x25c>)
 80018c4:	4298      	cmp	r0, r3
 80018c6:	f000 8097 	beq.w	80019f8 <HAL_GPIO_Init+0x208>
 80018ca:	4b61      	ldr	r3, [pc, #388]	; (8001a50 <HAL_GPIO_Init+0x260>)
 80018cc:	4298      	cmp	r0, r3
 80018ce:	f000 80a1 	beq.w	8001a14 <HAL_GPIO_Init+0x224>
 80018d2:	4b60      	ldr	r3, [pc, #384]	; (8001a54 <HAL_GPIO_Init+0x264>)
 80018d4:	4298      	cmp	r0, r3
 80018d6:	f000 80a4 	beq.w	8001a22 <HAL_GPIO_Init+0x232>
 80018da:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8001a60 <HAL_GPIO_Init+0x270>
 80018de:	4548      	cmp	r0, r9
 80018e0:	f000 8091 	beq.w	8001a06 <HAL_GPIO_Init+0x216>
 80018e4:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8001a64 <HAL_GPIO_Init+0x274>
 80018e8:	4548      	cmp	r0, r9
 80018ea:	f000 80a1 	beq.w	8001a30 <HAL_GPIO_Init+0x240>
 80018ee:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8001a68 <HAL_GPIO_Init+0x278>
 80018f2:	4548      	cmp	r0, r9
 80018f4:	bf0c      	ite	eq
 80018f6:	f04f 0909 	moveq.w	r9, #9
 80018fa:	f04f 090a 	movne.w	r9, #10
 80018fe:	fa09 f707 	lsl.w	r7, r9, r7
 8001902:	ea4a 0a07 	orr.w	sl, sl, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001906:	f8c2 a008 	str.w	sl, [r2, #8]
        temp = EXTI->IMR;
 800190a:	f8dc 3000 	ldr.w	r3, [ip]
        temp &= ~((uint32_t)iocurrent);
 800190e:	43e2      	mvns	r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001910:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 8001912:	bf54      	ite	pl
 8001914:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001916:	4323      	orrmi	r3, r4
        }
        EXTI->IMR = temp;
 8001918:	f8cc 3000 	str.w	r3, [ip]

        temp = EXTI->EMR;
 800191c:	f8dc 3004 	ldr.w	r3, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001920:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 8001922:	bf54      	ite	pl
 8001924:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001926:	4323      	orrmi	r3, r4
        }
        EXTI->EMR = temp;
 8001928:	f8cc 3004 	str.w	r3, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800192c:	f8dc 3008 	ldr.w	r3, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001930:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 8001932:	bf54      	ite	pl
 8001934:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001936:	4323      	orrmi	r3, r4
        }
        EXTI->RTSR = temp;
 8001938:	f8cc 3008 	str.w	r3, [ip, #8]

        temp = EXTI->FTSR;
 800193c:	f8dc 300c 	ldr.w	r3, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001940:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001942:	f105 0501 	add.w	r5, r5, #1
        temp &= ~((uint32_t)iocurrent);
 8001946:	bf54      	ite	pl
 8001948:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800194a:	4323      	orrmi	r3, r4
  for(position = 0U; position < GPIO_NUMBER; position++)
 800194c:	2d10      	cmp	r5, #16
        }
        EXTI->FTSR = temp;
 800194e:	f8cc 300c 	str.w	r3, [ip, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001952:	f47f af5c 	bne.w	800180e <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8001956:	b003      	add	sp, #12
 8001958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->AFR[position >> 3U];
 800195c:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 8001960:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001964:	f005 0707 	and.w	r7, r5, #7
        temp = GPIOx->AFR[position >> 3U];
 8001968:	f8d9 2020 	ldr.w	r2, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800196c:	00bf      	lsls	r7, r7, #2
 800196e:	f04f 0b0f 	mov.w	fp, #15
 8001972:	fa0b fb07 	lsl.w	fp, fp, r7
 8001976:	ea22 0a0b 	bic.w	sl, r2, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800197a:	690a      	ldr	r2, [r1, #16]
 800197c:	40ba      	lsls	r2, r7
 800197e:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->AFR[position >> 3U] = temp;
 8001982:	f8c9 2020 	str.w	r2, [r9, #32]
 8001986:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800198a:	2203      	movs	r2, #3
      temp = GPIOx->MODER;
 800198c:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001990:	fa02 f209 	lsl.w	r2, r2, r9
 8001994:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001996:	f006 0703 	and.w	r7, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800199a:	ea02 0a0a 	and.w	sl, r2, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800199e:	fa07 f709 	lsl.w	r7, r7, r9
 80019a2:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->MODER = temp;
 80019a6:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 80019a8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019aa:	ea07 0a02 	and.w	sl, r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ae:	68cf      	ldr	r7, [r1, #12]
 80019b0:	fa07 f709 	lsl.w	r7, r7, r9
 80019b4:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80019b8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80019ba:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019be:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019c2:	ea2a 0303 	bic.w	r3, sl, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019c6:	40af      	lsls	r7, r5
 80019c8:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 80019ca:	6047      	str	r7, [r0, #4]
 80019cc:	e743      	b.n	8001856 <HAL_GPIO_Init+0x66>
 80019ce:	f04f 0901 	mov.w	r9, #1
 80019d2:	fa09 f707 	lsl.w	r7, r9, r7
 80019d6:	ea4a 0a07 	orr.w	sl, sl, r7
 80019da:	e794      	b.n	8001906 <HAL_GPIO_Init+0x116>
 80019dc:	f04f 0902 	mov.w	r9, #2
 80019e0:	fa09 f707 	lsl.w	r7, r9, r7
 80019e4:	ea4a 0a07 	orr.w	sl, sl, r7
 80019e8:	e78d      	b.n	8001906 <HAL_GPIO_Init+0x116>
 80019ea:	f04f 0903 	mov.w	r9, #3
 80019ee:	fa09 f707 	lsl.w	r7, r9, r7
 80019f2:	ea4a 0a07 	orr.w	sl, sl, r7
 80019f6:	e786      	b.n	8001906 <HAL_GPIO_Init+0x116>
 80019f8:	f04f 0904 	mov.w	r9, #4
 80019fc:	fa09 f707 	lsl.w	r7, r9, r7
 8001a00:	ea4a 0a07 	orr.w	sl, sl, r7
 8001a04:	e77f      	b.n	8001906 <HAL_GPIO_Init+0x116>
 8001a06:	f04f 0907 	mov.w	r9, #7
 8001a0a:	fa09 f707 	lsl.w	r7, r9, r7
 8001a0e:	ea4a 0a07 	orr.w	sl, sl, r7
 8001a12:	e778      	b.n	8001906 <HAL_GPIO_Init+0x116>
 8001a14:	f04f 0905 	mov.w	r9, #5
 8001a18:	fa09 f707 	lsl.w	r7, r9, r7
 8001a1c:	ea4a 0a07 	orr.w	sl, sl, r7
 8001a20:	e771      	b.n	8001906 <HAL_GPIO_Init+0x116>
 8001a22:	f04f 0906 	mov.w	r9, #6
 8001a26:	fa09 f707 	lsl.w	r7, r9, r7
 8001a2a:	ea4a 0a07 	orr.w	sl, sl, r7
 8001a2e:	e76a      	b.n	8001906 <HAL_GPIO_Init+0x116>
 8001a30:	f04f 0908 	mov.w	r9, #8
 8001a34:	fa09 f707 	lsl.w	r7, r9, r7
 8001a38:	ea4a 0a07 	orr.w	sl, sl, r7
 8001a3c:	e763      	b.n	8001906 <HAL_GPIO_Init+0x116>
 8001a3e:	bf00      	nop
 8001a40:	40020000 	.word	0x40020000
 8001a44:	40020800 	.word	0x40020800
 8001a48:	40020c00 	.word	0x40020c00
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40021400 	.word	0x40021400
 8001a54:	40021800 	.word	0x40021800
 8001a58:	40013c00 	.word	0x40013c00
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40021c00 	.word	0x40021c00
 8001a64:	40022000 	.word	0x40022000
 8001a68:	40022400 	.word	0x40022400

08001a6c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a6c:	6903      	ldr	r3, [r0, #16]
 8001a6e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001a70:	bf14      	ite	ne
 8001a72:	2001      	movne	r0, #1
 8001a74:	2000      	moveq	r0, #0
 8001a76:	4770      	bx	lr

08001a78 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a78:	b902      	cbnz	r2, 8001a7c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a7a:	0409      	lsls	r1, r1, #16
 8001a7c:	6181      	str	r1, [r0, #24]
  }
}
 8001a7e:	4770      	bx	lr

08001a80 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001a80:	6943      	ldr	r3, [r0, #20]
 8001a82:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001a86:	bf08      	it	eq
 8001a88:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a8a:	6181      	str	r1, [r0, #24]
  }
}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop

08001a90 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a90:	2800      	cmp	r0, #0
 8001a92:	f000 8132 	beq.w	8001cfa <HAL_RCC_OscConfig+0x26a>
{
 8001a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a9a:	6803      	ldr	r3, [r0, #0]
 8001a9c:	07dd      	lsls	r5, r3, #31
{
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa2:	d52f      	bpl.n	8001b04 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001aa4:	49ac      	ldr	r1, [pc, #688]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
 8001aa6:	688a      	ldr	r2, [r1, #8]
 8001aa8:	f002 020c 	and.w	r2, r2, #12
 8001aac:	2a04      	cmp	r2, #4
 8001aae:	f000 80ea 	beq.w	8001c86 <HAL_RCC_OscConfig+0x1f6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ab2:	688a      	ldr	r2, [r1, #8]
 8001ab4:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ab8:	2a08      	cmp	r2, #8
 8001aba:	f000 80e0 	beq.w	8001c7e <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001abe:	6863      	ldr	r3, [r4, #4]
 8001ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac4:	f000 80e9 	beq.w	8001c9a <HAL_RCC_OscConfig+0x20a>
 8001ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001acc:	f000 8154 	beq.w	8001d78 <HAL_RCC_OscConfig+0x2e8>
 8001ad0:	4da1      	ldr	r5, [pc, #644]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
 8001ad2:	682a      	ldr	r2, [r5, #0]
 8001ad4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ad8:	602a      	str	r2, [r5, #0]
 8001ada:	682a      	ldr	r2, [r5, #0]
 8001adc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ae0:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f040 80de 	bne.w	8001ca4 <HAL_RCC_OscConfig+0x214>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7ff fa88 	bl	8000ffc <HAL_GetTick>
 8001aec:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aee:	e005      	b.n	8001afc <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001af0:	f7ff fa84 	bl	8000ffc <HAL_GetTick>
 8001af4:	1b80      	subs	r0, r0, r6
 8001af6:	2864      	cmp	r0, #100	; 0x64
 8001af8:	f200 80f2 	bhi.w	8001ce0 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afc:	682b      	ldr	r3, [r5, #0]
 8001afe:	039b      	lsls	r3, r3, #14
 8001b00:	d4f6      	bmi.n	8001af0 <HAL_RCC_OscConfig+0x60>
 8001b02:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b04:	079f      	lsls	r7, r3, #30
 8001b06:	d475      	bmi.n	8001bf4 <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b08:	071a      	lsls	r2, r3, #28
 8001b0a:	d515      	bpl.n	8001b38 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b0c:	6963      	ldr	r3, [r4, #20]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 80a5 	beq.w	8001c5e <HAL_RCC_OscConfig+0x1ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b14:	4b91      	ldr	r3, [pc, #580]	; (8001d5c <HAL_RCC_OscConfig+0x2cc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b16:	4d90      	ldr	r5, [pc, #576]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8001b18:	2201      	movs	r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001b1c:	f7ff fa6e 	bl	8000ffc <HAL_GetTick>
 8001b20:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b22:	e005      	b.n	8001b30 <HAL_RCC_OscConfig+0xa0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b24:	f7ff fa6a 	bl	8000ffc <HAL_GetTick>
 8001b28:	1b80      	subs	r0, r0, r6
 8001b2a:	2802      	cmp	r0, #2
 8001b2c:	f200 80d8 	bhi.w	8001ce0 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b30:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001b32:	079b      	lsls	r3, r3, #30
 8001b34:	d5f6      	bpl.n	8001b24 <HAL_RCC_OscConfig+0x94>
 8001b36:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b38:	0758      	lsls	r0, r3, #29
 8001b3a:	d53b      	bpl.n	8001bb4 <HAL_RCC_OscConfig+0x124>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b3c:	4a86      	ldr	r2, [pc, #536]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
 8001b3e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001b40:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8001b44:	f040 80db 	bne.w	8001cfe <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b48:	9301      	str	r3, [sp, #4]
 8001b4a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b50:	6413      	str	r3, [r2, #64]	; 0x40
 8001b52:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001b5c:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5e:	4d80      	ldr	r5, [pc, #512]	; (8001d60 <HAL_RCC_OscConfig+0x2d0>)
 8001b60:	682a      	ldr	r2, [r5, #0]
 8001b62:	05d1      	lsls	r1, r2, #23
 8001b64:	f140 80ac 	bpl.w	8001cc0 <HAL_RCC_OscConfig+0x230>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b68:	68a3      	ldr	r3, [r4, #8]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	f000 80c9 	beq.w	8001d02 <HAL_RCC_OscConfig+0x272>
 8001b70:	2b05      	cmp	r3, #5
 8001b72:	f000 810b 	beq.w	8001d8c <HAL_RCC_OscConfig+0x2fc>
 8001b76:	4d78      	ldr	r5, [pc, #480]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
 8001b78:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001b7a:	f022 0201 	bic.w	r2, r2, #1
 8001b7e:	672a      	str	r2, [r5, #112]	; 0x70
 8001b80:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001b82:	f022 0204 	bic.w	r2, r2, #4
 8001b86:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f040 80bf 	bne.w	8001d0c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b8e:	f7ff fa35 	bl	8000ffc <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b92:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001b96:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b98:	e006      	b.n	8001ba8 <HAL_RCC_OscConfig+0x118>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b9a:	f7ff fa2f 	bl	8000ffc <HAL_GetTick>
 8001b9e:	eba0 0008 	sub.w	r0, r0, r8
 8001ba2:	42b8      	cmp	r0, r7
 8001ba4:	f200 809c 	bhi.w	8001ce0 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001baa:	0798      	lsls	r0, r3, #30
 8001bac:	d4f5      	bmi.n	8001b9a <HAL_RCC_OscConfig+0x10a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bae:	2e00      	cmp	r6, #0
 8001bb0:	f040 80dc 	bne.w	8001d6c <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bb4:	69a2      	ldr	r2, [r4, #24]
 8001bb6:	b1ca      	cbz	r2, 8001bec <HAL_RCC_OscConfig+0x15c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bb8:	4d67      	ldr	r5, [pc, #412]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
 8001bba:	68a9      	ldr	r1, [r5, #8]
 8001bbc:	f001 010c 	and.w	r1, r1, #12
 8001bc0:	2908      	cmp	r1, #8
 8001bc2:	d048      	beq.n	8001c56 <HAL_RCC_OscConfig+0x1c6>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bc4:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc6:	4a67      	ldr	r2, [pc, #412]	; (8001d64 <HAL_RCC_OscConfig+0x2d4>)
 8001bc8:	f04f 0100 	mov.w	r1, #0
 8001bcc:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bce:	f000 80e7 	beq.w	8001da0 <HAL_RCC_OscConfig+0x310>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd2:	f7ff fa13 	bl	8000ffc <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd6:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8001bd8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bda:	e004      	b.n	8001be6 <HAL_RCC_OscConfig+0x156>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bdc:	f7ff fa0e 	bl	8000ffc <HAL_GetTick>
 8001be0:	1b40      	subs	r0, r0, r5
 8001be2:	2802      	cmp	r0, #2
 8001be4:	d87c      	bhi.n	8001ce0 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be6:	6823      	ldr	r3, [r4, #0]
 8001be8:	019b      	lsls	r3, r3, #6
 8001bea:	d4f7      	bmi.n	8001bdc <HAL_RCC_OscConfig+0x14c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001bec:	2000      	movs	r0, #0
}
 8001bee:	b002      	add	sp, #8
 8001bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bf4:	4a58      	ldr	r2, [pc, #352]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
 8001bf6:	6891      	ldr	r1, [r2, #8]
 8001bf8:	f011 0f0c 	tst.w	r1, #12
 8001bfc:	d024      	beq.n	8001c48 <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bfe:	6891      	ldr	r1, [r2, #8]
 8001c00:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c04:	2908      	cmp	r1, #8
 8001c06:	d01c      	beq.n	8001c42 <HAL_RCC_OscConfig+0x1b2>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c08:	68e3      	ldr	r3, [r4, #12]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 8092 	beq.w	8001d34 <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSI_ENABLE();
 8001c10:	4b55      	ldr	r3, [pc, #340]	; (8001d68 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c12:	4d51      	ldr	r5, [pc, #324]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 8001c14:	2201      	movs	r2, #1
 8001c16:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c18:	f7ff f9f0 	bl	8000ffc <HAL_GetTick>
 8001c1c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1e:	e004      	b.n	8001c2a <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c20:	f7ff f9ec 	bl	8000ffc <HAL_GetTick>
 8001c24:	1b80      	subs	r0, r0, r6
 8001c26:	2802      	cmp	r0, #2
 8001c28:	d85a      	bhi.n	8001ce0 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2a:	682b      	ldr	r3, [r5, #0]
 8001c2c:	0798      	lsls	r0, r3, #30
 8001c2e:	d5f7      	bpl.n	8001c20 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c30:	682b      	ldr	r3, [r5, #0]
 8001c32:	6922      	ldr	r2, [r4, #16]
 8001c34:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c38:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001c3c:	602b      	str	r3, [r5, #0]
 8001c3e:	6823      	ldr	r3, [r4, #0]
 8001c40:	e762      	b.n	8001b08 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c42:	6852      	ldr	r2, [r2, #4]
 8001c44:	0256      	lsls	r6, r2, #9
 8001c46:	d4df      	bmi.n	8001c08 <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c48:	4a43      	ldr	r2, [pc, #268]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	0795      	lsls	r5, r2, #30
 8001c4e:	d54b      	bpl.n	8001ce8 <HAL_RCC_OscConfig+0x258>
 8001c50:	68e2      	ldr	r2, [r4, #12]
 8001c52:	2a01      	cmp	r2, #1
 8001c54:	d048      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x258>
    return HAL_ERROR;
 8001c56:	2001      	movs	r0, #1
}
 8001c58:	b002      	add	sp, #8
 8001c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8001c5e:	4a3f      	ldr	r2, [pc, #252]	; (8001d5c <HAL_RCC_OscConfig+0x2cc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c60:	4d3d      	ldr	r5, [pc, #244]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 8001c62:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001c64:	f7ff f9ca 	bl	8000ffc <HAL_GetTick>
 8001c68:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c6a:	e004      	b.n	8001c76 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c6c:	f7ff f9c6 	bl	8000ffc <HAL_GetTick>
 8001c70:	1b80      	subs	r0, r0, r6
 8001c72:	2802      	cmp	r0, #2
 8001c74:	d834      	bhi.n	8001ce0 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c76:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001c78:	079f      	lsls	r7, r3, #30
 8001c7a:	d4f7      	bmi.n	8001c6c <HAL_RCC_OscConfig+0x1dc>
 8001c7c:	e75b      	b.n	8001b36 <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c7e:	684a      	ldr	r2, [r1, #4]
 8001c80:	0250      	lsls	r0, r2, #9
 8001c82:	f57f af1c 	bpl.w	8001abe <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c86:	4a34      	ldr	r2, [pc, #208]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	0391      	lsls	r1, r2, #14
 8001c8c:	f57f af3a 	bpl.w	8001b04 <HAL_RCC_OscConfig+0x74>
 8001c90:	6862      	ldr	r2, [r4, #4]
 8001c92:	2a00      	cmp	r2, #0
 8001c94:	f47f af36 	bne.w	8001b04 <HAL_RCC_OscConfig+0x74>
 8001c98:	e7dd      	b.n	8001c56 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c9a:	4a2f      	ldr	r2, [pc, #188]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
 8001c9c:	6813      	ldr	r3, [r2, #0]
 8001c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001ca4:	f7ff f9aa 	bl	8000ffc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca8:	4d2b      	ldr	r5, [pc, #172]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001caa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cac:	e004      	b.n	8001cb8 <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cae:	f7ff f9a5 	bl	8000ffc <HAL_GetTick>
 8001cb2:	1b80      	subs	r0, r0, r6
 8001cb4:	2864      	cmp	r0, #100	; 0x64
 8001cb6:	d813      	bhi.n	8001ce0 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb8:	682b      	ldr	r3, [r5, #0]
 8001cba:	039a      	lsls	r2, r3, #14
 8001cbc:	d5f7      	bpl.n	8001cae <HAL_RCC_OscConfig+0x21e>
 8001cbe:	e720      	b.n	8001b02 <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cc0:	682a      	ldr	r2, [r5, #0]
 8001cc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cc6:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8001cc8:	f7ff f998 	bl	8000ffc <HAL_GetTick>
 8001ccc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cce:	682b      	ldr	r3, [r5, #0]
 8001cd0:	05da      	lsls	r2, r3, #23
 8001cd2:	f53f af49 	bmi.w	8001b68 <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd6:	f7ff f991 	bl	8000ffc <HAL_GetTick>
 8001cda:	1bc0      	subs	r0, r0, r7
 8001cdc:	2802      	cmp	r0, #2
 8001cde:	d9f6      	bls.n	8001cce <HAL_RCC_OscConfig+0x23e>
            return HAL_TIMEOUT;
 8001ce0:	2003      	movs	r0, #3
}
 8001ce2:	b002      	add	sp, #8
 8001ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce8:	491b      	ldr	r1, [pc, #108]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
 8001cea:	6920      	ldr	r0, [r4, #16]
 8001cec:	680a      	ldr	r2, [r1, #0]
 8001cee:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001cf2:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001cf6:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf8:	e706      	b.n	8001b08 <HAL_RCC_OscConfig+0x78>
    return HAL_ERROR;
 8001cfa:	2001      	movs	r0, #1
}
 8001cfc:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 8001cfe:	2600      	movs	r6, #0
 8001d00:	e72d      	b.n	8001b5e <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d02:	4a15      	ldr	r2, [pc, #84]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
 8001d04:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001d06:	f043 0301 	orr.w	r3, r3, #1
 8001d0a:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001d0c:	f7ff f976 	bl	8000ffc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d10:	4d11      	ldr	r5, [pc, #68]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001d12:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d14:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d18:	e005      	b.n	8001d26 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d1a:	f7ff f96f 	bl	8000ffc <HAL_GetTick>
 8001d1e:	eba0 0008 	sub.w	r0, r0, r8
 8001d22:	42b8      	cmp	r0, r7
 8001d24:	d8dc      	bhi.n	8001ce0 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d26:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001d28:	079b      	lsls	r3, r3, #30
 8001d2a:	d5f6      	bpl.n	8001d1a <HAL_RCC_OscConfig+0x28a>
    if(pwrclkchanged == SET)
 8001d2c:	2e00      	cmp	r6, #0
 8001d2e:	f43f af41 	beq.w	8001bb4 <HAL_RCC_OscConfig+0x124>
 8001d32:	e01b      	b.n	8001d6c <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_HSI_DISABLE();
 8001d34:	4a0c      	ldr	r2, [pc, #48]	; (8001d68 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d36:	4d08      	ldr	r5, [pc, #32]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8001d38:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001d3a:	f7ff f95f 	bl	8000ffc <HAL_GetTick>
 8001d3e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d40:	e004      	b.n	8001d4c <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d42:	f7ff f95b 	bl	8000ffc <HAL_GetTick>
 8001d46:	1b80      	subs	r0, r0, r6
 8001d48:	2802      	cmp	r0, #2
 8001d4a:	d8c9      	bhi.n	8001ce0 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4c:	682b      	ldr	r3, [r5, #0]
 8001d4e:	0799      	lsls	r1, r3, #30
 8001d50:	d4f7      	bmi.n	8001d42 <HAL_RCC_OscConfig+0x2b2>
 8001d52:	6823      	ldr	r3, [r4, #0]
 8001d54:	e6d8      	b.n	8001b08 <HAL_RCC_OscConfig+0x78>
 8001d56:	bf00      	nop
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	42470e80 	.word	0x42470e80
 8001d60:	40007000 	.word	0x40007000
 8001d64:	42470060 	.word	0x42470060
 8001d68:	42470000 	.word	0x42470000
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d6c:	4a23      	ldr	r2, [pc, #140]	; (8001dfc <HAL_RCC_OscConfig+0x36c>)
 8001d6e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d74:	6413      	str	r3, [r2, #64]	; 0x40
 8001d76:	e71d      	b.n	8001bb4 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d78:	4b20      	ldr	r3, [pc, #128]	; (8001dfc <HAL_RCC_OscConfig+0x36c>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	e78b      	b.n	8001ca4 <HAL_RCC_OscConfig+0x214>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d8c:	4b1b      	ldr	r3, [pc, #108]	; (8001dfc <HAL_RCC_OscConfig+0x36c>)
 8001d8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d90:	f042 0204 	orr.w	r2, r2, #4
 8001d94:	671a      	str	r2, [r3, #112]	; 0x70
 8001d96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d98:	f042 0201 	orr.w	r2, r2, #1
 8001d9c:	671a      	str	r2, [r3, #112]	; 0x70
 8001d9e:	e7b5      	b.n	8001d0c <HAL_RCC_OscConfig+0x27c>
        tickstart = HAL_GetTick();
 8001da0:	f7ff f92c 	bl	8000ffc <HAL_GetTick>
 8001da4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da6:	e004      	b.n	8001db2 <HAL_RCC_OscConfig+0x322>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da8:	f7ff f928 	bl	8000ffc <HAL_GetTick>
 8001dac:	1b80      	subs	r0, r0, r6
 8001dae:	2802      	cmp	r0, #2
 8001db0:	d896      	bhi.n	8001ce0 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001db2:	682b      	ldr	r3, [r5, #0]
 8001db4:	0199      	lsls	r1, r3, #6
 8001db6:	d4f7      	bmi.n	8001da8 <HAL_RCC_OscConfig+0x318>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001db8:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 8001dbc:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8001dc0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc2:	4c0e      	ldr	r4, [pc, #56]	; (8001dfc <HAL_RCC_OscConfig+0x36c>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dc4:	4333      	orrs	r3, r6
 8001dc6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001dca:	0852      	lsrs	r2, r2, #1
 8001dcc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001dd0:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8001dd2:	490b      	ldr	r1, [pc, #44]	; (8001e00 <HAL_RCC_OscConfig+0x370>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8001dd8:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dda:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001ddc:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8001dde:	f7ff f90d 	bl	8000ffc <HAL_GetTick>
 8001de2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de4:	e005      	b.n	8001df2 <HAL_RCC_OscConfig+0x362>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001de6:	f7ff f909 	bl	8000ffc <HAL_GetTick>
 8001dea:	1b40      	subs	r0, r0, r5
 8001dec:	2802      	cmp	r0, #2
 8001dee:	f63f af77 	bhi.w	8001ce0 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df2:	6823      	ldr	r3, [r4, #0]
 8001df4:	019a      	lsls	r2, r3, #6
 8001df6:	d5f6      	bpl.n	8001de6 <HAL_RCC_OscConfig+0x356>
 8001df8:	e6f8      	b.n	8001bec <HAL_RCC_OscConfig+0x15c>
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	42470060 	.word	0x42470060

08001e04 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e04:	4917      	ldr	r1, [pc, #92]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x60>)
{
 8001e06:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e08:	688b      	ldr	r3, [r1, #8]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d01b      	beq.n	8001e4a <HAL_RCC_GetSysClockFreq+0x46>
 8001e12:	2b08      	cmp	r3, #8
 8001e14:	d117      	bne.n	8001e46 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e16:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e18:	684b      	ldr	r3, [r1, #4]
 8001e1a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e1e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e22:	d114      	bne.n	8001e4e <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e24:	6849      	ldr	r1, [r1, #4]
 8001e26:	4810      	ldr	r0, [pc, #64]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x64>)
 8001e28:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001e2c:	fba1 0100 	umull	r0, r1, r1, r0
 8001e30:	f7fe ff1a 	bl	8000c68 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x60>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001e40:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001e44:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8001e46:	4808      	ldr	r0, [pc, #32]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001e48:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001e4a:	4808      	ldr	r0, [pc, #32]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x68>)
}
 8001e4c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e4e:	684b      	ldr	r3, [r1, #4]
 8001e50:	4806      	ldr	r0, [pc, #24]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x68>)
 8001e52:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001e56:	fba3 0100 	umull	r0, r1, r3, r0
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f7fe ff04 	bl	8000c68 <__aeabi_uldivmod>
 8001e60:	e7e8      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x30>
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800
 8001e68:	00f42400 	.word	0x00f42400
 8001e6c:	00b71b00 	.word	0x00b71b00

08001e70 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001e70:	b160      	cbz	r0, 8001e8c <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e72:	4a48      	ldr	r2, [pc, #288]	; (8001f94 <HAL_RCC_ClockConfig+0x124>)
 8001e74:	6813      	ldr	r3, [r2, #0]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	428b      	cmp	r3, r1
 8001e7c:	d208      	bcs.n	8001e90 <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7e:	b2cb      	uxtb	r3, r1
 8001e80:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e82:	6813      	ldr	r3, [r2, #0]
 8001e84:	f003 030f 	and.w	r3, r3, #15
 8001e88:	428b      	cmp	r3, r1
 8001e8a:	d001      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 8001e8c:	2001      	movs	r0, #1
}
 8001e8e:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e90:	6803      	ldr	r3, [r0, #0]
{
 8001e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e96:	079d      	lsls	r5, r3, #30
 8001e98:	d514      	bpl.n	8001ec4 <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e9a:	075c      	lsls	r4, r3, #29
 8001e9c:	d504      	bpl.n	8001ea8 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e9e:	4c3e      	ldr	r4, [pc, #248]	; (8001f98 <HAL_RCC_ClockConfig+0x128>)
 8001ea0:	68a2      	ldr	r2, [r4, #8]
 8001ea2:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001ea6:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea8:	071a      	lsls	r2, r3, #28
 8001eaa:	d504      	bpl.n	8001eb6 <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eac:	4c3a      	ldr	r4, [pc, #232]	; (8001f98 <HAL_RCC_ClockConfig+0x128>)
 8001eae:	68a2      	ldr	r2, [r4, #8]
 8001eb0:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001eb4:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb6:	4c38      	ldr	r4, [pc, #224]	; (8001f98 <HAL_RCC_ClockConfig+0x128>)
 8001eb8:	6885      	ldr	r5, [r0, #8]
 8001eba:	68a2      	ldr	r2, [r4, #8]
 8001ebc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001ec0:	432a      	orrs	r2, r5
 8001ec2:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ec4:	07df      	lsls	r7, r3, #31
 8001ec6:	4604      	mov	r4, r0
 8001ec8:	460d      	mov	r5, r1
 8001eca:	d522      	bpl.n	8001f12 <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ecc:	6842      	ldr	r2, [r0, #4]
 8001ece:	2a01      	cmp	r2, #1
 8001ed0:	d056      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x110>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ed2:	1e93      	subs	r3, r2, #2
 8001ed4:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed6:	4b30      	ldr	r3, [pc, #192]	; (8001f98 <HAL_RCC_ClockConfig+0x128>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eda:	d958      	bls.n	8001f8e <HAL_RCC_ClockConfig+0x11e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001edc:	0799      	lsls	r1, r3, #30
 8001ede:	d525      	bpl.n	8001f2c <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ee0:	4e2d      	ldr	r6, [pc, #180]	; (8001f98 <HAL_RCC_ClockConfig+0x128>)
 8001ee2:	68b3      	ldr	r3, [r6, #8]
 8001ee4:	f023 0303 	bic.w	r3, r3, #3
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001eec:	f7ff f886 	bl	8000ffc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef0:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001ef4:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef6:	e005      	b.n	8001f04 <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef8:	f7ff f880 	bl	8000ffc <HAL_GetTick>
 8001efc:	eba0 0008 	sub.w	r0, r0, r8
 8001f00:	42b8      	cmp	r0, r7
 8001f02:	d842      	bhi.n	8001f8a <HAL_RCC_ClockConfig+0x11a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f04:	68b3      	ldr	r3, [r6, #8]
 8001f06:	6862      	ldr	r2, [r4, #4]
 8001f08:	f003 030c 	and.w	r3, r3, #12
 8001f0c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001f10:	d1f2      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f12:	4a20      	ldr	r2, [pc, #128]	; (8001f94 <HAL_RCC_ClockConfig+0x124>)
 8001f14:	6813      	ldr	r3, [r2, #0]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	42ab      	cmp	r3, r5
 8001f1c:	d909      	bls.n	8001f32 <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1e:	b2eb      	uxtb	r3, r5
 8001f20:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f22:	6813      	ldr	r3, [r2, #0]
 8001f24:	f003 030f 	and.w	r3, r3, #15
 8001f28:	42ab      	cmp	r3, r5
 8001f2a:	d002      	beq.n	8001f32 <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 8001f2c:	2001      	movs	r0, #1
}
 8001f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f32:	6823      	ldr	r3, [r4, #0]
 8001f34:	075a      	lsls	r2, r3, #29
 8001f36:	d506      	bpl.n	8001f46 <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f38:	4917      	ldr	r1, [pc, #92]	; (8001f98 <HAL_RCC_ClockConfig+0x128>)
 8001f3a:	68e0      	ldr	r0, [r4, #12]
 8001f3c:	688a      	ldr	r2, [r1, #8]
 8001f3e:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8001f42:	4302      	orrs	r2, r0
 8001f44:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f46:	071b      	lsls	r3, r3, #28
 8001f48:	d411      	bmi.n	8001f6e <HAL_RCC_ClockConfig+0xfe>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f4a:	f7ff ff5b 	bl	8001e04 <HAL_RCC_GetSysClockFreq>
 8001f4e:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_RCC_ClockConfig+0x128>)
 8001f50:	4912      	ldr	r1, [pc, #72]	; (8001f9c <HAL_RCC_ClockConfig+0x12c>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	4a12      	ldr	r2, [pc, #72]	; (8001fa0 <HAL_RCC_ClockConfig+0x130>)
 8001f56:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001f5a:	5ccb      	ldrb	r3, [r1, r3]
 8001f5c:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f60:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f62:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f64:	f7ff f800 	bl	8000f68 <HAL_InitTick>
  return HAL_OK;
 8001f68:	2000      	movs	r0, #0
}
 8001f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f6e:	4a0a      	ldr	r2, [pc, #40]	; (8001f98 <HAL_RCC_ClockConfig+0x128>)
 8001f70:	6921      	ldr	r1, [r4, #16]
 8001f72:	6893      	ldr	r3, [r2, #8]
 8001f74:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001f78:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001f7c:	6093      	str	r3, [r2, #8]
 8001f7e:	e7e4      	b.n	8001f4a <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <HAL_RCC_ClockConfig+0x128>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	039e      	lsls	r6, r3, #14
 8001f86:	d4ab      	bmi.n	8001ee0 <HAL_RCC_ClockConfig+0x70>
 8001f88:	e7d0      	b.n	8001f2c <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8001f8a:	2003      	movs	r0, #3
 8001f8c:	e7ed      	b.n	8001f6a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8e:	0198      	lsls	r0, r3, #6
 8001f90:	d4a6      	bmi.n	8001ee0 <HAL_RCC_ClockConfig+0x70>
 8001f92:	e7cb      	b.n	8001f2c <HAL_RCC_ClockConfig+0xbc>
 8001f94:	40023c00 	.word	0x40023c00
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	08009b28 	.word	0x08009b28
 8001fa0:	2000001c 	.word	0x2000001c

08001fa4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001fa6:	4a05      	ldr	r2, [pc, #20]	; (8001fbc <HAL_RCC_GetPCLK1Freq+0x18>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8001faa:	4905      	ldr	r1, [pc, #20]	; (8001fc0 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fac:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001fb0:	6808      	ldr	r0, [r1, #0]
 8001fb2:	5cd3      	ldrb	r3, [r2, r3]
}
 8001fb4:	40d8      	lsrs	r0, r3
 8001fb6:	4770      	bx	lr
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	08009b38 	.word	0x08009b38
 8001fc0:	2000001c 	.word	0x2000001c

08001fc4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001fc6:	4a05      	ldr	r2, [pc, #20]	; (8001fdc <HAL_RCC_GetPCLK2Freq+0x18>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8001fca:	4905      	ldr	r1, [pc, #20]	; (8001fe0 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fcc:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001fd0:	6808      	ldr	r0, [r1, #0]
 8001fd2:	5cd3      	ldrb	r3, [r2, r3]
}
 8001fd4:	40d8      	lsrs	r0, r3
 8001fd6:	4770      	bx	lr
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	08009b38 	.word	0x08009b38
 8001fe0:	2000001c 	.word	0x2000001c

08001fe4 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fe4:	2800      	cmp	r0, #0
 8001fe6:	d03b      	beq.n	8002060 <HAL_SPI_Init+0x7c>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fe8:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fec:	2300      	movs	r3, #0
{
 8001fee:	b570      	push	{r4, r5, r6, lr}
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ff0:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8001ff4:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ff6:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ff8:	b362      	cbz	r2, 8002054 <HAL_SPI_Init+0x70>
 8001ffa:	4618      	mov	r0, r3
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001ffc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8002000:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 8002004:	432b      	orrs	r3, r5
 8002006:	4313      	orrs	r3, r2
 8002008:	6962      	ldr	r2, [r4, #20]
 800200a:	69e5      	ldr	r5, [r4, #28]
 800200c:	6a26      	ldr	r6, [r4, #32]
 800200e:	430b      	orrs	r3, r1
 8002010:	4313      	orrs	r3, r2
 8002012:	69a2      	ldr	r2, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8002014:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002016:	432b      	orrs	r3, r5
  hspi->State = HAL_SPI_STATE_BUSY;
 8002018:	2502      	movs	r5, #2
 800201a:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800201e:	4333      	orrs	r3, r6
 8002020:	f402 7500 	and.w	r5, r2, #512	; 0x200
  __HAL_SPI_DISABLE(hspi);
 8002024:	680e      	ldr	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002026:	432b      	orrs	r3, r5
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002028:	0c12      	lsrs	r2, r2, #16
 800202a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800202c:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002030:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002032:	432a      	orrs	r2, r5
  __HAL_SPI_DISABLE(hspi);
 8002034:	f026 0640 	bic.w	r6, r6, #64	; 0x40
 8002038:	600e      	str	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800203a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800203c:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800203e:	69cb      	ldr	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002040:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002042:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8002046:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002048:	61cb      	str	r3, [r1, #28]

  return HAL_OK;
 800204a:	4610      	mov	r0, r2
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800204c:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800204e:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
}
 8002052:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002054:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002058:	f003 fe94 	bl	8005d84 <HAL_SPI_MspInit>
 800205c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800205e:	e7cd      	b.n	8001ffc <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8002060:	2001      	movs	r0, #1
}
 8002062:	4770      	bx	lr

08002064 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002068:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 800206c:	2c01      	cmp	r4, #1
{
 800206e:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8002070:	f000 80aa 	beq.w	80021c8 <HAL_SPI_TransmitReceive+0x164>
 8002074:	461e      	mov	r6, r3
 8002076:	2301      	movs	r3, #1
 8002078:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 800207c:	4604      	mov	r4, r0
 800207e:	4617      	mov	r7, r2
 8002080:	460d      	mov	r5, r1

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002082:	f7fe ffbb 	bl	8000ffc <HAL_GetTick>
 8002086:	4680      	mov	r8, r0

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002088:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 800208c:	6863      	ldr	r3, [r4, #4]
  tmp_state           = hspi->State;
 800208e:	b2c0      	uxtb	r0, r0
  initial_TxXferCount = Size;

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002090:	2801      	cmp	r0, #1
 8002092:	d011      	beq.n	80020b8 <HAL_SPI_TransmitReceive+0x54>
 8002094:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002098:	d009      	beq.n	80020ae <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800209a:	2002      	movs	r0, #2
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 800209c:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800209e:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80020a0:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80020a4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
}
 80020a8:	b002      	add	sp, #8
 80020aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80020ae:	68a2      	ldr	r2, [r4, #8]
 80020b0:	2a00      	cmp	r2, #0
 80020b2:	d1f2      	bne.n	800209a <HAL_SPI_TransmitReceive+0x36>
 80020b4:	2804      	cmp	r0, #4
 80020b6:	d1f0      	bne.n	800209a <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80020b8:	2d00      	cmp	r5, #0
 80020ba:	f000 8089 	beq.w	80021d0 <HAL_SPI_TransmitReceive+0x16c>
 80020be:	2f00      	cmp	r7, #0
 80020c0:	f000 8086 	beq.w	80021d0 <HAL_SPI_TransmitReceive+0x16c>
 80020c4:	2e00      	cmp	r6, #0
 80020c6:	f000 8083 	beq.w	80021d0 <HAL_SPI_TransmitReceive+0x16c>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80020ca:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020ce:	6820      	ldr	r0, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80020d0:	63a7      	str	r7, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80020d2:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80020d4:	bf1c      	itt	ne
 80020d6:	2205      	movne	r2, #5
 80020d8:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020dc:	2200      	movs	r2, #0
 80020de:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 80020e0:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80020e2:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020e4:	6801      	ldr	r1, [r0, #0]
  hspi->RxXferSize  = Size;
 80020e6:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->TxISR       = NULL;
 80020e8:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020ec:	064a      	lsls	r2, r1, #25
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80020ee:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80020f0:	86a6      	strh	r6, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020f2:	d403      	bmi.n	80020fc <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 80020f4:	6802      	ldr	r2, [r0, #0]
 80020f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020fa:	6002      	str	r2, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020fc:	68e2      	ldr	r2, [r4, #12]
 80020fe:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002102:	f000 809d 	beq.w	8002240 <HAL_SPI_TransmitReceive+0x1dc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 8102 	beq.w	8002310 <HAL_SPI_TransmitReceive+0x2ac>
 800210c:	2e01      	cmp	r6, #1
 800210e:	f000 80ff 	beq.w	8002310 <HAL_SPI_TransmitReceive+0x2ac>
 8002112:	9b08      	ldr	r3, [sp, #32]
 8002114:	3301      	adds	r3, #1
        txallowed = 1U;
 8002116:	f04f 0501 	mov.w	r5, #1
 800211a:	d027      	beq.n	800216c <HAL_SPI_TransmitReceive+0x108>
 800211c:	e05a      	b.n	80021d4 <HAL_SPI_TransmitReceive+0x170>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800211e:	6823      	ldr	r3, [r4, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	0792      	lsls	r2, r2, #30
 8002124:	d50f      	bpl.n	8002146 <HAL_SPI_TransmitReceive+0xe2>
 8002126:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002128:	b292      	uxth	r2, r2
 800212a:	b162      	cbz	r2, 8002146 <HAL_SPI_TransmitReceive+0xe2>
 800212c:	b15d      	cbz	r5, 8002146 <HAL_SPI_TransmitReceive+0xe2>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800212e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002130:	7812      	ldrb	r2, [r2, #0]
 8002132:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8002134:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8002136:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002138:	6823      	ldr	r3, [r4, #0]
        hspi->TxXferCount--;
 800213a:	3a01      	subs	r2, #1
 800213c:	b292      	uxth	r2, r2
        hspi->pTxBuffPtr++;
 800213e:	3101      	adds	r1, #1
        hspi->TxXferCount--;
 8002140:	86e2      	strh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8002142:	6321      	str	r1, [r4, #48]	; 0x30
        txallowed = 0U;
 8002144:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	07d7      	lsls	r7, r2, #31
 800214a:	d50d      	bpl.n	8002168 <HAL_SPI_TransmitReceive+0x104>
 800214c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800214e:	b292      	uxth	r2, r2
 8002150:	b152      	cbz	r2, 8002168 <HAL_SPI_TransmitReceive+0x104>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002152:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 8002158:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 800215a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800215c:	3b01      	subs	r3, #1
 800215e:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr++;
 8002160:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 8002162:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8002164:	63a2      	str	r2, [r4, #56]	; 0x38
        txallowed = 1U;
 8002166:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002168:	f7fe ff48 	bl	8000ffc <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800216c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800216e:	b29b      	uxth	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1d4      	bne.n	800211e <HAL_SPI_TransmitReceive+0xba>
 8002174:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002176:	b29b      	uxth	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1d0      	bne.n	800211e <HAL_SPI_TransmitReceive+0xba>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800217c:	4b90      	ldr	r3, [pc, #576]	; (80023c0 <HAL_SPI_TransmitReceive+0x35c>)
 800217e:	4a91      	ldr	r2, [pc, #580]	; (80023c4 <HAL_SPI_TransmitReceive+0x360>)
 8002180:	681b      	ldr	r3, [r3, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002182:	6861      	ldr	r1, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002184:	fba2 2303 	umull	r2, r3, r2, r3
 8002188:	0d5b      	lsrs	r3, r3, #21
 800218a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800218e:	fb02 f303 	mul.w	r3, r2, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002192:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002196:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002198:	d107      	bne.n	80021aa <HAL_SPI_TransmitReceive+0x146>
 800219a:	e0ce      	b.n	800233a <HAL_SPI_TransmitReceive+0x2d6>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 800219c:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800219e:	6822      	ldr	r2, [r4, #0]
      count--;
 80021a0:	3b01      	subs	r3, #1
 80021a2:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80021a4:	6893      	ldr	r3, [r2, #8]
 80021a6:	061b      	lsls	r3, r3, #24
 80021a8:	d502      	bpl.n	80021b0 <HAL_SPI_TransmitReceive+0x14c>
      if (count == 0U)
 80021aa:	9b01      	ldr	r3, [sp, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1f5      	bne.n	800219c <HAL_SPI_TransmitReceive+0x138>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80021b0:	68a0      	ldr	r0, [r4, #8]
 80021b2:	2800      	cmp	r0, #0
 80021b4:	f040 80bf 	bne.w	8002336 <HAL_SPI_TransmitReceive+0x2d2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021b8:	6823      	ldr	r3, [r4, #0]
 80021ba:	9000      	str	r0, [sp, #0]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	9200      	str	r2, [sp, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	9b00      	ldr	r3, [sp, #0]
 80021c6:	e769      	b.n	800209c <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 80021c8:	2002      	movs	r0, #2
}
 80021ca:	b002      	add	sp, #8
 80021cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errorcode = HAL_ERROR;
 80021d0:	2001      	movs	r0, #1
 80021d2:	e763      	b.n	800209c <HAL_SPI_TransmitReceive+0x38>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021d4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	b923      	cbnz	r3, 80021e4 <HAL_SPI_TransmitReceive+0x180>
 80021da:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80021dc:	b29b      	uxth	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 80b0 	beq.w	8002344 <HAL_SPI_TransmitReceive+0x2e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021e4:	6823      	ldr	r3, [r4, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	0796      	lsls	r6, r2, #30
 80021ea:	d50f      	bpl.n	800220c <HAL_SPI_TransmitReceive+0x1a8>
 80021ec:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80021ee:	b292      	uxth	r2, r2
 80021f0:	b162      	cbz	r2, 800220c <HAL_SPI_TransmitReceive+0x1a8>
 80021f2:	b15d      	cbz	r5, 800220c <HAL_SPI_TransmitReceive+0x1a8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80021f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80021f6:	7812      	ldrb	r2, [r2, #0]
 80021f8:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80021fa:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 80021fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80021fe:	6823      	ldr	r3, [r4, #0]
        hspi->TxXferCount--;
 8002200:	3a01      	subs	r2, #1
 8002202:	b292      	uxth	r2, r2
        hspi->pTxBuffPtr++;
 8002204:	3101      	adds	r1, #1
        hspi->TxXferCount--;
 8002206:	86e2      	strh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8002208:	6321      	str	r1, [r4, #48]	; 0x30
        txallowed = 0U;
 800220a:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	07d0      	lsls	r0, r2, #31
 8002210:	d50d      	bpl.n	800222e <HAL_SPI_TransmitReceive+0x1ca>
 8002212:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002214:	b292      	uxth	r2, r2
 8002216:	b152      	cbz	r2, 800222e <HAL_SPI_TransmitReceive+0x1ca>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002218:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 800221e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8002220:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002222:	3b01      	subs	r3, #1
 8002224:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr++;
 8002226:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 8002228:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 800222a:	63a2      	str	r2, [r4, #56]	; 0x38
        txallowed = 1U;
 800222c:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800222e:	f7fe fee5 	bl	8000ffc <HAL_GetTick>
 8002232:	9b08      	ldr	r3, [sp, #32]
 8002234:	eba0 0008 	sub.w	r0, r0, r8
 8002238:	4283      	cmp	r3, r0
 800223a:	d8cb      	bhi.n	80021d4 <HAL_SPI_TransmitReceive+0x170>
        errorcode = HAL_TIMEOUT;
 800223c:	2003      	movs	r0, #3
 800223e:	e72d      	b.n	800209c <HAL_SPI_TransmitReceive+0x38>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002240:	2b00      	cmp	r3, #0
 8002242:	d06f      	beq.n	8002324 <HAL_SPI_TransmitReceive+0x2c0>
 8002244:	2e01      	cmp	r6, #1
 8002246:	d06d      	beq.n	8002324 <HAL_SPI_TransmitReceive+0x2c0>
 8002248:	9b08      	ldr	r3, [sp, #32]
 800224a:	3301      	adds	r3, #1
{
 800224c:	f04f 0501 	mov.w	r5, #1
 8002250:	d024      	beq.n	800229c <HAL_SPI_TransmitReceive+0x238>
 8002252:	e02c      	b.n	80022ae <HAL_SPI_TransmitReceive+0x24a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002254:	6823      	ldr	r3, [r4, #0]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	0797      	lsls	r7, r2, #30
 800225a:	d50d      	bpl.n	8002278 <HAL_SPI_TransmitReceive+0x214>
 800225c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800225e:	b292      	uxth	r2, r2
 8002260:	b152      	cbz	r2, 8002278 <HAL_SPI_TransmitReceive+0x214>
 8002262:	b14d      	cbz	r5, 8002278 <HAL_SPI_TransmitReceive+0x214>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002264:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002266:	f831 2b02 	ldrh.w	r2, [r1], #2
 800226a:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800226c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800226e:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002270:	3a01      	subs	r2, #1
 8002272:	b292      	uxth	r2, r2
 8002274:	86e2      	strh	r2, [r4, #54]	; 0x36
        txallowed = 0U;
 8002276:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	07d6      	lsls	r6, r2, #31
 800227c:	d50c      	bpl.n	8002298 <HAL_SPI_TransmitReceive+0x234>
 800227e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002280:	b292      	uxth	r2, r2
 8002282:	b14a      	cbz	r2, 8002298 <HAL_SPI_TransmitReceive+0x234>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002284:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 800228c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800228e:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002290:	3b01      	subs	r3, #1
 8002292:	b29b      	uxth	r3, r3
 8002294:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002296:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002298:	f7fe feb0 	bl	8000ffc <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800229c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800229e:	b29b      	uxth	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1d7      	bne.n	8002254 <HAL_SPI_TransmitReceive+0x1f0>
 80022a4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1d3      	bne.n	8002254 <HAL_SPI_TransmitReceive+0x1f0>
 80022ac:	e766      	b.n	800217c <HAL_SPI_TransmitReceive+0x118>
 80022ae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	b91b      	cbnz	r3, 80022bc <HAL_SPI_TransmitReceive+0x258>
 80022b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d043      	beq.n	8002344 <HAL_SPI_TransmitReceive+0x2e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022bc:	6823      	ldr	r3, [r4, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	0790      	lsls	r0, r2, #30
 80022c2:	d50d      	bpl.n	80022e0 <HAL_SPI_TransmitReceive+0x27c>
 80022c4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80022c6:	b292      	uxth	r2, r2
 80022c8:	b152      	cbz	r2, 80022e0 <HAL_SPI_TransmitReceive+0x27c>
 80022ca:	b14d      	cbz	r5, 80022e0 <HAL_SPI_TransmitReceive+0x27c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80022ce:	f831 2b02 	ldrh.w	r2, [r1], #2
 80022d2:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80022d4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022d6:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80022d8:	3a01      	subs	r2, #1
 80022da:	b292      	uxth	r2, r2
 80022dc:	86e2      	strh	r2, [r4, #54]	; 0x36
        txallowed = 0U;
 80022de:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	07d1      	lsls	r1, r2, #31
 80022e4:	d50c      	bpl.n	8002300 <HAL_SPI_TransmitReceive+0x29c>
 80022e6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80022e8:	b292      	uxth	r2, r2
 80022ea:	b14a      	cbz	r2, 8002300 <HAL_SPI_TransmitReceive+0x29c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 80022f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80022f6:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80022f8:	3b01      	subs	r3, #1
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80022fe:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002300:	f7fe fe7c 	bl	8000ffc <HAL_GetTick>
 8002304:	9b08      	ldr	r3, [sp, #32]
 8002306:	eba0 0008 	sub.w	r0, r0, r8
 800230a:	4283      	cmp	r3, r0
 800230c:	d8cf      	bhi.n	80022ae <HAL_SPI_TransmitReceive+0x24a>
 800230e:	e795      	b.n	800223c <HAL_SPI_TransmitReceive+0x1d8>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002310:	782b      	ldrb	r3, [r5, #0]
 8002312:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 8002314:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002316:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002318:	3b01      	subs	r3, #1
 800231a:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800231c:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 800231e:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002320:	6322      	str	r2, [r4, #48]	; 0x30
 8002322:	e6f6      	b.n	8002112 <HAL_SPI_TransmitReceive+0xae>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002324:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002328:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 800232a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800232c:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800232e:	3b01      	subs	r3, #1
 8002330:	b29b      	uxth	r3, r3
 8002332:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002334:	e788      	b.n	8002248 <HAL_SPI_TransmitReceive+0x1e4>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002336:	2000      	movs	r0, #0
 8002338:	e6b0      	b.n	800209c <HAL_SPI_TransmitReceive+0x38>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800233a:	6822      	ldr	r2, [r4, #0]
 800233c:	6893      	ldr	r3, [r2, #8]
 800233e:	0619      	lsls	r1, r3, #24
 8002340:	d4fc      	bmi.n	800233c <HAL_SPI_TransmitReceive+0x2d8>
 8002342:	e735      	b.n	80021b0 <HAL_SPI_TransmitReceive+0x14c>
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002344:	4b1e      	ldr	r3, [pc, #120]	; (80023c0 <HAL_SPI_TransmitReceive+0x35c>)
 8002346:	4a1f      	ldr	r2, [pc, #124]	; (80023c4 <HAL_SPI_TransmitReceive+0x360>)
 8002348:	681b      	ldr	r3, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800234a:	6861      	ldr	r1, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800234c:	fba2 2303 	umull	r2, r3, r2, r3
 8002350:	0d5b      	lsrs	r3, r3, #21
 8002352:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002356:	fb02 f303 	mul.w	r3, r2, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800235a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800235e:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002360:	f47f af23 	bne.w	80021aa <HAL_SPI_TransmitReceive+0x146>
 8002364:	9b08      	ldr	r3, [sp, #32]
 8002366:	e006      	b.n	8002376 <HAL_SPI_TransmitReceive+0x312>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002368:	f7fe fe48 	bl	8000ffc <HAL_GetTick>
 800236c:	9b08      	ldr	r3, [sp, #32]
 800236e:	eba0 0008 	sub.w	r0, r0, r8
 8002372:	4283      	cmp	r3, r0
 8002374:	d906      	bls.n	8002384 <HAL_SPI_TransmitReceive+0x320>
 8002376:	3301      	adds	r3, #1
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002378:	6822      	ldr	r2, [r4, #0]
 800237a:	d0df      	beq.n	800233c <HAL_SPI_TransmitReceive+0x2d8>
 800237c:	6893      	ldr	r3, [r2, #8]
 800237e:	061a      	lsls	r2, r3, #24
 8002380:	d4f2      	bmi.n	8002368 <HAL_SPI_TransmitReceive+0x304>
 8002382:	e715      	b.n	80021b0 <HAL_SPI_TransmitReceive+0x14c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002384:	e9d4 3100 	ldrd	r3, r1, [r4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002388:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800238a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800238e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002392:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002394:	d018      	beq.n	80023c8 <HAL_SPI_TransmitReceive+0x364>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002396:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002398:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800239c:	d107      	bne.n	80023ae <HAL_SPI_TransmitReceive+0x34a>
          SPI_RESET_CRC(hspi);
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023ac:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80023ae:	2001      	movs	r0, #1
 80023b0:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023b6:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023b8:	4313      	orrs	r3, r2
 80023ba:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023bc:	6562      	str	r2, [r4, #84]	; 0x54
 80023be:	e66d      	b.n	800209c <HAL_SPI_TransmitReceive+0x38>
 80023c0:	2000001c 	.word	0x2000001c
 80023c4:	165e9f81 	.word	0x165e9f81
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023c8:	68a2      	ldr	r2, [r4, #8]
 80023ca:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80023ce:	d002      	beq.n	80023d6 <HAL_SPI_TransmitReceive+0x372>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023d0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80023d4:	d1df      	bne.n	8002396 <HAL_SPI_TransmitReceive+0x332>
          __HAL_SPI_DISABLE(hspi);
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	e7da      	b.n	8002396 <HAL_SPI_TransmitReceive+0x332>

080023e0 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023e0:	2800      	cmp	r0, #0
 80023e2:	d05c      	beq.n	800249e <HAL_TIM_Base_Init+0xbe>
{
 80023e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023e6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80023ea:	4604      	mov	r4, r0
 80023ec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023f0:	b3bb      	cbz	r3, 8002462 <HAL_TIM_Base_Init+0x82>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023f2:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023f4:	4e3a      	ldr	r6, [pc, #232]	; (80024e0 <HAL_TIM_Base_Init+0x100>)
 80023f6:	69a5      	ldr	r5, [r4, #24]
 80023f8:	68e0      	ldr	r0, [r4, #12]
 80023fa:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 80023fc:	2302      	movs	r3, #2
 80023fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002402:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8002404:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002406:	d04c      	beq.n	80024a2 <HAL_TIM_Base_Init+0xc2>
 8002408:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800240c:	d058      	beq.n	80024c0 <HAL_TIM_Base_Init+0xe0>
 800240e:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8002412:	42b2      	cmp	r2, r6
 8002414:	d02a      	beq.n	800246c <HAL_TIM_Base_Init+0x8c>
 8002416:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800241a:	42b2      	cmp	r2, r6
 800241c:	d026      	beq.n	800246c <HAL_TIM_Base_Init+0x8c>
 800241e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002422:	42b2      	cmp	r2, r6
 8002424:	d022      	beq.n	800246c <HAL_TIM_Base_Init+0x8c>
 8002426:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 800242a:	42b2      	cmp	r2, r6
 800242c:	d01e      	beq.n	800246c <HAL_TIM_Base_Init+0x8c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800242e:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8002432:	42b2      	cmp	r2, r6
 8002434:	d013      	beq.n	800245e <HAL_TIM_Base_Init+0x7e>
 8002436:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800243a:	42b2      	cmp	r2, r6
 800243c:	d00f      	beq.n	800245e <HAL_TIM_Base_Init+0x7e>
 800243e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002442:	42b2      	cmp	r2, r6
 8002444:	d00b      	beq.n	800245e <HAL_TIM_Base_Init+0x7e>
 8002446:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 800244a:	42b2      	cmp	r2, r6
 800244c:	d007      	beq.n	800245e <HAL_TIM_Base_Init+0x7e>
 800244e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002452:	42b2      	cmp	r2, r6
 8002454:	d003      	beq.n	800245e <HAL_TIM_Base_Init+0x7e>
 8002456:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800245a:	42b2      	cmp	r2, r6
 800245c:	d138      	bne.n	80024d0 <HAL_TIM_Base_Init+0xf0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800245e:	6926      	ldr	r6, [r4, #16]
 8002460:	e033      	b.n	80024ca <HAL_TIM_Base_Init+0xea>
    htim->Lock = HAL_UNLOCKED;
 8002462:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002466:	f003 ff19 	bl	800629c <HAL_TIM_Base_MspInit>
 800246a:	e7c2      	b.n	80023f2 <HAL_TIM_Base_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 800246c:	68a6      	ldr	r6, [r4, #8]
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800246e:	4f1d      	ldr	r7, [pc, #116]	; (80024e4 <HAL_TIM_Base_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002474:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002476:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800247c:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800247e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002482:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002484:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 8002486:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002488:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800248a:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800248c:	d101      	bne.n	8002492 <HAL_TIM_Base_Init+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800248e:	6963      	ldr	r3, [r4, #20]
 8002490:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002492:	2301      	movs	r3, #1
 8002494:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8002496:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002498:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800249c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800249e:	2001      	movs	r0, #1
}
 80024a0:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80024a2:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024a4:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80024aa:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80024ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024b0:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024b6:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80024b8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024ba:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80024bc:	6291      	str	r1, [r2, #40]	; 0x28
 80024be:	e7e6      	b.n	800248e <HAL_TIM_Base_Init+0xae>
    tmpcr1 |= Structure->CounterMode;
 80024c0:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024c2:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80024c8:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80024ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024ce:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024d4:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80024d6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024d8:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80024da:	6291      	str	r1, [r2, #40]	; 0x28
 80024dc:	e7d9      	b.n	8002492 <HAL_TIM_Base_Init+0xb2>
 80024de:	bf00      	nop
 80024e0:	40010000 	.word	0x40010000
 80024e4:	40010400 	.word	0x40010400

080024e8 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024e8:	6803      	ldr	r3, [r0, #0]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	f042 0201 	orr.w	r2, r2, #1
 80024f0:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f8:	2a06      	cmp	r2, #6
 80024fa:	d003      	beq.n	8002504 <HAL_TIM_Base_Start_IT+0x1c>
    __HAL_TIM_ENABLE(htim);
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	f042 0201 	orr.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]
}
 8002504:	2000      	movs	r0, #0
 8002506:	4770      	bx	lr

08002508 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002508:	2800      	cmp	r0, #0
 800250a:	d05c      	beq.n	80025c6 <HAL_TIM_PWM_Init+0xbe>
{
 800250c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800250e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002512:	4604      	mov	r4, r0
 8002514:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002518:	b3bb      	cbz	r3, 800258a <HAL_TIM_PWM_Init+0x82>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800251a:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800251c:	4e3a      	ldr	r6, [pc, #232]	; (8002608 <HAL_TIM_PWM_Init+0x100>)
 800251e:	69a5      	ldr	r5, [r4, #24]
 8002520:	68e0      	ldr	r0, [r4, #12]
 8002522:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8002524:	2302      	movs	r3, #2
 8002526:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800252a:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 800252c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800252e:	d04c      	beq.n	80025ca <HAL_TIM_PWM_Init+0xc2>
 8002530:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002534:	d058      	beq.n	80025e8 <HAL_TIM_PWM_Init+0xe0>
 8002536:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 800253a:	42b2      	cmp	r2, r6
 800253c:	d02a      	beq.n	8002594 <HAL_TIM_PWM_Init+0x8c>
 800253e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002542:	42b2      	cmp	r2, r6
 8002544:	d026      	beq.n	8002594 <HAL_TIM_PWM_Init+0x8c>
 8002546:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800254a:	42b2      	cmp	r2, r6
 800254c:	d022      	beq.n	8002594 <HAL_TIM_PWM_Init+0x8c>
 800254e:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8002552:	42b2      	cmp	r2, r6
 8002554:	d01e      	beq.n	8002594 <HAL_TIM_PWM_Init+0x8c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002556:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 800255a:	42b2      	cmp	r2, r6
 800255c:	d013      	beq.n	8002586 <HAL_TIM_PWM_Init+0x7e>
 800255e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002562:	42b2      	cmp	r2, r6
 8002564:	d00f      	beq.n	8002586 <HAL_TIM_PWM_Init+0x7e>
 8002566:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800256a:	42b2      	cmp	r2, r6
 800256c:	d00b      	beq.n	8002586 <HAL_TIM_PWM_Init+0x7e>
 800256e:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 8002572:	42b2      	cmp	r2, r6
 8002574:	d007      	beq.n	8002586 <HAL_TIM_PWM_Init+0x7e>
 8002576:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800257a:	42b2      	cmp	r2, r6
 800257c:	d003      	beq.n	8002586 <HAL_TIM_PWM_Init+0x7e>
 800257e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002582:	42b2      	cmp	r2, r6
 8002584:	d138      	bne.n	80025f8 <HAL_TIM_PWM_Init+0xf0>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002586:	6926      	ldr	r6, [r4, #16]
 8002588:	e033      	b.n	80025f2 <HAL_TIM_PWM_Init+0xea>
    htim->Lock = HAL_UNLOCKED;
 800258a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800258e:	f003 fe59 	bl	8006244 <HAL_TIM_PWM_MspInit>
 8002592:	e7c2      	b.n	800251a <HAL_TIM_PWM_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8002594:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002596:	4f1d      	ldr	r7, [pc, #116]	; (800260c <HAL_TIM_PWM_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800259c:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800259e:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80025a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025a4:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025aa:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025ac:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 80025ae:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025b0:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80025b2:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025b4:	d101      	bne.n	80025ba <HAL_TIM_PWM_Init+0xb2>
    TIMx->RCR = Structure->RepetitionCounter;
 80025b6:	6963      	ldr	r3, [r4, #20]
 80025b8:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80025ba:	2301      	movs	r3, #1
 80025bc:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 80025be:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80025c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80025c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80025c6:	2001      	movs	r0, #1
}
 80025c8:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80025ca:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025cc:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80025d2:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80025d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025d8:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025de:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80025e0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025e2:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80025e4:	6291      	str	r1, [r2, #40]	; 0x28
 80025e6:	e7e6      	b.n	80025b6 <HAL_TIM_PWM_Init+0xae>
    tmpcr1 |= Structure->CounterMode;
 80025e8:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025ea:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80025f0:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80025f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025f6:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025fc:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80025fe:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002600:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002602:	6291      	str	r1, [r2, #40]	; 0x28
 8002604:	e7d9      	b.n	80025ba <HAL_TIM_PWM_Init+0xb2>
 8002606:	bf00      	nop
 8002608:	40010000 	.word	0x40010000
 800260c:	40010400 	.word	0x40010400

08002610 <HAL_TIM_PWM_Start>:
 8002610:	6803      	ldr	r3, [r0, #0]
 8002612:	2201      	movs	r2, #1
 8002614:	6a18      	ldr	r0, [r3, #32]
 8002616:	f001 011f 	and.w	r1, r1, #31
 800261a:	fa02 f101 	lsl.w	r1, r2, r1
 800261e:	ea20 0001 	bic.w	r0, r0, r1
 8002622:	b410      	push	{r4}
 8002624:	6218      	str	r0, [r3, #32]
 8002626:	6a1a      	ldr	r2, [r3, #32]
 8002628:	4c0c      	ldr	r4, [pc, #48]	; (800265c <HAL_TIM_PWM_Start+0x4c>)
 800262a:	4311      	orrs	r1, r2
 800262c:	42a3      	cmp	r3, r4
 800262e:	6219      	str	r1, [r3, #32]
 8002630:	d00f      	beq.n	8002652 <HAL_TIM_PWM_Start+0x42>
 8002632:	4a0b      	ldr	r2, [pc, #44]	; (8002660 <HAL_TIM_PWM_Start+0x50>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d00c      	beq.n	8002652 <HAL_TIM_PWM_Start+0x42>
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	f002 0207 	and.w	r2, r2, #7
 800263e:	2a06      	cmp	r2, #6
 8002640:	d003      	beq.n	800264a <HAL_TIM_PWM_Start+0x3a>
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	f042 0201 	orr.w	r2, r2, #1
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	2000      	movs	r0, #0
 800264c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002654:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002658:	645a      	str	r2, [r3, #68]	; 0x44
 800265a:	e7ed      	b.n	8002638 <HAL_TIM_PWM_Start+0x28>
 800265c:	40010000 	.word	0x40010000
 8002660:	40010400 	.word	0x40010400

08002664 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8002664:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002668:	2b01      	cmp	r3, #1
 800266a:	f000 80cc 	beq.w	8002806 <HAL_TIM_PWM_ConfigChannel+0x1a2>
{
 800266e:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8002670:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8002672:	2401      	movs	r4, #1
 8002674:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002678:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 800267c:	2a0c      	cmp	r2, #12
 800267e:	d835      	bhi.n	80026ec <HAL_TIM_PWM_ConfigChannel+0x88>
 8002680:	e8df f002 	tbb	[pc, r2]
 8002684:	34343407 	.word	0x34343407
 8002688:	3434346a 	.word	0x3434346a
 800268c:	34343496 	.word	0x34343496
 8002690:	3d          	.byte	0x3d
 8002691:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002692:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002694:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002698:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800269a:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800269c:	4e74      	ldr	r6, [pc, #464]	; (8002870 <HAL_TIM_PWM_ConfigChannel+0x20c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800269e:	f025 0501 	bic.w	r5, r5, #1
 80026a2:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80026a4:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80026a6:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80026a8:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 80026aa:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026ae:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026b2:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 80026b4:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmrx |= OC_Config->OCMode;
 80026b8:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026bc:	f000 80bb 	beq.w	8002836 <HAL_TIM_PWM_ConfigChannel+0x1d2>
 80026c0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80026c4:	42b3      	cmp	r3, r6
 80026c6:	f000 80b6 	beq.w	8002836 <HAL_TIM_PWM_ConfigChannel+0x1d2>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026ca:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80026cc:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80026ce:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80026d0:	635e      	str	r6, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026d2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026d4:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026d6:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026d8:	f044 0408 	orr.w	r4, r4, #8
 80026dc:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026de:	6999      	ldr	r1, [r3, #24]
 80026e0:	f021 0104 	bic.w	r1, r1, #4
 80026e4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026e6:	699a      	ldr	r2, [r3, #24]
 80026e8:	432a      	orrs	r2, r5
 80026ea:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80026ec:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80026ee:	2201      	movs	r2, #1
 80026f0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80026f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80026fa:	4618      	mov	r0, r3
}
 80026fc:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026fe:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002700:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002704:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002706:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002708:	4e59      	ldr	r6, [pc, #356]	; (8002870 <HAL_TIM_PWM_ConfigChannel+0x20c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800270a:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 800270e:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8002710:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8002712:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8002714:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8002716:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800271a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800271e:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002720:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002724:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002728:	d06f      	beq.n	800280a <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800272a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800272e:	42b3      	cmp	r3, r6
 8002730:	d06b      	beq.n	800280a <HAL_TIM_PWM_ConfigChannel+0x1a6>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002732:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002734:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002736:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002738:	641e      	str	r6, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800273a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800273c:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800273e:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002740:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8002744:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002746:	69d9      	ldr	r1, [r3, #28]
 8002748:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800274c:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800274e:	69da      	ldr	r2, [r3, #28]
 8002750:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8002754:	61da      	str	r2, [r3, #28]
      break;
 8002756:	e7c9      	b.n	80026ec <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002758:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800275a:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800275c:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800275e:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002760:	f8df c10c 	ldr.w	ip, [pc, #268]	; 8002870 <HAL_TIM_PWM_ConfigChannel+0x20c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002764:	f025 0510 	bic.w	r5, r5, #16
 8002768:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800276a:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800276c:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800276e:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8002770:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002774:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002778:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800277a:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800277e:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002782:	d065      	beq.n	8002850 <HAL_TIM_PWM_ConfigChannel+0x1ec>
 8002784:	4f3b      	ldr	r7, [pc, #236]	; (8002874 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8002786:	42bb      	cmp	r3, r7
 8002788:	d062      	beq.n	8002850 <HAL_TIM_PWM_ConfigChannel+0x1ec>
  TIMx->CCR2 = OC_Config->Pulse;
 800278a:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800278c:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800278e:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002790:	639e      	str	r6, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002792:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002794:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002796:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002798:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 800279c:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800279e:	6999      	ldr	r1, [r3, #24]
 80027a0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80027a4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027a6:	699a      	ldr	r2, [r3, #24]
 80027a8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80027ac:	619a      	str	r2, [r3, #24]
      break;
 80027ae:	e79d      	b.n	80026ec <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027b0:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027b2:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027b4:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 80027b6:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027b8:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8002870 <HAL_TIM_PWM_ConfigChannel+0x20c>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027bc:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 80027c0:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80027c2:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80027c4:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80027c6:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 80027c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027cc:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027d0:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027d2:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 80027d6:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027da:	d01c      	beq.n	8002816 <HAL_TIM_PWM_ConfigChannel+0x1b2>
 80027dc:	4f25      	ldr	r7, [pc, #148]	; (8002874 <HAL_TIM_PWM_ConfigChannel+0x210>)
 80027de:	42bb      	cmp	r3, r7
 80027e0:	d019      	beq.n	8002816 <HAL_TIM_PWM_ConfigChannel+0x1b2>
  TIMx->CCR3 = OC_Config->Pulse;
 80027e2:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80027e4:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80027e6:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80027e8:	63de      	str	r6, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80027ea:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027ec:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027ee:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027f0:	f044 0408 	orr.w	r4, r4, #8
 80027f4:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027f6:	69d9      	ldr	r1, [r3, #28]
 80027f8:	f021 0104 	bic.w	r1, r1, #4
 80027fc:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027fe:	69da      	ldr	r2, [r3, #28]
 8002800:	432a      	orrs	r2, r5
 8002802:	61da      	str	r2, [r3, #28]
      break;
 8002804:	e772      	b.n	80026ec <HAL_TIM_PWM_ConfigChannel+0x88>
  __HAL_LOCK(htim);
 8002806:	2002      	movs	r0, #2
}
 8002808:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800280a:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800280c:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002810:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8002814:	e78d      	b.n	8002732 <HAL_TIM_PWM_ConfigChannel+0xce>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002816:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002818:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800281c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002820:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002824:	f425 5c40 	bic.w	ip, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002828:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 800282c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002830:	ea4c 1505 	orr.w	r5, ip, r5, lsl #4
 8002834:	e7d5      	b.n	80027e2 <HAL_TIM_PWM_ConfigChannel+0x17e>
    tmpccer |= OC_Config->OCNPolarity;
 8002836:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002838:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 800283c:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 800283e:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002842:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002846:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 8002848:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800284c:	4335      	orrs	r5, r6
 800284e:	e73c      	b.n	80026ca <HAL_TIM_PWM_ConfigChannel+0x66>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002850:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002852:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002856:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800285a:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800285e:	f425 6c40 	bic.w	ip, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002862:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8002866:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800286a:	ea4c 0585 	orr.w	r5, ip, r5, lsl #2
 800286e:	e78c      	b.n	800278a <HAL_TIM_PWM_ConfigChannel+0x126>
 8002870:	40010000 	.word	0x40010000
 8002874:	40010400 	.word	0x40010400

08002878 <HAL_TIM_OC_DelayElapsedCallback>:
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop

0800287c <HAL_TIM_IC_CaptureCallback>:
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop

08002880 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop

08002884 <HAL_TIM_TriggerCallback>:
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop

08002888 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002888:	6803      	ldr	r3, [r0, #0]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	0791      	lsls	r1, r2, #30
{
 800288e:	b510      	push	{r4, lr}
 8002890:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002892:	d502      	bpl.n	800289a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	0792      	lsls	r2, r2, #30
 8002898:	d45f      	bmi.n	800295a <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	0750      	lsls	r0, r2, #29
 800289e:	d502      	bpl.n	80028a6 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	0751      	lsls	r1, r2, #29
 80028a4:	d446      	bmi.n	8002934 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	0712      	lsls	r2, r2, #28
 80028aa:	d502      	bpl.n	80028b2 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	0710      	lsls	r0, r2, #28
 80028b0:	d42e      	bmi.n	8002910 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	06d2      	lsls	r2, r2, #27
 80028b6:	d502      	bpl.n	80028be <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	06d0      	lsls	r0, r2, #27
 80028bc:	d418      	bmi.n	80028f0 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	07d1      	lsls	r1, r2, #31
 80028c2:	d502      	bpl.n	80028ca <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	07d2      	lsls	r2, r2, #31
 80028c8:	d45d      	bmi.n	8002986 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	0610      	lsls	r0, r2, #24
 80028ce:	d502      	bpl.n	80028d6 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	0611      	lsls	r1, r2, #24
 80028d4:	d45f      	bmi.n	8002996 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028d6:	691a      	ldr	r2, [r3, #16]
 80028d8:	0652      	lsls	r2, r2, #25
 80028da:	d502      	bpl.n	80028e2 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	0650      	lsls	r0, r2, #25
 80028e0:	d461      	bmi.n	80029a6 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	0691      	lsls	r1, r2, #26
 80028e6:	d502      	bpl.n	80028ee <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	0692      	lsls	r2, r2, #26
 80028ec:	d443      	bmi.n	8002976 <HAL_TIM_IRQHandler+0xee>
}
 80028ee:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028f0:	f06f 0210 	mvn.w	r2, #16
 80028f4:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028f6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028f8:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028fa:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028fe:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002900:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002902:	d064      	beq.n	80029ce <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002904:	f7ff ffba 	bl	800287c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002908:	2200      	movs	r2, #0
 800290a:	6823      	ldr	r3, [r4, #0]
 800290c:	7722      	strb	r2, [r4, #28]
 800290e:	e7d6      	b.n	80028be <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002910:	f06f 0208 	mvn.w	r2, #8
 8002914:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002916:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002918:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800291a:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800291c:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800291e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002920:	d152      	bne.n	80029c8 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002922:	f7ff ffa9 	bl	8002878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002926:	4620      	mov	r0, r4
 8002928:	f7ff ffaa 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800292c:	2200      	movs	r2, #0
 800292e:	6823      	ldr	r3, [r4, #0]
 8002930:	7722      	strb	r2, [r4, #28]
 8002932:	e7be      	b.n	80028b2 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002934:	f06f 0204 	mvn.w	r2, #4
 8002938:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800293a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800293c:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800293e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002942:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002944:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002946:	d13c      	bne.n	80029c2 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002948:	f7ff ff96 	bl	8002878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800294c:	4620      	mov	r0, r4
 800294e:	f7ff ff97 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002952:	2200      	movs	r2, #0
 8002954:	6823      	ldr	r3, [r4, #0]
 8002956:	7722      	strb	r2, [r4, #28]
 8002958:	e7a5      	b.n	80028a6 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800295a:	f06f 0202 	mvn.w	r2, #2
 800295e:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002960:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002962:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002964:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002966:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002968:	d025      	beq.n	80029b6 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800296a:	f7ff ff87 	bl	800287c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800296e:	2200      	movs	r2, #0
 8002970:	6823      	ldr	r3, [r4, #0]
 8002972:	7722      	strb	r2, [r4, #28]
 8002974:	e791      	b.n	800289a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002976:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800297a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800297c:	611a      	str	r2, [r3, #16]
}
 800297e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002982:	f000 b877 	b.w	8002a74 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002986:	f06f 0201 	mvn.w	r2, #1
 800298a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800298c:	4620      	mov	r0, r4
 800298e:	f002 ffa5 	bl	80058dc <HAL_TIM_PeriodElapsedCallback>
 8002992:	6823      	ldr	r3, [r4, #0]
 8002994:	e799      	b.n	80028ca <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002996:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800299a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800299c:	4620      	mov	r0, r4
 800299e:	f000 f86b 	bl	8002a78 <HAL_TIMEx_BreakCallback>
 80029a2:	6823      	ldr	r3, [r4, #0]
 80029a4:	e797      	b.n	80028d6 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029aa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80029ac:	4620      	mov	r0, r4
 80029ae:	f7ff ff69 	bl	8002884 <HAL_TIM_TriggerCallback>
 80029b2:	6823      	ldr	r3, [r4, #0]
 80029b4:	e795      	b.n	80028e2 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b6:	f7ff ff5f 	bl	8002878 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ba:	4620      	mov	r0, r4
 80029bc:	f7ff ff60 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
 80029c0:	e7d5      	b.n	800296e <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 80029c2:	f7ff ff5b 	bl	800287c <HAL_TIM_IC_CaptureCallback>
 80029c6:	e7c4      	b.n	8002952 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 80029c8:	f7ff ff58 	bl	800287c <HAL_TIM_IC_CaptureCallback>
 80029cc:	e7ae      	b.n	800292c <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ce:	f7ff ff53 	bl	8002878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d2:	4620      	mov	r0, r4
 80029d4:	f7ff ff54 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
 80029d8:	e796      	b.n	8002908 <HAL_TIM_IRQHandler+0x80>
 80029da:	bf00      	nop

080029dc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029dc:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80029e0:	2a01      	cmp	r2, #1
 80029e2:	d01a      	beq.n	8002a1a <HAL_TIMEx_MasterConfigSynchronization+0x3e>
{
 80029e4:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e6:	2202      	movs	r2, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029e8:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80029ea:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029ee:	e9d1 6500 	ldrd	r6, r5, [r1]
 80029f2:	4603      	mov	r3, r0
  tmpcr2 = htim->Instance->CR2;
 80029f4:	6860      	ldr	r0, [r4, #4]
  tmpsmcr = htim->Instance->SMCR;
 80029f6:	68a2      	ldr	r2, [r4, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80029f8:	f020 0170 	bic.w	r1, r0, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 80029fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a00:	4331      	orrs	r1, r6
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a02:	432a      	orrs	r2, r5

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a04:	2601      	movs	r6, #1

  __HAL_UNLOCK(htim);
 8002a06:	2500      	movs	r5, #0
  htim->Instance->CR2 = tmpcr2;
 8002a08:	6061      	str	r1, [r4, #4]

  return HAL_OK;
 8002a0a:	4628      	mov	r0, r5
  htim->Instance->SMCR = tmpsmcr;
 8002a0c:	60a2      	str	r2, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002a0e:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002a12:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
}
 8002a16:	bc70      	pop	{r4, r5, r6}
 8002a18:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002a1a:	2002      	movs	r0, #2
}
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop

08002a20 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a20:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d021      	beq.n	8002a6c <HAL_TIMEx_ConfigBreakDeadTime+0x4c>
{
 8002a28:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002a2a:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002a2e:	e9d1 2400 	ldrd	r2, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a36:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002a38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a3c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002a3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002a42:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002a46:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002a48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a4c:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002a4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002a52:	69c9      	ldr	r1, [r1, #28]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002a54:	6802      	ldr	r2, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002a56:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002a58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a5c:	430b      	orrs	r3, r1

  __HAL_UNLOCK(htim);
 8002a5e:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8002a60:	6453      	str	r3, [r2, #68]	; 0x44

  return HAL_OK;
}
 8002a62:	bc30      	pop	{r4, r5}
  __HAL_UNLOCK(htim);
 8002a64:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
}
 8002a68:	4608      	mov	r0, r1
 8002a6a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002a6c:	2302      	movs	r3, #2
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop

08002a74 <HAL_TIMEx_CommutCallback>:
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop

08002a78 <HAL_TIMEx_BreakCallback>:
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop

08002a7c <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a7c:	2800      	cmp	r0, #0
 8002a7e:	f000 8104 	beq.w	8002c8a <HAL_UART_Init+0x20e>
{
 8002a82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a86:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002a8a:	4604      	mov	r4, r0
 8002a8c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 80f5 	beq.w	8002c80 <HAL_UART_Init+0x204>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a96:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a98:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8002a9a:	2224      	movs	r2, #36	; 0x24
 8002a9c:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002aa0:	68d8      	ldr	r0, [r3, #12]
 8002aa2:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002aa6:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8002aaa:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aac:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002aae:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ab0:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002ab4:	4329      	orrs	r1, r5
 8002ab6:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002ab8:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002aba:	6965      	ldr	r5, [r4, #20]
 8002abc:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 8002abe:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ac2:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8002ac4:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ac8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002aca:	430a      	orrs	r2, r1
 8002acc:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ace:	695a      	ldr	r2, [r3, #20]
 8002ad0:	69a1      	ldr	r1, [r4, #24]
 8002ad2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002ad6:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ad8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002adc:	615a      	str	r2, [r3, #20]
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ade:	4aaa      	ldr	r2, [pc, #680]	; (8002d88 <HAL_UART_Init+0x30c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ae0:	d071      	beq.n	8002bc6 <HAL_UART_Init+0x14a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	f000 80d3 	beq.w	8002c8e <HAL_UART_Init+0x212>
 8002ae8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002aec:	4293      	cmp	r3, r2
 8002aee:	f000 80ce 	beq.w	8002c8e <HAL_UART_Init+0x212>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002af2:	f7ff fa57 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 8002af6:	4fa5      	ldr	r7, [pc, #660]	; (8002d8c <HAL_UART_Init+0x310>)
 8002af8:	6863      	ldr	r3, [r4, #4]
 8002afa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002afe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b08:	fba7 2303 	umull	r2, r3, r7, r3
 8002b0c:	095b      	lsrs	r3, r3, #5
 8002b0e:	011d      	lsls	r5, r3, #4
 8002b10:	f7ff fa48 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 8002b14:	6866      	ldr	r6, [r4, #4]
 8002b16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b1e:	00b6      	lsls	r6, r6, #2
 8002b20:	fbb0 f6f6 	udiv	r6, r0, r6
 8002b24:	f7ff fa3e 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 8002b28:	6863      	ldr	r3, [r4, #4]
 8002b2a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b2e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b38:	fba7 2303 	umull	r2, r3, r7, r3
 8002b3c:	095b      	lsrs	r3, r3, #5
 8002b3e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002b42:	fb09 6313 	mls	r3, r9, r3, r6
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	3332      	adds	r3, #50	; 0x32
 8002b4a:	fba7 2303 	umull	r2, r3, r7, r3
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8002b54:	f7ff fa26 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 8002b58:	6862      	ldr	r2, [r4, #4]
 8002b5a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b5e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b62:	0093      	lsls	r3, r2, #2
 8002b64:	fbb0 f8f3 	udiv	r8, r0, r3
 8002b68:	f7ff fa1c 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 8002b6c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8002b70:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b74:	008b      	lsls	r3, r1, #2
 8002b76:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b7e:	fba7 1303 	umull	r1, r3, r7, r3
 8002b82:	095b      	lsrs	r3, r3, #5
 8002b84:	fb09 8313 	mls	r3, r9, r3, r8
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	3332      	adds	r3, #50	; 0x32
 8002b8c:	fba7 1303 	umull	r1, r3, r7, r3
 8002b90:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8002b94:	4333      	orrs	r3, r6
 8002b96:	442b      	add	r3, r5
 8002b98:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b9a:	6913      	ldr	r3, [r2, #16]
 8002b9c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002ba0:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ba2:	6953      	ldr	r3, [r2, #20]
 8002ba4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002ba8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002baa:	68d3      	ldr	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bac:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8002bae:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8002bb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bb4:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8002bb6:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb8:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002bba:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002bbe:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8002bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	f000 809f 	beq.w	8002d0a <HAL_UART_Init+0x28e>
 8002bcc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	f000 809a 	beq.w	8002d0a <HAL_UART_Init+0x28e>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002bd6:	f7ff f9e5 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 8002bda:	4f6c      	ldr	r7, [pc, #432]	; (8002d8c <HAL_UART_Init+0x310>)
 8002bdc:	6863      	ldr	r3, [r4, #4]
 8002bde:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002be2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bec:	fba7 2303 	umull	r2, r3, r7, r3
 8002bf0:	095b      	lsrs	r3, r3, #5
 8002bf2:	011e      	lsls	r6, r3, #4
 8002bf4:	f7ff f9d6 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 8002bf8:	6865      	ldr	r5, [r4, #4]
 8002bfa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002bfe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c02:	006d      	lsls	r5, r5, #1
 8002c04:	fbb0 f5f5 	udiv	r5, r0, r5
 8002c08:	f7ff f9cc 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 8002c0c:	6863      	ldr	r3, [r4, #4]
 8002c0e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c1c:	fba7 2303 	umull	r2, r3, r7, r3
 8002c20:	095b      	lsrs	r3, r3, #5
 8002c22:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002c26:	fb09 5313 	mls	r3, r9, r3, r5
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	3332      	adds	r3, #50	; 0x32
 8002c2e:	fba7 2303 	umull	r2, r3, r7, r3
 8002c32:	091b      	lsrs	r3, r3, #4
 8002c34:	f403 75f8 	and.w	r5, r3, #496	; 0x1f0
 8002c38:	f7ff f9b4 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 8002c3c:	6862      	ldr	r2, [r4, #4]
 8002c3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c46:	0053      	lsls	r3, r2, #1
 8002c48:	fbb0 f8f3 	udiv	r8, r0, r3
 8002c4c:	f7ff f9aa 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 8002c50:	e9d4 2100 	ldrd	r2, r1, [r4]
 8002c54:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c58:	004b      	lsls	r3, r1, #1
 8002c5a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c62:	fba7 1303 	umull	r1, r3, r7, r3
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	fb09 8313 	mls	r3, r9, r3, r8
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	3332      	adds	r3, #50	; 0x32
 8002c70:	fba7 1303 	umull	r1, r3, r7, r3
 8002c74:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002c78:	4433      	add	r3, r6
 8002c7a:	442b      	add	r3, r5
 8002c7c:	6093      	str	r3, [r2, #8]
 8002c7e:	e78c      	b.n	8002b9a <HAL_UART_Init+0x11e>
    huart->Lock = HAL_UNLOCKED;
 8002c80:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002c84:	f003 fb9c 	bl	80063c0 <HAL_UART_MspInit>
 8002c88:	e705      	b.n	8002a96 <HAL_UART_Init+0x1a>
    return HAL_ERROR;
 8002c8a:	2001      	movs	r0, #1
}
 8002c8c:	4770      	bx	lr
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002c8e:	f7ff f999 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 8002c92:	4f3e      	ldr	r7, [pc, #248]	; (8002d8c <HAL_UART_Init+0x310>)
 8002c94:	6863      	ldr	r3, [r4, #4]
 8002c96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c9a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ca4:	fba7 2303 	umull	r2, r3, r7, r3
 8002ca8:	095b      	lsrs	r3, r3, #5
 8002caa:	011d      	lsls	r5, r3, #4
 8002cac:	f7ff f98a 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 8002cb0:	6866      	ldr	r6, [r4, #4]
 8002cb2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002cb6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002cba:	00b6      	lsls	r6, r6, #2
 8002cbc:	fbb0 f6f6 	udiv	r6, r0, r6
 8002cc0:	f7ff f980 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 8002cc4:	6863      	ldr	r3, [r4, #4]
 8002cc6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002cca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cd4:	fba7 2303 	umull	r2, r3, r7, r3
 8002cd8:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002cdc:	095b      	lsrs	r3, r3, #5
 8002cde:	fb09 6313 	mls	r3, r9, r3, r6
 8002ce2:	011b      	lsls	r3, r3, #4
 8002ce4:	3332      	adds	r3, #50	; 0x32
 8002ce6:	fba7 2303 	umull	r2, r3, r7, r3
 8002cea:	095b      	lsrs	r3, r3, #5
 8002cec:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8002cf0:	f7ff f968 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 8002cf4:	6862      	ldr	r2, [r4, #4]
 8002cf6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002cfa:	0093      	lsls	r3, r2, #2
 8002cfc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d00:	fbb0 f8f3 	udiv	r8, r0, r3
 8002d04:	f7ff f95e 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 8002d08:	e730      	b.n	8002b6c <HAL_UART_Init+0xf0>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002d0a:	f7ff f95b 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 8002d0e:	4f1f      	ldr	r7, [pc, #124]	; (8002d8c <HAL_UART_Init+0x310>)
 8002d10:	6863      	ldr	r3, [r4, #4]
 8002d12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d20:	fba7 2303 	umull	r2, r3, r7, r3
 8002d24:	095b      	lsrs	r3, r3, #5
 8002d26:	011e      	lsls	r6, r3, #4
 8002d28:	f7ff f94c 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 8002d2c:	6865      	ldr	r5, [r4, #4]
 8002d2e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d32:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d36:	006d      	lsls	r5, r5, #1
 8002d38:	fbb0 f5f5 	udiv	r5, r0, r5
 8002d3c:	f7ff f942 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 8002d40:	6863      	ldr	r3, [r4, #4]
 8002d42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d46:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d50:	fba7 2303 	umull	r2, r3, r7, r3
 8002d54:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002d58:	095b      	lsrs	r3, r3, #5
 8002d5a:	fb09 5313 	mls	r3, r9, r3, r5
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	3332      	adds	r3, #50	; 0x32
 8002d62:	fba7 2303 	umull	r2, r3, r7, r3
 8002d66:	091b      	lsrs	r3, r3, #4
 8002d68:	f403 75f8 	and.w	r5, r3, #496	; 0x1f0
 8002d6c:	f7ff f92a 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 8002d70:	6862      	ldr	r2, [r4, #4]
 8002d72:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d76:	0053      	lsls	r3, r2, #1
 8002d78:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d7c:	fbb0 f8f3 	udiv	r8, r0, r3
 8002d80:	f7ff f920 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 8002d84:	e764      	b.n	8002c50 <HAL_UART_Init+0x1d4>
 8002d86:	bf00      	nop
 8002d88:	40011000 	.word	0x40011000
 8002d8c:	51eb851f 	.word	0x51eb851f

08002d90 <HAL_UART_Transmit>:
{
 8002d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d92:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8002d94:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8002d98:	2920      	cmp	r1, #32
{
 8002d9a:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8002d9c:	d12d      	bne.n	8002dfa <HAL_UART_Transmit+0x6a>
    if ((pData == NULL) || (Size == 0U))
 8002d9e:	2e00      	cmp	r6, #0
 8002da0:	d02e      	beq.n	8002e00 <HAL_UART_Transmit+0x70>
 8002da2:	9201      	str	r2, [sp, #4]
 8002da4:	b362      	cbz	r2, 8002e00 <HAL_UART_Transmit+0x70>
 8002da6:	461f      	mov	r7, r3
    __HAL_LOCK(huart);
 8002da8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	4604      	mov	r4, r0
 8002db0:	d023      	beq.n	8002dfa <HAL_UART_Transmit+0x6a>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002db2:	2300      	movs	r3, #0
 8002db4:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_LOCK(huart);
 8002db6:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002db8:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8002dba:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dbe:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002dc2:	f7fe f91b 	bl	8000ffc <HAL_GetTick>
    huart->TxXferSize = Size;
 8002dc6:	9a01      	ldr	r2, [sp, #4]
 8002dc8:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002dca:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002dcc:	6822      	ldr	r2, [r4, #0]
    tickstart = HAL_GetTick();
 8002dce:	4605      	mov	r5, r0
    while (huart->TxXferCount > 0U)
 8002dd0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d039      	beq.n	8002e4c <HAL_UART_Transmit+0xbc>
      huart->TxXferCount--;
 8002dd8:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002dda:	68a1      	ldr	r1, [r4, #8]
      huart->TxXferCount--;
 8002ddc:	3801      	subs	r0, #1
 8002dde:	b280      	uxth	r0, r0
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002de0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      huart->TxXferCount--;
 8002de4:	84e0      	strh	r0, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002de6:	d019      	beq.n	8002e1c <HAL_UART_Transmit+0x8c>
 8002de8:	1c78      	adds	r0, r7, #1
 8002dea:	d13b      	bne.n	8002e64 <HAL_UART_Transmit+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dec:	6810      	ldr	r0, [r2, #0]
 8002dee:	0601      	lsls	r1, r0, #24
 8002df0:	d5fc      	bpl.n	8002dec <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002df2:	7833      	ldrb	r3, [r6, #0]
 8002df4:	6053      	str	r3, [r2, #4]
 8002df6:	3601      	adds	r6, #1
 8002df8:	e7ea      	b.n	8002dd0 <HAL_UART_Transmit+0x40>
    return HAL_BUSY;
 8002dfa:	2002      	movs	r0, #2
}
 8002dfc:	b003      	add	sp, #12
 8002dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 8002e00:	2001      	movs	r0, #1
}
 8002e02:	b003      	add	sp, #12
 8002e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e06:	6813      	ldr	r3, [r2, #0]
 8002e08:	061b      	lsls	r3, r3, #24
 8002e0a:	d40c      	bmi.n	8002e26 <HAL_UART_Transmit+0x96>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e0c:	2f00      	cmp	r7, #0
 8002e0e:	d033      	beq.n	8002e78 <HAL_UART_Transmit+0xe8>
 8002e10:	f7fe f8f4 	bl	8000ffc <HAL_GetTick>
 8002e14:	1b40      	subs	r0, r0, r5
 8002e16:	4287      	cmp	r7, r0
 8002e18:	6822      	ldr	r2, [r4, #0]
 8002e1a:	d32d      	bcc.n	8002e78 <HAL_UART_Transmit+0xe8>
 8002e1c:	1c78      	adds	r0, r7, #1
 8002e1e:	d1f2      	bne.n	8002e06 <HAL_UART_Transmit+0x76>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e20:	6810      	ldr	r0, [r2, #0]
 8002e22:	0601      	lsls	r1, r0, #24
 8002e24:	d5fc      	bpl.n	8002e20 <HAL_UART_Transmit+0x90>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002e26:	8833      	ldrh	r3, [r6, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002e28:	6921      	ldr	r1, [r4, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e2e:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002e30:	2900      	cmp	r1, #0
 8002e32:	d1e0      	bne.n	8002df6 <HAL_UART_Transmit+0x66>
          pData += 2U;
 8002e34:	3602      	adds	r6, #2
 8002e36:	e7cb      	b.n	8002dd0 <HAL_UART_Transmit+0x40>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e38:	6813      	ldr	r3, [r2, #0]
 8002e3a:	065b      	lsls	r3, r3, #25
 8002e3c:	d40b      	bmi.n	8002e56 <HAL_UART_Transmit+0xc6>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e3e:	b1df      	cbz	r7, 8002e78 <HAL_UART_Transmit+0xe8>
 8002e40:	f7fe f8dc 	bl	8000ffc <HAL_GetTick>
 8002e44:	1b40      	subs	r0, r0, r5
 8002e46:	4287      	cmp	r7, r0
 8002e48:	6822      	ldr	r2, [r4, #0]
 8002e4a:	d315      	bcc.n	8002e78 <HAL_UART_Transmit+0xe8>
 8002e4c:	1c78      	adds	r0, r7, #1
 8002e4e:	d1f3      	bne.n	8002e38 <HAL_UART_Transmit+0xa8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e50:	6813      	ldr	r3, [r2, #0]
 8002e52:	0659      	lsls	r1, r3, #25
 8002e54:	d5fc      	bpl.n	8002e50 <HAL_UART_Transmit+0xc0>
    huart->gState = HAL_UART_STATE_READY;
 8002e56:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002e58:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 8002e5a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002e5e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002e62:	e7cb      	b.n	8002dfc <HAL_UART_Transmit+0x6c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e64:	6813      	ldr	r3, [r2, #0]
 8002e66:	061b      	lsls	r3, r3, #24
 8002e68:	d4c3      	bmi.n	8002df2 <HAL_UART_Transmit+0x62>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e6a:	b12f      	cbz	r7, 8002e78 <HAL_UART_Transmit+0xe8>
 8002e6c:	f7fe f8c6 	bl	8000ffc <HAL_GetTick>
 8002e70:	1b40      	subs	r0, r0, r5
 8002e72:	4287      	cmp	r7, r0
 8002e74:	6822      	ldr	r2, [r4, #0]
 8002e76:	d2b7      	bcs.n	8002de8 <HAL_UART_Transmit+0x58>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e78:	68d3      	ldr	r3, [r2, #12]
 8002e7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e7e:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e80:	6953      	ldr	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002e82:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e84:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8002e88:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 8002e8a:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e8c:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002e8e:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
        __HAL_UNLOCK(huart);
 8002e92:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 8002e96:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8002e9a:	b003      	add	sp, #12
 8002e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e9e:	bf00      	nop

08002ea0 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ea0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002ea4:	2b20      	cmp	r3, #32
 8002ea6:	d120      	bne.n	8002eea <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8002ea8:	b309      	cbz	r1, 8002eee <HAL_UART_Receive_IT+0x4e>
 8002eaa:	b302      	cbz	r2, 8002eee <HAL_UART_Receive_IT+0x4e>
    __HAL_LOCK(huart);
 8002eac:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d01a      	beq.n	8002eea <HAL_UART_Receive_IT+0x4a>
{
 8002eb4:	b430      	push	{r4, r5}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb6:	2300      	movs	r3, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002eb8:	6804      	ldr	r4, [r0, #0]
    huart->RxXferCount = Size;
 8002eba:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ebc:	2522      	movs	r5, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ebe:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ec0:	f880 503a 	strb.w	r5, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ec4:	68e5      	ldr	r5, [r4, #12]
    huart->RxXferSize = Size;
 8002ec6:	8582      	strh	r2, [r0, #44]	; 0x2c
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ec8:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    huart->pRxBuffPtr = pData;
 8002ecc:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UNLOCK(huart);
 8002ece:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ed2:	60e5      	str	r5, [r4, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002ed4:	6962      	ldr	r2, [r4, #20]
 8002ed6:	f042 0201 	orr.w	r2, r2, #1
 8002eda:	6162      	str	r2, [r4, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002edc:	68e2      	ldr	r2, [r4, #12]
 8002ede:	f042 0220 	orr.w	r2, r2, #32
    return HAL_OK;
 8002ee2:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002ee4:	60e2      	str	r2, [r4, #12]
}
 8002ee6:	bc30      	pop	{r4, r5}
 8002ee8:	4770      	bx	lr
    return HAL_BUSY;
 8002eea:	2002      	movs	r0, #2
}
 8002eec:	4770      	bx	lr
      return HAL_ERROR;
 8002eee:	2001      	movs	r0, #1
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop

08002ef4 <HAL_UART_TxCpltCallback>:
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop

08002ef8 <UART_Receive_IT.part.1>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8002ef8:	b510      	push	{r4, lr}
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002efa:	6884      	ldr	r4, [r0, #8]
 8002efc:	6901      	ldr	r1, [r0, #16]
 8002efe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002f00:	6802      	ldr	r2, [r0, #0]
 8002f02:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8002f06:	d020      	beq.n	8002f4a <UART_Receive_IT.part.1+0x52>
 8002f08:	1c5c      	adds	r4, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f0a:	6852      	ldr	r2, [r2, #4]
 8002f0c:	6284      	str	r4, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002f0e:	b9c9      	cbnz	r1, 8002f44 <UART_Receive_IT.part.1+0x4c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f10:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 8002f12:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8002f14:	3b01      	subs	r3, #1
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8002f1a:	b98b      	cbnz	r3, 8002f40 <UART_Receive_IT.part.1+0x48>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f1c:	6802      	ldr	r2, [r0, #0]
 8002f1e:	68d1      	ldr	r1, [r2, #12]
 8002f20:	f021 0120 	bic.w	r1, r1, #32
 8002f24:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f26:	68d1      	ldr	r1, [r2, #12]
 8002f28:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002f2c:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f2e:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002f30:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f32:	f021 0101 	bic.w	r1, r1, #1
 8002f36:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002f38:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002f3c:	f002 f828 	bl	8004f90 <HAL_UART_RxCpltCallback>
}
 8002f40:	2000      	movs	r0, #0
 8002f42:	bd10      	pop	{r4, pc}
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f48:	e7e2      	b.n	8002f10 <UART_Receive_IT.part.1+0x18>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f4a:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002f4c:	b929      	cbnz	r1, 8002f5a <UART_Receive_IT.part.1+0x62>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f52:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 2U;
 8002f56:	6283      	str	r3, [r0, #40]	; 0x28
 8002f58:	e7db      	b.n	8002f12 <UART_Receive_IT.part.1+0x1a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1U;
 8002f60:	6283      	str	r3, [r0, #40]	; 0x28
 8002f62:	e7d6      	b.n	8002f12 <UART_Receive_IT.part.1+0x1a>

08002f64 <HAL_UART_ErrorCallback>:
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop

08002f68 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f68:	6803      	ldr	r3, [r0, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
{
 8002f6c:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8002f6e:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f70:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f72:	6959      	ldr	r1, [r3, #20]
{
 8002f74:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8002f76:	d049      	beq.n	800300c <HAL_UART_IRQHandler+0xa4>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f78:	f011 0101 	ands.w	r1, r1, #1
 8002f7c:	d04f      	beq.n	800301e <HAL_UART_IRQHandler+0xb6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f7e:	07d6      	lsls	r6, r2, #31
 8002f80:	d505      	bpl.n	8002f8e <HAL_UART_IRQHandler+0x26>
 8002f82:	05e8      	lsls	r0, r5, #23
 8002f84:	d503      	bpl.n	8002f8e <HAL_UART_IRQHandler+0x26>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f86:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002f88:	f040 0001 	orr.w	r0, r0, #1
 8002f8c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f8e:	0756      	lsls	r6, r2, #29
 8002f90:	f002 0002 	and.w	r0, r2, #2
 8002f94:	d575      	bpl.n	8003082 <HAL_UART_IRQHandler+0x11a>
 8002f96:	b161      	cbz	r1, 8002fb2 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f98:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002f9a:	f041 0102 	orr.w	r1, r1, #2
 8002f9e:	63e1      	str	r1, [r4, #60]	; 0x3c
 8002fa0:	f002 0608 	and.w	r6, r2, #8
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fa4:	2800      	cmp	r0, #0
 8002fa6:	d171      	bne.n	800308c <HAL_UART_IRQHandler+0x124>
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fa8:	b11e      	cbz	r6, 8002fb2 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002faa:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002fac:	f041 0108 	orr.w	r1, r1, #8
 8002fb0:	63e1      	str	r1, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fb2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002fb4:	2900      	cmp	r1, #0
 8002fb6:	d031      	beq.n	800301c <HAL_UART_IRQHandler+0xb4>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fb8:	0696      	lsls	r6, r2, #26
 8002fba:	d501      	bpl.n	8002fc0 <HAL_UART_IRQHandler+0x58>
 8002fbc:	06a8      	lsls	r0, r5, #26
 8002fbe:	d473      	bmi.n	80030a8 <HAL_UART_IRQHandler+0x140>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002fc0:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002fc2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002fc4:	0709      	lsls	r1, r1, #28
 8002fc6:	d402      	bmi.n	8002fce <HAL_UART_IRQHandler+0x66>
 8002fc8:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002fcc:	d079      	beq.n	80030c2 <HAL_UART_IRQHandler+0x15a>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002fd4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd6:	695a      	ldr	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8002fd8:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fda:	f022 0201 	bic.w	r2, r2, #1
 8002fde:	615a      	str	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8002fe0:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe4:	695a      	ldr	r2, [r3, #20]
 8002fe6:	0652      	lsls	r2, r2, #25
 8002fe8:	d55a      	bpl.n	80030a0 <HAL_UART_IRQHandler+0x138>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fea:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002fec:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ff2:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002ff4:	2800      	cmp	r0, #0
 8002ff6:	d053      	beq.n	80030a0 <HAL_UART_IRQHandler+0x138>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ff8:	4b3a      	ldr	r3, [pc, #232]	; (80030e4 <HAL_UART_IRQHandler+0x17c>)
 8002ffa:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ffc:	f7fe fbe6 	bl	80017cc <HAL_DMA_Abort_IT>
 8003000:	b160      	cbz	r0, 800301c <HAL_UART_IRQHandler+0xb4>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003002:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8003004:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003008:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800300a:	4718      	bx	r3
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800300c:	0696      	lsls	r6, r2, #26
 800300e:	d509      	bpl.n	8003024 <HAL_UART_IRQHandler+0xbc>
 8003010:	06a9      	lsls	r1, r5, #26
 8003012:	d507      	bpl.n	8003024 <HAL_UART_IRQHandler+0xbc>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003014:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003018:	2b22      	cmp	r3, #34	; 0x22
 800301a:	d04e      	beq.n	80030ba <HAL_UART_IRQHandler+0x152>
}
 800301c:	bd70      	pop	{r4, r5, r6, pc}
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800301e:	f415 7f90 	tst.w	r5, #288	; 0x120
 8003022:	d1ac      	bne.n	8002f7e <HAL_UART_IRQHandler+0x16>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003024:	0616      	lsls	r6, r2, #24
 8003026:	d40e      	bmi.n	8003046 <HAL_UART_IRQHandler+0xde>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003028:	0651      	lsls	r1, r2, #25
 800302a:	d5f7      	bpl.n	800301c <HAL_UART_IRQHandler+0xb4>
 800302c:	066a      	lsls	r2, r5, #25
 800302e:	d5f5      	bpl.n	800301c <HAL_UART_IRQHandler+0xb4>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003030:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003032:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003038:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800303a:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 800303c:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8003040:	f7ff ff58 	bl	8002ef4 <HAL_UART_TxCpltCallback>
}
 8003044:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003046:	0628      	lsls	r0, r5, #24
 8003048:	d5ee      	bpl.n	8003028 <HAL_UART_IRQHandler+0xc0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800304a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800304e:	2a21      	cmp	r2, #33	; 0x21
 8003050:	d1e4      	bne.n	800301c <HAL_UART_IRQHandler+0xb4>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003052:	68a1      	ldr	r1, [r4, #8]
 8003054:	6a22      	ldr	r2, [r4, #32]
 8003056:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800305a:	d037      	beq.n	80030cc <HAL_UART_IRQHandler+0x164>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800305c:	1c51      	adds	r1, r2, #1
 800305e:	6221      	str	r1, [r4, #32]
 8003060:	7812      	ldrb	r2, [r2, #0]
 8003062:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8003064:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003066:	3a01      	subs	r2, #1
 8003068:	b292      	uxth	r2, r2
 800306a:	84e2      	strh	r2, [r4, #38]	; 0x26
 800306c:	2a00      	cmp	r2, #0
 800306e:	d1d5      	bne.n	800301c <HAL_UART_IRQHandler+0xb4>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003076:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800307e:	60da      	str	r2, [r3, #12]
}
 8003080:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003082:	b140      	cbz	r0, 8003096 <HAL_UART_IRQHandler+0x12e>
 8003084:	2900      	cmp	r1, #0
 8003086:	d094      	beq.n	8002fb2 <HAL_UART_IRQHandler+0x4a>
 8003088:	f002 0608 	and.w	r6, r2, #8
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800308c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800308e:	f041 0104 	orr.w	r1, r1, #4
 8003092:	63e1      	str	r1, [r4, #60]	; 0x3c
 8003094:	e788      	b.n	8002fa8 <HAL_UART_IRQHandler+0x40>
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003096:	0710      	lsls	r0, r2, #28
 8003098:	d58b      	bpl.n	8002fb2 <HAL_UART_IRQHandler+0x4a>
 800309a:	2900      	cmp	r1, #0
 800309c:	d185      	bne.n	8002faa <HAL_UART_IRQHandler+0x42>
 800309e:	e788      	b.n	8002fb2 <HAL_UART_IRQHandler+0x4a>
            HAL_UART_ErrorCallback(huart);
 80030a0:	4620      	mov	r0, r4
 80030a2:	f7ff ff5f 	bl	8002f64 <HAL_UART_ErrorCallback>
}
 80030a6:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030a8:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
 80030ac:	2a22      	cmp	r2, #34	; 0x22
 80030ae:	d187      	bne.n	8002fc0 <HAL_UART_IRQHandler+0x58>
 80030b0:	4620      	mov	r0, r4
 80030b2:	f7ff ff21 	bl	8002ef8 <UART_Receive_IT.part.1>
 80030b6:	6823      	ldr	r3, [r4, #0]
 80030b8:	e782      	b.n	8002fc0 <HAL_UART_IRQHandler+0x58>
}
 80030ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80030be:	f7ff bf1b 	b.w	8002ef8 <UART_Receive_IT.part.1>
        HAL_UART_ErrorCallback(huart);
 80030c2:	4620      	mov	r0, r4
 80030c4:	f7ff ff4e 	bl	8002f64 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c8:	63e5      	str	r5, [r4, #60]	; 0x3c
}
 80030ca:	bd70      	pop	{r4, r5, r6, pc}
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80030cc:	8811      	ldrh	r1, [r2, #0]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80030ce:	6920      	ldr	r0, [r4, #16]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80030d0:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80030d4:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80030d6:	b910      	cbnz	r0, 80030de <HAL_UART_IRQHandler+0x176>
        huart->pTxBuffPtr += 2U;
 80030d8:	3202      	adds	r2, #2
 80030da:	6222      	str	r2, [r4, #32]
 80030dc:	e7c2      	b.n	8003064 <HAL_UART_IRQHandler+0xfc>
        huart->pTxBuffPtr += 1U;
 80030de:	3201      	adds	r2, #1
 80030e0:	6222      	str	r2, [r4, #32]
 80030e2:	e7bf      	b.n	8003064 <HAL_UART_IRQHandler+0xfc>
 80030e4:	080030e9 	.word	0x080030e9

080030e8 <UART_DMAAbortOnError>:
{
 80030e8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80030ec:	2200      	movs	r2, #0
 80030ee:	85da      	strh	r2, [r3, #46]	; 0x2e
  HAL_UART_ErrorCallback(huart);
 80030f0:	4618      	mov	r0, r3
  huart->TxXferCount = 0x00U;
 80030f2:	84da      	strh	r2, [r3, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80030f4:	f7ff ff36 	bl	8002f64 <HAL_UART_ErrorCallback>
}
 80030f8:	bd08      	pop	{r3, pc}
 80030fa:	bf00      	nop

080030fc <ist_reg_read_by_mpu>:
	* @param  addr: the address to be read of IST8310's register
	* @retval 
  * @usage  call in ist8310_init() function
	*/
static uint8_t ist_reg_read_by_mpu(uint8_t addr)
{
 80030fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    MPU_NSS_LOW;
 8003100:	4e4a      	ldr	r6, [pc, #296]	; (800322c <ist_reg_read_by_mpu+0x130>)
    tx = reg & 0x7F;
 8003102:	4c4b      	ldr	r4, [pc, #300]	; (8003230 <ist_reg_read_by_mpu+0x134>)
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003104:	4d4b      	ldr	r5, [pc, #300]	; (8003234 <ist_reg_read_by_mpu+0x138>)
 8003106:	4f4c      	ldr	r7, [pc, #304]	; (8003238 <ist_reg_read_by_mpu+0x13c>)
{
 8003108:	b082      	sub	sp, #8
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800310a:	f04f 0837 	mov.w	r8, #55	; 0x37
{
 800310e:	4681      	mov	r9, r0
    MPU_NSS_LOW;
 8003110:	2200      	movs	r2, #0
 8003112:	4630      	mov	r0, r6
 8003114:	2140      	movs	r1, #64	; 0x40
 8003116:	f7fe fcaf 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 800311a:	f04f 0c32 	mov.w	ip, #50	; 0x32
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800311e:	4621      	mov	r1, r4
 8003120:	462a      	mov	r2, r5
 8003122:	4638      	mov	r0, r7
 8003124:	f8cd 8000 	str.w	r8, [sp]
 8003128:	2301      	movs	r3, #1
    tx = reg & 0x7F;
 800312a:	f884 c000 	strb.w	ip, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800312e:	f7fe ff99 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003132:	2301      	movs	r3, #1
 8003134:	462a      	mov	r2, r5
 8003136:	4621      	mov	r1, r4
 8003138:	f8cd 8000 	str.w	r8, [sp]
 800313c:	4638      	mov	r0, r7
    tx = data;
 800313e:	f884 9000 	strb.w	r9, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003142:	f7fe ff8f 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003146:	4630      	mov	r0, r6
 8003148:	2201      	movs	r2, #1
 800314a:	2140      	movs	r1, #64	; 0x40
 800314c:	f7fe fc94 	bl	8001a78 <HAL_GPIO_WritePin>
    uint8_t retval;
    mpu_write_byte(MPU6500_I2C_SLV4_REG, addr);
    MPU_DELAY(10);
 8003150:	200a      	movs	r0, #10
 8003152:	f7fd ff59 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003156:	4630      	mov	r0, r6
 8003158:	2200      	movs	r2, #0
 800315a:	2140      	movs	r1, #64	; 0x40
 800315c:	f7fe fc8c 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 8003160:	f04f 0934 	mov.w	r9, #52	; 0x34
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003164:	462a      	mov	r2, r5
 8003166:	4621      	mov	r1, r4
 8003168:	f8cd 8000 	str.w	r8, [sp]
 800316c:	4638      	mov	r0, r7
 800316e:	2301      	movs	r3, #1
    tx = reg & 0x7F;
 8003170:	f884 9000 	strb.w	r9, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003174:	f7fe ff76 	bl	8002064 <HAL_SPI_TransmitReceive>
    tx = data;
 8003178:	f04f 0c80 	mov.w	ip, #128	; 0x80
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800317c:	2301      	movs	r3, #1
 800317e:	462a      	mov	r2, r5
 8003180:	4621      	mov	r1, r4
 8003182:	f8cd 8000 	str.w	r8, [sp]
 8003186:	4638      	mov	r0, r7
    tx = data;
 8003188:	f884 c000 	strb.w	ip, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800318c:	f7fe ff6a 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003190:	4630      	mov	r0, r6
 8003192:	2201      	movs	r2, #1
 8003194:	2140      	movs	r1, #64	; 0x40
 8003196:	f7fe fc6f 	bl	8001a78 <HAL_GPIO_WritePin>
    mpu_write_byte(MPU6500_I2C_SLV4_CTRL, 0x80);
    MPU_DELAY(10);
 800319a:	200a      	movs	r0, #10
 800319c:	f7fd ff34 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 80031a0:	4630      	mov	r0, r6
 80031a2:	2200      	movs	r2, #0
 80031a4:	2140      	movs	r1, #64	; 0x40
 80031a6:	f7fe fc67 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg | 0x80;
 80031aa:	f04f 0cb5 	mov.w	ip, #181	; 0xb5
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80031ae:	462a      	mov	r2, r5
 80031b0:	4621      	mov	r1, r4
 80031b2:	f8cd 8000 	str.w	r8, [sp]
 80031b6:	4638      	mov	r0, r7
 80031b8:	2301      	movs	r3, #1
    tx = reg | 0x80;
 80031ba:	f884 c000 	strb.w	ip, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80031be:	f7fe ff51 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80031c2:	2301      	movs	r3, #1
 80031c4:	462a      	mov	r2, r5
 80031c6:	4621      	mov	r1, r4
 80031c8:	f8cd 8000 	str.w	r8, [sp]
 80031cc:	4638      	mov	r0, r7
 80031ce:	f7fe ff49 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80031d2:	4630      	mov	r0, r6
 80031d4:	2201      	movs	r2, #1
 80031d6:	2140      	movs	r1, #64	; 0x40
 80031d8:	f7fe fc4e 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_NSS_LOW;
 80031dc:	4630      	mov	r0, r6
 80031de:	2200      	movs	r2, #0
 80031e0:	2140      	movs	r1, #64	; 0x40
    return rx;
 80031e2:	f895 a000 	ldrb.w	sl, [r5]
    MPU_NSS_LOW;
 80031e6:	f7fe fc47 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80031ea:	462a      	mov	r2, r5
 80031ec:	4621      	mov	r1, r4
 80031ee:	f8cd 8000 	str.w	r8, [sp]
 80031f2:	4638      	mov	r0, r7
 80031f4:	2301      	movs	r3, #1
    tx = reg & 0x7F;
 80031f6:	f884 9000 	strb.w	r9, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80031fa:	f7fe ff33 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80031fe:	2301      	movs	r3, #1
 8003200:	462a      	mov	r2, r5
 8003202:	4621      	mov	r1, r4
 8003204:	f8cd 8000 	str.w	r8, [sp]
 8003208:	4638      	mov	r0, r7
    tx = data;
 800320a:	2500      	movs	r5, #0
 800320c:	7025      	strb	r5, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800320e:	f7fe ff29 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003212:	4630      	mov	r0, r6
 8003214:	2201      	movs	r2, #1
 8003216:	2140      	movs	r1, #64	; 0x40
 8003218:	f7fe fc2e 	bl	8001a78 <HAL_GPIO_WritePin>
    retval = mpu_read_byte(MPU6500_I2C_SLV4_DI);
    /* turn off slave4 after read */
    mpu_write_byte(MPU6500_I2C_SLV4_CTRL, 0x00);
    MPU_DELAY(10);
 800321c:	200a      	movs	r0, #10
 800321e:	f7fd fef3 	bl	8001008 <HAL_Delay>
    return retval;
}
 8003222:	4650      	mov	r0, sl
 8003224:	b002      	add	sp, #8
 8003226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800322a:	bf00      	nop
 800322c:	40021400 	.word	0x40021400
 8003230:	20000275 	.word	0x20000275
 8003234:	20000274 	.word	0x20000274
 8003238:	200005b8 	.word	0x200005b8

0800323c <ist_reg_write_by_mpu>:
{
 800323c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    tx = reg & 0x7F;
 8003240:	4c4a      	ldr	r4, [pc, #296]	; (800336c <ist_reg_write_by_mpu+0x130>)
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003242:	4f4b      	ldr	r7, [pc, #300]	; (8003370 <ist_reg_write_by_mpu+0x134>)
 8003244:	4e4b      	ldr	r6, [pc, #300]	; (8003374 <ist_reg_write_by_mpu+0x138>)
{
 8003246:	b083      	sub	sp, #12
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003248:	f04f 0837 	mov.w	r8, #55	; 0x37
{
 800324c:	4683      	mov	fp, r0
 800324e:	460d      	mov	r5, r1
    MPU_NSS_LOW;
 8003250:	4849      	ldr	r0, [pc, #292]	; (8003378 <ist_reg_write_by_mpu+0x13c>)
 8003252:	2200      	movs	r2, #0
 8003254:	2140      	movs	r1, #64	; 0x40
 8003256:	f7fe fc0f 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 800325a:	f04f 0a2a 	mov.w	sl, #42	; 0x2a
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800325e:	4621      	mov	r1, r4
 8003260:	463a      	mov	r2, r7
 8003262:	4630      	mov	r0, r6
 8003264:	f8cd 8000 	str.w	r8, [sp]
 8003268:	2301      	movs	r3, #1
    tx = data;
 800326a:	f04f 0900 	mov.w	r9, #0
    tx = reg & 0x7F;
 800326e:	f884 a000 	strb.w	sl, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003272:	f7fe fef7 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003276:	2301      	movs	r3, #1
 8003278:	463a      	mov	r2, r7
 800327a:	4621      	mov	r1, r4
 800327c:	f8cd 8000 	str.w	r8, [sp]
 8003280:	4630      	mov	r0, r6
    tx = data;
 8003282:	f884 9000 	strb.w	r9, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003286:	f7fe feed 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 800328a:	2201      	movs	r2, #1
 800328c:	2140      	movs	r1, #64	; 0x40
 800328e:	483a      	ldr	r0, [pc, #232]	; (8003378 <ist_reg_write_by_mpu+0x13c>)
 8003290:	f7fe fbf2 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 8003294:	2002      	movs	r0, #2
 8003296:	f7fd feb7 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 800329a:	464a      	mov	r2, r9
 800329c:	4836      	ldr	r0, [pc, #216]	; (8003378 <ist_reg_write_by_mpu+0x13c>)
 800329e:	2140      	movs	r1, #64	; 0x40
 80032a0:	f7fe fbea 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 80032a4:	f04f 0c29 	mov.w	ip, #41	; 0x29
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80032a8:	463a      	mov	r2, r7
 80032aa:	4621      	mov	r1, r4
 80032ac:	f8cd 8000 	str.w	r8, [sp]
 80032b0:	4630      	mov	r0, r6
 80032b2:	2301      	movs	r3, #1
    tx = reg & 0x7F;
 80032b4:	f884 c000 	strb.w	ip, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80032b8:	f7fe fed4 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80032bc:	2301      	movs	r3, #1
 80032be:	463a      	mov	r2, r7
 80032c0:	4621      	mov	r1, r4
 80032c2:	f8cd 8000 	str.w	r8, [sp]
 80032c6:	4630      	mov	r0, r6
    tx = data;
 80032c8:	f884 b000 	strb.w	fp, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80032cc:	f7fe feca 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80032d0:	2201      	movs	r2, #1
 80032d2:	2140      	movs	r1, #64	; 0x40
 80032d4:	4828      	ldr	r0, [pc, #160]	; (8003378 <ist_reg_write_by_mpu+0x13c>)
 80032d6:	f7fe fbcf 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 80032da:	2002      	movs	r0, #2
 80032dc:	f7fd fe94 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 80032e0:	464a      	mov	r2, r9
 80032e2:	4825      	ldr	r0, [pc, #148]	; (8003378 <ist_reg_write_by_mpu+0x13c>)
 80032e4:	2140      	movs	r1, #64	; 0x40
 80032e6:	f7fe fbc7 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 80032ea:	f04f 0c64 	mov.w	ip, #100	; 0x64
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80032ee:	463a      	mov	r2, r7
 80032f0:	4621      	mov	r1, r4
 80032f2:	f8cd 8000 	str.w	r8, [sp]
 80032f6:	4630      	mov	r0, r6
 80032f8:	2301      	movs	r3, #1
    tx = reg & 0x7F;
 80032fa:	f884 c000 	strb.w	ip, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80032fe:	f7fe feb1 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003302:	2301      	movs	r3, #1
 8003304:	463a      	mov	r2, r7
 8003306:	4621      	mov	r1, r4
 8003308:	f8cd 8000 	str.w	r8, [sp]
 800330c:	4630      	mov	r0, r6
    tx = data;
 800330e:	7025      	strb	r5, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003310:	f7fe fea8 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003314:	2201      	movs	r2, #1
 8003316:	2140      	movs	r1, #64	; 0x40
 8003318:	4817      	ldr	r0, [pc, #92]	; (8003378 <ist_reg_write_by_mpu+0x13c>)
 800331a:	f7fe fbad 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 800331e:	2002      	movs	r0, #2
 8003320:	f7fd fe72 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003324:	464a      	mov	r2, r9
 8003326:	4814      	ldr	r0, [pc, #80]	; (8003378 <ist_reg_write_by_mpu+0x13c>)
 8003328:	2140      	movs	r1, #64	; 0x40
 800332a:	f7fe fba5 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800332e:	463a      	mov	r2, r7
 8003330:	4621      	mov	r1, r4
 8003332:	f8cd 8000 	str.w	r8, [sp]
 8003336:	4630      	mov	r0, r6
 8003338:	2301      	movs	r3, #1
    tx = reg & 0x7F;
 800333a:	f884 a000 	strb.w	sl, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800333e:	f7fe fe91 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003342:	463a      	mov	r2, r7
 8003344:	4621      	mov	r1, r4
 8003346:	2301      	movs	r3, #1
 8003348:	f8cd 8000 	str.w	r8, [sp]
 800334c:	4630      	mov	r0, r6
    tx = data;
 800334e:	2681      	movs	r6, #129	; 0x81
 8003350:	7026      	strb	r6, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003352:	f7fe fe87 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003356:	4808      	ldr	r0, [pc, #32]	; (8003378 <ist_reg_write_by_mpu+0x13c>)
 8003358:	2201      	movs	r2, #1
 800335a:	2140      	movs	r1, #64	; 0x40
 800335c:	f7fe fb8c 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(10);
 8003360:	200a      	movs	r0, #10
}
 8003362:	b003      	add	sp, #12
 8003364:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MPU_DELAY(10);
 8003368:	f7fd be4e 	b.w	8001008 <HAL_Delay>
 800336c:	20000275 	.word	0x20000275
 8003370:	20000274 	.word	0x20000274
 8003374:	200005b8 	.word	0x200005b8
 8003378:	40021400 	.word	0x40021400

0800337c <ist8310_init>:
	* @param  
	* @retval 
  * @usage  call in mpu_device_init() function
	*/
uint8_t ist8310_init()
{
 800337c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    tx = reg & 0x7F;
 8003380:	4cc9      	ldr	r4, [pc, #804]	; (80036a8 <ist8310_init+0x32c>)
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003382:	4dca      	ldr	r5, [pc, #808]	; (80036ac <ist8310_init+0x330>)
    MPU_NSS_LOW;
 8003384:	48ca      	ldr	r0, [pc, #808]	; (80036b0 <ist8310_init+0x334>)
{
 8003386:	b083      	sub	sp, #12
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003388:	2637      	movs	r6, #55	; 0x37
    MPU_NSS_LOW;
 800338a:	2200      	movs	r2, #0
 800338c:	2140      	movs	r1, #64	; 0x40
 800338e:	f7fe fb73 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 8003392:	276a      	movs	r7, #106	; 0x6a
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003394:	4621      	mov	r1, r4
 8003396:	462a      	mov	r2, r5
 8003398:	2301      	movs	r3, #1
 800339a:	9600      	str	r6, [sp, #0]
 800339c:	48c5      	ldr	r0, [pc, #788]	; (80036b4 <ist8310_init+0x338>)
    tx = reg & 0x7F;
 800339e:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80033a0:	f7fe fe60 	bl	8002064 <HAL_SPI_TransmitReceive>
    tx = data;
 80033a4:	2730      	movs	r7, #48	; 0x30
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80033a6:	2301      	movs	r3, #1
 80033a8:	462a      	mov	r2, r5
 80033aa:	4621      	mov	r1, r4
 80033ac:	9600      	str	r6, [sp, #0]
 80033ae:	48c1      	ldr	r0, [pc, #772]	; (80036b4 <ist8310_init+0x338>)
    tx = data;
 80033b0:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80033b2:	f7fe fe57 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80033b6:	2201      	movs	r2, #1
 80033b8:	2140      	movs	r1, #64	; 0x40
 80033ba:	48bd      	ldr	r0, [pc, #756]	; (80036b0 <ist8310_init+0x334>)
 80033bc:	f7fe fb5c 	bl	8001a78 <HAL_GPIO_WritePin>
	  /* enable iic master mode */
    mpu_write_byte(MPU6500_USER_CTRL, 0x30);
    MPU_DELAY(10);
 80033c0:	200a      	movs	r0, #10
 80033c2:	f7fd fe21 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 80033c6:	2200      	movs	r2, #0
 80033c8:	2140      	movs	r1, #64	; 0x40
 80033ca:	48b9      	ldr	r0, [pc, #740]	; (80036b0 <ist8310_init+0x334>)
 80033cc:	f7fe fb54 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 80033d0:	f04f 0724 	mov.w	r7, #36	; 0x24
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80033d4:	462a      	mov	r2, r5
 80033d6:	4621      	mov	r1, r4
 80033d8:	2301      	movs	r3, #1
 80033da:	9600      	str	r6, [sp, #0]
 80033dc:	48b5      	ldr	r0, [pc, #724]	; (80036b4 <ist8310_init+0x338>)
    tx = reg & 0x7F;
 80033de:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80033e0:	f7fe fe40 	bl	8002064 <HAL_SPI_TransmitReceive>
    tx = data;
 80033e4:	270d      	movs	r7, #13
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80033e6:	2301      	movs	r3, #1
 80033e8:	462a      	mov	r2, r5
 80033ea:	4621      	mov	r1, r4
 80033ec:	9600      	str	r6, [sp, #0]
 80033ee:	48b1      	ldr	r0, [pc, #708]	; (80036b4 <ist8310_init+0x338>)
    tx = data;
 80033f0:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80033f2:	f7fe fe37 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80033f6:	2201      	movs	r2, #1
 80033f8:	2140      	movs	r1, #64	; 0x40
 80033fa:	48ad      	ldr	r0, [pc, #692]	; (80036b0 <ist8310_init+0x334>)
 80033fc:	f7fe fb3c 	bl	8001a78 <HAL_GPIO_WritePin>
	  /* enable iic 400khz */
    mpu_write_byte(MPU6500_I2C_MST_CTRL, 0x0d); 
    MPU_DELAY(10);
 8003400:	200a      	movs	r0, #10
 8003402:	f7fd fe01 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003406:	2200      	movs	r2, #0
 8003408:	2140      	movs	r1, #64	; 0x40
 800340a:	48a9      	ldr	r0, [pc, #676]	; (80036b0 <ist8310_init+0x334>)
 800340c:	f7fe fb34 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 8003410:	f04f 0728 	mov.w	r7, #40	; 0x28
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003414:	462a      	mov	r2, r5
 8003416:	4621      	mov	r1, r4
 8003418:	2301      	movs	r3, #1
 800341a:	9600      	str	r6, [sp, #0]
 800341c:	48a5      	ldr	r0, [pc, #660]	; (80036b4 <ist8310_init+0x338>)
    tx = reg & 0x7F;
 800341e:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003420:	f7fe fe20 	bl	8002064 <HAL_SPI_TransmitReceive>
    tx = data;
 8003424:	f04f 070e 	mov.w	r7, #14
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003428:	2301      	movs	r3, #1
 800342a:	462a      	mov	r2, r5
 800342c:	4621      	mov	r1, r4
 800342e:	9600      	str	r6, [sp, #0]
 8003430:	48a0      	ldr	r0, [pc, #640]	; (80036b4 <ist8310_init+0x338>)
    tx = data;
 8003432:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003434:	f7fe fe16 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003438:	2201      	movs	r2, #1
 800343a:	2140      	movs	r1, #64	; 0x40
 800343c:	489c      	ldr	r0, [pc, #624]	; (80036b0 <ist8310_init+0x334>)
 800343e:	f7fe fb1b 	bl	8001a78 <HAL_GPIO_WritePin>

    /* turn on slave 1 for ist write and slave 4 to ist read */
    mpu_write_byte(MPU6500_I2C_SLV1_ADDR, IST8310_ADDRESS);  
    MPU_DELAY(10);
 8003442:	200a      	movs	r0, #10
 8003444:	f7fd fde0 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003448:	2200      	movs	r2, #0
 800344a:	2140      	movs	r1, #64	; 0x40
 800344c:	4898      	ldr	r0, [pc, #608]	; (80036b0 <ist8310_init+0x334>)
 800344e:	f7fe fb13 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 8003452:	2731      	movs	r7, #49	; 0x31
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003454:	462a      	mov	r2, r5
 8003456:	4621      	mov	r1, r4
 8003458:	2301      	movs	r3, #1
 800345a:	9600      	str	r6, [sp, #0]
 800345c:	4895      	ldr	r0, [pc, #596]	; (80036b4 <ist8310_init+0x338>)
    tx = reg & 0x7F;
 800345e:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003460:	f7fe fe00 	bl	8002064 <HAL_SPI_TransmitReceive>
    tx = data;
 8003464:	f06f 0771 	mvn.w	r7, #113	; 0x71
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003468:	2301      	movs	r3, #1
 800346a:	462a      	mov	r2, r5
 800346c:	4621      	mov	r1, r4
 800346e:	9600      	str	r6, [sp, #0]
 8003470:	4890      	ldr	r0, [pc, #576]	; (80036b4 <ist8310_init+0x338>)
    tx = data;
 8003472:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003474:	f7fe fdf6 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003478:	2201      	movs	r2, #1
 800347a:	2140      	movs	r1, #64	; 0x40
 800347c:	488c      	ldr	r0, [pc, #560]	; (80036b0 <ist8310_init+0x334>)
 800347e:	f7fe fafb 	bl	8001a78 <HAL_GPIO_WritePin>
    mpu_write_byte(MPU6500_I2C_SLV4_ADDR, 0x80 | IST8310_ADDRESS);
    MPU_DELAY(10);
 8003482:	200a      	movs	r0, #10
 8003484:	f7fd fdc0 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003488:	2200      	movs	r2, #0
 800348a:	2140      	movs	r1, #64	; 0x40
 800348c:	4888      	ldr	r0, [pc, #544]	; (80036b0 <ist8310_init+0x334>)
 800348e:	f7fe faf3 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 8003492:	f04f 0a2a 	mov.w	sl, #42	; 0x2a
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003496:	462a      	mov	r2, r5
 8003498:	4621      	mov	r1, r4
 800349a:	2301      	movs	r3, #1
 800349c:	9600      	str	r6, [sp, #0]
 800349e:	4885      	ldr	r0, [pc, #532]	; (80036b4 <ist8310_init+0x338>)
    tx = reg & 0x7F;
 80034a0:	f884 a000 	strb.w	sl, [r4]
    tx = data;
 80034a4:	f04f 0800 	mov.w	r8, #0
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80034a8:	f7fe fddc 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80034ac:	2301      	movs	r3, #1
 80034ae:	462a      	mov	r2, r5
 80034b0:	4621      	mov	r1, r4
 80034b2:	9600      	str	r6, [sp, #0]
 80034b4:	487f      	ldr	r0, [pc, #508]	; (80036b4 <ist8310_init+0x338>)
    tx = data;
 80034b6:	f884 8000 	strb.w	r8, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80034ba:	f7fe fdd3 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80034be:	2201      	movs	r2, #1
 80034c0:	2140      	movs	r1, #64	; 0x40
 80034c2:	487b      	ldr	r0, [pc, #492]	; (80036b0 <ist8310_init+0x334>)
 80034c4:	f7fe fad8 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 80034c8:	2002      	movs	r0, #2
 80034ca:	f7fd fd9d 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 80034ce:	4642      	mov	r2, r8
 80034d0:	2140      	movs	r1, #64	; 0x40
 80034d2:	4877      	ldr	r0, [pc, #476]	; (80036b0 <ist8310_init+0x334>)
 80034d4:	f7fe fad0 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 80034d8:	f04f 0729 	mov.w	r7, #41	; 0x29
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80034dc:	462a      	mov	r2, r5
 80034de:	4621      	mov	r1, r4
 80034e0:	2301      	movs	r3, #1
 80034e2:	9600      	str	r6, [sp, #0]
 80034e4:	4873      	ldr	r0, [pc, #460]	; (80036b4 <ist8310_init+0x338>)
    tx = reg & 0x7F;
 80034e6:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80034e8:	f7fe fdbc 	bl	8002064 <HAL_SPI_TransmitReceive>
    tx = data;
 80034ec:	f04f 070b 	mov.w	r7, #11
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80034f0:	2301      	movs	r3, #1
 80034f2:	462a      	mov	r2, r5
 80034f4:	4621      	mov	r1, r4
 80034f6:	9600      	str	r6, [sp, #0]
 80034f8:	486e      	ldr	r0, [pc, #440]	; (80036b4 <ist8310_init+0x338>)
    tx = data;
 80034fa:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80034fc:	f7fe fdb2 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003500:	2201      	movs	r2, #1
 8003502:	2140      	movs	r1, #64	; 0x40
 8003504:	486a      	ldr	r0, [pc, #424]	; (80036b0 <ist8310_init+0x334>)
 8003506:	f7fe fab7 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 800350a:	2002      	movs	r0, #2
 800350c:	f7fd fd7c 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003510:	4642      	mov	r2, r8
 8003512:	2140      	movs	r1, #64	; 0x40
 8003514:	4866      	ldr	r0, [pc, #408]	; (80036b0 <ist8310_init+0x334>)
 8003516:	f7fe faaf 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 800351a:	f04f 0764 	mov.w	r7, #100	; 0x64
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800351e:	462a      	mov	r2, r5
 8003520:	4621      	mov	r1, r4
 8003522:	2301      	movs	r3, #1
 8003524:	9600      	str	r6, [sp, #0]
 8003526:	4863      	ldr	r0, [pc, #396]	; (80036b4 <ist8310_init+0x338>)
    tx = reg & 0x7F;
 8003528:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800352a:	f7fe fd9b 	bl	8002064 <HAL_SPI_TransmitReceive>
    tx = data;
 800352e:	f04f 0701 	mov.w	r7, #1
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003532:	2301      	movs	r3, #1
 8003534:	462a      	mov	r2, r5
 8003536:	4621      	mov	r1, r4
 8003538:	9600      	str	r6, [sp, #0]
 800353a:	485e      	ldr	r0, [pc, #376]	; (80036b4 <ist8310_init+0x338>)
    tx = data;
 800353c:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800353e:	f7fe fd91 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003542:	2201      	movs	r2, #1
 8003544:	2140      	movs	r1, #64	; 0x40
 8003546:	485a      	ldr	r0, [pc, #360]	; (80036b0 <ist8310_init+0x334>)
 8003548:	f7fe fa96 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 800354c:	2002      	movs	r0, #2
 800354e:	f7fd fd5b 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003552:	4642      	mov	r2, r8
 8003554:	2140      	movs	r1, #64	; 0x40
 8003556:	4856      	ldr	r0, [pc, #344]	; (80036b0 <ist8310_init+0x334>)
 8003558:	f7fe fa8e 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800355c:	2301      	movs	r3, #1
 800355e:	462a      	mov	r2, r5
 8003560:	4621      	mov	r1, r4
 8003562:	9600      	str	r6, [sp, #0]
 8003564:	4853      	ldr	r0, [pc, #332]	; (80036b4 <ist8310_init+0x338>)
    tx = reg & 0x7F;
 8003566:	f884 a000 	strb.w	sl, [r4]
    tx = data;
 800356a:	f06f 077e 	mvn.w	r7, #126	; 0x7e
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800356e:	f7fe fd79 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003572:	2301      	movs	r3, #1
 8003574:	462a      	mov	r2, r5
 8003576:	4621      	mov	r1, r4
 8003578:	9600      	str	r6, [sp, #0]
 800357a:	484e      	ldr	r0, [pc, #312]	; (80036b4 <ist8310_init+0x338>)
    tx = data;
 800357c:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800357e:	f7fe fd71 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003582:	2201      	movs	r2, #1
 8003584:	2140      	movs	r1, #64	; 0x40
 8003586:	484a      	ldr	r0, [pc, #296]	; (80036b0 <ist8310_init+0x334>)
 8003588:	f7fe fa76 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(10);
 800358c:	200a      	movs	r0, #10
 800358e:	f7fd fd3b 	bl	8001008 <HAL_Delay>

    /* IST8310_R_CONFB 0x01 = device rst */
    ist_reg_write_by_mpu(IST8310_R_CONFB, 0x01);
    MPU_DELAY(10);
 8003592:	200a      	movs	r0, #10
 8003594:	f7fd fd38 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003598:	4642      	mov	r2, r8
 800359a:	2140      	movs	r1, #64	; 0x40
 800359c:	4844      	ldr	r0, [pc, #272]	; (80036b0 <ist8310_init+0x334>)
 800359e:	f7fe fa6b 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 80035a2:	f04f 0732 	mov.w	r7, #50	; 0x32
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80035a6:	2301      	movs	r3, #1
 80035a8:	462a      	mov	r2, r5
 80035aa:	4621      	mov	r1, r4
 80035ac:	9600      	str	r6, [sp, #0]
 80035ae:	4841      	ldr	r0, [pc, #260]	; (80036b4 <ist8310_init+0x338>)
    tx = reg & 0x7F;
 80035b0:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80035b2:	f7fe fd57 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80035b6:	2301      	movs	r3, #1
 80035b8:	462a      	mov	r2, r5
 80035ba:	4621      	mov	r1, r4
 80035bc:	9600      	str	r6, [sp, #0]
 80035be:	483d      	ldr	r0, [pc, #244]	; (80036b4 <ist8310_init+0x338>)
    tx = data;
 80035c0:	f884 8000 	strb.w	r8, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80035c4:	f7fe fd4e 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80035c8:	2201      	movs	r2, #1
 80035ca:	2140      	movs	r1, #64	; 0x40
 80035cc:	4838      	ldr	r0, [pc, #224]	; (80036b0 <ist8310_init+0x334>)
 80035ce:	f7fe fa53 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(10);
 80035d2:	200a      	movs	r0, #10
 80035d4:	f7fd fd18 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 80035d8:	4642      	mov	r2, r8
 80035da:	2140      	movs	r1, #64	; 0x40
 80035dc:	4834      	ldr	r0, [pc, #208]	; (80036b0 <ist8310_init+0x334>)
 80035de:	f7fe fa4b 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 80035e2:	f04f 0934 	mov.w	r9, #52	; 0x34
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80035e6:	2301      	movs	r3, #1
 80035e8:	462a      	mov	r2, r5
 80035ea:	4621      	mov	r1, r4
 80035ec:	9600      	str	r6, [sp, #0]
 80035ee:	4831      	ldr	r0, [pc, #196]	; (80036b4 <ist8310_init+0x338>)
    tx = reg & 0x7F;
 80035f0:	f884 9000 	strb.w	r9, [r4]
    tx = data;
 80035f4:	f06f 077f 	mvn.w	r7, #127	; 0x7f
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80035f8:	f7fe fd34 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80035fc:	2301      	movs	r3, #1
 80035fe:	462a      	mov	r2, r5
 8003600:	4621      	mov	r1, r4
 8003602:	9600      	str	r6, [sp, #0]
 8003604:	482b      	ldr	r0, [pc, #172]	; (80036b4 <ist8310_init+0x338>)
    tx = data;
 8003606:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003608:	f7fe fd2c 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 800360c:	2201      	movs	r2, #1
 800360e:	2140      	movs	r1, #64	; 0x40
 8003610:	4827      	ldr	r0, [pc, #156]	; (80036b0 <ist8310_init+0x334>)
 8003612:	f7fe fa31 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(10);
 8003616:	200a      	movs	r0, #10
 8003618:	f7fd fcf6 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 800361c:	4642      	mov	r2, r8
 800361e:	2140      	movs	r1, #64	; 0x40
 8003620:	4823      	ldr	r0, [pc, #140]	; (80036b0 <ist8310_init+0x334>)
 8003622:	f7fe fa29 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg | 0x80;
 8003626:	f06f 074a 	mvn.w	r7, #74	; 0x4a
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800362a:	2301      	movs	r3, #1
 800362c:	462a      	mov	r2, r5
 800362e:	4621      	mov	r1, r4
 8003630:	9600      	str	r6, [sp, #0]
 8003632:	4820      	ldr	r0, [pc, #128]	; (80036b4 <ist8310_init+0x338>)
    tx = reg | 0x80;
 8003634:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003636:	f7fe fd15 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800363a:	2301      	movs	r3, #1
 800363c:	462a      	mov	r2, r5
 800363e:	4621      	mov	r1, r4
 8003640:	9600      	str	r6, [sp, #0]
 8003642:	481c      	ldr	r0, [pc, #112]	; (80036b4 <ist8310_init+0x338>)
 8003644:	f7fe fd0e 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003648:	2201      	movs	r2, #1
 800364a:	2140      	movs	r1, #64	; 0x40
 800364c:	4818      	ldr	r0, [pc, #96]	; (80036b0 <ist8310_init+0x334>)
 800364e:	f7fe fa13 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_NSS_LOW;
 8003652:	4642      	mov	r2, r8
 8003654:	2140      	movs	r1, #64	; 0x40
 8003656:	4816      	ldr	r0, [pc, #88]	; (80036b0 <ist8310_init+0x334>)
    return rx;
 8003658:	f895 b000 	ldrb.w	fp, [r5]
    MPU_NSS_LOW;
 800365c:	f7fe fa0c 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003660:	2301      	movs	r3, #1
 8003662:	462a      	mov	r2, r5
 8003664:	4621      	mov	r1, r4
 8003666:	9600      	str	r6, [sp, #0]
 8003668:	4812      	ldr	r0, [pc, #72]	; (80036b4 <ist8310_init+0x338>)
    tx = reg & 0x7F;
 800366a:	f884 9000 	strb.w	r9, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800366e:	f7fe fcf9 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003672:	2301      	movs	r3, #1
 8003674:	462a      	mov	r2, r5
 8003676:	4621      	mov	r1, r4
 8003678:	9600      	str	r6, [sp, #0]
 800367a:	480e      	ldr	r0, [pc, #56]	; (80036b4 <ist8310_init+0x338>)
    tx = data;
 800367c:	f884 8000 	strb.w	r8, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003680:	f7fe fcf0 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003684:	2201      	movs	r2, #1
 8003686:	2140      	movs	r1, #64	; 0x40
 8003688:	4809      	ldr	r0, [pc, #36]	; (80036b0 <ist8310_init+0x334>)
 800368a:	f7fe f9f5 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(10);
 800368e:	200a      	movs	r0, #10
 8003690:	f7fd fcba 	bl	8001008 <HAL_Delay>
    if (IST8310_DEVICE_ID_A != ist_reg_read_by_mpu(IST8310_WHO_AM_I))
 8003694:	f1bb 0f10 	cmp.w	fp, #16
 8003698:	d00e      	beq.n	80036b8 <ist8310_init+0x33c>
        return 1;
 800369a:	f04f 0801 	mov.w	r8, #1

    /* configure and turn on slave 0 */
    mpu_master_i2c_auto_read_config(IST8310_ADDRESS, IST8310_R_XL, 0x06);
    MPU_DELAY(100);
    return 0;
}
 800369e:	4640      	mov	r0, r8
 80036a0:	b003      	add	sp, #12
 80036a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036a6:	bf00      	nop
 80036a8:	20000275 	.word	0x20000275
 80036ac:	20000274 	.word	0x20000274
 80036b0:	40021400 	.word	0x40021400
 80036b4:	200005b8 	.word	0x200005b8
    MPU_NSS_LOW;
 80036b8:	4642      	mov	r2, r8
 80036ba:	2140      	movs	r1, #64	; 0x40
 80036bc:	48d4      	ldr	r0, [pc, #848]	; (8003a10 <ist8310_init+0x694>)
 80036be:	f7fe f9db 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80036c2:	2301      	movs	r3, #1
 80036c4:	462a      	mov	r2, r5
 80036c6:	4621      	mov	r1, r4
 80036c8:	9600      	str	r6, [sp, #0]
 80036ca:	48d2      	ldr	r0, [pc, #840]	; (8003a14 <ist8310_init+0x698>)
    tx = reg & 0x7F;
 80036cc:	f884 a000 	strb.w	sl, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80036d0:	f7fe fcc8 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80036d4:	2301      	movs	r3, #1
 80036d6:	462a      	mov	r2, r5
 80036d8:	4621      	mov	r1, r4
 80036da:	9600      	str	r6, [sp, #0]
 80036dc:	48cd      	ldr	r0, [pc, #820]	; (8003a14 <ist8310_init+0x698>)
    tx = data;
 80036de:	f884 8000 	strb.w	r8, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80036e2:	f7fe fcbf 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80036e6:	2201      	movs	r2, #1
 80036e8:	2140      	movs	r1, #64	; 0x40
 80036ea:	48c9      	ldr	r0, [pc, #804]	; (8003a10 <ist8310_init+0x694>)
 80036ec:	f7fe f9c4 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 80036f0:	2002      	movs	r0, #2
 80036f2:	f7fd fc89 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 80036f6:	4642      	mov	r2, r8
 80036f8:	2140      	movs	r1, #64	; 0x40
 80036fa:	48c5      	ldr	r0, [pc, #788]	; (8003a10 <ist8310_init+0x694>)
 80036fc:	f7fe f9bc 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 8003700:	f04f 0729 	mov.w	r7, #41	; 0x29
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003704:	2301      	movs	r3, #1
 8003706:	462a      	mov	r2, r5
 8003708:	4621      	mov	r1, r4
 800370a:	9600      	str	r6, [sp, #0]
 800370c:	48c1      	ldr	r0, [pc, #772]	; (8003a14 <ist8310_init+0x698>)
    tx = reg & 0x7F;
 800370e:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003710:	f7fe fca8 	bl	8002064 <HAL_SPI_TransmitReceive>
    tx = data;
 8003714:	f04f 0c0b 	mov.w	ip, #11
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003718:	2301      	movs	r3, #1
 800371a:	462a      	mov	r2, r5
 800371c:	4621      	mov	r1, r4
 800371e:	9600      	str	r6, [sp, #0]
 8003720:	48bc      	ldr	r0, [pc, #752]	; (8003a14 <ist8310_init+0x698>)
    tx = data;
 8003722:	f884 c000 	strb.w	ip, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003726:	f7fe fc9d 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 800372a:	2201      	movs	r2, #1
 800372c:	2140      	movs	r1, #64	; 0x40
 800372e:	48b8      	ldr	r0, [pc, #736]	; (8003a10 <ist8310_init+0x694>)
 8003730:	f7fe f9a2 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 8003734:	2002      	movs	r0, #2
 8003736:	f7fd fc67 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 800373a:	4642      	mov	r2, r8
 800373c:	2140      	movs	r1, #64	; 0x40
 800373e:	48b4      	ldr	r0, [pc, #720]	; (8003a10 <ist8310_init+0x694>)
 8003740:	f7fe f99a 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 8003744:	f04f 0c64 	mov.w	ip, #100	; 0x64
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003748:	2301      	movs	r3, #1
 800374a:	462a      	mov	r2, r5
 800374c:	4621      	mov	r1, r4
 800374e:	9600      	str	r6, [sp, #0]
 8003750:	48b0      	ldr	r0, [pc, #704]	; (8003a14 <ist8310_init+0x698>)
    tx = reg & 0x7F;
 8003752:	f884 c000 	strb.w	ip, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003756:	f7fe fc85 	bl	8002064 <HAL_SPI_TransmitReceive>
    tx = data;
 800375a:	f04f 0c01 	mov.w	ip, #1
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800375e:	2301      	movs	r3, #1
 8003760:	462a      	mov	r2, r5
 8003762:	4621      	mov	r1, r4
 8003764:	9600      	str	r6, [sp, #0]
 8003766:	48ab      	ldr	r0, [pc, #684]	; (8003a14 <ist8310_init+0x698>)
    tx = data;
 8003768:	f884 c000 	strb.w	ip, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800376c:	f7fe fc7a 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003770:	2201      	movs	r2, #1
 8003772:	2140      	movs	r1, #64	; 0x40
 8003774:	48a6      	ldr	r0, [pc, #664]	; (8003a10 <ist8310_init+0x694>)
 8003776:	f7fe f97f 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 800377a:	2002      	movs	r0, #2
 800377c:	f7fd fc44 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003780:	4642      	mov	r2, r8
 8003782:	2140      	movs	r1, #64	; 0x40
 8003784:	48a2      	ldr	r0, [pc, #648]	; (8003a10 <ist8310_init+0x694>)
 8003786:	f7fe f977 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800378a:	2301      	movs	r3, #1
 800378c:	462a      	mov	r2, r5
 800378e:	4621      	mov	r1, r4
 8003790:	9600      	str	r6, [sp, #0]
 8003792:	48a0      	ldr	r0, [pc, #640]	; (8003a14 <ist8310_init+0x698>)
    tx = reg & 0x7F;
 8003794:	f884 a000 	strb.w	sl, [r4]
    tx = data;
 8003798:	f06f 0b7e 	mvn.w	fp, #126	; 0x7e
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800379c:	f7fe fc62 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80037a0:	2301      	movs	r3, #1
 80037a2:	462a      	mov	r2, r5
 80037a4:	4621      	mov	r1, r4
 80037a6:	9600      	str	r6, [sp, #0]
 80037a8:	489a      	ldr	r0, [pc, #616]	; (8003a14 <ist8310_init+0x698>)
    tx = data;
 80037aa:	f884 b000 	strb.w	fp, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80037ae:	f7fe fc59 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80037b2:	2201      	movs	r2, #1
 80037b4:	2140      	movs	r1, #64	; 0x40
 80037b6:	4896      	ldr	r0, [pc, #600]	; (8003a10 <ist8310_init+0x694>)
 80037b8:	f7fe f95e 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(10);
 80037bc:	200a      	movs	r0, #10
 80037be:	f7fd fc23 	bl	8001008 <HAL_Delay>
    MPU_DELAY(10);
 80037c2:	200a      	movs	r0, #10
 80037c4:	f7fd fc20 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 80037c8:	4642      	mov	r2, r8
 80037ca:	2140      	movs	r1, #64	; 0x40
 80037cc:	4890      	ldr	r0, [pc, #576]	; (8003a10 <ist8310_init+0x694>)
 80037ce:	f7fe f953 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80037d2:	2301      	movs	r3, #1
 80037d4:	462a      	mov	r2, r5
 80037d6:	4621      	mov	r1, r4
 80037d8:	9600      	str	r6, [sp, #0]
 80037da:	488e      	ldr	r0, [pc, #568]	; (8003a14 <ist8310_init+0x698>)
    tx = reg & 0x7F;
 80037dc:	f884 a000 	strb.w	sl, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80037e0:	f7fe fc40 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80037e4:	2301      	movs	r3, #1
 80037e6:	462a      	mov	r2, r5
 80037e8:	4621      	mov	r1, r4
 80037ea:	9600      	str	r6, [sp, #0]
 80037ec:	4889      	ldr	r0, [pc, #548]	; (8003a14 <ist8310_init+0x698>)
    tx = data;
 80037ee:	f884 8000 	strb.w	r8, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80037f2:	f7fe fc37 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80037f6:	2201      	movs	r2, #1
 80037f8:	2140      	movs	r1, #64	; 0x40
 80037fa:	4885      	ldr	r0, [pc, #532]	; (8003a10 <ist8310_init+0x694>)
 80037fc:	f7fe f93c 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 8003800:	2002      	movs	r0, #2
 8003802:	f7fd fc01 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003806:	4642      	mov	r2, r8
 8003808:	2140      	movs	r1, #64	; 0x40
 800380a:	4881      	ldr	r0, [pc, #516]	; (8003a10 <ist8310_init+0x694>)
 800380c:	f7fe f934 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003810:	2301      	movs	r3, #1
 8003812:	462a      	mov	r2, r5
 8003814:	4621      	mov	r1, r4
 8003816:	9600      	str	r6, [sp, #0]
 8003818:	487e      	ldr	r0, [pc, #504]	; (8003a14 <ist8310_init+0x698>)
    tx = reg & 0x7F;
 800381a:	7027      	strb	r7, [r4, #0]
    tx = data;
 800381c:	f04f 0b0a 	mov.w	fp, #10
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003820:	f7fe fc20 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003824:	2301      	movs	r3, #1
 8003826:	462a      	mov	r2, r5
 8003828:	4621      	mov	r1, r4
 800382a:	9600      	str	r6, [sp, #0]
 800382c:	4879      	ldr	r0, [pc, #484]	; (8003a14 <ist8310_init+0x698>)
    tx = data;
 800382e:	f884 b000 	strb.w	fp, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003832:	f7fe fc17 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003836:	2201      	movs	r2, #1
 8003838:	2140      	movs	r1, #64	; 0x40
 800383a:	4875      	ldr	r0, [pc, #468]	; (8003a10 <ist8310_init+0x694>)
 800383c:	f7fe f91c 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 8003840:	2002      	movs	r0, #2
 8003842:	f7fd fbe1 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003846:	4642      	mov	r2, r8
 8003848:	2140      	movs	r1, #64	; 0x40
 800384a:	4871      	ldr	r0, [pc, #452]	; (8003a10 <ist8310_init+0x694>)
 800384c:	f7fe f914 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 8003850:	f04f 0e64 	mov.w	lr, #100	; 0x64
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003854:	2301      	movs	r3, #1
 8003856:	462a      	mov	r2, r5
 8003858:	4621      	mov	r1, r4
 800385a:	9600      	str	r6, [sp, #0]
 800385c:	486d      	ldr	r0, [pc, #436]	; (8003a14 <ist8310_init+0x698>)
    tx = reg & 0x7F;
 800385e:	f884 e000 	strb.w	lr, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003862:	f7fe fbff 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003866:	2301      	movs	r3, #1
 8003868:	462a      	mov	r2, r5
 800386a:	4621      	mov	r1, r4
 800386c:	9600      	str	r6, [sp, #0]
 800386e:	4869      	ldr	r0, [pc, #420]	; (8003a14 <ist8310_init+0x698>)
    tx = data;
 8003870:	f884 8000 	strb.w	r8, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003874:	f7fe fbf6 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003878:	2201      	movs	r2, #1
 800387a:	2140      	movs	r1, #64	; 0x40
 800387c:	4864      	ldr	r0, [pc, #400]	; (8003a10 <ist8310_init+0x694>)
 800387e:	f7fe f8fb 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 8003882:	2002      	movs	r0, #2
 8003884:	f7fd fbc0 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003888:	4642      	mov	r2, r8
 800388a:	2140      	movs	r1, #64	; 0x40
 800388c:	4860      	ldr	r0, [pc, #384]	; (8003a10 <ist8310_init+0x694>)
 800388e:	f7fe f8f3 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003892:	2301      	movs	r3, #1
 8003894:	462a      	mov	r2, r5
 8003896:	4621      	mov	r1, r4
 8003898:	9600      	str	r6, [sp, #0]
 800389a:	485e      	ldr	r0, [pc, #376]	; (8003a14 <ist8310_init+0x698>)
    tx = reg & 0x7F;
 800389c:	f884 a000 	strb.w	sl, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80038a0:	f7fe fbe0 	bl	8002064 <HAL_SPI_TransmitReceive>
    tx = data;
 80038a4:	f06f 0c7e 	mvn.w	ip, #126	; 0x7e
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80038a8:	2301      	movs	r3, #1
 80038aa:	462a      	mov	r2, r5
 80038ac:	4621      	mov	r1, r4
 80038ae:	9600      	str	r6, [sp, #0]
 80038b0:	4858      	ldr	r0, [pc, #352]	; (8003a14 <ist8310_init+0x698>)
    tx = data;
 80038b2:	f884 c000 	strb.w	ip, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80038b6:	f7fe fbd5 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80038ba:	2201      	movs	r2, #1
 80038bc:	2140      	movs	r1, #64	; 0x40
 80038be:	4854      	ldr	r0, [pc, #336]	; (8003a10 <ist8310_init+0x694>)
 80038c0:	f7fe f8da 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(10);
 80038c4:	4658      	mov	r0, fp
 80038c6:	f7fd fb9f 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 80038ca:	4642      	mov	r2, r8
 80038cc:	2140      	movs	r1, #64	; 0x40
 80038ce:	4850      	ldr	r0, [pc, #320]	; (8003a10 <ist8310_init+0x694>)
 80038d0:	f7fe f8d2 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 80038d4:	f04f 0732 	mov.w	r7, #50	; 0x32
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80038d8:	2301      	movs	r3, #1
 80038da:	462a      	mov	r2, r5
 80038dc:	4621      	mov	r1, r4
 80038de:	9600      	str	r6, [sp, #0]
 80038e0:	484c      	ldr	r0, [pc, #304]	; (8003a14 <ist8310_init+0x698>)
    tx = reg & 0x7F;
 80038e2:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80038e4:	f7fe fbbe 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80038e8:	2301      	movs	r3, #1
 80038ea:	462a      	mov	r2, r5
 80038ec:	4621      	mov	r1, r4
 80038ee:	9600      	str	r6, [sp, #0]
 80038f0:	4848      	ldr	r0, [pc, #288]	; (8003a14 <ist8310_init+0x698>)
    tx = data;
 80038f2:	f884 b000 	strb.w	fp, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80038f6:	f7fe fbb5 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80038fa:	2201      	movs	r2, #1
 80038fc:	2140      	movs	r1, #64	; 0x40
 80038fe:	4844      	ldr	r0, [pc, #272]	; (8003a10 <ist8310_init+0x694>)
 8003900:	f7fe f8ba 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(10);
 8003904:	4658      	mov	r0, fp
 8003906:	f7fd fb7f 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 800390a:	4642      	mov	r2, r8
 800390c:	2140      	movs	r1, #64	; 0x40
 800390e:	4840      	ldr	r0, [pc, #256]	; (8003a10 <ist8310_init+0x694>)
 8003910:	f7fe f8b2 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003914:	2301      	movs	r3, #1
 8003916:	462a      	mov	r2, r5
 8003918:	4621      	mov	r1, r4
 800391a:	9600      	str	r6, [sp, #0]
 800391c:	483d      	ldr	r0, [pc, #244]	; (8003a14 <ist8310_init+0x698>)
    tx = reg & 0x7F;
 800391e:	f884 9000 	strb.w	r9, [r4]
    tx = data;
 8003922:	f06f 077f 	mvn.w	r7, #127	; 0x7f
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003926:	f7fe fb9d 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800392a:	2301      	movs	r3, #1
 800392c:	462a      	mov	r2, r5
 800392e:	4621      	mov	r1, r4
 8003930:	9600      	str	r6, [sp, #0]
 8003932:	4838      	ldr	r0, [pc, #224]	; (8003a14 <ist8310_init+0x698>)
    tx = data;
 8003934:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003936:	f7fe fb95 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 800393a:	2201      	movs	r2, #1
 800393c:	2140      	movs	r1, #64	; 0x40
 800393e:	4834      	ldr	r0, [pc, #208]	; (8003a10 <ist8310_init+0x694>)
 8003940:	f7fe f89a 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(10);
 8003944:	4658      	mov	r0, fp
 8003946:	f7fd fb5f 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 800394a:	4642      	mov	r2, r8
 800394c:	2140      	movs	r1, #64	; 0x40
 800394e:	4830      	ldr	r0, [pc, #192]	; (8003a10 <ist8310_init+0x694>)
 8003950:	f7fe f892 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg | 0x80;
 8003954:	f06f 074a 	mvn.w	r7, #74	; 0x4a
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003958:	2301      	movs	r3, #1
 800395a:	462a      	mov	r2, r5
 800395c:	4621      	mov	r1, r4
 800395e:	9600      	str	r6, [sp, #0]
 8003960:	482c      	ldr	r0, [pc, #176]	; (8003a14 <ist8310_init+0x698>)
    tx = reg | 0x80;
 8003962:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003964:	f7fe fb7e 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003968:	2301      	movs	r3, #1
 800396a:	462a      	mov	r2, r5
 800396c:	4621      	mov	r1, r4
 800396e:	9600      	str	r6, [sp, #0]
 8003970:	4828      	ldr	r0, [pc, #160]	; (8003a14 <ist8310_init+0x698>)
 8003972:	f7fe fb77 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003976:	2201      	movs	r2, #1
 8003978:	2140      	movs	r1, #64	; 0x40
 800397a:	4825      	ldr	r0, [pc, #148]	; (8003a10 <ist8310_init+0x694>)
 800397c:	f7fe f87c 	bl	8001a78 <HAL_GPIO_WritePin>
    return rx;
 8003980:	782b      	ldrb	r3, [r5, #0]
    MPU_NSS_LOW;
 8003982:	4823      	ldr	r0, [pc, #140]	; (8003a10 <ist8310_init+0x694>)
 8003984:	4642      	mov	r2, r8
 8003986:	2140      	movs	r1, #64	; 0x40
    return rx;
 8003988:	461f      	mov	r7, r3
    MPU_NSS_LOW;
 800398a:	f7fe f875 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800398e:	2301      	movs	r3, #1
 8003990:	462a      	mov	r2, r5
 8003992:	4621      	mov	r1, r4
 8003994:	9600      	str	r6, [sp, #0]
 8003996:	481f      	ldr	r0, [pc, #124]	; (8003a14 <ist8310_init+0x698>)
    tx = reg & 0x7F;
 8003998:	f884 9000 	strb.w	r9, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800399c:	f7fe fb62 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80039a0:	2301      	movs	r3, #1
 80039a2:	462a      	mov	r2, r5
 80039a4:	4621      	mov	r1, r4
 80039a6:	9600      	str	r6, [sp, #0]
 80039a8:	481a      	ldr	r0, [pc, #104]	; (8003a14 <ist8310_init+0x698>)
    tx = data;
 80039aa:	f884 8000 	strb.w	r8, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80039ae:	f7fe fb59 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80039b2:	4817      	ldr	r0, [pc, #92]	; (8003a10 <ist8310_init+0x694>)
 80039b4:	2201      	movs	r2, #1
 80039b6:	2140      	movs	r1, #64	; 0x40
 80039b8:	f7fe f85e 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(10);
 80039bc:	4658      	mov	r0, fp
 80039be:	f7fd fb23 	bl	8001008 <HAL_Delay>
    if (ist_reg_read_by_mpu(IST8310_R_CONFA) != 0x00)
 80039c2:	2f00      	cmp	r7, #0
 80039c4:	f040 809e 	bne.w	8003b04 <ist8310_init+0x788>
    MPU_DELAY(10);
 80039c8:	4658      	mov	r0, fp
 80039ca:	f7fd fb1d 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 80039ce:	463a      	mov	r2, r7
 80039d0:	2140      	movs	r1, #64	; 0x40
 80039d2:	480f      	ldr	r0, [pc, #60]	; (8003a10 <ist8310_init+0x694>)
 80039d4:	f7fe f850 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80039d8:	2301      	movs	r3, #1
 80039da:	462a      	mov	r2, r5
 80039dc:	4621      	mov	r1, r4
 80039de:	9600      	str	r6, [sp, #0]
 80039e0:	480c      	ldr	r0, [pc, #48]	; (8003a14 <ist8310_init+0x698>)
    tx = reg & 0x7F;
 80039e2:	f884 a000 	strb.w	sl, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80039e6:	f7fe fb3d 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80039ea:	2301      	movs	r3, #1
 80039ec:	462a      	mov	r2, r5
 80039ee:	4621      	mov	r1, r4
 80039f0:	9600      	str	r6, [sp, #0]
 80039f2:	4808      	ldr	r0, [pc, #32]	; (8003a14 <ist8310_init+0x698>)
    tx = data;
 80039f4:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80039f6:	f7fe fb35 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80039fa:	2201      	movs	r2, #1
 80039fc:	2140      	movs	r1, #64	; 0x40
 80039fe:	4804      	ldr	r0, [pc, #16]	; (8003a10 <ist8310_init+0x694>)
 8003a00:	f7fe f83a 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 8003a04:	2002      	movs	r0, #2
 8003a06:	f7fd faff 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003a0a:	463a      	mov	r2, r7
 8003a0c:	2140      	movs	r1, #64	; 0x40
 8003a0e:	e003      	b.n	8003a18 <ist8310_init+0x69c>
 8003a10:	40021400 	.word	0x40021400
 8003a14:	200005b8 	.word	0x200005b8
 8003a18:	4846      	ldr	r0, [pc, #280]	; (8003b34 <ist8310_init+0x7b8>)
 8003a1a:	f7fe f82d 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 8003a1e:	f04f 0c29 	mov.w	ip, #41	; 0x29
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003a22:	2301      	movs	r3, #1
 8003a24:	462a      	mov	r2, r5
 8003a26:	4621      	mov	r1, r4
 8003a28:	9600      	str	r6, [sp, #0]
 8003a2a:	4843      	ldr	r0, [pc, #268]	; (8003b38 <ist8310_init+0x7bc>)
    tx = reg & 0x7F;
 8003a2c:	f884 c000 	strb.w	ip, [r4]
    tx = data;
 8003a30:	f04f 080b 	mov.w	r8, #11
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003a34:	f7fe fb16 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003a38:	2301      	movs	r3, #1
 8003a3a:	462a      	mov	r2, r5
 8003a3c:	4621      	mov	r1, r4
 8003a3e:	9600      	str	r6, [sp, #0]
 8003a40:	483d      	ldr	r0, [pc, #244]	; (8003b38 <ist8310_init+0x7bc>)
    tx = data;
 8003a42:	f884 8000 	strb.w	r8, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003a46:	f7fe fb0d 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	2140      	movs	r1, #64	; 0x40
 8003a4e:	4839      	ldr	r0, [pc, #228]	; (8003b34 <ist8310_init+0x7b8>)
 8003a50:	f7fe f812 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 8003a54:	2002      	movs	r0, #2
 8003a56:	f7fd fad7 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003a5a:	463a      	mov	r2, r7
 8003a5c:	2140      	movs	r1, #64	; 0x40
 8003a5e:	4835      	ldr	r0, [pc, #212]	; (8003b34 <ist8310_init+0x7b8>)
 8003a60:	f7fe f80a 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 8003a64:	f04f 0e64 	mov.w	lr, #100	; 0x64
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003a68:	2301      	movs	r3, #1
 8003a6a:	462a      	mov	r2, r5
 8003a6c:	4621      	mov	r1, r4
 8003a6e:	9600      	str	r6, [sp, #0]
 8003a70:	4831      	ldr	r0, [pc, #196]	; (8003b38 <ist8310_init+0x7bc>)
    tx = reg & 0x7F;
 8003a72:	f884 e000 	strb.w	lr, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003a76:	f7fe faf5 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	462a      	mov	r2, r5
 8003a7e:	4621      	mov	r1, r4
 8003a80:	9600      	str	r6, [sp, #0]
 8003a82:	482d      	ldr	r0, [pc, #180]	; (8003b38 <ist8310_init+0x7bc>)
    tx = data;
 8003a84:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003a86:	f7fe faed 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	2140      	movs	r1, #64	; 0x40
 8003a8e:	4829      	ldr	r0, [pc, #164]	; (8003b34 <ist8310_init+0x7b8>)
 8003a90:	f7fd fff2 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 8003a94:	2002      	movs	r0, #2
 8003a96:	f7fd fab7 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003a9a:	463a      	mov	r2, r7
 8003a9c:	2140      	movs	r1, #64	; 0x40
 8003a9e:	4825      	ldr	r0, [pc, #148]	; (8003b34 <ist8310_init+0x7b8>)
 8003aa0:	f7fd ffea 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	462a      	mov	r2, r5
 8003aa8:	4621      	mov	r1, r4
 8003aaa:	9600      	str	r6, [sp, #0]
 8003aac:	4822      	ldr	r0, [pc, #136]	; (8003b38 <ist8310_init+0x7bc>)
    tx = reg & 0x7F;
 8003aae:	f884 a000 	strb.w	sl, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003ab2:	f7fe fad7 	bl	8002064 <HAL_SPI_TransmitReceive>
    tx = data;
 8003ab6:	f06f 0c7e 	mvn.w	ip, #126	; 0x7e
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003aba:	2301      	movs	r3, #1
 8003abc:	462a      	mov	r2, r5
 8003abe:	4621      	mov	r1, r4
 8003ac0:	9600      	str	r6, [sp, #0]
 8003ac2:	481d      	ldr	r0, [pc, #116]	; (8003b38 <ist8310_init+0x7bc>)
    tx = data;
 8003ac4:	f884 c000 	strb.w	ip, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003ac8:	f7fe facc 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003acc:	2201      	movs	r2, #1
 8003ace:	2140      	movs	r1, #64	; 0x40
 8003ad0:	4818      	ldr	r0, [pc, #96]	; (8003b34 <ist8310_init+0x7b8>)
 8003ad2:	f7fd ffd1 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(10);
 8003ad6:	4658      	mov	r0, fp
 8003ad8:	f7fd fa96 	bl	8001008 <HAL_Delay>
    if (ist_reg_read_by_mpu(IST8310_R_CONFB) != 0x00)
 8003adc:	200b      	movs	r0, #11
 8003ade:	f7ff fb0d 	bl	80030fc <ist_reg_read_by_mpu>
 8003ae2:	4680      	mov	r8, r0
 8003ae4:	b9a0      	cbnz	r0, 8003b10 <ist8310_init+0x794>
    MPU_DELAY(10);
 8003ae6:	4658      	mov	r0, fp
 8003ae8:	f7fd fa8e 	bl	8001008 <HAL_Delay>
    ist_reg_write_by_mpu(IST8310_AVGCNTL, 0x24); //100100
 8003aec:	2124      	movs	r1, #36	; 0x24
 8003aee:	2041      	movs	r0, #65	; 0x41
 8003af0:	f7ff fba4 	bl	800323c <ist_reg_write_by_mpu>
    if (ist_reg_read_by_mpu(IST8310_AVGCNTL) != 0x24)
 8003af4:	2041      	movs	r0, #65	; 0x41
 8003af6:	f7ff fb01 	bl	80030fc <ist_reg_read_by_mpu>
 8003afa:	2824      	cmp	r0, #36	; 0x24
 8003afc:	d00b      	beq.n	8003b16 <ist8310_init+0x79a>
        return 4;
 8003afe:	f04f 0804 	mov.w	r8, #4
 8003b02:	e5cc      	b.n	800369e <ist8310_init+0x322>
        return 2;
 8003b04:	f04f 0802 	mov.w	r8, #2
}
 8003b08:	4640      	mov	r0, r8
 8003b0a:	b003      	add	sp, #12
 8003b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 3;
 8003b10:	f04f 0803 	mov.w	r8, #3
 8003b14:	e5c3      	b.n	800369e <ist8310_init+0x322>
    MPU_DELAY(10);
 8003b16:	4658      	mov	r0, fp
 8003b18:	f7fd fa76 	bl	8001008 <HAL_Delay>
    ist_reg_write_by_mpu(IST8310_PDCNTL, 0xc0);
 8003b1c:	21c0      	movs	r1, #192	; 0xc0
 8003b1e:	2042      	movs	r0, #66	; 0x42
 8003b20:	f7ff fb8c 	bl	800323c <ist_reg_write_by_mpu>
    if (ist_reg_read_by_mpu(IST8310_PDCNTL) != 0xc0)
 8003b24:	2042      	movs	r0, #66	; 0x42
 8003b26:	f7ff fae9 	bl	80030fc <ist_reg_read_by_mpu>
 8003b2a:	28c0      	cmp	r0, #192	; 0xc0
 8003b2c:	d006      	beq.n	8003b3c <ist8310_init+0x7c0>
        return 5;
 8003b2e:	f04f 0805 	mov.w	r8, #5
 8003b32:	e5b4      	b.n	800369e <ist8310_init+0x322>
 8003b34:	40021400 	.word	0x40021400
 8003b38:	200005b8 	.word	0x200005b8
    MPU_DELAY(10);
 8003b3c:	4658      	mov	r0, fp
 8003b3e:	f7fd fa63 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003b42:	4642      	mov	r2, r8
 8003b44:	2140      	movs	r1, #64	; 0x40
 8003b46:	48b3      	ldr	r0, [pc, #716]	; (8003e14 <ist8310_init+0xa98>)
 8003b48:	f7fd ff96 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003b4c:	462a      	mov	r2, r5
 8003b4e:	4621      	mov	r1, r4
 8003b50:	9600      	str	r6, [sp, #0]
 8003b52:	2301      	movs	r3, #1
 8003b54:	48b0      	ldr	r0, [pc, #704]	; (8003e18 <ist8310_init+0xa9c>)
    tx = reg & 0x7F;
 8003b56:	f884 a000 	strb.w	sl, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003b5a:	f7fe fa83 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003b5e:	2301      	movs	r3, #1
 8003b60:	462a      	mov	r2, r5
 8003b62:	4621      	mov	r1, r4
 8003b64:	9600      	str	r6, [sp, #0]
 8003b66:	48ac      	ldr	r0, [pc, #688]	; (8003e18 <ist8310_init+0xa9c>)
    tx = data;
 8003b68:	f884 8000 	strb.w	r8, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003b6c:	f7fe fa7a 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003b70:	2201      	movs	r2, #1
 8003b72:	2140      	movs	r1, #64	; 0x40
 8003b74:	48a7      	ldr	r0, [pc, #668]	; (8003e14 <ist8310_init+0xa98>)
 8003b76:	f7fd ff7f 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(10);
 8003b7a:	4658      	mov	r0, fp
 8003b7c:	f7fd fa44 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003b80:	4642      	mov	r2, r8
 8003b82:	2140      	movs	r1, #64	; 0x40
 8003b84:	48a3      	ldr	r0, [pc, #652]	; (8003e14 <ist8310_init+0xa98>)
 8003b86:	f7fd ff77 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003b8a:	462a      	mov	r2, r5
 8003b8c:	4621      	mov	r1, r4
 8003b8e:	9600      	str	r6, [sp, #0]
 8003b90:	2301      	movs	r3, #1
 8003b92:	48a1      	ldr	r0, [pc, #644]	; (8003e18 <ist8310_init+0xa9c>)
    tx = reg & 0x7F;
 8003b94:	f884 9000 	strb.w	r9, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003b98:	f7fe fa64 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	462a      	mov	r2, r5
 8003ba0:	4621      	mov	r1, r4
 8003ba2:	9600      	str	r6, [sp, #0]
 8003ba4:	489c      	ldr	r0, [pc, #624]	; (8003e18 <ist8310_init+0xa9c>)
    tx = data;
 8003ba6:	f884 8000 	strb.w	r8, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003baa:	f7fe fa5b 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003bae:	2201      	movs	r2, #1
 8003bb0:	2140      	movs	r1, #64	; 0x40
 8003bb2:	4898      	ldr	r0, [pc, #608]	; (8003e14 <ist8310_init+0xa98>)
 8003bb4:	f7fd ff60 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(10);
 8003bb8:	4658      	mov	r0, fp
 8003bba:	f7fd fa25 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003bbe:	4642      	mov	r2, r8
 8003bc0:	2140      	movs	r1, #64	; 0x40
 8003bc2:	4894      	ldr	r0, [pc, #592]	; (8003e14 <ist8310_init+0xa98>)
 8003bc4:	f7fd ff58 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 8003bc8:	f04f 0728 	mov.w	r7, #40	; 0x28
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003bcc:	462a      	mov	r2, r5
 8003bce:	4621      	mov	r1, r4
 8003bd0:	9600      	str	r6, [sp, #0]
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	4890      	ldr	r0, [pc, #576]	; (8003e18 <ist8310_init+0xa9c>)
    tx = reg & 0x7F;
 8003bd6:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003bd8:	f7fe fa44 	bl	8002064 <HAL_SPI_TransmitReceive>
    tx = data;
 8003bdc:	f04f 070e 	mov.w	r7, #14
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003be0:	2301      	movs	r3, #1
 8003be2:	462a      	mov	r2, r5
 8003be4:	4621      	mov	r1, r4
 8003be6:	9600      	str	r6, [sp, #0]
 8003be8:	488b      	ldr	r0, [pc, #556]	; (8003e18 <ist8310_init+0xa9c>)
    tx = data;
 8003bea:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003bec:	f7fe fa3a 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	2140      	movs	r1, #64	; 0x40
 8003bf4:	4887      	ldr	r0, [pc, #540]	; (8003e14 <ist8310_init+0xa98>)
 8003bf6:	f7fd ff3f 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 8003bfa:	2002      	movs	r0, #2
 8003bfc:	f7fd fa04 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003c00:	4642      	mov	r2, r8
 8003c02:	2140      	movs	r1, #64	; 0x40
 8003c04:	4883      	ldr	r0, [pc, #524]	; (8003e14 <ist8310_init+0xa98>)
 8003c06:	f7fd ff37 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 8003c0a:	f04f 0729 	mov.w	r7, #41	; 0x29
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003c0e:	462a      	mov	r2, r5
 8003c10:	4621      	mov	r1, r4
 8003c12:	9600      	str	r6, [sp, #0]
 8003c14:	2301      	movs	r3, #1
 8003c16:	4880      	ldr	r0, [pc, #512]	; (8003e18 <ist8310_init+0xa9c>)
    tx = reg & 0x7F;
 8003c18:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003c1a:	f7fe fa23 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003c1e:	2301      	movs	r3, #1
 8003c20:	462a      	mov	r2, r5
 8003c22:	4621      	mov	r1, r4
 8003c24:	9600      	str	r6, [sp, #0]
 8003c26:	487c      	ldr	r0, [pc, #496]	; (8003e18 <ist8310_init+0xa9c>)
    tx = data;
 8003c28:	f884 b000 	strb.w	fp, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003c2c:	f7fe fa1a 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003c30:	2201      	movs	r2, #1
 8003c32:	2140      	movs	r1, #64	; 0x40
 8003c34:	4877      	ldr	r0, [pc, #476]	; (8003e14 <ist8310_init+0xa98>)
 8003c36:	f7fd ff1f 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 8003c3a:	2002      	movs	r0, #2
 8003c3c:	f7fd f9e4 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003c40:	4642      	mov	r2, r8
 8003c42:	2140      	movs	r1, #64	; 0x40
 8003c44:	4873      	ldr	r0, [pc, #460]	; (8003e14 <ist8310_init+0xa98>)
 8003c46:	f7fd ff17 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 8003c4a:	f04f 0764 	mov.w	r7, #100	; 0x64
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003c4e:	462a      	mov	r2, r5
 8003c50:	4621      	mov	r1, r4
 8003c52:	9600      	str	r6, [sp, #0]
 8003c54:	2301      	movs	r3, #1
 8003c56:	4870      	ldr	r0, [pc, #448]	; (8003e18 <ist8310_init+0xa9c>)
    tx = reg & 0x7F;
 8003c58:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003c5a:	f7fe fa03 	bl	8002064 <HAL_SPI_TransmitReceive>
    tx = data;
 8003c5e:	f04f 0701 	mov.w	r7, #1
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003c62:	2301      	movs	r3, #1
 8003c64:	462a      	mov	r2, r5
 8003c66:	4621      	mov	r1, r4
 8003c68:	9600      	str	r6, [sp, #0]
 8003c6a:	486b      	ldr	r0, [pc, #428]	; (8003e18 <ist8310_init+0xa9c>)
    tx = data;
 8003c6c:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003c6e:	f7fe f9f9 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003c72:	2201      	movs	r2, #1
 8003c74:	2140      	movs	r1, #64	; 0x40
 8003c76:	4867      	ldr	r0, [pc, #412]	; (8003e14 <ist8310_init+0xa98>)
 8003c78:	f7fd fefe 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 8003c7c:	2002      	movs	r0, #2
 8003c7e:	f7fd f9c3 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003c82:	4642      	mov	r2, r8
 8003c84:	2140      	movs	r1, #64	; 0x40
 8003c86:	4863      	ldr	r0, [pc, #396]	; (8003e14 <ist8310_init+0xa98>)
 8003c88:	f7fd fef6 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 8003c8c:	f04f 0c25 	mov.w	ip, #37	; 0x25
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003c90:	462a      	mov	r2, r5
 8003c92:	4621      	mov	r1, r4
 8003c94:	9600      	str	r6, [sp, #0]
 8003c96:	2301      	movs	r3, #1
 8003c98:	485f      	ldr	r0, [pc, #380]	; (8003e18 <ist8310_init+0xa9c>)
    tx = reg & 0x7F;
 8003c9a:	f884 c000 	strb.w	ip, [r4]
    tx = data;
 8003c9e:	f06f 0771 	mvn.w	r7, #113	; 0x71
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003ca2:	f7fe f9df 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	462a      	mov	r2, r5
 8003caa:	4621      	mov	r1, r4
 8003cac:	9600      	str	r6, [sp, #0]
 8003cae:	485a      	ldr	r0, [pc, #360]	; (8003e18 <ist8310_init+0xa9c>)
    tx = data;
 8003cb0:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003cb2:	f7fe f9d7 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	2140      	movs	r1, #64	; 0x40
 8003cba:	4856      	ldr	r0, [pc, #344]	; (8003e14 <ist8310_init+0xa98>)
 8003cbc:	f7fd fedc 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 8003cc0:	2002      	movs	r0, #2
 8003cc2:	f7fd f9a1 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003cc6:	4642      	mov	r2, r8
 8003cc8:	2140      	movs	r1, #64	; 0x40
 8003cca:	4852      	ldr	r0, [pc, #328]	; (8003e14 <ist8310_init+0xa98>)
 8003ccc:	f7fd fed4 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 8003cd0:	f04f 0c26 	mov.w	ip, #38	; 0x26
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003cd4:	462a      	mov	r2, r5
 8003cd6:	4621      	mov	r1, r4
 8003cd8:	9600      	str	r6, [sp, #0]
 8003cda:	2301      	movs	r3, #1
 8003cdc:	484e      	ldr	r0, [pc, #312]	; (8003e18 <ist8310_init+0xa9c>)
    tx = reg & 0x7F;
 8003cde:	f884 c000 	strb.w	ip, [r4]
    tx = data;
 8003ce2:	f04f 0b03 	mov.w	fp, #3
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003ce6:	f7fe f9bd 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003cea:	2301      	movs	r3, #1
 8003cec:	462a      	mov	r2, r5
 8003cee:	4621      	mov	r1, r4
 8003cf0:	9600      	str	r6, [sp, #0]
 8003cf2:	4849      	ldr	r0, [pc, #292]	; (8003e18 <ist8310_init+0xa9c>)
    tx = data;
 8003cf4:	f884 b000 	strb.w	fp, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003cf8:	f7fe f9b4 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	2140      	movs	r1, #64	; 0x40
 8003d00:	4844      	ldr	r0, [pc, #272]	; (8003e14 <ist8310_init+0xa98>)
 8003d02:	f7fd feb9 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 8003d06:	2002      	movs	r0, #2
 8003d08:	f7fd f97e 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003d0c:	4642      	mov	r2, r8
 8003d0e:	2140      	movs	r1, #64	; 0x40
 8003d10:	4840      	ldr	r0, [pc, #256]	; (8003e14 <ist8310_init+0xa98>)
 8003d12:	f7fd feb1 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003d16:	462a      	mov	r2, r5
 8003d18:	4621      	mov	r1, r4
 8003d1a:	9600      	str	r6, [sp, #0]
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	483e      	ldr	r0, [pc, #248]	; (8003e18 <ist8310_init+0xa9c>)
    tx = reg & 0x7F;
 8003d20:	f884 9000 	strb.w	r9, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003d24:	f7fe f99e 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003d28:	2301      	movs	r3, #1
 8003d2a:	462a      	mov	r2, r5
 8003d2c:	4621      	mov	r1, r4
 8003d2e:	9600      	str	r6, [sp, #0]
 8003d30:	4839      	ldr	r0, [pc, #228]	; (8003e18 <ist8310_init+0xa9c>)
    tx = data;
 8003d32:	f884 b000 	strb.w	fp, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003d36:	f7fe f995 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	2140      	movs	r1, #64	; 0x40
 8003d3e:	4835      	ldr	r0, [pc, #212]	; (8003e14 <ist8310_init+0xa98>)
 8003d40:	f7fd fe9a 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 8003d44:	2002      	movs	r0, #2
 8003d46:	f7fd f95f 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003d4a:	4642      	mov	r2, r8
 8003d4c:	2140      	movs	r1, #64	; 0x40
 8003d4e:	4831      	ldr	r0, [pc, #196]	; (8003e14 <ist8310_init+0xa98>)
 8003d50:	f7fd fe92 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 8003d54:	f04f 0c67 	mov.w	ip, #103	; 0x67
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003d58:	462a      	mov	r2, r5
 8003d5a:	4621      	mov	r1, r4
 8003d5c:	9600      	str	r6, [sp, #0]
 8003d5e:	2301      	movs	r3, #1
 8003d60:	482d      	ldr	r0, [pc, #180]	; (8003e18 <ist8310_init+0xa9c>)
    tx = reg & 0x7F;
 8003d62:	f884 c000 	strb.w	ip, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003d66:	f7fe f97d 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	462a      	mov	r2, r5
 8003d6e:	4621      	mov	r1, r4
 8003d70:	9600      	str	r6, [sp, #0]
 8003d72:	4829      	ldr	r0, [pc, #164]	; (8003e18 <ist8310_init+0xa9c>)
    tx = data;
 8003d74:	f884 b000 	strb.w	fp, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003d78:	f7fe f974 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	2140      	movs	r1, #64	; 0x40
 8003d80:	4824      	ldr	r0, [pc, #144]	; (8003e14 <ist8310_init+0xa98>)
 8003d82:	f7fd fe79 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 8003d86:	2002      	movs	r0, #2
 8003d88:	f7fd f93e 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003d8c:	4642      	mov	r2, r8
 8003d8e:	2140      	movs	r1, #64	; 0x40
 8003d90:	4820      	ldr	r0, [pc, #128]	; (8003e14 <ist8310_init+0xa98>)
 8003d92:	f7fd fe71 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003d96:	462a      	mov	r2, r5
 8003d98:	4621      	mov	r1, r4
 8003d9a:	9600      	str	r6, [sp, #0]
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	481e      	ldr	r0, [pc, #120]	; (8003e18 <ist8310_init+0xa9c>)
    tx = reg & 0x7F;
 8003da0:	f884 a000 	strb.w	sl, [r4]
    tx = data;
 8003da4:	f06f 077e 	mvn.w	r7, #126	; 0x7e
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003da8:	f7fe f95c 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003dac:	2301      	movs	r3, #1
 8003dae:	462a      	mov	r2, r5
 8003db0:	4621      	mov	r1, r4
 8003db2:	9600      	str	r6, [sp, #0]
 8003db4:	4818      	ldr	r0, [pc, #96]	; (8003e18 <ist8310_init+0xa9c>)
    tx = data;
 8003db6:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003db8:	f7fe f954 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	2140      	movs	r1, #64	; 0x40
 8003dc0:	4814      	ldr	r0, [pc, #80]	; (8003e14 <ist8310_init+0xa98>)
 8003dc2:	f7fd fe59 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(6); 
 8003dc6:	2006      	movs	r0, #6
 8003dc8:	f7fd f91e 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003dcc:	4642      	mov	r2, r8
 8003dce:	2140      	movs	r1, #64	; 0x40
 8003dd0:	4810      	ldr	r0, [pc, #64]	; (8003e14 <ist8310_init+0xa98>)
 8003dd2:	f7fd fe51 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003dd6:	462a      	mov	r2, r5
 8003dd8:	4621      	mov	r1, r4
 8003dda:	9600      	str	r6, [sp, #0]
    tx = reg & 0x7F;
 8003ddc:	2527      	movs	r5, #39	; 0x27
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003dde:	2301      	movs	r3, #1
 8003de0:	480d      	ldr	r0, [pc, #52]	; (8003e18 <ist8310_init+0xa9c>)
    tx = reg & 0x7F;
 8003de2:	7025      	strb	r5, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003de4:	f7fe f93e 	bl	8002064 <HAL_SPI_TransmitReceive>
    tx = data;
 8003de8:	2586      	movs	r5, #134	; 0x86
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003dea:	2301      	movs	r3, #1
 8003dec:	4621      	mov	r1, r4
 8003dee:	9600      	str	r6, [sp, #0]
 8003df0:	4a0a      	ldr	r2, [pc, #40]	; (8003e1c <ist8310_init+0xaa0>)
 8003df2:	4809      	ldr	r0, [pc, #36]	; (8003e18 <ist8310_init+0xa9c>)
    tx = data;
 8003df4:	7025      	strb	r5, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003df6:	f7fe f935 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	2140      	movs	r1, #64	; 0x40
 8003dfe:	4805      	ldr	r0, [pc, #20]	; (8003e14 <ist8310_init+0xa98>)
 8003e00:	f7fd fe3a 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 8003e04:	2002      	movs	r0, #2
 8003e06:	f7fd f8ff 	bl	8001008 <HAL_Delay>
    MPU_DELAY(100);
 8003e0a:	2064      	movs	r0, #100	; 0x64
 8003e0c:	f7fd f8fc 	bl	8001008 <HAL_Delay>
 8003e10:	e445      	b.n	800369e <ist8310_init+0x322>
 8003e12:	bf00      	nop
 8003e14:	40021400 	.word	0x40021400
 8003e18:	200005b8 	.word	0x200005b8
 8003e1c:	20000274 	.word	0x20000274

08003e20 <mpu_get_data>:
  * @param  
	* @retval 
  * @usage  call in main() function
	*/
void mpu_get_data()
{
 8003e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MPU_NSS_LOW;
 8003e24:	4e5b      	ldr	r6, [pc, #364]	; (8003f94 <mpu_get_data+0x174>)
    tx         = regAddr | 0x80;
 8003e26:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8003fb4 <mpu_get_data+0x194>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003e2a:	4f5b      	ldr	r7, [pc, #364]	; (8003f98 <mpu_get_data+0x178>)
    tx_buff[0] = tx;
 8003e2c:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8003fb8 <mpu_get_data+0x198>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003e30:	f8df b188 	ldr.w	fp, [pc, #392]	; 8003fbc <mpu_get_data+0x19c>
    HAL_SPI_TransmitReceive(&MPU_HSPI, tx_buff, pData, len, 55);
 8003e34:	4d59      	ldr	r5, [pc, #356]	; (8003f9c <mpu_get_data+0x17c>)
    mpu_read_bytes(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);

    mpu_data.ax   = mpu_buff[0] << 8 | mpu_buff[1];
 8003e36:	4c5a      	ldr	r4, [pc, #360]	; (8003fa0 <mpu_get_data+0x180>)
{
 8003e38:	b083      	sub	sp, #12
    MPU_NSS_LOW;
 8003e3a:	4630      	mov	r0, r6
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	2140      	movs	r1, #64	; 0x40
 8003e40:	f7fd fe1a 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003e44:	f04f 0937 	mov.w	r9, #55	; 0x37
    tx         = regAddr | 0x80;
 8003e48:	23bb      	movs	r3, #187	; 0xbb
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003e4a:	4651      	mov	r1, sl
 8003e4c:	465a      	mov	r2, fp
    tx         = regAddr | 0x80;
 8003e4e:	f88a 3000 	strb.w	r3, [sl]
    tx_buff[0] = tx;
 8003e52:	f888 3000 	strb.w	r3, [r8]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003e56:	4638      	mov	r0, r7
 8003e58:	f8cd 9000 	str.w	r9, [sp]
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	f7fe f901 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, tx_buff, pData, len, 55);
 8003e62:	4641      	mov	r1, r8
 8003e64:	462a      	mov	r2, r5
 8003e66:	230e      	movs	r3, #14
 8003e68:	f8cd 9000 	str.w	r9, [sp]
 8003e6c:	4638      	mov	r0, r7
 8003e6e:	f7fe f8f9 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003e72:	4630      	mov	r0, r6
 8003e74:	2201      	movs	r2, #1
 8003e76:	2140      	movs	r1, #64	; 0x40
 8003e78:	f7fd fdfe 	bl	8001a78 <HAL_GPIO_WritePin>
    mpu_data.ay   = mpu_buff[2] << 8 | mpu_buff[3];
    mpu_data.az   = mpu_buff[4] << 8 | mpu_buff[5];
    mpu_data.temp = mpu_buff[6] << 8 | mpu_buff[7];

    mpu_data.gx = ((mpu_buff[8]  << 8 | mpu_buff[9])  - mpu_data.gx_offset);
 8003e7c:	7a28      	ldrb	r0, [r5, #8]
 8003e7e:	7a69      	ldrb	r1, [r5, #9]
    mpu_data.gy = ((mpu_buff[10] << 8 | mpu_buff[11]) - mpu_data.gy_offset);
    mpu_data.gz = ((mpu_buff[12] << 8 | mpu_buff[13]) - mpu_data.gz_offset);
 8003e80:	f895 c00c 	ldrb.w	ip, [r5, #12]
 8003e84:	7b6b      	ldrb	r3, [r5, #13]
    mpu_data.gy = ((mpu_buff[10] << 8 | mpu_buff[11]) - mpu_data.gy_offset);
 8003e86:	f895 e00a 	ldrb.w	lr, [r5, #10]
 8003e8a:	7aea      	ldrb	r2, [r5, #11]
    mpu_data.gx = ((mpu_buff[8]  << 8 | mpu_buff[9])  - mpu_data.gx_offset);
 8003e8c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8003e90:	8b60      	ldrh	r0, [r4, #26]
    mpu_data.gz = ((mpu_buff[12] << 8 | mpu_buff[13]) - mpu_data.gz_offset);
 8003e92:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    mpu_data.gx = ((mpu_buff[8]  << 8 | mpu_buff[9])  - mpu_data.gx_offset);
 8003e96:	1a09      	subs	r1, r1, r0
    mpu_data.ax   = mpu_buff[0] << 8 | mpu_buff[1];
 8003e98:	f895 c000 	ldrb.w	ip, [r5]
 8003e9c:	7868      	ldrb	r0, [r5, #1]
    mpu_data.gx = ((mpu_buff[8]  << 8 | mpu_buff[9])  - mpu_data.gx_offset);
 8003e9e:	81e1      	strh	r1, [r4, #14]
    mpu_data.ax   = mpu_buff[0] << 8 | mpu_buff[1];
 8003ea0:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    mpu_data.ay   = mpu_buff[2] << 8 | mpu_buff[3];
 8003ea4:	78e9      	ldrb	r1, [r5, #3]
 8003ea6:	f895 c002 	ldrb.w	ip, [r5, #2]
    mpu_data.ax   = mpu_buff[0] << 8 | mpu_buff[1];
 8003eaa:	8020      	strh	r0, [r4, #0]
    mpu_data.ay   = mpu_buff[2] << 8 | mpu_buff[3];
 8003eac:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
    mpu_data.az   = mpu_buff[4] << 8 | mpu_buff[5];
 8003eb0:	7968      	ldrb	r0, [r5, #5]
 8003eb2:	f895 c004 	ldrb.w	ip, [r5, #4]
    mpu_data.ay   = mpu_buff[2] << 8 | mpu_buff[3];
 8003eb6:	8061      	strh	r1, [r4, #2]
    mpu_data.az   = mpu_buff[4] << 8 | mpu_buff[5];
 8003eb8:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    mpu_data.temp = mpu_buff[6] << 8 | mpu_buff[7];
 8003ebc:	79e9      	ldrb	r1, [r5, #7]
 8003ebe:	f895 c006 	ldrb.w	ip, [r5, #6]
    mpu_data.gy = ((mpu_buff[10] << 8 | mpu_buff[11]) - mpu_data.gy_offset);
 8003ec2:	8ba5      	ldrh	r5, [r4, #28]
    mpu_data.az   = mpu_buff[4] << 8 | mpu_buff[5];
 8003ec4:	80a0      	strh	r0, [r4, #4]
    mpu_data.gy = ((mpu_buff[10] << 8 | mpu_buff[11]) - mpu_data.gy_offset);
 8003ec6:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
    mpu_data.gz = ((mpu_buff[12] << 8 | mpu_buff[13]) - mpu_data.gz_offset);
 8003eca:	8be0      	ldrh	r0, [r4, #30]
    mpu_data.temp = mpu_buff[6] << 8 | mpu_buff[7];
 8003ecc:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
    mpu_data.gy = ((mpu_buff[10] << 8 | mpu_buff[11]) - mpu_data.gy_offset);
 8003ed0:	1b55      	subs	r5, r2, r5
    mpu_data.gz = ((mpu_buff[12] << 8 | mpu_buff[13]) - mpu_data.gz_offset);
 8003ed2:	1a1b      	subs	r3, r3, r0
    mpu_data.temp = mpu_buff[6] << 8 | mpu_buff[7];
 8003ed4:	81a1      	strh	r1, [r4, #12]
    MPU_NSS_LOW;
 8003ed6:	4630      	mov	r0, r6
    mpu_data.gy = ((mpu_buff[10] << 8 | mpu_buff[11]) - mpu_data.gy_offset);
 8003ed8:	8225      	strh	r5, [r4, #16]
    MPU_NSS_LOW;
 8003eda:	2200      	movs	r2, #0
    HAL_SPI_TransmitReceive(&MPU_HSPI, tx_buff, pData, len, 55);
 8003edc:	4d31      	ldr	r5, [pc, #196]	; (8003fa4 <mpu_get_data+0x184>)
    mpu_data.gz = ((mpu_buff[12] << 8 | mpu_buff[13]) - mpu_data.gz_offset);
 8003ede:	8263      	strh	r3, [r4, #18]
    MPU_NSS_LOW;
 8003ee0:	2140      	movs	r1, #64	; 0x40
 8003ee2:	f7fd fdc9 	bl	8001a78 <HAL_GPIO_WritePin>
    tx         = regAddr | 0x80;
 8003ee6:	f04f 0cc9 	mov.w	ip, #201	; 0xc9
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003eea:	465a      	mov	r2, fp
 8003eec:	4651      	mov	r1, sl
 8003eee:	f8cd 9000 	str.w	r9, [sp]
 8003ef2:	4638      	mov	r0, r7
 8003ef4:	2301      	movs	r3, #1
    tx         = regAddr | 0x80;
 8003ef6:	f88a c000 	strb.w	ip, [sl]
    tx_buff[0] = tx;
 8003efa:	f888 c000 	strb.w	ip, [r8]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003efe:	f7fe f8b1 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, tx_buff, pData, len, 55);
 8003f02:	4641      	mov	r1, r8
 8003f04:	462a      	mov	r2, r5
 8003f06:	2306      	movs	r3, #6
 8003f08:	f8cd 9000 	str.w	r9, [sp]
 8003f0c:	4638      	mov	r0, r7
 8003f0e:	f7fe f8a9 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003f12:	4630      	mov	r0, r6
 8003f14:	2201      	movs	r2, #1
 8003f16:	2140      	movs	r1, #64	; 0x40
 8003f18:	f7fd fdae 	bl	8001a78 <HAL_GPIO_WritePin>
    ist8310_get_data(ist_buff);
    memcpy(&mpu_data.mx, ist_buff, 6);

    memcpy(&imu.ax, &mpu_data.ax, 6 * sizeof(int16_t));
	
    imu.temp = 21 + mpu_data.temp / 333.87f;
 8003f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    memcpy(&mpu_data.mx, ist_buff, 6);
 8003f20:	682a      	ldr	r2, [r5, #0]
 8003f22:	f8c4 2006 	str.w	r2, [r4, #6]
    imu.temp = 21 + mpu_data.temp / 333.87f;
 8003f26:	ee05 3a10 	vmov	s10, r3
	  /* 2000dps -> rad/s */
	  imu.wx   = mpu_data.gx / 16.384f / 57.3f; 
 8003f2a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    memcpy(&imu.ax, &mpu_data.ax, 6 * sizeof(int16_t));
 8003f2e:	6861      	ldr	r1, [r4, #4]
 8003f30:	6820      	ldr	r0, [r4, #0]
    imu.temp = 21 + mpu_data.temp / 333.87f;
 8003f32:	eddf 4a1d 	vldr	s9, [pc, #116]	; 8003fa8 <mpu_get_data+0x188>
	  imu.wx   = mpu_data.gx / 16.384f / 57.3f; 
 8003f36:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003fac <mpu_get_data+0x18c>
 8003f3a:	ee07 3a10 	vmov	s14, r3
    imu.wy   = mpu_data.gy / 16.384f / 57.3f; 
 8003f3e:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8003f42:	ee06 3a90 	vmov	s13, r3
    imu.wz   = mpu_data.gz / 16.384f / 57.3f;
 8003f46:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 8003f4a:	ee07 3a90 	vmov	s15, r3
    memcpy(&mpu_data.mx, ist_buff, 6);
 8003f4e:	88ab      	ldrh	r3, [r5, #4]
 8003f50:	8163      	strh	r3, [r4, #10]
    memcpy(&imu.ax, &mpu_data.ax, 6 * sizeof(int16_t));
 8003f52:	4b17      	ldr	r3, [pc, #92]	; (8003fb0 <mpu_get_data+0x190>)
 8003f54:	68a2      	ldr	r2, [r4, #8]
    imu.temp = 21 + mpu_data.temp / 333.87f;
 8003f56:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
    memcpy(&imu.ax, &mpu_data.ax, 6 * sizeof(int16_t));
 8003f5a:	461c      	mov	r4, r3
    imu.temp = 21 + mpu_data.temp / 333.87f;
 8003f5c:	eeb3 6a05 	vmov.f32	s12, #53	; 0x41a80000  21.0
    memcpy(&imu.ax, &mpu_data.ax, 6 * sizeof(int16_t));
 8003f60:	c407      	stmia	r4!, {r0, r1, r2}
    imu.temp = 21 + mpu_data.temp / 333.87f;
 8003f62:	eea5 6a24 	vfma.f32	s12, s10, s9
	  imu.wx   = mpu_data.gx / 16.384f / 57.3f; 
 8003f66:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    imu.wy   = mpu_data.gy / 16.384f / 57.3f; 
 8003f6a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    imu.wz   = mpu_data.gz / 16.384f / 57.3f;
 8003f6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	  imu.wx   = mpu_data.gx / 16.384f / 57.3f; 
 8003f72:	ee27 7a25 	vmul.f32	s14, s14, s11
    imu.wy   = mpu_data.gy / 16.384f / 57.3f; 
 8003f76:	ee66 6aa5 	vmul.f32	s13, s13, s11
    imu.wz   = mpu_data.gz / 16.384f / 57.3f;
 8003f7a:	ee67 7aa5 	vmul.f32	s15, s15, s11
    imu.wy   = mpu_data.gy / 16.384f / 57.3f; 
 8003f7e:	edc3 6a05 	vstr	s13, [r3, #20]
    imu.temp = 21 + mpu_data.temp / 333.87f;
 8003f82:	ed83 6a03 	vstr	s12, [r3, #12]
	  imu.wx   = mpu_data.gx / 16.384f / 57.3f; 
 8003f86:	ed83 7a04 	vstr	s14, [r3, #16]
    imu.wz   = mpu_data.gz / 16.384f / 57.3f;
 8003f8a:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8003f8e:	b003      	add	sp, #12
 8003f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f94:	40021400 	.word	0x40021400
 8003f98:	200005b8 	.word	0x200005b8
 8003f9c:	200002c4 	.word	0x200002c4
 8003fa0:	200002a4 	.word	0x200002a4
 8003fa4:	20000294 	.word	0x20000294
 8003fa8:	3b444abf 	.word	0x3b444abf
 8003fac:	3a8b9db5 	.word	0x3a8b9db5
 8003fb0:	20000228 	.word	0x20000228
 8003fb4:	20000275 	.word	0x20000275
 8003fb8:	2000000c 	.word	0x2000000c
 8003fbc:	20000274 	.word	0x20000274

08003fc0 <mpu_offset_call>:
  * @param  
	* @retval 
  * @usage  call in main() function
	*/
void mpu_offset_call(void)
{
 8003fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fc4:	b085      	sub	sp, #20
 8003fc6:	f44f 7696 	mov.w	r6, #300	; 0x12c
 8003fca:	4d4b      	ldr	r5, [pc, #300]	; (80040f8 <mpu_offset_call+0x138>)
 8003fcc:	4c4b      	ldr	r4, [pc, #300]	; (80040fc <mpu_offset_call+0x13c>)
    MPU_NSS_LOW;
 8003fce:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8004114 <mpu_offset_call+0x154>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003fd2:	4f4b      	ldr	r7, [pc, #300]	; (8004100 <mpu_offset_call+0x140>)
{
 8003fd4:	9603      	str	r6, [sp, #12]
    MPU_NSS_LOW;
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	2140      	movs	r1, #64	; 0x40
 8003fda:	4640      	mov	r0, r8
 8003fdc:	f7fd fd4c 	bl	8001a78 <HAL_GPIO_WritePin>
    tx_buff[0] = tx;
 8003fe0:	4e48      	ldr	r6, [pc, #288]	; (8004104 <mpu_offset_call+0x144>)
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003fe2:	4949      	ldr	r1, [pc, #292]	; (8004108 <mpu_offset_call+0x148>)
 8003fe4:	4a49      	ldr	r2, [pc, #292]	; (800410c <mpu_offset_call+0x14c>)
    tx         = regAddr | 0x80;
 8003fe6:	f04f 0cbb 	mov.w	ip, #187	; 0xbb
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003fea:	f04f 0937 	mov.w	r9, #55	; 0x37
 8003fee:	f8cd 9000 	str.w	r9, [sp]
 8003ff2:	2301      	movs	r3, #1
    tx         = regAddr | 0x80;
 8003ff4:	f881 c000 	strb.w	ip, [r1]
    tx_buff[0] = tx;
 8003ff8:	f886 c000 	strb.w	ip, [r6]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003ffc:	4638      	mov	r0, r7
 8003ffe:	f7fe f831 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, tx_buff, pData, len, 55);
 8004002:	230e      	movs	r3, #14
 8004004:	f8cd 9000 	str.w	r9, [sp]
 8004008:	4a3b      	ldr	r2, [pc, #236]	; (80040f8 <mpu_offset_call+0x138>)
 800400a:	4631      	mov	r1, r6
 800400c:	4638      	mov	r0, r7
 800400e:	f7fe f829 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8004012:	2201      	movs	r2, #1
 8004014:	2140      	movs	r1, #64	; 0x40
 8004016:	4640      	mov	r0, r8
 8004018:	f7fd fd2e 	bl	8001a78 <HAL_GPIO_WritePin>
	for (i=0; i<300;i++)
	{
		mpu_read_bytes(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);

		mpu_data.ax_offset += mpu_buff[0] << 8 | mpu_buff[1];
		mpu_data.ay_offset += mpu_buff[2] << 8 | mpu_buff[3];
 800401c:	f895 a002 	ldrb.w	sl, [r5, #2]
		mpu_data.az_offset += mpu_buff[4] << 8 | mpu_buff[5];
	
		mpu_data.gx_offset += mpu_buff[8]  << 8 | mpu_buff[9];
 8004020:	7a2b      	ldrb	r3, [r5, #8]
		mpu_data.ay_offset += mpu_buff[2] << 8 | mpu_buff[3];
 8004022:	f895 c003 	ldrb.w	ip, [r5, #3]
		mpu_data.gx_offset += mpu_buff[8]  << 8 | mpu_buff[9];
 8004026:	7a69      	ldrb	r1, [r5, #9]
		mpu_data.ax_offset += mpu_buff[0] << 8 | mpu_buff[1];
 8004028:	f895 9000 	ldrb.w	r9, [r5]
 800402c:	f895 e001 	ldrb.w	lr, [r5, #1]
		mpu_data.az_offset += mpu_buff[4] << 8 | mpu_buff[5];
 8004030:	792a      	ldrb	r2, [r5, #4]
 8004032:	7968      	ldrb	r0, [r5, #5]
		mpu_data.gy_offset += mpu_buff[10] << 8 | mpu_buff[11];
 8004034:	f895 b00a 	ldrb.w	fp, [r5, #10]
		mpu_data.ay_offset += mpu_buff[2] << 8 | mpu_buff[3];
 8004038:	ea4c 2c0a 	orr.w	ip, ip, sl, lsl #8
		mpu_data.gx_offset += mpu_buff[8]  << 8 | mpu_buff[9];
 800403c:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
		mpu_data.gz_offset += mpu_buff[12] << 8 | mpu_buff[13];
 8004040:	f895 a00c 	ldrb.w	sl, [r5, #12]
 8004044:	7b6b      	ldrb	r3, [r5, #13]
		mpu_data.ax_offset += mpu_buff[0] << 8 | mpu_buff[1];
 8004046:	ea4e 2e09 	orr.w	lr, lr, r9, lsl #8
		mpu_data.gz_offset += mpu_buff[12] << 8 | mpu_buff[13];
 800404a:	ea43 230a 	orr.w	r3, r3, sl, lsl #8
		mpu_data.ax_offset += mpu_buff[0] << 8 | mpu_buff[1];
 800404e:	f8b4 9014 	ldrh.w	r9, [r4, #20]
		mpu_data.ay_offset += mpu_buff[2] << 8 | mpu_buff[3];
 8004052:	f8b4 a016 	ldrh.w	sl, [r4, #22]
		mpu_data.ax_offset += mpu_buff[0] << 8 | mpu_buff[1];
 8004056:	44ce      	add	lr, r9
		mpu_data.ay_offset += mpu_buff[2] << 8 | mpu_buff[3];
 8004058:	44d4      	add	ip, sl
		mpu_data.az_offset += mpu_buff[4] << 8 | mpu_buff[5];
 800405a:	f8b4 9018 	ldrh.w	r9, [r4, #24]
		mpu_data.gx_offset += mpu_buff[8]  << 8 | mpu_buff[9];
 800405e:	f8b4 a01a 	ldrh.w	sl, [r4, #26]
		mpu_data.ax_offset += mpu_buff[0] << 8 | mpu_buff[1];
 8004062:	f8a4 e014 	strh.w	lr, [r4, #20]
		mpu_data.az_offset += mpu_buff[4] << 8 | mpu_buff[5];
 8004066:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
		mpu_data.gy_offset += mpu_buff[10] << 8 | mpu_buff[11];
 800406a:	7aea      	ldrb	r2, [r5, #11]
 800406c:	f8b4 e01c 	ldrh.w	lr, [r4, #28]
		mpu_data.ay_offset += mpu_buff[2] << 8 | mpu_buff[3];
 8004070:	f8a4 c016 	strh.w	ip, [r4, #22]
		mpu_data.gz_offset += mpu_buff[12] << 8 | mpu_buff[13];
 8004074:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		mpu_data.az_offset += mpu_buff[4] << 8 | mpu_buff[5];
 8004078:	4448      	add	r0, r9
		mpu_data.gy_offset += mpu_buff[10] << 8 | mpu_buff[11];
 800407a:	ea42 220b 	orr.w	r2, r2, fp, lsl #8
		mpu_data.gz_offset += mpu_buff[12] << 8 | mpu_buff[13];
 800407e:	4463      	add	r3, ip
		mpu_data.az_offset += mpu_buff[4] << 8 | mpu_buff[5];
 8004080:	8320      	strh	r0, [r4, #24]
		mpu_data.gx_offset += mpu_buff[8]  << 8 | mpu_buff[9];
 8004082:	4451      	add	r1, sl
		mpu_data.gy_offset += mpu_buff[10] << 8 | mpu_buff[11];
 8004084:	4472      	add	r2, lr

		MPU_DELAY(5);
 8004086:	2005      	movs	r0, #5
		mpu_data.gz_offset += mpu_buff[12] << 8 | mpu_buff[13];
 8004088:	83e3      	strh	r3, [r4, #30]
		mpu_data.gx_offset += mpu_buff[8]  << 8 | mpu_buff[9];
 800408a:	8361      	strh	r1, [r4, #26]
		mpu_data.gy_offset += mpu_buff[10] << 8 | mpu_buff[11];
 800408c:	83a2      	strh	r2, [r4, #28]
		MPU_DELAY(5);
 800408e:	f7fc ffbb 	bl	8001008 <HAL_Delay>
	for (i=0; i<300;i++)
 8004092:	9b03      	ldr	r3, [sp, #12]
 8004094:	3b01      	subs	r3, #1
 8004096:	9303      	str	r3, [sp, #12]
 8004098:	d19d      	bne.n	8003fd6 <mpu_offset_call+0x16>
	}
	mpu_data.ax_offset=mpu_data.ax_offset / 300;
 800409a:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
	mpu_data.ay_offset=mpu_data.ay_offset / 300;
 800409e:	f9b4 5016 	ldrsh.w	r5, [r4, #22]
	mpu_data.az_offset=mpu_data.az_offset / 300;
 80040a2:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
	mpu_data.gx_offset=mpu_data.gx_offset / 300;
 80040a6:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
	mpu_data.gy_offset=mpu_data.gx_offset / 300;
	mpu_data.gz_offset=mpu_data.gz_offset / 300;
 80040aa:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 80040ae:	461e      	mov	r6, r3
	mpu_data.ax_offset=mpu_data.ax_offset / 300;
 80040b0:	4b17      	ldr	r3, [pc, #92]	; (8004110 <mpu_offset_call+0x150>)
	mpu_data.gy_offset=mpu_data.gx_offset / 300;
 80040b2:	83a6      	strh	r6, [r4, #28]
	mpu_data.ax_offset=mpu_data.ax_offset / 300;
 80040b4:	fb83 6c07 	smull	r6, ip, r3, r7
 80040b8:	17fe      	asrs	r6, r7, #31
 80040ba:	ebc6 166c 	rsb	r6, r6, ip, asr #5
 80040be:	82a6      	strh	r6, [r4, #20]
	mpu_data.ay_offset=mpu_data.ay_offset / 300;
 80040c0:	fb83 7605 	smull	r7, r6, r3, r5
 80040c4:	17ed      	asrs	r5, r5, #31
 80040c6:	ebc5 1566 	rsb	r5, r5, r6, asr #5
 80040ca:	82e5      	strh	r5, [r4, #22]
	mpu_data.az_offset=mpu_data.az_offset / 300;
 80040cc:	fb83 6500 	smull	r6, r5, r3, r0
 80040d0:	17c0      	asrs	r0, r0, #31
 80040d2:	ebc0 1065 	rsb	r0, r0, r5, asr #5
	mpu_data.gx_offset=mpu_data.gx_offset / 300;
 80040d6:	fb83 6501 	smull	r6, r5, r3, r1
	mpu_data.gz_offset=mpu_data.gz_offset / 300;
 80040da:	fb83 6302 	smull	r6, r3, r3, r2
	mpu_data.gx_offset=mpu_data.gx_offset / 300;
 80040de:	17c9      	asrs	r1, r1, #31
	mpu_data.gz_offset=mpu_data.gz_offset / 300;
 80040e0:	17d2      	asrs	r2, r2, #31
	mpu_data.gx_offset=mpu_data.gx_offset / 300;
 80040e2:	ebc1 1165 	rsb	r1, r1, r5, asr #5
	mpu_data.gz_offset=mpu_data.gz_offset / 300;
 80040e6:	ebc2 1363 	rsb	r3, r2, r3, asr #5
	mpu_data.az_offset=mpu_data.az_offset / 300;
 80040ea:	8320      	strh	r0, [r4, #24]
	mpu_data.gx_offset=mpu_data.gx_offset / 300;
 80040ec:	8361      	strh	r1, [r4, #26]
	mpu_data.gz_offset=mpu_data.gz_offset / 300;
 80040ee:	83e3      	strh	r3, [r4, #30]
}
 80040f0:	b005      	add	sp, #20
 80040f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040f6:	bf00      	nop
 80040f8:	200002c4 	.word	0x200002c4
 80040fc:	200002a4 	.word	0x200002a4
 8004100:	200005b8 	.word	0x200005b8
 8004104:	2000000c 	.word	0x2000000c
 8004108:	20000275 	.word	0x20000275
 800410c:	20000274 	.word	0x20000274
 8004110:	1b4e81b5 	.word	0x1b4e81b5
 8004114:	40021400 	.word	0x40021400

08004118 <mpu_device_init>:
{
 8004118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MPU_NSS_LOW;
 800411c:	f8df a168 	ldr.w	sl, [pc, #360]	; 8004288 <mpu_device_init+0x170>
    tx = reg | 0x80;
 8004120:	4e52      	ldr	r6, [pc, #328]	; (800426c <mpu_device_init+0x154>)
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8004122:	4f53      	ldr	r7, [pc, #332]	; (8004270 <mpu_device_init+0x158>)
{
 8004124:	b08b      	sub	sp, #44	; 0x2c
	MPU_DELAY(100);
 8004126:	2064      	movs	r0, #100	; 0x64
 8004128:	f7fc ff6e 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 800412c:	2200      	movs	r2, #0
 800412e:	2140      	movs	r1, #64	; 0x40
 8004130:	4650      	mov	r0, sl
 8004132:	f7fd fca1 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8004136:	2437      	movs	r4, #55	; 0x37
    tx = reg | 0x80;
 8004138:	20f5      	movs	r0, #245	; 0xf5
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800413a:	4631      	mov	r1, r6
 800413c:	463a      	mov	r2, r7
 800413e:	9400      	str	r4, [sp, #0]
 8004140:	2301      	movs	r3, #1
    tx = reg | 0x80;
 8004142:	7030      	strb	r0, [r6, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8004144:	484b      	ldr	r0, [pc, #300]	; (8004274 <mpu_device_init+0x15c>)
 8004146:	f7fd ff8d 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800414a:	484a      	ldr	r0, [pc, #296]	; (8004274 <mpu_device_init+0x15c>)
 800414c:	9400      	str	r4, [sp, #0]
 800414e:	2301      	movs	r3, #1
 8004150:	463a      	mov	r2, r7
 8004152:	4631      	mov	r1, r6
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8004154:	4681      	mov	r9, r0
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8004156:	f7fd ff85 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 800415a:	2201      	movs	r2, #1
 800415c:	2140      	movs	r1, #64	; 0x40
 800415e:	4650      	mov	r0, sl
 8004160:	f7fd fc8a 	bl	8001a78 <HAL_GPIO_WritePin>
	id                               = mpu_read_byte(MPU6500_WHO_AM_I);
 8004164:	4b44      	ldr	r3, [pc, #272]	; (8004278 <mpu_device_init+0x160>)
 8004166:	7839      	ldrb	r1, [r7, #0]
 8004168:	7019      	strb	r1, [r3, #0]
	uint8_t MPU6500_Init_Data[10][2] = {{ MPU6500_PWR_MGMT_1, 0x80 },     /* Reset Device */ 
 800416a:	2300      	movs	r3, #0
 800416c:	9306      	str	r3, [sp, #24]
 800416e:	4a43      	ldr	r2, [pc, #268]	; (800427c <mpu_device_init+0x164>)
 8004170:	9309      	str	r3, [sp, #36]	; 0x24
 8004172:	236c      	movs	r3, #108	; 0x6c
 8004174:	4842      	ldr	r0, [pc, #264]	; (8004280 <mpu_device_init+0x168>)
 8004176:	9205      	str	r2, [sp, #20]
 8004178:	4942      	ldr	r1, [pc, #264]	; (8004284 <mpu_device_init+0x16c>)
 800417a:	f88d 3018 	strb.w	r3, [sp, #24]
 800417e:	226a      	movs	r2, #106	; 0x6a
 8004180:	2320      	movs	r3, #32
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8004182:	46b0      	mov	r8, r6
	uint8_t MPU6500_Init_Data[10][2] = {{ MPU6500_PWR_MGMT_1, 0x80 },     /* Reset Device */ 
 8004184:	f8cd 001a 	str.w	r0, [sp, #26]
 8004188:	f8cd 101e 	str.w	r1, [sp, #30]
 800418c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
 8004190:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8004194:	ac05      	add	r4, sp, #20
		mpu_write_byte(MPU6500_Init_Data[i][0], MPU6500_Init_Data[i][1]);
 8004196:	7823      	ldrb	r3, [r4, #0]
 8004198:	f894 b001 	ldrb.w	fp, [r4, #1]
 800419c:	9303      	str	r3, [sp, #12]
    MPU_NSS_LOW;
 800419e:	2200      	movs	r2, #0
 80041a0:	2140      	movs	r1, #64	; 0x40
 80041a2:	4650      	mov	r0, sl
 80041a4:	f7fd fc68 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 80041a8:	9b03      	ldr	r3, [sp, #12]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80041aa:	2537      	movs	r5, #55	; 0x37
    tx = reg & 0x7F;
 80041ac:	f003 0c7f 	and.w	ip, r3, #127	; 0x7f
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80041b0:	463a      	mov	r2, r7
 80041b2:	2301      	movs	r3, #1
 80041b4:	4641      	mov	r1, r8
 80041b6:	9500      	str	r5, [sp, #0]
 80041b8:	4648      	mov	r0, r9
    tx = reg & 0x7F;
 80041ba:	f886 c000 	strb.w	ip, [r6]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80041be:	f7fd ff51 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80041c2:	2301      	movs	r3, #1
 80041c4:	463a      	mov	r2, r7
 80041c6:	4641      	mov	r1, r8
 80041c8:	9500      	str	r5, [sp, #0]
 80041ca:	4648      	mov	r0, r9
    tx = data;
 80041cc:	f886 b000 	strb.w	fp, [r6]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80041d0:	f7fd ff48 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80041d4:	2201      	movs	r2, #1
 80041d6:	2140      	movs	r1, #64	; 0x40
 80041d8:	4650      	mov	r0, sl
 80041da:	f7fd fc4d 	bl	8001a78 <HAL_GPIO_WritePin>
		MPU_DELAY(1);
 80041de:	2001      	movs	r0, #1
 80041e0:	f7fc ff12 	bl	8001008 <HAL_Delay>
 80041e4:	3402      	adds	r4, #2
	for (i = 0; i < 10; i++)
 80041e6:	ab0a      	add	r3, sp, #40	; 0x28
 80041e8:	42a3      	cmp	r3, r4
 80041ea:	d1d4      	bne.n	8004196 <mpu_device_init+0x7e>
    MPU_NSS_LOW;
 80041ec:	2200      	movs	r2, #0
 80041ee:	2140      	movs	r1, #64	; 0x40
 80041f0:	4825      	ldr	r0, [pc, #148]	; (8004288 <mpu_device_init+0x170>)
 80041f2:	f7fd fc41 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 80041f6:	241b      	movs	r4, #27
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80041f8:	9500      	str	r5, [sp, #0]
 80041fa:	2301      	movs	r3, #1
 80041fc:	4a1c      	ldr	r2, [pc, #112]	; (8004270 <mpu_device_init+0x158>)
 80041fe:	491b      	ldr	r1, [pc, #108]	; (800426c <mpu_device_init+0x154>)
 8004200:	481c      	ldr	r0, [pc, #112]	; (8004274 <mpu_device_init+0x15c>)
    tx = reg & 0x7F;
 8004202:	7034      	strb	r4, [r6, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8004204:	f7fd ff2e 	bl	8002064 <HAL_SPI_TransmitReceive>
    tx = data;
 8004208:	2418      	movs	r4, #24
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800420a:	2301      	movs	r3, #1
 800420c:	9500      	str	r5, [sp, #0]
 800420e:	4a18      	ldr	r2, [pc, #96]	; (8004270 <mpu_device_init+0x158>)
 8004210:	4916      	ldr	r1, [pc, #88]	; (800426c <mpu_device_init+0x154>)
 8004212:	4818      	ldr	r0, [pc, #96]	; (8004274 <mpu_device_init+0x15c>)
    tx = data;
 8004214:	7034      	strb	r4, [r6, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8004216:	f7fd ff25 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 800421a:	2201      	movs	r2, #1
 800421c:	2140      	movs	r1, #64	; 0x40
 800421e:	481a      	ldr	r0, [pc, #104]	; (8004288 <mpu_device_init+0x170>)
 8004220:	f7fd fc2a 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_NSS_LOW;
 8004224:	2200      	movs	r2, #0
 8004226:	2140      	movs	r1, #64	; 0x40
 8004228:	4817      	ldr	r0, [pc, #92]	; (8004288 <mpu_device_init+0x170>)
 800422a:	f7fd fc25 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 800422e:	241c      	movs	r4, #28
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8004230:	9500      	str	r5, [sp, #0]
 8004232:	2301      	movs	r3, #1
 8004234:	4a0e      	ldr	r2, [pc, #56]	; (8004270 <mpu_device_init+0x158>)
 8004236:	490d      	ldr	r1, [pc, #52]	; (800426c <mpu_device_init+0x154>)
 8004238:	480e      	ldr	r0, [pc, #56]	; (8004274 <mpu_device_init+0x15c>)
    tx = reg & 0x7F;
 800423a:	7034      	strb	r4, [r6, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800423c:	f7fd ff12 	bl	8002064 <HAL_SPI_TransmitReceive>
    tx = data;
 8004240:	2410      	movs	r4, #16
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8004242:	2301      	movs	r3, #1
 8004244:	9500      	str	r5, [sp, #0]
 8004246:	4a0a      	ldr	r2, [pc, #40]	; (8004270 <mpu_device_init+0x158>)
 8004248:	4908      	ldr	r1, [pc, #32]	; (800426c <mpu_device_init+0x154>)
 800424a:	480a      	ldr	r0, [pc, #40]	; (8004274 <mpu_device_init+0x15c>)
    tx = data;
 800424c:	7034      	strb	r4, [r6, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800424e:	f7fd ff09 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8004252:	2201      	movs	r2, #1
 8004254:	2140      	movs	r1, #64	; 0x40
 8004256:	480c      	ldr	r0, [pc, #48]	; (8004288 <mpu_device_init+0x170>)
 8004258:	f7fd fc0e 	bl	8001a78 <HAL_GPIO_WritePin>
	ist8310_init();
 800425c:	f7ff f88e 	bl	800337c <ist8310_init>
	mpu_offset_call();
 8004260:	f7ff feae 	bl	8003fc0 <mpu_offset_call>
}
 8004264:	2000      	movs	r0, #0
 8004266:	b00b      	add	sp, #44	; 0x2c
 8004268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800426c:	20000275 	.word	0x20000275
 8004270:	20000274 	.word	0x20000274
 8004274:	200005b8 	.word	0x200005b8
 8004278:	2000029a 	.word	0x2000029a
 800427c:	036b806b 	.word	0x036b806b
 8004280:	181b041a 	.word	0x181b041a
 8004284:	021d101c 	.word	0x021d101c
 8004288:	40021400 	.word	0x40021400

0800428c <init_quaternion>:
  * @param  
	* @retval 
  * @usage  call in main() function
	*/
void init_quaternion(void)
{
 800428c:	b538      	push	{r3, r4, r5, lr}
	int16_t hx, hy;//hz;
	
	hx = imu.mx;
 800428e:	4b50      	ldr	r3, [pc, #320]	; (80043d0 <init_quaternion+0x144>)
 8004290:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
	hy = imu.my;
 8004294:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
	//hz = imu.mz;
	
	#ifdef BOARD_DOWN
	if (hx < 0 && hy < 0) 
 8004298:	2a00      	cmp	r2, #0
 800429a:	db1c      	blt.n	80042d6 <init_quaternion+0x4a>
			q2 = -0.83;
			q3 = -0.0023;
		}
		
	}
	else if (hx > 0 && hy > 0)
 800429c:	d01a      	beq.n	80042d4 <init_quaternion+0x48>
 800429e:	2800      	cmp	r0, #0
 80042a0:	dd36      	ble.n	8004310 <init_quaternion+0x84>
	{
		if (fabs(hx / hy) >= 1)
 80042a2:	fb92 f0f0 	sdiv	r0, r2, r0
 80042a6:	f7fc f94d 	bl	8000544 <__aeabi_i2d>
 80042aa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80042ae:	4619      	mov	r1, r3
 80042b0:	2200      	movs	r2, #0
 80042b2:	4b48      	ldr	r3, [pc, #288]	; (80043d4 <init_quaternion+0x148>)
 80042b4:	f7fc fc36 	bl	8000b24 <__aeabi_dcmpge>
 80042b8:	2800      	cmp	r0, #0
 80042ba:	d044      	beq.n	8004346 <init_quaternion+0xba>
		{
			q0 = 0.0012;
 80042bc:	4b46      	ldr	r3, [pc, #280]	; (80043d8 <init_quaternion+0x14c>)
 80042be:	4a47      	ldr	r2, [pc, #284]	; (80043dc <init_quaternion+0x150>)
 80042c0:	601a      	str	r2, [r3, #0]
			q1 = -0.978;
 80042c2:	4c47      	ldr	r4, [pc, #284]	; (80043e0 <init_quaternion+0x154>)
			q2 = -0.199;
 80042c4:	4947      	ldr	r1, [pc, #284]	; (80043e4 <init_quaternion+0x158>)
			q3 = -0.005;
 80042c6:	4b48      	ldr	r3, [pc, #288]	; (80043e8 <init_quaternion+0x15c>)
			q1 = -0.978;
 80042c8:	4d48      	ldr	r5, [pc, #288]	; (80043ec <init_quaternion+0x160>)
			q2 = -0.199;
 80042ca:	4849      	ldr	r0, [pc, #292]	; (80043f0 <init_quaternion+0x164>)
			q3 = -0.005;
 80042cc:	4a49      	ldr	r2, [pc, #292]	; (80043f4 <init_quaternion+0x168>)
			q1 = -0.978;
 80042ce:	6025      	str	r5, [r4, #0]
			q2 = -0.199;
 80042d0:	6008      	str	r0, [r1, #0]
			q3 = -0.005;
 80042d2:	601a      	str	r2, [r3, #0]
			q2 = -0.012;
			q3 = -0.556;
		}		
	}
	#endif
}
 80042d4:	bd38      	pop	{r3, r4, r5, pc}
	if (hx < 0 && hy < 0) 
 80042d6:	2800      	cmp	r0, #0
 80042d8:	db4b      	blt.n	8004372 <init_quaternion+0xe6>
	else if (hx < 0 && hy > 0)
 80042da:	d0fb      	beq.n	80042d4 <init_quaternion+0x48>
		if (fabs(hx / hy)>=1)   
 80042dc:	fb92 f0f0 	sdiv	r0, r2, r0
 80042e0:	f7fc f930 	bl	8000544 <__aeabi_i2d>
 80042e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80042e8:	4619      	mov	r1, r3
 80042ea:	2200      	movs	r2, #0
 80042ec:	4b39      	ldr	r3, [pc, #228]	; (80043d4 <init_quaternion+0x148>)
			q1 = -0.199;
 80042ee:	4c3c      	ldr	r4, [pc, #240]	; (80043e0 <init_quaternion+0x154>)
		if (fabs(hx / hy)>=1)   
 80042f0:	f7fc fc18 	bl	8000b24 <__aeabi_dcmpge>
			q0 = 0.005;
 80042f4:	4b38      	ldr	r3, [pc, #224]	; (80043d8 <init_quaternion+0x14c>)
 80042f6:	4a40      	ldr	r2, [pc, #256]	; (80043f8 <init_quaternion+0x16c>)
		if (fabs(hx / hy)>=1)   
 80042f8:	2800      	cmp	r0, #0
 80042fa:	d030      	beq.n	800435e <init_quaternion+0xd2>
			q0 = 0.005;
 80042fc:	601a      	str	r2, [r3, #0]
			q2 = -0.978;
 80042fe:	4939      	ldr	r1, [pc, #228]	; (80043e4 <init_quaternion+0x158>)
			q3 = 0.012;
 8004300:	4b39      	ldr	r3, [pc, #228]	; (80043e8 <init_quaternion+0x15c>)
			q1 = -0.199;
 8004302:	4d3b      	ldr	r5, [pc, #236]	; (80043f0 <init_quaternion+0x164>)
			q2 = -0.978;
 8004304:	4839      	ldr	r0, [pc, #228]	; (80043ec <init_quaternion+0x160>)
			q3 = 0.012;
 8004306:	4a3d      	ldr	r2, [pc, #244]	; (80043fc <init_quaternion+0x170>)
			q1 = -0.199;
 8004308:	6025      	str	r5, [r4, #0]
			q2 = -0.978;
 800430a:	6008      	str	r0, [r1, #0]
			q3 = 0.012;
 800430c:	601a      	str	r2, [r3, #0]
}
 800430e:	bd38      	pop	{r3, r4, r5, pc}
	else if (hx > 0 && hy < 0)
 8004310:	d0e0      	beq.n	80042d4 <init_quaternion+0x48>
		if (fabs(hx / hy) >= 1)
 8004312:	fb92 f0f0 	sdiv	r0, r2, r0
 8004316:	f7fc f915 	bl	8000544 <__aeabi_i2d>
 800431a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800431e:	4619      	mov	r1, r3
 8004320:	2200      	movs	r2, #0
 8004322:	4b2c      	ldr	r3, [pc, #176]	; (80043d4 <init_quaternion+0x148>)
			q1 = 0.978;
 8004324:	4c2e      	ldr	r4, [pc, #184]	; (80043e0 <init_quaternion+0x154>)
		if (fabs(hx / hy) >= 1)
 8004326:	f7fc fbfd 	bl	8000b24 <__aeabi_dcmpge>
			q0 = 0.0025;
 800432a:	4b2b      	ldr	r3, [pc, #172]	; (80043d8 <init_quaternion+0x14c>)
 800432c:	4a34      	ldr	r2, [pc, #208]	; (8004400 <init_quaternion+0x174>)
		if (fabs(hx / hy) >= 1)
 800432e:	2800      	cmp	r0, #0
 8004330:	d044      	beq.n	80043bc <init_quaternion+0x130>
			q0 = 0.0025;
 8004332:	601a      	str	r2, [r3, #0]
			q2 = -0.199;
 8004334:	492b      	ldr	r1, [pc, #172]	; (80043e4 <init_quaternion+0x158>)
			q3 = 0.008;			
 8004336:	4b2c      	ldr	r3, [pc, #176]	; (80043e8 <init_quaternion+0x15c>)
			q1 = 0.978;
 8004338:	4d32      	ldr	r5, [pc, #200]	; (8004404 <init_quaternion+0x178>)
			q2 = -0.199;
 800433a:	482d      	ldr	r0, [pc, #180]	; (80043f0 <init_quaternion+0x164>)
			q3 = 0.008;			
 800433c:	4a32      	ldr	r2, [pc, #200]	; (8004408 <init_quaternion+0x17c>)
			q1 = 0.978;
 800433e:	6025      	str	r5, [r4, #0]
			q2 = -0.199;
 8004340:	6008      	str	r0, [r1, #0]
			q3 = 0.008;			
 8004342:	601a      	str	r2, [r3, #0]
}
 8004344:	bd38      	pop	{r3, r4, r5, pc}
			q0 = 0.0023;
 8004346:	4a24      	ldr	r2, [pc, #144]	; (80043d8 <init_quaternion+0x14c>)
 8004348:	4b30      	ldr	r3, [pc, #192]	; (800440c <init_quaternion+0x180>)
 800434a:	6013      	str	r3, [r2, #0]
			q1 = -0.83;
 800434c:	4c24      	ldr	r4, [pc, #144]	; (80043e0 <init_quaternion+0x154>)
			q2 = -0.553;
 800434e:	4925      	ldr	r1, [pc, #148]	; (80043e4 <init_quaternion+0x158>)
			q3 = 0.0023;
 8004350:	4a25      	ldr	r2, [pc, #148]	; (80043e8 <init_quaternion+0x15c>)
			q1 = -0.83;
 8004352:	4d2f      	ldr	r5, [pc, #188]	; (8004410 <init_quaternion+0x184>)
			q2 = -0.553;
 8004354:	482f      	ldr	r0, [pc, #188]	; (8004414 <init_quaternion+0x188>)
			q1 = -0.83;
 8004356:	6025      	str	r5, [r4, #0]
			q2 = -0.553;
 8004358:	6008      	str	r0, [r1, #0]
			q3 = 0.0023;
 800435a:	6013      	str	r3, [r2, #0]
}
 800435c:	bd38      	pop	{r3, r4, r5, pc}
			q0 = 0.005;
 800435e:	601a      	str	r2, [r3, #0]
			q2 = -0.83;
 8004360:	4920      	ldr	r1, [pc, #128]	; (80043e4 <init_quaternion+0x158>)
			q3 = -0.0023;
 8004362:	4b21      	ldr	r3, [pc, #132]	; (80043e8 <init_quaternion+0x15c>)
			q1 = -0.553;
 8004364:	4d2b      	ldr	r5, [pc, #172]	; (8004414 <init_quaternion+0x188>)
			q2 = -0.83;
 8004366:	482a      	ldr	r0, [pc, #168]	; (8004410 <init_quaternion+0x184>)
			q3 = -0.0023;
 8004368:	4a2b      	ldr	r2, [pc, #172]	; (8004418 <init_quaternion+0x18c>)
			q1 = -0.553;
 800436a:	6025      	str	r5, [r4, #0]
			q2 = -0.83;
 800436c:	6008      	str	r0, [r1, #0]
			q3 = -0.0023;
 800436e:	601a      	str	r2, [r3, #0]
}
 8004370:	bd38      	pop	{r3, r4, r5, pc}
		if (fabs(hx / hy) >= 1)
 8004372:	fb92 f0f0 	sdiv	r0, r2, r0
 8004376:	f7fc f8e5 	bl	8000544 <__aeabi_i2d>
 800437a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800437e:	4619      	mov	r1, r3
 8004380:	2200      	movs	r2, #0
 8004382:	4b14      	ldr	r3, [pc, #80]	; (80043d4 <init_quaternion+0x148>)
 8004384:	f7fc fbce 	bl	8000b24 <__aeabi_dcmpge>
			q0 = -0.005;
 8004388:	4b13      	ldr	r3, [pc, #76]	; (80043d8 <init_quaternion+0x14c>)
		if (fabs(hx / hy) >= 1)
 800438a:	b158      	cbz	r0, 80043a4 <init_quaternion+0x118>
			q0 = -0.005;
 800438c:	4a19      	ldr	r2, [pc, #100]	; (80043f4 <init_quaternion+0x168>)
 800438e:	601a      	str	r2, [r3, #0]
			q1 = -0.199;
 8004390:	4c13      	ldr	r4, [pc, #76]	; (80043e0 <init_quaternion+0x154>)
			q2 = 0.979;
 8004392:	4914      	ldr	r1, [pc, #80]	; (80043e4 <init_quaternion+0x158>)
			q3 = -0.0089;
 8004394:	4b14      	ldr	r3, [pc, #80]	; (80043e8 <init_quaternion+0x15c>)
			q1 = -0.199;
 8004396:	4d16      	ldr	r5, [pc, #88]	; (80043f0 <init_quaternion+0x164>)
			q2 = 0.979;
 8004398:	4820      	ldr	r0, [pc, #128]	; (800441c <init_quaternion+0x190>)
			q3 = -0.0089;
 800439a:	4a21      	ldr	r2, [pc, #132]	; (8004420 <init_quaternion+0x194>)
			q1 = -0.199;
 800439c:	6025      	str	r5, [r4, #0]
			q2 = 0.979;
 800439e:	6008      	str	r0, [r1, #0]
			q3 = -0.0089;
 80043a0:	601a      	str	r2, [r3, #0]
}
 80043a2:	bd38      	pop	{r3, r4, r5, pc}
			q0 = -0.008;
 80043a4:	4a1f      	ldr	r2, [pc, #124]	; (8004424 <init_quaternion+0x198>)
 80043a6:	601a      	str	r2, [r3, #0]
			q1 = -0.555;
 80043a8:	4c0d      	ldr	r4, [pc, #52]	; (80043e0 <init_quaternion+0x154>)
			q2 = 0.83;
 80043aa:	490e      	ldr	r1, [pc, #56]	; (80043e4 <init_quaternion+0x158>)
			q3 = -0.002;
 80043ac:	4b0e      	ldr	r3, [pc, #56]	; (80043e8 <init_quaternion+0x15c>)
			q1 = -0.555;
 80043ae:	4d1e      	ldr	r5, [pc, #120]	; (8004428 <init_quaternion+0x19c>)
			q2 = 0.83;
 80043b0:	481e      	ldr	r0, [pc, #120]	; (800442c <init_quaternion+0x1a0>)
			q3 = -0.002;
 80043b2:	4a1f      	ldr	r2, [pc, #124]	; (8004430 <init_quaternion+0x1a4>)
			q1 = -0.555;
 80043b4:	6025      	str	r5, [r4, #0]
			q2 = 0.83;
 80043b6:	6008      	str	r0, [r1, #0]
			q3 = -0.002;
 80043b8:	601a      	str	r2, [r3, #0]
}
 80043ba:	bd38      	pop	{r3, r4, r5, pc}
			q0 = 0.0025;
 80043bc:	601a      	str	r2, [r3, #0]
			q2 = -0.56;
 80043be:	4909      	ldr	r1, [pc, #36]	; (80043e4 <init_quaternion+0x158>)
			q3 = 0.0045;
 80043c0:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <init_quaternion+0x15c>)
			q1 = 0.83;
 80043c2:	4d1a      	ldr	r5, [pc, #104]	; (800442c <init_quaternion+0x1a0>)
			q2 = -0.56;
 80043c4:	481b      	ldr	r0, [pc, #108]	; (8004434 <init_quaternion+0x1a8>)
			q3 = 0.0045;
 80043c6:	4a1c      	ldr	r2, [pc, #112]	; (8004438 <init_quaternion+0x1ac>)
			q1 = 0.83;
 80043c8:	6025      	str	r5, [r4, #0]
			q2 = -0.56;
 80043ca:	6008      	str	r0, [r1, #0]
			q3 = 0.0045;
 80043cc:	601a      	str	r2, [r3, #0]
}
 80043ce:	bd38      	pop	{r3, r4, r5, pc}
 80043d0:	20000228 	.word	0x20000228
 80043d4:	3ff00000 	.word	0x3ff00000
 80043d8:	20000008 	.word	0x20000008
 80043dc:	3a9d4952 	.word	0x3a9d4952
 80043e0:	20000268 	.word	0x20000268
 80043e4:	2000026c 	.word	0x2000026c
 80043e8:	20000270 	.word	0x20000270
 80043ec:	bf7a5e35 	.word	0xbf7a5e35
 80043f0:	be4bc6a8 	.word	0xbe4bc6a8
 80043f4:	bba3d70a 	.word	0xbba3d70a
 80043f8:	3ba3d70a 	.word	0x3ba3d70a
 80043fc:	3c449ba6 	.word	0x3c449ba6
 8004400:	3b23d70a 	.word	0x3b23d70a
 8004404:	3f7a5e35 	.word	0x3f7a5e35
 8004408:	3c03126f 	.word	0x3c03126f
 800440c:	3b16bb99 	.word	0x3b16bb99
 8004410:	bf547ae1 	.word	0xbf547ae1
 8004414:	bf0d9168 	.word	0xbf0d9168
 8004418:	bb16bb99 	.word	0xbb16bb99
 800441c:	3f7a9fbe 	.word	0x3f7a9fbe
 8004420:	bc11d14e 	.word	0xbc11d14e
 8004424:	bc03126f 	.word	0xbc03126f
 8004428:	bf0e147b 	.word	0xbf0e147b
 800442c:	3f547ae1 	.word	0x3f547ae1
 8004430:	bb03126f 	.word	0xbb03126f
 8004434:	bf0f5c29 	.word	0xbf0f5c29
 8004438:	3b9374bc 	.word	0x3b9374bc

0800443c <imu_ahrs_update>:
  * @param  
	* @retval 
  * @usage  call in main() function
	*/
void imu_ahrs_update(void) 
{
 800443c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float q1q3 = q1*q3;
	float q2q2 = q2*q2;   
	float q2q3 = q2*q3;
	float q3q3 = q3*q3;   

	gx = imu.wx;
 8004440:	49f0      	ldr	r1, [pc, #960]	; (8004804 <imu_ahrs_update+0x3c8>)
	float q0q0 = q0*q0;
 8004442:	4ff1      	ldr	r7, [pc, #964]	; (8004808 <imu_ahrs_update+0x3cc>)
	gy = imu.wy;
	gz = imu.wz;
	ax = imu.ax;
 8004444:	f9b1 3000 	ldrsh.w	r3, [r1]
	float q0q1 = q0*q1;
 8004448:	4ef0      	ldr	r6, [pc, #960]	; (800480c <imu_ahrs_update+0x3d0>)
	float q0q2 = q0*q2;
 800444a:	4df1      	ldr	r5, [pc, #964]	; (8004810 <imu_ahrs_update+0x3d4>)
	float q0q3 = q0*q3;
 800444c:	4cf1      	ldr	r4, [pc, #964]	; (8004814 <imu_ahrs_update+0x3d8>)
	gx = imu.wx;
 800444e:	48f2      	ldr	r0, [pc, #968]	; (8004818 <imu_ahrs_update+0x3dc>)
 8004450:	f8d1 e010 	ldr.w	lr, [r1, #16]
	gy = imu.wy;
 8004454:	f8d1 c014 	ldr.w	ip, [r1, #20]
	gz = imu.wz;
 8004458:	f8d1 8018 	ldr.w	r8, [r1, #24]
	ay = imu.ay;
 800445c:	f8df b3e8 	ldr.w	fp, [pc, #1000]	; 8004848 <imu_ahrs_update+0x40c>
	az = imu.az;
 8004460:	4aee      	ldr	r2, [pc, #952]	; (800481c <imu_ahrs_update+0x3e0>)
	mx = imu.mx;
 8004462:	f8df 93e8 	ldr.w	r9, [pc, #1000]	; 800484c <imu_ahrs_update+0x410>
	my = imu.my;
	mz = imu.mz;
 8004466:	f8df a3e8 	ldr.w	sl, [pc, #1000]	; 8004850 <imu_ahrs_update+0x414>
	ax = imu.ax;
 800446a:	ee06 3a90 	vmov	s13, r3
	ay = imu.ay;
 800446e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
{
 8004472:	ed2d 8b10 	vpush	{d8-d15}
	ay = imu.ay;
 8004476:	ee07 3a10 	vmov	s14, r3
	float q0q0 = q0*q0;
 800447a:	edd7 da00 	vldr	s27, [r7]
	az = imu.az;
 800447e:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
	float q0q0 = q0*q0;
 8004482:	ed97 da00 	vldr	s26, [r7]
	float q0q1 = q0*q1;
 8004486:	edd7 fa00 	vldr	s31, [r7]
 800448a:	ed96 ea00 	vldr	s28, [r6]
	float q0q2 = q0*q2;
 800448e:	ed97 fa00 	vldr	s30, [r7]
 8004492:	ed95 ba00 	vldr	s22, [r5]
	float q0q3 = q0*q3;
 8004496:	ed97 9a00 	vldr	s18, [r7]
 800449a:	edd4 8a00 	vldr	s17, [r4]
	float q1q1 = q1*q1;
 800449e:	edd6 9a00 	vldr	s19, [r6]
 80044a2:	ed96 4a00 	vldr	s8, [r6]
	float q1q2 = q1*q2;
 80044a6:	edd6 ba00 	vldr	s23, [r6]
 80044aa:	edd5 4a00 	vldr	s9, [r5]
	float q1q3 = q1*q3;
 80044ae:	edd6 aa00 	vldr	s21, [r6]
 80044b2:	ed94 5a00 	vldr	s10, [r4]
	float q2q2 = q2*q2;   
 80044b6:	edd5 ea00 	vldr	s29, [r5]
 80044ba:	edd5 ca00 	vldr	s25, [r5]
	float q2q3 = q2*q3;
 80044be:	ed95 8a00 	vldr	s16, [r5]
 80044c2:	edd4 5a00 	vldr	s11, [r4]
	float q3q3 = q3*q3;   
 80044c6:	ed94 ca00 	vldr	s24, [r4]
 80044ca:	ed94 6a00 	vldr	s12, [r4]
	gx = imu.wx;
 80044ce:	f8c0 e000 	str.w	lr, [r0]
	gy = imu.wy;
 80044d2:	48d3      	ldr	r0, [pc, #844]	; (8004820 <imu_ahrs_update+0x3e4>)
{
 80044d4:	b083      	sub	sp, #12
	gy = imu.wy;
 80044d6:	f8c0 c000 	str.w	ip, [r0]
	az = imu.az;
 80044da:	ee07 3a90 	vmov	s15, r3
	ax = imu.ax;
 80044de:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80044e2:	4bd0      	ldr	r3, [pc, #832]	; (8004824 <imu_ahrs_update+0x3e8>)
	gz = imu.wz;
 80044e4:	48d0      	ldr	r0, [pc, #832]	; (8004828 <imu_ahrs_update+0x3ec>)
 80044e6:	f8c0 8000 	str.w	r8, [r0]
	ax = imu.ax;
 80044ea:	edc3 6a00 	vstr	s13, [r3]
 80044ee:	9301      	str	r3, [sp, #4]
	mx = imu.mx;
 80044f0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
	my = imu.my;
 80044f4:	f8df 835c 	ldr.w	r8, [pc, #860]	; 8004854 <imu_ahrs_update+0x418>
	az = imu.az;
 80044f8:	9200      	str	r2, [sp, #0]
	ay = imu.ay;
 80044fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	mx = imu.mx;
 80044fe:	ee06 3a90 	vmov	s13, r3
	my = imu.my;
 8004502:	f9b1 3008 	ldrsh.w	r3, [r1, #8]
	ay = imu.ay;
 8004506:	ed8b 7a00 	vstr	s14, [fp]
	az = imu.az;
 800450a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	my = imu.my;
 800450e:	ee07 3a10 	vmov	s14, r3
	mz = imu.mz;
 8004512:	f9b1 300a 	ldrsh.w	r3, [r1, #10]
	az = imu.az;
 8004516:	edc2 7a00 	vstr	s15, [r2]
	mz = imu.mz;
 800451a:	ee07 3a90 	vmov	s15, r3
	mx = imu.mx;
 800451e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	my = imu.my;
 8004522:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	mz = imu.mz;
 8004526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	float q3q3 = q3*q3;   
 800452a:	ee2c ca06 	vmul.f32	s24, s24, s12
	float q1q2 = q1*q2;
 800452e:	ee6b baa4 	vmul.f32	s23, s23, s9
	float q1q3 = q1*q3;
 8004532:	ee6a aa85 	vmul.f32	s21, s21, s10
	float q2q3 = q2*q3;
 8004536:	ee28 8a25 	vmul.f32	s16, s16, s11
	mx = imu.mx;
 800453a:	edc9 6a00 	vstr	s13, [r9]
	float q1q1 = q1*q1;
 800453e:	ee69 9a84 	vmul.f32	s19, s19, s8
	my = imu.my;
 8004542:	ed88 7a00 	vstr	s14, [r8]
	mz = imu.mz;
 8004546:	edca 7a00 	vstr	s15, [sl]

	now_update  = HAL_GetTick(); //ms
 800454a:	f7fc fd57 	bl	8000ffc <HAL_GetTick>
 800454e:	49b7      	ldr	r1, [pc, #732]	; (800482c <imu_ahrs_update+0x3f0>)
	halfT       = ((float)(now_update - last_update) / 2000.0f);
 8004550:	f8df e304 	ldr.w	lr, [pc, #772]	; 8004858 <imu_ahrs_update+0x41c>
	now_update  = HAL_GetTick(); //ms
 8004554:	6008      	str	r0, [r1, #0]
	halfT       = ((float)(now_update - last_update) / 2000.0f);
 8004556:	6808      	ldr	r0, [r1, #0]
	last_update = now_update;
	
	/* Fast inverse square-root */
	norm = inv_sqrt(ax*ax + ay*ay + az*az);       
 8004558:	9b01      	ldr	r3, [sp, #4]
	halfT       = ((float)(now_update - last_update) / 2000.0f);
 800455a:	f8de c000 	ldr.w	ip, [lr]
	last_update = now_update;
 800455e:	6809      	ldr	r1, [r1, #0]
 8004560:	f8ce 1000 	str.w	r1, [lr]
	norm = inv_sqrt(ax*ax + ay*ay + az*az);       
 8004564:	edd3 5a00 	vldr	s11, [r3]
 8004568:	ed93 6a00 	vldr	s12, [r3]
 800456c:	ed9b 7a00 	vldr	s14, [fp]
 8004570:	eddb 4a00 	vldr	s9, [fp]
 8004574:	9a00      	ldr	r2, [sp, #0]
	i = 0x5f3759df - (i >> 1);
 8004576:	49ae      	ldr	r1, [pc, #696]	; (8004830 <imu_ahrs_update+0x3f4>)
	norm = inv_sqrt(ax*ax + ay*ay + az*az);       
 8004578:	edd2 6a00 	vldr	s13, [r2]
 800457c:	edd2 7a00 	vldr	s15, [r2]
	ax = ax * norm;
 8004580:	ed93 5a00 	vldr	s10, [r3]
	halfT       = ((float)(now_update - last_update) / 2000.0f);
 8004584:	ed9f 4aab 	vldr	s8, [pc, #684]	; 8004834 <imu_ahrs_update+0x3f8>
	norm = inv_sqrt(ax*ax + ay*ay + az*az);       
 8004588:	ee27 7a24 	vmul.f32	s14, s14, s9
	halfT       = ((float)(now_update - last_update) / 2000.0f);
 800458c:	eba0 0c0c 	sub.w	ip, r0, ip
	norm = inv_sqrt(ax*ax + ay*ay + az*az);       
 8004590:	eea5 7a86 	vfma.f32	s14, s11, s12
	halfT       = ((float)(now_update - last_update) / 2000.0f);
 8004594:	ee0a ca10 	vmov	s20, ip
	norm = inv_sqrt(ax*ax + ay*ay + az*az);       
 8004598:	eea6 7aa7 	vfma.f32	s14, s13, s15
	y = y * (1.5f - (halfx * y * y));
 800459c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	y = *(float*)&i;
 80045a0:	ee17 ca10 	vmov	ip, s14
 80045a4:	eba1 0c6c 	sub.w	ip, r1, ip, asr #1
	y = y * (1.5f - (halfx * y * y));
 80045a8:	ee67 6a25 	vmul.f32	s13, s14, s11
	y = *(float*)&i;
 80045ac:	ee07 ca10 	vmov	s14, ip
	y = y * (1.5f - (halfx * y * y));
 80045b0:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 80045b4:	ee66 6a87 	vmul.f32	s13, s13, s14
 80045b8:	eef0 4a46 	vmov.f32	s9, s12
 80045bc:	eee7 4a66 	vfms.f32	s9, s14, s13
		my = 0;
		mz = 0;		
	#endif
	/* compute reference direction of flux */
	hx = 2.0f*mx*(0.5f - q2q2 - q3q3) + 2.0f*my*(q1q2 - q0q3) + 2.0f*mz*(q1q3 + q0q2);
	hy = 2.0f*mx*(q1q2 + q0q3) + 2.0f*my*(0.5f - q1q1 - q3q3) + 2.0f*mz*(q2q3 - q0q1);
 80045c0:	eef0 7a48 	vmov.f32	s15, s16
	y = y * (1.5f - (halfx * y * y));
 80045c4:	ee24 7a87 	vmul.f32	s14, s9, s14
	hz = 2.0f*mx*(q1q3 - q0q2) + 2.0f*my*(q2q3 + q0q1) + 2.0f*mz*(0.5f - q1q1 - q2q2);         
 80045c8:	eeaf 8a8e 	vfma.f32	s16, s31, s28
	ax = ax * norm;
 80045cc:	ee65 6a07 	vmul.f32	s13, s10, s14
	hy = 2.0f*mx*(q1q2 + q0q3) + 2.0f*my*(0.5f - q1q1 - q3q3) + 2.0f*mz*(q2q3 - q0q1);
 80045d0:	eeef 7ace 	vfms.f32	s15, s31, s28
	ax = ax * norm;
 80045d4:	edc3 6a00 	vstr	s13, [r3]
	ay = ay * norm;
 80045d8:	eddb 6a00 	vldr	s13, [fp]
 80045dc:	ee66 6a87 	vmul.f32	s13, s13, s14
	hx = 2.0f*mx*(0.5f - q2q2 - q3q3) + 2.0f*my*(q1q2 - q0q3) + 2.0f*mz*(q1q3 + q0q2);
 80045e0:	eeb0 ea6a 	vmov.f32	s28, s21
	ay = ay * norm;
 80045e4:	edcb 6a00 	vstr	s13, [fp]
	az = az * norm;
 80045e8:	edd2 6a00 	vldr	s13, [r2]
 80045ec:	ee26 7a87 	vmul.f32	s14, s13, s14
	hy = 2.0f*mx*(q1q2 + q0q3) + 2.0f*my*(0.5f - q1q1 - q3q3) + 2.0f*mz*(q2q3 - q0q1);
 80045f0:	eef1 9a69 	vneg.f32	s19, s19
	az = az * norm;
 80045f4:	ed82 7a00 	vstr	s14, [r2]
		norm = inv_sqrt(mx*mx + my*my + mz*mz);          
 80045f8:	edd9 2a00 	vldr	s5, [r9]
 80045fc:	ed99 5a00 	vldr	s10, [r9]
 8004600:	edd8 6a00 	vldr	s13, [r8]
 8004604:	ed98 2a00 	vldr	s4, [r8]
 8004608:	ed9a 3a00 	vldr	s6, [sl]
 800460c:	ed9a 7a00 	vldr	s14, [sl]
		mx = mx * norm;
 8004610:	edd9 3a00 	vldr	s7, [r9]
		norm = inv_sqrt(mx*mx + my*my + mz*mz);          
 8004614:	ee66 6a82 	vmul.f32	s13, s13, s4
	hx = 2.0f*mx*(0.5f - q2q2 - q3q3) + 2.0f*my*(q1q2 - q0q3) + 2.0f*mz*(q1q3 + q0q2);
 8004618:	eeaf ea0b 	vfma.f32	s28, s30, s22
		norm = inv_sqrt(mx*mx + my*my + mz*mz);          
 800461c:	eee2 6a85 	vfma.f32	s13, s5, s10
	hz = 2.0f*mx*(q1q3 - q0q2) + 2.0f*my*(q2q3 + q0q1) + 2.0f*mz*(0.5f - q1q1 - q2q2);         
 8004620:	eeef aa4b 	vfms.f32	s21, s30, s22
		norm = inv_sqrt(mx*mx + my*my + mz*mz);          
 8004624:	eee3 6a07 	vfma.f32	s13, s6, s14
	hy = 2.0f*mx*(q1q2 + q0q3) + 2.0f*my*(0.5f - q1q1 - q3q3) + 2.0f*mz*(q2q3 - q0q1);
 8004628:	eef0 4a6b 	vmov.f32	s9, s23
	y = *(float*)&i;
 800462c:	ee16 3a90 	vmov	r3, s13
 8004630:	eba1 0363 	sub.w	r3, r1, r3, asr #1
	y = y * (1.5f - (halfx * y * y));
 8004634:	ee26 7aa5 	vmul.f32	s14, s13, s11
	y = *(float*)&i;
 8004638:	ee06 3a90 	vmov	s13, r3
	y = y * (1.5f - (halfx * y * y));
 800463c:	ee27 7a26 	vmul.f32	s14, s14, s13
	hx = 2.0f*mx*(0.5f - q2q2 - q3q3) + 2.0f*my*(q1q2 - q0q3) + 2.0f*mz*(q1q3 + q0q2);
 8004640:	eeb0 ba4c 	vmov.f32	s22, s24
	y = y * (1.5f - (halfx * y * y));
 8004644:	eea6 6ac7 	vfms.f32	s12, s13, s14
	hy = 2.0f*mx*(q1q2 + q0q3) + 2.0f*my*(0.5f - q1q1 - q3q3) + 2.0f*mz*(q2q3 - q0q1);
 8004648:	eee9 4a28 	vfma.f32	s9, s18, s17
	y = y * (1.5f - (halfx * y * y));
 800464c:	ee26 7a26 	vmul.f32	s14, s12, s13
	hx = 2.0f*mx*(0.5f - q2q2 - q3q3) + 2.0f*my*(q1q2 - q0q3) + 2.0f*mz*(q1q3 + q0q2);
 8004650:	eee9 ba68 	vfms.f32	s23, s18, s17
		mx = mx * norm;
 8004654:	ee63 6a87 	vmul.f32	s13, s7, s14
	hx = 2.0f*mx*(0.5f - q2q2 - q3q3) + 2.0f*my*(q1q2 - q0q3) + 2.0f*mz*(q1q3 + q0q2);
 8004658:	eeae baac 	vfma.f32	s22, s29, s25
		mx = mx * norm;
 800465c:	edc9 6a00 	vstr	s13, [r9]
		my = my * norm;
 8004660:	edd8 6a00 	vldr	s13, [r8]
 8004664:	ee66 6a87 	vmul.f32	s13, s13, s14
	hz = 2.0f*mx*(q1q3 - q0q2) + 2.0f*my*(q2q3 + q0q1) + 2.0f*mz*(0.5f - q1q1 - q2q2);         
 8004668:	eef1 ea6e 	vneg.f32	s29, s29
		my = my * norm;
 800466c:	edc8 6a00 	vstr	s13, [r8]
		mz = mz * norm; 
 8004670:	edda 6a00 	vldr	s13, [sl]
	hz = 2.0f*mx*(q1q3 - q0q2) + 2.0f*my*(q2q3 + q0q1) + 2.0f*mz*(0.5f - q1q1 - q2q2);         
 8004674:	eef0 8a69 	vmov.f32	s17, s19
 8004678:	eeee 8aac 	vfma.f32	s17, s29, s25
		mz = mz * norm; 
 800467c:	ee26 7a87 	vmul.f32	s14, s13, s14
	hy = 2.0f*mx*(q1q2 + q0q3) + 2.0f*my*(0.5f - q1q1 - q3q3) + 2.0f*mz*(q2q3 - q0q1);
 8004680:	ee39 5acc 	vsub.f32	s10, s19, s24
	halfT       = ((float)(now_update - last_update) / 2000.0f);
 8004684:	eeb8 aa4a 	vcvt.f32.u32	s20, s20
		mz = mz * norm; 
 8004688:	ed8a 7a00 	vstr	s14, [sl]
	hy = 2.0f*mx*(q1q2 + q0q3) + 2.0f*my*(0.5f - q1q1 - q3q3) + 2.0f*mz*(q2q3 - q0q1);
 800468c:	ee35 5a25 	vadd.f32	s10, s10, s11
	hx = 2.0f*mx*(0.5f - q2q2 - q3q3) + 2.0f*my*(q1q2 - q0q3) + 2.0f*mz*(q1q3 + q0q2);
 8004690:	ed99 6a00 	vldr	s12, [r9]
 8004694:	edd8 3a00 	vldr	s7, [r8]
 8004698:	ed9a 7a00 	vldr	s14, [sl]
	hy = 2.0f*mx*(q1q2 + q0q3) + 2.0f*my*(0.5f - q1q1 - q3q3) + 2.0f*mz*(q2q3 - q0q1);
 800469c:	edd9 6a00 	vldr	s13, [r9]
	hz = 2.0f*mx*(q1q3 - q0q2) + 2.0f*my*(q2q3 + q0q1) + 2.0f*mz*(0.5f - q1q1 - q2q2);         
 80046a0:	ee78 8aa5 	vadd.f32	s17, s17, s11
	hx = 2.0f*mx*(0.5f - q2q2 - q3q3) + 2.0f*my*(q1q2 - q0q3) + 2.0f*mz*(q1q3 + q0q2);
 80046a4:	ee35 bacb 	vsub.f32	s22, s11, s22
	halfT       = ((float)(now_update - last_update) / 2000.0f);
 80046a8:	ee2a aa04 	vmul.f32	s20, s20, s8
	hy = 2.0f*mx*(q1q2 + q0q3) + 2.0f*my*(0.5f - q1q1 - q3q3) + 2.0f*mz*(q2q3 - q0q1);
 80046ac:	ed98 4a00 	vldr	s8, [r8]
 80046b0:	edda 5a00 	vldr	s11, [sl]
 80046b4:	ee67 7aa5 	vmul.f32	s15, s15, s11
	hx = 2.0f*mx*(0.5f - q2q2 - q3q3) + 2.0f*my*(q1q2 - q0q3) + 2.0f*mz*(q1q3 + q0q2);
 80046b8:	ee2e 7a07 	vmul.f32	s14, s28, s14
	hy = 2.0f*mx*(q1q2 + q0q3) + 2.0f*my*(0.5f - q1q1 - q3q3) + 2.0f*mz*(q2q3 - q0q1);
 80046bc:	eee4 7aa6 	vfma.f32	s15, s9, s13
	hx = 2.0f*mx*(0.5f - q2q2 - q3q3) + 2.0f*my*(q1q2 - q0q3) + 2.0f*mz*(q1q3 + q0q2);
 80046c0:	eea3 7aab 	vfma.f32	s14, s7, s23
	hy = 2.0f*mx*(q1q2 + q0q3) + 2.0f*my*(0.5f - q1q1 - q3q3) + 2.0f*mz*(q2q3 - q0q1);
 80046c4:	eee5 7a04 	vfma.f32	s15, s10, s8
	hx = 2.0f*mx*(0.5f - q2q2 - q3q3) + 2.0f*my*(q1q2 - q0q3) + 2.0f*mz*(q1q3 + q0q2);
 80046c8:	eeab 7a06 	vfma.f32	s14, s22, s12
	hy = 2.0f*mx*(q1q2 + q0q3) + 2.0f*my*(0.5f - q1q1 - q3q3) + 2.0f*mz*(q2q3 - q0q1);
 80046cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
	hz = 2.0f*mx*(q1q3 - q0q2) + 2.0f*my*(q2q3 + q0q1) + 2.0f*mz*(0.5f - q1q1 - q2q2);         
 80046d0:	edd9 5a00 	vldr	s11, [r9]
 80046d4:	ed98 9a00 	vldr	s18, [r8]
 80046d8:	edda 6a00 	vldr	s13, [sl]
	hx = 2.0f*mx*(0.5f - q2q2 - q3q3) + 2.0f*my*(q1q2 - q0q3) + 2.0f*mz*(q1q3 + q0q2);
 80046dc:	ee37 7a07 	vadd.f32	s14, s14, s14
	bx = sqrt((hx*hx) + (hy*hy));
 80046e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
	hz = 2.0f*mx*(q1q3 - q0q2) + 2.0f*my*(q2q3 + q0q1) + 2.0f*mz*(0.5f - q1q1 - q2q2);         
 80046e4:	ee28 9a09 	vmul.f32	s18, s16, s18
	bx = sqrt((hx*hx) + (hy*hy));
 80046e8:	eee7 7a07 	vfma.f32	s15, s14, s14
	hz = 2.0f*mx*(q1q3 - q0q2) + 2.0f*my*(q2q3 + q0q1) + 2.0f*mz*(0.5f - q1q1 - q2q2);         
 80046ec:	eea5 9aaa 	vfma.f32	s18, s11, s21
	bx = sqrt((hx*hx) + (hy*hy));
 80046f0:	ee17 0a90 	vmov	r0, s15
	hz = 2.0f*mx*(q1q3 - q0q2) + 2.0f*my*(q2q3 + q0q1) + 2.0f*mz*(0.5f - q1q1 - q2q2);         
 80046f4:	eea8 9aa6 	vfma.f32	s18, s17, s13
	bx = sqrt((hx*hx) + (hy*hy));
 80046f8:	f7fb ff36 	bl	8000568 <__aeabi_f2d>
 80046fc:	ec41 0b10 	vmov	d0, r0, r1
 8004700:	f004 fc2a 	bl	8008f58 <sqrt>
	bz = hz; 
	
	/* estimated direction of gravity and flux (v and w) */
	vx = 2.0f*(q1q3 - q0q2);
	vy = 2.0f*(q0q1 + q2q3);
	vz = q0q0 - q1q1 - q2q2 + q3q3;
 8004704:	eeed 9a8d 	vfma.f32	s19, s27, s26
	bx = sqrt((hx*hx) + (hy*hy));
 8004708:	ec51 0b10 	vmov	r0, r1, d0
 800470c:	f7fc fa5c 	bl	8000bc8 <__aeabi_d2f>
	hz = 2.0f*mx*(q1q3 - q0q2) + 2.0f*my*(q2q3 + q0q1) + 2.0f*mz*(0.5f - q1q1 - q2q2);         
 8004710:	ee39 9a09 	vadd.f32	s18, s18, s18
	
	/* 
	 * error is sum of cross product between reference direction 
	 * of fields and direction measured by sensors 
	 */
	ex = (ay*vz - az*vy) + (my*wz - mz*wy);
 8004714:	9a00      	ldr	r2, [sp, #0]
 8004716:	eddb 1a00 	vldr	s3, [fp]
 800471a:	edd2 7a00 	vldr	s15, [r2]
 800471e:	ed98 2a00 	vldr	s4, [r8]
 8004722:	edda 2a00 	vldr	s5, [sl]
	ey = (az*vx - ax*vz) + (mz*wx - mx*wz);
 8004726:	9b01      	ldr	r3, [sp, #4]
 8004728:	ed92 7a00 	vldr	s14, [r2]
 800472c:	edd3 3a00 	vldr	s7, [r3]
 8004730:	ed9a 5a00 	vldr	s10, [sl]
 8004734:	edd9 5a00 	vldr	s11, [r9]
	ez = (ax*vy - ay*vx) + (mx*wy - my*wx);
 8004738:	edd3 6a00 	vldr	s13, [r3]
 800473c:	ed9b 4a00 	vldr	s8, [fp]
 8004740:	edd9 4a00 	vldr	s9, [r9]
	vz = q0q0 - q1q1 - q2q2 + q3q3;
 8004744:	eeee 9aac 	vfma.f32	s19, s29, s25
	bx = sqrt((hx*hx) + (hy*hy));
 8004748:	ee06 0a10 	vmov	s12, r0
	vy = 2.0f*(q0q1 + q2q3);
 800474c:	ee38 3a08 	vadd.f32	s6, s16, s16
	wz = 2.0f*bx*(q0q2 + q1q3) + 2.0f*bz*(0.5f - q1q1 - q2q2);  
 8004750:	ee68 8a89 	vmul.f32	s17, s17, s18
	vz = q0q0 - q1q1 - q2q2 + q3q3;
 8004754:	ee79 9a8c 	vadd.f32	s19, s19, s24
	wz = 2.0f*bx*(q0q2 + q1q3) + 2.0f*bz*(0.5f - q1q1 - q2q2);  
 8004758:	eeee 8a06 	vfma.f32	s17, s28, s12
	ex = (ay*vz - az*vy) + (my*wz - mz*wy);
 800475c:	ee63 7a67 	vnmul.f32	s15, s6, s15
	wy = 2.0f*bx*(q1q2 - q0q3) + 2.0f*bz*(q0q1 + q2q3);
 8004760:	ee28 8a09 	vmul.f32	s16, s16, s18
	ex = (ay*vz - az*vy) + (my*wz - mz*wy);
 8004764:	eee1 7aa9 	vfma.f32	s15, s3, s19
	wz = 2.0f*bx*(q0q2 + q1q3) + 2.0f*bz*(0.5f - q1q1 - q2q2);  
 8004768:	ee78 8aa8 	vadd.f32	s17, s17, s17
	wy = 2.0f*bx*(q1q2 - q0q3) + 2.0f*bz*(q0q1 + q2q3);
 800476c:	eeab 8a86 	vfma.f32	s16, s23, s12
	ex = (ay*vz - az*vy) + (my*wz - mz*wy);
 8004770:	eee2 7a28 	vfma.f32	s15, s4, s17
	wy = 2.0f*bx*(q1q2 - q0q3) + 2.0f*bz*(q0q1 + q2q3);
 8004774:	ee38 8a08 	vadd.f32	s16, s16, s16
	ez = (ax*vy - ay*vx) + (mx*wy - my*wx);
 8004778:	ed98 2a00 	vldr	s4, [r8]
	ex = (ay*vz - az*vy) + (my*wz - mz*wy);
 800477c:	eee2 7ac8 	vfms.f32	s15, s5, s16

	/* PI */
	if(ex != 0.0f && ey != 0.0f && ez != 0.0f)
 8004780:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004788:	f000 808c 	beq.w	80048a4 <imu_ahrs_update+0x468>
	wx = 2.0f*bx*(0.5f - q2q2 - q3q3) + 2.0f*bz*(q1q3 - q0q2);
 800478c:	ee2b ba06 	vmul.f32	s22, s22, s12
	vx = 2.0f*(q1q3 - q0q2);
 8004790:	ee3a 6aaa 	vadd.f32	s12, s21, s21
	wx = 2.0f*bx*(0.5f - q2q2 - q3q3) + 2.0f*bz*(q1q3 - q0q2);
 8004794:	eeaa ba89 	vfma.f32	s22, s21, s18
	ey = (az*vx - ax*vz) + (mz*wx - mx*wz);
 8004798:	ee27 7a06 	vmul.f32	s14, s14, s12
	wx = 2.0f*bx*(0.5f - q2q2 - q3q3) + 2.0f*bz*(q1q3 - q0q2);
 800479c:	ee3b ba0b 	vadd.f32	s22, s22, s22
	ey = (az*vx - ax*vz) + (mz*wx - mx*wz);
 80047a0:	eea3 7ae9 	vfms.f32	s14, s7, s19
 80047a4:	eea5 7a0b 	vfma.f32	s14, s10, s22
 80047a8:	eea5 7ae8 	vfms.f32	s14, s11, s17
	if(ex != 0.0f && ey != 0.0f && ez != 0.0f)
 80047ac:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80047b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b4:	d076      	beq.n	80048a4 <imu_ahrs_update+0x468>
	ez = (ax*vy - ay*vx) + (mx*wy - my*wx);
 80047b6:	ee66 6a83 	vmul.f32	s13, s13, s6
 80047ba:	eee4 6a46 	vfms.f32	s13, s8, s12
 80047be:	eee4 6a88 	vfma.f32	s13, s9, s16
 80047c2:	eee2 6a4b 	vfms.f32	s13, s4, s22
	if(ex != 0.0f && ey != 0.0f && ez != 0.0f)
 80047c6:	eef5 6a40 	vcmp.f32	s13, #0.0
 80047ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ce:	d069      	beq.n	80048a4 <imu_ahrs_update+0x468>
	{
		exInt = exInt + ex * Ki * halfT;
 80047d0:	4919      	ldr	r1, [pc, #100]	; (8004838 <imu_ahrs_update+0x3fc>)
 80047d2:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 800483c <imu_ahrs_update+0x400>
 80047d6:	ed91 5a00 	vldr	s10, [r1]
		eyInt = eyInt + ey * Ki * halfT;	
 80047da:	4a19      	ldr	r2, [pc, #100]	; (8004840 <imu_ahrs_update+0x404>)
		ezInt = ezInt + ez * Ki * halfT;
 80047dc:	4b19      	ldr	r3, [pc, #100]	; (8004844 <imu_ahrs_update+0x408>)
		
		gx = gx + Kp*ex + exInt;
 80047de:	480e      	ldr	r0, [pc, #56]	; (8004818 <imu_ahrs_update+0x3dc>)
 80047e0:	ee2a 6a06 	vmul.f32	s12, s20, s12
 80047e4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
		exInt = exInt + ex * Ki * halfT;
 80047e8:	eea7 5a86 	vfma.f32	s10, s15, s12
 80047ec:	ed81 5a00 	vstr	s10, [r1]
		eyInt = eyInt + ey * Ki * halfT;	
 80047f0:	ed92 5a00 	vldr	s10, [r2]
 80047f4:	eea7 5a06 	vfma.f32	s10, s14, s12
 80047f8:	ed82 5a00 	vstr	s10, [r2]
		ezInt = ezInt + ez * Ki * halfT;
 80047fc:	ed93 5a00 	vldr	s10, [r3]
 8004800:	e02c      	b.n	800485c <imu_ahrs_update+0x420>
 8004802:	bf00      	nop
 8004804:	20000228 	.word	0x20000228
 8004808:	20000008 	.word	0x20000008
 800480c:	20000268 	.word	0x20000268
 8004810:	2000026c 	.word	0x2000026c
 8004814:	20000270 	.word	0x20000270
 8004818:	2000021c 	.word	0x2000021c
 800481c:	20000218 	.word	0x20000218
 8004820:	20000220 	.word	0x20000220
 8004824:	20000210 	.word	0x20000210
 8004828:	20000224 	.word	0x20000224
 800482c:	2000029c 	.word	0x2000029c
 8004830:	5f3759df 	.word	0x5f3759df
 8004834:	3a03126f 	.word	0x3a03126f
 8004838:	20000290 	.word	0x20000290
 800483c:	3c23d70a 	.word	0x3c23d70a
 8004840:	200002a0 	.word	0x200002a0
 8004844:	200002d4 	.word	0x200002d4
 8004848:	20000214 	.word	0x20000214
 800484c:	2000025c 	.word	0x2000025c
 8004850:	20000264 	.word	0x20000264
 8004854:	20000260 	.word	0x20000260
 8004858:	200002d8 	.word	0x200002d8
 800485c:	eea6 5a86 	vfma.f32	s10, s13, s12
 8004860:	ed83 5a00 	vstr	s10, [r3]
		gx = gx + Kp*ex + exInt;
 8004864:	ed90 6a00 	vldr	s12, [r0]
 8004868:	ed91 5a00 	vldr	s10, [r1]
		gy = gy + Kp*ey + eyInt;
 800486c:	4953      	ldr	r1, [pc, #332]	; (80049bc <imu_ahrs_update+0x580>)
		gx = gx + Kp*ex + exInt;
 800486e:	ee36 6a05 	vadd.f32	s12, s12, s10
 8004872:	eea7 6aa5 	vfma.f32	s12, s15, s11
 8004876:	ed80 6a00 	vstr	s12, [r0]
		gy = gy + Kp*ey + eyInt;
 800487a:	edd1 7a00 	vldr	s15, [r1]
 800487e:	ed92 6a00 	vldr	s12, [r2]
		gz = gz + Kp*ez + ezInt;
 8004882:	4a4f      	ldr	r2, [pc, #316]	; (80049c0 <imu_ahrs_update+0x584>)
		gy = gy + Kp*ey + eyInt;
 8004884:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004888:	eee7 7a25 	vfma.f32	s15, s14, s11
 800488c:	edc1 7a00 	vstr	s15, [r1]
		gz = gz + Kp*ez + ezInt;
 8004890:	edd2 7a00 	vldr	s15, [r2]
 8004894:	ed93 7a00 	vldr	s14, [r3]
 8004898:	ee77 7a87 	vadd.f32	s15, s15, s14
 800489c:	eee6 7aa5 	vfma.f32	s15, s13, s11
 80048a0:	edc2 7a00 	vstr	s15, [r2]
	}
	
	tempq0 = q0 + (-q1*gx - q2*gy - q3*gz) * halfT;
 80048a4:	4a47      	ldr	r2, [pc, #284]	; (80049c4 <imu_ahrs_update+0x588>)
 80048a6:	4945      	ldr	r1, [pc, #276]	; (80049bc <imu_ahrs_update+0x580>)
 80048a8:	4845      	ldr	r0, [pc, #276]	; (80049c0 <imu_ahrs_update+0x584>)
 80048aa:	edd6 1a00 	vldr	s3, [r6]
 80048ae:	ed92 2a00 	vldr	s4, [r2]
 80048b2:	edd5 7a00 	vldr	s15, [r5]
 80048b6:	ed91 3a00 	vldr	s6, [r1]
 80048ba:	edd4 3a00 	vldr	s7, [r4]
 80048be:	ed90 4a00 	vldr	s8, [r0]
 80048c2:	edd7 5a00 	vldr	s11, [r7]
	tempq1 = q1 + (q0*gx + q2*gz - q3*gy) * halfT;
 80048c6:	edd7 2a00 	vldr	s5, [r7]
 80048ca:	edd2 4a00 	vldr	s9, [r2]
 80048ce:	ed95 7a00 	vldr	s14, [r5]
 80048d2:	ed90 9a00 	vldr	s18, [r0]
 80048d6:	ed94 0a00 	vldr	s0, [r4]
 80048da:	edd1 0a00 	vldr	s1, [r1]
 80048de:	ed96 6a00 	vldr	s12, [r6]
	tempq2 = q2 + (q0*gy - q1*gz + q3*gx) * halfT;
 80048e2:	edd7 8a00 	vldr	s17, [r7]
 80048e6:	ed91 1a00 	vldr	s2, [r1]
 80048ea:	ed96 8a00 	vldr	s16, [r6]
 80048ee:	ed90 5a00 	vldr	s10, [r0]
 80048f2:	edd4 6a00 	vldr	s13, [r4]
 80048f6:	edd2 9a00 	vldr	s19, [r2]
	i = 0x5f3759df - (i >> 1);
 80048fa:	4b33      	ldr	r3, [pc, #204]	; (80049c8 <imu_ahrs_update+0x58c>)
	tempq2 = q2 + (q0*gy - q1*gz + q3*gx) * halfT;
 80048fc:	ee66 6aa9 	vmul.f32	s13, s13, s19
	tempq1 = q1 + (q0*gx + q2*gz - q3*gy) * halfT;
 8004900:	ee27 7a09 	vmul.f32	s14, s14, s18
	tempq2 = q2 + (q0*gy - q1*gz + q3*gx) * halfT;
 8004904:	eee8 6a81 	vfma.f32	s13, s17, s2
	tempq1 = q1 + (q0*gx + q2*gz - q3*gy) * halfT;
 8004908:	eea2 7aa4 	vfma.f32	s14, s5, s9
	tempq2 = q2 + (q0*gy - q1*gz + q3*gx) * halfT;
 800490c:	eee8 6a45 	vfms.f32	s13, s16, s10
 8004910:	edd5 4a00 	vldr	s9, [r5]
	tempq3 = q3 + (q0*gz + q1*gy - q2*gx) * halfT;  
 8004914:	ed97 1a00 	vldr	s2, [r7]
 8004918:	edd0 2a00 	vldr	s5, [r0]
 800491c:	ed96 5a00 	vldr	s10, [r6]
 8004920:	ed91 8a00 	vldr	s16, [r1]
 8004924:	ee25 5a08 	vmul.f32	s10, s10, s16
	tempq1 = q1 + (q0*gx + q2*gz - q3*gy) * halfT;
 8004928:	eea0 7a60 	vfms.f32	s14, s0, s1
	tempq3 = q3 + (q0*gz + q1*gy - q2*gx) * halfT;  
 800492c:	eea1 5a22 	vfma.f32	s10, s2, s5
	tempq2 = q2 + (q0*gy - q1*gz + q3*gx) * halfT;
 8004930:	eee6 4a8a 	vfma.f32	s9, s13, s20
	tempq3 = q3 + (q0*gz + q1*gy - q2*gx) * halfT;  
 8004934:	edd5 2a00 	vldr	s5, [r5]
	tempq0 = q0 + (-q1*gx - q2*gy - q3*gz) * halfT;
 8004938:	ee67 7a83 	vmul.f32	s15, s15, s6
	tempq3 = q3 + (q0*gz + q1*gy - q2*gx) * halfT;  
 800493c:	ed92 3a00 	vldr	s6, [r2]
 8004940:	edd4 6a00 	vldr	s13, [r4]
	tempq1 = q1 + (q0*gx + q2*gz - q3*gy) * halfT;
 8004944:	eea7 6a0a 	vfma.f32	s12, s14, s20
	tempq3 = q3 + (q0*gz + q1*gy - q2*gx) * halfT;  
 8004948:	eea2 5ac3 	vfms.f32	s10, s5, s6
	tempq0 = q0 + (-q1*gx - q2*gy - q3*gz) * halfT;
 800494c:	eee1 7a82 	vfma.f32	s15, s3, s4

	/* normalise quaternion */
	norm = inv_sqrt(tempq0*tempq0 + tempq1*tempq1 + tempq2*tempq2 + tempq3*tempq3);
 8004950:	ee24 7aa4 	vmul.f32	s14, s9, s9
	tempq3 = q3 + (q0*gz + q1*gy - q2*gx) * halfT;  
 8004954:	eee5 6a0a 	vfma.f32	s13, s10, s20
	tempq0 = q0 + (-q1*gx - q2*gy - q3*gz) * halfT;
 8004958:	eee3 7a84 	vfma.f32	s15, s7, s8
	norm = inv_sqrt(tempq0*tempq0 + tempq1*tempq1 + tempq2*tempq2 + tempq3*tempq3);
 800495c:	eea6 7a06 	vfma.f32	s14, s12, s12
	tempq0 = q0 + (-q1*gx - q2*gy - q3*gz) * halfT;
 8004960:	eee7 5aca 	vfms.f32	s11, s15, s20
	norm = inv_sqrt(tempq0*tempq0 + tempq1*tempq1 + tempq2*tempq2 + tempq3*tempq3);
 8004964:	eea6 7aa6 	vfma.f32	s14, s13, s13
	y = y * (1.5f - (halfx * y * y));
 8004968:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
	norm = inv_sqrt(tempq0*tempq0 + tempq1*tempq1 + tempq2*tempq2 + tempq3*tempq3);
 800496c:	eea5 7aa5 	vfma.f32	s14, s11, s11
	y = y * (1.5f - (halfx * y * y));
 8004970:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
	y = *(float*)&i;
 8004974:	ee17 2a10 	vmov	r2, s14
 8004978:	eba3 0362 	sub.w	r3, r3, r2, asr #1
	y = y * (1.5f - (halfx * y * y));
 800497c:	ee27 5a05 	vmul.f32	s10, s14, s10
	y = *(float*)&i;
 8004980:	ee07 3a10 	vmov	s14, r3
	y = y * (1.5f - (halfx * y * y));
 8004984:	ee27 5a45 	vnmul.f32	s10, s14, s10
 8004988:	eee5 7a07 	vfma.f32	s15, s10, s14
 800498c:	ee67 7a87 	vmul.f32	s15, s15, s14
	q0 = tempq0 * norm;
 8004990:	ee65 5aa7 	vmul.f32	s11, s11, s15
	q1 = tempq1 * norm;
 8004994:	ee26 6a27 	vmul.f32	s12, s12, s15
	q2 = tempq2 * norm;
 8004998:	ee64 4aa7 	vmul.f32	s9, s9, s15
	q3 = tempq3 * norm;
 800499c:	ee66 7aa7 	vmul.f32	s15, s13, s15
	q0 = tempq0 * norm;
 80049a0:	edc7 5a00 	vstr	s11, [r7]
	q1 = tempq1 * norm;
 80049a4:	ed86 6a00 	vstr	s12, [r6]
	q2 = tempq2 * norm;
 80049a8:	edc5 4a00 	vstr	s9, [r5]
	q3 = tempq3 * norm;
 80049ac:	edc4 7a00 	vstr	s15, [r4]
}
 80049b0:	b003      	add	sp, #12
 80049b2:	ecbd 8b10 	vpop	{d8-d15}
 80049b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ba:	bf00      	nop
 80049bc:	20000220 	.word	0x20000220
 80049c0:	20000224 	.word	0x20000224
 80049c4:	2000021c 	.word	0x2000021c
 80049c8:	5f3759df 	.word	0x5f3759df
 80049cc:	00000000 	.word	0x00000000

080049d0 <imu_attitude_update>:
  * @param  
	* @retval 
  * @usage  call in main() function
	*/
void imu_attitude_update(void)
{
 80049d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* yaw    -pi----pi */
	imu.yaw = -atan2(2*q1*q2 + 2*q0*q3, -2*q2*q2 - 2*q3*q3 + 1)* 57.3; 
 80049d4:	4c56      	ldr	r4, [pc, #344]	; (8004b30 <imu_attitude_update+0x160>)
 80049d6:	4d57      	ldr	r5, [pc, #348]	; (8004b34 <imu_attitude_update+0x164>)
 80049d8:	4e57      	ldr	r6, [pc, #348]	; (8004b38 <imu_attitude_update+0x168>)
 80049da:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8004b40 <imu_attitude_update+0x170>
 80049de:	4f57      	ldr	r7, [pc, #348]	; (8004b3c <imu_attitude_update+0x16c>)
{
 80049e0:	ed2d 8b08 	vpush	{d8-d11}
	imu.yaw = -atan2(2*q1*q2 + 2*q0*q3, -2*q2*q2 - 2*q3*q3 + 1)* 57.3; 
 80049e4:	edd5 aa00 	vldr	s21, [r5]
 80049e8:	ed94 aa00 	vldr	s20, [r4]
 80049ec:	ed98 8a00 	vldr	s16, [r8]
 80049f0:	ed96 ba00 	vldr	s22, [r6]
 80049f4:	edd4 6a00 	vldr	s13, [r4]
 80049f8:	edd4 7a00 	vldr	s15, [r4]
 80049fc:	ed96 6a00 	vldr	s12, [r6]
 8004a00:	ed96 7a00 	vldr	s14, [r6]
 8004a04:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004a08:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8004a0c:	eef8 9a00 	vmov.f32	s19, #128	; 0xc0000000 -2.0
 8004a10:	eef0 7a68 	vmov.f32	s15, s17
 8004a14:	eee6 7aa9 	vfma.f32	s15, s13, s19
{
 8004a18:	b082      	sub	sp, #8
	imu.yaw = -atan2(2*q1*q2 + 2*q0*q3, -2*q2*q2 - 2*q3*q3 + 1)* 57.3; 
 8004a1a:	ee27 7a46 	vnmul.f32	s14, s14, s12
 8004a1e:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
 8004a22:	eee7 7a09 	vfma.f32	s15, s14, s18
 8004a26:	ee17 0a90 	vmov	r0, s15
 8004a2a:	f7fb fd9d 	bl	8000568 <__aeabi_f2d>
 8004a2e:	ee68 7a0b 	vmul.f32	s15, s16, s22
 8004a32:	e9cd 0100 	strd	r0, r1, [sp]
 8004a36:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8004a3a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004a3e:	ee17 0a90 	vmov	r0, s15
 8004a42:	f7fb fd91 	bl	8000568 <__aeabi_f2d>
 8004a46:	ed9d 1b00 	vldr	d1, [sp]
 8004a4a:	ec41 0b10 	vmov	d0, r0, r1
 8004a4e:	f004 fa81 	bl	8008f54 <atan2>
 8004a52:	a333      	add	r3, pc, #204	; (adr r3, 8004b20 <imu_attitude_update+0x150>)
 8004a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a58:	ec51 0b10 	vmov	r0, r1, d0
 8004a5c:	f7fb fddc 	bl	8000618 <__aeabi_dmul>
 8004a60:	f7fc f8b2 	bl	8000bc8 <__aeabi_d2f>
	/* pitch  -pi/2----pi/2 */
	imu.pit = -asin(-2*q1*q3 + 2*q0*q2)* 57.3;   
 8004a64:	edd5 6a00 	vldr	s13, [r5]
 8004a68:	ed96 7a00 	vldr	s14, [r6]
 8004a6c:	ed98 6a00 	vldr	s12, [r8]
 8004a70:	edd4 7a00 	vldr	s15, [r4]
	imu.yaw = -atan2(2*q1*q2 + 2*q0*q3, -2*q2*q2 - 2*q3*q3 + 1)* 57.3; 
 8004a74:	6338      	str	r0, [r7, #48]	; 0x30
	imu.pit = -asin(-2*q1*q3 + 2*q0*q2)* 57.3;   
 8004a76:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 8004a7a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004a7e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004a82:	ee17 0a90 	vmov	r0, s15
 8004a86:	f7fb fd6f 	bl	8000568 <__aeabi_f2d>
 8004a8a:	ec41 0b10 	vmov	d0, r0, r1
 8004a8e:	f004 fa09 	bl	8008ea4 <asin>
 8004a92:	a325      	add	r3, pc, #148	; (adr r3, 8004b28 <imu_attitude_update+0x158>)
 8004a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a98:	ec51 0b10 	vmov	r0, r1, d0
 8004a9c:	f7fb fdbc 	bl	8000618 <__aeabi_dmul>
 8004aa0:	f7fc f892 	bl	8000bc8 <__aeabi_d2f>
	/* roll   -pi----pi  */	
	imu.rol =  atan2(2*q2*q3 + 2*q0*q1, -2*q1*q1 - 2*q2*q2 + 1)* 57.3;
 8004aa4:	edd4 aa00 	vldr	s21, [r4]
 8004aa8:	ed96 aa00 	vldr	s20, [r6]
 8004aac:	ed98 8a00 	vldr	s16, [r8]
 8004ab0:	ed95 ba00 	vldr	s22, [r5]
 8004ab4:	edd5 6a00 	vldr	s13, [r5]
 8004ab8:	ed95 6a00 	vldr	s12, [r5]
 8004abc:	edd4 7a00 	vldr	s15, [r4]
 8004ac0:	ed94 7a00 	vldr	s14, [r4]
	imu.pit = -asin(-2*q1*q3 + 2*q0*q2)* 57.3;   
 8004ac4:	62f8      	str	r0, [r7, #44]	; 0x2c
	imu.rol =  atan2(2*q2*q3 + 2*q0*q1, -2*q1*q1 - 2*q2*q2 + 1)* 57.3;
 8004ac6:	ee66 6a86 	vmul.f32	s13, s13, s12
 8004aca:	ee27 7a67 	vnmul.f32	s14, s14, s15
 8004ace:	eee6 8aa9 	vfma.f32	s17, s13, s19
 8004ad2:	eee7 8a09 	vfma.f32	s17, s14, s18
 8004ad6:	ee18 0a90 	vmov	r0, s17
 8004ada:	f7fb fd45 	bl	8000568 <__aeabi_f2d>
 8004ade:	ee68 7a0b 	vmul.f32	s15, s16, s22
 8004ae2:	e9cd 0100 	strd	r0, r1, [sp]
 8004ae6:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8004aea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004aee:	ee17 0a90 	vmov	r0, s15
 8004af2:	f7fb fd39 	bl	8000568 <__aeabi_f2d>
 8004af6:	ed9d 1b00 	vldr	d1, [sp]
 8004afa:	ec41 0b10 	vmov	d0, r0, r1
 8004afe:	f004 fa29 	bl	8008f54 <atan2>
 8004b02:	a309      	add	r3, pc, #36	; (adr r3, 8004b28 <imu_attitude_update+0x158>)
 8004b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b08:	ec51 0b10 	vmov	r0, r1, d0
 8004b0c:	f7fb fd84 	bl	8000618 <__aeabi_dmul>
 8004b10:	f7fc f85a 	bl	8000bc8 <__aeabi_d2f>
 8004b14:	62b8      	str	r0, [r7, #40]	; 0x28
}
 8004b16:	b002      	add	sp, #8
 8004b18:	ecbd 8b08 	vpop	{d8-d11}
 8004b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b20:	66666666 	.word	0x66666666
 8004b24:	c04ca666 	.word	0xc04ca666
 8004b28:	66666666 	.word	0x66666666
 8004b2c:	404ca666 	.word	0x404ca666
 8004b30:	2000026c 	.word	0x2000026c
 8004b34:	20000268 	.word	0x20000268
 8004b38:	20000270 	.word	0x20000270
 8004b3c:	20000228 	.word	0x20000228
 8004b40:	20000008 	.word	0x20000008

08004b44 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8004b44:	b538      	push	{r3, r4, r5, lr}

  hcan1.Instance = CAN1;
 8004b46:	4b0d      	ldr	r3, [pc, #52]	; (8004b7c <MX_CAN1_Init+0x38>)
 8004b48:	4a0d      	ldr	r2, [pc, #52]	; (8004b80 <MX_CAN1_Init+0x3c>)
 8004b4a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 8004b4c:	2207      	movs	r2, #7
 8004b4e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8004b50:	2200      	movs	r2, #0
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8004b52:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8004b56:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
  hcan1.Init.TimeTriggeredMode = DISABLE;
  hcan1.Init.AutoBusOff = DISABLE;
  hcan1.Init.AutoWakeUp = DISABLE;
  hcan1.Init.AutoRetransmission = DISABLE;
  hcan1.Init.ReceiveFifoLocked = DISABLE;
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8004b5a:	2101      	movs	r1, #1
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8004b5c:	4618      	mov	r0, r3
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8004b5e:	619a      	str	r2, [r3, #24]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8004b60:	e9c3 5404 	strd	r5, r4, [r3, #16]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8004b64:	7759      	strb	r1, [r3, #29]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004b66:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8004b6a:	771a      	strb	r2, [r3, #28]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8004b6c:	f7fc fa5e 	bl	800102c <HAL_CAN_Init>
 8004b70:	b900      	cbnz	r0, 8004b74 <MX_CAN1_Init+0x30>
  {
    Error_Handler();
  }

}
 8004b72:	bd38      	pop	{r3, r4, r5, pc}
 8004b74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8004b78:	f000 bed4 	b.w	8005924 <Error_Handler>
 8004b7c:	20000304 	.word	0x20000304
 8004b80:	40006400 	.word	0x40006400

08004b84 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8004b84:	b538      	push	{r3, r4, r5, lr}

  hcan2.Instance = CAN2;
 8004b86:	4b0d      	ldr	r3, [pc, #52]	; (8004bbc <MX_CAN2_Init+0x38>)
 8004b88:	4a0d      	ldr	r2, [pc, #52]	; (8004bc0 <MX_CAN2_Init+0x3c>)
 8004b8a:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 7;
 8004b8c:	2207      	movs	r2, #7
 8004b8e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8004b90:	2200      	movs	r2, #0
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8004b92:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8004b96:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
  hcan2.Init.TimeTriggeredMode = DISABLE;
  hcan2.Init.AutoBusOff = DISABLE;
  hcan2.Init.AutoWakeUp = DISABLE;
  hcan2.Init.AutoRetransmission = DISABLE;
  hcan2.Init.ReceiveFifoLocked = DISABLE;
  hcan2.Init.TransmitFifoPriority = ENABLE;
 8004b9a:	2101      	movs	r1, #1
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8004b9c:	4618      	mov	r0, r3
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8004b9e:	619a      	str	r2, [r3, #24]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8004ba0:	e9c3 5404 	strd	r5, r4, [r3, #16]
  hcan2.Init.TransmitFifoPriority = ENABLE;
 8004ba4:	7759      	strb	r1, [r3, #29]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004ba6:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8004baa:	771a      	strb	r2, [r3, #28]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8004bac:	f7fc fa3e 	bl	800102c <HAL_CAN_Init>
 8004bb0:	b900      	cbnz	r0, 8004bb4 <MX_CAN2_Init+0x30>
  {
    Error_Handler();
  }

}
 8004bb2:	bd38      	pop	{r3, r4, r5, pc}
 8004bb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8004bb8:	f000 beb4 	b.w	8005924 <Error_Handler>
 8004bbc:	200002dc 	.word	0x200002dc
 8004bc0:	40006800 	.word	0x40006800

08004bc4 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8004bc4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(canHandle->Instance==CAN1)
 8004bc6:	6802      	ldr	r2, [r0, #0]
 8004bc8:	4948      	ldr	r1, [pc, #288]	; (8004cec <HAL_CAN_MspInit+0x128>)
{
 8004bca:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bcc:	2300      	movs	r3, #0
  if(canHandle->Instance==CAN1)
 8004bce:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bd0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004bd4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004bd8:	9309      	str	r3, [sp, #36]	; 0x24
  if(canHandle->Instance==CAN1)
 8004bda:	d040      	beq.n	8004c5e <HAL_CAN_MspInit+0x9a>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
  else if(canHandle->Instance==CAN2)
 8004bdc:	4944      	ldr	r1, [pc, #272]	; (8004cf0 <HAL_CAN_MspInit+0x12c>)
 8004bde:	428a      	cmp	r2, r1
 8004be0:	d001      	beq.n	8004be6 <HAL_CAN_MspInit+0x22>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8004be2:	b00a      	add	sp, #40	; 0x28
 8004be4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_CAN2_CLK_ENABLE();
 8004be6:	4a43      	ldr	r2, [pc, #268]	; (8004cf4 <HAL_CAN_MspInit+0x130>)
 8004be8:	9302      	str	r3, [sp, #8]
 8004bea:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004bec:	4c42      	ldr	r4, [pc, #264]	; (8004cf8 <HAL_CAN_MspInit+0x134>)
    __HAL_RCC_CAN2_CLK_ENABLE();
 8004bee:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8004bf2:	6411      	str	r1, [r2, #64]	; 0x40
 8004bf4:	6c10      	ldr	r0, [r2, #64]	; 0x40
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004bf6:	6821      	ldr	r1, [r4, #0]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8004bf8:	f000 6080 	and.w	r0, r0, #67108864	; 0x4000000
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004bfc:	3101      	adds	r1, #1
    __HAL_RCC_CAN2_CLK_ENABLE();
 8004bfe:	9002      	str	r0, [sp, #8]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004c00:	2901      	cmp	r1, #1
    __HAL_RCC_CAN2_CLK_ENABLE();
 8004c02:	9802      	ldr	r0, [sp, #8]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004c04:	6021      	str	r1, [r4, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004c06:	d065      	beq.n	8004cd4 <HAL_CAN_MspInit+0x110>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c08:	2400      	movs	r4, #0
 8004c0a:	4b3a      	ldr	r3, [pc, #232]	; (8004cf4 <HAL_CAN_MspInit+0x130>)
 8004c0c:	9404      	str	r4, [sp, #16]
 8004c0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c10:	483a      	ldr	r0, [pc, #232]	; (8004cfc <HAL_CAN_MspInit+0x138>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c12:	f042 0202 	orr.w	r2, r2, #2
 8004c16:	631a      	str	r2, [r3, #48]	; 0x30
 8004c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004c20:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c24:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c26:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004c28:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c2a:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8004c2c:	2309      	movs	r3, #9
 8004c2e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c32:	9e04      	ldr	r6, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c34:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c36:	f7fc fddb 	bl	80017f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8004c3a:	4622      	mov	r2, r4
 8004c3c:	4621      	mov	r1, r4
 8004c3e:	2040      	movs	r0, #64	; 0x40
 8004c40:	f7fc fd66 	bl	8001710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8004c44:	2040      	movs	r0, #64	; 0x40
 8004c46:	f7fc fd99 	bl	800177c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8004c4a:	4622      	mov	r2, r4
 8004c4c:	4621      	mov	r1, r4
 8004c4e:	2041      	movs	r0, #65	; 0x41
 8004c50:	f7fc fd5e 	bl	8001710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8004c54:	2041      	movs	r0, #65	; 0x41
 8004c56:	f7fc fd91 	bl	800177c <HAL_NVIC_EnableIRQ>
}
 8004c5a:	b00a      	add	sp, #40	; 0x28
 8004c5c:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004c5e:	4926      	ldr	r1, [pc, #152]	; (8004cf8 <HAL_CAN_MspInit+0x134>)
 8004c60:	680a      	ldr	r2, [r1, #0]
 8004c62:	3201      	adds	r2, #1
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004c64:	2a01      	cmp	r2, #1
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004c66:	600a      	str	r2, [r1, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004c68:	d028      	beq.n	8004cbc <HAL_CAN_MspInit+0xf8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c6a:	2400      	movs	r4, #0
 8004c6c:	4b21      	ldr	r3, [pc, #132]	; (8004cf4 <HAL_CAN_MspInit+0x130>)
 8004c6e:	9401      	str	r4, [sp, #4]
 8004c70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c72:	4823      	ldr	r0, [pc, #140]	; (8004d00 <HAL_CAN_MspInit+0x13c>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c74:	f042 0208 	orr.w	r2, r2, #8
 8004c78:	631a      	str	r2, [r3, #48]	; 0x30
 8004c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7c:	f003 0308 	and.w	r3, r3, #8
 8004c80:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c82:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004c84:	2303      	movs	r3, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004c86:	2209      	movs	r2, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c88:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004c8a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c8c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004c8e:	9209      	str	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c90:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c92:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c94:	f7fc fdac 	bl	80017f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8004c98:	4622      	mov	r2, r4
 8004c9a:	4621      	mov	r1, r4
 8004c9c:	2014      	movs	r0, #20
 8004c9e:	f7fc fd37 	bl	8001710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8004ca2:	2014      	movs	r0, #20
 8004ca4:	f7fc fd6a 	bl	800177c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8004ca8:	4622      	mov	r2, r4
 8004caa:	4621      	mov	r1, r4
 8004cac:	2015      	movs	r0, #21
 8004cae:	f7fc fd2f 	bl	8001710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8004cb2:	2015      	movs	r0, #21
 8004cb4:	f7fc fd62 	bl	800177c <HAL_NVIC_EnableIRQ>
}
 8004cb8:	b00a      	add	sp, #40	; 0x28
 8004cba:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004cbc:	4a0d      	ldr	r2, [pc, #52]	; (8004cf4 <HAL_CAN_MspInit+0x130>)
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004cc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004cc6:	6413      	str	r3, [r2, #64]	; 0x40
 8004cc8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cce:	9300      	str	r3, [sp, #0]
 8004cd0:	9b00      	ldr	r3, [sp, #0]
 8004cd2:	e7ca      	b.n	8004c6a <HAL_CAN_MspInit+0xa6>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004cd4:	9303      	str	r3, [sp, #12]
 8004cd6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004cd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8004cde:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce4:	9303      	str	r3, [sp, #12]
 8004ce6:	9b03      	ldr	r3, [sp, #12]
 8004ce8:	e78e      	b.n	8004c08 <HAL_CAN_MspInit+0x44>
 8004cea:	bf00      	nop
 8004cec:	40006400 	.word	0x40006400
 8004cf0:	40006800 	.word	0x40006800
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	20000278 	.word	0x20000278
 8004cfc:	40020400 	.word	0x40020400
 8004d00:	40020c00 	.word	0x40020c00

08004d04 <initCanFilter>:
  /* USER CODE END CAN2_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void initCanFilter() {
 8004d04:	b510      	push	{r4, lr}
 8004d06:	b08a      	sub	sp, #40	; 0x28
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8004d08:	2400      	movs	r4, #0
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8004d0a:	2301      	movs	r3, #1
	sFilterConfig.FilterMaskIdLow = 0x0000;
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
	sFilterConfig.FilterActivation = ENABLE;
	sFilterConfig.SlaveStartFilterBank = 0;

	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8004d0c:	4669      	mov	r1, sp
 8004d0e:	480a      	ldr	r0, [pc, #40]	; (8004d38 <initCanFilter+0x34>)
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8004d10:	9404      	str	r4, [sp, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8004d12:	e9cd 3307 	strd	r3, r3, [sp, #28]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8004d16:	e9cd 4405 	strd	r4, r4, [sp, #20]
	sFilterConfig.FilterIdLow = 0x0000;
 8004d1a:	e9cd 4400 	strd	r4, r4, [sp]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8004d1e:	e9cd 4402 	strd	r4, r4, [sp, #8]
	sFilterConfig.SlaveStartFilterBank = 0;
 8004d22:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8004d24:	f7fc fa04 	bl	8001130 <HAL_CAN_ConfigFilter>

	sFilterConfig.SlaveStartFilterBank = 0;
	sFilterConfig.FilterBank = 0;

	HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig);
 8004d28:	4669      	mov	r1, sp
 8004d2a:	4804      	ldr	r0, [pc, #16]	; (8004d3c <initCanFilter+0x38>)
	sFilterConfig.SlaveStartFilterBank = 0;
 8004d2c:	9409      	str	r4, [sp, #36]	; 0x24
	sFilterConfig.FilterBank = 0;
 8004d2e:	9405      	str	r4, [sp, #20]
	HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig);
 8004d30:	f7fc f9fe 	bl	8001130 <HAL_CAN_ConfigFilter>
}
 8004d34:	b00a      	add	sp, #40	; 0x28
 8004d36:	bd10      	pop	{r4, pc}
 8004d38:	20000304 	.word	0x20000304
 8004d3c:	200002dc 	.word	0x200002dc

08004d40 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d44:	2400      	movs	r4, #0
{
 8004d46:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d48:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8004d4c:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d50:	4b58      	ldr	r3, [pc, #352]	; (8004eb4 <MX_GPIO_Init+0x174>)
 8004d52:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d54:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 8004d58:	f8df a168 	ldr.w	sl, [pc, #360]	; 8004ec4 <MX_GPIO_Init+0x184>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, POWER_OUT1_Pin|POWER_OUT2_Pin|POWER_OUT3_Pin|POWER_OUT4_Pin, GPIO_PIN_RESET);
 8004d5c:	f8df 9168 	ldr.w	r9, [pc, #360]	; 8004ec8 <MX_GPIO_Init+0x188>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5 
 8004d60:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8004ecc <MX_GPIO_Init+0x18c>
                          |GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI_MPU_CS_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8004d64:	4f54      	ldr	r7, [pc, #336]	; (8004eb8 <MX_GPIO_Init+0x178>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8004d66:	4e55      	ldr	r6, [pc, #340]	; (8004ebc <MX_GPIO_Init+0x17c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d68:	f042 0210 	orr.w	r2, r2, #16
 8004d6c:	631a      	str	r2, [r3, #48]	; 0x30
 8004d6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d70:	f002 0210 	and.w	r2, r2, #16
 8004d74:	9201      	str	r2, [sp, #4]
 8004d76:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004d78:	9402      	str	r4, [sp, #8]
 8004d7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d80:	631a      	str	r2, [r3, #48]	; 0x30
 8004d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d84:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8004d88:	9202      	str	r2, [sp, #8]
 8004d8a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d8c:	9403      	str	r4, [sp, #12]
 8004d8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d90:	f042 0201 	orr.w	r2, r2, #1
 8004d94:	631a      	str	r2, [r3, #48]	; 0x30
 8004d96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d98:	f002 0201 	and.w	r2, r2, #1
 8004d9c:	9203      	str	r2, [sp, #12]
 8004d9e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004da0:	9404      	str	r4, [sp, #16]
 8004da2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004da4:	f042 0202 	orr.w	r2, r2, #2
 8004da8:	631a      	str	r2, [r3, #48]	; 0x30
 8004daa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dac:	f002 0202 	and.w	r2, r2, #2
 8004db0:	9204      	str	r2, [sp, #16]
 8004db2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004db4:	9405      	str	r4, [sp, #20]
 8004db6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004db8:	f042 0208 	orr.w	r2, r2, #8
 8004dbc:	631a      	str	r2, [r3, #48]	; 0x30
 8004dbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dc0:	f002 0208 	and.w	r2, r2, #8
 8004dc4:	9205      	str	r2, [sp, #20]
 8004dc6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004dc8:	9406      	str	r4, [sp, #24]
 8004dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dd0:	631a      	str	r2, [r3, #48]	; 0x30
 8004dd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dd4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8004dd8:	9206      	str	r2, [sp, #24]
 8004dda:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004ddc:	9407      	str	r4, [sp, #28]
 8004dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004de0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004de4:	631a      	str	r2, [r3, #48]	; 0x30
 8004de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004de8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004dec:	9207      	str	r2, [sp, #28]
 8004dee:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004df0:	9408      	str	r4, [sp, #32]
 8004df2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004df4:	f042 0220 	orr.w	r2, r2, #32
 8004df8:	631a      	str	r2, [r3, #48]	; 0x30
 8004dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfc:	f003 0320 	and.w	r3, r3, #32
 8004e00:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 8004e02:	4622      	mov	r2, r4
 8004e04:	4650      	mov	r0, sl
 8004e06:	2101      	movs	r1, #1
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004e08:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 8004e0a:	f7fc fe35 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOH, POWER_OUT1_Pin|POWER_OUT2_Pin|POWER_OUT3_Pin|POWER_OUT4_Pin, GPIO_PIN_RESET);
 8004e0e:	4622      	mov	r2, r4
 8004e10:	4648      	mov	r0, r9
 8004e12:	213c      	movs	r1, #60	; 0x3c
 8004e14:	f7fc fe30 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5 
 8004e18:	4622      	mov	r2, r4
 8004e1a:	4640      	mov	r0, r8
 8004e1c:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8004e20:	f7fc fe2a 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, SPI_MPU_CS_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8004e24:	4622      	mov	r2, r4
 8004e26:	4638      	mov	r0, r7
 8004e28:	f244 0140 	movw	r1, #16448	; 0x4040
 8004e2c:	f7fc fe24 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8004e30:	4622      	mov	r2, r4
 8004e32:	4630      	mov	r0, r6
 8004e34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e38:	f7fc fe1e 	bl	8001a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004e3c:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004e3e:	4650      	mov	r0, sl
 8004e40:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e42:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e46:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004e4a:	f7fc fcd1 	bl	80017f0 <HAL_GPIO_Init>
  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = POWER_OUT1_Pin|POWER_OUT2_Pin|POWER_OUT3_Pin|POWER_OUT4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004e4e:	4648      	mov	r0, r9
 8004e50:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = POWER_OUT1_Pin|POWER_OUT2_Pin|POWER_OUT3_Pin|POWER_OUT4_Pin;
 8004e52:	233c      	movs	r3, #60	; 0x3c
 8004e54:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e56:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e5a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004e5c:	f7fc fcc8 	bl	80017f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5 
                          |GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004e60:	4640      	mov	r0, r8
 8004e62:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5 
 8004e64:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8004e68:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e6a:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e6e:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004e70:	f7fc fcbe 	bl	80017f0 <HAL_GPIO_Init>
  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = SPI_MPU_CS_Pin|LED_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004e74:	4638      	mov	r0, r7
 8004e76:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = SPI_MPU_CS_Pin|LED_G_Pin;
 8004e78:	f244 0340 	movw	r3, #16448	; 0x4040
 8004e7c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e7e:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e82:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004e84:	f7fc fcb4 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e88:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004e8a:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e8c:	480c      	ldr	r0, [pc, #48]	; (8004ec0 <MX_GPIO_Init+0x180>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004e8e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e90:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e94:	f7fc fcac 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 8004e98:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8004e9c:	a909      	add	r1, sp, #36	; 0x24
 8004e9e:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ea0:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ea4:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = LED_R_Pin;
 8004ea6:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8004ea8:	f7fc fca2 	bl	80017f0 <HAL_GPIO_Init>

}
 8004eac:	b00e      	add	sp, #56	; 0x38
 8004eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	40021400 	.word	0x40021400
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	40020400 	.word	0x40020400
 8004ec4:	40022000 	.word	0x40022000
 8004ec8:	40021c00 	.word	0x40021c00
 8004ecc:	40021800 	.word	0x40021800

08004ed0 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch) {
 8004ed0:	b500      	push	{lr}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	a902      	add	r1, sp, #8
HAL_UART_Transmit(&huart7, &ch, 1, 1);
 8004ed6:	2301      	movs	r3, #1
void __io_putchar(uint8_t ch) {
 8004ed8:	f801 0d01 	strb.w	r0, [r1, #-1]!
HAL_UART_Transmit(&huart7, &ch, 1, 1);
 8004edc:	461a      	mov	r2, r3
 8004ede:	4803      	ldr	r0, [pc, #12]	; (8004eec <__io_putchar+0x1c>)
 8004ee0:	f7fd ff56 	bl	8002d90 <HAL_UART_Transmit>
}
 8004ee4:	b003      	add	sp, #12
 8004ee6:	f85d fb04 	ldr.w	pc, [sp], #4
 8004eea:	bf00      	nop
 8004eec:	200006d0 	.word	0x200006d0

08004ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004ef0:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004ef2:	2300      	movs	r3, #0
{
 8004ef4:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004ef6:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8004efa:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004efe:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004f02:	e9cd 3306 	strd	r3, r3, [sp, #24]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f06:	4920      	ldr	r1, [pc, #128]	; (8004f88 <SystemClock_Config+0x98>)
 8004f08:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004f0a:	9303      	str	r3, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f0c:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f0e:	4a1f      	ldr	r2, [pc, #124]	; (8004f8c <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f10:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8004f14:	6408      	str	r0, [r1, #64]	; 0x40
 8004f16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004f18:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8004f1c:	9101      	str	r1, [sp, #4]
 8004f1e:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f20:	9302      	str	r3, [sp, #8]
 8004f22:	6813      	ldr	r3, [r2, #0]
 8004f24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f28:	6013      	str	r3, [r2, #0]
 8004f2a:	6813      	ldr	r3, [r2, #0]
 8004f2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f30:	9302      	str	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004f32:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004f34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004f38:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f3c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 6;
 8004f3e:	2106      	movs	r1, #6
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004f40:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004f42:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004f44:	22a8      	movs	r2, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004f46:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004f48:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f4a:	a808      	add	r0, sp, #32
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f4c:	9d02      	ldr	r5, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f4e:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004f50:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004f52:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004f56:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f58:	f7fc fd9a 	bl	8001a90 <HAL_RCC_OscConfig>
 8004f5c:	b100      	cbz	r0, 8004f60 <SystemClock_Config+0x70>
 8004f5e:	e7fe      	b.n	8004f5e <SystemClock_Config+0x6e>
 8004f60:	4603      	mov	r3, r0
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f62:	260f      	movs	r6, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004f64:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004f68:	f44f 5280 	mov.w	r2, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004f6c:	a803      	add	r0, sp, #12
 8004f6e:	2105      	movs	r1, #5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f70:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f72:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f74:	9603      	str	r6, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004f76:	e9cd 5206 	strd	r5, r2, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004f7a:	f7fc ff79 	bl	8001e70 <HAL_RCC_ClockConfig>
 8004f7e:	b100      	cbz	r0, 8004f82 <SystemClock_Config+0x92>
 8004f80:	e7fe      	b.n	8004f80 <SystemClock_Config+0x90>
  {
    Error_Handler();
  }
}
 8004f82:	b014      	add	sp, #80	; 0x50
 8004f84:	bd70      	pop	{r4, r5, r6, pc}
 8004f86:	bf00      	nop
 8004f88:	40023800 	.word	0x40023800
 8004f8c:	40007000 	.word	0x40007000

08004f90 <HAL_UART_RxCpltCallback>:
		cnt_tim++;
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
	if (UartHandle->Instance == huart1.Instance) {	//Propo-receive Interrupts
 8004f90:	4b55      	ldr	r3, [pc, #340]	; (80050e8 <HAL_UART_RxCpltCallback+0x158>)
 8004f92:	6801      	ldr	r1, [r0, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	4291      	cmp	r1, r2
 8004f98:	d000      	beq.n	8004f9c <HAL_UART_RxCpltCallback+0xc>
 8004f9a:	4770      	bx	lr
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8004f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		HAL_UART_Receive_IT(&huart1, rcData, 18);
 8004fa0:	4c52      	ldr	r4, [pc, #328]	; (80050ec <HAL_UART_RxCpltCallback+0x15c>)
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	4621      	mov	r1, r4
 8004fa6:	2212      	movs	r2, #18
 8004fa8:	f7fd ff7a 	bl	8002ea0 <HAL_UART_Receive_IT>
		HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_1);
 8004fac:	2102      	movs	r1, #2
 8004fae:	4850      	ldr	r0, [pc, #320]	; (80050f0 <HAL_UART_RxCpltCallback+0x160>)
 8004fb0:	f7fc fd66 	bl	8001a80 <HAL_GPIO_TogglePin>
		rc.ch1 = (((rcData[1] & 0x07) << 8) | rcData[0]);
		rc.ch1 -= 1024;
		rc.ch2 = (((rcData[2] & 0x3F) << 5) | (rcData[1] >> 3));
 8004fb4:	78a1      	ldrb	r1, [r4, #2]
		rc.ch2 -= 1024;
		rc.ch3 = (((rcData[4] & 0x01) << 10) | (rcData[3] << 2) | (rcData[2] >> 6));
		rc.ch3 -= 1024;
		rc.ch4 = (((rcData[5] & 0x0F) << 7) | (rcData[4] >> 1));
		rc.ch4 -= 1024;
		rc.ch5 = (rcData[17]<<8) | rcData[16];
 8004fb6:	7c60      	ldrb	r0, [r4, #17]
 8004fb8:	f894 c010 	ldrb.w	ip, [r4, #16]
		rc.ch3 = (((rcData[4] & 0x01) << 10) | (rcData[3] << 2) | (rcData[2] >> 6));
 8004fbc:	7927      	ldrb	r7, [r4, #4]
 8004fbe:	78e5      	ldrb	r5, [r4, #3]
		rc.ch1 = (((rcData[1] & 0x07) << 8) | rcData[0]);
 8004fc0:	7862      	ldrb	r2, [r4, #1]
		rc.ch4 = (((rcData[5] & 0x0F) << 7) | (rcData[4] >> 1));
 8004fc2:	7966      	ldrb	r6, [r4, #5]
		rc.ch1 = (((rcData[1] & 0x07) << 8) | rcData[0]);
 8004fc4:	f894 e000 	ldrb.w	lr, [r4]
		rc.ch5 = 1024-rc.ch5;
		rc.sw1 = ((rcData[5] & 0x30) >> 4);
		rc.sw2 = ((rcData[5] & 0xC0) >> 6);
		rc.mouse_x = ((int16_t)rcData[6]) | ((int16_t)rcData[7] << 8);
 8004fc8:	f894 8007 	ldrb.w	r8, [r4, #7]
		rc.ch5 = (rcData[17]<<8) | rcData[16];
 8004fcc:	ea4c 2c00 	orr.w	ip, ip, r0, lsl #8
		rc.ch2 = (((rcData[2] & 0x3F) << 5) | (rcData[1] >> 3));
 8004fd0:	0148      	lsls	r0, r1, #5
		rc.ch3 = (((rcData[4] & 0x01) << 10) | (rcData[3] << 2) | (rcData[2] >> 6));
 8004fd2:	0989      	lsrs	r1, r1, #6
 8004fd4:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
 8004fd8:	02bd      	lsls	r5, r7, #10
		rc.ch1 = (((rcData[1] & 0x07) << 8) | rcData[0]);
 8004fda:	0213      	lsls	r3, r2, #8
		rc.ch3 = (((rcData[4] & 0x01) << 10) | (rcData[3] << 2) | (rcData[2] >> 6));
 8004fdc:	f405 6580 	and.w	r5, r5, #1024	; 0x400
		rc.ch2 = (((rcData[2] & 0x3F) << 5) | (rcData[1] >> 3));
 8004fe0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
		rc.ch1 = (((rcData[1] & 0x07) << 8) | rcData[0]);
 8004fe4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
		rc.ch2 = (((rcData[2] & 0x3F) << 5) | (rcData[1] >> 3));
 8004fe8:	ea40 00d2 	orr.w	r0, r0, r2, lsr #3
		rc.ch3 = (((rcData[4] & 0x01) << 10) | (rcData[3] << 2) | (rcData[2] >> 6));
 8004fec:	4329      	orrs	r1, r5
		rc.ch4 = (((rcData[5] & 0x0F) << 7) | (rcData[4] >> 1));
 8004fee:	01f2      	lsls	r2, r6, #7
		rc.mouse_x = ((int16_t)rcData[6]) | ((int16_t)rcData[7] << 8);
 8004ff0:	79a5      	ldrb	r5, [r4, #6]
		rc.ch1 = (((rcData[1] & 0x07) << 8) | rcData[0]);
 8004ff2:	ea4e 0e03 	orr.w	lr, lr, r3
		rc.ch4 = (((rcData[5] & 0x0F) << 7) | (rcData[4] >> 1));
 8004ff6:	f402 62f0 	and.w	r2, r2, #1920	; 0x780
		rc.ch1 -= 1024;
 8004ffa:	4b3e      	ldr	r3, [pc, #248]	; (80050f4 <HAL_UART_RxCpltCallback+0x164>)
		rc.ch4 = (((rcData[5] & 0x0F) << 7) | (rcData[4] >> 1));
 8004ffc:	ea42 0257 	orr.w	r2, r2, r7, lsr #1
		rc.mouse_x = ((int16_t)rcData[6]) | ((int16_t)rcData[7] << 8);
 8005000:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
		rc.ch1 -= 1024;
 8005004:	f5ae 6e80 	sub.w	lr, lr, #1024	; 0x400
		rc.ch2 -= 1024;
 8005008:	f5a0 6080 	sub.w	r0, r0, #1024	; 0x400
		rc.ch3 -= 1024;
 800500c:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
		rc.mouse_y = ((int16_t)rcData[8]) | ((int16_t)rcData[9] << 8);
		rc.mouse_z = ((int16_t)rcData[10]) | ((int16_t)rcData[11] << 8);
		rc.mouse_press_l = rcData[12];
		rc.mouse_press_r = rcData[13];
		rc.key_v = ((int16_t)rcData[14]);
 8005010:	7ba7      	ldrb	r7, [r4, #14]
		rc.ch1 -= 1024;
 8005012:	f8a3 e000 	strh.w	lr, [r3]
		rc.ch4 -= 1024;
 8005016:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
		rc.mouse_y = ((int16_t)rcData[8]) | ((int16_t)rcData[9] << 8);
 800501a:	f894 e009 	ldrb.w	lr, [r4, #9]
		rc.ch2 -= 1024;
 800501e:	8058      	strh	r0, [r3, #2]
		rc.mouse_x = ((int16_t)rcData[6]) | ((int16_t)rcData[7] << 8);
 8005020:	fa0f f885 	sxth.w	r8, r5
		rc.mouse_z = ((int16_t)rcData[10]) | ((int16_t)rcData[11] << 8);
 8005024:	7aa0      	ldrb	r0, [r4, #10]
		rc.mouse_y = ((int16_t)rcData[8]) | ((int16_t)rcData[9] << 8);
 8005026:	7a25      	ldrb	r5, [r4, #8]
		rc.ch3 -= 1024;
 8005028:	8099      	strh	r1, [r3, #4]
		rc.mouse_z = ((int16_t)rcData[10]) | ((int16_t)rcData[11] << 8);
 800502a:	7ae1      	ldrb	r1, [r4, #11]
		rc.ch4 -= 1024;
 800502c:	80da      	strh	r2, [r3, #6]
		rc.sw1 = ((rcData[5] & 0x30) >> 4);
 800502e:	f3c6 1201 	ubfx	r2, r6, #4, #2
		rc.mouse_z = ((int16_t)rcData[10]) | ((int16_t)rcData[11] << 8);
 8005032:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
		rc.sw1 = ((rcData[5] & 0x30) >> 4);
 8005036:	729a      	strb	r2, [r3, #10]
		rc.key_W =     (0b0000000000000001 & rc.key_v);
 8005038:	f007 0101 	and.w	r1, r7, #1
		rc.key_v = ((int16_t)rcData[14]);
 800503c:	b23a      	sxth	r2, r7
		rc.mouse_y = ((int16_t)rcData[8]) | ((int16_t)rcData[9] << 8);
 800503e:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
		rc.mouse_press_r = rcData[13];
 8005042:	7b67      	ldrb	r7, [r4, #13]
		rc.mouse_z = ((int16_t)rcData[10]) | ((int16_t)rcData[11] << 8);
 8005044:	8218      	strh	r0, [r3, #16]
		rc.sw2 = ((rcData[5] & 0xC0) >> 6);
 8005046:	09b6      	lsrs	r6, r6, #6
		rc.mouse_press_l = rcData[12];
 8005048:	7b20      	ldrb	r0, [r4, #12]
		rc.key_W =     (0b0000000000000001 & rc.key_v);
 800504a:	7619      	strb	r1, [r3, #24]
		rc.key_S =     (0b0000000000000010 & rc.key_v)>>1;
 800504c:	f3c2 0440 	ubfx	r4, r2, #1, #1
		rc.key_A =     (0b0000000000000100 & rc.key_v)>>2;
 8005050:	f3c2 0180 	ubfx	r1, r2, #2, #1
		rc.ch5 = 1024-rc.ch5;
 8005054:	f5cc 6c80 	rsb	ip, ip, #1024	; 0x400
		rc.mouse_y = ((int16_t)rcData[8]) | ((int16_t)rcData[9] << 8);
 8005058:	b22d      	sxth	r5, r5
		rc.key_v = ((int16_t)rcData[14]);
 800505a:	82da      	strh	r2, [r3, #22]
		rc.key_S =     (0b0000000000000010 & rc.key_v)>>1;
 800505c:	769c      	strb	r4, [r3, #26]
		rc.ch5 = 1024-rc.ch5;
 800505e:	f8a3 c008 	strh.w	ip, [r3, #8]
		rc.key_D =     (0b0000000000001000 & rc.key_v)>>3;
 8005062:	f3c2 04c0 	ubfx	r4, r2, #3, #1
		rc.sw2 = ((rcData[5] & 0xC0) >> 6);
 8005066:	72de      	strb	r6, [r3, #11]
		rc.mouse_press_r = rcData[13];
 8005068:	829f      	strh	r7, [r3, #20]
		rc.mouse_x = ((int16_t)rcData[6]) | ((int16_t)rcData[7] << 8);
 800506a:	f8a3 800c 	strh.w	r8, [r3, #12]
		rc.mouse_press_l = rcData[12];
 800506e:	8258      	strh	r0, [r3, #18]
		rc.mouse_y = ((int16_t)rcData[8]) | ((int16_t)rcData[9] << 8);
 8005070:	81dd      	strh	r5, [r3, #14]
		rc.key_A =     (0b0000000000000100 & rc.key_v)>>2;
 8005072:	7659      	strb	r1, [r3, #25]
		rc.key_Shift = (0b0000000000010000 & rc.key_v)>>4;
 8005074:	f3c2 1100 	ubfx	r1, r2, #4, #1
		rc.key_D =     (0b0000000000001000 & rc.key_v)>>3;
 8005078:	76dc      	strb	r4, [r3, #27]
		rc.key_Shift = (0b0000000000010000 & rc.key_v)>>4;
 800507a:	7799      	strb	r1, [r3, #30]
		rc.key_Ctrl =  (0b0000000000100000 & rc.key_v)>>5;
 800507c:	f3c2 1440 	ubfx	r4, r2, #5, #1
		rc.key_Q =     (0b0000000001000000 & rc.key_v)>>6;
 8005080:	f3c2 1180 	ubfx	r1, r2, #6, #1
		rc.key_E =     (0b0000000010000000 & rc.key_v)>>7;

		if(rc.sw2==2){
 8005084:	2e02      	cmp	r6, #2
		rc.key_E =     (0b0000000010000000 & rc.key_v)>>7;
 8005086:	ea4f 12e2 	mov.w	r2, r2, asr #7
		rc.key_Ctrl =  (0b0000000000100000 & rc.key_v)>>5;
 800508a:	77dc      	strb	r4, [r3, #31]
		rc.key_Q =     (0b0000000001000000 & rc.key_v)>>6;
 800508c:	7719      	strb	r1, [r3, #28]
		rc.key_E =     (0b0000000010000000 & rc.key_v)>>7;
 800508e:	775a      	strb	r2, [r3, #29]
		if(rc.sw2==2){
 8005090:	d003      	beq.n	800509a <HAL_UART_RxCpltCallback+0x10a>
			PC_mouse_x=0;
			PC_mouse_y=0;
		}
		else{
			if(rc.mouse_press_l==1){
 8005092:	2801      	cmp	r0, #1
 8005094:	d007      	beq.n	80050a6 <HAL_UART_RxCpltCallback+0x116>
			if(PC_mouse_y < -1*yaw_MAX*yaw_magnification){	PC_mouse_y = -1*yaw_MAX*yaw_magnification;}
			}
		}

	}
}
 8005096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			PC_mouse_x=0;
 800509a:	4917      	ldr	r1, [pc, #92]	; (80050f8 <HAL_UART_RxCpltCallback+0x168>)
			PC_mouse_y=0;
 800509c:	4a17      	ldr	r2, [pc, #92]	; (80050fc <HAL_UART_RxCpltCallback+0x16c>)
			PC_mouse_x=0;
 800509e:	2300      	movs	r3, #0
 80050a0:	600b      	str	r3, [r1, #0]
			PC_mouse_y=0;
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	e7f7      	b.n	8005096 <HAL_UART_RxCpltCallback+0x106>
			PC_mouse_x=PC_mouse_x+rc.mouse_x;
 80050a6:	4914      	ldr	r1, [pc, #80]	; (80050f8 <HAL_UART_RxCpltCallback+0x168>)
			PC_mouse_y=PC_mouse_y+rc.mouse_y;
 80050a8:	4a14      	ldr	r2, [pc, #80]	; (80050fc <HAL_UART_RxCpltCallback+0x16c>)
			PC_mouse_x=PC_mouse_x+rc.mouse_x;
 80050aa:	680b      	ldr	r3, [r1, #0]
			PC_mouse_y=PC_mouse_y+rc.mouse_y;
 80050ac:	6810      	ldr	r0, [r2, #0]
			PC_mouse_x=PC_mouse_x+rc.mouse_x;
 80050ae:	4443      	add	r3, r8
			PC_mouse_y=PC_mouse_y+rc.mouse_y;
 80050b0:	4405      	add	r5, r0
			if(PC_mouse_x > pich_MAX*pich_magnification){	PC_mouse_x = pich_MAX*pich_magnification;}
 80050b2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
			PC_mouse_x=PC_mouse_x+rc.mouse_x;
 80050b6:	600b      	str	r3, [r1, #0]
			PC_mouse_y=PC_mouse_y+rc.mouse_y;
 80050b8:	6015      	str	r5, [r2, #0]
			if(PC_mouse_x > pich_MAX*pich_magnification){	PC_mouse_x = pich_MAX*pich_magnification;}
 80050ba:	dc0b      	bgt.n	80050d4 <HAL_UART_RxCpltCallback+0x144>
			if(PC_mouse_x < -1*pich_MAX*pich_magnification){PC_mouse_x = -1*pich_MAX*pich_magnification;}
 80050bc:	4810      	ldr	r0, [pc, #64]	; (8005100 <HAL_UART_RxCpltCallback+0x170>)
 80050be:	4283      	cmp	r3, r0
 80050c0:	bfb8      	it	lt
 80050c2:	6008      	strlt	r0, [r1, #0]
			if(PC_mouse_y > yaw_MAX*yaw_magnification){		PC_mouse_y = pich_MAX*pich_magnification;}
 80050c4:	f640 0334 	movw	r3, #2100	; 0x834
 80050c8:	429d      	cmp	r5, r3
 80050ca:	dd07      	ble.n	80050dc <HAL_UART_RxCpltCallback+0x14c>
 80050cc:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80050d0:	6013      	str	r3, [r2, #0]
 80050d2:	e7e0      	b.n	8005096 <HAL_UART_RxCpltCallback+0x106>
			if(PC_mouse_x > pich_MAX*pich_magnification){	PC_mouse_x = pich_MAX*pich_magnification;}
 80050d4:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80050d8:	600b      	str	r3, [r1, #0]
 80050da:	e7f3      	b.n	80050c4 <HAL_UART_RxCpltCallback+0x134>
			if(PC_mouse_y < -1*yaw_MAX*yaw_magnification){	PC_mouse_y = -1*yaw_MAX*yaw_magnification;}
 80050dc:	4b09      	ldr	r3, [pc, #36]	; (8005104 <HAL_UART_RxCpltCallback+0x174>)
 80050de:	429d      	cmp	r5, r3
 80050e0:	bfb8      	it	lt
 80050e2:	6013      	strlt	r3, [r2, #0]
}
 80050e4:	e7d7      	b.n	8005096 <HAL_UART_RxCpltCallback+0x106>
 80050e6:	bf00      	nop
 80050e8:	20000710 	.word	0x20000710
 80050ec:	20000574 	.word	0x20000574
 80050f0:	40021800 	.word	0x40021800
 80050f4:	2000032c 	.word	0x2000032c
 80050f8:	20000394 	.word	0x20000394
 80050fc:	20000424 	.word	0x20000424
 8005100:	fffff6a0 	.word	0xfffff6a0
 8005104:	fffff7cc 	.word	0xfffff7cc

08005108 <HAL_CAN_RxFifo0MsgPendingCallback>:

//can fifo0 receive interrupt
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
	/* Get RX message */
	if (hcan->Instance == hcan2.Instance) {// can2 bus receive interrupt
 8005108:	4a39      	ldr	r2, [pc, #228]	; (80051f0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800510a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (hcan->Instance == hcan2.Instance) {// can2 bus receive interrupt
 800510c:	6812      	ldr	r2, [r2, #0]
 800510e:	6803      	ldr	r3, [r0, #0]
 8005110:	4293      	cmp	r3, r2
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8005112:	4604      	mov	r4, r0
	if (hcan->Instance == hcan2.Instance) {// can2 bus receive interrupt
 8005114:	d035      	beq.n	8005182 <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
		wheelFdb[id].rpm = canRxData[2] * 256 + canRxData[3];
		wheelFdb[id].torque = canRxData[4] * 256 + canRxData[5];
		wheelFdb[id].temp = canRxData[6];
		wheelFdb[id].omg = 6.28318530718 * (wheelFdb[id].rpm) / 1140.0;
	}
	if (hcan->Instance == hcan1.Instance) {// can1 bus receive interrupt
 8005116:	4a37      	ldr	r2, [pc, #220]	; (80051f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8005118:	6812      	ldr	r2, [r2, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d000      	beq.n	8005120 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>
		fdb->rpm = canRxData[2] * 256 + canRxData[3];
		fdb->torque = canRxData[4] * 256 + canRxData[5];
		fdb->temp = canRxData[6];
		fdb->omg = 6.28318530718 * (fdb->rpm) / 1140.0;
	}
}
 800511e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, canRxData);
 8005120:	4e35      	ldr	r6, [pc, #212]	; (80051f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8005122:	4d36      	ldr	r5, [pc, #216]	; (80051fc <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8005124:	4632      	mov	r2, r6
 8005126:	462b      	mov	r3, r5
 8005128:	4620      	mov	r0, r4
 800512a:	2100      	movs	r1, #0
 800512c:	f7fc f90c 	bl	8001348 <HAL_CAN_GetRxMessage>
 8005130:	6833      	ldr	r3, [r6, #0]
 8005132:	f46f 7201 	mvn.w	r2, #516	; 0x204
 8005136:	4413      	add	r3, r2
 8005138:	2b02      	cmp	r3, #2
 800513a:	d81f      	bhi.n	800517c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
 800513c:	4830      	ldr	r0, [pc, #192]	; (8005200 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
		fdb->angle = canRxData[0] * 256 + canRxData[1];
 800513e:	786a      	ldrb	r2, [r5, #1]
 8005140:	7829      	ldrb	r1, [r5, #0]
 8005142:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8005146:	eb02 2301 	add.w	r3, r2, r1, lsl #8
 800514a:	8023      	strh	r3, [r4, #0]
		fdb->rpm = canRxData[2] * 256 + canRxData[3];
 800514c:	78ab      	ldrb	r3, [r5, #2]
 800514e:	78e8      	ldrb	r0, [r5, #3]
 8005150:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8005154:	b200      	sxth	r0, r0
 8005156:	8060      	strh	r0, [r4, #2]
		fdb->torque = canRxData[4] * 256 + canRxData[5];
 8005158:	792a      	ldrb	r2, [r5, #4]
 800515a:	796b      	ldrb	r3, [r5, #5]
 800515c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005160:	80a3      	strh	r3, [r4, #4]
		fdb->temp = canRxData[6];
 8005162:	79ab      	ldrb	r3, [r5, #6]
 8005164:	80e3      	strh	r3, [r4, #6]
		fdb->omg = 6.28318530718 * (fdb->rpm) / 1140.0;
 8005166:	f7fb f9ed 	bl	8000544 <__aeabi_i2d>
 800516a:	a31f      	add	r3, pc, #124	; (adr r3, 80051e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 800516c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005170:	f7fb fa52 	bl	8000618 <__aeabi_dmul>
 8005174:	f7fb fd28 	bl	8000bc8 <__aeabi_d2f>
 8005178:	60a0      	str	r0, [r4, #8]
}
 800517a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		fdb->angle = canRxData[0] * 256 + canRxData[1];
 800517c:	2300      	movs	r3, #0
 800517e:	801b      	strh	r3, [r3, #0]
 8005180:	deff      	udf	#255	; 0xff
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, canRxData);
 8005182:	4d1e      	ldr	r5, [pc, #120]	; (80051fc <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8005184:	4e1c      	ldr	r6, [pc, #112]	; (80051f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8005186:	462b      	mov	r3, r5
 8005188:	4632      	mov	r2, r6
 800518a:	2100      	movs	r1, #0
 800518c:	f7fc f8dc 	bl	8001348 <HAL_CAN_GetRxMessage>
		int id = canRxHeader.StdId - 513;
 8005190:	6833      	ldr	r3, [r6, #0]
		wheelFdb[id].rpm = canRxData[2] * 256 + canRxData[3];
 8005192:	78aa      	ldrb	r2, [r5, #2]
 8005194:	78e8      	ldrb	r0, [r5, #3]
		wheelFdb[id].angle = canRxData[0] * 256 + canRxData[1];
 8005196:	4e1b      	ldr	r6, [pc, #108]	; (8005204 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
		wheelFdb[id].torque = canRxData[4] * 256 + canRxData[5];
 8005198:	f895 c004 	ldrb.w	ip, [r5, #4]
		wheelFdb[id].angle = canRxData[0] * 256 + canRxData[1];
 800519c:	f895 e000 	ldrb.w	lr, [r5]
 80051a0:	7869      	ldrb	r1, [r5, #1]
		int id = canRxHeader.StdId - 513;
 80051a2:	f46f 7700 	mvn.w	r7, #512	; 0x200
 80051a6:	443b      	add	r3, r7
		wheelFdb[id].angle = canRxData[0] * 256 + canRxData[1];
 80051a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80051ac:	009b      	lsls	r3, r3, #2
		wheelFdb[id].rpm = canRxData[2] * 256 + canRxData[3];
 80051ae:	eb00 2002 	add.w	r0, r0, r2, lsl #8
		wheelFdb[id].torque = canRxData[4] * 256 + canRxData[5];
 80051b2:	796a      	ldrb	r2, [r5, #5]
		wheelFdb[id].temp = canRxData[6];
 80051b4:	79af      	ldrb	r7, [r5, #6]
		wheelFdb[id].angle = canRxData[0] * 256 + canRxData[1];
 80051b6:	18f5      	adds	r5, r6, r3
		wheelFdb[id].torque = canRxData[4] * 256 + canRxData[5];
 80051b8:	eb02 220c 	add.w	r2, r2, ip, lsl #8
		wheelFdb[id].angle = canRxData[0] * 256 + canRxData[1];
 80051bc:	eb01 210e 	add.w	r1, r1, lr, lsl #8
		wheelFdb[id].rpm = canRxData[2] * 256 + canRxData[3];
 80051c0:	b200      	sxth	r0, r0
		wheelFdb[id].angle = canRxData[0] * 256 + canRxData[1];
 80051c2:	52f1      	strh	r1, [r6, r3]
		wheelFdb[id].torque = canRxData[4] * 256 + canRxData[5];
 80051c4:	80aa      	strh	r2, [r5, #4]
		wheelFdb[id].temp = canRxData[6];
 80051c6:	80ef      	strh	r7, [r5, #6]
		wheelFdb[id].rpm = canRxData[2] * 256 + canRxData[3];
 80051c8:	8068      	strh	r0, [r5, #2]
		wheelFdb[id].omg = 6.28318530718 * (wheelFdb[id].rpm) / 1140.0;
 80051ca:	f7fb f9bb 	bl	8000544 <__aeabi_i2d>
 80051ce:	a306      	add	r3, pc, #24	; (adr r3, 80051e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80051d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d4:	f7fb fa20 	bl	8000618 <__aeabi_dmul>
 80051d8:	f7fb fcf6 	bl	8000bc8 <__aeabi_d2f>
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	60a8      	str	r0, [r5, #8]
 80051e0:	e799      	b.n	8005116 <HAL_CAN_RxFifo0MsgPendingCallback+0xe>
 80051e2:	bf00      	nop
 80051e4:	f3af 8000 	nop.w
 80051e8:	bf90c83b 	.word	0xbf90c83b
 80051ec:	3f76934b 	.word	0x3f76934b
 80051f0:	200002dc 	.word	0x200002dc
 80051f4:	20000304 	.word	0x20000304
 80051f8:	20000530 	.word	0x20000530
 80051fc:	200004d8 	.word	0x200004d8
 8005200:	08009ad0 	.word	0x08009ad0
 8005204:	20000364 	.word	0x20000364

08005208 <initFriction>:
	mecanum.param.wheelbase = WHEELBASE;
	mecanum.param.rotate_x_offset = 0;
	mecanum.param.rotate_y_offset = 0;
}

void initFriction() {
 8005208:	b570      	push	{r4, r5, r6, lr}
 800520a:	4e13      	ldr	r6, [pc, #76]	; (8005258 <initFriction+0x50>)
 800520c:	f640 34b8 	movw	r4, #3000	; 0xbb8
	for(int i=0;i<3000;i++){
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1500);
 8005210:	f240 55dc 	movw	r5, #1500	; 0x5dc
 8005214:	6833      	ldr	r3, [r6, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1500);
	HAL_Delay(1);
 8005216:	2001      	movs	r0, #1
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1500);
 8005218:	635d      	str	r5, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1500);
 800521a:	641d      	str	r5, [r3, #64]	; 0x40
	HAL_Delay(1);
 800521c:	f7fb fef4 	bl	8001008 <HAL_Delay>
	mpu_get_data();
 8005220:	f7fe fdfe 	bl	8003e20 <mpu_get_data>
	imu_ahrs_update();
 8005224:	f7ff f90a 	bl	800443c <imu_ahrs_update>
	imu_attitude_update();
 8005228:	f7ff fbd2 	bl	80049d0 <imu_attitude_update>
	for(int i=0;i<3000;i++){
 800522c:	3c01      	subs	r4, #1
 800522e:	d1f1      	bne.n	8005214 <initFriction+0xc>
 8005230:	f241 3488 	movw	r4, #5000	; 0x1388
	}
	for(int i=0;i<5000;i++){
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1220);
 8005234:	f240 45c4 	movw	r5, #1220	; 0x4c4
 8005238:	6833      	ldr	r3, [r6, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1220);
	HAL_Delay(1);
 800523a:	2001      	movs	r0, #1
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1220);
 800523c:	635d      	str	r5, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1220);
 800523e:	641d      	str	r5, [r3, #64]	; 0x40
	HAL_Delay(1);
 8005240:	f7fb fee2 	bl	8001008 <HAL_Delay>
	mpu_get_data();
 8005244:	f7fe fdec 	bl	8003e20 <mpu_get_data>
	imu_ahrs_update();
 8005248:	f7ff f8f8 	bl	800443c <imu_ahrs_update>
	imu_attitude_update();
 800524c:	f7ff fbc0 	bl	80049d0 <imu_attitude_update>
	for(int i=0;i<5000;i++){
 8005250:	3c01      	subs	r4, #1
 8005252:	d1f1      	bne.n	8005238 <initFriction+0x30>
	}

}
 8005254:	bd70      	pop	{r4, r5, r6, pc}
 8005256:	bf00      	nop
 8005258:	20000650 	.word	0x20000650

0800525c <main>:
{
 800525c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8005260:	b085      	sub	sp, #20
  HAL_Init();
 8005262:	f7fb fea5 	bl	8000fb0 <HAL_Init>
  SystemClock_Config();
 8005266:	f7ff fe43 	bl	8004ef0 <SystemClock_Config>
  MX_GPIO_Init();
 800526a:	f7ff fd69 	bl	8004d40 <MX_GPIO_Init>
  MX_CAN1_Init();
 800526e:	f7ff fc69 	bl	8004b44 <MX_CAN1_Init>
  MX_CAN2_Init();
 8005272:	f7ff fc87 	bl	8004b84 <MX_CAN2_Init>
  MX_SPI5_Init();
 8005276:	f000 fd61 	bl	8005d3c <MX_SPI5_Init>
  MX_TIM1_Init();
 800527a:	f000 fe89 	bl	8005f90 <MX_TIM1_Init>
  MX_TIM6_Init();
 800527e:	f000 ff39 	bl	80060f4 <MX_TIM6_Init>
  MX_TIM12_Init();
 8005282:	f000 ff5b 	bl	800613c <MX_TIM12_Init>
  MX_UART7_Init();
 8005286:	f001 f829 	bl	80062dc <MX_UART7_Init>
  MX_UART8_Init();
 800528a:	f001 f843 	bl	8006314 <MX_UART8_Init>
  MX_USART1_UART_Init();
 800528e:	f001 f85d 	bl	800634c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8005292:	f001 f879 	bl	8006388 <MX_USART6_UART_Init>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 8005296:	2200      	movs	r2, #0
 8005298:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800529c:	4881      	ldr	r0, [pc, #516]	; (80054a4 <main+0x248>)
		wheelPID[i].outLimit = 15000.0f;
 800529e:	4d82      	ldr	r5, [pc, #520]	; (80054a8 <main+0x24c>)
  IMU_pich_set=imu.pit;
 80052a0:	4e82      	ldr	r6, [pc, #520]	; (80054ac <main+0x250>)
 80052a2:	f8df b294 	ldr.w	fp, [pc, #660]	; 8005538 <main+0x2dc>
 80052a6:	f8df a294 	ldr.w	sl, [pc, #660]	; 800553c <main+0x2e0>
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2)==1){
 80052aa:	f8df 9294 	ldr.w	r9, [pc, #660]	; 8005540 <main+0x2e4>
	   printf(" Roll:%8.3lf  Pitch:%8.3lf  Yaw:%8.3lf", IMU_rol, IMU_pich, IMU_yaw);
 80052ae:	f8df 8294 	ldr.w	r8, [pc, #660]	; 8005544 <main+0x2e8>
	   printf(" target_Pitch:%d target_Yaw:%d", target_pich,target_yaw);
 80052b2:	4f7f      	ldr	r7, [pc, #508]	; (80054b0 <main+0x254>)
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 80052b4:	f7fc fbe0 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, 1);
 80052b8:	2201      	movs	r2, #1
 80052ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80052be:	487d      	ldr	r0, [pc, #500]	; (80054b4 <main+0x258>)
 80052c0:	f7fc fbda 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 1);
 80052c4:	2201      	movs	r2, #1
 80052c6:	2102      	movs	r1, #2
 80052c8:	487b      	ldr	r0, [pc, #492]	; (80054b8 <main+0x25c>)
 80052ca:	f7fc fbd5 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 80052ce:	2201      	movs	r2, #1
 80052d0:	2104      	movs	r1, #4
 80052d2:	4879      	ldr	r0, [pc, #484]	; (80054b8 <main+0x25c>)
 80052d4:	f7fc fbd0 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 80052d8:	2201      	movs	r2, #1
 80052da:	2108      	movs	r1, #8
 80052dc:	4876      	ldr	r0, [pc, #472]	; (80054b8 <main+0x25c>)
 80052de:	f7fc fbcb 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, 1);
 80052e2:	2201      	movs	r2, #1
 80052e4:	2110      	movs	r1, #16
 80052e6:	4874      	ldr	r0, [pc, #464]	; (80054b8 <main+0x25c>)
 80052e8:	f7fc fbc6 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, 1);
 80052ec:	2201      	movs	r2, #1
 80052ee:	2120      	movs	r1, #32
 80052f0:	4871      	ldr	r0, [pc, #452]	; (80054b8 <main+0x25c>)
 80052f2:	f7fc fbc1 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, 1);
 80052f6:	2201      	movs	r2, #1
 80052f8:	2140      	movs	r1, #64	; 0x40
 80052fa:	486f      	ldr	r0, [pc, #444]	; (80054b8 <main+0x25c>)
 80052fc:	f7fc fbbc 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, 1);
 8005300:	2201      	movs	r2, #1
 8005302:	2180      	movs	r1, #128	; 0x80
 8005304:	486c      	ldr	r0, [pc, #432]	; (80054b8 <main+0x25c>)
 8005306:	f7fc fbb7 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8, 1);
 800530a:	2201      	movs	r2, #1
 800530c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005310:	4869      	ldr	r0, [pc, #420]	; (80054b8 <main+0x25c>)
 8005312:	f7fc fbb1 	bl	8001a78 <HAL_GPIO_WritePin>
  mpu_device_init();
 8005316:	f7fe feff 	bl	8004118 <mpu_device_init>
  init_quaternion();
 800531a:	f7fe ffb7 	bl	800428c <init_quaternion>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // friction wheel
 800531e:	2100      	movs	r1, #0
 8005320:	4866      	ldr	r0, [pc, #408]	; (80054bc <main+0x260>)
 8005322:	f7fd f975 	bl	8002610 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005326:	210c      	movs	r1, #12
 8005328:	4864      	ldr	r0, [pc, #400]	; (80054bc <main+0x260>)
 800532a:	f7fd f971 	bl	8002610 <HAL_TIM_PWM_Start>
  initFriction();
 800532e:	f7ff ff6b 	bl	8005208 <initFriction>
		wheelPID[i].t = 2.0f;
 8005332:	4b63      	ldr	r3, [pc, #396]	; (80054c0 <main+0x264>)

void initLoadPID() {
	loadPID.t = 2.0f;
 8005334:	4a63      	ldr	r2, [pc, #396]	; (80054c4 <main+0x268>)
	loadPID.p = 10.0f;
	loadPID.i = 0.1f*500;
	loadPID.d = 0.07f;
 8005336:	4864      	ldr	r0, [pc, #400]	; (80054c8 <main+0x26c>)
 8005338:	60d0      	str	r0, [r2, #12]
		wheelPID[i].t = 2.0f;
 800533a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	loadPID.t = 2.0f;
 800533e:	6011      	str	r1, [r2, #0]
		wheelPID[i].t = 2.0f;
 8005340:	6019      	str	r1, [r3, #0]
 8005342:	62d9      	str	r1, [r3, #44]	; 0x2c
 8005344:	6599      	str	r1, [r3, #88]	; 0x58
 8005346:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	loadPID.p = 10.0f;
 800534a:	4960      	ldr	r1, [pc, #384]	; (80054cc <main+0x270>)
		wheelPID[i].p = 6.5f;
 800534c:	4860      	ldr	r0, [pc, #384]	; (80054d0 <main+0x274>)
	loadPID.p = 10.0f;
 800534e:	6051      	str	r1, [r2, #4]
		wheelPID[i].i = 50.0f;
 8005350:	4960      	ldr	r1, [pc, #384]	; (80054d4 <main+0x278>)
	loadPID.i = 0.1f*500;
 8005352:	6091      	str	r1, [r2, #8]
		wheelPID[i].d = 0.0f;
 8005354:	2400      	movs	r4, #0
		wheelPID[i].p = 6.5f;
 8005356:	6058      	str	r0, [r3, #4]
 8005358:	6318      	str	r0, [r3, #48]	; 0x30
 800535a:	65d8      	str	r0, [r3, #92]	; 0x5c
 800535c:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
		wheelPID[i].i = 50.0f;
 8005360:	6099      	str	r1, [r3, #8]
		wheelPID[i].integralOutLimit = 500.0f;
 8005362:	485d      	ldr	r0, [pc, #372]	; (80054d8 <main+0x27c>)
		wheelPID[i].i = 50.0f;
 8005364:	6359      	str	r1, [r3, #52]	; 0x34
 8005366:	6619      	str	r1, [r3, #96]	; 0x60
 8005368:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
		wheelPID[i].differentialFilterRate = 0.9f;
 800536c:	495b      	ldr	r1, [pc, #364]	; (80054dc <main+0x280>)
 800536e:	6199      	str	r1, [r3, #24]
 8005370:	6459      	str	r1, [r3, #68]	; 0x44
 8005372:	6719      	str	r1, [r3, #112]	; 0x70
 8005374:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
		wheelPID[i].integralOutLimit = 500.0f;
 8005378:	6158      	str	r0, [r3, #20]
 800537a:	6418      	str	r0, [r3, #64]	; 0x40
 800537c:	66d8      	str	r0, [r3, #108]	; 0x6c
 800537e:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
		wheelPID[i].d = 0.0f;
 8005382:	60dc      	str	r4, [r3, #12]
	loadPID.outLimit = 30000.0f;
 8005384:	4856      	ldr	r0, [pc, #344]	; (80054e0 <main+0x284>)
		wheelPID[i].d = 0.0f;
 8005386:	639c      	str	r4, [r3, #56]	; 0x38
 8005388:	665c      	str	r4, [r3, #100]	; 0x64
 800538a:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		wheelPID[i].outLimit = 15000.0f;
 800538e:	611d      	str	r5, [r3, #16]
 8005390:	63dd      	str	r5, [r3, #60]	; 0x3c
 8005392:	669d      	str	r5, [r3, #104]	; 0x68
 8005394:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
	loadPID.integralOutLimit = 10000.0f;
 8005398:	4b52      	ldr	r3, [pc, #328]	; (80054e4 <main+0x288>)
	loadPID.outLimit = 30000.0f;
 800539a:	6110      	str	r0, [r2, #16]
	loadPID.differentialFilterRate = 0.9f;
 800539c:	6191      	str	r1, [r2, #24]
	loadPID.integralOutLimit = 10000.0f;
 800539e:	6153      	str	r3, [r2, #20]
  initCanFilter();
 80053a0:	f7ff fcb0 	bl	8004d04 <initCanFilter>
	mecanum.param.wheel_perimeter = PERIMETER;
 80053a4:	4b50      	ldr	r3, [pc, #320]	; (80054e8 <main+0x28c>)
 80053a6:	4a51      	ldr	r2, [pc, #324]	; (80054ec <main+0x290>)
	mecanum.param.wheeltrack = WHEELTRACK;
 80053a8:	4951      	ldr	r1, [pc, #324]	; (80054f0 <main+0x294>)
	mecanum.param.wheelbase = WHEELBASE;
 80053aa:	4852      	ldr	r0, [pc, #328]	; (80054f4 <main+0x298>)
	mecanum.param.wheel_perimeter = PERIMETER;
 80053ac:	601a      	str	r2, [r3, #0]
	mecanum.param.wheeltrack = WHEELTRACK;
 80053ae:	6059      	str	r1, [r3, #4]
  HAL_UART_Receive_IT(&huart1, rcData, 18);
 80053b0:	2212      	movs	r2, #18
	mecanum.param.wheelbase = WHEELBASE;
 80053b2:	6098      	str	r0, [r3, #8]
  HAL_UART_Receive_IT(&huart1, rcData, 18);
 80053b4:	4950      	ldr	r1, [pc, #320]	; (80054f8 <main+0x29c>)
 80053b6:	4851      	ldr	r0, [pc, #324]	; (80054fc <main+0x2a0>)
	mecanum.param.rotate_x_offset = 0;
 80053b8:	60dc      	str	r4, [r3, #12]
	mecanum.param.rotate_y_offset = 0;
 80053ba:	611c      	str	r4, [r3, #16]
  HAL_UART_Receive_IT(&huart1, rcData, 18);
 80053bc:	f7fd fd70 	bl	8002ea0 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80053c0:	484f      	ldr	r0, [pc, #316]	; (8005500 <main+0x2a4>)
 80053c2:	f7fd f891 	bl	80024e8 <HAL_TIM_Base_Start_IT>
  setbuf(stdout, NULL);
 80053c6:	4b4f      	ldr	r3, [pc, #316]	; (8005504 <main+0x2a8>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2100      	movs	r1, #0
 80053cc:	6898      	ldr	r0, [r3, #8]
 80053ce:	f001 fe01 	bl	8006fd4 <setbuf>
  HAL_CAN_Start(&hcan1);
 80053d2:	484d      	ldr	r0, [pc, #308]	; (8005508 <main+0x2ac>)
 80053d4:	f7fb ff32 	bl	800123c <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 80053d8:	484c      	ldr	r0, [pc, #304]	; (800550c <main+0x2b0>)
 80053da:	f7fb ff2f 	bl	800123c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80053de:	2102      	movs	r1, #2
 80053e0:	4849      	ldr	r0, [pc, #292]	; (8005508 <main+0x2ac>)
 80053e2:	f7fc f831 	bl	8001448 <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80053e6:	2102      	movs	r1, #2
 80053e8:	4848      	ldr	r0, [pc, #288]	; (800550c <main+0x2b0>)
 80053ea:	f7fc f82d 	bl	8001448 <HAL_CAN_ActivateNotification>
  HAL_GPIO_WritePin(POWER_OUT1_GPIO_Port, POWER_OUT1_Pin, 1);
 80053ee:	2201      	movs	r2, #1
 80053f0:	2104      	movs	r1, #4
 80053f2:	4847      	ldr	r0, [pc, #284]	; (8005510 <main+0x2b4>)
 80053f4:	f7fc fb40 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(POWER_OUT2_GPIO_Port, POWER_OUT2_Pin, 1);
 80053f8:	2201      	movs	r2, #1
 80053fa:	2108      	movs	r1, #8
 80053fc:	4844      	ldr	r0, [pc, #272]	; (8005510 <main+0x2b4>)
 80053fe:	f7fc fb3b 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(POWER_OUT3_GPIO_Port, POWER_OUT3_Pin, 1);
 8005402:	2201      	movs	r2, #1
 8005404:	2110      	movs	r1, #16
 8005406:	4842      	ldr	r0, [pc, #264]	; (8005510 <main+0x2b4>)
 8005408:	f7fc fb36 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(POWER_OUT4_GPIO_Port, POWER_OUT4_Pin, 1);
 800540c:	2201      	movs	r2, #1
 800540e:	2120      	movs	r1, #32
 8005410:	483f      	ldr	r0, [pc, #252]	; (8005510 <main+0x2b4>)
 8005412:	f7fc fb31 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 8005416:	2201      	movs	r2, #1
 8005418:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800541c:	4821      	ldr	r0, [pc, #132]	; (80054a4 <main+0x248>)
 800541e:	f7fc fb2b 	bl	8001a78 <HAL_GPIO_WritePin>
  IMU_pich_set=imu.pit;
 8005422:	483c      	ldr	r0, [pc, #240]	; (8005514 <main+0x2b8>)
 8005424:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8005426:	6001      	str	r1, [r0, #0]
  IMU_yaw_set=imu.yaw;
 8005428:	483b      	ldr	r0, [pc, #236]	; (8005518 <main+0x2bc>)
 800542a:	6b32      	ldr	r2, [r6, #48]	; 0x30
 800542c:	6002      	str	r2, [r0, #0]
  IMU_rol_set=imu.rol;
 800542e:	483b      	ldr	r0, [pc, #236]	; (800551c <main+0x2c0>)
 8005430:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  PC_mouse_x=0;
 8005432:	493b      	ldr	r1, [pc, #236]	; (8005520 <main+0x2c4>)
  PC_mouse_y=0;
 8005434:	4a3b      	ldr	r2, [pc, #236]	; (8005524 <main+0x2c8>)
  IMU_rol_set=imu.rol;
 8005436:	6003      	str	r3, [r0, #0]
  PC_mouse_x=0;
 8005438:	2300      	movs	r3, #0
 800543a:	600b      	str	r3, [r1, #0]
  PC_mouse_y=0;
 800543c:	6013      	str	r3, [r2, #0]
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2)==1){
 800543e:	2104      	movs	r1, #4
 8005440:	4648      	mov	r0, r9
 8005442:	f7fc fb13 	bl	8001a6c <HAL_GPIO_ReadPin>
 8005446:	2801      	cmp	r0, #1
	   printf(" Roll:%8.3lf  Pitch:%8.3lf  Yaw:%8.3lf", IMU_rol, IMU_pich, IMU_yaw);
 8005448:	f8db 0000 	ldr.w	r0, [fp]
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2)==1){
 800544c:	d108      	bne.n	8005460 <main+0x204>
		  IMU_pich_set=imu.pit;
 800544e:	4931      	ldr	r1, [pc, #196]	; (8005514 <main+0x2b8>)
 8005450:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8005452:	600b      	str	r3, [r1, #0]
		  IMU_yaw_set=imu.yaw;
 8005454:	4930      	ldr	r1, [pc, #192]	; (8005518 <main+0x2bc>)
 8005456:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8005458:	600a      	str	r2, [r1, #0]
		  IMU_rol_set=imu.rol;
 800545a:	4a30      	ldr	r2, [pc, #192]	; (800551c <main+0x2c0>)
 800545c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800545e:	6013      	str	r3, [r2, #0]
	   printf(" Roll:%8.3lf  Pitch:%8.3lf  Yaw:%8.3lf", IMU_rol, IMU_pich, IMU_yaw);
 8005460:	f7fb f882 	bl	8000568 <__aeabi_f2d>
 8005464:	4604      	mov	r4, r0
 8005466:	f8da 0000 	ldr.w	r0, [sl]
 800546a:	460d      	mov	r5, r1
 800546c:	f7fb f87c 	bl	8000568 <__aeabi_f2d>
 8005470:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005474:	4b2c      	ldr	r3, [pc, #176]	; (8005528 <main+0x2cc>)
 8005476:	6818      	ldr	r0, [r3, #0]
 8005478:	f7fb f876 	bl	8000568 <__aeabi_f2d>
 800547c:	4622      	mov	r2, r4
 800547e:	e9cd 0100 	strd	r0, r1, [sp]
 8005482:	462b      	mov	r3, r5
 8005484:	4640      	mov	r0, r8
 8005486:	f001 fd29 	bl	8006edc <iprintf>
	   printf(" target_Pitch:%d target_Yaw:%d", target_pich,target_yaw);
 800548a:	4b28      	ldr	r3, [pc, #160]	; (800552c <main+0x2d0>)
 800548c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005490:	4b27      	ldr	r3, [pc, #156]	; (8005530 <main+0x2d4>)
 8005492:	4638      	mov	r0, r7
 8005494:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005498:	f001 fd20 	bl	8006edc <iprintf>
	  printf("\r\n");
 800549c:	4825      	ldr	r0, [pc, #148]	; (8005534 <main+0x2d8>)
 800549e:	f001 fd91 	bl	8006fc4 <puts>
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2)==1){
 80054a2:	e7cc      	b.n	800543e <main+0x1e2>
 80054a4:	40021000 	.word	0x40021000
 80054a8:	466a6000 	.word	0x466a6000
 80054ac:	20000228 	.word	0x20000228
 80054b0:	08009b04 	.word	0x08009b04
 80054b4:	40021400 	.word	0x40021400
 80054b8:	40021800 	.word	0x40021800
 80054bc:	20000650 	.word	0x20000650
 80054c0:	20000428 	.word	0x20000428
 80054c4:	20000588 	.word	0x20000588
 80054c8:	3d8f5c29 	.word	0x3d8f5c29
 80054cc:	41200000 	.word	0x41200000
 80054d0:	40d00000 	.word	0x40d00000
 80054d4:	42480000 	.word	0x42480000
 80054d8:	43fa0000 	.word	0x43fa0000
 80054dc:	3f666666 	.word	0x3f666666
 80054e0:	46ea6000 	.word	0x46ea6000
 80054e4:	461c4000 	.word	0x461c4000
 80054e8:	200004e0 	.word	0x200004e0
 80054ec:	43ef0000 	.word	0x43ef0000
 80054f0:	43c50000 	.word	0x43c50000
 80054f4:	43cf8000 	.word	0x43cf8000
 80054f8:	20000574 	.word	0x20000574
 80054fc:	20000710 	.word	0x20000710
 8005500:	20000610 	.word	0x20000610
 8005504:	20000020 	.word	0x20000020
 8005508:	20000304 	.word	0x20000304
 800550c:	200002dc 	.word	0x200002dc
 8005510:	40021c00 	.word	0x40021c00
 8005514:	2000035c 	.word	0x2000035c
 8005518:	20000550 	.word	0x20000550
 800551c:	20000360 	.word	0x20000360
 8005520:	20000394 	.word	0x20000394
 8005524:	20000424 	.word	0x20000424
 8005528:	20000560 	.word	0x20000560
 800552c:	20000570 	.word	0x20000570
 8005530:	20000398 	.word	0x20000398
 8005534:	08009b24 	.word	0x08009b24
 8005538:	2000039c 	.word	0x2000039c
 800553c:	2000034c 	.word	0x2000034c
 8005540:	40020400 	.word	0x40020400
 8005544:	08009adc 	.word	0x08009adc

08005548 <Gimbal_Task>:
}


void Gimbal_Task(){
 8005548:	b570      	push	{r4, r5, r6, lr}
	int fire = 0;
	int16_t u[4];
	if (rc.mouse_press_r == 1) {
 800554a:	4c77      	ldr	r4, [pc, #476]	; (8005728 <Gimbal_Task+0x1e0>)
		fire = 1;
	} else {
		fire = 0;
	}
	DBUFF[1] = loadPID.error = -900.0f*fire*rc.sw1 - loadMotorFdb.rpm;
 800554c:	4a77      	ldr	r2, [pc, #476]	; (800572c <Gimbal_Task+0x1e4>)
 800554e:	7aa3      	ldrb	r3, [r4, #10]
 8005550:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8005554:	eddf 6a76 	vldr	s13, [pc, #472]	; 8005730 <Gimbal_Task+0x1e8>
 8005558:	4e76      	ldr	r6, [pc, #472]	; (8005734 <Gimbal_Task+0x1ec>)
 800555a:	ee07 3a10 	vmov	s14, r3
	if (rc.mouse_press_r == 1) {
 800555e:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8005562:	f1a3 0301 	sub.w	r3, r3, #1
	DBUFF[1] = loadPID.error = -900.0f*fire*rc.sw1 - loadMotorFdb.rpm;
 8005566:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	if (rc.mouse_press_r == 1) {
 800556a:	fab3 f383 	clz	r3, r3
 800556e:	095b      	lsrs	r3, r3, #5
	DBUFF[1] = loadPID.error = -900.0f*fire*rc.sw1 - loadMotorFdb.rpm;
 8005570:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005574:	ee07 2a90 	vmov	s15, r2
 8005578:	ee06 3a90 	vmov	s13, r3
 800557c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005580:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005584:	4a6c      	ldr	r2, [pc, #432]	; (8005738 <Gimbal_Task+0x1f0>)
 8005586:	eed6 7a87 	vfnms.f32	s15, s13, s14
void Gimbal_Task(){
 800558a:	b082      	sub	sp, #8
	DBUFF[3] = u[2] = pidExecute(&loadPID);
 800558c:	4610      	mov	r0, r2
	DBUFF[1] = loadPID.error = -900.0f*fire*rc.sw1 - loadMotorFdb.rpm;
 800558e:	edc2 7a0a 	vstr	s15, [r2, #40]	; 0x28
 8005592:	edc6 7a01 	vstr	s15, [r6, #4]
	DBUFF[3] = u[2] = pidExecute(&loadPID);
 8005596:	f000 fb71 	bl	8005c7c <pidExecute>
 800559a:	eebd 0ac0 	vcvt.s32.f32	s0, s0


	if(rc.sw2==2){target_yaw=0;}
 800559e:	7ae5      	ldrb	r5, [r4, #11]
	DBUFF[3] = u[2] = pidExecute(&loadPID);
 80055a0:	ee10 3a10 	vmov	r3, s0
 80055a4:	b21b      	sxth	r3, r3
 80055a6:	ee07 3a90 	vmov	s15, r3
 80055aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	if(rc.sw2==2){target_yaw=0;}
 80055ae:	2d02      	cmp	r5, #2
	DBUFF[3] = u[2] = pidExecute(&loadPID);
 80055b0:	f8ad 3004 	strh.w	r3, [sp, #4]
 80055b4:	edc6 7a03 	vstr	s15, [r6, #12]
	if(rc.sw2==2){target_yaw=0;}
 80055b8:	f000 80a2 	beq.w	8005700 <Gimbal_Task+0x1b8>
	else{
		target_yaw =(float)PC_mouse_x / yaw_magnification;
 80055bc:	4b5f      	ldr	r3, [pc, #380]	; (800573c <Gimbal_Task+0x1f4>)
 80055be:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8005740 <Gimbal_Task+0x1f8>
 80055c2:	edd3 7a00 	vldr	s15, [r3]
 80055c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055d2:	ee17 3a90 	vmov	r3, s15
 80055d6:	b21b      	sxth	r3, r3
		if(target_yaw>70){target_yaw=70;}
 80055d8:	2b46      	cmp	r3, #70	; 0x46
 80055da:	f300 8083 	bgt.w	80056e4 <Gimbal_Task+0x19c>
		if(target_yaw<-70){target_yaw=-70;}
 80055de:	f113 0f46 	cmn.w	r3, #70	; 0x46
 80055e2:	f280 8095 	bge.w	8005710 <Gimbal_Task+0x1c8>
 80055e6:	4b57      	ldr	r3, [pc, #348]	; (8005744 <Gimbal_Task+0x1fc>)
 80055e8:	f64f 72ba 	movw	r2, #65466	; 0xffba
 80055ec:	801a      	strh	r2, [r3, #0]
 80055ee:	f06f 0445 	mvn.w	r4, #69	; 0x45
	}
	yaw_now=(float)((gimbalYawFdb.angle-4096.0)/8191.0*360.0);
 80055f2:	4b55      	ldr	r3, [pc, #340]	; (8005748 <Gimbal_Task+0x200>)
 80055f4:	4e55      	ldr	r6, [pc, #340]	; (800574c <Gimbal_Task+0x204>)
 80055f6:	f9b3 0000 	ldrsh.w	r0, [r3]
 80055fa:	f7fa ffa3 	bl	8000544 <__aeabi_i2d>
 80055fe:	2200      	movs	r2, #0
 8005600:	4b53      	ldr	r3, [pc, #332]	; (8005750 <Gimbal_Task+0x208>)
 8005602:	f7fa fe51 	bl	80002a8 <__aeabi_dsub>
 8005606:	a346      	add	r3, pc, #280	; (adr r3, 8005720 <Gimbal_Task+0x1d8>)
 8005608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560c:	f7fb f804 	bl	8000618 <__aeabi_dmul>
 8005610:	f7fb fada 	bl	8000bc8 <__aeabi_d2f>
 8005614:	ee07 0a90 	vmov	s15, r0
 8005618:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800561c:	f64e 2260 	movw	r2, #60000	; 0xea60
	yaw_now=(float)((gimbalYawFdb.angle-4096.0)/8191.0*360.0);
 8005620:	ee17 3a90 	vmov	r3, s15
 8005624:	b218      	sxth	r0, r3
	u[0]=map(target_yaw-yaw_now, -180, 180, -30000, 30000);
 8005626:	1a24      	subs	r4, r4, r0
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005628:	34b4      	adds	r4, #180	; 0xb4
 800562a:	4b4a      	ldr	r3, [pc, #296]	; (8005754 <Gimbal_Task+0x20c>)
	yaw_now=(float)((gimbalYawFdb.angle-4096.0)/8191.0*360.0);
 800562c:	8030      	strh	r0, [r6, #0]
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800562e:	fb02 f204 	mul.w	r2, r2, r4
 8005632:	fb83 1302 	smull	r1, r3, r3, r2
 8005636:	1899      	adds	r1, r3, r2
 8005638:	17d3      	asrs	r3, r2, #31
 800563a:	ebc3 2321 	rsb	r3, r3, r1, asr #8
 800563e:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8005642:	3b30      	subs	r3, #48	; 0x30

	if(rc.sw2==2){target_pich=0;}
 8005644:	2d02      	cmp	r5, #2
	u[0]=map(target_yaw-yaw_now, -180, 180, -30000, 30000);
 8005646:	f8ad 3000 	strh.w	r3, [sp]
	if(rc.sw2==2){target_pich=0;}
 800564a:	d05d      	beq.n	8005708 <Gimbal_Task+0x1c0>
	else{
		target_pich=((float)PC_mouse_y / pich_magnification)-IMU_pich;
 800564c:	4a42      	ldr	r2, [pc, #264]	; (8005758 <Gimbal_Task+0x210>)
 800564e:	4b43      	ldr	r3, [pc, #268]	; (800575c <Gimbal_Task+0x214>)
 8005650:	ed92 7a00 	vldr	s14, [r2]
 8005654:	edd3 7a00 	vldr	s15, [r3]
 8005658:	eddf 6a41 	vldr	s13, [pc, #260]	; 8005760 <Gimbal_Task+0x218>
 800565c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005660:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8005664:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005668:	ee17 3a90 	vmov	r3, s15
 800566c:	b21b      	sxth	r3, r3
		if(target_pich>20){target_pich=20;}
 800566e:	2b14      	cmp	r3, #20
 8005670:	dd3c      	ble.n	80056ec <Gimbal_Task+0x1a4>
 8005672:	4b3c      	ldr	r3, [pc, #240]	; (8005764 <Gimbal_Task+0x21c>)
 8005674:	2414      	movs	r4, #20
 8005676:	801c      	strh	r4, [r3, #0]
		if(target_pich<-30){target_pich=-30;}
	}
	pich_now=(float)((gimbalPitchFdb.angle-4096.0)/8191.0*360.0)+24;
 8005678:	4b3b      	ldr	r3, [pc, #236]	; (8005768 <Gimbal_Task+0x220>)
 800567a:	4d3c      	ldr	r5, [pc, #240]	; (800576c <Gimbal_Task+0x224>)
 800567c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8005680:	f7fa ff60 	bl	8000544 <__aeabi_i2d>
 8005684:	2200      	movs	r2, #0
 8005686:	4b32      	ldr	r3, [pc, #200]	; (8005750 <Gimbal_Task+0x208>)
 8005688:	f7fa fe0e 	bl	80002a8 <__aeabi_dsub>
 800568c:	a324      	add	r3, pc, #144	; (adr r3, 8005720 <Gimbal_Task+0x1d8>)
 800568e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005692:	f7fa ffc1 	bl	8000618 <__aeabi_dmul>
 8005696:	f7fb fa97 	bl	8000bc8 <__aeabi_d2f>
 800569a:	ee07 0a10 	vmov	s14, r0
 800569e:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
 80056a2:	ee77 7a27 	vadd.f32	s15, s14, s15
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80056a6:	f247 5230 	movw	r2, #30000	; 0x7530
	pich_now=(float)((gimbalPitchFdb.angle-4096.0)/8191.0*360.0)+24;
 80056aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80056ae:	4830      	ldr	r0, [pc, #192]	; (8005770 <Gimbal_Task+0x228>)
	pich_now=(float)((gimbalPitchFdb.angle-4096.0)/8191.0*360.0)+24;
 80056b0:	ee17 3a90 	vmov	r3, s15
 80056b4:	b219      	sxth	r1, r3
	u[1]=map(target_pich-pich_now, -30, 20, -15000, 15000);
 80056b6:	1a64      	subs	r4, r4, r1
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80056b8:	341e      	adds	r4, #30
 80056ba:	fb02 f204 	mul.w	r2, r2, r4
 80056be:	fb80 3002 	smull	r3, r0, r0, r2
 80056c2:	17d3      	asrs	r3, r2, #31
 80056c4:	ebc3 1320 	rsb	r3, r3, r0, asr #4
 80056c8:	f5a3 536a 	sub.w	r3, r3, #14976	; 0x3a80
 80056cc:	3b18      	subs	r3, #24


	u[3]=0;
 80056ce:	2200      	movs	r2, #0
	driveGimbalMotors(u);
 80056d0:	4668      	mov	r0, sp
	pich_now=(float)((gimbalPitchFdb.angle-4096.0)/8191.0*360.0)+24;
 80056d2:	8029      	strh	r1, [r5, #0]
	u[1]=map(target_pich-pich_now, -30, 20, -15000, 15000);
 80056d4:	f8ad 3002 	strh.w	r3, [sp, #2]
	u[3]=0;
 80056d8:	f8ad 2006 	strh.w	r2, [sp, #6]
	driveGimbalMotors(u);
 80056dc:	f000 fa8e 	bl	8005bfc <driveGimbalMotors>

}
 80056e0:	b002      	add	sp, #8
 80056e2:	bd70      	pop	{r4, r5, r6, pc}
		if(target_yaw>70){target_yaw=70;}
 80056e4:	4b17      	ldr	r3, [pc, #92]	; (8005744 <Gimbal_Task+0x1fc>)
 80056e6:	2446      	movs	r4, #70	; 0x46
 80056e8:	801c      	strh	r4, [r3, #0]
 80056ea:	e782      	b.n	80055f2 <Gimbal_Task+0xaa>
		if(target_pich<-30){target_pich=-30;}
 80056ec:	f113 0f1e 	cmn.w	r3, #30
 80056f0:	da12      	bge.n	8005718 <Gimbal_Task+0x1d0>
 80056f2:	4b1c      	ldr	r3, [pc, #112]	; (8005764 <Gimbal_Task+0x21c>)
 80056f4:	f64f 72e2 	movw	r2, #65506	; 0xffe2
 80056f8:	801a      	strh	r2, [r3, #0]
 80056fa:	f06f 041d 	mvn.w	r4, #29
 80056fe:	e7bb      	b.n	8005678 <Gimbal_Task+0x130>
	if(rc.sw2==2){target_yaw=0;}
 8005700:	4b10      	ldr	r3, [pc, #64]	; (8005744 <Gimbal_Task+0x1fc>)
 8005702:	2400      	movs	r4, #0
 8005704:	801c      	strh	r4, [r3, #0]
 8005706:	e774      	b.n	80055f2 <Gimbal_Task+0xaa>
	if(rc.sw2==2){target_pich=0;}
 8005708:	4b16      	ldr	r3, [pc, #88]	; (8005764 <Gimbal_Task+0x21c>)
 800570a:	2400      	movs	r4, #0
 800570c:	801c      	strh	r4, [r3, #0]
 800570e:	e7b3      	b.n	8005678 <Gimbal_Task+0x130>
		target_yaw =(float)PC_mouse_x / yaw_magnification;
 8005710:	4a0c      	ldr	r2, [pc, #48]	; (8005744 <Gimbal_Task+0x1fc>)
 8005712:	461c      	mov	r4, r3
 8005714:	8013      	strh	r3, [r2, #0]
 8005716:	e76c      	b.n	80055f2 <Gimbal_Task+0xaa>
		target_pich=((float)PC_mouse_y / pich_magnification)-IMU_pich;
 8005718:	4a12      	ldr	r2, [pc, #72]	; (8005764 <Gimbal_Task+0x21c>)
 800571a:	461c      	mov	r4, r3
 800571c:	8013      	strh	r3, [r2, #0]
 800571e:	e7ab      	b.n	8005678 <Gimbal_Task+0x130>
 8005720:	05a02d01 	.word	0x05a02d01
 8005724:	3fa680b4 	.word	0x3fa680b4
 8005728:	2000032c 	.word	0x2000032c
 800572c:	20000554 	.word	0x20000554
 8005730:	c4610000 	.word	0xc4610000
 8005734:	200003a4 	.word	0x200003a4
 8005738:	20000588 	.word	0x20000588
 800573c:	20000394 	.word	0x20000394
 8005740:	3d088889 	.word	0x3d088889
 8005744:	20000570 	.word	0x20000570
 8005748:	20000350 	.word	0x20000350
 800574c:	20000586 	.word	0x20000586
 8005750:	40b00000 	.word	0x40b00000
 8005754:	b60b60b7 	.word	0xb60b60b7
 8005758:	20000424 	.word	0x20000424
 800575c:	20000560 	.word	0x20000560
 8005760:	3c4ccccd 	.word	0x3c4ccccd
 8005764:	20000398 	.word	0x20000398
 8005768:	20000564 	.word	0x20000564
 800576c:	200005b4 	.word	0x200005b4
 8005770:	51eb851f 	.word	0x51eb851f

08005774 <timerTask>:
void timerTask() { //call 500Hz
 8005774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	mecanum.speed.vx = (float) rc.ch4 / 660 * MAX_CHASSIS_VX_SPEED;
 8005778:	f8df 915c 	ldr.w	r9, [pc, #348]	; 80058d8 <timerTask+0x164>
	mecanum.speed.vw = -(float) rc.ch5 / 660 * MAX_CHASSIS_VW_SPEED;
 800577c:	ed9f 6a49 	vldr	s12, [pc, #292]	; 80058a4 <timerTask+0x130>
	mecanum.speed.vx = (float) rc.ch4 / 660 * MAX_CHASSIS_VX_SPEED;
 8005780:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8005784:	4f48      	ldr	r7, [pc, #288]	; (80058a8 <timerTask+0x134>)
 8005786:	4e49      	ldr	r6, [pc, #292]	; (80058ac <timerTask+0x138>)
 8005788:	4c49      	ldr	r4, [pc, #292]	; (80058b0 <timerTask+0x13c>)
 800578a:	ee06 3a90 	vmov	s13, r3
	mecanum.speed.vy = -(float) rc.ch3 / 660 * MAX_CHASSIS_VX_SPEED;
 800578e:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
 8005792:	ee07 3a10 	vmov	s14, r3
	mecanum.speed.vw = -(float) rc.ch5 / 660 * MAX_CHASSIS_VW_SPEED;
 8005796:	f9b9 3008 	ldrsh.w	r3, [r9, #8]
 800579a:	ee07 3a90 	vmov	s15, r3
	mecanum.speed.vx = (float) rc.ch4 / 660 * MAX_CHASSIS_VX_SPEED;
 800579e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	mecanum.speed.vy = -(float) rc.ch3 / 660 * MAX_CHASSIS_VX_SPEED;
 80057a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	mecanum.speed.vw = -(float) rc.ch5 / 660 * MAX_CHASSIS_VW_SPEED;
 80057a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	mecanum.speed.vx = (float) rc.ch4 / 660 * MAX_CHASSIS_VX_SPEED;
 80057aa:	eeb1 5a04 	vmov.f32	s10, #20	; 0x40a00000  5.0
	mecanum.speed.vy = -(float) rc.ch3 / 660 * MAX_CHASSIS_VX_SPEED;
 80057ae:	eef9 5a04 	vmov.f32	s11, #148	; 0xc0a00000 -5.0
	mecanum.speed.vx = (float) rc.ch4 / 660 * MAX_CHASSIS_VX_SPEED;
 80057b2:	ee66 6a85 	vmul.f32	s13, s13, s10
	mecanum.speed.vy = -(float) rc.ch3 / 660 * MAX_CHASSIS_VX_SPEED;
 80057b6:	ee27 7a25 	vmul.f32	s14, s14, s11
	mecanum.speed.vw = -(float) rc.ch5 / 660 * MAX_CHASSIS_VW_SPEED;
 80057ba:	ee67 7a86 	vmul.f32	s15, s15, s12
void timerTask() { //call 500Hz
 80057be:	b083      	sub	sp, #12
	mecanum_calculate(&mecanum);
 80057c0:	4638      	mov	r0, r7
	mecanum.speed.vx = (float) rc.ch4 / 660 * MAX_CHASSIS_VX_SPEED;
 80057c2:	edc7 6a05 	vstr	s13, [r7, #20]
	mecanum.speed.vy = -(float) rc.ch3 / 660 * MAX_CHASSIS_VX_SPEED;
 80057c6:	ed87 7a06 	vstr	s14, [r7, #24]
	mecanum.speed.vw = -(float) rc.ch5 / 660 * MAX_CHASSIS_VW_SPEED;
 80057ca:	edc7 7a07 	vstr	s15, [r7, #28]
	mecanum_calculate(&mecanum);
 80057ce:	f000 f8ab 	bl	8005928 <mecanum_calculate>
 80057d2:	f107 0540 	add.w	r5, r7, #64	; 0x40
 80057d6:	46e8      	mov	r8, sp
 80057d8:	3750      	adds	r7, #80	; 0x50
		int error = mecanum.wheel_rpm[i] - wheelFdb[i].rpm;
 80057da:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80057de:	ecb5 7a01 	vldmia	r5!, {s14}
 80057e2:	ee07 3a90 	vmov	s15, r3
 80057e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		u[i] = (int16_t) pidExecute(&(wheelPID[i]));
 80057ea:	4620      	mov	r0, r4
		int error = mecanum.wheel_rpm[i] - wheelFdb[i].rpm;
 80057ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057f0:	360c      	adds	r6, #12
 80057f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057f6:	342c      	adds	r4, #44	; 0x2c
		wheelPID[i].error = error;
 80057f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057fc:	ed44 7a01 	vstr	s15, [r4, #-4]
		u[i] = (int16_t) pidExecute(&(wheelPID[i]));
 8005800:	f000 fa3c 	bl	8005c7c <pidExecute>
 8005804:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	for (int i = 0; i < 4; i++) {
 8005808:	42bd      	cmp	r5, r7
		u[i] = (int16_t) pidExecute(&(wheelPID[i]));
 800580a:	ee10 3a10 	vmov	r3, s0
 800580e:	f828 3b02 	strh.w	r3, [r8], #2
	for (int i = 0; i < 4; i++) {
 8005812:	d1e2      	bne.n	80057da <timerTask+0x66>
	driveWheel(u);
 8005814:	4668      	mov	r0, sp
 8005816:	f000 f971 	bl	8005afc <driveWheel>
	Gimbal_Task();
 800581a:	f7ff fe95 	bl	8005548 <Gimbal_Task>

void fire_Task(){
	if(rc.sw2==1){
 800581e:	f899 300b 	ldrb.w	r3, [r9, #11]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d02f      	beq.n	8005886 <timerTask+0x112>
		}
		else{sw1_cnt++;}
	}
	else{
		sw1_cnt=1220;
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, sw1_cnt);
 8005826:	4b23      	ldr	r3, [pc, #140]	; (80058b4 <timerTask+0x140>)
		sw1_cnt=1220;
 8005828:	4923      	ldr	r1, [pc, #140]	; (80058b8 <timerTask+0x144>)
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, sw1_cnt);
 800582a:	681a      	ldr	r2, [r3, #0]
		sw1_cnt=1220;
 800582c:	f240 43c4 	movw	r3, #1220	; 0x4c4
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, sw1_cnt);
 8005830:	6353      	str	r3, [r2, #52]	; 0x34
		sw1_cnt=1220;
 8005832:	800b      	strh	r3, [r1, #0]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, sw1_cnt);
 8005834:	6413      	str	r3, [r2, #64]	; 0x40
	mpu_get_data();
 8005836:	f7fe faf3 	bl	8003e20 <mpu_get_data>
	imu_ahrs_update();
 800583a:	f7fe fdff 	bl	800443c <imu_ahrs_update>
	imu_attitude_update();
 800583e:	f7ff f8c7 	bl	80049d0 <imu_attitude_update>
	IMU_pich=imu.pit-IMU_pich_set;
 8005842:	4b1e      	ldr	r3, [pc, #120]	; (80058bc <timerTask+0x148>)
 8005844:	481e      	ldr	r0, [pc, #120]	; (80058c0 <timerTask+0x14c>)
	IMU_yaw=imu.yaw-IMU_yaw_set;
 8005846:	491f      	ldr	r1, [pc, #124]	; (80058c4 <timerTask+0x150>)
	IMU_rol=imu.rol-IMU_rol_set;
 8005848:	4a1f      	ldr	r2, [pc, #124]	; (80058c8 <timerTask+0x154>)
	IMU_yaw=imu.yaw-IMU_yaw_set;
 800584a:	edd1 5a00 	vldr	s11, [r1]
	IMU_rol=imu.rol-IMU_rol_set;
 800584e:	ed92 6a00 	vldr	s12, [r2]
	IMU_pich=imu.pit-IMU_pich_set;
 8005852:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
	IMU_yaw=imu.yaw-IMU_yaw_set;
 8005856:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
	IMU_rol=imu.rol-IMU_rol_set;
 800585a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
	IMU_pich=imu.pit-IMU_pich_set;
 800585e:	ed90 5a00 	vldr	s10, [r0]
 8005862:	491a      	ldr	r1, [pc, #104]	; (80058cc <timerTask+0x158>)
	IMU_yaw=imu.yaw-IMU_yaw_set;
 8005864:	4a1a      	ldr	r2, [pc, #104]	; (80058d0 <timerTask+0x15c>)
	IMU_rol=imu.rol-IMU_rol_set;
 8005866:	4b1b      	ldr	r3, [pc, #108]	; (80058d4 <timerTask+0x160>)
	IMU_pich=imu.pit-IMU_pich_set;
 8005868:	ee76 6ac5 	vsub.f32	s13, s13, s10
	IMU_yaw=imu.yaw-IMU_yaw_set;
 800586c:	ee37 7a65 	vsub.f32	s14, s14, s11
	IMU_rol=imu.rol-IMU_rol_set;
 8005870:	ee77 7ac6 	vsub.f32	s15, s15, s12
	IMU_pich=imu.pit-IMU_pich_set;
 8005874:	edc1 6a00 	vstr	s13, [r1]
	IMU_yaw=imu.yaw-IMU_yaw_set;
 8005878:	ed82 7a00 	vstr	s14, [r2]
	IMU_rol=imu.rol-IMU_rol_set;
 800587c:	edc3 7a00 	vstr	s15, [r3]
}
 8005880:	b003      	add	sp, #12
 8005882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, sw1_cnt);
 8005886:	490c      	ldr	r1, [pc, #48]	; (80058b8 <timerTask+0x144>)
 8005888:	4a0a      	ldr	r2, [pc, #40]	; (80058b4 <timerTask+0x140>)
 800588a:	880b      	ldrh	r3, [r1, #0]
 800588c:	6812      	ldr	r2, [r2, #0]
		if(sw1_cnt>=1400){
 800588e:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, sw1_cnt);
 8005892:	6353      	str	r3, [r2, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, sw1_cnt);
 8005894:	6413      	str	r3, [r2, #64]	; 0x40
			sw1_cnt=1400;
 8005896:	bf2c      	ite	cs
 8005898:	f44f 63af 	movcs.w	r3, #1400	; 0x578
		else{sw1_cnt++;}
 800589c:	3301      	addcc	r3, #1
 800589e:	800b      	strh	r3, [r1, #0]
 80058a0:	e7c9      	b.n	8005836 <timerTask+0xc2>
 80058a2:	bf00      	nop
 80058a4:	bee8ba2e 	.word	0xbee8ba2e
 80058a8:	200004e0 	.word	0x200004e0
 80058ac:	20000364 	.word	0x20000364
 80058b0:	20000428 	.word	0x20000428
 80058b4:	20000650 	.word	0x20000650
 80058b8:	2000001a 	.word	0x2000001a
 80058bc:	20000228 	.word	0x20000228
 80058c0:	2000035c 	.word	0x2000035c
 80058c4:	20000550 	.word	0x20000550
 80058c8:	20000360 	.word	0x20000360
 80058cc:	20000560 	.word	0x20000560
 80058d0:	2000034c 	.word	0x2000034c
 80058d4:	2000039c 	.word	0x2000039c
 80058d8:	2000032c 	.word	0x2000032c

080058dc <HAL_TIM_PeriodElapsedCallback>:
	c++;
 80058dc:	4a0d      	ldr	r2, [pc, #52]	; (8005914 <HAL_TIM_PeriodElapsedCallback+0x38>)
	if (htim->Instance == htim6.Instance) {//500Hz
 80058de:	490e      	ldr	r1, [pc, #56]	; (8005918 <HAL_TIM_PeriodElapsedCallback+0x3c>)
	c++;
 80058e0:	6813      	ldr	r3, [r2, #0]
	if (htim->Instance == htim6.Instance) {//500Hz
 80058e2:	6800      	ldr	r0, [r0, #0]
 80058e4:	6809      	ldr	r1, [r1, #0]
	c++;
 80058e6:	3301      	adds	r3, #1
	if (htim->Instance == htim6.Instance) {//500Hz
 80058e8:	4288      	cmp	r0, r1
	c++;
 80058ea:	6013      	str	r3, [r2, #0]
	if (htim->Instance == htim6.Instance) {//500Hz
 80058ec:	d000      	beq.n	80058f0 <HAL_TIM_PeriodElapsedCallback+0x14>
 80058ee:	4770      	bx	lr
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80058f0:	b510      	push	{r4, lr}
		if(cnt_tim>20){
 80058f2:	4c0a      	ldr	r4, [pc, #40]	; (800591c <HAL_TIM_PeriodElapsedCallback+0x40>)
		timerTask();
 80058f4:	f7ff ff3e 	bl	8005774 <timerTask>
		if(cnt_tim>20){
 80058f8:	7823      	ldrb	r3, [r4, #0]
 80058fa:	2b14      	cmp	r3, #20
 80058fc:	d803      	bhi.n	8005906 <HAL_TIM_PeriodElapsedCallback+0x2a>
 80058fe:	3301      	adds	r3, #1
 8005900:	b2db      	uxtb	r3, r3
		cnt_tim++;
 8005902:	7023      	strb	r3, [r4, #0]
}
 8005904:	bd10      	pop	{r4, pc}
		HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8005906:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800590a:	4805      	ldr	r0, [pc, #20]	; (8005920 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800590c:	f7fc f8b8 	bl	8001a80 <HAL_GPIO_TogglePin>
 8005910:	2301      	movs	r3, #1
 8005912:	e7f6      	b.n	8005902 <HAL_TIM_PeriodElapsedCallback+0x26>
 8005914:	2000027c 	.word	0x2000027c
 8005918:	20000610 	.word	0x20000610
 800591c:	2000054c 	.word	0x2000054c
 8005920:	40021400 	.word	0x40021400

08005924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005924:	e7fe      	b.n	8005924 <Error_Handler>
 8005926:	bf00      	nop

08005928 <mecanum_calculate>:
  static float rotate_ratio_fl;
  static float rotate_ratio_bl;
  static float rotate_ratio_br;
  static float wheel_rpm_ratio;

  rotate_ratio_fr = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 8005928:	edd0 7a01 	vldr	s15, [r0, #4]
 800592c:	edd0 6a02 	vldr	s13, [r0, #8]
 8005930:	ed90 5a03 	vldr	s10, [r0, #12]
  rotate_ratio_bl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f + mec->param.rotate_x_offset - mec->param.rotate_y_offset) / RADIAN_COEF;
  rotate_ratio_br = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f + mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;

  wheel_rpm_ratio = 60.0f / (mec->param.wheel_perimeter * MOTOR_DECELE_RATIO);

  MEC_VAL_LIMIT(mec->speed.vx, -MAX_CHASSIS_VX_SPEED, MAX_CHASSIS_VX_SPEED); //mm/s
 8005934:	edd0 4a05 	vldr	s9, [r0, #20]
 8005938:	ed9f 6a67 	vldr	s12, [pc, #412]	; 8005ad8 <mecanum_calculate+0x1b0>
  rotate_ratio_fr = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 800593c:	ed90 7a04 	vldr	s14, [r0, #16]
  wheel_rpm_ratio = 60.0f / (mec->param.wheel_perimeter * MOTOR_DECELE_RATIO);
 8005940:	ed90 2a00 	vldr	s4, [r0]
 8005944:	eddf 1a65 	vldr	s3, [pc, #404]	; 8005adc <mecanum_calculate+0x1b4>
  rotate_ratio_fr = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 8005948:	ee76 6aa7 	vadd.f32	s13, s13, s15
{
 800594c:	b430      	push	{r4, r5}
  rotate_ratio_fr = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 800594e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005952:	eef0 7a45 	vmov.f32	s15, s10
 8005956:	eed6 7aa5 	vfnms.f32	s15, s13, s11
{
 800595a:	b084      	sub	sp, #16
 800595c:	4604      	mov	r4, r0
  rotate_ratio_bl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f + mec->param.rotate_x_offset - mec->param.rotate_y_offset) / RADIAN_COEF;
 800595e:	eea6 5aa5 	vfma.f32	s10, s13, s11
  MEC_VAL_LIMIT(mec->speed.vx, -MAX_CHASSIS_VX_SPEED, MAX_CHASSIS_VX_SPEED); //mm/s
 8005962:	eef4 4ac6 	vcmpe.f32	s9, s12
 8005966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  rotate_ratio_bl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f + mec->param.rotate_x_offset - mec->param.rotate_y_offset) / RADIAN_COEF;
 800596a:	ee35 3a47 	vsub.f32	s6, s10, s14
  rotate_ratio_fr = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 800596e:	ee77 2a87 	vadd.f32	s5, s15, s14
  rotate_ratio_fl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset - mec->param.rotate_y_offset) / RADIAN_COEF;
 8005972:	ee77 3ac7 	vsub.f32	s7, s15, s14
  rotate_ratio_br = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f + mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 8005976:	ee37 5a05 	vadd.f32	s10, s14, s10
  wheel_rpm_ratio = 60.0f / (mec->param.wheel_perimeter * MOTOR_DECELE_RATIO);
 800597a:	ee81 4a82 	vdiv.f32	s8, s3, s4
  MEC_VAL_LIMIT(mec->speed.vx, -MAX_CHASSIS_VX_SPEED, MAX_CHASSIS_VX_SPEED); //mm/s
 800597e:	f200 809e 	bhi.w	8005abe <mecanum_calculate+0x196>
 8005982:	ed80 6a05 	vstr	s12, [r0, #20]
 8005986:	eef0 4a46 	vmov.f32	s9, s12
  MEC_VAL_LIMIT(mec->speed.vy, -MAX_CHASSIS_VY_SPEED, MAX_CHASSIS_VY_SPEED); //mm/s
 800598a:	edd4 7a06 	vldr	s15, [r4, #24]
 800598e:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8005ad8 <mecanum_calculate+0x1b0>
 8005992:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800599a:	f200 8084 	bhi.w	8005aa6 <mecanum_calculate+0x17e>
 800599e:	ed84 7a06 	vstr	s14, [r4, #24]
 80059a2:	eef0 7a47 	vmov.f32	s15, s14
  MEC_VAL_LIMIT(mec->speed.vw, -MAX_CHASSIS_VW_SPEED, MAX_CHASSIS_VW_SPEED); //deg/s
 80059a6:	edd4 5a07 	vldr	s11, [r4, #28]
 80059aa:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8005ae0 <mecanum_calculate+0x1b8>
 80059ae:	eef4 5ac7 	vcmpe.f32	s11, s14
 80059b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059b6:	d866      	bhi.n	8005a86 <mecanum_calculate+0x15e>
 80059b8:	eddf 5a4a 	vldr	s11, [pc, #296]	; 8005ae4 <mecanum_calculate+0x1bc>
 80059bc:	ed84 7a07 	vstr	s14, [r4, #28]
 80059c0:	ee34 7aa7 	vadd.f32	s14, s9, s15

  float wheel_rpm[4];
  float max = 0;

  wheel_rpm[0] = (-mec->speed.vx - mec->speed.vy - mec->speed.vw * rotate_ratio_fr) * wheel_rpm_ratio;
  wheel_rpm[1] = (mec->speed.vx - mec->speed.vy - mec->speed.vw * rotate_ratio_fl) * wheel_rpm_ratio;
 80059c4:	ee74 6ae7 	vsub.f32	s13, s9, s15
 80059c8:	eeb0 6a47 	vmov.f32	s12, s14
 80059cc:	eea2 6aa5 	vfma.f32	s12, s5, s11
 80059d0:	eee3 6ae5 	vfms.f32	s13, s7, s11
  wheel_rpm[2] = (mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_bl) * wheel_rpm_ratio;
 80059d4:	eea3 7a65 	vfms.f32	s14, s6, s11
 80059d8:	ee26 6a04 	vmul.f32	s12, s12, s8
  wheel_rpm[1] = (mec->speed.vx - mec->speed.vy - mec->speed.vw * rotate_ratio_fl) * wheel_rpm_ratio;
 80059dc:	ee66 6a84 	vmul.f32	s13, s13, s8
  wheel_rpm[3] = (-mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_br) * wheel_rpm_ratio;
 80059e0:	ee77 7ae4 	vsub.f32	s15, s15, s9

  //find max item
  for (uint8_t i = 0; i < 4; i++)
  {
    if (fabs(wheel_rpm[i]) > max)
 80059e4:	eef0 4ac6 	vabs.f32	s9, s12
  wheel_rpm[3] = (-mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_br) * wheel_rpm_ratio;
 80059e8:	eee5 7a65 	vfms.f32	s15, s10, s11
    if (fabs(wheel_rpm[i]) > max)
 80059ec:	eef0 5ae6 	vabs.f32	s11, s13
 80059f0:	eef4 5ae4 	vcmpe.f32	s11, s9
  wheel_rpm[2] = (mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_bl) * wheel_rpm_ratio;
 80059f4:	ee27 7a04 	vmul.f32	s14, s14, s8
 80059f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059fc:	bfb4      	ite	lt
 80059fe:	eeb0 5a64 	vmovlt.f32	s10, s9
 8005a02:	eeb0 5a65 	vmovge.f32	s10, s11
    if (fabs(wheel_rpm[i]) > max)
 8005a06:	eef0 5ac7 	vabs.f32	s11, s14
 8005a0a:	eef4 5ac5 	vcmpe.f32	s11, s10
  wheel_rpm[3] = (-mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_br) * wheel_rpm_ratio;
 8005a0e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8005a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a16:	bfb8      	it	lt
 8005a18:	eef0 5a45 	vmovlt.f32	s11, s10
    if (fabs(wheel_rpm[i]) > max)
 8005a1c:	eeb0 5ae7 	vabs.f32	s10, s15
 8005a20:	eeb4 5ae5 	vcmpe.f32	s10, s11
 8005a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      max = fabs(wheel_rpm[i]);
  }

  //equal proportion
  if (max > MAX_WHEEL_RPM)
 8005a28:	eddf 4a2f 	vldr	s9, [pc, #188]	; 8005ae8 <mecanum_calculate+0x1c0>
  wheel_rpm[1] = (mec->speed.vx - mec->speed.vy - mec->speed.vw * rotate_ratio_fl) * wheel_rpm_ratio;
 8005a2c:	edcd 6a01 	vstr	s13, [sp, #4]
 8005a30:	bfa8      	it	ge
 8005a32:	eef0 5a45 	vmovge.f32	s11, s10
  if (max > MAX_WHEEL_RPM)
 8005a36:	eef4 5ae4 	vcmpe.f32	s11, s9
 8005a3a:	eeb1 6a46 	vneg.f32	s12, s12
 8005a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  wheel_rpm[2] = (mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_bl) * wheel_rpm_ratio;
 8005a42:	ed8d 7a02 	vstr	s14, [sp, #8]
  wheel_rpm[0] = (-mec->speed.vx - mec->speed.vy - mec->speed.vw * rotate_ratio_fr) * wheel_rpm_ratio;
 8005a46:	ed8d 6a00 	vstr	s12, [sp]
  wheel_rpm[3] = (-mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_br) * wheel_rpm_ratio;
 8005a4a:	edcd 7a03 	vstr	s15, [sp, #12]
  if (max > MAX_WHEEL_RPM)
 8005a4e:	dd11      	ble.n	8005a74 <mecanum_calculate+0x14c>
  {
    float rate = MAX_WHEEL_RPM / max;
 8005a50:	ee84 5aa5 	vdiv.f32	s10, s9, s11
    for (uint8_t i = 0; i < 4; i++)
      wheel_rpm[i] *= rate;
 8005a54:	ee26 6a05 	vmul.f32	s12, s12, s10
 8005a58:	ee66 6a85 	vmul.f32	s13, s13, s10
 8005a5c:	ee27 7a05 	vmul.f32	s14, s14, s10
 8005a60:	ee67 7a85 	vmul.f32	s15, s15, s10
 8005a64:	ed8d 6a00 	vstr	s12, [sp]
 8005a68:	edcd 6a01 	vstr	s13, [sp, #4]
 8005a6c:	ed8d 7a02 	vstr	s14, [sp, #8]
 8005a70:	edcd 7a03 	vstr	s15, [sp, #12]
  }
  memcpy(mec->wheel_rpm, wheel_rpm, 4 * sizeof(float));
 8005a74:	466d      	mov	r5, sp
 8005a76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a78:	6420      	str	r0, [r4, #64]	; 0x40
 8005a7a:	6461      	str	r1, [r4, #68]	; 0x44
 8005a7c:	64a2      	str	r2, [r4, #72]	; 0x48
 8005a7e:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8005a80:	b004      	add	sp, #16
 8005a82:	bc30      	pop	{r4, r5}
 8005a84:	4770      	bx	lr
  MEC_VAL_LIMIT(mec->speed.vw, -MAX_CHASSIS_VW_SPEED, MAX_CHASSIS_VW_SPEED); //deg/s
 8005a86:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005aec <mecanum_calculate+0x1c4>
 8005a8a:	eef4 5ac7 	vcmpe.f32	s11, s14
 8005a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a92:	bfb3      	iteet	lt
 8005a94:	ed9f 7a16 	vldrlt	s14, [pc, #88]	; 8005af0 <mecanum_calculate+0x1c8>
 8005a98:	eddf 5a16 	vldrge	s11, [pc, #88]	; 8005af4 <mecanum_calculate+0x1cc>
 8005a9c:	ed84 7a07 	vstrge	s14, [r4, #28]
 8005aa0:	ee65 5a87 	vmullt.f32	s11, s11, s14
 8005aa4:	e78c      	b.n	80059c0 <mecanum_calculate+0x98>
  MEC_VAL_LIMIT(mec->speed.vy, -MAX_CHASSIS_VY_SPEED, MAX_CHASSIS_VY_SPEED); //mm/s
 8005aa6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005af8 <mecanum_calculate+0x1d0>
 8005aaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ab2:	bfa4      	itt	ge
 8005ab4:	eef0 7a47 	vmovge.f32	s15, s14
 8005ab8:	ed84 7a06 	vstrge	s14, [r4, #24]
 8005abc:	e773      	b.n	80059a6 <mecanum_calculate+0x7e>
  MEC_VAL_LIMIT(mec->speed.vx, -MAX_CHASSIS_VX_SPEED, MAX_CHASSIS_VX_SPEED); //mm/s
 8005abe:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8005af8 <mecanum_calculate+0x1d0>
 8005ac2:	eef4 4ae7 	vcmpe.f32	s9, s15
 8005ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aca:	bfa4      	itt	ge
 8005acc:	eef0 4a67 	vmovge.f32	s9, s15
 8005ad0:	edc0 7a05 	vstrge	s15, [r0, #20]
 8005ad4:	e759      	b.n	800598a <mecanum_calculate+0x62>
 8005ad6:	bf00      	nop
 8005ad8:	c54e4000 	.word	0xc54e4000
 8005adc:	448e8000 	.word	0x448e8000
 8005ae0:	c3960000 	.word	0xc3960000
 8005ae4:	c0a78a0e 	.word	0xc0a78a0e
 8005ae8:	4604d000 	.word	0x4604d000
 8005aec:	43960000 	.word	0x43960000
 8005af0:	3c8ef783 	.word	0x3c8ef783
 8005af4:	40a78a0e 	.word	0x40a78a0e
 8005af8:	454e4000 	.word	0x454e4000

08005afc <driveWheel>:
 */
#include "motor.h"

const int CaseMotor_MaxSpeed = 30 * 256;

void driveWheel(int16_t *u) {
 8005afc:	b530      	push	{r4, r5, lr}
	header.IDE = CAN_ID_STD;
	header.DLC = 8;
	//header.TransmitGlobalTime = DISABLE;

	for (int i = 0; i < 4; i++) {
		if (CaseMotor_MaxSpeed < u[i]) {
 8005afe:	f9b0 3000 	ldrsh.w	r3, [r0]
void driveWheel(int16_t *u) {
 8005b02:	b08b      	sub	sp, #44	; 0x2c
	uint8_t TxData[8] = { 0 };
 8005b04:	2200      	movs	r2, #0
	header.StdId = 0x200;
 8005b06:	f44f 7400 	mov.w	r4, #512	; 0x200
	header.DLC = 8;
 8005b0a:	2108      	movs	r1, #8
		if (CaseMotor_MaxSpeed < u[i]) {
 8005b0c:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
	header.RTR = CAN_RTR_DATA;
 8005b10:	9207      	str	r2, [sp, #28]
	header.IDE = CAN_ID_STD;
 8005b12:	9206      	str	r2, [sp, #24]
	header.StdId = 0x200;
 8005b14:	9404      	str	r4, [sp, #16]
	header.DLC = 8;
 8005b16:	9108      	str	r1, [sp, #32]
		if (CaseMotor_MaxSpeed < u[i]) {
 8005b18:	dc08      	bgt.n	8005b2c <driveWheel+0x30>
			u[i] = CaseMotor_MaxSpeed - 1;
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 8005b1a:	f513 5ff0 	cmn.w	r3, #7680	; 0x1e00
 8005b1e:	da67      	bge.n	8005bf0 <driveWheel+0xf4>
			u[i] = -CaseMotor_MaxSpeed + 1;
 8005b20:	f24e 2301 	movw	r3, #57857	; 0xe201
 8005b24:	8003      	strh	r3, [r0, #0]
 8005b26:	2201      	movs	r2, #1
 8005b28:	21e2      	movs	r1, #226	; 0xe2
 8005b2a:	e004      	b.n	8005b36 <driveWheel+0x3a>
			u[i] = CaseMotor_MaxSpeed - 1;
 8005b2c:	f641 53ff 	movw	r3, #7679	; 0x1dff
 8005b30:	8003      	strh	r3, [r0, #0]
 8005b32:	22ff      	movs	r2, #255	; 0xff
 8005b34:	211d      	movs	r1, #29
		if (CaseMotor_MaxSpeed < u[i]) {
 8005b36:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
		}
		TxData[i * 2] = u[i] >> 8;
 8005b3a:	f88d 1008 	strb.w	r1, [sp, #8]
		if (CaseMotor_MaxSpeed < u[i]) {
 8005b3e:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
		TxData[i * 2 + 1] = u[i] & 0xFF;
 8005b42:	f88d 2009 	strb.w	r2, [sp, #9]
		if (CaseMotor_MaxSpeed < u[i]) {
 8005b46:	dc08      	bgt.n	8005b5a <driveWheel+0x5e>
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 8005b48:	f513 5ff0 	cmn.w	r3, #7680	; 0x1e00
 8005b4c:	da4c      	bge.n	8005be8 <driveWheel+0xec>
			u[i] = -CaseMotor_MaxSpeed + 1;
 8005b4e:	f24e 2301 	movw	r3, #57857	; 0xe201
 8005b52:	8043      	strh	r3, [r0, #2]
 8005b54:	2201      	movs	r2, #1
 8005b56:	21e2      	movs	r1, #226	; 0xe2
 8005b58:	e004      	b.n	8005b64 <driveWheel+0x68>
			u[i] = CaseMotor_MaxSpeed - 1;
 8005b5a:	f641 53ff 	movw	r3, #7679	; 0x1dff
 8005b5e:	8043      	strh	r3, [r0, #2]
 8005b60:	22ff      	movs	r2, #255	; 0xff
 8005b62:	211d      	movs	r1, #29
		if (CaseMotor_MaxSpeed < u[i]) {
 8005b64:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
		TxData[i * 2] = u[i] >> 8;
 8005b68:	f88d 100a 	strb.w	r1, [sp, #10]
		if (CaseMotor_MaxSpeed < u[i]) {
 8005b6c:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
		TxData[i * 2 + 1] = u[i] & 0xFF;
 8005b70:	f88d 200b 	strb.w	r2, [sp, #11]
		if (CaseMotor_MaxSpeed < u[i]) {
 8005b74:	dc08      	bgt.n	8005b88 <driveWheel+0x8c>
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 8005b76:	f513 5ff0 	cmn.w	r3, #7680	; 0x1e00
 8005b7a:	da31      	bge.n	8005be0 <driveWheel+0xe4>
			u[i] = -CaseMotor_MaxSpeed + 1;
 8005b7c:	f24e 2301 	movw	r3, #57857	; 0xe201
 8005b80:	8083      	strh	r3, [r0, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	21e2      	movs	r1, #226	; 0xe2
 8005b86:	e004      	b.n	8005b92 <driveWheel+0x96>
			u[i] = CaseMotor_MaxSpeed - 1;
 8005b88:	f641 53ff 	movw	r3, #7679	; 0x1dff
 8005b8c:	8083      	strh	r3, [r0, #4]
 8005b8e:	22ff      	movs	r2, #255	; 0xff
 8005b90:	211d      	movs	r1, #29
		if (CaseMotor_MaxSpeed < u[i]) {
 8005b92:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
		TxData[i * 2] = u[i] >> 8;
 8005b96:	f88d 100c 	strb.w	r1, [sp, #12]
		if (CaseMotor_MaxSpeed < u[i]) {
 8005b9a:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
		TxData[i * 2 + 1] = u[i] & 0xFF;
 8005b9e:	f88d 200d 	strb.w	r2, [sp, #13]
		if (CaseMotor_MaxSpeed < u[i]) {
 8005ba2:	dd10      	ble.n	8005bc6 <driveWheel+0xca>
			u[i] = CaseMotor_MaxSpeed - 1;
 8005ba4:	f641 53ff 	movw	r3, #7679	; 0x1dff
 8005ba8:	80c3      	strh	r3, [r0, #6]
 8005baa:	24ff      	movs	r4, #255	; 0xff
 8005bac:	251d      	movs	r5, #29
	}

	HAL_CAN_AddTxMessage(&hcan2, &header, TxData, &TxMailbox);
 8005bae:	aa02      	add	r2, sp, #8
 8005bb0:	ab01      	add	r3, sp, #4
 8005bb2:	a904      	add	r1, sp, #16
 8005bb4:	4810      	ldr	r0, [pc, #64]	; (8005bf8 <driveWheel+0xfc>)
		TxData[i * 2] = u[i] >> 8;
 8005bb6:	f88d 500e 	strb.w	r5, [sp, #14]
		TxData[i * 2 + 1] = u[i] & 0xFF;
 8005bba:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_CAN_AddTxMessage(&hcan2, &header, TxData, &TxMailbox);
 8005bbe:	f7fb fb6b 	bl	8001298 <HAL_CAN_AddTxMessage>

}
 8005bc2:	b00b      	add	sp, #44	; 0x2c
 8005bc4:	bd30      	pop	{r4, r5, pc}
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 8005bc6:	f513 5ff0 	cmn.w	r3, #7680	; 0x1e00
 8005bca:	da05      	bge.n	8005bd8 <driveWheel+0xdc>
			u[i] = -CaseMotor_MaxSpeed + 1;
 8005bcc:	f24e 2301 	movw	r3, #57857	; 0xe201
 8005bd0:	80c3      	strh	r3, [r0, #6]
 8005bd2:	2401      	movs	r4, #1
 8005bd4:	25e2      	movs	r5, #226	; 0xe2
 8005bd6:	e7ea      	b.n	8005bae <driveWheel+0xb2>
 8005bd8:	f3c3 2507 	ubfx	r5, r3, #8, #8
 8005bdc:	b2dc      	uxtb	r4, r3
 8005bde:	e7e6      	b.n	8005bae <driveWheel+0xb2>
 8005be0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	e7d4      	b.n	8005b92 <driveWheel+0x96>
 8005be8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8005bec:	b2da      	uxtb	r2, r3
 8005bee:	e7b9      	b.n	8005b64 <driveWheel+0x68>
 8005bf0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	e79e      	b.n	8005b36 <driveWheel+0x3a>
 8005bf8:	200002dc 	.word	0x200002dc

08005bfc <driveGimbalMotors>:

void driveGimbalMotors(int16_t *u) {
 8005bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
			u[i] = CaseMotor_MaxSpeed - 1;
		} else if (u[i] < -CaseMotor_MaxSpeed) {
			u[i] = -CaseMotor_MaxSpeed + 1;
		}
		}
		TxData[i * 2] = u[i] >> 8;
 8005bfe:	f9b0 3000 	ldrsh.w	r3, [r0]
 8005c02:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
		if (CaseMotor_MaxSpeed < u[i]) {
 8005c06:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
void driveGimbalMotors(int16_t *u) {
 8005c0a:	b08b      	sub	sp, #44	; 0x2c
	header.StdId = 0x1ff;
 8005c0c:	f240 11ff 	movw	r1, #511	; 0x1ff
		TxData[i * 2 + 1] = u[i] & 0xFF;
 8005c10:	f88d 3009 	strb.w	r3, [sp, #9]
		TxData[i * 2] = u[i] >> 8;
 8005c14:	121b      	asrs	r3, r3, #8
 8005c16:	1215      	asrs	r5, r2, #8
 8005c18:	f88d 3008 	strb.w	r3, [sp, #8]
	header.IDE = CAN_ID_STD;
 8005c1c:	2600      	movs	r6, #0
	header.DLC = 8;
 8005c1e:	2308      	movs	r3, #8
	header.IDE = CAN_ID_STD;
 8005c20:	2700      	movs	r7, #0
		if (CaseMotor_MaxSpeed < u[i]) {
 8005c22:	f5b4 5ff0 	cmp.w	r4, #7680	; 0x1e00
		TxData[i * 2 + 1] = u[i] & 0xFF;
 8005c26:	f88d 200b 	strb.w	r2, [sp, #11]
		TxData[i * 2] = u[i] >> 8;
 8005c2a:	f88d 500a 	strb.w	r5, [sp, #10]
	header.StdId = 0x1ff;
 8005c2e:	9104      	str	r1, [sp, #16]
	header.IDE = CAN_ID_STD;
 8005c30:	e9cd 6706 	strd	r6, r7, [sp, #24]
	header.DLC = 8;
 8005c34:	9308      	str	r3, [sp, #32]
		if (CaseMotor_MaxSpeed < u[i]) {
 8005c36:	dd16      	ble.n	8005c66 <driveGimbalMotors+0x6a>
			u[i] = CaseMotor_MaxSpeed - 1;
 8005c38:	f641 54ff 	movw	r4, #7679	; 0x1dff
 8005c3c:	8084      	strh	r4, [r0, #4]
		TxData[i * 2] = u[i] >> 8;
 8005c3e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
		TxData[i * 2 + 1] = u[i] & 0xFF;
 8005c42:	f88d 300f 	strb.w	r3, [sp, #15]
		TxData[i * 2] = u[i] >> 8;
 8005c46:	1219      	asrs	r1, r3, #8
 8005c48:	f88d 100e 	strb.w	r1, [sp, #14]
 8005c4c:	1225      	asrs	r5, r4, #8
	}

	HAL_CAN_AddTxMessage(&hcan1, &header, TxData, &TxMailbox);
 8005c4e:	ab01      	add	r3, sp, #4
 8005c50:	aa02      	add	r2, sp, #8
 8005c52:	a904      	add	r1, sp, #16
 8005c54:	4808      	ldr	r0, [pc, #32]	; (8005c78 <driveGimbalMotors+0x7c>)
		TxData[i * 2 + 1] = u[i] & 0xFF;
 8005c56:	f88d 400d 	strb.w	r4, [sp, #13]
		TxData[i * 2] = u[i] >> 8;
 8005c5a:	f88d 500c 	strb.w	r5, [sp, #12]
	HAL_CAN_AddTxMessage(&hcan1, &header, TxData, &TxMailbox);
 8005c5e:	f7fb fb1b 	bl	8001298 <HAL_CAN_AddTxMessage>
}
 8005c62:	b00b      	add	sp, #44	; 0x2c
 8005c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 8005c66:	f514 5ff0 	cmn.w	r4, #7680	; 0x1e00
 8005c6a:	dae8      	bge.n	8005c3e <driveGimbalMotors+0x42>
			u[i] = -CaseMotor_MaxSpeed + 1;
 8005c6c:	f24e 2401 	movw	r4, #57857	; 0xe201
 8005c70:	8084      	strh	r4, [r0, #4]
 8005c72:	b224      	sxth	r4, r4
 8005c74:	e7e3      	b.n	8005c3e <driveGimbalMotors+0x42>
 8005c76:	bf00      	nop
 8005c78:	20000304 	.word	0x20000304

08005c7c <pidExecute>:
 */
#include "pid.h"

float pidExecute(_pid_t *pid) {
	float u = 0;
	pid->integralOut += pid->i * pid->error * (pid->t/1000.0f);
 8005c7c:	ed90 6a0a 	vldr	s12, [r0, #40]	; 0x28
 8005c80:	edd0 7a02 	vldr	s15, [r0, #8]
 8005c84:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8005d34 <pidExecute+0xb8>
 8005c88:	ed90 7a07 	vldr	s14, [r0, #28]
 8005c8c:	edd0 4a00 	vldr	s9, [r0]
	if (pid->integralOutLimit < pid->integralOut) pid->integralOut = pid->integralOutLimit;
 8005c90:	edd0 6a05 	vldr	s13, [r0, #20]
	pid->integralOut += pid->i * pid->error * (pid->t/1000.0f);
 8005c94:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005c98:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005c9c:	eea4 7aa7 	vfma.f32	s14, s9, s15
	if (pid->integralOutLimit < pid->integralOut) pid->integralOut = pid->integralOutLimit;
 8005ca0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8005ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	pid->integralOut += pid->i * pid->error * (pid->t/1000.0f);
 8005ca8:	ed80 7a07 	vstr	s14, [r0, #28]
	if (pid->integralOutLimit < pid->integralOut) pid->integralOut = pid->integralOutLimit;
 8005cac:	dc06      	bgt.n	8005cbc <pidExecute+0x40>
	else if (pid->integralOut < -pid->integralOutLimit) pid->integralOut = -pid->integralOutLimit;
 8005cae:	eef1 6a66 	vneg.f32	s13, s13
 8005cb2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8005cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cba:	d538      	bpl.n	8005d2e <pidExecute+0xb2>
 8005cbc:	edc0 6a07 	vstr	s13, [r0, #28]
	pid->differentialFilter = pid->differentialFilter * pid->differentialFilterRate + (pid->d * (pid->error - pid->lastError)*(1000.0f/pid->t)) * (1 - pid->differentialFilterRate);
 8005cc0:	ed9f 3a1d 	vldr	s6, [pc, #116]	; 8005d38 <pidExecute+0xbc>
 8005cc4:	ed90 7a03 	vldr	s14, [r0, #12]
 8005cc8:	edd0 5a08 	vldr	s11, [r0, #32]
 8005ccc:	ed90 5a06 	vldr	s10, [r0, #24]
 8005cd0:	edd0 3a09 	vldr	s7, [r0, #36]	; 0x24
	u = pid->p * pid->error + pid->integralOut + pid->differentialFilter;
 8005cd4:	ed90 4a01 	vldr	s8, [r0, #4]
	if (pid->outLimit < u) u = pid->outLimit;
 8005cd8:	ed90 0a04 	vldr	s0, [r0, #16]
	pid->differentialFilter = pid->differentialFilter * pid->differentialFilterRate + (pid->d * (pid->error - pid->lastError)*(1000.0f/pid->t)) * (1 - pid->differentialFilterRate);
 8005cdc:	eec3 7a24 	vdiv.f32	s15, s6, s9
 8005ce0:	ee76 5a65 	vsub.f32	s11, s12, s11
 8005ce4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ce8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cec:	ee37 7a45 	vsub.f32	s14, s14, s10
 8005cf0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005cf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005cf8:	eee3 7a85 	vfma.f32	s15, s7, s10
	u = pid->p * pid->error + pid->integralOut + pid->differentialFilter;
 8005cfc:	eeb0 7a67 	vmov.f32	s14, s15
 8005d00:	eea6 7a04 	vfma.f32	s14, s12, s8
	pid->differentialFilter = pid->differentialFilter * pid->differentialFilterRate + (pid->d * (pid->error - pid->lastError)*(1000.0f/pid->t)) * (1 - pid->differentialFilterRate);
 8005d04:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
	u = pid->p * pid->error + pid->integralOut + pid->differentialFilter;
 8005d08:	ee77 6a26 	vadd.f32	s13, s14, s13
	if (pid->outLimit < u) u = pid->outLimit;
 8005d0c:	eeb4 0ae6 	vcmpe.f32	s0, s13
 8005d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d14:	d408      	bmi.n	8005d28 <pidExecute+0xac>
	else if (u < -pid->outLimit)u = -pid->outLimit;
 8005d16:	eeb1 0a40 	vneg.f32	s0, s0
 8005d1a:	eeb4 0ae6 	vcmpe.f32	s0, s13
 8005d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d22:	bfb8      	it	lt
 8005d24:	eeb0 0a66 	vmovlt.f32	s0, s13
	pid->lastError = pid->error;
 8005d28:	ed80 6a08 	vstr	s12, [r0, #32]
	return u;
}
 8005d2c:	4770      	bx	lr
 8005d2e:	eef0 6a47 	vmov.f32	s13, s14
 8005d32:	e7c5      	b.n	8005cc0 <pidExecute+0x44>
 8005d34:	3a83126f 	.word	0x3a83126f
 8005d38:	447a0000 	.word	0x447a0000

08005d3c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8005d3c:	b538      	push	{r3, r4, r5, lr}

  hspi5.Instance = SPI5;
 8005d3e:	4b0f      	ldr	r3, [pc, #60]	; (8005d7c <MX_SPI5_Init+0x40>)
 8005d40:	4a0f      	ldr	r2, [pc, #60]	; (8005d80 <MX_SPI5_Init+0x44>)
 8005d42:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8005d44:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8005d48:	f44f 7500 	mov.w	r5, #512	; 0x200
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8005d4c:	2430      	movs	r4, #48	; 0x30
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi5.Init.CRCPolynomial = 10;
 8005d4e:	210a      	movs	r1, #10
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8005d50:	605a      	str	r2, [r3, #4]
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8005d52:	4618      	mov	r0, r3
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8005d54:	2200      	movs	r2, #0
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8005d56:	e9c3 5406 	strd	r5, r4, [r3, #24]
  hspi5.Init.CRCPolynomial = 10;
 8005d5a:	62d9      	str	r1, [r3, #44]	; 0x2c
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8005d5c:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005d60:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8005d64:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d68:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8005d6a:	f7fc f93b 	bl	8001fe4 <HAL_SPI_Init>
 8005d6e:	b900      	cbnz	r0, 8005d72 <MX_SPI5_Init+0x36>
  {
    Error_Handler();
  }

}
 8005d70:	bd38      	pop	{r3, r4, r5, pc}
 8005d72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8005d76:	f7ff bdd5 	b.w	8005924 <Error_Handler>
 8005d7a:	bf00      	nop
 8005d7c:	200005b8 	.word	0x200005b8
 8005d80:	40015000 	.word	0x40015000

08005d84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005d84:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI5)
 8005d86:	6801      	ldr	r1, [r0, #0]
 8005d88:	4a18      	ldr	r2, [pc, #96]	; (8005dec <HAL_SPI_MspInit+0x68>)
{
 8005d8a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d8c:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI5)
 8005d8e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d90:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8005d94:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005d98:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI5)
 8005d9a:	d001      	beq.n	8005da0 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8005d9c:	b008      	add	sp, #32
 8005d9e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI5_CLK_ENABLE();
 8005da0:	f502 4268 	add.w	r2, r2, #59392	; 0xe800
 8005da4:	9301      	str	r3, [sp, #4]
 8005da6:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005da8:	4811      	ldr	r0, [pc, #68]	; (8005df0 <HAL_SPI_MspInit+0x6c>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 8005daa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005dae:	6451      	str	r1, [r2, #68]	; 0x44
 8005db0:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005db2:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
 8005db6:	9101      	str	r1, [sp, #4]
 8005db8:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005dba:	9302      	str	r3, [sp, #8]
 8005dbc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005dbe:	f043 0320 	orr.w	r3, r3, #32
 8005dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8005dc4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005dc6:	f003 0320 	and.w	r3, r3, #32
 8005dca:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dcc:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8005dce:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005dd0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 8005dd2:	f44f 7560 	mov.w	r5, #896	; 0x380
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dd6:	2402      	movs	r4, #2
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005dd8:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dda:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8005dde:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005de2:	f7fb fd05 	bl	80017f0 <HAL_GPIO_Init>
}
 8005de6:	b008      	add	sp, #32
 8005de8:	bd70      	pop	{r4, r5, r6, pc}
 8005dea:	bf00      	nop
 8005dec:	40015000 	.word	0x40015000
 8005df0:	40021400 	.word	0x40021400

08005df4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005df4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005df6:	4b0c      	ldr	r3, [pc, #48]	; (8005e28 <HAL_MspInit+0x34>)
 8005df8:	2100      	movs	r1, #0
 8005dfa:	9100      	str	r1, [sp, #0]
 8005dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e02:	645a      	str	r2, [r3, #68]	; 0x44
 8005e04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e06:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005e0a:	9200      	str	r2, [sp, #0]
 8005e0c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e0e:	9101      	str	r1, [sp, #4]
 8005e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e12:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005e16:	641a      	str	r2, [r3, #64]	; 0x40
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e1e:	9301      	str	r3, [sp, #4]
 8005e20:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e22:	b002      	add	sp, #8
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	40023800 	.word	0x40023800

08005e2c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop

08005e30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005e30:	e7fe      	b.n	8005e30 <HardFault_Handler>
 8005e32:	bf00      	nop

08005e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005e34:	e7fe      	b.n	8005e34 <MemManage_Handler>
 8005e36:	bf00      	nop

08005e38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005e38:	e7fe      	b.n	8005e38 <BusFault_Handler>
 8005e3a:	bf00      	nop

08005e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005e3c:	e7fe      	b.n	8005e3c <UsageFault_Handler>
 8005e3e:	bf00      	nop

08005e40 <SVC_Handler>:
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop

08005e44 <DebugMon_Handler>:
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop

08005e48 <PendSV_Handler>:
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop

08005e4c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005e4c:	f7fb b8ca 	b.w	8000fe4 <HAL_IncTick>

08005e50 <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005e50:	4801      	ldr	r0, [pc, #4]	; (8005e58 <CAN1_RX0_IRQHandler+0x8>)
 8005e52:	f7fb bb23 	b.w	800149c <HAL_CAN_IRQHandler>
 8005e56:	bf00      	nop
 8005e58:	20000304 	.word	0x20000304

08005e5c <CAN1_RX1_IRQHandler>:
 8005e5c:	4801      	ldr	r0, [pc, #4]	; (8005e64 <CAN1_RX1_IRQHandler+0x8>)
 8005e5e:	f7fb bb1d 	b.w	800149c <HAL_CAN_IRQHandler>
 8005e62:	bf00      	nop
 8005e64:	20000304 	.word	0x20000304

08005e68 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005e68:	4801      	ldr	r0, [pc, #4]	; (8005e70 <USART1_IRQHandler+0x8>)
 8005e6a:	f7fd b87d 	b.w	8002f68 <HAL_UART_IRQHandler>
 8005e6e:	bf00      	nop
 8005e70:	20000710 	.word	0x20000710

08005e74 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005e74:	4801      	ldr	r0, [pc, #4]	; (8005e7c <TIM6_DAC_IRQHandler+0x8>)
 8005e76:	f7fc bd07 	b.w	8002888 <HAL_TIM_IRQHandler>
 8005e7a:	bf00      	nop
 8005e7c:	20000610 	.word	0x20000610

08005e80 <CAN2_RX0_IRQHandler>:
void CAN2_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8005e80:	4801      	ldr	r0, [pc, #4]	; (8005e88 <CAN2_RX0_IRQHandler+0x8>)
 8005e82:	f7fb bb0b 	b.w	800149c <HAL_CAN_IRQHandler>
 8005e86:	bf00      	nop
 8005e88:	200002dc 	.word	0x200002dc

08005e8c <CAN2_RX1_IRQHandler>:
 8005e8c:	4801      	ldr	r0, [pc, #4]	; (8005e94 <CAN2_RX1_IRQHandler+0x8>)
 8005e8e:	f7fb bb05 	b.w	800149c <HAL_CAN_IRQHandler>
 8005e92:	bf00      	nop
 8005e94:	200002dc 	.word	0x200002dc

08005e98 <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005e98:	4801      	ldr	r0, [pc, #4]	; (8005ea0 <USART6_IRQHandler+0x8>)
 8005e9a:	f7fd b865 	b.w	8002f68 <HAL_UART_IRQHandler>
 8005e9e:	bf00      	nop
 8005ea0:	20000790 	.word	0x20000790

08005ea4 <UART8_IRQHandler>:
void UART8_IRQHandler(void)
{
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8005ea4:	4801      	ldr	r0, [pc, #4]	; (8005eac <UART8_IRQHandler+0x8>)
 8005ea6:	f7fd b85f 	b.w	8002f68 <HAL_UART_IRQHandler>
 8005eaa:	bf00      	nop
 8005eac:	20000750 	.word	0x20000750

08005eb0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8005eb0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005eb2:	1e16      	subs	r6, r2, #0
 8005eb4:	dd07      	ble.n	8005ec6 <_read+0x16>
 8005eb6:	460c      	mov	r4, r1
 8005eb8:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8005eba:	f3af 8000 	nop.w
 8005ebe:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ec2:	42a5      	cmp	r5, r4
 8005ec4:	d1f9      	bne.n	8005eba <_read+0xa>
	}

return len;
}
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	bd70      	pop	{r4, r5, r6, pc}
 8005eca:	bf00      	nop

08005ecc <_write>:

int _write(int file, char *ptr, int len)
{
 8005ecc:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ece:	1e16      	subs	r6, r2, #0
 8005ed0:	dd07      	ble.n	8005ee2 <_write+0x16>
 8005ed2:	460c      	mov	r4, r1
 8005ed4:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8005ed6:	f814 0b01 	ldrb.w	r0, [r4], #1
 8005eda:	f7fe fff9 	bl	8004ed0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ede:	42ac      	cmp	r4, r5
 8005ee0:	d1f9      	bne.n	8005ed6 <_write+0xa>
	}
	return len;
}
 8005ee2:	4630      	mov	r0, r6
 8005ee4:	bd70      	pop	{r4, r5, r6, pc}
 8005ee6:	bf00      	nop

08005ee8 <_close>:


int _close(int file)
{
	return -1;
}
 8005ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop

08005ef0 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8005ef0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ef4:	604b      	str	r3, [r1, #4]
	return 0;
}
 8005ef6:	2000      	movs	r0, #0
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop

08005efc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8005efc:	2001      	movs	r0, #1
 8005efe:	4770      	bx	lr

08005f00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8005f00:	2000      	movs	r0, #0
 8005f02:	4770      	bx	lr

08005f04 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005f04:	4a0c      	ldr	r2, [pc, #48]	; (8005f38 <_sbrk+0x34>)
{
 8005f06:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8005f08:	6813      	ldr	r3, [r2, #0]
 8005f0a:	b133      	cbz	r3, 8005f1a <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8005f0c:	4418      	add	r0, r3
 8005f0e:	4669      	mov	r1, sp
 8005f10:	4288      	cmp	r0, r1
 8005f12:	d808      	bhi.n	8005f26 <_sbrk+0x22>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8005f14:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8005f1a:	4b08      	ldr	r3, [pc, #32]	; (8005f3c <_sbrk+0x38>)
 8005f1c:	6013      	str	r3, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8005f1e:	4418      	add	r0, r3
 8005f20:	4669      	mov	r1, sp
 8005f22:	4288      	cmp	r0, r1
 8005f24:	d9f6      	bls.n	8005f14 <_sbrk+0x10>
		errno = ENOMEM;
 8005f26:	f000 fb4b 	bl	80065c0 <__errno>
 8005f2a:	230c      	movs	r3, #12
 8005f2c:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8005f2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	bd08      	pop	{r3, pc}
 8005f36:	bf00      	nop
 8005f38:	20000280 	.word	0x20000280
 8005f3c:	200007d8 	.word	0x200007d8

08005f40 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005f40:	4910      	ldr	r1, [pc, #64]	; (8005f84 <SystemInit+0x44>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005f42:	4b11      	ldr	r3, [pc, #68]	; (8005f88 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005f44:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005f48:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 8005f4c:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005f4e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8005f52:	681a      	ldr	r2, [r3, #0]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005f54:	4c0d      	ldr	r4, [pc, #52]	; (8005f8c <SystemInit+0x4c>)
  RCC->CFGR = 0x00000000;
 8005f56:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8005f58:	f042 0201 	orr.w	r2, r2, #1
 8005f5c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8005f5e:	6098      	str	r0, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005f66:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005f6a:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8005f6c:	605c      	str	r4, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005f6e:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005f70:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005f74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f78:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x00000000;
 8005f7a:	60d8      	str	r0, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005f7c:	608c      	str	r4, [r1, #8]
#endif
}
 8005f7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	e000ed00 	.word	0xe000ed00
 8005f88:	40023800 	.word	0x40023800
 8005f8c:	24003010 	.word	0x24003010

08005f90 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005f90:	b570      	push	{r4, r5, r6, lr}
  TIM_MasterConfigTypeDef sMasterConfig ;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
 8005f92:	4c51      	ldr	r4, [pc, #324]	; (80060d8 <MX_TIM1_Init+0x148>)
 8005f94:	4b51      	ldr	r3, [pc, #324]	; (80060dc <MX_TIM1_Init+0x14c>)
 8005f96:	6023      	str	r3, [r4, #0]
{
 8005f98:	b09a      	sub	sp, #104	; 0x68
  htim1.Init.Prescaler = 167;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f9a:	2300      	movs	r3, #0
  htim1.Init.Prescaler = 167;
 8005f9c:	21a7      	movs	r1, #167	; 0xa7
  htim1.Init.Period = 20000-1;
 8005f9e:	f644 621f 	movw	r2, #19999	; 0x4e1f
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005fa2:	4620      	mov	r0, r4
  htim1.Init.Prescaler = 167;
 8005fa4:	6061      	str	r1, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005fa6:	e9c4 3202 	strd	r3, r2, [r4, #8]
  htim1.Init.RepetitionCounter = 0;
 8005faa:	e9c4 3304 	strd	r3, r3, [r4, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005fae:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005fb0:	f7fc faaa 	bl	8002508 <HAL_TIM_PWM_Init>
 8005fb4:	2800      	cmp	r0, #0
 8005fb6:	d148      	bne.n	800604a <MX_TIM1_Init+0xba>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005fb8:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005fba:	a904      	add	r1, sp, #16
 8005fbc:	4846      	ldr	r0, [pc, #280]	; (80060d8 <MX_TIM1_Init+0x148>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005fbe:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005fc2:	f7fc fd0b 	bl	80029dc <HAL_TIMEx_MasterConfigSynchronization>
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	d13c      	bne.n	8006044 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 1000;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005fca:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005fcc:	2060      	movs	r0, #96	; 0x60
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005fce:	461a      	mov	r2, r3
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005fd0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005fd4:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005fd8:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005fda:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 1000;
 8005fdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005fe0:	a90b      	add	r1, sp, #44	; 0x2c
 8005fe2:	483d      	ldr	r0, [pc, #244]	; (80060d8 <MX_TIM1_Init+0x148>)
  sConfigOC.Pulse = 1000;
 8005fe4:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005fe6:	f7fc fb3d 	bl	8002664 <HAL_TIM_PWM_ConfigChannel>
 8005fea:	bb40      	cbnz	r0, 800603e <MX_TIM1_Init+0xae>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005fec:	a90b      	add	r1, sp, #44	; 0x2c
 8005fee:	220c      	movs	r2, #12
 8005ff0:	4839      	ldr	r0, [pc, #228]	; (80060d8 <MX_TIM1_Init+0x148>)
 8005ff2:	f7fc fb37 	bl	8002664 <HAL_TIM_PWM_ConfigChannel>
 8005ff6:	b9f8      	cbnz	r0, 8006038 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005ff8:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005ffa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005ffe:	a912      	add	r1, sp, #72	; 0x48
 8006000:	4835      	ldr	r0, [pc, #212]	; (80060d8 <MX_TIM1_Init+0x148>)
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006002:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006004:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.DeadTime = 0;
 8006008:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800600c:	9319      	str	r3, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800600e:	9217      	str	r2, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006010:	f7fc fd06 	bl	8002a20 <HAL_TIMEx_ConfigBreakDeadTime>
 8006014:	b108      	cbz	r0, 800601a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8006016:	f7ff fc85 	bl	8005924 <Error_Handler>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	4a2f      	ldr	r2, [pc, #188]	; (80060dc <MX_TIM1_Init+0x14c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800601e:	2400      	movs	r4, #0
  if(timHandle->Instance==TIM1)
 8006020:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006022:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8006026:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800602a:	940a      	str	r4, [sp, #40]	; 0x28
  if(timHandle->Instance==TIM1)
 800602c:	d027      	beq.n	800607e <MX_TIM1_Init+0xee>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM12)
 800602e:	4a2c      	ldr	r2, [pc, #176]	; (80060e0 <MX_TIM1_Init+0x150>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d00d      	beq.n	8006050 <MX_TIM1_Init+0xc0>
}
 8006034:	b01a      	add	sp, #104	; 0x68
 8006036:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8006038:	f7ff fc74 	bl	8005924 <Error_Handler>
 800603c:	e7dc      	b.n	8005ff8 <MX_TIM1_Init+0x68>
    Error_Handler();
 800603e:	f7ff fc71 	bl	8005924 <Error_Handler>
 8006042:	e7d3      	b.n	8005fec <MX_TIM1_Init+0x5c>
    Error_Handler();
 8006044:	f7ff fc6e 	bl	8005924 <Error_Handler>
 8006048:	e7bf      	b.n	8005fca <MX_TIM1_Init+0x3a>
    Error_Handler();
 800604a:	f7ff fc6b 	bl	8005924 <Error_Handler>
 800604e:	e7b3      	b.n	8005fb8 <MX_TIM1_Init+0x28>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
  
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006050:	4b24      	ldr	r3, [pc, #144]	; (80060e4 <MX_TIM1_Init+0x154>)
 8006052:	9403      	str	r4, [sp, #12]
 8006054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = BEEP_CTRL_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 8006056:	4824      	ldr	r0, [pc, #144]	; (80060e8 <MX_TIM1_Init+0x158>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006058:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800605c:	631a      	str	r2, [r3, #48]	; 0x30
 800605e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006064:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006066:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8006068:	2309      	movs	r3, #9
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 800606a:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = BEEP_CTRL_Pin;
 800606c:	2440      	movs	r4, #64	; 0x40
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800606e:	9d03      	ldr	r5, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8006070:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006072:	e9cd 4206 	strd	r4, r2, [sp, #24]
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 8006076:	f7fb fbbb 	bl	80017f0 <HAL_GPIO_Init>
}
 800607a:	b01a      	add	sp, #104	; 0x68
 800607c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800607e:	4b19      	ldr	r3, [pc, #100]	; (80060e4 <MX_TIM1_Init+0x154>)
 8006080:	9401      	str	r4, [sp, #4]
 8006082:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 8006084:	4819      	ldr	r0, [pc, #100]	; (80060ec <MX_TIM1_Init+0x15c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006086:	f042 0201 	orr.w	r2, r2, #1
 800608a:	631a      	str	r2, [r3, #48]	; 0x30
 800608c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800608e:	f002 0201 	and.w	r2, r2, #1
 8006092:	9201      	str	r2, [sp, #4]
 8006094:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006096:	9402      	str	r4, [sp, #8]
 8006098:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800609a:	f042 0210 	orr.w	r2, r2, #16
 800609e:	631a      	str	r2, [r3, #48]	; 0x30
 80060a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a2:	f003 0310 	and.w	r3, r3, #16
 80060a6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060a8:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = FRICTION_L_Pin;
 80060aa:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80060ae:	2501      	movs	r5, #1
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 80060b0:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80060b2:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80060b4:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060b6:	e9cd 3606 	strd	r3, r6, [sp, #24]
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 80060ba:	f7fb fb99 	bl	80017f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = FRICTION_R_Pin;
 80060be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    HAL_GPIO_Init(FRICTION_R_GPIO_Port, &GPIO_InitStruct);
 80060c2:	a906      	add	r1, sp, #24
 80060c4:	480a      	ldr	r0, [pc, #40]	; (80060f0 <MX_TIM1_Init+0x160>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060c6:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80060c8:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060ca:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Pin = FRICTION_R_Pin;
 80060ce:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(FRICTION_R_GPIO_Port, &GPIO_InitStruct);
 80060d0:	f7fb fb8e 	bl	80017f0 <HAL_GPIO_Init>
}
 80060d4:	b01a      	add	sp, #104	; 0x68
 80060d6:	bd70      	pop	{r4, r5, r6, pc}
 80060d8:	20000650 	.word	0x20000650
 80060dc:	40010000 	.word	0x40010000
 80060e0:	40001800 	.word	0x40001800
 80060e4:	40023800 	.word	0x40023800
 80060e8:	40021c00 	.word	0x40021c00
 80060ec:	40020000 	.word	0x40020000
 80060f0:	40021000 	.word	0x40021000

080060f4 <MX_TIM6_Init>:
{
 80060f4:	b510      	push	{r4, lr}
  htim6.Instance = TIM6;
 80060f6:	4b0f      	ldr	r3, [pc, #60]	; (8006134 <MX_TIM6_Init+0x40>)
 80060f8:	4a0f      	ldr	r2, [pc, #60]	; (8006138 <MX_TIM6_Init+0x44>)
 80060fa:	601a      	str	r2, [r3, #0]
{
 80060fc:	b082      	sub	sp, #8
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80060fe:	2200      	movs	r2, #0
  htim6.Init.Prescaler = 10-1;
 8006100:	2409      	movs	r4, #9
  htim6.Init.Period = 16800;
 8006102:	f244 11a0 	movw	r1, #16800	; 0x41a0
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006106:	4618      	mov	r0, r3
  htim6.Init.Prescaler = 10-1;
 8006108:	605c      	str	r4, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800610a:	e9c3 2102 	strd	r2, r1, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800610e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006110:	f7fc f966 	bl	80023e0 <HAL_TIM_Base_Init>
 8006114:	b958      	cbnz	r0, 800612e <MX_TIM6_Init+0x3a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006116:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006118:	4669      	mov	r1, sp
 800611a:	4806      	ldr	r0, [pc, #24]	; (8006134 <MX_TIM6_Init+0x40>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800611c:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006120:	f7fc fc5c 	bl	80029dc <HAL_TIMEx_MasterConfigSynchronization>
 8006124:	b108      	cbz	r0, 800612a <MX_TIM6_Init+0x36>
    Error_Handler();
 8006126:	f7ff fbfd 	bl	8005924 <Error_Handler>
}
 800612a:	b002      	add	sp, #8
 800612c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800612e:	f7ff fbf9 	bl	8005924 <Error_Handler>
 8006132:	e7f0      	b.n	8006116 <MX_TIM6_Init+0x22>
 8006134:	20000610 	.word	0x20000610
 8006138:	40001000 	.word	0x40001000

0800613c <MX_TIM12_Init>:
{
 800613c:	b570      	push	{r4, r5, r6, lr}
  htim12.Instance = TIM12;
 800613e:	4c3a      	ldr	r4, [pc, #232]	; (8006228 <MX_TIM12_Init+0xec>)
 8006140:	4b3a      	ldr	r3, [pc, #232]	; (800622c <MX_TIM12_Init+0xf0>)
 8006142:	6023      	str	r3, [r4, #0]
{
 8006144:	b090      	sub	sp, #64	; 0x40
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006146:	2300      	movs	r3, #0
  htim12.Init.Prescaler = 83;
 8006148:	2153      	movs	r1, #83	; 0x53
  htim12.Init.Period = 20000-1;
 800614a:	f644 621f 	movw	r2, #19999	; 0x4e1f
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800614e:	4620      	mov	r0, r4
  htim12.Init.Prescaler = 83;
 8006150:	6061      	str	r1, [r4, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006152:	e9c4 3202 	strd	r3, r2, [r4, #8]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006156:	6123      	str	r3, [r4, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006158:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800615a:	f7fc f9d5 	bl	8002508 <HAL_TIM_PWM_Init>
 800615e:	b9e0      	cbnz	r0, 800619a <MX_TIM12_Init+0x5e>
  sConfigOC.Pulse = 0;
 8006160:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006162:	2560      	movs	r5, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006164:	461a      	mov	r2, r3
 8006166:	a909      	add	r1, sp, #36	; 0x24
 8006168:	482f      	ldr	r0, [pc, #188]	; (8006228 <MX_TIM12_Init+0xec>)
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800616a:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800616c:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006170:	9509      	str	r5, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006172:	f7fc fa77 	bl	8002664 <HAL_TIM_PWM_ConfigChannel>
 8006176:	b108      	cbz	r0, 800617c <MX_TIM12_Init+0x40>
    Error_Handler();
 8006178:	f7ff fbd4 	bl	8005924 <Error_Handler>
  if(timHandle->Instance==TIM1)
 800617c:	6823      	ldr	r3, [r4, #0]
 800617e:	4a2c      	ldr	r2, [pc, #176]	; (8006230 <MX_TIM12_Init+0xf4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006180:	2400      	movs	r4, #0
  if(timHandle->Instance==TIM1)
 8006182:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006184:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8006188:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800618c:	9408      	str	r4, [sp, #32]
  if(timHandle->Instance==TIM1)
 800618e:	d01e      	beq.n	80061ce <MX_TIM12_Init+0x92>
  else if(timHandle->Instance==TIM12)
 8006190:	4a26      	ldr	r2, [pc, #152]	; (800622c <MX_TIM12_Init+0xf0>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d004      	beq.n	80061a0 <MX_TIM12_Init+0x64>
}
 8006196:	b010      	add	sp, #64	; 0x40
 8006198:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 800619a:	f7ff fbc3 	bl	8005924 <Error_Handler>
 800619e:	e7df      	b.n	8006160 <MX_TIM12_Init+0x24>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80061a0:	4b24      	ldr	r3, [pc, #144]	; (8006234 <MX_TIM12_Init+0xf8>)
 80061a2:	9403      	str	r4, [sp, #12]
 80061a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 80061a6:	4824      	ldr	r0, [pc, #144]	; (8006238 <MX_TIM12_Init+0xfc>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80061a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80061ac:	631a      	str	r2, [r3, #48]	; 0x30
 80061ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061b6:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80061b8:	2309      	movs	r3, #9
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 80061ba:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = BEEP_CTRL_Pin;
 80061bc:	2440      	movs	r4, #64	; 0x40
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80061be:	9d03      	ldr	r5, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80061c0:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061c2:	e9cd 4204 	strd	r4, r2, [sp, #16]
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 80061c6:	f7fb fb13 	bl	80017f0 <HAL_GPIO_Init>
}
 80061ca:	b010      	add	sp, #64	; 0x40
 80061cc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061ce:	4b19      	ldr	r3, [pc, #100]	; (8006234 <MX_TIM12_Init+0xf8>)
 80061d0:	9401      	str	r4, [sp, #4]
 80061d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 80061d4:	4819      	ldr	r0, [pc, #100]	; (800623c <MX_TIM12_Init+0x100>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061d6:	f042 0201 	orr.w	r2, r2, #1
 80061da:	631a      	str	r2, [r3, #48]	; 0x30
 80061dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061de:	f002 0201 	and.w	r2, r2, #1
 80061e2:	9201      	str	r2, [sp, #4]
 80061e4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80061e6:	9402      	str	r4, [sp, #8]
 80061e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061ea:	f042 0210 	orr.w	r2, r2, #16
 80061ee:	631a      	str	r2, [r3, #48]	; 0x30
 80061f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f2:	f003 0310 	and.w	r3, r3, #16
 80061f6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061f8:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = FRICTION_L_Pin;
 80061fa:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80061fe:	2501      	movs	r5, #1
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 8006200:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006202:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006204:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006206:	e9cd 3604 	strd	r3, r6, [sp, #16]
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 800620a:	f7fb faf1 	bl	80017f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = FRICTION_R_Pin;
 800620e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    HAL_GPIO_Init(FRICTION_R_GPIO_Port, &GPIO_InitStruct);
 8006212:	a904      	add	r1, sp, #16
 8006214:	480a      	ldr	r0, [pc, #40]	; (8006240 <MX_TIM12_Init+0x104>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006216:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006218:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800621a:	e9cd 4406 	strd	r4, r4, [sp, #24]
    GPIO_InitStruct.Pin = FRICTION_R_Pin;
 800621e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(FRICTION_R_GPIO_Port, &GPIO_InitStruct);
 8006220:	f7fb fae6 	bl	80017f0 <HAL_GPIO_Init>
}
 8006224:	b010      	add	sp, #64	; 0x40
 8006226:	bd70      	pop	{r4, r5, r6, pc}
 8006228:	20000690 	.word	0x20000690
 800622c:	40001800 	.word	0x40001800
 8006230:	40010000 	.word	0x40010000
 8006234:	40023800 	.word	0x40023800
 8006238:	40021c00 	.word	0x40021c00
 800623c:	40020000 	.word	0x40020000
 8006240:	40021000 	.word	0x40021000

08006244 <HAL_TIM_PWM_MspInit>:
  if(tim_pwmHandle->Instance==TIM1)
 8006244:	6803      	ldr	r3, [r0, #0]
 8006246:	4a12      	ldr	r2, [pc, #72]	; (8006290 <HAL_TIM_PWM_MspInit+0x4c>)
 8006248:	4293      	cmp	r3, r2
{
 800624a:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM1)
 800624c:	d012      	beq.n	8006274 <HAL_TIM_PWM_MspInit+0x30>
  else if(tim_pwmHandle->Instance==TIM12)
 800624e:	4a11      	ldr	r2, [pc, #68]	; (8006294 <HAL_TIM_PWM_MspInit+0x50>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d001      	beq.n	8006258 <HAL_TIM_PWM_MspInit+0x14>
}
 8006254:	b002      	add	sp, #8
 8006256:	4770      	bx	lr
    __HAL_RCC_TIM12_CLK_ENABLE();
 8006258:	4b0f      	ldr	r3, [pc, #60]	; (8006298 <HAL_TIM_PWM_MspInit+0x54>)
 800625a:	2200      	movs	r2, #0
 800625c:	9201      	str	r2, [sp, #4]
 800625e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006264:	641a      	str	r2, [r3, #64]	; 0x40
 8006266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800626c:	9301      	str	r3, [sp, #4]
 800626e:	9b01      	ldr	r3, [sp, #4]
}
 8006270:	b002      	add	sp, #8
 8006272:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006274:	4b08      	ldr	r3, [pc, #32]	; (8006298 <HAL_TIM_PWM_MspInit+0x54>)
 8006276:	2200      	movs	r2, #0
 8006278:	9200      	str	r2, [sp, #0]
 800627a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800627c:	f042 0201 	orr.w	r2, r2, #1
 8006280:	645a      	str	r2, [r3, #68]	; 0x44
 8006282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	9b00      	ldr	r3, [sp, #0]
}
 800628c:	b002      	add	sp, #8
 800628e:	4770      	bx	lr
 8006290:	40010000 	.word	0x40010000
 8006294:	40001800 	.word	0x40001800
 8006298:	40023800 	.word	0x40023800

0800629c <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM6)
 800629c:	6802      	ldr	r2, [r0, #0]
 800629e:	4b0e      	ldr	r3, [pc, #56]	; (80062d8 <HAL_TIM_Base_MspInit+0x3c>)
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d000      	beq.n	80062a6 <HAL_TIM_Base_MspInit+0xa>
 80062a4:	4770      	bx	lr
{
 80062a6:	b500      	push	{lr}
 80062a8:	b083      	sub	sp, #12
    __HAL_RCC_TIM6_CLK_ENABLE();
 80062aa:	2200      	movs	r2, #0
 80062ac:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 80062b0:	9201      	str	r2, [sp, #4]
 80062b2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80062b4:	f041 0110 	orr.w	r1, r1, #16
 80062b8:	6419      	str	r1, [r3, #64]	; 0x40
 80062ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062bc:	f003 0310 	and.w	r3, r3, #16
 80062c0:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80062c2:	2101      	movs	r1, #1
 80062c4:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 80062c6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80062c8:	f7fb fa22 	bl	8001710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80062cc:	2036      	movs	r0, #54	; 0x36
}
 80062ce:	b003      	add	sp, #12
 80062d0:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80062d4:	f7fb ba52 	b.w	800177c <HAL_NVIC_EnableIRQ>
 80062d8:	40001000 	.word	0x40001000

080062dc <MX_UART7_Init>:

/* UART7 init function */
void MX_UART7_Init(void)
{

  huart7.Instance = UART7;
 80062dc:	4b0b      	ldr	r3, [pc, #44]	; (800630c <MX_UART7_Init+0x30>)
 80062de:	4a0c      	ldr	r2, [pc, #48]	; (8006310 <MX_UART7_Init+0x34>)
{
 80062e0:	b510      	push	{r4, lr}
  huart7.Init.BaudRate = 115200;
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
  huart7.Init.StopBits = UART_STOPBITS_1;
  huart7.Init.Parity = UART_PARITY_NONE;
  huart7.Init.Mode = UART_MODE_TX_RX;
 80062e2:	210c      	movs	r1, #12
  huart7.Instance = UART7;
 80062e4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80062e6:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80062ea:	2200      	movs	r2, #0
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80062ec:	4618      	mov	r0, r3
  huart7.Init.BaudRate = 115200;
 80062ee:	605c      	str	r4, [r3, #4]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80062f0:	6159      	str	r1, [r3, #20]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80062f2:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart7.Init.Parity = UART_PARITY_NONE;
 80062f6:	611a      	str	r2, [r3, #16]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80062f8:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80062fc:	f7fc fbbe 	bl	8002a7c <HAL_UART_Init>
 8006300:	b900      	cbnz	r0, 8006304 <MX_UART7_Init+0x28>
  {
    Error_Handler();
  }

}
 8006302:	bd10      	pop	{r4, pc}
 8006304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8006308:	f7ff bb0c 	b.w	8005924 <Error_Handler>
 800630c:	200006d0 	.word	0x200006d0
 8006310:	40007800 	.word	0x40007800

08006314 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{

  huart8.Instance = UART8;
 8006314:	4b0b      	ldr	r3, [pc, #44]	; (8006344 <MX_UART8_Init+0x30>)
 8006316:	4a0c      	ldr	r2, [pc, #48]	; (8006348 <MX_UART8_Init+0x34>)
{
 8006318:	b510      	push	{r4, lr}
  huart8.Init.BaudRate = 115200;
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
  huart8.Init.StopBits = UART_STOPBITS_1;
  huart8.Init.Parity = UART_PARITY_NONE;
  huart8.Init.Mode = UART_MODE_TX_RX;
 800631a:	210c      	movs	r1, #12
  huart8.Instance = UART8;
 800631c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800631e:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8006322:	2200      	movs	r2, #0
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8006324:	4618      	mov	r0, r3
  huart8.Init.BaudRate = 115200;
 8006326:	605c      	str	r4, [r3, #4]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8006328:	6159      	str	r1, [r3, #20]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800632a:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart8.Init.Parity = UART_PARITY_NONE;
 800632e:	611a      	str	r2, [r3, #16]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8006330:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8006334:	f7fc fba2 	bl	8002a7c <HAL_UART_Init>
 8006338:	b900      	cbnz	r0, 800633c <MX_UART8_Init+0x28>
  {
    Error_Handler();
  }

}
 800633a:	bd10      	pop	{r4, pc}
 800633c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8006340:	f7ff baf0 	b.w	8005924 <Error_Handler>
 8006344:	20000750 	.word	0x20000750
 8006348:	40007c00 	.word	0x40007c00

0800634c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 800634c:	4b0b      	ldr	r3, [pc, #44]	; (800637c <MX_USART1_UART_Init+0x30>)
 800634e:	4a0c      	ldr	r2, [pc, #48]	; (8006380 <MX_USART1_UART_Init+0x34>)
{
 8006350:	b510      	push	{r4, lr}
  huart1.Init.BaudRate = 100000;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006352:	210c      	movs	r1, #12
  huart1.Init.BaudRate = 100000;
 8006354:	4c0b      	ldr	r4, [pc, #44]	; (8006384 <MX_USART1_UART_Init+0x38>)
  huart1.Instance = USART1;
 8006356:	601a      	str	r2, [r3, #0]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006358:	4618      	mov	r0, r3
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800635a:	2200      	movs	r2, #0
  huart1.Init.BaudRate = 100000;
 800635c:	605c      	str	r4, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800635e:	6159      	str	r1, [r3, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006360:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006364:	611a      	str	r2, [r3, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006366:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800636a:	f7fc fb87 	bl	8002a7c <HAL_UART_Init>
 800636e:	b900      	cbnz	r0, 8006372 <MX_USART1_UART_Init+0x26>
  {
    Error_Handler();
  }

}
 8006370:	bd10      	pop	{r4, pc}
 8006372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8006376:	f7ff bad5 	b.w	8005924 <Error_Handler>
 800637a:	bf00      	nop
 800637c:	20000710 	.word	0x20000710
 8006380:	40011000 	.word	0x40011000
 8006384:	000186a0 	.word	0x000186a0

08006388 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{

  huart6.Instance = USART6;
 8006388:	4b0b      	ldr	r3, [pc, #44]	; (80063b8 <MX_USART6_UART_Init+0x30>)
 800638a:	4a0c      	ldr	r2, [pc, #48]	; (80063bc <MX_USART6_UART_Init+0x34>)
{
 800638c:	b510      	push	{r4, lr}
  huart6.Init.BaudRate = 115200;
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
 800638e:	210c      	movs	r1, #12
  huart6.Instance = USART6;
 8006390:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8006392:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8006396:	2200      	movs	r2, #0
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8006398:	4618      	mov	r0, r3
  huart6.Init.BaudRate = 115200;
 800639a:	605c      	str	r4, [r3, #4]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800639c:	6159      	str	r1, [r3, #20]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800639e:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart6.Init.Parity = UART_PARITY_NONE;
 80063a2:	611a      	str	r2, [r3, #16]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80063a4:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80063a8:	f7fc fb68 	bl	8002a7c <HAL_UART_Init>
 80063ac:	b900      	cbnz	r0, 80063b0 <MX_USART6_UART_Init+0x28>
  {
    Error_Handler();
  }

}
 80063ae:	bd10      	pop	{r4, pc}
 80063b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80063b4:	f7ff bab6 	b.w	8005924 <Error_Handler>
 80063b8:	20000790 	.word	0x20000790
 80063bc:	40011400 	.word	0x40011400

080063c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80063c0:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==UART7)
 80063c2:	6803      	ldr	r3, [r0, #0]
 80063c4:	4a61      	ldr	r2, [pc, #388]	; (800654c <HAL_UART_MspInit+0x18c>)
{
 80063c6:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063c8:	2400      	movs	r4, #0
  if(uartHandle->Instance==UART7)
 80063ca:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063cc:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80063d0:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80063d4:	940d      	str	r4, [sp, #52]	; 0x34
  if(uartHandle->Instance==UART7)
 80063d6:	d039      	beq.n	800644c <HAL_UART_MspInit+0x8c>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(uartHandle->Instance==UART8)
 80063d8:	4a5d      	ldr	r2, [pc, #372]	; (8006550 <HAL_UART_MspInit+0x190>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d05c      	beq.n	8006498 <HAL_UART_MspInit+0xd8>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 80063de:	4a5d      	ldr	r2, [pc, #372]	; (8006554 <HAL_UART_MspInit+0x194>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	f000 8085 	beq.w	80064f0 <HAL_UART_MspInit+0x130>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART6)
 80063e6:	4a5c      	ldr	r2, [pc, #368]	; (8006558 <HAL_UART_MspInit+0x198>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d001      	beq.n	80063f0 <HAL_UART_MspInit+0x30>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80063ec:	b00e      	add	sp, #56	; 0x38
 80063ee:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART6_CLK_ENABLE();
 80063f0:	4b5a      	ldr	r3, [pc, #360]	; (800655c <HAL_UART_MspInit+0x19c>)
 80063f2:	9407      	str	r4, [sp, #28]
 80063f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80063f6:	485a      	ldr	r0, [pc, #360]	; (8006560 <HAL_UART_MspInit+0x1a0>)
    __HAL_RCC_USART6_CLK_ENABLE();
 80063f8:	f042 0220 	orr.w	r2, r2, #32
 80063fc:	645a      	str	r2, [r3, #68]	; 0x44
 80063fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006400:	f002 0220 	and.w	r2, r2, #32
 8006404:	9207      	str	r2, [sp, #28]
 8006406:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006408:	9408      	str	r4, [sp, #32]
 800640a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800640c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006410:	631a      	str	r2, [r3, #48]	; 0x30
 8006412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006418:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 800641a:	f44f 4284 	mov.w	r2, #16896	; 0x4200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800641e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006420:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8006422:	9209      	str	r2, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006424:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006426:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006428:	2308      	movs	r3, #8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800642a:	2501      	movs	r5, #1
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800642c:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800642e:	e9cd 520b 	strd	r5, r2, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006432:	9e08      	ldr	r6, [sp, #32]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006434:	f7fb f9dc 	bl	80017f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8006438:	4622      	mov	r2, r4
 800643a:	4621      	mov	r1, r4
 800643c:	2047      	movs	r0, #71	; 0x47
 800643e:	f7fb f967 	bl	8001710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8006442:	2047      	movs	r0, #71	; 0x47
 8006444:	f7fb f99a 	bl	800177c <HAL_NVIC_EnableIRQ>
}
 8006448:	b00e      	add	sp, #56	; 0x38
 800644a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_UART7_CLK_ENABLE();
 800644c:	4b43      	ldr	r3, [pc, #268]	; (800655c <HAL_UART_MspInit+0x19c>)
 800644e:	9401      	str	r4, [sp, #4]
 8006450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006452:	4844      	ldr	r0, [pc, #272]	; (8006564 <HAL_UART_MspInit+0x1a4>)
    __HAL_RCC_UART7_CLK_ENABLE();
 8006454:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006458:	641a      	str	r2, [r3, #64]	; 0x40
 800645a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800645c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006460:	9201      	str	r2, [sp, #4]
 8006462:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006464:	9402      	str	r4, [sp, #8]
 8006466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006468:	f042 0210 	orr.w	r2, r2, #16
 800646c:	631a      	str	r2, [r3, #48]	; 0x30
 800646e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006470:	f003 0310 	and.w	r3, r3, #16
 8006474:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8006476:	f44f 73c0 	mov.w	r3, #384	; 0x180
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800647a:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 800647c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800647e:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8006480:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006482:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006484:	2401      	movs	r4, #1
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006486:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006488:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800648c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006490:	f7fb f9ae 	bl	80017f0 <HAL_GPIO_Init>
}
 8006494:	b00e      	add	sp, #56	; 0x38
 8006496:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_UART8_CLK_ENABLE();
 8006498:	4b30      	ldr	r3, [pc, #192]	; (800655c <HAL_UART_MspInit+0x19c>)
 800649a:	9403      	str	r4, [sp, #12]
 800649c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800649e:	4831      	ldr	r0, [pc, #196]	; (8006564 <HAL_UART_MspInit+0x1a4>)
    __HAL_RCC_UART8_CLK_ENABLE();
 80064a0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80064a4:	641a      	str	r2, [r3, #64]	; 0x40
 80064a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064a8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80064ac:	9203      	str	r2, [sp, #12]
 80064ae:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80064b0:	9404      	str	r4, [sp, #16]
 80064b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064b4:	f042 0210 	orr.w	r2, r2, #16
 80064b8:	631a      	str	r2, [r3, #48]	; 0x30
 80064ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064bc:	f003 0310 	and.w	r3, r3, #16
 80064c0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80064c2:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80064c4:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80064c6:	2201      	movs	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80064c8:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064ca:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064cc:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80064ce:	2308      	movs	r3, #8
 80064d0:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80064d2:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80064d6:	9e04      	ldr	r6, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80064d8:	f7fb f98a 	bl	80017f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 80064dc:	4622      	mov	r2, r4
 80064de:	4621      	mov	r1, r4
 80064e0:	2053      	movs	r0, #83	; 0x53
 80064e2:	f7fb f915 	bl	8001710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80064e6:	2053      	movs	r0, #83	; 0x53
 80064e8:	f7fb f948 	bl	800177c <HAL_NVIC_EnableIRQ>
}
 80064ec:	b00e      	add	sp, #56	; 0x38
 80064ee:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80064f0:	4b1a      	ldr	r3, [pc, #104]	; (800655c <HAL_UART_MspInit+0x19c>)
 80064f2:	9405      	str	r4, [sp, #20]
 80064f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064f6:	481c      	ldr	r0, [pc, #112]	; (8006568 <HAL_UART_MspInit+0x1a8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80064f8:	f042 0210 	orr.w	r2, r2, #16
 80064fc:	645a      	str	r2, [r3, #68]	; 0x44
 80064fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006500:	f002 0210 	and.w	r2, r2, #16
 8006504:	9205      	str	r2, [sp, #20]
 8006506:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006508:	9406      	str	r4, [sp, #24]
 800650a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800650c:	f042 0202 	orr.w	r2, r2, #2
 8006510:	631a      	str	r2, [r3, #48]	; 0x30
 8006512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006514:	f003 0302 	and.w	r3, r3, #2
 8006518:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800651a:	22c0      	movs	r2, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800651c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800651e:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8006520:	9209      	str	r2, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006522:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006524:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006526:	2307      	movs	r3, #7
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006528:	2501      	movs	r5, #1
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800652a:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800652c:	e9cd 520b 	strd	r5, r2, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006530:	9e06      	ldr	r6, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006532:	f7fb f95d 	bl	80017f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006536:	4622      	mov	r2, r4
 8006538:	4621      	mov	r1, r4
 800653a:	2025      	movs	r0, #37	; 0x25
 800653c:	f7fb f8e8 	bl	8001710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006540:	2025      	movs	r0, #37	; 0x25
 8006542:	f7fb f91b 	bl	800177c <HAL_NVIC_EnableIRQ>
}
 8006546:	b00e      	add	sp, #56	; 0x38
 8006548:	bd70      	pop	{r4, r5, r6, pc}
 800654a:	bf00      	nop
 800654c:	40007800 	.word	0x40007800
 8006550:	40007c00 	.word	0x40007c00
 8006554:	40011000 	.word	0x40011000
 8006558:	40011400 	.word	0x40011400
 800655c:	40023800 	.word	0x40023800
 8006560:	40021800 	.word	0x40021800
 8006564:	40021000 	.word	0x40021000
 8006568:	40020400 	.word	0x40020400

0800656c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800656c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80065a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006570:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006572:	e003      	b.n	800657c <LoopCopyDataInit>

08006574 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006574:	4b0c      	ldr	r3, [pc, #48]	; (80065a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006576:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006578:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800657a:	3104      	adds	r1, #4

0800657c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800657c:	480b      	ldr	r0, [pc, #44]	; (80065ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800657e:	4b0c      	ldr	r3, [pc, #48]	; (80065b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006580:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006582:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006584:	d3f6      	bcc.n	8006574 <CopyDataInit>
  ldr  r2, =_sbss
 8006586:	4a0b      	ldr	r2, [pc, #44]	; (80065b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006588:	e002      	b.n	8006590 <LoopFillZerobss>

0800658a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800658a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800658c:	f842 3b04 	str.w	r3, [r2], #4

08006590 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006590:	4b09      	ldr	r3, [pc, #36]	; (80065b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006592:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006594:	d3f9      	bcc.n	800658a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006596:	f7ff fcd3 	bl	8005f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800659a:	f000 f817 	bl	80065cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800659e:	f7fe fe5d 	bl	800525c <main>
  bx  lr    
 80065a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80065a4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80065a8:	08009e60 	.word	0x08009e60
  ldr  r0, =_sdata
 80065ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80065b0:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 80065b4:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 80065b8:	200007d4 	.word	0x200007d4

080065bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80065bc:	e7fe      	b.n	80065bc <ADC_IRQHandler>
	...

080065c0 <__errno>:
 80065c0:	4b01      	ldr	r3, [pc, #4]	; (80065c8 <__errno+0x8>)
 80065c2:	6818      	ldr	r0, [r3, #0]
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	20000020 	.word	0x20000020

080065cc <__libc_init_array>:
 80065cc:	b570      	push	{r4, r5, r6, lr}
 80065ce:	4e0d      	ldr	r6, [pc, #52]	; (8006604 <__libc_init_array+0x38>)
 80065d0:	4c0d      	ldr	r4, [pc, #52]	; (8006608 <__libc_init_array+0x3c>)
 80065d2:	1ba4      	subs	r4, r4, r6
 80065d4:	10a4      	asrs	r4, r4, #2
 80065d6:	2500      	movs	r5, #0
 80065d8:	42a5      	cmp	r5, r4
 80065da:	d109      	bne.n	80065f0 <__libc_init_array+0x24>
 80065dc:	4e0b      	ldr	r6, [pc, #44]	; (800660c <__libc_init_array+0x40>)
 80065de:	4c0c      	ldr	r4, [pc, #48]	; (8006610 <__libc_init_array+0x44>)
 80065e0:	f003 fa6a 	bl	8009ab8 <_init>
 80065e4:	1ba4      	subs	r4, r4, r6
 80065e6:	10a4      	asrs	r4, r4, #2
 80065e8:	2500      	movs	r5, #0
 80065ea:	42a5      	cmp	r5, r4
 80065ec:	d105      	bne.n	80065fa <__libc_init_array+0x2e>
 80065ee:	bd70      	pop	{r4, r5, r6, pc}
 80065f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065f4:	4798      	blx	r3
 80065f6:	3501      	adds	r5, #1
 80065f8:	e7ee      	b.n	80065d8 <__libc_init_array+0xc>
 80065fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065fe:	4798      	blx	r3
 8006600:	3501      	adds	r5, #1
 8006602:	e7f2      	b.n	80065ea <__libc_init_array+0x1e>
 8006604:	08009e58 	.word	0x08009e58
 8006608:	08009e58 	.word	0x08009e58
 800660c:	08009e58 	.word	0x08009e58
 8006610:	08009e5c 	.word	0x08009e5c

08006614 <memset>:
 8006614:	4402      	add	r2, r0
 8006616:	4603      	mov	r3, r0
 8006618:	4293      	cmp	r3, r2
 800661a:	d100      	bne.n	800661e <memset+0xa>
 800661c:	4770      	bx	lr
 800661e:	f803 1b01 	strb.w	r1, [r3], #1
 8006622:	e7f9      	b.n	8006618 <memset+0x4>

08006624 <__cvt>:
 8006624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006628:	ec55 4b10 	vmov	r4, r5, d0
 800662c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800662e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006632:	2d00      	cmp	r5, #0
 8006634:	460e      	mov	r6, r1
 8006636:	4691      	mov	r9, r2
 8006638:	4619      	mov	r1, r3
 800663a:	bfb8      	it	lt
 800663c:	4622      	movlt	r2, r4
 800663e:	462b      	mov	r3, r5
 8006640:	f027 0720 	bic.w	r7, r7, #32
 8006644:	bfbb      	ittet	lt
 8006646:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800664a:	461d      	movlt	r5, r3
 800664c:	2300      	movge	r3, #0
 800664e:	232d      	movlt	r3, #45	; 0x2d
 8006650:	bfb8      	it	lt
 8006652:	4614      	movlt	r4, r2
 8006654:	2f46      	cmp	r7, #70	; 0x46
 8006656:	700b      	strb	r3, [r1, #0]
 8006658:	d004      	beq.n	8006664 <__cvt+0x40>
 800665a:	2f45      	cmp	r7, #69	; 0x45
 800665c:	d100      	bne.n	8006660 <__cvt+0x3c>
 800665e:	3601      	adds	r6, #1
 8006660:	2102      	movs	r1, #2
 8006662:	e000      	b.n	8006666 <__cvt+0x42>
 8006664:	2103      	movs	r1, #3
 8006666:	ab03      	add	r3, sp, #12
 8006668:	9301      	str	r3, [sp, #4]
 800666a:	ab02      	add	r3, sp, #8
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	4632      	mov	r2, r6
 8006670:	4653      	mov	r3, sl
 8006672:	ec45 4b10 	vmov	d0, r4, r5
 8006676:	f000 feaf 	bl	80073d8 <_dtoa_r>
 800667a:	2f47      	cmp	r7, #71	; 0x47
 800667c:	4680      	mov	r8, r0
 800667e:	d102      	bne.n	8006686 <__cvt+0x62>
 8006680:	f019 0f01 	tst.w	r9, #1
 8006684:	d026      	beq.n	80066d4 <__cvt+0xb0>
 8006686:	2f46      	cmp	r7, #70	; 0x46
 8006688:	eb08 0906 	add.w	r9, r8, r6
 800668c:	d111      	bne.n	80066b2 <__cvt+0x8e>
 800668e:	f898 3000 	ldrb.w	r3, [r8]
 8006692:	2b30      	cmp	r3, #48	; 0x30
 8006694:	d10a      	bne.n	80066ac <__cvt+0x88>
 8006696:	2200      	movs	r2, #0
 8006698:	2300      	movs	r3, #0
 800669a:	4620      	mov	r0, r4
 800669c:	4629      	mov	r1, r5
 800669e:	f7fa fa23 	bl	8000ae8 <__aeabi_dcmpeq>
 80066a2:	b918      	cbnz	r0, 80066ac <__cvt+0x88>
 80066a4:	f1c6 0601 	rsb	r6, r6, #1
 80066a8:	f8ca 6000 	str.w	r6, [sl]
 80066ac:	f8da 3000 	ldr.w	r3, [sl]
 80066b0:	4499      	add	r9, r3
 80066b2:	2200      	movs	r2, #0
 80066b4:	2300      	movs	r3, #0
 80066b6:	4620      	mov	r0, r4
 80066b8:	4629      	mov	r1, r5
 80066ba:	f7fa fa15 	bl	8000ae8 <__aeabi_dcmpeq>
 80066be:	b938      	cbnz	r0, 80066d0 <__cvt+0xac>
 80066c0:	2230      	movs	r2, #48	; 0x30
 80066c2:	9b03      	ldr	r3, [sp, #12]
 80066c4:	454b      	cmp	r3, r9
 80066c6:	d205      	bcs.n	80066d4 <__cvt+0xb0>
 80066c8:	1c59      	adds	r1, r3, #1
 80066ca:	9103      	str	r1, [sp, #12]
 80066cc:	701a      	strb	r2, [r3, #0]
 80066ce:	e7f8      	b.n	80066c2 <__cvt+0x9e>
 80066d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80066d4:	9b03      	ldr	r3, [sp, #12]
 80066d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066d8:	eba3 0308 	sub.w	r3, r3, r8
 80066dc:	4640      	mov	r0, r8
 80066de:	6013      	str	r3, [r2, #0]
 80066e0:	b004      	add	sp, #16
 80066e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080066e6 <__exponent>:
 80066e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066e8:	2900      	cmp	r1, #0
 80066ea:	4604      	mov	r4, r0
 80066ec:	bfba      	itte	lt
 80066ee:	4249      	neglt	r1, r1
 80066f0:	232d      	movlt	r3, #45	; 0x2d
 80066f2:	232b      	movge	r3, #43	; 0x2b
 80066f4:	2909      	cmp	r1, #9
 80066f6:	f804 2b02 	strb.w	r2, [r4], #2
 80066fa:	7043      	strb	r3, [r0, #1]
 80066fc:	dd20      	ble.n	8006740 <__exponent+0x5a>
 80066fe:	f10d 0307 	add.w	r3, sp, #7
 8006702:	461f      	mov	r7, r3
 8006704:	260a      	movs	r6, #10
 8006706:	fb91 f5f6 	sdiv	r5, r1, r6
 800670a:	fb06 1115 	mls	r1, r6, r5, r1
 800670e:	3130      	adds	r1, #48	; 0x30
 8006710:	2d09      	cmp	r5, #9
 8006712:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006716:	f103 32ff 	add.w	r2, r3, #4294967295
 800671a:	4629      	mov	r1, r5
 800671c:	dc09      	bgt.n	8006732 <__exponent+0x4c>
 800671e:	3130      	adds	r1, #48	; 0x30
 8006720:	3b02      	subs	r3, #2
 8006722:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006726:	42bb      	cmp	r3, r7
 8006728:	4622      	mov	r2, r4
 800672a:	d304      	bcc.n	8006736 <__exponent+0x50>
 800672c:	1a10      	subs	r0, r2, r0
 800672e:	b003      	add	sp, #12
 8006730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006732:	4613      	mov	r3, r2
 8006734:	e7e7      	b.n	8006706 <__exponent+0x20>
 8006736:	f813 2b01 	ldrb.w	r2, [r3], #1
 800673a:	f804 2b01 	strb.w	r2, [r4], #1
 800673e:	e7f2      	b.n	8006726 <__exponent+0x40>
 8006740:	2330      	movs	r3, #48	; 0x30
 8006742:	4419      	add	r1, r3
 8006744:	7083      	strb	r3, [r0, #2]
 8006746:	1d02      	adds	r2, r0, #4
 8006748:	70c1      	strb	r1, [r0, #3]
 800674a:	e7ef      	b.n	800672c <__exponent+0x46>

0800674c <_printf_float>:
 800674c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006750:	b08d      	sub	sp, #52	; 0x34
 8006752:	460c      	mov	r4, r1
 8006754:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006758:	4616      	mov	r6, r2
 800675a:	461f      	mov	r7, r3
 800675c:	4605      	mov	r5, r0
 800675e:	f001 fd6d 	bl	800823c <_localeconv_r>
 8006762:	6803      	ldr	r3, [r0, #0]
 8006764:	9304      	str	r3, [sp, #16]
 8006766:	4618      	mov	r0, r3
 8006768:	f7f9 fd42 	bl	80001f0 <strlen>
 800676c:	2300      	movs	r3, #0
 800676e:	930a      	str	r3, [sp, #40]	; 0x28
 8006770:	f8d8 3000 	ldr.w	r3, [r8]
 8006774:	9005      	str	r0, [sp, #20]
 8006776:	3307      	adds	r3, #7
 8006778:	f023 0307 	bic.w	r3, r3, #7
 800677c:	f103 0208 	add.w	r2, r3, #8
 8006780:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006784:	f8d4 b000 	ldr.w	fp, [r4]
 8006788:	f8c8 2000 	str.w	r2, [r8]
 800678c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006790:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006794:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006798:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800679c:	9307      	str	r3, [sp, #28]
 800679e:	f8cd 8018 	str.w	r8, [sp, #24]
 80067a2:	f04f 32ff 	mov.w	r2, #4294967295
 80067a6:	4ba7      	ldr	r3, [pc, #668]	; (8006a44 <_printf_float+0x2f8>)
 80067a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067ac:	f7fa f9ce 	bl	8000b4c <__aeabi_dcmpun>
 80067b0:	bb70      	cbnz	r0, 8006810 <_printf_float+0xc4>
 80067b2:	f04f 32ff 	mov.w	r2, #4294967295
 80067b6:	4ba3      	ldr	r3, [pc, #652]	; (8006a44 <_printf_float+0x2f8>)
 80067b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067bc:	f7fa f9a8 	bl	8000b10 <__aeabi_dcmple>
 80067c0:	bb30      	cbnz	r0, 8006810 <_printf_float+0xc4>
 80067c2:	2200      	movs	r2, #0
 80067c4:	2300      	movs	r3, #0
 80067c6:	4640      	mov	r0, r8
 80067c8:	4649      	mov	r1, r9
 80067ca:	f7fa f997 	bl	8000afc <__aeabi_dcmplt>
 80067ce:	b110      	cbz	r0, 80067d6 <_printf_float+0x8a>
 80067d0:	232d      	movs	r3, #45	; 0x2d
 80067d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067d6:	4a9c      	ldr	r2, [pc, #624]	; (8006a48 <_printf_float+0x2fc>)
 80067d8:	4b9c      	ldr	r3, [pc, #624]	; (8006a4c <_printf_float+0x300>)
 80067da:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80067de:	bf8c      	ite	hi
 80067e0:	4690      	movhi	r8, r2
 80067e2:	4698      	movls	r8, r3
 80067e4:	2303      	movs	r3, #3
 80067e6:	f02b 0204 	bic.w	r2, fp, #4
 80067ea:	6123      	str	r3, [r4, #16]
 80067ec:	6022      	str	r2, [r4, #0]
 80067ee:	f04f 0900 	mov.w	r9, #0
 80067f2:	9700      	str	r7, [sp, #0]
 80067f4:	4633      	mov	r3, r6
 80067f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80067f8:	4621      	mov	r1, r4
 80067fa:	4628      	mov	r0, r5
 80067fc:	f000 f9e6 	bl	8006bcc <_printf_common>
 8006800:	3001      	adds	r0, #1
 8006802:	f040 808d 	bne.w	8006920 <_printf_float+0x1d4>
 8006806:	f04f 30ff 	mov.w	r0, #4294967295
 800680a:	b00d      	add	sp, #52	; 0x34
 800680c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006810:	4642      	mov	r2, r8
 8006812:	464b      	mov	r3, r9
 8006814:	4640      	mov	r0, r8
 8006816:	4649      	mov	r1, r9
 8006818:	f7fa f998 	bl	8000b4c <__aeabi_dcmpun>
 800681c:	b110      	cbz	r0, 8006824 <_printf_float+0xd8>
 800681e:	4a8c      	ldr	r2, [pc, #560]	; (8006a50 <_printf_float+0x304>)
 8006820:	4b8c      	ldr	r3, [pc, #560]	; (8006a54 <_printf_float+0x308>)
 8006822:	e7da      	b.n	80067da <_printf_float+0x8e>
 8006824:	6861      	ldr	r1, [r4, #4]
 8006826:	1c4b      	adds	r3, r1, #1
 8006828:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800682c:	a80a      	add	r0, sp, #40	; 0x28
 800682e:	d13e      	bne.n	80068ae <_printf_float+0x162>
 8006830:	2306      	movs	r3, #6
 8006832:	6063      	str	r3, [r4, #4]
 8006834:	2300      	movs	r3, #0
 8006836:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800683a:	ab09      	add	r3, sp, #36	; 0x24
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	ec49 8b10 	vmov	d0, r8, r9
 8006842:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006846:	6022      	str	r2, [r4, #0]
 8006848:	f8cd a004 	str.w	sl, [sp, #4]
 800684c:	6861      	ldr	r1, [r4, #4]
 800684e:	4628      	mov	r0, r5
 8006850:	f7ff fee8 	bl	8006624 <__cvt>
 8006854:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006858:	2b47      	cmp	r3, #71	; 0x47
 800685a:	4680      	mov	r8, r0
 800685c:	d109      	bne.n	8006872 <_printf_float+0x126>
 800685e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006860:	1cd8      	adds	r0, r3, #3
 8006862:	db02      	blt.n	800686a <_printf_float+0x11e>
 8006864:	6862      	ldr	r2, [r4, #4]
 8006866:	4293      	cmp	r3, r2
 8006868:	dd47      	ble.n	80068fa <_printf_float+0x1ae>
 800686a:	f1aa 0a02 	sub.w	sl, sl, #2
 800686e:	fa5f fa8a 	uxtb.w	sl, sl
 8006872:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006876:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006878:	d824      	bhi.n	80068c4 <_printf_float+0x178>
 800687a:	3901      	subs	r1, #1
 800687c:	4652      	mov	r2, sl
 800687e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006882:	9109      	str	r1, [sp, #36]	; 0x24
 8006884:	f7ff ff2f 	bl	80066e6 <__exponent>
 8006888:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800688a:	1813      	adds	r3, r2, r0
 800688c:	2a01      	cmp	r2, #1
 800688e:	4681      	mov	r9, r0
 8006890:	6123      	str	r3, [r4, #16]
 8006892:	dc02      	bgt.n	800689a <_printf_float+0x14e>
 8006894:	6822      	ldr	r2, [r4, #0]
 8006896:	07d1      	lsls	r1, r2, #31
 8006898:	d501      	bpl.n	800689e <_printf_float+0x152>
 800689a:	3301      	adds	r3, #1
 800689c:	6123      	str	r3, [r4, #16]
 800689e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d0a5      	beq.n	80067f2 <_printf_float+0xa6>
 80068a6:	232d      	movs	r3, #45	; 0x2d
 80068a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068ac:	e7a1      	b.n	80067f2 <_printf_float+0xa6>
 80068ae:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80068b2:	f000 8177 	beq.w	8006ba4 <_printf_float+0x458>
 80068b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80068ba:	d1bb      	bne.n	8006834 <_printf_float+0xe8>
 80068bc:	2900      	cmp	r1, #0
 80068be:	d1b9      	bne.n	8006834 <_printf_float+0xe8>
 80068c0:	2301      	movs	r3, #1
 80068c2:	e7b6      	b.n	8006832 <_printf_float+0xe6>
 80068c4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80068c8:	d119      	bne.n	80068fe <_printf_float+0x1b2>
 80068ca:	2900      	cmp	r1, #0
 80068cc:	6863      	ldr	r3, [r4, #4]
 80068ce:	dd0c      	ble.n	80068ea <_printf_float+0x19e>
 80068d0:	6121      	str	r1, [r4, #16]
 80068d2:	b913      	cbnz	r3, 80068da <_printf_float+0x18e>
 80068d4:	6822      	ldr	r2, [r4, #0]
 80068d6:	07d2      	lsls	r2, r2, #31
 80068d8:	d502      	bpl.n	80068e0 <_printf_float+0x194>
 80068da:	3301      	adds	r3, #1
 80068dc:	440b      	add	r3, r1
 80068de:	6123      	str	r3, [r4, #16]
 80068e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068e2:	65a3      	str	r3, [r4, #88]	; 0x58
 80068e4:	f04f 0900 	mov.w	r9, #0
 80068e8:	e7d9      	b.n	800689e <_printf_float+0x152>
 80068ea:	b913      	cbnz	r3, 80068f2 <_printf_float+0x1a6>
 80068ec:	6822      	ldr	r2, [r4, #0]
 80068ee:	07d0      	lsls	r0, r2, #31
 80068f0:	d501      	bpl.n	80068f6 <_printf_float+0x1aa>
 80068f2:	3302      	adds	r3, #2
 80068f4:	e7f3      	b.n	80068de <_printf_float+0x192>
 80068f6:	2301      	movs	r3, #1
 80068f8:	e7f1      	b.n	80068de <_printf_float+0x192>
 80068fa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80068fe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006902:	4293      	cmp	r3, r2
 8006904:	db05      	blt.n	8006912 <_printf_float+0x1c6>
 8006906:	6822      	ldr	r2, [r4, #0]
 8006908:	6123      	str	r3, [r4, #16]
 800690a:	07d1      	lsls	r1, r2, #31
 800690c:	d5e8      	bpl.n	80068e0 <_printf_float+0x194>
 800690e:	3301      	adds	r3, #1
 8006910:	e7e5      	b.n	80068de <_printf_float+0x192>
 8006912:	2b00      	cmp	r3, #0
 8006914:	bfd4      	ite	le
 8006916:	f1c3 0302 	rsble	r3, r3, #2
 800691a:	2301      	movgt	r3, #1
 800691c:	4413      	add	r3, r2
 800691e:	e7de      	b.n	80068de <_printf_float+0x192>
 8006920:	6823      	ldr	r3, [r4, #0]
 8006922:	055a      	lsls	r2, r3, #21
 8006924:	d407      	bmi.n	8006936 <_printf_float+0x1ea>
 8006926:	6923      	ldr	r3, [r4, #16]
 8006928:	4642      	mov	r2, r8
 800692a:	4631      	mov	r1, r6
 800692c:	4628      	mov	r0, r5
 800692e:	47b8      	blx	r7
 8006930:	3001      	adds	r0, #1
 8006932:	d12b      	bne.n	800698c <_printf_float+0x240>
 8006934:	e767      	b.n	8006806 <_printf_float+0xba>
 8006936:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800693a:	f240 80dc 	bls.w	8006af6 <_printf_float+0x3aa>
 800693e:	2200      	movs	r2, #0
 8006940:	2300      	movs	r3, #0
 8006942:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006946:	f7fa f8cf 	bl	8000ae8 <__aeabi_dcmpeq>
 800694a:	2800      	cmp	r0, #0
 800694c:	d033      	beq.n	80069b6 <_printf_float+0x26a>
 800694e:	2301      	movs	r3, #1
 8006950:	4a41      	ldr	r2, [pc, #260]	; (8006a58 <_printf_float+0x30c>)
 8006952:	4631      	mov	r1, r6
 8006954:	4628      	mov	r0, r5
 8006956:	47b8      	blx	r7
 8006958:	3001      	adds	r0, #1
 800695a:	f43f af54 	beq.w	8006806 <_printf_float+0xba>
 800695e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006962:	429a      	cmp	r2, r3
 8006964:	db02      	blt.n	800696c <_printf_float+0x220>
 8006966:	6823      	ldr	r3, [r4, #0]
 8006968:	07d8      	lsls	r0, r3, #31
 800696a:	d50f      	bpl.n	800698c <_printf_float+0x240>
 800696c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006970:	4631      	mov	r1, r6
 8006972:	4628      	mov	r0, r5
 8006974:	47b8      	blx	r7
 8006976:	3001      	adds	r0, #1
 8006978:	f43f af45 	beq.w	8006806 <_printf_float+0xba>
 800697c:	f04f 0800 	mov.w	r8, #0
 8006980:	f104 091a 	add.w	r9, r4, #26
 8006984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006986:	3b01      	subs	r3, #1
 8006988:	4543      	cmp	r3, r8
 800698a:	dc09      	bgt.n	80069a0 <_printf_float+0x254>
 800698c:	6823      	ldr	r3, [r4, #0]
 800698e:	079b      	lsls	r3, r3, #30
 8006990:	f100 8103 	bmi.w	8006b9a <_printf_float+0x44e>
 8006994:	68e0      	ldr	r0, [r4, #12]
 8006996:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006998:	4298      	cmp	r0, r3
 800699a:	bfb8      	it	lt
 800699c:	4618      	movlt	r0, r3
 800699e:	e734      	b.n	800680a <_printf_float+0xbe>
 80069a0:	2301      	movs	r3, #1
 80069a2:	464a      	mov	r2, r9
 80069a4:	4631      	mov	r1, r6
 80069a6:	4628      	mov	r0, r5
 80069a8:	47b8      	blx	r7
 80069aa:	3001      	adds	r0, #1
 80069ac:	f43f af2b 	beq.w	8006806 <_printf_float+0xba>
 80069b0:	f108 0801 	add.w	r8, r8, #1
 80069b4:	e7e6      	b.n	8006984 <_printf_float+0x238>
 80069b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	dc2b      	bgt.n	8006a14 <_printf_float+0x2c8>
 80069bc:	2301      	movs	r3, #1
 80069be:	4a26      	ldr	r2, [pc, #152]	; (8006a58 <_printf_float+0x30c>)
 80069c0:	4631      	mov	r1, r6
 80069c2:	4628      	mov	r0, r5
 80069c4:	47b8      	blx	r7
 80069c6:	3001      	adds	r0, #1
 80069c8:	f43f af1d 	beq.w	8006806 <_printf_float+0xba>
 80069cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ce:	b923      	cbnz	r3, 80069da <_printf_float+0x28e>
 80069d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069d2:	b913      	cbnz	r3, 80069da <_printf_float+0x28e>
 80069d4:	6823      	ldr	r3, [r4, #0]
 80069d6:	07d9      	lsls	r1, r3, #31
 80069d8:	d5d8      	bpl.n	800698c <_printf_float+0x240>
 80069da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069de:	4631      	mov	r1, r6
 80069e0:	4628      	mov	r0, r5
 80069e2:	47b8      	blx	r7
 80069e4:	3001      	adds	r0, #1
 80069e6:	f43f af0e 	beq.w	8006806 <_printf_float+0xba>
 80069ea:	f04f 0900 	mov.w	r9, #0
 80069ee:	f104 0a1a 	add.w	sl, r4, #26
 80069f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069f4:	425b      	negs	r3, r3
 80069f6:	454b      	cmp	r3, r9
 80069f8:	dc01      	bgt.n	80069fe <_printf_float+0x2b2>
 80069fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069fc:	e794      	b.n	8006928 <_printf_float+0x1dc>
 80069fe:	2301      	movs	r3, #1
 8006a00:	4652      	mov	r2, sl
 8006a02:	4631      	mov	r1, r6
 8006a04:	4628      	mov	r0, r5
 8006a06:	47b8      	blx	r7
 8006a08:	3001      	adds	r0, #1
 8006a0a:	f43f aefc 	beq.w	8006806 <_printf_float+0xba>
 8006a0e:	f109 0901 	add.w	r9, r9, #1
 8006a12:	e7ee      	b.n	80069f2 <_printf_float+0x2a6>
 8006a14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	bfa8      	it	ge
 8006a1c:	461a      	movge	r2, r3
 8006a1e:	2a00      	cmp	r2, #0
 8006a20:	4691      	mov	r9, r2
 8006a22:	dd07      	ble.n	8006a34 <_printf_float+0x2e8>
 8006a24:	4613      	mov	r3, r2
 8006a26:	4631      	mov	r1, r6
 8006a28:	4642      	mov	r2, r8
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	47b8      	blx	r7
 8006a2e:	3001      	adds	r0, #1
 8006a30:	f43f aee9 	beq.w	8006806 <_printf_float+0xba>
 8006a34:	f104 031a 	add.w	r3, r4, #26
 8006a38:	f04f 0b00 	mov.w	fp, #0
 8006a3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a40:	9306      	str	r3, [sp, #24]
 8006a42:	e015      	b.n	8006a70 <_printf_float+0x324>
 8006a44:	7fefffff 	.word	0x7fefffff
 8006a48:	08009b48 	.word	0x08009b48
 8006a4c:	08009b44 	.word	0x08009b44
 8006a50:	08009b50 	.word	0x08009b50
 8006a54:	08009b4c 	.word	0x08009b4c
 8006a58:	08009b54 	.word	0x08009b54
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	9a06      	ldr	r2, [sp, #24]
 8006a60:	4631      	mov	r1, r6
 8006a62:	4628      	mov	r0, r5
 8006a64:	47b8      	blx	r7
 8006a66:	3001      	adds	r0, #1
 8006a68:	f43f aecd 	beq.w	8006806 <_printf_float+0xba>
 8006a6c:	f10b 0b01 	add.w	fp, fp, #1
 8006a70:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006a74:	ebaa 0309 	sub.w	r3, sl, r9
 8006a78:	455b      	cmp	r3, fp
 8006a7a:	dcef      	bgt.n	8006a5c <_printf_float+0x310>
 8006a7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a80:	429a      	cmp	r2, r3
 8006a82:	44d0      	add	r8, sl
 8006a84:	db15      	blt.n	8006ab2 <_printf_float+0x366>
 8006a86:	6823      	ldr	r3, [r4, #0]
 8006a88:	07da      	lsls	r2, r3, #31
 8006a8a:	d412      	bmi.n	8006ab2 <_printf_float+0x366>
 8006a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a90:	eba3 020a 	sub.w	r2, r3, sl
 8006a94:	eba3 0a01 	sub.w	sl, r3, r1
 8006a98:	4592      	cmp	sl, r2
 8006a9a:	bfa8      	it	ge
 8006a9c:	4692      	movge	sl, r2
 8006a9e:	f1ba 0f00 	cmp.w	sl, #0
 8006aa2:	dc0e      	bgt.n	8006ac2 <_printf_float+0x376>
 8006aa4:	f04f 0800 	mov.w	r8, #0
 8006aa8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006aac:	f104 091a 	add.w	r9, r4, #26
 8006ab0:	e019      	b.n	8006ae6 <_printf_float+0x39a>
 8006ab2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ab6:	4631      	mov	r1, r6
 8006ab8:	4628      	mov	r0, r5
 8006aba:	47b8      	blx	r7
 8006abc:	3001      	adds	r0, #1
 8006abe:	d1e5      	bne.n	8006a8c <_printf_float+0x340>
 8006ac0:	e6a1      	b.n	8006806 <_printf_float+0xba>
 8006ac2:	4653      	mov	r3, sl
 8006ac4:	4642      	mov	r2, r8
 8006ac6:	4631      	mov	r1, r6
 8006ac8:	4628      	mov	r0, r5
 8006aca:	47b8      	blx	r7
 8006acc:	3001      	adds	r0, #1
 8006ace:	d1e9      	bne.n	8006aa4 <_printf_float+0x358>
 8006ad0:	e699      	b.n	8006806 <_printf_float+0xba>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	464a      	mov	r2, r9
 8006ad6:	4631      	mov	r1, r6
 8006ad8:	4628      	mov	r0, r5
 8006ada:	47b8      	blx	r7
 8006adc:	3001      	adds	r0, #1
 8006ade:	f43f ae92 	beq.w	8006806 <_printf_float+0xba>
 8006ae2:	f108 0801 	add.w	r8, r8, #1
 8006ae6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006aea:	1a9b      	subs	r3, r3, r2
 8006aec:	eba3 030a 	sub.w	r3, r3, sl
 8006af0:	4543      	cmp	r3, r8
 8006af2:	dcee      	bgt.n	8006ad2 <_printf_float+0x386>
 8006af4:	e74a      	b.n	800698c <_printf_float+0x240>
 8006af6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006af8:	2a01      	cmp	r2, #1
 8006afa:	dc01      	bgt.n	8006b00 <_printf_float+0x3b4>
 8006afc:	07db      	lsls	r3, r3, #31
 8006afe:	d53a      	bpl.n	8006b76 <_printf_float+0x42a>
 8006b00:	2301      	movs	r3, #1
 8006b02:	4642      	mov	r2, r8
 8006b04:	4631      	mov	r1, r6
 8006b06:	4628      	mov	r0, r5
 8006b08:	47b8      	blx	r7
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	f43f ae7b 	beq.w	8006806 <_printf_float+0xba>
 8006b10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b14:	4631      	mov	r1, r6
 8006b16:	4628      	mov	r0, r5
 8006b18:	47b8      	blx	r7
 8006b1a:	3001      	adds	r0, #1
 8006b1c:	f108 0801 	add.w	r8, r8, #1
 8006b20:	f43f ae71 	beq.w	8006806 <_printf_float+0xba>
 8006b24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b26:	2200      	movs	r2, #0
 8006b28:	f103 3aff 	add.w	sl, r3, #4294967295
 8006b2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b30:	2300      	movs	r3, #0
 8006b32:	f7f9 ffd9 	bl	8000ae8 <__aeabi_dcmpeq>
 8006b36:	b9c8      	cbnz	r0, 8006b6c <_printf_float+0x420>
 8006b38:	4653      	mov	r3, sl
 8006b3a:	4642      	mov	r2, r8
 8006b3c:	4631      	mov	r1, r6
 8006b3e:	4628      	mov	r0, r5
 8006b40:	47b8      	blx	r7
 8006b42:	3001      	adds	r0, #1
 8006b44:	d10e      	bne.n	8006b64 <_printf_float+0x418>
 8006b46:	e65e      	b.n	8006806 <_printf_float+0xba>
 8006b48:	2301      	movs	r3, #1
 8006b4a:	4652      	mov	r2, sl
 8006b4c:	4631      	mov	r1, r6
 8006b4e:	4628      	mov	r0, r5
 8006b50:	47b8      	blx	r7
 8006b52:	3001      	adds	r0, #1
 8006b54:	f43f ae57 	beq.w	8006806 <_printf_float+0xba>
 8006b58:	f108 0801 	add.w	r8, r8, #1
 8006b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	4543      	cmp	r3, r8
 8006b62:	dcf1      	bgt.n	8006b48 <_printf_float+0x3fc>
 8006b64:	464b      	mov	r3, r9
 8006b66:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b6a:	e6de      	b.n	800692a <_printf_float+0x1de>
 8006b6c:	f04f 0800 	mov.w	r8, #0
 8006b70:	f104 0a1a 	add.w	sl, r4, #26
 8006b74:	e7f2      	b.n	8006b5c <_printf_float+0x410>
 8006b76:	2301      	movs	r3, #1
 8006b78:	e7df      	b.n	8006b3a <_printf_float+0x3ee>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	464a      	mov	r2, r9
 8006b7e:	4631      	mov	r1, r6
 8006b80:	4628      	mov	r0, r5
 8006b82:	47b8      	blx	r7
 8006b84:	3001      	adds	r0, #1
 8006b86:	f43f ae3e 	beq.w	8006806 <_printf_float+0xba>
 8006b8a:	f108 0801 	add.w	r8, r8, #1
 8006b8e:	68e3      	ldr	r3, [r4, #12]
 8006b90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b92:	1a9b      	subs	r3, r3, r2
 8006b94:	4543      	cmp	r3, r8
 8006b96:	dcf0      	bgt.n	8006b7a <_printf_float+0x42e>
 8006b98:	e6fc      	b.n	8006994 <_printf_float+0x248>
 8006b9a:	f04f 0800 	mov.w	r8, #0
 8006b9e:	f104 0919 	add.w	r9, r4, #25
 8006ba2:	e7f4      	b.n	8006b8e <_printf_float+0x442>
 8006ba4:	2900      	cmp	r1, #0
 8006ba6:	f43f ae8b 	beq.w	80068c0 <_printf_float+0x174>
 8006baa:	2300      	movs	r3, #0
 8006bac:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006bb0:	ab09      	add	r3, sp, #36	; 0x24
 8006bb2:	9300      	str	r3, [sp, #0]
 8006bb4:	ec49 8b10 	vmov	d0, r8, r9
 8006bb8:	6022      	str	r2, [r4, #0]
 8006bba:	f8cd a004 	str.w	sl, [sp, #4]
 8006bbe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	f7ff fd2e 	bl	8006624 <__cvt>
 8006bc8:	4680      	mov	r8, r0
 8006bca:	e648      	b.n	800685e <_printf_float+0x112>

08006bcc <_printf_common>:
 8006bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bd0:	4691      	mov	r9, r2
 8006bd2:	461f      	mov	r7, r3
 8006bd4:	688a      	ldr	r2, [r1, #8]
 8006bd6:	690b      	ldr	r3, [r1, #16]
 8006bd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	bfb8      	it	lt
 8006be0:	4613      	movlt	r3, r2
 8006be2:	f8c9 3000 	str.w	r3, [r9]
 8006be6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006bea:	4606      	mov	r6, r0
 8006bec:	460c      	mov	r4, r1
 8006bee:	b112      	cbz	r2, 8006bf6 <_printf_common+0x2a>
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	f8c9 3000 	str.w	r3, [r9]
 8006bf6:	6823      	ldr	r3, [r4, #0]
 8006bf8:	0699      	lsls	r1, r3, #26
 8006bfa:	bf42      	ittt	mi
 8006bfc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006c00:	3302      	addmi	r3, #2
 8006c02:	f8c9 3000 	strmi.w	r3, [r9]
 8006c06:	6825      	ldr	r5, [r4, #0]
 8006c08:	f015 0506 	ands.w	r5, r5, #6
 8006c0c:	d107      	bne.n	8006c1e <_printf_common+0x52>
 8006c0e:	f104 0a19 	add.w	sl, r4, #25
 8006c12:	68e3      	ldr	r3, [r4, #12]
 8006c14:	f8d9 2000 	ldr.w	r2, [r9]
 8006c18:	1a9b      	subs	r3, r3, r2
 8006c1a:	42ab      	cmp	r3, r5
 8006c1c:	dc28      	bgt.n	8006c70 <_printf_common+0xa4>
 8006c1e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006c22:	6822      	ldr	r2, [r4, #0]
 8006c24:	3300      	adds	r3, #0
 8006c26:	bf18      	it	ne
 8006c28:	2301      	movne	r3, #1
 8006c2a:	0692      	lsls	r2, r2, #26
 8006c2c:	d42d      	bmi.n	8006c8a <_printf_common+0xbe>
 8006c2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c32:	4639      	mov	r1, r7
 8006c34:	4630      	mov	r0, r6
 8006c36:	47c0      	blx	r8
 8006c38:	3001      	adds	r0, #1
 8006c3a:	d020      	beq.n	8006c7e <_printf_common+0xb2>
 8006c3c:	6823      	ldr	r3, [r4, #0]
 8006c3e:	68e5      	ldr	r5, [r4, #12]
 8006c40:	f8d9 2000 	ldr.w	r2, [r9]
 8006c44:	f003 0306 	and.w	r3, r3, #6
 8006c48:	2b04      	cmp	r3, #4
 8006c4a:	bf08      	it	eq
 8006c4c:	1aad      	subeq	r5, r5, r2
 8006c4e:	68a3      	ldr	r3, [r4, #8]
 8006c50:	6922      	ldr	r2, [r4, #16]
 8006c52:	bf0c      	ite	eq
 8006c54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c58:	2500      	movne	r5, #0
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	bfc4      	itt	gt
 8006c5e:	1a9b      	subgt	r3, r3, r2
 8006c60:	18ed      	addgt	r5, r5, r3
 8006c62:	f04f 0900 	mov.w	r9, #0
 8006c66:	341a      	adds	r4, #26
 8006c68:	454d      	cmp	r5, r9
 8006c6a:	d11a      	bne.n	8006ca2 <_printf_common+0xd6>
 8006c6c:	2000      	movs	r0, #0
 8006c6e:	e008      	b.n	8006c82 <_printf_common+0xb6>
 8006c70:	2301      	movs	r3, #1
 8006c72:	4652      	mov	r2, sl
 8006c74:	4639      	mov	r1, r7
 8006c76:	4630      	mov	r0, r6
 8006c78:	47c0      	blx	r8
 8006c7a:	3001      	adds	r0, #1
 8006c7c:	d103      	bne.n	8006c86 <_printf_common+0xba>
 8006c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c86:	3501      	adds	r5, #1
 8006c88:	e7c3      	b.n	8006c12 <_printf_common+0x46>
 8006c8a:	18e1      	adds	r1, r4, r3
 8006c8c:	1c5a      	adds	r2, r3, #1
 8006c8e:	2030      	movs	r0, #48	; 0x30
 8006c90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c94:	4422      	add	r2, r4
 8006c96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c9e:	3302      	adds	r3, #2
 8006ca0:	e7c5      	b.n	8006c2e <_printf_common+0x62>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	4622      	mov	r2, r4
 8006ca6:	4639      	mov	r1, r7
 8006ca8:	4630      	mov	r0, r6
 8006caa:	47c0      	blx	r8
 8006cac:	3001      	adds	r0, #1
 8006cae:	d0e6      	beq.n	8006c7e <_printf_common+0xb2>
 8006cb0:	f109 0901 	add.w	r9, r9, #1
 8006cb4:	e7d8      	b.n	8006c68 <_printf_common+0x9c>
	...

08006cb8 <_printf_i>:
 8006cb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006cbc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006cc0:	460c      	mov	r4, r1
 8006cc2:	7e09      	ldrb	r1, [r1, #24]
 8006cc4:	b085      	sub	sp, #20
 8006cc6:	296e      	cmp	r1, #110	; 0x6e
 8006cc8:	4617      	mov	r7, r2
 8006cca:	4606      	mov	r6, r0
 8006ccc:	4698      	mov	r8, r3
 8006cce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006cd0:	f000 80b3 	beq.w	8006e3a <_printf_i+0x182>
 8006cd4:	d822      	bhi.n	8006d1c <_printf_i+0x64>
 8006cd6:	2963      	cmp	r1, #99	; 0x63
 8006cd8:	d036      	beq.n	8006d48 <_printf_i+0x90>
 8006cda:	d80a      	bhi.n	8006cf2 <_printf_i+0x3a>
 8006cdc:	2900      	cmp	r1, #0
 8006cde:	f000 80b9 	beq.w	8006e54 <_printf_i+0x19c>
 8006ce2:	2958      	cmp	r1, #88	; 0x58
 8006ce4:	f000 8083 	beq.w	8006dee <_printf_i+0x136>
 8006ce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006cf0:	e032      	b.n	8006d58 <_printf_i+0xa0>
 8006cf2:	2964      	cmp	r1, #100	; 0x64
 8006cf4:	d001      	beq.n	8006cfa <_printf_i+0x42>
 8006cf6:	2969      	cmp	r1, #105	; 0x69
 8006cf8:	d1f6      	bne.n	8006ce8 <_printf_i+0x30>
 8006cfa:	6820      	ldr	r0, [r4, #0]
 8006cfc:	6813      	ldr	r3, [r2, #0]
 8006cfe:	0605      	lsls	r5, r0, #24
 8006d00:	f103 0104 	add.w	r1, r3, #4
 8006d04:	d52a      	bpl.n	8006d5c <_printf_i+0xa4>
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6011      	str	r1, [r2, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	da03      	bge.n	8006d16 <_printf_i+0x5e>
 8006d0e:	222d      	movs	r2, #45	; 0x2d
 8006d10:	425b      	negs	r3, r3
 8006d12:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006d16:	486f      	ldr	r0, [pc, #444]	; (8006ed4 <_printf_i+0x21c>)
 8006d18:	220a      	movs	r2, #10
 8006d1a:	e039      	b.n	8006d90 <_printf_i+0xd8>
 8006d1c:	2973      	cmp	r1, #115	; 0x73
 8006d1e:	f000 809d 	beq.w	8006e5c <_printf_i+0x1a4>
 8006d22:	d808      	bhi.n	8006d36 <_printf_i+0x7e>
 8006d24:	296f      	cmp	r1, #111	; 0x6f
 8006d26:	d020      	beq.n	8006d6a <_printf_i+0xb2>
 8006d28:	2970      	cmp	r1, #112	; 0x70
 8006d2a:	d1dd      	bne.n	8006ce8 <_printf_i+0x30>
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	f043 0320 	orr.w	r3, r3, #32
 8006d32:	6023      	str	r3, [r4, #0]
 8006d34:	e003      	b.n	8006d3e <_printf_i+0x86>
 8006d36:	2975      	cmp	r1, #117	; 0x75
 8006d38:	d017      	beq.n	8006d6a <_printf_i+0xb2>
 8006d3a:	2978      	cmp	r1, #120	; 0x78
 8006d3c:	d1d4      	bne.n	8006ce8 <_printf_i+0x30>
 8006d3e:	2378      	movs	r3, #120	; 0x78
 8006d40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d44:	4864      	ldr	r0, [pc, #400]	; (8006ed8 <_printf_i+0x220>)
 8006d46:	e055      	b.n	8006df4 <_printf_i+0x13c>
 8006d48:	6813      	ldr	r3, [r2, #0]
 8006d4a:	1d19      	adds	r1, r3, #4
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	6011      	str	r1, [r2, #0]
 8006d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e08c      	b.n	8006e76 <_printf_i+0x1be>
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	6011      	str	r1, [r2, #0]
 8006d60:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d64:	bf18      	it	ne
 8006d66:	b21b      	sxthne	r3, r3
 8006d68:	e7cf      	b.n	8006d0a <_printf_i+0x52>
 8006d6a:	6813      	ldr	r3, [r2, #0]
 8006d6c:	6825      	ldr	r5, [r4, #0]
 8006d6e:	1d18      	adds	r0, r3, #4
 8006d70:	6010      	str	r0, [r2, #0]
 8006d72:	0628      	lsls	r0, r5, #24
 8006d74:	d501      	bpl.n	8006d7a <_printf_i+0xc2>
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	e002      	b.n	8006d80 <_printf_i+0xc8>
 8006d7a:	0668      	lsls	r0, r5, #25
 8006d7c:	d5fb      	bpl.n	8006d76 <_printf_i+0xbe>
 8006d7e:	881b      	ldrh	r3, [r3, #0]
 8006d80:	4854      	ldr	r0, [pc, #336]	; (8006ed4 <_printf_i+0x21c>)
 8006d82:	296f      	cmp	r1, #111	; 0x6f
 8006d84:	bf14      	ite	ne
 8006d86:	220a      	movne	r2, #10
 8006d88:	2208      	moveq	r2, #8
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d90:	6865      	ldr	r5, [r4, #4]
 8006d92:	60a5      	str	r5, [r4, #8]
 8006d94:	2d00      	cmp	r5, #0
 8006d96:	f2c0 8095 	blt.w	8006ec4 <_printf_i+0x20c>
 8006d9a:	6821      	ldr	r1, [r4, #0]
 8006d9c:	f021 0104 	bic.w	r1, r1, #4
 8006da0:	6021      	str	r1, [r4, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d13d      	bne.n	8006e22 <_printf_i+0x16a>
 8006da6:	2d00      	cmp	r5, #0
 8006da8:	f040 808e 	bne.w	8006ec8 <_printf_i+0x210>
 8006dac:	4665      	mov	r5, ip
 8006dae:	2a08      	cmp	r2, #8
 8006db0:	d10b      	bne.n	8006dca <_printf_i+0x112>
 8006db2:	6823      	ldr	r3, [r4, #0]
 8006db4:	07db      	lsls	r3, r3, #31
 8006db6:	d508      	bpl.n	8006dca <_printf_i+0x112>
 8006db8:	6923      	ldr	r3, [r4, #16]
 8006dba:	6862      	ldr	r2, [r4, #4]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	bfde      	ittt	le
 8006dc0:	2330      	movle	r3, #48	; 0x30
 8006dc2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006dc6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006dca:	ebac 0305 	sub.w	r3, ip, r5
 8006dce:	6123      	str	r3, [r4, #16]
 8006dd0:	f8cd 8000 	str.w	r8, [sp]
 8006dd4:	463b      	mov	r3, r7
 8006dd6:	aa03      	add	r2, sp, #12
 8006dd8:	4621      	mov	r1, r4
 8006dda:	4630      	mov	r0, r6
 8006ddc:	f7ff fef6 	bl	8006bcc <_printf_common>
 8006de0:	3001      	adds	r0, #1
 8006de2:	d14d      	bne.n	8006e80 <_printf_i+0x1c8>
 8006de4:	f04f 30ff 	mov.w	r0, #4294967295
 8006de8:	b005      	add	sp, #20
 8006dea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006dee:	4839      	ldr	r0, [pc, #228]	; (8006ed4 <_printf_i+0x21c>)
 8006df0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006df4:	6813      	ldr	r3, [r2, #0]
 8006df6:	6821      	ldr	r1, [r4, #0]
 8006df8:	1d1d      	adds	r5, r3, #4
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6015      	str	r5, [r2, #0]
 8006dfe:	060a      	lsls	r2, r1, #24
 8006e00:	d50b      	bpl.n	8006e1a <_printf_i+0x162>
 8006e02:	07ca      	lsls	r2, r1, #31
 8006e04:	bf44      	itt	mi
 8006e06:	f041 0120 	orrmi.w	r1, r1, #32
 8006e0a:	6021      	strmi	r1, [r4, #0]
 8006e0c:	b91b      	cbnz	r3, 8006e16 <_printf_i+0x15e>
 8006e0e:	6822      	ldr	r2, [r4, #0]
 8006e10:	f022 0220 	bic.w	r2, r2, #32
 8006e14:	6022      	str	r2, [r4, #0]
 8006e16:	2210      	movs	r2, #16
 8006e18:	e7b7      	b.n	8006d8a <_printf_i+0xd2>
 8006e1a:	064d      	lsls	r5, r1, #25
 8006e1c:	bf48      	it	mi
 8006e1e:	b29b      	uxthmi	r3, r3
 8006e20:	e7ef      	b.n	8006e02 <_printf_i+0x14a>
 8006e22:	4665      	mov	r5, ip
 8006e24:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e28:	fb02 3311 	mls	r3, r2, r1, r3
 8006e2c:	5cc3      	ldrb	r3, [r0, r3]
 8006e2e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006e32:	460b      	mov	r3, r1
 8006e34:	2900      	cmp	r1, #0
 8006e36:	d1f5      	bne.n	8006e24 <_printf_i+0x16c>
 8006e38:	e7b9      	b.n	8006dae <_printf_i+0xf6>
 8006e3a:	6813      	ldr	r3, [r2, #0]
 8006e3c:	6825      	ldr	r5, [r4, #0]
 8006e3e:	6961      	ldr	r1, [r4, #20]
 8006e40:	1d18      	adds	r0, r3, #4
 8006e42:	6010      	str	r0, [r2, #0]
 8006e44:	0628      	lsls	r0, r5, #24
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	d501      	bpl.n	8006e4e <_printf_i+0x196>
 8006e4a:	6019      	str	r1, [r3, #0]
 8006e4c:	e002      	b.n	8006e54 <_printf_i+0x19c>
 8006e4e:	066a      	lsls	r2, r5, #25
 8006e50:	d5fb      	bpl.n	8006e4a <_printf_i+0x192>
 8006e52:	8019      	strh	r1, [r3, #0]
 8006e54:	2300      	movs	r3, #0
 8006e56:	6123      	str	r3, [r4, #16]
 8006e58:	4665      	mov	r5, ip
 8006e5a:	e7b9      	b.n	8006dd0 <_printf_i+0x118>
 8006e5c:	6813      	ldr	r3, [r2, #0]
 8006e5e:	1d19      	adds	r1, r3, #4
 8006e60:	6011      	str	r1, [r2, #0]
 8006e62:	681d      	ldr	r5, [r3, #0]
 8006e64:	6862      	ldr	r2, [r4, #4]
 8006e66:	2100      	movs	r1, #0
 8006e68:	4628      	mov	r0, r5
 8006e6a:	f7f9 f9c9 	bl	8000200 <memchr>
 8006e6e:	b108      	cbz	r0, 8006e74 <_printf_i+0x1bc>
 8006e70:	1b40      	subs	r0, r0, r5
 8006e72:	6060      	str	r0, [r4, #4]
 8006e74:	6863      	ldr	r3, [r4, #4]
 8006e76:	6123      	str	r3, [r4, #16]
 8006e78:	2300      	movs	r3, #0
 8006e7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e7e:	e7a7      	b.n	8006dd0 <_printf_i+0x118>
 8006e80:	6923      	ldr	r3, [r4, #16]
 8006e82:	462a      	mov	r2, r5
 8006e84:	4639      	mov	r1, r7
 8006e86:	4630      	mov	r0, r6
 8006e88:	47c0      	blx	r8
 8006e8a:	3001      	adds	r0, #1
 8006e8c:	d0aa      	beq.n	8006de4 <_printf_i+0x12c>
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	079b      	lsls	r3, r3, #30
 8006e92:	d413      	bmi.n	8006ebc <_printf_i+0x204>
 8006e94:	68e0      	ldr	r0, [r4, #12]
 8006e96:	9b03      	ldr	r3, [sp, #12]
 8006e98:	4298      	cmp	r0, r3
 8006e9a:	bfb8      	it	lt
 8006e9c:	4618      	movlt	r0, r3
 8006e9e:	e7a3      	b.n	8006de8 <_printf_i+0x130>
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	464a      	mov	r2, r9
 8006ea4:	4639      	mov	r1, r7
 8006ea6:	4630      	mov	r0, r6
 8006ea8:	47c0      	blx	r8
 8006eaa:	3001      	adds	r0, #1
 8006eac:	d09a      	beq.n	8006de4 <_printf_i+0x12c>
 8006eae:	3501      	adds	r5, #1
 8006eb0:	68e3      	ldr	r3, [r4, #12]
 8006eb2:	9a03      	ldr	r2, [sp, #12]
 8006eb4:	1a9b      	subs	r3, r3, r2
 8006eb6:	42ab      	cmp	r3, r5
 8006eb8:	dcf2      	bgt.n	8006ea0 <_printf_i+0x1e8>
 8006eba:	e7eb      	b.n	8006e94 <_printf_i+0x1dc>
 8006ebc:	2500      	movs	r5, #0
 8006ebe:	f104 0919 	add.w	r9, r4, #25
 8006ec2:	e7f5      	b.n	8006eb0 <_printf_i+0x1f8>
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1ac      	bne.n	8006e22 <_printf_i+0x16a>
 8006ec8:	7803      	ldrb	r3, [r0, #0]
 8006eca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ece:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ed2:	e76c      	b.n	8006dae <_printf_i+0xf6>
 8006ed4:	08009b56 	.word	0x08009b56
 8006ed8:	08009b67 	.word	0x08009b67

08006edc <iprintf>:
 8006edc:	b40f      	push	{r0, r1, r2, r3}
 8006ede:	4b0a      	ldr	r3, [pc, #40]	; (8006f08 <iprintf+0x2c>)
 8006ee0:	b513      	push	{r0, r1, r4, lr}
 8006ee2:	681c      	ldr	r4, [r3, #0]
 8006ee4:	b124      	cbz	r4, 8006ef0 <iprintf+0x14>
 8006ee6:	69a3      	ldr	r3, [r4, #24]
 8006ee8:	b913      	cbnz	r3, 8006ef0 <iprintf+0x14>
 8006eea:	4620      	mov	r0, r4
 8006eec:	f001 f91c 	bl	8008128 <__sinit>
 8006ef0:	ab05      	add	r3, sp, #20
 8006ef2:	9a04      	ldr	r2, [sp, #16]
 8006ef4:	68a1      	ldr	r1, [r4, #8]
 8006ef6:	9301      	str	r3, [sp, #4]
 8006ef8:	4620      	mov	r0, r4
 8006efa:	f001 fddf 	bl	8008abc <_vfiprintf_r>
 8006efe:	b002      	add	sp, #8
 8006f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f04:	b004      	add	sp, #16
 8006f06:	4770      	bx	lr
 8006f08:	20000020 	.word	0x20000020

08006f0c <_puts_r>:
 8006f0c:	b570      	push	{r4, r5, r6, lr}
 8006f0e:	460e      	mov	r6, r1
 8006f10:	4605      	mov	r5, r0
 8006f12:	b118      	cbz	r0, 8006f1c <_puts_r+0x10>
 8006f14:	6983      	ldr	r3, [r0, #24]
 8006f16:	b90b      	cbnz	r3, 8006f1c <_puts_r+0x10>
 8006f18:	f001 f906 	bl	8008128 <__sinit>
 8006f1c:	69ab      	ldr	r3, [r5, #24]
 8006f1e:	68ac      	ldr	r4, [r5, #8]
 8006f20:	b913      	cbnz	r3, 8006f28 <_puts_r+0x1c>
 8006f22:	4628      	mov	r0, r5
 8006f24:	f001 f900 	bl	8008128 <__sinit>
 8006f28:	4b23      	ldr	r3, [pc, #140]	; (8006fb8 <_puts_r+0xac>)
 8006f2a:	429c      	cmp	r4, r3
 8006f2c:	d117      	bne.n	8006f5e <_puts_r+0x52>
 8006f2e:	686c      	ldr	r4, [r5, #4]
 8006f30:	89a3      	ldrh	r3, [r4, #12]
 8006f32:	071b      	lsls	r3, r3, #28
 8006f34:	d51d      	bpl.n	8006f72 <_puts_r+0x66>
 8006f36:	6923      	ldr	r3, [r4, #16]
 8006f38:	b1db      	cbz	r3, 8006f72 <_puts_r+0x66>
 8006f3a:	3e01      	subs	r6, #1
 8006f3c:	68a3      	ldr	r3, [r4, #8]
 8006f3e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006f42:	3b01      	subs	r3, #1
 8006f44:	60a3      	str	r3, [r4, #8]
 8006f46:	b9e9      	cbnz	r1, 8006f84 <_puts_r+0x78>
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	da2e      	bge.n	8006faa <_puts_r+0x9e>
 8006f4c:	4622      	mov	r2, r4
 8006f4e:	210a      	movs	r1, #10
 8006f50:	4628      	mov	r0, r5
 8006f52:	f000 f8f5 	bl	8007140 <__swbuf_r>
 8006f56:	3001      	adds	r0, #1
 8006f58:	d011      	beq.n	8006f7e <_puts_r+0x72>
 8006f5a:	200a      	movs	r0, #10
 8006f5c:	e011      	b.n	8006f82 <_puts_r+0x76>
 8006f5e:	4b17      	ldr	r3, [pc, #92]	; (8006fbc <_puts_r+0xb0>)
 8006f60:	429c      	cmp	r4, r3
 8006f62:	d101      	bne.n	8006f68 <_puts_r+0x5c>
 8006f64:	68ac      	ldr	r4, [r5, #8]
 8006f66:	e7e3      	b.n	8006f30 <_puts_r+0x24>
 8006f68:	4b15      	ldr	r3, [pc, #84]	; (8006fc0 <_puts_r+0xb4>)
 8006f6a:	429c      	cmp	r4, r3
 8006f6c:	bf08      	it	eq
 8006f6e:	68ec      	ldreq	r4, [r5, #12]
 8006f70:	e7de      	b.n	8006f30 <_puts_r+0x24>
 8006f72:	4621      	mov	r1, r4
 8006f74:	4628      	mov	r0, r5
 8006f76:	f000 f935 	bl	80071e4 <__swsetup_r>
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	d0dd      	beq.n	8006f3a <_puts_r+0x2e>
 8006f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f82:	bd70      	pop	{r4, r5, r6, pc}
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	da04      	bge.n	8006f92 <_puts_r+0x86>
 8006f88:	69a2      	ldr	r2, [r4, #24]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	dc06      	bgt.n	8006f9c <_puts_r+0x90>
 8006f8e:	290a      	cmp	r1, #10
 8006f90:	d004      	beq.n	8006f9c <_puts_r+0x90>
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	1c5a      	adds	r2, r3, #1
 8006f96:	6022      	str	r2, [r4, #0]
 8006f98:	7019      	strb	r1, [r3, #0]
 8006f9a:	e7cf      	b.n	8006f3c <_puts_r+0x30>
 8006f9c:	4622      	mov	r2, r4
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	f000 f8ce 	bl	8007140 <__swbuf_r>
 8006fa4:	3001      	adds	r0, #1
 8006fa6:	d1c9      	bne.n	8006f3c <_puts_r+0x30>
 8006fa8:	e7e9      	b.n	8006f7e <_puts_r+0x72>
 8006faa:	6823      	ldr	r3, [r4, #0]
 8006fac:	200a      	movs	r0, #10
 8006fae:	1c5a      	adds	r2, r3, #1
 8006fb0:	6022      	str	r2, [r4, #0]
 8006fb2:	7018      	strb	r0, [r3, #0]
 8006fb4:	e7e5      	b.n	8006f82 <_puts_r+0x76>
 8006fb6:	bf00      	nop
 8006fb8:	08009ba8 	.word	0x08009ba8
 8006fbc:	08009bc8 	.word	0x08009bc8
 8006fc0:	08009b88 	.word	0x08009b88

08006fc4 <puts>:
 8006fc4:	4b02      	ldr	r3, [pc, #8]	; (8006fd0 <puts+0xc>)
 8006fc6:	4601      	mov	r1, r0
 8006fc8:	6818      	ldr	r0, [r3, #0]
 8006fca:	f7ff bf9f 	b.w	8006f0c <_puts_r>
 8006fce:	bf00      	nop
 8006fd0:	20000020 	.word	0x20000020

08006fd4 <setbuf>:
 8006fd4:	2900      	cmp	r1, #0
 8006fd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fda:	bf0c      	ite	eq
 8006fdc:	2202      	moveq	r2, #2
 8006fde:	2200      	movne	r2, #0
 8006fe0:	f000 b800 	b.w	8006fe4 <setvbuf>

08006fe4 <setvbuf>:
 8006fe4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006fe8:	461d      	mov	r5, r3
 8006fea:	4b51      	ldr	r3, [pc, #324]	; (8007130 <setvbuf+0x14c>)
 8006fec:	681e      	ldr	r6, [r3, #0]
 8006fee:	4604      	mov	r4, r0
 8006ff0:	460f      	mov	r7, r1
 8006ff2:	4690      	mov	r8, r2
 8006ff4:	b126      	cbz	r6, 8007000 <setvbuf+0x1c>
 8006ff6:	69b3      	ldr	r3, [r6, #24]
 8006ff8:	b913      	cbnz	r3, 8007000 <setvbuf+0x1c>
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	f001 f894 	bl	8008128 <__sinit>
 8007000:	4b4c      	ldr	r3, [pc, #304]	; (8007134 <setvbuf+0x150>)
 8007002:	429c      	cmp	r4, r3
 8007004:	d152      	bne.n	80070ac <setvbuf+0xc8>
 8007006:	6874      	ldr	r4, [r6, #4]
 8007008:	f1b8 0f02 	cmp.w	r8, #2
 800700c:	d006      	beq.n	800701c <setvbuf+0x38>
 800700e:	f1b8 0f01 	cmp.w	r8, #1
 8007012:	f200 8089 	bhi.w	8007128 <setvbuf+0x144>
 8007016:	2d00      	cmp	r5, #0
 8007018:	f2c0 8086 	blt.w	8007128 <setvbuf+0x144>
 800701c:	4621      	mov	r1, r4
 800701e:	4630      	mov	r0, r6
 8007020:	f001 f818 	bl	8008054 <_fflush_r>
 8007024:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007026:	b141      	cbz	r1, 800703a <setvbuf+0x56>
 8007028:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800702c:	4299      	cmp	r1, r3
 800702e:	d002      	beq.n	8007036 <setvbuf+0x52>
 8007030:	4630      	mov	r0, r6
 8007032:	f001 fc71 	bl	8008918 <_free_r>
 8007036:	2300      	movs	r3, #0
 8007038:	6363      	str	r3, [r4, #52]	; 0x34
 800703a:	2300      	movs	r3, #0
 800703c:	61a3      	str	r3, [r4, #24]
 800703e:	6063      	str	r3, [r4, #4]
 8007040:	89a3      	ldrh	r3, [r4, #12]
 8007042:	061b      	lsls	r3, r3, #24
 8007044:	d503      	bpl.n	800704e <setvbuf+0x6a>
 8007046:	6921      	ldr	r1, [r4, #16]
 8007048:	4630      	mov	r0, r6
 800704a:	f001 fc65 	bl	8008918 <_free_r>
 800704e:	89a3      	ldrh	r3, [r4, #12]
 8007050:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007054:	f023 0303 	bic.w	r3, r3, #3
 8007058:	f1b8 0f02 	cmp.w	r8, #2
 800705c:	81a3      	strh	r3, [r4, #12]
 800705e:	d05d      	beq.n	800711c <setvbuf+0x138>
 8007060:	ab01      	add	r3, sp, #4
 8007062:	466a      	mov	r2, sp
 8007064:	4621      	mov	r1, r4
 8007066:	4630      	mov	r0, r6
 8007068:	f001 f8f6 	bl	8008258 <__swhatbuf_r>
 800706c:	89a3      	ldrh	r3, [r4, #12]
 800706e:	4318      	orrs	r0, r3
 8007070:	81a0      	strh	r0, [r4, #12]
 8007072:	bb2d      	cbnz	r5, 80070c0 <setvbuf+0xdc>
 8007074:	9d00      	ldr	r5, [sp, #0]
 8007076:	4628      	mov	r0, r5
 8007078:	f001 f952 	bl	8008320 <malloc>
 800707c:	4607      	mov	r7, r0
 800707e:	2800      	cmp	r0, #0
 8007080:	d14e      	bne.n	8007120 <setvbuf+0x13c>
 8007082:	f8dd 9000 	ldr.w	r9, [sp]
 8007086:	45a9      	cmp	r9, r5
 8007088:	d13c      	bne.n	8007104 <setvbuf+0x120>
 800708a:	f04f 30ff 	mov.w	r0, #4294967295
 800708e:	89a3      	ldrh	r3, [r4, #12]
 8007090:	f043 0302 	orr.w	r3, r3, #2
 8007094:	81a3      	strh	r3, [r4, #12]
 8007096:	2300      	movs	r3, #0
 8007098:	60a3      	str	r3, [r4, #8]
 800709a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800709e:	6023      	str	r3, [r4, #0]
 80070a0:	6123      	str	r3, [r4, #16]
 80070a2:	2301      	movs	r3, #1
 80070a4:	6163      	str	r3, [r4, #20]
 80070a6:	b003      	add	sp, #12
 80070a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070ac:	4b22      	ldr	r3, [pc, #136]	; (8007138 <setvbuf+0x154>)
 80070ae:	429c      	cmp	r4, r3
 80070b0:	d101      	bne.n	80070b6 <setvbuf+0xd2>
 80070b2:	68b4      	ldr	r4, [r6, #8]
 80070b4:	e7a8      	b.n	8007008 <setvbuf+0x24>
 80070b6:	4b21      	ldr	r3, [pc, #132]	; (800713c <setvbuf+0x158>)
 80070b8:	429c      	cmp	r4, r3
 80070ba:	bf08      	it	eq
 80070bc:	68f4      	ldreq	r4, [r6, #12]
 80070be:	e7a3      	b.n	8007008 <setvbuf+0x24>
 80070c0:	2f00      	cmp	r7, #0
 80070c2:	d0d8      	beq.n	8007076 <setvbuf+0x92>
 80070c4:	69b3      	ldr	r3, [r6, #24]
 80070c6:	b913      	cbnz	r3, 80070ce <setvbuf+0xea>
 80070c8:	4630      	mov	r0, r6
 80070ca:	f001 f82d 	bl	8008128 <__sinit>
 80070ce:	f1b8 0f01 	cmp.w	r8, #1
 80070d2:	bf08      	it	eq
 80070d4:	89a3      	ldrheq	r3, [r4, #12]
 80070d6:	6027      	str	r7, [r4, #0]
 80070d8:	bf04      	itt	eq
 80070da:	f043 0301 	orreq.w	r3, r3, #1
 80070de:	81a3      	strheq	r3, [r4, #12]
 80070e0:	89a3      	ldrh	r3, [r4, #12]
 80070e2:	f013 0008 	ands.w	r0, r3, #8
 80070e6:	e9c4 7504 	strd	r7, r5, [r4, #16]
 80070ea:	d01b      	beq.n	8007124 <setvbuf+0x140>
 80070ec:	f013 0001 	ands.w	r0, r3, #1
 80070f0:	bf18      	it	ne
 80070f2:	426d      	negne	r5, r5
 80070f4:	f04f 0300 	mov.w	r3, #0
 80070f8:	bf1d      	ittte	ne
 80070fa:	60a3      	strne	r3, [r4, #8]
 80070fc:	61a5      	strne	r5, [r4, #24]
 80070fe:	4618      	movne	r0, r3
 8007100:	60a5      	streq	r5, [r4, #8]
 8007102:	e7d0      	b.n	80070a6 <setvbuf+0xc2>
 8007104:	4648      	mov	r0, r9
 8007106:	f001 f90b 	bl	8008320 <malloc>
 800710a:	4607      	mov	r7, r0
 800710c:	2800      	cmp	r0, #0
 800710e:	d0bc      	beq.n	800708a <setvbuf+0xa6>
 8007110:	89a3      	ldrh	r3, [r4, #12]
 8007112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007116:	81a3      	strh	r3, [r4, #12]
 8007118:	464d      	mov	r5, r9
 800711a:	e7d3      	b.n	80070c4 <setvbuf+0xe0>
 800711c:	2000      	movs	r0, #0
 800711e:	e7b6      	b.n	800708e <setvbuf+0xaa>
 8007120:	46a9      	mov	r9, r5
 8007122:	e7f5      	b.n	8007110 <setvbuf+0x12c>
 8007124:	60a0      	str	r0, [r4, #8]
 8007126:	e7be      	b.n	80070a6 <setvbuf+0xc2>
 8007128:	f04f 30ff 	mov.w	r0, #4294967295
 800712c:	e7bb      	b.n	80070a6 <setvbuf+0xc2>
 800712e:	bf00      	nop
 8007130:	20000020 	.word	0x20000020
 8007134:	08009ba8 	.word	0x08009ba8
 8007138:	08009bc8 	.word	0x08009bc8
 800713c:	08009b88 	.word	0x08009b88

08007140 <__swbuf_r>:
 8007140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007142:	460e      	mov	r6, r1
 8007144:	4614      	mov	r4, r2
 8007146:	4605      	mov	r5, r0
 8007148:	b118      	cbz	r0, 8007152 <__swbuf_r+0x12>
 800714a:	6983      	ldr	r3, [r0, #24]
 800714c:	b90b      	cbnz	r3, 8007152 <__swbuf_r+0x12>
 800714e:	f000 ffeb 	bl	8008128 <__sinit>
 8007152:	4b21      	ldr	r3, [pc, #132]	; (80071d8 <__swbuf_r+0x98>)
 8007154:	429c      	cmp	r4, r3
 8007156:	d12a      	bne.n	80071ae <__swbuf_r+0x6e>
 8007158:	686c      	ldr	r4, [r5, #4]
 800715a:	69a3      	ldr	r3, [r4, #24]
 800715c:	60a3      	str	r3, [r4, #8]
 800715e:	89a3      	ldrh	r3, [r4, #12]
 8007160:	071a      	lsls	r2, r3, #28
 8007162:	d52e      	bpl.n	80071c2 <__swbuf_r+0x82>
 8007164:	6923      	ldr	r3, [r4, #16]
 8007166:	b363      	cbz	r3, 80071c2 <__swbuf_r+0x82>
 8007168:	6923      	ldr	r3, [r4, #16]
 800716a:	6820      	ldr	r0, [r4, #0]
 800716c:	1ac0      	subs	r0, r0, r3
 800716e:	6963      	ldr	r3, [r4, #20]
 8007170:	b2f6      	uxtb	r6, r6
 8007172:	4283      	cmp	r3, r0
 8007174:	4637      	mov	r7, r6
 8007176:	dc04      	bgt.n	8007182 <__swbuf_r+0x42>
 8007178:	4621      	mov	r1, r4
 800717a:	4628      	mov	r0, r5
 800717c:	f000 ff6a 	bl	8008054 <_fflush_r>
 8007180:	bb28      	cbnz	r0, 80071ce <__swbuf_r+0x8e>
 8007182:	68a3      	ldr	r3, [r4, #8]
 8007184:	3b01      	subs	r3, #1
 8007186:	60a3      	str	r3, [r4, #8]
 8007188:	6823      	ldr	r3, [r4, #0]
 800718a:	1c5a      	adds	r2, r3, #1
 800718c:	6022      	str	r2, [r4, #0]
 800718e:	701e      	strb	r6, [r3, #0]
 8007190:	6963      	ldr	r3, [r4, #20]
 8007192:	3001      	adds	r0, #1
 8007194:	4283      	cmp	r3, r0
 8007196:	d004      	beq.n	80071a2 <__swbuf_r+0x62>
 8007198:	89a3      	ldrh	r3, [r4, #12]
 800719a:	07db      	lsls	r3, r3, #31
 800719c:	d519      	bpl.n	80071d2 <__swbuf_r+0x92>
 800719e:	2e0a      	cmp	r6, #10
 80071a0:	d117      	bne.n	80071d2 <__swbuf_r+0x92>
 80071a2:	4621      	mov	r1, r4
 80071a4:	4628      	mov	r0, r5
 80071a6:	f000 ff55 	bl	8008054 <_fflush_r>
 80071aa:	b190      	cbz	r0, 80071d2 <__swbuf_r+0x92>
 80071ac:	e00f      	b.n	80071ce <__swbuf_r+0x8e>
 80071ae:	4b0b      	ldr	r3, [pc, #44]	; (80071dc <__swbuf_r+0x9c>)
 80071b0:	429c      	cmp	r4, r3
 80071b2:	d101      	bne.n	80071b8 <__swbuf_r+0x78>
 80071b4:	68ac      	ldr	r4, [r5, #8]
 80071b6:	e7d0      	b.n	800715a <__swbuf_r+0x1a>
 80071b8:	4b09      	ldr	r3, [pc, #36]	; (80071e0 <__swbuf_r+0xa0>)
 80071ba:	429c      	cmp	r4, r3
 80071bc:	bf08      	it	eq
 80071be:	68ec      	ldreq	r4, [r5, #12]
 80071c0:	e7cb      	b.n	800715a <__swbuf_r+0x1a>
 80071c2:	4621      	mov	r1, r4
 80071c4:	4628      	mov	r0, r5
 80071c6:	f000 f80d 	bl	80071e4 <__swsetup_r>
 80071ca:	2800      	cmp	r0, #0
 80071cc:	d0cc      	beq.n	8007168 <__swbuf_r+0x28>
 80071ce:	f04f 37ff 	mov.w	r7, #4294967295
 80071d2:	4638      	mov	r0, r7
 80071d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071d6:	bf00      	nop
 80071d8:	08009ba8 	.word	0x08009ba8
 80071dc:	08009bc8 	.word	0x08009bc8
 80071e0:	08009b88 	.word	0x08009b88

080071e4 <__swsetup_r>:
 80071e4:	4b32      	ldr	r3, [pc, #200]	; (80072b0 <__swsetup_r+0xcc>)
 80071e6:	b570      	push	{r4, r5, r6, lr}
 80071e8:	681d      	ldr	r5, [r3, #0]
 80071ea:	4606      	mov	r6, r0
 80071ec:	460c      	mov	r4, r1
 80071ee:	b125      	cbz	r5, 80071fa <__swsetup_r+0x16>
 80071f0:	69ab      	ldr	r3, [r5, #24]
 80071f2:	b913      	cbnz	r3, 80071fa <__swsetup_r+0x16>
 80071f4:	4628      	mov	r0, r5
 80071f6:	f000 ff97 	bl	8008128 <__sinit>
 80071fa:	4b2e      	ldr	r3, [pc, #184]	; (80072b4 <__swsetup_r+0xd0>)
 80071fc:	429c      	cmp	r4, r3
 80071fe:	d10f      	bne.n	8007220 <__swsetup_r+0x3c>
 8007200:	686c      	ldr	r4, [r5, #4]
 8007202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007206:	b29a      	uxth	r2, r3
 8007208:	0715      	lsls	r5, r2, #28
 800720a:	d42c      	bmi.n	8007266 <__swsetup_r+0x82>
 800720c:	06d0      	lsls	r0, r2, #27
 800720e:	d411      	bmi.n	8007234 <__swsetup_r+0x50>
 8007210:	2209      	movs	r2, #9
 8007212:	6032      	str	r2, [r6, #0]
 8007214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007218:	81a3      	strh	r3, [r4, #12]
 800721a:	f04f 30ff 	mov.w	r0, #4294967295
 800721e:	e03e      	b.n	800729e <__swsetup_r+0xba>
 8007220:	4b25      	ldr	r3, [pc, #148]	; (80072b8 <__swsetup_r+0xd4>)
 8007222:	429c      	cmp	r4, r3
 8007224:	d101      	bne.n	800722a <__swsetup_r+0x46>
 8007226:	68ac      	ldr	r4, [r5, #8]
 8007228:	e7eb      	b.n	8007202 <__swsetup_r+0x1e>
 800722a:	4b24      	ldr	r3, [pc, #144]	; (80072bc <__swsetup_r+0xd8>)
 800722c:	429c      	cmp	r4, r3
 800722e:	bf08      	it	eq
 8007230:	68ec      	ldreq	r4, [r5, #12]
 8007232:	e7e6      	b.n	8007202 <__swsetup_r+0x1e>
 8007234:	0751      	lsls	r1, r2, #29
 8007236:	d512      	bpl.n	800725e <__swsetup_r+0x7a>
 8007238:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800723a:	b141      	cbz	r1, 800724e <__swsetup_r+0x6a>
 800723c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007240:	4299      	cmp	r1, r3
 8007242:	d002      	beq.n	800724a <__swsetup_r+0x66>
 8007244:	4630      	mov	r0, r6
 8007246:	f001 fb67 	bl	8008918 <_free_r>
 800724a:	2300      	movs	r3, #0
 800724c:	6363      	str	r3, [r4, #52]	; 0x34
 800724e:	89a3      	ldrh	r3, [r4, #12]
 8007250:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007254:	81a3      	strh	r3, [r4, #12]
 8007256:	2300      	movs	r3, #0
 8007258:	6063      	str	r3, [r4, #4]
 800725a:	6923      	ldr	r3, [r4, #16]
 800725c:	6023      	str	r3, [r4, #0]
 800725e:	89a3      	ldrh	r3, [r4, #12]
 8007260:	f043 0308 	orr.w	r3, r3, #8
 8007264:	81a3      	strh	r3, [r4, #12]
 8007266:	6923      	ldr	r3, [r4, #16]
 8007268:	b94b      	cbnz	r3, 800727e <__swsetup_r+0x9a>
 800726a:	89a3      	ldrh	r3, [r4, #12]
 800726c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007274:	d003      	beq.n	800727e <__swsetup_r+0x9a>
 8007276:	4621      	mov	r1, r4
 8007278:	4630      	mov	r0, r6
 800727a:	f001 f811 	bl	80082a0 <__smakebuf_r>
 800727e:	89a2      	ldrh	r2, [r4, #12]
 8007280:	f012 0301 	ands.w	r3, r2, #1
 8007284:	d00c      	beq.n	80072a0 <__swsetup_r+0xbc>
 8007286:	2300      	movs	r3, #0
 8007288:	60a3      	str	r3, [r4, #8]
 800728a:	6963      	ldr	r3, [r4, #20]
 800728c:	425b      	negs	r3, r3
 800728e:	61a3      	str	r3, [r4, #24]
 8007290:	6923      	ldr	r3, [r4, #16]
 8007292:	b953      	cbnz	r3, 80072aa <__swsetup_r+0xc6>
 8007294:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007298:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800729c:	d1ba      	bne.n	8007214 <__swsetup_r+0x30>
 800729e:	bd70      	pop	{r4, r5, r6, pc}
 80072a0:	0792      	lsls	r2, r2, #30
 80072a2:	bf58      	it	pl
 80072a4:	6963      	ldrpl	r3, [r4, #20]
 80072a6:	60a3      	str	r3, [r4, #8]
 80072a8:	e7f2      	b.n	8007290 <__swsetup_r+0xac>
 80072aa:	2000      	movs	r0, #0
 80072ac:	e7f7      	b.n	800729e <__swsetup_r+0xba>
 80072ae:	bf00      	nop
 80072b0:	20000020 	.word	0x20000020
 80072b4:	08009ba8 	.word	0x08009ba8
 80072b8:	08009bc8 	.word	0x08009bc8
 80072bc:	08009b88 	.word	0x08009b88

080072c0 <quorem>:
 80072c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c4:	6903      	ldr	r3, [r0, #16]
 80072c6:	690c      	ldr	r4, [r1, #16]
 80072c8:	42a3      	cmp	r3, r4
 80072ca:	4680      	mov	r8, r0
 80072cc:	f2c0 8082 	blt.w	80073d4 <quorem+0x114>
 80072d0:	3c01      	subs	r4, #1
 80072d2:	f101 0714 	add.w	r7, r1, #20
 80072d6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80072da:	f100 0614 	add.w	r6, r0, #20
 80072de:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80072e2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80072e6:	eb06 030c 	add.w	r3, r6, ip
 80072ea:	3501      	adds	r5, #1
 80072ec:	eb07 090c 	add.w	r9, r7, ip
 80072f0:	9301      	str	r3, [sp, #4]
 80072f2:	fbb0 f5f5 	udiv	r5, r0, r5
 80072f6:	b395      	cbz	r5, 800735e <quorem+0x9e>
 80072f8:	f04f 0a00 	mov.w	sl, #0
 80072fc:	4638      	mov	r0, r7
 80072fe:	46b6      	mov	lr, r6
 8007300:	46d3      	mov	fp, sl
 8007302:	f850 2b04 	ldr.w	r2, [r0], #4
 8007306:	b293      	uxth	r3, r2
 8007308:	fb05 a303 	mla	r3, r5, r3, sl
 800730c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007310:	b29b      	uxth	r3, r3
 8007312:	ebab 0303 	sub.w	r3, fp, r3
 8007316:	0c12      	lsrs	r2, r2, #16
 8007318:	f8de b000 	ldr.w	fp, [lr]
 800731c:	fb05 a202 	mla	r2, r5, r2, sl
 8007320:	fa13 f38b 	uxtah	r3, r3, fp
 8007324:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007328:	fa1f fb82 	uxth.w	fp, r2
 800732c:	f8de 2000 	ldr.w	r2, [lr]
 8007330:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007334:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007338:	b29b      	uxth	r3, r3
 800733a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800733e:	4581      	cmp	r9, r0
 8007340:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007344:	f84e 3b04 	str.w	r3, [lr], #4
 8007348:	d2db      	bcs.n	8007302 <quorem+0x42>
 800734a:	f856 300c 	ldr.w	r3, [r6, ip]
 800734e:	b933      	cbnz	r3, 800735e <quorem+0x9e>
 8007350:	9b01      	ldr	r3, [sp, #4]
 8007352:	3b04      	subs	r3, #4
 8007354:	429e      	cmp	r6, r3
 8007356:	461a      	mov	r2, r3
 8007358:	d330      	bcc.n	80073bc <quorem+0xfc>
 800735a:	f8c8 4010 	str.w	r4, [r8, #16]
 800735e:	4640      	mov	r0, r8
 8007360:	f001 fa06 	bl	8008770 <__mcmp>
 8007364:	2800      	cmp	r0, #0
 8007366:	db25      	blt.n	80073b4 <quorem+0xf4>
 8007368:	3501      	adds	r5, #1
 800736a:	4630      	mov	r0, r6
 800736c:	f04f 0c00 	mov.w	ip, #0
 8007370:	f857 2b04 	ldr.w	r2, [r7], #4
 8007374:	f8d0 e000 	ldr.w	lr, [r0]
 8007378:	b293      	uxth	r3, r2
 800737a:	ebac 0303 	sub.w	r3, ip, r3
 800737e:	0c12      	lsrs	r2, r2, #16
 8007380:	fa13 f38e 	uxtah	r3, r3, lr
 8007384:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007388:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800738c:	b29b      	uxth	r3, r3
 800738e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007392:	45b9      	cmp	r9, r7
 8007394:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007398:	f840 3b04 	str.w	r3, [r0], #4
 800739c:	d2e8      	bcs.n	8007370 <quorem+0xb0>
 800739e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80073a2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80073a6:	b92a      	cbnz	r2, 80073b4 <quorem+0xf4>
 80073a8:	3b04      	subs	r3, #4
 80073aa:	429e      	cmp	r6, r3
 80073ac:	461a      	mov	r2, r3
 80073ae:	d30b      	bcc.n	80073c8 <quorem+0x108>
 80073b0:	f8c8 4010 	str.w	r4, [r8, #16]
 80073b4:	4628      	mov	r0, r5
 80073b6:	b003      	add	sp, #12
 80073b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073bc:	6812      	ldr	r2, [r2, #0]
 80073be:	3b04      	subs	r3, #4
 80073c0:	2a00      	cmp	r2, #0
 80073c2:	d1ca      	bne.n	800735a <quorem+0x9a>
 80073c4:	3c01      	subs	r4, #1
 80073c6:	e7c5      	b.n	8007354 <quorem+0x94>
 80073c8:	6812      	ldr	r2, [r2, #0]
 80073ca:	3b04      	subs	r3, #4
 80073cc:	2a00      	cmp	r2, #0
 80073ce:	d1ef      	bne.n	80073b0 <quorem+0xf0>
 80073d0:	3c01      	subs	r4, #1
 80073d2:	e7ea      	b.n	80073aa <quorem+0xea>
 80073d4:	2000      	movs	r0, #0
 80073d6:	e7ee      	b.n	80073b6 <quorem+0xf6>

080073d8 <_dtoa_r>:
 80073d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073dc:	ec57 6b10 	vmov	r6, r7, d0
 80073e0:	b097      	sub	sp, #92	; 0x5c
 80073e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80073e4:	9106      	str	r1, [sp, #24]
 80073e6:	4604      	mov	r4, r0
 80073e8:	920b      	str	r2, [sp, #44]	; 0x2c
 80073ea:	9312      	str	r3, [sp, #72]	; 0x48
 80073ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80073f0:	e9cd 6700 	strd	r6, r7, [sp]
 80073f4:	b93d      	cbnz	r5, 8007406 <_dtoa_r+0x2e>
 80073f6:	2010      	movs	r0, #16
 80073f8:	f000 ff92 	bl	8008320 <malloc>
 80073fc:	6260      	str	r0, [r4, #36]	; 0x24
 80073fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007402:	6005      	str	r5, [r0, #0]
 8007404:	60c5      	str	r5, [r0, #12]
 8007406:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007408:	6819      	ldr	r1, [r3, #0]
 800740a:	b151      	cbz	r1, 8007422 <_dtoa_r+0x4a>
 800740c:	685a      	ldr	r2, [r3, #4]
 800740e:	604a      	str	r2, [r1, #4]
 8007410:	2301      	movs	r3, #1
 8007412:	4093      	lsls	r3, r2
 8007414:	608b      	str	r3, [r1, #8]
 8007416:	4620      	mov	r0, r4
 8007418:	f000 ffc9 	bl	80083ae <_Bfree>
 800741c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800741e:	2200      	movs	r2, #0
 8007420:	601a      	str	r2, [r3, #0]
 8007422:	1e3b      	subs	r3, r7, #0
 8007424:	bfbb      	ittet	lt
 8007426:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800742a:	9301      	strlt	r3, [sp, #4]
 800742c:	2300      	movge	r3, #0
 800742e:	2201      	movlt	r2, #1
 8007430:	bfac      	ite	ge
 8007432:	f8c8 3000 	strge.w	r3, [r8]
 8007436:	f8c8 2000 	strlt.w	r2, [r8]
 800743a:	4baf      	ldr	r3, [pc, #700]	; (80076f8 <_dtoa_r+0x320>)
 800743c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007440:	ea33 0308 	bics.w	r3, r3, r8
 8007444:	d114      	bne.n	8007470 <_dtoa_r+0x98>
 8007446:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007448:	f242 730f 	movw	r3, #9999	; 0x270f
 800744c:	6013      	str	r3, [r2, #0]
 800744e:	9b00      	ldr	r3, [sp, #0]
 8007450:	b923      	cbnz	r3, 800745c <_dtoa_r+0x84>
 8007452:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007456:	2800      	cmp	r0, #0
 8007458:	f000 8542 	beq.w	8007ee0 <_dtoa_r+0xb08>
 800745c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800745e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800770c <_dtoa_r+0x334>
 8007462:	2b00      	cmp	r3, #0
 8007464:	f000 8544 	beq.w	8007ef0 <_dtoa_r+0xb18>
 8007468:	f10b 0303 	add.w	r3, fp, #3
 800746c:	f000 bd3e 	b.w	8007eec <_dtoa_r+0xb14>
 8007470:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007474:	2200      	movs	r2, #0
 8007476:	2300      	movs	r3, #0
 8007478:	4630      	mov	r0, r6
 800747a:	4639      	mov	r1, r7
 800747c:	f7f9 fb34 	bl	8000ae8 <__aeabi_dcmpeq>
 8007480:	4681      	mov	r9, r0
 8007482:	b168      	cbz	r0, 80074a0 <_dtoa_r+0xc8>
 8007484:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007486:	2301      	movs	r3, #1
 8007488:	6013      	str	r3, [r2, #0]
 800748a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800748c:	2b00      	cmp	r3, #0
 800748e:	f000 8524 	beq.w	8007eda <_dtoa_r+0xb02>
 8007492:	4b9a      	ldr	r3, [pc, #616]	; (80076fc <_dtoa_r+0x324>)
 8007494:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007496:	f103 3bff 	add.w	fp, r3, #4294967295
 800749a:	6013      	str	r3, [r2, #0]
 800749c:	f000 bd28 	b.w	8007ef0 <_dtoa_r+0xb18>
 80074a0:	aa14      	add	r2, sp, #80	; 0x50
 80074a2:	a915      	add	r1, sp, #84	; 0x54
 80074a4:	ec47 6b10 	vmov	d0, r6, r7
 80074a8:	4620      	mov	r0, r4
 80074aa:	f001 f9d8 	bl	800885e <__d2b>
 80074ae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80074b2:	9004      	str	r0, [sp, #16]
 80074b4:	2d00      	cmp	r5, #0
 80074b6:	d07c      	beq.n	80075b2 <_dtoa_r+0x1da>
 80074b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80074bc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80074c0:	46b2      	mov	sl, r6
 80074c2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80074c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80074ca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80074ce:	2200      	movs	r2, #0
 80074d0:	4b8b      	ldr	r3, [pc, #556]	; (8007700 <_dtoa_r+0x328>)
 80074d2:	4650      	mov	r0, sl
 80074d4:	4659      	mov	r1, fp
 80074d6:	f7f8 fee7 	bl	80002a8 <__aeabi_dsub>
 80074da:	a381      	add	r3, pc, #516	; (adr r3, 80076e0 <_dtoa_r+0x308>)
 80074dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e0:	f7f9 f89a 	bl	8000618 <__aeabi_dmul>
 80074e4:	a380      	add	r3, pc, #512	; (adr r3, 80076e8 <_dtoa_r+0x310>)
 80074e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ea:	f7f8 fedf 	bl	80002ac <__adddf3>
 80074ee:	4606      	mov	r6, r0
 80074f0:	4628      	mov	r0, r5
 80074f2:	460f      	mov	r7, r1
 80074f4:	f7f9 f826 	bl	8000544 <__aeabi_i2d>
 80074f8:	a37d      	add	r3, pc, #500	; (adr r3, 80076f0 <_dtoa_r+0x318>)
 80074fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fe:	f7f9 f88b 	bl	8000618 <__aeabi_dmul>
 8007502:	4602      	mov	r2, r0
 8007504:	460b      	mov	r3, r1
 8007506:	4630      	mov	r0, r6
 8007508:	4639      	mov	r1, r7
 800750a:	f7f8 fecf 	bl	80002ac <__adddf3>
 800750e:	4606      	mov	r6, r0
 8007510:	460f      	mov	r7, r1
 8007512:	f7f9 fb31 	bl	8000b78 <__aeabi_d2iz>
 8007516:	2200      	movs	r2, #0
 8007518:	4682      	mov	sl, r0
 800751a:	2300      	movs	r3, #0
 800751c:	4630      	mov	r0, r6
 800751e:	4639      	mov	r1, r7
 8007520:	f7f9 faec 	bl	8000afc <__aeabi_dcmplt>
 8007524:	b148      	cbz	r0, 800753a <_dtoa_r+0x162>
 8007526:	4650      	mov	r0, sl
 8007528:	f7f9 f80c 	bl	8000544 <__aeabi_i2d>
 800752c:	4632      	mov	r2, r6
 800752e:	463b      	mov	r3, r7
 8007530:	f7f9 fada 	bl	8000ae8 <__aeabi_dcmpeq>
 8007534:	b908      	cbnz	r0, 800753a <_dtoa_r+0x162>
 8007536:	f10a 3aff 	add.w	sl, sl, #4294967295
 800753a:	f1ba 0f16 	cmp.w	sl, #22
 800753e:	d859      	bhi.n	80075f4 <_dtoa_r+0x21c>
 8007540:	4970      	ldr	r1, [pc, #448]	; (8007704 <_dtoa_r+0x32c>)
 8007542:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007546:	e9dd 2300 	ldrd	r2, r3, [sp]
 800754a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800754e:	f7f9 faf3 	bl	8000b38 <__aeabi_dcmpgt>
 8007552:	2800      	cmp	r0, #0
 8007554:	d050      	beq.n	80075f8 <_dtoa_r+0x220>
 8007556:	f10a 3aff 	add.w	sl, sl, #4294967295
 800755a:	2300      	movs	r3, #0
 800755c:	930f      	str	r3, [sp, #60]	; 0x3c
 800755e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007560:	1b5d      	subs	r5, r3, r5
 8007562:	f1b5 0801 	subs.w	r8, r5, #1
 8007566:	bf49      	itett	mi
 8007568:	f1c5 0301 	rsbmi	r3, r5, #1
 800756c:	2300      	movpl	r3, #0
 800756e:	9305      	strmi	r3, [sp, #20]
 8007570:	f04f 0800 	movmi.w	r8, #0
 8007574:	bf58      	it	pl
 8007576:	9305      	strpl	r3, [sp, #20]
 8007578:	f1ba 0f00 	cmp.w	sl, #0
 800757c:	db3e      	blt.n	80075fc <_dtoa_r+0x224>
 800757e:	2300      	movs	r3, #0
 8007580:	44d0      	add	r8, sl
 8007582:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007586:	9307      	str	r3, [sp, #28]
 8007588:	9b06      	ldr	r3, [sp, #24]
 800758a:	2b09      	cmp	r3, #9
 800758c:	f200 8090 	bhi.w	80076b0 <_dtoa_r+0x2d8>
 8007590:	2b05      	cmp	r3, #5
 8007592:	bfc4      	itt	gt
 8007594:	3b04      	subgt	r3, #4
 8007596:	9306      	strgt	r3, [sp, #24]
 8007598:	9b06      	ldr	r3, [sp, #24]
 800759a:	f1a3 0302 	sub.w	r3, r3, #2
 800759e:	bfcc      	ite	gt
 80075a0:	2500      	movgt	r5, #0
 80075a2:	2501      	movle	r5, #1
 80075a4:	2b03      	cmp	r3, #3
 80075a6:	f200 808f 	bhi.w	80076c8 <_dtoa_r+0x2f0>
 80075aa:	e8df f003 	tbb	[pc, r3]
 80075ae:	7f7d      	.short	0x7f7d
 80075b0:	7131      	.short	0x7131
 80075b2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80075b6:	441d      	add	r5, r3
 80075b8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80075bc:	2820      	cmp	r0, #32
 80075be:	dd13      	ble.n	80075e8 <_dtoa_r+0x210>
 80075c0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80075c4:	9b00      	ldr	r3, [sp, #0]
 80075c6:	fa08 f800 	lsl.w	r8, r8, r0
 80075ca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80075ce:	fa23 f000 	lsr.w	r0, r3, r0
 80075d2:	ea48 0000 	orr.w	r0, r8, r0
 80075d6:	f7f8 ffa5 	bl	8000524 <__aeabi_ui2d>
 80075da:	2301      	movs	r3, #1
 80075dc:	4682      	mov	sl, r0
 80075de:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80075e2:	3d01      	subs	r5, #1
 80075e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80075e6:	e772      	b.n	80074ce <_dtoa_r+0xf6>
 80075e8:	9b00      	ldr	r3, [sp, #0]
 80075ea:	f1c0 0020 	rsb	r0, r0, #32
 80075ee:	fa03 f000 	lsl.w	r0, r3, r0
 80075f2:	e7f0      	b.n	80075d6 <_dtoa_r+0x1fe>
 80075f4:	2301      	movs	r3, #1
 80075f6:	e7b1      	b.n	800755c <_dtoa_r+0x184>
 80075f8:	900f      	str	r0, [sp, #60]	; 0x3c
 80075fa:	e7b0      	b.n	800755e <_dtoa_r+0x186>
 80075fc:	9b05      	ldr	r3, [sp, #20]
 80075fe:	eba3 030a 	sub.w	r3, r3, sl
 8007602:	9305      	str	r3, [sp, #20]
 8007604:	f1ca 0300 	rsb	r3, sl, #0
 8007608:	9307      	str	r3, [sp, #28]
 800760a:	2300      	movs	r3, #0
 800760c:	930e      	str	r3, [sp, #56]	; 0x38
 800760e:	e7bb      	b.n	8007588 <_dtoa_r+0x1b0>
 8007610:	2301      	movs	r3, #1
 8007612:	930a      	str	r3, [sp, #40]	; 0x28
 8007614:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007616:	2b00      	cmp	r3, #0
 8007618:	dd59      	ble.n	80076ce <_dtoa_r+0x2f6>
 800761a:	9302      	str	r3, [sp, #8]
 800761c:	4699      	mov	r9, r3
 800761e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007620:	2200      	movs	r2, #0
 8007622:	6072      	str	r2, [r6, #4]
 8007624:	2204      	movs	r2, #4
 8007626:	f102 0014 	add.w	r0, r2, #20
 800762a:	4298      	cmp	r0, r3
 800762c:	6871      	ldr	r1, [r6, #4]
 800762e:	d953      	bls.n	80076d8 <_dtoa_r+0x300>
 8007630:	4620      	mov	r0, r4
 8007632:	f000 fe88 	bl	8008346 <_Balloc>
 8007636:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007638:	6030      	str	r0, [r6, #0]
 800763a:	f1b9 0f0e 	cmp.w	r9, #14
 800763e:	f8d3 b000 	ldr.w	fp, [r3]
 8007642:	f200 80e6 	bhi.w	8007812 <_dtoa_r+0x43a>
 8007646:	2d00      	cmp	r5, #0
 8007648:	f000 80e3 	beq.w	8007812 <_dtoa_r+0x43a>
 800764c:	ed9d 7b00 	vldr	d7, [sp]
 8007650:	f1ba 0f00 	cmp.w	sl, #0
 8007654:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007658:	dd74      	ble.n	8007744 <_dtoa_r+0x36c>
 800765a:	4a2a      	ldr	r2, [pc, #168]	; (8007704 <_dtoa_r+0x32c>)
 800765c:	f00a 030f 	and.w	r3, sl, #15
 8007660:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007664:	ed93 7b00 	vldr	d7, [r3]
 8007668:	ea4f 162a 	mov.w	r6, sl, asr #4
 800766c:	06f0      	lsls	r0, r6, #27
 800766e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007672:	d565      	bpl.n	8007740 <_dtoa_r+0x368>
 8007674:	4b24      	ldr	r3, [pc, #144]	; (8007708 <_dtoa_r+0x330>)
 8007676:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800767a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800767e:	f7f9 f8f5 	bl	800086c <__aeabi_ddiv>
 8007682:	e9cd 0100 	strd	r0, r1, [sp]
 8007686:	f006 060f 	and.w	r6, r6, #15
 800768a:	2503      	movs	r5, #3
 800768c:	4f1e      	ldr	r7, [pc, #120]	; (8007708 <_dtoa_r+0x330>)
 800768e:	e04c      	b.n	800772a <_dtoa_r+0x352>
 8007690:	2301      	movs	r3, #1
 8007692:	930a      	str	r3, [sp, #40]	; 0x28
 8007694:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007696:	4453      	add	r3, sl
 8007698:	f103 0901 	add.w	r9, r3, #1
 800769c:	9302      	str	r3, [sp, #8]
 800769e:	464b      	mov	r3, r9
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	bfb8      	it	lt
 80076a4:	2301      	movlt	r3, #1
 80076a6:	e7ba      	b.n	800761e <_dtoa_r+0x246>
 80076a8:	2300      	movs	r3, #0
 80076aa:	e7b2      	b.n	8007612 <_dtoa_r+0x23a>
 80076ac:	2300      	movs	r3, #0
 80076ae:	e7f0      	b.n	8007692 <_dtoa_r+0x2ba>
 80076b0:	2501      	movs	r5, #1
 80076b2:	2300      	movs	r3, #0
 80076b4:	9306      	str	r3, [sp, #24]
 80076b6:	950a      	str	r5, [sp, #40]	; 0x28
 80076b8:	f04f 33ff 	mov.w	r3, #4294967295
 80076bc:	9302      	str	r3, [sp, #8]
 80076be:	4699      	mov	r9, r3
 80076c0:	2200      	movs	r2, #0
 80076c2:	2312      	movs	r3, #18
 80076c4:	920b      	str	r2, [sp, #44]	; 0x2c
 80076c6:	e7aa      	b.n	800761e <_dtoa_r+0x246>
 80076c8:	2301      	movs	r3, #1
 80076ca:	930a      	str	r3, [sp, #40]	; 0x28
 80076cc:	e7f4      	b.n	80076b8 <_dtoa_r+0x2e0>
 80076ce:	2301      	movs	r3, #1
 80076d0:	9302      	str	r3, [sp, #8]
 80076d2:	4699      	mov	r9, r3
 80076d4:	461a      	mov	r2, r3
 80076d6:	e7f5      	b.n	80076c4 <_dtoa_r+0x2ec>
 80076d8:	3101      	adds	r1, #1
 80076da:	6071      	str	r1, [r6, #4]
 80076dc:	0052      	lsls	r2, r2, #1
 80076de:	e7a2      	b.n	8007626 <_dtoa_r+0x24e>
 80076e0:	636f4361 	.word	0x636f4361
 80076e4:	3fd287a7 	.word	0x3fd287a7
 80076e8:	8b60c8b3 	.word	0x8b60c8b3
 80076ec:	3fc68a28 	.word	0x3fc68a28
 80076f0:	509f79fb 	.word	0x509f79fb
 80076f4:	3fd34413 	.word	0x3fd34413
 80076f8:	7ff00000 	.word	0x7ff00000
 80076fc:	08009b55 	.word	0x08009b55
 8007700:	3ff80000 	.word	0x3ff80000
 8007704:	08009c10 	.word	0x08009c10
 8007708:	08009be8 	.word	0x08009be8
 800770c:	08009b81 	.word	0x08009b81
 8007710:	07f1      	lsls	r1, r6, #31
 8007712:	d508      	bpl.n	8007726 <_dtoa_r+0x34e>
 8007714:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800771c:	f7f8 ff7c 	bl	8000618 <__aeabi_dmul>
 8007720:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007724:	3501      	adds	r5, #1
 8007726:	1076      	asrs	r6, r6, #1
 8007728:	3708      	adds	r7, #8
 800772a:	2e00      	cmp	r6, #0
 800772c:	d1f0      	bne.n	8007710 <_dtoa_r+0x338>
 800772e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007732:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007736:	f7f9 f899 	bl	800086c <__aeabi_ddiv>
 800773a:	e9cd 0100 	strd	r0, r1, [sp]
 800773e:	e01a      	b.n	8007776 <_dtoa_r+0x39e>
 8007740:	2502      	movs	r5, #2
 8007742:	e7a3      	b.n	800768c <_dtoa_r+0x2b4>
 8007744:	f000 80a0 	beq.w	8007888 <_dtoa_r+0x4b0>
 8007748:	f1ca 0600 	rsb	r6, sl, #0
 800774c:	4b9f      	ldr	r3, [pc, #636]	; (80079cc <_dtoa_r+0x5f4>)
 800774e:	4fa0      	ldr	r7, [pc, #640]	; (80079d0 <_dtoa_r+0x5f8>)
 8007750:	f006 020f 	and.w	r2, r6, #15
 8007754:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007760:	f7f8 ff5a 	bl	8000618 <__aeabi_dmul>
 8007764:	e9cd 0100 	strd	r0, r1, [sp]
 8007768:	1136      	asrs	r6, r6, #4
 800776a:	2300      	movs	r3, #0
 800776c:	2502      	movs	r5, #2
 800776e:	2e00      	cmp	r6, #0
 8007770:	d17f      	bne.n	8007872 <_dtoa_r+0x49a>
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1e1      	bne.n	800773a <_dtoa_r+0x362>
 8007776:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007778:	2b00      	cmp	r3, #0
 800777a:	f000 8087 	beq.w	800788c <_dtoa_r+0x4b4>
 800777e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007782:	2200      	movs	r2, #0
 8007784:	4b93      	ldr	r3, [pc, #588]	; (80079d4 <_dtoa_r+0x5fc>)
 8007786:	4630      	mov	r0, r6
 8007788:	4639      	mov	r1, r7
 800778a:	f7f9 f9b7 	bl	8000afc <__aeabi_dcmplt>
 800778e:	2800      	cmp	r0, #0
 8007790:	d07c      	beq.n	800788c <_dtoa_r+0x4b4>
 8007792:	f1b9 0f00 	cmp.w	r9, #0
 8007796:	d079      	beq.n	800788c <_dtoa_r+0x4b4>
 8007798:	9b02      	ldr	r3, [sp, #8]
 800779a:	2b00      	cmp	r3, #0
 800779c:	dd35      	ble.n	800780a <_dtoa_r+0x432>
 800779e:	f10a 33ff 	add.w	r3, sl, #4294967295
 80077a2:	9308      	str	r3, [sp, #32]
 80077a4:	4639      	mov	r1, r7
 80077a6:	2200      	movs	r2, #0
 80077a8:	4b8b      	ldr	r3, [pc, #556]	; (80079d8 <_dtoa_r+0x600>)
 80077aa:	4630      	mov	r0, r6
 80077ac:	f7f8 ff34 	bl	8000618 <__aeabi_dmul>
 80077b0:	e9cd 0100 	strd	r0, r1, [sp]
 80077b4:	9f02      	ldr	r7, [sp, #8]
 80077b6:	3501      	adds	r5, #1
 80077b8:	4628      	mov	r0, r5
 80077ba:	f7f8 fec3 	bl	8000544 <__aeabi_i2d>
 80077be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077c2:	f7f8 ff29 	bl	8000618 <__aeabi_dmul>
 80077c6:	2200      	movs	r2, #0
 80077c8:	4b84      	ldr	r3, [pc, #528]	; (80079dc <_dtoa_r+0x604>)
 80077ca:	f7f8 fd6f 	bl	80002ac <__adddf3>
 80077ce:	4605      	mov	r5, r0
 80077d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80077d4:	2f00      	cmp	r7, #0
 80077d6:	d15d      	bne.n	8007894 <_dtoa_r+0x4bc>
 80077d8:	2200      	movs	r2, #0
 80077da:	4b81      	ldr	r3, [pc, #516]	; (80079e0 <_dtoa_r+0x608>)
 80077dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077e0:	f7f8 fd62 	bl	80002a8 <__aeabi_dsub>
 80077e4:	462a      	mov	r2, r5
 80077e6:	4633      	mov	r3, r6
 80077e8:	e9cd 0100 	strd	r0, r1, [sp]
 80077ec:	f7f9 f9a4 	bl	8000b38 <__aeabi_dcmpgt>
 80077f0:	2800      	cmp	r0, #0
 80077f2:	f040 8288 	bne.w	8007d06 <_dtoa_r+0x92e>
 80077f6:	462a      	mov	r2, r5
 80077f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80077fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007800:	f7f9 f97c 	bl	8000afc <__aeabi_dcmplt>
 8007804:	2800      	cmp	r0, #0
 8007806:	f040 827c 	bne.w	8007d02 <_dtoa_r+0x92a>
 800780a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800780e:	e9cd 2300 	strd	r2, r3, [sp]
 8007812:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007814:	2b00      	cmp	r3, #0
 8007816:	f2c0 8150 	blt.w	8007aba <_dtoa_r+0x6e2>
 800781a:	f1ba 0f0e 	cmp.w	sl, #14
 800781e:	f300 814c 	bgt.w	8007aba <_dtoa_r+0x6e2>
 8007822:	4b6a      	ldr	r3, [pc, #424]	; (80079cc <_dtoa_r+0x5f4>)
 8007824:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007828:	ed93 7b00 	vldr	d7, [r3]
 800782c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800782e:	2b00      	cmp	r3, #0
 8007830:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007834:	f280 80d8 	bge.w	80079e8 <_dtoa_r+0x610>
 8007838:	f1b9 0f00 	cmp.w	r9, #0
 800783c:	f300 80d4 	bgt.w	80079e8 <_dtoa_r+0x610>
 8007840:	f040 825e 	bne.w	8007d00 <_dtoa_r+0x928>
 8007844:	2200      	movs	r2, #0
 8007846:	4b66      	ldr	r3, [pc, #408]	; (80079e0 <_dtoa_r+0x608>)
 8007848:	ec51 0b17 	vmov	r0, r1, d7
 800784c:	f7f8 fee4 	bl	8000618 <__aeabi_dmul>
 8007850:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007854:	f7f9 f966 	bl	8000b24 <__aeabi_dcmpge>
 8007858:	464f      	mov	r7, r9
 800785a:	464e      	mov	r6, r9
 800785c:	2800      	cmp	r0, #0
 800785e:	f040 8234 	bne.w	8007cca <_dtoa_r+0x8f2>
 8007862:	2331      	movs	r3, #49	; 0x31
 8007864:	f10b 0501 	add.w	r5, fp, #1
 8007868:	f88b 3000 	strb.w	r3, [fp]
 800786c:	f10a 0a01 	add.w	sl, sl, #1
 8007870:	e22f      	b.n	8007cd2 <_dtoa_r+0x8fa>
 8007872:	07f2      	lsls	r2, r6, #31
 8007874:	d505      	bpl.n	8007882 <_dtoa_r+0x4aa>
 8007876:	e9d7 2300 	ldrd	r2, r3, [r7]
 800787a:	f7f8 fecd 	bl	8000618 <__aeabi_dmul>
 800787e:	3501      	adds	r5, #1
 8007880:	2301      	movs	r3, #1
 8007882:	1076      	asrs	r6, r6, #1
 8007884:	3708      	adds	r7, #8
 8007886:	e772      	b.n	800776e <_dtoa_r+0x396>
 8007888:	2502      	movs	r5, #2
 800788a:	e774      	b.n	8007776 <_dtoa_r+0x39e>
 800788c:	f8cd a020 	str.w	sl, [sp, #32]
 8007890:	464f      	mov	r7, r9
 8007892:	e791      	b.n	80077b8 <_dtoa_r+0x3e0>
 8007894:	4b4d      	ldr	r3, [pc, #308]	; (80079cc <_dtoa_r+0x5f4>)
 8007896:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800789a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800789e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d047      	beq.n	8007934 <_dtoa_r+0x55c>
 80078a4:	4602      	mov	r2, r0
 80078a6:	460b      	mov	r3, r1
 80078a8:	2000      	movs	r0, #0
 80078aa:	494e      	ldr	r1, [pc, #312]	; (80079e4 <_dtoa_r+0x60c>)
 80078ac:	f7f8 ffde 	bl	800086c <__aeabi_ddiv>
 80078b0:	462a      	mov	r2, r5
 80078b2:	4633      	mov	r3, r6
 80078b4:	f7f8 fcf8 	bl	80002a8 <__aeabi_dsub>
 80078b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80078bc:	465d      	mov	r5, fp
 80078be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078c2:	f7f9 f959 	bl	8000b78 <__aeabi_d2iz>
 80078c6:	4606      	mov	r6, r0
 80078c8:	f7f8 fe3c 	bl	8000544 <__aeabi_i2d>
 80078cc:	4602      	mov	r2, r0
 80078ce:	460b      	mov	r3, r1
 80078d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078d4:	f7f8 fce8 	bl	80002a8 <__aeabi_dsub>
 80078d8:	3630      	adds	r6, #48	; 0x30
 80078da:	f805 6b01 	strb.w	r6, [r5], #1
 80078de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80078e2:	e9cd 0100 	strd	r0, r1, [sp]
 80078e6:	f7f9 f909 	bl	8000afc <__aeabi_dcmplt>
 80078ea:	2800      	cmp	r0, #0
 80078ec:	d163      	bne.n	80079b6 <_dtoa_r+0x5de>
 80078ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078f2:	2000      	movs	r0, #0
 80078f4:	4937      	ldr	r1, [pc, #220]	; (80079d4 <_dtoa_r+0x5fc>)
 80078f6:	f7f8 fcd7 	bl	80002a8 <__aeabi_dsub>
 80078fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80078fe:	f7f9 f8fd 	bl	8000afc <__aeabi_dcmplt>
 8007902:	2800      	cmp	r0, #0
 8007904:	f040 80b7 	bne.w	8007a76 <_dtoa_r+0x69e>
 8007908:	eba5 030b 	sub.w	r3, r5, fp
 800790c:	429f      	cmp	r7, r3
 800790e:	f77f af7c 	ble.w	800780a <_dtoa_r+0x432>
 8007912:	2200      	movs	r2, #0
 8007914:	4b30      	ldr	r3, [pc, #192]	; (80079d8 <_dtoa_r+0x600>)
 8007916:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800791a:	f7f8 fe7d 	bl	8000618 <__aeabi_dmul>
 800791e:	2200      	movs	r2, #0
 8007920:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007924:	4b2c      	ldr	r3, [pc, #176]	; (80079d8 <_dtoa_r+0x600>)
 8007926:	e9dd 0100 	ldrd	r0, r1, [sp]
 800792a:	f7f8 fe75 	bl	8000618 <__aeabi_dmul>
 800792e:	e9cd 0100 	strd	r0, r1, [sp]
 8007932:	e7c4      	b.n	80078be <_dtoa_r+0x4e6>
 8007934:	462a      	mov	r2, r5
 8007936:	4633      	mov	r3, r6
 8007938:	f7f8 fe6e 	bl	8000618 <__aeabi_dmul>
 800793c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007940:	eb0b 0507 	add.w	r5, fp, r7
 8007944:	465e      	mov	r6, fp
 8007946:	e9dd 0100 	ldrd	r0, r1, [sp]
 800794a:	f7f9 f915 	bl	8000b78 <__aeabi_d2iz>
 800794e:	4607      	mov	r7, r0
 8007950:	f7f8 fdf8 	bl	8000544 <__aeabi_i2d>
 8007954:	3730      	adds	r7, #48	; 0x30
 8007956:	4602      	mov	r2, r0
 8007958:	460b      	mov	r3, r1
 800795a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800795e:	f7f8 fca3 	bl	80002a8 <__aeabi_dsub>
 8007962:	f806 7b01 	strb.w	r7, [r6], #1
 8007966:	42ae      	cmp	r6, r5
 8007968:	e9cd 0100 	strd	r0, r1, [sp]
 800796c:	f04f 0200 	mov.w	r2, #0
 8007970:	d126      	bne.n	80079c0 <_dtoa_r+0x5e8>
 8007972:	4b1c      	ldr	r3, [pc, #112]	; (80079e4 <_dtoa_r+0x60c>)
 8007974:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007978:	f7f8 fc98 	bl	80002ac <__adddf3>
 800797c:	4602      	mov	r2, r0
 800797e:	460b      	mov	r3, r1
 8007980:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007984:	f7f9 f8d8 	bl	8000b38 <__aeabi_dcmpgt>
 8007988:	2800      	cmp	r0, #0
 800798a:	d174      	bne.n	8007a76 <_dtoa_r+0x69e>
 800798c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007990:	2000      	movs	r0, #0
 8007992:	4914      	ldr	r1, [pc, #80]	; (80079e4 <_dtoa_r+0x60c>)
 8007994:	f7f8 fc88 	bl	80002a8 <__aeabi_dsub>
 8007998:	4602      	mov	r2, r0
 800799a:	460b      	mov	r3, r1
 800799c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079a0:	f7f9 f8ac 	bl	8000afc <__aeabi_dcmplt>
 80079a4:	2800      	cmp	r0, #0
 80079a6:	f43f af30 	beq.w	800780a <_dtoa_r+0x432>
 80079aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80079ae:	2b30      	cmp	r3, #48	; 0x30
 80079b0:	f105 32ff 	add.w	r2, r5, #4294967295
 80079b4:	d002      	beq.n	80079bc <_dtoa_r+0x5e4>
 80079b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80079ba:	e04a      	b.n	8007a52 <_dtoa_r+0x67a>
 80079bc:	4615      	mov	r5, r2
 80079be:	e7f4      	b.n	80079aa <_dtoa_r+0x5d2>
 80079c0:	4b05      	ldr	r3, [pc, #20]	; (80079d8 <_dtoa_r+0x600>)
 80079c2:	f7f8 fe29 	bl	8000618 <__aeabi_dmul>
 80079c6:	e9cd 0100 	strd	r0, r1, [sp]
 80079ca:	e7bc      	b.n	8007946 <_dtoa_r+0x56e>
 80079cc:	08009c10 	.word	0x08009c10
 80079d0:	08009be8 	.word	0x08009be8
 80079d4:	3ff00000 	.word	0x3ff00000
 80079d8:	40240000 	.word	0x40240000
 80079dc:	401c0000 	.word	0x401c0000
 80079e0:	40140000 	.word	0x40140000
 80079e4:	3fe00000 	.word	0x3fe00000
 80079e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80079ec:	465d      	mov	r5, fp
 80079ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079f2:	4630      	mov	r0, r6
 80079f4:	4639      	mov	r1, r7
 80079f6:	f7f8 ff39 	bl	800086c <__aeabi_ddiv>
 80079fa:	f7f9 f8bd 	bl	8000b78 <__aeabi_d2iz>
 80079fe:	4680      	mov	r8, r0
 8007a00:	f7f8 fda0 	bl	8000544 <__aeabi_i2d>
 8007a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a08:	f7f8 fe06 	bl	8000618 <__aeabi_dmul>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	460b      	mov	r3, r1
 8007a10:	4630      	mov	r0, r6
 8007a12:	4639      	mov	r1, r7
 8007a14:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007a18:	f7f8 fc46 	bl	80002a8 <__aeabi_dsub>
 8007a1c:	f805 6b01 	strb.w	r6, [r5], #1
 8007a20:	eba5 060b 	sub.w	r6, r5, fp
 8007a24:	45b1      	cmp	r9, r6
 8007a26:	4602      	mov	r2, r0
 8007a28:	460b      	mov	r3, r1
 8007a2a:	d139      	bne.n	8007aa0 <_dtoa_r+0x6c8>
 8007a2c:	f7f8 fc3e 	bl	80002ac <__adddf3>
 8007a30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a34:	4606      	mov	r6, r0
 8007a36:	460f      	mov	r7, r1
 8007a38:	f7f9 f87e 	bl	8000b38 <__aeabi_dcmpgt>
 8007a3c:	b9c8      	cbnz	r0, 8007a72 <_dtoa_r+0x69a>
 8007a3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a42:	4630      	mov	r0, r6
 8007a44:	4639      	mov	r1, r7
 8007a46:	f7f9 f84f 	bl	8000ae8 <__aeabi_dcmpeq>
 8007a4a:	b110      	cbz	r0, 8007a52 <_dtoa_r+0x67a>
 8007a4c:	f018 0f01 	tst.w	r8, #1
 8007a50:	d10f      	bne.n	8007a72 <_dtoa_r+0x69a>
 8007a52:	9904      	ldr	r1, [sp, #16]
 8007a54:	4620      	mov	r0, r4
 8007a56:	f000 fcaa 	bl	80083ae <_Bfree>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007a5e:	702b      	strb	r3, [r5, #0]
 8007a60:	f10a 0301 	add.w	r3, sl, #1
 8007a64:	6013      	str	r3, [r2, #0]
 8007a66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 8241 	beq.w	8007ef0 <_dtoa_r+0xb18>
 8007a6e:	601d      	str	r5, [r3, #0]
 8007a70:	e23e      	b.n	8007ef0 <_dtoa_r+0xb18>
 8007a72:	f8cd a020 	str.w	sl, [sp, #32]
 8007a76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007a7a:	2a39      	cmp	r2, #57	; 0x39
 8007a7c:	f105 33ff 	add.w	r3, r5, #4294967295
 8007a80:	d108      	bne.n	8007a94 <_dtoa_r+0x6bc>
 8007a82:	459b      	cmp	fp, r3
 8007a84:	d10a      	bne.n	8007a9c <_dtoa_r+0x6c4>
 8007a86:	9b08      	ldr	r3, [sp, #32]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	9308      	str	r3, [sp, #32]
 8007a8c:	2330      	movs	r3, #48	; 0x30
 8007a8e:	f88b 3000 	strb.w	r3, [fp]
 8007a92:	465b      	mov	r3, fp
 8007a94:	781a      	ldrb	r2, [r3, #0]
 8007a96:	3201      	adds	r2, #1
 8007a98:	701a      	strb	r2, [r3, #0]
 8007a9a:	e78c      	b.n	80079b6 <_dtoa_r+0x5de>
 8007a9c:	461d      	mov	r5, r3
 8007a9e:	e7ea      	b.n	8007a76 <_dtoa_r+0x69e>
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	4b9b      	ldr	r3, [pc, #620]	; (8007d10 <_dtoa_r+0x938>)
 8007aa4:	f7f8 fdb8 	bl	8000618 <__aeabi_dmul>
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	2300      	movs	r3, #0
 8007aac:	4606      	mov	r6, r0
 8007aae:	460f      	mov	r7, r1
 8007ab0:	f7f9 f81a 	bl	8000ae8 <__aeabi_dcmpeq>
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	d09a      	beq.n	80079ee <_dtoa_r+0x616>
 8007ab8:	e7cb      	b.n	8007a52 <_dtoa_r+0x67a>
 8007aba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007abc:	2a00      	cmp	r2, #0
 8007abe:	f000 808b 	beq.w	8007bd8 <_dtoa_r+0x800>
 8007ac2:	9a06      	ldr	r2, [sp, #24]
 8007ac4:	2a01      	cmp	r2, #1
 8007ac6:	dc6e      	bgt.n	8007ba6 <_dtoa_r+0x7ce>
 8007ac8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007aca:	2a00      	cmp	r2, #0
 8007acc:	d067      	beq.n	8007b9e <_dtoa_r+0x7c6>
 8007ace:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007ad2:	9f07      	ldr	r7, [sp, #28]
 8007ad4:	9d05      	ldr	r5, [sp, #20]
 8007ad6:	9a05      	ldr	r2, [sp, #20]
 8007ad8:	2101      	movs	r1, #1
 8007ada:	441a      	add	r2, r3
 8007adc:	4620      	mov	r0, r4
 8007ade:	9205      	str	r2, [sp, #20]
 8007ae0:	4498      	add	r8, r3
 8007ae2:	f000 fd04 	bl	80084ee <__i2b>
 8007ae6:	4606      	mov	r6, r0
 8007ae8:	2d00      	cmp	r5, #0
 8007aea:	dd0c      	ble.n	8007b06 <_dtoa_r+0x72e>
 8007aec:	f1b8 0f00 	cmp.w	r8, #0
 8007af0:	dd09      	ble.n	8007b06 <_dtoa_r+0x72e>
 8007af2:	4545      	cmp	r5, r8
 8007af4:	9a05      	ldr	r2, [sp, #20]
 8007af6:	462b      	mov	r3, r5
 8007af8:	bfa8      	it	ge
 8007afa:	4643      	movge	r3, r8
 8007afc:	1ad2      	subs	r2, r2, r3
 8007afe:	9205      	str	r2, [sp, #20]
 8007b00:	1aed      	subs	r5, r5, r3
 8007b02:	eba8 0803 	sub.w	r8, r8, r3
 8007b06:	9b07      	ldr	r3, [sp, #28]
 8007b08:	b1eb      	cbz	r3, 8007b46 <_dtoa_r+0x76e>
 8007b0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d067      	beq.n	8007be0 <_dtoa_r+0x808>
 8007b10:	b18f      	cbz	r7, 8007b36 <_dtoa_r+0x75e>
 8007b12:	4631      	mov	r1, r6
 8007b14:	463a      	mov	r2, r7
 8007b16:	4620      	mov	r0, r4
 8007b18:	f000 fd88 	bl	800862c <__pow5mult>
 8007b1c:	9a04      	ldr	r2, [sp, #16]
 8007b1e:	4601      	mov	r1, r0
 8007b20:	4606      	mov	r6, r0
 8007b22:	4620      	mov	r0, r4
 8007b24:	f000 fcec 	bl	8008500 <__multiply>
 8007b28:	9904      	ldr	r1, [sp, #16]
 8007b2a:	9008      	str	r0, [sp, #32]
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	f000 fc3e 	bl	80083ae <_Bfree>
 8007b32:	9b08      	ldr	r3, [sp, #32]
 8007b34:	9304      	str	r3, [sp, #16]
 8007b36:	9b07      	ldr	r3, [sp, #28]
 8007b38:	1bda      	subs	r2, r3, r7
 8007b3a:	d004      	beq.n	8007b46 <_dtoa_r+0x76e>
 8007b3c:	9904      	ldr	r1, [sp, #16]
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f000 fd74 	bl	800862c <__pow5mult>
 8007b44:	9004      	str	r0, [sp, #16]
 8007b46:	2101      	movs	r1, #1
 8007b48:	4620      	mov	r0, r4
 8007b4a:	f000 fcd0 	bl	80084ee <__i2b>
 8007b4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b50:	4607      	mov	r7, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f000 81d0 	beq.w	8007ef8 <_dtoa_r+0xb20>
 8007b58:	461a      	mov	r2, r3
 8007b5a:	4601      	mov	r1, r0
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	f000 fd65 	bl	800862c <__pow5mult>
 8007b62:	9b06      	ldr	r3, [sp, #24]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	4607      	mov	r7, r0
 8007b68:	dc40      	bgt.n	8007bec <_dtoa_r+0x814>
 8007b6a:	9b00      	ldr	r3, [sp, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d139      	bne.n	8007be4 <_dtoa_r+0x80c>
 8007b70:	9b01      	ldr	r3, [sp, #4]
 8007b72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d136      	bne.n	8007be8 <_dtoa_r+0x810>
 8007b7a:	9b01      	ldr	r3, [sp, #4]
 8007b7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b80:	0d1b      	lsrs	r3, r3, #20
 8007b82:	051b      	lsls	r3, r3, #20
 8007b84:	b12b      	cbz	r3, 8007b92 <_dtoa_r+0x7ba>
 8007b86:	9b05      	ldr	r3, [sp, #20]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	9305      	str	r3, [sp, #20]
 8007b8c:	f108 0801 	add.w	r8, r8, #1
 8007b90:	2301      	movs	r3, #1
 8007b92:	9307      	str	r3, [sp, #28]
 8007b94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d12a      	bne.n	8007bf0 <_dtoa_r+0x818>
 8007b9a:	2001      	movs	r0, #1
 8007b9c:	e030      	b.n	8007c00 <_dtoa_r+0x828>
 8007b9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ba0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007ba4:	e795      	b.n	8007ad2 <_dtoa_r+0x6fa>
 8007ba6:	9b07      	ldr	r3, [sp, #28]
 8007ba8:	f109 37ff 	add.w	r7, r9, #4294967295
 8007bac:	42bb      	cmp	r3, r7
 8007bae:	bfbf      	itttt	lt
 8007bb0:	9b07      	ldrlt	r3, [sp, #28]
 8007bb2:	9707      	strlt	r7, [sp, #28]
 8007bb4:	1afa      	sublt	r2, r7, r3
 8007bb6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007bb8:	bfbb      	ittet	lt
 8007bba:	189b      	addlt	r3, r3, r2
 8007bbc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007bbe:	1bdf      	subge	r7, r3, r7
 8007bc0:	2700      	movlt	r7, #0
 8007bc2:	f1b9 0f00 	cmp.w	r9, #0
 8007bc6:	bfb5      	itete	lt
 8007bc8:	9b05      	ldrlt	r3, [sp, #20]
 8007bca:	9d05      	ldrge	r5, [sp, #20]
 8007bcc:	eba3 0509 	sublt.w	r5, r3, r9
 8007bd0:	464b      	movge	r3, r9
 8007bd2:	bfb8      	it	lt
 8007bd4:	2300      	movlt	r3, #0
 8007bd6:	e77e      	b.n	8007ad6 <_dtoa_r+0x6fe>
 8007bd8:	9f07      	ldr	r7, [sp, #28]
 8007bda:	9d05      	ldr	r5, [sp, #20]
 8007bdc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007bde:	e783      	b.n	8007ae8 <_dtoa_r+0x710>
 8007be0:	9a07      	ldr	r2, [sp, #28]
 8007be2:	e7ab      	b.n	8007b3c <_dtoa_r+0x764>
 8007be4:	2300      	movs	r3, #0
 8007be6:	e7d4      	b.n	8007b92 <_dtoa_r+0x7ba>
 8007be8:	9b00      	ldr	r3, [sp, #0]
 8007bea:	e7d2      	b.n	8007b92 <_dtoa_r+0x7ba>
 8007bec:	2300      	movs	r3, #0
 8007bee:	9307      	str	r3, [sp, #28]
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007bf6:	6918      	ldr	r0, [r3, #16]
 8007bf8:	f000 fc2b 	bl	8008452 <__hi0bits>
 8007bfc:	f1c0 0020 	rsb	r0, r0, #32
 8007c00:	4440      	add	r0, r8
 8007c02:	f010 001f 	ands.w	r0, r0, #31
 8007c06:	d047      	beq.n	8007c98 <_dtoa_r+0x8c0>
 8007c08:	f1c0 0320 	rsb	r3, r0, #32
 8007c0c:	2b04      	cmp	r3, #4
 8007c0e:	dd3b      	ble.n	8007c88 <_dtoa_r+0x8b0>
 8007c10:	9b05      	ldr	r3, [sp, #20]
 8007c12:	f1c0 001c 	rsb	r0, r0, #28
 8007c16:	4403      	add	r3, r0
 8007c18:	9305      	str	r3, [sp, #20]
 8007c1a:	4405      	add	r5, r0
 8007c1c:	4480      	add	r8, r0
 8007c1e:	9b05      	ldr	r3, [sp, #20]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	dd05      	ble.n	8007c30 <_dtoa_r+0x858>
 8007c24:	461a      	mov	r2, r3
 8007c26:	9904      	ldr	r1, [sp, #16]
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f000 fd4d 	bl	80086c8 <__lshift>
 8007c2e:	9004      	str	r0, [sp, #16]
 8007c30:	f1b8 0f00 	cmp.w	r8, #0
 8007c34:	dd05      	ble.n	8007c42 <_dtoa_r+0x86a>
 8007c36:	4639      	mov	r1, r7
 8007c38:	4642      	mov	r2, r8
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f000 fd44 	bl	80086c8 <__lshift>
 8007c40:	4607      	mov	r7, r0
 8007c42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c44:	b353      	cbz	r3, 8007c9c <_dtoa_r+0x8c4>
 8007c46:	4639      	mov	r1, r7
 8007c48:	9804      	ldr	r0, [sp, #16]
 8007c4a:	f000 fd91 	bl	8008770 <__mcmp>
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	da24      	bge.n	8007c9c <_dtoa_r+0x8c4>
 8007c52:	2300      	movs	r3, #0
 8007c54:	220a      	movs	r2, #10
 8007c56:	9904      	ldr	r1, [sp, #16]
 8007c58:	4620      	mov	r0, r4
 8007c5a:	f000 fbbf 	bl	80083dc <__multadd>
 8007c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c60:	9004      	str	r0, [sp, #16]
 8007c62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f000 814d 	beq.w	8007f06 <_dtoa_r+0xb2e>
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	4631      	mov	r1, r6
 8007c70:	220a      	movs	r2, #10
 8007c72:	4620      	mov	r0, r4
 8007c74:	f000 fbb2 	bl	80083dc <__multadd>
 8007c78:	9b02      	ldr	r3, [sp, #8]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	4606      	mov	r6, r0
 8007c7e:	dc4f      	bgt.n	8007d20 <_dtoa_r+0x948>
 8007c80:	9b06      	ldr	r3, [sp, #24]
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	dd4c      	ble.n	8007d20 <_dtoa_r+0x948>
 8007c86:	e011      	b.n	8007cac <_dtoa_r+0x8d4>
 8007c88:	d0c9      	beq.n	8007c1e <_dtoa_r+0x846>
 8007c8a:	9a05      	ldr	r2, [sp, #20]
 8007c8c:	331c      	adds	r3, #28
 8007c8e:	441a      	add	r2, r3
 8007c90:	9205      	str	r2, [sp, #20]
 8007c92:	441d      	add	r5, r3
 8007c94:	4498      	add	r8, r3
 8007c96:	e7c2      	b.n	8007c1e <_dtoa_r+0x846>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	e7f6      	b.n	8007c8a <_dtoa_r+0x8b2>
 8007c9c:	f1b9 0f00 	cmp.w	r9, #0
 8007ca0:	dc38      	bgt.n	8007d14 <_dtoa_r+0x93c>
 8007ca2:	9b06      	ldr	r3, [sp, #24]
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	dd35      	ble.n	8007d14 <_dtoa_r+0x93c>
 8007ca8:	f8cd 9008 	str.w	r9, [sp, #8]
 8007cac:	9b02      	ldr	r3, [sp, #8]
 8007cae:	b963      	cbnz	r3, 8007cca <_dtoa_r+0x8f2>
 8007cb0:	4639      	mov	r1, r7
 8007cb2:	2205      	movs	r2, #5
 8007cb4:	4620      	mov	r0, r4
 8007cb6:	f000 fb91 	bl	80083dc <__multadd>
 8007cba:	4601      	mov	r1, r0
 8007cbc:	4607      	mov	r7, r0
 8007cbe:	9804      	ldr	r0, [sp, #16]
 8007cc0:	f000 fd56 	bl	8008770 <__mcmp>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	f73f adcc 	bgt.w	8007862 <_dtoa_r+0x48a>
 8007cca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ccc:	465d      	mov	r5, fp
 8007cce:	ea6f 0a03 	mvn.w	sl, r3
 8007cd2:	f04f 0900 	mov.w	r9, #0
 8007cd6:	4639      	mov	r1, r7
 8007cd8:	4620      	mov	r0, r4
 8007cda:	f000 fb68 	bl	80083ae <_Bfree>
 8007cde:	2e00      	cmp	r6, #0
 8007ce0:	f43f aeb7 	beq.w	8007a52 <_dtoa_r+0x67a>
 8007ce4:	f1b9 0f00 	cmp.w	r9, #0
 8007ce8:	d005      	beq.n	8007cf6 <_dtoa_r+0x91e>
 8007cea:	45b1      	cmp	r9, r6
 8007cec:	d003      	beq.n	8007cf6 <_dtoa_r+0x91e>
 8007cee:	4649      	mov	r1, r9
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	f000 fb5c 	bl	80083ae <_Bfree>
 8007cf6:	4631      	mov	r1, r6
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	f000 fb58 	bl	80083ae <_Bfree>
 8007cfe:	e6a8      	b.n	8007a52 <_dtoa_r+0x67a>
 8007d00:	2700      	movs	r7, #0
 8007d02:	463e      	mov	r6, r7
 8007d04:	e7e1      	b.n	8007cca <_dtoa_r+0x8f2>
 8007d06:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007d0a:	463e      	mov	r6, r7
 8007d0c:	e5a9      	b.n	8007862 <_dtoa_r+0x48a>
 8007d0e:	bf00      	nop
 8007d10:	40240000 	.word	0x40240000
 8007d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d16:	f8cd 9008 	str.w	r9, [sp, #8]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f000 80fa 	beq.w	8007f14 <_dtoa_r+0xb3c>
 8007d20:	2d00      	cmp	r5, #0
 8007d22:	dd05      	ble.n	8007d30 <_dtoa_r+0x958>
 8007d24:	4631      	mov	r1, r6
 8007d26:	462a      	mov	r2, r5
 8007d28:	4620      	mov	r0, r4
 8007d2a:	f000 fccd 	bl	80086c8 <__lshift>
 8007d2e:	4606      	mov	r6, r0
 8007d30:	9b07      	ldr	r3, [sp, #28]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d04c      	beq.n	8007dd0 <_dtoa_r+0x9f8>
 8007d36:	6871      	ldr	r1, [r6, #4]
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f000 fb04 	bl	8008346 <_Balloc>
 8007d3e:	6932      	ldr	r2, [r6, #16]
 8007d40:	3202      	adds	r2, #2
 8007d42:	4605      	mov	r5, r0
 8007d44:	0092      	lsls	r2, r2, #2
 8007d46:	f106 010c 	add.w	r1, r6, #12
 8007d4a:	300c      	adds	r0, #12
 8007d4c:	f000 faf0 	bl	8008330 <memcpy>
 8007d50:	2201      	movs	r2, #1
 8007d52:	4629      	mov	r1, r5
 8007d54:	4620      	mov	r0, r4
 8007d56:	f000 fcb7 	bl	80086c8 <__lshift>
 8007d5a:	9b00      	ldr	r3, [sp, #0]
 8007d5c:	f8cd b014 	str.w	fp, [sp, #20]
 8007d60:	f003 0301 	and.w	r3, r3, #1
 8007d64:	46b1      	mov	r9, r6
 8007d66:	9307      	str	r3, [sp, #28]
 8007d68:	4606      	mov	r6, r0
 8007d6a:	4639      	mov	r1, r7
 8007d6c:	9804      	ldr	r0, [sp, #16]
 8007d6e:	f7ff faa7 	bl	80072c0 <quorem>
 8007d72:	4649      	mov	r1, r9
 8007d74:	4605      	mov	r5, r0
 8007d76:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007d7a:	9804      	ldr	r0, [sp, #16]
 8007d7c:	f000 fcf8 	bl	8008770 <__mcmp>
 8007d80:	4632      	mov	r2, r6
 8007d82:	9000      	str	r0, [sp, #0]
 8007d84:	4639      	mov	r1, r7
 8007d86:	4620      	mov	r0, r4
 8007d88:	f000 fd0c 	bl	80087a4 <__mdiff>
 8007d8c:	68c3      	ldr	r3, [r0, #12]
 8007d8e:	4602      	mov	r2, r0
 8007d90:	bb03      	cbnz	r3, 8007dd4 <_dtoa_r+0x9fc>
 8007d92:	4601      	mov	r1, r0
 8007d94:	9008      	str	r0, [sp, #32]
 8007d96:	9804      	ldr	r0, [sp, #16]
 8007d98:	f000 fcea 	bl	8008770 <__mcmp>
 8007d9c:	9a08      	ldr	r2, [sp, #32]
 8007d9e:	4603      	mov	r3, r0
 8007da0:	4611      	mov	r1, r2
 8007da2:	4620      	mov	r0, r4
 8007da4:	9308      	str	r3, [sp, #32]
 8007da6:	f000 fb02 	bl	80083ae <_Bfree>
 8007daa:	9b08      	ldr	r3, [sp, #32]
 8007dac:	b9a3      	cbnz	r3, 8007dd8 <_dtoa_r+0xa00>
 8007dae:	9a06      	ldr	r2, [sp, #24]
 8007db0:	b992      	cbnz	r2, 8007dd8 <_dtoa_r+0xa00>
 8007db2:	9a07      	ldr	r2, [sp, #28]
 8007db4:	b982      	cbnz	r2, 8007dd8 <_dtoa_r+0xa00>
 8007db6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007dba:	d029      	beq.n	8007e10 <_dtoa_r+0xa38>
 8007dbc:	9b00      	ldr	r3, [sp, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	dd01      	ble.n	8007dc6 <_dtoa_r+0x9ee>
 8007dc2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007dc6:	9b05      	ldr	r3, [sp, #20]
 8007dc8:	1c5d      	adds	r5, r3, #1
 8007dca:	f883 8000 	strb.w	r8, [r3]
 8007dce:	e782      	b.n	8007cd6 <_dtoa_r+0x8fe>
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	e7c2      	b.n	8007d5a <_dtoa_r+0x982>
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e7e3      	b.n	8007da0 <_dtoa_r+0x9c8>
 8007dd8:	9a00      	ldr	r2, [sp, #0]
 8007dda:	2a00      	cmp	r2, #0
 8007ddc:	db04      	blt.n	8007de8 <_dtoa_r+0xa10>
 8007dde:	d125      	bne.n	8007e2c <_dtoa_r+0xa54>
 8007de0:	9a06      	ldr	r2, [sp, #24]
 8007de2:	bb1a      	cbnz	r2, 8007e2c <_dtoa_r+0xa54>
 8007de4:	9a07      	ldr	r2, [sp, #28]
 8007de6:	bb0a      	cbnz	r2, 8007e2c <_dtoa_r+0xa54>
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	ddec      	ble.n	8007dc6 <_dtoa_r+0x9ee>
 8007dec:	2201      	movs	r2, #1
 8007dee:	9904      	ldr	r1, [sp, #16]
 8007df0:	4620      	mov	r0, r4
 8007df2:	f000 fc69 	bl	80086c8 <__lshift>
 8007df6:	4639      	mov	r1, r7
 8007df8:	9004      	str	r0, [sp, #16]
 8007dfa:	f000 fcb9 	bl	8008770 <__mcmp>
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	dc03      	bgt.n	8007e0a <_dtoa_r+0xa32>
 8007e02:	d1e0      	bne.n	8007dc6 <_dtoa_r+0x9ee>
 8007e04:	f018 0f01 	tst.w	r8, #1
 8007e08:	d0dd      	beq.n	8007dc6 <_dtoa_r+0x9ee>
 8007e0a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007e0e:	d1d8      	bne.n	8007dc2 <_dtoa_r+0x9ea>
 8007e10:	9b05      	ldr	r3, [sp, #20]
 8007e12:	9a05      	ldr	r2, [sp, #20]
 8007e14:	1c5d      	adds	r5, r3, #1
 8007e16:	2339      	movs	r3, #57	; 0x39
 8007e18:	7013      	strb	r3, [r2, #0]
 8007e1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e1e:	2b39      	cmp	r3, #57	; 0x39
 8007e20:	f105 32ff 	add.w	r2, r5, #4294967295
 8007e24:	d04f      	beq.n	8007ec6 <_dtoa_r+0xaee>
 8007e26:	3301      	adds	r3, #1
 8007e28:	7013      	strb	r3, [r2, #0]
 8007e2a:	e754      	b.n	8007cd6 <_dtoa_r+0x8fe>
 8007e2c:	9a05      	ldr	r2, [sp, #20]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f102 0501 	add.w	r5, r2, #1
 8007e34:	dd06      	ble.n	8007e44 <_dtoa_r+0xa6c>
 8007e36:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007e3a:	d0e9      	beq.n	8007e10 <_dtoa_r+0xa38>
 8007e3c:	f108 0801 	add.w	r8, r8, #1
 8007e40:	9b05      	ldr	r3, [sp, #20]
 8007e42:	e7c2      	b.n	8007dca <_dtoa_r+0x9f2>
 8007e44:	9a02      	ldr	r2, [sp, #8]
 8007e46:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007e4a:	eba5 030b 	sub.w	r3, r5, fp
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d021      	beq.n	8007e96 <_dtoa_r+0xabe>
 8007e52:	2300      	movs	r3, #0
 8007e54:	220a      	movs	r2, #10
 8007e56:	9904      	ldr	r1, [sp, #16]
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f000 fabf 	bl	80083dc <__multadd>
 8007e5e:	45b1      	cmp	r9, r6
 8007e60:	9004      	str	r0, [sp, #16]
 8007e62:	f04f 0300 	mov.w	r3, #0
 8007e66:	f04f 020a 	mov.w	r2, #10
 8007e6a:	4649      	mov	r1, r9
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	d105      	bne.n	8007e7c <_dtoa_r+0xaa4>
 8007e70:	f000 fab4 	bl	80083dc <__multadd>
 8007e74:	4681      	mov	r9, r0
 8007e76:	4606      	mov	r6, r0
 8007e78:	9505      	str	r5, [sp, #20]
 8007e7a:	e776      	b.n	8007d6a <_dtoa_r+0x992>
 8007e7c:	f000 faae 	bl	80083dc <__multadd>
 8007e80:	4631      	mov	r1, r6
 8007e82:	4681      	mov	r9, r0
 8007e84:	2300      	movs	r3, #0
 8007e86:	220a      	movs	r2, #10
 8007e88:	4620      	mov	r0, r4
 8007e8a:	f000 faa7 	bl	80083dc <__multadd>
 8007e8e:	4606      	mov	r6, r0
 8007e90:	e7f2      	b.n	8007e78 <_dtoa_r+0xaa0>
 8007e92:	f04f 0900 	mov.w	r9, #0
 8007e96:	2201      	movs	r2, #1
 8007e98:	9904      	ldr	r1, [sp, #16]
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f000 fc14 	bl	80086c8 <__lshift>
 8007ea0:	4639      	mov	r1, r7
 8007ea2:	9004      	str	r0, [sp, #16]
 8007ea4:	f000 fc64 	bl	8008770 <__mcmp>
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	dcb6      	bgt.n	8007e1a <_dtoa_r+0xa42>
 8007eac:	d102      	bne.n	8007eb4 <_dtoa_r+0xadc>
 8007eae:	f018 0f01 	tst.w	r8, #1
 8007eb2:	d1b2      	bne.n	8007e1a <_dtoa_r+0xa42>
 8007eb4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007eb8:	2b30      	cmp	r3, #48	; 0x30
 8007eba:	f105 32ff 	add.w	r2, r5, #4294967295
 8007ebe:	f47f af0a 	bne.w	8007cd6 <_dtoa_r+0x8fe>
 8007ec2:	4615      	mov	r5, r2
 8007ec4:	e7f6      	b.n	8007eb4 <_dtoa_r+0xadc>
 8007ec6:	4593      	cmp	fp, r2
 8007ec8:	d105      	bne.n	8007ed6 <_dtoa_r+0xafe>
 8007eca:	2331      	movs	r3, #49	; 0x31
 8007ecc:	f10a 0a01 	add.w	sl, sl, #1
 8007ed0:	f88b 3000 	strb.w	r3, [fp]
 8007ed4:	e6ff      	b.n	8007cd6 <_dtoa_r+0x8fe>
 8007ed6:	4615      	mov	r5, r2
 8007ed8:	e79f      	b.n	8007e1a <_dtoa_r+0xa42>
 8007eda:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007f40 <_dtoa_r+0xb68>
 8007ede:	e007      	b.n	8007ef0 <_dtoa_r+0xb18>
 8007ee0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ee2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007f44 <_dtoa_r+0xb6c>
 8007ee6:	b11b      	cbz	r3, 8007ef0 <_dtoa_r+0xb18>
 8007ee8:	f10b 0308 	add.w	r3, fp, #8
 8007eec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007eee:	6013      	str	r3, [r2, #0]
 8007ef0:	4658      	mov	r0, fp
 8007ef2:	b017      	add	sp, #92	; 0x5c
 8007ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ef8:	9b06      	ldr	r3, [sp, #24]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	f77f ae35 	ble.w	8007b6a <_dtoa_r+0x792>
 8007f00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f02:	9307      	str	r3, [sp, #28]
 8007f04:	e649      	b.n	8007b9a <_dtoa_r+0x7c2>
 8007f06:	9b02      	ldr	r3, [sp, #8]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	dc03      	bgt.n	8007f14 <_dtoa_r+0xb3c>
 8007f0c:	9b06      	ldr	r3, [sp, #24]
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	f73f aecc 	bgt.w	8007cac <_dtoa_r+0x8d4>
 8007f14:	465d      	mov	r5, fp
 8007f16:	4639      	mov	r1, r7
 8007f18:	9804      	ldr	r0, [sp, #16]
 8007f1a:	f7ff f9d1 	bl	80072c0 <quorem>
 8007f1e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007f22:	f805 8b01 	strb.w	r8, [r5], #1
 8007f26:	9a02      	ldr	r2, [sp, #8]
 8007f28:	eba5 030b 	sub.w	r3, r5, fp
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	ddb0      	ble.n	8007e92 <_dtoa_r+0xaba>
 8007f30:	2300      	movs	r3, #0
 8007f32:	220a      	movs	r2, #10
 8007f34:	9904      	ldr	r1, [sp, #16]
 8007f36:	4620      	mov	r0, r4
 8007f38:	f000 fa50 	bl	80083dc <__multadd>
 8007f3c:	9004      	str	r0, [sp, #16]
 8007f3e:	e7ea      	b.n	8007f16 <_dtoa_r+0xb3e>
 8007f40:	08009b54 	.word	0x08009b54
 8007f44:	08009b78 	.word	0x08009b78

08007f48 <__sflush_r>:
 8007f48:	898a      	ldrh	r2, [r1, #12]
 8007f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f4e:	4605      	mov	r5, r0
 8007f50:	0710      	lsls	r0, r2, #28
 8007f52:	460c      	mov	r4, r1
 8007f54:	d458      	bmi.n	8008008 <__sflush_r+0xc0>
 8007f56:	684b      	ldr	r3, [r1, #4]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	dc05      	bgt.n	8007f68 <__sflush_r+0x20>
 8007f5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	dc02      	bgt.n	8007f68 <__sflush_r+0x20>
 8007f62:	2000      	movs	r0, #0
 8007f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f6a:	2e00      	cmp	r6, #0
 8007f6c:	d0f9      	beq.n	8007f62 <__sflush_r+0x1a>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f74:	682f      	ldr	r7, [r5, #0]
 8007f76:	6a21      	ldr	r1, [r4, #32]
 8007f78:	602b      	str	r3, [r5, #0]
 8007f7a:	d032      	beq.n	8007fe2 <__sflush_r+0x9a>
 8007f7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f7e:	89a3      	ldrh	r3, [r4, #12]
 8007f80:	075a      	lsls	r2, r3, #29
 8007f82:	d505      	bpl.n	8007f90 <__sflush_r+0x48>
 8007f84:	6863      	ldr	r3, [r4, #4]
 8007f86:	1ac0      	subs	r0, r0, r3
 8007f88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f8a:	b10b      	cbz	r3, 8007f90 <__sflush_r+0x48>
 8007f8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f8e:	1ac0      	subs	r0, r0, r3
 8007f90:	2300      	movs	r3, #0
 8007f92:	4602      	mov	r2, r0
 8007f94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f96:	6a21      	ldr	r1, [r4, #32]
 8007f98:	4628      	mov	r0, r5
 8007f9a:	47b0      	blx	r6
 8007f9c:	1c43      	adds	r3, r0, #1
 8007f9e:	89a3      	ldrh	r3, [r4, #12]
 8007fa0:	d106      	bne.n	8007fb0 <__sflush_r+0x68>
 8007fa2:	6829      	ldr	r1, [r5, #0]
 8007fa4:	291d      	cmp	r1, #29
 8007fa6:	d848      	bhi.n	800803a <__sflush_r+0xf2>
 8007fa8:	4a29      	ldr	r2, [pc, #164]	; (8008050 <__sflush_r+0x108>)
 8007faa:	40ca      	lsrs	r2, r1
 8007fac:	07d6      	lsls	r6, r2, #31
 8007fae:	d544      	bpl.n	800803a <__sflush_r+0xf2>
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	6062      	str	r2, [r4, #4]
 8007fb4:	04d9      	lsls	r1, r3, #19
 8007fb6:	6922      	ldr	r2, [r4, #16]
 8007fb8:	6022      	str	r2, [r4, #0]
 8007fba:	d504      	bpl.n	8007fc6 <__sflush_r+0x7e>
 8007fbc:	1c42      	adds	r2, r0, #1
 8007fbe:	d101      	bne.n	8007fc4 <__sflush_r+0x7c>
 8007fc0:	682b      	ldr	r3, [r5, #0]
 8007fc2:	b903      	cbnz	r3, 8007fc6 <__sflush_r+0x7e>
 8007fc4:	6560      	str	r0, [r4, #84]	; 0x54
 8007fc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fc8:	602f      	str	r7, [r5, #0]
 8007fca:	2900      	cmp	r1, #0
 8007fcc:	d0c9      	beq.n	8007f62 <__sflush_r+0x1a>
 8007fce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fd2:	4299      	cmp	r1, r3
 8007fd4:	d002      	beq.n	8007fdc <__sflush_r+0x94>
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	f000 fc9e 	bl	8008918 <_free_r>
 8007fdc:	2000      	movs	r0, #0
 8007fde:	6360      	str	r0, [r4, #52]	; 0x34
 8007fe0:	e7c0      	b.n	8007f64 <__sflush_r+0x1c>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	47b0      	blx	r6
 8007fe8:	1c41      	adds	r1, r0, #1
 8007fea:	d1c8      	bne.n	8007f7e <__sflush_r+0x36>
 8007fec:	682b      	ldr	r3, [r5, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d0c5      	beq.n	8007f7e <__sflush_r+0x36>
 8007ff2:	2b1d      	cmp	r3, #29
 8007ff4:	d001      	beq.n	8007ffa <__sflush_r+0xb2>
 8007ff6:	2b16      	cmp	r3, #22
 8007ff8:	d101      	bne.n	8007ffe <__sflush_r+0xb6>
 8007ffa:	602f      	str	r7, [r5, #0]
 8007ffc:	e7b1      	b.n	8007f62 <__sflush_r+0x1a>
 8007ffe:	89a3      	ldrh	r3, [r4, #12]
 8008000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008004:	81a3      	strh	r3, [r4, #12]
 8008006:	e7ad      	b.n	8007f64 <__sflush_r+0x1c>
 8008008:	690f      	ldr	r7, [r1, #16]
 800800a:	2f00      	cmp	r7, #0
 800800c:	d0a9      	beq.n	8007f62 <__sflush_r+0x1a>
 800800e:	0793      	lsls	r3, r2, #30
 8008010:	680e      	ldr	r6, [r1, #0]
 8008012:	bf08      	it	eq
 8008014:	694b      	ldreq	r3, [r1, #20]
 8008016:	600f      	str	r7, [r1, #0]
 8008018:	bf18      	it	ne
 800801a:	2300      	movne	r3, #0
 800801c:	eba6 0807 	sub.w	r8, r6, r7
 8008020:	608b      	str	r3, [r1, #8]
 8008022:	f1b8 0f00 	cmp.w	r8, #0
 8008026:	dd9c      	ble.n	8007f62 <__sflush_r+0x1a>
 8008028:	4643      	mov	r3, r8
 800802a:	463a      	mov	r2, r7
 800802c:	6a21      	ldr	r1, [r4, #32]
 800802e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008030:	4628      	mov	r0, r5
 8008032:	47b0      	blx	r6
 8008034:	2800      	cmp	r0, #0
 8008036:	dc06      	bgt.n	8008046 <__sflush_r+0xfe>
 8008038:	89a3      	ldrh	r3, [r4, #12]
 800803a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800803e:	81a3      	strh	r3, [r4, #12]
 8008040:	f04f 30ff 	mov.w	r0, #4294967295
 8008044:	e78e      	b.n	8007f64 <__sflush_r+0x1c>
 8008046:	4407      	add	r7, r0
 8008048:	eba8 0800 	sub.w	r8, r8, r0
 800804c:	e7e9      	b.n	8008022 <__sflush_r+0xda>
 800804e:	bf00      	nop
 8008050:	20400001 	.word	0x20400001

08008054 <_fflush_r>:
 8008054:	b538      	push	{r3, r4, r5, lr}
 8008056:	690b      	ldr	r3, [r1, #16]
 8008058:	4605      	mov	r5, r0
 800805a:	460c      	mov	r4, r1
 800805c:	b1db      	cbz	r3, 8008096 <_fflush_r+0x42>
 800805e:	b118      	cbz	r0, 8008068 <_fflush_r+0x14>
 8008060:	6983      	ldr	r3, [r0, #24]
 8008062:	b90b      	cbnz	r3, 8008068 <_fflush_r+0x14>
 8008064:	f000 f860 	bl	8008128 <__sinit>
 8008068:	4b0c      	ldr	r3, [pc, #48]	; (800809c <_fflush_r+0x48>)
 800806a:	429c      	cmp	r4, r3
 800806c:	d109      	bne.n	8008082 <_fflush_r+0x2e>
 800806e:	686c      	ldr	r4, [r5, #4]
 8008070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008074:	b17b      	cbz	r3, 8008096 <_fflush_r+0x42>
 8008076:	4621      	mov	r1, r4
 8008078:	4628      	mov	r0, r5
 800807a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800807e:	f7ff bf63 	b.w	8007f48 <__sflush_r>
 8008082:	4b07      	ldr	r3, [pc, #28]	; (80080a0 <_fflush_r+0x4c>)
 8008084:	429c      	cmp	r4, r3
 8008086:	d101      	bne.n	800808c <_fflush_r+0x38>
 8008088:	68ac      	ldr	r4, [r5, #8]
 800808a:	e7f1      	b.n	8008070 <_fflush_r+0x1c>
 800808c:	4b05      	ldr	r3, [pc, #20]	; (80080a4 <_fflush_r+0x50>)
 800808e:	429c      	cmp	r4, r3
 8008090:	bf08      	it	eq
 8008092:	68ec      	ldreq	r4, [r5, #12]
 8008094:	e7ec      	b.n	8008070 <_fflush_r+0x1c>
 8008096:	2000      	movs	r0, #0
 8008098:	bd38      	pop	{r3, r4, r5, pc}
 800809a:	bf00      	nop
 800809c:	08009ba8 	.word	0x08009ba8
 80080a0:	08009bc8 	.word	0x08009bc8
 80080a4:	08009b88 	.word	0x08009b88

080080a8 <std>:
 80080a8:	2300      	movs	r3, #0
 80080aa:	b510      	push	{r4, lr}
 80080ac:	4604      	mov	r4, r0
 80080ae:	e9c0 3300 	strd	r3, r3, [r0]
 80080b2:	6083      	str	r3, [r0, #8]
 80080b4:	8181      	strh	r1, [r0, #12]
 80080b6:	6643      	str	r3, [r0, #100]	; 0x64
 80080b8:	81c2      	strh	r2, [r0, #14]
 80080ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080be:	6183      	str	r3, [r0, #24]
 80080c0:	4619      	mov	r1, r3
 80080c2:	2208      	movs	r2, #8
 80080c4:	305c      	adds	r0, #92	; 0x5c
 80080c6:	f7fe faa5 	bl	8006614 <memset>
 80080ca:	4b05      	ldr	r3, [pc, #20]	; (80080e0 <std+0x38>)
 80080cc:	6263      	str	r3, [r4, #36]	; 0x24
 80080ce:	4b05      	ldr	r3, [pc, #20]	; (80080e4 <std+0x3c>)
 80080d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80080d2:	4b05      	ldr	r3, [pc, #20]	; (80080e8 <std+0x40>)
 80080d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80080d6:	4b05      	ldr	r3, [pc, #20]	; (80080ec <std+0x44>)
 80080d8:	6224      	str	r4, [r4, #32]
 80080da:	6323      	str	r3, [r4, #48]	; 0x30
 80080dc:	bd10      	pop	{r4, pc}
 80080de:	bf00      	nop
 80080e0:	08008d09 	.word	0x08008d09
 80080e4:	08008d2b 	.word	0x08008d2b
 80080e8:	08008d63 	.word	0x08008d63
 80080ec:	08008d87 	.word	0x08008d87

080080f0 <_cleanup_r>:
 80080f0:	4901      	ldr	r1, [pc, #4]	; (80080f8 <_cleanup_r+0x8>)
 80080f2:	f000 b885 	b.w	8008200 <_fwalk_reent>
 80080f6:	bf00      	nop
 80080f8:	08008055 	.word	0x08008055

080080fc <__sfmoreglue>:
 80080fc:	b570      	push	{r4, r5, r6, lr}
 80080fe:	1e4a      	subs	r2, r1, #1
 8008100:	2568      	movs	r5, #104	; 0x68
 8008102:	4355      	muls	r5, r2
 8008104:	460e      	mov	r6, r1
 8008106:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800810a:	f000 fc53 	bl	80089b4 <_malloc_r>
 800810e:	4604      	mov	r4, r0
 8008110:	b140      	cbz	r0, 8008124 <__sfmoreglue+0x28>
 8008112:	2100      	movs	r1, #0
 8008114:	e9c0 1600 	strd	r1, r6, [r0]
 8008118:	300c      	adds	r0, #12
 800811a:	60a0      	str	r0, [r4, #8]
 800811c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008120:	f7fe fa78 	bl	8006614 <memset>
 8008124:	4620      	mov	r0, r4
 8008126:	bd70      	pop	{r4, r5, r6, pc}

08008128 <__sinit>:
 8008128:	6983      	ldr	r3, [r0, #24]
 800812a:	b510      	push	{r4, lr}
 800812c:	4604      	mov	r4, r0
 800812e:	bb33      	cbnz	r3, 800817e <__sinit+0x56>
 8008130:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008134:	6503      	str	r3, [r0, #80]	; 0x50
 8008136:	4b12      	ldr	r3, [pc, #72]	; (8008180 <__sinit+0x58>)
 8008138:	4a12      	ldr	r2, [pc, #72]	; (8008184 <__sinit+0x5c>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	6282      	str	r2, [r0, #40]	; 0x28
 800813e:	4298      	cmp	r0, r3
 8008140:	bf04      	itt	eq
 8008142:	2301      	moveq	r3, #1
 8008144:	6183      	streq	r3, [r0, #24]
 8008146:	f000 f81f 	bl	8008188 <__sfp>
 800814a:	6060      	str	r0, [r4, #4]
 800814c:	4620      	mov	r0, r4
 800814e:	f000 f81b 	bl	8008188 <__sfp>
 8008152:	60a0      	str	r0, [r4, #8]
 8008154:	4620      	mov	r0, r4
 8008156:	f000 f817 	bl	8008188 <__sfp>
 800815a:	2200      	movs	r2, #0
 800815c:	60e0      	str	r0, [r4, #12]
 800815e:	2104      	movs	r1, #4
 8008160:	6860      	ldr	r0, [r4, #4]
 8008162:	f7ff ffa1 	bl	80080a8 <std>
 8008166:	2201      	movs	r2, #1
 8008168:	2109      	movs	r1, #9
 800816a:	68a0      	ldr	r0, [r4, #8]
 800816c:	f7ff ff9c 	bl	80080a8 <std>
 8008170:	2202      	movs	r2, #2
 8008172:	2112      	movs	r1, #18
 8008174:	68e0      	ldr	r0, [r4, #12]
 8008176:	f7ff ff97 	bl	80080a8 <std>
 800817a:	2301      	movs	r3, #1
 800817c:	61a3      	str	r3, [r4, #24]
 800817e:	bd10      	pop	{r4, pc}
 8008180:	08009b40 	.word	0x08009b40
 8008184:	080080f1 	.word	0x080080f1

08008188 <__sfp>:
 8008188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818a:	4b1b      	ldr	r3, [pc, #108]	; (80081f8 <__sfp+0x70>)
 800818c:	681e      	ldr	r6, [r3, #0]
 800818e:	69b3      	ldr	r3, [r6, #24]
 8008190:	4607      	mov	r7, r0
 8008192:	b913      	cbnz	r3, 800819a <__sfp+0x12>
 8008194:	4630      	mov	r0, r6
 8008196:	f7ff ffc7 	bl	8008128 <__sinit>
 800819a:	3648      	adds	r6, #72	; 0x48
 800819c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80081a0:	3b01      	subs	r3, #1
 80081a2:	d503      	bpl.n	80081ac <__sfp+0x24>
 80081a4:	6833      	ldr	r3, [r6, #0]
 80081a6:	b133      	cbz	r3, 80081b6 <__sfp+0x2e>
 80081a8:	6836      	ldr	r6, [r6, #0]
 80081aa:	e7f7      	b.n	800819c <__sfp+0x14>
 80081ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80081b0:	b16d      	cbz	r5, 80081ce <__sfp+0x46>
 80081b2:	3468      	adds	r4, #104	; 0x68
 80081b4:	e7f4      	b.n	80081a0 <__sfp+0x18>
 80081b6:	2104      	movs	r1, #4
 80081b8:	4638      	mov	r0, r7
 80081ba:	f7ff ff9f 	bl	80080fc <__sfmoreglue>
 80081be:	6030      	str	r0, [r6, #0]
 80081c0:	2800      	cmp	r0, #0
 80081c2:	d1f1      	bne.n	80081a8 <__sfp+0x20>
 80081c4:	230c      	movs	r3, #12
 80081c6:	603b      	str	r3, [r7, #0]
 80081c8:	4604      	mov	r4, r0
 80081ca:	4620      	mov	r0, r4
 80081cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081ce:	4b0b      	ldr	r3, [pc, #44]	; (80081fc <__sfp+0x74>)
 80081d0:	6665      	str	r5, [r4, #100]	; 0x64
 80081d2:	e9c4 5500 	strd	r5, r5, [r4]
 80081d6:	60a5      	str	r5, [r4, #8]
 80081d8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80081dc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80081e0:	2208      	movs	r2, #8
 80081e2:	4629      	mov	r1, r5
 80081e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80081e8:	f7fe fa14 	bl	8006614 <memset>
 80081ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80081f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80081f4:	e7e9      	b.n	80081ca <__sfp+0x42>
 80081f6:	bf00      	nop
 80081f8:	08009b40 	.word	0x08009b40
 80081fc:	ffff0001 	.word	0xffff0001

08008200 <_fwalk_reent>:
 8008200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008204:	4680      	mov	r8, r0
 8008206:	4689      	mov	r9, r1
 8008208:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800820c:	2600      	movs	r6, #0
 800820e:	b914      	cbnz	r4, 8008216 <_fwalk_reent+0x16>
 8008210:	4630      	mov	r0, r6
 8008212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008216:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800821a:	3f01      	subs	r7, #1
 800821c:	d501      	bpl.n	8008222 <_fwalk_reent+0x22>
 800821e:	6824      	ldr	r4, [r4, #0]
 8008220:	e7f5      	b.n	800820e <_fwalk_reent+0xe>
 8008222:	89ab      	ldrh	r3, [r5, #12]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d907      	bls.n	8008238 <_fwalk_reent+0x38>
 8008228:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800822c:	3301      	adds	r3, #1
 800822e:	d003      	beq.n	8008238 <_fwalk_reent+0x38>
 8008230:	4629      	mov	r1, r5
 8008232:	4640      	mov	r0, r8
 8008234:	47c8      	blx	r9
 8008236:	4306      	orrs	r6, r0
 8008238:	3568      	adds	r5, #104	; 0x68
 800823a:	e7ee      	b.n	800821a <_fwalk_reent+0x1a>

0800823c <_localeconv_r>:
 800823c:	4b04      	ldr	r3, [pc, #16]	; (8008250 <_localeconv_r+0x14>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	6a18      	ldr	r0, [r3, #32]
 8008242:	4b04      	ldr	r3, [pc, #16]	; (8008254 <_localeconv_r+0x18>)
 8008244:	2800      	cmp	r0, #0
 8008246:	bf08      	it	eq
 8008248:	4618      	moveq	r0, r3
 800824a:	30f0      	adds	r0, #240	; 0xf0
 800824c:	4770      	bx	lr
 800824e:	bf00      	nop
 8008250:	20000020 	.word	0x20000020
 8008254:	20000084 	.word	0x20000084

08008258 <__swhatbuf_r>:
 8008258:	b570      	push	{r4, r5, r6, lr}
 800825a:	460e      	mov	r6, r1
 800825c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008260:	2900      	cmp	r1, #0
 8008262:	b096      	sub	sp, #88	; 0x58
 8008264:	4614      	mov	r4, r2
 8008266:	461d      	mov	r5, r3
 8008268:	da07      	bge.n	800827a <__swhatbuf_r+0x22>
 800826a:	2300      	movs	r3, #0
 800826c:	602b      	str	r3, [r5, #0]
 800826e:	89b3      	ldrh	r3, [r6, #12]
 8008270:	061a      	lsls	r2, r3, #24
 8008272:	d410      	bmi.n	8008296 <__swhatbuf_r+0x3e>
 8008274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008278:	e00e      	b.n	8008298 <__swhatbuf_r+0x40>
 800827a:	466a      	mov	r2, sp
 800827c:	f000 fdaa 	bl	8008dd4 <_fstat_r>
 8008280:	2800      	cmp	r0, #0
 8008282:	dbf2      	blt.n	800826a <__swhatbuf_r+0x12>
 8008284:	9a01      	ldr	r2, [sp, #4]
 8008286:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800828a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800828e:	425a      	negs	r2, r3
 8008290:	415a      	adcs	r2, r3
 8008292:	602a      	str	r2, [r5, #0]
 8008294:	e7ee      	b.n	8008274 <__swhatbuf_r+0x1c>
 8008296:	2340      	movs	r3, #64	; 0x40
 8008298:	2000      	movs	r0, #0
 800829a:	6023      	str	r3, [r4, #0]
 800829c:	b016      	add	sp, #88	; 0x58
 800829e:	bd70      	pop	{r4, r5, r6, pc}

080082a0 <__smakebuf_r>:
 80082a0:	898b      	ldrh	r3, [r1, #12]
 80082a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80082a4:	079d      	lsls	r5, r3, #30
 80082a6:	4606      	mov	r6, r0
 80082a8:	460c      	mov	r4, r1
 80082aa:	d507      	bpl.n	80082bc <__smakebuf_r+0x1c>
 80082ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80082b0:	6023      	str	r3, [r4, #0]
 80082b2:	6123      	str	r3, [r4, #16]
 80082b4:	2301      	movs	r3, #1
 80082b6:	6163      	str	r3, [r4, #20]
 80082b8:	b002      	add	sp, #8
 80082ba:	bd70      	pop	{r4, r5, r6, pc}
 80082bc:	ab01      	add	r3, sp, #4
 80082be:	466a      	mov	r2, sp
 80082c0:	f7ff ffca 	bl	8008258 <__swhatbuf_r>
 80082c4:	9900      	ldr	r1, [sp, #0]
 80082c6:	4605      	mov	r5, r0
 80082c8:	4630      	mov	r0, r6
 80082ca:	f000 fb73 	bl	80089b4 <_malloc_r>
 80082ce:	b948      	cbnz	r0, 80082e4 <__smakebuf_r+0x44>
 80082d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082d4:	059a      	lsls	r2, r3, #22
 80082d6:	d4ef      	bmi.n	80082b8 <__smakebuf_r+0x18>
 80082d8:	f023 0303 	bic.w	r3, r3, #3
 80082dc:	f043 0302 	orr.w	r3, r3, #2
 80082e0:	81a3      	strh	r3, [r4, #12]
 80082e2:	e7e3      	b.n	80082ac <__smakebuf_r+0xc>
 80082e4:	4b0d      	ldr	r3, [pc, #52]	; (800831c <__smakebuf_r+0x7c>)
 80082e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80082e8:	89a3      	ldrh	r3, [r4, #12]
 80082ea:	6020      	str	r0, [r4, #0]
 80082ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082f0:	81a3      	strh	r3, [r4, #12]
 80082f2:	9b00      	ldr	r3, [sp, #0]
 80082f4:	6163      	str	r3, [r4, #20]
 80082f6:	9b01      	ldr	r3, [sp, #4]
 80082f8:	6120      	str	r0, [r4, #16]
 80082fa:	b15b      	cbz	r3, 8008314 <__smakebuf_r+0x74>
 80082fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008300:	4630      	mov	r0, r6
 8008302:	f000 fd79 	bl	8008df8 <_isatty_r>
 8008306:	b128      	cbz	r0, 8008314 <__smakebuf_r+0x74>
 8008308:	89a3      	ldrh	r3, [r4, #12]
 800830a:	f023 0303 	bic.w	r3, r3, #3
 800830e:	f043 0301 	orr.w	r3, r3, #1
 8008312:	81a3      	strh	r3, [r4, #12]
 8008314:	89a3      	ldrh	r3, [r4, #12]
 8008316:	431d      	orrs	r5, r3
 8008318:	81a5      	strh	r5, [r4, #12]
 800831a:	e7cd      	b.n	80082b8 <__smakebuf_r+0x18>
 800831c:	080080f1 	.word	0x080080f1

08008320 <malloc>:
 8008320:	4b02      	ldr	r3, [pc, #8]	; (800832c <malloc+0xc>)
 8008322:	4601      	mov	r1, r0
 8008324:	6818      	ldr	r0, [r3, #0]
 8008326:	f000 bb45 	b.w	80089b4 <_malloc_r>
 800832a:	bf00      	nop
 800832c:	20000020 	.word	0x20000020

08008330 <memcpy>:
 8008330:	b510      	push	{r4, lr}
 8008332:	1e43      	subs	r3, r0, #1
 8008334:	440a      	add	r2, r1
 8008336:	4291      	cmp	r1, r2
 8008338:	d100      	bne.n	800833c <memcpy+0xc>
 800833a:	bd10      	pop	{r4, pc}
 800833c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008340:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008344:	e7f7      	b.n	8008336 <memcpy+0x6>

08008346 <_Balloc>:
 8008346:	b570      	push	{r4, r5, r6, lr}
 8008348:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800834a:	4604      	mov	r4, r0
 800834c:	460e      	mov	r6, r1
 800834e:	b93d      	cbnz	r5, 8008360 <_Balloc+0x1a>
 8008350:	2010      	movs	r0, #16
 8008352:	f7ff ffe5 	bl	8008320 <malloc>
 8008356:	6260      	str	r0, [r4, #36]	; 0x24
 8008358:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800835c:	6005      	str	r5, [r0, #0]
 800835e:	60c5      	str	r5, [r0, #12]
 8008360:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008362:	68eb      	ldr	r3, [r5, #12]
 8008364:	b183      	cbz	r3, 8008388 <_Balloc+0x42>
 8008366:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800836e:	b9b8      	cbnz	r0, 80083a0 <_Balloc+0x5a>
 8008370:	2101      	movs	r1, #1
 8008372:	fa01 f506 	lsl.w	r5, r1, r6
 8008376:	1d6a      	adds	r2, r5, #5
 8008378:	0092      	lsls	r2, r2, #2
 800837a:	4620      	mov	r0, r4
 800837c:	f000 fabe 	bl	80088fc <_calloc_r>
 8008380:	b160      	cbz	r0, 800839c <_Balloc+0x56>
 8008382:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008386:	e00e      	b.n	80083a6 <_Balloc+0x60>
 8008388:	2221      	movs	r2, #33	; 0x21
 800838a:	2104      	movs	r1, #4
 800838c:	4620      	mov	r0, r4
 800838e:	f000 fab5 	bl	80088fc <_calloc_r>
 8008392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008394:	60e8      	str	r0, [r5, #12]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1e4      	bne.n	8008366 <_Balloc+0x20>
 800839c:	2000      	movs	r0, #0
 800839e:	bd70      	pop	{r4, r5, r6, pc}
 80083a0:	6802      	ldr	r2, [r0, #0]
 80083a2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80083a6:	2300      	movs	r3, #0
 80083a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80083ac:	e7f7      	b.n	800839e <_Balloc+0x58>

080083ae <_Bfree>:
 80083ae:	b570      	push	{r4, r5, r6, lr}
 80083b0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80083b2:	4606      	mov	r6, r0
 80083b4:	460d      	mov	r5, r1
 80083b6:	b93c      	cbnz	r4, 80083c8 <_Bfree+0x1a>
 80083b8:	2010      	movs	r0, #16
 80083ba:	f7ff ffb1 	bl	8008320 <malloc>
 80083be:	6270      	str	r0, [r6, #36]	; 0x24
 80083c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083c4:	6004      	str	r4, [r0, #0]
 80083c6:	60c4      	str	r4, [r0, #12]
 80083c8:	b13d      	cbz	r5, 80083da <_Bfree+0x2c>
 80083ca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80083cc:	686a      	ldr	r2, [r5, #4]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083d4:	6029      	str	r1, [r5, #0]
 80083d6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80083da:	bd70      	pop	{r4, r5, r6, pc}

080083dc <__multadd>:
 80083dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083e0:	690d      	ldr	r5, [r1, #16]
 80083e2:	461f      	mov	r7, r3
 80083e4:	4606      	mov	r6, r0
 80083e6:	460c      	mov	r4, r1
 80083e8:	f101 0c14 	add.w	ip, r1, #20
 80083ec:	2300      	movs	r3, #0
 80083ee:	f8dc 0000 	ldr.w	r0, [ip]
 80083f2:	b281      	uxth	r1, r0
 80083f4:	fb02 7101 	mla	r1, r2, r1, r7
 80083f8:	0c0f      	lsrs	r7, r1, #16
 80083fa:	0c00      	lsrs	r0, r0, #16
 80083fc:	fb02 7000 	mla	r0, r2, r0, r7
 8008400:	b289      	uxth	r1, r1
 8008402:	3301      	adds	r3, #1
 8008404:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008408:	429d      	cmp	r5, r3
 800840a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800840e:	f84c 1b04 	str.w	r1, [ip], #4
 8008412:	dcec      	bgt.n	80083ee <__multadd+0x12>
 8008414:	b1d7      	cbz	r7, 800844c <__multadd+0x70>
 8008416:	68a3      	ldr	r3, [r4, #8]
 8008418:	42ab      	cmp	r3, r5
 800841a:	dc12      	bgt.n	8008442 <__multadd+0x66>
 800841c:	6861      	ldr	r1, [r4, #4]
 800841e:	4630      	mov	r0, r6
 8008420:	3101      	adds	r1, #1
 8008422:	f7ff ff90 	bl	8008346 <_Balloc>
 8008426:	6922      	ldr	r2, [r4, #16]
 8008428:	3202      	adds	r2, #2
 800842a:	f104 010c 	add.w	r1, r4, #12
 800842e:	4680      	mov	r8, r0
 8008430:	0092      	lsls	r2, r2, #2
 8008432:	300c      	adds	r0, #12
 8008434:	f7ff ff7c 	bl	8008330 <memcpy>
 8008438:	4621      	mov	r1, r4
 800843a:	4630      	mov	r0, r6
 800843c:	f7ff ffb7 	bl	80083ae <_Bfree>
 8008440:	4644      	mov	r4, r8
 8008442:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008446:	3501      	adds	r5, #1
 8008448:	615f      	str	r7, [r3, #20]
 800844a:	6125      	str	r5, [r4, #16]
 800844c:	4620      	mov	r0, r4
 800844e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008452 <__hi0bits>:
 8008452:	0c02      	lsrs	r2, r0, #16
 8008454:	0412      	lsls	r2, r2, #16
 8008456:	4603      	mov	r3, r0
 8008458:	b9b2      	cbnz	r2, 8008488 <__hi0bits+0x36>
 800845a:	0403      	lsls	r3, r0, #16
 800845c:	2010      	movs	r0, #16
 800845e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008462:	bf04      	itt	eq
 8008464:	021b      	lsleq	r3, r3, #8
 8008466:	3008      	addeq	r0, #8
 8008468:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800846c:	bf04      	itt	eq
 800846e:	011b      	lsleq	r3, r3, #4
 8008470:	3004      	addeq	r0, #4
 8008472:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008476:	bf04      	itt	eq
 8008478:	009b      	lsleq	r3, r3, #2
 800847a:	3002      	addeq	r0, #2
 800847c:	2b00      	cmp	r3, #0
 800847e:	db06      	blt.n	800848e <__hi0bits+0x3c>
 8008480:	005b      	lsls	r3, r3, #1
 8008482:	d503      	bpl.n	800848c <__hi0bits+0x3a>
 8008484:	3001      	adds	r0, #1
 8008486:	4770      	bx	lr
 8008488:	2000      	movs	r0, #0
 800848a:	e7e8      	b.n	800845e <__hi0bits+0xc>
 800848c:	2020      	movs	r0, #32
 800848e:	4770      	bx	lr

08008490 <__lo0bits>:
 8008490:	6803      	ldr	r3, [r0, #0]
 8008492:	f013 0207 	ands.w	r2, r3, #7
 8008496:	4601      	mov	r1, r0
 8008498:	d00b      	beq.n	80084b2 <__lo0bits+0x22>
 800849a:	07da      	lsls	r2, r3, #31
 800849c:	d423      	bmi.n	80084e6 <__lo0bits+0x56>
 800849e:	0798      	lsls	r0, r3, #30
 80084a0:	bf49      	itett	mi
 80084a2:	085b      	lsrmi	r3, r3, #1
 80084a4:	089b      	lsrpl	r3, r3, #2
 80084a6:	2001      	movmi	r0, #1
 80084a8:	600b      	strmi	r3, [r1, #0]
 80084aa:	bf5c      	itt	pl
 80084ac:	600b      	strpl	r3, [r1, #0]
 80084ae:	2002      	movpl	r0, #2
 80084b0:	4770      	bx	lr
 80084b2:	b298      	uxth	r0, r3
 80084b4:	b9a8      	cbnz	r0, 80084e2 <__lo0bits+0x52>
 80084b6:	0c1b      	lsrs	r3, r3, #16
 80084b8:	2010      	movs	r0, #16
 80084ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 80084be:	bf04      	itt	eq
 80084c0:	0a1b      	lsreq	r3, r3, #8
 80084c2:	3008      	addeq	r0, #8
 80084c4:	071a      	lsls	r2, r3, #28
 80084c6:	bf04      	itt	eq
 80084c8:	091b      	lsreq	r3, r3, #4
 80084ca:	3004      	addeq	r0, #4
 80084cc:	079a      	lsls	r2, r3, #30
 80084ce:	bf04      	itt	eq
 80084d0:	089b      	lsreq	r3, r3, #2
 80084d2:	3002      	addeq	r0, #2
 80084d4:	07da      	lsls	r2, r3, #31
 80084d6:	d402      	bmi.n	80084de <__lo0bits+0x4e>
 80084d8:	085b      	lsrs	r3, r3, #1
 80084da:	d006      	beq.n	80084ea <__lo0bits+0x5a>
 80084dc:	3001      	adds	r0, #1
 80084de:	600b      	str	r3, [r1, #0]
 80084e0:	4770      	bx	lr
 80084e2:	4610      	mov	r0, r2
 80084e4:	e7e9      	b.n	80084ba <__lo0bits+0x2a>
 80084e6:	2000      	movs	r0, #0
 80084e8:	4770      	bx	lr
 80084ea:	2020      	movs	r0, #32
 80084ec:	4770      	bx	lr

080084ee <__i2b>:
 80084ee:	b510      	push	{r4, lr}
 80084f0:	460c      	mov	r4, r1
 80084f2:	2101      	movs	r1, #1
 80084f4:	f7ff ff27 	bl	8008346 <_Balloc>
 80084f8:	2201      	movs	r2, #1
 80084fa:	6144      	str	r4, [r0, #20]
 80084fc:	6102      	str	r2, [r0, #16]
 80084fe:	bd10      	pop	{r4, pc}

08008500 <__multiply>:
 8008500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008504:	4614      	mov	r4, r2
 8008506:	690a      	ldr	r2, [r1, #16]
 8008508:	6923      	ldr	r3, [r4, #16]
 800850a:	429a      	cmp	r2, r3
 800850c:	bfb8      	it	lt
 800850e:	460b      	movlt	r3, r1
 8008510:	4688      	mov	r8, r1
 8008512:	bfbc      	itt	lt
 8008514:	46a0      	movlt	r8, r4
 8008516:	461c      	movlt	r4, r3
 8008518:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800851c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008520:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008524:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008528:	eb07 0609 	add.w	r6, r7, r9
 800852c:	42b3      	cmp	r3, r6
 800852e:	bfb8      	it	lt
 8008530:	3101      	addlt	r1, #1
 8008532:	f7ff ff08 	bl	8008346 <_Balloc>
 8008536:	f100 0514 	add.w	r5, r0, #20
 800853a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800853e:	462b      	mov	r3, r5
 8008540:	2200      	movs	r2, #0
 8008542:	4573      	cmp	r3, lr
 8008544:	d316      	bcc.n	8008574 <__multiply+0x74>
 8008546:	f104 0214 	add.w	r2, r4, #20
 800854a:	f108 0114 	add.w	r1, r8, #20
 800854e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008552:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008556:	9300      	str	r3, [sp, #0]
 8008558:	9b00      	ldr	r3, [sp, #0]
 800855a:	9201      	str	r2, [sp, #4]
 800855c:	4293      	cmp	r3, r2
 800855e:	d80c      	bhi.n	800857a <__multiply+0x7a>
 8008560:	2e00      	cmp	r6, #0
 8008562:	dd03      	ble.n	800856c <__multiply+0x6c>
 8008564:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008568:	2b00      	cmp	r3, #0
 800856a:	d05d      	beq.n	8008628 <__multiply+0x128>
 800856c:	6106      	str	r6, [r0, #16]
 800856e:	b003      	add	sp, #12
 8008570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008574:	f843 2b04 	str.w	r2, [r3], #4
 8008578:	e7e3      	b.n	8008542 <__multiply+0x42>
 800857a:	f8b2 b000 	ldrh.w	fp, [r2]
 800857e:	f1bb 0f00 	cmp.w	fp, #0
 8008582:	d023      	beq.n	80085cc <__multiply+0xcc>
 8008584:	4689      	mov	r9, r1
 8008586:	46ac      	mov	ip, r5
 8008588:	f04f 0800 	mov.w	r8, #0
 800858c:	f859 4b04 	ldr.w	r4, [r9], #4
 8008590:	f8dc a000 	ldr.w	sl, [ip]
 8008594:	b2a3      	uxth	r3, r4
 8008596:	fa1f fa8a 	uxth.w	sl, sl
 800859a:	fb0b a303 	mla	r3, fp, r3, sl
 800859e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80085a2:	f8dc 4000 	ldr.w	r4, [ip]
 80085a6:	4443      	add	r3, r8
 80085a8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80085ac:	fb0b 840a 	mla	r4, fp, sl, r8
 80085b0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80085b4:	46e2      	mov	sl, ip
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80085bc:	454f      	cmp	r7, r9
 80085be:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80085c2:	f84a 3b04 	str.w	r3, [sl], #4
 80085c6:	d82b      	bhi.n	8008620 <__multiply+0x120>
 80085c8:	f8cc 8004 	str.w	r8, [ip, #4]
 80085cc:	9b01      	ldr	r3, [sp, #4]
 80085ce:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80085d2:	3204      	adds	r2, #4
 80085d4:	f1ba 0f00 	cmp.w	sl, #0
 80085d8:	d020      	beq.n	800861c <__multiply+0x11c>
 80085da:	682b      	ldr	r3, [r5, #0]
 80085dc:	4689      	mov	r9, r1
 80085de:	46a8      	mov	r8, r5
 80085e0:	f04f 0b00 	mov.w	fp, #0
 80085e4:	f8b9 c000 	ldrh.w	ip, [r9]
 80085e8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80085ec:	fb0a 440c 	mla	r4, sl, ip, r4
 80085f0:	445c      	add	r4, fp
 80085f2:	46c4      	mov	ip, r8
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80085fa:	f84c 3b04 	str.w	r3, [ip], #4
 80085fe:	f859 3b04 	ldr.w	r3, [r9], #4
 8008602:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008606:	0c1b      	lsrs	r3, r3, #16
 8008608:	fb0a b303 	mla	r3, sl, r3, fp
 800860c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008610:	454f      	cmp	r7, r9
 8008612:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008616:	d805      	bhi.n	8008624 <__multiply+0x124>
 8008618:	f8c8 3004 	str.w	r3, [r8, #4]
 800861c:	3504      	adds	r5, #4
 800861e:	e79b      	b.n	8008558 <__multiply+0x58>
 8008620:	46d4      	mov	ip, sl
 8008622:	e7b3      	b.n	800858c <__multiply+0x8c>
 8008624:	46e0      	mov	r8, ip
 8008626:	e7dd      	b.n	80085e4 <__multiply+0xe4>
 8008628:	3e01      	subs	r6, #1
 800862a:	e799      	b.n	8008560 <__multiply+0x60>

0800862c <__pow5mult>:
 800862c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008630:	4615      	mov	r5, r2
 8008632:	f012 0203 	ands.w	r2, r2, #3
 8008636:	4606      	mov	r6, r0
 8008638:	460f      	mov	r7, r1
 800863a:	d007      	beq.n	800864c <__pow5mult+0x20>
 800863c:	3a01      	subs	r2, #1
 800863e:	4c21      	ldr	r4, [pc, #132]	; (80086c4 <__pow5mult+0x98>)
 8008640:	2300      	movs	r3, #0
 8008642:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008646:	f7ff fec9 	bl	80083dc <__multadd>
 800864a:	4607      	mov	r7, r0
 800864c:	10ad      	asrs	r5, r5, #2
 800864e:	d035      	beq.n	80086bc <__pow5mult+0x90>
 8008650:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008652:	b93c      	cbnz	r4, 8008664 <__pow5mult+0x38>
 8008654:	2010      	movs	r0, #16
 8008656:	f7ff fe63 	bl	8008320 <malloc>
 800865a:	6270      	str	r0, [r6, #36]	; 0x24
 800865c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008660:	6004      	str	r4, [r0, #0]
 8008662:	60c4      	str	r4, [r0, #12]
 8008664:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008668:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800866c:	b94c      	cbnz	r4, 8008682 <__pow5mult+0x56>
 800866e:	f240 2171 	movw	r1, #625	; 0x271
 8008672:	4630      	mov	r0, r6
 8008674:	f7ff ff3b 	bl	80084ee <__i2b>
 8008678:	2300      	movs	r3, #0
 800867a:	f8c8 0008 	str.w	r0, [r8, #8]
 800867e:	4604      	mov	r4, r0
 8008680:	6003      	str	r3, [r0, #0]
 8008682:	f04f 0800 	mov.w	r8, #0
 8008686:	07eb      	lsls	r3, r5, #31
 8008688:	d50a      	bpl.n	80086a0 <__pow5mult+0x74>
 800868a:	4639      	mov	r1, r7
 800868c:	4622      	mov	r2, r4
 800868e:	4630      	mov	r0, r6
 8008690:	f7ff ff36 	bl	8008500 <__multiply>
 8008694:	4639      	mov	r1, r7
 8008696:	4681      	mov	r9, r0
 8008698:	4630      	mov	r0, r6
 800869a:	f7ff fe88 	bl	80083ae <_Bfree>
 800869e:	464f      	mov	r7, r9
 80086a0:	106d      	asrs	r5, r5, #1
 80086a2:	d00b      	beq.n	80086bc <__pow5mult+0x90>
 80086a4:	6820      	ldr	r0, [r4, #0]
 80086a6:	b938      	cbnz	r0, 80086b8 <__pow5mult+0x8c>
 80086a8:	4622      	mov	r2, r4
 80086aa:	4621      	mov	r1, r4
 80086ac:	4630      	mov	r0, r6
 80086ae:	f7ff ff27 	bl	8008500 <__multiply>
 80086b2:	6020      	str	r0, [r4, #0]
 80086b4:	f8c0 8000 	str.w	r8, [r0]
 80086b8:	4604      	mov	r4, r0
 80086ba:	e7e4      	b.n	8008686 <__pow5mult+0x5a>
 80086bc:	4638      	mov	r0, r7
 80086be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086c2:	bf00      	nop
 80086c4:	08009cd8 	.word	0x08009cd8

080086c8 <__lshift>:
 80086c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086cc:	460c      	mov	r4, r1
 80086ce:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80086d2:	6923      	ldr	r3, [r4, #16]
 80086d4:	6849      	ldr	r1, [r1, #4]
 80086d6:	eb0a 0903 	add.w	r9, sl, r3
 80086da:	68a3      	ldr	r3, [r4, #8]
 80086dc:	4607      	mov	r7, r0
 80086de:	4616      	mov	r6, r2
 80086e0:	f109 0501 	add.w	r5, r9, #1
 80086e4:	42ab      	cmp	r3, r5
 80086e6:	db32      	blt.n	800874e <__lshift+0x86>
 80086e8:	4638      	mov	r0, r7
 80086ea:	f7ff fe2c 	bl	8008346 <_Balloc>
 80086ee:	2300      	movs	r3, #0
 80086f0:	4680      	mov	r8, r0
 80086f2:	f100 0114 	add.w	r1, r0, #20
 80086f6:	461a      	mov	r2, r3
 80086f8:	4553      	cmp	r3, sl
 80086fa:	db2b      	blt.n	8008754 <__lshift+0x8c>
 80086fc:	6920      	ldr	r0, [r4, #16]
 80086fe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008702:	f104 0314 	add.w	r3, r4, #20
 8008706:	f016 021f 	ands.w	r2, r6, #31
 800870a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800870e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008712:	d025      	beq.n	8008760 <__lshift+0x98>
 8008714:	f1c2 0e20 	rsb	lr, r2, #32
 8008718:	2000      	movs	r0, #0
 800871a:	681e      	ldr	r6, [r3, #0]
 800871c:	468a      	mov	sl, r1
 800871e:	4096      	lsls	r6, r2
 8008720:	4330      	orrs	r0, r6
 8008722:	f84a 0b04 	str.w	r0, [sl], #4
 8008726:	f853 0b04 	ldr.w	r0, [r3], #4
 800872a:	459c      	cmp	ip, r3
 800872c:	fa20 f00e 	lsr.w	r0, r0, lr
 8008730:	d814      	bhi.n	800875c <__lshift+0x94>
 8008732:	6048      	str	r0, [r1, #4]
 8008734:	b108      	cbz	r0, 800873a <__lshift+0x72>
 8008736:	f109 0502 	add.w	r5, r9, #2
 800873a:	3d01      	subs	r5, #1
 800873c:	4638      	mov	r0, r7
 800873e:	f8c8 5010 	str.w	r5, [r8, #16]
 8008742:	4621      	mov	r1, r4
 8008744:	f7ff fe33 	bl	80083ae <_Bfree>
 8008748:	4640      	mov	r0, r8
 800874a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800874e:	3101      	adds	r1, #1
 8008750:	005b      	lsls	r3, r3, #1
 8008752:	e7c7      	b.n	80086e4 <__lshift+0x1c>
 8008754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008758:	3301      	adds	r3, #1
 800875a:	e7cd      	b.n	80086f8 <__lshift+0x30>
 800875c:	4651      	mov	r1, sl
 800875e:	e7dc      	b.n	800871a <__lshift+0x52>
 8008760:	3904      	subs	r1, #4
 8008762:	f853 2b04 	ldr.w	r2, [r3], #4
 8008766:	f841 2f04 	str.w	r2, [r1, #4]!
 800876a:	459c      	cmp	ip, r3
 800876c:	d8f9      	bhi.n	8008762 <__lshift+0x9a>
 800876e:	e7e4      	b.n	800873a <__lshift+0x72>

08008770 <__mcmp>:
 8008770:	6903      	ldr	r3, [r0, #16]
 8008772:	690a      	ldr	r2, [r1, #16]
 8008774:	1a9b      	subs	r3, r3, r2
 8008776:	b530      	push	{r4, r5, lr}
 8008778:	d10c      	bne.n	8008794 <__mcmp+0x24>
 800877a:	0092      	lsls	r2, r2, #2
 800877c:	3014      	adds	r0, #20
 800877e:	3114      	adds	r1, #20
 8008780:	1884      	adds	r4, r0, r2
 8008782:	4411      	add	r1, r2
 8008784:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008788:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800878c:	4295      	cmp	r5, r2
 800878e:	d003      	beq.n	8008798 <__mcmp+0x28>
 8008790:	d305      	bcc.n	800879e <__mcmp+0x2e>
 8008792:	2301      	movs	r3, #1
 8008794:	4618      	mov	r0, r3
 8008796:	bd30      	pop	{r4, r5, pc}
 8008798:	42a0      	cmp	r0, r4
 800879a:	d3f3      	bcc.n	8008784 <__mcmp+0x14>
 800879c:	e7fa      	b.n	8008794 <__mcmp+0x24>
 800879e:	f04f 33ff 	mov.w	r3, #4294967295
 80087a2:	e7f7      	b.n	8008794 <__mcmp+0x24>

080087a4 <__mdiff>:
 80087a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087a8:	460d      	mov	r5, r1
 80087aa:	4607      	mov	r7, r0
 80087ac:	4611      	mov	r1, r2
 80087ae:	4628      	mov	r0, r5
 80087b0:	4614      	mov	r4, r2
 80087b2:	f7ff ffdd 	bl	8008770 <__mcmp>
 80087b6:	1e06      	subs	r6, r0, #0
 80087b8:	d108      	bne.n	80087cc <__mdiff+0x28>
 80087ba:	4631      	mov	r1, r6
 80087bc:	4638      	mov	r0, r7
 80087be:	f7ff fdc2 	bl	8008346 <_Balloc>
 80087c2:	2301      	movs	r3, #1
 80087c4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80087c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087cc:	bfa4      	itt	ge
 80087ce:	4623      	movge	r3, r4
 80087d0:	462c      	movge	r4, r5
 80087d2:	4638      	mov	r0, r7
 80087d4:	6861      	ldr	r1, [r4, #4]
 80087d6:	bfa6      	itte	ge
 80087d8:	461d      	movge	r5, r3
 80087da:	2600      	movge	r6, #0
 80087dc:	2601      	movlt	r6, #1
 80087de:	f7ff fdb2 	bl	8008346 <_Balloc>
 80087e2:	692b      	ldr	r3, [r5, #16]
 80087e4:	60c6      	str	r6, [r0, #12]
 80087e6:	6926      	ldr	r6, [r4, #16]
 80087e8:	f105 0914 	add.w	r9, r5, #20
 80087ec:	f104 0214 	add.w	r2, r4, #20
 80087f0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80087f4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80087f8:	f100 0514 	add.w	r5, r0, #20
 80087fc:	f04f 0e00 	mov.w	lr, #0
 8008800:	f852 ab04 	ldr.w	sl, [r2], #4
 8008804:	f859 4b04 	ldr.w	r4, [r9], #4
 8008808:	fa1e f18a 	uxtah	r1, lr, sl
 800880c:	b2a3      	uxth	r3, r4
 800880e:	1ac9      	subs	r1, r1, r3
 8008810:	0c23      	lsrs	r3, r4, #16
 8008812:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008816:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800881a:	b289      	uxth	r1, r1
 800881c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008820:	45c8      	cmp	r8, r9
 8008822:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008826:	4694      	mov	ip, r2
 8008828:	f845 3b04 	str.w	r3, [r5], #4
 800882c:	d8e8      	bhi.n	8008800 <__mdiff+0x5c>
 800882e:	45bc      	cmp	ip, r7
 8008830:	d304      	bcc.n	800883c <__mdiff+0x98>
 8008832:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008836:	b183      	cbz	r3, 800885a <__mdiff+0xb6>
 8008838:	6106      	str	r6, [r0, #16]
 800883a:	e7c5      	b.n	80087c8 <__mdiff+0x24>
 800883c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008840:	fa1e f381 	uxtah	r3, lr, r1
 8008844:	141a      	asrs	r2, r3, #16
 8008846:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800884a:	b29b      	uxth	r3, r3
 800884c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008850:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008854:	f845 3b04 	str.w	r3, [r5], #4
 8008858:	e7e9      	b.n	800882e <__mdiff+0x8a>
 800885a:	3e01      	subs	r6, #1
 800885c:	e7e9      	b.n	8008832 <__mdiff+0x8e>

0800885e <__d2b>:
 800885e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008862:	460e      	mov	r6, r1
 8008864:	2101      	movs	r1, #1
 8008866:	ec59 8b10 	vmov	r8, r9, d0
 800886a:	4615      	mov	r5, r2
 800886c:	f7ff fd6b 	bl	8008346 <_Balloc>
 8008870:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008874:	4607      	mov	r7, r0
 8008876:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800887a:	bb34      	cbnz	r4, 80088ca <__d2b+0x6c>
 800887c:	9301      	str	r3, [sp, #4]
 800887e:	f1b8 0300 	subs.w	r3, r8, #0
 8008882:	d027      	beq.n	80088d4 <__d2b+0x76>
 8008884:	a802      	add	r0, sp, #8
 8008886:	f840 3d08 	str.w	r3, [r0, #-8]!
 800888a:	f7ff fe01 	bl	8008490 <__lo0bits>
 800888e:	9900      	ldr	r1, [sp, #0]
 8008890:	b1f0      	cbz	r0, 80088d0 <__d2b+0x72>
 8008892:	9a01      	ldr	r2, [sp, #4]
 8008894:	f1c0 0320 	rsb	r3, r0, #32
 8008898:	fa02 f303 	lsl.w	r3, r2, r3
 800889c:	430b      	orrs	r3, r1
 800889e:	40c2      	lsrs	r2, r0
 80088a0:	617b      	str	r3, [r7, #20]
 80088a2:	9201      	str	r2, [sp, #4]
 80088a4:	9b01      	ldr	r3, [sp, #4]
 80088a6:	61bb      	str	r3, [r7, #24]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	bf14      	ite	ne
 80088ac:	2102      	movne	r1, #2
 80088ae:	2101      	moveq	r1, #1
 80088b0:	6139      	str	r1, [r7, #16]
 80088b2:	b1c4      	cbz	r4, 80088e6 <__d2b+0x88>
 80088b4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80088b8:	4404      	add	r4, r0
 80088ba:	6034      	str	r4, [r6, #0]
 80088bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80088c0:	6028      	str	r0, [r5, #0]
 80088c2:	4638      	mov	r0, r7
 80088c4:	b003      	add	sp, #12
 80088c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088ce:	e7d5      	b.n	800887c <__d2b+0x1e>
 80088d0:	6179      	str	r1, [r7, #20]
 80088d2:	e7e7      	b.n	80088a4 <__d2b+0x46>
 80088d4:	a801      	add	r0, sp, #4
 80088d6:	f7ff fddb 	bl	8008490 <__lo0bits>
 80088da:	9b01      	ldr	r3, [sp, #4]
 80088dc:	617b      	str	r3, [r7, #20]
 80088de:	2101      	movs	r1, #1
 80088e0:	6139      	str	r1, [r7, #16]
 80088e2:	3020      	adds	r0, #32
 80088e4:	e7e5      	b.n	80088b2 <__d2b+0x54>
 80088e6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80088ea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80088ee:	6030      	str	r0, [r6, #0]
 80088f0:	6918      	ldr	r0, [r3, #16]
 80088f2:	f7ff fdae 	bl	8008452 <__hi0bits>
 80088f6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80088fa:	e7e1      	b.n	80088c0 <__d2b+0x62>

080088fc <_calloc_r>:
 80088fc:	b538      	push	{r3, r4, r5, lr}
 80088fe:	fb02 f401 	mul.w	r4, r2, r1
 8008902:	4621      	mov	r1, r4
 8008904:	f000 f856 	bl	80089b4 <_malloc_r>
 8008908:	4605      	mov	r5, r0
 800890a:	b118      	cbz	r0, 8008914 <_calloc_r+0x18>
 800890c:	4622      	mov	r2, r4
 800890e:	2100      	movs	r1, #0
 8008910:	f7fd fe80 	bl	8006614 <memset>
 8008914:	4628      	mov	r0, r5
 8008916:	bd38      	pop	{r3, r4, r5, pc}

08008918 <_free_r>:
 8008918:	b538      	push	{r3, r4, r5, lr}
 800891a:	4605      	mov	r5, r0
 800891c:	2900      	cmp	r1, #0
 800891e:	d045      	beq.n	80089ac <_free_r+0x94>
 8008920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008924:	1f0c      	subs	r4, r1, #4
 8008926:	2b00      	cmp	r3, #0
 8008928:	bfb8      	it	lt
 800892a:	18e4      	addlt	r4, r4, r3
 800892c:	f000 fa98 	bl	8008e60 <__malloc_lock>
 8008930:	4a1f      	ldr	r2, [pc, #124]	; (80089b0 <_free_r+0x98>)
 8008932:	6813      	ldr	r3, [r2, #0]
 8008934:	4610      	mov	r0, r2
 8008936:	b933      	cbnz	r3, 8008946 <_free_r+0x2e>
 8008938:	6063      	str	r3, [r4, #4]
 800893a:	6014      	str	r4, [r2, #0]
 800893c:	4628      	mov	r0, r5
 800893e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008942:	f000 ba8e 	b.w	8008e62 <__malloc_unlock>
 8008946:	42a3      	cmp	r3, r4
 8008948:	d90c      	bls.n	8008964 <_free_r+0x4c>
 800894a:	6821      	ldr	r1, [r4, #0]
 800894c:	1862      	adds	r2, r4, r1
 800894e:	4293      	cmp	r3, r2
 8008950:	bf04      	itt	eq
 8008952:	681a      	ldreq	r2, [r3, #0]
 8008954:	685b      	ldreq	r3, [r3, #4]
 8008956:	6063      	str	r3, [r4, #4]
 8008958:	bf04      	itt	eq
 800895a:	1852      	addeq	r2, r2, r1
 800895c:	6022      	streq	r2, [r4, #0]
 800895e:	6004      	str	r4, [r0, #0]
 8008960:	e7ec      	b.n	800893c <_free_r+0x24>
 8008962:	4613      	mov	r3, r2
 8008964:	685a      	ldr	r2, [r3, #4]
 8008966:	b10a      	cbz	r2, 800896c <_free_r+0x54>
 8008968:	42a2      	cmp	r2, r4
 800896a:	d9fa      	bls.n	8008962 <_free_r+0x4a>
 800896c:	6819      	ldr	r1, [r3, #0]
 800896e:	1858      	adds	r0, r3, r1
 8008970:	42a0      	cmp	r0, r4
 8008972:	d10b      	bne.n	800898c <_free_r+0x74>
 8008974:	6820      	ldr	r0, [r4, #0]
 8008976:	4401      	add	r1, r0
 8008978:	1858      	adds	r0, r3, r1
 800897a:	4282      	cmp	r2, r0
 800897c:	6019      	str	r1, [r3, #0]
 800897e:	d1dd      	bne.n	800893c <_free_r+0x24>
 8008980:	6810      	ldr	r0, [r2, #0]
 8008982:	6852      	ldr	r2, [r2, #4]
 8008984:	605a      	str	r2, [r3, #4]
 8008986:	4401      	add	r1, r0
 8008988:	6019      	str	r1, [r3, #0]
 800898a:	e7d7      	b.n	800893c <_free_r+0x24>
 800898c:	d902      	bls.n	8008994 <_free_r+0x7c>
 800898e:	230c      	movs	r3, #12
 8008990:	602b      	str	r3, [r5, #0]
 8008992:	e7d3      	b.n	800893c <_free_r+0x24>
 8008994:	6820      	ldr	r0, [r4, #0]
 8008996:	1821      	adds	r1, r4, r0
 8008998:	428a      	cmp	r2, r1
 800899a:	bf04      	itt	eq
 800899c:	6811      	ldreq	r1, [r2, #0]
 800899e:	6852      	ldreq	r2, [r2, #4]
 80089a0:	6062      	str	r2, [r4, #4]
 80089a2:	bf04      	itt	eq
 80089a4:	1809      	addeq	r1, r1, r0
 80089a6:	6021      	streq	r1, [r4, #0]
 80089a8:	605c      	str	r4, [r3, #4]
 80089aa:	e7c7      	b.n	800893c <_free_r+0x24>
 80089ac:	bd38      	pop	{r3, r4, r5, pc}
 80089ae:	bf00      	nop
 80089b0:	20000284 	.word	0x20000284

080089b4 <_malloc_r>:
 80089b4:	b570      	push	{r4, r5, r6, lr}
 80089b6:	1ccd      	adds	r5, r1, #3
 80089b8:	f025 0503 	bic.w	r5, r5, #3
 80089bc:	3508      	adds	r5, #8
 80089be:	2d0c      	cmp	r5, #12
 80089c0:	bf38      	it	cc
 80089c2:	250c      	movcc	r5, #12
 80089c4:	2d00      	cmp	r5, #0
 80089c6:	4606      	mov	r6, r0
 80089c8:	db01      	blt.n	80089ce <_malloc_r+0x1a>
 80089ca:	42a9      	cmp	r1, r5
 80089cc:	d903      	bls.n	80089d6 <_malloc_r+0x22>
 80089ce:	230c      	movs	r3, #12
 80089d0:	6033      	str	r3, [r6, #0]
 80089d2:	2000      	movs	r0, #0
 80089d4:	bd70      	pop	{r4, r5, r6, pc}
 80089d6:	f000 fa43 	bl	8008e60 <__malloc_lock>
 80089da:	4a21      	ldr	r2, [pc, #132]	; (8008a60 <_malloc_r+0xac>)
 80089dc:	6814      	ldr	r4, [r2, #0]
 80089de:	4621      	mov	r1, r4
 80089e0:	b991      	cbnz	r1, 8008a08 <_malloc_r+0x54>
 80089e2:	4c20      	ldr	r4, [pc, #128]	; (8008a64 <_malloc_r+0xb0>)
 80089e4:	6823      	ldr	r3, [r4, #0]
 80089e6:	b91b      	cbnz	r3, 80089f0 <_malloc_r+0x3c>
 80089e8:	4630      	mov	r0, r6
 80089ea:	f000 f97d 	bl	8008ce8 <_sbrk_r>
 80089ee:	6020      	str	r0, [r4, #0]
 80089f0:	4629      	mov	r1, r5
 80089f2:	4630      	mov	r0, r6
 80089f4:	f000 f978 	bl	8008ce8 <_sbrk_r>
 80089f8:	1c43      	adds	r3, r0, #1
 80089fa:	d124      	bne.n	8008a46 <_malloc_r+0x92>
 80089fc:	230c      	movs	r3, #12
 80089fe:	6033      	str	r3, [r6, #0]
 8008a00:	4630      	mov	r0, r6
 8008a02:	f000 fa2e 	bl	8008e62 <__malloc_unlock>
 8008a06:	e7e4      	b.n	80089d2 <_malloc_r+0x1e>
 8008a08:	680b      	ldr	r3, [r1, #0]
 8008a0a:	1b5b      	subs	r3, r3, r5
 8008a0c:	d418      	bmi.n	8008a40 <_malloc_r+0x8c>
 8008a0e:	2b0b      	cmp	r3, #11
 8008a10:	d90f      	bls.n	8008a32 <_malloc_r+0x7e>
 8008a12:	600b      	str	r3, [r1, #0]
 8008a14:	50cd      	str	r5, [r1, r3]
 8008a16:	18cc      	adds	r4, r1, r3
 8008a18:	4630      	mov	r0, r6
 8008a1a:	f000 fa22 	bl	8008e62 <__malloc_unlock>
 8008a1e:	f104 000b 	add.w	r0, r4, #11
 8008a22:	1d23      	adds	r3, r4, #4
 8008a24:	f020 0007 	bic.w	r0, r0, #7
 8008a28:	1ac3      	subs	r3, r0, r3
 8008a2a:	d0d3      	beq.n	80089d4 <_malloc_r+0x20>
 8008a2c:	425a      	negs	r2, r3
 8008a2e:	50e2      	str	r2, [r4, r3]
 8008a30:	e7d0      	b.n	80089d4 <_malloc_r+0x20>
 8008a32:	428c      	cmp	r4, r1
 8008a34:	684b      	ldr	r3, [r1, #4]
 8008a36:	bf16      	itet	ne
 8008a38:	6063      	strne	r3, [r4, #4]
 8008a3a:	6013      	streq	r3, [r2, #0]
 8008a3c:	460c      	movne	r4, r1
 8008a3e:	e7eb      	b.n	8008a18 <_malloc_r+0x64>
 8008a40:	460c      	mov	r4, r1
 8008a42:	6849      	ldr	r1, [r1, #4]
 8008a44:	e7cc      	b.n	80089e0 <_malloc_r+0x2c>
 8008a46:	1cc4      	adds	r4, r0, #3
 8008a48:	f024 0403 	bic.w	r4, r4, #3
 8008a4c:	42a0      	cmp	r0, r4
 8008a4e:	d005      	beq.n	8008a5c <_malloc_r+0xa8>
 8008a50:	1a21      	subs	r1, r4, r0
 8008a52:	4630      	mov	r0, r6
 8008a54:	f000 f948 	bl	8008ce8 <_sbrk_r>
 8008a58:	3001      	adds	r0, #1
 8008a5a:	d0cf      	beq.n	80089fc <_malloc_r+0x48>
 8008a5c:	6025      	str	r5, [r4, #0]
 8008a5e:	e7db      	b.n	8008a18 <_malloc_r+0x64>
 8008a60:	20000284 	.word	0x20000284
 8008a64:	20000288 	.word	0x20000288

08008a68 <__sfputc_r>:
 8008a68:	6893      	ldr	r3, [r2, #8]
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	b410      	push	{r4}
 8008a70:	6093      	str	r3, [r2, #8]
 8008a72:	da08      	bge.n	8008a86 <__sfputc_r+0x1e>
 8008a74:	6994      	ldr	r4, [r2, #24]
 8008a76:	42a3      	cmp	r3, r4
 8008a78:	db01      	blt.n	8008a7e <__sfputc_r+0x16>
 8008a7a:	290a      	cmp	r1, #10
 8008a7c:	d103      	bne.n	8008a86 <__sfputc_r+0x1e>
 8008a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a82:	f7fe bb5d 	b.w	8007140 <__swbuf_r>
 8008a86:	6813      	ldr	r3, [r2, #0]
 8008a88:	1c58      	adds	r0, r3, #1
 8008a8a:	6010      	str	r0, [r2, #0]
 8008a8c:	7019      	strb	r1, [r3, #0]
 8008a8e:	4608      	mov	r0, r1
 8008a90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a94:	4770      	bx	lr

08008a96 <__sfputs_r>:
 8008a96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a98:	4606      	mov	r6, r0
 8008a9a:	460f      	mov	r7, r1
 8008a9c:	4614      	mov	r4, r2
 8008a9e:	18d5      	adds	r5, r2, r3
 8008aa0:	42ac      	cmp	r4, r5
 8008aa2:	d101      	bne.n	8008aa8 <__sfputs_r+0x12>
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	e007      	b.n	8008ab8 <__sfputs_r+0x22>
 8008aa8:	463a      	mov	r2, r7
 8008aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aae:	4630      	mov	r0, r6
 8008ab0:	f7ff ffda 	bl	8008a68 <__sfputc_r>
 8008ab4:	1c43      	adds	r3, r0, #1
 8008ab6:	d1f3      	bne.n	8008aa0 <__sfputs_r+0xa>
 8008ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008abc <_vfiprintf_r>:
 8008abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac0:	460c      	mov	r4, r1
 8008ac2:	b09d      	sub	sp, #116	; 0x74
 8008ac4:	4617      	mov	r7, r2
 8008ac6:	461d      	mov	r5, r3
 8008ac8:	4606      	mov	r6, r0
 8008aca:	b118      	cbz	r0, 8008ad4 <_vfiprintf_r+0x18>
 8008acc:	6983      	ldr	r3, [r0, #24]
 8008ace:	b90b      	cbnz	r3, 8008ad4 <_vfiprintf_r+0x18>
 8008ad0:	f7ff fb2a 	bl	8008128 <__sinit>
 8008ad4:	4b7c      	ldr	r3, [pc, #496]	; (8008cc8 <_vfiprintf_r+0x20c>)
 8008ad6:	429c      	cmp	r4, r3
 8008ad8:	d158      	bne.n	8008b8c <_vfiprintf_r+0xd0>
 8008ada:	6874      	ldr	r4, [r6, #4]
 8008adc:	89a3      	ldrh	r3, [r4, #12]
 8008ade:	0718      	lsls	r0, r3, #28
 8008ae0:	d55e      	bpl.n	8008ba0 <_vfiprintf_r+0xe4>
 8008ae2:	6923      	ldr	r3, [r4, #16]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d05b      	beq.n	8008ba0 <_vfiprintf_r+0xe4>
 8008ae8:	2300      	movs	r3, #0
 8008aea:	9309      	str	r3, [sp, #36]	; 0x24
 8008aec:	2320      	movs	r3, #32
 8008aee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008af2:	2330      	movs	r3, #48	; 0x30
 8008af4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008af8:	9503      	str	r5, [sp, #12]
 8008afa:	f04f 0b01 	mov.w	fp, #1
 8008afe:	46b8      	mov	r8, r7
 8008b00:	4645      	mov	r5, r8
 8008b02:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008b06:	b10b      	cbz	r3, 8008b0c <_vfiprintf_r+0x50>
 8008b08:	2b25      	cmp	r3, #37	; 0x25
 8008b0a:	d154      	bne.n	8008bb6 <_vfiprintf_r+0xfa>
 8008b0c:	ebb8 0a07 	subs.w	sl, r8, r7
 8008b10:	d00b      	beq.n	8008b2a <_vfiprintf_r+0x6e>
 8008b12:	4653      	mov	r3, sl
 8008b14:	463a      	mov	r2, r7
 8008b16:	4621      	mov	r1, r4
 8008b18:	4630      	mov	r0, r6
 8008b1a:	f7ff ffbc 	bl	8008a96 <__sfputs_r>
 8008b1e:	3001      	adds	r0, #1
 8008b20:	f000 80c2 	beq.w	8008ca8 <_vfiprintf_r+0x1ec>
 8008b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b26:	4453      	add	r3, sl
 8008b28:	9309      	str	r3, [sp, #36]	; 0x24
 8008b2a:	f898 3000 	ldrb.w	r3, [r8]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	f000 80ba 	beq.w	8008ca8 <_vfiprintf_r+0x1ec>
 8008b34:	2300      	movs	r3, #0
 8008b36:	f04f 32ff 	mov.w	r2, #4294967295
 8008b3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b3e:	9304      	str	r3, [sp, #16]
 8008b40:	9307      	str	r3, [sp, #28]
 8008b42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b46:	931a      	str	r3, [sp, #104]	; 0x68
 8008b48:	46a8      	mov	r8, r5
 8008b4a:	2205      	movs	r2, #5
 8008b4c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008b50:	485e      	ldr	r0, [pc, #376]	; (8008ccc <_vfiprintf_r+0x210>)
 8008b52:	f7f7 fb55 	bl	8000200 <memchr>
 8008b56:	9b04      	ldr	r3, [sp, #16]
 8008b58:	bb78      	cbnz	r0, 8008bba <_vfiprintf_r+0xfe>
 8008b5a:	06d9      	lsls	r1, r3, #27
 8008b5c:	bf44      	itt	mi
 8008b5e:	2220      	movmi	r2, #32
 8008b60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008b64:	071a      	lsls	r2, r3, #28
 8008b66:	bf44      	itt	mi
 8008b68:	222b      	movmi	r2, #43	; 0x2b
 8008b6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008b6e:	782a      	ldrb	r2, [r5, #0]
 8008b70:	2a2a      	cmp	r2, #42	; 0x2a
 8008b72:	d02a      	beq.n	8008bca <_vfiprintf_r+0x10e>
 8008b74:	9a07      	ldr	r2, [sp, #28]
 8008b76:	46a8      	mov	r8, r5
 8008b78:	2000      	movs	r0, #0
 8008b7a:	250a      	movs	r5, #10
 8008b7c:	4641      	mov	r1, r8
 8008b7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b82:	3b30      	subs	r3, #48	; 0x30
 8008b84:	2b09      	cmp	r3, #9
 8008b86:	d969      	bls.n	8008c5c <_vfiprintf_r+0x1a0>
 8008b88:	b360      	cbz	r0, 8008be4 <_vfiprintf_r+0x128>
 8008b8a:	e024      	b.n	8008bd6 <_vfiprintf_r+0x11a>
 8008b8c:	4b50      	ldr	r3, [pc, #320]	; (8008cd0 <_vfiprintf_r+0x214>)
 8008b8e:	429c      	cmp	r4, r3
 8008b90:	d101      	bne.n	8008b96 <_vfiprintf_r+0xda>
 8008b92:	68b4      	ldr	r4, [r6, #8]
 8008b94:	e7a2      	b.n	8008adc <_vfiprintf_r+0x20>
 8008b96:	4b4f      	ldr	r3, [pc, #316]	; (8008cd4 <_vfiprintf_r+0x218>)
 8008b98:	429c      	cmp	r4, r3
 8008b9a:	bf08      	it	eq
 8008b9c:	68f4      	ldreq	r4, [r6, #12]
 8008b9e:	e79d      	b.n	8008adc <_vfiprintf_r+0x20>
 8008ba0:	4621      	mov	r1, r4
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	f7fe fb1e 	bl	80071e4 <__swsetup_r>
 8008ba8:	2800      	cmp	r0, #0
 8008baa:	d09d      	beq.n	8008ae8 <_vfiprintf_r+0x2c>
 8008bac:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb0:	b01d      	add	sp, #116	; 0x74
 8008bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb6:	46a8      	mov	r8, r5
 8008bb8:	e7a2      	b.n	8008b00 <_vfiprintf_r+0x44>
 8008bba:	4a44      	ldr	r2, [pc, #272]	; (8008ccc <_vfiprintf_r+0x210>)
 8008bbc:	1a80      	subs	r0, r0, r2
 8008bbe:	fa0b f000 	lsl.w	r0, fp, r0
 8008bc2:	4318      	orrs	r0, r3
 8008bc4:	9004      	str	r0, [sp, #16]
 8008bc6:	4645      	mov	r5, r8
 8008bc8:	e7be      	b.n	8008b48 <_vfiprintf_r+0x8c>
 8008bca:	9a03      	ldr	r2, [sp, #12]
 8008bcc:	1d11      	adds	r1, r2, #4
 8008bce:	6812      	ldr	r2, [r2, #0]
 8008bd0:	9103      	str	r1, [sp, #12]
 8008bd2:	2a00      	cmp	r2, #0
 8008bd4:	db01      	blt.n	8008bda <_vfiprintf_r+0x11e>
 8008bd6:	9207      	str	r2, [sp, #28]
 8008bd8:	e004      	b.n	8008be4 <_vfiprintf_r+0x128>
 8008bda:	4252      	negs	r2, r2
 8008bdc:	f043 0302 	orr.w	r3, r3, #2
 8008be0:	9207      	str	r2, [sp, #28]
 8008be2:	9304      	str	r3, [sp, #16]
 8008be4:	f898 3000 	ldrb.w	r3, [r8]
 8008be8:	2b2e      	cmp	r3, #46	; 0x2e
 8008bea:	d10e      	bne.n	8008c0a <_vfiprintf_r+0x14e>
 8008bec:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008bf0:	2b2a      	cmp	r3, #42	; 0x2a
 8008bf2:	d138      	bne.n	8008c66 <_vfiprintf_r+0x1aa>
 8008bf4:	9b03      	ldr	r3, [sp, #12]
 8008bf6:	1d1a      	adds	r2, r3, #4
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	9203      	str	r2, [sp, #12]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	bfb8      	it	lt
 8008c00:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c04:	f108 0802 	add.w	r8, r8, #2
 8008c08:	9305      	str	r3, [sp, #20]
 8008c0a:	4d33      	ldr	r5, [pc, #204]	; (8008cd8 <_vfiprintf_r+0x21c>)
 8008c0c:	f898 1000 	ldrb.w	r1, [r8]
 8008c10:	2203      	movs	r2, #3
 8008c12:	4628      	mov	r0, r5
 8008c14:	f7f7 faf4 	bl	8000200 <memchr>
 8008c18:	b140      	cbz	r0, 8008c2c <_vfiprintf_r+0x170>
 8008c1a:	2340      	movs	r3, #64	; 0x40
 8008c1c:	1b40      	subs	r0, r0, r5
 8008c1e:	fa03 f000 	lsl.w	r0, r3, r0
 8008c22:	9b04      	ldr	r3, [sp, #16]
 8008c24:	4303      	orrs	r3, r0
 8008c26:	f108 0801 	add.w	r8, r8, #1
 8008c2a:	9304      	str	r3, [sp, #16]
 8008c2c:	f898 1000 	ldrb.w	r1, [r8]
 8008c30:	482a      	ldr	r0, [pc, #168]	; (8008cdc <_vfiprintf_r+0x220>)
 8008c32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c36:	2206      	movs	r2, #6
 8008c38:	f108 0701 	add.w	r7, r8, #1
 8008c3c:	f7f7 fae0 	bl	8000200 <memchr>
 8008c40:	2800      	cmp	r0, #0
 8008c42:	d037      	beq.n	8008cb4 <_vfiprintf_r+0x1f8>
 8008c44:	4b26      	ldr	r3, [pc, #152]	; (8008ce0 <_vfiprintf_r+0x224>)
 8008c46:	bb1b      	cbnz	r3, 8008c90 <_vfiprintf_r+0x1d4>
 8008c48:	9b03      	ldr	r3, [sp, #12]
 8008c4a:	3307      	adds	r3, #7
 8008c4c:	f023 0307 	bic.w	r3, r3, #7
 8008c50:	3308      	adds	r3, #8
 8008c52:	9303      	str	r3, [sp, #12]
 8008c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c56:	444b      	add	r3, r9
 8008c58:	9309      	str	r3, [sp, #36]	; 0x24
 8008c5a:	e750      	b.n	8008afe <_vfiprintf_r+0x42>
 8008c5c:	fb05 3202 	mla	r2, r5, r2, r3
 8008c60:	2001      	movs	r0, #1
 8008c62:	4688      	mov	r8, r1
 8008c64:	e78a      	b.n	8008b7c <_vfiprintf_r+0xc0>
 8008c66:	2300      	movs	r3, #0
 8008c68:	f108 0801 	add.w	r8, r8, #1
 8008c6c:	9305      	str	r3, [sp, #20]
 8008c6e:	4619      	mov	r1, r3
 8008c70:	250a      	movs	r5, #10
 8008c72:	4640      	mov	r0, r8
 8008c74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c78:	3a30      	subs	r2, #48	; 0x30
 8008c7a:	2a09      	cmp	r2, #9
 8008c7c:	d903      	bls.n	8008c86 <_vfiprintf_r+0x1ca>
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d0c3      	beq.n	8008c0a <_vfiprintf_r+0x14e>
 8008c82:	9105      	str	r1, [sp, #20]
 8008c84:	e7c1      	b.n	8008c0a <_vfiprintf_r+0x14e>
 8008c86:	fb05 2101 	mla	r1, r5, r1, r2
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	4680      	mov	r8, r0
 8008c8e:	e7f0      	b.n	8008c72 <_vfiprintf_r+0x1b6>
 8008c90:	ab03      	add	r3, sp, #12
 8008c92:	9300      	str	r3, [sp, #0]
 8008c94:	4622      	mov	r2, r4
 8008c96:	4b13      	ldr	r3, [pc, #76]	; (8008ce4 <_vfiprintf_r+0x228>)
 8008c98:	a904      	add	r1, sp, #16
 8008c9a:	4630      	mov	r0, r6
 8008c9c:	f7fd fd56 	bl	800674c <_printf_float>
 8008ca0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008ca4:	4681      	mov	r9, r0
 8008ca6:	d1d5      	bne.n	8008c54 <_vfiprintf_r+0x198>
 8008ca8:	89a3      	ldrh	r3, [r4, #12]
 8008caa:	065b      	lsls	r3, r3, #25
 8008cac:	f53f af7e 	bmi.w	8008bac <_vfiprintf_r+0xf0>
 8008cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cb2:	e77d      	b.n	8008bb0 <_vfiprintf_r+0xf4>
 8008cb4:	ab03      	add	r3, sp, #12
 8008cb6:	9300      	str	r3, [sp, #0]
 8008cb8:	4622      	mov	r2, r4
 8008cba:	4b0a      	ldr	r3, [pc, #40]	; (8008ce4 <_vfiprintf_r+0x228>)
 8008cbc:	a904      	add	r1, sp, #16
 8008cbe:	4630      	mov	r0, r6
 8008cc0:	f7fd fffa 	bl	8006cb8 <_printf_i>
 8008cc4:	e7ec      	b.n	8008ca0 <_vfiprintf_r+0x1e4>
 8008cc6:	bf00      	nop
 8008cc8:	08009ba8 	.word	0x08009ba8
 8008ccc:	08009ce4 	.word	0x08009ce4
 8008cd0:	08009bc8 	.word	0x08009bc8
 8008cd4:	08009b88 	.word	0x08009b88
 8008cd8:	08009cea 	.word	0x08009cea
 8008cdc:	08009cee 	.word	0x08009cee
 8008ce0:	0800674d 	.word	0x0800674d
 8008ce4:	08008a97 	.word	0x08008a97

08008ce8 <_sbrk_r>:
 8008ce8:	b538      	push	{r3, r4, r5, lr}
 8008cea:	4c06      	ldr	r4, [pc, #24]	; (8008d04 <_sbrk_r+0x1c>)
 8008cec:	2300      	movs	r3, #0
 8008cee:	4605      	mov	r5, r0
 8008cf0:	4608      	mov	r0, r1
 8008cf2:	6023      	str	r3, [r4, #0]
 8008cf4:	f7fd f906 	bl	8005f04 <_sbrk>
 8008cf8:	1c43      	adds	r3, r0, #1
 8008cfa:	d102      	bne.n	8008d02 <_sbrk_r+0x1a>
 8008cfc:	6823      	ldr	r3, [r4, #0]
 8008cfe:	b103      	cbz	r3, 8008d02 <_sbrk_r+0x1a>
 8008d00:	602b      	str	r3, [r5, #0]
 8008d02:	bd38      	pop	{r3, r4, r5, pc}
 8008d04:	200007d0 	.word	0x200007d0

08008d08 <__sread>:
 8008d08:	b510      	push	{r4, lr}
 8008d0a:	460c      	mov	r4, r1
 8008d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d10:	f000 f8a8 	bl	8008e64 <_read_r>
 8008d14:	2800      	cmp	r0, #0
 8008d16:	bfab      	itete	ge
 8008d18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d1a:	89a3      	ldrhlt	r3, [r4, #12]
 8008d1c:	181b      	addge	r3, r3, r0
 8008d1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d22:	bfac      	ite	ge
 8008d24:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d26:	81a3      	strhlt	r3, [r4, #12]
 8008d28:	bd10      	pop	{r4, pc}

08008d2a <__swrite>:
 8008d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d2e:	461f      	mov	r7, r3
 8008d30:	898b      	ldrh	r3, [r1, #12]
 8008d32:	05db      	lsls	r3, r3, #23
 8008d34:	4605      	mov	r5, r0
 8008d36:	460c      	mov	r4, r1
 8008d38:	4616      	mov	r6, r2
 8008d3a:	d505      	bpl.n	8008d48 <__swrite+0x1e>
 8008d3c:	2302      	movs	r3, #2
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d44:	f000 f868 	bl	8008e18 <_lseek_r>
 8008d48:	89a3      	ldrh	r3, [r4, #12]
 8008d4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d52:	81a3      	strh	r3, [r4, #12]
 8008d54:	4632      	mov	r2, r6
 8008d56:	463b      	mov	r3, r7
 8008d58:	4628      	mov	r0, r5
 8008d5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d5e:	f000 b817 	b.w	8008d90 <_write_r>

08008d62 <__sseek>:
 8008d62:	b510      	push	{r4, lr}
 8008d64:	460c      	mov	r4, r1
 8008d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d6a:	f000 f855 	bl	8008e18 <_lseek_r>
 8008d6e:	1c43      	adds	r3, r0, #1
 8008d70:	89a3      	ldrh	r3, [r4, #12]
 8008d72:	bf15      	itete	ne
 8008d74:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d7e:	81a3      	strheq	r3, [r4, #12]
 8008d80:	bf18      	it	ne
 8008d82:	81a3      	strhne	r3, [r4, #12]
 8008d84:	bd10      	pop	{r4, pc}

08008d86 <__sclose>:
 8008d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d8a:	f000 b813 	b.w	8008db4 <_close_r>
	...

08008d90 <_write_r>:
 8008d90:	b538      	push	{r3, r4, r5, lr}
 8008d92:	4c07      	ldr	r4, [pc, #28]	; (8008db0 <_write_r+0x20>)
 8008d94:	4605      	mov	r5, r0
 8008d96:	4608      	mov	r0, r1
 8008d98:	4611      	mov	r1, r2
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	6022      	str	r2, [r4, #0]
 8008d9e:	461a      	mov	r2, r3
 8008da0:	f7fd f894 	bl	8005ecc <_write>
 8008da4:	1c43      	adds	r3, r0, #1
 8008da6:	d102      	bne.n	8008dae <_write_r+0x1e>
 8008da8:	6823      	ldr	r3, [r4, #0]
 8008daa:	b103      	cbz	r3, 8008dae <_write_r+0x1e>
 8008dac:	602b      	str	r3, [r5, #0]
 8008dae:	bd38      	pop	{r3, r4, r5, pc}
 8008db0:	200007d0 	.word	0x200007d0

08008db4 <_close_r>:
 8008db4:	b538      	push	{r3, r4, r5, lr}
 8008db6:	4c06      	ldr	r4, [pc, #24]	; (8008dd0 <_close_r+0x1c>)
 8008db8:	2300      	movs	r3, #0
 8008dba:	4605      	mov	r5, r0
 8008dbc:	4608      	mov	r0, r1
 8008dbe:	6023      	str	r3, [r4, #0]
 8008dc0:	f7fd f892 	bl	8005ee8 <_close>
 8008dc4:	1c43      	adds	r3, r0, #1
 8008dc6:	d102      	bne.n	8008dce <_close_r+0x1a>
 8008dc8:	6823      	ldr	r3, [r4, #0]
 8008dca:	b103      	cbz	r3, 8008dce <_close_r+0x1a>
 8008dcc:	602b      	str	r3, [r5, #0]
 8008dce:	bd38      	pop	{r3, r4, r5, pc}
 8008dd0:	200007d0 	.word	0x200007d0

08008dd4 <_fstat_r>:
 8008dd4:	b538      	push	{r3, r4, r5, lr}
 8008dd6:	4c07      	ldr	r4, [pc, #28]	; (8008df4 <_fstat_r+0x20>)
 8008dd8:	2300      	movs	r3, #0
 8008dda:	4605      	mov	r5, r0
 8008ddc:	4608      	mov	r0, r1
 8008dde:	4611      	mov	r1, r2
 8008de0:	6023      	str	r3, [r4, #0]
 8008de2:	f7fd f885 	bl	8005ef0 <_fstat>
 8008de6:	1c43      	adds	r3, r0, #1
 8008de8:	d102      	bne.n	8008df0 <_fstat_r+0x1c>
 8008dea:	6823      	ldr	r3, [r4, #0]
 8008dec:	b103      	cbz	r3, 8008df0 <_fstat_r+0x1c>
 8008dee:	602b      	str	r3, [r5, #0]
 8008df0:	bd38      	pop	{r3, r4, r5, pc}
 8008df2:	bf00      	nop
 8008df4:	200007d0 	.word	0x200007d0

08008df8 <_isatty_r>:
 8008df8:	b538      	push	{r3, r4, r5, lr}
 8008dfa:	4c06      	ldr	r4, [pc, #24]	; (8008e14 <_isatty_r+0x1c>)
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	4605      	mov	r5, r0
 8008e00:	4608      	mov	r0, r1
 8008e02:	6023      	str	r3, [r4, #0]
 8008e04:	f7fd f87a 	bl	8005efc <_isatty>
 8008e08:	1c43      	adds	r3, r0, #1
 8008e0a:	d102      	bne.n	8008e12 <_isatty_r+0x1a>
 8008e0c:	6823      	ldr	r3, [r4, #0]
 8008e0e:	b103      	cbz	r3, 8008e12 <_isatty_r+0x1a>
 8008e10:	602b      	str	r3, [r5, #0]
 8008e12:	bd38      	pop	{r3, r4, r5, pc}
 8008e14:	200007d0 	.word	0x200007d0

08008e18 <_lseek_r>:
 8008e18:	b538      	push	{r3, r4, r5, lr}
 8008e1a:	4c07      	ldr	r4, [pc, #28]	; (8008e38 <_lseek_r+0x20>)
 8008e1c:	4605      	mov	r5, r0
 8008e1e:	4608      	mov	r0, r1
 8008e20:	4611      	mov	r1, r2
 8008e22:	2200      	movs	r2, #0
 8008e24:	6022      	str	r2, [r4, #0]
 8008e26:	461a      	mov	r2, r3
 8008e28:	f7fd f86a 	bl	8005f00 <_lseek>
 8008e2c:	1c43      	adds	r3, r0, #1
 8008e2e:	d102      	bne.n	8008e36 <_lseek_r+0x1e>
 8008e30:	6823      	ldr	r3, [r4, #0]
 8008e32:	b103      	cbz	r3, 8008e36 <_lseek_r+0x1e>
 8008e34:	602b      	str	r3, [r5, #0]
 8008e36:	bd38      	pop	{r3, r4, r5, pc}
 8008e38:	200007d0 	.word	0x200007d0

08008e3c <__ascii_mbtowc>:
 8008e3c:	b082      	sub	sp, #8
 8008e3e:	b901      	cbnz	r1, 8008e42 <__ascii_mbtowc+0x6>
 8008e40:	a901      	add	r1, sp, #4
 8008e42:	b142      	cbz	r2, 8008e56 <__ascii_mbtowc+0x1a>
 8008e44:	b14b      	cbz	r3, 8008e5a <__ascii_mbtowc+0x1e>
 8008e46:	7813      	ldrb	r3, [r2, #0]
 8008e48:	600b      	str	r3, [r1, #0]
 8008e4a:	7812      	ldrb	r2, [r2, #0]
 8008e4c:	1c10      	adds	r0, r2, #0
 8008e4e:	bf18      	it	ne
 8008e50:	2001      	movne	r0, #1
 8008e52:	b002      	add	sp, #8
 8008e54:	4770      	bx	lr
 8008e56:	4610      	mov	r0, r2
 8008e58:	e7fb      	b.n	8008e52 <__ascii_mbtowc+0x16>
 8008e5a:	f06f 0001 	mvn.w	r0, #1
 8008e5e:	e7f8      	b.n	8008e52 <__ascii_mbtowc+0x16>

08008e60 <__malloc_lock>:
 8008e60:	4770      	bx	lr

08008e62 <__malloc_unlock>:
 8008e62:	4770      	bx	lr

08008e64 <_read_r>:
 8008e64:	b538      	push	{r3, r4, r5, lr}
 8008e66:	4c07      	ldr	r4, [pc, #28]	; (8008e84 <_read_r+0x20>)
 8008e68:	4605      	mov	r5, r0
 8008e6a:	4608      	mov	r0, r1
 8008e6c:	4611      	mov	r1, r2
 8008e6e:	2200      	movs	r2, #0
 8008e70:	6022      	str	r2, [r4, #0]
 8008e72:	461a      	mov	r2, r3
 8008e74:	f7fd f81c 	bl	8005eb0 <_read>
 8008e78:	1c43      	adds	r3, r0, #1
 8008e7a:	d102      	bne.n	8008e82 <_read_r+0x1e>
 8008e7c:	6823      	ldr	r3, [r4, #0]
 8008e7e:	b103      	cbz	r3, 8008e82 <_read_r+0x1e>
 8008e80:	602b      	str	r3, [r5, #0]
 8008e82:	bd38      	pop	{r3, r4, r5, pc}
 8008e84:	200007d0 	.word	0x200007d0

08008e88 <__ascii_wctomb>:
 8008e88:	b149      	cbz	r1, 8008e9e <__ascii_wctomb+0x16>
 8008e8a:	2aff      	cmp	r2, #255	; 0xff
 8008e8c:	bf85      	ittet	hi
 8008e8e:	238a      	movhi	r3, #138	; 0x8a
 8008e90:	6003      	strhi	r3, [r0, #0]
 8008e92:	700a      	strbls	r2, [r1, #0]
 8008e94:	f04f 30ff 	movhi.w	r0, #4294967295
 8008e98:	bf98      	it	ls
 8008e9a:	2001      	movls	r0, #1
 8008e9c:	4770      	bx	lr
 8008e9e:	4608      	mov	r0, r1
 8008ea0:	4770      	bx	lr
	...

08008ea4 <asin>:
 8008ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ea6:	ed2d 8b02 	vpush	{d8}
 8008eaa:	4e26      	ldr	r6, [pc, #152]	; (8008f44 <asin+0xa0>)
 8008eac:	b08b      	sub	sp, #44	; 0x2c
 8008eae:	ec55 4b10 	vmov	r4, r5, d0
 8008eb2:	f000 f8ad 	bl	8009010 <__ieee754_asin>
 8008eb6:	f996 3000 	ldrsb.w	r3, [r6]
 8008eba:	eeb0 8a40 	vmov.f32	s16, s0
 8008ebe:	eef0 8a60 	vmov.f32	s17, s1
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	d036      	beq.n	8008f34 <asin+0x90>
 8008ec6:	4622      	mov	r2, r4
 8008ec8:	462b      	mov	r3, r5
 8008eca:	4620      	mov	r0, r4
 8008ecc:	4629      	mov	r1, r5
 8008ece:	f7f7 fe3d 	bl	8000b4c <__aeabi_dcmpun>
 8008ed2:	4607      	mov	r7, r0
 8008ed4:	bb70      	cbnz	r0, 8008f34 <asin+0x90>
 8008ed6:	ec45 4b10 	vmov	d0, r4, r5
 8008eda:	f000 fdd9 	bl	8009a90 <fabs>
 8008ede:	2200      	movs	r2, #0
 8008ee0:	4b19      	ldr	r3, [pc, #100]	; (8008f48 <asin+0xa4>)
 8008ee2:	ec51 0b10 	vmov	r0, r1, d0
 8008ee6:	f7f7 fe27 	bl	8000b38 <__aeabi_dcmpgt>
 8008eea:	b318      	cbz	r0, 8008f34 <asin+0x90>
 8008eec:	2301      	movs	r3, #1
 8008eee:	9300      	str	r3, [sp, #0]
 8008ef0:	4816      	ldr	r0, [pc, #88]	; (8008f4c <asin+0xa8>)
 8008ef2:	4b17      	ldr	r3, [pc, #92]	; (8008f50 <asin+0xac>)
 8008ef4:	9301      	str	r3, [sp, #4]
 8008ef6:	9708      	str	r7, [sp, #32]
 8008ef8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008efc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008f00:	f000 fdd2 	bl	8009aa8 <nan>
 8008f04:	f996 3000 	ldrsb.w	r3, [r6]
 8008f08:	2b02      	cmp	r3, #2
 8008f0a:	ed8d 0b06 	vstr	d0, [sp, #24]
 8008f0e:	d104      	bne.n	8008f1a <asin+0x76>
 8008f10:	f7fd fb56 	bl	80065c0 <__errno>
 8008f14:	2321      	movs	r3, #33	; 0x21
 8008f16:	6003      	str	r3, [r0, #0]
 8008f18:	e004      	b.n	8008f24 <asin+0x80>
 8008f1a:	4668      	mov	r0, sp
 8008f1c:	f000 fdc1 	bl	8009aa2 <matherr>
 8008f20:	2800      	cmp	r0, #0
 8008f22:	d0f5      	beq.n	8008f10 <asin+0x6c>
 8008f24:	9b08      	ldr	r3, [sp, #32]
 8008f26:	b11b      	cbz	r3, 8008f30 <asin+0x8c>
 8008f28:	f7fd fb4a 	bl	80065c0 <__errno>
 8008f2c:	9b08      	ldr	r3, [sp, #32]
 8008f2e:	6003      	str	r3, [r0, #0]
 8008f30:	ed9d 8b06 	vldr	d8, [sp, #24]
 8008f34:	eeb0 0a48 	vmov.f32	s0, s16
 8008f38:	eef0 0a68 	vmov.f32	s1, s17
 8008f3c:	b00b      	add	sp, #44	; 0x2c
 8008f3e:	ecbd 8b02 	vpop	{d8}
 8008f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f44:	200001f0 	.word	0x200001f0
 8008f48:	3ff00000 	.word	0x3ff00000
 8008f4c:	08009ce9 	.word	0x08009ce9
 8008f50:	08009e00 	.word	0x08009e00

08008f54 <atan2>:
 8008f54:	f000 ba6c 	b.w	8009430 <__ieee754_atan2>

08008f58 <sqrt>:
 8008f58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f5c:	ed2d 8b02 	vpush	{d8}
 8008f60:	b08b      	sub	sp, #44	; 0x2c
 8008f62:	ec55 4b10 	vmov	r4, r5, d0
 8008f66:	f000 fb41 	bl	80095ec <__ieee754_sqrt>
 8008f6a:	4b26      	ldr	r3, [pc, #152]	; (8009004 <sqrt+0xac>)
 8008f6c:	eeb0 8a40 	vmov.f32	s16, s0
 8008f70:	eef0 8a60 	vmov.f32	s17, s1
 8008f74:	f993 6000 	ldrsb.w	r6, [r3]
 8008f78:	1c73      	adds	r3, r6, #1
 8008f7a:	d02a      	beq.n	8008fd2 <sqrt+0x7a>
 8008f7c:	4622      	mov	r2, r4
 8008f7e:	462b      	mov	r3, r5
 8008f80:	4620      	mov	r0, r4
 8008f82:	4629      	mov	r1, r5
 8008f84:	f7f7 fde2 	bl	8000b4c <__aeabi_dcmpun>
 8008f88:	4607      	mov	r7, r0
 8008f8a:	bb10      	cbnz	r0, 8008fd2 <sqrt+0x7a>
 8008f8c:	f04f 0800 	mov.w	r8, #0
 8008f90:	f04f 0900 	mov.w	r9, #0
 8008f94:	4642      	mov	r2, r8
 8008f96:	464b      	mov	r3, r9
 8008f98:	4620      	mov	r0, r4
 8008f9a:	4629      	mov	r1, r5
 8008f9c:	f7f7 fdae 	bl	8000afc <__aeabi_dcmplt>
 8008fa0:	b1b8      	cbz	r0, 8008fd2 <sqrt+0x7a>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	9300      	str	r3, [sp, #0]
 8008fa6:	4b18      	ldr	r3, [pc, #96]	; (8009008 <sqrt+0xb0>)
 8008fa8:	9301      	str	r3, [sp, #4]
 8008faa:	9708      	str	r7, [sp, #32]
 8008fac:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008fb0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008fb4:	b9b6      	cbnz	r6, 8008fe4 <sqrt+0x8c>
 8008fb6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008fba:	4668      	mov	r0, sp
 8008fbc:	f000 fd71 	bl	8009aa2 <matherr>
 8008fc0:	b1d0      	cbz	r0, 8008ff8 <sqrt+0xa0>
 8008fc2:	9b08      	ldr	r3, [sp, #32]
 8008fc4:	b11b      	cbz	r3, 8008fce <sqrt+0x76>
 8008fc6:	f7fd fafb 	bl	80065c0 <__errno>
 8008fca:	9b08      	ldr	r3, [sp, #32]
 8008fcc:	6003      	str	r3, [r0, #0]
 8008fce:	ed9d 8b06 	vldr	d8, [sp, #24]
 8008fd2:	eeb0 0a48 	vmov.f32	s0, s16
 8008fd6:	eef0 0a68 	vmov.f32	s1, s17
 8008fda:	b00b      	add	sp, #44	; 0x2c
 8008fdc:	ecbd 8b02 	vpop	{d8}
 8008fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fe4:	4642      	mov	r2, r8
 8008fe6:	464b      	mov	r3, r9
 8008fe8:	4640      	mov	r0, r8
 8008fea:	4649      	mov	r1, r9
 8008fec:	f7f7 fc3e 	bl	800086c <__aeabi_ddiv>
 8008ff0:	2e02      	cmp	r6, #2
 8008ff2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008ff6:	d1e0      	bne.n	8008fba <sqrt+0x62>
 8008ff8:	f7fd fae2 	bl	80065c0 <__errno>
 8008ffc:	2321      	movs	r3, #33	; 0x21
 8008ffe:	6003      	str	r3, [r0, #0]
 8009000:	e7df      	b.n	8008fc2 <sqrt+0x6a>
 8009002:	bf00      	nop
 8009004:	200001f0 	.word	0x200001f0
 8009008:	08009e05 	.word	0x08009e05
 800900c:	00000000 	.word	0x00000000

08009010 <__ieee754_asin>:
 8009010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009014:	ec55 4b10 	vmov	r4, r5, d0
 8009018:	4bcb      	ldr	r3, [pc, #812]	; (8009348 <__ieee754_asin+0x338>)
 800901a:	b087      	sub	sp, #28
 800901c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8009020:	429f      	cmp	r7, r3
 8009022:	9501      	str	r5, [sp, #4]
 8009024:	dd31      	ble.n	800908a <__ieee754_asin+0x7a>
 8009026:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 800902a:	ee10 3a10 	vmov	r3, s0
 800902e:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 8009032:	433b      	orrs	r3, r7
 8009034:	d117      	bne.n	8009066 <__ieee754_asin+0x56>
 8009036:	a3aa      	add	r3, pc, #680	; (adr r3, 80092e0 <__ieee754_asin+0x2d0>)
 8009038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903c:	ee10 0a10 	vmov	r0, s0
 8009040:	4629      	mov	r1, r5
 8009042:	f7f7 fae9 	bl	8000618 <__aeabi_dmul>
 8009046:	a3a8      	add	r3, pc, #672	; (adr r3, 80092e8 <__ieee754_asin+0x2d8>)
 8009048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904c:	4606      	mov	r6, r0
 800904e:	460f      	mov	r7, r1
 8009050:	4620      	mov	r0, r4
 8009052:	4629      	mov	r1, r5
 8009054:	f7f7 fae0 	bl	8000618 <__aeabi_dmul>
 8009058:	4602      	mov	r2, r0
 800905a:	460b      	mov	r3, r1
 800905c:	4630      	mov	r0, r6
 800905e:	4639      	mov	r1, r7
 8009060:	f7f7 f924 	bl	80002ac <__adddf3>
 8009064:	e00a      	b.n	800907c <__ieee754_asin+0x6c>
 8009066:	ee10 2a10 	vmov	r2, s0
 800906a:	462b      	mov	r3, r5
 800906c:	4620      	mov	r0, r4
 800906e:	4629      	mov	r1, r5
 8009070:	f7f7 f91a 	bl	80002a8 <__aeabi_dsub>
 8009074:	4602      	mov	r2, r0
 8009076:	460b      	mov	r3, r1
 8009078:	f7f7 fbf8 	bl	800086c <__aeabi_ddiv>
 800907c:	4604      	mov	r4, r0
 800907e:	460d      	mov	r5, r1
 8009080:	ec45 4b10 	vmov	d0, r4, r5
 8009084:	b007      	add	sp, #28
 8009086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800908a:	4bb0      	ldr	r3, [pc, #704]	; (800934c <__ieee754_asin+0x33c>)
 800908c:	429f      	cmp	r7, r3
 800908e:	dc11      	bgt.n	80090b4 <__ieee754_asin+0xa4>
 8009090:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8009094:	f280 80ae 	bge.w	80091f4 <__ieee754_asin+0x1e4>
 8009098:	a395      	add	r3, pc, #596	; (adr r3, 80092f0 <__ieee754_asin+0x2e0>)
 800909a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909e:	ee10 0a10 	vmov	r0, s0
 80090a2:	4629      	mov	r1, r5
 80090a4:	f7f7 f902 	bl	80002ac <__adddf3>
 80090a8:	2200      	movs	r2, #0
 80090aa:	4ba9      	ldr	r3, [pc, #676]	; (8009350 <__ieee754_asin+0x340>)
 80090ac:	f7f7 fd44 	bl	8000b38 <__aeabi_dcmpgt>
 80090b0:	2800      	cmp	r0, #0
 80090b2:	d1e5      	bne.n	8009080 <__ieee754_asin+0x70>
 80090b4:	ec45 4b10 	vmov	d0, r4, r5
 80090b8:	f000 fcea 	bl	8009a90 <fabs>
 80090bc:	2000      	movs	r0, #0
 80090be:	ec53 2b10 	vmov	r2, r3, d0
 80090c2:	49a3      	ldr	r1, [pc, #652]	; (8009350 <__ieee754_asin+0x340>)
 80090c4:	f7f7 f8f0 	bl	80002a8 <__aeabi_dsub>
 80090c8:	2200      	movs	r2, #0
 80090ca:	4ba2      	ldr	r3, [pc, #648]	; (8009354 <__ieee754_asin+0x344>)
 80090cc:	f7f7 faa4 	bl	8000618 <__aeabi_dmul>
 80090d0:	a389      	add	r3, pc, #548	; (adr r3, 80092f8 <__ieee754_asin+0x2e8>)
 80090d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d6:	4604      	mov	r4, r0
 80090d8:	460d      	mov	r5, r1
 80090da:	f7f7 fa9d 	bl	8000618 <__aeabi_dmul>
 80090de:	a388      	add	r3, pc, #544	; (adr r3, 8009300 <__ieee754_asin+0x2f0>)
 80090e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e4:	f7f7 f8e2 	bl	80002ac <__adddf3>
 80090e8:	4622      	mov	r2, r4
 80090ea:	462b      	mov	r3, r5
 80090ec:	f7f7 fa94 	bl	8000618 <__aeabi_dmul>
 80090f0:	a385      	add	r3, pc, #532	; (adr r3, 8009308 <__ieee754_asin+0x2f8>)
 80090f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f6:	f7f7 f8d7 	bl	80002a8 <__aeabi_dsub>
 80090fa:	4622      	mov	r2, r4
 80090fc:	462b      	mov	r3, r5
 80090fe:	f7f7 fa8b 	bl	8000618 <__aeabi_dmul>
 8009102:	a383      	add	r3, pc, #524	; (adr r3, 8009310 <__ieee754_asin+0x300>)
 8009104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009108:	f7f7 f8d0 	bl	80002ac <__adddf3>
 800910c:	4622      	mov	r2, r4
 800910e:	462b      	mov	r3, r5
 8009110:	f7f7 fa82 	bl	8000618 <__aeabi_dmul>
 8009114:	a380      	add	r3, pc, #512	; (adr r3, 8009318 <__ieee754_asin+0x308>)
 8009116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911a:	f7f7 f8c5 	bl	80002a8 <__aeabi_dsub>
 800911e:	4622      	mov	r2, r4
 8009120:	462b      	mov	r3, r5
 8009122:	f7f7 fa79 	bl	8000618 <__aeabi_dmul>
 8009126:	a37e      	add	r3, pc, #504	; (adr r3, 8009320 <__ieee754_asin+0x310>)
 8009128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912c:	f7f7 f8be 	bl	80002ac <__adddf3>
 8009130:	4622      	mov	r2, r4
 8009132:	462b      	mov	r3, r5
 8009134:	f7f7 fa70 	bl	8000618 <__aeabi_dmul>
 8009138:	a37b      	add	r3, pc, #492	; (adr r3, 8009328 <__ieee754_asin+0x318>)
 800913a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913e:	4680      	mov	r8, r0
 8009140:	4689      	mov	r9, r1
 8009142:	4620      	mov	r0, r4
 8009144:	4629      	mov	r1, r5
 8009146:	f7f7 fa67 	bl	8000618 <__aeabi_dmul>
 800914a:	a379      	add	r3, pc, #484	; (adr r3, 8009330 <__ieee754_asin+0x320>)
 800914c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009150:	f7f7 f8aa 	bl	80002a8 <__aeabi_dsub>
 8009154:	4622      	mov	r2, r4
 8009156:	462b      	mov	r3, r5
 8009158:	f7f7 fa5e 	bl	8000618 <__aeabi_dmul>
 800915c:	a376      	add	r3, pc, #472	; (adr r3, 8009338 <__ieee754_asin+0x328>)
 800915e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009162:	f7f7 f8a3 	bl	80002ac <__adddf3>
 8009166:	4622      	mov	r2, r4
 8009168:	462b      	mov	r3, r5
 800916a:	f7f7 fa55 	bl	8000618 <__aeabi_dmul>
 800916e:	a374      	add	r3, pc, #464	; (adr r3, 8009340 <__ieee754_asin+0x330>)
 8009170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009174:	f7f7 f898 	bl	80002a8 <__aeabi_dsub>
 8009178:	4622      	mov	r2, r4
 800917a:	462b      	mov	r3, r5
 800917c:	f7f7 fa4c 	bl	8000618 <__aeabi_dmul>
 8009180:	4b73      	ldr	r3, [pc, #460]	; (8009350 <__ieee754_asin+0x340>)
 8009182:	2200      	movs	r2, #0
 8009184:	f7f7 f892 	bl	80002ac <__adddf3>
 8009188:	ec45 4b10 	vmov	d0, r4, r5
 800918c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009190:	f000 fa2c 	bl	80095ec <__ieee754_sqrt>
 8009194:	4b70      	ldr	r3, [pc, #448]	; (8009358 <__ieee754_asin+0x348>)
 8009196:	429f      	cmp	r7, r3
 8009198:	ec5b ab10 	vmov	sl, fp, d0
 800919c:	f340 80de 	ble.w	800935c <__ieee754_asin+0x34c>
 80091a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091a4:	4640      	mov	r0, r8
 80091a6:	4649      	mov	r1, r9
 80091a8:	f7f7 fb60 	bl	800086c <__aeabi_ddiv>
 80091ac:	4652      	mov	r2, sl
 80091ae:	465b      	mov	r3, fp
 80091b0:	f7f7 fa32 	bl	8000618 <__aeabi_dmul>
 80091b4:	4652      	mov	r2, sl
 80091b6:	465b      	mov	r3, fp
 80091b8:	f7f7 f878 	bl	80002ac <__adddf3>
 80091bc:	4602      	mov	r2, r0
 80091be:	460b      	mov	r3, r1
 80091c0:	f7f7 f874 	bl	80002ac <__adddf3>
 80091c4:	a348      	add	r3, pc, #288	; (adr r3, 80092e8 <__ieee754_asin+0x2d8>)
 80091c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ca:	f7f7 f86d 	bl	80002a8 <__aeabi_dsub>
 80091ce:	4602      	mov	r2, r0
 80091d0:	460b      	mov	r3, r1
 80091d2:	a143      	add	r1, pc, #268	; (adr r1, 80092e0 <__ieee754_asin+0x2d0>)
 80091d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091d8:	f7f7 f866 	bl	80002a8 <__aeabi_dsub>
 80091dc:	9b01      	ldr	r3, [sp, #4]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	bfdc      	itt	le
 80091e2:	4602      	movle	r2, r0
 80091e4:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80091e8:	4604      	mov	r4, r0
 80091ea:	460d      	mov	r5, r1
 80091ec:	bfdc      	itt	le
 80091ee:	4614      	movle	r4, r2
 80091f0:	461d      	movle	r5, r3
 80091f2:	e745      	b.n	8009080 <__ieee754_asin+0x70>
 80091f4:	ee10 2a10 	vmov	r2, s0
 80091f8:	ee10 0a10 	vmov	r0, s0
 80091fc:	462b      	mov	r3, r5
 80091fe:	4629      	mov	r1, r5
 8009200:	f7f7 fa0a 	bl	8000618 <__aeabi_dmul>
 8009204:	a33c      	add	r3, pc, #240	; (adr r3, 80092f8 <__ieee754_asin+0x2e8>)
 8009206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920a:	4606      	mov	r6, r0
 800920c:	460f      	mov	r7, r1
 800920e:	f7f7 fa03 	bl	8000618 <__aeabi_dmul>
 8009212:	a33b      	add	r3, pc, #236	; (adr r3, 8009300 <__ieee754_asin+0x2f0>)
 8009214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009218:	f7f7 f848 	bl	80002ac <__adddf3>
 800921c:	4632      	mov	r2, r6
 800921e:	463b      	mov	r3, r7
 8009220:	f7f7 f9fa 	bl	8000618 <__aeabi_dmul>
 8009224:	a338      	add	r3, pc, #224	; (adr r3, 8009308 <__ieee754_asin+0x2f8>)
 8009226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922a:	f7f7 f83d 	bl	80002a8 <__aeabi_dsub>
 800922e:	4632      	mov	r2, r6
 8009230:	463b      	mov	r3, r7
 8009232:	f7f7 f9f1 	bl	8000618 <__aeabi_dmul>
 8009236:	a336      	add	r3, pc, #216	; (adr r3, 8009310 <__ieee754_asin+0x300>)
 8009238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923c:	f7f7 f836 	bl	80002ac <__adddf3>
 8009240:	4632      	mov	r2, r6
 8009242:	463b      	mov	r3, r7
 8009244:	f7f7 f9e8 	bl	8000618 <__aeabi_dmul>
 8009248:	a333      	add	r3, pc, #204	; (adr r3, 8009318 <__ieee754_asin+0x308>)
 800924a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924e:	f7f7 f82b 	bl	80002a8 <__aeabi_dsub>
 8009252:	4632      	mov	r2, r6
 8009254:	463b      	mov	r3, r7
 8009256:	f7f7 f9df 	bl	8000618 <__aeabi_dmul>
 800925a:	a331      	add	r3, pc, #196	; (adr r3, 8009320 <__ieee754_asin+0x310>)
 800925c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009260:	f7f7 f824 	bl	80002ac <__adddf3>
 8009264:	4632      	mov	r2, r6
 8009266:	463b      	mov	r3, r7
 8009268:	f7f7 f9d6 	bl	8000618 <__aeabi_dmul>
 800926c:	a32e      	add	r3, pc, #184	; (adr r3, 8009328 <__ieee754_asin+0x318>)
 800926e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009272:	4680      	mov	r8, r0
 8009274:	4689      	mov	r9, r1
 8009276:	4630      	mov	r0, r6
 8009278:	4639      	mov	r1, r7
 800927a:	f7f7 f9cd 	bl	8000618 <__aeabi_dmul>
 800927e:	a32c      	add	r3, pc, #176	; (adr r3, 8009330 <__ieee754_asin+0x320>)
 8009280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009284:	f7f7 f810 	bl	80002a8 <__aeabi_dsub>
 8009288:	4632      	mov	r2, r6
 800928a:	463b      	mov	r3, r7
 800928c:	f7f7 f9c4 	bl	8000618 <__aeabi_dmul>
 8009290:	a329      	add	r3, pc, #164	; (adr r3, 8009338 <__ieee754_asin+0x328>)
 8009292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009296:	f7f7 f809 	bl	80002ac <__adddf3>
 800929a:	4632      	mov	r2, r6
 800929c:	463b      	mov	r3, r7
 800929e:	f7f7 f9bb 	bl	8000618 <__aeabi_dmul>
 80092a2:	a327      	add	r3, pc, #156	; (adr r3, 8009340 <__ieee754_asin+0x330>)
 80092a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a8:	f7f6 fffe 	bl	80002a8 <__aeabi_dsub>
 80092ac:	4632      	mov	r2, r6
 80092ae:	463b      	mov	r3, r7
 80092b0:	f7f7 f9b2 	bl	8000618 <__aeabi_dmul>
 80092b4:	2200      	movs	r2, #0
 80092b6:	4b26      	ldr	r3, [pc, #152]	; (8009350 <__ieee754_asin+0x340>)
 80092b8:	f7f6 fff8 	bl	80002ac <__adddf3>
 80092bc:	4602      	mov	r2, r0
 80092be:	460b      	mov	r3, r1
 80092c0:	4640      	mov	r0, r8
 80092c2:	4649      	mov	r1, r9
 80092c4:	f7f7 fad2 	bl	800086c <__aeabi_ddiv>
 80092c8:	4622      	mov	r2, r4
 80092ca:	462b      	mov	r3, r5
 80092cc:	f7f7 f9a4 	bl	8000618 <__aeabi_dmul>
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	4620      	mov	r0, r4
 80092d6:	4629      	mov	r1, r5
 80092d8:	e6c2      	b.n	8009060 <__ieee754_asin+0x50>
 80092da:	bf00      	nop
 80092dc:	f3af 8000 	nop.w
 80092e0:	54442d18 	.word	0x54442d18
 80092e4:	3ff921fb 	.word	0x3ff921fb
 80092e8:	33145c07 	.word	0x33145c07
 80092ec:	3c91a626 	.word	0x3c91a626
 80092f0:	8800759c 	.word	0x8800759c
 80092f4:	7e37e43c 	.word	0x7e37e43c
 80092f8:	0dfdf709 	.word	0x0dfdf709
 80092fc:	3f023de1 	.word	0x3f023de1
 8009300:	7501b288 	.word	0x7501b288
 8009304:	3f49efe0 	.word	0x3f49efe0
 8009308:	b5688f3b 	.word	0xb5688f3b
 800930c:	3fa48228 	.word	0x3fa48228
 8009310:	0e884455 	.word	0x0e884455
 8009314:	3fc9c155 	.word	0x3fc9c155
 8009318:	03eb6f7d 	.word	0x03eb6f7d
 800931c:	3fd4d612 	.word	0x3fd4d612
 8009320:	55555555 	.word	0x55555555
 8009324:	3fc55555 	.word	0x3fc55555
 8009328:	b12e9282 	.word	0xb12e9282
 800932c:	3fb3b8c5 	.word	0x3fb3b8c5
 8009330:	1b8d0159 	.word	0x1b8d0159
 8009334:	3fe6066c 	.word	0x3fe6066c
 8009338:	9c598ac8 	.word	0x9c598ac8
 800933c:	40002ae5 	.word	0x40002ae5
 8009340:	1c8a2d4b 	.word	0x1c8a2d4b
 8009344:	40033a27 	.word	0x40033a27
 8009348:	3fefffff 	.word	0x3fefffff
 800934c:	3fdfffff 	.word	0x3fdfffff
 8009350:	3ff00000 	.word	0x3ff00000
 8009354:	3fe00000 	.word	0x3fe00000
 8009358:	3fef3332 	.word	0x3fef3332
 800935c:	ee10 2a10 	vmov	r2, s0
 8009360:	ee10 0a10 	vmov	r0, s0
 8009364:	465b      	mov	r3, fp
 8009366:	4659      	mov	r1, fp
 8009368:	f7f6 ffa0 	bl	80002ac <__adddf3>
 800936c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009370:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009374:	4640      	mov	r0, r8
 8009376:	4649      	mov	r1, r9
 8009378:	f7f7 fa78 	bl	800086c <__aeabi_ddiv>
 800937c:	4602      	mov	r2, r0
 800937e:	460b      	mov	r3, r1
 8009380:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009384:	f7f7 f948 	bl	8000618 <__aeabi_dmul>
 8009388:	2600      	movs	r6, #0
 800938a:	4680      	mov	r8, r0
 800938c:	4689      	mov	r9, r1
 800938e:	4632      	mov	r2, r6
 8009390:	465b      	mov	r3, fp
 8009392:	4630      	mov	r0, r6
 8009394:	4659      	mov	r1, fp
 8009396:	f7f7 f93f 	bl	8000618 <__aeabi_dmul>
 800939a:	4602      	mov	r2, r0
 800939c:	460b      	mov	r3, r1
 800939e:	4620      	mov	r0, r4
 80093a0:	4629      	mov	r1, r5
 80093a2:	f7f6 ff81 	bl	80002a8 <__aeabi_dsub>
 80093a6:	4632      	mov	r2, r6
 80093a8:	4604      	mov	r4, r0
 80093aa:	460d      	mov	r5, r1
 80093ac:	465b      	mov	r3, fp
 80093ae:	4650      	mov	r0, sl
 80093b0:	4659      	mov	r1, fp
 80093b2:	f7f6 ff7b 	bl	80002ac <__adddf3>
 80093b6:	4602      	mov	r2, r0
 80093b8:	460b      	mov	r3, r1
 80093ba:	4620      	mov	r0, r4
 80093bc:	4629      	mov	r1, r5
 80093be:	f7f7 fa55 	bl	800086c <__aeabi_ddiv>
 80093c2:	4602      	mov	r2, r0
 80093c4:	460b      	mov	r3, r1
 80093c6:	f7f6 ff71 	bl	80002ac <__adddf3>
 80093ca:	4602      	mov	r2, r0
 80093cc:	460b      	mov	r3, r1
 80093ce:	a114      	add	r1, pc, #80	; (adr r1, 8009420 <__ieee754_asin+0x410>)
 80093d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093d4:	f7f6 ff68 	bl	80002a8 <__aeabi_dsub>
 80093d8:	4602      	mov	r2, r0
 80093da:	460b      	mov	r3, r1
 80093dc:	4640      	mov	r0, r8
 80093de:	4649      	mov	r1, r9
 80093e0:	f7f6 ff62 	bl	80002a8 <__aeabi_dsub>
 80093e4:	465f      	mov	r7, fp
 80093e6:	4604      	mov	r4, r0
 80093e8:	460d      	mov	r5, r1
 80093ea:	4632      	mov	r2, r6
 80093ec:	465b      	mov	r3, fp
 80093ee:	4630      	mov	r0, r6
 80093f0:	4639      	mov	r1, r7
 80093f2:	f7f6 ff5b 	bl	80002ac <__adddf3>
 80093f6:	4602      	mov	r2, r0
 80093f8:	460b      	mov	r3, r1
 80093fa:	a10b      	add	r1, pc, #44	; (adr r1, 8009428 <__ieee754_asin+0x418>)
 80093fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009400:	f7f6 ff52 	bl	80002a8 <__aeabi_dsub>
 8009404:	4602      	mov	r2, r0
 8009406:	460b      	mov	r3, r1
 8009408:	4620      	mov	r0, r4
 800940a:	4629      	mov	r1, r5
 800940c:	f7f6 ff4c 	bl	80002a8 <__aeabi_dsub>
 8009410:	4602      	mov	r2, r0
 8009412:	460b      	mov	r3, r1
 8009414:	a104      	add	r1, pc, #16	; (adr r1, 8009428 <__ieee754_asin+0x418>)
 8009416:	e9d1 0100 	ldrd	r0, r1, [r1]
 800941a:	e6dd      	b.n	80091d8 <__ieee754_asin+0x1c8>
 800941c:	f3af 8000 	nop.w
 8009420:	33145c07 	.word	0x33145c07
 8009424:	3c91a626 	.word	0x3c91a626
 8009428:	54442d18 	.word	0x54442d18
 800942c:	3fe921fb 	.word	0x3fe921fb

08009430 <__ieee754_atan2>:
 8009430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009434:	ec57 6b11 	vmov	r6, r7, d1
 8009438:	4273      	negs	r3, r6
 800943a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800943e:	4333      	orrs	r3, r6
 8009440:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80095e8 <__ieee754_atan2+0x1b8>
 8009444:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009448:	4573      	cmp	r3, lr
 800944a:	ec51 0b10 	vmov	r0, r1, d0
 800944e:	ee11 8a10 	vmov	r8, s2
 8009452:	d80a      	bhi.n	800946a <__ieee754_atan2+0x3a>
 8009454:	4244      	negs	r4, r0
 8009456:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800945a:	4304      	orrs	r4, r0
 800945c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009460:	4574      	cmp	r4, lr
 8009462:	468c      	mov	ip, r1
 8009464:	ee10 9a10 	vmov	r9, s0
 8009468:	d907      	bls.n	800947a <__ieee754_atan2+0x4a>
 800946a:	4632      	mov	r2, r6
 800946c:	463b      	mov	r3, r7
 800946e:	f7f6 ff1d 	bl	80002ac <__adddf3>
 8009472:	ec41 0b10 	vmov	d0, r0, r1
 8009476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800947a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800947e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009482:	4334      	orrs	r4, r6
 8009484:	d103      	bne.n	800948e <__ieee754_atan2+0x5e>
 8009486:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800948a:	f000 b961 	b.w	8009750 <atan>
 800948e:	17bc      	asrs	r4, r7, #30
 8009490:	f004 0402 	and.w	r4, r4, #2
 8009494:	ea53 0909 	orrs.w	r9, r3, r9
 8009498:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800949c:	d107      	bne.n	80094ae <__ieee754_atan2+0x7e>
 800949e:	2c02      	cmp	r4, #2
 80094a0:	d073      	beq.n	800958a <__ieee754_atan2+0x15a>
 80094a2:	2c03      	cmp	r4, #3
 80094a4:	d1e5      	bne.n	8009472 <__ieee754_atan2+0x42>
 80094a6:	a13e      	add	r1, pc, #248	; (adr r1, 80095a0 <__ieee754_atan2+0x170>)
 80094a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094ac:	e7e1      	b.n	8009472 <__ieee754_atan2+0x42>
 80094ae:	ea52 0808 	orrs.w	r8, r2, r8
 80094b2:	d106      	bne.n	80094c2 <__ieee754_atan2+0x92>
 80094b4:	f1bc 0f00 	cmp.w	ip, #0
 80094b8:	da6b      	bge.n	8009592 <__ieee754_atan2+0x162>
 80094ba:	a13b      	add	r1, pc, #236	; (adr r1, 80095a8 <__ieee754_atan2+0x178>)
 80094bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094c0:	e7d7      	b.n	8009472 <__ieee754_atan2+0x42>
 80094c2:	4572      	cmp	r2, lr
 80094c4:	d120      	bne.n	8009508 <__ieee754_atan2+0xd8>
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d111      	bne.n	80094ee <__ieee754_atan2+0xbe>
 80094ca:	2c02      	cmp	r4, #2
 80094cc:	d007      	beq.n	80094de <__ieee754_atan2+0xae>
 80094ce:	2c03      	cmp	r4, #3
 80094d0:	d009      	beq.n	80094e6 <__ieee754_atan2+0xb6>
 80094d2:	2c01      	cmp	r4, #1
 80094d4:	d155      	bne.n	8009582 <__ieee754_atan2+0x152>
 80094d6:	a136      	add	r1, pc, #216	; (adr r1, 80095b0 <__ieee754_atan2+0x180>)
 80094d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094dc:	e7c9      	b.n	8009472 <__ieee754_atan2+0x42>
 80094de:	a136      	add	r1, pc, #216	; (adr r1, 80095b8 <__ieee754_atan2+0x188>)
 80094e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094e4:	e7c5      	b.n	8009472 <__ieee754_atan2+0x42>
 80094e6:	a136      	add	r1, pc, #216	; (adr r1, 80095c0 <__ieee754_atan2+0x190>)
 80094e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094ec:	e7c1      	b.n	8009472 <__ieee754_atan2+0x42>
 80094ee:	2c02      	cmp	r4, #2
 80094f0:	d04b      	beq.n	800958a <__ieee754_atan2+0x15a>
 80094f2:	2c03      	cmp	r4, #3
 80094f4:	d0d7      	beq.n	80094a6 <__ieee754_atan2+0x76>
 80094f6:	2c01      	cmp	r4, #1
 80094f8:	f04f 0000 	mov.w	r0, #0
 80094fc:	d102      	bne.n	8009504 <__ieee754_atan2+0xd4>
 80094fe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009502:	e7b6      	b.n	8009472 <__ieee754_atan2+0x42>
 8009504:	2100      	movs	r1, #0
 8009506:	e7b4      	b.n	8009472 <__ieee754_atan2+0x42>
 8009508:	4573      	cmp	r3, lr
 800950a:	d0d3      	beq.n	80094b4 <__ieee754_atan2+0x84>
 800950c:	1a9b      	subs	r3, r3, r2
 800950e:	151b      	asrs	r3, r3, #20
 8009510:	2b3c      	cmp	r3, #60	; 0x3c
 8009512:	dc1e      	bgt.n	8009552 <__ieee754_atan2+0x122>
 8009514:	2f00      	cmp	r7, #0
 8009516:	da01      	bge.n	800951c <__ieee754_atan2+0xec>
 8009518:	333c      	adds	r3, #60	; 0x3c
 800951a:	db1e      	blt.n	800955a <__ieee754_atan2+0x12a>
 800951c:	4632      	mov	r2, r6
 800951e:	463b      	mov	r3, r7
 8009520:	f7f7 f9a4 	bl	800086c <__aeabi_ddiv>
 8009524:	ec41 0b10 	vmov	d0, r0, r1
 8009528:	f000 fab2 	bl	8009a90 <fabs>
 800952c:	f000 f910 	bl	8009750 <atan>
 8009530:	ec51 0b10 	vmov	r0, r1, d0
 8009534:	2c01      	cmp	r4, #1
 8009536:	d013      	beq.n	8009560 <__ieee754_atan2+0x130>
 8009538:	2c02      	cmp	r4, #2
 800953a:	d015      	beq.n	8009568 <__ieee754_atan2+0x138>
 800953c:	2c00      	cmp	r4, #0
 800953e:	d098      	beq.n	8009472 <__ieee754_atan2+0x42>
 8009540:	a321      	add	r3, pc, #132	; (adr r3, 80095c8 <__ieee754_atan2+0x198>)
 8009542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009546:	f7f6 feaf 	bl	80002a8 <__aeabi_dsub>
 800954a:	a321      	add	r3, pc, #132	; (adr r3, 80095d0 <__ieee754_atan2+0x1a0>)
 800954c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009550:	e014      	b.n	800957c <__ieee754_atan2+0x14c>
 8009552:	a121      	add	r1, pc, #132	; (adr r1, 80095d8 <__ieee754_atan2+0x1a8>)
 8009554:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009558:	e7ec      	b.n	8009534 <__ieee754_atan2+0x104>
 800955a:	2000      	movs	r0, #0
 800955c:	2100      	movs	r1, #0
 800955e:	e7e9      	b.n	8009534 <__ieee754_atan2+0x104>
 8009560:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009564:	4619      	mov	r1, r3
 8009566:	e784      	b.n	8009472 <__ieee754_atan2+0x42>
 8009568:	a317      	add	r3, pc, #92	; (adr r3, 80095c8 <__ieee754_atan2+0x198>)
 800956a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956e:	f7f6 fe9b 	bl	80002a8 <__aeabi_dsub>
 8009572:	4602      	mov	r2, r0
 8009574:	460b      	mov	r3, r1
 8009576:	a116      	add	r1, pc, #88	; (adr r1, 80095d0 <__ieee754_atan2+0x1a0>)
 8009578:	e9d1 0100 	ldrd	r0, r1, [r1]
 800957c:	f7f6 fe94 	bl	80002a8 <__aeabi_dsub>
 8009580:	e777      	b.n	8009472 <__ieee754_atan2+0x42>
 8009582:	a117      	add	r1, pc, #92	; (adr r1, 80095e0 <__ieee754_atan2+0x1b0>)
 8009584:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009588:	e773      	b.n	8009472 <__ieee754_atan2+0x42>
 800958a:	a111      	add	r1, pc, #68	; (adr r1, 80095d0 <__ieee754_atan2+0x1a0>)
 800958c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009590:	e76f      	b.n	8009472 <__ieee754_atan2+0x42>
 8009592:	a111      	add	r1, pc, #68	; (adr r1, 80095d8 <__ieee754_atan2+0x1a8>)
 8009594:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009598:	e76b      	b.n	8009472 <__ieee754_atan2+0x42>
 800959a:	bf00      	nop
 800959c:	f3af 8000 	nop.w
 80095a0:	54442d18 	.word	0x54442d18
 80095a4:	c00921fb 	.word	0xc00921fb
 80095a8:	54442d18 	.word	0x54442d18
 80095ac:	bff921fb 	.word	0xbff921fb
 80095b0:	54442d18 	.word	0x54442d18
 80095b4:	bfe921fb 	.word	0xbfe921fb
 80095b8:	7f3321d2 	.word	0x7f3321d2
 80095bc:	4002d97c 	.word	0x4002d97c
 80095c0:	7f3321d2 	.word	0x7f3321d2
 80095c4:	c002d97c 	.word	0xc002d97c
 80095c8:	33145c07 	.word	0x33145c07
 80095cc:	3ca1a626 	.word	0x3ca1a626
 80095d0:	54442d18 	.word	0x54442d18
 80095d4:	400921fb 	.word	0x400921fb
 80095d8:	54442d18 	.word	0x54442d18
 80095dc:	3ff921fb 	.word	0x3ff921fb
 80095e0:	54442d18 	.word	0x54442d18
 80095e4:	3fe921fb 	.word	0x3fe921fb
 80095e8:	7ff00000 	.word	0x7ff00000

080095ec <__ieee754_sqrt>:
 80095ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095f0:	4955      	ldr	r1, [pc, #340]	; (8009748 <__ieee754_sqrt+0x15c>)
 80095f2:	ec55 4b10 	vmov	r4, r5, d0
 80095f6:	43a9      	bics	r1, r5
 80095f8:	462b      	mov	r3, r5
 80095fa:	462a      	mov	r2, r5
 80095fc:	d112      	bne.n	8009624 <__ieee754_sqrt+0x38>
 80095fe:	ee10 2a10 	vmov	r2, s0
 8009602:	ee10 0a10 	vmov	r0, s0
 8009606:	4629      	mov	r1, r5
 8009608:	f7f7 f806 	bl	8000618 <__aeabi_dmul>
 800960c:	4602      	mov	r2, r0
 800960e:	460b      	mov	r3, r1
 8009610:	4620      	mov	r0, r4
 8009612:	4629      	mov	r1, r5
 8009614:	f7f6 fe4a 	bl	80002ac <__adddf3>
 8009618:	4604      	mov	r4, r0
 800961a:	460d      	mov	r5, r1
 800961c:	ec45 4b10 	vmov	d0, r4, r5
 8009620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009624:	2d00      	cmp	r5, #0
 8009626:	ee10 0a10 	vmov	r0, s0
 800962a:	4621      	mov	r1, r4
 800962c:	dc0f      	bgt.n	800964e <__ieee754_sqrt+0x62>
 800962e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009632:	4330      	orrs	r0, r6
 8009634:	d0f2      	beq.n	800961c <__ieee754_sqrt+0x30>
 8009636:	b155      	cbz	r5, 800964e <__ieee754_sqrt+0x62>
 8009638:	ee10 2a10 	vmov	r2, s0
 800963c:	4620      	mov	r0, r4
 800963e:	4629      	mov	r1, r5
 8009640:	f7f6 fe32 	bl	80002a8 <__aeabi_dsub>
 8009644:	4602      	mov	r2, r0
 8009646:	460b      	mov	r3, r1
 8009648:	f7f7 f910 	bl	800086c <__aeabi_ddiv>
 800964c:	e7e4      	b.n	8009618 <__ieee754_sqrt+0x2c>
 800964e:	151b      	asrs	r3, r3, #20
 8009650:	d073      	beq.n	800973a <__ieee754_sqrt+0x14e>
 8009652:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009656:	07dd      	lsls	r5, r3, #31
 8009658:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800965c:	bf48      	it	mi
 800965e:	0fc8      	lsrmi	r0, r1, #31
 8009660:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009664:	bf44      	itt	mi
 8009666:	0049      	lslmi	r1, r1, #1
 8009668:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800966c:	2500      	movs	r5, #0
 800966e:	1058      	asrs	r0, r3, #1
 8009670:	0fcb      	lsrs	r3, r1, #31
 8009672:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8009676:	0049      	lsls	r1, r1, #1
 8009678:	2316      	movs	r3, #22
 800967a:	462c      	mov	r4, r5
 800967c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8009680:	19a7      	adds	r7, r4, r6
 8009682:	4297      	cmp	r7, r2
 8009684:	bfde      	ittt	le
 8009686:	19bc      	addle	r4, r7, r6
 8009688:	1bd2      	suble	r2, r2, r7
 800968a:	19ad      	addle	r5, r5, r6
 800968c:	0fcf      	lsrs	r7, r1, #31
 800968e:	3b01      	subs	r3, #1
 8009690:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8009694:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009698:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800969c:	d1f0      	bne.n	8009680 <__ieee754_sqrt+0x94>
 800969e:	f04f 0c20 	mov.w	ip, #32
 80096a2:	469e      	mov	lr, r3
 80096a4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80096a8:	42a2      	cmp	r2, r4
 80096aa:	eb06 070e 	add.w	r7, r6, lr
 80096ae:	dc02      	bgt.n	80096b6 <__ieee754_sqrt+0xca>
 80096b0:	d112      	bne.n	80096d8 <__ieee754_sqrt+0xec>
 80096b2:	428f      	cmp	r7, r1
 80096b4:	d810      	bhi.n	80096d8 <__ieee754_sqrt+0xec>
 80096b6:	2f00      	cmp	r7, #0
 80096b8:	eb07 0e06 	add.w	lr, r7, r6
 80096bc:	da42      	bge.n	8009744 <__ieee754_sqrt+0x158>
 80096be:	f1be 0f00 	cmp.w	lr, #0
 80096c2:	db3f      	blt.n	8009744 <__ieee754_sqrt+0x158>
 80096c4:	f104 0801 	add.w	r8, r4, #1
 80096c8:	1b12      	subs	r2, r2, r4
 80096ca:	428f      	cmp	r7, r1
 80096cc:	bf88      	it	hi
 80096ce:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80096d2:	1bc9      	subs	r1, r1, r7
 80096d4:	4433      	add	r3, r6
 80096d6:	4644      	mov	r4, r8
 80096d8:	0052      	lsls	r2, r2, #1
 80096da:	f1bc 0c01 	subs.w	ip, ip, #1
 80096de:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80096e2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80096e6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80096ea:	d1dd      	bne.n	80096a8 <__ieee754_sqrt+0xbc>
 80096ec:	430a      	orrs	r2, r1
 80096ee:	d006      	beq.n	80096fe <__ieee754_sqrt+0x112>
 80096f0:	1c5c      	adds	r4, r3, #1
 80096f2:	bf13      	iteet	ne
 80096f4:	3301      	addne	r3, #1
 80096f6:	3501      	addeq	r5, #1
 80096f8:	4663      	moveq	r3, ip
 80096fa:	f023 0301 	bicne.w	r3, r3, #1
 80096fe:	106a      	asrs	r2, r5, #1
 8009700:	085b      	lsrs	r3, r3, #1
 8009702:	07e9      	lsls	r1, r5, #31
 8009704:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009708:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800970c:	bf48      	it	mi
 800970e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009712:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8009716:	461c      	mov	r4, r3
 8009718:	e780      	b.n	800961c <__ieee754_sqrt+0x30>
 800971a:	0aca      	lsrs	r2, r1, #11
 800971c:	3815      	subs	r0, #21
 800971e:	0549      	lsls	r1, r1, #21
 8009720:	2a00      	cmp	r2, #0
 8009722:	d0fa      	beq.n	800971a <__ieee754_sqrt+0x12e>
 8009724:	02d6      	lsls	r6, r2, #11
 8009726:	d50a      	bpl.n	800973e <__ieee754_sqrt+0x152>
 8009728:	f1c3 0420 	rsb	r4, r3, #32
 800972c:	fa21 f404 	lsr.w	r4, r1, r4
 8009730:	1e5d      	subs	r5, r3, #1
 8009732:	4099      	lsls	r1, r3
 8009734:	4322      	orrs	r2, r4
 8009736:	1b43      	subs	r3, r0, r5
 8009738:	e78b      	b.n	8009652 <__ieee754_sqrt+0x66>
 800973a:	4618      	mov	r0, r3
 800973c:	e7f0      	b.n	8009720 <__ieee754_sqrt+0x134>
 800973e:	0052      	lsls	r2, r2, #1
 8009740:	3301      	adds	r3, #1
 8009742:	e7ef      	b.n	8009724 <__ieee754_sqrt+0x138>
 8009744:	46a0      	mov	r8, r4
 8009746:	e7bf      	b.n	80096c8 <__ieee754_sqrt+0xdc>
 8009748:	7ff00000 	.word	0x7ff00000
 800974c:	00000000 	.word	0x00000000

08009750 <atan>:
 8009750:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009754:	ec55 4b10 	vmov	r4, r5, d0
 8009758:	4bc3      	ldr	r3, [pc, #780]	; (8009a68 <atan+0x318>)
 800975a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800975e:	429e      	cmp	r6, r3
 8009760:	46ab      	mov	fp, r5
 8009762:	dd18      	ble.n	8009796 <atan+0x46>
 8009764:	4bc1      	ldr	r3, [pc, #772]	; (8009a6c <atan+0x31c>)
 8009766:	429e      	cmp	r6, r3
 8009768:	dc01      	bgt.n	800976e <atan+0x1e>
 800976a:	d109      	bne.n	8009780 <atan+0x30>
 800976c:	b144      	cbz	r4, 8009780 <atan+0x30>
 800976e:	4622      	mov	r2, r4
 8009770:	462b      	mov	r3, r5
 8009772:	4620      	mov	r0, r4
 8009774:	4629      	mov	r1, r5
 8009776:	f7f6 fd99 	bl	80002ac <__adddf3>
 800977a:	4604      	mov	r4, r0
 800977c:	460d      	mov	r5, r1
 800977e:	e006      	b.n	800978e <atan+0x3e>
 8009780:	f1bb 0f00 	cmp.w	fp, #0
 8009784:	f340 8131 	ble.w	80099ea <atan+0x29a>
 8009788:	a59b      	add	r5, pc, #620	; (adr r5, 80099f8 <atan+0x2a8>)
 800978a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800978e:	ec45 4b10 	vmov	d0, r4, r5
 8009792:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009796:	4bb6      	ldr	r3, [pc, #728]	; (8009a70 <atan+0x320>)
 8009798:	429e      	cmp	r6, r3
 800979a:	dc14      	bgt.n	80097c6 <atan+0x76>
 800979c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80097a0:	429e      	cmp	r6, r3
 80097a2:	dc0d      	bgt.n	80097c0 <atan+0x70>
 80097a4:	a396      	add	r3, pc, #600	; (adr r3, 8009a00 <atan+0x2b0>)
 80097a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097aa:	ee10 0a10 	vmov	r0, s0
 80097ae:	4629      	mov	r1, r5
 80097b0:	f7f6 fd7c 	bl	80002ac <__adddf3>
 80097b4:	2200      	movs	r2, #0
 80097b6:	4baf      	ldr	r3, [pc, #700]	; (8009a74 <atan+0x324>)
 80097b8:	f7f7 f9be 	bl	8000b38 <__aeabi_dcmpgt>
 80097bc:	2800      	cmp	r0, #0
 80097be:	d1e6      	bne.n	800978e <atan+0x3e>
 80097c0:	f04f 3aff 	mov.w	sl, #4294967295
 80097c4:	e02b      	b.n	800981e <atan+0xce>
 80097c6:	f000 f963 	bl	8009a90 <fabs>
 80097ca:	4bab      	ldr	r3, [pc, #684]	; (8009a78 <atan+0x328>)
 80097cc:	429e      	cmp	r6, r3
 80097ce:	ec55 4b10 	vmov	r4, r5, d0
 80097d2:	f300 80bf 	bgt.w	8009954 <atan+0x204>
 80097d6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80097da:	429e      	cmp	r6, r3
 80097dc:	f300 80a0 	bgt.w	8009920 <atan+0x1d0>
 80097e0:	ee10 2a10 	vmov	r2, s0
 80097e4:	ee10 0a10 	vmov	r0, s0
 80097e8:	462b      	mov	r3, r5
 80097ea:	4629      	mov	r1, r5
 80097ec:	f7f6 fd5e 	bl	80002ac <__adddf3>
 80097f0:	2200      	movs	r2, #0
 80097f2:	4ba0      	ldr	r3, [pc, #640]	; (8009a74 <atan+0x324>)
 80097f4:	f7f6 fd58 	bl	80002a8 <__aeabi_dsub>
 80097f8:	2200      	movs	r2, #0
 80097fa:	4606      	mov	r6, r0
 80097fc:	460f      	mov	r7, r1
 80097fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009802:	4620      	mov	r0, r4
 8009804:	4629      	mov	r1, r5
 8009806:	f7f6 fd51 	bl	80002ac <__adddf3>
 800980a:	4602      	mov	r2, r0
 800980c:	460b      	mov	r3, r1
 800980e:	4630      	mov	r0, r6
 8009810:	4639      	mov	r1, r7
 8009812:	f7f7 f82b 	bl	800086c <__aeabi_ddiv>
 8009816:	f04f 0a00 	mov.w	sl, #0
 800981a:	4604      	mov	r4, r0
 800981c:	460d      	mov	r5, r1
 800981e:	4622      	mov	r2, r4
 8009820:	462b      	mov	r3, r5
 8009822:	4620      	mov	r0, r4
 8009824:	4629      	mov	r1, r5
 8009826:	f7f6 fef7 	bl	8000618 <__aeabi_dmul>
 800982a:	4602      	mov	r2, r0
 800982c:	460b      	mov	r3, r1
 800982e:	4680      	mov	r8, r0
 8009830:	4689      	mov	r9, r1
 8009832:	f7f6 fef1 	bl	8000618 <__aeabi_dmul>
 8009836:	a374      	add	r3, pc, #464	; (adr r3, 8009a08 <atan+0x2b8>)
 8009838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983c:	4606      	mov	r6, r0
 800983e:	460f      	mov	r7, r1
 8009840:	f7f6 feea 	bl	8000618 <__aeabi_dmul>
 8009844:	a372      	add	r3, pc, #456	; (adr r3, 8009a10 <atan+0x2c0>)
 8009846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984a:	f7f6 fd2f 	bl	80002ac <__adddf3>
 800984e:	4632      	mov	r2, r6
 8009850:	463b      	mov	r3, r7
 8009852:	f7f6 fee1 	bl	8000618 <__aeabi_dmul>
 8009856:	a370      	add	r3, pc, #448	; (adr r3, 8009a18 <atan+0x2c8>)
 8009858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985c:	f7f6 fd26 	bl	80002ac <__adddf3>
 8009860:	4632      	mov	r2, r6
 8009862:	463b      	mov	r3, r7
 8009864:	f7f6 fed8 	bl	8000618 <__aeabi_dmul>
 8009868:	a36d      	add	r3, pc, #436	; (adr r3, 8009a20 <atan+0x2d0>)
 800986a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986e:	f7f6 fd1d 	bl	80002ac <__adddf3>
 8009872:	4632      	mov	r2, r6
 8009874:	463b      	mov	r3, r7
 8009876:	f7f6 fecf 	bl	8000618 <__aeabi_dmul>
 800987a:	a36b      	add	r3, pc, #428	; (adr r3, 8009a28 <atan+0x2d8>)
 800987c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009880:	f7f6 fd14 	bl	80002ac <__adddf3>
 8009884:	4632      	mov	r2, r6
 8009886:	463b      	mov	r3, r7
 8009888:	f7f6 fec6 	bl	8000618 <__aeabi_dmul>
 800988c:	a368      	add	r3, pc, #416	; (adr r3, 8009a30 <atan+0x2e0>)
 800988e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009892:	f7f6 fd0b 	bl	80002ac <__adddf3>
 8009896:	4642      	mov	r2, r8
 8009898:	464b      	mov	r3, r9
 800989a:	f7f6 febd 	bl	8000618 <__aeabi_dmul>
 800989e:	a366      	add	r3, pc, #408	; (adr r3, 8009a38 <atan+0x2e8>)
 80098a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a4:	4680      	mov	r8, r0
 80098a6:	4689      	mov	r9, r1
 80098a8:	4630      	mov	r0, r6
 80098aa:	4639      	mov	r1, r7
 80098ac:	f7f6 feb4 	bl	8000618 <__aeabi_dmul>
 80098b0:	a363      	add	r3, pc, #396	; (adr r3, 8009a40 <atan+0x2f0>)
 80098b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b6:	f7f6 fcf7 	bl	80002a8 <__aeabi_dsub>
 80098ba:	4632      	mov	r2, r6
 80098bc:	463b      	mov	r3, r7
 80098be:	f7f6 feab 	bl	8000618 <__aeabi_dmul>
 80098c2:	a361      	add	r3, pc, #388	; (adr r3, 8009a48 <atan+0x2f8>)
 80098c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c8:	f7f6 fcee 	bl	80002a8 <__aeabi_dsub>
 80098cc:	4632      	mov	r2, r6
 80098ce:	463b      	mov	r3, r7
 80098d0:	f7f6 fea2 	bl	8000618 <__aeabi_dmul>
 80098d4:	a35e      	add	r3, pc, #376	; (adr r3, 8009a50 <atan+0x300>)
 80098d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098da:	f7f6 fce5 	bl	80002a8 <__aeabi_dsub>
 80098de:	4632      	mov	r2, r6
 80098e0:	463b      	mov	r3, r7
 80098e2:	f7f6 fe99 	bl	8000618 <__aeabi_dmul>
 80098e6:	a35c      	add	r3, pc, #368	; (adr r3, 8009a58 <atan+0x308>)
 80098e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ec:	f7f6 fcdc 	bl	80002a8 <__aeabi_dsub>
 80098f0:	4632      	mov	r2, r6
 80098f2:	463b      	mov	r3, r7
 80098f4:	f7f6 fe90 	bl	8000618 <__aeabi_dmul>
 80098f8:	4602      	mov	r2, r0
 80098fa:	460b      	mov	r3, r1
 80098fc:	4640      	mov	r0, r8
 80098fe:	4649      	mov	r1, r9
 8009900:	f7f6 fcd4 	bl	80002ac <__adddf3>
 8009904:	4622      	mov	r2, r4
 8009906:	462b      	mov	r3, r5
 8009908:	f7f6 fe86 	bl	8000618 <__aeabi_dmul>
 800990c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009910:	4602      	mov	r2, r0
 8009912:	460b      	mov	r3, r1
 8009914:	d14b      	bne.n	80099ae <atan+0x25e>
 8009916:	4620      	mov	r0, r4
 8009918:	4629      	mov	r1, r5
 800991a:	f7f6 fcc5 	bl	80002a8 <__aeabi_dsub>
 800991e:	e72c      	b.n	800977a <atan+0x2a>
 8009920:	ee10 0a10 	vmov	r0, s0
 8009924:	2200      	movs	r2, #0
 8009926:	4b53      	ldr	r3, [pc, #332]	; (8009a74 <atan+0x324>)
 8009928:	4629      	mov	r1, r5
 800992a:	f7f6 fcbd 	bl	80002a8 <__aeabi_dsub>
 800992e:	2200      	movs	r2, #0
 8009930:	4606      	mov	r6, r0
 8009932:	460f      	mov	r7, r1
 8009934:	4b4f      	ldr	r3, [pc, #316]	; (8009a74 <atan+0x324>)
 8009936:	4620      	mov	r0, r4
 8009938:	4629      	mov	r1, r5
 800993a:	f7f6 fcb7 	bl	80002ac <__adddf3>
 800993e:	4602      	mov	r2, r0
 8009940:	460b      	mov	r3, r1
 8009942:	4630      	mov	r0, r6
 8009944:	4639      	mov	r1, r7
 8009946:	f7f6 ff91 	bl	800086c <__aeabi_ddiv>
 800994a:	f04f 0a01 	mov.w	sl, #1
 800994e:	4604      	mov	r4, r0
 8009950:	460d      	mov	r5, r1
 8009952:	e764      	b.n	800981e <atan+0xce>
 8009954:	4b49      	ldr	r3, [pc, #292]	; (8009a7c <atan+0x32c>)
 8009956:	429e      	cmp	r6, r3
 8009958:	dc1d      	bgt.n	8009996 <atan+0x246>
 800995a:	ee10 0a10 	vmov	r0, s0
 800995e:	2200      	movs	r2, #0
 8009960:	4b47      	ldr	r3, [pc, #284]	; (8009a80 <atan+0x330>)
 8009962:	4629      	mov	r1, r5
 8009964:	f7f6 fca0 	bl	80002a8 <__aeabi_dsub>
 8009968:	2200      	movs	r2, #0
 800996a:	4606      	mov	r6, r0
 800996c:	460f      	mov	r7, r1
 800996e:	4b44      	ldr	r3, [pc, #272]	; (8009a80 <atan+0x330>)
 8009970:	4620      	mov	r0, r4
 8009972:	4629      	mov	r1, r5
 8009974:	f7f6 fe50 	bl	8000618 <__aeabi_dmul>
 8009978:	2200      	movs	r2, #0
 800997a:	4b3e      	ldr	r3, [pc, #248]	; (8009a74 <atan+0x324>)
 800997c:	f7f6 fc96 	bl	80002ac <__adddf3>
 8009980:	4602      	mov	r2, r0
 8009982:	460b      	mov	r3, r1
 8009984:	4630      	mov	r0, r6
 8009986:	4639      	mov	r1, r7
 8009988:	f7f6 ff70 	bl	800086c <__aeabi_ddiv>
 800998c:	f04f 0a02 	mov.w	sl, #2
 8009990:	4604      	mov	r4, r0
 8009992:	460d      	mov	r5, r1
 8009994:	e743      	b.n	800981e <atan+0xce>
 8009996:	462b      	mov	r3, r5
 8009998:	ee10 2a10 	vmov	r2, s0
 800999c:	2000      	movs	r0, #0
 800999e:	4939      	ldr	r1, [pc, #228]	; (8009a84 <atan+0x334>)
 80099a0:	f7f6 ff64 	bl	800086c <__aeabi_ddiv>
 80099a4:	f04f 0a03 	mov.w	sl, #3
 80099a8:	4604      	mov	r4, r0
 80099aa:	460d      	mov	r5, r1
 80099ac:	e737      	b.n	800981e <atan+0xce>
 80099ae:	4b36      	ldr	r3, [pc, #216]	; (8009a88 <atan+0x338>)
 80099b0:	4e36      	ldr	r6, [pc, #216]	; (8009a8c <atan+0x33c>)
 80099b2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80099b6:	4456      	add	r6, sl
 80099b8:	449a      	add	sl, r3
 80099ba:	e9da 2300 	ldrd	r2, r3, [sl]
 80099be:	f7f6 fc73 	bl	80002a8 <__aeabi_dsub>
 80099c2:	4622      	mov	r2, r4
 80099c4:	462b      	mov	r3, r5
 80099c6:	f7f6 fc6f 	bl	80002a8 <__aeabi_dsub>
 80099ca:	4602      	mov	r2, r0
 80099cc:	460b      	mov	r3, r1
 80099ce:	e9d6 0100 	ldrd	r0, r1, [r6]
 80099d2:	f7f6 fc69 	bl	80002a8 <__aeabi_dsub>
 80099d6:	f1bb 0f00 	cmp.w	fp, #0
 80099da:	4604      	mov	r4, r0
 80099dc:	460d      	mov	r5, r1
 80099de:	f6bf aed6 	bge.w	800978e <atan+0x3e>
 80099e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099e6:	461d      	mov	r5, r3
 80099e8:	e6d1      	b.n	800978e <atan+0x3e>
 80099ea:	a51d      	add	r5, pc, #116	; (adr r5, 8009a60 <atan+0x310>)
 80099ec:	e9d5 4500 	ldrd	r4, r5, [r5]
 80099f0:	e6cd      	b.n	800978e <atan+0x3e>
 80099f2:	bf00      	nop
 80099f4:	f3af 8000 	nop.w
 80099f8:	54442d18 	.word	0x54442d18
 80099fc:	3ff921fb 	.word	0x3ff921fb
 8009a00:	8800759c 	.word	0x8800759c
 8009a04:	7e37e43c 	.word	0x7e37e43c
 8009a08:	e322da11 	.word	0xe322da11
 8009a0c:	3f90ad3a 	.word	0x3f90ad3a
 8009a10:	24760deb 	.word	0x24760deb
 8009a14:	3fa97b4b 	.word	0x3fa97b4b
 8009a18:	a0d03d51 	.word	0xa0d03d51
 8009a1c:	3fb10d66 	.word	0x3fb10d66
 8009a20:	c54c206e 	.word	0xc54c206e
 8009a24:	3fb745cd 	.word	0x3fb745cd
 8009a28:	920083ff 	.word	0x920083ff
 8009a2c:	3fc24924 	.word	0x3fc24924
 8009a30:	5555550d 	.word	0x5555550d
 8009a34:	3fd55555 	.word	0x3fd55555
 8009a38:	2c6a6c2f 	.word	0x2c6a6c2f
 8009a3c:	bfa2b444 	.word	0xbfa2b444
 8009a40:	52defd9a 	.word	0x52defd9a
 8009a44:	3fadde2d 	.word	0x3fadde2d
 8009a48:	af749a6d 	.word	0xaf749a6d
 8009a4c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009a50:	fe231671 	.word	0xfe231671
 8009a54:	3fbc71c6 	.word	0x3fbc71c6
 8009a58:	9998ebc4 	.word	0x9998ebc4
 8009a5c:	3fc99999 	.word	0x3fc99999
 8009a60:	54442d18 	.word	0x54442d18
 8009a64:	bff921fb 	.word	0xbff921fb
 8009a68:	440fffff 	.word	0x440fffff
 8009a6c:	7ff00000 	.word	0x7ff00000
 8009a70:	3fdbffff 	.word	0x3fdbffff
 8009a74:	3ff00000 	.word	0x3ff00000
 8009a78:	3ff2ffff 	.word	0x3ff2ffff
 8009a7c:	40037fff 	.word	0x40037fff
 8009a80:	3ff80000 	.word	0x3ff80000
 8009a84:	bff00000 	.word	0xbff00000
 8009a88:	08009e30 	.word	0x08009e30
 8009a8c:	08009e10 	.word	0x08009e10

08009a90 <fabs>:
 8009a90:	ec51 0b10 	vmov	r0, r1, d0
 8009a94:	ee10 2a10 	vmov	r2, s0
 8009a98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009a9c:	ec43 2b10 	vmov	d0, r2, r3
 8009aa0:	4770      	bx	lr

08009aa2 <matherr>:
 8009aa2:	2000      	movs	r0, #0
 8009aa4:	4770      	bx	lr
	...

08009aa8 <nan>:
 8009aa8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009ab0 <nan+0x8>
 8009aac:	4770      	bx	lr
 8009aae:	bf00      	nop
 8009ab0:	00000000 	.word	0x00000000
 8009ab4:	7ff80000 	.word	0x7ff80000

08009ab8 <_init>:
 8009ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aba:	bf00      	nop
 8009abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009abe:	bc08      	pop	{r3}
 8009ac0:	469e      	mov	lr, r3
 8009ac2:	4770      	bx	lr

08009ac4 <_fini>:
 8009ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac6:	bf00      	nop
 8009ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aca:	bc08      	pop	{r3}
 8009acc:	469e      	mov	lr, r3
 8009ace:	4770      	bx	lr
