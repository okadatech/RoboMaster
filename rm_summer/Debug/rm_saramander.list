
rm_saramander.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006424  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  080065d8  080065d8  000165d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080068d0  080068d0  000168d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080068d8  080068d8  000168d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080068dc  080068dc  000168dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  080068e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
  8 .bss          000004e8  200001dc  200001dc  000201dc  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  200006c4  200006c4  000201dc  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001f78c  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000039d6  00000000  00000000  0003f998  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000a603  00000000  00000000  0004336e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001068  00000000  00000000  0004d978  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa0  00000000  00000000  0004e9e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002653a  00000000  00000000  0004f980  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fbfd  00000000  00000000  00075eba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d6679  00000000  00000000  00085ab7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015c130  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037d8  00000000  00000000  0015c1ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080065bc 	.word	0x080065bc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	080065bc 	.word	0x080065bc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033e:	f1a4 0401 	sub.w	r4, r4, #1
 8000342:	d1e9      	bne.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpun>:
 8000aac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x10>
 8000ab6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aba:	d10a      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000abc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x20>
 8000ac6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aca:	d102      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	f04f 0001 	mov.w	r0, #1
 8000ad6:	4770      	bx	lr

08000ad8 <__aeabi_d2iz>:
 8000ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000adc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae0:	d215      	bcs.n	8000b0e <__aeabi_d2iz+0x36>
 8000ae2:	d511      	bpl.n	8000b08 <__aeabi_d2iz+0x30>
 8000ae4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aec:	d912      	bls.n	8000b14 <__aeabi_d2iz+0x3c>
 8000aee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afe:	fa23 f002 	lsr.w	r0, r3, r2
 8000b02:	bf18      	it	ne
 8000b04:	4240      	negne	r0, r0
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b12:	d105      	bne.n	8000b20 <__aeabi_d2iz+0x48>
 8000b14:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	bf08      	it	eq
 8000b1a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_d2f>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b30:	bf24      	itt	cs
 8000b32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b3a:	d90d      	bls.n	8000b58 <__aeabi_d2f+0x30>
 8000b3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b50:	bf08      	it	eq
 8000b52:	f020 0001 	biceq.w	r0, r0, #1
 8000b56:	4770      	bx	lr
 8000b58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b5c:	d121      	bne.n	8000ba2 <__aeabi_d2f+0x7a>
 8000b5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b62:	bfbc      	itt	lt
 8000b64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	4770      	bxlt	lr
 8000b6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b72:	f1c2 0218 	rsb	r2, r2, #24
 8000b76:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b82:	bf18      	it	ne
 8000b84:	f040 0001 	orrne.w	r0, r0, #1
 8000b88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b94:	ea40 000c 	orr.w	r0, r0, ip
 8000b98:	fa23 f302 	lsr.w	r3, r3, r2
 8000b9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba0:	e7cc      	b.n	8000b3c <__aeabi_d2f+0x14>
 8000ba2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba6:	d107      	bne.n	8000bb8 <__aeabi_d2f+0x90>
 8000ba8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bac:	bf1e      	ittt	ne
 8000bae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bb6:	4770      	bxne	lr
 8000bb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b972 	b.w	8000ec4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	4688      	mov	r8, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14b      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4615      	mov	r5, r2
 8000c0a:	d967      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0720 	rsb	r7, r2, #32
 8000c16:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c1e:	4095      	lsls	r5, r2
 8000c20:	ea47 0803 	orr.w	r8, r7, r3
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c30:	fa1f fc85 	uxth.w	ip, r5
 8000c34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c4a:	f080 811b 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8118 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c54:	3f02      	subs	r7, #2
 8000c56:	442b      	add	r3, r5
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6c:	45a4      	cmp	ip, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	192c      	adds	r4, r5, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8107 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	f240 8104 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c80:	3802      	subs	r0, #2
 8000c82:	442c      	add	r4, r5
 8000c84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c88:	eba4 040c 	sub.w	r4, r4, ip
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	b11e      	cbz	r6, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c6 4300 	strd	r4, r3, [r6]
 8000c98:	4639      	mov	r1, r7
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0xbe>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80eb 	beq.w	8000e7e <__udivmoddi4+0x286>
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e9c6 0100 	strd	r0, r1, [r6]
 8000cae:	4638      	mov	r0, r7
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	fab3 f783 	clz	r7, r3
 8000cba:	2f00      	cmp	r7, #0
 8000cbc:	d147      	bne.n	8000d4e <__udivmoddi4+0x156>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0xd0>
 8000cc2:	4282      	cmp	r2, r0
 8000cc4:	f200 80fa 	bhi.w	8000ebc <__udivmoddi4+0x2c4>
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	eb61 0303 	sbc.w	r3, r1, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	4698      	mov	r8, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d0e0      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000cd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cda:	e7dd      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000cdc:	b902      	cbnz	r2, 8000ce0 <__udivmoddi4+0xe8>
 8000cde:	deff      	udf	#255	; 0xff
 8000ce0:	fab2 f282 	clz	r2, r2
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	f040 808f 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000cea:	1b49      	subs	r1, r1, r5
 8000cec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf0:	fa1f f885 	uxth.w	r8, r5
 8000cf4:	2701      	movs	r7, #1
 8000cf6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d04:	fb08 f10c 	mul.w	r1, r8, ip
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0c:	18eb      	adds	r3, r5, r3
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4299      	cmp	r1, r3
 8000d16:	f200 80cd 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x14c>
 8000d34:	192c      	adds	r4, r5, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x14a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80b6 	bhi.w	8000eae <__udivmoddi4+0x2b6>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e79f      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d52:	40bb      	lsls	r3, r7
 8000d54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d6c:	4325      	orrs	r5, r4
 8000d6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d72:	0c2c      	lsrs	r4, r5, #16
 8000d74:	fb08 3319 	mls	r3, r8, r9, r3
 8000d78:	fa1f fa8e 	uxth.w	sl, lr
 8000d7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d80:	fb09 f40a 	mul.w	r4, r9, sl
 8000d84:	429c      	cmp	r4, r3
 8000d86:	fa02 f207 	lsl.w	r2, r2, r7
 8000d8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1e 0303 	adds.w	r3, lr, r3
 8000d94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d98:	f080 8087 	bcs.w	8000eaa <__udivmoddi4+0x2b2>
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	f240 8084 	bls.w	8000eaa <__udivmoddi4+0x2b2>
 8000da2:	f1a9 0902 	sub.w	r9, r9, #2
 8000da6:	4473      	add	r3, lr
 8000da8:	1b1b      	subs	r3, r3, r4
 8000daa:	b2ad      	uxth	r5, r5
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000db8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dbc:	45a2      	cmp	sl, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1e 0404 	adds.w	r4, lr, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	d26b      	bcs.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dca:	45a2      	cmp	sl, r4
 8000dcc:	d969      	bls.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	4474      	add	r4, lr
 8000dd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dda:	eba4 040a 	sub.w	r4, r4, sl
 8000dde:	454c      	cmp	r4, r9
 8000de0:	46c2      	mov	sl, r8
 8000de2:	464b      	mov	r3, r9
 8000de4:	d354      	bcc.n	8000e90 <__udivmoddi4+0x298>
 8000de6:	d051      	beq.n	8000e8c <__udivmoddi4+0x294>
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d069      	beq.n	8000ec0 <__udivmoddi4+0x2c8>
 8000dec:	ebb1 050a 	subs.w	r5, r1, sl
 8000df0:	eb64 0403 	sbc.w	r4, r4, r3
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40fd      	lsrs	r5, r7
 8000dfa:	40fc      	lsrs	r4, r7
 8000dfc:	ea4c 0505 	orr.w	r5, ip, r5
 8000e00:	e9c6 5400 	strd	r5, r4, [r6]
 8000e04:	2700      	movs	r7, #0
 8000e06:	e747      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e08:	f1c2 0320 	rsb	r3, r2, #32
 8000e0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e10:	4095      	lsls	r5, r2
 8000e12:	fa01 f002 	lsl.w	r0, r1, r2
 8000e16:	fa21 f303 	lsr.w	r3, r1, r3
 8000e1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e1e:	4338      	orrs	r0, r7
 8000e20:	0c01      	lsrs	r1, r0, #16
 8000e22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e26:	fa1f f885 	uxth.w	r8, r5
 8000e2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb07 f308 	mul.w	r3, r7, r8
 8000e36:	428b      	cmp	r3, r1
 8000e38:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x256>
 8000e3e:	1869      	adds	r1, r5, r1
 8000e40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e44:	d22f      	bcs.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d92d      	bls.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e4a:	3f02      	subs	r7, #2
 8000e4c:	4429      	add	r1, r5
 8000e4e:	1acb      	subs	r3, r1, r3
 8000e50:	b281      	uxth	r1, r0
 8000e52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e5e:	fb00 f308 	mul.w	r3, r0, r8
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x27e>
 8000e66:	1869      	adds	r1, r5, r1
 8000e68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e6c:	d217      	bcs.n	8000e9e <__udivmoddi4+0x2a6>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d915      	bls.n	8000e9e <__udivmoddi4+0x2a6>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4429      	add	r1, r5
 8000e76:	1ac9      	subs	r1, r1, r3
 8000e78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e7c:	e73b      	b.n	8000cf6 <__udivmoddi4+0xfe>
 8000e7e:	4637      	mov	r7, r6
 8000e80:	4630      	mov	r0, r6
 8000e82:	e709      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e84:	4607      	mov	r7, r0
 8000e86:	e6e7      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6fb      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e8c:	4541      	cmp	r1, r8
 8000e8e:	d2ab      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e94:	eb69 020e 	sbc.w	r2, r9, lr
 8000e98:	3801      	subs	r0, #1
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	e7a4      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000e9e:	4660      	mov	r0, ip
 8000ea0:	e7e9      	b.n	8000e76 <__udivmoddi4+0x27e>
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	e795      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea6:	4667      	mov	r7, ip
 8000ea8:	e7d1      	b.n	8000e4e <__udivmoddi4+0x256>
 8000eaa:	4681      	mov	r9, r0
 8000eac:	e77c      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	442c      	add	r4, r5
 8000eb2:	e747      	b.n	8000d44 <__udivmoddi4+0x14c>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	442b      	add	r3, r5
 8000eba:	e72f      	b.n	8000d1c <__udivmoddi4+0x124>
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	e708      	b.n	8000cd2 <__udivmoddi4+0xda>
 8000ec0:	4637      	mov	r7, r6
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0xa0>

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b510      	push	{r4, lr}
 8000eca:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_InitTick+0x40>)
 8000ece:	7818      	ldrb	r0, [r3, #0]
 8000ed0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed4:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ed8:	4a0c      	ldr	r2, [pc, #48]	; (8000f0c <HAL_InitTick+0x44>)
 8000eda:	6810      	ldr	r0, [r2, #0]
 8000edc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ee0:	f000 fc7c 	bl	80017dc <HAL_SYSTICK_Config>
 8000ee4:	b968      	cbnz	r0, 8000f02 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee6:	2c0f      	cmp	r4, #15
 8000ee8:	d901      	bls.n	8000eee <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000eea:	2001      	movs	r0, #1
 8000eec:	e00a      	b.n	8000f04 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	4621      	mov	r1, r4
 8000ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef6:	f000 fc31 	bl	800175c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000efa:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <HAL_InitTick+0x40>)
 8000efc:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000efe:	2000      	movs	r0, #0
 8000f00:	e000      	b.n	8000f04 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000f02:	2001      	movs	r0, #1
}
 8000f04:	bd10      	pop	{r4, pc}
 8000f06:	bf00      	nop
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	20000008 	.word	0x20000008

08000f10 <HAL_Init>:
{
 8000f10:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <HAL_Init+0x30>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f1a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f22:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f2a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2c:	2003      	movs	r0, #3
 8000f2e:	f000 fc03 	bl	8001738 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f32:	2000      	movs	r0, #0
 8000f34:	f7ff ffc8 	bl	8000ec8 <HAL_InitTick>
  HAL_MspInit();
 8000f38:	f002 ff16 	bl	8003d68 <HAL_MspInit>
}
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	bd08      	pop	{r3, pc}
 8000f40:	40023c00 	.word	0x40023c00

08000f44 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f44:	4a03      	ldr	r2, [pc, #12]	; (8000f54 <HAL_IncTick+0x10>)
 8000f46:	6811      	ldr	r1, [r2, #0]
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <HAL_IncTick+0x14>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	440b      	add	r3, r1
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000210 	.word	0x20000210
 8000f58:	20000000 	.word	0x20000000

08000f5c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f5c:	4b01      	ldr	r3, [pc, #4]	; (8000f64 <HAL_GetTick+0x8>)
 8000f5e:	6818      	ldr	r0, [r3, #0]
}
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000210 	.word	0x20000210

08000f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f68:	b538      	push	{r3, r4, r5, lr}
 8000f6a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f6c:	f7ff fff6 	bl	8000f5c <HAL_GetTick>
 8000f70:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f72:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000f76:	d002      	beq.n	8000f7e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <HAL_Delay+0x24>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f7e:	f7ff ffed 	bl	8000f5c <HAL_GetTick>
 8000f82:	1b40      	subs	r0, r0, r5
 8000f84:	42a0      	cmp	r0, r4
 8000f86:	d3fa      	bcc.n	8000f7e <HAL_Delay+0x16>
  {
  }
}
 8000f88:	bd38      	pop	{r3, r4, r5, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000000 	.word	0x20000000

08000f90 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart = 0U;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f90:	2800      	cmp	r0, #0
 8000f92:	f000 80a1 	beq.w	80010d8 <HAL_CAN_Init+0x148>
{
 8000f96:	b538      	push	{r3, r4, r5, lr}
 8000f98:	4604      	mov	r4, r0
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f9a:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000f9e:	b1d3      	cbz	r3, 8000fd6 <HAL_CAN_Init+0x46>
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000fa0:	6822      	ldr	r2, [r4, #0]
 8000fa2:	6813      	ldr	r3, [r2, #0]
 8000fa4:	f023 0302 	bic.w	r3, r3, #2
 8000fa8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000faa:	f7ff ffd7 	bl	8000f5c <HAL_GetTick>
 8000fae:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 8000fb0:	6823      	ldr	r3, [r4, #0]
 8000fb2:	685a      	ldr	r2, [r3, #4]
 8000fb4:	f012 0f02 	tst.w	r2, #2
 8000fb8:	d010      	beq.n	8000fdc <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fba:	f7ff ffcf 	bl	8000f5c <HAL_GetTick>
 8000fbe:	1b40      	subs	r0, r0, r5
 8000fc0:	280a      	cmp	r0, #10
 8000fc2:	d9f5      	bls.n	8000fb0 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fca:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fcc:	2305      	movs	r3, #5
 8000fce:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8000fd2:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8000fd4:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8000fd6:	f001 ff87 	bl	8002ee8 <HAL_CAN_MspInit>
 8000fda:	e7e1      	b.n	8000fa0 <HAL_CAN_Init+0x10>
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	f042 0201 	orr.w	r2, r2, #1
 8000fe2:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000fe4:	f7ff ffba 	bl	8000f5c <HAL_GetTick>
 8000fe8:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 8000fea:	6823      	ldr	r3, [r4, #0]
 8000fec:	685a      	ldr	r2, [r3, #4]
 8000fee:	f012 0f01 	tst.w	r2, #1
 8000ff2:	d10d      	bne.n	8001010 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ff4:	f7ff ffb2 	bl	8000f5c <HAL_GetTick>
 8000ff8:	1b40      	subs	r0, r0, r5
 8000ffa:	280a      	cmp	r0, #10
 8000ffc:	d9f5      	bls.n	8000fea <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001004:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8001006:	2305      	movs	r3, #5
 8001008:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 800100c:	2001      	movs	r0, #1
 800100e:	e7e1      	b.n	8000fd4 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001010:	7e22      	ldrb	r2, [r4, #24]
 8001012:	2a01      	cmp	r2, #1
 8001014:	d03d      	beq.n	8001092 <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800101c:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 800101e:	7e63      	ldrb	r3, [r4, #25]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d03b      	beq.n	800109c <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001024:	6822      	ldr	r2, [r4, #0]
 8001026:	6813      	ldr	r3, [r2, #0]
 8001028:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800102c:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 800102e:	7ea3      	ldrb	r3, [r4, #26]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d039      	beq.n	80010a8 <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001034:	6822      	ldr	r2, [r4, #0]
 8001036:	6813      	ldr	r3, [r2, #0]
 8001038:	f023 0320 	bic.w	r3, r3, #32
 800103c:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 800103e:	7ee3      	ldrb	r3, [r4, #27]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d037      	beq.n	80010b4 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001044:	6822      	ldr	r2, [r4, #0]
 8001046:	6813      	ldr	r3, [r2, #0]
 8001048:	f043 0310 	orr.w	r3, r3, #16
 800104c:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800104e:	7f23      	ldrb	r3, [r4, #28]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d035      	beq.n	80010c0 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001054:	6822      	ldr	r2, [r4, #0]
 8001056:	6813      	ldr	r3, [r2, #0]
 8001058:	f023 0308 	bic.w	r3, r3, #8
 800105c:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800105e:	7f63      	ldrb	r3, [r4, #29]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d033      	beq.n	80010cc <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001064:	6822      	ldr	r2, [r4, #0]
 8001066:	6813      	ldr	r3, [r2, #0]
 8001068:	f023 0304 	bic.w	r3, r3, #4
 800106c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800106e:	68a3      	ldr	r3, [r4, #8]
 8001070:	68e2      	ldr	r2, [r4, #12]
 8001072:	4313      	orrs	r3, r2
 8001074:	6922      	ldr	r2, [r4, #16]
 8001076:	4313      	orrs	r3, r2
 8001078:	6962      	ldr	r2, [r4, #20]
 800107a:	4313      	orrs	r3, r2
 800107c:	6862      	ldr	r2, [r4, #4]
 800107e:	3a01      	subs	r2, #1
 8001080:	6821      	ldr	r1, [r4, #0]
 8001082:	4313      	orrs	r3, r2
 8001084:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001086:	2000      	movs	r0, #0
 8001088:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800108a:	2301      	movs	r3, #1
 800108c:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8001090:	e7a0      	b.n	8000fd4 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	e7c0      	b.n	800101e <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800109c:	6822      	ldr	r2, [r4, #0]
 800109e:	6813      	ldr	r3, [r2, #0]
 80010a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	e7c2      	b.n	800102e <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010a8:	6822      	ldr	r2, [r4, #0]
 80010aa:	6813      	ldr	r3, [r2, #0]
 80010ac:	f043 0320 	orr.w	r3, r3, #32
 80010b0:	6013      	str	r3, [r2, #0]
 80010b2:	e7c4      	b.n	800103e <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010b4:	6822      	ldr	r2, [r4, #0]
 80010b6:	6813      	ldr	r3, [r2, #0]
 80010b8:	f023 0310 	bic.w	r3, r3, #16
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	e7c6      	b.n	800104e <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010c0:	6822      	ldr	r2, [r4, #0]
 80010c2:	6813      	ldr	r3, [r2, #0]
 80010c4:	f043 0308 	orr.w	r3, r3, #8
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	e7c8      	b.n	800105e <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010cc:	6822      	ldr	r2, [r4, #0]
 80010ce:	6813      	ldr	r3, [r2, #0]
 80010d0:	f043 0304 	orr.w	r3, r3, #4
 80010d4:	6013      	str	r3, [r2, #0]
 80010d6:	e7ca      	b.n	800106e <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 80010d8:	2001      	movs	r0, #1
}
 80010da:	4770      	bx	lr

080010dc <HAL_CAN_ConfigFilter>:
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos = 0U;
  CAN_TypeDef *can_ip = hcan->Instance;

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80010dc:	f890 3020 	ldrb.w	r3, [r0, #32]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d00a      	beq.n	80010fc <HAL_CAN_ConfigFilter+0x20>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 80010e6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80010ea:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d005      	beq.n	80010fc <HAL_CAN_ConfigFilter+0x20>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80010f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f6:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80010f8:	2001      	movs	r0, #1
  }
}
 80010fa:	4770      	bx	lr
{
 80010fc:	b470      	push	{r4, r5, r6}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010fe:	4b42      	ldr	r3, [pc, #264]	; (8001208 <HAL_CAN_ConfigFilter+0x12c>)
 8001100:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001104:	f042 0201 	orr.w	r2, r2, #1
 8001108:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800110c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001110:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8001114:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001118:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800111c:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800111e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001122:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (1U) << sFilterConfig->FilterBank;
 8001126:	694a      	ldr	r2, [r1, #20]
 8001128:	2001      	movs	r0, #1
 800112a:	fa00 f202 	lsl.w	r2, r0, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800112e:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
 8001132:	43d0      	mvns	r0, r2
 8001134:	4004      	ands	r4, r0
 8001136:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800113a:	69cb      	ldr	r3, [r1, #28]
 800113c:	b9b3      	cbnz	r3, 800116c <HAL_CAN_ConfigFilter+0x90>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800113e:	4b32      	ldr	r3, [pc, #200]	; (8001208 <HAL_CAN_ConfigFilter+0x12c>)
 8001140:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
 8001144:	4004      	ands	r4, r0
 8001146:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800114a:	68ce      	ldr	r6, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800114c:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800114e:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001150:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001154:	3448      	adds	r4, #72	; 0x48
 8001156:	f843 5034 	str.w	r5, [r3, r4, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800115a:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800115c:	880c      	ldrh	r4, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800115e:	694d      	ldr	r5, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001160:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001164:	3548      	adds	r5, #72	; 0x48
 8001166:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800116a:	605c      	str	r4, [r3, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800116c:	69cb      	ldr	r3, [r1, #28]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d01d      	beq.n	80011ae <HAL_CAN_ConfigFilter+0xd2>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001172:	698b      	ldr	r3, [r1, #24]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d132      	bne.n	80011de <HAL_CAN_ConfigFilter+0x102>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001178:	4c23      	ldr	r4, [pc, #140]	; (8001208 <HAL_CAN_ConfigFilter+0x12c>)
 800117a:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 800117e:	4003      	ands	r3, r0
 8001180:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001184:	690b      	ldr	r3, [r1, #16]
 8001186:	bb8b      	cbnz	r3, 80011ec <HAL_CAN_ConfigFilter+0x110>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001188:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <HAL_CAN_ConfigFilter+0x12c>)
 800118a:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
 800118e:	4020      	ands	r0, r4
 8001190:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == ENABLE)
 8001194:	6a0b      	ldr	r3, [r1, #32]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d02f      	beq.n	80011fa <HAL_CAN_ConfigFilter+0x11e>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800119a:	4a1b      	ldr	r2, [pc, #108]	; (8001208 <HAL_CAN_ConfigFilter+0x12c>)
 800119c:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 80011a0:	f023 0301 	bic.w	r3, r3, #1
 80011a4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    return HAL_OK;
 80011a8:	2000      	movs	r0, #0
}
 80011aa:	bc70      	pop	{r4, r5, r6}
 80011ac:	4770      	bx	lr
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80011ae:	4b16      	ldr	r3, [pc, #88]	; (8001208 <HAL_CAN_ConfigFilter+0x12c>)
 80011b0:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
 80011b4:	4314      	orrs	r4, r2
 80011b6:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011ba:	680e      	ldr	r6, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011bc:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011be:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011c0:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011c4:	3448      	adds	r4, #72	; 0x48
 80011c6:	f843 5034 	str.w	r5, [r3, r4, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011ca:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80011cc:	898c      	ldrh	r4, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011ce:	694d      	ldr	r5, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011d0:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011d4:	3548      	adds	r5, #72	; 0x48
 80011d6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80011da:	605c      	str	r4, [r3, #4]
 80011dc:	e7c9      	b.n	8001172 <HAL_CAN_ConfigFilter+0x96>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80011de:	4c0a      	ldr	r4, [pc, #40]	; (8001208 <HAL_CAN_ConfigFilter+0x12c>)
 80011e0:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 80011e4:	4313      	orrs	r3, r2
 80011e6:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
 80011ea:	e7cb      	b.n	8001184 <HAL_CAN_ConfigFilter+0xa8>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80011ec:	4806      	ldr	r0, [pc, #24]	; (8001208 <HAL_CAN_ConfigFilter+0x12c>)
 80011ee:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80011f2:	4313      	orrs	r3, r2
 80011f4:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
 80011f8:	e7cc      	b.n	8001194 <HAL_CAN_ConfigFilter+0xb8>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80011fa:	4903      	ldr	r1, [pc, #12]	; (8001208 <HAL_CAN_ConfigFilter+0x12c>)
 80011fc:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
 8001200:	431a      	orrs	r2, r3
 8001202:	f8c1 221c 	str.w	r2, [r1, #540]	; 0x21c
 8001206:	e7c8      	b.n	800119a <HAL_CAN_ConfigFilter+0xbe>
 8001208:	40006400 	.word	0x40006400

0800120c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800120c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  if (hcan->State == HAL_CAN_STATE_READY)
 800120e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b01      	cmp	r3, #1
 8001216:	d005      	beq.n	8001224 <HAL_CAN_Start+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001218:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800121a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800121e:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001220:	2001      	movs	r0, #1
  }
}
 8001222:	bd38      	pop	{r3, r4, r5, pc}
 8001224:	4604      	mov	r4, r0
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001226:	2302      	movs	r3, #2
 8001228:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800122c:	6802      	ldr	r2, [r0, #0]
 800122e:	6813      	ldr	r3, [r2, #0]
 8001230:	f023 0301 	bic.w	r3, r3, #1
 8001234:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001236:	f7ff fe91 	bl	8000f5c <HAL_GetTick>
 800123a:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != RESET)
 800123c:	6823      	ldr	r3, [r4, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f013 0f01 	tst.w	r3, #1
 8001244:	d00d      	beq.n	8001262 <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001246:	f7ff fe89 	bl	8000f5c <HAL_GetTick>
 800124a:	1b40      	subs	r0, r0, r5
 800124c:	280a      	cmp	r0, #10
 800124e:	d9f5      	bls.n	800123c <HAL_CAN_Start+0x30>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001250:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001256:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8001258:	2305      	movs	r3, #5
 800125a:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 800125e:	2001      	movs	r0, #1
 8001260:	e7df      	b.n	8001222 <HAL_CAN_Start+0x16>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001262:	2000      	movs	r0, #0
 8001264:	6260      	str	r0, [r4, #36]	; 0x24
    return HAL_OK;
 8001266:	e7dc      	b.n	8001222 <HAL_CAN_Start+0x16>

08001268 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001268:	b470      	push	{r4, r5, r6}
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800126a:	f890 4020 	ldrb.w	r4, [r0, #32]
 800126e:	b2e4      	uxtb	r4, r4
 8001270:	2c01      	cmp	r4, #1
 8001272:	d00a      	beq.n	800128a <HAL_CAN_AddTxMessage+0x22>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8001274:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001278:	b2e4      	uxtb	r4, r4
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800127a:	2c02      	cmp	r4, #2
 800127c:	d005      	beq.n	800128a <HAL_CAN_AddTxMessage+0x22>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800127e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001284:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001286:	2001      	movs	r0, #1
 8001288:	e04d      	b.n	8001326 <HAL_CAN_AddTxMessage+0xbe>
    if (((hcan->Instance->TSR & CAN_TSR_TME0) != RESET) ||
 800128a:	6804      	ldr	r4, [r0, #0]
 800128c:	68a5      	ldr	r5, [r4, #8]
 800128e:	f015 6f80 	tst.w	r5, #67108864	; 0x4000000
 8001292:	d107      	bne.n	80012a4 <HAL_CAN_AddTxMessage+0x3c>
        ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 8001294:	68a5      	ldr	r5, [r4, #8]
    if (((hcan->Instance->TSR & CAN_TSR_TME0) != RESET) ||
 8001296:	f015 6f00 	tst.w	r5, #134217728	; 0x8000000
 800129a:	d103      	bne.n	80012a4 <HAL_CAN_AddTxMessage+0x3c>
        ((hcan->Instance->TSR & CAN_TSR_TME2) != RESET))
 800129c:	68a5      	ldr	r5, [r4, #8]
        ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 800129e:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 80012a2:	d055      	beq.n	8001350 <HAL_CAN_AddTxMessage+0xe8>
      transmitmailbox = (hcan->Instance->TSR & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80012a4:	68a4      	ldr	r4, [r4, #8]
 80012a6:	f3c4 6401 	ubfx	r4, r4, #24, #2
      *pTxMailbox = 1U << transmitmailbox;
 80012aa:	2501      	movs	r5, #1
 80012ac:	40a5      	lsls	r5, r4
 80012ae:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 80012b0:	688b      	ldr	r3, [r1, #8]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d139      	bne.n	800132a <HAL_CAN_AddTxMessage+0xc2>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012b6:	680e      	ldr	r6, [r1, #0]
                                                           pHeader->RTR);
 80012b8:	68cb      	ldr	r3, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012ba:	6805      	ldr	r5, [r0, #0]
 80012bc:	ea43 5646 	orr.w	r6, r3, r6, lsl #21
 80012c0:	f104 0318 	add.w	r3, r4, #24
 80012c4:	011b      	lsls	r3, r3, #4
 80012c6:	50ee      	str	r6, [r5, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80012c8:	6803      	ldr	r3, [r0, #0]
 80012ca:	690d      	ldr	r5, [r1, #16]
 80012cc:	f104 0618 	add.w	r6, r4, #24
 80012d0:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 80012d4:	605d      	str	r5, [r3, #4]
      if (pHeader->TransmitGlobalTime == ENABLE)
 80012d6:	7d0b      	ldrb	r3, [r1, #20]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d031      	beq.n	8001340 <HAL_CAN_AddTxMessage+0xd8>
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80012dc:	79d1      	ldrb	r1, [r2, #7]
 80012de:	7993      	ldrb	r3, [r2, #6]
 80012e0:	041b      	lsls	r3, r3, #16
 80012e2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80012e6:	7951      	ldrb	r1, [r2, #5]
 80012e8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80012ec:	7915      	ldrb	r5, [r2, #4]
 80012ee:	6801      	ldr	r1, [r0, #0]
 80012f0:	432b      	orrs	r3, r5
 80012f2:	0125      	lsls	r5, r4, #4
 80012f4:	4429      	add	r1, r5
 80012f6:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80012fa:	78d1      	ldrb	r1, [r2, #3]
 80012fc:	7893      	ldrb	r3, [r2, #2]
 80012fe:	041b      	lsls	r3, r3, #16
 8001300:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001304:	7851      	ldrb	r1, [r2, #1]
 8001306:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800130a:	7811      	ldrb	r1, [r2, #0]
 800130c:	6802      	ldr	r2, [r0, #0]
 800130e:	430b      	orrs	r3, r1
 8001310:	442a      	add	r2, r5
 8001312:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001316:	6802      	ldr	r2, [r0, #0]
 8001318:	3418      	adds	r4, #24
 800131a:	0124      	lsls	r4, r4, #4
 800131c:	5913      	ldr	r3, [r2, r4]
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	5113      	str	r3, [r2, r4]
      return HAL_OK;
 8001324:	2000      	movs	r0, #0
  }
}
 8001326:	bc70      	pop	{r4, r5, r6}
 8001328:	4770      	bx	lr
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800132a:	684d      	ldr	r5, [r1, #4]
 800132c:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
                                                           pHeader->RTR);
 8001330:	68cd      	ldr	r5, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001332:	6806      	ldr	r6, [r0, #0]
                                                           pHeader->IDE |
 8001334:	432b      	orrs	r3, r5
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001336:	f104 0518 	add.w	r5, r4, #24
 800133a:	012d      	lsls	r5, r5, #4
 800133c:	5173      	str	r3, [r6, r5]
 800133e:	e7c3      	b.n	80012c8 <HAL_CAN_AddTxMessage+0x60>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001340:	6803      	ldr	r3, [r0, #0]
 8001342:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8001346:	6859      	ldr	r1, [r3, #4]
 8001348:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800134c:	6059      	str	r1, [r3, #4]
 800134e:	e7c5      	b.n	80012dc <HAL_CAN_AddTxMessage+0x74>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001350:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001352:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001356:	6243      	str	r3, [r0, #36]	; 0x24
      return HAL_ERROR;
 8001358:	2001      	movs	r0, #1
 800135a:	e7e4      	b.n	8001326 <HAL_CAN_AddTxMessage+0xbe>

0800135c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800135c:	b430      	push	{r4, r5}
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800135e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001362:	b2e4      	uxtb	r4, r4
 8001364:	2c01      	cmp	r4, #1
 8001366:	d00b      	beq.n	8001380 <HAL_CAN_GetRxMessage+0x24>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8001368:	f890 4020 	ldrb.w	r4, [r0, #32]
 800136c:	b2e4      	uxtb	r4, r4
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800136e:	2c02      	cmp	r4, #2
 8001370:	d006      	beq.n	8001380 <HAL_CAN_GetRxMessage+0x24>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001372:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001378:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800137a:	2001      	movs	r0, #1
  }
}
 800137c:	bc30      	pop	{r4, r5}
 800137e:	4770      	bx	lr
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001380:	b951      	cbnz	r1, 8001398 <HAL_CAN_GetRxMessage+0x3c>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == RESET)
 8001382:	6804      	ldr	r4, [r0, #0]
 8001384:	68e4      	ldr	r4, [r4, #12]
 8001386:	f014 0f03 	tst.w	r4, #3
 800138a:	d107      	bne.n	800139c <HAL_CAN_GetRxMessage+0x40>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800138c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800138e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001392:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 8001394:	2001      	movs	r0, #1
 8001396:	e7f1      	b.n	800137c <HAL_CAN_GetRxMessage+0x20>
    else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
 8001398:	2901      	cmp	r1, #1
 800139a:	d05d      	beq.n	8001458 <HAL_CAN_GetRxMessage+0xfc>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800139c:	6805      	ldr	r5, [r0, #0]
 800139e:	f101 041b 	add.w	r4, r1, #27
 80013a2:	0124      	lsls	r4, r4, #4
 80013a4:	592c      	ldr	r4, [r5, r4]
 80013a6:	f004 0404 	and.w	r4, r4, #4
 80013aa:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80013ac:	2c00      	cmp	r4, #0
 80013ae:	d15e      	bne.n	800146e <HAL_CAN_GetRxMessage+0x112>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80013b0:	6805      	ldr	r5, [r0, #0]
 80013b2:	f101 041b 	add.w	r4, r1, #27
 80013b6:	0124      	lsls	r4, r4, #4
 80013b8:	592c      	ldr	r4, [r5, r4]
 80013ba:	0d64      	lsrs	r4, r4, #21
 80013bc:	6014      	str	r4, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 80013be:	6805      	ldr	r5, [r0, #0]
 80013c0:	f101 041b 	add.w	r4, r1, #27
 80013c4:	0124      	lsls	r4, r4, #4
 80013c6:	592d      	ldr	r5, [r5, r4]
 80013c8:	f3c5 0540 	ubfx	r5, r5, #1, #1
 80013cc:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80013ce:	6805      	ldr	r5, [r0, #0]
 80013d0:	4425      	add	r5, r4
 80013d2:	686d      	ldr	r5, [r5, #4]
 80013d4:	f005 050f 	and.w	r5, r5, #15
 80013d8:	6115      	str	r5, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80013da:	6805      	ldr	r5, [r0, #0]
 80013dc:	4425      	add	r5, r4
 80013de:	686d      	ldr	r5, [r5, #4]
 80013e0:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80013e4:	6195      	str	r5, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80013e6:	6805      	ldr	r5, [r0, #0]
 80013e8:	442c      	add	r4, r5
 80013ea:	6864      	ldr	r4, [r4, #4]
 80013ec:	0c24      	lsrs	r4, r4, #16
 80013ee:	6154      	str	r4, [r2, #20]
    aData[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos;
 80013f0:	6804      	ldr	r4, [r0, #0]
 80013f2:	010a      	lsls	r2, r1, #4
 80013f4:	4414      	add	r4, r2
 80013f6:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 80013fa:	701c      	strb	r4, [r3, #0]
    aData[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos;
 80013fc:	6804      	ldr	r4, [r0, #0]
 80013fe:	4414      	add	r4, r2
 8001400:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 8001404:	0a24      	lsrs	r4, r4, #8
 8001406:	705c      	strb	r4, [r3, #1]
    aData[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos;
 8001408:	6804      	ldr	r4, [r0, #0]
 800140a:	4414      	add	r4, r2
 800140c:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 8001410:	0c24      	lsrs	r4, r4, #16
 8001412:	709c      	strb	r4, [r3, #2]
    aData[3] = (CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos;
 8001414:	6804      	ldr	r4, [r0, #0]
 8001416:	4414      	add	r4, r2
 8001418:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 800141c:	0e24      	lsrs	r4, r4, #24
 800141e:	70dc      	strb	r4, [r3, #3]
    aData[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos;
 8001420:	6804      	ldr	r4, [r0, #0]
 8001422:	4414      	add	r4, r2
 8001424:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 8001428:	711c      	strb	r4, [r3, #4]
    aData[5] = (CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos;
 800142a:	6804      	ldr	r4, [r0, #0]
 800142c:	4414      	add	r4, r2
 800142e:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 8001432:	0a24      	lsrs	r4, r4, #8
 8001434:	715c      	strb	r4, [r3, #5]
    aData[6] = (CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos;
 8001436:	6804      	ldr	r4, [r0, #0]
 8001438:	4414      	add	r4, r2
 800143a:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 800143e:	0c24      	lsrs	r4, r4, #16
 8001440:	719c      	strb	r4, [r3, #6]
    aData[7] = (CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos;
 8001442:	6804      	ldr	r4, [r0, #0]
 8001444:	4422      	add	r2, r4
 8001446:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800144a:	0e12      	lsrs	r2, r2, #24
 800144c:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800144e:	b1b1      	cbz	r1, 800147e <HAL_CAN_GetRxMessage+0x122>
    else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
 8001450:	2901      	cmp	r1, #1
 8001452:	d01b      	beq.n	800148c <HAL_CAN_GetRxMessage+0x130>
    return HAL_OK;
 8001454:	2000      	movs	r0, #0
 8001456:	e791      	b.n	800137c <HAL_CAN_GetRxMessage+0x20>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == RESET)
 8001458:	6804      	ldr	r4, [r0, #0]
 800145a:	6924      	ldr	r4, [r4, #16]
 800145c:	f014 0f03 	tst.w	r4, #3
 8001460:	d19c      	bne.n	800139c <HAL_CAN_GetRxMessage+0x40>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001462:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001464:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001468:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 800146a:	2001      	movs	r0, #1
 800146c:	e786      	b.n	800137c <HAL_CAN_GetRxMessage+0x20>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800146e:	6805      	ldr	r5, [r0, #0]
 8001470:	f101 041b 	add.w	r4, r1, #27
 8001474:	0124      	lsls	r4, r4, #4
 8001476:	592c      	ldr	r4, [r5, r4]
 8001478:	08e4      	lsrs	r4, r4, #3
 800147a:	6054      	str	r4, [r2, #4]
 800147c:	e79f      	b.n	80013be <HAL_CAN_GetRxMessage+0x62>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800147e:	6802      	ldr	r2, [r0, #0]
 8001480:	68d3      	ldr	r3, [r2, #12]
 8001482:	f043 0320 	orr.w	r3, r3, #32
 8001486:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8001488:	2000      	movs	r0, #0
 800148a:	e777      	b.n	800137c <HAL_CAN_GetRxMessage+0x20>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800148c:	6802      	ldr	r2, [r0, #0]
 800148e:	6913      	ldr	r3, [r2, #16]
 8001490:	f043 0320 	orr.w	r3, r3, #32
 8001494:	6113      	str	r3, [r2, #16]
    return HAL_OK;
 8001496:	2000      	movs	r0, #0
 8001498:	e770      	b.n	800137c <HAL_CAN_GetRxMessage+0x20>

0800149a <HAL_CAN_ActivateNotification>:
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800149a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d00a      	beq.n	80014ba <HAL_CAN_ActivateNotification+0x20>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 80014a4:	f890 3020 	ldrb.w	r3, [r0, #32]
 80014a8:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d005      	beq.n	80014ba <HAL_CAN_ActivateNotification+0x20>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80014b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014b4:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80014b6:	2001      	movs	r0, #1
  }
}
 80014b8:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80014ba:	6802      	ldr	r2, [r0, #0]
 80014bc:	6953      	ldr	r3, [r2, #20]
 80014be:	4319      	orrs	r1, r3
 80014c0:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 80014c2:	2000      	movs	r0, #0
 80014c4:	4770      	bx	lr

080014c6 <HAL_CAN_TxMailbox0CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80014c6:	4770      	bx	lr

080014c8 <HAL_CAN_TxMailbox1CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80014c8:	4770      	bx	lr

080014ca <HAL_CAN_TxMailbox2CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80014ca:	4770      	bx	lr

080014cc <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80014cc:	4770      	bx	lr

080014ce <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80014ce:	4770      	bx	lr

080014d0 <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80014d0:	4770      	bx	lr

080014d2 <HAL_CAN_RxFifo0FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80014d2:	4770      	bx	lr

080014d4 <HAL_CAN_RxFifo1MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80014d4:	4770      	bx	lr

080014d6 <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80014d6:	4770      	bx	lr

080014d8 <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80014d8:	4770      	bx	lr

080014da <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80014da:	4770      	bx	lr

080014dc <HAL_CAN_ErrorCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80014dc:	4770      	bx	lr

080014de <HAL_CAN_IRQHandler>:
{
 80014de:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014e2:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80014e4:	6803      	ldr	r3, [r0, #0]
 80014e6:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80014e8:	685f      	ldr	r7, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80014ea:	689e      	ldr	r6, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80014ec:	f8d3 900c 	ldr.w	r9, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80014f0:	f8d3 8010 	ldr.w	r8, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80014f4:	f8d3 a018 	ldr.w	sl, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != RESET)
 80014f8:	f014 0f01 	tst.w	r4, #1
 80014fc:	d05a      	beq.n	80015b4 <HAL_CAN_IRQHandler+0xd6>
    if ((tsrflags & CAN_TSR_RQCP0) != RESET)
 80014fe:	f016 0f01 	tst.w	r6, #1
 8001502:	d017      	beq.n	8001534 <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001504:	2201      	movs	r2, #1
 8001506:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != RESET)
 8001508:	f016 0f02 	tst.w	r6, #2
 800150c:	d108      	bne.n	8001520 <HAL_CAN_IRQHandler+0x42>
        if ((tsrflags & CAN_TSR_ALST0) != RESET)
 800150e:	f016 0f04 	tst.w	r6, #4
 8001512:	d130      	bne.n	8001576 <HAL_CAN_IRQHandler+0x98>
        else if ((tsrflags & CAN_TSR_TERR0) != RESET)
 8001514:	f016 0f08 	tst.w	r6, #8
 8001518:	d007      	beq.n	800152a <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800151a:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
 800151e:	e00b      	b.n	8001538 <HAL_CAN_IRQHandler+0x5a>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001520:	f7ff ffd1 	bl	80014c6 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001524:	f04f 0b00 	mov.w	fp, #0
 8001528:	e006      	b.n	8001538 <HAL_CAN_IRQHandler+0x5a>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800152a:	f7ff ffcf 	bl	80014cc <HAL_CAN_TxMailbox0AbortCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800152e:	f04f 0b00 	mov.w	fp, #0
 8001532:	e001      	b.n	8001538 <HAL_CAN_IRQHandler+0x5a>
 8001534:	f04f 0b00 	mov.w	fp, #0
    if ((tsrflags & CAN_TSR_RQCP1) != RESET)
 8001538:	f416 7f80 	tst.w	r6, #256	; 0x100
 800153c:	d00b      	beq.n	8001556 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800153e:	682b      	ldr	r3, [r5, #0]
 8001540:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001544:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != RESET)
 8001546:	f416 7f00 	tst.w	r6, #512	; 0x200
 800154a:	d117      	bne.n	800157c <HAL_CAN_IRQHandler+0x9e>
        if ((tsrflags & CAN_TSR_ALST1) != RESET)
 800154c:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8001550:	d018      	beq.n	8001584 <HAL_CAN_IRQHandler+0xa6>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001552:	f44b 5b00 	orr.w	fp, fp, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != RESET)
 8001556:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 800155a:	d02d      	beq.n	80015b8 <HAL_CAN_IRQHandler+0xda>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800155c:	682b      	ldr	r3, [r5, #0]
 800155e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001562:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != RESET)
 8001564:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8001568:	d116      	bne.n	8001598 <HAL_CAN_IRQHandler+0xba>
        if ((tsrflags & CAN_TSR_ALST2) != RESET)
 800156a:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 800156e:	d017      	beq.n	80015a0 <HAL_CAN_IRQHandler+0xc2>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001570:	f44b 4b00 	orr.w	fp, fp, #32768	; 0x8000
 8001574:	e020      	b.n	80015b8 <HAL_CAN_IRQHandler+0xda>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001576:	f44f 6b00 	mov.w	fp, #2048	; 0x800
 800157a:	e7dd      	b.n	8001538 <HAL_CAN_IRQHandler+0x5a>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800157c:	4628      	mov	r0, r5
 800157e:	f7ff ffa3 	bl	80014c8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001582:	e7e8      	b.n	8001556 <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != RESET)
 8001584:	f416 6f00 	tst.w	r6, #2048	; 0x800
 8001588:	d002      	beq.n	8001590 <HAL_CAN_IRQHandler+0xb2>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800158a:	f44b 4b80 	orr.w	fp, fp, #16384	; 0x4000
 800158e:	e7e2      	b.n	8001556 <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001590:	4628      	mov	r0, r5
 8001592:	f7ff ff9c 	bl	80014ce <HAL_CAN_TxMailbox1AbortCallback>
 8001596:	e7de      	b.n	8001556 <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001598:	4628      	mov	r0, r5
 800159a:	f7ff ff96 	bl	80014ca <HAL_CAN_TxMailbox2CompleteCallback>
 800159e:	e00b      	b.n	80015b8 <HAL_CAN_IRQHandler+0xda>
        else if ((tsrflags & CAN_TSR_TERR2) != RESET)
 80015a0:	f416 2f00 	tst.w	r6, #524288	; 0x80000
 80015a4:	d002      	beq.n	80015ac <HAL_CAN_IRQHandler+0xce>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80015a6:	f44b 3b80 	orr.w	fp, fp, #65536	; 0x10000
 80015aa:	e005      	b.n	80015b8 <HAL_CAN_IRQHandler+0xda>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80015ac:	4628      	mov	r0, r5
 80015ae:	f7ff ff8f 	bl	80014d0 <HAL_CAN_TxMailbox2AbortCallback>
 80015b2:	e001      	b.n	80015b8 <HAL_CAN_IRQHandler+0xda>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80015b4:	f04f 0b00 	mov.w	fp, #0
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != RESET)
 80015b8:	f014 0f08 	tst.w	r4, #8
 80015bc:	d007      	beq.n	80015ce <HAL_CAN_IRQHandler+0xf0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != RESET)
 80015be:	f019 0f10 	tst.w	r9, #16
 80015c2:	d004      	beq.n	80015ce <HAL_CAN_IRQHandler+0xf0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80015c4:	f44b 7b00 	orr.w	fp, fp, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80015c8:	682b      	ldr	r3, [r5, #0]
 80015ca:	2210      	movs	r2, #16
 80015cc:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != RESET)
 80015ce:	f014 0f04 	tst.w	r4, #4
 80015d2:	d002      	beq.n	80015da <HAL_CAN_IRQHandler+0xfc>
    if ((rf0rflags & CAN_RF0R_FULL0) != RESET)
 80015d4:	f019 0f08 	tst.w	r9, #8
 80015d8:	d160      	bne.n	800169c <HAL_CAN_IRQHandler+0x1be>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != RESET)
 80015da:	f014 0f02 	tst.w	r4, #2
 80015de:	d004      	beq.n	80015ea <HAL_CAN_IRQHandler+0x10c>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != RESET)
 80015e0:	682b      	ldr	r3, [r5, #0]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	f013 0f03 	tst.w	r3, #3
 80015e8:	d15f      	bne.n	80016aa <HAL_CAN_IRQHandler+0x1cc>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != RESET)
 80015ea:	f014 0f40 	tst.w	r4, #64	; 0x40
 80015ee:	d007      	beq.n	8001600 <HAL_CAN_IRQHandler+0x122>
    if ((rf1rflags & CAN_RF1R_FOVR1) != RESET)
 80015f0:	f018 0f10 	tst.w	r8, #16
 80015f4:	d004      	beq.n	8001600 <HAL_CAN_IRQHandler+0x122>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80015f6:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80015fa:	682b      	ldr	r3, [r5, #0]
 80015fc:	2210      	movs	r2, #16
 80015fe:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != RESET)
 8001600:	f014 0f20 	tst.w	r4, #32
 8001604:	d002      	beq.n	800160c <HAL_CAN_IRQHandler+0x12e>
    if ((rf1rflags & CAN_RF1R_FULL1) != RESET)
 8001606:	f018 0f08 	tst.w	r8, #8
 800160a:	d152      	bne.n	80016b2 <HAL_CAN_IRQHandler+0x1d4>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != RESET)
 800160c:	f014 0f10 	tst.w	r4, #16
 8001610:	d004      	beq.n	800161c <HAL_CAN_IRQHandler+0x13e>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != RESET)
 8001612:	682b      	ldr	r3, [r5, #0]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	f013 0f03 	tst.w	r3, #3
 800161a:	d151      	bne.n	80016c0 <HAL_CAN_IRQHandler+0x1e2>
  if ((interrupts & CAN_IT_SLEEP_ACK) != RESET)
 800161c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8001620:	d002      	beq.n	8001628 <HAL_CAN_IRQHandler+0x14a>
    if ((msrflags & CAN_MSR_SLAKI) != RESET)
 8001622:	f017 0f10 	tst.w	r7, #16
 8001626:	d14f      	bne.n	80016c8 <HAL_CAN_IRQHandler+0x1ea>
  if ((interrupts & CAN_IT_WAKEUP) != RESET)
 8001628:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 800162c:	d002      	beq.n	8001634 <HAL_CAN_IRQHandler+0x156>
    if ((msrflags & CAN_MSR_WKUI) != RESET)
 800162e:	f017 0f08 	tst.w	r7, #8
 8001632:	d150      	bne.n	80016d6 <HAL_CAN_IRQHandler+0x1f8>
  if ((interrupts & CAN_IT_ERROR) != RESET)
 8001634:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001638:	d067      	beq.n	800170a <HAL_CAN_IRQHandler+0x22c>
    if ((msrflags & CAN_MSR_ERRI) != RESET)
 800163a:	f017 0f04 	tst.w	r7, #4
 800163e:	d061      	beq.n	8001704 <HAL_CAN_IRQHandler+0x226>
      if (((interrupts & CAN_IT_ERROR_WARNING) != RESET) &&
 8001640:	f414 7f80 	tst.w	r4, #256	; 0x100
 8001644:	d004      	beq.n	8001650 <HAL_CAN_IRQHandler+0x172>
 8001646:	f01a 0f01 	tst.w	sl, #1
 800164a:	d001      	beq.n	8001650 <HAL_CAN_IRQHandler+0x172>
        errorcode |= HAL_CAN_ERROR_EWG;
 800164c:	f04b 0b01 	orr.w	fp, fp, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != RESET) &&
 8001650:	f414 7f00 	tst.w	r4, #512	; 0x200
 8001654:	d004      	beq.n	8001660 <HAL_CAN_IRQHandler+0x182>
 8001656:	f01a 0f02 	tst.w	sl, #2
 800165a:	d001      	beq.n	8001660 <HAL_CAN_IRQHandler+0x182>
        errorcode |= HAL_CAN_ERROR_EPV;
 800165c:	f04b 0b02 	orr.w	fp, fp, #2
      if (((interrupts & CAN_IT_BUSOFF) != RESET) &&
 8001660:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8001664:	d004      	beq.n	8001670 <HAL_CAN_IRQHandler+0x192>
 8001666:	f01a 0f04 	tst.w	sl, #4
 800166a:	d001      	beq.n	8001670 <HAL_CAN_IRQHandler+0x192>
        errorcode |= HAL_CAN_ERROR_BOF;
 800166c:	f04b 0b04 	orr.w	fp, fp, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != RESET) &&
 8001670:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8001674:	d046      	beq.n	8001704 <HAL_CAN_IRQHandler+0x226>
 8001676:	f01a 0a70 	ands.w	sl, sl, #112	; 0x70
 800167a:	d043      	beq.n	8001704 <HAL_CAN_IRQHandler+0x226>
        switch (esrflags & CAN_ESR_LEC)
 800167c:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8001680:	d048      	beq.n	8001714 <HAL_CAN_IRQHandler+0x236>
 8001682:	d92f      	bls.n	80016e4 <HAL_CAN_IRQHandler+0x206>
 8001684:	f1ba 0f50 	cmp.w	sl, #80	; 0x50
 8001688:	d047      	beq.n	800171a <HAL_CAN_IRQHandler+0x23c>
 800168a:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 800168e:	d047      	beq.n	8001720 <HAL_CAN_IRQHandler+0x242>
 8001690:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8001694:	d131      	bne.n	80016fa <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_BR;
 8001696:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
            break;
 800169a:	e02e      	b.n	80016fa <HAL_CAN_IRQHandler+0x21c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800169c:	682b      	ldr	r3, [r5, #0]
 800169e:	2208      	movs	r2, #8
 80016a0:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80016a2:	4628      	mov	r0, r5
 80016a4:	f7ff ff15 	bl	80014d2 <HAL_CAN_RxFifo0FullCallback>
 80016a8:	e797      	b.n	80015da <HAL_CAN_IRQHandler+0xfc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80016aa:	4628      	mov	r0, r5
 80016ac:	f001 fdac 	bl	8003208 <HAL_CAN_RxFifo0MsgPendingCallback>
 80016b0:	e79b      	b.n	80015ea <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80016b2:	682b      	ldr	r3, [r5, #0]
 80016b4:	2208      	movs	r2, #8
 80016b6:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80016b8:	4628      	mov	r0, r5
 80016ba:	f7ff ff0c 	bl	80014d6 <HAL_CAN_RxFifo1FullCallback>
 80016be:	e7a5      	b.n	800160c <HAL_CAN_IRQHandler+0x12e>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80016c0:	4628      	mov	r0, r5
 80016c2:	f7ff ff07 	bl	80014d4 <HAL_CAN_RxFifo1MsgPendingCallback>
 80016c6:	e7a9      	b.n	800161c <HAL_CAN_IRQHandler+0x13e>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80016c8:	682b      	ldr	r3, [r5, #0]
 80016ca:	2210      	movs	r2, #16
 80016cc:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 80016ce:	4628      	mov	r0, r5
 80016d0:	f7ff ff02 	bl	80014d8 <HAL_CAN_SleepCallback>
 80016d4:	e7a8      	b.n	8001628 <HAL_CAN_IRQHandler+0x14a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80016d6:	682b      	ldr	r3, [r5, #0]
 80016d8:	2208      	movs	r2, #8
 80016da:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80016dc:	4628      	mov	r0, r5
 80016de:	f7ff fefc 	bl	80014da <HAL_CAN_WakeUpFromRxMsgCallback>
 80016e2:	e7a7      	b.n	8001634 <HAL_CAN_IRQHandler+0x156>
        switch (esrflags & CAN_ESR_LEC)
 80016e4:	f1ba 0f10 	cmp.w	sl, #16
 80016e8:	d005      	beq.n	80016f6 <HAL_CAN_IRQHandler+0x218>
 80016ea:	f1ba 0f20 	cmp.w	sl, #32
 80016ee:	d104      	bne.n	80016fa <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_FOR;
 80016f0:	f04b 0b10 	orr.w	fp, fp, #16
            break;
 80016f4:	e001      	b.n	80016fa <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_STF;
 80016f6:	f04b 0b08 	orr.w	fp, fp, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80016fa:	682a      	ldr	r2, [r5, #0]
 80016fc:	6993      	ldr	r3, [r2, #24]
 80016fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001702:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001704:	682b      	ldr	r3, [r5, #0]
 8001706:	2204      	movs	r2, #4
 8001708:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 800170a:	f1bb 0f00 	cmp.w	fp, #0
 800170e:	d10a      	bne.n	8001726 <HAL_CAN_IRQHandler+0x248>
}
 8001710:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            errorcode |= HAL_CAN_ERROR_ACK;
 8001714:	f04b 0b20 	orr.w	fp, fp, #32
            break;
 8001718:	e7ef      	b.n	80016fa <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_BD;
 800171a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
            break;
 800171e:	e7ec      	b.n	80016fa <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001720:	f44b 7b80 	orr.w	fp, fp, #256	; 0x100
            break;
 8001724:	e7e9      	b.n	80016fa <HAL_CAN_IRQHandler+0x21c>
    hcan->ErrorCode |= errorcode;
 8001726:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001728:	ea43 030b 	orr.w	r3, r3, fp
 800172c:	626b      	str	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 800172e:	4628      	mov	r0, r5
 8001730:	f7ff fed4 	bl	80014dc <HAL_CAN_ErrorCallback>
}
 8001734:	e7ec      	b.n	8001710 <HAL_CAN_IRQHandler+0x232>
	...

08001738 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001738:	4a07      	ldr	r2, [pc, #28]	; (8001758 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800173a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800173c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001740:	041b      	lsls	r3, r3, #16
 8001742:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001744:	0200      	lsls	r0, r0, #8
 8001746:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800174a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 800174c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001750:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001754:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001756:	4770      	bx	lr
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800175c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800175e:	4b17      	ldr	r3, [pc, #92]	; (80017bc <HAL_NVIC_SetPriority+0x60>)
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001766:	f1c3 0407 	rsb	r4, r3, #7
 800176a:	2c04      	cmp	r4, #4
 800176c:	bf28      	it	cs
 800176e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001770:	1d1d      	adds	r5, r3, #4
 8001772:	2d06      	cmp	r5, #6
 8001774:	d918      	bls.n	80017a8 <HAL_NVIC_SetPriority+0x4c>
 8001776:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	f04f 35ff 	mov.w	r5, #4294967295
 800177c:	fa05 f404 	lsl.w	r4, r5, r4
 8001780:	ea21 0104 	bic.w	r1, r1, r4
 8001784:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001786:	fa05 f303 	lsl.w	r3, r5, r3
 800178a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8001790:	2800      	cmp	r0, #0
 8001792:	db0b      	blt.n	80017ac <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001794:	0109      	lsls	r1, r1, #4
 8001796:	b2c9      	uxtb	r1, r1
 8001798:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800179c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80017a0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80017a4:	bc30      	pop	{r4, r5}
 80017a6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a8:	2300      	movs	r3, #0
 80017aa:	e7e5      	b.n	8001778 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ac:	f000 000f 	and.w	r0, r0, #15
 80017b0:	0109      	lsls	r1, r1, #4
 80017b2:	b2c9      	uxtb	r1, r1
 80017b4:	4b02      	ldr	r3, [pc, #8]	; (80017c0 <HAL_NVIC_SetPriority+0x64>)
 80017b6:	5419      	strb	r1, [r3, r0]
 80017b8:	e7f4      	b.n	80017a4 <HAL_NVIC_SetPriority+0x48>
 80017ba:	bf00      	nop
 80017bc:	e000ed00 	.word	0xe000ed00
 80017c0:	e000ed14 	.word	0xe000ed14

080017c4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80017c4:	f000 021f 	and.w	r2, r0, #31
 80017c8:	0940      	lsrs	r0, r0, #5
 80017ca:	2301      	movs	r3, #1
 80017cc:	4093      	lsls	r3, r2
 80017ce:	4a02      	ldr	r2, [pc, #8]	; (80017d8 <HAL_NVIC_EnableIRQ+0x14>)
 80017d0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000e100 	.word	0xe000e100

080017dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017dc:	3801      	subs	r0, #1
 80017de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80017e2:	d20a      	bcs.n	80017fa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_SYSTICK_Config+0x24>)
 80017e6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e8:	4a06      	ldr	r2, [pc, #24]	; (8001804 <HAL_SYSTICK_Config+0x28>)
 80017ea:	21f0      	movs	r1, #240	; 0xf0
 80017ec:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f0:	2000      	movs	r0, #0
 80017f2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f4:	2207      	movs	r2, #7
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80017fa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000e010 	.word	0xe000e010
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001808:	2804      	cmp	r0, #4
 800180a:	d005      	beq.n	8001818 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800180c:	4a05      	ldr	r2, [pc, #20]	; (8001824 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800180e:	6813      	ldr	r3, [r2, #0]
 8001810:	f023 0304 	bic.w	r3, r3, #4
 8001814:	6013      	str	r3, [r2, #0]
  }
}
 8001816:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001818:	4a02      	ldr	r2, [pc, #8]	; (8001824 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800181a:	6813      	ldr	r3, [r2, #0]
 800181c:	f043 0304 	orr.w	r3, r3, #4
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	4770      	bx	lr
 8001824:	e000e010 	.word	0xe000e010

08001828 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001828:	4770      	bx	lr

0800182a <HAL_SYSTICK_IRQHandler>:
{
 800182a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800182c:	f7ff fffc 	bl	8001828 <HAL_SYSTICK_Callback>
}
 8001830:	bd08      	pop	{r3, pc}

08001832 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001832:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d003      	beq.n	8001844 <HAL_DMA_Abort_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001840:	2001      	movs	r0, #1
 8001842:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001844:	2305      	movs	r3, #5
 8001846:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800184a:	6802      	ldr	r2, [r0, #0]
 800184c:	6813      	ldr	r3, [r2, #0]
 800184e:	f023 0301 	bic.w	r3, r3, #1
 8001852:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8001854:	2000      	movs	r0, #0
}
 8001856:	4770      	bx	lr

08001858 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001858:	2300      	movs	r3, #0
 800185a:	2b0f      	cmp	r3, #15
 800185c:	f200 80e3 	bhi.w	8001a26 <HAL_GPIO_Init+0x1ce>
{
 8001860:	b4f0      	push	{r4, r5, r6, r7}
 8001862:	b082      	sub	sp, #8
 8001864:	e039      	b.n	80018da <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001866:	2209      	movs	r2, #9
 8001868:	e000      	b.n	800186c <HAL_GPIO_Init+0x14>
 800186a:	2200      	movs	r2, #0
 800186c:	40b2      	lsls	r2, r6
 800186e:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001870:	3402      	adds	r4, #2
 8001872:	4e6d      	ldr	r6, [pc, #436]	; (8001a28 <HAL_GPIO_Init+0x1d0>)
 8001874:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001878:	4a6c      	ldr	r2, [pc, #432]	; (8001a2c <HAL_GPIO_Init+0x1d4>)
 800187a:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800187c:	43ea      	mvns	r2, r5
 800187e:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001882:	684f      	ldr	r7, [r1, #4]
 8001884:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001888:	d001      	beq.n	800188e <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 800188a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 800188e:	4c67      	ldr	r4, [pc, #412]	; (8001a2c <HAL_GPIO_Init+0x1d4>)
 8001890:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8001892:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001894:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001898:	684f      	ldr	r7, [r1, #4]
 800189a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800189e:	d001      	beq.n	80018a4 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 80018a0:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 80018a4:	4c61      	ldr	r4, [pc, #388]	; (8001a2c <HAL_GPIO_Init+0x1d4>)
 80018a6:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018a8:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80018aa:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018ae:	684f      	ldr	r7, [r1, #4]
 80018b0:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80018b4:	d001      	beq.n	80018ba <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 80018b6:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 80018ba:	4c5c      	ldr	r4, [pc, #368]	; (8001a2c <HAL_GPIO_Init+0x1d4>)
 80018bc:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80018be:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80018c0:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018c2:	684e      	ldr	r6, [r1, #4]
 80018c4:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80018c8:	d001      	beq.n	80018ce <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80018ca:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 80018ce:	4c57      	ldr	r4, [pc, #348]	; (8001a2c <HAL_GPIO_Init+0x1d4>)
 80018d0:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018d2:	3301      	adds	r3, #1
 80018d4:	2b0f      	cmp	r3, #15
 80018d6:	f200 80a3 	bhi.w	8001a20 <HAL_GPIO_Init+0x1c8>
    ioposition = 0x01U << position;
 80018da:	2201      	movs	r2, #1
 80018dc:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018de:	680c      	ldr	r4, [r1, #0]
 80018e0:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 80018e4:	42aa      	cmp	r2, r5
 80018e6:	d1f4      	bne.n	80018d2 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018e8:	684c      	ldr	r4, [r1, #4]
 80018ea:	2c02      	cmp	r4, #2
 80018ec:	d001      	beq.n	80018f2 <HAL_GPIO_Init+0x9a>
 80018ee:	2c12      	cmp	r4, #18
 80018f0:	d110      	bne.n	8001914 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 80018f2:	08de      	lsrs	r6, r3, #3
 80018f4:	3608      	adds	r6, #8
 80018f6:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018fa:	f003 0407 	and.w	r4, r3, #7
 80018fe:	00a7      	lsls	r7, r4, #2
 8001900:	240f      	movs	r4, #15
 8001902:	40bc      	lsls	r4, r7
 8001904:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001908:	690c      	ldr	r4, [r1, #16]
 800190a:	40bc      	lsls	r4, r7
 800190c:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001910:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8001914:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001916:	005f      	lsls	r7, r3, #1
 8001918:	2603      	movs	r6, #3
 800191a:	40be      	lsls	r6, r7
 800191c:	43f6      	mvns	r6, r6
 800191e:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001922:	684c      	ldr	r4, [r1, #4]
 8001924:	f004 0403 	and.w	r4, r4, #3
 8001928:	40bc      	lsls	r4, r7
 800192a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800192e:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001930:	684c      	ldr	r4, [r1, #4]
 8001932:	f104 3cff 	add.w	ip, r4, #4294967295
 8001936:	f1bc 0f01 	cmp.w	ip, #1
 800193a:	d903      	bls.n	8001944 <HAL_GPIO_Init+0xec>
 800193c:	2c11      	cmp	r4, #17
 800193e:	d001      	beq.n	8001944 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001940:	2c12      	cmp	r4, #18
 8001942:	d110      	bne.n	8001966 <HAL_GPIO_Init+0x10e>
        temp = GPIOx->OSPEEDR; 
 8001944:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001946:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800194a:	68cc      	ldr	r4, [r1, #12]
 800194c:	40bc      	lsls	r4, r7
 800194e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8001952:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001954:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001956:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800195a:	684c      	ldr	r4, [r1, #4]
 800195c:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8001960:	409c      	lsls	r4, r3
 8001962:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8001964:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8001966:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001968:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800196a:	688a      	ldr	r2, [r1, #8]
 800196c:	40ba      	lsls	r2, r7
 800196e:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8001970:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001972:	684a      	ldr	r2, [r1, #4]
 8001974:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001978:	d0ab      	beq.n	80018d2 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197a:	2200      	movs	r2, #0
 800197c:	9201      	str	r2, [sp, #4]
 800197e:	4a2c      	ldr	r2, [pc, #176]	; (8001a30 <HAL_GPIO_Init+0x1d8>)
 8001980:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001982:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001986:	6454      	str	r4, [r2, #68]	; 0x44
 8001988:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800198a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800198e:	9201      	str	r2, [sp, #4]
 8001990:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001992:	089c      	lsrs	r4, r3, #2
 8001994:	1ca6      	adds	r6, r4, #2
 8001996:	4a24      	ldr	r2, [pc, #144]	; (8001a28 <HAL_GPIO_Init+0x1d0>)
 8001998:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800199c:	f003 0203 	and.w	r2, r3, #3
 80019a0:	0096      	lsls	r6, r2, #2
 80019a2:	220f      	movs	r2, #15
 80019a4:	40b2      	lsls	r2, r6
 80019a6:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019aa:	4a22      	ldr	r2, [pc, #136]	; (8001a34 <HAL_GPIO_Init+0x1dc>)
 80019ac:	4290      	cmp	r0, r2
 80019ae:	f43f af5c 	beq.w	800186a <HAL_GPIO_Init+0x12>
 80019b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019b6:	4290      	cmp	r0, r2
 80019b8:	d022      	beq.n	8001a00 <HAL_GPIO_Init+0x1a8>
 80019ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019be:	4290      	cmp	r0, r2
 80019c0:	d020      	beq.n	8001a04 <HAL_GPIO_Init+0x1ac>
 80019c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019c6:	4290      	cmp	r0, r2
 80019c8:	d01e      	beq.n	8001a08 <HAL_GPIO_Init+0x1b0>
 80019ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019ce:	4290      	cmp	r0, r2
 80019d0:	d01c      	beq.n	8001a0c <HAL_GPIO_Init+0x1b4>
 80019d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019d6:	4290      	cmp	r0, r2
 80019d8:	d01a      	beq.n	8001a10 <HAL_GPIO_Init+0x1b8>
 80019da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019de:	4290      	cmp	r0, r2
 80019e0:	d018      	beq.n	8001a14 <HAL_GPIO_Init+0x1bc>
 80019e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019e6:	4290      	cmp	r0, r2
 80019e8:	d016      	beq.n	8001a18 <HAL_GPIO_Init+0x1c0>
 80019ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019ee:	4290      	cmp	r0, r2
 80019f0:	d014      	beq.n	8001a1c <HAL_GPIO_Init+0x1c4>
 80019f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019f6:	4290      	cmp	r0, r2
 80019f8:	f43f af35 	beq.w	8001866 <HAL_GPIO_Init+0xe>
 80019fc:	220a      	movs	r2, #10
 80019fe:	e735      	b.n	800186c <HAL_GPIO_Init+0x14>
 8001a00:	2201      	movs	r2, #1
 8001a02:	e733      	b.n	800186c <HAL_GPIO_Init+0x14>
 8001a04:	2202      	movs	r2, #2
 8001a06:	e731      	b.n	800186c <HAL_GPIO_Init+0x14>
 8001a08:	2203      	movs	r2, #3
 8001a0a:	e72f      	b.n	800186c <HAL_GPIO_Init+0x14>
 8001a0c:	2204      	movs	r2, #4
 8001a0e:	e72d      	b.n	800186c <HAL_GPIO_Init+0x14>
 8001a10:	2205      	movs	r2, #5
 8001a12:	e72b      	b.n	800186c <HAL_GPIO_Init+0x14>
 8001a14:	2206      	movs	r2, #6
 8001a16:	e729      	b.n	800186c <HAL_GPIO_Init+0x14>
 8001a18:	2207      	movs	r2, #7
 8001a1a:	e727      	b.n	800186c <HAL_GPIO_Init+0x14>
 8001a1c:	2208      	movs	r2, #8
 8001a1e:	e725      	b.n	800186c <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8001a20:	b002      	add	sp, #8
 8001a22:	bcf0      	pop	{r4, r5, r6, r7}
 8001a24:	4770      	bx	lr
 8001a26:	4770      	bx	lr
 8001a28:	40013800 	.word	0x40013800
 8001a2c:	40013c00 	.word	0x40013c00
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40020000 	.word	0x40020000

08001a38 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a38:	b912      	cbnz	r2, 8001a40 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a3a:	0409      	lsls	r1, r1, #16
 8001a3c:	6181      	str	r1, [r0, #24]
  }
}
 8001a3e:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8001a40:	6181      	str	r1, [r0, #24]
 8001a42:	4770      	bx	lr

08001a44 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001a44:	6943      	ldr	r3, [r0, #20]
 8001a46:	4059      	eors	r1, r3
 8001a48:	6141      	str	r1, [r0, #20]
}
 8001a4a:	4770      	bx	lr

08001a4c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a4c:	2800      	cmp	r0, #0
 8001a4e:	f000 81bb 	beq.w	8001dc8 <HAL_RCC_OscConfig+0x37c>
{
 8001a52:	b570      	push	{r4, r5, r6, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a58:	6803      	ldr	r3, [r0, #0]
 8001a5a:	f013 0f01 	tst.w	r3, #1
 8001a5e:	d03b      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a60:	4ba7      	ldr	r3, [pc, #668]	; (8001d00 <HAL_RCC_OscConfig+0x2b4>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 030c 	and.w	r3, r3, #12
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	d02c      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a6c:	4ba4      	ldr	r3, [pc, #656]	; (8001d00 <HAL_RCC_OscConfig+0x2b4>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d021      	beq.n	8001abc <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a78:	6863      	ldr	r3, [r4, #4]
 8001a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a7e:	d04f      	beq.n	8001b20 <HAL_RCC_OscConfig+0xd4>
 8001a80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a84:	d052      	beq.n	8001b2c <HAL_RCC_OscConfig+0xe0>
 8001a86:	4b9e      	ldr	r3, [pc, #632]	; (8001d00 <HAL_RCC_OscConfig+0x2b4>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a96:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a98:	6863      	ldr	r3, [r4, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d050      	beq.n	8001b40 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9e:	f7ff fa5d 	bl	8000f5c <HAL_GetTick>
 8001aa2:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa4:	4b96      	ldr	r3, [pc, #600]	; (8001d00 <HAL_RCC_OscConfig+0x2b4>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001aac:	d114      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aae:	f7ff fa55 	bl	8000f5c <HAL_GetTick>
 8001ab2:	1b40      	subs	r0, r0, r5
 8001ab4:	2864      	cmp	r0, #100	; 0x64
 8001ab6:	d9f5      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001ab8:	2003      	movs	r0, #3
 8001aba:	e18a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001abc:	4b90      	ldr	r3, [pc, #576]	; (8001d00 <HAL_RCC_OscConfig+0x2b4>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001ac4:	d0d8      	beq.n	8001a78 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac6:	4b8e      	ldr	r3, [pc, #568]	; (8001d00 <HAL_RCC_OscConfig+0x2b4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001ace:	d003      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x8c>
 8001ad0:	6863      	ldr	r3, [r4, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 817a 	beq.w	8001dcc <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad8:	6823      	ldr	r3, [r4, #0]
 8001ada:	f013 0f02 	tst.w	r3, #2
 8001ade:	d055      	beq.n	8001b8c <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ae0:	4b87      	ldr	r3, [pc, #540]	; (8001d00 <HAL_RCC_OscConfig+0x2b4>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f013 0f0c 	tst.w	r3, #12
 8001ae8:	d03e      	beq.n	8001b68 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aea:	4b85      	ldr	r3, [pc, #532]	; (8001d00 <HAL_RCC_OscConfig+0x2b4>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d033      	beq.n	8001b5e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001af6:	68e3      	ldr	r3, [r4, #12]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d068      	beq.n	8001bce <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001afc:	4b81      	ldr	r3, [pc, #516]	; (8001d04 <HAL_RCC_OscConfig+0x2b8>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b02:	f7ff fa2b 	bl	8000f5c <HAL_GetTick>
 8001b06:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b08:	4b7d      	ldr	r3, [pc, #500]	; (8001d00 <HAL_RCC_OscConfig+0x2b4>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f013 0f02 	tst.w	r3, #2
 8001b10:	d154      	bne.n	8001bbc <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b12:	f7ff fa23 	bl	8000f5c <HAL_GetTick>
 8001b16:	1b40      	subs	r0, r0, r5
 8001b18:	2802      	cmp	r0, #2
 8001b1a:	d9f5      	bls.n	8001b08 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	e158      	b.n	8001dd2 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b20:	4a77      	ldr	r2, [pc, #476]	; (8001d00 <HAL_RCC_OscConfig+0x2b4>)
 8001b22:	6813      	ldr	r3, [r2, #0]
 8001b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	e7b5      	b.n	8001a98 <HAL_RCC_OscConfig+0x4c>
 8001b2c:	4b74      	ldr	r3, [pc, #464]	; (8001d00 <HAL_RCC_OscConfig+0x2b4>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	e7ab      	b.n	8001a98 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001b40:	f7ff fa0c 	bl	8000f5c <HAL_GetTick>
 8001b44:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b46:	4b6e      	ldr	r3, [pc, #440]	; (8001d00 <HAL_RCC_OscConfig+0x2b4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001b4e:	d0c3      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b50:	f7ff fa04 	bl	8000f5c <HAL_GetTick>
 8001b54:	1b40      	subs	r0, r0, r5
 8001b56:	2864      	cmp	r0, #100	; 0x64
 8001b58:	d9f5      	bls.n	8001b46 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001b5a:	2003      	movs	r0, #3
 8001b5c:	e139      	b.n	8001dd2 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b5e:	4b68      	ldr	r3, [pc, #416]	; (8001d00 <HAL_RCC_OscConfig+0x2b4>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001b66:	d1c6      	bne.n	8001af6 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b68:	4b65      	ldr	r3, [pc, #404]	; (8001d00 <HAL_RCC_OscConfig+0x2b4>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f013 0f02 	tst.w	r3, #2
 8001b70:	d004      	beq.n	8001b7c <HAL_RCC_OscConfig+0x130>
 8001b72:	68e3      	ldr	r3, [r4, #12]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d001      	beq.n	8001b7c <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8001b78:	2001      	movs	r0, #1
 8001b7a:	e12a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b7c:	4a60      	ldr	r2, [pc, #384]	; (8001d00 <HAL_RCC_OscConfig+0x2b4>)
 8001b7e:	6813      	ldr	r3, [r2, #0]
 8001b80:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001b84:	6921      	ldr	r1, [r4, #16]
 8001b86:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001b8a:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b8c:	6823      	ldr	r3, [r4, #0]
 8001b8e:	f013 0f08 	tst.w	r3, #8
 8001b92:	d040      	beq.n	8001c16 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b94:	6963      	ldr	r3, [r4, #20]
 8001b96:	b363      	cbz	r3, 8001bf2 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b98:	4b5b      	ldr	r3, [pc, #364]	; (8001d08 <HAL_RCC_OscConfig+0x2bc>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9e:	f7ff f9dd 	bl	8000f5c <HAL_GetTick>
 8001ba2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba4:	4b56      	ldr	r3, [pc, #344]	; (8001d00 <HAL_RCC_OscConfig+0x2b4>)
 8001ba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ba8:	f013 0f02 	tst.w	r3, #2
 8001bac:	d133      	bne.n	8001c16 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bae:	f7ff f9d5 	bl	8000f5c <HAL_GetTick>
 8001bb2:	1b40      	subs	r0, r0, r5
 8001bb4:	2802      	cmp	r0, #2
 8001bb6:	d9f5      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001bb8:	2003      	movs	r0, #3
 8001bba:	e10a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bbc:	4a50      	ldr	r2, [pc, #320]	; (8001d00 <HAL_RCC_OscConfig+0x2b4>)
 8001bbe:	6813      	ldr	r3, [r2, #0]
 8001bc0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001bc4:	6921      	ldr	r1, [r4, #16]
 8001bc6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	e7de      	b.n	8001b8c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8001bce:	4b4d      	ldr	r3, [pc, #308]	; (8001d04 <HAL_RCC_OscConfig+0x2b8>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bd4:	f7ff f9c2 	bl	8000f5c <HAL_GetTick>
 8001bd8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bda:	4b49      	ldr	r3, [pc, #292]	; (8001d00 <HAL_RCC_OscConfig+0x2b4>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f013 0f02 	tst.w	r3, #2
 8001be2:	d0d3      	beq.n	8001b8c <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001be4:	f7ff f9ba 	bl	8000f5c <HAL_GetTick>
 8001be8:	1b40      	subs	r0, r0, r5
 8001bea:	2802      	cmp	r0, #2
 8001bec:	d9f5      	bls.n	8001bda <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8001bee:	2003      	movs	r0, #3
 8001bf0:	e0ef      	b.n	8001dd2 <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bf2:	4b45      	ldr	r3, [pc, #276]	; (8001d08 <HAL_RCC_OscConfig+0x2bc>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf8:	f7ff f9b0 	bl	8000f5c <HAL_GetTick>
 8001bfc:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bfe:	4b40      	ldr	r3, [pc, #256]	; (8001d00 <HAL_RCC_OscConfig+0x2b4>)
 8001c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c02:	f013 0f02 	tst.w	r3, #2
 8001c06:	d006      	beq.n	8001c16 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c08:	f7ff f9a8 	bl	8000f5c <HAL_GetTick>
 8001c0c:	1b40      	subs	r0, r0, r5
 8001c0e:	2802      	cmp	r0, #2
 8001c10:	d9f5      	bls.n	8001bfe <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8001c12:	2003      	movs	r0, #3
 8001c14:	e0dd      	b.n	8001dd2 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c16:	6823      	ldr	r3, [r4, #0]
 8001c18:	f013 0f04 	tst.w	r3, #4
 8001c1c:	d079      	beq.n	8001d12 <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1e:	4b38      	ldr	r3, [pc, #224]	; (8001d00 <HAL_RCC_OscConfig+0x2b4>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001c26:	d133      	bne.n	8001c90 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c28:	2300      	movs	r3, #0
 8001c2a:	9301      	str	r3, [sp, #4]
 8001c2c:	4b34      	ldr	r3, [pc, #208]	; (8001d00 <HAL_RCC_OscConfig+0x2b4>)
 8001c2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c30:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c34:	641a      	str	r2, [r3, #64]	; 0x40
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	9301      	str	r3, [sp, #4]
 8001c3e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001c40:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c42:	4b32      	ldr	r3, [pc, #200]	; (8001d0c <HAL_RCC_OscConfig+0x2c0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001c4a:	d023      	beq.n	8001c94 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c4c:	68a3      	ldr	r3, [r4, #8]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d034      	beq.n	8001cbc <HAL_RCC_OscConfig+0x270>
 8001c52:	2b05      	cmp	r3, #5
 8001c54:	d038      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x27c>
 8001c56:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <HAL_RCC_OscConfig+0x2b4>)
 8001c58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c5a:	f022 0201 	bic.w	r2, r2, #1
 8001c5e:	671a      	str	r2, [r3, #112]	; 0x70
 8001c60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c62:	f022 0204 	bic.w	r2, r2, #4
 8001c66:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c68:	68a3      	ldr	r3, [r4, #8]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d036      	beq.n	8001cdc <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c6e:	f7ff f975 	bl	8000f5c <HAL_GetTick>
 8001c72:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c74:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <HAL_RCC_OscConfig+0x2b4>)
 8001c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c78:	f013 0f02 	tst.w	r3, #2
 8001c7c:	d148      	bne.n	8001d10 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c7e:	f7ff f96d 	bl	8000f5c <HAL_GetTick>
 8001c82:	1b80      	subs	r0, r0, r6
 8001c84:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c88:	4298      	cmp	r0, r3
 8001c8a:	d9f3      	bls.n	8001c74 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8001c8c:	2003      	movs	r0, #3
 8001c8e:	e0a0      	b.n	8001dd2 <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8001c90:	2500      	movs	r5, #0
 8001c92:	e7d6      	b.n	8001c42 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c94:	4a1d      	ldr	r2, [pc, #116]	; (8001d0c <HAL_RCC_OscConfig+0x2c0>)
 8001c96:	6813      	ldr	r3, [r2, #0]
 8001c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001c9e:	f7ff f95d 	bl	8000f5c <HAL_GetTick>
 8001ca2:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca4:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <HAL_RCC_OscConfig+0x2c0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001cac:	d1ce      	bne.n	8001c4c <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cae:	f7ff f955 	bl	8000f5c <HAL_GetTick>
 8001cb2:	1b80      	subs	r0, r0, r6
 8001cb4:	2802      	cmp	r0, #2
 8001cb6:	d9f5      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8001cb8:	2003      	movs	r0, #3
 8001cba:	e08a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cbc:	4a10      	ldr	r2, [pc, #64]	; (8001d00 <HAL_RCC_OscConfig+0x2b4>)
 8001cbe:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc6:	e7cf      	b.n	8001c68 <HAL_RCC_OscConfig+0x21c>
 8001cc8:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <HAL_RCC_OscConfig+0x2b4>)
 8001cca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ccc:	f042 0204 	orr.w	r2, r2, #4
 8001cd0:	671a      	str	r2, [r3, #112]	; 0x70
 8001cd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001cd4:	f042 0201 	orr.w	r2, r2, #1
 8001cd8:	671a      	str	r2, [r3, #112]	; 0x70
 8001cda:	e7c5      	b.n	8001c68 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cdc:	f7ff f93e 	bl	8000f5c <HAL_GetTick>
 8001ce0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce2:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <HAL_RCC_OscConfig+0x2b4>)
 8001ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce6:	f013 0f02 	tst.w	r3, #2
 8001cea:	d011      	beq.n	8001d10 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cec:	f7ff f936 	bl	8000f5c <HAL_GetTick>
 8001cf0:	1b80      	subs	r0, r0, r6
 8001cf2:	f241 3388 	movw	r3, #5000	; 0x1388
 8001cf6:	4298      	cmp	r0, r3
 8001cf8:	d9f3      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8001cfa:	2003      	movs	r0, #3
 8001cfc:	e069      	b.n	8001dd2 <HAL_RCC_OscConfig+0x386>
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800
 8001d04:	42470000 	.word	0x42470000
 8001d08:	42470e80 	.word	0x42470e80
 8001d0c:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d10:	b9e5      	cbnz	r5, 8001d4c <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d12:	69a3      	ldr	r3, [r4, #24]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d05b      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d18:	4a30      	ldr	r2, [pc, #192]	; (8001ddc <HAL_RCC_OscConfig+0x390>)
 8001d1a:	6892      	ldr	r2, [r2, #8]
 8001d1c:	f002 020c 	and.w	r2, r2, #12
 8001d20:	2a08      	cmp	r2, #8
 8001d22:	d058      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d017      	beq.n	8001d58 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d28:	4b2d      	ldr	r3, [pc, #180]	; (8001de0 <HAL_RCC_OscConfig+0x394>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2e:	f7ff f915 	bl	8000f5c <HAL_GetTick>
 8001d32:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d34:	4b29      	ldr	r3, [pc, #164]	; (8001ddc <HAL_RCC_OscConfig+0x390>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d3c:	d042      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d3e:	f7ff f90d 	bl	8000f5c <HAL_GetTick>
 8001d42:	1b00      	subs	r0, r0, r4
 8001d44:	2802      	cmp	r0, #2
 8001d46:	d9f5      	bls.n	8001d34 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001d48:	2003      	movs	r0, #3
 8001d4a:	e042      	b.n	8001dd2 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d4c:	4a23      	ldr	r2, [pc, #140]	; (8001ddc <HAL_RCC_OscConfig+0x390>)
 8001d4e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001d50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d54:	6413      	str	r3, [r2, #64]	; 0x40
 8001d56:	e7dc      	b.n	8001d12 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8001d58:	4b21      	ldr	r3, [pc, #132]	; (8001de0 <HAL_RCC_OscConfig+0x394>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d5e:	f7ff f8fd 	bl	8000f5c <HAL_GetTick>
 8001d62:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d64:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <HAL_RCC_OscConfig+0x390>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d6c:	d006      	beq.n	8001d7c <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d6e:	f7ff f8f5 	bl	8000f5c <HAL_GetTick>
 8001d72:	1b40      	subs	r0, r0, r5
 8001d74:	2802      	cmp	r0, #2
 8001d76:	d9f5      	bls.n	8001d64 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001d78:	2003      	movs	r0, #3
 8001d7a:	e02a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d7c:	69e3      	ldr	r3, [r4, #28]
 8001d7e:	6a22      	ldr	r2, [r4, #32]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d84:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001d88:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001d8a:	0852      	lsrs	r2, r2, #1
 8001d8c:	3a01      	subs	r2, #1
 8001d8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001d92:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001d94:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001d98:	4a10      	ldr	r2, [pc, #64]	; (8001ddc <HAL_RCC_OscConfig+0x390>)
 8001d9a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001d9c:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <HAL_RCC_OscConfig+0x394>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001da2:	f7ff f8db 	bl	8000f5c <HAL_GetTick>
 8001da6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da8:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <HAL_RCC_OscConfig+0x390>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001db0:	d106      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db2:	f7ff f8d3 	bl	8000f5c <HAL_GetTick>
 8001db6:	1b00      	subs	r0, r0, r4
 8001db8:	2802      	cmp	r0, #2
 8001dba:	d9f5      	bls.n	8001da8 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001dbc:	2003      	movs	r0, #3
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	e006      	b.n	8001dd2 <HAL_RCC_OscConfig+0x386>
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	e004      	b.n	8001dd2 <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8001dc8:	2001      	movs	r0, #1
}
 8001dca:	4770      	bx	lr
        return HAL_ERROR;
 8001dcc:	2001      	movs	r0, #1
 8001dce:	e000      	b.n	8001dd2 <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8001dd0:	2000      	movs	r0, #0
}
 8001dd2:	b002      	add	sp, #8
 8001dd4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001dd6:	2001      	movs	r0, #1
 8001dd8:	e7fb      	b.n	8001dd2 <HAL_RCC_OscConfig+0x386>
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	42470060 	.word	0x42470060

08001de4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001de4:	4b26      	ldr	r3, [pc, #152]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 030c 	and.w	r3, r3, #12
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	d044      	beq.n	8001e7a <HAL_RCC_GetSysClockFreq+0x96>
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d001      	beq.n	8001df8 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001df4:	4823      	ldr	r0, [pc, #140]	; (8001e84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001df6:	4770      	bx	lr
{
 8001df8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dfc:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001e0a:	d013      	beq.n	8001e34 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e0c:	4b1c      	ldr	r3, [pc, #112]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e0e:	6859      	ldr	r1, [r3, #4]
 8001e10:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001e14:	2300      	movs	r3, #0
 8001e16:	481c      	ldr	r0, [pc, #112]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e18:	fba1 0100 	umull	r0, r1, r1, r0
 8001e1c:	f7fe fed4 	bl	8000bc8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e20:	4b17      	ldr	r3, [pc, #92]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001e28:	3301      	adds	r3, #1
 8001e2a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001e2c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001e30:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e34:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001e3c:	461e      	mov	r6, r3
 8001e3e:	2700      	movs	r7, #0
 8001e40:	015c      	lsls	r4, r3, #5
 8001e42:	2500      	movs	r5, #0
 8001e44:	1ae4      	subs	r4, r4, r3
 8001e46:	eb65 0507 	sbc.w	r5, r5, r7
 8001e4a:	01a9      	lsls	r1, r5, #6
 8001e4c:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001e50:	01a0      	lsls	r0, r4, #6
 8001e52:	1b00      	subs	r0, r0, r4
 8001e54:	eb61 0105 	sbc.w	r1, r1, r5
 8001e58:	00cb      	lsls	r3, r1, #3
 8001e5a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001e5e:	00c4      	lsls	r4, r0, #3
 8001e60:	19a0      	adds	r0, r4, r6
 8001e62:	eb43 0107 	adc.w	r1, r3, r7
 8001e66:	028b      	lsls	r3, r1, #10
 8001e68:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001e6c:	0284      	lsls	r4, r0, #10
 8001e6e:	4620      	mov	r0, r4
 8001e70:	4619      	mov	r1, r3
 8001e72:	2300      	movs	r3, #0
 8001e74:	f7fe fea8 	bl	8000bc8 <__aeabi_uldivmod>
 8001e78:	e7d2      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 8001e7a:	4803      	ldr	r0, [pc, #12]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800
 8001e84:	00f42400 	.word	0x00f42400
 8001e88:	00b71b00 	.word	0x00b71b00

08001e8c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001e8c:	2800      	cmp	r0, #0
 8001e8e:	f000 809d 	beq.w	8001fcc <HAL_RCC_ClockConfig+0x140>
{
 8001e92:	b570      	push	{r4, r5, r6, lr}
 8001e94:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e96:	4b4f      	ldr	r3, [pc, #316]	; (8001fd4 <HAL_RCC_ClockConfig+0x148>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	428b      	cmp	r3, r1
 8001ea0:	d209      	bcs.n	8001eb6 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea2:	b2cb      	uxtb	r3, r1
 8001ea4:	4a4b      	ldr	r2, [pc, #300]	; (8001fd4 <HAL_RCC_ClockConfig+0x148>)
 8001ea6:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea8:	6813      	ldr	r3, [r2, #0]
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	428b      	cmp	r3, r1
 8001eb0:	d001      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8001eb2:	2001      	movs	r0, #1
}
 8001eb4:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb6:	6823      	ldr	r3, [r4, #0]
 8001eb8:	f013 0f02 	tst.w	r3, #2
 8001ebc:	d017      	beq.n	8001eee <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ebe:	f013 0f04 	tst.w	r3, #4
 8001ec2:	d004      	beq.n	8001ece <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ec4:	4a44      	ldr	r2, [pc, #272]	; (8001fd8 <HAL_RCC_ClockConfig+0x14c>)
 8001ec6:	6893      	ldr	r3, [r2, #8]
 8001ec8:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ecc:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ece:	6823      	ldr	r3, [r4, #0]
 8001ed0:	f013 0f08 	tst.w	r3, #8
 8001ed4:	d004      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ed6:	4a40      	ldr	r2, [pc, #256]	; (8001fd8 <HAL_RCC_ClockConfig+0x14c>)
 8001ed8:	6893      	ldr	r3, [r2, #8]
 8001eda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ede:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee0:	4a3d      	ldr	r2, [pc, #244]	; (8001fd8 <HAL_RCC_ClockConfig+0x14c>)
 8001ee2:	6893      	ldr	r3, [r2, #8]
 8001ee4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ee8:	68a0      	ldr	r0, [r4, #8]
 8001eea:	4303      	orrs	r3, r0
 8001eec:	6093      	str	r3, [r2, #8]
 8001eee:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ef0:	6823      	ldr	r3, [r4, #0]
 8001ef2:	f013 0f01 	tst.w	r3, #1
 8001ef6:	d032      	beq.n	8001f5e <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef8:	6863      	ldr	r3, [r4, #4]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d021      	beq.n	8001f42 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001efe:	1e9a      	subs	r2, r3, #2
 8001f00:	2a01      	cmp	r2, #1
 8001f02:	d925      	bls.n	8001f50 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f04:	4a34      	ldr	r2, [pc, #208]	; (8001fd8 <HAL_RCC_ClockConfig+0x14c>)
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	f012 0f02 	tst.w	r2, #2
 8001f0c:	d060      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f0e:	4932      	ldr	r1, [pc, #200]	; (8001fd8 <HAL_RCC_ClockConfig+0x14c>)
 8001f10:	688a      	ldr	r2, [r1, #8]
 8001f12:	f022 0203 	bic.w	r2, r2, #3
 8001f16:	4313      	orrs	r3, r2
 8001f18:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001f1a:	f7ff f81f 	bl	8000f5c <HAL_GetTick>
 8001f1e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f20:	4b2d      	ldr	r3, [pc, #180]	; (8001fd8 <HAL_RCC_ClockConfig+0x14c>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 030c 	and.w	r3, r3, #12
 8001f28:	6862      	ldr	r2, [r4, #4]
 8001f2a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001f2e:	d016      	beq.n	8001f5e <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f30:	f7ff f814 	bl	8000f5c <HAL_GetTick>
 8001f34:	1b80      	subs	r0, r0, r6
 8001f36:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f3a:	4298      	cmp	r0, r3
 8001f3c:	d9f0      	bls.n	8001f20 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8001f3e:	2003      	movs	r0, #3
 8001f40:	e7b8      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f42:	4a25      	ldr	r2, [pc, #148]	; (8001fd8 <HAL_RCC_ClockConfig+0x14c>)
 8001f44:	6812      	ldr	r2, [r2, #0]
 8001f46:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001f4a:	d1e0      	bne.n	8001f0e <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	e7b1      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f50:	4a21      	ldr	r2, [pc, #132]	; (8001fd8 <HAL_RCC_ClockConfig+0x14c>)
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001f58:	d1d9      	bne.n	8001f0e <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	e7aa      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f5e:	4b1d      	ldr	r3, [pc, #116]	; (8001fd4 <HAL_RCC_ClockConfig+0x148>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	42ab      	cmp	r3, r5
 8001f68:	d909      	bls.n	8001f7e <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6a:	b2ea      	uxtb	r2, r5
 8001f6c:	4b19      	ldr	r3, [pc, #100]	; (8001fd4 <HAL_RCC_ClockConfig+0x148>)
 8001f6e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	42ab      	cmp	r3, r5
 8001f78:	d001      	beq.n	8001f7e <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8001f7a:	2001      	movs	r0, #1
 8001f7c:	e79a      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f7e:	6823      	ldr	r3, [r4, #0]
 8001f80:	f013 0f04 	tst.w	r3, #4
 8001f84:	d006      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f86:	4a14      	ldr	r2, [pc, #80]	; (8001fd8 <HAL_RCC_ClockConfig+0x14c>)
 8001f88:	6893      	ldr	r3, [r2, #8]
 8001f8a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001f8e:	68e1      	ldr	r1, [r4, #12]
 8001f90:	430b      	orrs	r3, r1
 8001f92:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f94:	6823      	ldr	r3, [r4, #0]
 8001f96:	f013 0f08 	tst.w	r3, #8
 8001f9a:	d007      	beq.n	8001fac <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f9c:	4a0e      	ldr	r2, [pc, #56]	; (8001fd8 <HAL_RCC_ClockConfig+0x14c>)
 8001f9e:	6893      	ldr	r3, [r2, #8]
 8001fa0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001fa4:	6921      	ldr	r1, [r4, #16]
 8001fa6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001faa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fac:	f7ff ff1a 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <HAL_RCC_ClockConfig+0x14c>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001fb8:	4a08      	ldr	r2, [pc, #32]	; (8001fdc <HAL_RCC_ClockConfig+0x150>)
 8001fba:	5cd3      	ldrb	r3, [r2, r3]
 8001fbc:	40d8      	lsrs	r0, r3
 8001fbe:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <HAL_RCC_ClockConfig+0x154>)
 8001fc0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f7fe ff80 	bl	8000ec8 <HAL_InitTick>
  return HAL_OK;
 8001fc8:	2000      	movs	r0, #0
 8001fca:	e773      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8001fcc:	2001      	movs	r0, #1
}
 8001fce:	4770      	bx	lr
        return HAL_ERROR;
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	e76f      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x28>
 8001fd4:	40023c00 	.word	0x40023c00
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	080065d8 	.word	0x080065d8
 8001fe0:	20000008 	.word	0x20000008

08001fe4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001fe4:	4b01      	ldr	r3, [pc, #4]	; (8001fec <HAL_RCC_GetHCLKFreq+0x8>)
 8001fe6:	6818      	ldr	r0, [r3, #0]
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000008 	.word	0x20000008

08001ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ff2:	f7ff fff7 	bl	8001fe4 <HAL_RCC_GetHCLKFreq>
 8001ff6:	4b04      	ldr	r3, [pc, #16]	; (8002008 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001ffe:	4a03      	ldr	r2, [pc, #12]	; (800200c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002000:	5cd3      	ldrb	r3, [r2, r3]
}
 8002002:	40d8      	lsrs	r0, r3
 8002004:	bd08      	pop	{r3, pc}
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800
 800200c:	080065e8 	.word	0x080065e8

08002010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002010:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002012:	f7ff ffe7 	bl	8001fe4 <HAL_RCC_GetHCLKFreq>
 8002016:	4b04      	ldr	r3, [pc, #16]	; (8002028 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800201e:	4a03      	ldr	r2, [pc, #12]	; (800202c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002020:	5cd3      	ldrb	r3, [r2, r3]
}
 8002022:	40d8      	lsrs	r0, r3
 8002024:	bd08      	pop	{r3, pc}
 8002026:	bf00      	nop
 8002028:	40023800 	.word	0x40023800
 800202c:	080065e8 	.word	0x080065e8

08002030 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8002030:	2800      	cmp	r0, #0
 8002032:	d03b      	beq.n	80020ac <HAL_SPI_Init+0x7c>
{
 8002034:	b510      	push	{r4, lr}
 8002036:	4604      	mov	r4, r0
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 800203c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002040:	2b00      	cmp	r3, #0
 8002042:	d02e      	beq.n	80020a2 <HAL_SPI_Init+0x72>

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002044:	2302      	movs	r3, #2
 8002046:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800204a:	6822      	ldr	r2, [r4, #0]
 800204c:	6813      	ldr	r3, [r2, #0]
 800204e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002052:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002054:	6863      	ldr	r3, [r4, #4]
 8002056:	68a2      	ldr	r2, [r4, #8]
 8002058:	4313      	orrs	r3, r2
 800205a:	68e2      	ldr	r2, [r4, #12]
 800205c:	4313      	orrs	r3, r2
 800205e:	6922      	ldr	r2, [r4, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	6962      	ldr	r2, [r4, #20]
 8002064:	4313      	orrs	r3, r2
 8002066:	69a2      	ldr	r2, [r4, #24]
 8002068:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800206c:	4313      	orrs	r3, r2
 800206e:	69e2      	ldr	r2, [r4, #28]
 8002070:	4313      	orrs	r3, r2
 8002072:	6a22      	ldr	r2, [r4, #32]
 8002074:	4313      	orrs	r3, r2
 8002076:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002078:	6822      	ldr	r2, [r4, #0]
 800207a:	430b      	orrs	r3, r1
 800207c:	6013      	str	r3, [r2, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800207e:	8b63      	ldrh	r3, [r4, #26]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002086:	6822      	ldr	r2, [r4, #0]
 8002088:	430b      	orrs	r3, r1
 800208a:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800208c:	6822      	ldr	r2, [r4, #0]
 800208e:	69d3      	ldr	r3, [r2, #28]
 8002090:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002094:	61d3      	str	r3, [r2, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002096:	2000      	movs	r0, #0
 8002098:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800209a:	2301      	movs	r3, #1
 800209c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 80020a0:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80020a2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80020a6:	f001 fe35 	bl	8003d14 <HAL_SPI_MspInit>
 80020aa:	e7cb      	b.n	8002044 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 80020ac:	2001      	movs	r0, #1
}
 80020ae:	4770      	bx	lr

080020b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020b0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020b2:	6a03      	ldr	r3, [r0, #32]
 80020b4:	f023 0301 	bic.w	r3, r3, #1
 80020b8:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020ba:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80020bc:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020be:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80020c0:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020c4:	680d      	ldr	r5, [r1, #0]
 80020c6:	ea45 0604 	orr.w	r6, r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80020ca:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80020ce:	688b      	ldr	r3, [r1, #8]
 80020d0:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80020d2:	4d0c      	ldr	r5, [pc, #48]	; (8002104 <TIM_OC1_SetConfig+0x54>)
 80020d4:	42a8      	cmp	r0, r5
 80020d6:	d002      	beq.n	80020de <TIM_OC1_SetConfig+0x2e>
 80020d8:	4c0b      	ldr	r4, [pc, #44]	; (8002108 <TIM_OC1_SetConfig+0x58>)
 80020da:	42a0      	cmp	r0, r4
 80020dc:	d10b      	bne.n	80020f6 <TIM_OC1_SetConfig+0x46>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80020de:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80020e2:	68cd      	ldr	r5, [r1, #12]
 80020e4:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80020e6:	f023 0304 	bic.w	r3, r3, #4
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80020ea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80020ee:	694d      	ldr	r5, [r1, #20]
 80020f0:	4315      	orrs	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80020f2:	698a      	ldr	r2, [r1, #24]
 80020f4:	432a      	orrs	r2, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020f6:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020f8:	6186      	str	r6, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80020fa:	684a      	ldr	r2, [r1, #4]
 80020fc:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80020fe:	6203      	str	r3, [r0, #32]
} 
 8002100:	bc70      	pop	{r4, r5, r6}
 8002102:	4770      	bx	lr
 8002104:	40010000 	.word	0x40010000
 8002108:	40010400 	.word	0x40010400

0800210c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800210c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800210e:	6a03      	ldr	r3, [r0, #32]
 8002110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002114:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002116:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002118:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800211a:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800211c:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002120:	680d      	ldr	r5, [r1, #0]
 8002122:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002124:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002128:	688d      	ldr	r5, [r1, #8]
 800212a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800212e:	4d0e      	ldr	r5, [pc, #56]	; (8002168 <TIM_OC3_SetConfig+0x5c>)
 8002130:	42a8      	cmp	r0, r5
 8002132:	d003      	beq.n	800213c <TIM_OC3_SetConfig+0x30>
 8002134:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002138:	42a8      	cmp	r0, r5
 800213a:	d10e      	bne.n	800215a <TIM_OC3_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800213c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002140:	68cd      	ldr	r5, [r1, #12]
 8002142:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002146:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800214a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800214e:	694d      	ldr	r5, [r1, #20]
 8002150:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002154:	698d      	ldr	r5, [r1, #24]
 8002156:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800215a:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800215c:	61c4      	str	r4, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800215e:	684a      	ldr	r2, [r1, #4]
 8002160:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002162:	6203      	str	r3, [r0, #32]
}
 8002164:	bc30      	pop	{r4, r5}
 8002166:	4770      	bx	lr
 8002168:	40010000 	.word	0x40010000

0800216c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800216c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800216e:	6a03      	ldr	r3, [r0, #32]
 8002170:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002174:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002176:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002178:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800217a:	69c2      	ldr	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800217c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002180:	680d      	ldr	r5, [r1, #0]
 8002182:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002186:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800218a:	688d      	ldr	r5, [r1, #8]
 800218c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002190:	4d09      	ldr	r5, [pc, #36]	; (80021b8 <TIM_OC4_SetConfig+0x4c>)
 8002192:	42a8      	cmp	r0, r5
 8002194:	d003      	beq.n	800219e <TIM_OC4_SetConfig+0x32>
 8002196:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800219a:	42a8      	cmp	r0, r5
 800219c:	d104      	bne.n	80021a8 <TIM_OC4_SetConfig+0x3c>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800219e:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80021a2:	694d      	ldr	r5, [r1, #20]
 80021a4:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021a8:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80021aa:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80021ac:	684a      	ldr	r2, [r1, #4]
 80021ae:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021b0:	6203      	str	r3, [r0, #32]
}
 80021b2:	bc30      	pop	{r4, r5}
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40010000 	.word	0x40010000

080021bc <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021bc:	6802      	ldr	r2, [r0, #0]
 80021be:	68d3      	ldr	r3, [r2, #12]
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 80021c6:	6802      	ldr	r2, [r0, #0]
 80021c8:	6813      	ldr	r3, [r2, #0]
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	6013      	str	r3, [r2, #0]
}
 80021d0:	2000      	movs	r0, #0
 80021d2:	4770      	bx	lr

080021d4 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80021d4:	4770      	bx	lr

080021d6 <HAL_TIM_IC_CaptureCallback>:
}
 80021d6:	4770      	bx	lr

080021d8 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80021d8:	4770      	bx	lr

080021da <HAL_TIM_TriggerCallback>:
}
 80021da:	4770      	bx	lr

080021dc <HAL_TIM_IRQHandler>:
{
 80021dc:	b510      	push	{r4, lr}
 80021de:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021e0:	6803      	ldr	r3, [r0, #0]
 80021e2:	691a      	ldr	r2, [r3, #16]
 80021e4:	f012 0f02 	tst.w	r2, #2
 80021e8:	d011      	beq.n	800220e <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	f012 0f02 	tst.w	r2, #2
 80021f0:	d00d      	beq.n	800220e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021f2:	f06f 0202 	mvn.w	r2, #2
 80021f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021f8:	2301      	movs	r3, #1
 80021fa:	7603      	strb	r3, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021fc:	6803      	ldr	r3, [r0, #0]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	f013 0f03 	tst.w	r3, #3
 8002204:	d070      	beq.n	80022e8 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8002206:	f7ff ffe6 	bl	80021d6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800220a:	2300      	movs	r3, #0
 800220c:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800220e:	6823      	ldr	r3, [r4, #0]
 8002210:	691a      	ldr	r2, [r3, #16]
 8002212:	f012 0f04 	tst.w	r2, #4
 8002216:	d012      	beq.n	800223e <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	f012 0f04 	tst.w	r2, #4
 800221e:	d00e      	beq.n	800223e <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002220:	f06f 0204 	mvn.w	r2, #4
 8002224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002226:	2302      	movs	r3, #2
 8002228:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800222a:	6823      	ldr	r3, [r4, #0]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002232:	d05f      	beq.n	80022f4 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8002234:	4620      	mov	r0, r4
 8002236:	f7ff ffce 	bl	80021d6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800223a:	2300      	movs	r3, #0
 800223c:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800223e:	6823      	ldr	r3, [r4, #0]
 8002240:	691a      	ldr	r2, [r3, #16]
 8002242:	f012 0f08 	tst.w	r2, #8
 8002246:	d012      	beq.n	800226e <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	f012 0f08 	tst.w	r2, #8
 800224e:	d00e      	beq.n	800226e <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002250:	f06f 0208 	mvn.w	r2, #8
 8002254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002256:	2304      	movs	r3, #4
 8002258:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800225a:	6823      	ldr	r3, [r4, #0]
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	f013 0f03 	tst.w	r3, #3
 8002262:	d04e      	beq.n	8002302 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8002264:	4620      	mov	r0, r4
 8002266:	f7ff ffb6 	bl	80021d6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226a:	2300      	movs	r3, #0
 800226c:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800226e:	6823      	ldr	r3, [r4, #0]
 8002270:	691a      	ldr	r2, [r3, #16]
 8002272:	f012 0f10 	tst.w	r2, #16
 8002276:	d012      	beq.n	800229e <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	f012 0f10 	tst.w	r2, #16
 800227e:	d00e      	beq.n	800229e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002280:	f06f 0210 	mvn.w	r2, #16
 8002284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002286:	2308      	movs	r3, #8
 8002288:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800228a:	6823      	ldr	r3, [r4, #0]
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002292:	d03d      	beq.n	8002310 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8002294:	4620      	mov	r0, r4
 8002296:	f7ff ff9e 	bl	80021d6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800229a:	2300      	movs	r3, #0
 800229c:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800229e:	6823      	ldr	r3, [r4, #0]
 80022a0:	691a      	ldr	r2, [r3, #16]
 80022a2:	f012 0f01 	tst.w	r2, #1
 80022a6:	d003      	beq.n	80022b0 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	f012 0f01 	tst.w	r2, #1
 80022ae:	d136      	bne.n	800231e <HAL_TIM_IRQHandler+0x142>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022b0:	6823      	ldr	r3, [r4, #0]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80022b8:	d003      	beq.n	80022c2 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	f012 0f80 	tst.w	r2, #128	; 0x80
 80022c0:	d134      	bne.n	800232c <HAL_TIM_IRQHandler+0x150>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022c2:	6823      	ldr	r3, [r4, #0]
 80022c4:	691a      	ldr	r2, [r3, #16]
 80022c6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80022ca:	d003      	beq.n	80022d4 <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	f012 0f40 	tst.w	r2, #64	; 0x40
 80022d2:	d132      	bne.n	800233a <HAL_TIM_IRQHandler+0x15e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022d4:	6823      	ldr	r3, [r4, #0]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	f012 0f20 	tst.w	r2, #32
 80022dc:	d003      	beq.n	80022e6 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80022de:	68da      	ldr	r2, [r3, #12]
 80022e0:	f012 0f20 	tst.w	r2, #32
 80022e4:	d130      	bne.n	8002348 <HAL_TIM_IRQHandler+0x16c>
}
 80022e6:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e8:	f7ff ff74 	bl	80021d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ec:	4620      	mov	r0, r4
 80022ee:	f7ff ff73 	bl	80021d8 <HAL_TIM_PWM_PulseFinishedCallback>
 80022f2:	e78a      	b.n	800220a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022f4:	4620      	mov	r0, r4
 80022f6:	f7ff ff6d 	bl	80021d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022fa:	4620      	mov	r0, r4
 80022fc:	f7ff ff6c 	bl	80021d8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002300:	e79b      	b.n	800223a <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002302:	4620      	mov	r0, r4
 8002304:	f7ff ff66 	bl	80021d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002308:	4620      	mov	r0, r4
 800230a:	f7ff ff65 	bl	80021d8 <HAL_TIM_PWM_PulseFinishedCallback>
 800230e:	e7ac      	b.n	800226a <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002310:	4620      	mov	r0, r4
 8002312:	f7ff ff5f 	bl	80021d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002316:	4620      	mov	r0, r4
 8002318:	f7ff ff5e 	bl	80021d8 <HAL_TIM_PWM_PulseFinishedCallback>
 800231c:	e7bd      	b.n	800229a <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800231e:	f06f 0201 	mvn.w	r2, #1
 8002322:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002324:	4620      	mov	r0, r4
 8002326:	f001 fa0b 	bl	8003740 <HAL_TIM_PeriodElapsedCallback>
 800232a:	e7c1      	b.n	80022b0 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800232c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002330:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002332:	4620      	mov	r0, r4
 8002334:	f000 f9c4 	bl	80026c0 <HAL_TIMEx_BreakCallback>
 8002338:	e7c3      	b.n	80022c2 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800233a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800233e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002340:	4620      	mov	r0, r4
 8002342:	f7ff ff4a 	bl	80021da <HAL_TIM_TriggerCallback>
 8002346:	e7c5      	b.n	80022d4 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002348:	f06f 0220 	mvn.w	r2, #32
 800234c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800234e:	4620      	mov	r0, r4
 8002350:	f000 f9b5 	bl	80026be <HAL_TIMEx_CommutationCallback>
}
 8002354:	e7c7      	b.n	80022e6 <HAL_TIM_IRQHandler+0x10a>
	...

08002358 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002358:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800235a:	4a2e      	ldr	r2, [pc, #184]	; (8002414 <TIM_Base_SetConfig+0xbc>)
 800235c:	4290      	cmp	r0, r2
 800235e:	d012      	beq.n	8002386 <TIM_Base_SetConfig+0x2e>
 8002360:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002364:	d00f      	beq.n	8002386 <TIM_Base_SetConfig+0x2e>
 8002366:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800236a:	4290      	cmp	r0, r2
 800236c:	d00b      	beq.n	8002386 <TIM_Base_SetConfig+0x2e>
 800236e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002372:	4290      	cmp	r0, r2
 8002374:	d007      	beq.n	8002386 <TIM_Base_SetConfig+0x2e>
 8002376:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800237a:	4290      	cmp	r0, r2
 800237c:	d003      	beq.n	8002386 <TIM_Base_SetConfig+0x2e>
 800237e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002382:	4290      	cmp	r0, r2
 8002384:	d103      	bne.n	800238e <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800238a:	684a      	ldr	r2, [r1, #4]
 800238c:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800238e:	4a21      	ldr	r2, [pc, #132]	; (8002414 <TIM_Base_SetConfig+0xbc>)
 8002390:	4290      	cmp	r0, r2
 8002392:	d02a      	beq.n	80023ea <TIM_Base_SetConfig+0x92>
 8002394:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002398:	d027      	beq.n	80023ea <TIM_Base_SetConfig+0x92>
 800239a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800239e:	4290      	cmp	r0, r2
 80023a0:	d023      	beq.n	80023ea <TIM_Base_SetConfig+0x92>
 80023a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023a6:	4290      	cmp	r0, r2
 80023a8:	d01f      	beq.n	80023ea <TIM_Base_SetConfig+0x92>
 80023aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023ae:	4290      	cmp	r0, r2
 80023b0:	d01b      	beq.n	80023ea <TIM_Base_SetConfig+0x92>
 80023b2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80023b6:	4290      	cmp	r0, r2
 80023b8:	d017      	beq.n	80023ea <TIM_Base_SetConfig+0x92>
 80023ba:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80023be:	4290      	cmp	r0, r2
 80023c0:	d013      	beq.n	80023ea <TIM_Base_SetConfig+0x92>
 80023c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023c6:	4290      	cmp	r0, r2
 80023c8:	d00f      	beq.n	80023ea <TIM_Base_SetConfig+0x92>
 80023ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023ce:	4290      	cmp	r0, r2
 80023d0:	d00b      	beq.n	80023ea <TIM_Base_SetConfig+0x92>
 80023d2:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80023d6:	4290      	cmp	r0, r2
 80023d8:	d007      	beq.n	80023ea <TIM_Base_SetConfig+0x92>
 80023da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023de:	4290      	cmp	r0, r2
 80023e0:	d003      	beq.n	80023ea <TIM_Base_SetConfig+0x92>
 80023e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023e6:	4290      	cmp	r0, r2
 80023e8:	d103      	bne.n	80023f2 <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ee:	68ca      	ldr	r2, [r1, #12]
 80023f0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80023f2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023f4:	688b      	ldr	r3, [r1, #8]
 80023f6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80023f8:	680b      	ldr	r3, [r1, #0]
 80023fa:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <TIM_Base_SetConfig+0xbc>)
 80023fe:	4298      	cmp	r0, r3
 8002400:	d003      	beq.n	800240a <TIM_Base_SetConfig+0xb2>
 8002402:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002406:	4298      	cmp	r0, r3
 8002408:	d101      	bne.n	800240e <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
 800240a:	690b      	ldr	r3, [r1, #16]
 800240c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800240e:	2301      	movs	r3, #1
 8002410:	6143      	str	r3, [r0, #20]
}
 8002412:	4770      	bx	lr
 8002414:	40010000 	.word	0x40010000

08002418 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8002418:	b1a8      	cbz	r0, 8002446 <HAL_TIM_Base_Init+0x2e>
{ 
 800241a:	b510      	push	{r4, lr}
 800241c:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 800241e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002422:	b15b      	cbz	r3, 800243c <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8002424:	2302      	movs	r3, #2
 8002426:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800242a:	1d21      	adds	r1, r4, #4
 800242c:	6820      	ldr	r0, [r4, #0]
 800242e:	f7ff ff93 	bl	8002358 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002432:	2301      	movs	r3, #1
 8002434:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002438:	2000      	movs	r0, #0
}
 800243a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800243c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8002440:	f001 fde8 	bl	8004014 <HAL_TIM_Base_MspInit>
 8002444:	e7ee      	b.n	8002424 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002446:	2001      	movs	r0, #1
}
 8002448:	4770      	bx	lr

0800244a <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 800244a:	b1a8      	cbz	r0, 8002478 <HAL_TIM_PWM_Init+0x2e>
{
 800244c:	b510      	push	{r4, lr}
 800244e:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8002450:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002454:	b15b      	cbz	r3, 800246e <HAL_TIM_PWM_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;  
 8002456:	2302      	movs	r3, #2
 8002458:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800245c:	1d21      	adds	r1, r4, #4
 800245e:	6820      	ldr	r0, [r4, #0]
 8002460:	f7ff ff7a 	bl	8002358 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002464:	2301      	movs	r3, #1
 8002466:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800246a:	2000      	movs	r0, #0
}  
 800246c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800246e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8002472:	f001 fda5 	bl	8003fc0 <HAL_TIM_PWM_MspInit>
 8002476:	e7ee      	b.n	8002456 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8002478:	2001      	movs	r0, #1
}  
 800247a:	4770      	bx	lr

0800247c <TIM_OC2_SetConfig>:
{
 800247c:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800247e:	6a03      	ldr	r3, [r0, #32]
 8002480:	f023 0310 	bic.w	r3, r3, #16
 8002484:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002486:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8002488:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800248a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800248c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002490:	680d      	ldr	r5, [r1, #0]
 8002492:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8002496:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800249a:	688d      	ldr	r5, [r1, #8]
 800249c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80024a0:	4d0e      	ldr	r5, [pc, #56]	; (80024dc <TIM_OC2_SetConfig+0x60>)
 80024a2:	42a8      	cmp	r0, r5
 80024a4:	d003      	beq.n	80024ae <TIM_OC2_SetConfig+0x32>
 80024a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80024aa:	42a8      	cmp	r0, r5
 80024ac:	d10e      	bne.n	80024cc <TIM_OC2_SetConfig+0x50>
    tmpccer &= ~TIM_CCER_CC2NP;
 80024ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024b2:	68cd      	ldr	r5, [r1, #12]
 80024b4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80024b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024bc:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80024c0:	694d      	ldr	r5, [r1, #20]
 80024c2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80024c6:	698d      	ldr	r5, [r1, #24]
 80024c8:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80024cc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80024ce:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80024d0:	684a      	ldr	r2, [r1, #4]
 80024d2:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80024d4:	6203      	str	r3, [r0, #32]
}
 80024d6:	bc30      	pop	{r4, r5}
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40010000 	.word	0x40010000

080024e0 <HAL_TIM_PWM_ConfigChannel>:
{
 80024e0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80024e2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d066      	beq.n	80025b8 <HAL_TIM_PWM_ConfigChannel+0xd8>
 80024ea:	460d      	mov	r5, r1
 80024ec:	4604      	mov	r4, r0
 80024ee:	2301      	movs	r3, #1
 80024f0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 80024f4:	2302      	movs	r3, #2
 80024f6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  switch (Channel)
 80024fa:	2a0c      	cmp	r2, #12
 80024fc:	d81a      	bhi.n	8002534 <HAL_TIM_PWM_ConfigChannel+0x54>
 80024fe:	e8df f002 	tbb	[pc, r2]
 8002502:	1907      	.short	0x1907
 8002504:	19201919 	.word	0x19201919
 8002508:	19341919 	.word	0x19341919
 800250c:	1919      	.short	0x1919
 800250e:	47          	.byte	0x47
 800250f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002510:	6800      	ldr	r0, [r0, #0]
 8002512:	f7ff fdcd 	bl	80020b0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002516:	6822      	ldr	r2, [r4, #0]
 8002518:	6993      	ldr	r3, [r2, #24]
 800251a:	f043 0308 	orr.w	r3, r3, #8
 800251e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002520:	6822      	ldr	r2, [r4, #0]
 8002522:	6993      	ldr	r3, [r2, #24]
 8002524:	f023 0304 	bic.w	r3, r3, #4
 8002528:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800252a:	6822      	ldr	r2, [r4, #0]
 800252c:	6993      	ldr	r3, [r2, #24]
 800252e:	6929      	ldr	r1, [r5, #16]
 8002530:	430b      	orrs	r3, r1
 8002532:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002534:	2301      	movs	r3, #1
 8002536:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 800253a:	2000      	movs	r0, #0
 800253c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8002540:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002542:	6800      	ldr	r0, [r0, #0]
 8002544:	f7ff ff9a 	bl	800247c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002548:	6822      	ldr	r2, [r4, #0]
 800254a:	6993      	ldr	r3, [r2, #24]
 800254c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002550:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002552:	6822      	ldr	r2, [r4, #0]
 8002554:	6993      	ldr	r3, [r2, #24]
 8002556:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800255a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800255c:	6822      	ldr	r2, [r4, #0]
 800255e:	6993      	ldr	r3, [r2, #24]
 8002560:	6929      	ldr	r1, [r5, #16]
 8002562:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002566:	6193      	str	r3, [r2, #24]
    break;
 8002568:	e7e4      	b.n	8002534 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800256a:	6800      	ldr	r0, [r0, #0]
 800256c:	f7ff fdce 	bl	800210c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002570:	6822      	ldr	r2, [r4, #0]
 8002572:	69d3      	ldr	r3, [r2, #28]
 8002574:	f043 0308 	orr.w	r3, r3, #8
 8002578:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800257a:	6822      	ldr	r2, [r4, #0]
 800257c:	69d3      	ldr	r3, [r2, #28]
 800257e:	f023 0304 	bic.w	r3, r3, #4
 8002582:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002584:	6822      	ldr	r2, [r4, #0]
 8002586:	69d3      	ldr	r3, [r2, #28]
 8002588:	6929      	ldr	r1, [r5, #16]
 800258a:	430b      	orrs	r3, r1
 800258c:	61d3      	str	r3, [r2, #28]
    break;
 800258e:	e7d1      	b.n	8002534 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002590:	6800      	ldr	r0, [r0, #0]
 8002592:	f7ff fdeb 	bl	800216c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002596:	6822      	ldr	r2, [r4, #0]
 8002598:	69d3      	ldr	r3, [r2, #28]
 800259a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800259e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025a0:	6822      	ldr	r2, [r4, #0]
 80025a2:	69d3      	ldr	r3, [r2, #28]
 80025a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025a8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80025aa:	6822      	ldr	r2, [r4, #0]
 80025ac:	69d3      	ldr	r3, [r2, #28]
 80025ae:	6929      	ldr	r1, [r5, #16]
 80025b0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80025b4:	61d3      	str	r3, [r2, #28]
    break;
 80025b6:	e7bd      	b.n	8002534 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 80025b8:	2002      	movs	r0, #2
 80025ba:	e7c1      	b.n	8002540 <HAL_TIM_PWM_ConfigChannel+0x60>

080025bc <TIM_CCxChannelCmd>:
{
 80025bc:	b410      	push	{r4}
  tmp = TIM_CCER_CC1E << Channel;
 80025be:	2301      	movs	r3, #1
 80025c0:	fa03 f401 	lsl.w	r4, r3, r1
  TIMx->CCER &= ~tmp;
 80025c4:	6a03      	ldr	r3, [r0, #32]
 80025c6:	ea23 0304 	bic.w	r3, r3, r4
 80025ca:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80025cc:	6a03      	ldr	r3, [r0, #32]
 80025ce:	408a      	lsls	r2, r1
 80025d0:	4313      	orrs	r3, r2
 80025d2:	6203      	str	r3, [r0, #32]
}
 80025d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <HAL_TIM_PWM_Start>:
{
 80025dc:	b510      	push	{r4, lr}
 80025de:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025e0:	2201      	movs	r2, #1
 80025e2:	6800      	ldr	r0, [r0, #0]
 80025e4:	f7ff ffea 	bl	80025bc <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80025e8:	6823      	ldr	r3, [r4, #0]
 80025ea:	4a09      	ldr	r2, [pc, #36]	; (8002610 <HAL_TIM_PWM_Start+0x34>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d003      	beq.n	80025f8 <HAL_TIM_PWM_Start+0x1c>
 80025f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d103      	bne.n	8002600 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 80025f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025fe:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8002600:	6822      	ldr	r2, [r4, #0]
 8002602:	6813      	ldr	r3, [r2, #0]
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	6013      	str	r3, [r2, #0]
} 
 800260a:	2000      	movs	r0, #0
 800260c:	bd10      	pop	{r4, pc}
 800260e:	bf00      	nop
 8002610:	40010000 	.word	0x40010000

08002614 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8002614:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002618:	2b01      	cmp	r3, #1
 800261a:	d022      	beq.n	8002662 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
{
 800261c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800261e:	2201      	movs	r2, #1
 8002620:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002624:	2302      	movs	r3, #2
 8002626:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800262a:	6804      	ldr	r4, [r0, #0]
 800262c:	6863      	ldr	r3, [r4, #4]
 800262e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002632:	6063      	str	r3, [r4, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002634:	6804      	ldr	r4, [r0, #0]
 8002636:	6863      	ldr	r3, [r4, #4]
 8002638:	680d      	ldr	r5, [r1, #0]
 800263a:	432b      	orrs	r3, r5
 800263c:	6063      	str	r3, [r4, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800263e:	6804      	ldr	r4, [r0, #0]
 8002640:	68a3      	ldr	r3, [r4, #8]
 8002642:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002646:	60a3      	str	r3, [r4, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002648:	6804      	ldr	r4, [r0, #0]
 800264a:	68a3      	ldr	r3, [r4, #8]
 800264c:	6849      	ldr	r1, [r1, #4]
 800264e:	430b      	orrs	r3, r1
 8002650:	60a3      	str	r3, [r4, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8002652:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8002656:	2300      	movs	r3, #0
 8002658:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 800265c:	4618      	mov	r0, r3
} 
 800265e:	bc30      	pop	{r4, r5}
 8002660:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002662:	2002      	movs	r0, #2
} 
 8002664:	4770      	bx	lr

08002666 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002666:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800266a:	2b01      	cmp	r3, #1
 800266c:	d025      	beq.n	80026ba <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 800266e:	2301      	movs	r3, #1
 8002670:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002674:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800267a:	688a      	ldr	r2, [r1, #8]
 800267c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800267e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002682:	684a      	ldr	r2, [r1, #4]
 8002684:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002686:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800268a:	680a      	ldr	r2, [r1, #0]
 800268c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800268e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002692:	690a      	ldr	r2, [r1, #16]
 8002694:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002696:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800269a:	694a      	ldr	r2, [r1, #20]
 800269c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800269e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026a2:	698a      	ldr	r2, [r1, #24]
 80026a4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80026a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80026aa:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80026ac:	6802      	ldr	r2, [r0, #0]
 80026ae:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 80026b0:	2300      	movs	r3, #0
 80026b2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 80026b6:	4618      	mov	r0, r3
 80026b8:	4770      	bx	lr
  __HAL_LOCK(htim);
 80026ba:	2002      	movs	r0, #2
}
 80026bc:	4770      	bx	lr

080026be <HAL_TIMEx_CommutationCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80026be:	4770      	bx	lr

080026c0 <HAL_TIMEx_BreakCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026c0:	4770      	bx	lr

080026c2 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026c2:	6802      	ldr	r2, [r0, #0]
 80026c4:	68d3      	ldr	r3, [r2, #12]
 80026c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80026ca:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026cc:	6802      	ldr	r2, [r0, #0]
 80026ce:	6953      	ldr	r3, [r2, #20]
 80026d0:	f023 0301 	bic.w	r3, r3, #1
 80026d4:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026d6:	2320      	movs	r3, #32
 80026d8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 80026dc:	4770      	bx	lr

080026de <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80026de:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b21      	cmp	r3, #33	; 0x21
 80026e6:	d12a      	bne.n	800273e <UART_Transmit_IT+0x60>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80026e8:	6883      	ldr	r3, [r0, #8]
 80026ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ee:	d016      	beq.n	800271e <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80026f0:	6a03      	ldr	r3, [r0, #32]
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	6202      	str	r2, [r0, #32]
 80026f6:	781a      	ldrb	r2, [r3, #0]
 80026f8:	6803      	ldr	r3, [r0, #0]
 80026fa:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 80026fc:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29b      	uxth	r3, r3
 8002702:	84c3      	strh	r3, [r0, #38]	; 0x26
 8002704:	b9eb      	cbnz	r3, 8002742 <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002706:	6802      	ldr	r2, [r0, #0]
 8002708:	68d3      	ldr	r3, [r2, #12]
 800270a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800270e:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002710:	6802      	ldr	r2, [r0, #0]
 8002712:	68d3      	ldr	r3, [r2, #12]
 8002714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002718:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 800271a:	2000      	movs	r0, #0
 800271c:	4770      	bx	lr
      tmp = (uint16_t*) huart->pTxBuffPtr;
 800271e:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	6802      	ldr	r2, [r0, #0]
 8002724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002728:	6053      	str	r3, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800272a:	6903      	ldr	r3, [r0, #16]
 800272c:	b91b      	cbnz	r3, 8002736 <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 800272e:	6a03      	ldr	r3, [r0, #32]
 8002730:	3302      	adds	r3, #2
 8002732:	6203      	str	r3, [r0, #32]
 8002734:	e7e2      	b.n	80026fc <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 8002736:	6a03      	ldr	r3, [r0, #32]
 8002738:	3301      	adds	r3, #1
 800273a:	6203      	str	r3, [r0, #32]
 800273c:	e7de      	b.n	80026fc <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 800273e:	2002      	movs	r0, #2
 8002740:	4770      	bx	lr
    return HAL_OK;
 8002742:	2000      	movs	r0, #0
  }
}
 8002744:	4770      	bx	lr
	...

08002748 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800274c:	4604      	mov	r4, r0
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 800274e:	6801      	ldr	r1, [r0, #0]
 8002750:	690a      	ldr	r2, [r1, #16]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002752:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002756:	68c3      	ldr	r3, [r0, #12]
 8002758:	4313      	orrs	r3, r2
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800275a:	610b      	str	r3, [r1, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800275c:	6801      	ldr	r1, [r0, #0]
 800275e:	68ca      	ldr	r2, [r1, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002760:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8002764:	f022 020c 	bic.w	r2, r2, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002768:	6883      	ldr	r3, [r0, #8]
 800276a:	6900      	ldr	r0, [r0, #16]
 800276c:	4303      	orrs	r3, r0
 800276e:	6960      	ldr	r0, [r4, #20]
 8002770:	4303      	orrs	r3, r0
 8002772:	69e0      	ldr	r0, [r4, #28]
 8002774:	4303      	orrs	r3, r0
 8002776:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002778:	60cb      	str	r3, [r1, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800277a:	6821      	ldr	r1, [r4, #0]
 800277c:	694a      	ldr	r2, [r1, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800277e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8002782:	69a3      	ldr	r3, [r4, #24]
 8002784:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8002786:	614b      	str	r3, [r1, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002788:	69e3      	ldr	r3, [r4, #28]
 800278a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800278e:	d060      	beq.n	8002852 <UART_SetConfig+0x10a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002790:	6823      	ldr	r3, [r4, #0]
 8002792:	4ab8      	ldr	r2, [pc, #736]	; (8002a74 <UART_SetConfig+0x32c>)
 8002794:	4293      	cmp	r3, r2
 8002796:	f000 8114 	beq.w	80029c2 <UART_SetConfig+0x27a>
 800279a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800279e:	4293      	cmp	r3, r2
 80027a0:	f000 810f 	beq.w	80029c2 <UART_SetConfig+0x27a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80027a4:	f7ff fc24 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
 80027a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027b0:	6865      	ldr	r5, [r4, #4]
 80027b2:	00ad      	lsls	r5, r5, #2
 80027b4:	fbb0 f5f5 	udiv	r5, r0, r5
 80027b8:	4faf      	ldr	r7, [pc, #700]	; (8002a78 <UART_SetConfig+0x330>)
 80027ba:	fba7 3505 	umull	r3, r5, r7, r5
 80027be:	096d      	lsrs	r5, r5, #5
 80027c0:	012e      	lsls	r6, r5, #4
 80027c2:	f7ff fc15 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
 80027c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027ce:	6865      	ldr	r5, [r4, #4]
 80027d0:	00ad      	lsls	r5, r5, #2
 80027d2:	fbb0 f9f5 	udiv	r9, r0, r5
 80027d6:	f7ff fc0b 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
 80027da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027e2:	6865      	ldr	r5, [r4, #4]
 80027e4:	00ad      	lsls	r5, r5, #2
 80027e6:	fbb0 f5f5 	udiv	r5, r0, r5
 80027ea:	fba7 3505 	umull	r3, r5, r7, r5
 80027ee:	096d      	lsrs	r5, r5, #5
 80027f0:	f04f 0864 	mov.w	r8, #100	; 0x64
 80027f4:	fb08 9515 	mls	r5, r8, r5, r9
 80027f8:	012d      	lsls	r5, r5, #4
 80027fa:	3532      	adds	r5, #50	; 0x32
 80027fc:	fba7 3505 	umull	r3, r5, r7, r5
 8002800:	096d      	lsrs	r5, r5, #5
 8002802:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8002806:	4435      	add	r5, r6
 8002808:	f7ff fbf2 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
 800280c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002810:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002814:	6866      	ldr	r6, [r4, #4]
 8002816:	00b6      	lsls	r6, r6, #2
 8002818:	fbb0 f6f6 	udiv	r6, r0, r6
 800281c:	f7ff fbe8 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
 8002820:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002824:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002828:	6863      	ldr	r3, [r4, #4]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002830:	fba7 3000 	umull	r3, r0, r7, r0
 8002834:	0940      	lsrs	r0, r0, #5
 8002836:	fb08 6810 	mls	r8, r8, r0, r6
 800283a:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800283e:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8002842:	fba7 3708 	umull	r3, r7, r7, r8
 8002846:	f3c7 1743 	ubfx	r7, r7, #5, #4
 800284a:	6823      	ldr	r3, [r4, #0]
 800284c:	442f      	add	r7, r5
 800284e:	609f      	str	r7, [r3, #8]
    }
  }
}
 8002850:	e10d      	b.n	8002a6e <UART_SetConfig+0x326>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002852:	6823      	ldr	r3, [r4, #0]
 8002854:	4a87      	ldr	r2, [pc, #540]	; (8002a74 <UART_SetConfig+0x32c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d05b      	beq.n	8002912 <UART_SetConfig+0x1ca>
 800285a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800285e:	4293      	cmp	r3, r2
 8002860:	d057      	beq.n	8002912 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002862:	f7ff fbc5 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
 8002866:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800286a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800286e:	6865      	ldr	r5, [r4, #4]
 8002870:	006d      	lsls	r5, r5, #1
 8002872:	fbb0 f5f5 	udiv	r5, r0, r5
 8002876:	4f80      	ldr	r7, [pc, #512]	; (8002a78 <UART_SetConfig+0x330>)
 8002878:	fba7 3505 	umull	r3, r5, r7, r5
 800287c:	096d      	lsrs	r5, r5, #5
 800287e:	012e      	lsls	r6, r5, #4
 8002880:	f7ff fbb6 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
 8002884:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002888:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800288c:	6865      	ldr	r5, [r4, #4]
 800288e:	006d      	lsls	r5, r5, #1
 8002890:	fbb0 f9f5 	udiv	r9, r0, r5
 8002894:	f7ff fbac 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
 8002898:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800289c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028a0:	6865      	ldr	r5, [r4, #4]
 80028a2:	006d      	lsls	r5, r5, #1
 80028a4:	fbb0 f5f5 	udiv	r5, r0, r5
 80028a8:	fba7 3505 	umull	r3, r5, r7, r5
 80028ac:	096d      	lsrs	r5, r5, #5
 80028ae:	f04f 0864 	mov.w	r8, #100	; 0x64
 80028b2:	fb08 9515 	mls	r5, r8, r5, r9
 80028b6:	00ed      	lsls	r5, r5, #3
 80028b8:	3532      	adds	r5, #50	; 0x32
 80028ba:	fba7 3505 	umull	r3, r5, r7, r5
 80028be:	096d      	lsrs	r5, r5, #5
 80028c0:	006d      	lsls	r5, r5, #1
 80028c2:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 80028c6:	4435      	add	r5, r6
 80028c8:	f7ff fb92 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
 80028cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028d4:	6866      	ldr	r6, [r4, #4]
 80028d6:	0076      	lsls	r6, r6, #1
 80028d8:	fbb0 f6f6 	udiv	r6, r0, r6
 80028dc:	f7ff fb88 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
 80028e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028e8:	6863      	ldr	r3, [r4, #4]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f0:	fba7 2303 	umull	r2, r3, r7, r3
 80028f4:	095b      	lsrs	r3, r3, #5
 80028f6:	fb08 6813 	mls	r8, r8, r3, r6
 80028fa:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80028fe:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8002902:	fba7 3708 	umull	r3, r7, r7, r8
 8002906:	f3c7 1742 	ubfx	r7, r7, #5, #3
 800290a:	6823      	ldr	r3, [r4, #0]
 800290c:	442f      	add	r7, r5
 800290e:	609f      	str	r7, [r3, #8]
 8002910:	e0ad      	b.n	8002a6e <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002912:	f7ff fb7d 	bl	8002010 <HAL_RCC_GetPCLK2Freq>
 8002916:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800291a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800291e:	6865      	ldr	r5, [r4, #4]
 8002920:	006d      	lsls	r5, r5, #1
 8002922:	fbb0 f5f5 	udiv	r5, r0, r5
 8002926:	4f54      	ldr	r7, [pc, #336]	; (8002a78 <UART_SetConfig+0x330>)
 8002928:	fba7 3505 	umull	r3, r5, r7, r5
 800292c:	096d      	lsrs	r5, r5, #5
 800292e:	012e      	lsls	r6, r5, #4
 8002930:	f7ff fb6e 	bl	8002010 <HAL_RCC_GetPCLK2Freq>
 8002934:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002938:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800293c:	6865      	ldr	r5, [r4, #4]
 800293e:	006d      	lsls	r5, r5, #1
 8002940:	fbb0 f9f5 	udiv	r9, r0, r5
 8002944:	f7ff fb64 	bl	8002010 <HAL_RCC_GetPCLK2Freq>
 8002948:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800294c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002950:	6865      	ldr	r5, [r4, #4]
 8002952:	006d      	lsls	r5, r5, #1
 8002954:	fbb0 f5f5 	udiv	r5, r0, r5
 8002958:	fba7 3505 	umull	r3, r5, r7, r5
 800295c:	096d      	lsrs	r5, r5, #5
 800295e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002962:	fb08 9515 	mls	r5, r8, r5, r9
 8002966:	00ed      	lsls	r5, r5, #3
 8002968:	3532      	adds	r5, #50	; 0x32
 800296a:	fba7 3505 	umull	r3, r5, r7, r5
 800296e:	096d      	lsrs	r5, r5, #5
 8002970:	006d      	lsls	r5, r5, #1
 8002972:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8002976:	4435      	add	r5, r6
 8002978:	f7ff fb4a 	bl	8002010 <HAL_RCC_GetPCLK2Freq>
 800297c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002980:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002984:	6866      	ldr	r6, [r4, #4]
 8002986:	0076      	lsls	r6, r6, #1
 8002988:	fbb0 f6f6 	udiv	r6, r0, r6
 800298c:	f7ff fb40 	bl	8002010 <HAL_RCC_GetPCLK2Freq>
 8002990:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002994:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002998:	6863      	ldr	r3, [r4, #4]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	fbb0 f3f3 	udiv	r3, r0, r3
 80029a0:	fba7 2303 	umull	r2, r3, r7, r3
 80029a4:	095b      	lsrs	r3, r3, #5
 80029a6:	fb08 6813 	mls	r8, r8, r3, r6
 80029aa:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80029ae:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80029b2:	fba7 3708 	umull	r3, r7, r7, r8
 80029b6:	f3c7 1742 	ubfx	r7, r7, #5, #3
 80029ba:	6823      	ldr	r3, [r4, #0]
 80029bc:	442f      	add	r7, r5
 80029be:	609f      	str	r7, [r3, #8]
 80029c0:	e055      	b.n	8002a6e <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80029c2:	f7ff fb25 	bl	8002010 <HAL_RCC_GetPCLK2Freq>
 80029c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029ce:	6865      	ldr	r5, [r4, #4]
 80029d0:	00ad      	lsls	r5, r5, #2
 80029d2:	fbb0 f5f5 	udiv	r5, r0, r5
 80029d6:	4f28      	ldr	r7, [pc, #160]	; (8002a78 <UART_SetConfig+0x330>)
 80029d8:	fba7 3505 	umull	r3, r5, r7, r5
 80029dc:	096d      	lsrs	r5, r5, #5
 80029de:	012e      	lsls	r6, r5, #4
 80029e0:	f7ff fb16 	bl	8002010 <HAL_RCC_GetPCLK2Freq>
 80029e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029ec:	6865      	ldr	r5, [r4, #4]
 80029ee:	00ad      	lsls	r5, r5, #2
 80029f0:	fbb0 f9f5 	udiv	r9, r0, r5
 80029f4:	f7ff fb0c 	bl	8002010 <HAL_RCC_GetPCLK2Freq>
 80029f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a00:	6865      	ldr	r5, [r4, #4]
 8002a02:	00ad      	lsls	r5, r5, #2
 8002a04:	fbb0 f5f5 	udiv	r5, r0, r5
 8002a08:	fba7 3505 	umull	r3, r5, r7, r5
 8002a0c:	096d      	lsrs	r5, r5, #5
 8002a0e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002a12:	fb08 9515 	mls	r5, r8, r5, r9
 8002a16:	012d      	lsls	r5, r5, #4
 8002a18:	3532      	adds	r5, #50	; 0x32
 8002a1a:	fba7 3505 	umull	r3, r5, r7, r5
 8002a1e:	096d      	lsrs	r5, r5, #5
 8002a20:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8002a24:	4435      	add	r5, r6
 8002a26:	f7ff faf3 	bl	8002010 <HAL_RCC_GetPCLK2Freq>
 8002a2a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a2e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a32:	6866      	ldr	r6, [r4, #4]
 8002a34:	00b6      	lsls	r6, r6, #2
 8002a36:	fbb0 f6f6 	udiv	r6, r0, r6
 8002a3a:	f7ff fae9 	bl	8002010 <HAL_RCC_GetPCLK2Freq>
 8002a3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a46:	6863      	ldr	r3, [r4, #4]
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a4e:	fba7 3000 	umull	r3, r0, r7, r0
 8002a52:	0940      	lsrs	r0, r0, #5
 8002a54:	fb08 6810 	mls	r8, r8, r0, r6
 8002a58:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8002a5c:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8002a60:	fba7 3708 	umull	r3, r7, r7, r8
 8002a64:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8002a68:	6823      	ldr	r3, [r4, #0]
 8002a6a:	442f      	add	r7, r5
 8002a6c:	609f      	str	r7, [r3, #8]
}
 8002a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a72:	bf00      	nop
 8002a74:	40011000 	.word	0x40011000
 8002a78:	51eb851f 	.word	0x51eb851f

08002a7c <UART_WaitOnFlagUntilTimeout>:
{
 8002a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a80:	4605      	mov	r5, r0
 8002a82:	460f      	mov	r7, r1
 8002a84:	4616      	mov	r6, r2
 8002a86:	4698      	mov	r8, r3
 8002a88:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002a8a:	682b      	ldr	r3, [r5, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	ea37 0303 	bics.w	r3, r7, r3
 8002a92:	bf0c      	ite	eq
 8002a94:	2301      	moveq	r3, #1
 8002a96:	2300      	movne	r3, #0
 8002a98:	42b3      	cmp	r3, r6
 8002a9a:	d11d      	bne.n	8002ad8 <UART_WaitOnFlagUntilTimeout+0x5c>
    if(Timeout != HAL_MAX_DELAY)
 8002a9c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002aa0:	d0f3      	beq.n	8002a8a <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002aa2:	b12c      	cbz	r4, 8002ab0 <UART_WaitOnFlagUntilTimeout+0x34>
 8002aa4:	f7fe fa5a 	bl	8000f5c <HAL_GetTick>
 8002aa8:	eba0 0008 	sub.w	r0, r0, r8
 8002aac:	42a0      	cmp	r0, r4
 8002aae:	d9ec      	bls.n	8002a8a <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ab0:	682a      	ldr	r2, [r5, #0]
 8002ab2:	68d3      	ldr	r3, [r2, #12]
 8002ab4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ab8:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aba:	682a      	ldr	r2, [r5, #0]
 8002abc:	6953      	ldr	r3, [r2, #20]
 8002abe:	f023 0301 	bic.w	r3, r3, #1
 8002ac2:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002ac4:	2320      	movs	r3, #32
 8002ac6:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002aca:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002ace:	2300      	movs	r3, #0
 8002ad0:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8002ad4:	2003      	movs	r0, #3
 8002ad6:	e000      	b.n	8002ada <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 8002ad8:	2000      	movs	r0, #0
}
 8002ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002ade <HAL_UART_Init>:
  if(huart == NULL)
 8002ade:	b358      	cbz	r0, 8002b38 <HAL_UART_Init+0x5a>
{
 8002ae0:	b510      	push	{r4, lr}
 8002ae2:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8002ae4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002ae8:	b30b      	cbz	r3, 8002b2e <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002aea:	2324      	movs	r3, #36	; 0x24
 8002aec:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002af0:	6822      	ldr	r2, [r4, #0]
 8002af2:	68d3      	ldr	r3, [r2, #12]
 8002af4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002af8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002afa:	4620      	mov	r0, r4
 8002afc:	f7ff fe24 	bl	8002748 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b00:	6822      	ldr	r2, [r4, #0]
 8002b02:	6913      	ldr	r3, [r2, #16]
 8002b04:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002b08:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b0a:	6822      	ldr	r2, [r4, #0]
 8002b0c:	6953      	ldr	r3, [r2, #20]
 8002b0e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002b12:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002b14:	6822      	ldr	r2, [r4, #0]
 8002b16:	68d3      	ldr	r3, [r2, #12]
 8002b18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b1c:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b1e:	2000      	movs	r0, #0
 8002b20:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002b22:	2320      	movs	r3, #32
 8002b24:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002b28:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8002b2c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002b2e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002b32:	f001 fbdf 	bl	80042f4 <HAL_UART_MspInit>
 8002b36:	e7d8      	b.n	8002aea <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002b38:	2001      	movs	r0, #1
}
 8002b3a:	4770      	bx	lr

08002b3c <HAL_UART_Transmit>:
{
 8002b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8002b44:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b20      	cmp	r3, #32
 8002b4c:	d155      	bne.n	8002bfa <HAL_UART_Transmit+0xbe>
 8002b4e:	4604      	mov	r4, r0
 8002b50:	460d      	mov	r5, r1
 8002b52:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0)) 
 8002b54:	2900      	cmp	r1, #0
 8002b56:	d055      	beq.n	8002c04 <HAL_UART_Transmit+0xc8>
 8002b58:	2a00      	cmp	r2, #0
 8002b5a:	d055      	beq.n	8002c08 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8002b5c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d053      	beq.n	8002c0c <HAL_UART_Transmit+0xd0>
 8002b64:	2301      	movs	r3, #1
 8002b66:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b6e:	2321      	movs	r3, #33	; 0x21
 8002b70:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002b74:	f7fe f9f2 	bl	8000f5c <HAL_GetTick>
 8002b78:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002b7a:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b7e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002b82:	e010      	b.n	8002ba6 <HAL_UART_Transmit+0x6a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b84:	9600      	str	r6, [sp, #0]
 8002b86:	463b      	mov	r3, r7
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2180      	movs	r1, #128	; 0x80
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f7ff ff75 	bl	8002a7c <UART_WaitOnFlagUntilTimeout>
 8002b92:	2800      	cmp	r0, #0
 8002b94:	d13c      	bne.n	8002c10 <HAL_UART_Transmit+0xd4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002b96:	882b      	ldrh	r3, [r5, #0]
 8002b98:	6822      	ldr	r2, [r4, #0]
 8002b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b9e:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002ba0:	6923      	ldr	r3, [r4, #16]
 8002ba2:	b9c3      	cbnz	r3, 8002bd6 <HAL_UART_Transmit+0x9a>
          pData +=2U;
 8002ba4:	3502      	adds	r5, #2
    while(huart->TxXferCount > 0U)
 8002ba6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	b1b3      	cbz	r3, 8002bda <HAL_UART_Transmit+0x9e>
      huart->TxXferCount--;
 8002bac:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002bb4:	68a3      	ldr	r3, [r4, #8]
 8002bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bba:	d0e3      	beq.n	8002b84 <HAL_UART_Transmit+0x48>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bbc:	9600      	str	r6, [sp, #0]
 8002bbe:	463b      	mov	r3, r7
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2180      	movs	r1, #128	; 0x80
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	f7ff ff59 	bl	8002a7c <UART_WaitOnFlagUntilTimeout>
 8002bca:	bb18      	cbnz	r0, 8002c14 <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002bcc:	782a      	ldrb	r2, [r5, #0]
 8002bce:	6823      	ldr	r3, [r4, #0]
 8002bd0:	605a      	str	r2, [r3, #4]
 8002bd2:	3501      	adds	r5, #1
 8002bd4:	e7e7      	b.n	8002ba6 <HAL_UART_Transmit+0x6a>
          pData +=1U;
 8002bd6:	3501      	adds	r5, #1
 8002bd8:	e7e5      	b.n	8002ba6 <HAL_UART_Transmit+0x6a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bda:	9600      	str	r6, [sp, #0]
 8002bdc:	463b      	mov	r3, r7
 8002bde:	2200      	movs	r2, #0
 8002be0:	2140      	movs	r1, #64	; 0x40
 8002be2:	4620      	mov	r0, r4
 8002be4:	f7ff ff4a 	bl	8002a7c <UART_WaitOnFlagUntilTimeout>
 8002be8:	4603      	mov	r3, r0
 8002bea:	b9a8      	cbnz	r0, 8002c18 <HAL_UART_Transmit+0xdc>
      huart->gState = HAL_UART_STATE_READY;
 8002bec:	2220      	movs	r2, #32
 8002bee:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8002bf8:	e000      	b.n	8002bfc <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 8002bfa:	2302      	movs	r3, #2
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	b002      	add	sp, #8
 8002c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e7f9      	b.n	8002bfc <HAL_UART_Transmit+0xc0>
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e7f7      	b.n	8002bfc <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e7f5      	b.n	8002bfc <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e7f3      	b.n	8002bfc <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e7f1      	b.n	8002bfc <HAL_UART_Transmit+0xc0>
      return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e7ef      	b.n	8002bfc <HAL_UART_Transmit+0xc0>

08002c1c <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8002c1c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b20      	cmp	r3, #32
 8002c24:	d11b      	bne.n	8002c5e <HAL_UART_Receive_IT+0x42>
    if((pData == NULL ) || (Size == 0)) 
 8002c26:	b1e1      	cbz	r1, 8002c62 <HAL_UART_Receive_IT+0x46>
 8002c28:	b1ea      	cbz	r2, 8002c66 <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 8002c2a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d01b      	beq.n	8002c6a <HAL_UART_Receive_IT+0x4e>
    huart->pRxBuffPtr = pData;
 8002c32:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8002c34:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002c36:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c3c:	2222      	movs	r2, #34	; 0x22
 8002c3e:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 8002c42:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c46:	6801      	ldr	r1, [r0, #0]
 8002c48:	694a      	ldr	r2, [r1, #20]
 8002c4a:	f042 0201 	orr.w	r2, r2, #1
 8002c4e:	614a      	str	r2, [r1, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002c50:	6801      	ldr	r1, [r0, #0]
 8002c52:	68ca      	ldr	r2, [r1, #12]
 8002c54:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8002c58:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	4770      	bx	lr
    return HAL_BUSY; 
 8002c5e:	2002      	movs	r0, #2
 8002c60:	4770      	bx	lr
      return HAL_ERROR;
 8002c62:	2001      	movs	r0, #1
 8002c64:	4770      	bx	lr
 8002c66:	2001      	movs	r0, #1
 8002c68:	4770      	bx	lr
    __HAL_LOCK(huart);
 8002c6a:	2002      	movs	r0, #2
}
 8002c6c:	4770      	bx	lr

08002c6e <HAL_UART_TxCpltCallback>:
}
 8002c6e:	4770      	bx	lr

08002c70 <UART_EndTransmit_IT>:
{
 8002c70:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002c72:	6801      	ldr	r1, [r0, #0]
 8002c74:	68cb      	ldr	r3, [r1, #12]
 8002c76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c7a:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002c7c:	2320      	movs	r3, #32
 8002c7e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002c82:	f7ff fff4 	bl	8002c6e <HAL_UART_TxCpltCallback>
}
 8002c86:	2000      	movs	r0, #0
 8002c88:	bd08      	pop	{r3, pc}

08002c8a <UART_Receive_IT>:
{
 8002c8a:	b508      	push	{r3, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002c8c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b22      	cmp	r3, #34	; 0x22
 8002c94:	d140      	bne.n	8002d18 <UART_Receive_IT+0x8e>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c96:	6883      	ldr	r3, [r0, #8]
 8002c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c9c:	d00e      	beq.n	8002cbc <UART_Receive_IT+0x32>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002c9e:	6903      	ldr	r3, [r0, #16]
 8002ca0:	bb03      	cbnz	r3, 8002ce4 <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ca2:	6803      	ldr	r3, [r0, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002ca8:	1c59      	adds	r1, r3, #1
 8002caa:	6281      	str	r1, [r0, #40]	; 0x28
 8002cac:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0U)
 8002cae:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8002cb6:	b1f3      	cbz	r3, 8002cf6 <UART_Receive_IT+0x6c>
    return HAL_OK;
 8002cb8:	2000      	movs	r0, #0
 8002cba:	e02e      	b.n	8002d1a <UART_Receive_IT+0x90>
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8002cbc:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002cbe:	6903      	ldr	r3, [r0, #16]
 8002cc0:	b943      	cbnz	r3, 8002cd4 <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002cc2:	6803      	ldr	r3, [r0, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cca:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8002ccc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002cce:	3302      	adds	r3, #2
 8002cd0:	6283      	str	r3, [r0, #40]	; 0x28
 8002cd2:	e7ec      	b.n	8002cae <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002cd4:	6803      	ldr	r3, [r0, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8002cdc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002cde:	3301      	adds	r3, #1
 8002ce0:	6283      	str	r3, [r0, #40]	; 0x28
 8002ce2:	e7e4      	b.n	8002cae <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ce4:	6803      	ldr	r3, [r0, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002cea:	1c51      	adds	r1, r2, #1
 8002cec:	6281      	str	r1, [r0, #40]	; 0x28
 8002cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cf2:	7013      	strb	r3, [r2, #0]
 8002cf4:	e7db      	b.n	8002cae <UART_Receive_IT+0x24>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cf6:	6802      	ldr	r2, [r0, #0]
 8002cf8:	68d3      	ldr	r3, [r2, #12]
 8002cfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002cfe:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d00:	6802      	ldr	r2, [r0, #0]
 8002d02:	6953      	ldr	r3, [r2, #20]
 8002d04:	f023 0301 	bic.w	r3, r3, #1
 8002d08:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002d0a:	2320      	movs	r3, #32
 8002d0c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002d10:	f000 fa38 	bl	8003184 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8002d14:	2000      	movs	r0, #0
 8002d16:	e000      	b.n	8002d1a <UART_Receive_IT+0x90>
    return HAL_BUSY;
 8002d18:	2002      	movs	r0, #2
}
 8002d1a:	bd08      	pop	{r3, pc}

08002d1c <HAL_UART_ErrorCallback>:
}
 8002d1c:	4770      	bx	lr
	...

08002d20 <HAL_UART_IRQHandler>:
{
 8002d20:	b510      	push	{r4, lr}
 8002d22:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d24:	6802      	ldr	r2, [r0, #0]
 8002d26:	6813      	ldr	r3, [r2, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d28:	68d1      	ldr	r1, [r2, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d2a:	6952      	ldr	r2, [r2, #20]
  if(errorflags == RESET)
 8002d2c:	f013 000f 	ands.w	r0, r3, #15
 8002d30:	d105      	bne.n	8002d3e <HAL_UART_IRQHandler+0x1e>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d32:	f013 0f20 	tst.w	r3, #32
 8002d36:	d002      	beq.n	8002d3e <HAL_UART_IRQHandler+0x1e>
 8002d38:	f011 0f20 	tst.w	r1, #32
 8002d3c:	d153      	bne.n	8002de6 <HAL_UART_IRQHandler+0xc6>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d3e:	2800      	cmp	r0, #0
 8002d40:	d067      	beq.n	8002e12 <HAL_UART_IRQHandler+0xf2>
 8002d42:	f012 0201 	ands.w	r2, r2, #1
 8002d46:	d102      	bne.n	8002d4e <HAL_UART_IRQHandler+0x2e>
 8002d48:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002d4c:	d061      	beq.n	8002e12 <HAL_UART_IRQHandler+0xf2>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d4e:	f013 0f01 	tst.w	r3, #1
 8002d52:	d006      	beq.n	8002d62 <HAL_UART_IRQHandler+0x42>
 8002d54:	f411 7f80 	tst.w	r1, #256	; 0x100
 8002d58:	d003      	beq.n	8002d62 <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d5a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002d5c:	f040 0001 	orr.w	r0, r0, #1
 8002d60:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d62:	f013 0f04 	tst.w	r3, #4
 8002d66:	d004      	beq.n	8002d72 <HAL_UART_IRQHandler+0x52>
 8002d68:	b11a      	cbz	r2, 8002d72 <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d6a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002d6c:	f040 0002 	orr.w	r0, r0, #2
 8002d70:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d72:	f013 0f02 	tst.w	r3, #2
 8002d76:	d004      	beq.n	8002d82 <HAL_UART_IRQHandler+0x62>
 8002d78:	b11a      	cbz	r2, 8002d82 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d7a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002d7c:	f040 0004 	orr.w	r0, r0, #4
 8002d80:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d82:	f013 0f08 	tst.w	r3, #8
 8002d86:	d004      	beq.n	8002d92 <HAL_UART_IRQHandler+0x72>
 8002d88:	b11a      	cbz	r2, 8002d92 <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d8a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002d8c:	f042 0208 	orr.w	r2, r2, #8
 8002d90:	63e2      	str	r2, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d92:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002d94:	2a00      	cmp	r2, #0
 8002d96:	d048      	beq.n	8002e2a <HAL_UART_IRQHandler+0x10a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d98:	f013 0f20 	tst.w	r3, #32
 8002d9c:	d002      	beq.n	8002da4 <HAL_UART_IRQHandler+0x84>
 8002d9e:	f011 0f20 	tst.w	r1, #32
 8002da2:	d124      	bne.n	8002dee <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002da4:	6823      	ldr	r3, [r4, #0]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002dac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002dae:	f012 0f08 	tst.w	r2, #8
 8002db2:	d100      	bne.n	8002db6 <HAL_UART_IRQHandler+0x96>
 8002db4:	b33b      	cbz	r3, 8002e06 <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8002db6:	4620      	mov	r0, r4
 8002db8:	f7ff fc83 	bl	80026c2 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dbc:	6823      	ldr	r3, [r4, #0]
 8002dbe:	695a      	ldr	r2, [r3, #20]
 8002dc0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002dc4:	d01b      	beq.n	8002dfe <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dc6:	695a      	ldr	r2, [r3, #20]
 8002dc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dcc:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002dce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002dd0:	b18b      	cbz	r3, 8002df6 <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dd2:	4a1a      	ldr	r2, [pc, #104]	; (8002e3c <HAL_UART_IRQHandler+0x11c>)
 8002dd4:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dd6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002dd8:	f7fe fd2b 	bl	8001832 <HAL_DMA_Abort_IT>
 8002ddc:	b328      	cbz	r0, 8002e2a <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002dde:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002de0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002de2:	4798      	blx	r3
 8002de4:	e021      	b.n	8002e2a <HAL_UART_IRQHandler+0x10a>
      UART_Receive_IT(huart);
 8002de6:	4620      	mov	r0, r4
 8002de8:	f7ff ff4f 	bl	8002c8a <UART_Receive_IT>
      return;
 8002dec:	e01d      	b.n	8002e2a <HAL_UART_IRQHandler+0x10a>
        UART_Receive_IT(huart);
 8002dee:	4620      	mov	r0, r4
 8002df0:	f7ff ff4b 	bl	8002c8a <UART_Receive_IT>
 8002df4:	e7d6      	b.n	8002da4 <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 8002df6:	4620      	mov	r0, r4
 8002df8:	f7ff ff90 	bl	8002d1c <HAL_UART_ErrorCallback>
 8002dfc:	e015      	b.n	8002e2a <HAL_UART_IRQHandler+0x10a>
          HAL_UART_ErrorCallback(huart);
 8002dfe:	4620      	mov	r0, r4
 8002e00:	f7ff ff8c 	bl	8002d1c <HAL_UART_ErrorCallback>
 8002e04:	e011      	b.n	8002e2a <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 8002e06:	4620      	mov	r0, r4
 8002e08:	f7ff ff88 	bl	8002d1c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002e10:	e00b      	b.n	8002e2a <HAL_UART_IRQHandler+0x10a>
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e12:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002e16:	d002      	beq.n	8002e1e <HAL_UART_IRQHandler+0xfe>
 8002e18:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002e1c:	d106      	bne.n	8002e2c <HAL_UART_IRQHandler+0x10c>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e1e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002e22:	d002      	beq.n	8002e2a <HAL_UART_IRQHandler+0x10a>
 8002e24:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002e28:	d104      	bne.n	8002e34 <HAL_UART_IRQHandler+0x114>
}
 8002e2a:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8002e2c:	4620      	mov	r0, r4
 8002e2e:	f7ff fc56 	bl	80026de <UART_Transmit_IT>
    return;
 8002e32:	e7fa      	b.n	8002e2a <HAL_UART_IRQHandler+0x10a>
    UART_EndTransmit_IT(huart);
 8002e34:	4620      	mov	r0, r4
 8002e36:	f7ff ff1b 	bl	8002c70 <UART_EndTransmit_IT>
    return;
 8002e3a:	e7f6      	b.n	8002e2a <HAL_UART_IRQHandler+0x10a>
 8002e3c:	08002e41 	.word	0x08002e41

08002e40 <UART_DMAAbortOnError>:
{
 8002e40:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e42:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8002e48:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002e4a:	f7ff ff67 	bl	8002d1c <HAL_UART_ErrorCallback>
}
 8002e4e:	bd08      	pop	{r3, pc}

08002e50 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002e50:	b508      	push	{r3, lr}

  hcan1.Instance = CAN1;
 8002e52:	480f      	ldr	r0, [pc, #60]	; (8002e90 <MX_CAN1_Init+0x40>)
 8002e54:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <MX_CAN1_Init+0x44>)
 8002e56:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 7;
 8002e58:	2307      	movs	r3, #7
 8002e5a:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002e60:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8002e62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e66:	6102      	str	r2, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002e68:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002e6c:	6142      	str	r2, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002e6e:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002e70:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002e72:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8002e74:	2201      	movs	r2, #1
 8002e76:	76c2      	strb	r2, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002e78:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8002e7a:	7742      	strb	r2, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002e7c:	f7fe f888 	bl	8000f90 <HAL_CAN_Init>
 8002e80:	b900      	cbnz	r0, 8002e84 <MX_CAN1_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8002e82:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8002e84:	2146      	movs	r1, #70	; 0x46
 8002e86:	4804      	ldr	r0, [pc, #16]	; (8002e98 <MX_CAN1_Init+0x48>)
 8002e88:	f000 fc74 	bl	8003774 <_Error_Handler>
}
 8002e8c:	e7f9      	b.n	8002e82 <MX_CAN1_Init+0x32>
 8002e8e:	bf00      	nop
 8002e90:	2000023c 	.word	0x2000023c
 8002e94:	40006400 	.word	0x40006400
 8002e98:	080065f0 	.word	0x080065f0

08002e9c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8002e9c:	b508      	push	{r3, lr}

  hcan2.Instance = CAN2;
 8002e9e:	480f      	ldr	r0, [pc, #60]	; (8002edc <MX_CAN2_Init+0x40>)
 8002ea0:	4b0f      	ldr	r3, [pc, #60]	; (8002ee0 <MX_CAN2_Init+0x44>)
 8002ea2:	6003      	str	r3, [r0, #0]
  hcan2.Init.Prescaler = 7;
 8002ea4:	2307      	movs	r3, #7
 8002ea6:	6043      	str	r3, [r0, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	6083      	str	r3, [r0, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002eac:	60c3      	str	r3, [r0, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8002eae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002eb2:	6102      	str	r2, [r0, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002eb4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002eb8:	6142      	str	r2, [r0, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002eba:	7603      	strb	r3, [r0, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8002ebc:	7643      	strb	r3, [r0, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002ebe:	7683      	strb	r3, [r0, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	76c2      	strb	r2, [r0, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002ec4:	7703      	strb	r3, [r0, #28]
  hcan2.Init.TransmitFifoPriority = ENABLE;
 8002ec6:	7742      	strb	r2, [r0, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002ec8:	f7fe f862 	bl	8000f90 <HAL_CAN_Init>
 8002ecc:	b900      	cbnz	r0, 8002ed0 <MX_CAN2_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8002ece:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8002ed0:	215c      	movs	r1, #92	; 0x5c
 8002ed2:	4804      	ldr	r0, [pc, #16]	; (8002ee4 <MX_CAN2_Init+0x48>)
 8002ed4:	f000 fc4e 	bl	8003774 <_Error_Handler>
}
 8002ed8:	e7f9      	b.n	8002ece <MX_CAN2_Init+0x32>
 8002eda:	bf00      	nop
 8002edc:	20000214 	.word	0x20000214
 8002ee0:	40006800 	.word	0x40006800
 8002ee4:	080065f0 	.word	0x080065f0

08002ee8 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002ee8:	b510      	push	{r4, lr}
 8002eea:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;
  if(canHandle->Instance==CAN1)
 8002eec:	6803      	ldr	r3, [r0, #0]
 8002eee:	4a3c      	ldr	r2, [pc, #240]	; (8002fe0 <HAL_CAN_MspInit+0xf8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d004      	beq.n	8002efe <HAL_CAN_MspInit+0x16>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
  else if(canHandle->Instance==CAN2)
 8002ef4:	4a3b      	ldr	r2, [pc, #236]	; (8002fe4 <HAL_CAN_MspInit+0xfc>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d032      	beq.n	8002f60 <HAL_CAN_MspInit+0x78>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8002efa:	b008      	add	sp, #32
 8002efc:	bd10      	pop	{r4, pc}
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002efe:	4a3a      	ldr	r2, [pc, #232]	; (8002fe8 <HAL_CAN_MspInit+0x100>)
 8002f00:	6813      	ldr	r3, [r2, #0]
 8002f02:	3301      	adds	r3, #1
 8002f04:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d01d      	beq.n	8002f46 <HAL_CAN_MspInit+0x5e>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0e:	2202      	movs	r2, #2
 8002f10:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f12:	2400      	movs	r4, #0
 8002f14:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f16:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002f18:	2309      	movs	r3, #9
 8002f1a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f1c:	a903      	add	r1, sp, #12
 8002f1e:	4833      	ldr	r0, [pc, #204]	; (8002fec <HAL_CAN_MspInit+0x104>)
 8002f20:	f7fe fc9a 	bl	8001858 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002f24:	4622      	mov	r2, r4
 8002f26:	4621      	mov	r1, r4
 8002f28:	2014      	movs	r0, #20
 8002f2a:	f7fe fc17 	bl	800175c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002f2e:	2014      	movs	r0, #20
 8002f30:	f7fe fc48 	bl	80017c4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8002f34:	4622      	mov	r2, r4
 8002f36:	4621      	mov	r1, r4
 8002f38:	2015      	movs	r0, #21
 8002f3a:	f7fe fc0f 	bl	800175c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002f3e:	2015      	movs	r0, #21
 8002f40:	f7fe fc40 	bl	80017c4 <HAL_NVIC_EnableIRQ>
 8002f44:	e7d9      	b.n	8002efa <HAL_CAN_MspInit+0x12>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	4b29      	ldr	r3, [pc, #164]	; (8002ff0 <HAL_CAN_MspInit+0x108>)
 8002f4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f4e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002f52:	641a      	str	r2, [r3, #64]	; 0x40
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	9b00      	ldr	r3, [sp, #0]
 8002f5e:	e7d4      	b.n	8002f0a <HAL_CAN_MspInit+0x22>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002f60:	2300      	movs	r3, #0
 8002f62:	9301      	str	r3, [sp, #4]
 8002f64:	4b22      	ldr	r3, [pc, #136]	; (8002ff0 <HAL_CAN_MspInit+0x108>)
 8002f66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f68:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002f6c:	641a      	str	r2, [r3, #64]	; 0x40
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f74:	9301      	str	r3, [sp, #4]
 8002f76:	9b01      	ldr	r3, [sp, #4]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002f78:	4a1b      	ldr	r2, [pc, #108]	; (8002fe8 <HAL_CAN_MspInit+0x100>)
 8002f7a:	6813      	ldr	r3, [r2, #0]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d01f      	beq.n	8002fc4 <HAL_CAN_MspInit+0xdc>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002f84:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002f88:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8e:	2400      	movs	r4, #0
 8002f90:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f92:	2303      	movs	r3, #3
 8002f94:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002f96:	2309      	movs	r3, #9
 8002f98:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f9a:	a903      	add	r1, sp, #12
 8002f9c:	4815      	ldr	r0, [pc, #84]	; (8002ff4 <HAL_CAN_MspInit+0x10c>)
 8002f9e:	f7fe fc5b 	bl	8001858 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8002fa2:	4622      	mov	r2, r4
 8002fa4:	4621      	mov	r1, r4
 8002fa6:	2040      	movs	r0, #64	; 0x40
 8002fa8:	f7fe fbd8 	bl	800175c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002fac:	2040      	movs	r0, #64	; 0x40
 8002fae:	f7fe fc09 	bl	80017c4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8002fb2:	4622      	mov	r2, r4
 8002fb4:	4621      	mov	r1, r4
 8002fb6:	2041      	movs	r0, #65	; 0x41
 8002fb8:	f7fe fbd0 	bl	800175c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8002fbc:	2041      	movs	r0, #65	; 0x41
 8002fbe:	f7fe fc01 	bl	80017c4 <HAL_NVIC_EnableIRQ>
}
 8002fc2:	e79a      	b.n	8002efa <HAL_CAN_MspInit+0x12>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	9302      	str	r3, [sp, #8]
 8002fc8:	4b09      	ldr	r3, [pc, #36]	; (8002ff0 <HAL_CAN_MspInit+0x108>)
 8002fca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fcc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002fd0:	641a      	str	r2, [r3, #64]	; 0x40
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd8:	9302      	str	r3, [sp, #8]
 8002fda:	9b02      	ldr	r3, [sp, #8]
 8002fdc:	e7d2      	b.n	8002f84 <HAL_CAN_MspInit+0x9c>
 8002fde:	bf00      	nop
 8002fe0:	40006400 	.word	0x40006400
 8002fe4:	40006800 	.word	0x40006800
 8002fe8:	200001f8 	.word	0x200001f8
 8002fec:	40020c00 	.word	0x40020c00
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	40020400 	.word	0x40020400

08002ff8 <initCanFilter>:
  /* USER CODE END CAN2_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void initCanFilter() {
 8002ff8:	b510      	push	{r4, lr}
 8002ffa:	b08a      	sub	sp, #40	; 0x28
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8002ffc:	2400      	movs	r4, #0
 8002ffe:	9405      	str	r4, [sp, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003000:	9406      	str	r4, [sp, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8003002:	2301      	movs	r3, #1
 8003004:	9307      	str	r3, [sp, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8003006:	9400      	str	r4, [sp, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8003008:	9401      	str	r4, [sp, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 800300a:	9402      	str	r4, [sp, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 800300c:	9403      	str	r4, [sp, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800300e:	9404      	str	r4, [sp, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8003010:	9308      	str	r3, [sp, #32]
	sFilterConfig.SlaveStartFilterBank = 0;
 8003012:	9409      	str	r4, [sp, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8003014:	4669      	mov	r1, sp
 8003016:	4805      	ldr	r0, [pc, #20]	; (800302c <initCanFilter+0x34>)
 8003018:	f7fe f860 	bl	80010dc <HAL_CAN_ConfigFilter>

	sFilterConfig.SlaveStartFilterBank = 0;
 800301c:	9409      	str	r4, [sp, #36]	; 0x24
	sFilterConfig.FilterBank = 0;
 800301e:	9405      	str	r4, [sp, #20]

	HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig);
 8003020:	4669      	mov	r1, sp
 8003022:	4803      	ldr	r0, [pc, #12]	; (8003030 <initCanFilter+0x38>)
 8003024:	f7fe f85a 	bl	80010dc <HAL_CAN_ConfigFilter>
}
 8003028:	b00a      	add	sp, #40	; 0x28
 800302a:	bd10      	pop	{r4, pc}
 800302c:	2000023c 	.word	0x2000023c
 8003030:	20000214 	.word	0x20000214

08003034 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003038:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800303a:	2400      	movs	r4, #0
 800303c:	9400      	str	r4, [sp, #0]
 800303e:	4b3e      	ldr	r3, [pc, #248]	; (8003138 <MX_GPIO_Init+0x104>)
 8003040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003042:	f042 0210 	orr.w	r2, r2, #16
 8003046:	631a      	str	r2, [r3, #48]	; 0x30
 8003048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800304a:	f002 0210 	and.w	r2, r2, #16
 800304e:	9200      	str	r2, [sp, #0]
 8003050:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003052:	9401      	str	r4, [sp, #4]
 8003054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003056:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800305a:	631a      	str	r2, [r3, #48]	; 0x30
 800305c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800305e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003062:	9201      	str	r2, [sp, #4]
 8003064:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003066:	9402      	str	r4, [sp, #8]
 8003068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800306a:	f042 0201 	orr.w	r2, r2, #1
 800306e:	631a      	str	r2, [r3, #48]	; 0x30
 8003070:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003072:	f002 0201 	and.w	r2, r2, #1
 8003076:	9202      	str	r2, [sp, #8]
 8003078:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800307a:	9403      	str	r4, [sp, #12]
 800307c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800307e:	f042 0202 	orr.w	r2, r2, #2
 8003082:	631a      	str	r2, [r3, #48]	; 0x30
 8003084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003086:	f002 0202 	and.w	r2, r2, #2
 800308a:	9203      	str	r2, [sp, #12]
 800308c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800308e:	9404      	str	r4, [sp, #16]
 8003090:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003092:	f042 0208 	orr.w	r2, r2, #8
 8003096:	631a      	str	r2, [r3, #48]	; 0x30
 8003098:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800309a:	f002 0208 	and.w	r2, r2, #8
 800309e:	9204      	str	r2, [sp, #16]
 80030a0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030a2:	9405      	str	r4, [sp, #20]
 80030a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030aa:	631a      	str	r2, [r3, #48]	; 0x30
 80030ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ae:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80030b2:	9205      	str	r2, [sp, #20]
 80030b4:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80030b6:	9406      	str	r4, [sp, #24]
 80030b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ba:	f042 0220 	orr.w	r2, r2, #32
 80030be:	631a      	str	r2, [r3, #48]	; 0x30
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0320 	and.w	r3, r3, #32
 80030c6:	9306      	str	r3, [sp, #24]
 80030c8:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, POWER_OUT1_Pin|POWER_OUT2_Pin|POWER_OUT3_Pin|POWER_OUT4_Pin, GPIO_PIN_RESET);
 80030ca:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8003144 <MX_GPIO_Init+0x110>
 80030ce:	4622      	mov	r2, r4
 80030d0:	213c      	movs	r1, #60	; 0x3c
 80030d2:	4640      	mov	r0, r8
 80030d4:	f7fe fcb0 	bl	8001a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI_MPU_CS_Pin|LED_G_Pin, GPIO_PIN_SET);
 80030d8:	4f18      	ldr	r7, [pc, #96]	; (800313c <MX_GPIO_Init+0x108>)
 80030da:	2201      	movs	r2, #1
 80030dc:	f244 0140 	movw	r1, #16448	; 0x4040
 80030e0:	4638      	mov	r0, r7
 80030e2:	f7fe fca9 	bl	8001a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 80030e6:	4e16      	ldr	r6, [pc, #88]	; (8003140 <MX_GPIO_Init+0x10c>)
 80030e8:	2201      	movs	r2, #1
 80030ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80030ee:	4630      	mov	r0, r6
 80030f0:	f7fe fca2 	bl	8001a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = POWER_OUT1_Pin|POWER_OUT2_Pin|POWER_OUT3_Pin|POWER_OUT4_Pin;
 80030f4:	233c      	movs	r3, #60	; 0x3c
 80030f6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030f8:	2501      	movs	r5, #1
 80030fa:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fc:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030fe:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003100:	a907      	add	r1, sp, #28
 8003102:	4640      	mov	r0, r8
 8003104:	f7fe fba8 	bl	8001858 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = SPI_MPU_CS_Pin|LED_G_Pin;
 8003108:	f244 0340 	movw	r3, #16448	; 0x4040
 800310c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800310e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003110:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003112:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003114:	a907      	add	r1, sp, #28
 8003116:	4638      	mov	r0, r7
 8003118:	f7fe fb9e 	bl	8001858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 800311c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003120:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003122:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003124:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003126:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8003128:	a907      	add	r1, sp, #28
 800312a:	4630      	mov	r0, r6
 800312c:	f7fe fb94 	bl	8001858 <HAL_GPIO_Init>

}
 8003130:	b00c      	add	sp, #48	; 0x30
 8003132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003136:	bf00      	nop
 8003138:	40023800 	.word	0x40023800
 800313c:	40021400 	.word	0x40021400
 8003140:	40021000 	.word	0x40021000
 8003144:	40021c00 	.word	0x40021c00

08003148 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch) {
 8003148:	b500      	push	{lr}
 800314a:	b083      	sub	sp, #12
 800314c:	a902      	add	r1, sp, #8
 800314e:	f801 0d01 	strb.w	r0, [r1, #-1]!
HAL_UART_Transmit(&huart7, &ch, 1, 1);
 8003152:	2301      	movs	r3, #1
 8003154:	461a      	mov	r2, r3
 8003156:	4803      	ldr	r0, [pc, #12]	; (8003164 <__io_putchar+0x1c>)
 8003158:	f7ff fcf0 	bl	8002b3c <HAL_UART_Transmit>
}
 800315c:	b003      	add	sp, #12
 800315e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003162:	bf00      	nop
 8003164:	200005c0 	.word	0x200005c0

08003168 <map>:
void Gimbal_Task();
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8003168:	b410      	push	{r4}
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800316a:	1a40      	subs	r0, r0, r1
 800316c:	9c01      	ldr	r4, [sp, #4]
 800316e:	1ae4      	subs	r4, r4, r3
 8003170:	fb04 f000 	mul.w	r0, r4, r0
 8003174:	1a52      	subs	r2, r2, r1
 8003176:	fb90 f0f2 	sdiv	r0, r0, r2
}
 800317a:	4418      	add	r0, r3
 800317c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003180:	4770      	bx	lr
	...

08003184 <HAL_UART_RxCpltCallback>:
		timerTask();
		HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8003184:	b538      	push	{r3, r4, r5, lr}
	if (UartHandle->Instance == huart1.Instance) {	//Propo-receive Interrupts
 8003186:	6802      	ldr	r2, [r0, #0]
 8003188:	4b1c      	ldr	r3, [pc, #112]	; (80031fc <HAL_UART_RxCpltCallback+0x78>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d000      	beq.n	8003192 <HAL_UART_RxCpltCallback+0xe>
		rc.ch4 = (((rcData[5] & 0x0F) << 7) | (rcData[4] >> 1));
		rc.ch4 -= 1024;
		rc.sw1 = ((rcData[5] & 0x30) >> 4);
		rc.sw2 = ((rcData[5] & 0xC0) >> 6);
	}
}
 8003190:	bd38      	pop	{r3, r4, r5, pc}
		HAL_UART_Receive_IT(&huart1, rcData, 18);
 8003192:	4c1b      	ldr	r4, [pc, #108]	; (8003200 <HAL_UART_RxCpltCallback+0x7c>)
 8003194:	2212      	movs	r2, #18
 8003196:	4621      	mov	r1, r4
 8003198:	4818      	ldr	r0, [pc, #96]	; (80031fc <HAL_UART_RxCpltCallback+0x78>)
 800319a:	f7ff fd3f 	bl	8002c1c <HAL_UART_Receive_IT>
		rc.ch1 = (((rcData[1] & 0x07) << 8) | rcData[0]);
 800319e:	7860      	ldrb	r0, [r4, #1]
 80031a0:	0203      	lsls	r3, r0, #8
 80031a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031a6:	7822      	ldrb	r2, [r4, #0]
 80031a8:	4313      	orrs	r3, r2
		rc.ch1 -= 1024;
 80031aa:	4916      	ldr	r1, [pc, #88]	; (8003204 <HAL_UART_RxCpltCallback+0x80>)
 80031ac:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80031b0:	800b      	strh	r3, [r1, #0]
		rc.ch2 = (((rcData[2] & 0x3F) << 5) | (rcData[1] >> 3));
 80031b2:	78a5      	ldrb	r5, [r4, #2]
 80031b4:	016a      	lsls	r2, r5, #5
 80031b6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80031ba:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
		rc.ch2 -= 1024;
 80031be:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80031c2:	804a      	strh	r2, [r1, #2]
		rc.ch3 = (((rcData[4] & 0x01) << 10) | (rcData[3] << 2)
 80031c4:	7920      	ldrb	r0, [r4, #4]
 80031c6:	0283      	lsls	r3, r0, #10
 80031c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031cc:	78e2      	ldrb	r2, [r4, #3]
 80031ce:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
				| (rcData[2] >> 6));
 80031d2:	ea43 1395 	orr.w	r3, r3, r5, lsr #6
		rc.ch3 -= 1024;
 80031d6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80031da:	808b      	strh	r3, [r1, #4]
		rc.ch4 = (((rcData[5] & 0x0F) << 7) | (rcData[4] >> 1));
 80031dc:	7962      	ldrb	r2, [r4, #5]
 80031de:	01d3      	lsls	r3, r2, #7
 80031e0:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 80031e4:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
		rc.ch4 -= 1024;
 80031e8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80031ec:	80cb      	strh	r3, [r1, #6]
		rc.sw1 = ((rcData[5] & 0x30) >> 4);
 80031ee:	f3c2 1301 	ubfx	r3, r2, #4, #2
 80031f2:	720b      	strb	r3, [r1, #8]
		rc.sw2 = ((rcData[5] & 0xC0) >> 6);
 80031f4:	0992      	lsrs	r2, r2, #6
 80031f6:	724a      	strb	r2, [r1, #9]
}
 80031f8:	e7ca      	b.n	8003190 <HAL_UART_RxCpltCallback+0xc>
 80031fa:	bf00      	nop
 80031fc:	20000600 	.word	0x20000600
 8003200:	20000474 	.word	0x20000474
 8003204:	20000264 	.word	0x20000264

08003208 <HAL_CAN_RxFifo0MsgPendingCallback>:

//can fifo0 receive interrupt
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8003208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800320c:	4604      	mov	r4, r0
	/* Get RX message */
	if (hcan->Instance == hcan2.Instance) {// can2 bus receive interrupt
 800320e:	6802      	ldr	r2, [r0, #0]
 8003210:	4b43      	ldr	r3, [pc, #268]	; (8003320 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	429a      	cmp	r2, r3
 8003216:	d006      	beq.n	8003226 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		wheelFdb[id].rpm = canRxData[2] * 256 + canRxData[3];
		wheelFdb[id].torque = canRxData[4] * 256 + canRxData[5];
		wheelFdb[id].temp = canRxData[6];
		wheelFdb[id].omg = 6.28318530718 * (wheelFdb[id].rpm) / 1140.0;
	}
	if (hcan->Instance == hcan1.Instance) {// can1 bus receive interrupt
 8003218:	6822      	ldr	r2, [r4, #0]
 800321a:	4b42      	ldr	r3, [pc, #264]	; (8003324 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d037      	beq.n	8003292 <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
		fdb->rpm = canRxData[2] * 256 + canRxData[3];
		fdb->torque = canRxData[4] * 256 + canRxData[5];
		fdb->temp = canRxData[6];
		fdb->omg = 6.28318530718 * (fdb->rpm) / 1140.0;
	}
}
 8003222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, canRxData);
 8003226:	4d40      	ldr	r5, [pc, #256]	; (8003328 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 8003228:	4e40      	ldr	r6, [pc, #256]	; (800332c <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 800322a:	462b      	mov	r3, r5
 800322c:	4632      	mov	r2, r6
 800322e:	2100      	movs	r1, #0
 8003230:	f7fe f894 	bl	800135c <HAL_CAN_GetRxMessage>
		int id = canRxHeader.StdId - 513;
 8003234:	6837      	ldr	r7, [r6, #0]
 8003236:	f2a7 2801 	subw	r8, r7, #513	; 0x201
		wheelFdb[id].angle = canRxData[0] * 256 + canRxData[1];
 800323a:	782b      	ldrb	r3, [r5, #0]
 800323c:	7869      	ldrb	r1, [r5, #1]
 800323e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8003242:	4e3b      	ldr	r6, [pc, #236]	; (8003330 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8003244:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8003248:	eb07 0308 	add.w	r3, r7, r8
 800324c:	009a      	lsls	r2, r3, #2
 800324e:	18b3      	adds	r3, r6, r2
 8003250:	52b1      	strh	r1, [r6, r2]
		wheelFdb[id].rpm = canRxData[2] * 256 + canRxData[3];
 8003252:	78aa      	ldrb	r2, [r5, #2]
 8003254:	78e8      	ldrb	r0, [r5, #3]
 8003256:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 800325a:	b200      	sxth	r0, r0
 800325c:	8058      	strh	r0, [r3, #2]
		wheelFdb[id].torque = canRxData[4] * 256 + canRxData[5];
 800325e:	7929      	ldrb	r1, [r5, #4]
 8003260:	796a      	ldrb	r2, [r5, #5]
 8003262:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8003266:	809a      	strh	r2, [r3, #4]
		wheelFdb[id].temp = canRxData[6];
 8003268:	79aa      	ldrb	r2, [r5, #6]
 800326a:	80da      	strh	r2, [r3, #6]
		wheelFdb[id].omg = 6.28318530718 * (wheelFdb[id].rpm) / 1140.0;
 800326c:	f7fd f91a 	bl	80004a4 <__aeabi_i2d>
 8003270:	a327      	add	r3, pc, #156	; (adr r3, 8003310 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8003272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003276:	f7fd f97f 	bl	8000578 <__aeabi_dmul>
 800327a:	a327      	add	r3, pc, #156	; (adr r3, 8003318 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 800327c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003280:	f7fd faa4 	bl	80007cc <__aeabi_ddiv>
 8003284:	f7fd fc50 	bl	8000b28 <__aeabi_d2f>
 8003288:	4447      	add	r7, r8
 800328a:	00bb      	lsls	r3, r7, #2
 800328c:	441e      	add	r6, r3
 800328e:	60b0      	str	r0, [r6, #8]
 8003290:	e7c2      	b.n	8003218 <HAL_CAN_RxFifo0MsgPendingCallback+0x10>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, canRxData);
 8003292:	4d26      	ldr	r5, [pc, #152]	; (800332c <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8003294:	4b24      	ldr	r3, [pc, #144]	; (8003328 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 8003296:	462a      	mov	r2, r5
 8003298:	2100      	movs	r1, #0
 800329a:	4620      	mov	r0, r4
 800329c:	f7fe f85e 	bl	800135c <HAL_CAN_GetRxMessage>
		switch (canRxHeader.StdId) {
 80032a0:	682b      	ldr	r3, [r5, #0]
 80032a2:	f240 2206 	movw	r2, #518	; 0x206
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d02b      	beq.n	8003302 <HAL_CAN_RxFifo0MsgPendingCallback+0xfa>
 80032aa:	f240 2207 	movw	r2, #519	; 0x207
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d029      	beq.n	8003306 <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
 80032b2:	f240 2205 	movw	r2, #517	; 0x205
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d027      	beq.n	800330a <HAL_CAN_RxFifo0MsgPendingCallback+0x102>
		motor_fdb *fdb = 0;
 80032ba:	2400      	movs	r4, #0
		fdb->angle = canRxData[0] * 256 + canRxData[1];
 80032bc:	4b1a      	ldr	r3, [pc, #104]	; (8003328 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 80032be:	7819      	ldrb	r1, [r3, #0]
 80032c0:	785a      	ldrb	r2, [r3, #1]
 80032c2:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 80032c6:	8022      	strh	r2, [r4, #0]
		fdb->rpm = canRxData[2] * 256 + canRxData[3];
 80032c8:	789a      	ldrb	r2, [r3, #2]
 80032ca:	78d8      	ldrb	r0, [r3, #3]
 80032cc:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 80032d0:	b200      	sxth	r0, r0
 80032d2:	8060      	strh	r0, [r4, #2]
		fdb->torque = canRxData[4] * 256 + canRxData[5];
 80032d4:	7919      	ldrb	r1, [r3, #4]
 80032d6:	795a      	ldrb	r2, [r3, #5]
 80032d8:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 80032dc:	80a2      	strh	r2, [r4, #4]
		fdb->temp = canRxData[6];
 80032de:	799b      	ldrb	r3, [r3, #6]
 80032e0:	80e3      	strh	r3, [r4, #6]
		fdb->omg = 6.28318530718 * (fdb->rpm) / 1140.0;
 80032e2:	f7fd f8df 	bl	80004a4 <__aeabi_i2d>
 80032e6:	a30a      	add	r3, pc, #40	; (adr r3, 8003310 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 80032e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ec:	f7fd f944 	bl	8000578 <__aeabi_dmul>
 80032f0:	a309      	add	r3, pc, #36	; (adr r3, 8003318 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80032f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f6:	f7fd fa69 	bl	80007cc <__aeabi_ddiv>
 80032fa:	f7fd fc15 	bl	8000b28 <__aeabi_d2f>
 80032fe:	60a0      	str	r0, [r4, #8]
}
 8003300:	e78f      	b.n	8003222 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
			fdb = &gimbalPitchFdb;
 8003302:	4c0c      	ldr	r4, [pc, #48]	; (8003334 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
			break;
 8003304:	e7da      	b.n	80032bc <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
			fdb = &loadMotorFdb;
 8003306:	4c0c      	ldr	r4, [pc, #48]	; (8003338 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>)
			break;
 8003308:	e7d8      	b.n	80032bc <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
			fdb = &gimbalYawFdb;
 800330a:	4c0c      	ldr	r4, [pc, #48]	; (800333c <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 800330c:	e7d6      	b.n	80032bc <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 800330e:	bf00      	nop
 8003310:	54442eea 	.word	0x54442eea
 8003314:	401921fb 	.word	0x401921fb
 8003318:	00000000 	.word	0x00000000
 800331c:	4091d000 	.word	0x4091d000
 8003320:	20000214 	.word	0x20000214
 8003324:	2000023c 	.word	0x2000023c
 8003328:	200003e4 	.word	0x200003e4
 800332c:	2000043c 	.word	0x2000043c
 8003330:	2000027c 	.word	0x2000027c
 8003334:	20000464 	.word	0x20000464
 8003338:	20000458 	.word	0x20000458
 800333c:	20000270 	.word	0x20000270

08003340 <driveWheelTask>:

void driveWheelTask() {
 8003340:	b530      	push	{r4, r5, lr}
 8003342:	b083      	sub	sp, #12

	mecanum.speed.vx = (float) rc.ch4 / 660 * MAX_CHASSIS_VX_SPEED;
 8003344:	4b31      	ldr	r3, [pc, #196]	; (800340c <driveWheelTask+0xcc>)
 8003346:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800334a:	ee07 2a90 	vmov	s15, r2
 800334e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003352:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8003410 <driveWheelTask+0xd0>
 8003356:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800335a:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8003414 <driveWheelTask+0xd4>
 800335e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8003362:	482d      	ldr	r0, [pc, #180]	; (8003418 <driveWheelTask+0xd8>)
 8003364:	ed80 7a05 	vstr	s14, [r0, #20]
	mecanum.speed.vy = -(float) rc.ch3 / 660 * MAX_CHASSIS_VX_SPEED;
 8003368:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800336c:	ee07 2a90 	vmov	s15, r2
 8003370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003374:	eef1 7a67 	vneg.f32	s15, s15
 8003378:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800337c:	ee67 7a06 	vmul.f32	s15, s14, s12
 8003380:	edc0 7a06 	vstr	s15, [r0, #24]
	mecanum.speed.vw = -(float) rc.ch1 / 660 * MAX_CHASSIS_VW_SPEED;
 8003384:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003388:	ee07 3a90 	vmov	s15, r3
 800338c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003390:	eef1 7a67 	vneg.f32	s15, s15
 8003394:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003398:	eddf 7a20 	vldr	s15, [pc, #128]	; 800341c <driveWheelTask+0xdc>
 800339c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033a0:	edc0 7a07 	vstr	s15, [r0, #28]

	mecanum_calculate(&mecanum);
 80033a4:	f000 face 	bl	8003944 <mecanum_calculate>
	DBUFF[1] = mecanum.wheel_rpm[1];
	DBUFF[2] = mecanum.wheel_rpm[2];
	DBUFF[3] = mecanum.wheel_rpm[3];*/

	int16_t u[4];
	for (int i = 0; i < 4; i++) {
 80033a8:	2400      	movs	r4, #0
 80033aa:	e028      	b.n	80033fe <driveWheelTask+0xbe>
		int error = mecanum.wheel_rpm[i] - wheelFdb[i].rpm;
 80033ac:	f104 0210 	add.w	r2, r4, #16
 80033b0:	4b19      	ldr	r3, [pc, #100]	; (8003418 <driveWheelTask+0xd8>)
 80033b2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80033b6:	ed93 7a00 	vldr	s14, [r3]
 80033ba:	0065      	lsls	r5, r4, #1
 80033bc:	192b      	adds	r3, r5, r4
 80033be:	009a      	lsls	r2, r3, #2
 80033c0:	4b17      	ldr	r3, [pc, #92]	; (8003420 <driveWheelTask+0xe0>)
 80033c2:	4413      	add	r3, r2
 80033c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80033c8:	ee07 3a90 	vmov	s15, r3
 80033cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		wheelPID[i].error = error;
 80033d8:	4b12      	ldr	r3, [pc, #72]	; (8003424 <driveWheelTask+0xe4>)
 80033da:	202c      	movs	r0, #44	; 0x2c
 80033dc:	fb00 3004 	mla	r0, r0, r4, r3
 80033e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033e4:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
		u[i] = (int16_t) pidExecute(&(wheelPID[i]));
 80033e8:	f000 fc08 	bl	8003bfc <pidExecute>
 80033ec:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80033f0:	ab02      	add	r3, sp, #8
 80033f2:	441d      	add	r5, r3
 80033f4:	ee10 3a10 	vmov	r3, s0
 80033f8:	f825 3c08 	strh.w	r3, [r5, #-8]
	for (int i = 0; i < 4; i++) {
 80033fc:	3401      	adds	r4, #1
 80033fe:	2c03      	cmp	r4, #3
 8003400:	ddd4      	ble.n	80033ac <driveWheelTask+0x6c>
	}
	driveWheel(u);
 8003402:	4668      	mov	r0, sp
 8003404:	f000 fb88 	bl	8003b18 <driveWheel>
}
 8003408:	b003      	add	sp, #12
 800340a:	bd30      	pop	{r4, r5, pc}
 800340c:	20000264 	.word	0x20000264
 8003410:	44250000 	.word	0x44250000
 8003414:	454e4000 	.word	0x454e4000
 8003418:	200003ec 	.word	0x200003ec
 800341c:	43960000 	.word	0x43960000
 8003420:	2000027c 	.word	0x2000027c
 8003424:	20000334 	.word	0x20000334

08003428 <initPID>:

void initPID() {
	for (int i = 0; i < 4; i++) {
 8003428:	2200      	movs	r2, #0
 800342a:	e013      	b.n	8003454 <initPID+0x2c>
		wheelPID[i].t = 2.0f;
 800342c:	490b      	ldr	r1, [pc, #44]	; (800345c <initPID+0x34>)
 800342e:	232c      	movs	r3, #44	; 0x2c
 8003430:	fb03 1302 	mla	r3, r3, r2, r1
 8003434:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003438:	6019      	str	r1, [r3, #0]
		wheelPID[i].p = 6.5f;
 800343a:	4909      	ldr	r1, [pc, #36]	; (8003460 <initPID+0x38>)
 800343c:	6059      	str	r1, [r3, #4]
		wheelPID[i].i = 50.0f;
 800343e:	4909      	ldr	r1, [pc, #36]	; (8003464 <initPID+0x3c>)
 8003440:	6099      	str	r1, [r3, #8]
		wheelPID[i].d = 0.0f;
 8003442:	2100      	movs	r1, #0
 8003444:	60d9      	str	r1, [r3, #12]
		wheelPID[i].outLimit = 15000.0f;
 8003446:	4908      	ldr	r1, [pc, #32]	; (8003468 <initPID+0x40>)
 8003448:	6119      	str	r1, [r3, #16]
		wheelPID[i].integralOutLimit = 500.0f;
 800344a:	4908      	ldr	r1, [pc, #32]	; (800346c <initPID+0x44>)
 800344c:	6159      	str	r1, [r3, #20]
		wheelPID[i].differentialFilterRate = 0.9f;
 800344e:	4908      	ldr	r1, [pc, #32]	; (8003470 <initPID+0x48>)
 8003450:	6199      	str	r1, [r3, #24]
	for (int i = 0; i < 4; i++) {
 8003452:	3201      	adds	r2, #1
 8003454:	2a03      	cmp	r2, #3
 8003456:	dde9      	ble.n	800342c <initPID+0x4>
	}
}
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	20000334 	.word	0x20000334
 8003460:	40d00000 	.word	0x40d00000
 8003464:	42480000 	.word	0x42480000
 8003468:	466a6000 	.word	0x466a6000
 800346c:	43fa0000 	.word	0x43fa0000
 8003470:	3f666666 	.word	0x3f666666

08003474 <initMecanum>:

void initMecanum() {
	mecanum.param.wheel_perimeter = PERIMETER;
 8003474:	4b05      	ldr	r3, [pc, #20]	; (800348c <initMecanum+0x18>)
 8003476:	4a06      	ldr	r2, [pc, #24]	; (8003490 <initMecanum+0x1c>)
 8003478:	601a      	str	r2, [r3, #0]
	mecanum.param.wheeltrack = WHEELTRACK;
 800347a:	4a06      	ldr	r2, [pc, #24]	; (8003494 <initMecanum+0x20>)
 800347c:	605a      	str	r2, [r3, #4]
	mecanum.param.wheelbase = WHEELBASE;
 800347e:	4a06      	ldr	r2, [pc, #24]	; (8003498 <initMecanum+0x24>)
 8003480:	609a      	str	r2, [r3, #8]
	mecanum.param.rotate_x_offset = 0;
 8003482:	2200      	movs	r2, #0
 8003484:	60da      	str	r2, [r3, #12]
	mecanum.param.rotate_y_offset = 0;
 8003486:	611a      	str	r2, [r3, #16]
}
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	200003ec 	.word	0x200003ec
 8003490:	43ef0000 	.word	0x43ef0000
 8003494:	43c50000 	.word	0x43c50000
 8003498:	43cf8000 	.word	0x43cf8000

0800349c <initFriction>:

void initFriction() {
 800349c:	b510      	push	{r4, lr}
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1500);
 800349e:	4c10      	ldr	r4, [pc, #64]	; (80034e0 <initFriction+0x44>)
 80034a0:	6823      	ldr	r3, [r4, #0]
 80034a2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80034a6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1500);
 80034a8:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(3000);
 80034aa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80034ae:	f7fd fd5b 	bl	8000f68 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1220);
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	f240 44c4 	movw	r4, #1220	; 0x4c4
 80034b8:	635c      	str	r4, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1220);
 80034ba:	641c      	str	r4, [r3, #64]	; 0x40
	HAL_Delay(5000);
 80034bc:	f241 3088 	movw	r0, #5000	; 0x1388
 80034c0:	f7fd fd52 	bl	8000f68 <HAL_Delay>
	for (int i = 1220; i < 1400; i++) {
 80034c4:	e007      	b.n	80034d6 <initFriction+0x3a>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);
 80034c6:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <initFriction+0x44>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	635c      	str	r4, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, i);
 80034cc:	641c      	str	r4, [r3, #64]	; 0x40
		HAL_Delay(30);
 80034ce:	201e      	movs	r0, #30
 80034d0:	f7fd fd4a 	bl	8000f68 <HAL_Delay>
	for (int i = 1220; i < 1400; i++) {
 80034d4:	3401      	adds	r4, #1
 80034d6:	f5b4 6faf 	cmp.w	r4, #1400	; 0x578
 80034da:	dbf4      	blt.n	80034c6 <initFriction+0x2a>
	}
}
 80034dc:	bd10      	pop	{r4, pc}
 80034de:	bf00      	nop
 80034e0:	20000548 	.word	0x20000548

080034e4 <initLoadPID>:

void initLoadPID() {
	loadPID.t = 2.0f;
 80034e4:	4b08      	ldr	r3, [pc, #32]	; (8003508 <initLoadPID+0x24>)
 80034e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034ea:	601a      	str	r2, [r3, #0]
	loadPID.p = 10.0f;
 80034ec:	4a07      	ldr	r2, [pc, #28]	; (800350c <initLoadPID+0x28>)
 80034ee:	605a      	str	r2, [r3, #4]
	loadPID.i = 0.1f*500;
 80034f0:	4a07      	ldr	r2, [pc, #28]	; (8003510 <initLoadPID+0x2c>)
 80034f2:	609a      	str	r2, [r3, #8]
	loadPID.d = 0.07f;
 80034f4:	4a07      	ldr	r2, [pc, #28]	; (8003514 <initLoadPID+0x30>)
 80034f6:	60da      	str	r2, [r3, #12]
	loadPID.outLimit = 30000.0f;
 80034f8:	4a07      	ldr	r2, [pc, #28]	; (8003518 <initLoadPID+0x34>)
 80034fa:	611a      	str	r2, [r3, #16]
	loadPID.integralOutLimit = 10000.0f;
 80034fc:	4a07      	ldr	r2, [pc, #28]	; (800351c <initLoadPID+0x38>)
 80034fe:	615a      	str	r2, [r3, #20]
	loadPID.differentialFilterRate = 0.9f;
 8003500:	4a07      	ldr	r2, [pc, #28]	; (8003520 <initLoadPID+0x3c>)
 8003502:	619a      	str	r2, [r3, #24]
}
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	20000488 	.word	0x20000488
 800350c:	41200000 	.word	0x41200000
 8003510:	42480000 	.word	0x42480000
 8003514:	3d8f5c29 	.word	0x3d8f5c29
 8003518:	46ea6000 	.word	0x46ea6000
 800351c:	461c4000 	.word	0x461c4000
 8003520:	3f666666 	.word	0x3f666666
 8003524:	00000000 	.word	0x00000000

08003528 <Gimbal_Task>:


void Gimbal_Task(){
 8003528:	b510      	push	{r4, lr}
 800352a:	b084      	sub	sp, #16
	int fire = 0;
	int16_t u[4];
	int16_t yaw_now,pich_now;

	if (rc.sw2 == 1) {
 800352c:	4b70      	ldr	r3, [pc, #448]	; (80036f0 <Gimbal_Task+0x1c8>)
 800352e:	7a5b      	ldrb	r3, [r3, #9]
 8003530:	2b01      	cmp	r3, #1
 8003532:	f000 80c2 	beq.w	80036ba <Gimbal_Task+0x192>
		fire = 1;
	} else {
		fire = 0;
 8003536:	eddf 7a6f 	vldr	s15, [pc, #444]	; 80036f4 <Gimbal_Task+0x1cc>
	}
	DBUFF[1] = loadPID.error = -900.0f*fire - loadMotorFdb.rpm;
 800353a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800353e:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80036f8 <Gimbal_Task+0x1d0>
 8003542:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003546:	4b6d      	ldr	r3, [pc, #436]	; (80036fc <Gimbal_Task+0x1d4>)
 8003548:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800354c:	ee07 3a90 	vmov	s15, r3
 8003550:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003554:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003558:	4869      	ldr	r0, [pc, #420]	; (8003700 <Gimbal_Task+0x1d8>)
 800355a:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
 800355e:	4c69      	ldr	r4, [pc, #420]	; (8003704 <Gimbal_Task+0x1dc>)
 8003560:	edc4 7a01 	vstr	s15, [r4, #4]
	DBUFF[3] = u[2] = pidExecute(&loadPID);
 8003564:	f000 fb4a 	bl	8003bfc <pidExecute>
 8003568:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800356c:	ee10 3a10 	vmov	r3, s0
 8003570:	b21b      	sxth	r3, r3
 8003572:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003576:	ee07 3a90 	vmov	s15, r3
 800357a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800357e:	ed84 0a03 	vstr	s0, [r4, #12]

	target_yaw =(float) rc.ch1 / 660 * 70;
 8003582:	4b5b      	ldr	r3, [pc, #364]	; (80036f0 <Gimbal_Task+0x1c8>)
 8003584:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003588:	ee07 3a10 	vmov	s14, r3
 800358c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003590:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8003708 <Gimbal_Task+0x1e0>
 8003594:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003598:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 800370c <Gimbal_Task+0x1e4>
 800359c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035a4:	ee17 3a90 	vmov	r3, s15
 80035a8:	b21c      	sxth	r4, r3
 80035aa:	4b59      	ldr	r3, [pc, #356]	; (8003710 <Gimbal_Task+0x1e8>)
 80035ac:	801c      	strh	r4, [r3, #0]
	yaw_now=(float)((gimbalYawFdb.angle-4096.0)/8191.0*360.0);
 80035ae:	4b59      	ldr	r3, [pc, #356]	; (8003714 <Gimbal_Task+0x1ec>)
 80035b0:	f9b3 0000 	ldrsh.w	r0, [r3]
 80035b4:	f7fc ff76 	bl	80004a4 <__aeabi_i2d>
 80035b8:	2200      	movs	r2, #0
 80035ba:	4b57      	ldr	r3, [pc, #348]	; (8003718 <Gimbal_Task+0x1f0>)
 80035bc:	f7fc fe24 	bl	8000208 <__aeabi_dsub>
 80035c0:	a349      	add	r3, pc, #292	; (adr r3, 80036e8 <Gimbal_Task+0x1c0>)
 80035c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c6:	f7fd f901 	bl	80007cc <__aeabi_ddiv>
 80035ca:	2200      	movs	r2, #0
 80035cc:	4b53      	ldr	r3, [pc, #332]	; (800371c <Gimbal_Task+0x1f4>)
 80035ce:	f7fc ffd3 	bl	8000578 <__aeabi_dmul>
 80035d2:	f7fd faa9 	bl	8000b28 <__aeabi_d2f>
 80035d6:	ee07 0a90 	vmov	s15, r0
 80035da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035de:	ee17 3a90 	vmov	r3, s15
 80035e2:	b21b      	sxth	r3, r3
	if(fabs(target_yaw-yaw_now)>2){
 80035e4:	1ae4      	subs	r4, r4, r3
 80035e6:	4620      	mov	r0, r4
 80035e8:	f7fc ff5c 	bl	80004a4 <__aeabi_i2d>
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4610      	mov	r0, r2
 80035f2:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80035f6:	2200      	movs	r2, #0
 80035f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035fc:	f7fd fa4c 	bl	8000a98 <__aeabi_dcmpgt>
 8003600:	2800      	cmp	r0, #0
 8003602:	d05d      	beq.n	80036c0 <Gimbal_Task+0x198>
		u[0]=map(target_yaw-yaw_now, -180, 180, -30000, 30000);
 8003604:	f247 5330 	movw	r3, #30000	; 0x7530
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	4b45      	ldr	r3, [pc, #276]	; (8003720 <Gimbal_Task+0x1f8>)
 800360c:	22b4      	movs	r2, #180	; 0xb4
 800360e:	f06f 01b3 	mvn.w	r1, #179	; 0xb3
 8003612:	4620      	mov	r0, r4
 8003614:	f7ff fda8 	bl	8003168 <map>
 8003618:	f8ad 0008 	strh.w	r0, [sp, #8]
	}
	else{
	u[0]=0;
	}

	target_pich=(float) rc.ch2 / 660 * (-30);
 800361c:	4b34      	ldr	r3, [pc, #208]	; (80036f0 <Gimbal_Task+0x1c8>)
 800361e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003622:	ee07 3a10 	vmov	s14, r3
 8003626:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800362a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003708 <Gimbal_Task+0x1e0>
 800362e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003632:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8003636:	ee67 7a87 	vmul.f32	s15, s15, s14
 800363a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800363e:	ee17 3a90 	vmov	r3, s15
 8003642:	b21c      	sxth	r4, r3
 8003644:	4b37      	ldr	r3, [pc, #220]	; (8003724 <Gimbal_Task+0x1fc>)
 8003646:	801c      	strh	r4, [r3, #0]
	pich_now=(float)((gimbalPitchFdb.angle-4096.0)/8191.0*360.0)+24;
 8003648:	4b37      	ldr	r3, [pc, #220]	; (8003728 <Gimbal_Task+0x200>)
 800364a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800364e:	f7fc ff29 	bl	80004a4 <__aeabi_i2d>
 8003652:	2200      	movs	r2, #0
 8003654:	4b30      	ldr	r3, [pc, #192]	; (8003718 <Gimbal_Task+0x1f0>)
 8003656:	f7fc fdd7 	bl	8000208 <__aeabi_dsub>
 800365a:	a323      	add	r3, pc, #140	; (adr r3, 80036e8 <Gimbal_Task+0x1c0>)
 800365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003660:	f7fd f8b4 	bl	80007cc <__aeabi_ddiv>
 8003664:	2200      	movs	r2, #0
 8003666:	4b2d      	ldr	r3, [pc, #180]	; (800371c <Gimbal_Task+0x1f4>)
 8003668:	f7fc ff86 	bl	8000578 <__aeabi_dmul>
 800366c:	f7fd fa5c 	bl	8000b28 <__aeabi_d2f>
 8003670:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
 8003674:	ee07 0a10 	vmov	s14, r0
 8003678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800367c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003680:	ee17 3a90 	vmov	r3, s15
 8003684:	b21b      	sxth	r3, r3
	if(fabs(target_pich-pich_now)>2){
 8003686:	1ae4      	subs	r4, r4, r3
 8003688:	4620      	mov	r0, r4
 800368a:	f7fc ff0b 	bl	80004a4 <__aeabi_i2d>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	4610      	mov	r0, r2
 8003694:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003698:	2200      	movs	r2, #0
 800369a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800369e:	f7fd f9fb 	bl	8000a98 <__aeabi_dcmpgt>
 80036a2:	b988      	cbnz	r0, 80036c8 <Gimbal_Task+0x1a0>
		u[1]=map(target_pich-pich_now, -25, 15, -7000, 7000);
	}
	else{
	u[1]=0;
 80036a4:	2300      	movs	r3, #0
 80036a6:	f8ad 300a 	strh.w	r3, [sp, #10]
	}


	u[3]=0;
 80036aa:	2300      	movs	r3, #0
 80036ac:	f8ad 300e 	strh.w	r3, [sp, #14]
	driveGimbalMotors(u);
 80036b0:	a802      	add	r0, sp, #8
 80036b2:	f000 fa69 	bl	8003b88 <driveGimbalMotors>
}
 80036b6:	b004      	add	sp, #16
 80036b8:	bd10      	pop	{r4, pc}
		fire = 1;
 80036ba:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800372c <Gimbal_Task+0x204>
 80036be:	e73c      	b.n	800353a <Gimbal_Task+0x12>
	u[0]=0;
 80036c0:	2300      	movs	r3, #0
 80036c2:	f8ad 3008 	strh.w	r3, [sp, #8]
 80036c6:	e7a9      	b.n	800361c <Gimbal_Task+0xf4>
		u[1]=map(target_pich-pich_now, -25, 15, -7000, 7000);
 80036c8:	f641 3358 	movw	r3, #7000	; 0x1b58
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	4b18      	ldr	r3, [pc, #96]	; (8003730 <Gimbal_Task+0x208>)
 80036d0:	220f      	movs	r2, #15
 80036d2:	f06f 0118 	mvn.w	r1, #24
 80036d6:	4620      	mov	r0, r4
 80036d8:	f7ff fd46 	bl	8003168 <map>
 80036dc:	f8ad 000a 	strh.w	r0, [sp, #10]
 80036e0:	e7e3      	b.n	80036aa <Gimbal_Task+0x182>
 80036e2:	bf00      	nop
 80036e4:	f3af 8000 	nop.w
 80036e8:	00000000 	.word	0x00000000
 80036ec:	40bfff00 	.word	0x40bfff00
 80036f0:	20000264 	.word	0x20000264
 80036f4:	00000000 	.word	0x00000000
 80036f8:	c4610000 	.word	0xc4610000
 80036fc:	20000458 	.word	0x20000458
 8003700:	20000488 	.word	0x20000488
 8003704:	200002b4 	.word	0x200002b4
 8003708:	44250000 	.word	0x44250000
 800370c:	428c0000 	.word	0x428c0000
 8003710:	20000470 	.word	0x20000470
 8003714:	20000270 	.word	0x20000270
 8003718:	40b00000 	.word	0x40b00000
 800371c:	40768000 	.word	0x40768000
 8003720:	ffff8ad0 	.word	0xffff8ad0
 8003724:	200002ac 	.word	0x200002ac
 8003728:	20000464 	.word	0x20000464
 800372c:	00000001 	.word	0x00000001
 8003730:	ffffe4a8 	.word	0xffffe4a8

08003734 <timerTask>:
void timerTask() { //call 500Hz
 8003734:	b508      	push	{r3, lr}
	driveWheelTask();
 8003736:	f7ff fe03 	bl	8003340 <driveWheelTask>
	Gimbal_Task();
 800373a:	f7ff fef5 	bl	8003528 <Gimbal_Task>
}
 800373e:	bd08      	pop	{r3, pc}

08003740 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003740:	b508      	push	{r3, lr}
	c++;
 8003742:	4a09      	ldr	r2, [pc, #36]	; (8003768 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003744:	6813      	ldr	r3, [r2, #0]
 8003746:	3301      	adds	r3, #1
 8003748:	6013      	str	r3, [r2, #0]
	if (htim->Instance == htim6.Instance) {//500Hz
 800374a:	6802      	ldr	r2, [r0, #0]
 800374c:	4b07      	ldr	r3, [pc, #28]	; (800376c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d000      	beq.n	8003756 <HAL_TIM_PeriodElapsedCallback+0x16>
}
 8003754:	bd08      	pop	{r3, pc}
		timerTask();
 8003756:	f7ff ffed 	bl	8003734 <timerTask>
		HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 800375a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800375e:	4804      	ldr	r0, [pc, #16]	; (8003770 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003760:	f7fe f970 	bl	8001a44 <HAL_GPIO_TogglePin>
}
 8003764:	e7f6      	b.n	8003754 <HAL_TIM_PeriodElapsedCallback+0x14>
 8003766:	bf00      	nop
 8003768:	200001fc 	.word	0x200001fc
 800376c:	2000050c 	.word	0x2000050c
 8003770:	40021400 	.word	0x40021400

08003774 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003774:	e7fe      	b.n	8003774 <_Error_Handler>
	...

08003778 <SystemClock_Config>:
{
 8003778:	b500      	push	{lr}
 800377a:	b095      	sub	sp, #84	; 0x54
  __HAL_RCC_PWR_CLK_ENABLE();
 800377c:	2100      	movs	r1, #0
 800377e:	9101      	str	r1, [sp, #4]
 8003780:	4b2b      	ldr	r3, [pc, #172]	; (8003830 <SystemClock_Config+0xb8>)
 8003782:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003784:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003788:	641a      	str	r2, [r3, #64]	; 0x40
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003790:	9301      	str	r3, [sp, #4]
 8003792:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003794:	9102      	str	r1, [sp, #8]
 8003796:	4b27      	ldr	r3, [pc, #156]	; (8003834 <SystemClock_Config+0xbc>)
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80037a6:	9302      	str	r3, [sp, #8]
 80037a8:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80037aa:	2301      	movs	r3, #1
 80037ac:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037b2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037b4:	2302      	movs	r3, #2
 80037b6:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037b8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80037bc:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80037be:	2206      	movs	r2, #6
 80037c0:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80037c2:	22a8      	movs	r2, #168	; 0xa8
 80037c4:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80037c6:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80037c8:	2304      	movs	r3, #4
 80037ca:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037cc:	a808      	add	r0, sp, #32
 80037ce:	f7fe f93d 	bl	8001a4c <HAL_RCC_OscConfig>
 80037d2:	bb20      	cbnz	r0, 800381e <SystemClock_Config+0xa6>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037d4:	230f      	movs	r3, #15
 80037d6:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037d8:	2302      	movs	r3, #2
 80037da:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037dc:	2300      	movs	r3, #0
 80037de:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80037e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80037e4:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80037e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037ea:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80037ec:	2105      	movs	r1, #5
 80037ee:	a803      	add	r0, sp, #12
 80037f0:	f7fe fb4c 	bl	8001e8c <HAL_RCC_ClockConfig>
 80037f4:	b9b8      	cbnz	r0, 8003826 <SystemClock_Config+0xae>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80037f6:	f7fe fbf5 	bl	8001fe4 <HAL_RCC_GetHCLKFreq>
 80037fa:	4b0f      	ldr	r3, [pc, #60]	; (8003838 <SystemClock_Config+0xc0>)
 80037fc:	fba3 3000 	umull	r3, r0, r3, r0
 8003800:	0980      	lsrs	r0, r0, #6
 8003802:	f7fd ffeb 	bl	80017dc <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003806:	2004      	movs	r0, #4
 8003808:	f7fd fffe 	bl	8001808 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800380c:	2200      	movs	r2, #0
 800380e:	4611      	mov	r1, r2
 8003810:	f04f 30ff 	mov.w	r0, #4294967295
 8003814:	f7fd ffa2 	bl	800175c <HAL_NVIC_SetPriority>
}
 8003818:	b015      	add	sp, #84	; 0x54
 800381a:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 800381e:	21e1      	movs	r1, #225	; 0xe1
 8003820:	4806      	ldr	r0, [pc, #24]	; (800383c <SystemClock_Config+0xc4>)
 8003822:	f7ff ffa7 	bl	8003774 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003826:	21ef      	movs	r1, #239	; 0xef
 8003828:	4804      	ldr	r0, [pc, #16]	; (800383c <SystemClock_Config+0xc4>)
 800382a:	f7ff ffa3 	bl	8003774 <_Error_Handler>
 800382e:	bf00      	nop
 8003830:	40023800 	.word	0x40023800
 8003834:	40007000 	.word	0x40007000
 8003838:	10624dd3 	.word	0x10624dd3
 800383c:	08006600 	.word	0x08006600

08003840 <main>:
{
 8003840:	b508      	push	{r3, lr}
  HAL_Init();
 8003842:	f7fd fb65 	bl	8000f10 <HAL_Init>
  SystemClock_Config();
 8003846:	f7ff ff97 	bl	8003778 <SystemClock_Config>
  MX_GPIO_Init();
 800384a:	f7ff fbf3 	bl	8003034 <MX_GPIO_Init>
  MX_TIM6_Init();
 800384e:	f000 fb8d 	bl	8003f6c <MX_TIM6_Init>
  MX_SPI5_Init();
 8003852:	f000 fa39 	bl	8003cc8 <MX_SPI5_Init>
  MX_CAN2_Init();
 8003856:	f7ff fb21 	bl	8002e9c <MX_CAN2_Init>
  MX_CAN1_Init();
 800385a:	f7ff faf9 	bl	8002e50 <MX_CAN1_Init>
  MX_TIM12_Init();
 800385e:	f000 fc9d 	bl	800419c <MX_TIM12_Init>
  MX_TIM1_Init();
 8003862:	f000 fc35 	bl	80040d0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8003866:	f000 fd07 	bl	8004278 <MX_USART1_UART_Init>
  MX_UART7_Init();
 800386a:	f000 fcc9 	bl	8004200 <MX_UART7_Init>
  MX_UART8_Init();
 800386e:	f000 fce5 	bl	800423c <MX_UART8_Init>
  MX_USART6_UART_Init();
 8003872:	f000 fd21 	bl	80042b8 <MX_USART6_UART_Init>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 8003876:	4d2a      	ldr	r5, [pc, #168]	; (8003920 <main+0xe0>)
 8003878:	2200      	movs	r2, #0
 800387a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800387e:	4628      	mov	r0, r5
 8003880:	f7fe f8da 	bl	8001a38 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // friction wheel
 8003884:	4c27      	ldr	r4, [pc, #156]	; (8003924 <main+0xe4>)
 8003886:	2100      	movs	r1, #0
 8003888:	4620      	mov	r0, r4
 800388a:	f7fe fea7 	bl	80025dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800388e:	210c      	movs	r1, #12
 8003890:	4620      	mov	r0, r4
 8003892:	f7fe fea3 	bl	80025dc <HAL_TIM_PWM_Start>
  initFriction();
 8003896:	f7ff fe01 	bl	800349c <initFriction>
  initPID();
 800389a:	f7ff fdc5 	bl	8003428 <initPID>
  initLoadPID();
 800389e:	f7ff fe21 	bl	80034e4 <initLoadPID>
  initCanFilter();
 80038a2:	f7ff fba9 	bl	8002ff8 <initCanFilter>
  initMecanum();
 80038a6:	f7ff fde5 	bl	8003474 <initMecanum>
  HAL_UART_Receive_IT(&huart1, rcData, 18);
 80038aa:	2212      	movs	r2, #18
 80038ac:	491e      	ldr	r1, [pc, #120]	; (8003928 <main+0xe8>)
 80038ae:	481f      	ldr	r0, [pc, #124]	; (800392c <main+0xec>)
 80038b0:	f7ff f9b4 	bl	8002c1c <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80038b4:	481e      	ldr	r0, [pc, #120]	; (8003930 <main+0xf0>)
 80038b6:	f7fe fc81 	bl	80021bc <HAL_TIM_Base_Start_IT>
  setbuf(stdout, NULL);
 80038ba:	4b1e      	ldr	r3, [pc, #120]	; (8003934 <main+0xf4>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2100      	movs	r1, #0
 80038c0:	6898      	ldr	r0, [r3, #8]
 80038c2:	f001 f962 	bl	8004b8a <setbuf>
  HAL_CAN_Start(&hcan1);
 80038c6:	4e1c      	ldr	r6, [pc, #112]	; (8003938 <main+0xf8>)
 80038c8:	4630      	mov	r0, r6
 80038ca:	f7fd fc9f 	bl	800120c <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 80038ce:	4c1b      	ldr	r4, [pc, #108]	; (800393c <main+0xfc>)
 80038d0:	4620      	mov	r0, r4
 80038d2:	f7fd fc9b 	bl	800120c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80038d6:	2102      	movs	r1, #2
 80038d8:	4630      	mov	r0, r6
 80038da:	f7fd fdde 	bl	800149a <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80038de:	2102      	movs	r1, #2
 80038e0:	4620      	mov	r0, r4
 80038e2:	f7fd fdda 	bl	800149a <HAL_CAN_ActivateNotification>
  HAL_GPIO_WritePin(POWER_OUT1_GPIO_Port, POWER_OUT1_Pin, 1);
 80038e6:	4c16      	ldr	r4, [pc, #88]	; (8003940 <main+0x100>)
 80038e8:	2201      	movs	r2, #1
 80038ea:	2104      	movs	r1, #4
 80038ec:	4620      	mov	r0, r4
 80038ee:	f7fe f8a3 	bl	8001a38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(POWER_OUT2_GPIO_Port, POWER_OUT2_Pin, 1);
 80038f2:	2201      	movs	r2, #1
 80038f4:	2108      	movs	r1, #8
 80038f6:	4620      	mov	r0, r4
 80038f8:	f7fe f89e 	bl	8001a38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(POWER_OUT3_GPIO_Port, POWER_OUT3_Pin, 1);
 80038fc:	2201      	movs	r2, #1
 80038fe:	2110      	movs	r1, #16
 8003900:	4620      	mov	r0, r4
 8003902:	f7fe f899 	bl	8001a38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(POWER_OUT4_GPIO_Port, POWER_OUT4_Pin, 1);
 8003906:	2201      	movs	r2, #1
 8003908:	2120      	movs	r1, #32
 800390a:	4620      	mov	r0, r4
 800390c:	f7fe f894 	bl	8001a38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 8003910:	2201      	movs	r2, #1
 8003912:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003916:	4628      	mov	r0, r5
 8003918:	f7fe f88e 	bl	8001a38 <HAL_GPIO_WritePin>
 800391c:	e7fe      	b.n	800391c <main+0xdc>
 800391e:	bf00      	nop
 8003920:	40021000 	.word	0x40021000
 8003924:	20000548 	.word	0x20000548
 8003928:	20000474 	.word	0x20000474
 800392c:	20000600 	.word	0x20000600
 8003930:	2000050c 	.word	0x2000050c
 8003934:	2000000c 	.word	0x2000000c
 8003938:	2000023c 	.word	0x2000023c
 800393c:	20000214 	.word	0x20000214
 8003940:	40021c00 	.word	0x40021c00

08003944 <mecanum_calculate>:
  * @param input : ccx=+vx(mm/s)  ccy=+vy(mm/s)  ccw=+vw(deg/s)
  *        output: every wheel speed(rpm)
  * @note  1=FR 2=FL 3=BL 4=BR
  */
void mecanum_calculate(struct mecanum *mec)
{
 8003944:	b470      	push	{r4, r5, r6}
 8003946:	b085      	sub	sp, #20
 8003948:	4604      	mov	r4, r0
  static float rotate_ratio_fl;
  static float rotate_ratio_bl;
  static float rotate_ratio_br;
  static float wheel_rpm_ratio;

  rotate_ratio_fr = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 800394a:	edd0 7a02 	vldr	s15, [r0, #8]
 800394e:	ed90 7a01 	vldr	s14, [r0, #4]
 8003952:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003956:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800395a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800395e:	ed90 7a03 	vldr	s14, [r0, #12]
 8003962:	ee37 6ac7 	vsub.f32	s12, s15, s14
 8003966:	edd0 6a04 	vldr	s13, [r0, #16]
 800396a:	ee76 5a26 	vadd.f32	s11, s12, s13
 800396e:	ed9f 5a61 	vldr	s10, [pc, #388]	; 8003af4 <mecanum_calculate+0x1b0>
 8003972:	ee85 3a85 	vdiv.f32	s6, s11, s10
  rotate_ratio_fl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset - mec->param.rotate_y_offset) / RADIAN_COEF;
 8003976:	ee36 6a66 	vsub.f32	s12, s12, s13
 800397a:	eec6 3a05 	vdiv.f32	s7, s12, s10
  rotate_ratio_bl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f + mec->param.rotate_x_offset - mec->param.rotate_y_offset) / RADIAN_COEF;
 800397e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003982:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8003986:	ee87 4a05 	vdiv.f32	s8, s14, s10
  rotate_ratio_br = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f + mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 800398a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800398e:	eec6 4a85 	vdiv.f32	s9, s13, s10

  wheel_rpm_ratio = 60.0f / (mec->param.wheel_perimeter * MOTOR_DECELE_RATIO);
 8003992:	edd0 7a00 	vldr	s15, [r0]
 8003996:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8003af8 <mecanum_calculate+0x1b4>
 800399a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800399e:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8003afc <mecanum_calculate+0x1b8>
 80039a2:	eec7 6a27 	vdiv.f32	s13, s14, s15

  MEC_VAL_LIMIT(mec->speed.vx, -MAX_CHASSIS_VX_SPEED, MAX_CHASSIS_VX_SPEED); //mm/s
 80039a6:	edd0 7a05 	vldr	s15, [r0, #20]
 80039aa:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8003b00 <mecanum_calculate+0x1bc>
 80039ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039b6:	d84b      	bhi.n	8003a50 <mecanum_calculate+0x10c>
 80039b8:	ed84 7a05 	vstr	s14, [r4, #20]
  MEC_VAL_LIMIT(mec->speed.vy, -MAX_CHASSIS_VY_SPEED, MAX_CHASSIS_VY_SPEED); //mm/s
 80039bc:	edd4 7a06 	vldr	s15, [r4, #24]
 80039c0:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8003b00 <mecanum_calculate+0x1bc>
 80039c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039cc:	d84a      	bhi.n	8003a64 <mecanum_calculate+0x120>
 80039ce:	ed84 7a06 	vstr	s14, [r4, #24]
  MEC_VAL_LIMIT(mec->speed.vw, -MAX_CHASSIS_VW_SPEED, MAX_CHASSIS_VW_SPEED); //deg/s
 80039d2:	edd4 7a07 	vldr	s15, [r4, #28]
 80039d6:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8003b04 <mecanum_calculate+0x1c0>
 80039da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e2:	d849      	bhi.n	8003a78 <mecanum_calculate+0x134>
 80039e4:	ed84 7a07 	vstr	s14, [r4, #28]

  float wheel_rpm[4];
  float max = 0;

  wheel_rpm[0] = (-mec->speed.vx - mec->speed.vy - mec->speed.vw * rotate_ratio_fr) * wheel_rpm_ratio;
 80039e8:	ed94 5a05 	vldr	s10, [r4, #20]
 80039ec:	eeb1 7a45 	vneg.f32	s14, s10
 80039f0:	edd4 7a06 	vldr	s15, [r4, #24]
 80039f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80039f8:	edd4 5a07 	vldr	s11, [r4, #28]
 80039fc:	ee23 6a25 	vmul.f32	s12, s6, s11
 8003a00:	ee37 7a46 	vsub.f32	s14, s14, s12
 8003a04:	ee26 7a87 	vmul.f32	s14, s13, s14
 8003a08:	ed8d 7a00 	vstr	s14, [sp]
  wheel_rpm[1] = (mec->speed.vx - mec->speed.vy - mec->speed.vw * rotate_ratio_fl) * wheel_rpm_ratio;
 8003a0c:	ee35 6a67 	vsub.f32	s12, s10, s15
 8003a10:	ee23 7aa5 	vmul.f32	s14, s7, s11
 8003a14:	ee36 6a47 	vsub.f32	s12, s12, s14
 8003a18:	ee26 6a86 	vmul.f32	s12, s13, s12
 8003a1c:	ed8d 6a01 	vstr	s12, [sp, #4]
  wheel_rpm[2] = (mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_bl) * wheel_rpm_ratio;
 8003a20:	ee35 7a27 	vadd.f32	s14, s10, s15
 8003a24:	ee24 6a25 	vmul.f32	s12, s8, s11
 8003a28:	ee37 7a46 	vsub.f32	s14, s14, s12
 8003a2c:	ee26 7a87 	vmul.f32	s14, s13, s14
 8003a30:	ed8d 7a02 	vstr	s14, [sp, #8]
  wheel_rpm[3] = (-mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_br) * wheel_rpm_ratio;
 8003a34:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8003a38:	ee64 5aa5 	vmul.f32	s11, s9, s11
 8003a3c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8003a40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a44:	edcd 7a03 	vstr	s15, [sp, #12]

  //find max item
  for (uint8_t i = 0; i < 4; i++)
 8003a48:	2300      	movs	r3, #0
  float max = 0;
 8003a4a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003b08 <mecanum_calculate+0x1c4>
  for (uint8_t i = 0; i < 4; i++)
 8003a4e:	e01f      	b.n	8003a90 <mecanum_calculate+0x14c>
  MEC_VAL_LIMIT(mec->speed.vx, -MAX_CHASSIS_VX_SPEED, MAX_CHASSIS_VX_SPEED); //mm/s
 8003a50:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003b0c <mecanum_calculate+0x1c8>
 8003a54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a5c:	dbae      	blt.n	80039bc <mecanum_calculate+0x78>
 8003a5e:	ed84 7a05 	vstr	s14, [r4, #20]
 8003a62:	e7ab      	b.n	80039bc <mecanum_calculate+0x78>
  MEC_VAL_LIMIT(mec->speed.vy, -MAX_CHASSIS_VY_SPEED, MAX_CHASSIS_VY_SPEED); //mm/s
 8003a64:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003b0c <mecanum_calculate+0x1c8>
 8003a68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a70:	dbaf      	blt.n	80039d2 <mecanum_calculate+0x8e>
 8003a72:	ed84 7a06 	vstr	s14, [r4, #24]
 8003a76:	e7ac      	b.n	80039d2 <mecanum_calculate+0x8e>
  MEC_VAL_LIMIT(mec->speed.vw, -MAX_CHASSIS_VW_SPEED, MAX_CHASSIS_VW_SPEED); //deg/s
 8003a78:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003b10 <mecanum_calculate+0x1cc>
 8003a7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a84:	dbb0      	blt.n	80039e8 <mecanum_calculate+0xa4>
 8003a86:	ed84 7a07 	vstr	s14, [r4, #28]
 8003a8a:	e7ad      	b.n	80039e8 <mecanum_calculate+0xa4>
  for (uint8_t i = 0; i < 4; i++)
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b03      	cmp	r3, #3
 8003a92:	d80e      	bhi.n	8003ab2 <mecanum_calculate+0x16e>
  {
    if (fabs(wheel_rpm[i]) > max)
 8003a94:	aa04      	add	r2, sp, #16
 8003a96:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8003a9a:	ed52 7a04 	vldr	s15, [r2, #-16]
 8003a9e:	eef0 7ae7 	vabs.f32	s15, s15
 8003aa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aaa:	ddef      	ble.n	8003a8c <mecanum_calculate+0x148>
      max = fabs(wheel_rpm[i]);
 8003aac:	eeb0 7a67 	vmov.f32	s14, s15
 8003ab0:	e7ec      	b.n	8003a8c <mecanum_calculate+0x148>
  }

  //equal proportion
  if (max > MAX_WHEEL_RPM)
 8003ab2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8003b14 <mecanum_calculate+0x1d0>
 8003ab6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003abe:	dd10      	ble.n	8003ae2 <mecanum_calculate+0x19e>
  {
    float rate = MAX_WHEEL_RPM / max;
 8003ac0:	eec7 6a87 	vdiv.f32	s13, s15, s14
    for (uint8_t i = 0; i < 4; i++)
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	e00a      	b.n	8003ade <mecanum_calculate+0x19a>
      wheel_rpm[i] *= rate;
 8003ac8:	aa04      	add	r2, sp, #16
 8003aca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8003ace:	ed52 7a04 	vldr	s15, [r2, #-16]
 8003ad2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003ad6:	ed42 7a04 	vstr	s15, [r2, #-16]
    for (uint8_t i = 0; i < 4; i++)
 8003ada:	3301      	adds	r3, #1
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b03      	cmp	r3, #3
 8003ae0:	d9f2      	bls.n	8003ac8 <mecanum_calculate+0x184>
  }
  memcpy(mec->wheel_rpm, wheel_rpm, 4 * sizeof(float));
 8003ae2:	466d      	mov	r5, sp
 8003ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ae6:	6420      	str	r0, [r4, #64]	; 0x40
 8003ae8:	6461      	str	r1, [r4, #68]	; 0x44
 8003aea:	64a2      	str	r2, [r4, #72]	; 0x48
 8003aec:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8003aee:	b005      	add	sp, #20
 8003af0:	bc70      	pop	{r4, r5, r6}
 8003af2:	4770      	bx	lr
 8003af4:	42653333 	.word	0x42653333
 8003af8:	3d579436 	.word	0x3d579436
 8003afc:	42700000 	.word	0x42700000
 8003b00:	c54e4000 	.word	0xc54e4000
 8003b04:	c3960000 	.word	0xc3960000
 8003b08:	00000000 	.word	0x00000000
 8003b0c:	454e4000 	.word	0x454e4000
 8003b10:	43960000 	.word	0x43960000
 8003b14:	4604d000 	.word	0x4604d000

08003b18 <driveWheel>:
 */
#include "motor.h"

const int CaseMotor_MaxSpeed = 30 * 256;

void driveWheel(int16_t *u) {
 8003b18:	b530      	push	{r4, r5, lr}
 8003b1a:	b08b      	sub	sp, #44	; 0x2c
	CAN_TxHeaderTypeDef header;
	uint8_t TxData[8] = { 0 };
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	9302      	str	r3, [sp, #8]
 8003b20:	9303      	str	r3, [sp, #12]
	uint32_t TxMailbox;

	header.StdId = 0x200;
 8003b22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b26:	9204      	str	r2, [sp, #16]
	header.RTR = CAN_RTR_DATA;
 8003b28:	9307      	str	r3, [sp, #28]
	header.IDE = CAN_ID_STD;
 8003b2a:	9306      	str	r3, [sp, #24]
	header.DLC = 8;
 8003b2c:	2208      	movs	r2, #8
 8003b2e:	9208      	str	r2, [sp, #32]
	//header.TransmitGlobalTime = DISABLE;

	for (int i = 0; i < 4; i++) {
 8003b30:	e012      	b.n	8003b58 <driveWheel+0x40>
		if (CaseMotor_MaxSpeed < u[i]) {
			u[i] = CaseMotor_MaxSpeed - 1;
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 8003b32:	f512 5ff0 	cmn.w	r2, #7680	; 0x1e00
 8003b36:	da02      	bge.n	8003b3e <driveWheel+0x26>
			u[i] = -CaseMotor_MaxSpeed + 1;
 8003b38:	f24e 2201 	movw	r2, #57857	; 0xe201
 8003b3c:	5242      	strh	r2, [r0, r1]
		}
		TxData[i * 2] = u[i] >> 8;
 8003b3e:	5e41      	ldrsh	r1, [r0, r1]
 8003b40:	005a      	lsls	r2, r3, #1
 8003b42:	ac0a      	add	r4, sp, #40	; 0x28
 8003b44:	4414      	add	r4, r2
 8003b46:	120d      	asrs	r5, r1, #8
 8003b48:	f804 5c20 	strb.w	r5, [r4, #-32]
		TxData[i * 2 + 1] = u[i] & 0xFF;
 8003b4c:	3201      	adds	r2, #1
 8003b4e:	ac0a      	add	r4, sp, #40	; 0x28
 8003b50:	4422      	add	r2, r4
 8003b52:	f802 1c20 	strb.w	r1, [r2, #-32]
	for (int i = 0; i < 4; i++) {
 8003b56:	3301      	adds	r3, #1
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	dc0a      	bgt.n	8003b72 <driveWheel+0x5a>
		if (CaseMotor_MaxSpeed < u[i]) {
 8003b5c:	0059      	lsls	r1, r3, #1
 8003b5e:	f930 2013 	ldrsh.w	r2, [r0, r3, lsl #1]
 8003b62:	f5b2 5ff0 	cmp.w	r2, #7680	; 0x1e00
 8003b66:	dde4      	ble.n	8003b32 <driveWheel+0x1a>
			u[i] = CaseMotor_MaxSpeed - 1;
 8003b68:	f641 52ff 	movw	r2, #7679	; 0x1dff
 8003b6c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8003b70:	e7e5      	b.n	8003b3e <driveWheel+0x26>
	}

	HAL_CAN_AddTxMessage(&hcan2, &header, TxData, &TxMailbox);
 8003b72:	ab01      	add	r3, sp, #4
 8003b74:	aa02      	add	r2, sp, #8
 8003b76:	a904      	add	r1, sp, #16
 8003b78:	4802      	ldr	r0, [pc, #8]	; (8003b84 <driveWheel+0x6c>)
 8003b7a:	f7fd fb75 	bl	8001268 <HAL_CAN_AddTxMessage>

}
 8003b7e:	b00b      	add	sp, #44	; 0x2c
 8003b80:	bd30      	pop	{r4, r5, pc}
 8003b82:	bf00      	nop
 8003b84:	20000214 	.word	0x20000214

08003b88 <driveGimbalMotors>:

void driveGimbalMotors(int16_t *u) {
 8003b88:	b530      	push	{r4, r5, lr}
 8003b8a:	b08b      	sub	sp, #44	; 0x2c
	CAN_TxHeaderTypeDef header;
	uint8_t TxData[8] = { 0 };
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	9302      	str	r3, [sp, #8]
 8003b90:	9303      	str	r3, [sp, #12]
	uint32_t TxMailbox;

	header.StdId = 0x1ff;
 8003b92:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003b96:	9204      	str	r2, [sp, #16]
	header.RTR = CAN_RTR_DATA;
 8003b98:	9307      	str	r3, [sp, #28]
	header.IDE = CAN_ID_STD;
 8003b9a:	9306      	str	r3, [sp, #24]
	header.DLC = 8;
 8003b9c:	2208      	movs	r2, #8
 8003b9e:	9208      	str	r2, [sp, #32]
	//header.TransmitGlobalTime = DISABLE;

	for (int i = 0; i < 4; i++) {
 8003ba0:	e013      	b.n	8003bca <driveGimbalMotors+0x42>
		if(i==2){
		if (CaseMotor_MaxSpeed < u[i]) {
			u[i] = CaseMotor_MaxSpeed - 1;
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 8003ba2:	f512 5ff0 	cmn.w	r2, #7680	; 0x1e00
 8003ba6:	da02      	bge.n	8003bae <driveGimbalMotors+0x26>
			u[i] = -CaseMotor_MaxSpeed + 1;
 8003ba8:	f24e 2201 	movw	r2, #57857	; 0xe201
 8003bac:	5242      	strh	r2, [r0, r1]
		}
		}
		TxData[i * 2] = u[i] >> 8;
 8003bae:	005a      	lsls	r2, r3, #1
 8003bb0:	f930 1013 	ldrsh.w	r1, [r0, r3, lsl #1]
 8003bb4:	ac0a      	add	r4, sp, #40	; 0x28
 8003bb6:	4414      	add	r4, r2
 8003bb8:	120d      	asrs	r5, r1, #8
 8003bba:	f804 5c20 	strb.w	r5, [r4, #-32]
		TxData[i * 2 + 1] = u[i] & 0xFF;
 8003bbe:	3201      	adds	r2, #1
 8003bc0:	ac0a      	add	r4, sp, #40	; 0x28
 8003bc2:	4422      	add	r2, r4
 8003bc4:	f802 1c20 	strb.w	r1, [r2, #-32]
	for (int i = 0; i < 4; i++) {
 8003bc8:	3301      	adds	r3, #1
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	dc0c      	bgt.n	8003be8 <driveGimbalMotors+0x60>
		if(i==2){
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d1ed      	bne.n	8003bae <driveGimbalMotors+0x26>
		if (CaseMotor_MaxSpeed < u[i]) {
 8003bd2:	0059      	lsls	r1, r3, #1
 8003bd4:	f930 2013 	ldrsh.w	r2, [r0, r3, lsl #1]
 8003bd8:	f5b2 5ff0 	cmp.w	r2, #7680	; 0x1e00
 8003bdc:	dde1      	ble.n	8003ba2 <driveGimbalMotors+0x1a>
			u[i] = CaseMotor_MaxSpeed - 1;
 8003bde:	f641 52ff 	movw	r2, #7679	; 0x1dff
 8003be2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8003be6:	e7e2      	b.n	8003bae <driveGimbalMotors+0x26>
	}

	HAL_CAN_AddTxMessage(&hcan1, &header, TxData, &TxMailbox);
 8003be8:	ab01      	add	r3, sp, #4
 8003bea:	aa02      	add	r2, sp, #8
 8003bec:	a904      	add	r1, sp, #16
 8003bee:	4802      	ldr	r0, [pc, #8]	; (8003bf8 <driveGimbalMotors+0x70>)
 8003bf0:	f7fd fb3a 	bl	8001268 <HAL_CAN_AddTxMessage>
}
 8003bf4:	b00b      	add	sp, #44	; 0x2c
 8003bf6:	bd30      	pop	{r4, r5, pc}
 8003bf8:	2000023c 	.word	0x2000023c

08003bfc <pidExecute>:
 */
#include "pid.h"

float pidExecute(_pid_t *pid) {
	float u = 0;
	pid->integralOut += pid->i * pid->error * (pid->t/1000.0f);
 8003bfc:	edd0 7a02 	vldr	s15, [r0, #8]
 8003c00:	edd0 6a0a 	vldr	s13, [r0, #40]	; 0x28
 8003c04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003c08:	ed90 6a00 	vldr	s12, [r0]
 8003c0c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003cc4 <pidExecute+0xc8>
 8003c10:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8003c14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c18:	ed90 7a07 	vldr	s14, [r0, #28]
 8003c1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c20:	edc0 7a07 	vstr	s15, [r0, #28]
	if (pid->integralOutLimit < pid->integralOut) pid->integralOut = pid->integralOutLimit;
 8003c24:	ed90 7a05 	vldr	s14, [r0, #20]
 8003c28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c30:	dd3a      	ble.n	8003ca8 <pidExecute+0xac>
 8003c32:	ed80 7a07 	vstr	s14, [r0, #28]
	else if (pid->integralOut < -pid->integralOutLimit) pid->integralOut = -pid->integralOutLimit;
	pid->differentialFilter = pid->differentialFilter * pid->differentialFilterRate + (pid->d * (pid->error - pid->lastError)*(1000.0f/pid->t)) * (1 - pid->differentialFilterRate);
 8003c36:	edd0 7a09 	vldr	s15, [r0, #36]	; 0x24
 8003c3a:	ed90 5a06 	vldr	s10, [r0, #24]
 8003c3e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8003c42:	ed90 7a03 	vldr	s14, [r0, #12]
 8003c46:	edd0 5a08 	vldr	s11, [r0, #32]
 8003c4a:	ee76 5ae5 	vsub.f32	s11, s13, s11
 8003c4e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8003c52:	eddf 4a1c 	vldr	s9, [pc, #112]	; 8003cc4 <pidExecute+0xc8>
 8003c56:	eec4 5a86 	vdiv.f32	s11, s9, s12
 8003c5a:	ee27 7a25 	vmul.f32	s14, s14, s11
 8003c5e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003c62:	ee36 6a45 	vsub.f32	s12, s12, s10
 8003c66:	ee27 7a06 	vmul.f32	s14, s14, s12
 8003c6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c6e:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
	u = pid->p * pid->error + pid->integralOut + pid->differentialFilter;
 8003c72:	ed90 7a01 	vldr	s14, [r0, #4]
 8003c76:	ee26 7a87 	vmul.f32	s14, s13, s14
 8003c7a:	ed90 6a07 	vldr	s12, [r0, #28]
 8003c7e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003c82:	ee77 7a87 	vadd.f32	s15, s15, s14
	if (pid->outLimit < u) u = pid->outLimit;
 8003c86:	ed90 0a04 	vldr	s0, [r0, #16]
 8003c8a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c92:	d406      	bmi.n	8003ca2 <pidExecute+0xa6>
	else if (u < -pid->outLimit)u = -pid->outLimit;
 8003c94:	eeb1 0a40 	vneg.f32	s0, s0
 8003c98:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ca0:	dd0c      	ble.n	8003cbc <pidExecute+0xc0>
	pid->lastError = pid->error;
 8003ca2:	edc0 6a08 	vstr	s13, [r0, #32]
	return u;
}
 8003ca6:	4770      	bx	lr
	else if (pid->integralOut < -pid->integralOutLimit) pid->integralOut = -pid->integralOutLimit;
 8003ca8:	eeb1 7a47 	vneg.f32	s14, s14
 8003cac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cb4:	d5bf      	bpl.n	8003c36 <pidExecute+0x3a>
 8003cb6:	ed80 7a07 	vstr	s14, [r0, #28]
 8003cba:	e7bc      	b.n	8003c36 <pidExecute+0x3a>
	u = pid->p * pid->error + pid->integralOut + pid->differentialFilter;
 8003cbc:	eeb0 0a67 	vmov.f32	s0, s15
 8003cc0:	e7ef      	b.n	8003ca2 <pidExecute+0xa6>
 8003cc2:	bf00      	nop
 8003cc4:	447a0000 	.word	0x447a0000

08003cc8 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8003cc8:	b508      	push	{r3, lr}

  hspi5.Instance = SPI5;
 8003cca:	480f      	ldr	r0, [pc, #60]	; (8003d08 <MX_SPI5_Init+0x40>)
 8003ccc:	4b0f      	ldr	r3, [pc, #60]	; (8003d0c <MX_SPI5_Init+0x44>)
 8003cce:	6003      	str	r3, [r0, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003cd0:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003cd4:	6043      	str	r3, [r0, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	6083      	str	r3, [r0, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003cda:	60c3      	str	r3, [r0, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cdc:	6103      	str	r3, [r0, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003cde:	6143      	str	r3, [r0, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8003ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ce4:	6182      	str	r2, [r0, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003ce6:	2230      	movs	r2, #48	; 0x30
 8003ce8:	61c2      	str	r2, [r0, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003cea:	6203      	str	r3, [r0, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003cec:	6243      	str	r3, [r0, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cee:	6283      	str	r3, [r0, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8003cf0:	230a      	movs	r3, #10
 8003cf2:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003cf4:	f7fe f99c 	bl	8002030 <HAL_SPI_Init>
 8003cf8:	b900      	cbnz	r0, 8003cfc <MX_SPI5_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8003cfa:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8003cfc:	2145      	movs	r1, #69	; 0x45
 8003cfe:	4804      	ldr	r0, [pc, #16]	; (8003d10 <MX_SPI5_Init+0x48>)
 8003d00:	f7ff fd38 	bl	8003774 <_Error_Handler>
}
 8003d04:	e7f9      	b.n	8003cfa <MX_SPI5_Init+0x32>
 8003d06:	bf00      	nop
 8003d08:	200004b4 	.word	0x200004b4
 8003d0c:	40015000 	.word	0x40015000
 8003d10:	08006610 	.word	0x08006610

08003d14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI5)
 8003d14:	6802      	ldr	r2, [r0, #0]
 8003d16:	4b12      	ldr	r3, [pc, #72]	; (8003d60 <HAL_SPI_MspInit+0x4c>)
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d000      	beq.n	8003d1e <HAL_SPI_MspInit+0xa>
 8003d1c:	4770      	bx	lr
{
 8003d1e:	b500      	push	{lr}
 8003d20:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003d22:	2100      	movs	r1, #0
 8003d24:	9100      	str	r1, [sp, #0]
 8003d26:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8003d2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d2c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003d30:	645a      	str	r2, [r3, #68]	; 0x44
 8003d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	9b00      	ldr	r3, [sp, #0]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 8003d3c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003d40:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d42:	2302      	movs	r3, #2
 8003d44:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d46:	9103      	str	r1, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003d4c:	2305      	movs	r3, #5
 8003d4e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d50:	a901      	add	r1, sp, #4
 8003d52:	4804      	ldr	r0, [pc, #16]	; (8003d64 <HAL_SPI_MspInit+0x50>)
 8003d54:	f7fd fd80 	bl	8001858 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8003d58:	b007      	add	sp, #28
 8003d5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d5e:	bf00      	nop
 8003d60:	40015000 	.word	0x40015000
 8003d64:	40021400 	.word	0x40021400

08003d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d68:	b510      	push	{r4, lr}
 8003d6a:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d6c:	2400      	movs	r4, #0
 8003d6e:	9400      	str	r4, [sp, #0]
 8003d70:	4b21      	ldr	r3, [pc, #132]	; (8003df8 <HAL_MspInit+0x90>)
 8003d72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d78:	645a      	str	r2, [r3, #68]	; 0x44
 8003d7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d7c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003d80:	9200      	str	r2, [sp, #0]
 8003d82:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d84:	9401      	str	r4, [sp, #4]
 8003d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d88:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003d8c:	641a      	str	r2, [r3, #64]	; 0x40
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d94:	9301      	str	r3, [sp, #4]
 8003d96:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d98:	2003      	movs	r0, #3
 8003d9a:	f7fd fccd 	bl	8001738 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003d9e:	4622      	mov	r2, r4
 8003da0:	4621      	mov	r1, r4
 8003da2:	f06f 000b 	mvn.w	r0, #11
 8003da6:	f7fd fcd9 	bl	800175c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003daa:	4622      	mov	r2, r4
 8003dac:	4621      	mov	r1, r4
 8003dae:	f06f 000a 	mvn.w	r0, #10
 8003db2:	f7fd fcd3 	bl	800175c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003db6:	4622      	mov	r2, r4
 8003db8:	4621      	mov	r1, r4
 8003dba:	f06f 0009 	mvn.w	r0, #9
 8003dbe:	f7fd fccd 	bl	800175c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003dc2:	4622      	mov	r2, r4
 8003dc4:	4621      	mov	r1, r4
 8003dc6:	f06f 0004 	mvn.w	r0, #4
 8003dca:	f7fd fcc7 	bl	800175c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003dce:	4622      	mov	r2, r4
 8003dd0:	4621      	mov	r1, r4
 8003dd2:	f06f 0003 	mvn.w	r0, #3
 8003dd6:	f7fd fcc1 	bl	800175c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003dda:	4622      	mov	r2, r4
 8003ddc:	4621      	mov	r1, r4
 8003dde:	f06f 0001 	mvn.w	r0, #1
 8003de2:	f7fd fcbb 	bl	800175c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003de6:	4622      	mov	r2, r4
 8003de8:	4621      	mov	r1, r4
 8003dea:	f04f 30ff 	mov.w	r0, #4294967295
 8003dee:	f7fd fcb5 	bl	800175c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003df2:	b002      	add	sp, #8
 8003df4:	bd10      	pop	{r4, pc}
 8003df6:	bf00      	nop
 8003df8:	40023800 	.word	0x40023800

08003dfc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003dfc:	4770      	bx	lr

08003dfe <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003dfe:	e7fe      	b.n	8003dfe <HardFault_Handler>

08003e00 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003e00:	e7fe      	b.n	8003e00 <MemManage_Handler>

08003e02 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003e02:	e7fe      	b.n	8003e02 <BusFault_Handler>

08003e04 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003e04:	e7fe      	b.n	8003e04 <UsageFault_Handler>

08003e06 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e06:	4770      	bx	lr

08003e08 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e08:	4770      	bx	lr

08003e0a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e0a:	4770      	bx	lr

08003e0c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003e0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e0e:	f7fd f899 	bl	8000f44 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8003e12:	f7fd fd0a 	bl	800182a <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e16:	bd08      	pop	{r3, pc}

08003e18 <CAN1_RX0_IRQHandler>:

/**
* @brief This function handles CAN1 RX0 interrupts.
*/
void CAN1_RX0_IRQHandler(void)
{
 8003e18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003e1a:	4802      	ldr	r0, [pc, #8]	; (8003e24 <CAN1_RX0_IRQHandler+0xc>)
 8003e1c:	f7fd fb5f 	bl	80014de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003e20:	bd08      	pop	{r3, pc}
 8003e22:	bf00      	nop
 8003e24:	2000023c 	.word	0x2000023c

08003e28 <CAN1_RX1_IRQHandler>:

/**
* @brief This function handles CAN1 RX1 interrupt.
*/
void CAN1_RX1_IRQHandler(void)
{
 8003e28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003e2a:	4802      	ldr	r0, [pc, #8]	; (8003e34 <CAN1_RX1_IRQHandler+0xc>)
 8003e2c:	f7fd fb57 	bl	80014de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003e30:	bd08      	pop	{r3, pc}
 8003e32:	bf00      	nop
 8003e34:	2000023c 	.word	0x2000023c

08003e38 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 8003e38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003e3a:	4802      	ldr	r0, [pc, #8]	; (8003e44 <USART1_IRQHandler+0xc>)
 8003e3c:	f7fe ff70 	bl	8002d20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003e40:	bd08      	pop	{r3, pc}
 8003e42:	bf00      	nop
 8003e44:	20000600 	.word	0x20000600

08003e48 <TIM6_DAC_IRQHandler>:

/**
* @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
*/
void TIM6_DAC_IRQHandler(void)
{
 8003e48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003e4a:	4802      	ldr	r0, [pc, #8]	; (8003e54 <TIM6_DAC_IRQHandler+0xc>)
 8003e4c:	f7fe f9c6 	bl	80021dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003e50:	bd08      	pop	{r3, pc}
 8003e52:	bf00      	nop
 8003e54:	2000050c 	.word	0x2000050c

08003e58 <CAN2_RX0_IRQHandler>:

/**
* @brief This function handles CAN2 RX0 interrupts.
*/
void CAN2_RX0_IRQHandler(void)
{
 8003e58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003e5a:	4802      	ldr	r0, [pc, #8]	; (8003e64 <CAN2_RX0_IRQHandler+0xc>)
 8003e5c:	f7fd fb3f 	bl	80014de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8003e60:	bd08      	pop	{r3, pc}
 8003e62:	bf00      	nop
 8003e64:	20000214 	.word	0x20000214

08003e68 <CAN2_RX1_IRQHandler>:

/**
* @brief This function handles CAN2 RX1 interrupt.
*/
void CAN2_RX1_IRQHandler(void)
{
 8003e68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003e6a:	4802      	ldr	r0, [pc, #8]	; (8003e74 <CAN2_RX1_IRQHandler+0xc>)
 8003e6c:	f7fd fb37 	bl	80014de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8003e70:	bd08      	pop	{r3, pc}
 8003e72:	bf00      	nop
 8003e74:	20000214 	.word	0x20000214

08003e78 <USART6_IRQHandler>:

/**
* @brief This function handles USART6 global interrupt.
*/
void USART6_IRQHandler(void)
{
 8003e78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003e7a:	4802      	ldr	r0, [pc, #8]	; (8003e84 <USART6_IRQHandler+0xc>)
 8003e7c:	f7fe ff50 	bl	8002d20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003e80:	bd08      	pop	{r3, pc}
 8003e82:	bf00      	nop
 8003e84:	20000680 	.word	0x20000680

08003e88 <UART8_IRQHandler>:

/**
* @brief This function handles UART8 global interrupt.
*/
void UART8_IRQHandler(void)
{
 8003e88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8003e8a:	4802      	ldr	r0, [pc, #8]	; (8003e94 <UART8_IRQHandler+0xc>)
 8003e8c:	f7fe ff48 	bl	8002d20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8003e90:	bd08      	pop	{r3, pc}
 8003e92:	bf00      	nop
 8003e94:	20000640 	.word	0x20000640

08003e98 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8003e98:	b570      	push	{r4, r5, r6, lr}
 8003e9a:	460d      	mov	r5, r1
 8003e9c:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e9e:	2400      	movs	r4, #0
 8003ea0:	e004      	b.n	8003eac <_read+0x14>
	{
		*ptr++ = __io_getchar();
 8003ea2:	f3af 8000 	nop.w
 8003ea6:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ea8:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 8003eaa:	3501      	adds	r5, #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eac:	42b4      	cmp	r4, r6
 8003eae:	dbf8      	blt.n	8003ea2 <_read+0xa>
	}

return len;
}
 8003eb0:	4630      	mov	r0, r6
 8003eb2:	bd70      	pop	{r4, r5, r6, pc}

08003eb4 <_write>:

int _write(int file, char *ptr, int len)
{
 8003eb4:	b570      	push	{r4, r5, r6, lr}
 8003eb6:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eb8:	2400      	movs	r4, #0
 8003eba:	e005      	b.n	8003ec8 <_write+0x14>
	{
		__io_putchar(*ptr++);
 8003ebc:	1c4d      	adds	r5, r1, #1
 8003ebe:	7808      	ldrb	r0, [r1, #0]
 8003ec0:	f7ff f942 	bl	8003148 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ec4:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 8003ec6:	4629      	mov	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ec8:	42b4      	cmp	r4, r6
 8003eca:	dbf7      	blt.n	8003ebc <_write+0x8>
	}
	return len;
}
 8003ecc:	4630      	mov	r0, r6
 8003ece:	bd70      	pop	{r4, r5, r6, pc}

08003ed0 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8003ed0:	b508      	push	{r3, lr}
 8003ed2:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003ed4:	4a0b      	ldr	r2, [pc, #44]	; (8003f04 <_sbrk+0x34>)
 8003ed6:	6812      	ldr	r2, [r2, #0]
 8003ed8:	b142      	cbz	r2, 8003eec <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8003eda:	4a0a      	ldr	r2, [pc, #40]	; (8003f04 <_sbrk+0x34>)
 8003edc:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8003ede:	4403      	add	r3, r0
 8003ee0:	466a      	mov	r2, sp
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d806      	bhi.n	8003ef4 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8003ee6:	4a07      	ldr	r2, [pc, #28]	; (8003f04 <_sbrk+0x34>)
 8003ee8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8003eea:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8003eec:	4a05      	ldr	r2, [pc, #20]	; (8003f04 <_sbrk+0x34>)
 8003eee:	4906      	ldr	r1, [pc, #24]	; (8003f08 <_sbrk+0x38>)
 8003ef0:	6011      	str	r1, [r2, #0]
 8003ef2:	e7f2      	b.n	8003eda <_sbrk+0xa>
		errno = ENOMEM;
 8003ef4:	f000 face 	bl	8004494 <__errno>
 8003ef8:	230c      	movs	r3, #12
 8003efa:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003efc:	f04f 30ff 	mov.w	r0, #4294967295
 8003f00:	e7f3      	b.n	8003eea <_sbrk+0x1a>
 8003f02:	bf00      	nop
 8003f04:	20000200 	.word	0x20000200
 8003f08:	200006c8 	.word	0x200006c8

08003f0c <_close>:

int _close(int file)
{
	return -1;
}
 8003f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f10:	4770      	bx	lr

08003f12 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003f12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f16:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003f18:	2000      	movs	r0, #0
 8003f1a:	4770      	bx	lr

08003f1c <_lseek>:
}

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	4770      	bx	lr

08003f20 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f20:	490f      	ldr	r1, [pc, #60]	; (8003f60 <SystemInit+0x40>)
 8003f22:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003f26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003f2e:	4b0d      	ldr	r3, [pc, #52]	; (8003f64 <SystemInit+0x44>)
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	f042 0201 	orr.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003f38:	2000      	movs	r0, #0
 8003f3a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003f42:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003f46:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003f48:	4a07      	ldr	r2, [pc, #28]	; (8003f68 <SystemInit+0x48>)
 8003f4a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f52:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003f54:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f56:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f5a:	608b      	str	r3, [r1, #8]
#endif
}
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	e000ed00 	.word	0xe000ed00
 8003f64:	40023800 	.word	0x40023800
 8003f68:	24003010 	.word	0x24003010

08003f6c <MX_TIM6_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003f6c:	b500      	push	{lr}
 8003f6e:	b083      	sub	sp, #12
  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
 8003f70:	4810      	ldr	r0, [pc, #64]	; (8003fb4 <MX_TIM6_Init+0x48>)
 8003f72:	4b11      	ldr	r3, [pc, #68]	; (8003fb8 <MX_TIM6_Init+0x4c>)
 8003f74:	6003      	str	r3, [r0, #0]
  htim6.Init.Prescaler = 10-1;
 8003f76:	2309      	movs	r3, #9
 8003f78:	6043      	str	r3, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 16800;
 8003f7e:	f244 13a0 	movw	r3, #16800	; 0x41a0
 8003f82:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003f84:	f7fe fa48 	bl	8002418 <HAL_TIM_Base_Init>
 8003f88:	b950      	cbnz	r0, 8003fa0 <MX_TIM6_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f8e:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003f90:	4669      	mov	r1, sp
 8003f92:	4808      	ldr	r0, [pc, #32]	; (8003fb4 <MX_TIM6_Init+0x48>)
 8003f94:	f7fe fb3e 	bl	8002614 <HAL_TIMEx_MasterConfigSynchronization>
 8003f98:	b938      	cbnz	r0, 8003faa <MX_TIM6_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8003f9a:	b003      	add	sp, #12
 8003f9c:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8003fa0:	2177      	movs	r1, #119	; 0x77
 8003fa2:	4806      	ldr	r0, [pc, #24]	; (8003fbc <MX_TIM6_Init+0x50>)
 8003fa4:	f7ff fbe6 	bl	8003774 <_Error_Handler>
 8003fa8:	e7ef      	b.n	8003f8a <MX_TIM6_Init+0x1e>
    _Error_Handler(__FILE__, __LINE__);
 8003faa:	217e      	movs	r1, #126	; 0x7e
 8003fac:	4803      	ldr	r0, [pc, #12]	; (8003fbc <MX_TIM6_Init+0x50>)
 8003fae:	f7ff fbe1 	bl	8003774 <_Error_Handler>
}
 8003fb2:	e7f2      	b.n	8003f9a <MX_TIM6_Init+0x2e>
 8003fb4:	2000050c 	.word	0x2000050c
 8003fb8:	40001000 	.word	0x40001000
 8003fbc:	08006620 	.word	0x08006620

08003fc0 <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim12);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003fc0:	b082      	sub	sp, #8

  if(tim_pwmHandle->Instance==TIM1)
 8003fc2:	6803      	ldr	r3, [r0, #0]
 8003fc4:	4a10      	ldr	r2, [pc, #64]	; (8004008 <HAL_TIM_PWM_MspInit+0x48>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d004      	beq.n	8003fd4 <HAL_TIM_PWM_MspInit+0x14>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM12)
 8003fca:	4a10      	ldr	r2, [pc, #64]	; (800400c <HAL_TIM_PWM_MspInit+0x4c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d00e      	beq.n	8003fee <HAL_TIM_PWM_MspInit+0x2e>
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8003fd0:	b002      	add	sp, #8
 8003fd2:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	4b0d      	ldr	r3, [pc, #52]	; (8004010 <HAL_TIM_PWM_MspInit+0x50>)
 8003fda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fdc:	f042 0201 	orr.w	r2, r2, #1
 8003fe0:	645a      	str	r2, [r3, #68]	; 0x44
 8003fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	9b00      	ldr	r3, [sp, #0]
 8003fec:	e7f0      	b.n	8003fd0 <HAL_TIM_PWM_MspInit+0x10>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003fee:	2300      	movs	r3, #0
 8003ff0:	9301      	str	r3, [sp, #4]
 8003ff2:	4b07      	ldr	r3, [pc, #28]	; (8004010 <HAL_TIM_PWM_MspInit+0x50>)
 8003ff4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ff6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ffa:	641a      	str	r2, [r3, #64]	; 0x40
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004002:	9301      	str	r3, [sp, #4]
 8004004:	9b01      	ldr	r3, [sp, #4]
}
 8004006:	e7e3      	b.n	8003fd0 <HAL_TIM_PWM_MspInit+0x10>
 8004008:	40010000 	.word	0x40010000
 800400c:	40001800 	.word	0x40001800
 8004010:	40023800 	.word	0x40023800

08004014 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM6)
 8004014:	6802      	ldr	r2, [r0, #0]
 8004016:	4b0e      	ldr	r3, [pc, #56]	; (8004050 <HAL_TIM_Base_MspInit+0x3c>)
 8004018:	429a      	cmp	r2, r3
 800401a:	d000      	beq.n	800401e <HAL_TIM_Base_MspInit+0xa>
 800401c:	4770      	bx	lr
{
 800401e:	b500      	push	{lr}
 8004020:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004022:	2200      	movs	r2, #0
 8004024:	9201      	str	r2, [sp, #4]
 8004026:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 800402a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800402c:	f041 0110 	orr.w	r1, r1, #16
 8004030:	6419      	str	r1, [r3, #64]	; 0x40
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	f003 0310 	and.w	r3, r3, #16
 8004038:	9301      	str	r3, [sp, #4]
 800403a:	9b01      	ldr	r3, [sp, #4]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800403c:	2101      	movs	r1, #1
 800403e:	2036      	movs	r0, #54	; 0x36
 8004040:	f7fd fb8c 	bl	800175c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004044:	2036      	movs	r0, #54	; 0x36
 8004046:	f7fd fbbd 	bl	80017c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800404a:	b003      	add	sp, #12
 800404c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004050:	40001000 	.word	0x40001000

08004054 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004054:	b570      	push	{r4, r5, r6, lr}
 8004056:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 8004058:	6803      	ldr	r3, [r0, #0]
 800405a:	4a18      	ldr	r2, [pc, #96]	; (80040bc <HAL_TIM_MspPostInit+0x68>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d004      	beq.n	800406a <HAL_TIM_MspPostInit+0x16>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM12)
 8004060:	4a17      	ldr	r2, [pc, #92]	; (80040c0 <HAL_TIM_MspPostInit+0x6c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d01b      	beq.n	800409e <HAL_TIM_MspPostInit+0x4a>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8004066:	b006      	add	sp, #24
 8004068:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = FRICTION_L_Pin;
 800406a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800406e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004070:	2602      	movs	r6, #2
 8004072:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004074:	2400      	movs	r4, #0
 8004076:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004078:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800407a:	2501      	movs	r5, #1
 800407c:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 800407e:	a901      	add	r1, sp, #4
 8004080:	4810      	ldr	r0, [pc, #64]	; (80040c4 <HAL_TIM_MspPostInit+0x70>)
 8004082:	f7fd fbe9 	bl	8001858 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = FRICTION_R_Pin;
 8004086:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800408a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800408c:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408e:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004090:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004092:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(FRICTION_R_GPIO_Port, &GPIO_InitStruct);
 8004094:	a901      	add	r1, sp, #4
 8004096:	480c      	ldr	r0, [pc, #48]	; (80040c8 <HAL_TIM_MspPostInit+0x74>)
 8004098:	f7fd fbde 	bl	8001858 <HAL_GPIO_Init>
 800409c:	e7e3      	b.n	8004066 <HAL_TIM_MspPostInit+0x12>
    GPIO_InitStruct.Pin = BEEP_CTRL_Pin;
 800409e:	2340      	movs	r3, #64	; 0x40
 80040a0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a2:	2302      	movs	r3, #2
 80040a4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a6:	2300      	movs	r3, #0
 80040a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040aa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80040ac:	2309      	movs	r3, #9
 80040ae:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 80040b0:	a901      	add	r1, sp, #4
 80040b2:	4806      	ldr	r0, [pc, #24]	; (80040cc <HAL_TIM_MspPostInit+0x78>)
 80040b4:	f7fd fbd0 	bl	8001858 <HAL_GPIO_Init>
}
 80040b8:	e7d5      	b.n	8004066 <HAL_TIM_MspPostInit+0x12>
 80040ba:	bf00      	nop
 80040bc:	40010000 	.word	0x40010000
 80040c0:	40001800 	.word	0x40001800
 80040c4:	40020000 	.word	0x40020000
 80040c8:	40021000 	.word	0x40021000
 80040cc:	40021c00 	.word	0x40021c00

080040d0 <MX_TIM1_Init>:
{
 80040d0:	b500      	push	{lr}
 80040d2:	b091      	sub	sp, #68	; 0x44
  htim1.Instance = TIM1;
 80040d4:	482e      	ldr	r0, [pc, #184]	; (8004190 <MX_TIM1_Init+0xc0>)
 80040d6:	4b2f      	ldr	r3, [pc, #188]	; (8004194 <MX_TIM1_Init+0xc4>)
 80040d8:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 167;
 80040da:	23a7      	movs	r3, #167	; 0xa7
 80040dc:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040de:	2300      	movs	r3, #0
 80040e0:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 20000-1;
 80040e2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80040e6:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040e8:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80040ea:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80040ec:	f7fe f9ad 	bl	800244a <HAL_TIM_PWM_Init>
 80040f0:	2800      	cmp	r0, #0
 80040f2:	d133      	bne.n	800415c <MX_TIM1_Init+0x8c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040f4:	2300      	movs	r3, #0
 80040f6:	930e      	str	r3, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040f8:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80040fa:	a90e      	add	r1, sp, #56	; 0x38
 80040fc:	4824      	ldr	r0, [pc, #144]	; (8004190 <MX_TIM1_Init+0xc0>)
 80040fe:	f7fe fa89 	bl	8002614 <HAL_TIMEx_MasterConfigSynchronization>
 8004102:	2800      	cmp	r0, #0
 8004104:	d12f      	bne.n	8004166 <MX_TIM1_Init+0x96>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004106:	2360      	movs	r3, #96	; 0x60
 8004108:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 1000;
 800410a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800410e:	9308      	str	r3, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004110:	2200      	movs	r2, #0
 8004112:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004114:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004116:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004118:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800411a:	920d      	str	r2, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800411c:	a907      	add	r1, sp, #28
 800411e:	481c      	ldr	r0, [pc, #112]	; (8004190 <MX_TIM1_Init+0xc0>)
 8004120:	f7fe f9de 	bl	80024e0 <HAL_TIM_PWM_ConfigChannel>
 8004124:	bb20      	cbnz	r0, 8004170 <MX_TIM1_Init+0xa0>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004126:	220c      	movs	r2, #12
 8004128:	a907      	add	r1, sp, #28
 800412a:	4819      	ldr	r0, [pc, #100]	; (8004190 <MX_TIM1_Init+0xc0>)
 800412c:	f7fe f9d8 	bl	80024e0 <HAL_TIM_PWM_ConfigChannel>
 8004130:	bb18      	cbnz	r0, 800417a <MX_TIM1_Init+0xaa>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004132:	2300      	movs	r3, #0
 8004134:	9300      	str	r3, [sp, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004136:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004138:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800413a:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800413c:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800413e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004142:	9205      	str	r2, [sp, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004144:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004146:	4669      	mov	r1, sp
 8004148:	4811      	ldr	r0, [pc, #68]	; (8004190 <MX_TIM1_Init+0xc0>)
 800414a:	f7fe fa8c 	bl	8002666 <HAL_TIMEx_ConfigBreakDeadTime>
 800414e:	b9c8      	cbnz	r0, 8004184 <MX_TIM1_Init+0xb4>
  HAL_TIM_MspPostInit(&htim1);
 8004150:	480f      	ldr	r0, [pc, #60]	; (8004190 <MX_TIM1_Init+0xc0>)
 8004152:	f7ff ff7f 	bl	8004054 <HAL_TIM_MspPostInit>
}
 8004156:	b011      	add	sp, #68	; 0x44
 8004158:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 800415c:	2142      	movs	r1, #66	; 0x42
 800415e:	480e      	ldr	r0, [pc, #56]	; (8004198 <MX_TIM1_Init+0xc8>)
 8004160:	f7ff fb08 	bl	8003774 <_Error_Handler>
 8004164:	e7c6      	b.n	80040f4 <MX_TIM1_Init+0x24>
    _Error_Handler(__FILE__, __LINE__);
 8004166:	2149      	movs	r1, #73	; 0x49
 8004168:	480b      	ldr	r0, [pc, #44]	; (8004198 <MX_TIM1_Init+0xc8>)
 800416a:	f7ff fb03 	bl	8003774 <_Error_Handler>
 800416e:	e7ca      	b.n	8004106 <MX_TIM1_Init+0x36>
    _Error_Handler(__FILE__, __LINE__);
 8004170:	2155      	movs	r1, #85	; 0x55
 8004172:	4809      	ldr	r0, [pc, #36]	; (8004198 <MX_TIM1_Init+0xc8>)
 8004174:	f7ff fafe 	bl	8003774 <_Error_Handler>
 8004178:	e7d5      	b.n	8004126 <MX_TIM1_Init+0x56>
    _Error_Handler(__FILE__, __LINE__);
 800417a:	215a      	movs	r1, #90	; 0x5a
 800417c:	4806      	ldr	r0, [pc, #24]	; (8004198 <MX_TIM1_Init+0xc8>)
 800417e:	f7ff faf9 	bl	8003774 <_Error_Handler>
 8004182:	e7d6      	b.n	8004132 <MX_TIM1_Init+0x62>
    _Error_Handler(__FILE__, __LINE__);
 8004184:	2166      	movs	r1, #102	; 0x66
 8004186:	4804      	ldr	r0, [pc, #16]	; (8004198 <MX_TIM1_Init+0xc8>)
 8004188:	f7ff faf4 	bl	8003774 <_Error_Handler>
 800418c:	e7e0      	b.n	8004150 <MX_TIM1_Init+0x80>
 800418e:	bf00      	nop
 8004190:	20000548 	.word	0x20000548
 8004194:	40010000 	.word	0x40010000
 8004198:	08006620 	.word	0x08006620

0800419c <MX_TIM12_Init>:
{
 800419c:	b500      	push	{lr}
 800419e:	b089      	sub	sp, #36	; 0x24
  htim12.Instance = TIM12;
 80041a0:	4814      	ldr	r0, [pc, #80]	; (80041f4 <MX_TIM12_Init+0x58>)
 80041a2:	4b15      	ldr	r3, [pc, #84]	; (80041f8 <MX_TIM12_Init+0x5c>)
 80041a4:	6003      	str	r3, [r0, #0]
  htim12.Init.Prescaler = 83;
 80041a6:	2353      	movs	r3, #83	; 0x53
 80041a8:	6043      	str	r3, [r0, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041aa:	2300      	movs	r3, #0
 80041ac:	6083      	str	r3, [r0, #8]
  htim12.Init.Period = 20000-1;
 80041ae:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80041b2:	60c2      	str	r2, [r0, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041b4:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80041b6:	f7fe f948 	bl	800244a <HAL_TIM_PWM_Init>
 80041ba:	b980      	cbnz	r0, 80041de <MX_TIM12_Init+0x42>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041bc:	2360      	movs	r3, #96	; 0x60
 80041be:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80041c0:	2200      	movs	r2, #0
 80041c2:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041c4:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041c6:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041c8:	a901      	add	r1, sp, #4
 80041ca:	480a      	ldr	r0, [pc, #40]	; (80041f4 <MX_TIM12_Init+0x58>)
 80041cc:	f7fe f988 	bl	80024e0 <HAL_TIM_PWM_ConfigChannel>
 80041d0:	b950      	cbnz	r0, 80041e8 <MX_TIM12_Init+0x4c>
  HAL_TIM_MspPostInit(&htim12);
 80041d2:	4808      	ldr	r0, [pc, #32]	; (80041f4 <MX_TIM12_Init+0x58>)
 80041d4:	f7ff ff3e 	bl	8004054 <HAL_TIM_MspPostInit>
}
 80041d8:	b009      	add	sp, #36	; 0x24
 80041da:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80041de:	218e      	movs	r1, #142	; 0x8e
 80041e0:	4806      	ldr	r0, [pc, #24]	; (80041fc <MX_TIM12_Init+0x60>)
 80041e2:	f7ff fac7 	bl	8003774 <_Error_Handler>
 80041e6:	e7e9      	b.n	80041bc <MX_TIM12_Init+0x20>
    _Error_Handler(__FILE__, __LINE__);
 80041e8:	2197      	movs	r1, #151	; 0x97
 80041ea:	4804      	ldr	r0, [pc, #16]	; (80041fc <MX_TIM12_Init+0x60>)
 80041ec:	f7ff fac2 	bl	8003774 <_Error_Handler>
 80041f0:	e7ef      	b.n	80041d2 <MX_TIM12_Init+0x36>
 80041f2:	bf00      	nop
 80041f4:	20000584 	.word	0x20000584
 80041f8:	40001800 	.word	0x40001800
 80041fc:	08006620 	.word	0x08006620

08004200 <MX_UART7_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8004200:	b508      	push	{r3, lr}

  huart7.Instance = UART7;
 8004202:	480b      	ldr	r0, [pc, #44]	; (8004230 <MX_UART7_Init+0x30>)
 8004204:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <MX_UART7_Init+0x34>)
 8004206:	6003      	str	r3, [r0, #0]
  huart7.Init.BaudRate = 115200;
 8004208:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800420c:	6043      	str	r3, [r0, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800420e:	2300      	movs	r3, #0
 8004210:	6083      	str	r3, [r0, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8004212:	60c3      	str	r3, [r0, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8004214:	6103      	str	r3, [r0, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8004216:	220c      	movs	r2, #12
 8004218:	6142      	str	r2, [r0, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800421a:	6183      	str	r3, [r0, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800421c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800421e:	f7fe fc5e 	bl	8002ade <HAL_UART_Init>
 8004222:	b900      	cbnz	r0, 8004226 <MX_UART7_Init+0x26>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8004224:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8004226:	2144      	movs	r1, #68	; 0x44
 8004228:	4803      	ldr	r0, [pc, #12]	; (8004238 <MX_UART7_Init+0x38>)
 800422a:	f7ff faa3 	bl	8003774 <_Error_Handler>
}
 800422e:	e7f9      	b.n	8004224 <MX_UART7_Init+0x24>
 8004230:	200005c0 	.word	0x200005c0
 8004234:	40007800 	.word	0x40007800
 8004238:	08006630 	.word	0x08006630

0800423c <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 800423c:	b508      	push	{r3, lr}

  huart8.Instance = UART8;
 800423e:	480b      	ldr	r0, [pc, #44]	; (800426c <MX_UART8_Init+0x30>)
 8004240:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <MX_UART8_Init+0x34>)
 8004242:	6003      	str	r3, [r0, #0]
  huart8.Init.BaudRate = 115200;
 8004244:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004248:	6043      	str	r3, [r0, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800424a:	2300      	movs	r3, #0
 800424c:	6083      	str	r3, [r0, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800424e:	60c3      	str	r3, [r0, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8004250:	6103      	str	r3, [r0, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8004252:	220c      	movs	r2, #12
 8004254:	6142      	str	r2, [r0, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004256:	6183      	str	r3, [r0, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8004258:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800425a:	f7fe fc40 	bl	8002ade <HAL_UART_Init>
 800425e:	b900      	cbnz	r0, 8004262 <MX_UART8_Init+0x26>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8004260:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8004262:	2156      	movs	r1, #86	; 0x56
 8004264:	4803      	ldr	r0, [pc, #12]	; (8004274 <MX_UART8_Init+0x38>)
 8004266:	f7ff fa85 	bl	8003774 <_Error_Handler>
}
 800426a:	e7f9      	b.n	8004260 <MX_UART8_Init+0x24>
 800426c:	20000640 	.word	0x20000640
 8004270:	40007c00 	.word	0x40007c00
 8004274:	08006630 	.word	0x08006630

08004278 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004278:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 800427a:	480b      	ldr	r0, [pc, #44]	; (80042a8 <MX_USART1_UART_Init+0x30>)
 800427c:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <MX_USART1_UART_Init+0x34>)
 800427e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 100000;
 8004280:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <MX_USART1_UART_Init+0x38>)
 8004282:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004284:	2300      	movs	r3, #0
 8004286:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004288:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800428a:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800428c:	220c      	movs	r2, #12
 800428e:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004290:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004292:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004294:	f7fe fc23 	bl	8002ade <HAL_UART_Init>
 8004298:	b900      	cbnz	r0, 800429c <MX_USART1_UART_Init+0x24>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 800429a:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 800429c:	2169      	movs	r1, #105	; 0x69
 800429e:	4805      	ldr	r0, [pc, #20]	; (80042b4 <MX_USART1_UART_Init+0x3c>)
 80042a0:	f7ff fa68 	bl	8003774 <_Error_Handler>
}
 80042a4:	e7f9      	b.n	800429a <MX_USART1_UART_Init+0x22>
 80042a6:	bf00      	nop
 80042a8:	20000600 	.word	0x20000600
 80042ac:	40011000 	.word	0x40011000
 80042b0:	000186a0 	.word	0x000186a0
 80042b4:	08006630 	.word	0x08006630

080042b8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80042b8:	b508      	push	{r3, lr}

  huart6.Instance = USART6;
 80042ba:	480b      	ldr	r0, [pc, #44]	; (80042e8 <MX_USART6_UART_Init+0x30>)
 80042bc:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <MX_USART6_UART_Init+0x34>)
 80042be:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 115200;
 80042c0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80042c4:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80042c6:	2300      	movs	r3, #0
 80042c8:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80042ca:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80042cc:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80042ce:	220c      	movs	r2, #12
 80042d0:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042d2:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80042d4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80042d6:	f7fe fc02 	bl	8002ade <HAL_UART_Init>
 80042da:	b900      	cbnz	r0, 80042de <MX_USART6_UART_Init+0x26>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 80042dc:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 80042de:	217c      	movs	r1, #124	; 0x7c
 80042e0:	4803      	ldr	r0, [pc, #12]	; (80042f0 <MX_USART6_UART_Init+0x38>)
 80042e2:	f7ff fa47 	bl	8003774 <_Error_Handler>
}
 80042e6:	e7f9      	b.n	80042dc <MX_USART6_UART_Init+0x24>
 80042e8:	20000680 	.word	0x20000680
 80042ec:	40011400 	.word	0x40011400
 80042f0:	08006630 	.word	0x08006630

080042f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80042f4:	b510      	push	{r4, lr}
 80042f6:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART7)
 80042f8:	6803      	ldr	r3, [r0, #0]
 80042fa:	4a49      	ldr	r2, [pc, #292]	; (8004420 <HAL_UART_MspInit+0x12c>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d00a      	beq.n	8004316 <HAL_UART_MspInit+0x22>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(uartHandle->Instance==UART8)
 8004300:	4a48      	ldr	r2, [pc, #288]	; (8004424 <HAL_UART_MspInit+0x130>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d023      	beq.n	800434e <HAL_UART_MspInit+0x5a>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 8004306:	4a48      	ldr	r2, [pc, #288]	; (8004428 <HAL_UART_MspInit+0x134>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d042      	beq.n	8004392 <HAL_UART_MspInit+0x9e>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART6)
 800430c:	4a47      	ldr	r2, [pc, #284]	; (800442c <HAL_UART_MspInit+0x138>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d062      	beq.n	80043d8 <HAL_UART_MspInit+0xe4>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004312:	b00a      	add	sp, #40	; 0x28
 8004314:	bd10      	pop	{r4, pc}
    __HAL_RCC_UART7_CLK_ENABLE();
 8004316:	2300      	movs	r3, #0
 8004318:	9301      	str	r3, [sp, #4]
 800431a:	4b45      	ldr	r3, [pc, #276]	; (8004430 <HAL_UART_MspInit+0x13c>)
 800431c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800431e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004322:	641a      	str	r2, [r3, #64]	; 0x40
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800432a:	9301      	str	r3, [sp, #4]
 800432c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 800432e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004332:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004334:	2302      	movs	r3, #2
 8004336:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004338:	2301      	movs	r3, #1
 800433a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800433c:	2303      	movs	r3, #3
 800433e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004340:	2308      	movs	r3, #8
 8004342:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004344:	a905      	add	r1, sp, #20
 8004346:	483b      	ldr	r0, [pc, #236]	; (8004434 <HAL_UART_MspInit+0x140>)
 8004348:	f7fd fa86 	bl	8001858 <HAL_GPIO_Init>
 800434c:	e7e1      	b.n	8004312 <HAL_UART_MspInit+0x1e>
    __HAL_RCC_UART8_CLK_ENABLE();
 800434e:	2400      	movs	r4, #0
 8004350:	9402      	str	r4, [sp, #8]
 8004352:	4b37      	ldr	r3, [pc, #220]	; (8004430 <HAL_UART_MspInit+0x13c>)
 8004354:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004356:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800435a:	641a      	str	r2, [r3, #64]	; 0x40
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004362:	9302      	str	r3, [sp, #8]
 8004364:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8004366:	2303      	movs	r3, #3
 8004368:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800436a:	2202      	movs	r2, #2
 800436c:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800436e:	2201      	movs	r2, #1
 8004370:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004372:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8004374:	2308      	movs	r3, #8
 8004376:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004378:	a905      	add	r1, sp, #20
 800437a:	482e      	ldr	r0, [pc, #184]	; (8004434 <HAL_UART_MspInit+0x140>)
 800437c:	f7fd fa6c 	bl	8001858 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8004380:	4622      	mov	r2, r4
 8004382:	4621      	mov	r1, r4
 8004384:	2053      	movs	r0, #83	; 0x53
 8004386:	f7fd f9e9 	bl	800175c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800438a:	2053      	movs	r0, #83	; 0x53
 800438c:	f7fd fa1a 	bl	80017c4 <HAL_NVIC_EnableIRQ>
 8004390:	e7bf      	b.n	8004312 <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004392:	2400      	movs	r4, #0
 8004394:	9403      	str	r4, [sp, #12]
 8004396:	4b26      	ldr	r3, [pc, #152]	; (8004430 <HAL_UART_MspInit+0x13c>)
 8004398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800439a:	f042 0210 	orr.w	r2, r2, #16
 800439e:	645a      	str	r2, [r3, #68]	; 0x44
 80043a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a2:	f003 0310 	and.w	r3, r3, #16
 80043a6:	9303      	str	r3, [sp, #12]
 80043a8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80043aa:	23c0      	movs	r3, #192	; 0xc0
 80043ac:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ae:	2302      	movs	r3, #2
 80043b0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043b2:	2301      	movs	r3, #1
 80043b4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043b6:	2303      	movs	r3, #3
 80043b8:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80043ba:	2307      	movs	r3, #7
 80043bc:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043be:	a905      	add	r1, sp, #20
 80043c0:	481d      	ldr	r0, [pc, #116]	; (8004438 <HAL_UART_MspInit+0x144>)
 80043c2:	f7fd fa49 	bl	8001858 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80043c6:	4622      	mov	r2, r4
 80043c8:	4621      	mov	r1, r4
 80043ca:	2025      	movs	r0, #37	; 0x25
 80043cc:	f7fd f9c6 	bl	800175c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80043d0:	2025      	movs	r0, #37	; 0x25
 80043d2:	f7fd f9f7 	bl	80017c4 <HAL_NVIC_EnableIRQ>
 80043d6:	e79c      	b.n	8004312 <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART6_CLK_ENABLE();
 80043d8:	2400      	movs	r4, #0
 80043da:	9404      	str	r4, [sp, #16]
 80043dc:	4b14      	ldr	r3, [pc, #80]	; (8004430 <HAL_UART_MspInit+0x13c>)
 80043de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043e0:	f042 0220 	orr.w	r2, r2, #32
 80043e4:	645a      	str	r2, [r3, #68]	; 0x44
 80043e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e8:	f003 0320 	and.w	r3, r3, #32
 80043ec:	9304      	str	r3, [sp, #16]
 80043ee:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80043f0:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80043f4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f6:	2302      	movs	r3, #2
 80043f8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043fa:	2301      	movs	r3, #1
 80043fc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043fe:	2303      	movs	r3, #3
 8004400:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004402:	2308      	movs	r3, #8
 8004404:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004406:	a905      	add	r1, sp, #20
 8004408:	480c      	ldr	r0, [pc, #48]	; (800443c <HAL_UART_MspInit+0x148>)
 800440a:	f7fd fa25 	bl	8001858 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800440e:	4622      	mov	r2, r4
 8004410:	4621      	mov	r1, r4
 8004412:	2047      	movs	r0, #71	; 0x47
 8004414:	f7fd f9a2 	bl	800175c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004418:	2047      	movs	r0, #71	; 0x47
 800441a:	f7fd f9d3 	bl	80017c4 <HAL_NVIC_EnableIRQ>
}
 800441e:	e778      	b.n	8004312 <HAL_UART_MspInit+0x1e>
 8004420:	40007800 	.word	0x40007800
 8004424:	40007c00 	.word	0x40007c00
 8004428:	40011000 	.word	0x40011000
 800442c:	40011400 	.word	0x40011400
 8004430:	40023800 	.word	0x40023800
 8004434:	40021000 	.word	0x40021000
 8004438:	40020400 	.word	0x40020400
 800443c:	40021800 	.word	0x40021800

08004440 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004440:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004478 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004444:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004446:	e003      	b.n	8004450 <LoopCopyDataInit>

08004448 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004448:	4b0c      	ldr	r3, [pc, #48]	; (800447c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800444a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800444c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800444e:	3104      	adds	r1, #4

08004450 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004450:	480b      	ldr	r0, [pc, #44]	; (8004480 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004452:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004454:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004456:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004458:	d3f6      	bcc.n	8004448 <CopyDataInit>
  ldr  r2, =_sbss
 800445a:	4a0b      	ldr	r2, [pc, #44]	; (8004488 <LoopFillZerobss+0x24>)

  b  LoopFillZerobss
 800445c:	e002      	b.n	8004464 <LoopFillZerobss>

0800445e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800445e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004460:	f842 3b04 	str.w	r3, [r2], #4

08004464 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004464:	4b09      	ldr	r3, [pc, #36]	; (800448c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004466:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004468:	d3f9      	bcc.n	800445e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800446a:	f7ff fd59 	bl	8003f20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800446e:	f000 f817 	bl	80044a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004472:	f7ff f9e5 	bl	8003840 <main>
  bx  lr    
 8004476:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004478:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800447c:	080068e0 	.word	0x080068e0
  ldr  r0, =_sdata
 8004480:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004484:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8004488:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 800448c:	200006c4 	.word	0x200006c4

08004490 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004490:	e7fe      	b.n	8004490 <ADC_IRQHandler>
	...

08004494 <__errno>:
 8004494:	4b01      	ldr	r3, [pc, #4]	; (800449c <__errno+0x8>)
 8004496:	6818      	ldr	r0, [r3, #0]
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	2000000c 	.word	0x2000000c

080044a0 <__libc_init_array>:
 80044a0:	b570      	push	{r4, r5, r6, lr}
 80044a2:	4e0d      	ldr	r6, [pc, #52]	; (80044d8 <__libc_init_array+0x38>)
 80044a4:	4c0d      	ldr	r4, [pc, #52]	; (80044dc <__libc_init_array+0x3c>)
 80044a6:	1ba4      	subs	r4, r4, r6
 80044a8:	10a4      	asrs	r4, r4, #2
 80044aa:	2500      	movs	r5, #0
 80044ac:	42a5      	cmp	r5, r4
 80044ae:	d109      	bne.n	80044c4 <__libc_init_array+0x24>
 80044b0:	4e0b      	ldr	r6, [pc, #44]	; (80044e0 <__libc_init_array+0x40>)
 80044b2:	4c0c      	ldr	r4, [pc, #48]	; (80044e4 <__libc_init_array+0x44>)
 80044b4:	f002 f882 	bl	80065bc <_init>
 80044b8:	1ba4      	subs	r4, r4, r6
 80044ba:	10a4      	asrs	r4, r4, #2
 80044bc:	2500      	movs	r5, #0
 80044be:	42a5      	cmp	r5, r4
 80044c0:	d105      	bne.n	80044ce <__libc_init_array+0x2e>
 80044c2:	bd70      	pop	{r4, r5, r6, pc}
 80044c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044c8:	4798      	blx	r3
 80044ca:	3501      	adds	r5, #1
 80044cc:	e7ee      	b.n	80044ac <__libc_init_array+0xc>
 80044ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044d2:	4798      	blx	r3
 80044d4:	3501      	adds	r5, #1
 80044d6:	e7f2      	b.n	80044be <__libc_init_array+0x1e>
 80044d8:	080068d8 	.word	0x080068d8
 80044dc:	080068d8 	.word	0x080068d8
 80044e0:	080068d8 	.word	0x080068d8
 80044e4:	080068dc 	.word	0x080068dc

080044e8 <memset>:
 80044e8:	4402      	add	r2, r0
 80044ea:	4603      	mov	r3, r0
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d100      	bne.n	80044f2 <memset+0xa>
 80044f0:	4770      	bx	lr
 80044f2:	f803 1b01 	strb.w	r1, [r3], #1
 80044f6:	e7f9      	b.n	80044ec <memset+0x4>

080044f8 <__cvt>:
 80044f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044fc:	ec55 4b10 	vmov	r4, r5, d0
 8004500:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004502:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004506:	2d00      	cmp	r5, #0
 8004508:	460e      	mov	r6, r1
 800450a:	4691      	mov	r9, r2
 800450c:	4619      	mov	r1, r3
 800450e:	bfb8      	it	lt
 8004510:	4622      	movlt	r2, r4
 8004512:	462b      	mov	r3, r5
 8004514:	f027 0720 	bic.w	r7, r7, #32
 8004518:	bfbb      	ittet	lt
 800451a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800451e:	461d      	movlt	r5, r3
 8004520:	2300      	movge	r3, #0
 8004522:	232d      	movlt	r3, #45	; 0x2d
 8004524:	bfb8      	it	lt
 8004526:	4614      	movlt	r4, r2
 8004528:	2f46      	cmp	r7, #70	; 0x46
 800452a:	700b      	strb	r3, [r1, #0]
 800452c:	d004      	beq.n	8004538 <__cvt+0x40>
 800452e:	2f45      	cmp	r7, #69	; 0x45
 8004530:	d100      	bne.n	8004534 <__cvt+0x3c>
 8004532:	3601      	adds	r6, #1
 8004534:	2102      	movs	r1, #2
 8004536:	e000      	b.n	800453a <__cvt+0x42>
 8004538:	2103      	movs	r1, #3
 800453a:	ab03      	add	r3, sp, #12
 800453c:	9301      	str	r3, [sp, #4]
 800453e:	ab02      	add	r3, sp, #8
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	4632      	mov	r2, r6
 8004544:	4653      	mov	r3, sl
 8004546:	ec45 4b10 	vmov	d0, r4, r5
 800454a:	f000 fc61 	bl	8004e10 <_dtoa_r>
 800454e:	2f47      	cmp	r7, #71	; 0x47
 8004550:	4680      	mov	r8, r0
 8004552:	d102      	bne.n	800455a <__cvt+0x62>
 8004554:	f019 0f01 	tst.w	r9, #1
 8004558:	d026      	beq.n	80045a8 <__cvt+0xb0>
 800455a:	2f46      	cmp	r7, #70	; 0x46
 800455c:	eb08 0906 	add.w	r9, r8, r6
 8004560:	d111      	bne.n	8004586 <__cvt+0x8e>
 8004562:	f898 3000 	ldrb.w	r3, [r8]
 8004566:	2b30      	cmp	r3, #48	; 0x30
 8004568:	d10a      	bne.n	8004580 <__cvt+0x88>
 800456a:	2200      	movs	r2, #0
 800456c:	2300      	movs	r3, #0
 800456e:	4620      	mov	r0, r4
 8004570:	4629      	mov	r1, r5
 8004572:	f7fc fa69 	bl	8000a48 <__aeabi_dcmpeq>
 8004576:	b918      	cbnz	r0, 8004580 <__cvt+0x88>
 8004578:	f1c6 0601 	rsb	r6, r6, #1
 800457c:	f8ca 6000 	str.w	r6, [sl]
 8004580:	f8da 3000 	ldr.w	r3, [sl]
 8004584:	4499      	add	r9, r3
 8004586:	2200      	movs	r2, #0
 8004588:	2300      	movs	r3, #0
 800458a:	4620      	mov	r0, r4
 800458c:	4629      	mov	r1, r5
 800458e:	f7fc fa5b 	bl	8000a48 <__aeabi_dcmpeq>
 8004592:	b938      	cbnz	r0, 80045a4 <__cvt+0xac>
 8004594:	2230      	movs	r2, #48	; 0x30
 8004596:	9b03      	ldr	r3, [sp, #12]
 8004598:	454b      	cmp	r3, r9
 800459a:	d205      	bcs.n	80045a8 <__cvt+0xb0>
 800459c:	1c59      	adds	r1, r3, #1
 800459e:	9103      	str	r1, [sp, #12]
 80045a0:	701a      	strb	r2, [r3, #0]
 80045a2:	e7f8      	b.n	8004596 <__cvt+0x9e>
 80045a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80045a8:	9b03      	ldr	r3, [sp, #12]
 80045aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80045ac:	eba3 0308 	sub.w	r3, r3, r8
 80045b0:	4640      	mov	r0, r8
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	b004      	add	sp, #16
 80045b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080045ba <__exponent>:
 80045ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045bc:	2900      	cmp	r1, #0
 80045be:	4604      	mov	r4, r0
 80045c0:	bfba      	itte	lt
 80045c2:	4249      	neglt	r1, r1
 80045c4:	232d      	movlt	r3, #45	; 0x2d
 80045c6:	232b      	movge	r3, #43	; 0x2b
 80045c8:	2909      	cmp	r1, #9
 80045ca:	f804 2b02 	strb.w	r2, [r4], #2
 80045ce:	7043      	strb	r3, [r0, #1]
 80045d0:	dd20      	ble.n	8004614 <__exponent+0x5a>
 80045d2:	f10d 0307 	add.w	r3, sp, #7
 80045d6:	461f      	mov	r7, r3
 80045d8:	260a      	movs	r6, #10
 80045da:	fb91 f5f6 	sdiv	r5, r1, r6
 80045de:	fb06 1115 	mls	r1, r6, r5, r1
 80045e2:	3130      	adds	r1, #48	; 0x30
 80045e4:	2d09      	cmp	r5, #9
 80045e6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80045ea:	f103 32ff 	add.w	r2, r3, #4294967295
 80045ee:	4629      	mov	r1, r5
 80045f0:	dc09      	bgt.n	8004606 <__exponent+0x4c>
 80045f2:	3130      	adds	r1, #48	; 0x30
 80045f4:	3b02      	subs	r3, #2
 80045f6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80045fa:	42bb      	cmp	r3, r7
 80045fc:	4622      	mov	r2, r4
 80045fe:	d304      	bcc.n	800460a <__exponent+0x50>
 8004600:	1a10      	subs	r0, r2, r0
 8004602:	b003      	add	sp, #12
 8004604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004606:	4613      	mov	r3, r2
 8004608:	e7e7      	b.n	80045da <__exponent+0x20>
 800460a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800460e:	f804 2b01 	strb.w	r2, [r4], #1
 8004612:	e7f2      	b.n	80045fa <__exponent+0x40>
 8004614:	2330      	movs	r3, #48	; 0x30
 8004616:	4419      	add	r1, r3
 8004618:	7083      	strb	r3, [r0, #2]
 800461a:	1d02      	adds	r2, r0, #4
 800461c:	70c1      	strb	r1, [r0, #3]
 800461e:	e7ef      	b.n	8004600 <__exponent+0x46>

08004620 <_printf_float>:
 8004620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004624:	b08d      	sub	sp, #52	; 0x34
 8004626:	460c      	mov	r4, r1
 8004628:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800462c:	4616      	mov	r6, r2
 800462e:	461f      	mov	r7, r3
 8004630:	4605      	mov	r5, r0
 8004632:	f001 fb1f 	bl	8005c74 <_localeconv_r>
 8004636:	6803      	ldr	r3, [r0, #0]
 8004638:	9304      	str	r3, [sp, #16]
 800463a:	4618      	mov	r0, r3
 800463c:	f7fb fdd8 	bl	80001f0 <strlen>
 8004640:	2300      	movs	r3, #0
 8004642:	930a      	str	r3, [sp, #40]	; 0x28
 8004644:	f8d8 3000 	ldr.w	r3, [r8]
 8004648:	9005      	str	r0, [sp, #20]
 800464a:	3307      	adds	r3, #7
 800464c:	f023 0307 	bic.w	r3, r3, #7
 8004650:	f103 0208 	add.w	r2, r3, #8
 8004654:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004658:	f8d4 b000 	ldr.w	fp, [r4]
 800465c:	f8c8 2000 	str.w	r2, [r8]
 8004660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004664:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004668:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800466c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004670:	9307      	str	r3, [sp, #28]
 8004672:	f8cd 8018 	str.w	r8, [sp, #24]
 8004676:	f04f 32ff 	mov.w	r2, #4294967295
 800467a:	4ba7      	ldr	r3, [pc, #668]	; (8004918 <_printf_float+0x2f8>)
 800467c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004680:	f7fc fa14 	bl	8000aac <__aeabi_dcmpun>
 8004684:	bb70      	cbnz	r0, 80046e4 <_printf_float+0xc4>
 8004686:	f04f 32ff 	mov.w	r2, #4294967295
 800468a:	4ba3      	ldr	r3, [pc, #652]	; (8004918 <_printf_float+0x2f8>)
 800468c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004690:	f7fc f9ee 	bl	8000a70 <__aeabi_dcmple>
 8004694:	bb30      	cbnz	r0, 80046e4 <_printf_float+0xc4>
 8004696:	2200      	movs	r2, #0
 8004698:	2300      	movs	r3, #0
 800469a:	4640      	mov	r0, r8
 800469c:	4649      	mov	r1, r9
 800469e:	f7fc f9dd 	bl	8000a5c <__aeabi_dcmplt>
 80046a2:	b110      	cbz	r0, 80046aa <_printf_float+0x8a>
 80046a4:	232d      	movs	r3, #45	; 0x2d
 80046a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046aa:	4a9c      	ldr	r2, [pc, #624]	; (800491c <_printf_float+0x2fc>)
 80046ac:	4b9c      	ldr	r3, [pc, #624]	; (8004920 <_printf_float+0x300>)
 80046ae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80046b2:	bf8c      	ite	hi
 80046b4:	4690      	movhi	r8, r2
 80046b6:	4698      	movls	r8, r3
 80046b8:	2303      	movs	r3, #3
 80046ba:	f02b 0204 	bic.w	r2, fp, #4
 80046be:	6123      	str	r3, [r4, #16]
 80046c0:	6022      	str	r2, [r4, #0]
 80046c2:	f04f 0900 	mov.w	r9, #0
 80046c6:	9700      	str	r7, [sp, #0]
 80046c8:	4633      	mov	r3, r6
 80046ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80046cc:	4621      	mov	r1, r4
 80046ce:	4628      	mov	r0, r5
 80046d0:	f000 f9e6 	bl	8004aa0 <_printf_common>
 80046d4:	3001      	adds	r0, #1
 80046d6:	f040 808d 	bne.w	80047f4 <_printf_float+0x1d4>
 80046da:	f04f 30ff 	mov.w	r0, #4294967295
 80046de:	b00d      	add	sp, #52	; 0x34
 80046e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046e4:	4642      	mov	r2, r8
 80046e6:	464b      	mov	r3, r9
 80046e8:	4640      	mov	r0, r8
 80046ea:	4649      	mov	r1, r9
 80046ec:	f7fc f9de 	bl	8000aac <__aeabi_dcmpun>
 80046f0:	b110      	cbz	r0, 80046f8 <_printf_float+0xd8>
 80046f2:	4a8c      	ldr	r2, [pc, #560]	; (8004924 <_printf_float+0x304>)
 80046f4:	4b8c      	ldr	r3, [pc, #560]	; (8004928 <_printf_float+0x308>)
 80046f6:	e7da      	b.n	80046ae <_printf_float+0x8e>
 80046f8:	6861      	ldr	r1, [r4, #4]
 80046fa:	1c4b      	adds	r3, r1, #1
 80046fc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004700:	a80a      	add	r0, sp, #40	; 0x28
 8004702:	d13e      	bne.n	8004782 <_printf_float+0x162>
 8004704:	2306      	movs	r3, #6
 8004706:	6063      	str	r3, [r4, #4]
 8004708:	2300      	movs	r3, #0
 800470a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800470e:	ab09      	add	r3, sp, #36	; 0x24
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	ec49 8b10 	vmov	d0, r8, r9
 8004716:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800471a:	6022      	str	r2, [r4, #0]
 800471c:	f8cd a004 	str.w	sl, [sp, #4]
 8004720:	6861      	ldr	r1, [r4, #4]
 8004722:	4628      	mov	r0, r5
 8004724:	f7ff fee8 	bl	80044f8 <__cvt>
 8004728:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800472c:	2b47      	cmp	r3, #71	; 0x47
 800472e:	4680      	mov	r8, r0
 8004730:	d109      	bne.n	8004746 <_printf_float+0x126>
 8004732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004734:	1cd8      	adds	r0, r3, #3
 8004736:	db02      	blt.n	800473e <_printf_float+0x11e>
 8004738:	6862      	ldr	r2, [r4, #4]
 800473a:	4293      	cmp	r3, r2
 800473c:	dd47      	ble.n	80047ce <_printf_float+0x1ae>
 800473e:	f1aa 0a02 	sub.w	sl, sl, #2
 8004742:	fa5f fa8a 	uxtb.w	sl, sl
 8004746:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800474a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800474c:	d824      	bhi.n	8004798 <_printf_float+0x178>
 800474e:	3901      	subs	r1, #1
 8004750:	4652      	mov	r2, sl
 8004752:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004756:	9109      	str	r1, [sp, #36]	; 0x24
 8004758:	f7ff ff2f 	bl	80045ba <__exponent>
 800475c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800475e:	1813      	adds	r3, r2, r0
 8004760:	2a01      	cmp	r2, #1
 8004762:	4681      	mov	r9, r0
 8004764:	6123      	str	r3, [r4, #16]
 8004766:	dc02      	bgt.n	800476e <_printf_float+0x14e>
 8004768:	6822      	ldr	r2, [r4, #0]
 800476a:	07d1      	lsls	r1, r2, #31
 800476c:	d501      	bpl.n	8004772 <_printf_float+0x152>
 800476e:	3301      	adds	r3, #1
 8004770:	6123      	str	r3, [r4, #16]
 8004772:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0a5      	beq.n	80046c6 <_printf_float+0xa6>
 800477a:	232d      	movs	r3, #45	; 0x2d
 800477c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004780:	e7a1      	b.n	80046c6 <_printf_float+0xa6>
 8004782:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004786:	f000 8177 	beq.w	8004a78 <_printf_float+0x458>
 800478a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800478e:	d1bb      	bne.n	8004708 <_printf_float+0xe8>
 8004790:	2900      	cmp	r1, #0
 8004792:	d1b9      	bne.n	8004708 <_printf_float+0xe8>
 8004794:	2301      	movs	r3, #1
 8004796:	e7b6      	b.n	8004706 <_printf_float+0xe6>
 8004798:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800479c:	d119      	bne.n	80047d2 <_printf_float+0x1b2>
 800479e:	2900      	cmp	r1, #0
 80047a0:	6863      	ldr	r3, [r4, #4]
 80047a2:	dd0c      	ble.n	80047be <_printf_float+0x19e>
 80047a4:	6121      	str	r1, [r4, #16]
 80047a6:	b913      	cbnz	r3, 80047ae <_printf_float+0x18e>
 80047a8:	6822      	ldr	r2, [r4, #0]
 80047aa:	07d2      	lsls	r2, r2, #31
 80047ac:	d502      	bpl.n	80047b4 <_printf_float+0x194>
 80047ae:	3301      	adds	r3, #1
 80047b0:	440b      	add	r3, r1
 80047b2:	6123      	str	r3, [r4, #16]
 80047b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047b6:	65a3      	str	r3, [r4, #88]	; 0x58
 80047b8:	f04f 0900 	mov.w	r9, #0
 80047bc:	e7d9      	b.n	8004772 <_printf_float+0x152>
 80047be:	b913      	cbnz	r3, 80047c6 <_printf_float+0x1a6>
 80047c0:	6822      	ldr	r2, [r4, #0]
 80047c2:	07d0      	lsls	r0, r2, #31
 80047c4:	d501      	bpl.n	80047ca <_printf_float+0x1aa>
 80047c6:	3302      	adds	r3, #2
 80047c8:	e7f3      	b.n	80047b2 <_printf_float+0x192>
 80047ca:	2301      	movs	r3, #1
 80047cc:	e7f1      	b.n	80047b2 <_printf_float+0x192>
 80047ce:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80047d2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80047d6:	4293      	cmp	r3, r2
 80047d8:	db05      	blt.n	80047e6 <_printf_float+0x1c6>
 80047da:	6822      	ldr	r2, [r4, #0]
 80047dc:	6123      	str	r3, [r4, #16]
 80047de:	07d1      	lsls	r1, r2, #31
 80047e0:	d5e8      	bpl.n	80047b4 <_printf_float+0x194>
 80047e2:	3301      	adds	r3, #1
 80047e4:	e7e5      	b.n	80047b2 <_printf_float+0x192>
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	bfd4      	ite	le
 80047ea:	f1c3 0302 	rsble	r3, r3, #2
 80047ee:	2301      	movgt	r3, #1
 80047f0:	4413      	add	r3, r2
 80047f2:	e7de      	b.n	80047b2 <_printf_float+0x192>
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	055a      	lsls	r2, r3, #21
 80047f8:	d407      	bmi.n	800480a <_printf_float+0x1ea>
 80047fa:	6923      	ldr	r3, [r4, #16]
 80047fc:	4642      	mov	r2, r8
 80047fe:	4631      	mov	r1, r6
 8004800:	4628      	mov	r0, r5
 8004802:	47b8      	blx	r7
 8004804:	3001      	adds	r0, #1
 8004806:	d12b      	bne.n	8004860 <_printf_float+0x240>
 8004808:	e767      	b.n	80046da <_printf_float+0xba>
 800480a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800480e:	f240 80dc 	bls.w	80049ca <_printf_float+0x3aa>
 8004812:	2200      	movs	r2, #0
 8004814:	2300      	movs	r3, #0
 8004816:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800481a:	f7fc f915 	bl	8000a48 <__aeabi_dcmpeq>
 800481e:	2800      	cmp	r0, #0
 8004820:	d033      	beq.n	800488a <_printf_float+0x26a>
 8004822:	2301      	movs	r3, #1
 8004824:	4a41      	ldr	r2, [pc, #260]	; (800492c <_printf_float+0x30c>)
 8004826:	4631      	mov	r1, r6
 8004828:	4628      	mov	r0, r5
 800482a:	47b8      	blx	r7
 800482c:	3001      	adds	r0, #1
 800482e:	f43f af54 	beq.w	80046da <_printf_float+0xba>
 8004832:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004836:	429a      	cmp	r2, r3
 8004838:	db02      	blt.n	8004840 <_printf_float+0x220>
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	07d8      	lsls	r0, r3, #31
 800483e:	d50f      	bpl.n	8004860 <_printf_float+0x240>
 8004840:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004844:	4631      	mov	r1, r6
 8004846:	4628      	mov	r0, r5
 8004848:	47b8      	blx	r7
 800484a:	3001      	adds	r0, #1
 800484c:	f43f af45 	beq.w	80046da <_printf_float+0xba>
 8004850:	f04f 0800 	mov.w	r8, #0
 8004854:	f104 091a 	add.w	r9, r4, #26
 8004858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800485a:	3b01      	subs	r3, #1
 800485c:	4543      	cmp	r3, r8
 800485e:	dc09      	bgt.n	8004874 <_printf_float+0x254>
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	079b      	lsls	r3, r3, #30
 8004864:	f100 8103 	bmi.w	8004a6e <_printf_float+0x44e>
 8004868:	68e0      	ldr	r0, [r4, #12]
 800486a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800486c:	4298      	cmp	r0, r3
 800486e:	bfb8      	it	lt
 8004870:	4618      	movlt	r0, r3
 8004872:	e734      	b.n	80046de <_printf_float+0xbe>
 8004874:	2301      	movs	r3, #1
 8004876:	464a      	mov	r2, r9
 8004878:	4631      	mov	r1, r6
 800487a:	4628      	mov	r0, r5
 800487c:	47b8      	blx	r7
 800487e:	3001      	adds	r0, #1
 8004880:	f43f af2b 	beq.w	80046da <_printf_float+0xba>
 8004884:	f108 0801 	add.w	r8, r8, #1
 8004888:	e7e6      	b.n	8004858 <_printf_float+0x238>
 800488a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800488c:	2b00      	cmp	r3, #0
 800488e:	dc2b      	bgt.n	80048e8 <_printf_float+0x2c8>
 8004890:	2301      	movs	r3, #1
 8004892:	4a26      	ldr	r2, [pc, #152]	; (800492c <_printf_float+0x30c>)
 8004894:	4631      	mov	r1, r6
 8004896:	4628      	mov	r0, r5
 8004898:	47b8      	blx	r7
 800489a:	3001      	adds	r0, #1
 800489c:	f43f af1d 	beq.w	80046da <_printf_float+0xba>
 80048a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048a2:	b923      	cbnz	r3, 80048ae <_printf_float+0x28e>
 80048a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048a6:	b913      	cbnz	r3, 80048ae <_printf_float+0x28e>
 80048a8:	6823      	ldr	r3, [r4, #0]
 80048aa:	07d9      	lsls	r1, r3, #31
 80048ac:	d5d8      	bpl.n	8004860 <_printf_float+0x240>
 80048ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048b2:	4631      	mov	r1, r6
 80048b4:	4628      	mov	r0, r5
 80048b6:	47b8      	blx	r7
 80048b8:	3001      	adds	r0, #1
 80048ba:	f43f af0e 	beq.w	80046da <_printf_float+0xba>
 80048be:	f04f 0900 	mov.w	r9, #0
 80048c2:	f104 0a1a 	add.w	sl, r4, #26
 80048c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048c8:	425b      	negs	r3, r3
 80048ca:	454b      	cmp	r3, r9
 80048cc:	dc01      	bgt.n	80048d2 <_printf_float+0x2b2>
 80048ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048d0:	e794      	b.n	80047fc <_printf_float+0x1dc>
 80048d2:	2301      	movs	r3, #1
 80048d4:	4652      	mov	r2, sl
 80048d6:	4631      	mov	r1, r6
 80048d8:	4628      	mov	r0, r5
 80048da:	47b8      	blx	r7
 80048dc:	3001      	adds	r0, #1
 80048de:	f43f aefc 	beq.w	80046da <_printf_float+0xba>
 80048e2:	f109 0901 	add.w	r9, r9, #1
 80048e6:	e7ee      	b.n	80048c6 <_printf_float+0x2a6>
 80048e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048ec:	429a      	cmp	r2, r3
 80048ee:	bfa8      	it	ge
 80048f0:	461a      	movge	r2, r3
 80048f2:	2a00      	cmp	r2, #0
 80048f4:	4691      	mov	r9, r2
 80048f6:	dd07      	ble.n	8004908 <_printf_float+0x2e8>
 80048f8:	4613      	mov	r3, r2
 80048fa:	4631      	mov	r1, r6
 80048fc:	4642      	mov	r2, r8
 80048fe:	4628      	mov	r0, r5
 8004900:	47b8      	blx	r7
 8004902:	3001      	adds	r0, #1
 8004904:	f43f aee9 	beq.w	80046da <_printf_float+0xba>
 8004908:	f104 031a 	add.w	r3, r4, #26
 800490c:	f04f 0b00 	mov.w	fp, #0
 8004910:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004914:	9306      	str	r3, [sp, #24]
 8004916:	e015      	b.n	8004944 <_printf_float+0x324>
 8004918:	7fefffff 	.word	0x7fefffff
 800491c:	08006648 	.word	0x08006648
 8004920:	08006644 	.word	0x08006644
 8004924:	08006650 	.word	0x08006650
 8004928:	0800664c 	.word	0x0800664c
 800492c:	08006654 	.word	0x08006654
 8004930:	2301      	movs	r3, #1
 8004932:	9a06      	ldr	r2, [sp, #24]
 8004934:	4631      	mov	r1, r6
 8004936:	4628      	mov	r0, r5
 8004938:	47b8      	blx	r7
 800493a:	3001      	adds	r0, #1
 800493c:	f43f aecd 	beq.w	80046da <_printf_float+0xba>
 8004940:	f10b 0b01 	add.w	fp, fp, #1
 8004944:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004948:	ebaa 0309 	sub.w	r3, sl, r9
 800494c:	455b      	cmp	r3, fp
 800494e:	dcef      	bgt.n	8004930 <_printf_float+0x310>
 8004950:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004954:	429a      	cmp	r2, r3
 8004956:	44d0      	add	r8, sl
 8004958:	db15      	blt.n	8004986 <_printf_float+0x366>
 800495a:	6823      	ldr	r3, [r4, #0]
 800495c:	07da      	lsls	r2, r3, #31
 800495e:	d412      	bmi.n	8004986 <_printf_float+0x366>
 8004960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004962:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004964:	eba3 020a 	sub.w	r2, r3, sl
 8004968:	eba3 0a01 	sub.w	sl, r3, r1
 800496c:	4592      	cmp	sl, r2
 800496e:	bfa8      	it	ge
 8004970:	4692      	movge	sl, r2
 8004972:	f1ba 0f00 	cmp.w	sl, #0
 8004976:	dc0e      	bgt.n	8004996 <_printf_float+0x376>
 8004978:	f04f 0800 	mov.w	r8, #0
 800497c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004980:	f104 091a 	add.w	r9, r4, #26
 8004984:	e019      	b.n	80049ba <_printf_float+0x39a>
 8004986:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800498a:	4631      	mov	r1, r6
 800498c:	4628      	mov	r0, r5
 800498e:	47b8      	blx	r7
 8004990:	3001      	adds	r0, #1
 8004992:	d1e5      	bne.n	8004960 <_printf_float+0x340>
 8004994:	e6a1      	b.n	80046da <_printf_float+0xba>
 8004996:	4653      	mov	r3, sl
 8004998:	4642      	mov	r2, r8
 800499a:	4631      	mov	r1, r6
 800499c:	4628      	mov	r0, r5
 800499e:	47b8      	blx	r7
 80049a0:	3001      	adds	r0, #1
 80049a2:	d1e9      	bne.n	8004978 <_printf_float+0x358>
 80049a4:	e699      	b.n	80046da <_printf_float+0xba>
 80049a6:	2301      	movs	r3, #1
 80049a8:	464a      	mov	r2, r9
 80049aa:	4631      	mov	r1, r6
 80049ac:	4628      	mov	r0, r5
 80049ae:	47b8      	blx	r7
 80049b0:	3001      	adds	r0, #1
 80049b2:	f43f ae92 	beq.w	80046da <_printf_float+0xba>
 80049b6:	f108 0801 	add.w	r8, r8, #1
 80049ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049be:	1a9b      	subs	r3, r3, r2
 80049c0:	eba3 030a 	sub.w	r3, r3, sl
 80049c4:	4543      	cmp	r3, r8
 80049c6:	dcee      	bgt.n	80049a6 <_printf_float+0x386>
 80049c8:	e74a      	b.n	8004860 <_printf_float+0x240>
 80049ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049cc:	2a01      	cmp	r2, #1
 80049ce:	dc01      	bgt.n	80049d4 <_printf_float+0x3b4>
 80049d0:	07db      	lsls	r3, r3, #31
 80049d2:	d53a      	bpl.n	8004a4a <_printf_float+0x42a>
 80049d4:	2301      	movs	r3, #1
 80049d6:	4642      	mov	r2, r8
 80049d8:	4631      	mov	r1, r6
 80049da:	4628      	mov	r0, r5
 80049dc:	47b8      	blx	r7
 80049de:	3001      	adds	r0, #1
 80049e0:	f43f ae7b 	beq.w	80046da <_printf_float+0xba>
 80049e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049e8:	4631      	mov	r1, r6
 80049ea:	4628      	mov	r0, r5
 80049ec:	47b8      	blx	r7
 80049ee:	3001      	adds	r0, #1
 80049f0:	f108 0801 	add.w	r8, r8, #1
 80049f4:	f43f ae71 	beq.w	80046da <_printf_float+0xba>
 80049f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049fa:	2200      	movs	r2, #0
 80049fc:	f103 3aff 	add.w	sl, r3, #4294967295
 8004a00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a04:	2300      	movs	r3, #0
 8004a06:	f7fc f81f 	bl	8000a48 <__aeabi_dcmpeq>
 8004a0a:	b9c8      	cbnz	r0, 8004a40 <_printf_float+0x420>
 8004a0c:	4653      	mov	r3, sl
 8004a0e:	4642      	mov	r2, r8
 8004a10:	4631      	mov	r1, r6
 8004a12:	4628      	mov	r0, r5
 8004a14:	47b8      	blx	r7
 8004a16:	3001      	adds	r0, #1
 8004a18:	d10e      	bne.n	8004a38 <_printf_float+0x418>
 8004a1a:	e65e      	b.n	80046da <_printf_float+0xba>
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	4652      	mov	r2, sl
 8004a20:	4631      	mov	r1, r6
 8004a22:	4628      	mov	r0, r5
 8004a24:	47b8      	blx	r7
 8004a26:	3001      	adds	r0, #1
 8004a28:	f43f ae57 	beq.w	80046da <_printf_float+0xba>
 8004a2c:	f108 0801 	add.w	r8, r8, #1
 8004a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a32:	3b01      	subs	r3, #1
 8004a34:	4543      	cmp	r3, r8
 8004a36:	dcf1      	bgt.n	8004a1c <_printf_float+0x3fc>
 8004a38:	464b      	mov	r3, r9
 8004a3a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004a3e:	e6de      	b.n	80047fe <_printf_float+0x1de>
 8004a40:	f04f 0800 	mov.w	r8, #0
 8004a44:	f104 0a1a 	add.w	sl, r4, #26
 8004a48:	e7f2      	b.n	8004a30 <_printf_float+0x410>
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e7df      	b.n	8004a0e <_printf_float+0x3ee>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	464a      	mov	r2, r9
 8004a52:	4631      	mov	r1, r6
 8004a54:	4628      	mov	r0, r5
 8004a56:	47b8      	blx	r7
 8004a58:	3001      	adds	r0, #1
 8004a5a:	f43f ae3e 	beq.w	80046da <_printf_float+0xba>
 8004a5e:	f108 0801 	add.w	r8, r8, #1
 8004a62:	68e3      	ldr	r3, [r4, #12]
 8004a64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a66:	1a9b      	subs	r3, r3, r2
 8004a68:	4543      	cmp	r3, r8
 8004a6a:	dcf0      	bgt.n	8004a4e <_printf_float+0x42e>
 8004a6c:	e6fc      	b.n	8004868 <_printf_float+0x248>
 8004a6e:	f04f 0800 	mov.w	r8, #0
 8004a72:	f104 0919 	add.w	r9, r4, #25
 8004a76:	e7f4      	b.n	8004a62 <_printf_float+0x442>
 8004a78:	2900      	cmp	r1, #0
 8004a7a:	f43f ae8b 	beq.w	8004794 <_printf_float+0x174>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004a84:	ab09      	add	r3, sp, #36	; 0x24
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	ec49 8b10 	vmov	d0, r8, r9
 8004a8c:	6022      	str	r2, [r4, #0]
 8004a8e:	f8cd a004 	str.w	sl, [sp, #4]
 8004a92:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004a96:	4628      	mov	r0, r5
 8004a98:	f7ff fd2e 	bl	80044f8 <__cvt>
 8004a9c:	4680      	mov	r8, r0
 8004a9e:	e648      	b.n	8004732 <_printf_float+0x112>

08004aa0 <_printf_common>:
 8004aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa4:	4691      	mov	r9, r2
 8004aa6:	461f      	mov	r7, r3
 8004aa8:	688a      	ldr	r2, [r1, #8]
 8004aaa:	690b      	ldr	r3, [r1, #16]
 8004aac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	bfb8      	it	lt
 8004ab4:	4613      	movlt	r3, r2
 8004ab6:	f8c9 3000 	str.w	r3, [r9]
 8004aba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004abe:	4606      	mov	r6, r0
 8004ac0:	460c      	mov	r4, r1
 8004ac2:	b112      	cbz	r2, 8004aca <_printf_common+0x2a>
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	f8c9 3000 	str.w	r3, [r9]
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	0699      	lsls	r1, r3, #26
 8004ace:	bf42      	ittt	mi
 8004ad0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004ad4:	3302      	addmi	r3, #2
 8004ad6:	f8c9 3000 	strmi.w	r3, [r9]
 8004ada:	6825      	ldr	r5, [r4, #0]
 8004adc:	f015 0506 	ands.w	r5, r5, #6
 8004ae0:	d107      	bne.n	8004af2 <_printf_common+0x52>
 8004ae2:	f104 0a19 	add.w	sl, r4, #25
 8004ae6:	68e3      	ldr	r3, [r4, #12]
 8004ae8:	f8d9 2000 	ldr.w	r2, [r9]
 8004aec:	1a9b      	subs	r3, r3, r2
 8004aee:	42ab      	cmp	r3, r5
 8004af0:	dc28      	bgt.n	8004b44 <_printf_common+0xa4>
 8004af2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004af6:	6822      	ldr	r2, [r4, #0]
 8004af8:	3300      	adds	r3, #0
 8004afa:	bf18      	it	ne
 8004afc:	2301      	movne	r3, #1
 8004afe:	0692      	lsls	r2, r2, #26
 8004b00:	d42d      	bmi.n	8004b5e <_printf_common+0xbe>
 8004b02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b06:	4639      	mov	r1, r7
 8004b08:	4630      	mov	r0, r6
 8004b0a:	47c0      	blx	r8
 8004b0c:	3001      	adds	r0, #1
 8004b0e:	d020      	beq.n	8004b52 <_printf_common+0xb2>
 8004b10:	6823      	ldr	r3, [r4, #0]
 8004b12:	68e5      	ldr	r5, [r4, #12]
 8004b14:	f8d9 2000 	ldr.w	r2, [r9]
 8004b18:	f003 0306 	and.w	r3, r3, #6
 8004b1c:	2b04      	cmp	r3, #4
 8004b1e:	bf08      	it	eq
 8004b20:	1aad      	subeq	r5, r5, r2
 8004b22:	68a3      	ldr	r3, [r4, #8]
 8004b24:	6922      	ldr	r2, [r4, #16]
 8004b26:	bf0c      	ite	eq
 8004b28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b2c:	2500      	movne	r5, #0
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	bfc4      	itt	gt
 8004b32:	1a9b      	subgt	r3, r3, r2
 8004b34:	18ed      	addgt	r5, r5, r3
 8004b36:	f04f 0900 	mov.w	r9, #0
 8004b3a:	341a      	adds	r4, #26
 8004b3c:	454d      	cmp	r5, r9
 8004b3e:	d11a      	bne.n	8004b76 <_printf_common+0xd6>
 8004b40:	2000      	movs	r0, #0
 8004b42:	e008      	b.n	8004b56 <_printf_common+0xb6>
 8004b44:	2301      	movs	r3, #1
 8004b46:	4652      	mov	r2, sl
 8004b48:	4639      	mov	r1, r7
 8004b4a:	4630      	mov	r0, r6
 8004b4c:	47c0      	blx	r8
 8004b4e:	3001      	adds	r0, #1
 8004b50:	d103      	bne.n	8004b5a <_printf_common+0xba>
 8004b52:	f04f 30ff 	mov.w	r0, #4294967295
 8004b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b5a:	3501      	adds	r5, #1
 8004b5c:	e7c3      	b.n	8004ae6 <_printf_common+0x46>
 8004b5e:	18e1      	adds	r1, r4, r3
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	2030      	movs	r0, #48	; 0x30
 8004b64:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b68:	4422      	add	r2, r4
 8004b6a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b72:	3302      	adds	r3, #2
 8004b74:	e7c5      	b.n	8004b02 <_printf_common+0x62>
 8004b76:	2301      	movs	r3, #1
 8004b78:	4622      	mov	r2, r4
 8004b7a:	4639      	mov	r1, r7
 8004b7c:	4630      	mov	r0, r6
 8004b7e:	47c0      	blx	r8
 8004b80:	3001      	adds	r0, #1
 8004b82:	d0e6      	beq.n	8004b52 <_printf_common+0xb2>
 8004b84:	f109 0901 	add.w	r9, r9, #1
 8004b88:	e7d8      	b.n	8004b3c <_printf_common+0x9c>

08004b8a <setbuf>:
 8004b8a:	2900      	cmp	r1, #0
 8004b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b90:	bf0c      	ite	eq
 8004b92:	2202      	moveq	r2, #2
 8004b94:	2200      	movne	r2, #0
 8004b96:	f000 b801 	b.w	8004b9c <setvbuf>
	...

08004b9c <setvbuf>:
 8004b9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004ba0:	461d      	mov	r5, r3
 8004ba2:	4b51      	ldr	r3, [pc, #324]	; (8004ce8 <setvbuf+0x14c>)
 8004ba4:	681e      	ldr	r6, [r3, #0]
 8004ba6:	4604      	mov	r4, r0
 8004ba8:	460f      	mov	r7, r1
 8004baa:	4690      	mov	r8, r2
 8004bac:	b126      	cbz	r6, 8004bb8 <setvbuf+0x1c>
 8004bae:	69b3      	ldr	r3, [r6, #24]
 8004bb0:	b913      	cbnz	r3, 8004bb8 <setvbuf+0x1c>
 8004bb2:	4630      	mov	r0, r6
 8004bb4:	f000 ffd4 	bl	8005b60 <__sinit>
 8004bb8:	4b4c      	ldr	r3, [pc, #304]	; (8004cec <setvbuf+0x150>)
 8004bba:	429c      	cmp	r4, r3
 8004bbc:	d152      	bne.n	8004c64 <setvbuf+0xc8>
 8004bbe:	6874      	ldr	r4, [r6, #4]
 8004bc0:	f1b8 0f02 	cmp.w	r8, #2
 8004bc4:	d006      	beq.n	8004bd4 <setvbuf+0x38>
 8004bc6:	f1b8 0f01 	cmp.w	r8, #1
 8004bca:	f200 8089 	bhi.w	8004ce0 <setvbuf+0x144>
 8004bce:	2d00      	cmp	r5, #0
 8004bd0:	f2c0 8086 	blt.w	8004ce0 <setvbuf+0x144>
 8004bd4:	4621      	mov	r1, r4
 8004bd6:	4630      	mov	r0, r6
 8004bd8:	f000 ff58 	bl	8005a8c <_fflush_r>
 8004bdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bde:	b141      	cbz	r1, 8004bf2 <setvbuf+0x56>
 8004be0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004be4:	4299      	cmp	r1, r3
 8004be6:	d002      	beq.n	8004bee <setvbuf+0x52>
 8004be8:	4630      	mov	r0, r6
 8004bea:	f001 fb71 	bl	80062d0 <_free_r>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	6363      	str	r3, [r4, #52]	; 0x34
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61a3      	str	r3, [r4, #24]
 8004bf6:	6063      	str	r3, [r4, #4]
 8004bf8:	89a3      	ldrh	r3, [r4, #12]
 8004bfa:	061b      	lsls	r3, r3, #24
 8004bfc:	d503      	bpl.n	8004c06 <setvbuf+0x6a>
 8004bfe:	6921      	ldr	r1, [r4, #16]
 8004c00:	4630      	mov	r0, r6
 8004c02:	f001 fb65 	bl	80062d0 <_free_r>
 8004c06:	89a3      	ldrh	r3, [r4, #12]
 8004c08:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004c0c:	f023 0303 	bic.w	r3, r3, #3
 8004c10:	f1b8 0f02 	cmp.w	r8, #2
 8004c14:	81a3      	strh	r3, [r4, #12]
 8004c16:	d05d      	beq.n	8004cd4 <setvbuf+0x138>
 8004c18:	ab01      	add	r3, sp, #4
 8004c1a:	466a      	mov	r2, sp
 8004c1c:	4621      	mov	r1, r4
 8004c1e:	4630      	mov	r0, r6
 8004c20:	f001 f836 	bl	8005c90 <__swhatbuf_r>
 8004c24:	89a3      	ldrh	r3, [r4, #12]
 8004c26:	4318      	orrs	r0, r3
 8004c28:	81a0      	strh	r0, [r4, #12]
 8004c2a:	bb2d      	cbnz	r5, 8004c78 <setvbuf+0xdc>
 8004c2c:	9d00      	ldr	r5, [sp, #0]
 8004c2e:	4628      	mov	r0, r5
 8004c30:	f001 f852 	bl	8005cd8 <malloc>
 8004c34:	4607      	mov	r7, r0
 8004c36:	2800      	cmp	r0, #0
 8004c38:	d14e      	bne.n	8004cd8 <setvbuf+0x13c>
 8004c3a:	f8dd 9000 	ldr.w	r9, [sp]
 8004c3e:	45a9      	cmp	r9, r5
 8004c40:	d13c      	bne.n	8004cbc <setvbuf+0x120>
 8004c42:	f04f 30ff 	mov.w	r0, #4294967295
 8004c46:	89a3      	ldrh	r3, [r4, #12]
 8004c48:	f043 0302 	orr.w	r3, r3, #2
 8004c4c:	81a3      	strh	r3, [r4, #12]
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60a3      	str	r3, [r4, #8]
 8004c52:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c56:	6023      	str	r3, [r4, #0]
 8004c58:	6123      	str	r3, [r4, #16]
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	6163      	str	r3, [r4, #20]
 8004c5e:	b003      	add	sp, #12
 8004c60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c64:	4b22      	ldr	r3, [pc, #136]	; (8004cf0 <setvbuf+0x154>)
 8004c66:	429c      	cmp	r4, r3
 8004c68:	d101      	bne.n	8004c6e <setvbuf+0xd2>
 8004c6a:	68b4      	ldr	r4, [r6, #8]
 8004c6c:	e7a8      	b.n	8004bc0 <setvbuf+0x24>
 8004c6e:	4b21      	ldr	r3, [pc, #132]	; (8004cf4 <setvbuf+0x158>)
 8004c70:	429c      	cmp	r4, r3
 8004c72:	bf08      	it	eq
 8004c74:	68f4      	ldreq	r4, [r6, #12]
 8004c76:	e7a3      	b.n	8004bc0 <setvbuf+0x24>
 8004c78:	2f00      	cmp	r7, #0
 8004c7a:	d0d8      	beq.n	8004c2e <setvbuf+0x92>
 8004c7c:	69b3      	ldr	r3, [r6, #24]
 8004c7e:	b913      	cbnz	r3, 8004c86 <setvbuf+0xea>
 8004c80:	4630      	mov	r0, r6
 8004c82:	f000 ff6d 	bl	8005b60 <__sinit>
 8004c86:	f1b8 0f01 	cmp.w	r8, #1
 8004c8a:	bf08      	it	eq
 8004c8c:	89a3      	ldrheq	r3, [r4, #12]
 8004c8e:	6027      	str	r7, [r4, #0]
 8004c90:	bf04      	itt	eq
 8004c92:	f043 0301 	orreq.w	r3, r3, #1
 8004c96:	81a3      	strheq	r3, [r4, #12]
 8004c98:	89a3      	ldrh	r3, [r4, #12]
 8004c9a:	f013 0008 	ands.w	r0, r3, #8
 8004c9e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8004ca2:	d01b      	beq.n	8004cdc <setvbuf+0x140>
 8004ca4:	f013 0001 	ands.w	r0, r3, #1
 8004ca8:	bf18      	it	ne
 8004caa:	426d      	negne	r5, r5
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	bf1d      	ittte	ne
 8004cb2:	60a3      	strne	r3, [r4, #8]
 8004cb4:	61a5      	strne	r5, [r4, #24]
 8004cb6:	4618      	movne	r0, r3
 8004cb8:	60a5      	streq	r5, [r4, #8]
 8004cba:	e7d0      	b.n	8004c5e <setvbuf+0xc2>
 8004cbc:	4648      	mov	r0, r9
 8004cbe:	f001 f80b 	bl	8005cd8 <malloc>
 8004cc2:	4607      	mov	r7, r0
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	d0bc      	beq.n	8004c42 <setvbuf+0xa6>
 8004cc8:	89a3      	ldrh	r3, [r4, #12]
 8004cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cce:	81a3      	strh	r3, [r4, #12]
 8004cd0:	464d      	mov	r5, r9
 8004cd2:	e7d3      	b.n	8004c7c <setvbuf+0xe0>
 8004cd4:	2000      	movs	r0, #0
 8004cd6:	e7b6      	b.n	8004c46 <setvbuf+0xaa>
 8004cd8:	46a9      	mov	r9, r5
 8004cda:	e7f5      	b.n	8004cc8 <setvbuf+0x12c>
 8004cdc:	60a0      	str	r0, [r4, #8]
 8004cde:	e7be      	b.n	8004c5e <setvbuf+0xc2>
 8004ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce4:	e7bb      	b.n	8004c5e <setvbuf+0xc2>
 8004ce6:	bf00      	nop
 8004ce8:	2000000c 	.word	0x2000000c
 8004cec:	08006684 	.word	0x08006684
 8004cf0:	080066a4 	.word	0x080066a4
 8004cf4:	08006664 	.word	0x08006664

08004cf8 <quorem>:
 8004cf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cfc:	6903      	ldr	r3, [r0, #16]
 8004cfe:	690c      	ldr	r4, [r1, #16]
 8004d00:	42a3      	cmp	r3, r4
 8004d02:	4680      	mov	r8, r0
 8004d04:	f2c0 8082 	blt.w	8004e0c <quorem+0x114>
 8004d08:	3c01      	subs	r4, #1
 8004d0a:	f101 0714 	add.w	r7, r1, #20
 8004d0e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004d12:	f100 0614 	add.w	r6, r0, #20
 8004d16:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004d1a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004d1e:	eb06 030c 	add.w	r3, r6, ip
 8004d22:	3501      	adds	r5, #1
 8004d24:	eb07 090c 	add.w	r9, r7, ip
 8004d28:	9301      	str	r3, [sp, #4]
 8004d2a:	fbb0 f5f5 	udiv	r5, r0, r5
 8004d2e:	b395      	cbz	r5, 8004d96 <quorem+0x9e>
 8004d30:	f04f 0a00 	mov.w	sl, #0
 8004d34:	4638      	mov	r0, r7
 8004d36:	46b6      	mov	lr, r6
 8004d38:	46d3      	mov	fp, sl
 8004d3a:	f850 2b04 	ldr.w	r2, [r0], #4
 8004d3e:	b293      	uxth	r3, r2
 8004d40:	fb05 a303 	mla	r3, r5, r3, sl
 8004d44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	ebab 0303 	sub.w	r3, fp, r3
 8004d4e:	0c12      	lsrs	r2, r2, #16
 8004d50:	f8de b000 	ldr.w	fp, [lr]
 8004d54:	fb05 a202 	mla	r2, r5, r2, sl
 8004d58:	fa13 f38b 	uxtah	r3, r3, fp
 8004d5c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004d60:	fa1f fb82 	uxth.w	fp, r2
 8004d64:	f8de 2000 	ldr.w	r2, [lr]
 8004d68:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004d6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d76:	4581      	cmp	r9, r0
 8004d78:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004d7c:	f84e 3b04 	str.w	r3, [lr], #4
 8004d80:	d2db      	bcs.n	8004d3a <quorem+0x42>
 8004d82:	f856 300c 	ldr.w	r3, [r6, ip]
 8004d86:	b933      	cbnz	r3, 8004d96 <quorem+0x9e>
 8004d88:	9b01      	ldr	r3, [sp, #4]
 8004d8a:	3b04      	subs	r3, #4
 8004d8c:	429e      	cmp	r6, r3
 8004d8e:	461a      	mov	r2, r3
 8004d90:	d330      	bcc.n	8004df4 <quorem+0xfc>
 8004d92:	f8c8 4010 	str.w	r4, [r8, #16]
 8004d96:	4640      	mov	r0, r8
 8004d98:	f001 f9c6 	bl	8006128 <__mcmp>
 8004d9c:	2800      	cmp	r0, #0
 8004d9e:	db25      	blt.n	8004dec <quorem+0xf4>
 8004da0:	3501      	adds	r5, #1
 8004da2:	4630      	mov	r0, r6
 8004da4:	f04f 0c00 	mov.w	ip, #0
 8004da8:	f857 2b04 	ldr.w	r2, [r7], #4
 8004dac:	f8d0 e000 	ldr.w	lr, [r0]
 8004db0:	b293      	uxth	r3, r2
 8004db2:	ebac 0303 	sub.w	r3, ip, r3
 8004db6:	0c12      	lsrs	r2, r2, #16
 8004db8:	fa13 f38e 	uxtah	r3, r3, lr
 8004dbc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004dc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004dca:	45b9      	cmp	r9, r7
 8004dcc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004dd0:	f840 3b04 	str.w	r3, [r0], #4
 8004dd4:	d2e8      	bcs.n	8004da8 <quorem+0xb0>
 8004dd6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004dda:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004dde:	b92a      	cbnz	r2, 8004dec <quorem+0xf4>
 8004de0:	3b04      	subs	r3, #4
 8004de2:	429e      	cmp	r6, r3
 8004de4:	461a      	mov	r2, r3
 8004de6:	d30b      	bcc.n	8004e00 <quorem+0x108>
 8004de8:	f8c8 4010 	str.w	r4, [r8, #16]
 8004dec:	4628      	mov	r0, r5
 8004dee:	b003      	add	sp, #12
 8004df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004df4:	6812      	ldr	r2, [r2, #0]
 8004df6:	3b04      	subs	r3, #4
 8004df8:	2a00      	cmp	r2, #0
 8004dfa:	d1ca      	bne.n	8004d92 <quorem+0x9a>
 8004dfc:	3c01      	subs	r4, #1
 8004dfe:	e7c5      	b.n	8004d8c <quorem+0x94>
 8004e00:	6812      	ldr	r2, [r2, #0]
 8004e02:	3b04      	subs	r3, #4
 8004e04:	2a00      	cmp	r2, #0
 8004e06:	d1ef      	bne.n	8004de8 <quorem+0xf0>
 8004e08:	3c01      	subs	r4, #1
 8004e0a:	e7ea      	b.n	8004de2 <quorem+0xea>
 8004e0c:	2000      	movs	r0, #0
 8004e0e:	e7ee      	b.n	8004dee <quorem+0xf6>

08004e10 <_dtoa_r>:
 8004e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e14:	ec57 6b10 	vmov	r6, r7, d0
 8004e18:	b097      	sub	sp, #92	; 0x5c
 8004e1a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004e1c:	9106      	str	r1, [sp, #24]
 8004e1e:	4604      	mov	r4, r0
 8004e20:	920b      	str	r2, [sp, #44]	; 0x2c
 8004e22:	9312      	str	r3, [sp, #72]	; 0x48
 8004e24:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004e28:	e9cd 6700 	strd	r6, r7, [sp]
 8004e2c:	b93d      	cbnz	r5, 8004e3e <_dtoa_r+0x2e>
 8004e2e:	2010      	movs	r0, #16
 8004e30:	f000 ff52 	bl	8005cd8 <malloc>
 8004e34:	6260      	str	r0, [r4, #36]	; 0x24
 8004e36:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004e3a:	6005      	str	r5, [r0, #0]
 8004e3c:	60c5      	str	r5, [r0, #12]
 8004e3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e40:	6819      	ldr	r1, [r3, #0]
 8004e42:	b151      	cbz	r1, 8004e5a <_dtoa_r+0x4a>
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	604a      	str	r2, [r1, #4]
 8004e48:	2301      	movs	r3, #1
 8004e4a:	4093      	lsls	r3, r2
 8004e4c:	608b      	str	r3, [r1, #8]
 8004e4e:	4620      	mov	r0, r4
 8004e50:	f000 ff89 	bl	8005d66 <_Bfree>
 8004e54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e56:	2200      	movs	r2, #0
 8004e58:	601a      	str	r2, [r3, #0]
 8004e5a:	1e3b      	subs	r3, r7, #0
 8004e5c:	bfbb      	ittet	lt
 8004e5e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004e62:	9301      	strlt	r3, [sp, #4]
 8004e64:	2300      	movge	r3, #0
 8004e66:	2201      	movlt	r2, #1
 8004e68:	bfac      	ite	ge
 8004e6a:	f8c8 3000 	strge.w	r3, [r8]
 8004e6e:	f8c8 2000 	strlt.w	r2, [r8]
 8004e72:	4baf      	ldr	r3, [pc, #700]	; (8005130 <_dtoa_r+0x320>)
 8004e74:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004e78:	ea33 0308 	bics.w	r3, r3, r8
 8004e7c:	d114      	bne.n	8004ea8 <_dtoa_r+0x98>
 8004e7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004e80:	f242 730f 	movw	r3, #9999	; 0x270f
 8004e84:	6013      	str	r3, [r2, #0]
 8004e86:	9b00      	ldr	r3, [sp, #0]
 8004e88:	b923      	cbnz	r3, 8004e94 <_dtoa_r+0x84>
 8004e8a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	f000 8542 	beq.w	8005918 <_dtoa_r+0xb08>
 8004e94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e96:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005144 <_dtoa_r+0x334>
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f000 8544 	beq.w	8005928 <_dtoa_r+0xb18>
 8004ea0:	f10b 0303 	add.w	r3, fp, #3
 8004ea4:	f000 bd3e 	b.w	8005924 <_dtoa_r+0xb14>
 8004ea8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004eac:	2200      	movs	r2, #0
 8004eae:	2300      	movs	r3, #0
 8004eb0:	4630      	mov	r0, r6
 8004eb2:	4639      	mov	r1, r7
 8004eb4:	f7fb fdc8 	bl	8000a48 <__aeabi_dcmpeq>
 8004eb8:	4681      	mov	r9, r0
 8004eba:	b168      	cbz	r0, 8004ed8 <_dtoa_r+0xc8>
 8004ebc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 8524 	beq.w	8005912 <_dtoa_r+0xb02>
 8004eca:	4b9a      	ldr	r3, [pc, #616]	; (8005134 <_dtoa_r+0x324>)
 8004ecc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004ece:	f103 3bff 	add.w	fp, r3, #4294967295
 8004ed2:	6013      	str	r3, [r2, #0]
 8004ed4:	f000 bd28 	b.w	8005928 <_dtoa_r+0xb18>
 8004ed8:	aa14      	add	r2, sp, #80	; 0x50
 8004eda:	a915      	add	r1, sp, #84	; 0x54
 8004edc:	ec47 6b10 	vmov	d0, r6, r7
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	f001 f998 	bl	8006216 <__d2b>
 8004ee6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004eea:	9004      	str	r0, [sp, #16]
 8004eec:	2d00      	cmp	r5, #0
 8004eee:	d07c      	beq.n	8004fea <_dtoa_r+0x1da>
 8004ef0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004ef4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004ef8:	46b2      	mov	sl, r6
 8004efa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8004efe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004f02:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004f06:	2200      	movs	r2, #0
 8004f08:	4b8b      	ldr	r3, [pc, #556]	; (8005138 <_dtoa_r+0x328>)
 8004f0a:	4650      	mov	r0, sl
 8004f0c:	4659      	mov	r1, fp
 8004f0e:	f7fb f97b 	bl	8000208 <__aeabi_dsub>
 8004f12:	a381      	add	r3, pc, #516	; (adr r3, 8005118 <_dtoa_r+0x308>)
 8004f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f18:	f7fb fb2e 	bl	8000578 <__aeabi_dmul>
 8004f1c:	a380      	add	r3, pc, #512	; (adr r3, 8005120 <_dtoa_r+0x310>)
 8004f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f22:	f7fb f973 	bl	800020c <__adddf3>
 8004f26:	4606      	mov	r6, r0
 8004f28:	4628      	mov	r0, r5
 8004f2a:	460f      	mov	r7, r1
 8004f2c:	f7fb faba 	bl	80004a4 <__aeabi_i2d>
 8004f30:	a37d      	add	r3, pc, #500	; (adr r3, 8005128 <_dtoa_r+0x318>)
 8004f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f36:	f7fb fb1f 	bl	8000578 <__aeabi_dmul>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	4630      	mov	r0, r6
 8004f40:	4639      	mov	r1, r7
 8004f42:	f7fb f963 	bl	800020c <__adddf3>
 8004f46:	4606      	mov	r6, r0
 8004f48:	460f      	mov	r7, r1
 8004f4a:	f7fb fdc5 	bl	8000ad8 <__aeabi_d2iz>
 8004f4e:	2200      	movs	r2, #0
 8004f50:	4682      	mov	sl, r0
 8004f52:	2300      	movs	r3, #0
 8004f54:	4630      	mov	r0, r6
 8004f56:	4639      	mov	r1, r7
 8004f58:	f7fb fd80 	bl	8000a5c <__aeabi_dcmplt>
 8004f5c:	b148      	cbz	r0, 8004f72 <_dtoa_r+0x162>
 8004f5e:	4650      	mov	r0, sl
 8004f60:	f7fb faa0 	bl	80004a4 <__aeabi_i2d>
 8004f64:	4632      	mov	r2, r6
 8004f66:	463b      	mov	r3, r7
 8004f68:	f7fb fd6e 	bl	8000a48 <__aeabi_dcmpeq>
 8004f6c:	b908      	cbnz	r0, 8004f72 <_dtoa_r+0x162>
 8004f6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f72:	f1ba 0f16 	cmp.w	sl, #22
 8004f76:	d859      	bhi.n	800502c <_dtoa_r+0x21c>
 8004f78:	4970      	ldr	r1, [pc, #448]	; (800513c <_dtoa_r+0x32c>)
 8004f7a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004f7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f86:	f7fb fd87 	bl	8000a98 <__aeabi_dcmpgt>
 8004f8a:	2800      	cmp	r0, #0
 8004f8c:	d050      	beq.n	8005030 <_dtoa_r+0x220>
 8004f8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f92:	2300      	movs	r3, #0
 8004f94:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004f98:	1b5d      	subs	r5, r3, r5
 8004f9a:	f1b5 0801 	subs.w	r8, r5, #1
 8004f9e:	bf49      	itett	mi
 8004fa0:	f1c5 0301 	rsbmi	r3, r5, #1
 8004fa4:	2300      	movpl	r3, #0
 8004fa6:	9305      	strmi	r3, [sp, #20]
 8004fa8:	f04f 0800 	movmi.w	r8, #0
 8004fac:	bf58      	it	pl
 8004fae:	9305      	strpl	r3, [sp, #20]
 8004fb0:	f1ba 0f00 	cmp.w	sl, #0
 8004fb4:	db3e      	blt.n	8005034 <_dtoa_r+0x224>
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	44d0      	add	r8, sl
 8004fba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004fbe:	9307      	str	r3, [sp, #28]
 8004fc0:	9b06      	ldr	r3, [sp, #24]
 8004fc2:	2b09      	cmp	r3, #9
 8004fc4:	f200 8090 	bhi.w	80050e8 <_dtoa_r+0x2d8>
 8004fc8:	2b05      	cmp	r3, #5
 8004fca:	bfc4      	itt	gt
 8004fcc:	3b04      	subgt	r3, #4
 8004fce:	9306      	strgt	r3, [sp, #24]
 8004fd0:	9b06      	ldr	r3, [sp, #24]
 8004fd2:	f1a3 0302 	sub.w	r3, r3, #2
 8004fd6:	bfcc      	ite	gt
 8004fd8:	2500      	movgt	r5, #0
 8004fda:	2501      	movle	r5, #1
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	f200 808f 	bhi.w	8005100 <_dtoa_r+0x2f0>
 8004fe2:	e8df f003 	tbb	[pc, r3]
 8004fe6:	7f7d      	.short	0x7f7d
 8004fe8:	7131      	.short	0x7131
 8004fea:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8004fee:	441d      	add	r5, r3
 8004ff0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004ff4:	2820      	cmp	r0, #32
 8004ff6:	dd13      	ble.n	8005020 <_dtoa_r+0x210>
 8004ff8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004ffc:	9b00      	ldr	r3, [sp, #0]
 8004ffe:	fa08 f800 	lsl.w	r8, r8, r0
 8005002:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005006:	fa23 f000 	lsr.w	r0, r3, r0
 800500a:	ea48 0000 	orr.w	r0, r8, r0
 800500e:	f7fb fa39 	bl	8000484 <__aeabi_ui2d>
 8005012:	2301      	movs	r3, #1
 8005014:	4682      	mov	sl, r0
 8005016:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800501a:	3d01      	subs	r5, #1
 800501c:	9313      	str	r3, [sp, #76]	; 0x4c
 800501e:	e772      	b.n	8004f06 <_dtoa_r+0xf6>
 8005020:	9b00      	ldr	r3, [sp, #0]
 8005022:	f1c0 0020 	rsb	r0, r0, #32
 8005026:	fa03 f000 	lsl.w	r0, r3, r0
 800502a:	e7f0      	b.n	800500e <_dtoa_r+0x1fe>
 800502c:	2301      	movs	r3, #1
 800502e:	e7b1      	b.n	8004f94 <_dtoa_r+0x184>
 8005030:	900f      	str	r0, [sp, #60]	; 0x3c
 8005032:	e7b0      	b.n	8004f96 <_dtoa_r+0x186>
 8005034:	9b05      	ldr	r3, [sp, #20]
 8005036:	eba3 030a 	sub.w	r3, r3, sl
 800503a:	9305      	str	r3, [sp, #20]
 800503c:	f1ca 0300 	rsb	r3, sl, #0
 8005040:	9307      	str	r3, [sp, #28]
 8005042:	2300      	movs	r3, #0
 8005044:	930e      	str	r3, [sp, #56]	; 0x38
 8005046:	e7bb      	b.n	8004fc0 <_dtoa_r+0x1b0>
 8005048:	2301      	movs	r3, #1
 800504a:	930a      	str	r3, [sp, #40]	; 0x28
 800504c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800504e:	2b00      	cmp	r3, #0
 8005050:	dd59      	ble.n	8005106 <_dtoa_r+0x2f6>
 8005052:	9302      	str	r3, [sp, #8]
 8005054:	4699      	mov	r9, r3
 8005056:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005058:	2200      	movs	r2, #0
 800505a:	6072      	str	r2, [r6, #4]
 800505c:	2204      	movs	r2, #4
 800505e:	f102 0014 	add.w	r0, r2, #20
 8005062:	4298      	cmp	r0, r3
 8005064:	6871      	ldr	r1, [r6, #4]
 8005066:	d953      	bls.n	8005110 <_dtoa_r+0x300>
 8005068:	4620      	mov	r0, r4
 800506a:	f000 fe48 	bl	8005cfe <_Balloc>
 800506e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005070:	6030      	str	r0, [r6, #0]
 8005072:	f1b9 0f0e 	cmp.w	r9, #14
 8005076:	f8d3 b000 	ldr.w	fp, [r3]
 800507a:	f200 80e6 	bhi.w	800524a <_dtoa_r+0x43a>
 800507e:	2d00      	cmp	r5, #0
 8005080:	f000 80e3 	beq.w	800524a <_dtoa_r+0x43a>
 8005084:	ed9d 7b00 	vldr	d7, [sp]
 8005088:	f1ba 0f00 	cmp.w	sl, #0
 800508c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005090:	dd74      	ble.n	800517c <_dtoa_r+0x36c>
 8005092:	4a2a      	ldr	r2, [pc, #168]	; (800513c <_dtoa_r+0x32c>)
 8005094:	f00a 030f 	and.w	r3, sl, #15
 8005098:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800509c:	ed93 7b00 	vldr	d7, [r3]
 80050a0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80050a4:	06f0      	lsls	r0, r6, #27
 80050a6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80050aa:	d565      	bpl.n	8005178 <_dtoa_r+0x368>
 80050ac:	4b24      	ldr	r3, [pc, #144]	; (8005140 <_dtoa_r+0x330>)
 80050ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80050b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80050b6:	f7fb fb89 	bl	80007cc <__aeabi_ddiv>
 80050ba:	e9cd 0100 	strd	r0, r1, [sp]
 80050be:	f006 060f 	and.w	r6, r6, #15
 80050c2:	2503      	movs	r5, #3
 80050c4:	4f1e      	ldr	r7, [pc, #120]	; (8005140 <_dtoa_r+0x330>)
 80050c6:	e04c      	b.n	8005162 <_dtoa_r+0x352>
 80050c8:	2301      	movs	r3, #1
 80050ca:	930a      	str	r3, [sp, #40]	; 0x28
 80050cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050ce:	4453      	add	r3, sl
 80050d0:	f103 0901 	add.w	r9, r3, #1
 80050d4:	9302      	str	r3, [sp, #8]
 80050d6:	464b      	mov	r3, r9
 80050d8:	2b01      	cmp	r3, #1
 80050da:	bfb8      	it	lt
 80050dc:	2301      	movlt	r3, #1
 80050de:	e7ba      	b.n	8005056 <_dtoa_r+0x246>
 80050e0:	2300      	movs	r3, #0
 80050e2:	e7b2      	b.n	800504a <_dtoa_r+0x23a>
 80050e4:	2300      	movs	r3, #0
 80050e6:	e7f0      	b.n	80050ca <_dtoa_r+0x2ba>
 80050e8:	2501      	movs	r5, #1
 80050ea:	2300      	movs	r3, #0
 80050ec:	9306      	str	r3, [sp, #24]
 80050ee:	950a      	str	r5, [sp, #40]	; 0x28
 80050f0:	f04f 33ff 	mov.w	r3, #4294967295
 80050f4:	9302      	str	r3, [sp, #8]
 80050f6:	4699      	mov	r9, r3
 80050f8:	2200      	movs	r2, #0
 80050fa:	2312      	movs	r3, #18
 80050fc:	920b      	str	r2, [sp, #44]	; 0x2c
 80050fe:	e7aa      	b.n	8005056 <_dtoa_r+0x246>
 8005100:	2301      	movs	r3, #1
 8005102:	930a      	str	r3, [sp, #40]	; 0x28
 8005104:	e7f4      	b.n	80050f0 <_dtoa_r+0x2e0>
 8005106:	2301      	movs	r3, #1
 8005108:	9302      	str	r3, [sp, #8]
 800510a:	4699      	mov	r9, r3
 800510c:	461a      	mov	r2, r3
 800510e:	e7f5      	b.n	80050fc <_dtoa_r+0x2ec>
 8005110:	3101      	adds	r1, #1
 8005112:	6071      	str	r1, [r6, #4]
 8005114:	0052      	lsls	r2, r2, #1
 8005116:	e7a2      	b.n	800505e <_dtoa_r+0x24e>
 8005118:	636f4361 	.word	0x636f4361
 800511c:	3fd287a7 	.word	0x3fd287a7
 8005120:	8b60c8b3 	.word	0x8b60c8b3
 8005124:	3fc68a28 	.word	0x3fc68a28
 8005128:	509f79fb 	.word	0x509f79fb
 800512c:	3fd34413 	.word	0x3fd34413
 8005130:	7ff00000 	.word	0x7ff00000
 8005134:	08006655 	.word	0x08006655
 8005138:	3ff80000 	.word	0x3ff80000
 800513c:	080066f0 	.word	0x080066f0
 8005140:	080066c8 	.word	0x080066c8
 8005144:	0800665f 	.word	0x0800665f
 8005148:	07f1      	lsls	r1, r6, #31
 800514a:	d508      	bpl.n	800515e <_dtoa_r+0x34e>
 800514c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005150:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005154:	f7fb fa10 	bl	8000578 <__aeabi_dmul>
 8005158:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800515c:	3501      	adds	r5, #1
 800515e:	1076      	asrs	r6, r6, #1
 8005160:	3708      	adds	r7, #8
 8005162:	2e00      	cmp	r6, #0
 8005164:	d1f0      	bne.n	8005148 <_dtoa_r+0x338>
 8005166:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800516a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800516e:	f7fb fb2d 	bl	80007cc <__aeabi_ddiv>
 8005172:	e9cd 0100 	strd	r0, r1, [sp]
 8005176:	e01a      	b.n	80051ae <_dtoa_r+0x39e>
 8005178:	2502      	movs	r5, #2
 800517a:	e7a3      	b.n	80050c4 <_dtoa_r+0x2b4>
 800517c:	f000 80a0 	beq.w	80052c0 <_dtoa_r+0x4b0>
 8005180:	f1ca 0600 	rsb	r6, sl, #0
 8005184:	4b9f      	ldr	r3, [pc, #636]	; (8005404 <_dtoa_r+0x5f4>)
 8005186:	4fa0      	ldr	r7, [pc, #640]	; (8005408 <_dtoa_r+0x5f8>)
 8005188:	f006 020f 	and.w	r2, r6, #15
 800518c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005194:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005198:	f7fb f9ee 	bl	8000578 <__aeabi_dmul>
 800519c:	e9cd 0100 	strd	r0, r1, [sp]
 80051a0:	1136      	asrs	r6, r6, #4
 80051a2:	2300      	movs	r3, #0
 80051a4:	2502      	movs	r5, #2
 80051a6:	2e00      	cmp	r6, #0
 80051a8:	d17f      	bne.n	80052aa <_dtoa_r+0x49a>
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1e1      	bne.n	8005172 <_dtoa_r+0x362>
 80051ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 8087 	beq.w	80052c4 <_dtoa_r+0x4b4>
 80051b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80051ba:	2200      	movs	r2, #0
 80051bc:	4b93      	ldr	r3, [pc, #588]	; (800540c <_dtoa_r+0x5fc>)
 80051be:	4630      	mov	r0, r6
 80051c0:	4639      	mov	r1, r7
 80051c2:	f7fb fc4b 	bl	8000a5c <__aeabi_dcmplt>
 80051c6:	2800      	cmp	r0, #0
 80051c8:	d07c      	beq.n	80052c4 <_dtoa_r+0x4b4>
 80051ca:	f1b9 0f00 	cmp.w	r9, #0
 80051ce:	d079      	beq.n	80052c4 <_dtoa_r+0x4b4>
 80051d0:	9b02      	ldr	r3, [sp, #8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	dd35      	ble.n	8005242 <_dtoa_r+0x432>
 80051d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80051da:	9308      	str	r3, [sp, #32]
 80051dc:	4639      	mov	r1, r7
 80051de:	2200      	movs	r2, #0
 80051e0:	4b8b      	ldr	r3, [pc, #556]	; (8005410 <_dtoa_r+0x600>)
 80051e2:	4630      	mov	r0, r6
 80051e4:	f7fb f9c8 	bl	8000578 <__aeabi_dmul>
 80051e8:	e9cd 0100 	strd	r0, r1, [sp]
 80051ec:	9f02      	ldr	r7, [sp, #8]
 80051ee:	3501      	adds	r5, #1
 80051f0:	4628      	mov	r0, r5
 80051f2:	f7fb f957 	bl	80004a4 <__aeabi_i2d>
 80051f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051fa:	f7fb f9bd 	bl	8000578 <__aeabi_dmul>
 80051fe:	2200      	movs	r2, #0
 8005200:	4b84      	ldr	r3, [pc, #528]	; (8005414 <_dtoa_r+0x604>)
 8005202:	f7fb f803 	bl	800020c <__adddf3>
 8005206:	4605      	mov	r5, r0
 8005208:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800520c:	2f00      	cmp	r7, #0
 800520e:	d15d      	bne.n	80052cc <_dtoa_r+0x4bc>
 8005210:	2200      	movs	r2, #0
 8005212:	4b81      	ldr	r3, [pc, #516]	; (8005418 <_dtoa_r+0x608>)
 8005214:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005218:	f7fa fff6 	bl	8000208 <__aeabi_dsub>
 800521c:	462a      	mov	r2, r5
 800521e:	4633      	mov	r3, r6
 8005220:	e9cd 0100 	strd	r0, r1, [sp]
 8005224:	f7fb fc38 	bl	8000a98 <__aeabi_dcmpgt>
 8005228:	2800      	cmp	r0, #0
 800522a:	f040 8288 	bne.w	800573e <_dtoa_r+0x92e>
 800522e:	462a      	mov	r2, r5
 8005230:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005234:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005238:	f7fb fc10 	bl	8000a5c <__aeabi_dcmplt>
 800523c:	2800      	cmp	r0, #0
 800523e:	f040 827c 	bne.w	800573a <_dtoa_r+0x92a>
 8005242:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005246:	e9cd 2300 	strd	r2, r3, [sp]
 800524a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800524c:	2b00      	cmp	r3, #0
 800524e:	f2c0 8150 	blt.w	80054f2 <_dtoa_r+0x6e2>
 8005252:	f1ba 0f0e 	cmp.w	sl, #14
 8005256:	f300 814c 	bgt.w	80054f2 <_dtoa_r+0x6e2>
 800525a:	4b6a      	ldr	r3, [pc, #424]	; (8005404 <_dtoa_r+0x5f4>)
 800525c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005260:	ed93 7b00 	vldr	d7, [r3]
 8005264:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005266:	2b00      	cmp	r3, #0
 8005268:	ed8d 7b02 	vstr	d7, [sp, #8]
 800526c:	f280 80d8 	bge.w	8005420 <_dtoa_r+0x610>
 8005270:	f1b9 0f00 	cmp.w	r9, #0
 8005274:	f300 80d4 	bgt.w	8005420 <_dtoa_r+0x610>
 8005278:	f040 825e 	bne.w	8005738 <_dtoa_r+0x928>
 800527c:	2200      	movs	r2, #0
 800527e:	4b66      	ldr	r3, [pc, #408]	; (8005418 <_dtoa_r+0x608>)
 8005280:	ec51 0b17 	vmov	r0, r1, d7
 8005284:	f7fb f978 	bl	8000578 <__aeabi_dmul>
 8005288:	e9dd 2300 	ldrd	r2, r3, [sp]
 800528c:	f7fb fbfa 	bl	8000a84 <__aeabi_dcmpge>
 8005290:	464f      	mov	r7, r9
 8005292:	464e      	mov	r6, r9
 8005294:	2800      	cmp	r0, #0
 8005296:	f040 8234 	bne.w	8005702 <_dtoa_r+0x8f2>
 800529a:	2331      	movs	r3, #49	; 0x31
 800529c:	f10b 0501 	add.w	r5, fp, #1
 80052a0:	f88b 3000 	strb.w	r3, [fp]
 80052a4:	f10a 0a01 	add.w	sl, sl, #1
 80052a8:	e22f      	b.n	800570a <_dtoa_r+0x8fa>
 80052aa:	07f2      	lsls	r2, r6, #31
 80052ac:	d505      	bpl.n	80052ba <_dtoa_r+0x4aa>
 80052ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052b2:	f7fb f961 	bl	8000578 <__aeabi_dmul>
 80052b6:	3501      	adds	r5, #1
 80052b8:	2301      	movs	r3, #1
 80052ba:	1076      	asrs	r6, r6, #1
 80052bc:	3708      	adds	r7, #8
 80052be:	e772      	b.n	80051a6 <_dtoa_r+0x396>
 80052c0:	2502      	movs	r5, #2
 80052c2:	e774      	b.n	80051ae <_dtoa_r+0x39e>
 80052c4:	f8cd a020 	str.w	sl, [sp, #32]
 80052c8:	464f      	mov	r7, r9
 80052ca:	e791      	b.n	80051f0 <_dtoa_r+0x3e0>
 80052cc:	4b4d      	ldr	r3, [pc, #308]	; (8005404 <_dtoa_r+0x5f4>)
 80052ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80052d2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80052d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d047      	beq.n	800536c <_dtoa_r+0x55c>
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	2000      	movs	r0, #0
 80052e2:	494e      	ldr	r1, [pc, #312]	; (800541c <_dtoa_r+0x60c>)
 80052e4:	f7fb fa72 	bl	80007cc <__aeabi_ddiv>
 80052e8:	462a      	mov	r2, r5
 80052ea:	4633      	mov	r3, r6
 80052ec:	f7fa ff8c 	bl	8000208 <__aeabi_dsub>
 80052f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80052f4:	465d      	mov	r5, fp
 80052f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80052fa:	f7fb fbed 	bl	8000ad8 <__aeabi_d2iz>
 80052fe:	4606      	mov	r6, r0
 8005300:	f7fb f8d0 	bl	80004a4 <__aeabi_i2d>
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	e9dd 0100 	ldrd	r0, r1, [sp]
 800530c:	f7fa ff7c 	bl	8000208 <__aeabi_dsub>
 8005310:	3630      	adds	r6, #48	; 0x30
 8005312:	f805 6b01 	strb.w	r6, [r5], #1
 8005316:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800531a:	e9cd 0100 	strd	r0, r1, [sp]
 800531e:	f7fb fb9d 	bl	8000a5c <__aeabi_dcmplt>
 8005322:	2800      	cmp	r0, #0
 8005324:	d163      	bne.n	80053ee <_dtoa_r+0x5de>
 8005326:	e9dd 2300 	ldrd	r2, r3, [sp]
 800532a:	2000      	movs	r0, #0
 800532c:	4937      	ldr	r1, [pc, #220]	; (800540c <_dtoa_r+0x5fc>)
 800532e:	f7fa ff6b 	bl	8000208 <__aeabi_dsub>
 8005332:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005336:	f7fb fb91 	bl	8000a5c <__aeabi_dcmplt>
 800533a:	2800      	cmp	r0, #0
 800533c:	f040 80b7 	bne.w	80054ae <_dtoa_r+0x69e>
 8005340:	eba5 030b 	sub.w	r3, r5, fp
 8005344:	429f      	cmp	r7, r3
 8005346:	f77f af7c 	ble.w	8005242 <_dtoa_r+0x432>
 800534a:	2200      	movs	r2, #0
 800534c:	4b30      	ldr	r3, [pc, #192]	; (8005410 <_dtoa_r+0x600>)
 800534e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005352:	f7fb f911 	bl	8000578 <__aeabi_dmul>
 8005356:	2200      	movs	r2, #0
 8005358:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800535c:	4b2c      	ldr	r3, [pc, #176]	; (8005410 <_dtoa_r+0x600>)
 800535e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005362:	f7fb f909 	bl	8000578 <__aeabi_dmul>
 8005366:	e9cd 0100 	strd	r0, r1, [sp]
 800536a:	e7c4      	b.n	80052f6 <_dtoa_r+0x4e6>
 800536c:	462a      	mov	r2, r5
 800536e:	4633      	mov	r3, r6
 8005370:	f7fb f902 	bl	8000578 <__aeabi_dmul>
 8005374:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005378:	eb0b 0507 	add.w	r5, fp, r7
 800537c:	465e      	mov	r6, fp
 800537e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005382:	f7fb fba9 	bl	8000ad8 <__aeabi_d2iz>
 8005386:	4607      	mov	r7, r0
 8005388:	f7fb f88c 	bl	80004a4 <__aeabi_i2d>
 800538c:	3730      	adds	r7, #48	; 0x30
 800538e:	4602      	mov	r2, r0
 8005390:	460b      	mov	r3, r1
 8005392:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005396:	f7fa ff37 	bl	8000208 <__aeabi_dsub>
 800539a:	f806 7b01 	strb.w	r7, [r6], #1
 800539e:	42ae      	cmp	r6, r5
 80053a0:	e9cd 0100 	strd	r0, r1, [sp]
 80053a4:	f04f 0200 	mov.w	r2, #0
 80053a8:	d126      	bne.n	80053f8 <_dtoa_r+0x5e8>
 80053aa:	4b1c      	ldr	r3, [pc, #112]	; (800541c <_dtoa_r+0x60c>)
 80053ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80053b0:	f7fa ff2c 	bl	800020c <__adddf3>
 80053b4:	4602      	mov	r2, r0
 80053b6:	460b      	mov	r3, r1
 80053b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053bc:	f7fb fb6c 	bl	8000a98 <__aeabi_dcmpgt>
 80053c0:	2800      	cmp	r0, #0
 80053c2:	d174      	bne.n	80054ae <_dtoa_r+0x69e>
 80053c4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80053c8:	2000      	movs	r0, #0
 80053ca:	4914      	ldr	r1, [pc, #80]	; (800541c <_dtoa_r+0x60c>)
 80053cc:	f7fa ff1c 	bl	8000208 <__aeabi_dsub>
 80053d0:	4602      	mov	r2, r0
 80053d2:	460b      	mov	r3, r1
 80053d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053d8:	f7fb fb40 	bl	8000a5c <__aeabi_dcmplt>
 80053dc:	2800      	cmp	r0, #0
 80053de:	f43f af30 	beq.w	8005242 <_dtoa_r+0x432>
 80053e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80053e6:	2b30      	cmp	r3, #48	; 0x30
 80053e8:	f105 32ff 	add.w	r2, r5, #4294967295
 80053ec:	d002      	beq.n	80053f4 <_dtoa_r+0x5e4>
 80053ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 80053f2:	e04a      	b.n	800548a <_dtoa_r+0x67a>
 80053f4:	4615      	mov	r5, r2
 80053f6:	e7f4      	b.n	80053e2 <_dtoa_r+0x5d2>
 80053f8:	4b05      	ldr	r3, [pc, #20]	; (8005410 <_dtoa_r+0x600>)
 80053fa:	f7fb f8bd 	bl	8000578 <__aeabi_dmul>
 80053fe:	e9cd 0100 	strd	r0, r1, [sp]
 8005402:	e7bc      	b.n	800537e <_dtoa_r+0x56e>
 8005404:	080066f0 	.word	0x080066f0
 8005408:	080066c8 	.word	0x080066c8
 800540c:	3ff00000 	.word	0x3ff00000
 8005410:	40240000 	.word	0x40240000
 8005414:	401c0000 	.word	0x401c0000
 8005418:	40140000 	.word	0x40140000
 800541c:	3fe00000 	.word	0x3fe00000
 8005420:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005424:	465d      	mov	r5, fp
 8005426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800542a:	4630      	mov	r0, r6
 800542c:	4639      	mov	r1, r7
 800542e:	f7fb f9cd 	bl	80007cc <__aeabi_ddiv>
 8005432:	f7fb fb51 	bl	8000ad8 <__aeabi_d2iz>
 8005436:	4680      	mov	r8, r0
 8005438:	f7fb f834 	bl	80004a4 <__aeabi_i2d>
 800543c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005440:	f7fb f89a 	bl	8000578 <__aeabi_dmul>
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	4630      	mov	r0, r6
 800544a:	4639      	mov	r1, r7
 800544c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005450:	f7fa feda 	bl	8000208 <__aeabi_dsub>
 8005454:	f805 6b01 	strb.w	r6, [r5], #1
 8005458:	eba5 060b 	sub.w	r6, r5, fp
 800545c:	45b1      	cmp	r9, r6
 800545e:	4602      	mov	r2, r0
 8005460:	460b      	mov	r3, r1
 8005462:	d139      	bne.n	80054d8 <_dtoa_r+0x6c8>
 8005464:	f7fa fed2 	bl	800020c <__adddf3>
 8005468:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800546c:	4606      	mov	r6, r0
 800546e:	460f      	mov	r7, r1
 8005470:	f7fb fb12 	bl	8000a98 <__aeabi_dcmpgt>
 8005474:	b9c8      	cbnz	r0, 80054aa <_dtoa_r+0x69a>
 8005476:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800547a:	4630      	mov	r0, r6
 800547c:	4639      	mov	r1, r7
 800547e:	f7fb fae3 	bl	8000a48 <__aeabi_dcmpeq>
 8005482:	b110      	cbz	r0, 800548a <_dtoa_r+0x67a>
 8005484:	f018 0f01 	tst.w	r8, #1
 8005488:	d10f      	bne.n	80054aa <_dtoa_r+0x69a>
 800548a:	9904      	ldr	r1, [sp, #16]
 800548c:	4620      	mov	r0, r4
 800548e:	f000 fc6a 	bl	8005d66 <_Bfree>
 8005492:	2300      	movs	r3, #0
 8005494:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005496:	702b      	strb	r3, [r5, #0]
 8005498:	f10a 0301 	add.w	r3, sl, #1
 800549c:	6013      	str	r3, [r2, #0]
 800549e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 8241 	beq.w	8005928 <_dtoa_r+0xb18>
 80054a6:	601d      	str	r5, [r3, #0]
 80054a8:	e23e      	b.n	8005928 <_dtoa_r+0xb18>
 80054aa:	f8cd a020 	str.w	sl, [sp, #32]
 80054ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80054b2:	2a39      	cmp	r2, #57	; 0x39
 80054b4:	f105 33ff 	add.w	r3, r5, #4294967295
 80054b8:	d108      	bne.n	80054cc <_dtoa_r+0x6bc>
 80054ba:	459b      	cmp	fp, r3
 80054bc:	d10a      	bne.n	80054d4 <_dtoa_r+0x6c4>
 80054be:	9b08      	ldr	r3, [sp, #32]
 80054c0:	3301      	adds	r3, #1
 80054c2:	9308      	str	r3, [sp, #32]
 80054c4:	2330      	movs	r3, #48	; 0x30
 80054c6:	f88b 3000 	strb.w	r3, [fp]
 80054ca:	465b      	mov	r3, fp
 80054cc:	781a      	ldrb	r2, [r3, #0]
 80054ce:	3201      	adds	r2, #1
 80054d0:	701a      	strb	r2, [r3, #0]
 80054d2:	e78c      	b.n	80053ee <_dtoa_r+0x5de>
 80054d4:	461d      	mov	r5, r3
 80054d6:	e7ea      	b.n	80054ae <_dtoa_r+0x69e>
 80054d8:	2200      	movs	r2, #0
 80054da:	4b9b      	ldr	r3, [pc, #620]	; (8005748 <_dtoa_r+0x938>)
 80054dc:	f7fb f84c 	bl	8000578 <__aeabi_dmul>
 80054e0:	2200      	movs	r2, #0
 80054e2:	2300      	movs	r3, #0
 80054e4:	4606      	mov	r6, r0
 80054e6:	460f      	mov	r7, r1
 80054e8:	f7fb faae 	bl	8000a48 <__aeabi_dcmpeq>
 80054ec:	2800      	cmp	r0, #0
 80054ee:	d09a      	beq.n	8005426 <_dtoa_r+0x616>
 80054f0:	e7cb      	b.n	800548a <_dtoa_r+0x67a>
 80054f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054f4:	2a00      	cmp	r2, #0
 80054f6:	f000 808b 	beq.w	8005610 <_dtoa_r+0x800>
 80054fa:	9a06      	ldr	r2, [sp, #24]
 80054fc:	2a01      	cmp	r2, #1
 80054fe:	dc6e      	bgt.n	80055de <_dtoa_r+0x7ce>
 8005500:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005502:	2a00      	cmp	r2, #0
 8005504:	d067      	beq.n	80055d6 <_dtoa_r+0x7c6>
 8005506:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800550a:	9f07      	ldr	r7, [sp, #28]
 800550c:	9d05      	ldr	r5, [sp, #20]
 800550e:	9a05      	ldr	r2, [sp, #20]
 8005510:	2101      	movs	r1, #1
 8005512:	441a      	add	r2, r3
 8005514:	4620      	mov	r0, r4
 8005516:	9205      	str	r2, [sp, #20]
 8005518:	4498      	add	r8, r3
 800551a:	f000 fcc4 	bl	8005ea6 <__i2b>
 800551e:	4606      	mov	r6, r0
 8005520:	2d00      	cmp	r5, #0
 8005522:	dd0c      	ble.n	800553e <_dtoa_r+0x72e>
 8005524:	f1b8 0f00 	cmp.w	r8, #0
 8005528:	dd09      	ble.n	800553e <_dtoa_r+0x72e>
 800552a:	4545      	cmp	r5, r8
 800552c:	9a05      	ldr	r2, [sp, #20]
 800552e:	462b      	mov	r3, r5
 8005530:	bfa8      	it	ge
 8005532:	4643      	movge	r3, r8
 8005534:	1ad2      	subs	r2, r2, r3
 8005536:	9205      	str	r2, [sp, #20]
 8005538:	1aed      	subs	r5, r5, r3
 800553a:	eba8 0803 	sub.w	r8, r8, r3
 800553e:	9b07      	ldr	r3, [sp, #28]
 8005540:	b1eb      	cbz	r3, 800557e <_dtoa_r+0x76e>
 8005542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005544:	2b00      	cmp	r3, #0
 8005546:	d067      	beq.n	8005618 <_dtoa_r+0x808>
 8005548:	b18f      	cbz	r7, 800556e <_dtoa_r+0x75e>
 800554a:	4631      	mov	r1, r6
 800554c:	463a      	mov	r2, r7
 800554e:	4620      	mov	r0, r4
 8005550:	f000 fd48 	bl	8005fe4 <__pow5mult>
 8005554:	9a04      	ldr	r2, [sp, #16]
 8005556:	4601      	mov	r1, r0
 8005558:	4606      	mov	r6, r0
 800555a:	4620      	mov	r0, r4
 800555c:	f000 fcac 	bl	8005eb8 <__multiply>
 8005560:	9904      	ldr	r1, [sp, #16]
 8005562:	9008      	str	r0, [sp, #32]
 8005564:	4620      	mov	r0, r4
 8005566:	f000 fbfe 	bl	8005d66 <_Bfree>
 800556a:	9b08      	ldr	r3, [sp, #32]
 800556c:	9304      	str	r3, [sp, #16]
 800556e:	9b07      	ldr	r3, [sp, #28]
 8005570:	1bda      	subs	r2, r3, r7
 8005572:	d004      	beq.n	800557e <_dtoa_r+0x76e>
 8005574:	9904      	ldr	r1, [sp, #16]
 8005576:	4620      	mov	r0, r4
 8005578:	f000 fd34 	bl	8005fe4 <__pow5mult>
 800557c:	9004      	str	r0, [sp, #16]
 800557e:	2101      	movs	r1, #1
 8005580:	4620      	mov	r0, r4
 8005582:	f000 fc90 	bl	8005ea6 <__i2b>
 8005586:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005588:	4607      	mov	r7, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 81d0 	beq.w	8005930 <_dtoa_r+0xb20>
 8005590:	461a      	mov	r2, r3
 8005592:	4601      	mov	r1, r0
 8005594:	4620      	mov	r0, r4
 8005596:	f000 fd25 	bl	8005fe4 <__pow5mult>
 800559a:	9b06      	ldr	r3, [sp, #24]
 800559c:	2b01      	cmp	r3, #1
 800559e:	4607      	mov	r7, r0
 80055a0:	dc40      	bgt.n	8005624 <_dtoa_r+0x814>
 80055a2:	9b00      	ldr	r3, [sp, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d139      	bne.n	800561c <_dtoa_r+0x80c>
 80055a8:	9b01      	ldr	r3, [sp, #4]
 80055aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d136      	bne.n	8005620 <_dtoa_r+0x810>
 80055b2:	9b01      	ldr	r3, [sp, #4]
 80055b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055b8:	0d1b      	lsrs	r3, r3, #20
 80055ba:	051b      	lsls	r3, r3, #20
 80055bc:	b12b      	cbz	r3, 80055ca <_dtoa_r+0x7ba>
 80055be:	9b05      	ldr	r3, [sp, #20]
 80055c0:	3301      	adds	r3, #1
 80055c2:	9305      	str	r3, [sp, #20]
 80055c4:	f108 0801 	add.w	r8, r8, #1
 80055c8:	2301      	movs	r3, #1
 80055ca:	9307      	str	r3, [sp, #28]
 80055cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d12a      	bne.n	8005628 <_dtoa_r+0x818>
 80055d2:	2001      	movs	r0, #1
 80055d4:	e030      	b.n	8005638 <_dtoa_r+0x828>
 80055d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80055d8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80055dc:	e795      	b.n	800550a <_dtoa_r+0x6fa>
 80055de:	9b07      	ldr	r3, [sp, #28]
 80055e0:	f109 37ff 	add.w	r7, r9, #4294967295
 80055e4:	42bb      	cmp	r3, r7
 80055e6:	bfbf      	itttt	lt
 80055e8:	9b07      	ldrlt	r3, [sp, #28]
 80055ea:	9707      	strlt	r7, [sp, #28]
 80055ec:	1afa      	sublt	r2, r7, r3
 80055ee:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80055f0:	bfbb      	ittet	lt
 80055f2:	189b      	addlt	r3, r3, r2
 80055f4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80055f6:	1bdf      	subge	r7, r3, r7
 80055f8:	2700      	movlt	r7, #0
 80055fa:	f1b9 0f00 	cmp.w	r9, #0
 80055fe:	bfb5      	itete	lt
 8005600:	9b05      	ldrlt	r3, [sp, #20]
 8005602:	9d05      	ldrge	r5, [sp, #20]
 8005604:	eba3 0509 	sublt.w	r5, r3, r9
 8005608:	464b      	movge	r3, r9
 800560a:	bfb8      	it	lt
 800560c:	2300      	movlt	r3, #0
 800560e:	e77e      	b.n	800550e <_dtoa_r+0x6fe>
 8005610:	9f07      	ldr	r7, [sp, #28]
 8005612:	9d05      	ldr	r5, [sp, #20]
 8005614:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005616:	e783      	b.n	8005520 <_dtoa_r+0x710>
 8005618:	9a07      	ldr	r2, [sp, #28]
 800561a:	e7ab      	b.n	8005574 <_dtoa_r+0x764>
 800561c:	2300      	movs	r3, #0
 800561e:	e7d4      	b.n	80055ca <_dtoa_r+0x7ba>
 8005620:	9b00      	ldr	r3, [sp, #0]
 8005622:	e7d2      	b.n	80055ca <_dtoa_r+0x7ba>
 8005624:	2300      	movs	r3, #0
 8005626:	9307      	str	r3, [sp, #28]
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800562e:	6918      	ldr	r0, [r3, #16]
 8005630:	f000 fbeb 	bl	8005e0a <__hi0bits>
 8005634:	f1c0 0020 	rsb	r0, r0, #32
 8005638:	4440      	add	r0, r8
 800563a:	f010 001f 	ands.w	r0, r0, #31
 800563e:	d047      	beq.n	80056d0 <_dtoa_r+0x8c0>
 8005640:	f1c0 0320 	rsb	r3, r0, #32
 8005644:	2b04      	cmp	r3, #4
 8005646:	dd3b      	ble.n	80056c0 <_dtoa_r+0x8b0>
 8005648:	9b05      	ldr	r3, [sp, #20]
 800564a:	f1c0 001c 	rsb	r0, r0, #28
 800564e:	4403      	add	r3, r0
 8005650:	9305      	str	r3, [sp, #20]
 8005652:	4405      	add	r5, r0
 8005654:	4480      	add	r8, r0
 8005656:	9b05      	ldr	r3, [sp, #20]
 8005658:	2b00      	cmp	r3, #0
 800565a:	dd05      	ble.n	8005668 <_dtoa_r+0x858>
 800565c:	461a      	mov	r2, r3
 800565e:	9904      	ldr	r1, [sp, #16]
 8005660:	4620      	mov	r0, r4
 8005662:	f000 fd0d 	bl	8006080 <__lshift>
 8005666:	9004      	str	r0, [sp, #16]
 8005668:	f1b8 0f00 	cmp.w	r8, #0
 800566c:	dd05      	ble.n	800567a <_dtoa_r+0x86a>
 800566e:	4639      	mov	r1, r7
 8005670:	4642      	mov	r2, r8
 8005672:	4620      	mov	r0, r4
 8005674:	f000 fd04 	bl	8006080 <__lshift>
 8005678:	4607      	mov	r7, r0
 800567a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800567c:	b353      	cbz	r3, 80056d4 <_dtoa_r+0x8c4>
 800567e:	4639      	mov	r1, r7
 8005680:	9804      	ldr	r0, [sp, #16]
 8005682:	f000 fd51 	bl	8006128 <__mcmp>
 8005686:	2800      	cmp	r0, #0
 8005688:	da24      	bge.n	80056d4 <_dtoa_r+0x8c4>
 800568a:	2300      	movs	r3, #0
 800568c:	220a      	movs	r2, #10
 800568e:	9904      	ldr	r1, [sp, #16]
 8005690:	4620      	mov	r0, r4
 8005692:	f000 fb7f 	bl	8005d94 <__multadd>
 8005696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005698:	9004      	str	r0, [sp, #16]
 800569a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 814d 	beq.w	800593e <_dtoa_r+0xb2e>
 80056a4:	2300      	movs	r3, #0
 80056a6:	4631      	mov	r1, r6
 80056a8:	220a      	movs	r2, #10
 80056aa:	4620      	mov	r0, r4
 80056ac:	f000 fb72 	bl	8005d94 <__multadd>
 80056b0:	9b02      	ldr	r3, [sp, #8]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	4606      	mov	r6, r0
 80056b6:	dc4f      	bgt.n	8005758 <_dtoa_r+0x948>
 80056b8:	9b06      	ldr	r3, [sp, #24]
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	dd4c      	ble.n	8005758 <_dtoa_r+0x948>
 80056be:	e011      	b.n	80056e4 <_dtoa_r+0x8d4>
 80056c0:	d0c9      	beq.n	8005656 <_dtoa_r+0x846>
 80056c2:	9a05      	ldr	r2, [sp, #20]
 80056c4:	331c      	adds	r3, #28
 80056c6:	441a      	add	r2, r3
 80056c8:	9205      	str	r2, [sp, #20]
 80056ca:	441d      	add	r5, r3
 80056cc:	4498      	add	r8, r3
 80056ce:	e7c2      	b.n	8005656 <_dtoa_r+0x846>
 80056d0:	4603      	mov	r3, r0
 80056d2:	e7f6      	b.n	80056c2 <_dtoa_r+0x8b2>
 80056d4:	f1b9 0f00 	cmp.w	r9, #0
 80056d8:	dc38      	bgt.n	800574c <_dtoa_r+0x93c>
 80056da:	9b06      	ldr	r3, [sp, #24]
 80056dc:	2b02      	cmp	r3, #2
 80056de:	dd35      	ble.n	800574c <_dtoa_r+0x93c>
 80056e0:	f8cd 9008 	str.w	r9, [sp, #8]
 80056e4:	9b02      	ldr	r3, [sp, #8]
 80056e6:	b963      	cbnz	r3, 8005702 <_dtoa_r+0x8f2>
 80056e8:	4639      	mov	r1, r7
 80056ea:	2205      	movs	r2, #5
 80056ec:	4620      	mov	r0, r4
 80056ee:	f000 fb51 	bl	8005d94 <__multadd>
 80056f2:	4601      	mov	r1, r0
 80056f4:	4607      	mov	r7, r0
 80056f6:	9804      	ldr	r0, [sp, #16]
 80056f8:	f000 fd16 	bl	8006128 <__mcmp>
 80056fc:	2800      	cmp	r0, #0
 80056fe:	f73f adcc 	bgt.w	800529a <_dtoa_r+0x48a>
 8005702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005704:	465d      	mov	r5, fp
 8005706:	ea6f 0a03 	mvn.w	sl, r3
 800570a:	f04f 0900 	mov.w	r9, #0
 800570e:	4639      	mov	r1, r7
 8005710:	4620      	mov	r0, r4
 8005712:	f000 fb28 	bl	8005d66 <_Bfree>
 8005716:	2e00      	cmp	r6, #0
 8005718:	f43f aeb7 	beq.w	800548a <_dtoa_r+0x67a>
 800571c:	f1b9 0f00 	cmp.w	r9, #0
 8005720:	d005      	beq.n	800572e <_dtoa_r+0x91e>
 8005722:	45b1      	cmp	r9, r6
 8005724:	d003      	beq.n	800572e <_dtoa_r+0x91e>
 8005726:	4649      	mov	r1, r9
 8005728:	4620      	mov	r0, r4
 800572a:	f000 fb1c 	bl	8005d66 <_Bfree>
 800572e:	4631      	mov	r1, r6
 8005730:	4620      	mov	r0, r4
 8005732:	f000 fb18 	bl	8005d66 <_Bfree>
 8005736:	e6a8      	b.n	800548a <_dtoa_r+0x67a>
 8005738:	2700      	movs	r7, #0
 800573a:	463e      	mov	r6, r7
 800573c:	e7e1      	b.n	8005702 <_dtoa_r+0x8f2>
 800573e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005742:	463e      	mov	r6, r7
 8005744:	e5a9      	b.n	800529a <_dtoa_r+0x48a>
 8005746:	bf00      	nop
 8005748:	40240000 	.word	0x40240000
 800574c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800574e:	f8cd 9008 	str.w	r9, [sp, #8]
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 80fa 	beq.w	800594c <_dtoa_r+0xb3c>
 8005758:	2d00      	cmp	r5, #0
 800575a:	dd05      	ble.n	8005768 <_dtoa_r+0x958>
 800575c:	4631      	mov	r1, r6
 800575e:	462a      	mov	r2, r5
 8005760:	4620      	mov	r0, r4
 8005762:	f000 fc8d 	bl	8006080 <__lshift>
 8005766:	4606      	mov	r6, r0
 8005768:	9b07      	ldr	r3, [sp, #28]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d04c      	beq.n	8005808 <_dtoa_r+0x9f8>
 800576e:	6871      	ldr	r1, [r6, #4]
 8005770:	4620      	mov	r0, r4
 8005772:	f000 fac4 	bl	8005cfe <_Balloc>
 8005776:	6932      	ldr	r2, [r6, #16]
 8005778:	3202      	adds	r2, #2
 800577a:	4605      	mov	r5, r0
 800577c:	0092      	lsls	r2, r2, #2
 800577e:	f106 010c 	add.w	r1, r6, #12
 8005782:	300c      	adds	r0, #12
 8005784:	f000 fab0 	bl	8005ce8 <memcpy>
 8005788:	2201      	movs	r2, #1
 800578a:	4629      	mov	r1, r5
 800578c:	4620      	mov	r0, r4
 800578e:	f000 fc77 	bl	8006080 <__lshift>
 8005792:	9b00      	ldr	r3, [sp, #0]
 8005794:	f8cd b014 	str.w	fp, [sp, #20]
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	46b1      	mov	r9, r6
 800579e:	9307      	str	r3, [sp, #28]
 80057a0:	4606      	mov	r6, r0
 80057a2:	4639      	mov	r1, r7
 80057a4:	9804      	ldr	r0, [sp, #16]
 80057a6:	f7ff faa7 	bl	8004cf8 <quorem>
 80057aa:	4649      	mov	r1, r9
 80057ac:	4605      	mov	r5, r0
 80057ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80057b2:	9804      	ldr	r0, [sp, #16]
 80057b4:	f000 fcb8 	bl	8006128 <__mcmp>
 80057b8:	4632      	mov	r2, r6
 80057ba:	9000      	str	r0, [sp, #0]
 80057bc:	4639      	mov	r1, r7
 80057be:	4620      	mov	r0, r4
 80057c0:	f000 fccc 	bl	800615c <__mdiff>
 80057c4:	68c3      	ldr	r3, [r0, #12]
 80057c6:	4602      	mov	r2, r0
 80057c8:	bb03      	cbnz	r3, 800580c <_dtoa_r+0x9fc>
 80057ca:	4601      	mov	r1, r0
 80057cc:	9008      	str	r0, [sp, #32]
 80057ce:	9804      	ldr	r0, [sp, #16]
 80057d0:	f000 fcaa 	bl	8006128 <__mcmp>
 80057d4:	9a08      	ldr	r2, [sp, #32]
 80057d6:	4603      	mov	r3, r0
 80057d8:	4611      	mov	r1, r2
 80057da:	4620      	mov	r0, r4
 80057dc:	9308      	str	r3, [sp, #32]
 80057de:	f000 fac2 	bl	8005d66 <_Bfree>
 80057e2:	9b08      	ldr	r3, [sp, #32]
 80057e4:	b9a3      	cbnz	r3, 8005810 <_dtoa_r+0xa00>
 80057e6:	9a06      	ldr	r2, [sp, #24]
 80057e8:	b992      	cbnz	r2, 8005810 <_dtoa_r+0xa00>
 80057ea:	9a07      	ldr	r2, [sp, #28]
 80057ec:	b982      	cbnz	r2, 8005810 <_dtoa_r+0xa00>
 80057ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80057f2:	d029      	beq.n	8005848 <_dtoa_r+0xa38>
 80057f4:	9b00      	ldr	r3, [sp, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	dd01      	ble.n	80057fe <_dtoa_r+0x9ee>
 80057fa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80057fe:	9b05      	ldr	r3, [sp, #20]
 8005800:	1c5d      	adds	r5, r3, #1
 8005802:	f883 8000 	strb.w	r8, [r3]
 8005806:	e782      	b.n	800570e <_dtoa_r+0x8fe>
 8005808:	4630      	mov	r0, r6
 800580a:	e7c2      	b.n	8005792 <_dtoa_r+0x982>
 800580c:	2301      	movs	r3, #1
 800580e:	e7e3      	b.n	80057d8 <_dtoa_r+0x9c8>
 8005810:	9a00      	ldr	r2, [sp, #0]
 8005812:	2a00      	cmp	r2, #0
 8005814:	db04      	blt.n	8005820 <_dtoa_r+0xa10>
 8005816:	d125      	bne.n	8005864 <_dtoa_r+0xa54>
 8005818:	9a06      	ldr	r2, [sp, #24]
 800581a:	bb1a      	cbnz	r2, 8005864 <_dtoa_r+0xa54>
 800581c:	9a07      	ldr	r2, [sp, #28]
 800581e:	bb0a      	cbnz	r2, 8005864 <_dtoa_r+0xa54>
 8005820:	2b00      	cmp	r3, #0
 8005822:	ddec      	ble.n	80057fe <_dtoa_r+0x9ee>
 8005824:	2201      	movs	r2, #1
 8005826:	9904      	ldr	r1, [sp, #16]
 8005828:	4620      	mov	r0, r4
 800582a:	f000 fc29 	bl	8006080 <__lshift>
 800582e:	4639      	mov	r1, r7
 8005830:	9004      	str	r0, [sp, #16]
 8005832:	f000 fc79 	bl	8006128 <__mcmp>
 8005836:	2800      	cmp	r0, #0
 8005838:	dc03      	bgt.n	8005842 <_dtoa_r+0xa32>
 800583a:	d1e0      	bne.n	80057fe <_dtoa_r+0x9ee>
 800583c:	f018 0f01 	tst.w	r8, #1
 8005840:	d0dd      	beq.n	80057fe <_dtoa_r+0x9ee>
 8005842:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005846:	d1d8      	bne.n	80057fa <_dtoa_r+0x9ea>
 8005848:	9b05      	ldr	r3, [sp, #20]
 800584a:	9a05      	ldr	r2, [sp, #20]
 800584c:	1c5d      	adds	r5, r3, #1
 800584e:	2339      	movs	r3, #57	; 0x39
 8005850:	7013      	strb	r3, [r2, #0]
 8005852:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005856:	2b39      	cmp	r3, #57	; 0x39
 8005858:	f105 32ff 	add.w	r2, r5, #4294967295
 800585c:	d04f      	beq.n	80058fe <_dtoa_r+0xaee>
 800585e:	3301      	adds	r3, #1
 8005860:	7013      	strb	r3, [r2, #0]
 8005862:	e754      	b.n	800570e <_dtoa_r+0x8fe>
 8005864:	9a05      	ldr	r2, [sp, #20]
 8005866:	2b00      	cmp	r3, #0
 8005868:	f102 0501 	add.w	r5, r2, #1
 800586c:	dd06      	ble.n	800587c <_dtoa_r+0xa6c>
 800586e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005872:	d0e9      	beq.n	8005848 <_dtoa_r+0xa38>
 8005874:	f108 0801 	add.w	r8, r8, #1
 8005878:	9b05      	ldr	r3, [sp, #20]
 800587a:	e7c2      	b.n	8005802 <_dtoa_r+0x9f2>
 800587c:	9a02      	ldr	r2, [sp, #8]
 800587e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005882:	eba5 030b 	sub.w	r3, r5, fp
 8005886:	4293      	cmp	r3, r2
 8005888:	d021      	beq.n	80058ce <_dtoa_r+0xabe>
 800588a:	2300      	movs	r3, #0
 800588c:	220a      	movs	r2, #10
 800588e:	9904      	ldr	r1, [sp, #16]
 8005890:	4620      	mov	r0, r4
 8005892:	f000 fa7f 	bl	8005d94 <__multadd>
 8005896:	45b1      	cmp	r9, r6
 8005898:	9004      	str	r0, [sp, #16]
 800589a:	f04f 0300 	mov.w	r3, #0
 800589e:	f04f 020a 	mov.w	r2, #10
 80058a2:	4649      	mov	r1, r9
 80058a4:	4620      	mov	r0, r4
 80058a6:	d105      	bne.n	80058b4 <_dtoa_r+0xaa4>
 80058a8:	f000 fa74 	bl	8005d94 <__multadd>
 80058ac:	4681      	mov	r9, r0
 80058ae:	4606      	mov	r6, r0
 80058b0:	9505      	str	r5, [sp, #20]
 80058b2:	e776      	b.n	80057a2 <_dtoa_r+0x992>
 80058b4:	f000 fa6e 	bl	8005d94 <__multadd>
 80058b8:	4631      	mov	r1, r6
 80058ba:	4681      	mov	r9, r0
 80058bc:	2300      	movs	r3, #0
 80058be:	220a      	movs	r2, #10
 80058c0:	4620      	mov	r0, r4
 80058c2:	f000 fa67 	bl	8005d94 <__multadd>
 80058c6:	4606      	mov	r6, r0
 80058c8:	e7f2      	b.n	80058b0 <_dtoa_r+0xaa0>
 80058ca:	f04f 0900 	mov.w	r9, #0
 80058ce:	2201      	movs	r2, #1
 80058d0:	9904      	ldr	r1, [sp, #16]
 80058d2:	4620      	mov	r0, r4
 80058d4:	f000 fbd4 	bl	8006080 <__lshift>
 80058d8:	4639      	mov	r1, r7
 80058da:	9004      	str	r0, [sp, #16]
 80058dc:	f000 fc24 	bl	8006128 <__mcmp>
 80058e0:	2800      	cmp	r0, #0
 80058e2:	dcb6      	bgt.n	8005852 <_dtoa_r+0xa42>
 80058e4:	d102      	bne.n	80058ec <_dtoa_r+0xadc>
 80058e6:	f018 0f01 	tst.w	r8, #1
 80058ea:	d1b2      	bne.n	8005852 <_dtoa_r+0xa42>
 80058ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80058f0:	2b30      	cmp	r3, #48	; 0x30
 80058f2:	f105 32ff 	add.w	r2, r5, #4294967295
 80058f6:	f47f af0a 	bne.w	800570e <_dtoa_r+0x8fe>
 80058fa:	4615      	mov	r5, r2
 80058fc:	e7f6      	b.n	80058ec <_dtoa_r+0xadc>
 80058fe:	4593      	cmp	fp, r2
 8005900:	d105      	bne.n	800590e <_dtoa_r+0xafe>
 8005902:	2331      	movs	r3, #49	; 0x31
 8005904:	f10a 0a01 	add.w	sl, sl, #1
 8005908:	f88b 3000 	strb.w	r3, [fp]
 800590c:	e6ff      	b.n	800570e <_dtoa_r+0x8fe>
 800590e:	4615      	mov	r5, r2
 8005910:	e79f      	b.n	8005852 <_dtoa_r+0xa42>
 8005912:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005978 <_dtoa_r+0xb68>
 8005916:	e007      	b.n	8005928 <_dtoa_r+0xb18>
 8005918:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800591a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800597c <_dtoa_r+0xb6c>
 800591e:	b11b      	cbz	r3, 8005928 <_dtoa_r+0xb18>
 8005920:	f10b 0308 	add.w	r3, fp, #8
 8005924:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005926:	6013      	str	r3, [r2, #0]
 8005928:	4658      	mov	r0, fp
 800592a:	b017      	add	sp, #92	; 0x5c
 800592c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005930:	9b06      	ldr	r3, [sp, #24]
 8005932:	2b01      	cmp	r3, #1
 8005934:	f77f ae35 	ble.w	80055a2 <_dtoa_r+0x792>
 8005938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800593a:	9307      	str	r3, [sp, #28]
 800593c:	e649      	b.n	80055d2 <_dtoa_r+0x7c2>
 800593e:	9b02      	ldr	r3, [sp, #8]
 8005940:	2b00      	cmp	r3, #0
 8005942:	dc03      	bgt.n	800594c <_dtoa_r+0xb3c>
 8005944:	9b06      	ldr	r3, [sp, #24]
 8005946:	2b02      	cmp	r3, #2
 8005948:	f73f aecc 	bgt.w	80056e4 <_dtoa_r+0x8d4>
 800594c:	465d      	mov	r5, fp
 800594e:	4639      	mov	r1, r7
 8005950:	9804      	ldr	r0, [sp, #16]
 8005952:	f7ff f9d1 	bl	8004cf8 <quorem>
 8005956:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800595a:	f805 8b01 	strb.w	r8, [r5], #1
 800595e:	9a02      	ldr	r2, [sp, #8]
 8005960:	eba5 030b 	sub.w	r3, r5, fp
 8005964:	429a      	cmp	r2, r3
 8005966:	ddb0      	ble.n	80058ca <_dtoa_r+0xaba>
 8005968:	2300      	movs	r3, #0
 800596a:	220a      	movs	r2, #10
 800596c:	9904      	ldr	r1, [sp, #16]
 800596e:	4620      	mov	r0, r4
 8005970:	f000 fa10 	bl	8005d94 <__multadd>
 8005974:	9004      	str	r0, [sp, #16]
 8005976:	e7ea      	b.n	800594e <_dtoa_r+0xb3e>
 8005978:	08006654 	.word	0x08006654
 800597c:	08006656 	.word	0x08006656

08005980 <__sflush_r>:
 8005980:	898a      	ldrh	r2, [r1, #12]
 8005982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005986:	4605      	mov	r5, r0
 8005988:	0710      	lsls	r0, r2, #28
 800598a:	460c      	mov	r4, r1
 800598c:	d458      	bmi.n	8005a40 <__sflush_r+0xc0>
 800598e:	684b      	ldr	r3, [r1, #4]
 8005990:	2b00      	cmp	r3, #0
 8005992:	dc05      	bgt.n	80059a0 <__sflush_r+0x20>
 8005994:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005996:	2b00      	cmp	r3, #0
 8005998:	dc02      	bgt.n	80059a0 <__sflush_r+0x20>
 800599a:	2000      	movs	r0, #0
 800599c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059a2:	2e00      	cmp	r6, #0
 80059a4:	d0f9      	beq.n	800599a <__sflush_r+0x1a>
 80059a6:	2300      	movs	r3, #0
 80059a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80059ac:	682f      	ldr	r7, [r5, #0]
 80059ae:	6a21      	ldr	r1, [r4, #32]
 80059b0:	602b      	str	r3, [r5, #0]
 80059b2:	d032      	beq.n	8005a1a <__sflush_r+0x9a>
 80059b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80059b6:	89a3      	ldrh	r3, [r4, #12]
 80059b8:	075a      	lsls	r2, r3, #29
 80059ba:	d505      	bpl.n	80059c8 <__sflush_r+0x48>
 80059bc:	6863      	ldr	r3, [r4, #4]
 80059be:	1ac0      	subs	r0, r0, r3
 80059c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80059c2:	b10b      	cbz	r3, 80059c8 <__sflush_r+0x48>
 80059c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059c6:	1ac0      	subs	r0, r0, r3
 80059c8:	2300      	movs	r3, #0
 80059ca:	4602      	mov	r2, r0
 80059cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059ce:	6a21      	ldr	r1, [r4, #32]
 80059d0:	4628      	mov	r0, r5
 80059d2:	47b0      	blx	r6
 80059d4:	1c43      	adds	r3, r0, #1
 80059d6:	89a3      	ldrh	r3, [r4, #12]
 80059d8:	d106      	bne.n	80059e8 <__sflush_r+0x68>
 80059da:	6829      	ldr	r1, [r5, #0]
 80059dc:	291d      	cmp	r1, #29
 80059de:	d848      	bhi.n	8005a72 <__sflush_r+0xf2>
 80059e0:	4a29      	ldr	r2, [pc, #164]	; (8005a88 <__sflush_r+0x108>)
 80059e2:	40ca      	lsrs	r2, r1
 80059e4:	07d6      	lsls	r6, r2, #31
 80059e6:	d544      	bpl.n	8005a72 <__sflush_r+0xf2>
 80059e8:	2200      	movs	r2, #0
 80059ea:	6062      	str	r2, [r4, #4]
 80059ec:	04d9      	lsls	r1, r3, #19
 80059ee:	6922      	ldr	r2, [r4, #16]
 80059f0:	6022      	str	r2, [r4, #0]
 80059f2:	d504      	bpl.n	80059fe <__sflush_r+0x7e>
 80059f4:	1c42      	adds	r2, r0, #1
 80059f6:	d101      	bne.n	80059fc <__sflush_r+0x7c>
 80059f8:	682b      	ldr	r3, [r5, #0]
 80059fa:	b903      	cbnz	r3, 80059fe <__sflush_r+0x7e>
 80059fc:	6560      	str	r0, [r4, #84]	; 0x54
 80059fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a00:	602f      	str	r7, [r5, #0]
 8005a02:	2900      	cmp	r1, #0
 8005a04:	d0c9      	beq.n	800599a <__sflush_r+0x1a>
 8005a06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a0a:	4299      	cmp	r1, r3
 8005a0c:	d002      	beq.n	8005a14 <__sflush_r+0x94>
 8005a0e:	4628      	mov	r0, r5
 8005a10:	f000 fc5e 	bl	80062d0 <_free_r>
 8005a14:	2000      	movs	r0, #0
 8005a16:	6360      	str	r0, [r4, #52]	; 0x34
 8005a18:	e7c0      	b.n	800599c <__sflush_r+0x1c>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	47b0      	blx	r6
 8005a20:	1c41      	adds	r1, r0, #1
 8005a22:	d1c8      	bne.n	80059b6 <__sflush_r+0x36>
 8005a24:	682b      	ldr	r3, [r5, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d0c5      	beq.n	80059b6 <__sflush_r+0x36>
 8005a2a:	2b1d      	cmp	r3, #29
 8005a2c:	d001      	beq.n	8005a32 <__sflush_r+0xb2>
 8005a2e:	2b16      	cmp	r3, #22
 8005a30:	d101      	bne.n	8005a36 <__sflush_r+0xb6>
 8005a32:	602f      	str	r7, [r5, #0]
 8005a34:	e7b1      	b.n	800599a <__sflush_r+0x1a>
 8005a36:	89a3      	ldrh	r3, [r4, #12]
 8005a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a3c:	81a3      	strh	r3, [r4, #12]
 8005a3e:	e7ad      	b.n	800599c <__sflush_r+0x1c>
 8005a40:	690f      	ldr	r7, [r1, #16]
 8005a42:	2f00      	cmp	r7, #0
 8005a44:	d0a9      	beq.n	800599a <__sflush_r+0x1a>
 8005a46:	0793      	lsls	r3, r2, #30
 8005a48:	680e      	ldr	r6, [r1, #0]
 8005a4a:	bf08      	it	eq
 8005a4c:	694b      	ldreq	r3, [r1, #20]
 8005a4e:	600f      	str	r7, [r1, #0]
 8005a50:	bf18      	it	ne
 8005a52:	2300      	movne	r3, #0
 8005a54:	eba6 0807 	sub.w	r8, r6, r7
 8005a58:	608b      	str	r3, [r1, #8]
 8005a5a:	f1b8 0f00 	cmp.w	r8, #0
 8005a5e:	dd9c      	ble.n	800599a <__sflush_r+0x1a>
 8005a60:	4643      	mov	r3, r8
 8005a62:	463a      	mov	r2, r7
 8005a64:	6a21      	ldr	r1, [r4, #32]
 8005a66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a68:	4628      	mov	r0, r5
 8005a6a:	47b0      	blx	r6
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	dc06      	bgt.n	8005a7e <__sflush_r+0xfe>
 8005a70:	89a3      	ldrh	r3, [r4, #12]
 8005a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a76:	81a3      	strh	r3, [r4, #12]
 8005a78:	f04f 30ff 	mov.w	r0, #4294967295
 8005a7c:	e78e      	b.n	800599c <__sflush_r+0x1c>
 8005a7e:	4407      	add	r7, r0
 8005a80:	eba8 0800 	sub.w	r8, r8, r0
 8005a84:	e7e9      	b.n	8005a5a <__sflush_r+0xda>
 8005a86:	bf00      	nop
 8005a88:	20400001 	.word	0x20400001

08005a8c <_fflush_r>:
 8005a8c:	b538      	push	{r3, r4, r5, lr}
 8005a8e:	690b      	ldr	r3, [r1, #16]
 8005a90:	4605      	mov	r5, r0
 8005a92:	460c      	mov	r4, r1
 8005a94:	b1db      	cbz	r3, 8005ace <_fflush_r+0x42>
 8005a96:	b118      	cbz	r0, 8005aa0 <_fflush_r+0x14>
 8005a98:	6983      	ldr	r3, [r0, #24]
 8005a9a:	b90b      	cbnz	r3, 8005aa0 <_fflush_r+0x14>
 8005a9c:	f000 f860 	bl	8005b60 <__sinit>
 8005aa0:	4b0c      	ldr	r3, [pc, #48]	; (8005ad4 <_fflush_r+0x48>)
 8005aa2:	429c      	cmp	r4, r3
 8005aa4:	d109      	bne.n	8005aba <_fflush_r+0x2e>
 8005aa6:	686c      	ldr	r4, [r5, #4]
 8005aa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aac:	b17b      	cbz	r3, 8005ace <_fflush_r+0x42>
 8005aae:	4621      	mov	r1, r4
 8005ab0:	4628      	mov	r0, r5
 8005ab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ab6:	f7ff bf63 	b.w	8005980 <__sflush_r>
 8005aba:	4b07      	ldr	r3, [pc, #28]	; (8005ad8 <_fflush_r+0x4c>)
 8005abc:	429c      	cmp	r4, r3
 8005abe:	d101      	bne.n	8005ac4 <_fflush_r+0x38>
 8005ac0:	68ac      	ldr	r4, [r5, #8]
 8005ac2:	e7f1      	b.n	8005aa8 <_fflush_r+0x1c>
 8005ac4:	4b05      	ldr	r3, [pc, #20]	; (8005adc <_fflush_r+0x50>)
 8005ac6:	429c      	cmp	r4, r3
 8005ac8:	bf08      	it	eq
 8005aca:	68ec      	ldreq	r4, [r5, #12]
 8005acc:	e7ec      	b.n	8005aa8 <_fflush_r+0x1c>
 8005ace:	2000      	movs	r0, #0
 8005ad0:	bd38      	pop	{r3, r4, r5, pc}
 8005ad2:	bf00      	nop
 8005ad4:	08006684 	.word	0x08006684
 8005ad8:	080066a4 	.word	0x080066a4
 8005adc:	08006664 	.word	0x08006664

08005ae0 <std>:
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	b510      	push	{r4, lr}
 8005ae4:	4604      	mov	r4, r0
 8005ae6:	e9c0 3300 	strd	r3, r3, [r0]
 8005aea:	6083      	str	r3, [r0, #8]
 8005aec:	8181      	strh	r1, [r0, #12]
 8005aee:	6643      	str	r3, [r0, #100]	; 0x64
 8005af0:	81c2      	strh	r2, [r0, #14]
 8005af2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005af6:	6183      	str	r3, [r0, #24]
 8005af8:	4619      	mov	r1, r3
 8005afa:	2208      	movs	r2, #8
 8005afc:	305c      	adds	r0, #92	; 0x5c
 8005afe:	f7fe fcf3 	bl	80044e8 <memset>
 8005b02:	4b05      	ldr	r3, [pc, #20]	; (8005b18 <std+0x38>)
 8005b04:	6263      	str	r3, [r4, #36]	; 0x24
 8005b06:	4b05      	ldr	r3, [pc, #20]	; (8005b1c <std+0x3c>)
 8005b08:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b0a:	4b05      	ldr	r3, [pc, #20]	; (8005b20 <std+0x40>)
 8005b0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b0e:	4b05      	ldr	r3, [pc, #20]	; (8005b24 <std+0x44>)
 8005b10:	6224      	str	r4, [r4, #32]
 8005b12:	6323      	str	r3, [r4, #48]	; 0x30
 8005b14:	bd10      	pop	{r4, pc}
 8005b16:	bf00      	nop
 8005b18:	08006441 	.word	0x08006441
 8005b1c:	08006463 	.word	0x08006463
 8005b20:	0800649b 	.word	0x0800649b
 8005b24:	080064bf 	.word	0x080064bf

08005b28 <_cleanup_r>:
 8005b28:	4901      	ldr	r1, [pc, #4]	; (8005b30 <_cleanup_r+0x8>)
 8005b2a:	f000 b885 	b.w	8005c38 <_fwalk_reent>
 8005b2e:	bf00      	nop
 8005b30:	08005a8d 	.word	0x08005a8d

08005b34 <__sfmoreglue>:
 8005b34:	b570      	push	{r4, r5, r6, lr}
 8005b36:	1e4a      	subs	r2, r1, #1
 8005b38:	2568      	movs	r5, #104	; 0x68
 8005b3a:	4355      	muls	r5, r2
 8005b3c:	460e      	mov	r6, r1
 8005b3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005b42:	f000 fc13 	bl	800636c <_malloc_r>
 8005b46:	4604      	mov	r4, r0
 8005b48:	b140      	cbz	r0, 8005b5c <__sfmoreglue+0x28>
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	e9c0 1600 	strd	r1, r6, [r0]
 8005b50:	300c      	adds	r0, #12
 8005b52:	60a0      	str	r0, [r4, #8]
 8005b54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005b58:	f7fe fcc6 	bl	80044e8 <memset>
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	bd70      	pop	{r4, r5, r6, pc}

08005b60 <__sinit>:
 8005b60:	6983      	ldr	r3, [r0, #24]
 8005b62:	b510      	push	{r4, lr}
 8005b64:	4604      	mov	r4, r0
 8005b66:	bb33      	cbnz	r3, 8005bb6 <__sinit+0x56>
 8005b68:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005b6c:	6503      	str	r3, [r0, #80]	; 0x50
 8005b6e:	4b12      	ldr	r3, [pc, #72]	; (8005bb8 <__sinit+0x58>)
 8005b70:	4a12      	ldr	r2, [pc, #72]	; (8005bbc <__sinit+0x5c>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6282      	str	r2, [r0, #40]	; 0x28
 8005b76:	4298      	cmp	r0, r3
 8005b78:	bf04      	itt	eq
 8005b7a:	2301      	moveq	r3, #1
 8005b7c:	6183      	streq	r3, [r0, #24]
 8005b7e:	f000 f81f 	bl	8005bc0 <__sfp>
 8005b82:	6060      	str	r0, [r4, #4]
 8005b84:	4620      	mov	r0, r4
 8005b86:	f000 f81b 	bl	8005bc0 <__sfp>
 8005b8a:	60a0      	str	r0, [r4, #8]
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	f000 f817 	bl	8005bc0 <__sfp>
 8005b92:	2200      	movs	r2, #0
 8005b94:	60e0      	str	r0, [r4, #12]
 8005b96:	2104      	movs	r1, #4
 8005b98:	6860      	ldr	r0, [r4, #4]
 8005b9a:	f7ff ffa1 	bl	8005ae0 <std>
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	2109      	movs	r1, #9
 8005ba2:	68a0      	ldr	r0, [r4, #8]
 8005ba4:	f7ff ff9c 	bl	8005ae0 <std>
 8005ba8:	2202      	movs	r2, #2
 8005baa:	2112      	movs	r1, #18
 8005bac:	68e0      	ldr	r0, [r4, #12]
 8005bae:	f7ff ff97 	bl	8005ae0 <std>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	61a3      	str	r3, [r4, #24]
 8005bb6:	bd10      	pop	{r4, pc}
 8005bb8:	08006640 	.word	0x08006640
 8005bbc:	08005b29 	.word	0x08005b29

08005bc0 <__sfp>:
 8005bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc2:	4b1b      	ldr	r3, [pc, #108]	; (8005c30 <__sfp+0x70>)
 8005bc4:	681e      	ldr	r6, [r3, #0]
 8005bc6:	69b3      	ldr	r3, [r6, #24]
 8005bc8:	4607      	mov	r7, r0
 8005bca:	b913      	cbnz	r3, 8005bd2 <__sfp+0x12>
 8005bcc:	4630      	mov	r0, r6
 8005bce:	f7ff ffc7 	bl	8005b60 <__sinit>
 8005bd2:	3648      	adds	r6, #72	; 0x48
 8005bd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	d503      	bpl.n	8005be4 <__sfp+0x24>
 8005bdc:	6833      	ldr	r3, [r6, #0]
 8005bde:	b133      	cbz	r3, 8005bee <__sfp+0x2e>
 8005be0:	6836      	ldr	r6, [r6, #0]
 8005be2:	e7f7      	b.n	8005bd4 <__sfp+0x14>
 8005be4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005be8:	b16d      	cbz	r5, 8005c06 <__sfp+0x46>
 8005bea:	3468      	adds	r4, #104	; 0x68
 8005bec:	e7f4      	b.n	8005bd8 <__sfp+0x18>
 8005bee:	2104      	movs	r1, #4
 8005bf0:	4638      	mov	r0, r7
 8005bf2:	f7ff ff9f 	bl	8005b34 <__sfmoreglue>
 8005bf6:	6030      	str	r0, [r6, #0]
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	d1f1      	bne.n	8005be0 <__sfp+0x20>
 8005bfc:	230c      	movs	r3, #12
 8005bfe:	603b      	str	r3, [r7, #0]
 8005c00:	4604      	mov	r4, r0
 8005c02:	4620      	mov	r0, r4
 8005c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c06:	4b0b      	ldr	r3, [pc, #44]	; (8005c34 <__sfp+0x74>)
 8005c08:	6665      	str	r5, [r4, #100]	; 0x64
 8005c0a:	e9c4 5500 	strd	r5, r5, [r4]
 8005c0e:	60a5      	str	r5, [r4, #8]
 8005c10:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005c14:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005c18:	2208      	movs	r2, #8
 8005c1a:	4629      	mov	r1, r5
 8005c1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005c20:	f7fe fc62 	bl	80044e8 <memset>
 8005c24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005c28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005c2c:	e7e9      	b.n	8005c02 <__sfp+0x42>
 8005c2e:	bf00      	nop
 8005c30:	08006640 	.word	0x08006640
 8005c34:	ffff0001 	.word	0xffff0001

08005c38 <_fwalk_reent>:
 8005c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c3c:	4680      	mov	r8, r0
 8005c3e:	4689      	mov	r9, r1
 8005c40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005c44:	2600      	movs	r6, #0
 8005c46:	b914      	cbnz	r4, 8005c4e <_fwalk_reent+0x16>
 8005c48:	4630      	mov	r0, r6
 8005c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c4e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005c52:	3f01      	subs	r7, #1
 8005c54:	d501      	bpl.n	8005c5a <_fwalk_reent+0x22>
 8005c56:	6824      	ldr	r4, [r4, #0]
 8005c58:	e7f5      	b.n	8005c46 <_fwalk_reent+0xe>
 8005c5a:	89ab      	ldrh	r3, [r5, #12]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d907      	bls.n	8005c70 <_fwalk_reent+0x38>
 8005c60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c64:	3301      	adds	r3, #1
 8005c66:	d003      	beq.n	8005c70 <_fwalk_reent+0x38>
 8005c68:	4629      	mov	r1, r5
 8005c6a:	4640      	mov	r0, r8
 8005c6c:	47c8      	blx	r9
 8005c6e:	4306      	orrs	r6, r0
 8005c70:	3568      	adds	r5, #104	; 0x68
 8005c72:	e7ee      	b.n	8005c52 <_fwalk_reent+0x1a>

08005c74 <_localeconv_r>:
 8005c74:	4b04      	ldr	r3, [pc, #16]	; (8005c88 <_localeconv_r+0x14>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6a18      	ldr	r0, [r3, #32]
 8005c7a:	4b04      	ldr	r3, [pc, #16]	; (8005c8c <_localeconv_r+0x18>)
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	bf08      	it	eq
 8005c80:	4618      	moveq	r0, r3
 8005c82:	30f0      	adds	r0, #240	; 0xf0
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	2000000c 	.word	0x2000000c
 8005c8c:	20000070 	.word	0x20000070

08005c90 <__swhatbuf_r>:
 8005c90:	b570      	push	{r4, r5, r6, lr}
 8005c92:	460e      	mov	r6, r1
 8005c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c98:	2900      	cmp	r1, #0
 8005c9a:	b096      	sub	sp, #88	; 0x58
 8005c9c:	4614      	mov	r4, r2
 8005c9e:	461d      	mov	r5, r3
 8005ca0:	da07      	bge.n	8005cb2 <__swhatbuf_r+0x22>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	602b      	str	r3, [r5, #0]
 8005ca6:	89b3      	ldrh	r3, [r6, #12]
 8005ca8:	061a      	lsls	r2, r3, #24
 8005caa:	d410      	bmi.n	8005cce <__swhatbuf_r+0x3e>
 8005cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cb0:	e00e      	b.n	8005cd0 <__swhatbuf_r+0x40>
 8005cb2:	466a      	mov	r2, sp
 8005cb4:	f000 fc2a 	bl	800650c <_fstat_r>
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	dbf2      	blt.n	8005ca2 <__swhatbuf_r+0x12>
 8005cbc:	9a01      	ldr	r2, [sp, #4]
 8005cbe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005cc2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005cc6:	425a      	negs	r2, r3
 8005cc8:	415a      	adcs	r2, r3
 8005cca:	602a      	str	r2, [r5, #0]
 8005ccc:	e7ee      	b.n	8005cac <__swhatbuf_r+0x1c>
 8005cce:	2340      	movs	r3, #64	; 0x40
 8005cd0:	2000      	movs	r0, #0
 8005cd2:	6023      	str	r3, [r4, #0]
 8005cd4:	b016      	add	sp, #88	; 0x58
 8005cd6:	bd70      	pop	{r4, r5, r6, pc}

08005cd8 <malloc>:
 8005cd8:	4b02      	ldr	r3, [pc, #8]	; (8005ce4 <malloc+0xc>)
 8005cda:	4601      	mov	r1, r0
 8005cdc:	6818      	ldr	r0, [r3, #0]
 8005cde:	f000 bb45 	b.w	800636c <_malloc_r>
 8005ce2:	bf00      	nop
 8005ce4:	2000000c 	.word	0x2000000c

08005ce8 <memcpy>:
 8005ce8:	b510      	push	{r4, lr}
 8005cea:	1e43      	subs	r3, r0, #1
 8005cec:	440a      	add	r2, r1
 8005cee:	4291      	cmp	r1, r2
 8005cf0:	d100      	bne.n	8005cf4 <memcpy+0xc>
 8005cf2:	bd10      	pop	{r4, pc}
 8005cf4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cfc:	e7f7      	b.n	8005cee <memcpy+0x6>

08005cfe <_Balloc>:
 8005cfe:	b570      	push	{r4, r5, r6, lr}
 8005d00:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005d02:	4604      	mov	r4, r0
 8005d04:	460e      	mov	r6, r1
 8005d06:	b93d      	cbnz	r5, 8005d18 <_Balloc+0x1a>
 8005d08:	2010      	movs	r0, #16
 8005d0a:	f7ff ffe5 	bl	8005cd8 <malloc>
 8005d0e:	6260      	str	r0, [r4, #36]	; 0x24
 8005d10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005d14:	6005      	str	r5, [r0, #0]
 8005d16:	60c5      	str	r5, [r0, #12]
 8005d18:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005d1a:	68eb      	ldr	r3, [r5, #12]
 8005d1c:	b183      	cbz	r3, 8005d40 <_Balloc+0x42>
 8005d1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005d26:	b9b8      	cbnz	r0, 8005d58 <_Balloc+0x5a>
 8005d28:	2101      	movs	r1, #1
 8005d2a:	fa01 f506 	lsl.w	r5, r1, r6
 8005d2e:	1d6a      	adds	r2, r5, #5
 8005d30:	0092      	lsls	r2, r2, #2
 8005d32:	4620      	mov	r0, r4
 8005d34:	f000 fabe 	bl	80062b4 <_calloc_r>
 8005d38:	b160      	cbz	r0, 8005d54 <_Balloc+0x56>
 8005d3a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005d3e:	e00e      	b.n	8005d5e <_Balloc+0x60>
 8005d40:	2221      	movs	r2, #33	; 0x21
 8005d42:	2104      	movs	r1, #4
 8005d44:	4620      	mov	r0, r4
 8005d46:	f000 fab5 	bl	80062b4 <_calloc_r>
 8005d4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d4c:	60e8      	str	r0, [r5, #12]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1e4      	bne.n	8005d1e <_Balloc+0x20>
 8005d54:	2000      	movs	r0, #0
 8005d56:	bd70      	pop	{r4, r5, r6, pc}
 8005d58:	6802      	ldr	r2, [r0, #0]
 8005d5a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005d5e:	2300      	movs	r3, #0
 8005d60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d64:	e7f7      	b.n	8005d56 <_Balloc+0x58>

08005d66 <_Bfree>:
 8005d66:	b570      	push	{r4, r5, r6, lr}
 8005d68:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005d6a:	4606      	mov	r6, r0
 8005d6c:	460d      	mov	r5, r1
 8005d6e:	b93c      	cbnz	r4, 8005d80 <_Bfree+0x1a>
 8005d70:	2010      	movs	r0, #16
 8005d72:	f7ff ffb1 	bl	8005cd8 <malloc>
 8005d76:	6270      	str	r0, [r6, #36]	; 0x24
 8005d78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d7c:	6004      	str	r4, [r0, #0]
 8005d7e:	60c4      	str	r4, [r0, #12]
 8005d80:	b13d      	cbz	r5, 8005d92 <_Bfree+0x2c>
 8005d82:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005d84:	686a      	ldr	r2, [r5, #4]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d8c:	6029      	str	r1, [r5, #0]
 8005d8e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005d92:	bd70      	pop	{r4, r5, r6, pc}

08005d94 <__multadd>:
 8005d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d98:	690d      	ldr	r5, [r1, #16]
 8005d9a:	461f      	mov	r7, r3
 8005d9c:	4606      	mov	r6, r0
 8005d9e:	460c      	mov	r4, r1
 8005da0:	f101 0c14 	add.w	ip, r1, #20
 8005da4:	2300      	movs	r3, #0
 8005da6:	f8dc 0000 	ldr.w	r0, [ip]
 8005daa:	b281      	uxth	r1, r0
 8005dac:	fb02 7101 	mla	r1, r2, r1, r7
 8005db0:	0c0f      	lsrs	r7, r1, #16
 8005db2:	0c00      	lsrs	r0, r0, #16
 8005db4:	fb02 7000 	mla	r0, r2, r0, r7
 8005db8:	b289      	uxth	r1, r1
 8005dba:	3301      	adds	r3, #1
 8005dbc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005dc0:	429d      	cmp	r5, r3
 8005dc2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005dc6:	f84c 1b04 	str.w	r1, [ip], #4
 8005dca:	dcec      	bgt.n	8005da6 <__multadd+0x12>
 8005dcc:	b1d7      	cbz	r7, 8005e04 <__multadd+0x70>
 8005dce:	68a3      	ldr	r3, [r4, #8]
 8005dd0:	42ab      	cmp	r3, r5
 8005dd2:	dc12      	bgt.n	8005dfa <__multadd+0x66>
 8005dd4:	6861      	ldr	r1, [r4, #4]
 8005dd6:	4630      	mov	r0, r6
 8005dd8:	3101      	adds	r1, #1
 8005dda:	f7ff ff90 	bl	8005cfe <_Balloc>
 8005dde:	6922      	ldr	r2, [r4, #16]
 8005de0:	3202      	adds	r2, #2
 8005de2:	f104 010c 	add.w	r1, r4, #12
 8005de6:	4680      	mov	r8, r0
 8005de8:	0092      	lsls	r2, r2, #2
 8005dea:	300c      	adds	r0, #12
 8005dec:	f7ff ff7c 	bl	8005ce8 <memcpy>
 8005df0:	4621      	mov	r1, r4
 8005df2:	4630      	mov	r0, r6
 8005df4:	f7ff ffb7 	bl	8005d66 <_Bfree>
 8005df8:	4644      	mov	r4, r8
 8005dfa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005dfe:	3501      	adds	r5, #1
 8005e00:	615f      	str	r7, [r3, #20]
 8005e02:	6125      	str	r5, [r4, #16]
 8005e04:	4620      	mov	r0, r4
 8005e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005e0a <__hi0bits>:
 8005e0a:	0c02      	lsrs	r2, r0, #16
 8005e0c:	0412      	lsls	r2, r2, #16
 8005e0e:	4603      	mov	r3, r0
 8005e10:	b9b2      	cbnz	r2, 8005e40 <__hi0bits+0x36>
 8005e12:	0403      	lsls	r3, r0, #16
 8005e14:	2010      	movs	r0, #16
 8005e16:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005e1a:	bf04      	itt	eq
 8005e1c:	021b      	lsleq	r3, r3, #8
 8005e1e:	3008      	addeq	r0, #8
 8005e20:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005e24:	bf04      	itt	eq
 8005e26:	011b      	lsleq	r3, r3, #4
 8005e28:	3004      	addeq	r0, #4
 8005e2a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005e2e:	bf04      	itt	eq
 8005e30:	009b      	lsleq	r3, r3, #2
 8005e32:	3002      	addeq	r0, #2
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	db06      	blt.n	8005e46 <__hi0bits+0x3c>
 8005e38:	005b      	lsls	r3, r3, #1
 8005e3a:	d503      	bpl.n	8005e44 <__hi0bits+0x3a>
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	4770      	bx	lr
 8005e40:	2000      	movs	r0, #0
 8005e42:	e7e8      	b.n	8005e16 <__hi0bits+0xc>
 8005e44:	2020      	movs	r0, #32
 8005e46:	4770      	bx	lr

08005e48 <__lo0bits>:
 8005e48:	6803      	ldr	r3, [r0, #0]
 8005e4a:	f013 0207 	ands.w	r2, r3, #7
 8005e4e:	4601      	mov	r1, r0
 8005e50:	d00b      	beq.n	8005e6a <__lo0bits+0x22>
 8005e52:	07da      	lsls	r2, r3, #31
 8005e54:	d423      	bmi.n	8005e9e <__lo0bits+0x56>
 8005e56:	0798      	lsls	r0, r3, #30
 8005e58:	bf49      	itett	mi
 8005e5a:	085b      	lsrmi	r3, r3, #1
 8005e5c:	089b      	lsrpl	r3, r3, #2
 8005e5e:	2001      	movmi	r0, #1
 8005e60:	600b      	strmi	r3, [r1, #0]
 8005e62:	bf5c      	itt	pl
 8005e64:	600b      	strpl	r3, [r1, #0]
 8005e66:	2002      	movpl	r0, #2
 8005e68:	4770      	bx	lr
 8005e6a:	b298      	uxth	r0, r3
 8005e6c:	b9a8      	cbnz	r0, 8005e9a <__lo0bits+0x52>
 8005e6e:	0c1b      	lsrs	r3, r3, #16
 8005e70:	2010      	movs	r0, #16
 8005e72:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005e76:	bf04      	itt	eq
 8005e78:	0a1b      	lsreq	r3, r3, #8
 8005e7a:	3008      	addeq	r0, #8
 8005e7c:	071a      	lsls	r2, r3, #28
 8005e7e:	bf04      	itt	eq
 8005e80:	091b      	lsreq	r3, r3, #4
 8005e82:	3004      	addeq	r0, #4
 8005e84:	079a      	lsls	r2, r3, #30
 8005e86:	bf04      	itt	eq
 8005e88:	089b      	lsreq	r3, r3, #2
 8005e8a:	3002      	addeq	r0, #2
 8005e8c:	07da      	lsls	r2, r3, #31
 8005e8e:	d402      	bmi.n	8005e96 <__lo0bits+0x4e>
 8005e90:	085b      	lsrs	r3, r3, #1
 8005e92:	d006      	beq.n	8005ea2 <__lo0bits+0x5a>
 8005e94:	3001      	adds	r0, #1
 8005e96:	600b      	str	r3, [r1, #0]
 8005e98:	4770      	bx	lr
 8005e9a:	4610      	mov	r0, r2
 8005e9c:	e7e9      	b.n	8005e72 <__lo0bits+0x2a>
 8005e9e:	2000      	movs	r0, #0
 8005ea0:	4770      	bx	lr
 8005ea2:	2020      	movs	r0, #32
 8005ea4:	4770      	bx	lr

08005ea6 <__i2b>:
 8005ea6:	b510      	push	{r4, lr}
 8005ea8:	460c      	mov	r4, r1
 8005eaa:	2101      	movs	r1, #1
 8005eac:	f7ff ff27 	bl	8005cfe <_Balloc>
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	6144      	str	r4, [r0, #20]
 8005eb4:	6102      	str	r2, [r0, #16]
 8005eb6:	bd10      	pop	{r4, pc}

08005eb8 <__multiply>:
 8005eb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ebc:	4614      	mov	r4, r2
 8005ebe:	690a      	ldr	r2, [r1, #16]
 8005ec0:	6923      	ldr	r3, [r4, #16]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	bfb8      	it	lt
 8005ec6:	460b      	movlt	r3, r1
 8005ec8:	4688      	mov	r8, r1
 8005eca:	bfbc      	itt	lt
 8005ecc:	46a0      	movlt	r8, r4
 8005ece:	461c      	movlt	r4, r3
 8005ed0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005ed4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005ed8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005edc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005ee0:	eb07 0609 	add.w	r6, r7, r9
 8005ee4:	42b3      	cmp	r3, r6
 8005ee6:	bfb8      	it	lt
 8005ee8:	3101      	addlt	r1, #1
 8005eea:	f7ff ff08 	bl	8005cfe <_Balloc>
 8005eee:	f100 0514 	add.w	r5, r0, #20
 8005ef2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005ef6:	462b      	mov	r3, r5
 8005ef8:	2200      	movs	r2, #0
 8005efa:	4573      	cmp	r3, lr
 8005efc:	d316      	bcc.n	8005f2c <__multiply+0x74>
 8005efe:	f104 0214 	add.w	r2, r4, #20
 8005f02:	f108 0114 	add.w	r1, r8, #20
 8005f06:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005f0a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	9b00      	ldr	r3, [sp, #0]
 8005f12:	9201      	str	r2, [sp, #4]
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d80c      	bhi.n	8005f32 <__multiply+0x7a>
 8005f18:	2e00      	cmp	r6, #0
 8005f1a:	dd03      	ble.n	8005f24 <__multiply+0x6c>
 8005f1c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d05d      	beq.n	8005fe0 <__multiply+0x128>
 8005f24:	6106      	str	r6, [r0, #16]
 8005f26:	b003      	add	sp, #12
 8005f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f2c:	f843 2b04 	str.w	r2, [r3], #4
 8005f30:	e7e3      	b.n	8005efa <__multiply+0x42>
 8005f32:	f8b2 b000 	ldrh.w	fp, [r2]
 8005f36:	f1bb 0f00 	cmp.w	fp, #0
 8005f3a:	d023      	beq.n	8005f84 <__multiply+0xcc>
 8005f3c:	4689      	mov	r9, r1
 8005f3e:	46ac      	mov	ip, r5
 8005f40:	f04f 0800 	mov.w	r8, #0
 8005f44:	f859 4b04 	ldr.w	r4, [r9], #4
 8005f48:	f8dc a000 	ldr.w	sl, [ip]
 8005f4c:	b2a3      	uxth	r3, r4
 8005f4e:	fa1f fa8a 	uxth.w	sl, sl
 8005f52:	fb0b a303 	mla	r3, fp, r3, sl
 8005f56:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005f5a:	f8dc 4000 	ldr.w	r4, [ip]
 8005f5e:	4443      	add	r3, r8
 8005f60:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005f64:	fb0b 840a 	mla	r4, fp, sl, r8
 8005f68:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005f6c:	46e2      	mov	sl, ip
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005f74:	454f      	cmp	r7, r9
 8005f76:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005f7a:	f84a 3b04 	str.w	r3, [sl], #4
 8005f7e:	d82b      	bhi.n	8005fd8 <__multiply+0x120>
 8005f80:	f8cc 8004 	str.w	r8, [ip, #4]
 8005f84:	9b01      	ldr	r3, [sp, #4]
 8005f86:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005f8a:	3204      	adds	r2, #4
 8005f8c:	f1ba 0f00 	cmp.w	sl, #0
 8005f90:	d020      	beq.n	8005fd4 <__multiply+0x11c>
 8005f92:	682b      	ldr	r3, [r5, #0]
 8005f94:	4689      	mov	r9, r1
 8005f96:	46a8      	mov	r8, r5
 8005f98:	f04f 0b00 	mov.w	fp, #0
 8005f9c:	f8b9 c000 	ldrh.w	ip, [r9]
 8005fa0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005fa4:	fb0a 440c 	mla	r4, sl, ip, r4
 8005fa8:	445c      	add	r4, fp
 8005faa:	46c4      	mov	ip, r8
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005fb2:	f84c 3b04 	str.w	r3, [ip], #4
 8005fb6:	f859 3b04 	ldr.w	r3, [r9], #4
 8005fba:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005fbe:	0c1b      	lsrs	r3, r3, #16
 8005fc0:	fb0a b303 	mla	r3, sl, r3, fp
 8005fc4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005fc8:	454f      	cmp	r7, r9
 8005fca:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005fce:	d805      	bhi.n	8005fdc <__multiply+0x124>
 8005fd0:	f8c8 3004 	str.w	r3, [r8, #4]
 8005fd4:	3504      	adds	r5, #4
 8005fd6:	e79b      	b.n	8005f10 <__multiply+0x58>
 8005fd8:	46d4      	mov	ip, sl
 8005fda:	e7b3      	b.n	8005f44 <__multiply+0x8c>
 8005fdc:	46e0      	mov	r8, ip
 8005fde:	e7dd      	b.n	8005f9c <__multiply+0xe4>
 8005fe0:	3e01      	subs	r6, #1
 8005fe2:	e799      	b.n	8005f18 <__multiply+0x60>

08005fe4 <__pow5mult>:
 8005fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fe8:	4615      	mov	r5, r2
 8005fea:	f012 0203 	ands.w	r2, r2, #3
 8005fee:	4606      	mov	r6, r0
 8005ff0:	460f      	mov	r7, r1
 8005ff2:	d007      	beq.n	8006004 <__pow5mult+0x20>
 8005ff4:	3a01      	subs	r2, #1
 8005ff6:	4c21      	ldr	r4, [pc, #132]	; (800607c <__pow5mult+0x98>)
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005ffe:	f7ff fec9 	bl	8005d94 <__multadd>
 8006002:	4607      	mov	r7, r0
 8006004:	10ad      	asrs	r5, r5, #2
 8006006:	d035      	beq.n	8006074 <__pow5mult+0x90>
 8006008:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800600a:	b93c      	cbnz	r4, 800601c <__pow5mult+0x38>
 800600c:	2010      	movs	r0, #16
 800600e:	f7ff fe63 	bl	8005cd8 <malloc>
 8006012:	6270      	str	r0, [r6, #36]	; 0x24
 8006014:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006018:	6004      	str	r4, [r0, #0]
 800601a:	60c4      	str	r4, [r0, #12]
 800601c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006020:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006024:	b94c      	cbnz	r4, 800603a <__pow5mult+0x56>
 8006026:	f240 2171 	movw	r1, #625	; 0x271
 800602a:	4630      	mov	r0, r6
 800602c:	f7ff ff3b 	bl	8005ea6 <__i2b>
 8006030:	2300      	movs	r3, #0
 8006032:	f8c8 0008 	str.w	r0, [r8, #8]
 8006036:	4604      	mov	r4, r0
 8006038:	6003      	str	r3, [r0, #0]
 800603a:	f04f 0800 	mov.w	r8, #0
 800603e:	07eb      	lsls	r3, r5, #31
 8006040:	d50a      	bpl.n	8006058 <__pow5mult+0x74>
 8006042:	4639      	mov	r1, r7
 8006044:	4622      	mov	r2, r4
 8006046:	4630      	mov	r0, r6
 8006048:	f7ff ff36 	bl	8005eb8 <__multiply>
 800604c:	4639      	mov	r1, r7
 800604e:	4681      	mov	r9, r0
 8006050:	4630      	mov	r0, r6
 8006052:	f7ff fe88 	bl	8005d66 <_Bfree>
 8006056:	464f      	mov	r7, r9
 8006058:	106d      	asrs	r5, r5, #1
 800605a:	d00b      	beq.n	8006074 <__pow5mult+0x90>
 800605c:	6820      	ldr	r0, [r4, #0]
 800605e:	b938      	cbnz	r0, 8006070 <__pow5mult+0x8c>
 8006060:	4622      	mov	r2, r4
 8006062:	4621      	mov	r1, r4
 8006064:	4630      	mov	r0, r6
 8006066:	f7ff ff27 	bl	8005eb8 <__multiply>
 800606a:	6020      	str	r0, [r4, #0]
 800606c:	f8c0 8000 	str.w	r8, [r0]
 8006070:	4604      	mov	r4, r0
 8006072:	e7e4      	b.n	800603e <__pow5mult+0x5a>
 8006074:	4638      	mov	r0, r7
 8006076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800607a:	bf00      	nop
 800607c:	080067b8 	.word	0x080067b8

08006080 <__lshift>:
 8006080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006084:	460c      	mov	r4, r1
 8006086:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800608a:	6923      	ldr	r3, [r4, #16]
 800608c:	6849      	ldr	r1, [r1, #4]
 800608e:	eb0a 0903 	add.w	r9, sl, r3
 8006092:	68a3      	ldr	r3, [r4, #8]
 8006094:	4607      	mov	r7, r0
 8006096:	4616      	mov	r6, r2
 8006098:	f109 0501 	add.w	r5, r9, #1
 800609c:	42ab      	cmp	r3, r5
 800609e:	db32      	blt.n	8006106 <__lshift+0x86>
 80060a0:	4638      	mov	r0, r7
 80060a2:	f7ff fe2c 	bl	8005cfe <_Balloc>
 80060a6:	2300      	movs	r3, #0
 80060a8:	4680      	mov	r8, r0
 80060aa:	f100 0114 	add.w	r1, r0, #20
 80060ae:	461a      	mov	r2, r3
 80060b0:	4553      	cmp	r3, sl
 80060b2:	db2b      	blt.n	800610c <__lshift+0x8c>
 80060b4:	6920      	ldr	r0, [r4, #16]
 80060b6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80060ba:	f104 0314 	add.w	r3, r4, #20
 80060be:	f016 021f 	ands.w	r2, r6, #31
 80060c2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80060c6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80060ca:	d025      	beq.n	8006118 <__lshift+0x98>
 80060cc:	f1c2 0e20 	rsb	lr, r2, #32
 80060d0:	2000      	movs	r0, #0
 80060d2:	681e      	ldr	r6, [r3, #0]
 80060d4:	468a      	mov	sl, r1
 80060d6:	4096      	lsls	r6, r2
 80060d8:	4330      	orrs	r0, r6
 80060da:	f84a 0b04 	str.w	r0, [sl], #4
 80060de:	f853 0b04 	ldr.w	r0, [r3], #4
 80060e2:	459c      	cmp	ip, r3
 80060e4:	fa20 f00e 	lsr.w	r0, r0, lr
 80060e8:	d814      	bhi.n	8006114 <__lshift+0x94>
 80060ea:	6048      	str	r0, [r1, #4]
 80060ec:	b108      	cbz	r0, 80060f2 <__lshift+0x72>
 80060ee:	f109 0502 	add.w	r5, r9, #2
 80060f2:	3d01      	subs	r5, #1
 80060f4:	4638      	mov	r0, r7
 80060f6:	f8c8 5010 	str.w	r5, [r8, #16]
 80060fa:	4621      	mov	r1, r4
 80060fc:	f7ff fe33 	bl	8005d66 <_Bfree>
 8006100:	4640      	mov	r0, r8
 8006102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006106:	3101      	adds	r1, #1
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	e7c7      	b.n	800609c <__lshift+0x1c>
 800610c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006110:	3301      	adds	r3, #1
 8006112:	e7cd      	b.n	80060b0 <__lshift+0x30>
 8006114:	4651      	mov	r1, sl
 8006116:	e7dc      	b.n	80060d2 <__lshift+0x52>
 8006118:	3904      	subs	r1, #4
 800611a:	f853 2b04 	ldr.w	r2, [r3], #4
 800611e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006122:	459c      	cmp	ip, r3
 8006124:	d8f9      	bhi.n	800611a <__lshift+0x9a>
 8006126:	e7e4      	b.n	80060f2 <__lshift+0x72>

08006128 <__mcmp>:
 8006128:	6903      	ldr	r3, [r0, #16]
 800612a:	690a      	ldr	r2, [r1, #16]
 800612c:	1a9b      	subs	r3, r3, r2
 800612e:	b530      	push	{r4, r5, lr}
 8006130:	d10c      	bne.n	800614c <__mcmp+0x24>
 8006132:	0092      	lsls	r2, r2, #2
 8006134:	3014      	adds	r0, #20
 8006136:	3114      	adds	r1, #20
 8006138:	1884      	adds	r4, r0, r2
 800613a:	4411      	add	r1, r2
 800613c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006140:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006144:	4295      	cmp	r5, r2
 8006146:	d003      	beq.n	8006150 <__mcmp+0x28>
 8006148:	d305      	bcc.n	8006156 <__mcmp+0x2e>
 800614a:	2301      	movs	r3, #1
 800614c:	4618      	mov	r0, r3
 800614e:	bd30      	pop	{r4, r5, pc}
 8006150:	42a0      	cmp	r0, r4
 8006152:	d3f3      	bcc.n	800613c <__mcmp+0x14>
 8006154:	e7fa      	b.n	800614c <__mcmp+0x24>
 8006156:	f04f 33ff 	mov.w	r3, #4294967295
 800615a:	e7f7      	b.n	800614c <__mcmp+0x24>

0800615c <__mdiff>:
 800615c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006160:	460d      	mov	r5, r1
 8006162:	4607      	mov	r7, r0
 8006164:	4611      	mov	r1, r2
 8006166:	4628      	mov	r0, r5
 8006168:	4614      	mov	r4, r2
 800616a:	f7ff ffdd 	bl	8006128 <__mcmp>
 800616e:	1e06      	subs	r6, r0, #0
 8006170:	d108      	bne.n	8006184 <__mdiff+0x28>
 8006172:	4631      	mov	r1, r6
 8006174:	4638      	mov	r0, r7
 8006176:	f7ff fdc2 	bl	8005cfe <_Balloc>
 800617a:	2301      	movs	r3, #1
 800617c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006184:	bfa4      	itt	ge
 8006186:	4623      	movge	r3, r4
 8006188:	462c      	movge	r4, r5
 800618a:	4638      	mov	r0, r7
 800618c:	6861      	ldr	r1, [r4, #4]
 800618e:	bfa6      	itte	ge
 8006190:	461d      	movge	r5, r3
 8006192:	2600      	movge	r6, #0
 8006194:	2601      	movlt	r6, #1
 8006196:	f7ff fdb2 	bl	8005cfe <_Balloc>
 800619a:	692b      	ldr	r3, [r5, #16]
 800619c:	60c6      	str	r6, [r0, #12]
 800619e:	6926      	ldr	r6, [r4, #16]
 80061a0:	f105 0914 	add.w	r9, r5, #20
 80061a4:	f104 0214 	add.w	r2, r4, #20
 80061a8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80061ac:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80061b0:	f100 0514 	add.w	r5, r0, #20
 80061b4:	f04f 0e00 	mov.w	lr, #0
 80061b8:	f852 ab04 	ldr.w	sl, [r2], #4
 80061bc:	f859 4b04 	ldr.w	r4, [r9], #4
 80061c0:	fa1e f18a 	uxtah	r1, lr, sl
 80061c4:	b2a3      	uxth	r3, r4
 80061c6:	1ac9      	subs	r1, r1, r3
 80061c8:	0c23      	lsrs	r3, r4, #16
 80061ca:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80061ce:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80061d2:	b289      	uxth	r1, r1
 80061d4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80061d8:	45c8      	cmp	r8, r9
 80061da:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80061de:	4694      	mov	ip, r2
 80061e0:	f845 3b04 	str.w	r3, [r5], #4
 80061e4:	d8e8      	bhi.n	80061b8 <__mdiff+0x5c>
 80061e6:	45bc      	cmp	ip, r7
 80061e8:	d304      	bcc.n	80061f4 <__mdiff+0x98>
 80061ea:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80061ee:	b183      	cbz	r3, 8006212 <__mdiff+0xb6>
 80061f0:	6106      	str	r6, [r0, #16]
 80061f2:	e7c5      	b.n	8006180 <__mdiff+0x24>
 80061f4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80061f8:	fa1e f381 	uxtah	r3, lr, r1
 80061fc:	141a      	asrs	r2, r3, #16
 80061fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006202:	b29b      	uxth	r3, r3
 8006204:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006208:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800620c:	f845 3b04 	str.w	r3, [r5], #4
 8006210:	e7e9      	b.n	80061e6 <__mdiff+0x8a>
 8006212:	3e01      	subs	r6, #1
 8006214:	e7e9      	b.n	80061ea <__mdiff+0x8e>

08006216 <__d2b>:
 8006216:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800621a:	460e      	mov	r6, r1
 800621c:	2101      	movs	r1, #1
 800621e:	ec59 8b10 	vmov	r8, r9, d0
 8006222:	4615      	mov	r5, r2
 8006224:	f7ff fd6b 	bl	8005cfe <_Balloc>
 8006228:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800622c:	4607      	mov	r7, r0
 800622e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006232:	bb34      	cbnz	r4, 8006282 <__d2b+0x6c>
 8006234:	9301      	str	r3, [sp, #4]
 8006236:	f1b8 0300 	subs.w	r3, r8, #0
 800623a:	d027      	beq.n	800628c <__d2b+0x76>
 800623c:	a802      	add	r0, sp, #8
 800623e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006242:	f7ff fe01 	bl	8005e48 <__lo0bits>
 8006246:	9900      	ldr	r1, [sp, #0]
 8006248:	b1f0      	cbz	r0, 8006288 <__d2b+0x72>
 800624a:	9a01      	ldr	r2, [sp, #4]
 800624c:	f1c0 0320 	rsb	r3, r0, #32
 8006250:	fa02 f303 	lsl.w	r3, r2, r3
 8006254:	430b      	orrs	r3, r1
 8006256:	40c2      	lsrs	r2, r0
 8006258:	617b      	str	r3, [r7, #20]
 800625a:	9201      	str	r2, [sp, #4]
 800625c:	9b01      	ldr	r3, [sp, #4]
 800625e:	61bb      	str	r3, [r7, #24]
 8006260:	2b00      	cmp	r3, #0
 8006262:	bf14      	ite	ne
 8006264:	2102      	movne	r1, #2
 8006266:	2101      	moveq	r1, #1
 8006268:	6139      	str	r1, [r7, #16]
 800626a:	b1c4      	cbz	r4, 800629e <__d2b+0x88>
 800626c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006270:	4404      	add	r4, r0
 8006272:	6034      	str	r4, [r6, #0]
 8006274:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006278:	6028      	str	r0, [r5, #0]
 800627a:	4638      	mov	r0, r7
 800627c:	b003      	add	sp, #12
 800627e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006282:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006286:	e7d5      	b.n	8006234 <__d2b+0x1e>
 8006288:	6179      	str	r1, [r7, #20]
 800628a:	e7e7      	b.n	800625c <__d2b+0x46>
 800628c:	a801      	add	r0, sp, #4
 800628e:	f7ff fddb 	bl	8005e48 <__lo0bits>
 8006292:	9b01      	ldr	r3, [sp, #4]
 8006294:	617b      	str	r3, [r7, #20]
 8006296:	2101      	movs	r1, #1
 8006298:	6139      	str	r1, [r7, #16]
 800629a:	3020      	adds	r0, #32
 800629c:	e7e5      	b.n	800626a <__d2b+0x54>
 800629e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80062a2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80062a6:	6030      	str	r0, [r6, #0]
 80062a8:	6918      	ldr	r0, [r3, #16]
 80062aa:	f7ff fdae 	bl	8005e0a <__hi0bits>
 80062ae:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80062b2:	e7e1      	b.n	8006278 <__d2b+0x62>

080062b4 <_calloc_r>:
 80062b4:	b538      	push	{r3, r4, r5, lr}
 80062b6:	fb02 f401 	mul.w	r4, r2, r1
 80062ba:	4621      	mov	r1, r4
 80062bc:	f000 f856 	bl	800636c <_malloc_r>
 80062c0:	4605      	mov	r5, r0
 80062c2:	b118      	cbz	r0, 80062cc <_calloc_r+0x18>
 80062c4:	4622      	mov	r2, r4
 80062c6:	2100      	movs	r1, #0
 80062c8:	f7fe f90e 	bl	80044e8 <memset>
 80062cc:	4628      	mov	r0, r5
 80062ce:	bd38      	pop	{r3, r4, r5, pc}

080062d0 <_free_r>:
 80062d0:	b538      	push	{r3, r4, r5, lr}
 80062d2:	4605      	mov	r5, r0
 80062d4:	2900      	cmp	r1, #0
 80062d6:	d045      	beq.n	8006364 <_free_r+0x94>
 80062d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062dc:	1f0c      	subs	r4, r1, #4
 80062de:	2b00      	cmp	r3, #0
 80062e0:	bfb8      	it	lt
 80062e2:	18e4      	addlt	r4, r4, r3
 80062e4:	f000 f948 	bl	8006578 <__malloc_lock>
 80062e8:	4a1f      	ldr	r2, [pc, #124]	; (8006368 <_free_r+0x98>)
 80062ea:	6813      	ldr	r3, [r2, #0]
 80062ec:	4610      	mov	r0, r2
 80062ee:	b933      	cbnz	r3, 80062fe <_free_r+0x2e>
 80062f0:	6063      	str	r3, [r4, #4]
 80062f2:	6014      	str	r4, [r2, #0]
 80062f4:	4628      	mov	r0, r5
 80062f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062fa:	f000 b93e 	b.w	800657a <__malloc_unlock>
 80062fe:	42a3      	cmp	r3, r4
 8006300:	d90c      	bls.n	800631c <_free_r+0x4c>
 8006302:	6821      	ldr	r1, [r4, #0]
 8006304:	1862      	adds	r2, r4, r1
 8006306:	4293      	cmp	r3, r2
 8006308:	bf04      	itt	eq
 800630a:	681a      	ldreq	r2, [r3, #0]
 800630c:	685b      	ldreq	r3, [r3, #4]
 800630e:	6063      	str	r3, [r4, #4]
 8006310:	bf04      	itt	eq
 8006312:	1852      	addeq	r2, r2, r1
 8006314:	6022      	streq	r2, [r4, #0]
 8006316:	6004      	str	r4, [r0, #0]
 8006318:	e7ec      	b.n	80062f4 <_free_r+0x24>
 800631a:	4613      	mov	r3, r2
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	b10a      	cbz	r2, 8006324 <_free_r+0x54>
 8006320:	42a2      	cmp	r2, r4
 8006322:	d9fa      	bls.n	800631a <_free_r+0x4a>
 8006324:	6819      	ldr	r1, [r3, #0]
 8006326:	1858      	adds	r0, r3, r1
 8006328:	42a0      	cmp	r0, r4
 800632a:	d10b      	bne.n	8006344 <_free_r+0x74>
 800632c:	6820      	ldr	r0, [r4, #0]
 800632e:	4401      	add	r1, r0
 8006330:	1858      	adds	r0, r3, r1
 8006332:	4282      	cmp	r2, r0
 8006334:	6019      	str	r1, [r3, #0]
 8006336:	d1dd      	bne.n	80062f4 <_free_r+0x24>
 8006338:	6810      	ldr	r0, [r2, #0]
 800633a:	6852      	ldr	r2, [r2, #4]
 800633c:	605a      	str	r2, [r3, #4]
 800633e:	4401      	add	r1, r0
 8006340:	6019      	str	r1, [r3, #0]
 8006342:	e7d7      	b.n	80062f4 <_free_r+0x24>
 8006344:	d902      	bls.n	800634c <_free_r+0x7c>
 8006346:	230c      	movs	r3, #12
 8006348:	602b      	str	r3, [r5, #0]
 800634a:	e7d3      	b.n	80062f4 <_free_r+0x24>
 800634c:	6820      	ldr	r0, [r4, #0]
 800634e:	1821      	adds	r1, r4, r0
 8006350:	428a      	cmp	r2, r1
 8006352:	bf04      	itt	eq
 8006354:	6811      	ldreq	r1, [r2, #0]
 8006356:	6852      	ldreq	r2, [r2, #4]
 8006358:	6062      	str	r2, [r4, #4]
 800635a:	bf04      	itt	eq
 800635c:	1809      	addeq	r1, r1, r0
 800635e:	6021      	streq	r1, [r4, #0]
 8006360:	605c      	str	r4, [r3, #4]
 8006362:	e7c7      	b.n	80062f4 <_free_r+0x24>
 8006364:	bd38      	pop	{r3, r4, r5, pc}
 8006366:	bf00      	nop
 8006368:	20000208 	.word	0x20000208

0800636c <_malloc_r>:
 800636c:	b570      	push	{r4, r5, r6, lr}
 800636e:	1ccd      	adds	r5, r1, #3
 8006370:	f025 0503 	bic.w	r5, r5, #3
 8006374:	3508      	adds	r5, #8
 8006376:	2d0c      	cmp	r5, #12
 8006378:	bf38      	it	cc
 800637a:	250c      	movcc	r5, #12
 800637c:	2d00      	cmp	r5, #0
 800637e:	4606      	mov	r6, r0
 8006380:	db01      	blt.n	8006386 <_malloc_r+0x1a>
 8006382:	42a9      	cmp	r1, r5
 8006384:	d903      	bls.n	800638e <_malloc_r+0x22>
 8006386:	230c      	movs	r3, #12
 8006388:	6033      	str	r3, [r6, #0]
 800638a:	2000      	movs	r0, #0
 800638c:	bd70      	pop	{r4, r5, r6, pc}
 800638e:	f000 f8f3 	bl	8006578 <__malloc_lock>
 8006392:	4a21      	ldr	r2, [pc, #132]	; (8006418 <_malloc_r+0xac>)
 8006394:	6814      	ldr	r4, [r2, #0]
 8006396:	4621      	mov	r1, r4
 8006398:	b991      	cbnz	r1, 80063c0 <_malloc_r+0x54>
 800639a:	4c20      	ldr	r4, [pc, #128]	; (800641c <_malloc_r+0xb0>)
 800639c:	6823      	ldr	r3, [r4, #0]
 800639e:	b91b      	cbnz	r3, 80063a8 <_malloc_r+0x3c>
 80063a0:	4630      	mov	r0, r6
 80063a2:	f000 f83d 	bl	8006420 <_sbrk_r>
 80063a6:	6020      	str	r0, [r4, #0]
 80063a8:	4629      	mov	r1, r5
 80063aa:	4630      	mov	r0, r6
 80063ac:	f000 f838 	bl	8006420 <_sbrk_r>
 80063b0:	1c43      	adds	r3, r0, #1
 80063b2:	d124      	bne.n	80063fe <_malloc_r+0x92>
 80063b4:	230c      	movs	r3, #12
 80063b6:	6033      	str	r3, [r6, #0]
 80063b8:	4630      	mov	r0, r6
 80063ba:	f000 f8de 	bl	800657a <__malloc_unlock>
 80063be:	e7e4      	b.n	800638a <_malloc_r+0x1e>
 80063c0:	680b      	ldr	r3, [r1, #0]
 80063c2:	1b5b      	subs	r3, r3, r5
 80063c4:	d418      	bmi.n	80063f8 <_malloc_r+0x8c>
 80063c6:	2b0b      	cmp	r3, #11
 80063c8:	d90f      	bls.n	80063ea <_malloc_r+0x7e>
 80063ca:	600b      	str	r3, [r1, #0]
 80063cc:	50cd      	str	r5, [r1, r3]
 80063ce:	18cc      	adds	r4, r1, r3
 80063d0:	4630      	mov	r0, r6
 80063d2:	f000 f8d2 	bl	800657a <__malloc_unlock>
 80063d6:	f104 000b 	add.w	r0, r4, #11
 80063da:	1d23      	adds	r3, r4, #4
 80063dc:	f020 0007 	bic.w	r0, r0, #7
 80063e0:	1ac3      	subs	r3, r0, r3
 80063e2:	d0d3      	beq.n	800638c <_malloc_r+0x20>
 80063e4:	425a      	negs	r2, r3
 80063e6:	50e2      	str	r2, [r4, r3]
 80063e8:	e7d0      	b.n	800638c <_malloc_r+0x20>
 80063ea:	428c      	cmp	r4, r1
 80063ec:	684b      	ldr	r3, [r1, #4]
 80063ee:	bf16      	itet	ne
 80063f0:	6063      	strne	r3, [r4, #4]
 80063f2:	6013      	streq	r3, [r2, #0]
 80063f4:	460c      	movne	r4, r1
 80063f6:	e7eb      	b.n	80063d0 <_malloc_r+0x64>
 80063f8:	460c      	mov	r4, r1
 80063fa:	6849      	ldr	r1, [r1, #4]
 80063fc:	e7cc      	b.n	8006398 <_malloc_r+0x2c>
 80063fe:	1cc4      	adds	r4, r0, #3
 8006400:	f024 0403 	bic.w	r4, r4, #3
 8006404:	42a0      	cmp	r0, r4
 8006406:	d005      	beq.n	8006414 <_malloc_r+0xa8>
 8006408:	1a21      	subs	r1, r4, r0
 800640a:	4630      	mov	r0, r6
 800640c:	f000 f808 	bl	8006420 <_sbrk_r>
 8006410:	3001      	adds	r0, #1
 8006412:	d0cf      	beq.n	80063b4 <_malloc_r+0x48>
 8006414:	6025      	str	r5, [r4, #0]
 8006416:	e7db      	b.n	80063d0 <_malloc_r+0x64>
 8006418:	20000208 	.word	0x20000208
 800641c:	2000020c 	.word	0x2000020c

08006420 <_sbrk_r>:
 8006420:	b538      	push	{r3, r4, r5, lr}
 8006422:	4c06      	ldr	r4, [pc, #24]	; (800643c <_sbrk_r+0x1c>)
 8006424:	2300      	movs	r3, #0
 8006426:	4605      	mov	r5, r0
 8006428:	4608      	mov	r0, r1
 800642a:	6023      	str	r3, [r4, #0]
 800642c:	f7fd fd50 	bl	8003ed0 <_sbrk>
 8006430:	1c43      	adds	r3, r0, #1
 8006432:	d102      	bne.n	800643a <_sbrk_r+0x1a>
 8006434:	6823      	ldr	r3, [r4, #0]
 8006436:	b103      	cbz	r3, 800643a <_sbrk_r+0x1a>
 8006438:	602b      	str	r3, [r5, #0]
 800643a:	bd38      	pop	{r3, r4, r5, pc}
 800643c:	200006c0 	.word	0x200006c0

08006440 <__sread>:
 8006440:	b510      	push	{r4, lr}
 8006442:	460c      	mov	r4, r1
 8006444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006448:	f000 f898 	bl	800657c <_read_r>
 800644c:	2800      	cmp	r0, #0
 800644e:	bfab      	itete	ge
 8006450:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006452:	89a3      	ldrhlt	r3, [r4, #12]
 8006454:	181b      	addge	r3, r3, r0
 8006456:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800645a:	bfac      	ite	ge
 800645c:	6563      	strge	r3, [r4, #84]	; 0x54
 800645e:	81a3      	strhlt	r3, [r4, #12]
 8006460:	bd10      	pop	{r4, pc}

08006462 <__swrite>:
 8006462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006466:	461f      	mov	r7, r3
 8006468:	898b      	ldrh	r3, [r1, #12]
 800646a:	05db      	lsls	r3, r3, #23
 800646c:	4605      	mov	r5, r0
 800646e:	460c      	mov	r4, r1
 8006470:	4616      	mov	r6, r2
 8006472:	d505      	bpl.n	8006480 <__swrite+0x1e>
 8006474:	2302      	movs	r3, #2
 8006476:	2200      	movs	r2, #0
 8006478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800647c:	f000 f858 	bl	8006530 <_lseek_r>
 8006480:	89a3      	ldrh	r3, [r4, #12]
 8006482:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006486:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800648a:	81a3      	strh	r3, [r4, #12]
 800648c:	4632      	mov	r2, r6
 800648e:	463b      	mov	r3, r7
 8006490:	4628      	mov	r0, r5
 8006492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006496:	f000 b817 	b.w	80064c8 <_write_r>

0800649a <__sseek>:
 800649a:	b510      	push	{r4, lr}
 800649c:	460c      	mov	r4, r1
 800649e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064a2:	f000 f845 	bl	8006530 <_lseek_r>
 80064a6:	1c43      	adds	r3, r0, #1
 80064a8:	89a3      	ldrh	r3, [r4, #12]
 80064aa:	bf15      	itete	ne
 80064ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80064ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80064b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80064b6:	81a3      	strheq	r3, [r4, #12]
 80064b8:	bf18      	it	ne
 80064ba:	81a3      	strhne	r3, [r4, #12]
 80064bc:	bd10      	pop	{r4, pc}

080064be <__sclose>:
 80064be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064c2:	f000 b813 	b.w	80064ec <_close_r>
	...

080064c8 <_write_r>:
 80064c8:	b538      	push	{r3, r4, r5, lr}
 80064ca:	4c07      	ldr	r4, [pc, #28]	; (80064e8 <_write_r+0x20>)
 80064cc:	4605      	mov	r5, r0
 80064ce:	4608      	mov	r0, r1
 80064d0:	4611      	mov	r1, r2
 80064d2:	2200      	movs	r2, #0
 80064d4:	6022      	str	r2, [r4, #0]
 80064d6:	461a      	mov	r2, r3
 80064d8:	f7fd fcec 	bl	8003eb4 <_write>
 80064dc:	1c43      	adds	r3, r0, #1
 80064de:	d102      	bne.n	80064e6 <_write_r+0x1e>
 80064e0:	6823      	ldr	r3, [r4, #0]
 80064e2:	b103      	cbz	r3, 80064e6 <_write_r+0x1e>
 80064e4:	602b      	str	r3, [r5, #0]
 80064e6:	bd38      	pop	{r3, r4, r5, pc}
 80064e8:	200006c0 	.word	0x200006c0

080064ec <_close_r>:
 80064ec:	b538      	push	{r3, r4, r5, lr}
 80064ee:	4c06      	ldr	r4, [pc, #24]	; (8006508 <_close_r+0x1c>)
 80064f0:	2300      	movs	r3, #0
 80064f2:	4605      	mov	r5, r0
 80064f4:	4608      	mov	r0, r1
 80064f6:	6023      	str	r3, [r4, #0]
 80064f8:	f7fd fd08 	bl	8003f0c <_close>
 80064fc:	1c43      	adds	r3, r0, #1
 80064fe:	d102      	bne.n	8006506 <_close_r+0x1a>
 8006500:	6823      	ldr	r3, [r4, #0]
 8006502:	b103      	cbz	r3, 8006506 <_close_r+0x1a>
 8006504:	602b      	str	r3, [r5, #0]
 8006506:	bd38      	pop	{r3, r4, r5, pc}
 8006508:	200006c0 	.word	0x200006c0

0800650c <_fstat_r>:
 800650c:	b538      	push	{r3, r4, r5, lr}
 800650e:	4c07      	ldr	r4, [pc, #28]	; (800652c <_fstat_r+0x20>)
 8006510:	2300      	movs	r3, #0
 8006512:	4605      	mov	r5, r0
 8006514:	4608      	mov	r0, r1
 8006516:	4611      	mov	r1, r2
 8006518:	6023      	str	r3, [r4, #0]
 800651a:	f7fd fcfa 	bl	8003f12 <_fstat>
 800651e:	1c43      	adds	r3, r0, #1
 8006520:	d102      	bne.n	8006528 <_fstat_r+0x1c>
 8006522:	6823      	ldr	r3, [r4, #0]
 8006524:	b103      	cbz	r3, 8006528 <_fstat_r+0x1c>
 8006526:	602b      	str	r3, [r5, #0]
 8006528:	bd38      	pop	{r3, r4, r5, pc}
 800652a:	bf00      	nop
 800652c:	200006c0 	.word	0x200006c0

08006530 <_lseek_r>:
 8006530:	b538      	push	{r3, r4, r5, lr}
 8006532:	4c07      	ldr	r4, [pc, #28]	; (8006550 <_lseek_r+0x20>)
 8006534:	4605      	mov	r5, r0
 8006536:	4608      	mov	r0, r1
 8006538:	4611      	mov	r1, r2
 800653a:	2200      	movs	r2, #0
 800653c:	6022      	str	r2, [r4, #0]
 800653e:	461a      	mov	r2, r3
 8006540:	f7fd fcec 	bl	8003f1c <_lseek>
 8006544:	1c43      	adds	r3, r0, #1
 8006546:	d102      	bne.n	800654e <_lseek_r+0x1e>
 8006548:	6823      	ldr	r3, [r4, #0]
 800654a:	b103      	cbz	r3, 800654e <_lseek_r+0x1e>
 800654c:	602b      	str	r3, [r5, #0]
 800654e:	bd38      	pop	{r3, r4, r5, pc}
 8006550:	200006c0 	.word	0x200006c0

08006554 <__ascii_mbtowc>:
 8006554:	b082      	sub	sp, #8
 8006556:	b901      	cbnz	r1, 800655a <__ascii_mbtowc+0x6>
 8006558:	a901      	add	r1, sp, #4
 800655a:	b142      	cbz	r2, 800656e <__ascii_mbtowc+0x1a>
 800655c:	b14b      	cbz	r3, 8006572 <__ascii_mbtowc+0x1e>
 800655e:	7813      	ldrb	r3, [r2, #0]
 8006560:	600b      	str	r3, [r1, #0]
 8006562:	7812      	ldrb	r2, [r2, #0]
 8006564:	1c10      	adds	r0, r2, #0
 8006566:	bf18      	it	ne
 8006568:	2001      	movne	r0, #1
 800656a:	b002      	add	sp, #8
 800656c:	4770      	bx	lr
 800656e:	4610      	mov	r0, r2
 8006570:	e7fb      	b.n	800656a <__ascii_mbtowc+0x16>
 8006572:	f06f 0001 	mvn.w	r0, #1
 8006576:	e7f8      	b.n	800656a <__ascii_mbtowc+0x16>

08006578 <__malloc_lock>:
 8006578:	4770      	bx	lr

0800657a <__malloc_unlock>:
 800657a:	4770      	bx	lr

0800657c <_read_r>:
 800657c:	b538      	push	{r3, r4, r5, lr}
 800657e:	4c07      	ldr	r4, [pc, #28]	; (800659c <_read_r+0x20>)
 8006580:	4605      	mov	r5, r0
 8006582:	4608      	mov	r0, r1
 8006584:	4611      	mov	r1, r2
 8006586:	2200      	movs	r2, #0
 8006588:	6022      	str	r2, [r4, #0]
 800658a:	461a      	mov	r2, r3
 800658c:	f7fd fc84 	bl	8003e98 <_read>
 8006590:	1c43      	adds	r3, r0, #1
 8006592:	d102      	bne.n	800659a <_read_r+0x1e>
 8006594:	6823      	ldr	r3, [r4, #0]
 8006596:	b103      	cbz	r3, 800659a <_read_r+0x1e>
 8006598:	602b      	str	r3, [r5, #0]
 800659a:	bd38      	pop	{r3, r4, r5, pc}
 800659c:	200006c0 	.word	0x200006c0

080065a0 <__ascii_wctomb>:
 80065a0:	b149      	cbz	r1, 80065b6 <__ascii_wctomb+0x16>
 80065a2:	2aff      	cmp	r2, #255	; 0xff
 80065a4:	bf85      	ittet	hi
 80065a6:	238a      	movhi	r3, #138	; 0x8a
 80065a8:	6003      	strhi	r3, [r0, #0]
 80065aa:	700a      	strbls	r2, [r1, #0]
 80065ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80065b0:	bf98      	it	ls
 80065b2:	2001      	movls	r0, #1
 80065b4:	4770      	bx	lr
 80065b6:	4608      	mov	r0, r1
 80065b8:	4770      	bx	lr
	...

080065bc <_init>:
 80065bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065be:	bf00      	nop
 80065c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065c2:	bc08      	pop	{r3}
 80065c4:	469e      	mov	lr, r3
 80065c6:	4770      	bx	lr

080065c8 <_fini>:
 80065c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ca:	bf00      	nop
 80065cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ce:	bc08      	pop	{r3}
 80065d0:	469e      	mov	lr, r3
 80065d2:	4770      	bx	lr
