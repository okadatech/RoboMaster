
F427IIH_Saramander_Hero.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb40  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  0800ccf0  0800ccf0  0001ccf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d060  0800d060  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d060  0800d060  0001d060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d068  0800d068  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d068  0800d068  0001d068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d06c  0800d06c  0001d06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800d070  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c8  200001f4  0800d264  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008bc  0800d264  000208bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015621  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003139  00000000  00000000  00035845  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001220  00000000  00000000  00038980  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001088  00000000  00000000  00039ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025ff1  00000000  00000000  0003ac28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f21d  00000000  00000000  00060c19  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dcfb9  00000000  00000000  0006fe36  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014cdef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a94  00000000  00000000  0014ce6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ccd8 	.word	0x0800ccd8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	0800ccd8 	.word	0x0800ccd8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b972 	b.w	8000f64 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	4688      	mov	r8, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14b      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4615      	mov	r5, r2
 8000caa:	d967      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0720 	rsb	r7, r2, #32
 8000cb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cba:	fa20 f707 	lsr.w	r7, r0, r7
 8000cbe:	4095      	lsls	r5, r2
 8000cc0:	ea47 0803 	orr.w	r8, r7, r3
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cd0:	fa1f fc85 	uxth.w	ip, r5
 8000cd4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cd8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cdc:	fb07 f10c 	mul.w	r1, r7, ip
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18eb      	adds	r3, r5, r3
 8000ce6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cea:	f080 811b 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8118 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000cf4:	3f02      	subs	r7, #2
 8000cf6:	442b      	add	r3, r5
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0c:	45a4      	cmp	ip, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	192c      	adds	r4, r5, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 8107 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000d1a:	45a4      	cmp	ip, r4
 8000d1c:	f240 8104 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000d20:	3802      	subs	r0, #2
 8000d22:	442c      	add	r4, r5
 8000d24:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d28:	eba4 040c 	sub.w	r4, r4, ip
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	b11e      	cbz	r6, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c6 4300 	strd	r4, r3, [r6]
 8000d38:	4639      	mov	r1, r7
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0xbe>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80eb 	beq.w	8000f1e <__udivmoddi4+0x286>
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d4e:	4638      	mov	r0, r7
 8000d50:	4639      	mov	r1, r7
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f783 	clz	r7, r3
 8000d5a:	2f00      	cmp	r7, #0
 8000d5c:	d147      	bne.n	8000dee <__udivmoddi4+0x156>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0xd0>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80fa 	bhi.w	8000f5c <__udivmoddi4+0x2c4>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	4698      	mov	r8, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d0e0      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000d76:	e9c6 4800 	strd	r4, r8, [r6]
 8000d7a:	e7dd      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000d7c:	b902      	cbnz	r2, 8000d80 <__udivmoddi4+0xe8>
 8000d7e:	deff      	udf	#255	; 0xff
 8000d80:	fab2 f282 	clz	r2, r2
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f040 808f 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d8a:	1b49      	subs	r1, r1, r5
 8000d8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d90:	fa1f f885 	uxth.w	r8, r5
 8000d94:	2701      	movs	r7, #1
 8000d96:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d9a:	0c23      	lsrs	r3, r4, #16
 8000d9c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb08 f10c 	mul.w	r1, r8, ip
 8000da8:	4299      	cmp	r1, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000dac:	18eb      	adds	r3, r5, r3
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4299      	cmp	r1, r3
 8000db6:	f200 80cd 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1a59      	subs	r1, r3, r1
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dc8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x14c>
 8000dd4:	192c      	adds	r4, r5, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x14a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80b6 	bhi.w	8000f4e <__udivmoddi4+0x2b6>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e79f      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dee:	f1c7 0c20 	rsb	ip, r7, #32
 8000df2:	40bb      	lsls	r3, r7
 8000df4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000df8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dfc:	fa01 f407 	lsl.w	r4, r1, r7
 8000e00:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e04:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e08:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e0c:	4325      	orrs	r5, r4
 8000e0e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e12:	0c2c      	lsrs	r4, r5, #16
 8000e14:	fb08 3319 	mls	r3, r8, r9, r3
 8000e18:	fa1f fa8e 	uxth.w	sl, lr
 8000e1c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e20:	fb09 f40a 	mul.w	r4, r9, sl
 8000e24:	429c      	cmp	r4, r3
 8000e26:	fa02 f207 	lsl.w	r2, r2, r7
 8000e2a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1e 0303 	adds.w	r3, lr, r3
 8000e34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e38:	f080 8087 	bcs.w	8000f4a <__udivmoddi4+0x2b2>
 8000e3c:	429c      	cmp	r4, r3
 8000e3e:	f240 8084 	bls.w	8000f4a <__udivmoddi4+0x2b2>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4473      	add	r3, lr
 8000e48:	1b1b      	subs	r3, r3, r4
 8000e4a:	b2ad      	uxth	r5, r5
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3310 	mls	r3, r8, r0, r3
 8000e54:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e58:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e5c:	45a2      	cmp	sl, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1e 0404 	adds.w	r4, lr, r4
 8000e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e68:	d26b      	bcs.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6a:	45a2      	cmp	sl, r4
 8000e6c:	d969      	bls.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4474      	add	r4, lr
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7a:	eba4 040a 	sub.w	r4, r4, sl
 8000e7e:	454c      	cmp	r4, r9
 8000e80:	46c2      	mov	sl, r8
 8000e82:	464b      	mov	r3, r9
 8000e84:	d354      	bcc.n	8000f30 <__udivmoddi4+0x298>
 8000e86:	d051      	beq.n	8000f2c <__udivmoddi4+0x294>
 8000e88:	2e00      	cmp	r6, #0
 8000e8a:	d069      	beq.n	8000f60 <__udivmoddi4+0x2c8>
 8000e8c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e90:	eb64 0403 	sbc.w	r4, r4, r3
 8000e94:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e98:	40fd      	lsrs	r5, r7
 8000e9a:	40fc      	lsrs	r4, r7
 8000e9c:	ea4c 0505 	orr.w	r5, ip, r5
 8000ea0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ea4:	2700      	movs	r7, #0
 8000ea6:	e747      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f703 	lsr.w	r7, r0, r3
 8000eb0:	4095      	lsls	r5, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ebe:	4338      	orrs	r0, r7
 8000ec0:	0c01      	lsrs	r1, r0, #16
 8000ec2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ec6:	fa1f f885 	uxth.w	r8, r5
 8000eca:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb07 f308 	mul.w	r3, r7, r8
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	fa04 f402 	lsl.w	r4, r4, r2
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x256>
 8000ede:	1869      	adds	r1, r5, r1
 8000ee0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ee4:	d22f      	bcs.n	8000f46 <__udivmoddi4+0x2ae>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	d92d      	bls.n	8000f46 <__udivmoddi4+0x2ae>
 8000eea:	3f02      	subs	r7, #2
 8000eec:	4429      	add	r1, r5
 8000eee:	1acb      	subs	r3, r1, r3
 8000ef0:	b281      	uxth	r1, r0
 8000ef2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000efe:	fb00 f308 	mul.w	r3, r0, r8
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x27e>
 8000f06:	1869      	adds	r1, r5, r1
 8000f08:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0c:	d217      	bcs.n	8000f3e <__udivmoddi4+0x2a6>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d915      	bls.n	8000f3e <__udivmoddi4+0x2a6>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4429      	add	r1, r5
 8000f16:	1ac9      	subs	r1, r1, r3
 8000f18:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f1c:	e73b      	b.n	8000d96 <__udivmoddi4+0xfe>
 8000f1e:	4637      	mov	r7, r6
 8000f20:	4630      	mov	r0, r6
 8000f22:	e709      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f24:	4607      	mov	r7, r0
 8000f26:	e6e7      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fb      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f2c:	4541      	cmp	r1, r8
 8000f2e:	d2ab      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f30:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f34:	eb69 020e 	sbc.w	r2, r9, lr
 8000f38:	3801      	subs	r0, #1
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	e7a4      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f3e:	4660      	mov	r0, ip
 8000f40:	e7e9      	b.n	8000f16 <__udivmoddi4+0x27e>
 8000f42:	4618      	mov	r0, r3
 8000f44:	e795      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f46:	4667      	mov	r7, ip
 8000f48:	e7d1      	b.n	8000eee <__udivmoddi4+0x256>
 8000f4a:	4681      	mov	r9, r0
 8000f4c:	e77c      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	442c      	add	r4, r5
 8000f52:	e747      	b.n	8000de4 <__udivmoddi4+0x14c>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	442b      	add	r3, r5
 8000f5a:	e72f      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f5c:	4638      	mov	r0, r7
 8000f5e:	e708      	b.n	8000d72 <__udivmoddi4+0xda>
 8000f60:	4637      	mov	r7, r6
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0xa0>

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <HAL_Init+0x40>)
 8000f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <HAL_Init+0x40>)
 8000f7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f84:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <HAL_Init+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <HAL_Init+0x40>)
 8000f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f90:	2003      	movs	r0, #3
 8000f92:	f000 ffab 	bl	8001eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f000 f808 	bl	8000fac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f9c:	f007 fda2 	bl	8008ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40023c00 	.word	0x40023c00

08000fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb4:	4b12      	ldr	r3, [pc, #72]	; (8001000 <HAL_InitTick+0x54>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <HAL_InitTick+0x58>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 ffc3 	bl	8001f56 <HAL_SYSTICK_Config>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00e      	b.n	8000ff8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b0f      	cmp	r3, #15
 8000fde:	d80a      	bhi.n	8000ff6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f000 ff8b 	bl	8001f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fec:	4a06      	ldr	r2, [pc, #24]	; (8001008 <HAL_InitTick+0x5c>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e000      	b.n	8000ff8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	2000001c 	.word	0x2000001c
 8001004:	20000004 	.word	0x20000004
 8001008:	20000000 	.word	0x20000000

0800100c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_IncTick+0x20>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_IncTick+0x24>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4413      	add	r3, r2
 800101c:	4a04      	ldr	r2, [pc, #16]	; (8001030 <HAL_IncTick+0x24>)
 800101e:	6013      	str	r3, [r2, #0]
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000004 	.word	0x20000004
 8001030:	200002a4 	.word	0x200002a4

08001034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return uwTick;
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <HAL_GetTick+0x14>)
 800103a:	681b      	ldr	r3, [r3, #0]
}
 800103c:	4618      	mov	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	200002a4 	.word	0x200002a4

0800104c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001054:	f7ff ffee 	bl	8001034 <HAL_GetTick>
 8001058:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001064:	d005      	beq.n	8001072 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <HAL_Delay+0x40>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001072:	bf00      	nop
 8001074:	f7ff ffde 	bl	8001034 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	429a      	cmp	r2, r3
 8001082:	d8f7      	bhi.n	8001074 <HAL_Delay+0x28>
  {
  }
}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000004 	.word	0x20000004

08001090 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e0ed      	b.n	800127e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d102      	bne.n	80010b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f004 ff80 	bl	8005fb4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f022 0202 	bic.w	r2, r2, #2
 80010c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010c4:	f7ff ffb6 	bl	8001034 <HAL_GetTick>
 80010c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010ca:	e012      	b.n	80010f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010cc:	f7ff ffb2 	bl	8001034 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b0a      	cmp	r3, #10
 80010d8:	d90b      	bls.n	80010f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2205      	movs	r2, #5
 80010ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e0c5      	b.n	800127e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1e5      	bne.n	80010cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f042 0201 	orr.w	r2, r2, #1
 800110e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001110:	f7ff ff90 	bl	8001034 <HAL_GetTick>
 8001114:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001116:	e012      	b.n	800113e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001118:	f7ff ff8c 	bl	8001034 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b0a      	cmp	r3, #10
 8001124:	d90b      	bls.n	800113e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2205      	movs	r2, #5
 8001136:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e09f      	b.n	800127e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0e5      	beq.n	8001118 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	7e1b      	ldrb	r3, [r3, #24]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d108      	bne.n	8001166 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	e007      	b.n	8001176 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001174:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	7e5b      	ldrb	r3, [r3, #25]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d108      	bne.n	8001190 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	e007      	b.n	80011a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800119e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	7e9b      	ldrb	r3, [r3, #26]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d108      	bne.n	80011ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f042 0220 	orr.w	r2, r2, #32
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	e007      	b.n	80011ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 0220 	bic.w	r2, r2, #32
 80011c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	7edb      	ldrb	r3, [r3, #27]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d108      	bne.n	80011e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f022 0210 	bic.w	r2, r2, #16
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	e007      	b.n	80011f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f042 0210 	orr.w	r2, r2, #16
 80011f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	7f1b      	ldrb	r3, [r3, #28]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d108      	bne.n	800120e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f042 0208 	orr.w	r2, r2, #8
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	e007      	b.n	800121e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 0208 	bic.w	r2, r2, #8
 800121c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	7f5b      	ldrb	r3, [r3, #29]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d108      	bne.n	8001238 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f042 0204 	orr.w	r2, r2, #4
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	e007      	b.n	8001248 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0204 	bic.w	r2, r2, #4
 8001246:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	431a      	orrs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	431a      	orrs	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	ea42 0103 	orr.w	r1, r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	1e5a      	subs	r2, r3, #1
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	430a      	orrs	r2, r1
 800126c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2201      	movs	r2, #1
 8001278:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001288:	b480      	push	{r7}
 800128a:	b087      	sub	sp, #28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800129e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80012a0:	7cfb      	ldrb	r3, [r7, #19]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d003      	beq.n	80012ae <HAL_CAN_ConfigFilter+0x26>
 80012a6:	7cfb      	ldrb	r3, [r7, #19]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	f040 80be 	bne.w	800142a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80012ae:	4b65      	ldr	r3, [pc, #404]	; (8001444 <HAL_CAN_ConfigFilter+0x1bc>)
 80012b0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012b8:	f043 0201 	orr.w	r2, r3, #1
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012c8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012dc:	021b      	lsls	r3, r3, #8
 80012de:	431a      	orrs	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	f003 031f 	and.w	r3, r3, #31
 80012ee:	2201      	movs	r2, #1
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	43db      	mvns	r3, r3
 8001300:	401a      	ands	r2, r3
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	69db      	ldr	r3, [r3, #28]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d123      	bne.n	8001358 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	43db      	mvns	r3, r3
 800131a:	401a      	ands	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001332:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	3248      	adds	r2, #72	; 0x48
 8001338:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800134c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800134e:	6979      	ldr	r1, [r7, #20]
 8001350:	3348      	adds	r3, #72	; 0x48
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	440b      	add	r3, r1
 8001356:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	69db      	ldr	r3, [r3, #28]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d122      	bne.n	80013a6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	431a      	orrs	r2, r3
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001380:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	3248      	adds	r2, #72	; 0x48
 8001386:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800139a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800139c:	6979      	ldr	r1, [r7, #20]
 800139e:	3348      	adds	r3, #72	; 0x48
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	440b      	add	r3, r1
 80013a4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d109      	bne.n	80013c2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	401a      	ands	r2, r3
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80013c0:	e007      	b.n	80013d2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	431a      	orrs	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d109      	bne.n	80013ee <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	401a      	ands	r2, r3
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80013ec:	e007      	b.n	80013fe <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	431a      	orrs	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d107      	bne.n	8001416 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	431a      	orrs	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800141c:	f023 0201 	bic.w	r2, r3, #1
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001426:	2300      	movs	r3, #0
 8001428:	e006      	b.n	8001438 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
  }
}
 8001438:	4618      	mov	r0, r3
 800143a:	371c      	adds	r7, #28
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	40006400 	.word	0x40006400

08001448 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b01      	cmp	r3, #1
 800145a:	d12e      	bne.n	80014ba <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2202      	movs	r2, #2
 8001460:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f022 0201 	bic.w	r2, r2, #1
 8001472:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001474:	f7ff fdde 	bl	8001034 <HAL_GetTick>
 8001478:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800147a:	e012      	b.n	80014a2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800147c:	f7ff fdda 	bl	8001034 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b0a      	cmp	r3, #10
 8001488:	d90b      	bls.n	80014a2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2205      	movs	r2, #5
 800149a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e012      	b.n	80014c8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1e5      	bne.n	800147c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e006      	b.n	80014c8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014be:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
  }
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b089      	sub	sp, #36	; 0x24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
 80014dc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80014ee:	7ffb      	ldrb	r3, [r7, #31]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d003      	beq.n	80014fc <HAL_CAN_AddTxMessage+0x2c>
 80014f4:	7ffb      	ldrb	r3, [r7, #31]
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	f040 80b8 	bne.w	800166c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10a      	bne.n	800151c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800150c:	2b00      	cmp	r3, #0
 800150e:	d105      	bne.n	800151c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 80a0 	beq.w	800165c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	0e1b      	lsrs	r3, r3, #24
 8001520:	f003 0303 	and.w	r3, r3, #3
 8001524:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d907      	bls.n	800153c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001530:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e09e      	b.n	800167a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800153c:	2201      	movs	r2, #1
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	409a      	lsls	r2, r3
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10d      	bne.n	800156a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001558:	68f9      	ldr	r1, [r7, #12]
 800155a:	6809      	ldr	r1, [r1, #0]
 800155c:	431a      	orrs	r2, r3
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	3318      	adds	r3, #24
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	440b      	add	r3, r1
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	e00f      	b.n	800158a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001574:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800157a:	68f9      	ldr	r1, [r7, #12]
 800157c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800157e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	3318      	adds	r3, #24
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	440b      	add	r3, r1
 8001588:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6819      	ldr	r1, [r3, #0]
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	691a      	ldr	r2, [r3, #16]
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	3318      	adds	r3, #24
 8001596:	011b      	lsls	r3, r3, #4
 8001598:	440b      	add	r3, r1
 800159a:	3304      	adds	r3, #4
 800159c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	7d1b      	ldrb	r3, [r3, #20]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d111      	bne.n	80015ca <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	3318      	adds	r3, #24
 80015ae:	011b      	lsls	r3, r3, #4
 80015b0:	4413      	add	r3, r2
 80015b2:	3304      	adds	r3, #4
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	6811      	ldr	r1, [r2, #0]
 80015ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	3318      	adds	r3, #24
 80015c2:	011b      	lsls	r3, r3, #4
 80015c4:	440b      	add	r3, r1
 80015c6:	3304      	adds	r3, #4
 80015c8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	3307      	adds	r3, #7
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	061a      	lsls	r2, r3, #24
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3306      	adds	r3, #6
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	041b      	lsls	r3, r3, #16
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3305      	adds	r3, #5
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	4313      	orrs	r3, r2
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	3204      	adds	r2, #4
 80015ea:	7812      	ldrb	r2, [r2, #0]
 80015ec:	4610      	mov	r0, r2
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	6811      	ldr	r1, [r2, #0]
 80015f2:	ea43 0200 	orr.w	r2, r3, r0
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	011b      	lsls	r3, r3, #4
 80015fa:	440b      	add	r3, r1
 80015fc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001600:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3303      	adds	r3, #3
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	061a      	lsls	r2, r3, #24
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3302      	adds	r3, #2
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	041b      	lsls	r3, r3, #16
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3301      	adds	r3, #1
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	021b      	lsls	r3, r3, #8
 800161c:	4313      	orrs	r3, r2
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	7812      	ldrb	r2, [r2, #0]
 8001622:	4610      	mov	r0, r2
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	6811      	ldr	r1, [r2, #0]
 8001628:	ea43 0200 	orr.w	r2, r3, r0
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	440b      	add	r3, r1
 8001632:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001636:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	3318      	adds	r3, #24
 8001640:	011b      	lsls	r3, r3, #4
 8001642:	4413      	add	r3, r2
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	6811      	ldr	r1, [r2, #0]
 800164a:	f043 0201 	orr.w	r2, r3, #1
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	3318      	adds	r3, #24
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	440b      	add	r3, r1
 8001656:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001658:	2300      	movs	r3, #0
 800165a:	e00e      	b.n	800167a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001660:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e006      	b.n	800167a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001670:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
  }
}
 800167a:	4618      	mov	r0, r3
 800167c:	3724      	adds	r7, #36	; 0x24
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001686:	b480      	push	{r7}
 8001688:	b087      	sub	sp, #28
 800168a:	af00      	add	r7, sp, #0
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
 8001692:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f893 3020 	ldrb.w	r3, [r3, #32]
 800169a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800169c:	7dfb      	ldrb	r3, [r7, #23]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d003      	beq.n	80016aa <HAL_CAN_GetRxMessage+0x24>
 80016a2:	7dfb      	ldrb	r3, [r7, #23]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	f040 80f4 	bne.w	8001892 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10e      	bne.n	80016ce <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d116      	bne.n	80016ec <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e0e8      	b.n	80018a0 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d107      	bne.n	80016ec <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e0d9      	b.n	80018a0 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	331b      	adds	r3, #27
 80016f4:	011b      	lsls	r3, r3, #4
 80016f6:	4413      	add	r3, r2
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0204 	and.w	r2, r3, #4
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d10c      	bne.n	8001724 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	331b      	adds	r3, #27
 8001712:	011b      	lsls	r3, r3, #4
 8001714:	4413      	add	r3, r2
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	0d5b      	lsrs	r3, r3, #21
 800171a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	e00b      	b.n	800173c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	331b      	adds	r3, #27
 800172c:	011b      	lsls	r3, r3, #4
 800172e:	4413      	add	r3, r2
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	08db      	lsrs	r3, r3, #3
 8001734:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	331b      	adds	r3, #27
 8001744:	011b      	lsls	r3, r3, #4
 8001746:	4413      	add	r3, r2
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	085b      	lsrs	r3, r3, #1
 800174c:	f003 0201 	and.w	r2, r3, #1
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	331b      	adds	r3, #27
 800175c:	011b      	lsls	r3, r3, #4
 800175e:	4413      	add	r3, r2
 8001760:	3304      	adds	r3, #4
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 020f 	and.w	r2, r3, #15
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	331b      	adds	r3, #27
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	4413      	add	r3, r2
 8001778:	3304      	adds	r3, #4
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	0a1b      	lsrs	r3, r3, #8
 800177e:	b2da      	uxtb	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	331b      	adds	r3, #27
 800178c:	011b      	lsls	r3, r3, #4
 800178e:	4413      	add	r3, r2
 8001790:	3304      	adds	r3, #4
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	0c1b      	lsrs	r3, r3, #16
 8001796:	b29a      	uxth	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	011b      	lsls	r3, r3, #4
 80017a4:	4413      	add	r3, r2
 80017a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	011b      	lsls	r3, r3, #4
 80017ba:	4413      	add	r3, r2
 80017bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	0a1a      	lsrs	r2, r3, #8
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	3301      	adds	r3, #1
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	011b      	lsls	r3, r3, #4
 80017d4:	4413      	add	r3, r2
 80017d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	0c1a      	lsrs	r2, r3, #16
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	3302      	adds	r3, #2
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	4413      	add	r3, r2
 80017f0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	0e1a      	lsrs	r2, r3, #24
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	3303      	adds	r3, #3
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	011b      	lsls	r3, r3, #4
 8001808:	4413      	add	r3, r2
 800180a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	3304      	adds	r3, #4
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	011b      	lsls	r3, r3, #4
 8001820:	4413      	add	r3, r2
 8001822:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	0a1a      	lsrs	r2, r3, #8
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	3305      	adds	r3, #5
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	011b      	lsls	r3, r3, #4
 800183a:	4413      	add	r3, r2
 800183c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	0c1a      	lsrs	r2, r3, #16
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	3306      	adds	r3, #6
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	011b      	lsls	r3, r3, #4
 8001854:	4413      	add	r3, r2
 8001856:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	0e1a      	lsrs	r2, r3, #24
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	3307      	adds	r3, #7
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d108      	bne.n	800187e <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f042 0220 	orr.w	r2, r2, #32
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	e007      	b.n	800188e <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	691a      	ldr	r2, [r3, #16]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f042 0220 	orr.w	r2, r2, #32
 800188c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	e006      	b.n	80018a0 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
  }
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	371c      	adds	r7, #28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018bc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d002      	beq.n	80018ca <HAL_CAN_ActivateNotification+0x1e>
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d109      	bne.n	80018de <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6959      	ldr	r1, [r3, #20]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	430a      	orrs	r2, r1
 80018d8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80018da:	2300      	movs	r3, #0
 80018dc:	e006      	b.n	80018ec <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
  }
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	; 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001900:	2300      	movs	r3, #0
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	d07c      	beq.n	8001a38 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	2b00      	cmp	r3, #0
 8001946:	d023      	beq.n	8001990 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2201      	movs	r2, #1
 800194e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 f97d 	bl	8001c5a <HAL_CAN_TxMailbox0CompleteCallback>
 8001960:	e016      	b.n	8001990 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b00      	cmp	r3, #0
 800196a:	d004      	beq.n	8001976 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
 8001974:	e00c      	b.n	8001990 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	2b00      	cmp	r3, #0
 800197e:	d004      	beq.n	800198a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
 8001988:	e002      	b.n	8001990 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 f983 	bl	8001c96 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001996:	2b00      	cmp	r3, #0
 8001998:	d024      	beq.n	80019e4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f95d 	bl	8001c6e <HAL_CAN_TxMailbox1CompleteCallback>
 80019b4:	e016      	b.n	80019e4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d004      	beq.n	80019ca <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
 80019c8:	e00c      	b.n	80019e4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d004      	beq.n	80019de <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
 80019dc:	e002      	b.n	80019e4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 f963 	bl	8001caa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d024      	beq.n	8001a38 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f93d 	bl	8001c82 <HAL_CAN_TxMailbox2CompleteCallback>
 8001a08:	e016      	b.n	8001a38 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d004      	beq.n	8001a1e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a1c:	e00c      	b.n	8001a38 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d004      	beq.n	8001a32 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a30:	e002      	b.n	8001a38 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f943 	bl	8001cbe <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a38:	6a3b      	ldr	r3, [r7, #32]
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d00c      	beq.n	8001a5c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f003 0310 	and.w	r3, r3, #16
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d007      	beq.n	8001a5c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2210      	movs	r2, #16
 8001a5a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00b      	beq.n	8001a7e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d006      	beq.n	8001a7e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2208      	movs	r2, #8
 8001a76:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f92a 	bl	8001cd2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d009      	beq.n	8001a9c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d002      	beq.n	8001a9c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f005 f8c6 	bl	8006c28 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
 8001a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00c      	beq.n	8001ac0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	f003 0310 	and.w	r3, r3, #16
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d007      	beq.n	8001ac0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2210      	movs	r2, #16
 8001abe:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
 8001ac2:	f003 0320 	and.w	r3, r3, #32
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00b      	beq.n	8001ae2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	f003 0308 	and.w	r3, r3, #8
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d006      	beq.n	8001ae2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2208      	movs	r2, #8
 8001ada:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 f90c 	bl	8001cfa <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	f003 0310 	and.w	r3, r3, #16
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d009      	beq.n	8001b00 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d002      	beq.n	8001b00 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f8f3 	bl	8001ce6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b00:	6a3b      	ldr	r3, [r7, #32]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00b      	beq.n	8001b22 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	f003 0310 	and.w	r3, r3, #16
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d006      	beq.n	8001b22 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2210      	movs	r2, #16
 8001b1a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f8f6 	bl	8001d0e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d00b      	beq.n	8001b44 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d006      	beq.n	8001b44 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2208      	movs	r2, #8
 8001b3c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f8ef 	bl	8001d22 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d075      	beq.n	8001c3a <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d06c      	beq.n	8001c32 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b58:	6a3b      	ldr	r3, [r7, #32]
 8001b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d008      	beq.n	8001b74 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d008      	beq.n	8001b90 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	f043 0302 	orr.w	r3, r3, #2
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d008      	beq.n	8001bac <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	f043 0304 	orr.w	r3, r3, #4
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bac:	6a3b      	ldr	r3, [r7, #32]
 8001bae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d03d      	beq.n	8001c32 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d038      	beq.n	8001c32 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bc6:	2b30      	cmp	r3, #48	; 0x30
 8001bc8:	d017      	beq.n	8001bfa <HAL_CAN_IRQHandler+0x302>
 8001bca:	2b30      	cmp	r3, #48	; 0x30
 8001bcc:	d804      	bhi.n	8001bd8 <HAL_CAN_IRQHandler+0x2e0>
 8001bce:	2b10      	cmp	r3, #16
 8001bd0:	d009      	beq.n	8001be6 <HAL_CAN_IRQHandler+0x2ee>
 8001bd2:	2b20      	cmp	r3, #32
 8001bd4:	d00c      	beq.n	8001bf0 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001bd6:	e024      	b.n	8001c22 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001bd8:	2b50      	cmp	r3, #80	; 0x50
 8001bda:	d018      	beq.n	8001c0e <HAL_CAN_IRQHandler+0x316>
 8001bdc:	2b60      	cmp	r3, #96	; 0x60
 8001bde:	d01b      	beq.n	8001c18 <HAL_CAN_IRQHandler+0x320>
 8001be0:	2b40      	cmp	r3, #64	; 0x40
 8001be2:	d00f      	beq.n	8001c04 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001be4:	e01d      	b.n	8001c22 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	f043 0308 	orr.w	r3, r3, #8
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bee:	e018      	b.n	8001c22 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	f043 0310 	orr.w	r3, r3, #16
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bf8:	e013      	b.n	8001c22 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	f043 0320 	orr.w	r3, r3, #32
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c02:	e00e      	b.n	8001c22 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c0c:	e009      	b.n	8001c22 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c16:	e004      	b.n	8001c22 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c20:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	699a      	ldr	r2, [r3, #24]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c30:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2204      	movs	r2, #4
 8001c38:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d008      	beq.n	8001c52 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f872 	bl	8001d36 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c52:	bf00      	nop
 8001c54:	3728      	adds	r7, #40	; 0x28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <__NVIC_SetPriorityGrouping+0x44>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d68:	4013      	ands	r3, r2
 8001d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d7e:	4a04      	ldr	r2, [pc, #16]	; (8001d90 <__NVIC_SetPriorityGrouping+0x44>)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	60d3      	str	r3, [r2, #12]
}
 8001d84:	bf00      	nop
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <__NVIC_GetPriorityGrouping+0x18>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	0a1b      	lsrs	r3, r3, #8
 8001d9e:	f003 0307 	and.w	r3, r3, #7
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	db0b      	blt.n	8001dda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	f003 021f 	and.w	r2, r3, #31
 8001dc8:	4907      	ldr	r1, [pc, #28]	; (8001de8 <__NVIC_EnableIRQ+0x38>)
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	095b      	lsrs	r3, r3, #5
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000e100 	.word	0xe000e100

08001dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	6039      	str	r1, [r7, #0]
 8001df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	db0a      	blt.n	8001e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	490c      	ldr	r1, [pc, #48]	; (8001e38 <__NVIC_SetPriority+0x4c>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	0112      	lsls	r2, r2, #4
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e14:	e00a      	b.n	8001e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4908      	ldr	r1, [pc, #32]	; (8001e3c <__NVIC_SetPriority+0x50>)
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	3b04      	subs	r3, #4
 8001e24:	0112      	lsls	r2, r2, #4
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	440b      	add	r3, r1
 8001e2a:	761a      	strb	r2, [r3, #24]
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000e100 	.word	0xe000e100
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b089      	sub	sp, #36	; 0x24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f1c3 0307 	rsb	r3, r3, #7
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	bf28      	it	cs
 8001e5e:	2304      	movcs	r3, #4
 8001e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3304      	adds	r3, #4
 8001e66:	2b06      	cmp	r3, #6
 8001e68:	d902      	bls.n	8001e70 <NVIC_EncodePriority+0x30>
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3b03      	subs	r3, #3
 8001e6e:	e000      	b.n	8001e72 <NVIC_EncodePriority+0x32>
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e74:	f04f 32ff 	mov.w	r2, #4294967295
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	401a      	ands	r2, r3
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e88:	f04f 31ff 	mov.w	r1, #4294967295
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e92:	43d9      	mvns	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e98:	4313      	orrs	r3, r2
         );
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3724      	adds	r7, #36	; 0x24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb8:	d301      	bcc.n	8001ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00f      	b.n	8001ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <SysTick_Config+0x40>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ec6:	210f      	movs	r1, #15
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	f7ff ff8e 	bl	8001dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <SysTick_Config+0x40>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ed6:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <SysTick_Config+0x40>)
 8001ed8:	2207      	movs	r2, #7
 8001eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	e000e010 	.word	0xe000e010

08001eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff ff29 	bl	8001d4c <__NVIC_SetPriorityGrouping>
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b086      	sub	sp, #24
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	4603      	mov	r3, r0
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f14:	f7ff ff3e 	bl	8001d94 <__NVIC_GetPriorityGrouping>
 8001f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68b9      	ldr	r1, [r7, #8]
 8001f1e:	6978      	ldr	r0, [r7, #20]
 8001f20:	f7ff ff8e 	bl	8001e40 <NVIC_EncodePriority>
 8001f24:	4602      	mov	r2, r0
 8001f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff5d 	bl	8001dec <__NVIC_SetPriority>
}
 8001f32:	bf00      	nop
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	4603      	mov	r3, r0
 8001f42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff31 	bl	8001db0 <__NVIC_EnableIRQ>
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff ffa2 	bl	8001ea8 <SysTick_Config>
 8001f64:	4603      	mov	r3, r0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d004      	beq.n	8001f8c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2280      	movs	r2, #128	; 0x80
 8001f86:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e00c      	b.n	8001fa6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2205      	movs	r2, #5
 8001f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0201 	bic.w	r2, r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
	...

08001fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b089      	sub	sp, #36	; 0x24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
 8001fce:	e177      	b.n	80022c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	f040 8166 	bne.w	80022ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_Init+0x4a>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b12      	cmp	r3, #18
 8001ffc:	d123      	bne.n	8002046 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	08da      	lsrs	r2, r3, #3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3208      	adds	r2, #8
 8002006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800200a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	220f      	movs	r2, #15
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4013      	ands	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	691a      	ldr	r2, [r3, #16]
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	08da      	lsrs	r2, r3, #3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3208      	adds	r2, #8
 8002040:	69b9      	ldr	r1, [r7, #24]
 8002042:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	2203      	movs	r2, #3
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4013      	ands	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 0203 	and.w	r2, r3, #3
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d00b      	beq.n	800209a <HAL_GPIO_Init+0xe6>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d007      	beq.n	800209a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800208e:	2b11      	cmp	r3, #17
 8002090:	d003      	beq.n	800209a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b12      	cmp	r3, #18
 8002098:	d130      	bne.n	80020fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	2203      	movs	r2, #3
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020d0:	2201      	movs	r2, #1
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	091b      	lsrs	r3, r3, #4
 80020e6:	f003 0201 	and.w	r2, r3, #1
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	2203      	movs	r2, #3
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 80c0 	beq.w	80022ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	4b65      	ldr	r3, [pc, #404]	; (80022d4 <HAL_GPIO_Init+0x320>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	4a64      	ldr	r2, [pc, #400]	; (80022d4 <HAL_GPIO_Init+0x320>)
 8002144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002148:	6453      	str	r3, [r2, #68]	; 0x44
 800214a:	4b62      	ldr	r3, [pc, #392]	; (80022d4 <HAL_GPIO_Init+0x320>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002156:	4a60      	ldr	r2, [pc, #384]	; (80022d8 <HAL_GPIO_Init+0x324>)
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	089b      	lsrs	r3, r3, #2
 800215c:	3302      	adds	r3, #2
 800215e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	220f      	movs	r2, #15
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4013      	ands	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a57      	ldr	r2, [pc, #348]	; (80022dc <HAL_GPIO_Init+0x328>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d037      	beq.n	80021f2 <HAL_GPIO_Init+0x23e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a56      	ldr	r2, [pc, #344]	; (80022e0 <HAL_GPIO_Init+0x32c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d031      	beq.n	80021ee <HAL_GPIO_Init+0x23a>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a55      	ldr	r2, [pc, #340]	; (80022e4 <HAL_GPIO_Init+0x330>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d02b      	beq.n	80021ea <HAL_GPIO_Init+0x236>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a54      	ldr	r2, [pc, #336]	; (80022e8 <HAL_GPIO_Init+0x334>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d025      	beq.n	80021e6 <HAL_GPIO_Init+0x232>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a53      	ldr	r2, [pc, #332]	; (80022ec <HAL_GPIO_Init+0x338>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d01f      	beq.n	80021e2 <HAL_GPIO_Init+0x22e>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a52      	ldr	r2, [pc, #328]	; (80022f0 <HAL_GPIO_Init+0x33c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d019      	beq.n	80021de <HAL_GPIO_Init+0x22a>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a51      	ldr	r2, [pc, #324]	; (80022f4 <HAL_GPIO_Init+0x340>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d013      	beq.n	80021da <HAL_GPIO_Init+0x226>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a50      	ldr	r2, [pc, #320]	; (80022f8 <HAL_GPIO_Init+0x344>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d00d      	beq.n	80021d6 <HAL_GPIO_Init+0x222>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a4f      	ldr	r2, [pc, #316]	; (80022fc <HAL_GPIO_Init+0x348>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d007      	beq.n	80021d2 <HAL_GPIO_Init+0x21e>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a4e      	ldr	r2, [pc, #312]	; (8002300 <HAL_GPIO_Init+0x34c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d101      	bne.n	80021ce <HAL_GPIO_Init+0x21a>
 80021ca:	2309      	movs	r3, #9
 80021cc:	e012      	b.n	80021f4 <HAL_GPIO_Init+0x240>
 80021ce:	230a      	movs	r3, #10
 80021d0:	e010      	b.n	80021f4 <HAL_GPIO_Init+0x240>
 80021d2:	2308      	movs	r3, #8
 80021d4:	e00e      	b.n	80021f4 <HAL_GPIO_Init+0x240>
 80021d6:	2307      	movs	r3, #7
 80021d8:	e00c      	b.n	80021f4 <HAL_GPIO_Init+0x240>
 80021da:	2306      	movs	r3, #6
 80021dc:	e00a      	b.n	80021f4 <HAL_GPIO_Init+0x240>
 80021de:	2305      	movs	r3, #5
 80021e0:	e008      	b.n	80021f4 <HAL_GPIO_Init+0x240>
 80021e2:	2304      	movs	r3, #4
 80021e4:	e006      	b.n	80021f4 <HAL_GPIO_Init+0x240>
 80021e6:	2303      	movs	r3, #3
 80021e8:	e004      	b.n	80021f4 <HAL_GPIO_Init+0x240>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e002      	b.n	80021f4 <HAL_GPIO_Init+0x240>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <HAL_GPIO_Init+0x240>
 80021f2:	2300      	movs	r3, #0
 80021f4:	69fa      	ldr	r2, [r7, #28]
 80021f6:	f002 0203 	and.w	r2, r2, #3
 80021fa:	0092      	lsls	r2, r2, #2
 80021fc:	4093      	lsls	r3, r2
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002204:	4934      	ldr	r1, [pc, #208]	; (80022d8 <HAL_GPIO_Init+0x324>)
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	089b      	lsrs	r3, r3, #2
 800220a:	3302      	adds	r3, #2
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002212:	4b3c      	ldr	r3, [pc, #240]	; (8002304 <HAL_GPIO_Init+0x350>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	43db      	mvns	r3, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4013      	ands	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002236:	4a33      	ldr	r2, [pc, #204]	; (8002304 <HAL_GPIO_Init+0x350>)
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800223c:	4b31      	ldr	r3, [pc, #196]	; (8002304 <HAL_GPIO_Init+0x350>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002260:	4a28      	ldr	r2, [pc, #160]	; (8002304 <HAL_GPIO_Init+0x350>)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002266:	4b27      	ldr	r3, [pc, #156]	; (8002304 <HAL_GPIO_Init+0x350>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	43db      	mvns	r3, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4013      	ands	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800228a:	4a1e      	ldr	r2, [pc, #120]	; (8002304 <HAL_GPIO_Init+0x350>)
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002290:	4b1c      	ldr	r3, [pc, #112]	; (8002304 <HAL_GPIO_Init+0x350>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022b4:	4a13      	ldr	r2, [pc, #76]	; (8002304 <HAL_GPIO_Init+0x350>)
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	3301      	adds	r3, #1
 80022be:	61fb      	str	r3, [r7, #28]
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	2b0f      	cmp	r3, #15
 80022c4:	f67f ae84 	bls.w	8001fd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022c8:	bf00      	nop
 80022ca:	3724      	adds	r7, #36	; 0x24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40013800 	.word	0x40013800
 80022dc:	40020000 	.word	0x40020000
 80022e0:	40020400 	.word	0x40020400
 80022e4:	40020800 	.word	0x40020800
 80022e8:	40020c00 	.word	0x40020c00
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40021400 	.word	0x40021400
 80022f4:	40021800 	.word	0x40021800
 80022f8:	40021c00 	.word	0x40021c00
 80022fc:	40022000 	.word	0x40022000
 8002300:	40022400 	.word	0x40022400
 8002304:	40013c00 	.word	0x40013c00

08002308 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691a      	ldr	r2, [r3, #16]
 8002318:	887b      	ldrh	r3, [r7, #2]
 800231a:	4013      	ands	r3, r2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d002      	beq.n	8002326 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002320:	2301      	movs	r3, #1
 8002322:	73fb      	strb	r3, [r7, #15]
 8002324:	e001      	b.n	800232a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002326:	2300      	movs	r3, #0
 8002328:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800232a:	7bfb      	ldrb	r3, [r7, #15]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	807b      	strh	r3, [r7, #2]
 8002344:	4613      	mov	r3, r2
 8002346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002348:	787b      	ldrb	r3, [r7, #1]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800234e:	887a      	ldrh	r2, [r7, #2]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002354:	e003      	b.n	800235e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002356:	887b      	ldrh	r3, [r7, #2]
 8002358:	041a      	lsls	r2, r3, #16
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	619a      	str	r2, [r3, #24]
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
 8002372:	460b      	mov	r3, r1
 8002374:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695a      	ldr	r2, [r3, #20]
 800237a:	887b      	ldrh	r3, [r7, #2]
 800237c:	401a      	ands	r2, r3
 800237e:	887b      	ldrh	r3, [r7, #2]
 8002380:	429a      	cmp	r2, r3
 8002382:	d104      	bne.n	800238e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002384:	887b      	ldrh	r3, [r7, #2]
 8002386:	041a      	lsls	r2, r3, #16
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800238c:	e002      	b.n	8002394 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800238e:	887a      	ldrh	r2, [r7, #2]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	619a      	str	r2, [r3, #24]
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e22d      	b.n	800280e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d075      	beq.n	80024aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023be:	4ba3      	ldr	r3, [pc, #652]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d00c      	beq.n	80023e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ca:	4ba0      	ldr	r3, [pc, #640]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023d2:	2b08      	cmp	r3, #8
 80023d4:	d112      	bne.n	80023fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023d6:	4b9d      	ldr	r3, [pc, #628]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023e2:	d10b      	bne.n	80023fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e4:	4b99      	ldr	r3, [pc, #612]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d05b      	beq.n	80024a8 <HAL_RCC_OscConfig+0x108>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d157      	bne.n	80024a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e208      	b.n	800280e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002404:	d106      	bne.n	8002414 <HAL_RCC_OscConfig+0x74>
 8002406:	4b91      	ldr	r3, [pc, #580]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a90      	ldr	r2, [pc, #576]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 800240c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	e01d      	b.n	8002450 <HAL_RCC_OscConfig+0xb0>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800241c:	d10c      	bne.n	8002438 <HAL_RCC_OscConfig+0x98>
 800241e:	4b8b      	ldr	r3, [pc, #556]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a8a      	ldr	r2, [pc, #552]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	4b88      	ldr	r3, [pc, #544]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a87      	ldr	r2, [pc, #540]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	e00b      	b.n	8002450 <HAL_RCC_OscConfig+0xb0>
 8002438:	4b84      	ldr	r3, [pc, #528]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a83      	ldr	r2, [pc, #524]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 800243e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002442:	6013      	str	r3, [r2, #0]
 8002444:	4b81      	ldr	r3, [pc, #516]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a80      	ldr	r2, [pc, #512]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 800244a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800244e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d013      	beq.n	8002480 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7fe fdec 	bl	8001034 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002460:	f7fe fde8 	bl	8001034 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b64      	cmp	r3, #100	; 0x64
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e1cd      	b.n	800280e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002472:	4b76      	ldr	r3, [pc, #472]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0f0      	beq.n	8002460 <HAL_RCC_OscConfig+0xc0>
 800247e:	e014      	b.n	80024aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002480:	f7fe fdd8 	bl	8001034 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002488:	f7fe fdd4 	bl	8001034 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b64      	cmp	r3, #100	; 0x64
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e1b9      	b.n	800280e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800249a:	4b6c      	ldr	r3, [pc, #432]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCC_OscConfig+0xe8>
 80024a6:	e000      	b.n	80024aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d063      	beq.n	800257e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024b6:	4b65      	ldr	r3, [pc, #404]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 030c 	and.w	r3, r3, #12
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00b      	beq.n	80024da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024c2:	4b62      	ldr	r3, [pc, #392]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d11c      	bne.n	8002508 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ce:	4b5f      	ldr	r3, [pc, #380]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d116      	bne.n	8002508 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024da:	4b5c      	ldr	r3, [pc, #368]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d005      	beq.n	80024f2 <HAL_RCC_OscConfig+0x152>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d001      	beq.n	80024f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e18d      	b.n	800280e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f2:	4b56      	ldr	r3, [pc, #344]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4952      	ldr	r1, [pc, #328]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002502:	4313      	orrs	r3, r2
 8002504:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002506:	e03a      	b.n	800257e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d020      	beq.n	8002552 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002510:	4b4f      	ldr	r3, [pc, #316]	; (8002650 <HAL_RCC_OscConfig+0x2b0>)
 8002512:	2201      	movs	r2, #1
 8002514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002516:	f7fe fd8d 	bl	8001034 <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800251e:	f7fe fd89 	bl	8001034 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e16e      	b.n	800280e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002530:	4b46      	ldr	r3, [pc, #280]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0f0      	beq.n	800251e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253c:	4b43      	ldr	r3, [pc, #268]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	4940      	ldr	r1, [pc, #256]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 800254c:	4313      	orrs	r3, r2
 800254e:	600b      	str	r3, [r1, #0]
 8002550:	e015      	b.n	800257e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002552:	4b3f      	ldr	r3, [pc, #252]	; (8002650 <HAL_RCC_OscConfig+0x2b0>)
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002558:	f7fe fd6c 	bl	8001034 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002560:	f7fe fd68 	bl	8001034 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e14d      	b.n	800280e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002572:	4b36      	ldr	r3, [pc, #216]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f0      	bne.n	8002560 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b00      	cmp	r3, #0
 8002588:	d030      	beq.n	80025ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d016      	beq.n	80025c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002592:	4b30      	ldr	r3, [pc, #192]	; (8002654 <HAL_RCC_OscConfig+0x2b4>)
 8002594:	2201      	movs	r2, #1
 8002596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002598:	f7fe fd4c 	bl	8001034 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a0:	f7fe fd48 	bl	8001034 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e12d      	b.n	800280e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025b2:	4b26      	ldr	r3, [pc, #152]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f0      	beq.n	80025a0 <HAL_RCC_OscConfig+0x200>
 80025be:	e015      	b.n	80025ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025c0:	4b24      	ldr	r3, [pc, #144]	; (8002654 <HAL_RCC_OscConfig+0x2b4>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c6:	f7fe fd35 	bl	8001034 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ce:	f7fe fd31 	bl	8001034 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e116      	b.n	800280e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e0:	4b1a      	ldr	r3, [pc, #104]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 80025e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1f0      	bne.n	80025ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 80a0 	beq.w	800273a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025fa:	2300      	movs	r3, #0
 80025fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025fe:	4b13      	ldr	r3, [pc, #76]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10f      	bne.n	800262a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	4b0f      	ldr	r3, [pc, #60]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	4a0e      	ldr	r2, [pc, #56]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002618:	6413      	str	r3, [r2, #64]	; 0x40
 800261a:	4b0c      	ldr	r3, [pc, #48]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002626:	2301      	movs	r3, #1
 8002628:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262a:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <HAL_RCC_OscConfig+0x2b8>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002632:	2b00      	cmp	r3, #0
 8002634:	d121      	bne.n	800267a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002636:	4b08      	ldr	r3, [pc, #32]	; (8002658 <HAL_RCC_OscConfig+0x2b8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a07      	ldr	r2, [pc, #28]	; (8002658 <HAL_RCC_OscConfig+0x2b8>)
 800263c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002642:	f7fe fcf7 	bl	8001034 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002648:	e011      	b.n	800266e <HAL_RCC_OscConfig+0x2ce>
 800264a:	bf00      	nop
 800264c:	40023800 	.word	0x40023800
 8002650:	42470000 	.word	0x42470000
 8002654:	42470e80 	.word	0x42470e80
 8002658:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800265c:	f7fe fcea 	bl	8001034 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e0cf      	b.n	800280e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266e:	4b6a      	ldr	r3, [pc, #424]	; (8002818 <HAL_RCC_OscConfig+0x478>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d106      	bne.n	8002690 <HAL_RCC_OscConfig+0x2f0>
 8002682:	4b66      	ldr	r3, [pc, #408]	; (800281c <HAL_RCC_OscConfig+0x47c>)
 8002684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002686:	4a65      	ldr	r2, [pc, #404]	; (800281c <HAL_RCC_OscConfig+0x47c>)
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	6713      	str	r3, [r2, #112]	; 0x70
 800268e:	e01c      	b.n	80026ca <HAL_RCC_OscConfig+0x32a>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	2b05      	cmp	r3, #5
 8002696:	d10c      	bne.n	80026b2 <HAL_RCC_OscConfig+0x312>
 8002698:	4b60      	ldr	r3, [pc, #384]	; (800281c <HAL_RCC_OscConfig+0x47c>)
 800269a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269c:	4a5f      	ldr	r2, [pc, #380]	; (800281c <HAL_RCC_OscConfig+0x47c>)
 800269e:	f043 0304 	orr.w	r3, r3, #4
 80026a2:	6713      	str	r3, [r2, #112]	; 0x70
 80026a4:	4b5d      	ldr	r3, [pc, #372]	; (800281c <HAL_RCC_OscConfig+0x47c>)
 80026a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a8:	4a5c      	ldr	r2, [pc, #368]	; (800281c <HAL_RCC_OscConfig+0x47c>)
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	6713      	str	r3, [r2, #112]	; 0x70
 80026b0:	e00b      	b.n	80026ca <HAL_RCC_OscConfig+0x32a>
 80026b2:	4b5a      	ldr	r3, [pc, #360]	; (800281c <HAL_RCC_OscConfig+0x47c>)
 80026b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b6:	4a59      	ldr	r2, [pc, #356]	; (800281c <HAL_RCC_OscConfig+0x47c>)
 80026b8:	f023 0301 	bic.w	r3, r3, #1
 80026bc:	6713      	str	r3, [r2, #112]	; 0x70
 80026be:	4b57      	ldr	r3, [pc, #348]	; (800281c <HAL_RCC_OscConfig+0x47c>)
 80026c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c2:	4a56      	ldr	r2, [pc, #344]	; (800281c <HAL_RCC_OscConfig+0x47c>)
 80026c4:	f023 0304 	bic.w	r3, r3, #4
 80026c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d015      	beq.n	80026fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d2:	f7fe fcaf 	bl	8001034 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d8:	e00a      	b.n	80026f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026da:	f7fe fcab 	bl	8001034 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e08e      	b.n	800280e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f0:	4b4a      	ldr	r3, [pc, #296]	; (800281c <HAL_RCC_OscConfig+0x47c>)
 80026f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0ee      	beq.n	80026da <HAL_RCC_OscConfig+0x33a>
 80026fc:	e014      	b.n	8002728 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fe:	f7fe fc99 	bl	8001034 <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002704:	e00a      	b.n	800271c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002706:	f7fe fc95 	bl	8001034 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	f241 3288 	movw	r2, #5000	; 0x1388
 8002714:	4293      	cmp	r3, r2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e078      	b.n	800280e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800271c:	4b3f      	ldr	r3, [pc, #252]	; (800281c <HAL_RCC_OscConfig+0x47c>)
 800271e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1ee      	bne.n	8002706 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002728:	7dfb      	ldrb	r3, [r7, #23]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d105      	bne.n	800273a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800272e:	4b3b      	ldr	r3, [pc, #236]	; (800281c <HAL_RCC_OscConfig+0x47c>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	4a3a      	ldr	r2, [pc, #232]	; (800281c <HAL_RCC_OscConfig+0x47c>)
 8002734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002738:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d064      	beq.n	800280c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002742:	4b36      	ldr	r3, [pc, #216]	; (800281c <HAL_RCC_OscConfig+0x47c>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 030c 	and.w	r3, r3, #12
 800274a:	2b08      	cmp	r3, #8
 800274c:	d05c      	beq.n	8002808 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	2b02      	cmp	r3, #2
 8002754:	d141      	bne.n	80027da <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002756:	4b32      	ldr	r3, [pc, #200]	; (8002820 <HAL_RCC_OscConfig+0x480>)
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275c:	f7fe fc6a 	bl	8001034 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002764:	f7fe fc66 	bl	8001034 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e04b      	b.n	800280e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002776:	4b29      	ldr	r3, [pc, #164]	; (800281c <HAL_RCC_OscConfig+0x47c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69da      	ldr	r2, [r3, #28]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	019b      	lsls	r3, r3, #6
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	085b      	lsrs	r3, r3, #1
 800279a:	3b01      	subs	r3, #1
 800279c:	041b      	lsls	r3, r3, #16
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a4:	061b      	lsls	r3, r3, #24
 80027a6:	491d      	ldr	r1, [pc, #116]	; (800281c <HAL_RCC_OscConfig+0x47c>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ac:	4b1c      	ldr	r3, [pc, #112]	; (8002820 <HAL_RCC_OscConfig+0x480>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b2:	f7fe fc3f 	bl	8001034 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ba:	f7fe fc3b 	bl	8001034 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e020      	b.n	800280e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027cc:	4b13      	ldr	r3, [pc, #76]	; (800281c <HAL_RCC_OscConfig+0x47c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f0      	beq.n	80027ba <HAL_RCC_OscConfig+0x41a>
 80027d8:	e018      	b.n	800280c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027da:	4b11      	ldr	r3, [pc, #68]	; (8002820 <HAL_RCC_OscConfig+0x480>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e0:	f7fe fc28 	bl	8001034 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e8:	f7fe fc24 	bl	8001034 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e009      	b.n	800280e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fa:	4b08      	ldr	r3, [pc, #32]	; (800281c <HAL_RCC_OscConfig+0x47c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0x448>
 8002806:	e001      	b.n	800280c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e000      	b.n	800280e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40007000 	.word	0x40007000
 800281c:	40023800 	.word	0x40023800
 8002820:	42470060 	.word	0x42470060

08002824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e0ca      	b.n	80029ce <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002838:	4b67      	ldr	r3, [pc, #412]	; (80029d8 <HAL_RCC_ClockConfig+0x1b4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 030f 	and.w	r3, r3, #15
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d90c      	bls.n	8002860 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002846:	4b64      	ldr	r3, [pc, #400]	; (80029d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800284e:	4b62      	ldr	r3, [pc, #392]	; (80029d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	429a      	cmp	r2, r3
 800285a:	d001      	beq.n	8002860 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0b6      	b.n	80029ce <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d020      	beq.n	80028ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002878:	4b58      	ldr	r3, [pc, #352]	; (80029dc <HAL_RCC_ClockConfig+0x1b8>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	4a57      	ldr	r2, [pc, #348]	; (80029dc <HAL_RCC_ClockConfig+0x1b8>)
 800287e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002882:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002890:	4b52      	ldr	r3, [pc, #328]	; (80029dc <HAL_RCC_ClockConfig+0x1b8>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	4a51      	ldr	r2, [pc, #324]	; (80029dc <HAL_RCC_ClockConfig+0x1b8>)
 8002896:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800289a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800289c:	4b4f      	ldr	r3, [pc, #316]	; (80029dc <HAL_RCC_ClockConfig+0x1b8>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	494c      	ldr	r1, [pc, #304]	; (80029dc <HAL_RCC_ClockConfig+0x1b8>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d044      	beq.n	8002944 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d107      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c2:	4b46      	ldr	r3, [pc, #280]	; (80029dc <HAL_RCC_ClockConfig+0x1b8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d119      	bne.n	8002902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e07d      	b.n	80029ce <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d003      	beq.n	80028e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028de:	2b03      	cmp	r3, #3
 80028e0:	d107      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e2:	4b3e      	ldr	r3, [pc, #248]	; (80029dc <HAL_RCC_ClockConfig+0x1b8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d109      	bne.n	8002902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e06d      	b.n	80029ce <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f2:	4b3a      	ldr	r3, [pc, #232]	; (80029dc <HAL_RCC_ClockConfig+0x1b8>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e065      	b.n	80029ce <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002902:	4b36      	ldr	r3, [pc, #216]	; (80029dc <HAL_RCC_ClockConfig+0x1b8>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f023 0203 	bic.w	r2, r3, #3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	4933      	ldr	r1, [pc, #204]	; (80029dc <HAL_RCC_ClockConfig+0x1b8>)
 8002910:	4313      	orrs	r3, r2
 8002912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002914:	f7fe fb8e 	bl	8001034 <HAL_GetTick>
 8002918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291a:	e00a      	b.n	8002932 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800291c:	f7fe fb8a 	bl	8001034 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	f241 3288 	movw	r2, #5000	; 0x1388
 800292a:	4293      	cmp	r3, r2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e04d      	b.n	80029ce <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002932:	4b2a      	ldr	r3, [pc, #168]	; (80029dc <HAL_RCC_ClockConfig+0x1b8>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 020c 	and.w	r2, r3, #12
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	429a      	cmp	r2, r3
 8002942:	d1eb      	bne.n	800291c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002944:	4b24      	ldr	r3, [pc, #144]	; (80029d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 030f 	and.w	r3, r3, #15
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d20c      	bcs.n	800296c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002952:	4b21      	ldr	r3, [pc, #132]	; (80029d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800295a:	4b1f      	ldr	r3, [pc, #124]	; (80029d8 <HAL_RCC_ClockConfig+0x1b4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d001      	beq.n	800296c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e030      	b.n	80029ce <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d008      	beq.n	800298a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002978:	4b18      	ldr	r3, [pc, #96]	; (80029dc <HAL_RCC_ClockConfig+0x1b8>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	4915      	ldr	r1, [pc, #84]	; (80029dc <HAL_RCC_ClockConfig+0x1b8>)
 8002986:	4313      	orrs	r3, r2
 8002988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b00      	cmp	r3, #0
 8002994:	d009      	beq.n	80029aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002996:	4b11      	ldr	r3, [pc, #68]	; (80029dc <HAL_RCC_ClockConfig+0x1b8>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	490d      	ldr	r1, [pc, #52]	; (80029dc <HAL_RCC_ClockConfig+0x1b8>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029aa:	f000 f81d 	bl	80029e8 <HAL_RCC_GetSysClockFreq>
 80029ae:	4601      	mov	r1, r0
 80029b0:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <HAL_RCC_ClockConfig+0x1b8>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	091b      	lsrs	r3, r3, #4
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	4a09      	ldr	r2, [pc, #36]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 80029bc:	5cd3      	ldrb	r3, [r2, r3]
 80029be:	fa21 f303 	lsr.w	r3, r1, r3
 80029c2:	4a08      	ldr	r2, [pc, #32]	; (80029e4 <HAL_RCC_ClockConfig+0x1c0>)
 80029c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80029c6:	2000      	movs	r0, #0
 80029c8:	f7fe faf0 	bl	8000fac <HAL_InitTick>

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40023c00 	.word	0x40023c00
 80029dc:	40023800 	.word	0x40023800
 80029e0:	0800cd34 	.word	0x0800cd34
 80029e4:	2000001c 	.word	0x2000001c

080029e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	607b      	str	r3, [r7, #4]
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	2300      	movs	r3, #0
 80029f8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029fe:	4b50      	ldr	r3, [pc, #320]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 030c 	and.w	r3, r3, #12
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d007      	beq.n	8002a1a <HAL_RCC_GetSysClockFreq+0x32>
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d008      	beq.n	8002a20 <HAL_RCC_GetSysClockFreq+0x38>
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f040 808d 	bne.w	8002b2e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a14:	4b4b      	ldr	r3, [pc, #300]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002a16:	60bb      	str	r3, [r7, #8]
       break;
 8002a18:	e08c      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a1a:	4b4b      	ldr	r3, [pc, #300]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a1c:	60bb      	str	r3, [r7, #8]
      break;
 8002a1e:	e089      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a20:	4b47      	ldr	r3, [pc, #284]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a28:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a2a:	4b45      	ldr	r3, [pc, #276]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d023      	beq.n	8002a7e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a36:	4b42      	ldr	r3, [pc, #264]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	099b      	lsrs	r3, r3, #6
 8002a3c:	f04f 0400 	mov.w	r4, #0
 8002a40:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	ea03 0501 	and.w	r5, r3, r1
 8002a4c:	ea04 0602 	and.w	r6, r4, r2
 8002a50:	4a3d      	ldr	r2, [pc, #244]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a52:	fb02 f106 	mul.w	r1, r2, r6
 8002a56:	2200      	movs	r2, #0
 8002a58:	fb02 f205 	mul.w	r2, r2, r5
 8002a5c:	440a      	add	r2, r1
 8002a5e:	493a      	ldr	r1, [pc, #232]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a60:	fba5 0101 	umull	r0, r1, r5, r1
 8002a64:	1853      	adds	r3, r2, r1
 8002a66:	4619      	mov	r1, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f04f 0400 	mov.w	r4, #0
 8002a6e:	461a      	mov	r2, r3
 8002a70:	4623      	mov	r3, r4
 8002a72:	f7fe f8f9 	bl	8000c68 <__aeabi_uldivmod>
 8002a76:	4603      	mov	r3, r0
 8002a78:	460c      	mov	r4, r1
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	e049      	b.n	8002b12 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a7e:	4b30      	ldr	r3, [pc, #192]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	099b      	lsrs	r3, r3, #6
 8002a84:	f04f 0400 	mov.w	r4, #0
 8002a88:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	ea03 0501 	and.w	r5, r3, r1
 8002a94:	ea04 0602 	and.w	r6, r4, r2
 8002a98:	4629      	mov	r1, r5
 8002a9a:	4632      	mov	r2, r6
 8002a9c:	f04f 0300 	mov.w	r3, #0
 8002aa0:	f04f 0400 	mov.w	r4, #0
 8002aa4:	0154      	lsls	r4, r2, #5
 8002aa6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002aaa:	014b      	lsls	r3, r1, #5
 8002aac:	4619      	mov	r1, r3
 8002aae:	4622      	mov	r2, r4
 8002ab0:	1b49      	subs	r1, r1, r5
 8002ab2:	eb62 0206 	sbc.w	r2, r2, r6
 8002ab6:	f04f 0300 	mov.w	r3, #0
 8002aba:	f04f 0400 	mov.w	r4, #0
 8002abe:	0194      	lsls	r4, r2, #6
 8002ac0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ac4:	018b      	lsls	r3, r1, #6
 8002ac6:	1a5b      	subs	r3, r3, r1
 8002ac8:	eb64 0402 	sbc.w	r4, r4, r2
 8002acc:	f04f 0100 	mov.w	r1, #0
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	00e2      	lsls	r2, r4, #3
 8002ad6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ada:	00d9      	lsls	r1, r3, #3
 8002adc:	460b      	mov	r3, r1
 8002ade:	4614      	mov	r4, r2
 8002ae0:	195b      	adds	r3, r3, r5
 8002ae2:	eb44 0406 	adc.w	r4, r4, r6
 8002ae6:	f04f 0100 	mov.w	r1, #0
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	02a2      	lsls	r2, r4, #10
 8002af0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002af4:	0299      	lsls	r1, r3, #10
 8002af6:	460b      	mov	r3, r1
 8002af8:	4614      	mov	r4, r2
 8002afa:	4618      	mov	r0, r3
 8002afc:	4621      	mov	r1, r4
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f04f 0400 	mov.w	r4, #0
 8002b04:	461a      	mov	r2, r3
 8002b06:	4623      	mov	r3, r4
 8002b08:	f7fe f8ae 	bl	8000c68 <__aeabi_uldivmod>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	460c      	mov	r4, r1
 8002b10:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b12:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	0c1b      	lsrs	r3, r3, #16
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2a:	60bb      	str	r3, [r7, #8]
      break;
 8002b2c:	e002      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002b30:	60bb      	str	r3, [r7, #8]
      break;
 8002b32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b34:	68bb      	ldr	r3, [r7, #8]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40023800 	.word	0x40023800
 8002b44:	00f42400 	.word	0x00f42400
 8002b48:	00b71b00 	.word	0x00b71b00

08002b4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b50:	4b03      	ldr	r3, [pc, #12]	; (8002b60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b52:	681b      	ldr	r3, [r3, #0]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	2000001c 	.word	0x2000001c

08002b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b68:	f7ff fff0 	bl	8002b4c <HAL_RCC_GetHCLKFreq>
 8002b6c:	4601      	mov	r1, r0
 8002b6e:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	0a9b      	lsrs	r3, r3, #10
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	4a03      	ldr	r2, [pc, #12]	; (8002b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b7a:	5cd3      	ldrb	r3, [r2, r3]
 8002b7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40023800 	.word	0x40023800
 8002b88:	0800cd44 	.word	0x0800cd44

08002b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b90:	f7ff ffdc 	bl	8002b4c <HAL_RCC_GetHCLKFreq>
 8002b94:	4601      	mov	r1, r0
 8002b96:	4b05      	ldr	r3, [pc, #20]	; (8002bac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	0b5b      	lsrs	r3, r3, #13
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	4a03      	ldr	r2, [pc, #12]	; (8002bb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ba2:	5cd3      	ldrb	r3, [r2, r3]
 8002ba4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	0800cd44 	.word	0x0800cd44

08002bb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e056      	b.n	8002c74 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d106      	bne.n	8002be6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f005 ff37 	bl	8008a54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2202      	movs	r2, #2
 8002bea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bfc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	ea42 0103 	orr.w	r1, r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	0c1b      	lsrs	r3, r3, #16
 8002c44:	f003 0104 	and.w	r1, r3, #4
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	69da      	ldr	r2, [r3, #28]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c62:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08c      	sub	sp, #48	; 0x30
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
 8002c88:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d101      	bne.n	8002ca2 <HAL_SPI_TransmitReceive+0x26>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	e18a      	b.n	8002fb8 <HAL_SPI_TransmitReceive+0x33c>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002caa:	f7fe f9c3 	bl	8001034 <HAL_GetTick>
 8002cae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002cc0:	887b      	ldrh	r3, [r7, #2]
 8002cc2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002cc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d00f      	beq.n	8002cec <HAL_SPI_TransmitReceive+0x70>
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cd2:	d107      	bne.n	8002ce4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d103      	bne.n	8002ce4 <HAL_SPI_TransmitReceive+0x68>
 8002cdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ce0:	2b04      	cmp	r3, #4
 8002ce2:	d003      	beq.n	8002cec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002cea:	e15b      	b.n	8002fa4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d005      	beq.n	8002cfe <HAL_SPI_TransmitReceive+0x82>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <HAL_SPI_TransmitReceive+0x82>
 8002cf8:	887b      	ldrh	r3, [r7, #2]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d103      	bne.n	8002d06 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d04:	e14e      	b.n	8002fa4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d003      	beq.n	8002d1a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2205      	movs	r2, #5
 8002d16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	887a      	ldrh	r2, [r7, #2]
 8002d2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	887a      	ldrh	r2, [r7, #2]
 8002d30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	887a      	ldrh	r2, [r7, #2]
 8002d3c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	887a      	ldrh	r2, [r7, #2]
 8002d42:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5a:	2b40      	cmp	r3, #64	; 0x40
 8002d5c:	d007      	beq.n	8002d6e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d76:	d178      	bne.n	8002e6a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <HAL_SPI_TransmitReceive+0x10a>
 8002d80:	8b7b      	ldrh	r3, [r7, #26]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d166      	bne.n	8002e54 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	881a      	ldrh	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	1c9a      	adds	r2, r3, #2
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002daa:	e053      	b.n	8002e54 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d11b      	bne.n	8002df2 <HAL_SPI_TransmitReceive+0x176>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d016      	beq.n	8002df2 <HAL_SPI_TransmitReceive+0x176>
 8002dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d113      	bne.n	8002df2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	881a      	ldrh	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	1c9a      	adds	r2, r3, #2
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d119      	bne.n	8002e34 <HAL_SPI_TransmitReceive+0x1b8>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d014      	beq.n	8002e34 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e14:	b292      	uxth	r2, r2
 8002e16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1c:	1c9a      	adds	r2, r3, #2
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e30:	2301      	movs	r3, #1
 8002e32:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e34:	f7fe f8fe 	bl	8001034 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d807      	bhi.n	8002e54 <HAL_SPI_TransmitReceive+0x1d8>
 8002e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4a:	d003      	beq.n	8002e54 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002e52:	e0a7      	b.n	8002fa4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1a6      	bne.n	8002dac <HAL_SPI_TransmitReceive+0x130>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1a1      	bne.n	8002dac <HAL_SPI_TransmitReceive+0x130>
 8002e68:	e07c      	b.n	8002f64 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d002      	beq.n	8002e78 <HAL_SPI_TransmitReceive+0x1fc>
 8002e72:	8b7b      	ldrh	r3, [r7, #26]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d16b      	bne.n	8002f50 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	330c      	adds	r3, #12
 8002e82:	7812      	ldrb	r2, [r2, #0]
 8002e84:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	1c5a      	adds	r2, r3, #1
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e9e:	e057      	b.n	8002f50 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d11c      	bne.n	8002ee8 <HAL_SPI_TransmitReceive+0x26c>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d017      	beq.n	8002ee8 <HAL_SPI_TransmitReceive+0x26c>
 8002eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d114      	bne.n	8002ee8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	330c      	adds	r3, #12
 8002ec8:	7812      	ldrb	r2, [r2, #0]
 8002eca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d119      	bne.n	8002f2a <HAL_SPI_TransmitReceive+0x2ae>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d014      	beq.n	8002f2a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f12:	1c5a      	adds	r2, r3, #1
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f26:	2301      	movs	r3, #1
 8002f28:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f2a:	f7fe f883 	bl	8001034 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d803      	bhi.n	8002f42 <HAL_SPI_TransmitReceive+0x2c6>
 8002f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f40:	d102      	bne.n	8002f48 <HAL_SPI_TransmitReceive+0x2cc>
 8002f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d103      	bne.n	8002f50 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f4e:	e029      	b.n	8002fa4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1a2      	bne.n	8002ea0 <HAL_SPI_TransmitReceive+0x224>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d19d      	bne.n	8002ea0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 f893 	bl	8003094 <SPI_EndRxTxTransaction>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d006      	beq.n	8002f82 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002f80:	e010      	b.n	8002fa4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10b      	bne.n	8002fa2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	617b      	str	r3, [r7, #20]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	e000      	b.n	8002fa4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002fa2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002fb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3730      	adds	r7, #48	; 0x30
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	603b      	str	r3, [r7, #0]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fd0:	e04c      	b.n	800306c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd8:	d048      	beq.n	800306c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002fda:	f7fe f82b 	bl	8001034 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d902      	bls.n	8002ff0 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d13d      	bne.n	800306c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ffe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003008:	d111      	bne.n	800302e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003012:	d004      	beq.n	800301e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800301c:	d107      	bne.n	800302e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800302c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003036:	d10f      	bne.n	8003058 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003056:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e00f      	b.n	800308c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	4013      	ands	r3, r2
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	429a      	cmp	r2, r3
 800307a:	bf0c      	ite	eq
 800307c:	2301      	moveq	r3, #1
 800307e:	2300      	movne	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	461a      	mov	r2, r3
 8003084:	79fb      	ldrb	r3, [r7, #7]
 8003086:	429a      	cmp	r2, r3
 8003088:	d1a3      	bne.n	8002fd2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b088      	sub	sp, #32
 8003098:	af02      	add	r7, sp, #8
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80030a0:	4b1b      	ldr	r3, [pc, #108]	; (8003110 <SPI_EndRxTxTransaction+0x7c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a1b      	ldr	r2, [pc, #108]	; (8003114 <SPI_EndRxTxTransaction+0x80>)
 80030a6:	fba2 2303 	umull	r2, r3, r2, r3
 80030aa:	0d5b      	lsrs	r3, r3, #21
 80030ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030b0:	fb02 f303 	mul.w	r3, r2, r3
 80030b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030be:	d112      	bne.n	80030e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2200      	movs	r2, #0
 80030c8:	2180      	movs	r1, #128	; 0x80
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f7ff ff78 	bl	8002fc0 <SPI_WaitFlagStateUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d016      	beq.n	8003104 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030da:	f043 0220 	orr.w	r2, r3, #32
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e00f      	b.n	8003106 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00a      	beq.n	8003102 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fc:	2b80      	cmp	r3, #128	; 0x80
 80030fe:	d0f2      	beq.n	80030e6 <SPI_EndRxTxTransaction+0x52>
 8003100:	e000      	b.n	8003104 <SPI_EndRxTxTransaction+0x70>
        break;
 8003102:	bf00      	nop
  }

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	2000001c 	.word	0x2000001c
 8003114:	165e9f81 	.word	0x165e9f81

08003118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e01d      	b.n	8003166 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d106      	bne.n	8003144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f006 f888 	bl	8009254 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3304      	adds	r3, #4
 8003154:	4619      	mov	r1, r3
 8003156:	4610      	mov	r0, r2
 8003158:	f000 fa8c 	bl	8003674 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800316e:	b480      	push	{r7}
 8003170:	b085      	sub	sp, #20
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0201 	orr.w	r2, r2, #1
 8003184:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2b06      	cmp	r3, #6
 8003196:	d007      	beq.n	80031a8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0201 	orr.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b082      	sub	sp, #8
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e01d      	b.n	8003204 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d106      	bne.n	80031e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f005 ffd7 	bl	8009190 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2202      	movs	r2, #2
 80031e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	3304      	adds	r3, #4
 80031f2:	4619      	mov	r1, r3
 80031f4:	4610      	mov	r0, r2
 80031f6:	f000 fa3d 	bl	8003674 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2201      	movs	r2, #1
 800321c:	6839      	ldr	r1, [r7, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f000 fc78 	bl	8003b14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a15      	ldr	r2, [pc, #84]	; (8003280 <HAL_TIM_PWM_Start+0x74>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d004      	beq.n	8003238 <HAL_TIM_PWM_Start+0x2c>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a14      	ldr	r2, [pc, #80]	; (8003284 <HAL_TIM_PWM_Start+0x78>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d101      	bne.n	800323c <HAL_TIM_PWM_Start+0x30>
 8003238:	2301      	movs	r3, #1
 800323a:	e000      	b.n	800323e <HAL_TIM_PWM_Start+0x32>
 800323c:	2300      	movs	r3, #0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d007      	beq.n	8003252 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003250:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2b06      	cmp	r3, #6
 8003262:	d007      	beq.n	8003274 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40010000 	.word	0x40010000
 8003284:	40010400 	.word	0x40010400

08003288 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b02      	cmp	r3, #2
 800329c:	d122      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d11b      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f06f 0202 	mvn.w	r2, #2
 80032b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f9b4 	bl	8003638 <HAL_TIM_IC_CaptureCallback>
 80032d0:	e005      	b.n	80032de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f9a6 	bl	8003624 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f9b7 	bl	800364c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	f003 0304 	and.w	r3, r3, #4
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d122      	bne.n	8003338 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d11b      	bne.n	8003338 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f06f 0204 	mvn.w	r2, #4
 8003308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2202      	movs	r2, #2
 800330e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f98a 	bl	8003638 <HAL_TIM_IC_CaptureCallback>
 8003324:	e005      	b.n	8003332 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f97c 	bl	8003624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f98d 	bl	800364c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b08      	cmp	r3, #8
 8003344:	d122      	bne.n	800338c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b08      	cmp	r3, #8
 8003352:	d11b      	bne.n	800338c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0208 	mvn.w	r2, #8
 800335c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2204      	movs	r2, #4
 8003362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f960 	bl	8003638 <HAL_TIM_IC_CaptureCallback>
 8003378:	e005      	b.n	8003386 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f952 	bl	8003624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f963 	bl	800364c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	f003 0310 	and.w	r3, r3, #16
 8003396:	2b10      	cmp	r3, #16
 8003398:	d122      	bne.n	80033e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f003 0310 	and.w	r3, r3, #16
 80033a4:	2b10      	cmp	r3, #16
 80033a6:	d11b      	bne.n	80033e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f06f 0210 	mvn.w	r2, #16
 80033b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2208      	movs	r2, #8
 80033b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f936 	bl	8003638 <HAL_TIM_IC_CaptureCallback>
 80033cc:	e005      	b.n	80033da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f928 	bl	8003624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 f939 	bl	800364c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d10e      	bne.n	800340c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d107      	bne.n	800340c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f06f 0201 	mvn.w	r2, #1
 8003404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f003 fa12 	bl	8006830 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003416:	2b80      	cmp	r3, #128	; 0x80
 8003418:	d10e      	bne.n	8003438 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003424:	2b80      	cmp	r3, #128	; 0x80
 8003426:	d107      	bne.n	8003438 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 fc34 	bl	8003ca0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003442:	2b40      	cmp	r3, #64	; 0x40
 8003444:	d10e      	bne.n	8003464 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003450:	2b40      	cmp	r3, #64	; 0x40
 8003452:	d107      	bne.n	8003464 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800345c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f8fe 	bl	8003660 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b20      	cmp	r3, #32
 8003470:	d10e      	bne.n	8003490 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b20      	cmp	r3, #32
 800347e:	d107      	bne.n	8003490 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f06f 0220 	mvn.w	r2, #32
 8003488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 fbfe 	bl	8003c8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003490:	bf00      	nop
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e0b4      	b.n	800361c <HAL_TIM_PWM_ConfigChannel+0x184>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2202      	movs	r2, #2
 80034be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b0c      	cmp	r3, #12
 80034c6:	f200 809f 	bhi.w	8003608 <HAL_TIM_PWM_ConfigChannel+0x170>
 80034ca:	a201      	add	r2, pc, #4	; (adr r2, 80034d0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80034cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d0:	08003505 	.word	0x08003505
 80034d4:	08003609 	.word	0x08003609
 80034d8:	08003609 	.word	0x08003609
 80034dc:	08003609 	.word	0x08003609
 80034e0:	08003545 	.word	0x08003545
 80034e4:	08003609 	.word	0x08003609
 80034e8:	08003609 	.word	0x08003609
 80034ec:	08003609 	.word	0x08003609
 80034f0:	08003587 	.word	0x08003587
 80034f4:	08003609 	.word	0x08003609
 80034f8:	08003609 	.word	0x08003609
 80034fc:	08003609 	.word	0x08003609
 8003500:	080035c7 	.word	0x080035c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68b9      	ldr	r1, [r7, #8]
 800350a:	4618      	mov	r0, r3
 800350c:	f000 f952 	bl	80037b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699a      	ldr	r2, [r3, #24]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 0208 	orr.w	r2, r2, #8
 800351e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699a      	ldr	r2, [r3, #24]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0204 	bic.w	r2, r2, #4
 800352e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6999      	ldr	r1, [r3, #24]
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	691a      	ldr	r2, [r3, #16]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	619a      	str	r2, [r3, #24]
      break;
 8003542:	e062      	b.n	800360a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	4618      	mov	r0, r3
 800354c:	f000 f9a2 	bl	8003894 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	699a      	ldr	r2, [r3, #24]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800355e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699a      	ldr	r2, [r3, #24]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800356e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6999      	ldr	r1, [r3, #24]
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	021a      	lsls	r2, r3, #8
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	619a      	str	r2, [r3, #24]
      break;
 8003584:	e041      	b.n	800360a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68b9      	ldr	r1, [r7, #8]
 800358c:	4618      	mov	r0, r3
 800358e:	f000 f9f7 	bl	8003980 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	69da      	ldr	r2, [r3, #28]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f042 0208 	orr.w	r2, r2, #8
 80035a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	69da      	ldr	r2, [r3, #28]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0204 	bic.w	r2, r2, #4
 80035b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	69d9      	ldr	r1, [r3, #28]
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	691a      	ldr	r2, [r3, #16]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	61da      	str	r2, [r3, #28]
      break;
 80035c4:	e021      	b.n	800360a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68b9      	ldr	r1, [r7, #8]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 fa4b 	bl	8003a68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	69da      	ldr	r2, [r3, #28]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	69da      	ldr	r2, [r3, #28]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	69d9      	ldr	r1, [r3, #28]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	021a      	lsls	r2, r3, #8
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	61da      	str	r2, [r3, #28]
      break;
 8003606:	e000      	b.n	800360a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003608:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a40      	ldr	r2, [pc, #256]	; (8003788 <TIM_Base_SetConfig+0x114>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d013      	beq.n	80036b4 <TIM_Base_SetConfig+0x40>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003692:	d00f      	beq.n	80036b4 <TIM_Base_SetConfig+0x40>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a3d      	ldr	r2, [pc, #244]	; (800378c <TIM_Base_SetConfig+0x118>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d00b      	beq.n	80036b4 <TIM_Base_SetConfig+0x40>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a3c      	ldr	r2, [pc, #240]	; (8003790 <TIM_Base_SetConfig+0x11c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d007      	beq.n	80036b4 <TIM_Base_SetConfig+0x40>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a3b      	ldr	r2, [pc, #236]	; (8003794 <TIM_Base_SetConfig+0x120>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d003      	beq.n	80036b4 <TIM_Base_SetConfig+0x40>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a3a      	ldr	r2, [pc, #232]	; (8003798 <TIM_Base_SetConfig+0x124>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d108      	bne.n	80036c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a2f      	ldr	r2, [pc, #188]	; (8003788 <TIM_Base_SetConfig+0x114>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d02b      	beq.n	8003726 <TIM_Base_SetConfig+0xb2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d4:	d027      	beq.n	8003726 <TIM_Base_SetConfig+0xb2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a2c      	ldr	r2, [pc, #176]	; (800378c <TIM_Base_SetConfig+0x118>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d023      	beq.n	8003726 <TIM_Base_SetConfig+0xb2>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a2b      	ldr	r2, [pc, #172]	; (8003790 <TIM_Base_SetConfig+0x11c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d01f      	beq.n	8003726 <TIM_Base_SetConfig+0xb2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a2a      	ldr	r2, [pc, #168]	; (8003794 <TIM_Base_SetConfig+0x120>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d01b      	beq.n	8003726 <TIM_Base_SetConfig+0xb2>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a29      	ldr	r2, [pc, #164]	; (8003798 <TIM_Base_SetConfig+0x124>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d017      	beq.n	8003726 <TIM_Base_SetConfig+0xb2>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a28      	ldr	r2, [pc, #160]	; (800379c <TIM_Base_SetConfig+0x128>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d013      	beq.n	8003726 <TIM_Base_SetConfig+0xb2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a27      	ldr	r2, [pc, #156]	; (80037a0 <TIM_Base_SetConfig+0x12c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d00f      	beq.n	8003726 <TIM_Base_SetConfig+0xb2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a26      	ldr	r2, [pc, #152]	; (80037a4 <TIM_Base_SetConfig+0x130>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00b      	beq.n	8003726 <TIM_Base_SetConfig+0xb2>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a25      	ldr	r2, [pc, #148]	; (80037a8 <TIM_Base_SetConfig+0x134>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d007      	beq.n	8003726 <TIM_Base_SetConfig+0xb2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a24      	ldr	r2, [pc, #144]	; (80037ac <TIM_Base_SetConfig+0x138>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d003      	beq.n	8003726 <TIM_Base_SetConfig+0xb2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a23      	ldr	r2, [pc, #140]	; (80037b0 <TIM_Base_SetConfig+0x13c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d108      	bne.n	8003738 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800372c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	4313      	orrs	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a0a      	ldr	r2, [pc, #40]	; (8003788 <TIM_Base_SetConfig+0x114>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d003      	beq.n	800376c <TIM_Base_SetConfig+0xf8>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a0c      	ldr	r2, [pc, #48]	; (8003798 <TIM_Base_SetConfig+0x124>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d103      	bne.n	8003774 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	615a      	str	r2, [r3, #20]
}
 800377a:	bf00      	nop
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	40010000 	.word	0x40010000
 800378c:	40000400 	.word	0x40000400
 8003790:	40000800 	.word	0x40000800
 8003794:	40000c00 	.word	0x40000c00
 8003798:	40010400 	.word	0x40010400
 800379c:	40014000 	.word	0x40014000
 80037a0:	40014400 	.word	0x40014400
 80037a4:	40014800 	.word	0x40014800
 80037a8:	40001800 	.word	0x40001800
 80037ac:	40001c00 	.word	0x40001c00
 80037b0:	40002000 	.word	0x40002000

080037b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	f023 0201 	bic.w	r2, r3, #1
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f023 0303 	bic.w	r3, r3, #3
 80037ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f023 0302 	bic.w	r3, r3, #2
 80037fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	4313      	orrs	r3, r2
 8003806:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a20      	ldr	r2, [pc, #128]	; (800388c <TIM_OC1_SetConfig+0xd8>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d003      	beq.n	8003818 <TIM_OC1_SetConfig+0x64>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a1f      	ldr	r2, [pc, #124]	; (8003890 <TIM_OC1_SetConfig+0xdc>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d10c      	bne.n	8003832 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f023 0308 	bic.w	r3, r3, #8
 800381e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	4313      	orrs	r3, r2
 8003828:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f023 0304 	bic.w	r3, r3, #4
 8003830:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a15      	ldr	r2, [pc, #84]	; (800388c <TIM_OC1_SetConfig+0xd8>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d003      	beq.n	8003842 <TIM_OC1_SetConfig+0x8e>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a14      	ldr	r2, [pc, #80]	; (8003890 <TIM_OC1_SetConfig+0xdc>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d111      	bne.n	8003866 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003848:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003850:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	621a      	str	r2, [r3, #32]
}
 8003880:	bf00      	nop
 8003882:	371c      	adds	r7, #28
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	40010000 	.word	0x40010000
 8003890:	40010400 	.word	0x40010400

08003894 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	f023 0210 	bic.w	r2, r3, #16
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	021b      	lsls	r3, r3, #8
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f023 0320 	bic.w	r3, r3, #32
 80038de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a22      	ldr	r2, [pc, #136]	; (8003978 <TIM_OC2_SetConfig+0xe4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d003      	beq.n	80038fc <TIM_OC2_SetConfig+0x68>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a21      	ldr	r2, [pc, #132]	; (800397c <TIM_OC2_SetConfig+0xe8>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d10d      	bne.n	8003918 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003902:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	4313      	orrs	r3, r2
 800390e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003916:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a17      	ldr	r2, [pc, #92]	; (8003978 <TIM_OC2_SetConfig+0xe4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d003      	beq.n	8003928 <TIM_OC2_SetConfig+0x94>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a16      	ldr	r2, [pc, #88]	; (800397c <TIM_OC2_SetConfig+0xe8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d113      	bne.n	8003950 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800392e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003936:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	4313      	orrs	r3, r2
 8003942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4313      	orrs	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	621a      	str	r2, [r3, #32]
}
 800396a:	bf00      	nop
 800396c:	371c      	adds	r7, #28
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	40010000 	.word	0x40010000
 800397c:	40010400 	.word	0x40010400

08003980 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f023 0303 	bic.w	r3, r3, #3
 80039b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	4313      	orrs	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	021b      	lsls	r3, r3, #8
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a21      	ldr	r2, [pc, #132]	; (8003a60 <TIM_OC3_SetConfig+0xe0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d003      	beq.n	80039e6 <TIM_OC3_SetConfig+0x66>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a20      	ldr	r2, [pc, #128]	; (8003a64 <TIM_OC3_SetConfig+0xe4>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d10d      	bne.n	8003a02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	021b      	lsls	r3, r3, #8
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a16      	ldr	r2, [pc, #88]	; (8003a60 <TIM_OC3_SetConfig+0xe0>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d003      	beq.n	8003a12 <TIM_OC3_SetConfig+0x92>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a15      	ldr	r2, [pc, #84]	; (8003a64 <TIM_OC3_SetConfig+0xe4>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d113      	bne.n	8003a3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	621a      	str	r2, [r3, #32]
}
 8003a54:	bf00      	nop
 8003a56:	371c      	adds	r7, #28
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	40010000 	.word	0x40010000
 8003a64:	40010400 	.word	0x40010400

08003a68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	021b      	lsls	r3, r3, #8
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ab2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	031b      	lsls	r3, r3, #12
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a12      	ldr	r2, [pc, #72]	; (8003b0c <TIM_OC4_SetConfig+0xa4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d003      	beq.n	8003ad0 <TIM_OC4_SetConfig+0x68>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a11      	ldr	r2, [pc, #68]	; (8003b10 <TIM_OC4_SetConfig+0xa8>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d109      	bne.n	8003ae4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ad6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	019b      	lsls	r3, r3, #6
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	621a      	str	r2, [r3, #32]
}
 8003afe:	bf00      	nop
 8003b00:	371c      	adds	r7, #28
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	40010000 	.word	0x40010000
 8003b10:	40010400 	.word	0x40010400

08003b14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f003 031f 	and.w	r3, r3, #31
 8003b26:	2201      	movs	r2, #1
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a1a      	ldr	r2, [r3, #32]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	43db      	mvns	r3, r3
 8003b36:	401a      	ands	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a1a      	ldr	r2, [r3, #32]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f003 031f 	and.w	r3, r3, #31
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	621a      	str	r2, [r3, #32]
}
 8003b52:	bf00      	nop
 8003b54:	371c      	adds	r7, #28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b085      	sub	sp, #20
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d101      	bne.n	8003b76 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b72:	2302      	movs	r3, #2
 8003b74:	e032      	b.n	8003bdc <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2202      	movs	r2, #2
 8003b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bae:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d101      	bne.n	8003c04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e03d      	b.n	8003c80 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	69db      	ldr	r3, [r3, #28]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e03f      	b.n	8003d46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d106      	bne.n	8003ce0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f005 fc5a 	bl	8009594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2224      	movs	r2, #36	; 0x24
 8003ce4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 fb93 	bl	8004424 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	691a      	ldr	r2, [r3, #16]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695a      	ldr	r2, [r3, #20]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b088      	sub	sp, #32
 8003d52:	af02      	add	r7, sp, #8
 8003d54:	60f8      	str	r0, [r7, #12]
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	603b      	str	r3, [r7, #0]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b20      	cmp	r3, #32
 8003d6c:	f040 8083 	bne.w	8003e76 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <HAL_UART_Transmit+0x2e>
 8003d76:	88fb      	ldrh	r3, [r7, #6]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e07b      	b.n	8003e78 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d101      	bne.n	8003d8e <HAL_UART_Transmit+0x40>
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	e074      	b.n	8003e78 <HAL_UART_Transmit+0x12a>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2221      	movs	r2, #33	; 0x21
 8003da0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003da4:	f7fd f946 	bl	8001034 <HAL_GetTick>
 8003da8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	88fa      	ldrh	r2, [r7, #6]
 8003dae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	88fa      	ldrh	r2, [r7, #6]
 8003db4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003db6:	e042      	b.n	8003e3e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dce:	d122      	bne.n	8003e16 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	2180      	movs	r1, #128	; 0x80
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 f9b6 	bl	800414c <UART_WaitOnFlagUntilTimeout>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e046      	b.n	8003e78 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	461a      	mov	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dfc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d103      	bne.n	8003e0e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	3302      	adds	r3, #2
 8003e0a:	60bb      	str	r3, [r7, #8]
 8003e0c:	e017      	b.n	8003e3e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	3301      	adds	r3, #1
 8003e12:	60bb      	str	r3, [r7, #8]
 8003e14:	e013      	b.n	8003e3e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	2180      	movs	r1, #128	; 0x80
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 f993 	bl	800414c <UART_WaitOnFlagUntilTimeout>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e023      	b.n	8003e78 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	1c5a      	adds	r2, r3, #1
 8003e34:	60ba      	str	r2, [r7, #8]
 8003e36:	781a      	ldrb	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1b7      	bne.n	8003db8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	2140      	movs	r1, #64	; 0x40
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 f97a 	bl	800414c <UART_WaitOnFlagUntilTimeout>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e00a      	b.n	8003e78 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2220      	movs	r2, #32
 8003e66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003e72:	2300      	movs	r3, #0
 8003e74:	e000      	b.n	8003e78 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003e76:	2302      	movs	r3, #2
  }
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b20      	cmp	r3, #32
 8003e98:	d140      	bne.n	8003f1c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <HAL_UART_Receive_IT+0x26>
 8003ea0:	88fb      	ldrh	r3, [r7, #6]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e039      	b.n	8003f1e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d101      	bne.n	8003eb8 <HAL_UART_Receive_IT+0x38>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e032      	b.n	8003f1e <HAL_UART_Receive_IT+0x9e>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	88fa      	ldrh	r2, [r7, #6]
 8003eca:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	88fa      	ldrh	r2, [r7, #6]
 8003ed0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2222      	movs	r2, #34	; 0x22
 8003edc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68da      	ldr	r2, [r3, #12]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ef6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695a      	ldr	r2, [r3, #20]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0201 	orr.w	r2, r2, #1
 8003f06:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0220 	orr.w	r2, r2, #32
 8003f16:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	e000      	b.n	8003f1e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003f1c:	2302      	movs	r3, #2
  }
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
	...

08003f2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b088      	sub	sp, #32
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10d      	bne.n	8003f7e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	f003 0320 	and.w	r3, r3, #32
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d008      	beq.n	8003f7e <HAL_UART_IRQHandler+0x52>
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f9d2 	bl	8004320 <UART_Receive_IT>
      return;
 8003f7c:	e0cc      	b.n	8004118 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 80ab 	beq.w	80040dc <HAL_UART_IRQHandler+0x1b0>
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d105      	bne.n	8003f9c <HAL_UART_IRQHandler+0x70>
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 80a0 	beq.w	80040dc <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <HAL_UART_IRQHandler+0x90>
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb4:	f043 0201 	orr.w	r2, r3, #1
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f003 0304 	and.w	r3, r3, #4
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00a      	beq.n	8003fdc <HAL_UART_IRQHandler+0xb0>
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d005      	beq.n	8003fdc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd4:	f043 0202 	orr.w	r2, r3, #2
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00a      	beq.n	8003ffc <HAL_UART_IRQHandler+0xd0>
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d005      	beq.n	8003ffc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff4:	f043 0204 	orr.w	r2, r3, #4
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <HAL_UART_IRQHandler+0xf0>
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004014:	f043 0208 	orr.w	r2, r3, #8
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004020:	2b00      	cmp	r3, #0
 8004022:	d078      	beq.n	8004116 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f003 0320 	and.w	r3, r3, #32
 800402a:	2b00      	cmp	r3, #0
 800402c:	d007      	beq.n	800403e <HAL_UART_IRQHandler+0x112>
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	f003 0320 	and.w	r3, r3, #32
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f971 	bl	8004320 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004048:	2b40      	cmp	r3, #64	; 0x40
 800404a:	bf0c      	ite	eq
 800404c:	2301      	moveq	r3, #1
 800404e:	2300      	movne	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b00      	cmp	r3, #0
 800405e:	d102      	bne.n	8004066 <HAL_UART_IRQHandler+0x13a>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d031      	beq.n	80040ca <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f8ba 	bl	80041e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004076:	2b40      	cmp	r3, #64	; 0x40
 8004078:	d123      	bne.n	80040c2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	695a      	ldr	r2, [r3, #20]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004088:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408e:	2b00      	cmp	r3, #0
 8004090:	d013      	beq.n	80040ba <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004096:	4a22      	ldr	r2, [pc, #136]	; (8004120 <HAL_UART_IRQHandler+0x1f4>)
 8004098:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fd ff65 	bl	8001f6e <HAL_DMA_Abort_IT>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d016      	beq.n	80040d8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040b4:	4610      	mov	r0, r2
 80040b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b8:	e00e      	b.n	80040d8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f83c 	bl	8004138 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c0:	e00a      	b.n	80040d8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f838 	bl	8004138 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c8:	e006      	b.n	80040d8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f834 	bl	8004138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80040d6:	e01e      	b.n	8004116 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d8:	bf00      	nop
    return;
 80040da:	e01c      	b.n	8004116 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d008      	beq.n	80040f8 <HAL_UART_IRQHandler+0x1cc>
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d003      	beq.n	80040f8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f8a7 	bl	8004244 <UART_Transmit_IT>
    return;
 80040f6:	e00f      	b.n	8004118 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <HAL_UART_IRQHandler+0x1ec>
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004108:	2b00      	cmp	r3, #0
 800410a:	d005      	beq.n	8004118 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f8ef 	bl	80042f0 <UART_EndTransmit_IT>
    return;
 8004112:	bf00      	nop
 8004114:	e000      	b.n	8004118 <HAL_UART_IRQHandler+0x1ec>
    return;
 8004116:	bf00      	nop
  }
}
 8004118:	3720      	adds	r7, #32
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	0800421d 	.word	0x0800421d

08004124 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	603b      	str	r3, [r7, #0]
 8004158:	4613      	mov	r3, r2
 800415a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800415c:	e02c      	b.n	80041b8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004164:	d028      	beq.n	80041b8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d007      	beq.n	800417c <UART_WaitOnFlagUntilTimeout+0x30>
 800416c:	f7fc ff62 	bl	8001034 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	429a      	cmp	r2, r3
 800417a:	d21d      	bcs.n	80041b8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68da      	ldr	r2, [r3, #12]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800418a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695a      	ldr	r2, [r3, #20]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 0201 	bic.w	r2, r2, #1
 800419a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2220      	movs	r2, #32
 80041a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e00f      	b.n	80041d8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	4013      	ands	r3, r2
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	bf0c      	ite	eq
 80041c8:	2301      	moveq	r3, #1
 80041ca:	2300      	movne	r3, #0
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	461a      	mov	r2, r3
 80041d0:	79fb      	ldrb	r3, [r7, #7]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d0c3      	beq.n	800415e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80041f6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695a      	ldr	r2, [r3, #20]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0201 	bic.w	r2, r2, #1
 8004206:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2220      	movs	r2, #32
 800420c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004228:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f7ff ff7e 	bl	8004138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800423c:	bf00      	nop
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b21      	cmp	r3, #33	; 0x21
 8004256:	d144      	bne.n	80042e2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004260:	d11a      	bne.n	8004298 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	461a      	mov	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004276:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d105      	bne.n	800428c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	1c9a      	adds	r2, r3, #2
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	621a      	str	r2, [r3, #32]
 800428a:	e00e      	b.n	80042aa <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	1c5a      	adds	r2, r3, #1
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	621a      	str	r2, [r3, #32]
 8004296:	e008      	b.n	80042aa <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	1c59      	adds	r1, r3, #1
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	6211      	str	r1, [r2, #32]
 80042a2:	781a      	ldrb	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	4619      	mov	r1, r3
 80042b8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10f      	bne.n	80042de <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68da      	ldr	r2, [r3, #12]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	e000      	b.n	80042e4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80042e2:	2302      	movs	r3, #2
  }
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3714      	adds	r7, #20
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004306:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2220      	movs	r2, #32
 800430c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7ff ff07 	bl	8004124 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b22      	cmp	r3, #34	; 0x22
 8004332:	d171      	bne.n	8004418 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800433c:	d123      	bne.n	8004386 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004342:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10e      	bne.n	800436a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	b29b      	uxth	r3, r3
 8004354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004358:	b29a      	uxth	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004362:	1c9a      	adds	r2, r3, #2
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	629a      	str	r2, [r3, #40]	; 0x28
 8004368:	e029      	b.n	80043be <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	b29b      	uxth	r3, r3
 8004372:	b2db      	uxtb	r3, r3
 8004374:	b29a      	uxth	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	629a      	str	r2, [r3, #40]	; 0x28
 8004384:	e01b      	b.n	80043be <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10a      	bne.n	80043a4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6858      	ldr	r0, [r3, #4]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004398:	1c59      	adds	r1, r3, #1
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6291      	str	r1, [r2, #40]	; 0x28
 800439e:	b2c2      	uxtb	r2, r0
 80043a0:	701a      	strb	r2, [r3, #0]
 80043a2:	e00c      	b.n	80043be <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b0:	1c58      	adds	r0, r3, #1
 80043b2:	6879      	ldr	r1, [r7, #4]
 80043b4:	6288      	str	r0, [r1, #40]	; 0x28
 80043b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	4619      	mov	r1, r3
 80043cc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d120      	bne.n	8004414 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68da      	ldr	r2, [r3, #12]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 0220 	bic.w	r2, r2, #32
 80043e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	695a      	ldr	r2, [r3, #20]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0201 	bic.w	r2, r2, #1
 8004400:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2220      	movs	r2, #32
 8004406:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f002 fa4e 	bl	80068ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004410:	2300      	movs	r3, #0
 8004412:	e002      	b.n	800441a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004414:	2300      	movs	r3, #0
 8004416:	e000      	b.n	800441a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004418:	2302      	movs	r3, #2
  }
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
	...

08004424 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004424:	b5b0      	push	{r4, r5, r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689a      	ldr	r2, [r3, #8]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	431a      	orrs	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004464:	f023 030c 	bic.w	r3, r3, #12
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6812      	ldr	r2, [r2, #0]
 800446c:	68f9      	ldr	r1, [r7, #12]
 800446e:	430b      	orrs	r3, r1
 8004470:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	699a      	ldr	r2, [r3, #24]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004490:	f040 80e4 	bne.w	800465c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4aab      	ldr	r2, [pc, #684]	; (8004748 <UART_SetConfig+0x324>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d004      	beq.n	80044a8 <UART_SetConfig+0x84>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4aaa      	ldr	r2, [pc, #680]	; (800474c <UART_SetConfig+0x328>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d16c      	bne.n	8004582 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80044a8:	f7fe fb70 	bl	8002b8c <HAL_RCC_GetPCLK2Freq>
 80044ac:	4602      	mov	r2, r0
 80044ae:	4613      	mov	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4413      	add	r3, r2
 80044b4:	009a      	lsls	r2, r3, #2
 80044b6:	441a      	add	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c2:	4aa3      	ldr	r2, [pc, #652]	; (8004750 <UART_SetConfig+0x32c>)
 80044c4:	fba2 2303 	umull	r2, r3, r2, r3
 80044c8:	095b      	lsrs	r3, r3, #5
 80044ca:	011c      	lsls	r4, r3, #4
 80044cc:	f7fe fb5e 	bl	8002b8c <HAL_RCC_GetPCLK2Freq>
 80044d0:	4602      	mov	r2, r0
 80044d2:	4613      	mov	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	009a      	lsls	r2, r3, #2
 80044da:	441a      	add	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	fbb2 f5f3 	udiv	r5, r2, r3
 80044e6:	f7fe fb51 	bl	8002b8c <HAL_RCC_GetPCLK2Freq>
 80044ea:	4602      	mov	r2, r0
 80044ec:	4613      	mov	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	009a      	lsls	r2, r3, #2
 80044f4:	441a      	add	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004500:	4a93      	ldr	r2, [pc, #588]	; (8004750 <UART_SetConfig+0x32c>)
 8004502:	fba2 2303 	umull	r2, r3, r2, r3
 8004506:	095b      	lsrs	r3, r3, #5
 8004508:	2264      	movs	r2, #100	; 0x64
 800450a:	fb02 f303 	mul.w	r3, r2, r3
 800450e:	1aeb      	subs	r3, r5, r3
 8004510:	00db      	lsls	r3, r3, #3
 8004512:	3332      	adds	r3, #50	; 0x32
 8004514:	4a8e      	ldr	r2, [pc, #568]	; (8004750 <UART_SetConfig+0x32c>)
 8004516:	fba2 2303 	umull	r2, r3, r2, r3
 800451a:	095b      	lsrs	r3, r3, #5
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004522:	441c      	add	r4, r3
 8004524:	f7fe fb32 	bl	8002b8c <HAL_RCC_GetPCLK2Freq>
 8004528:	4602      	mov	r2, r0
 800452a:	4613      	mov	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4413      	add	r3, r2
 8004530:	009a      	lsls	r2, r3, #2
 8004532:	441a      	add	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	fbb2 f5f3 	udiv	r5, r2, r3
 800453e:	f7fe fb25 	bl	8002b8c <HAL_RCC_GetPCLK2Freq>
 8004542:	4602      	mov	r2, r0
 8004544:	4613      	mov	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	009a      	lsls	r2, r3, #2
 800454c:	441a      	add	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	fbb2 f3f3 	udiv	r3, r2, r3
 8004558:	4a7d      	ldr	r2, [pc, #500]	; (8004750 <UART_SetConfig+0x32c>)
 800455a:	fba2 2303 	umull	r2, r3, r2, r3
 800455e:	095b      	lsrs	r3, r3, #5
 8004560:	2264      	movs	r2, #100	; 0x64
 8004562:	fb02 f303 	mul.w	r3, r2, r3
 8004566:	1aeb      	subs	r3, r5, r3
 8004568:	00db      	lsls	r3, r3, #3
 800456a:	3332      	adds	r3, #50	; 0x32
 800456c:	4a78      	ldr	r2, [pc, #480]	; (8004750 <UART_SetConfig+0x32c>)
 800456e:	fba2 2303 	umull	r2, r3, r2, r3
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	f003 0207 	and.w	r2, r3, #7
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4422      	add	r2, r4
 800457e:	609a      	str	r2, [r3, #8]
 8004580:	e154      	b.n	800482c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004582:	f7fe faef 	bl	8002b64 <HAL_RCC_GetPCLK1Freq>
 8004586:	4602      	mov	r2, r0
 8004588:	4613      	mov	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	009a      	lsls	r2, r3, #2
 8004590:	441a      	add	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	fbb2 f3f3 	udiv	r3, r2, r3
 800459c:	4a6c      	ldr	r2, [pc, #432]	; (8004750 <UART_SetConfig+0x32c>)
 800459e:	fba2 2303 	umull	r2, r3, r2, r3
 80045a2:	095b      	lsrs	r3, r3, #5
 80045a4:	011c      	lsls	r4, r3, #4
 80045a6:	f7fe fadd 	bl	8002b64 <HAL_RCC_GetPCLK1Freq>
 80045aa:	4602      	mov	r2, r0
 80045ac:	4613      	mov	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	009a      	lsls	r2, r3, #2
 80045b4:	441a      	add	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	fbb2 f5f3 	udiv	r5, r2, r3
 80045c0:	f7fe fad0 	bl	8002b64 <HAL_RCC_GetPCLK1Freq>
 80045c4:	4602      	mov	r2, r0
 80045c6:	4613      	mov	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	009a      	lsls	r2, r3, #2
 80045ce:	441a      	add	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045da:	4a5d      	ldr	r2, [pc, #372]	; (8004750 <UART_SetConfig+0x32c>)
 80045dc:	fba2 2303 	umull	r2, r3, r2, r3
 80045e0:	095b      	lsrs	r3, r3, #5
 80045e2:	2264      	movs	r2, #100	; 0x64
 80045e4:	fb02 f303 	mul.w	r3, r2, r3
 80045e8:	1aeb      	subs	r3, r5, r3
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	3332      	adds	r3, #50	; 0x32
 80045ee:	4a58      	ldr	r2, [pc, #352]	; (8004750 <UART_SetConfig+0x32c>)
 80045f0:	fba2 2303 	umull	r2, r3, r2, r3
 80045f4:	095b      	lsrs	r3, r3, #5
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045fc:	441c      	add	r4, r3
 80045fe:	f7fe fab1 	bl	8002b64 <HAL_RCC_GetPCLK1Freq>
 8004602:	4602      	mov	r2, r0
 8004604:	4613      	mov	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	009a      	lsls	r2, r3, #2
 800460c:	441a      	add	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	fbb2 f5f3 	udiv	r5, r2, r3
 8004618:	f7fe faa4 	bl	8002b64 <HAL_RCC_GetPCLK1Freq>
 800461c:	4602      	mov	r2, r0
 800461e:	4613      	mov	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4413      	add	r3, r2
 8004624:	009a      	lsls	r2, r3, #2
 8004626:	441a      	add	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004632:	4a47      	ldr	r2, [pc, #284]	; (8004750 <UART_SetConfig+0x32c>)
 8004634:	fba2 2303 	umull	r2, r3, r2, r3
 8004638:	095b      	lsrs	r3, r3, #5
 800463a:	2264      	movs	r2, #100	; 0x64
 800463c:	fb02 f303 	mul.w	r3, r2, r3
 8004640:	1aeb      	subs	r3, r5, r3
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	3332      	adds	r3, #50	; 0x32
 8004646:	4a42      	ldr	r2, [pc, #264]	; (8004750 <UART_SetConfig+0x32c>)
 8004648:	fba2 2303 	umull	r2, r3, r2, r3
 800464c:	095b      	lsrs	r3, r3, #5
 800464e:	f003 0207 	and.w	r2, r3, #7
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4422      	add	r2, r4
 8004658:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800465a:	e0e7      	b.n	800482c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a39      	ldr	r2, [pc, #228]	; (8004748 <UART_SetConfig+0x324>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d004      	beq.n	8004670 <UART_SetConfig+0x24c>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a38      	ldr	r2, [pc, #224]	; (800474c <UART_SetConfig+0x328>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d171      	bne.n	8004754 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004670:	f7fe fa8c 	bl	8002b8c <HAL_RCC_GetPCLK2Freq>
 8004674:	4602      	mov	r2, r0
 8004676:	4613      	mov	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	009a      	lsls	r2, r3, #2
 800467e:	441a      	add	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	fbb2 f3f3 	udiv	r3, r2, r3
 800468a:	4a31      	ldr	r2, [pc, #196]	; (8004750 <UART_SetConfig+0x32c>)
 800468c:	fba2 2303 	umull	r2, r3, r2, r3
 8004690:	095b      	lsrs	r3, r3, #5
 8004692:	011c      	lsls	r4, r3, #4
 8004694:	f7fe fa7a 	bl	8002b8c <HAL_RCC_GetPCLK2Freq>
 8004698:	4602      	mov	r2, r0
 800469a:	4613      	mov	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4413      	add	r3, r2
 80046a0:	009a      	lsls	r2, r3, #2
 80046a2:	441a      	add	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	fbb2 f5f3 	udiv	r5, r2, r3
 80046ae:	f7fe fa6d 	bl	8002b8c <HAL_RCC_GetPCLK2Freq>
 80046b2:	4602      	mov	r2, r0
 80046b4:	4613      	mov	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	009a      	lsls	r2, r3, #2
 80046bc:	441a      	add	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c8:	4a21      	ldr	r2, [pc, #132]	; (8004750 <UART_SetConfig+0x32c>)
 80046ca:	fba2 2303 	umull	r2, r3, r2, r3
 80046ce:	095b      	lsrs	r3, r3, #5
 80046d0:	2264      	movs	r2, #100	; 0x64
 80046d2:	fb02 f303 	mul.w	r3, r2, r3
 80046d6:	1aeb      	subs	r3, r5, r3
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	3332      	adds	r3, #50	; 0x32
 80046dc:	4a1c      	ldr	r2, [pc, #112]	; (8004750 <UART_SetConfig+0x32c>)
 80046de:	fba2 2303 	umull	r2, r3, r2, r3
 80046e2:	095b      	lsrs	r3, r3, #5
 80046e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046e8:	441c      	add	r4, r3
 80046ea:	f7fe fa4f 	bl	8002b8c <HAL_RCC_GetPCLK2Freq>
 80046ee:	4602      	mov	r2, r0
 80046f0:	4613      	mov	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4413      	add	r3, r2
 80046f6:	009a      	lsls	r2, r3, #2
 80046f8:	441a      	add	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	fbb2 f5f3 	udiv	r5, r2, r3
 8004704:	f7fe fa42 	bl	8002b8c <HAL_RCC_GetPCLK2Freq>
 8004708:	4602      	mov	r2, r0
 800470a:	4613      	mov	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	009a      	lsls	r2, r3, #2
 8004712:	441a      	add	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	fbb2 f3f3 	udiv	r3, r2, r3
 800471e:	4a0c      	ldr	r2, [pc, #48]	; (8004750 <UART_SetConfig+0x32c>)
 8004720:	fba2 2303 	umull	r2, r3, r2, r3
 8004724:	095b      	lsrs	r3, r3, #5
 8004726:	2264      	movs	r2, #100	; 0x64
 8004728:	fb02 f303 	mul.w	r3, r2, r3
 800472c:	1aeb      	subs	r3, r5, r3
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	3332      	adds	r3, #50	; 0x32
 8004732:	4a07      	ldr	r2, [pc, #28]	; (8004750 <UART_SetConfig+0x32c>)
 8004734:	fba2 2303 	umull	r2, r3, r2, r3
 8004738:	095b      	lsrs	r3, r3, #5
 800473a:	f003 020f 	and.w	r2, r3, #15
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4422      	add	r2, r4
 8004744:	609a      	str	r2, [r3, #8]
 8004746:	e071      	b.n	800482c <UART_SetConfig+0x408>
 8004748:	40011000 	.word	0x40011000
 800474c:	40011400 	.word	0x40011400
 8004750:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004754:	f7fe fa06 	bl	8002b64 <HAL_RCC_GetPCLK1Freq>
 8004758:	4602      	mov	r2, r0
 800475a:	4613      	mov	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	009a      	lsls	r2, r3, #2
 8004762:	441a      	add	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	fbb2 f3f3 	udiv	r3, r2, r3
 800476e:	4a31      	ldr	r2, [pc, #196]	; (8004834 <UART_SetConfig+0x410>)
 8004770:	fba2 2303 	umull	r2, r3, r2, r3
 8004774:	095b      	lsrs	r3, r3, #5
 8004776:	011c      	lsls	r4, r3, #4
 8004778:	f7fe f9f4 	bl	8002b64 <HAL_RCC_GetPCLK1Freq>
 800477c:	4602      	mov	r2, r0
 800477e:	4613      	mov	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4413      	add	r3, r2
 8004784:	009a      	lsls	r2, r3, #2
 8004786:	441a      	add	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004792:	f7fe f9e7 	bl	8002b64 <HAL_RCC_GetPCLK1Freq>
 8004796:	4602      	mov	r2, r0
 8004798:	4613      	mov	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	009a      	lsls	r2, r3, #2
 80047a0:	441a      	add	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ac:	4a21      	ldr	r2, [pc, #132]	; (8004834 <UART_SetConfig+0x410>)
 80047ae:	fba2 2303 	umull	r2, r3, r2, r3
 80047b2:	095b      	lsrs	r3, r3, #5
 80047b4:	2264      	movs	r2, #100	; 0x64
 80047b6:	fb02 f303 	mul.w	r3, r2, r3
 80047ba:	1aeb      	subs	r3, r5, r3
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	3332      	adds	r3, #50	; 0x32
 80047c0:	4a1c      	ldr	r2, [pc, #112]	; (8004834 <UART_SetConfig+0x410>)
 80047c2:	fba2 2303 	umull	r2, r3, r2, r3
 80047c6:	095b      	lsrs	r3, r3, #5
 80047c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047cc:	441c      	add	r4, r3
 80047ce:	f7fe f9c9 	bl	8002b64 <HAL_RCC_GetPCLK1Freq>
 80047d2:	4602      	mov	r2, r0
 80047d4:	4613      	mov	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	009a      	lsls	r2, r3, #2
 80047dc:	441a      	add	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	fbb2 f5f3 	udiv	r5, r2, r3
 80047e8:	f7fe f9bc 	bl	8002b64 <HAL_RCC_GetPCLK1Freq>
 80047ec:	4602      	mov	r2, r0
 80047ee:	4613      	mov	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	009a      	lsls	r2, r3, #2
 80047f6:	441a      	add	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004802:	4a0c      	ldr	r2, [pc, #48]	; (8004834 <UART_SetConfig+0x410>)
 8004804:	fba2 2303 	umull	r2, r3, r2, r3
 8004808:	095b      	lsrs	r3, r3, #5
 800480a:	2264      	movs	r2, #100	; 0x64
 800480c:	fb02 f303 	mul.w	r3, r2, r3
 8004810:	1aeb      	subs	r3, r5, r3
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	3332      	adds	r3, #50	; 0x32
 8004816:	4a07      	ldr	r2, [pc, #28]	; (8004834 <UART_SetConfig+0x410>)
 8004818:	fba2 2303 	umull	r2, r3, r2, r3
 800481c:	095b      	lsrs	r3, r3, #5
 800481e:	f003 020f 	and.w	r2, r3, #15
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4422      	add	r2, r4
 8004828:	609a      	str	r2, [r3, #8]
}
 800482a:	e7ff      	b.n	800482c <UART_SetConfig+0x408>
 800482c:	bf00      	nop
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bdb0      	pop	{r4, r5, r7, pc}
 8004834:	51eb851f 	.word	0x51eb851f

08004838 <inv_sqrt>:
  * @param  x: the number need to be calculated
  * @retval 1/Sqrt(x)
  * @usage  call in imu_ahrs_update() function
  */
float inv_sqrt(float x) 
{
 8004838:	b480      	push	{r7}
 800483a:	b087      	sub	sp, #28
 800483c:	af00      	add	r7, sp, #0
 800483e:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8004842:	edd7 7a01 	vldr	s15, [r7, #4]
 8004846:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800484a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800484e:	edc7 7a05 	vstr	s15, [r7, #20]
	float y     = x;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	613b      	str	r3, [r7, #16]
	long  i     = *(long*)&y;
 8004856:	f107 0310 	add.w	r3, r7, #16
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	60fb      	str	r3, [r7, #12]
	
	i = 0x5f3759df - (i >> 1);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	105a      	asrs	r2, r3, #1
 8004862:	4b12      	ldr	r3, [pc, #72]	; (80048ac <inv_sqrt+0x74>)
 8004864:	1a9b      	subs	r3, r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8004868:	f107 030c 	add.w	r3, r7, #12
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8004870:	ed97 7a04 	vldr	s14, [r7, #16]
 8004874:	edd7 7a05 	vldr	s15, [r7, #20]
 8004878:	ee27 7a27 	vmul.f32	s14, s14, s15
 800487c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004884:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8004888:	ee37 7a67 	vsub.f32	s14, s14, s15
 800488c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004894:	edc7 7a04 	vstr	s15, [r7, #16]
	
	return y;
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	ee07 3a90 	vmov	s15, r3
}
 800489e:	eeb0 0a67 	vmov.f32	s0, s15
 80048a2:	371c      	adds	r7, #28
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	5f3759df 	.word	0x5f3759df

080048b0 <mpu_write_byte>:
  *                 mpu_set_gyro_fsr(),             
  *                 mpu_set_accel_fsr(), 
  *                 mpu_device_init() function
  */
uint8_t mpu_write_byte(uint8_t const reg, uint8_t const data)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af02      	add	r7, sp, #8
 80048b6:	4603      	mov	r3, r0
 80048b8:	460a      	mov	r2, r1
 80048ba:	71fb      	strb	r3, [r7, #7]
 80048bc:	4613      	mov	r3, r2
 80048be:	71bb      	strb	r3, [r7, #6]
    MPU_NSS_LOW;
 80048c0:	2200      	movs	r2, #0
 80048c2:	2140      	movs	r1, #64	; 0x40
 80048c4:	4812      	ldr	r0, [pc, #72]	; (8004910 <mpu_write_byte+0x60>)
 80048c6:	f7fd fd37 	bl	8002338 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 80048ca:	79fb      	ldrb	r3, [r7, #7]
 80048cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	4b10      	ldr	r3, [pc, #64]	; (8004914 <mpu_write_byte+0x64>)
 80048d4:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80048d6:	2337      	movs	r3, #55	; 0x37
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	2301      	movs	r3, #1
 80048dc:	4a0e      	ldr	r2, [pc, #56]	; (8004918 <mpu_write_byte+0x68>)
 80048de:	490d      	ldr	r1, [pc, #52]	; (8004914 <mpu_write_byte+0x64>)
 80048e0:	480e      	ldr	r0, [pc, #56]	; (800491c <mpu_write_byte+0x6c>)
 80048e2:	f7fe f9cb 	bl	8002c7c <HAL_SPI_TransmitReceive>
    tx = data;
 80048e6:	4a0b      	ldr	r2, [pc, #44]	; (8004914 <mpu_write_byte+0x64>)
 80048e8:	79bb      	ldrb	r3, [r7, #6]
 80048ea:	7013      	strb	r3, [r2, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80048ec:	2337      	movs	r3, #55	; 0x37
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	2301      	movs	r3, #1
 80048f2:	4a09      	ldr	r2, [pc, #36]	; (8004918 <mpu_write_byte+0x68>)
 80048f4:	4907      	ldr	r1, [pc, #28]	; (8004914 <mpu_write_byte+0x64>)
 80048f6:	4809      	ldr	r0, [pc, #36]	; (800491c <mpu_write_byte+0x6c>)
 80048f8:	f7fe f9c0 	bl	8002c7c <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80048fc:	2201      	movs	r2, #1
 80048fe:	2140      	movs	r1, #64	; 0x40
 8004900:	4803      	ldr	r0, [pc, #12]	; (8004910 <mpu_write_byte+0x60>)
 8004902:	f7fd fd19 	bl	8002338 <HAL_GPIO_WritePin>
    return 0;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	40021400 	.word	0x40021400
 8004914:	20000240 	.word	0x20000240
 8004918:	20000241 	.word	0x20000241
 800491c:	20000620 	.word	0x20000620

08004920 <mpu_read_byte>:
  * @retval 
  * @usage  call in ist_reg_read_by_mpu(),         
  *                 mpu_device_init() function
  */
uint8_t mpu_read_byte(uint8_t const reg)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af02      	add	r7, sp, #8
 8004926:	4603      	mov	r3, r0
 8004928:	71fb      	strb	r3, [r7, #7]
    MPU_NSS_LOW;
 800492a:	2200      	movs	r2, #0
 800492c:	2140      	movs	r1, #64	; 0x40
 800492e:	4812      	ldr	r0, [pc, #72]	; (8004978 <mpu_read_byte+0x58>)
 8004930:	f7fd fd02 	bl	8002338 <HAL_GPIO_WritePin>
    tx = reg | 0x80;
 8004934:	79fb      	ldrb	r3, [r7, #7]
 8004936:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800493a:	b2da      	uxtb	r2, r3
 800493c:	4b0f      	ldr	r3, [pc, #60]	; (800497c <mpu_read_byte+0x5c>)
 800493e:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8004940:	2337      	movs	r3, #55	; 0x37
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	2301      	movs	r3, #1
 8004946:	4a0e      	ldr	r2, [pc, #56]	; (8004980 <mpu_read_byte+0x60>)
 8004948:	490c      	ldr	r1, [pc, #48]	; (800497c <mpu_read_byte+0x5c>)
 800494a:	480e      	ldr	r0, [pc, #56]	; (8004984 <mpu_read_byte+0x64>)
 800494c:	f7fe f996 	bl	8002c7c <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8004950:	2337      	movs	r3, #55	; 0x37
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	2301      	movs	r3, #1
 8004956:	4a0a      	ldr	r2, [pc, #40]	; (8004980 <mpu_read_byte+0x60>)
 8004958:	4908      	ldr	r1, [pc, #32]	; (800497c <mpu_read_byte+0x5c>)
 800495a:	480a      	ldr	r0, [pc, #40]	; (8004984 <mpu_read_byte+0x64>)
 800495c:	f7fe f98e 	bl	8002c7c <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8004960:	2201      	movs	r2, #1
 8004962:	2140      	movs	r1, #64	; 0x40
 8004964:	4804      	ldr	r0, [pc, #16]	; (8004978 <mpu_read_byte+0x58>)
 8004966:	f7fd fce7 	bl	8002338 <HAL_GPIO_WritePin>
    return rx;
 800496a:	4b05      	ldr	r3, [pc, #20]	; (8004980 <mpu_read_byte+0x60>)
 800496c:	781b      	ldrb	r3, [r3, #0]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	40021400 	.word	0x40021400
 800497c:	20000240 	.word	0x20000240
 8004980:	20000241 	.word	0x20000241
 8004984:	20000620 	.word	0x20000620

08004988 <mpu_read_bytes>:
  * @usage  call in ist8310_get_data(),         
  *                 mpu_get_data(), 
  *                 mpu_offset_call() function
  */
uint8_t mpu_read_bytes(uint8_t const regAddr, uint8_t* pData, uint8_t len)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af02      	add	r7, sp, #8
 800498e:	4603      	mov	r3, r0
 8004990:	6039      	str	r1, [r7, #0]
 8004992:	71fb      	strb	r3, [r7, #7]
 8004994:	4613      	mov	r3, r2
 8004996:	71bb      	strb	r3, [r7, #6]
    MPU_NSS_LOW;
 8004998:	2200      	movs	r2, #0
 800499a:	2140      	movs	r1, #64	; 0x40
 800499c:	4814      	ldr	r0, [pc, #80]	; (80049f0 <mpu_read_bytes+0x68>)
 800499e:	f7fd fccb 	bl	8002338 <HAL_GPIO_WritePin>
    tx         = regAddr | 0x80;
 80049a2:	79fb      	ldrb	r3, [r7, #7]
 80049a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	4b12      	ldr	r3, [pc, #72]	; (80049f4 <mpu_read_bytes+0x6c>)
 80049ac:	701a      	strb	r2, [r3, #0]
    tx_buff[0] = tx;
 80049ae:	4b11      	ldr	r3, [pc, #68]	; (80049f4 <mpu_read_bytes+0x6c>)
 80049b0:	781a      	ldrb	r2, [r3, #0]
 80049b2:	4b11      	ldr	r3, [pc, #68]	; (80049f8 <mpu_read_bytes+0x70>)
 80049b4:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80049b6:	2337      	movs	r3, #55	; 0x37
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	2301      	movs	r3, #1
 80049bc:	4a0f      	ldr	r2, [pc, #60]	; (80049fc <mpu_read_bytes+0x74>)
 80049be:	490d      	ldr	r1, [pc, #52]	; (80049f4 <mpu_read_bytes+0x6c>)
 80049c0:	480f      	ldr	r0, [pc, #60]	; (8004a00 <mpu_read_bytes+0x78>)
 80049c2:	f7fe f95b 	bl	8002c7c <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, tx_buff, pData, len, 55);
 80049c6:	79bb      	ldrb	r3, [r7, #6]
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	2337      	movs	r3, #55	; 0x37
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	4613      	mov	r3, r2
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	4909      	ldr	r1, [pc, #36]	; (80049f8 <mpu_read_bytes+0x70>)
 80049d4:	480a      	ldr	r0, [pc, #40]	; (8004a00 <mpu_read_bytes+0x78>)
 80049d6:	f7fe f951 	bl	8002c7c <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80049da:	2201      	movs	r2, #1
 80049dc:	2140      	movs	r1, #64	; 0x40
 80049de:	4804      	ldr	r0, [pc, #16]	; (80049f0 <mpu_read_bytes+0x68>)
 80049e0:	f7fd fcaa 	bl	8002338 <HAL_GPIO_WritePin>
    return 0;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	40021400 	.word	0x40021400
 80049f4:	20000240 	.word	0x20000240
 80049f8:	2000000c 	.word	0x2000000c
 80049fc:	20000241 	.word	0x20000241
 8004a00:	20000620 	.word	0x20000620

08004a04 <ist_reg_write_by_mpu>:
  *         data: data to be written
	* @retval   
  * @usage  call in ist8310_init() function
	*/
static void ist_reg_write_by_mpu(uint8_t addr, uint8_t data)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	460a      	mov	r2, r1
 8004a0e:	71fb      	strb	r3, [r7, #7]
 8004a10:	4613      	mov	r3, r2
 8004a12:	71bb      	strb	r3, [r7, #6]
    /* turn off slave 1 at first */
    mpu_write_byte(MPU6500_I2C_SLV1_CTRL, 0x00);
 8004a14:	2100      	movs	r1, #0
 8004a16:	202a      	movs	r0, #42	; 0x2a
 8004a18:	f7ff ff4a 	bl	80048b0 <mpu_write_byte>
    MPU_DELAY(2);
 8004a1c:	2002      	movs	r0, #2
 8004a1e:	f7fc fb15 	bl	800104c <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV1_REG, addr);
 8004a22:	79fb      	ldrb	r3, [r7, #7]
 8004a24:	4619      	mov	r1, r3
 8004a26:	2029      	movs	r0, #41	; 0x29
 8004a28:	f7ff ff42 	bl	80048b0 <mpu_write_byte>
    MPU_DELAY(2);
 8004a2c:	2002      	movs	r0, #2
 8004a2e:	f7fc fb0d 	bl	800104c <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV1_DO, data);
 8004a32:	79bb      	ldrb	r3, [r7, #6]
 8004a34:	4619      	mov	r1, r3
 8004a36:	2064      	movs	r0, #100	; 0x64
 8004a38:	f7ff ff3a 	bl	80048b0 <mpu_write_byte>
    MPU_DELAY(2);
 8004a3c:	2002      	movs	r0, #2
 8004a3e:	f7fc fb05 	bl	800104c <HAL_Delay>
    /* turn on slave 1 with one byte transmitting */
    mpu_write_byte(MPU6500_I2C_SLV1_CTRL, 0x80 | 0x01);
 8004a42:	2181      	movs	r1, #129	; 0x81
 8004a44:	202a      	movs	r0, #42	; 0x2a
 8004a46:	f7ff ff33 	bl	80048b0 <mpu_write_byte>
    /* wait longer to ensure the data is transmitted from slave 1 */
    MPU_DELAY(10);
 8004a4a:	200a      	movs	r0, #10
 8004a4c:	f7fc fafe 	bl	800104c <HAL_Delay>
}
 8004a50:	bf00      	nop
 8004a52:	3708      	adds	r7, #8
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <ist_reg_read_by_mpu>:
	* @param  addr: the address to be read of IST8310's register
	* @retval 
  * @usage  call in ist8310_init() function
	*/
static uint8_t ist_reg_read_by_mpu(uint8_t addr)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	4603      	mov	r3, r0
 8004a60:	71fb      	strb	r3, [r7, #7]
    uint8_t retval;
    mpu_write_byte(MPU6500_I2C_SLV4_REG, addr);
 8004a62:	79fb      	ldrb	r3, [r7, #7]
 8004a64:	4619      	mov	r1, r3
 8004a66:	2032      	movs	r0, #50	; 0x32
 8004a68:	f7ff ff22 	bl	80048b0 <mpu_write_byte>
    MPU_DELAY(10);
 8004a6c:	200a      	movs	r0, #10
 8004a6e:	f7fc faed 	bl	800104c <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV4_CTRL, 0x80);
 8004a72:	2180      	movs	r1, #128	; 0x80
 8004a74:	2034      	movs	r0, #52	; 0x34
 8004a76:	f7ff ff1b 	bl	80048b0 <mpu_write_byte>
    MPU_DELAY(10);
 8004a7a:	200a      	movs	r0, #10
 8004a7c:	f7fc fae6 	bl	800104c <HAL_Delay>
    retval = mpu_read_byte(MPU6500_I2C_SLV4_DI);
 8004a80:	2035      	movs	r0, #53	; 0x35
 8004a82:	f7ff ff4d 	bl	8004920 <mpu_read_byte>
 8004a86:	4603      	mov	r3, r0
 8004a88:	73fb      	strb	r3, [r7, #15]
    /* turn off slave4 after read */
    mpu_write_byte(MPU6500_I2C_SLV4_CTRL, 0x00);
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	2034      	movs	r0, #52	; 0x34
 8004a8e:	f7ff ff0f 	bl	80048b0 <mpu_write_byte>
    MPU_DELAY(10);
 8004a92:	200a      	movs	r0, #10
 8004a94:	f7fc fada 	bl	800104c <HAL_Delay>
    return retval;
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <mpu_master_i2c_auto_read_config>:
* @param    device_address: slave device address, Address[6:0]
	* @retval   void
	* @note     
	*/
static void mpu_master_i2c_auto_read_config(uint8_t device_address, uint8_t reg_base_addr, uint8_t data_num)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b082      	sub	sp, #8
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	71fb      	strb	r3, [r7, #7]
 8004aac:	460b      	mov	r3, r1
 8004aae:	71bb      	strb	r3, [r7, #6]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	717b      	strb	r3, [r7, #5]
    /* 
	   * configure the device address of the IST8310 
     * use slave1, auto transmit single measure mode 
	   */
    mpu_write_byte(MPU6500_I2C_SLV1_ADDR, device_address);
 8004ab4:	79fb      	ldrb	r3, [r7, #7]
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	2028      	movs	r0, #40	; 0x28
 8004aba:	f7ff fef9 	bl	80048b0 <mpu_write_byte>
    MPU_DELAY(2);
 8004abe:	2002      	movs	r0, #2
 8004ac0:	f7fc fac4 	bl	800104c <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV1_REG, IST8310_R_CONFA);
 8004ac4:	210a      	movs	r1, #10
 8004ac6:	2029      	movs	r0, #41	; 0x29
 8004ac8:	f7ff fef2 	bl	80048b0 <mpu_write_byte>
    MPU_DELAY(2);
 8004acc:	2002      	movs	r0, #2
 8004ace:	f7fc fabd 	bl	800104c <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV1_DO, IST8310_ODR_MODE);
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	2064      	movs	r0, #100	; 0x64
 8004ad6:	f7ff feeb 	bl	80048b0 <mpu_write_byte>
    MPU_DELAY(2);
 8004ada:	2002      	movs	r0, #2
 8004adc:	f7fc fab6 	bl	800104c <HAL_Delay>

    /* use slave0,auto read data */
    mpu_write_byte(MPU6500_I2C_SLV0_ADDR, 0x80 | device_address);
 8004ae0:	79fb      	ldrb	r3, [r7, #7]
 8004ae2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	4619      	mov	r1, r3
 8004aea:	2025      	movs	r0, #37	; 0x25
 8004aec:	f7ff fee0 	bl	80048b0 <mpu_write_byte>
    MPU_DELAY(2);
 8004af0:	2002      	movs	r0, #2
 8004af2:	f7fc faab 	bl	800104c <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV0_REG, reg_base_addr);
 8004af6:	79bb      	ldrb	r3, [r7, #6]
 8004af8:	4619      	mov	r1, r3
 8004afa:	2026      	movs	r0, #38	; 0x26
 8004afc:	f7ff fed8 	bl	80048b0 <mpu_write_byte>
    MPU_DELAY(2);
 8004b00:	2002      	movs	r0, #2
 8004b02:	f7fc faa3 	bl	800104c <HAL_Delay>

    /* every eight mpu6500 internal samples one i2c master read */
    mpu_write_byte(MPU6500_I2C_SLV4_CTRL, 0x03);
 8004b06:	2103      	movs	r1, #3
 8004b08:	2034      	movs	r0, #52	; 0x34
 8004b0a:	f7ff fed1 	bl	80048b0 <mpu_write_byte>
    MPU_DELAY(2);
 8004b0e:	2002      	movs	r0, #2
 8004b10:	f7fc fa9c 	bl	800104c <HAL_Delay>
    /* enable slave 0 and 1 access delay */
    mpu_write_byte(MPU6500_I2C_MST_DELAY_CTRL, 0x01 | 0x02);
 8004b14:	2103      	movs	r1, #3
 8004b16:	2067      	movs	r0, #103	; 0x67
 8004b18:	f7ff feca 	bl	80048b0 <mpu_write_byte>
    MPU_DELAY(2);
 8004b1c:	2002      	movs	r0, #2
 8004b1e:	f7fc fa95 	bl	800104c <HAL_Delay>
    /* enable slave 1 auto transmit */
    mpu_write_byte(MPU6500_I2C_SLV1_CTRL, 0x80 | 0x01);
 8004b22:	2181      	movs	r1, #129	; 0x81
 8004b24:	202a      	movs	r0, #42	; 0x2a
 8004b26:	f7ff fec3 	bl	80048b0 <mpu_write_byte>
		/* Wait 6ms (minimum waiting time for 16 times internal average setup) */
    MPU_DELAY(6); 
 8004b2a:	2006      	movs	r0, #6
 8004b2c:	f7fc fa8e 	bl	800104c <HAL_Delay>
    /* enable slave 0 with data_num bytes reading */
    mpu_write_byte(MPU6500_I2C_SLV0_CTRL, 0x80 | data_num);
 8004b30:	797b      	ldrb	r3, [r7, #5]
 8004b32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	4619      	mov	r1, r3
 8004b3a:	2027      	movs	r0, #39	; 0x27
 8004b3c:	f7ff feb8 	bl	80048b0 <mpu_write_byte>
    MPU_DELAY(2);
 8004b40:	2002      	movs	r0, #2
 8004b42:	f7fc fa83 	bl	800104c <HAL_Delay>
}
 8004b46:	bf00      	nop
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <ist8310_init>:
	* @param  
	* @retval 
  * @usage  call in mpu_device_init() function
	*/
uint8_t ist8310_init()
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	af00      	add	r7, sp, #0
	  /* enable iic master mode */
    mpu_write_byte(MPU6500_USER_CTRL, 0x30);
 8004b52:	2130      	movs	r1, #48	; 0x30
 8004b54:	206a      	movs	r0, #106	; 0x6a
 8004b56:	f7ff feab 	bl	80048b0 <mpu_write_byte>
    MPU_DELAY(10);
 8004b5a:	200a      	movs	r0, #10
 8004b5c:	f7fc fa76 	bl	800104c <HAL_Delay>
	  /* enable iic 400khz */
    mpu_write_byte(MPU6500_I2C_MST_CTRL, 0x0d); 
 8004b60:	210d      	movs	r1, #13
 8004b62:	2024      	movs	r0, #36	; 0x24
 8004b64:	f7ff fea4 	bl	80048b0 <mpu_write_byte>
    MPU_DELAY(10);
 8004b68:	200a      	movs	r0, #10
 8004b6a:	f7fc fa6f 	bl	800104c <HAL_Delay>

    /* turn on slave 1 for ist write and slave 4 to ist read */
    mpu_write_byte(MPU6500_I2C_SLV1_ADDR, IST8310_ADDRESS);  
 8004b6e:	210e      	movs	r1, #14
 8004b70:	2028      	movs	r0, #40	; 0x28
 8004b72:	f7ff fe9d 	bl	80048b0 <mpu_write_byte>
    MPU_DELAY(10);
 8004b76:	200a      	movs	r0, #10
 8004b78:	f7fc fa68 	bl	800104c <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV4_ADDR, 0x80 | IST8310_ADDRESS);
 8004b7c:	218e      	movs	r1, #142	; 0x8e
 8004b7e:	2031      	movs	r0, #49	; 0x31
 8004b80:	f7ff fe96 	bl	80048b0 <mpu_write_byte>
    MPU_DELAY(10);
 8004b84:	200a      	movs	r0, #10
 8004b86:	f7fc fa61 	bl	800104c <HAL_Delay>

    /* IST8310_R_CONFB 0x01 = device rst */
    ist_reg_write_by_mpu(IST8310_R_CONFB, 0x01);
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	200b      	movs	r0, #11
 8004b8e:	f7ff ff39 	bl	8004a04 <ist_reg_write_by_mpu>
    MPU_DELAY(10);
 8004b92:	200a      	movs	r0, #10
 8004b94:	f7fc fa5a 	bl	800104c <HAL_Delay>
    if (IST8310_DEVICE_ID_A != ist_reg_read_by_mpu(IST8310_WHO_AM_I))
 8004b98:	2000      	movs	r0, #0
 8004b9a:	f7ff ff5d 	bl	8004a58 <ist_reg_read_by_mpu>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b10      	cmp	r3, #16
 8004ba2:	d001      	beq.n	8004ba8 <ist8310_init+0x5a>
        return 1;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e059      	b.n	8004c5c <ist8310_init+0x10e>

		/* soft reset */
    ist_reg_write_by_mpu(IST8310_R_CONFB, 0x01); 
 8004ba8:	2101      	movs	r1, #1
 8004baa:	200b      	movs	r0, #11
 8004bac:	f7ff ff2a 	bl	8004a04 <ist_reg_write_by_mpu>
    MPU_DELAY(10);
 8004bb0:	200a      	movs	r0, #10
 8004bb2:	f7fc fa4b 	bl	800104c <HAL_Delay>

		/* config as ready mode to access register */
    ist_reg_write_by_mpu(IST8310_R_CONFA, 0x00); 
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	200a      	movs	r0, #10
 8004bba:	f7ff ff23 	bl	8004a04 <ist_reg_write_by_mpu>
    if (ist_reg_read_by_mpu(IST8310_R_CONFA) != 0x00)
 8004bbe:	200a      	movs	r0, #10
 8004bc0:	f7ff ff4a 	bl	8004a58 <ist_reg_read_by_mpu>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <ist8310_init+0x80>
        return 2;
 8004bca:	2302      	movs	r3, #2
 8004bcc:	e046      	b.n	8004c5c <ist8310_init+0x10e>
    MPU_DELAY(10);
 8004bce:	200a      	movs	r0, #10
 8004bd0:	f7fc fa3c 	bl	800104c <HAL_Delay>

		/* normal state, no int */
    ist_reg_write_by_mpu(IST8310_R_CONFB, 0x00);
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	200b      	movs	r0, #11
 8004bd8:	f7ff ff14 	bl	8004a04 <ist_reg_write_by_mpu>
    if (ist_reg_read_by_mpu(IST8310_R_CONFB) != 0x00)
 8004bdc:	200b      	movs	r0, #11
 8004bde:	f7ff ff3b 	bl	8004a58 <ist_reg_read_by_mpu>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <ist8310_init+0x9e>
        return 3;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e037      	b.n	8004c5c <ist8310_init+0x10e>
    MPU_DELAY(10);
 8004bec:	200a      	movs	r0, #10
 8004bee:	f7fc fa2d 	bl	800104c <HAL_Delay>
		
    /* config low noise mode, x,y,z axis 16 time 1 avg */
    ist_reg_write_by_mpu(IST8310_AVGCNTL, 0x24); //100100
 8004bf2:	2124      	movs	r1, #36	; 0x24
 8004bf4:	2041      	movs	r0, #65	; 0x41
 8004bf6:	f7ff ff05 	bl	8004a04 <ist_reg_write_by_mpu>
    if (ist_reg_read_by_mpu(IST8310_AVGCNTL) != 0x24)
 8004bfa:	2041      	movs	r0, #65	; 0x41
 8004bfc:	f7ff ff2c 	bl	8004a58 <ist_reg_read_by_mpu>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b24      	cmp	r3, #36	; 0x24
 8004c04:	d001      	beq.n	8004c0a <ist8310_init+0xbc>
        return 4;
 8004c06:	2304      	movs	r3, #4
 8004c08:	e028      	b.n	8004c5c <ist8310_init+0x10e>
    MPU_DELAY(10);
 8004c0a:	200a      	movs	r0, #10
 8004c0c:	f7fc fa1e 	bl	800104c <HAL_Delay>

    /* Set/Reset pulse duration setup,normal mode */
    ist_reg_write_by_mpu(IST8310_PDCNTL, 0xc0);
 8004c10:	21c0      	movs	r1, #192	; 0xc0
 8004c12:	2042      	movs	r0, #66	; 0x42
 8004c14:	f7ff fef6 	bl	8004a04 <ist_reg_write_by_mpu>
    if (ist_reg_read_by_mpu(IST8310_PDCNTL) != 0xc0)
 8004c18:	2042      	movs	r0, #66	; 0x42
 8004c1a:	f7ff ff1d 	bl	8004a58 <ist_reg_read_by_mpu>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2bc0      	cmp	r3, #192	; 0xc0
 8004c22:	d001      	beq.n	8004c28 <ist8310_init+0xda>
        return 5;
 8004c24:	2305      	movs	r3, #5
 8004c26:	e019      	b.n	8004c5c <ist8310_init+0x10e>
    MPU_DELAY(10);
 8004c28:	200a      	movs	r0, #10
 8004c2a:	f7fc fa0f 	bl	800104c <HAL_Delay>

    /* turn off slave1 & slave 4 */
    mpu_write_byte(MPU6500_I2C_SLV1_CTRL, 0x00);
 8004c2e:	2100      	movs	r1, #0
 8004c30:	202a      	movs	r0, #42	; 0x2a
 8004c32:	f7ff fe3d 	bl	80048b0 <mpu_write_byte>
    MPU_DELAY(10);
 8004c36:	200a      	movs	r0, #10
 8004c38:	f7fc fa08 	bl	800104c <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV4_CTRL, 0x00);
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	2034      	movs	r0, #52	; 0x34
 8004c40:	f7ff fe36 	bl	80048b0 <mpu_write_byte>
    MPU_DELAY(10);
 8004c44:	200a      	movs	r0, #10
 8004c46:	f7fc fa01 	bl	800104c <HAL_Delay>

    /* configure and turn on slave 0 */
    mpu_master_i2c_auto_read_config(IST8310_ADDRESS, IST8310_R_XL, 0x06);
 8004c4a:	2206      	movs	r2, #6
 8004c4c:	2103      	movs	r1, #3
 8004c4e:	200e      	movs	r0, #14
 8004c50:	f7ff ff27 	bl	8004aa2 <mpu_master_i2c_auto_read_config>
    MPU_DELAY(100);
 8004c54:	2064      	movs	r0, #100	; 0x64
 8004c56:	f7fc f9f9 	bl	800104c <HAL_Delay>
    return 0;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <ist8310_get_data>:
  * @param  buff: the buffer to save the data of IST8310
	* @retval 
  * @usage  call in mpu_get_data() function
	*/
void ist8310_get_data(uint8_t* buff)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
    mpu_read_bytes(MPU6500_EXT_SENS_DATA_00, buff, 6); 
 8004c68:	2206      	movs	r2, #6
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	2049      	movs	r0, #73	; 0x49
 8004c6e:	f7ff fe8b 	bl	8004988 <mpu_read_bytes>
}
 8004c72:	bf00      	nop
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
	...

08004c7c <mpu_get_data>:
  * @param  
	* @retval 
  * @usage  call in main() function
	*/
void mpu_get_data()
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
    mpu_read_bytes(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 8004c80:	220e      	movs	r2, #14
 8004c82:	4961      	ldr	r1, [pc, #388]	; (8004e08 <mpu_get_data+0x18c>)
 8004c84:	203b      	movs	r0, #59	; 0x3b
 8004c86:	f7ff fe7f 	bl	8004988 <mpu_read_bytes>

    mpu_data.ax   = mpu_buff[0] << 8 | mpu_buff[1];
 8004c8a:	4b5f      	ldr	r3, [pc, #380]	; (8004e08 <mpu_get_data+0x18c>)
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	021b      	lsls	r3, r3, #8
 8004c90:	b21a      	sxth	r2, r3
 8004c92:	4b5d      	ldr	r3, [pc, #372]	; (8004e08 <mpu_get_data+0x18c>)
 8004c94:	785b      	ldrb	r3, [r3, #1]
 8004c96:	b21b      	sxth	r3, r3
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	b21a      	sxth	r2, r3
 8004c9c:	4b5b      	ldr	r3, [pc, #364]	; (8004e0c <mpu_get_data+0x190>)
 8004c9e:	801a      	strh	r2, [r3, #0]
    mpu_data.ay   = mpu_buff[2] << 8 | mpu_buff[3];
 8004ca0:	4b59      	ldr	r3, [pc, #356]	; (8004e08 <mpu_get_data+0x18c>)
 8004ca2:	789b      	ldrb	r3, [r3, #2]
 8004ca4:	021b      	lsls	r3, r3, #8
 8004ca6:	b21a      	sxth	r2, r3
 8004ca8:	4b57      	ldr	r3, [pc, #348]	; (8004e08 <mpu_get_data+0x18c>)
 8004caa:	78db      	ldrb	r3, [r3, #3]
 8004cac:	b21b      	sxth	r3, r3
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	b21a      	sxth	r2, r3
 8004cb2:	4b56      	ldr	r3, [pc, #344]	; (8004e0c <mpu_get_data+0x190>)
 8004cb4:	805a      	strh	r2, [r3, #2]
    mpu_data.az   = mpu_buff[4] << 8 | mpu_buff[5];
 8004cb6:	4b54      	ldr	r3, [pc, #336]	; (8004e08 <mpu_get_data+0x18c>)
 8004cb8:	791b      	ldrb	r3, [r3, #4]
 8004cba:	021b      	lsls	r3, r3, #8
 8004cbc:	b21a      	sxth	r2, r3
 8004cbe:	4b52      	ldr	r3, [pc, #328]	; (8004e08 <mpu_get_data+0x18c>)
 8004cc0:	795b      	ldrb	r3, [r3, #5]
 8004cc2:	b21b      	sxth	r3, r3
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	b21a      	sxth	r2, r3
 8004cc8:	4b50      	ldr	r3, [pc, #320]	; (8004e0c <mpu_get_data+0x190>)
 8004cca:	809a      	strh	r2, [r3, #4]
    mpu_data.temp = mpu_buff[6] << 8 | mpu_buff[7];
 8004ccc:	4b4e      	ldr	r3, [pc, #312]	; (8004e08 <mpu_get_data+0x18c>)
 8004cce:	799b      	ldrb	r3, [r3, #6]
 8004cd0:	021b      	lsls	r3, r3, #8
 8004cd2:	b21a      	sxth	r2, r3
 8004cd4:	4b4c      	ldr	r3, [pc, #304]	; (8004e08 <mpu_get_data+0x18c>)
 8004cd6:	79db      	ldrb	r3, [r3, #7]
 8004cd8:	b21b      	sxth	r3, r3
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	b21a      	sxth	r2, r3
 8004cde:	4b4b      	ldr	r3, [pc, #300]	; (8004e0c <mpu_get_data+0x190>)
 8004ce0:	819a      	strh	r2, [r3, #12]

    mpu_data.gx = ((mpu_buff[8]  << 8 | mpu_buff[9])  - mpu_data.gx_offset);
 8004ce2:	4b49      	ldr	r3, [pc, #292]	; (8004e08 <mpu_get_data+0x18c>)
 8004ce4:	7a1b      	ldrb	r3, [r3, #8]
 8004ce6:	021b      	lsls	r3, r3, #8
 8004ce8:	b21a      	sxth	r2, r3
 8004cea:	4b47      	ldr	r3, [pc, #284]	; (8004e08 <mpu_get_data+0x18c>)
 8004cec:	7a5b      	ldrb	r3, [r3, #9]
 8004cee:	b21b      	sxth	r3, r3
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	b21b      	sxth	r3, r3
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	4b45      	ldr	r3, [pc, #276]	; (8004e0c <mpu_get_data+0x190>)
 8004cf8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	b21a      	sxth	r2, r3
 8004d04:	4b41      	ldr	r3, [pc, #260]	; (8004e0c <mpu_get_data+0x190>)
 8004d06:	81da      	strh	r2, [r3, #14]
    mpu_data.gy = ((mpu_buff[10] << 8 | mpu_buff[11]) - mpu_data.gy_offset);
 8004d08:	4b3f      	ldr	r3, [pc, #252]	; (8004e08 <mpu_get_data+0x18c>)
 8004d0a:	7a9b      	ldrb	r3, [r3, #10]
 8004d0c:	021b      	lsls	r3, r3, #8
 8004d0e:	b21a      	sxth	r2, r3
 8004d10:	4b3d      	ldr	r3, [pc, #244]	; (8004e08 <mpu_get_data+0x18c>)
 8004d12:	7adb      	ldrb	r3, [r3, #11]
 8004d14:	b21b      	sxth	r3, r3
 8004d16:	4313      	orrs	r3, r2
 8004d18:	b21b      	sxth	r3, r3
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	4b3b      	ldr	r3, [pc, #236]	; (8004e0c <mpu_get_data+0x190>)
 8004d1e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	b21a      	sxth	r2, r3
 8004d2a:	4b38      	ldr	r3, [pc, #224]	; (8004e0c <mpu_get_data+0x190>)
 8004d2c:	821a      	strh	r2, [r3, #16]
    mpu_data.gz = ((mpu_buff[12] << 8 | mpu_buff[13]) - mpu_data.gz_offset);
 8004d2e:	4b36      	ldr	r3, [pc, #216]	; (8004e08 <mpu_get_data+0x18c>)
 8004d30:	7b1b      	ldrb	r3, [r3, #12]
 8004d32:	021b      	lsls	r3, r3, #8
 8004d34:	b21a      	sxth	r2, r3
 8004d36:	4b34      	ldr	r3, [pc, #208]	; (8004e08 <mpu_get_data+0x18c>)
 8004d38:	7b5b      	ldrb	r3, [r3, #13]
 8004d3a:	b21b      	sxth	r3, r3
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	b21b      	sxth	r3, r3
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	4b32      	ldr	r3, [pc, #200]	; (8004e0c <mpu_get_data+0x190>)
 8004d44:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	b21a      	sxth	r2, r3
 8004d50:	4b2e      	ldr	r3, [pc, #184]	; (8004e0c <mpu_get_data+0x190>)
 8004d52:	825a      	strh	r2, [r3, #18]

    ist8310_get_data(ist_buff);
 8004d54:	482e      	ldr	r0, [pc, #184]	; (8004e10 <mpu_get_data+0x194>)
 8004d56:	f7ff ff83 	bl	8004c60 <ist8310_get_data>
    memcpy(&mpu_data.mx, ist_buff, 6);
 8004d5a:	4b2c      	ldr	r3, [pc, #176]	; (8004e0c <mpu_get_data+0x190>)
 8004d5c:	4a2c      	ldr	r2, [pc, #176]	; (8004e10 <mpu_get_data+0x194>)
 8004d5e:	3306      	adds	r3, #6
 8004d60:	6811      	ldr	r1, [r2, #0]
 8004d62:	6019      	str	r1, [r3, #0]
 8004d64:	8892      	ldrh	r2, [r2, #4]
 8004d66:	809a      	strh	r2, [r3, #4]

    memcpy(&imu.ax, &mpu_data.ax, 6 * sizeof(int16_t));
 8004d68:	220c      	movs	r2, #12
 8004d6a:	4928      	ldr	r1, [pc, #160]	; (8004e0c <mpu_get_data+0x190>)
 8004d6c:	4829      	ldr	r0, [pc, #164]	; (8004e14 <mpu_get_data+0x198>)
 8004d6e:	f004 fd5f 	bl	8009830 <memcpy>
	
    imu.temp = 21 + mpu_data.temp / 333.87f;
 8004d72:	4b26      	ldr	r3, [pc, #152]	; (8004e0c <mpu_get_data+0x190>)
 8004d74:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004d78:	ee07 3a90 	vmov	s15, r3
 8004d7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d80:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004e18 <mpu_get_data+0x19c>
 8004d84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d88:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 8004d8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d90:	4b20      	ldr	r3, [pc, #128]	; (8004e14 <mpu_get_data+0x198>)
 8004d92:	edc3 7a03 	vstr	s15, [r3, #12]
	  /* 2000dps -> rad/s */
	  imu.wx   = mpu_data.gx / 16.384f / 57.3f; 
 8004d96:	4b1d      	ldr	r3, [pc, #116]	; (8004e0c <mpu_get_data+0x190>)
 8004d98:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004d9c:	ee07 3a90 	vmov	s15, r3
 8004da0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004da4:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8004e1c <mpu_get_data+0x1a0>
 8004da8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004dac:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8004e20 <mpu_get_data+0x1a4>
 8004db0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004db4:	4b17      	ldr	r3, [pc, #92]	; (8004e14 <mpu_get_data+0x198>)
 8004db6:	edc3 7a04 	vstr	s15, [r3, #16]
    imu.wy   = mpu_data.gy / 16.384f / 57.3f; 
 8004dba:	4b14      	ldr	r3, [pc, #80]	; (8004e0c <mpu_get_data+0x190>)
 8004dbc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004dc0:	ee07 3a90 	vmov	s15, r3
 8004dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dc8:	eddf 6a14 	vldr	s13, [pc, #80]	; 8004e1c <mpu_get_data+0x1a0>
 8004dcc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004dd0:	eddf 6a13 	vldr	s13, [pc, #76]	; 8004e20 <mpu_get_data+0x1a4>
 8004dd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004dd8:	4b0e      	ldr	r3, [pc, #56]	; (8004e14 <mpu_get_data+0x198>)
 8004dda:	edc3 7a05 	vstr	s15, [r3, #20]
    imu.wz   = mpu_data.gz / 16.384f / 57.3f;
 8004dde:	4b0b      	ldr	r3, [pc, #44]	; (8004e0c <mpu_get_data+0x190>)
 8004de0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004de4:	ee07 3a90 	vmov	s15, r3
 8004de8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dec:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8004e1c <mpu_get_data+0x1a0>
 8004df0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004df4:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8004e20 <mpu_get_data+0x1a4>
 8004df8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004dfc:	4b05      	ldr	r3, [pc, #20]	; (8004e14 <mpu_get_data+0x198>)
 8004dfe:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8004e02:	bf00      	nop
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	200002dc 	.word	0x200002dc
 8004e0c:	200002bc 	.word	0x200002bc
 8004e10:	200002ac 	.word	0x200002ac
 8004e14:	20000244 	.word	0x20000244
 8004e18:	43a6ef5c 	.word	0x43a6ef5c
 8004e1c:	4183126f 	.word	0x4183126f
 8004e20:	42653333 	.word	0x42653333

08004e24 <mpu_set_gyro_fsr>:
  * @param  fsr: range(0,±250dps;1,±500dps;2,±1000dps;3,±2000dps)
	* @retval 
  * @usage  call in mpu_device_init() function
	*/
uint8_t mpu_set_gyro_fsr(uint8_t fsr)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	71fb      	strb	r3, [r7, #7]
  return mpu_write_byte(MPU6500_GYRO_CONFIG, fsr << 3);
 8004e2e:	79fb      	ldrb	r3, [r7, #7]
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	4619      	mov	r1, r3
 8004e36:	201b      	movs	r0, #27
 8004e38:	f7ff fd3a 	bl	80048b0 <mpu_write_byte>
 8004e3c:	4603      	mov	r3, r0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3708      	adds	r7, #8
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <mpu_set_accel_fsr>:
  * @param  fsr: range(0,±2g;1,±4g;2,±8g;3,±16g)
	* @retval 
  * @usage  call in mpu_device_init() function
	*/
uint8_t mpu_set_accel_fsr(uint8_t fsr)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b082      	sub	sp, #8
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	71fb      	strb	r3, [r7, #7]
  return mpu_write_byte(MPU6500_ACCEL_CONFIG, fsr << 3); 
 8004e50:	79fb      	ldrb	r3, [r7, #7]
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	4619      	mov	r1, r3
 8004e58:	201c      	movs	r0, #28
 8004e5a:	f7ff fd29 	bl	80048b0 <mpu_write_byte>
 8004e5e:	4603      	mov	r3, r0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <mpu_device_init>:
  * @param  
	* @retval 
  * @usage  call in main() function
	*/
uint8_t mpu_device_init(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
	MPU_DELAY(100);
 8004e6e:	2064      	movs	r0, #100	; 0x64
 8004e70:	f7fc f8ec 	bl	800104c <HAL_Delay>

	id                               = mpu_read_byte(MPU6500_WHO_AM_I);
 8004e74:	2075      	movs	r0, #117	; 0x75
 8004e76:	f7ff fd53 	bl	8004920 <mpu_read_byte>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	4b2b      	ldr	r3, [pc, #172]	; (8004f2c <mpu_device_init+0xc4>)
 8004e80:	701a      	strb	r2, [r3, #0]
	uint8_t i                        = 0;
 8004e82:	2300      	movs	r3, #0
 8004e84:	75fb      	strb	r3, [r7, #23]
	uint8_t MPU6500_Init_Data[10][2] = {{ MPU6500_PWR_MGMT_1, 0x80 },     /* Reset Device */ 
 8004e86:	463b      	mov	r3, r7
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	605a      	str	r2, [r3, #4]
 8004e8e:	609a      	str	r2, [r3, #8]
 8004e90:	60da      	str	r2, [r3, #12]
 8004e92:	611a      	str	r2, [r3, #16]
 8004e94:	236b      	movs	r3, #107	; 0x6b
 8004e96:	703b      	strb	r3, [r7, #0]
 8004e98:	2380      	movs	r3, #128	; 0x80
 8004e9a:	707b      	strb	r3, [r7, #1]
 8004e9c:	236b      	movs	r3, #107	; 0x6b
 8004e9e:	70bb      	strb	r3, [r7, #2]
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	70fb      	strb	r3, [r7, #3]
 8004ea4:	236c      	movs	r3, #108	; 0x6c
 8004ea6:	713b      	strb	r3, [r7, #4]
 8004ea8:	231a      	movs	r3, #26
 8004eaa:	71bb      	strb	r3, [r7, #6]
 8004eac:	2304      	movs	r3, #4
 8004eae:	71fb      	strb	r3, [r7, #7]
 8004eb0:	231b      	movs	r3, #27
 8004eb2:	723b      	strb	r3, [r7, #8]
 8004eb4:	2318      	movs	r3, #24
 8004eb6:	727b      	strb	r3, [r7, #9]
 8004eb8:	231c      	movs	r3, #28
 8004eba:	72bb      	strb	r3, [r7, #10]
 8004ebc:	2310      	movs	r3, #16
 8004ebe:	72fb      	strb	r3, [r7, #11]
 8004ec0:	231d      	movs	r3, #29
 8004ec2:	733b      	strb	r3, [r7, #12]
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	737b      	strb	r3, [r7, #13]
 8004ec8:	236a      	movs	r3, #106	; 0x6a
 8004eca:	73bb      	strb	r3, [r7, #14]
 8004ecc:	2320      	movs	r3, #32
 8004ece:	73fb      	strb	r3, [r7, #15]
																			{ MPU6500_CONFIG, 0x04 },         /* LPF 41Hz */ 
																			{ MPU6500_GYRO_CONFIG, 0x18 },    /* +-2000dps */ 
																			{ MPU6500_ACCEL_CONFIG, 0x10 },   /* +-8G */ 
																			{ MPU6500_ACCEL_CONFIG_2, 0x02 }, /* enable LowPassFilter  Set Acc LPF */ 
																			{ MPU6500_USER_CTRL, 0x20 },};    /* Enable AUX */ 
	for (i = 0; i < 10; i++)
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	75fb      	strb	r3, [r7, #23]
 8004ed4:	e017      	b.n	8004f06 <mpu_device_init+0x9e>
	{
		mpu_write_byte(MPU6500_Init_Data[i][0], MPU6500_Init_Data[i][1]);
 8004ed6:	7dfb      	ldrb	r3, [r7, #23]
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	f107 0218 	add.w	r2, r7, #24
 8004ede:	4413      	add	r3, r2
 8004ee0:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8004ee4:	7dfb      	ldrb	r3, [r7, #23]
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	f107 0118 	add.w	r1, r7, #24
 8004eec:	440b      	add	r3, r1
 8004eee:	f813 3c17 	ldrb.w	r3, [r3, #-23]
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	4610      	mov	r0, r2
 8004ef6:	f7ff fcdb 	bl	80048b0 <mpu_write_byte>
		MPU_DELAY(1);
 8004efa:	2001      	movs	r0, #1
 8004efc:	f7fc f8a6 	bl	800104c <HAL_Delay>
	for (i = 0; i < 10; i++)
 8004f00:	7dfb      	ldrb	r3, [r7, #23]
 8004f02:	3301      	adds	r3, #1
 8004f04:	75fb      	strb	r3, [r7, #23]
 8004f06:	7dfb      	ldrb	r3, [r7, #23]
 8004f08:	2b09      	cmp	r3, #9
 8004f0a:	d9e4      	bls.n	8004ed6 <mpu_device_init+0x6e>
	}

	mpu_set_gyro_fsr(3); 		
 8004f0c:	2003      	movs	r0, #3
 8004f0e:	f7ff ff89 	bl	8004e24 <mpu_set_gyro_fsr>
	mpu_set_accel_fsr(2);
 8004f12:	2002      	movs	r0, #2
 8004f14:	f7ff ff97 	bl	8004e46 <mpu_set_accel_fsr>

	ist8310_init();
 8004f18:	f7ff fe19 	bl	8004b4e <ist8310_init>
	mpu_offset_call();
 8004f1c:	f000 f808 	bl	8004f30 <mpu_offset_call>
	return 0;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3718      	adds	r7, #24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	200002b2 	.word	0x200002b2

08004f30 <mpu_offset_call>:
  * @param  
	* @retval 
  * @usage  call in main() function
	*/
void mpu_offset_call(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
	int i;
	for (i=0; i<300;i++)
 8004f36:	2300      	movs	r3, #0
 8004f38:	607b      	str	r3, [r7, #4]
 8004f3a:	e07c      	b.n	8005036 <mpu_offset_call+0x106>
	{
		mpu_read_bytes(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 8004f3c:	220e      	movs	r2, #14
 8004f3e:	4966      	ldr	r1, [pc, #408]	; (80050d8 <mpu_offset_call+0x1a8>)
 8004f40:	203b      	movs	r0, #59	; 0x3b
 8004f42:	f7ff fd21 	bl	8004988 <mpu_read_bytes>

		mpu_data.ax_offset += mpu_buff[0] << 8 | mpu_buff[1];
 8004f46:	4b65      	ldr	r3, [pc, #404]	; (80050dc <mpu_offset_call+0x1ac>)
 8004f48:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	4b62      	ldr	r3, [pc, #392]	; (80050d8 <mpu_offset_call+0x1a8>)
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	021b      	lsls	r3, r3, #8
 8004f54:	b219      	sxth	r1, r3
 8004f56:	4b60      	ldr	r3, [pc, #384]	; (80050d8 <mpu_offset_call+0x1a8>)
 8004f58:	785b      	ldrb	r3, [r3, #1]
 8004f5a:	b21b      	sxth	r3, r3
 8004f5c:	430b      	orrs	r3, r1
 8004f5e:	b21b      	sxth	r3, r3
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	4413      	add	r3, r2
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	b21a      	sxth	r2, r3
 8004f68:	4b5c      	ldr	r3, [pc, #368]	; (80050dc <mpu_offset_call+0x1ac>)
 8004f6a:	829a      	strh	r2, [r3, #20]
		mpu_data.ay_offset += mpu_buff[2] << 8 | mpu_buff[3];
 8004f6c:	4b5b      	ldr	r3, [pc, #364]	; (80050dc <mpu_offset_call+0x1ac>)
 8004f6e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	4b58      	ldr	r3, [pc, #352]	; (80050d8 <mpu_offset_call+0x1a8>)
 8004f76:	789b      	ldrb	r3, [r3, #2]
 8004f78:	021b      	lsls	r3, r3, #8
 8004f7a:	b219      	sxth	r1, r3
 8004f7c:	4b56      	ldr	r3, [pc, #344]	; (80050d8 <mpu_offset_call+0x1a8>)
 8004f7e:	78db      	ldrb	r3, [r3, #3]
 8004f80:	b21b      	sxth	r3, r3
 8004f82:	430b      	orrs	r3, r1
 8004f84:	b21b      	sxth	r3, r3
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	4413      	add	r3, r2
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	b21a      	sxth	r2, r3
 8004f8e:	4b53      	ldr	r3, [pc, #332]	; (80050dc <mpu_offset_call+0x1ac>)
 8004f90:	82da      	strh	r2, [r3, #22]
		mpu_data.az_offset += mpu_buff[4] << 8 | mpu_buff[5];
 8004f92:	4b52      	ldr	r3, [pc, #328]	; (80050dc <mpu_offset_call+0x1ac>)
 8004f94:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	4b4f      	ldr	r3, [pc, #316]	; (80050d8 <mpu_offset_call+0x1a8>)
 8004f9c:	791b      	ldrb	r3, [r3, #4]
 8004f9e:	021b      	lsls	r3, r3, #8
 8004fa0:	b219      	sxth	r1, r3
 8004fa2:	4b4d      	ldr	r3, [pc, #308]	; (80050d8 <mpu_offset_call+0x1a8>)
 8004fa4:	795b      	ldrb	r3, [r3, #5]
 8004fa6:	b21b      	sxth	r3, r3
 8004fa8:	430b      	orrs	r3, r1
 8004faa:	b21b      	sxth	r3, r3
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	4413      	add	r3, r2
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	b21a      	sxth	r2, r3
 8004fb4:	4b49      	ldr	r3, [pc, #292]	; (80050dc <mpu_offset_call+0x1ac>)
 8004fb6:	831a      	strh	r2, [r3, #24]
	
		mpu_data.gx_offset += mpu_buff[8]  << 8 | mpu_buff[9];
 8004fb8:	4b48      	ldr	r3, [pc, #288]	; (80050dc <mpu_offset_call+0x1ac>)
 8004fba:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	4b45      	ldr	r3, [pc, #276]	; (80050d8 <mpu_offset_call+0x1a8>)
 8004fc2:	7a1b      	ldrb	r3, [r3, #8]
 8004fc4:	021b      	lsls	r3, r3, #8
 8004fc6:	b219      	sxth	r1, r3
 8004fc8:	4b43      	ldr	r3, [pc, #268]	; (80050d8 <mpu_offset_call+0x1a8>)
 8004fca:	7a5b      	ldrb	r3, [r3, #9]
 8004fcc:	b21b      	sxth	r3, r3
 8004fce:	430b      	orrs	r3, r1
 8004fd0:	b21b      	sxth	r3, r3
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	4413      	add	r3, r2
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	b21a      	sxth	r2, r3
 8004fda:	4b40      	ldr	r3, [pc, #256]	; (80050dc <mpu_offset_call+0x1ac>)
 8004fdc:	835a      	strh	r2, [r3, #26]
		mpu_data.gy_offset += mpu_buff[10] << 8 | mpu_buff[11];
 8004fde:	4b3f      	ldr	r3, [pc, #252]	; (80050dc <mpu_offset_call+0x1ac>)
 8004fe0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	4b3c      	ldr	r3, [pc, #240]	; (80050d8 <mpu_offset_call+0x1a8>)
 8004fe8:	7a9b      	ldrb	r3, [r3, #10]
 8004fea:	021b      	lsls	r3, r3, #8
 8004fec:	b219      	sxth	r1, r3
 8004fee:	4b3a      	ldr	r3, [pc, #232]	; (80050d8 <mpu_offset_call+0x1a8>)
 8004ff0:	7adb      	ldrb	r3, [r3, #11]
 8004ff2:	b21b      	sxth	r3, r3
 8004ff4:	430b      	orrs	r3, r1
 8004ff6:	b21b      	sxth	r3, r3
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	4413      	add	r3, r2
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	b21a      	sxth	r2, r3
 8005000:	4b36      	ldr	r3, [pc, #216]	; (80050dc <mpu_offset_call+0x1ac>)
 8005002:	839a      	strh	r2, [r3, #28]
		mpu_data.gz_offset += mpu_buff[12] << 8 | mpu_buff[13];
 8005004:	4b35      	ldr	r3, [pc, #212]	; (80050dc <mpu_offset_call+0x1ac>)
 8005006:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800500a:	b29a      	uxth	r2, r3
 800500c:	4b32      	ldr	r3, [pc, #200]	; (80050d8 <mpu_offset_call+0x1a8>)
 800500e:	7b1b      	ldrb	r3, [r3, #12]
 8005010:	021b      	lsls	r3, r3, #8
 8005012:	b219      	sxth	r1, r3
 8005014:	4b30      	ldr	r3, [pc, #192]	; (80050d8 <mpu_offset_call+0x1a8>)
 8005016:	7b5b      	ldrb	r3, [r3, #13]
 8005018:	b21b      	sxth	r3, r3
 800501a:	430b      	orrs	r3, r1
 800501c:	b21b      	sxth	r3, r3
 800501e:	b29b      	uxth	r3, r3
 8005020:	4413      	add	r3, r2
 8005022:	b29b      	uxth	r3, r3
 8005024:	b21a      	sxth	r2, r3
 8005026:	4b2d      	ldr	r3, [pc, #180]	; (80050dc <mpu_offset_call+0x1ac>)
 8005028:	83da      	strh	r2, [r3, #30]

		MPU_DELAY(5);
 800502a:	2005      	movs	r0, #5
 800502c:	f7fc f80e 	bl	800104c <HAL_Delay>
	for (i=0; i<300;i++)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3301      	adds	r3, #1
 8005034:	607b      	str	r3, [r7, #4]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800503c:	f6ff af7e 	blt.w	8004f3c <mpu_offset_call+0xc>
	}
	mpu_data.ax_offset=mpu_data.ax_offset / 300;
 8005040:	4b26      	ldr	r3, [pc, #152]	; (80050dc <mpu_offset_call+0x1ac>)
 8005042:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8005046:	4a26      	ldr	r2, [pc, #152]	; (80050e0 <mpu_offset_call+0x1b0>)
 8005048:	fb82 1203 	smull	r1, r2, r2, r3
 800504c:	1152      	asrs	r2, r2, #5
 800504e:	17db      	asrs	r3, r3, #31
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	b21a      	sxth	r2, r3
 8005054:	4b21      	ldr	r3, [pc, #132]	; (80050dc <mpu_offset_call+0x1ac>)
 8005056:	829a      	strh	r2, [r3, #20]
	mpu_data.ay_offset=mpu_data.ay_offset / 300;
 8005058:	4b20      	ldr	r3, [pc, #128]	; (80050dc <mpu_offset_call+0x1ac>)
 800505a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800505e:	4a20      	ldr	r2, [pc, #128]	; (80050e0 <mpu_offset_call+0x1b0>)
 8005060:	fb82 1203 	smull	r1, r2, r2, r3
 8005064:	1152      	asrs	r2, r2, #5
 8005066:	17db      	asrs	r3, r3, #31
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	b21a      	sxth	r2, r3
 800506c:	4b1b      	ldr	r3, [pc, #108]	; (80050dc <mpu_offset_call+0x1ac>)
 800506e:	82da      	strh	r2, [r3, #22]
	mpu_data.az_offset=mpu_data.az_offset / 300;
 8005070:	4b1a      	ldr	r3, [pc, #104]	; (80050dc <mpu_offset_call+0x1ac>)
 8005072:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8005076:	4a1a      	ldr	r2, [pc, #104]	; (80050e0 <mpu_offset_call+0x1b0>)
 8005078:	fb82 1203 	smull	r1, r2, r2, r3
 800507c:	1152      	asrs	r2, r2, #5
 800507e:	17db      	asrs	r3, r3, #31
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	b21a      	sxth	r2, r3
 8005084:	4b15      	ldr	r3, [pc, #84]	; (80050dc <mpu_offset_call+0x1ac>)
 8005086:	831a      	strh	r2, [r3, #24]
	mpu_data.gx_offset=mpu_data.gx_offset / 300;
 8005088:	4b14      	ldr	r3, [pc, #80]	; (80050dc <mpu_offset_call+0x1ac>)
 800508a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800508e:	4a14      	ldr	r2, [pc, #80]	; (80050e0 <mpu_offset_call+0x1b0>)
 8005090:	fb82 1203 	smull	r1, r2, r2, r3
 8005094:	1152      	asrs	r2, r2, #5
 8005096:	17db      	asrs	r3, r3, #31
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	b21a      	sxth	r2, r3
 800509c:	4b0f      	ldr	r3, [pc, #60]	; (80050dc <mpu_offset_call+0x1ac>)
 800509e:	835a      	strh	r2, [r3, #26]
	mpu_data.gy_offset=mpu_data.gx_offset / 300;
 80050a0:	4b0e      	ldr	r3, [pc, #56]	; (80050dc <mpu_offset_call+0x1ac>)
 80050a2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80050a6:	4a0e      	ldr	r2, [pc, #56]	; (80050e0 <mpu_offset_call+0x1b0>)
 80050a8:	fb82 1203 	smull	r1, r2, r2, r3
 80050ac:	1152      	asrs	r2, r2, #5
 80050ae:	17db      	asrs	r3, r3, #31
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	b21a      	sxth	r2, r3
 80050b4:	4b09      	ldr	r3, [pc, #36]	; (80050dc <mpu_offset_call+0x1ac>)
 80050b6:	839a      	strh	r2, [r3, #28]
	mpu_data.gz_offset=mpu_data.gz_offset / 300;
 80050b8:	4b08      	ldr	r3, [pc, #32]	; (80050dc <mpu_offset_call+0x1ac>)
 80050ba:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80050be:	4a08      	ldr	r2, [pc, #32]	; (80050e0 <mpu_offset_call+0x1b0>)
 80050c0:	fb82 1203 	smull	r1, r2, r2, r3
 80050c4:	1152      	asrs	r2, r2, #5
 80050c6:	17db      	asrs	r3, r3, #31
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	b21a      	sxth	r2, r3
 80050cc:	4b03      	ldr	r3, [pc, #12]	; (80050dc <mpu_offset_call+0x1ac>)
 80050ce:	83da      	strh	r2, [r3, #30]
}
 80050d0:	bf00      	nop
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	200002dc 	.word	0x200002dc
 80050dc:	200002bc 	.word	0x200002bc
 80050e0:	1b4e81b5 	.word	0x1b4e81b5

080050e4 <init_quaternion>:
  * @param  
	* @retval 
  * @usage  call in main() function
	*/
void init_quaternion(void)
{
 80050e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050e8:	b084      	sub	sp, #16
 80050ea:	af00      	add	r7, sp, #0
	int16_t hx, hy;//hz;
	
	hx = imu.mx;
 80050ec:	4b79      	ldr	r3, [pc, #484]	; (80052d4 <init_quaternion+0x1f0>)
 80050ee:	88db      	ldrh	r3, [r3, #6]
 80050f0:	81fb      	strh	r3, [r7, #14]
	hy = imu.my;
 80050f2:	4b78      	ldr	r3, [pc, #480]	; (80052d4 <init_quaternion+0x1f0>)
 80050f4:	891b      	ldrh	r3, [r3, #8]
 80050f6:	81bb      	strh	r3, [r7, #12]
	//hz = imu.mz;
	
	#ifdef BOARD_DOWN
	if (hx < 0 && hy < 0) 
 80050f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	da36      	bge.n	800516e <init_quaternion+0x8a>
 8005100:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005104:	2b00      	cmp	r3, #0
 8005106:	da32      	bge.n	800516e <init_quaternion+0x8a>
	{
		if (fabs(hx / hy) >= 1)
 8005108:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800510c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005110:	fb92 f3f3 	sdiv	r3, r2, r3
 8005114:	4618      	mov	r0, r3
 8005116:	f7fb fa15 	bl	8000544 <__aeabi_i2d>
 800511a:	4603      	mov	r3, r0
 800511c:	460c      	mov	r4, r1
 800511e:	603b      	str	r3, [r7, #0]
 8005120:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005124:	607b      	str	r3, [r7, #4]
 8005126:	f04f 0200 	mov.w	r2, #0
 800512a:	4b6b      	ldr	r3, [pc, #428]	; (80052d8 <init_quaternion+0x1f4>)
 800512c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005130:	f7fb fcf8 	bl	8000b24 <__aeabi_dcmpge>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00c      	beq.n	8005154 <init_quaternion+0x70>
		{
			q0 = -0.005;
 800513a:	4b68      	ldr	r3, [pc, #416]	; (80052dc <init_quaternion+0x1f8>)
 800513c:	4a68      	ldr	r2, [pc, #416]	; (80052e0 <init_quaternion+0x1fc>)
 800513e:	601a      	str	r2, [r3, #0]
			q1 = -0.199;
 8005140:	4b68      	ldr	r3, [pc, #416]	; (80052e4 <init_quaternion+0x200>)
 8005142:	4a69      	ldr	r2, [pc, #420]	; (80052e8 <init_quaternion+0x204>)
 8005144:	601a      	str	r2, [r3, #0]
			q2 = 0.979;
 8005146:	4b69      	ldr	r3, [pc, #420]	; (80052ec <init_quaternion+0x208>)
 8005148:	4a69      	ldr	r2, [pc, #420]	; (80052f0 <init_quaternion+0x20c>)
 800514a:	601a      	str	r2, [r3, #0]
			q3 = -0.0089;
 800514c:	4b69      	ldr	r3, [pc, #420]	; (80052f4 <init_quaternion+0x210>)
 800514e:	4a6a      	ldr	r2, [pc, #424]	; (80052f8 <init_quaternion+0x214>)
 8005150:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1)
 8005152:	e0ba      	b.n	80052ca <init_quaternion+0x1e6>
		}
		else
		{
			q0 = -0.008;
 8005154:	4b61      	ldr	r3, [pc, #388]	; (80052dc <init_quaternion+0x1f8>)
 8005156:	4a69      	ldr	r2, [pc, #420]	; (80052fc <init_quaternion+0x218>)
 8005158:	601a      	str	r2, [r3, #0]
			q1 = -0.555;
 800515a:	4b62      	ldr	r3, [pc, #392]	; (80052e4 <init_quaternion+0x200>)
 800515c:	4a68      	ldr	r2, [pc, #416]	; (8005300 <init_quaternion+0x21c>)
 800515e:	601a      	str	r2, [r3, #0]
			q2 = 0.83;
 8005160:	4b62      	ldr	r3, [pc, #392]	; (80052ec <init_quaternion+0x208>)
 8005162:	4a68      	ldr	r2, [pc, #416]	; (8005304 <init_quaternion+0x220>)
 8005164:	601a      	str	r2, [r3, #0]
			q3 = -0.002;
 8005166:	4b63      	ldr	r3, [pc, #396]	; (80052f4 <init_quaternion+0x210>)
 8005168:	4a67      	ldr	r2, [pc, #412]	; (8005308 <init_quaternion+0x224>)
 800516a:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1)
 800516c:	e0ad      	b.n	80052ca <init_quaternion+0x1e6>
		}
		
	}
	else if (hx < 0 && hy > 0)
 800516e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005172:	2b00      	cmp	r3, #0
 8005174:	da35      	bge.n	80051e2 <init_quaternion+0xfe>
 8005176:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800517a:	2b00      	cmp	r3, #0
 800517c:	dd31      	ble.n	80051e2 <init_quaternion+0xfe>
	{
		if (fabs(hx / hy)>=1)   
 800517e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005182:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005186:	fb92 f3f3 	sdiv	r3, r2, r3
 800518a:	4618      	mov	r0, r3
 800518c:	f7fb f9da 	bl	8000544 <__aeabi_i2d>
 8005190:	4603      	mov	r3, r0
 8005192:	460c      	mov	r4, r1
 8005194:	469a      	mov	sl, r3
 8005196:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 800519a:	f04f 0200 	mov.w	r2, #0
 800519e:	4b4e      	ldr	r3, [pc, #312]	; (80052d8 <init_quaternion+0x1f4>)
 80051a0:	4650      	mov	r0, sl
 80051a2:	4659      	mov	r1, fp
 80051a4:	f7fb fcbe 	bl	8000b24 <__aeabi_dcmpge>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00c      	beq.n	80051c8 <init_quaternion+0xe4>
		{
			q0 = 0.005;
 80051ae:	4b4b      	ldr	r3, [pc, #300]	; (80052dc <init_quaternion+0x1f8>)
 80051b0:	4a56      	ldr	r2, [pc, #344]	; (800530c <init_quaternion+0x228>)
 80051b2:	601a      	str	r2, [r3, #0]
			q1 = -0.199;
 80051b4:	4b4b      	ldr	r3, [pc, #300]	; (80052e4 <init_quaternion+0x200>)
 80051b6:	4a4c      	ldr	r2, [pc, #304]	; (80052e8 <init_quaternion+0x204>)
 80051b8:	601a      	str	r2, [r3, #0]
			q2 = -0.978;
 80051ba:	4b4c      	ldr	r3, [pc, #304]	; (80052ec <init_quaternion+0x208>)
 80051bc:	4a54      	ldr	r2, [pc, #336]	; (8005310 <init_quaternion+0x22c>)
 80051be:	601a      	str	r2, [r3, #0]
			q3 = 0.012;
 80051c0:	4b4c      	ldr	r3, [pc, #304]	; (80052f4 <init_quaternion+0x210>)
 80051c2:	4a54      	ldr	r2, [pc, #336]	; (8005314 <init_quaternion+0x230>)
 80051c4:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy)>=1)   
 80051c6:	e080      	b.n	80052ca <init_quaternion+0x1e6>
		}
		else
		{
			q0 = 0.005;
 80051c8:	4b44      	ldr	r3, [pc, #272]	; (80052dc <init_quaternion+0x1f8>)
 80051ca:	4a50      	ldr	r2, [pc, #320]	; (800530c <init_quaternion+0x228>)
 80051cc:	601a      	str	r2, [r3, #0]
			q1 = -0.553;
 80051ce:	4b45      	ldr	r3, [pc, #276]	; (80052e4 <init_quaternion+0x200>)
 80051d0:	4a51      	ldr	r2, [pc, #324]	; (8005318 <init_quaternion+0x234>)
 80051d2:	601a      	str	r2, [r3, #0]
			q2 = -0.83;
 80051d4:	4b45      	ldr	r3, [pc, #276]	; (80052ec <init_quaternion+0x208>)
 80051d6:	4a51      	ldr	r2, [pc, #324]	; (800531c <init_quaternion+0x238>)
 80051d8:	601a      	str	r2, [r3, #0]
			q3 = -0.0023;
 80051da:	4b46      	ldr	r3, [pc, #280]	; (80052f4 <init_quaternion+0x210>)
 80051dc:	4a50      	ldr	r2, [pc, #320]	; (8005320 <init_quaternion+0x23c>)
 80051de:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy)>=1)   
 80051e0:	e073      	b.n	80052ca <init_quaternion+0x1e6>
		}
		
	}
	else if (hx > 0 && hy > 0)
 80051e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	dd35      	ble.n	8005256 <init_quaternion+0x172>
 80051ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	dd31      	ble.n	8005256 <init_quaternion+0x172>
	{
		if (fabs(hx / hy) >= 1)
 80051f2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80051f6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80051fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fb f9a0 	bl	8000544 <__aeabi_i2d>
 8005204:	4603      	mov	r3, r0
 8005206:	460c      	mov	r4, r1
 8005208:	4698      	mov	r8, r3
 800520a:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 800520e:	f04f 0200 	mov.w	r2, #0
 8005212:	4b31      	ldr	r3, [pc, #196]	; (80052d8 <init_quaternion+0x1f4>)
 8005214:	4640      	mov	r0, r8
 8005216:	4649      	mov	r1, r9
 8005218:	f7fb fc84 	bl	8000b24 <__aeabi_dcmpge>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00c      	beq.n	800523c <init_quaternion+0x158>
		{
			q0 = 0.0012;
 8005222:	4b2e      	ldr	r3, [pc, #184]	; (80052dc <init_quaternion+0x1f8>)
 8005224:	4a3f      	ldr	r2, [pc, #252]	; (8005324 <init_quaternion+0x240>)
 8005226:	601a      	str	r2, [r3, #0]
			q1 = -0.978;
 8005228:	4b2e      	ldr	r3, [pc, #184]	; (80052e4 <init_quaternion+0x200>)
 800522a:	4a39      	ldr	r2, [pc, #228]	; (8005310 <init_quaternion+0x22c>)
 800522c:	601a      	str	r2, [r3, #0]
			q2 = -0.199;
 800522e:	4b2f      	ldr	r3, [pc, #188]	; (80052ec <init_quaternion+0x208>)
 8005230:	4a2d      	ldr	r2, [pc, #180]	; (80052e8 <init_quaternion+0x204>)
 8005232:	601a      	str	r2, [r3, #0]
			q3 = -0.005;
 8005234:	4b2f      	ldr	r3, [pc, #188]	; (80052f4 <init_quaternion+0x210>)
 8005236:	4a2a      	ldr	r2, [pc, #168]	; (80052e0 <init_quaternion+0x1fc>)
 8005238:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1)
 800523a:	e046      	b.n	80052ca <init_quaternion+0x1e6>
		}
		else
		{
			q0 = 0.0023;
 800523c:	4b27      	ldr	r3, [pc, #156]	; (80052dc <init_quaternion+0x1f8>)
 800523e:	4a3a      	ldr	r2, [pc, #232]	; (8005328 <init_quaternion+0x244>)
 8005240:	601a      	str	r2, [r3, #0]
			q1 = -0.83;
 8005242:	4b28      	ldr	r3, [pc, #160]	; (80052e4 <init_quaternion+0x200>)
 8005244:	4a35      	ldr	r2, [pc, #212]	; (800531c <init_quaternion+0x238>)
 8005246:	601a      	str	r2, [r3, #0]
			q2 = -0.553;
 8005248:	4b28      	ldr	r3, [pc, #160]	; (80052ec <init_quaternion+0x208>)
 800524a:	4a33      	ldr	r2, [pc, #204]	; (8005318 <init_quaternion+0x234>)
 800524c:	601a      	str	r2, [r3, #0]
			q3 = 0.0023;
 800524e:	4b29      	ldr	r3, [pc, #164]	; (80052f4 <init_quaternion+0x210>)
 8005250:	4a35      	ldr	r2, [pc, #212]	; (8005328 <init_quaternion+0x244>)
 8005252:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1)
 8005254:	e039      	b.n	80052ca <init_quaternion+0x1e6>
		}
		
	}
	else if (hx > 0 && hy < 0)
 8005256:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800525a:	2b00      	cmp	r3, #0
 800525c:	dd35      	ble.n	80052ca <init_quaternion+0x1e6>
 800525e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	da31      	bge.n	80052ca <init_quaternion+0x1e6>
	{
		if (fabs(hx / hy) >= 1)
 8005266:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800526a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800526e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005272:	4618      	mov	r0, r3
 8005274:	f7fb f966 	bl	8000544 <__aeabi_i2d>
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	4614      	mov	r4, r2
 800527e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8005282:	f04f 0200 	mov.w	r2, #0
 8005286:	4b14      	ldr	r3, [pc, #80]	; (80052d8 <init_quaternion+0x1f4>)
 8005288:	4620      	mov	r0, r4
 800528a:	4629      	mov	r1, r5
 800528c:	f7fb fc4a 	bl	8000b24 <__aeabi_dcmpge>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00c      	beq.n	80052b0 <init_quaternion+0x1cc>
		{
			q0 = 0.0025;
 8005296:	4b11      	ldr	r3, [pc, #68]	; (80052dc <init_quaternion+0x1f8>)
 8005298:	4a24      	ldr	r2, [pc, #144]	; (800532c <init_quaternion+0x248>)
 800529a:	601a      	str	r2, [r3, #0]
			q1 = 0.978;
 800529c:	4b11      	ldr	r3, [pc, #68]	; (80052e4 <init_quaternion+0x200>)
 800529e:	4a24      	ldr	r2, [pc, #144]	; (8005330 <init_quaternion+0x24c>)
 80052a0:	601a      	str	r2, [r3, #0]
			q2 = -0.199;
 80052a2:	4b12      	ldr	r3, [pc, #72]	; (80052ec <init_quaternion+0x208>)
 80052a4:	4a10      	ldr	r2, [pc, #64]	; (80052e8 <init_quaternion+0x204>)
 80052a6:	601a      	str	r2, [r3, #0]
			q3 = 0.008;			
 80052a8:	4b12      	ldr	r3, [pc, #72]	; (80052f4 <init_quaternion+0x210>)
 80052aa:	4a22      	ldr	r2, [pc, #136]	; (8005334 <init_quaternion+0x250>)
 80052ac:	601a      	str	r2, [r3, #0]
			q2 = -0.012;
			q3 = -0.556;
		}		
	}
	#endif
}
 80052ae:	e00c      	b.n	80052ca <init_quaternion+0x1e6>
			q0 = 0.0025;
 80052b0:	4b0a      	ldr	r3, [pc, #40]	; (80052dc <init_quaternion+0x1f8>)
 80052b2:	4a1e      	ldr	r2, [pc, #120]	; (800532c <init_quaternion+0x248>)
 80052b4:	601a      	str	r2, [r3, #0]
			q1 = 0.83;
 80052b6:	4b0b      	ldr	r3, [pc, #44]	; (80052e4 <init_quaternion+0x200>)
 80052b8:	4a12      	ldr	r2, [pc, #72]	; (8005304 <init_quaternion+0x220>)
 80052ba:	601a      	str	r2, [r3, #0]
			q2 = -0.56;
 80052bc:	4b0b      	ldr	r3, [pc, #44]	; (80052ec <init_quaternion+0x208>)
 80052be:	4a1e      	ldr	r2, [pc, #120]	; (8005338 <init_quaternion+0x254>)
 80052c0:	601a      	str	r2, [r3, #0]
			q3 = 0.0045;
 80052c2:	4b0c      	ldr	r3, [pc, #48]	; (80052f4 <init_quaternion+0x210>)
 80052c4:	4a1d      	ldr	r2, [pc, #116]	; (800533c <init_quaternion+0x258>)
 80052c6:	601a      	str	r2, [r3, #0]
}
 80052c8:	e7ff      	b.n	80052ca <init_quaternion+0x1e6>
 80052ca:	bf00      	nop
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052d4:	20000244 	.word	0x20000244
 80052d8:	3ff00000 	.word	0x3ff00000
 80052dc:	20000008 	.word	0x20000008
 80052e0:	bba3d70a 	.word	0xbba3d70a
 80052e4:	20000210 	.word	0x20000210
 80052e8:	be4bc6a8 	.word	0xbe4bc6a8
 80052ec:	20000214 	.word	0x20000214
 80052f0:	3f7a9fbe 	.word	0x3f7a9fbe
 80052f4:	20000218 	.word	0x20000218
 80052f8:	bc11d14e 	.word	0xbc11d14e
 80052fc:	bc03126f 	.word	0xbc03126f
 8005300:	bf0e147b 	.word	0xbf0e147b
 8005304:	3f547ae1 	.word	0x3f547ae1
 8005308:	bb03126f 	.word	0xbb03126f
 800530c:	3ba3d70a 	.word	0x3ba3d70a
 8005310:	bf7a5e35 	.word	0xbf7a5e35
 8005314:	3c449ba6 	.word	0x3c449ba6
 8005318:	bf0d9168 	.word	0xbf0d9168
 800531c:	bf547ae1 	.word	0xbf547ae1
 8005320:	bb16bb99 	.word	0xbb16bb99
 8005324:	3a9d4952 	.word	0x3a9d4952
 8005328:	3b16bb99 	.word	0x3b16bb99
 800532c:	3b23d70a 	.word	0x3b23d70a
 8005330:	3f7a5e35 	.word	0x3f7a5e35
 8005334:	3c03126f 	.word	0x3c03126f
 8005338:	bf0f5c29 	.word	0xbf0f5c29
 800533c:	3b9374bc 	.word	0x3b9374bc

08005340 <imu_ahrs_update>:
  * @param  
	* @retval 
  * @usage  call in main() function
	*/
void imu_ahrs_update(void) 
{
 8005340:	b590      	push	{r4, r7, lr}
 8005342:	b09f      	sub	sp, #124	; 0x7c
 8005344:	af00      	add	r7, sp, #0
	float hx, hy, hz, bx, bz;
	float vx, vy, vz, wx, wy, wz;
	float ex, ey, ez, halfT;
	float tempq0,tempq1,tempq2,tempq3;

	float q0q0 = q0*q0;
 8005346:	4bd3      	ldr	r3, [pc, #844]	; (8005694 <imu_ahrs_update+0x354>)
 8005348:	ed93 7a00 	vldr	s14, [r3]
 800534c:	4bd1      	ldr	r3, [pc, #836]	; (8005694 <imu_ahrs_update+0x354>)
 800534e:	edd3 7a00 	vldr	s15, [r3]
 8005352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005356:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	float q0q1 = q0*q1;
 800535a:	4bce      	ldr	r3, [pc, #824]	; (8005694 <imu_ahrs_update+0x354>)
 800535c:	ed93 7a00 	vldr	s14, [r3]
 8005360:	4bcd      	ldr	r3, [pc, #820]	; (8005698 <imu_ahrs_update+0x358>)
 8005362:	edd3 7a00 	vldr	s15, [r3]
 8005366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800536a:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	float q0q2 = q0*q2;
 800536e:	4bc9      	ldr	r3, [pc, #804]	; (8005694 <imu_ahrs_update+0x354>)
 8005370:	ed93 7a00 	vldr	s14, [r3]
 8005374:	4bc9      	ldr	r3, [pc, #804]	; (800569c <imu_ahrs_update+0x35c>)
 8005376:	edd3 7a00 	vldr	s15, [r3]
 800537a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800537e:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	float q0q3 = q0*q3;
 8005382:	4bc4      	ldr	r3, [pc, #784]	; (8005694 <imu_ahrs_update+0x354>)
 8005384:	ed93 7a00 	vldr	s14, [r3]
 8005388:	4bc5      	ldr	r3, [pc, #788]	; (80056a0 <imu_ahrs_update+0x360>)
 800538a:	edd3 7a00 	vldr	s15, [r3]
 800538e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005392:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	float q1q1 = q1*q1;
 8005396:	4bc0      	ldr	r3, [pc, #768]	; (8005698 <imu_ahrs_update+0x358>)
 8005398:	ed93 7a00 	vldr	s14, [r3]
 800539c:	4bbe      	ldr	r3, [pc, #760]	; (8005698 <imu_ahrs_update+0x358>)
 800539e:	edd3 7a00 	vldr	s15, [r3]
 80053a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053a6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	float q1q2 = q1*q2;
 80053aa:	4bbb      	ldr	r3, [pc, #748]	; (8005698 <imu_ahrs_update+0x358>)
 80053ac:	ed93 7a00 	vldr	s14, [r3]
 80053b0:	4bba      	ldr	r3, [pc, #744]	; (800569c <imu_ahrs_update+0x35c>)
 80053b2:	edd3 7a00 	vldr	s15, [r3]
 80053b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ba:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	float q1q3 = q1*q3;
 80053be:	4bb6      	ldr	r3, [pc, #728]	; (8005698 <imu_ahrs_update+0x358>)
 80053c0:	ed93 7a00 	vldr	s14, [r3]
 80053c4:	4bb6      	ldr	r3, [pc, #728]	; (80056a0 <imu_ahrs_update+0x360>)
 80053c6:	edd3 7a00 	vldr	s15, [r3]
 80053ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ce:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	float q2q2 = q2*q2;   
 80053d2:	4bb2      	ldr	r3, [pc, #712]	; (800569c <imu_ahrs_update+0x35c>)
 80053d4:	ed93 7a00 	vldr	s14, [r3]
 80053d8:	4bb0      	ldr	r3, [pc, #704]	; (800569c <imu_ahrs_update+0x35c>)
 80053da:	edd3 7a00 	vldr	s15, [r3]
 80053de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053e2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	float q2q3 = q2*q3;
 80053e6:	4bad      	ldr	r3, [pc, #692]	; (800569c <imu_ahrs_update+0x35c>)
 80053e8:	ed93 7a00 	vldr	s14, [r3]
 80053ec:	4bac      	ldr	r3, [pc, #688]	; (80056a0 <imu_ahrs_update+0x360>)
 80053ee:	edd3 7a00 	vldr	s15, [r3]
 80053f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053f6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	float q3q3 = q3*q3;   
 80053fa:	4ba9      	ldr	r3, [pc, #676]	; (80056a0 <imu_ahrs_update+0x360>)
 80053fc:	ed93 7a00 	vldr	s14, [r3]
 8005400:	4ba7      	ldr	r3, [pc, #668]	; (80056a0 <imu_ahrs_update+0x360>)
 8005402:	edd3 7a00 	vldr	s15, [r3]
 8005406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800540a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

	gx = imu.wx;
 800540e:	4ba5      	ldr	r3, [pc, #660]	; (80056a4 <imu_ahrs_update+0x364>)
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	4aa5      	ldr	r2, [pc, #660]	; (80056a8 <imu_ahrs_update+0x368>)
 8005414:	6013      	str	r3, [r2, #0]
	gy = imu.wy;
 8005416:	4ba3      	ldr	r3, [pc, #652]	; (80056a4 <imu_ahrs_update+0x364>)
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	4aa4      	ldr	r2, [pc, #656]	; (80056ac <imu_ahrs_update+0x36c>)
 800541c:	6013      	str	r3, [r2, #0]
	gz = imu.wz;
 800541e:	4ba1      	ldr	r3, [pc, #644]	; (80056a4 <imu_ahrs_update+0x364>)
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	4aa3      	ldr	r2, [pc, #652]	; (80056b0 <imu_ahrs_update+0x370>)
 8005424:	6013      	str	r3, [r2, #0]
	ax = imu.ax;
 8005426:	4b9f      	ldr	r3, [pc, #636]	; (80056a4 <imu_ahrs_update+0x364>)
 8005428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800542c:	ee07 3a90 	vmov	s15, r3
 8005430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005434:	4b9f      	ldr	r3, [pc, #636]	; (80056b4 <imu_ahrs_update+0x374>)
 8005436:	edc3 7a00 	vstr	s15, [r3]
	ay = imu.ay;
 800543a:	4b9a      	ldr	r3, [pc, #616]	; (80056a4 <imu_ahrs_update+0x364>)
 800543c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005440:	ee07 3a90 	vmov	s15, r3
 8005444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005448:	4b9b      	ldr	r3, [pc, #620]	; (80056b8 <imu_ahrs_update+0x378>)
 800544a:	edc3 7a00 	vstr	s15, [r3]
	az = imu.az;
 800544e:	4b95      	ldr	r3, [pc, #596]	; (80056a4 <imu_ahrs_update+0x364>)
 8005450:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005454:	ee07 3a90 	vmov	s15, r3
 8005458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800545c:	4b97      	ldr	r3, [pc, #604]	; (80056bc <imu_ahrs_update+0x37c>)
 800545e:	edc3 7a00 	vstr	s15, [r3]
	mx = imu.mx;
 8005462:	4b90      	ldr	r3, [pc, #576]	; (80056a4 <imu_ahrs_update+0x364>)
 8005464:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005468:	ee07 3a90 	vmov	s15, r3
 800546c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005470:	4b93      	ldr	r3, [pc, #588]	; (80056c0 <imu_ahrs_update+0x380>)
 8005472:	edc3 7a00 	vstr	s15, [r3]
	my = imu.my;
 8005476:	4b8b      	ldr	r3, [pc, #556]	; (80056a4 <imu_ahrs_update+0x364>)
 8005478:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800547c:	ee07 3a90 	vmov	s15, r3
 8005480:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005484:	4b8f      	ldr	r3, [pc, #572]	; (80056c4 <imu_ahrs_update+0x384>)
 8005486:	edc3 7a00 	vstr	s15, [r3]
	mz = imu.mz;
 800548a:	4b86      	ldr	r3, [pc, #536]	; (80056a4 <imu_ahrs_update+0x364>)
 800548c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005490:	ee07 3a90 	vmov	s15, r3
 8005494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005498:	4b8b      	ldr	r3, [pc, #556]	; (80056c8 <imu_ahrs_update+0x388>)
 800549a:	edc3 7a00 	vstr	s15, [r3]

	now_update  = HAL_GetTick(); //ms
 800549e:	f7fb fdc9 	bl	8001034 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	4b89      	ldr	r3, [pc, #548]	; (80056cc <imu_ahrs_update+0x38c>)
 80054a6:	601a      	str	r2, [r3, #0]
	halfT       = ((float)(now_update - last_update) / 2000.0f);
 80054a8:	4b88      	ldr	r3, [pc, #544]	; (80056cc <imu_ahrs_update+0x38c>)
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	4b88      	ldr	r3, [pc, #544]	; (80056d0 <imu_ahrs_update+0x390>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	ee07 3a90 	vmov	s15, r3
 80054b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80054ba:	eddf 6a86 	vldr	s13, [pc, #536]	; 80056d4 <imu_ahrs_update+0x394>
 80054be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054c2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	last_update = now_update;
 80054c6:	4b81      	ldr	r3, [pc, #516]	; (80056cc <imu_ahrs_update+0x38c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a81      	ldr	r2, [pc, #516]	; (80056d0 <imu_ahrs_update+0x390>)
 80054cc:	6013      	str	r3, [r2, #0]
	
	/* Fast inverse square-root */
	norm = inv_sqrt(ax*ax + ay*ay + az*az);       
 80054ce:	4b79      	ldr	r3, [pc, #484]	; (80056b4 <imu_ahrs_update+0x374>)
 80054d0:	ed93 7a00 	vldr	s14, [r3]
 80054d4:	4b77      	ldr	r3, [pc, #476]	; (80056b4 <imu_ahrs_update+0x374>)
 80054d6:	edd3 7a00 	vldr	s15, [r3]
 80054da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054de:	4b76      	ldr	r3, [pc, #472]	; (80056b8 <imu_ahrs_update+0x378>)
 80054e0:	edd3 6a00 	vldr	s13, [r3]
 80054e4:	4b74      	ldr	r3, [pc, #464]	; (80056b8 <imu_ahrs_update+0x378>)
 80054e6:	edd3 7a00 	vldr	s15, [r3]
 80054ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80054f2:	4b72      	ldr	r3, [pc, #456]	; (80056bc <imu_ahrs_update+0x37c>)
 80054f4:	edd3 6a00 	vldr	s13, [r3]
 80054f8:	4b70      	ldr	r3, [pc, #448]	; (80056bc <imu_ahrs_update+0x37c>)
 80054fa:	edd3 7a00 	vldr	s15, [r3]
 80054fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005506:	eeb0 0a67 	vmov.f32	s0, s15
 800550a:	f7ff f995 	bl	8004838 <inv_sqrt>
 800550e:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	ax = ax * norm;
 8005512:	4b68      	ldr	r3, [pc, #416]	; (80056b4 <imu_ahrs_update+0x374>)
 8005514:	ed93 7a00 	vldr	s14, [r3]
 8005518:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800551c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005520:	4b64      	ldr	r3, [pc, #400]	; (80056b4 <imu_ahrs_update+0x374>)
 8005522:	edc3 7a00 	vstr	s15, [r3]
	ay = ay * norm;
 8005526:	4b64      	ldr	r3, [pc, #400]	; (80056b8 <imu_ahrs_update+0x378>)
 8005528:	ed93 7a00 	vldr	s14, [r3]
 800552c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005534:	4b60      	ldr	r3, [pc, #384]	; (80056b8 <imu_ahrs_update+0x378>)
 8005536:	edc3 7a00 	vstr	s15, [r3]
	az = az * norm;
 800553a:	4b60      	ldr	r3, [pc, #384]	; (80056bc <imu_ahrs_update+0x37c>)
 800553c:	ed93 7a00 	vldr	s14, [r3]
 8005540:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005548:	4b5c      	ldr	r3, [pc, #368]	; (80056bc <imu_ahrs_update+0x37c>)
 800554a:	edc3 7a00 	vstr	s15, [r3]
	
	#ifdef IST8310
		norm = inv_sqrt(mx*mx + my*my + mz*mz);          
 800554e:	4b5c      	ldr	r3, [pc, #368]	; (80056c0 <imu_ahrs_update+0x380>)
 8005550:	ed93 7a00 	vldr	s14, [r3]
 8005554:	4b5a      	ldr	r3, [pc, #360]	; (80056c0 <imu_ahrs_update+0x380>)
 8005556:	edd3 7a00 	vldr	s15, [r3]
 800555a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800555e:	4b59      	ldr	r3, [pc, #356]	; (80056c4 <imu_ahrs_update+0x384>)
 8005560:	edd3 6a00 	vldr	s13, [r3]
 8005564:	4b57      	ldr	r3, [pc, #348]	; (80056c4 <imu_ahrs_update+0x384>)
 8005566:	edd3 7a00 	vldr	s15, [r3]
 800556a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800556e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005572:	4b55      	ldr	r3, [pc, #340]	; (80056c8 <imu_ahrs_update+0x388>)
 8005574:	edd3 6a00 	vldr	s13, [r3]
 8005578:	4b53      	ldr	r3, [pc, #332]	; (80056c8 <imu_ahrs_update+0x388>)
 800557a:	edd3 7a00 	vldr	s15, [r3]
 800557e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005582:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005586:	eeb0 0a67 	vmov.f32	s0, s15
 800558a:	f7ff f955 	bl	8004838 <inv_sqrt>
 800558e:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
		mx = mx * norm;
 8005592:	4b4b      	ldr	r3, [pc, #300]	; (80056c0 <imu_ahrs_update+0x380>)
 8005594:	ed93 7a00 	vldr	s14, [r3]
 8005598:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800559c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055a0:	4b47      	ldr	r3, [pc, #284]	; (80056c0 <imu_ahrs_update+0x380>)
 80055a2:	edc3 7a00 	vstr	s15, [r3]
		my = my * norm;
 80055a6:	4b47      	ldr	r3, [pc, #284]	; (80056c4 <imu_ahrs_update+0x384>)
 80055a8:	ed93 7a00 	vldr	s14, [r3]
 80055ac:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80055b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055b4:	4b43      	ldr	r3, [pc, #268]	; (80056c4 <imu_ahrs_update+0x384>)
 80055b6:	edc3 7a00 	vstr	s15, [r3]
		mz = mz * norm; 
 80055ba:	4b43      	ldr	r3, [pc, #268]	; (80056c8 <imu_ahrs_update+0x388>)
 80055bc:	ed93 7a00 	vldr	s14, [r3]
 80055c0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80055c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055c8:	4b3f      	ldr	r3, [pc, #252]	; (80056c8 <imu_ahrs_update+0x388>)
 80055ca:	edc3 7a00 	vstr	s15, [r3]
		mx = 0;
		my = 0;
		mz = 0;		
	#endif
	/* compute reference direction of flux */
	hx = 2.0f*mx*(0.5f - q2q2 - q3q3) + 2.0f*my*(q1q2 - q0q3) + 2.0f*mz*(q1q3 + q0q2);
 80055ce:	4b3c      	ldr	r3, [pc, #240]	; (80056c0 <imu_ahrs_update+0x380>)
 80055d0:	edd3 7a00 	vldr	s15, [r3]
 80055d4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80055d8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80055dc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80055e0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80055e4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80055e8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80055ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055f0:	4b34      	ldr	r3, [pc, #208]	; (80056c4 <imu_ahrs_update+0x384>)
 80055f2:	edd3 7a00 	vldr	s15, [r3]
 80055f6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80055fa:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 80055fe:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005602:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005606:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800560a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800560e:	4b2e      	ldr	r3, [pc, #184]	; (80056c8 <imu_ahrs_update+0x388>)
 8005610:	edd3 7a00 	vldr	s15, [r3]
 8005614:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005618:	ed97 6a17 	vldr	s12, [r7, #92]	; 0x5c
 800561c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005620:	ee76 7a27 	vadd.f32	s15, s12, s15
 8005624:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800562c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	hy = 2.0f*mx*(q1q2 + q0q3) + 2.0f*my*(0.5f - q1q1 - q3q3) + 2.0f*mz*(q2q3 - q0q1);
 8005630:	4b23      	ldr	r3, [pc, #140]	; (80056c0 <imu_ahrs_update+0x380>)
 8005632:	edd3 7a00 	vldr	s15, [r3]
 8005636:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800563a:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800563e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005646:	ee27 7a27 	vmul.f32	s14, s14, s15
 800564a:	4b1e      	ldr	r3, [pc, #120]	; (80056c4 <imu_ahrs_update+0x384>)
 800564c:	edd3 7a00 	vldr	s15, [r3]
 8005650:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005654:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005658:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800565c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005660:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005664:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005668:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800566c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005670:	4b15      	ldr	r3, [pc, #84]	; (80056c8 <imu_ahrs_update+0x388>)
 8005672:	edd3 7a00 	vldr	s15, [r3]
 8005676:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800567a:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 800567e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005682:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005686:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800568a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800568e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8005692:	e021      	b.n	80056d8 <imu_ahrs_update+0x398>
 8005694:	20000008 	.word	0x20000008
 8005698:	20000210 	.word	0x20000210
 800569c:	20000214 	.word	0x20000214
 80056a0:	20000218 	.word	0x20000218
 80056a4:	20000244 	.word	0x20000244
 80056a8:	2000021c 	.word	0x2000021c
 80056ac:	20000220 	.word	0x20000220
 80056b0:	20000224 	.word	0x20000224
 80056b4:	20000228 	.word	0x20000228
 80056b8:	2000022c 	.word	0x2000022c
 80056bc:	20000230 	.word	0x20000230
 80056c0:	20000234 	.word	0x20000234
 80056c4:	20000238 	.word	0x20000238
 80056c8:	2000023c 	.word	0x2000023c
 80056cc:	200002b4 	.word	0x200002b4
 80056d0:	200002f0 	.word	0x200002f0
 80056d4:	44fa0000 	.word	0x44fa0000
	hz = 2.0f*mx*(q1q3 - q0q2) + 2.0f*my*(q2q3 + q0q1) + 2.0f*mz*(0.5f - q1q1 - q2q2);         
 80056d8:	4be8      	ldr	r3, [pc, #928]	; (8005a7c <imu_ahrs_update+0x73c>)
 80056da:	edd3 7a00 	vldr	s15, [r3]
 80056de:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80056e2:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80056e6:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80056ea:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80056ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056f2:	4be3      	ldr	r3, [pc, #908]	; (8005a80 <imu_ahrs_update+0x740>)
 80056f4:	edd3 7a00 	vldr	s15, [r3]
 80056f8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80056fc:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8005700:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005704:	ee76 7a27 	vadd.f32	s15, s12, s15
 8005708:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800570c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005710:	4bdc      	ldr	r3, [pc, #880]	; (8005a84 <imu_ahrs_update+0x744>)
 8005712:	edd3 7a00 	vldr	s15, [r3]
 8005716:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800571a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800571e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005722:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005726:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800572a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800572e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005732:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005736:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	bx = sqrt((hx*hx) + (hy*hy));
 800573a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800573e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005742:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005746:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800574a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800574e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005756:	ee17 0a90 	vmov	r0, s15
 800575a:	f7fa ff05 	bl	8000568 <__aeabi_f2d>
 800575e:	4603      	mov	r3, r0
 8005760:	460c      	mov	r4, r1
 8005762:	ec44 3b10 	vmov	d0, r3, r4
 8005766:	f006 fd09 	bl	800c17c <sqrt>
 800576a:	ec54 3b10 	vmov	r3, r4, d0
 800576e:	4618      	mov	r0, r3
 8005770:	4621      	mov	r1, r4
 8005772:	f7fb fa29 	bl	8000bc8 <__aeabi_d2f>
 8005776:	4603      	mov	r3, r0
 8005778:	63bb      	str	r3, [r7, #56]	; 0x38
	bz = hz; 
 800577a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800577c:	637b      	str	r3, [r7, #52]	; 0x34
	
	/* estimated direction of gravity and flux (v and w) */
	vx = 2.0f*(q1q3 - q0q2);
 800577e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8005782:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005786:	ee77 7a67 	vsub.f32	s15, s14, s15
 800578a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800578e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	vy = 2.0f*(q0q1 + q2q3);
 8005792:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8005796:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800579a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800579e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80057a2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	vz = q0q0 - q1q1 - q2q2 + q3q3;
 80057a6:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80057aa:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80057ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80057b2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80057b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057ba:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80057be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057c2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	wx = 2.0f*bx*(0.5f - q2q2 - q3q3) + 2.0f*bz*(q1q3 - q0q2);
 80057c6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80057ca:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80057ce:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80057d2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80057d6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80057da:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80057de:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80057e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80057e6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80057ea:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80057ee:	ed97 6a17 	vldr	s12, [r7, #92]	; 0x5c
 80057f2:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80057f6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80057fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005802:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	wy = 2.0f*bx*(q1q2 - q0q3) + 2.0f*bz*(q0q1 + q2q3);
 8005806:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800580a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800580e:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8005812:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005816:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800581a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800581e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005822:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005826:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800582a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800582e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8005832:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005836:	ee77 7a27 	vadd.f32	s15, s14, s15
 800583a:	edc7 7a08 	vstr	s15, [r7, #32]
	wz = 2.0f*bx*(q0q2 + q1q3) + 2.0f*bz*(0.5f - q1q1 - q2q2);  
 800583e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005842:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005846:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800584a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800584e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005852:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005856:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800585a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800585e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005862:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005866:	ee36 6a67 	vsub.f32	s12, s12, s15
 800586a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800586e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005872:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800587a:	edc7 7a07 	vstr	s15, [r7, #28]
	
	/* 
	 * error is sum of cross product between reference direction 
	 * of fields and direction measured by sensors 
	 */
	ex = (ay*vz - az*vy) + (my*wz - mz*wy);
 800587e:	4b82      	ldr	r3, [pc, #520]	; (8005a88 <imu_ahrs_update+0x748>)
 8005880:	ed93 7a00 	vldr	s14, [r3]
 8005884:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005888:	ee27 7a27 	vmul.f32	s14, s14, s15
 800588c:	4b7f      	ldr	r3, [pc, #508]	; (8005a8c <imu_ahrs_update+0x74c>)
 800588e:	edd3 6a00 	vldr	s13, [r3]
 8005892:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005896:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800589a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800589e:	4b78      	ldr	r3, [pc, #480]	; (8005a80 <imu_ahrs_update+0x740>)
 80058a0:	edd3 6a00 	vldr	s13, [r3]
 80058a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80058a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80058ac:	4b75      	ldr	r3, [pc, #468]	; (8005a84 <imu_ahrs_update+0x744>)
 80058ae:	ed93 6a00 	vldr	s12, [r3]
 80058b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80058b6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80058ba:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80058be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058c2:	edc7 7a06 	vstr	s15, [r7, #24]
	ey = (az*vx - ax*vz) + (mz*wx - mx*wz);
 80058c6:	4b71      	ldr	r3, [pc, #452]	; (8005a8c <imu_ahrs_update+0x74c>)
 80058c8:	ed93 7a00 	vldr	s14, [r3]
 80058cc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80058d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80058d4:	4b6e      	ldr	r3, [pc, #440]	; (8005a90 <imu_ahrs_update+0x750>)
 80058d6:	edd3 6a00 	vldr	s13, [r3]
 80058da:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80058de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80058e6:	4b67      	ldr	r3, [pc, #412]	; (8005a84 <imu_ahrs_update+0x744>)
 80058e8:	edd3 6a00 	vldr	s13, [r3]
 80058ec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80058f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80058f4:	4b61      	ldr	r3, [pc, #388]	; (8005a7c <imu_ahrs_update+0x73c>)
 80058f6:	ed93 6a00 	vldr	s12, [r3]
 80058fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80058fe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005902:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005906:	ee77 7a27 	vadd.f32	s15, s14, s15
 800590a:	edc7 7a05 	vstr	s15, [r7, #20]
	ez = (ax*vy - ay*vx) + (mx*wy - my*wx);
 800590e:	4b60      	ldr	r3, [pc, #384]	; (8005a90 <imu_ahrs_update+0x750>)
 8005910:	ed93 7a00 	vldr	s14, [r3]
 8005914:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005918:	ee27 7a27 	vmul.f32	s14, s14, s15
 800591c:	4b5a      	ldr	r3, [pc, #360]	; (8005a88 <imu_ahrs_update+0x748>)
 800591e:	edd3 6a00 	vldr	s13, [r3]
 8005922:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005926:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800592a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800592e:	4b53      	ldr	r3, [pc, #332]	; (8005a7c <imu_ahrs_update+0x73c>)
 8005930:	edd3 6a00 	vldr	s13, [r3]
 8005934:	edd7 7a08 	vldr	s15, [r7, #32]
 8005938:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800593c:	4b50      	ldr	r3, [pc, #320]	; (8005a80 <imu_ahrs_update+0x740>)
 800593e:	ed93 6a00 	vldr	s12, [r3]
 8005942:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005946:	ee66 7a27 	vmul.f32	s15, s12, s15
 800594a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800594e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005952:	edc7 7a04 	vstr	s15, [r7, #16]

	/* PI */
	if(ex != 0.0f && ey != 0.0f && ez != 0.0f)
 8005956:	edd7 7a06 	vldr	s15, [r7, #24]
 800595a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800595e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005962:	d076      	beq.n	8005a52 <imu_ahrs_update+0x712>
 8005964:	edd7 7a05 	vldr	s15, [r7, #20]
 8005968:	eef5 7a40 	vcmp.f32	s15, #0.0
 800596c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005970:	d06f      	beq.n	8005a52 <imu_ahrs_update+0x712>
 8005972:	edd7 7a04 	vldr	s15, [r7, #16]
 8005976:	eef5 7a40 	vcmp.f32	s15, #0.0
 800597a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800597e:	d068      	beq.n	8005a52 <imu_ahrs_update+0x712>
	{
		exInt = exInt + ex * Ki * halfT;
 8005980:	edd7 7a06 	vldr	s15, [r7, #24]
 8005984:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8005a94 <imu_ahrs_update+0x754>
 8005988:	ee27 7a87 	vmul.f32	s14, s15, s14
 800598c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8005990:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005994:	4b40      	ldr	r3, [pc, #256]	; (8005a98 <imu_ahrs_update+0x758>)
 8005996:	edd3 7a00 	vldr	s15, [r3]
 800599a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800599e:	4b3e      	ldr	r3, [pc, #248]	; (8005a98 <imu_ahrs_update+0x758>)
 80059a0:	edc3 7a00 	vstr	s15, [r3]
		eyInt = eyInt + ey * Ki * halfT;	
 80059a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80059a8:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8005a94 <imu_ahrs_update+0x754>
 80059ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80059b0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80059b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059b8:	4b38      	ldr	r3, [pc, #224]	; (8005a9c <imu_ahrs_update+0x75c>)
 80059ba:	edd3 7a00 	vldr	s15, [r3]
 80059be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059c2:	4b36      	ldr	r3, [pc, #216]	; (8005a9c <imu_ahrs_update+0x75c>)
 80059c4:	edc3 7a00 	vstr	s15, [r3]
		ezInt = ezInt + ez * Ki * halfT;
 80059c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80059cc:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8005a94 <imu_ahrs_update+0x754>
 80059d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80059d4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80059d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059dc:	4b30      	ldr	r3, [pc, #192]	; (8005aa0 <imu_ahrs_update+0x760>)
 80059de:	edd3 7a00 	vldr	s15, [r3]
 80059e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059e6:	4b2e      	ldr	r3, [pc, #184]	; (8005aa0 <imu_ahrs_update+0x760>)
 80059e8:	edc3 7a00 	vstr	s15, [r3]
		
		gx = gx + Kp*ex + exInt;
 80059ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80059f0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80059f4:	4b2b      	ldr	r3, [pc, #172]	; (8005aa4 <imu_ahrs_update+0x764>)
 80059f6:	edd3 7a00 	vldr	s15, [r3]
 80059fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059fe:	4b26      	ldr	r3, [pc, #152]	; (8005a98 <imu_ahrs_update+0x758>)
 8005a00:	edd3 7a00 	vldr	s15, [r3]
 8005a04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a08:	4b26      	ldr	r3, [pc, #152]	; (8005aa4 <imu_ahrs_update+0x764>)
 8005a0a:	edc3 7a00 	vstr	s15, [r3]
		gy = gy + Kp*ey + eyInt;
 8005a0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a12:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005a16:	4b24      	ldr	r3, [pc, #144]	; (8005aa8 <imu_ahrs_update+0x768>)
 8005a18:	edd3 7a00 	vldr	s15, [r3]
 8005a1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a20:	4b1e      	ldr	r3, [pc, #120]	; (8005a9c <imu_ahrs_update+0x75c>)
 8005a22:	edd3 7a00 	vldr	s15, [r3]
 8005a26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a2a:	4b1f      	ldr	r3, [pc, #124]	; (8005aa8 <imu_ahrs_update+0x768>)
 8005a2c:	edc3 7a00 	vstr	s15, [r3]
		gz = gz + Kp*ez + ezInt;
 8005a30:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a34:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005a38:	4b1c      	ldr	r3, [pc, #112]	; (8005aac <imu_ahrs_update+0x76c>)
 8005a3a:	edd3 7a00 	vldr	s15, [r3]
 8005a3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a42:	4b17      	ldr	r3, [pc, #92]	; (8005aa0 <imu_ahrs_update+0x760>)
 8005a44:	edd3 7a00 	vldr	s15, [r3]
 8005a48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a4c:	4b17      	ldr	r3, [pc, #92]	; (8005aac <imu_ahrs_update+0x76c>)
 8005a4e:	edc3 7a00 	vstr	s15, [r3]
	}
	
	tempq0 = q0 + (-q1*gx - q2*gy - q3*gz) * halfT;
 8005a52:	4b17      	ldr	r3, [pc, #92]	; (8005ab0 <imu_ahrs_update+0x770>)
 8005a54:	edd3 7a00 	vldr	s15, [r3]
 8005a58:	eeb1 7a67 	vneg.f32	s14, s15
 8005a5c:	4b11      	ldr	r3, [pc, #68]	; (8005aa4 <imu_ahrs_update+0x764>)
 8005a5e:	edd3 7a00 	vldr	s15, [r3]
 8005a62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a66:	4b13      	ldr	r3, [pc, #76]	; (8005ab4 <imu_ahrs_update+0x774>)
 8005a68:	edd3 6a00 	vldr	s13, [r3]
 8005a6c:	4b0e      	ldr	r3, [pc, #56]	; (8005aa8 <imu_ahrs_update+0x768>)
 8005a6e:	edd3 7a00 	vldr	s15, [r3]
 8005a72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a7a:	e01d      	b.n	8005ab8 <imu_ahrs_update+0x778>
 8005a7c:	20000234 	.word	0x20000234
 8005a80:	20000238 	.word	0x20000238
 8005a84:	2000023c 	.word	0x2000023c
 8005a88:	2000022c 	.word	0x2000022c
 8005a8c:	20000230 	.word	0x20000230
 8005a90:	20000228 	.word	0x20000228
 8005a94:	3c23d70a 	.word	0x3c23d70a
 8005a98:	200002a8 	.word	0x200002a8
 8005a9c:	200002b8 	.word	0x200002b8
 8005aa0:	200002ec 	.word	0x200002ec
 8005aa4:	2000021c 	.word	0x2000021c
 8005aa8:	20000220 	.word	0x20000220
 8005aac:	20000224 	.word	0x20000224
 8005ab0:	20000210 	.word	0x20000210
 8005ab4:	20000214 	.word	0x20000214
 8005ab8:	4b6a      	ldr	r3, [pc, #424]	; (8005c64 <imu_ahrs_update+0x924>)
 8005aba:	edd3 6a00 	vldr	s13, [r3]
 8005abe:	4b6a      	ldr	r3, [pc, #424]	; (8005c68 <imu_ahrs_update+0x928>)
 8005ac0:	edd3 7a00 	vldr	s15, [r3]
 8005ac4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ac8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005acc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8005ad0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ad4:	4b65      	ldr	r3, [pc, #404]	; (8005c6c <imu_ahrs_update+0x92c>)
 8005ad6:	edd3 7a00 	vldr	s15, [r3]
 8005ada:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ade:	edc7 7a03 	vstr	s15, [r7, #12]
	tempq1 = q1 + (q0*gx + q2*gz - q3*gy) * halfT;
 8005ae2:	4b62      	ldr	r3, [pc, #392]	; (8005c6c <imu_ahrs_update+0x92c>)
 8005ae4:	ed93 7a00 	vldr	s14, [r3]
 8005ae8:	4b61      	ldr	r3, [pc, #388]	; (8005c70 <imu_ahrs_update+0x930>)
 8005aea:	edd3 7a00 	vldr	s15, [r3]
 8005aee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005af2:	4b60      	ldr	r3, [pc, #384]	; (8005c74 <imu_ahrs_update+0x934>)
 8005af4:	edd3 6a00 	vldr	s13, [r3]
 8005af8:	4b5b      	ldr	r3, [pc, #364]	; (8005c68 <imu_ahrs_update+0x928>)
 8005afa:	edd3 7a00 	vldr	s15, [r3]
 8005afe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b06:	4b57      	ldr	r3, [pc, #348]	; (8005c64 <imu_ahrs_update+0x924>)
 8005b08:	edd3 6a00 	vldr	s13, [r3]
 8005b0c:	4b5a      	ldr	r3, [pc, #360]	; (8005c78 <imu_ahrs_update+0x938>)
 8005b0e:	edd3 7a00 	vldr	s15, [r3]
 8005b12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005b1a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8005b1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b22:	4b56      	ldr	r3, [pc, #344]	; (8005c7c <imu_ahrs_update+0x93c>)
 8005b24:	edd3 7a00 	vldr	s15, [r3]
 8005b28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b2c:	edc7 7a02 	vstr	s15, [r7, #8]
	tempq2 = q2 + (q0*gy - q1*gz + q3*gx) * halfT;
 8005b30:	4b4e      	ldr	r3, [pc, #312]	; (8005c6c <imu_ahrs_update+0x92c>)
 8005b32:	ed93 7a00 	vldr	s14, [r3]
 8005b36:	4b50      	ldr	r3, [pc, #320]	; (8005c78 <imu_ahrs_update+0x938>)
 8005b38:	edd3 7a00 	vldr	s15, [r3]
 8005b3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b40:	4b4e      	ldr	r3, [pc, #312]	; (8005c7c <imu_ahrs_update+0x93c>)
 8005b42:	edd3 6a00 	vldr	s13, [r3]
 8005b46:	4b48      	ldr	r3, [pc, #288]	; (8005c68 <imu_ahrs_update+0x928>)
 8005b48:	edd3 7a00 	vldr	s15, [r3]
 8005b4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005b54:	4b43      	ldr	r3, [pc, #268]	; (8005c64 <imu_ahrs_update+0x924>)
 8005b56:	edd3 6a00 	vldr	s13, [r3]
 8005b5a:	4b45      	ldr	r3, [pc, #276]	; (8005c70 <imu_ahrs_update+0x930>)
 8005b5c:	edd3 7a00 	vldr	s15, [r3]
 8005b60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b68:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8005b6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b70:	4b40      	ldr	r3, [pc, #256]	; (8005c74 <imu_ahrs_update+0x934>)
 8005b72:	edd3 7a00 	vldr	s15, [r3]
 8005b76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b7a:	edc7 7a01 	vstr	s15, [r7, #4]
	tempq3 = q3 + (q0*gz + q1*gy - q2*gx) * halfT;  
 8005b7e:	4b3b      	ldr	r3, [pc, #236]	; (8005c6c <imu_ahrs_update+0x92c>)
 8005b80:	ed93 7a00 	vldr	s14, [r3]
 8005b84:	4b38      	ldr	r3, [pc, #224]	; (8005c68 <imu_ahrs_update+0x928>)
 8005b86:	edd3 7a00 	vldr	s15, [r3]
 8005b8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b8e:	4b3b      	ldr	r3, [pc, #236]	; (8005c7c <imu_ahrs_update+0x93c>)
 8005b90:	edd3 6a00 	vldr	s13, [r3]
 8005b94:	4b38      	ldr	r3, [pc, #224]	; (8005c78 <imu_ahrs_update+0x938>)
 8005b96:	edd3 7a00 	vldr	s15, [r3]
 8005b9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ba2:	4b34      	ldr	r3, [pc, #208]	; (8005c74 <imu_ahrs_update+0x934>)
 8005ba4:	edd3 6a00 	vldr	s13, [r3]
 8005ba8:	4b31      	ldr	r3, [pc, #196]	; (8005c70 <imu_ahrs_update+0x930>)
 8005baa:	edd3 7a00 	vldr	s15, [r3]
 8005bae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bb2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005bb6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8005bba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005bbe:	4b29      	ldr	r3, [pc, #164]	; (8005c64 <imu_ahrs_update+0x924>)
 8005bc0:	edd3 7a00 	vldr	s15, [r3]
 8005bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bc8:	edc7 7a00 	vstr	s15, [r7]

	/* normalise quaternion */
	norm = inv_sqrt(tempq0*tempq0 + tempq1*tempq1 + tempq2*tempq2 + tempq3*tempq3);
 8005bcc:	ed97 7a03 	vldr	s14, [r7, #12]
 8005bd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8005bd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005bd8:	edd7 6a02 	vldr	s13, [r7, #8]
 8005bdc:	edd7 7a02 	vldr	s15, [r7, #8]
 8005be0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005be4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005be8:	edd7 6a01 	vldr	s13, [r7, #4]
 8005bec:	edd7 7a01 	vldr	s15, [r7, #4]
 8005bf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bf8:	edd7 6a00 	vldr	s13, [r7]
 8005bfc:	edd7 7a00 	vldr	s15, [r7]
 8005c00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c08:	eeb0 0a67 	vmov.f32	s0, s15
 8005c0c:	f7fe fe14 	bl	8004838 <inv_sqrt>
 8005c10:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	q0 = tempq0 * norm;
 8005c14:	ed97 7a03 	vldr	s14, [r7, #12]
 8005c18:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c20:	4b12      	ldr	r3, [pc, #72]	; (8005c6c <imu_ahrs_update+0x92c>)
 8005c22:	edc3 7a00 	vstr	s15, [r3]
	q1 = tempq1 * norm;
 8005c26:	ed97 7a02 	vldr	s14, [r7, #8]
 8005c2a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c32:	4b12      	ldr	r3, [pc, #72]	; (8005c7c <imu_ahrs_update+0x93c>)
 8005c34:	edc3 7a00 	vstr	s15, [r3]
	q2 = tempq2 * norm;
 8005c38:	ed97 7a01 	vldr	s14, [r7, #4]
 8005c3c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c44:	4b0b      	ldr	r3, [pc, #44]	; (8005c74 <imu_ahrs_update+0x934>)
 8005c46:	edc3 7a00 	vstr	s15, [r3]
	q3 = tempq3 * norm;
 8005c4a:	ed97 7a00 	vldr	s14, [r7]
 8005c4e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c56:	4b03      	ldr	r3, [pc, #12]	; (8005c64 <imu_ahrs_update+0x924>)
 8005c58:	edc3 7a00 	vstr	s15, [r3]
}
 8005c5c:	bf00      	nop
 8005c5e:	377c      	adds	r7, #124	; 0x7c
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd90      	pop	{r4, r7, pc}
 8005c64:	20000218 	.word	0x20000218
 8005c68:	20000224 	.word	0x20000224
 8005c6c:	20000008 	.word	0x20000008
 8005c70:	2000021c 	.word	0x2000021c
 8005c74:	20000214 	.word	0x20000214
 8005c78:	20000220 	.word	0x20000220
 8005c7c:	20000210 	.word	0x20000210

08005c80 <imu_attitude_update>:
  * @param  
	* @retval 
  * @usage  call in main() function
	*/
void imu_attitude_update(void)
{
 8005c80:	b590      	push	{r4, r7, lr}
 8005c82:	ed2d 8b02 	vpush	{d8}
 8005c86:	b08b      	sub	sp, #44	; 0x2c
 8005c88:	af00      	add	r7, sp, #0
	float q0q0 = q0 * q0;
 8005c8a:	4b8f      	ldr	r3, [pc, #572]	; (8005ec8 <imu_attitude_update+0x248>)
 8005c8c:	ed93 7a00 	vldr	s14, [r3]
 8005c90:	4b8d      	ldr	r3, [pc, #564]	; (8005ec8 <imu_attitude_update+0x248>)
 8005c92:	edd3 7a00 	vldr	s15, [r3]
 8005c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c9a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float q0q1 = q0 * q1;
 8005c9e:	4b8a      	ldr	r3, [pc, #552]	; (8005ec8 <imu_attitude_update+0x248>)
 8005ca0:	ed93 7a00 	vldr	s14, [r3]
 8005ca4:	4b89      	ldr	r3, [pc, #548]	; (8005ecc <imu_attitude_update+0x24c>)
 8005ca6:	edd3 7a00 	vldr	s15, [r3]
 8005caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cae:	edc7 7a08 	vstr	s15, [r7, #32]
	float q0q2 = q0 * q2;
 8005cb2:	4b85      	ldr	r3, [pc, #532]	; (8005ec8 <imu_attitude_update+0x248>)
 8005cb4:	ed93 7a00 	vldr	s14, [r3]
 8005cb8:	4b85      	ldr	r3, [pc, #532]	; (8005ed0 <imu_attitude_update+0x250>)
 8005cba:	edd3 7a00 	vldr	s15, [r3]
 8005cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc2:	edc7 7a07 	vstr	s15, [r7, #28]
	float q0q3 = q0 * q3;
 8005cc6:	4b80      	ldr	r3, [pc, #512]	; (8005ec8 <imu_attitude_update+0x248>)
 8005cc8:	ed93 7a00 	vldr	s14, [r3]
 8005ccc:	4b81      	ldr	r3, [pc, #516]	; (8005ed4 <imu_attitude_update+0x254>)
 8005cce:	edd3 7a00 	vldr	s15, [r3]
 8005cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cd6:	edc7 7a06 	vstr	s15, [r7, #24]
	float q1q1 = q1 * q1;
 8005cda:	4b7c      	ldr	r3, [pc, #496]	; (8005ecc <imu_attitude_update+0x24c>)
 8005cdc:	ed93 7a00 	vldr	s14, [r3]
 8005ce0:	4b7a      	ldr	r3, [pc, #488]	; (8005ecc <imu_attitude_update+0x24c>)
 8005ce2:	edd3 7a00 	vldr	s15, [r3]
 8005ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cea:	edc7 7a05 	vstr	s15, [r7, #20]
	float q1q2 = q1 * q2;
 8005cee:	4b77      	ldr	r3, [pc, #476]	; (8005ecc <imu_attitude_update+0x24c>)
 8005cf0:	ed93 7a00 	vldr	s14, [r3]
 8005cf4:	4b76      	ldr	r3, [pc, #472]	; (8005ed0 <imu_attitude_update+0x250>)
 8005cf6:	edd3 7a00 	vldr	s15, [r3]
 8005cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cfe:	edc7 7a04 	vstr	s15, [r7, #16]
	float q1q3 = q1 * q3;
 8005d02:	4b72      	ldr	r3, [pc, #456]	; (8005ecc <imu_attitude_update+0x24c>)
 8005d04:	ed93 7a00 	vldr	s14, [r3]
 8005d08:	4b72      	ldr	r3, [pc, #456]	; (8005ed4 <imu_attitude_update+0x254>)
 8005d0a:	edd3 7a00 	vldr	s15, [r3]
 8005d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d12:	edc7 7a03 	vstr	s15, [r7, #12]
	float q2q2 = q2 * q2;
 8005d16:	4b6e      	ldr	r3, [pc, #440]	; (8005ed0 <imu_attitude_update+0x250>)
 8005d18:	ed93 7a00 	vldr	s14, [r3]
 8005d1c:	4b6c      	ldr	r3, [pc, #432]	; (8005ed0 <imu_attitude_update+0x250>)
 8005d1e:	edd3 7a00 	vldr	s15, [r3]
 8005d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d26:	edc7 7a02 	vstr	s15, [r7, #8]
	float q2q3 = q2 * q3;
 8005d2a:	4b69      	ldr	r3, [pc, #420]	; (8005ed0 <imu_attitude_update+0x250>)
 8005d2c:	ed93 7a00 	vldr	s14, [r3]
 8005d30:	4b68      	ldr	r3, [pc, #416]	; (8005ed4 <imu_attitude_update+0x254>)
 8005d32:	edd3 7a00 	vldr	s15, [r3]
 8005d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d3a:	edc7 7a01 	vstr	s15, [r7, #4]
	float q3q3 = q3 * q3;
 8005d3e:	4b65      	ldr	r3, [pc, #404]	; (8005ed4 <imu_attitude_update+0x254>)
 8005d40:	ed93 7a00 	vldr	s14, [r3]
 8005d44:	4b63      	ldr	r3, [pc, #396]	; (8005ed4 <imu_attitude_update+0x254>)
 8005d46:	edd3 7a00 	vldr	s15, [r3]
 8005d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d4e:	edc7 7a00 	vstr	s15, [r7]

	imu.rol = (atan2(2.0 * (q2q3 + q0q1), q0q0 - q1q1 - q2q2 + q3q3)*(180.0/M_PI))*(-1.0);
 8005d52:	ed97 7a01 	vldr	s14, [r7, #4]
 8005d56:	edd7 7a08 	vldr	s15, [r7, #32]
 8005d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d5e:	ee17 0a90 	vmov	r0, s15
 8005d62:	f7fa fc01 	bl	8000568 <__aeabi_f2d>
 8005d66:	4602      	mov	r2, r0
 8005d68:	460b      	mov	r3, r1
 8005d6a:	f7fa fa9f 	bl	80002ac <__adddf3>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	460c      	mov	r4, r1
 8005d72:	ec44 3b18 	vmov	d8, r3, r4
 8005d76:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005d7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8005d7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005d82:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005d8a:	edd7 7a00 	vldr	s15, [r7]
 8005d8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d92:	ee17 0a90 	vmov	r0, s15
 8005d96:	f7fa fbe7 	bl	8000568 <__aeabi_f2d>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	460c      	mov	r4, r1
 8005d9e:	ec44 3b11 	vmov	d1, r3, r4
 8005da2:	eeb0 0a48 	vmov.f32	s0, s16
 8005da6:	eef0 0a68 	vmov.f32	s1, s17
 8005daa:	f006 f9e5 	bl	800c178 <atan2>
 8005dae:	ec51 0b10 	vmov	r0, r1, d0
 8005db2:	a343      	add	r3, pc, #268	; (adr r3, 8005ec0 <imu_attitude_update+0x240>)
 8005db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db8:	f7fa fc2e 	bl	8000618 <__aeabi_dmul>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	460c      	mov	r4, r1
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	4621      	mov	r1, r4
 8005dc4:	f7fa ff00 	bl	8000bc8 <__aeabi_d2f>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef1 7a67 	vneg.f32	s15, s15
 8005dd2:	4b41      	ldr	r3, [pc, #260]	; (8005ed8 <imu_attitude_update+0x258>)
 8005dd4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	imu.pit = (asin(2.0 * (q0q2 - q1q3)))*(180.0/M_PI)*(-1.0);
 8005dd8:	ed97 7a07 	vldr	s14, [r7, #28]
 8005ddc:	edd7 7a03 	vldr	s15, [r7, #12]
 8005de0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005de4:	ee17 0a90 	vmov	r0, s15
 8005de8:	f7fa fbbe 	bl	8000568 <__aeabi_f2d>
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	f7fa fa5c 	bl	80002ac <__adddf3>
 8005df4:	4603      	mov	r3, r0
 8005df6:	460c      	mov	r4, r1
 8005df8:	ec44 3b17 	vmov	d7, r3, r4
 8005dfc:	eeb0 0a47 	vmov.f32	s0, s14
 8005e00:	eef0 0a67 	vmov.f32	s1, s15
 8005e04:	f006 f960 	bl	800c0c8 <asin>
 8005e08:	ec51 0b10 	vmov	r0, r1, d0
 8005e0c:	a32c      	add	r3, pc, #176	; (adr r3, 8005ec0 <imu_attitude_update+0x240>)
 8005e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e12:	f7fa fc01 	bl	8000618 <__aeabi_dmul>
 8005e16:	4603      	mov	r3, r0
 8005e18:	460c      	mov	r4, r1
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	4621      	mov	r1, r4
 8005e1e:	f7fa fed3 	bl	8000bc8 <__aeabi_d2f>
 8005e22:	4603      	mov	r3, r0
 8005e24:	ee07 3a90 	vmov	s15, r3
 8005e28:	eef1 7a67 	vneg.f32	s15, s15
 8005e2c:	4b2a      	ldr	r3, [pc, #168]	; (8005ed8 <imu_attitude_update+0x258>)
 8005e2e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	imu.yaw = (atan2(2.0 * (q1q2 + q0q3), q0q0 + q1q1 - q2q2 - q3q3))*(180.0/M_PI);
 8005e32:	ed97 7a04 	vldr	s14, [r7, #16]
 8005e36:	edd7 7a06 	vldr	s15, [r7, #24]
 8005e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e3e:	ee17 0a90 	vmov	r0, s15
 8005e42:	f7fa fb91 	bl	8000568 <__aeabi_f2d>
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	f7fa fa2f 	bl	80002ac <__adddf3>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	460c      	mov	r4, r1
 8005e52:	ec44 3b18 	vmov	d8, r3, r4
 8005e56:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005e5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8005e5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e62:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e6a:	edd7 7a00 	vldr	s15, [r7]
 8005e6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e72:	ee17 0a90 	vmov	r0, s15
 8005e76:	f7fa fb77 	bl	8000568 <__aeabi_f2d>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	460c      	mov	r4, r1
 8005e7e:	ec44 3b11 	vmov	d1, r3, r4
 8005e82:	eeb0 0a48 	vmov.f32	s0, s16
 8005e86:	eef0 0a68 	vmov.f32	s1, s17
 8005e8a:	f006 f975 	bl	800c178 <atan2>
 8005e8e:	ec51 0b10 	vmov	r0, r1, d0
 8005e92:	a30b      	add	r3, pc, #44	; (adr r3, 8005ec0 <imu_attitude_update+0x240>)
 8005e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e98:	f7fa fbbe 	bl	8000618 <__aeabi_dmul>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	460c      	mov	r4, r1
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	4621      	mov	r1, r4
 8005ea4:	f7fa fe90 	bl	8000bc8 <__aeabi_d2f>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	4b0b      	ldr	r3, [pc, #44]	; (8005ed8 <imu_attitude_update+0x258>)
 8005eac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005eae:	bf00      	nop
 8005eb0:	372c      	adds	r7, #44	; 0x2c
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	ecbd 8b02 	vpop	{d8}
 8005eb8:	bd90      	pop	{r4, r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	f3af 8000 	nop.w
 8005ec0:	1a63c1f8 	.word	0x1a63c1f8
 8005ec4:	404ca5dc 	.word	0x404ca5dc
 8005ec8:	20000008 	.word	0x20000008
 8005ecc:	20000210 	.word	0x20000210
 8005ed0:	20000214 	.word	0x20000214
 8005ed4:	20000218 	.word	0x20000218
 8005ed8:	20000244 	.word	0x20000244

08005edc <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8005ee0:	4b17      	ldr	r3, [pc, #92]	; (8005f40 <MX_CAN1_Init+0x64>)
 8005ee2:	4a18      	ldr	r2, [pc, #96]	; (8005f44 <MX_CAN1_Init+0x68>)
 8005ee4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 8005ee6:	4b16      	ldr	r3, [pc, #88]	; (8005f40 <MX_CAN1_Init+0x64>)
 8005ee8:	2207      	movs	r2, #7
 8005eea:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8005eec:	4b14      	ldr	r3, [pc, #80]	; (8005f40 <MX_CAN1_Init+0x64>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8005ef2:	4b13      	ldr	r3, [pc, #76]	; (8005f40 <MX_CAN1_Init+0x64>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8005ef8:	4b11      	ldr	r3, [pc, #68]	; (8005f40 <MX_CAN1_Init+0x64>)
 8005efa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005efe:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8005f00:	4b0f      	ldr	r3, [pc, #60]	; (8005f40 <MX_CAN1_Init+0x64>)
 8005f02:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005f06:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8005f08:	4b0d      	ldr	r3, [pc, #52]	; (8005f40 <MX_CAN1_Init+0x64>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8005f0e:	4b0c      	ldr	r3, [pc, #48]	; (8005f40 <MX_CAN1_Init+0x64>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8005f14:	4b0a      	ldr	r3, [pc, #40]	; (8005f40 <MX_CAN1_Init+0x64>)
 8005f16:	2200      	movs	r2, #0
 8005f18:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8005f1a:	4b09      	ldr	r3, [pc, #36]	; (8005f40 <MX_CAN1_Init+0x64>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8005f20:	4b07      	ldr	r3, [pc, #28]	; (8005f40 <MX_CAN1_Init+0x64>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8005f26:	4b06      	ldr	r3, [pc, #24]	; (8005f40 <MX_CAN1_Init+0x64>)
 8005f28:	2201      	movs	r2, #1
 8005f2a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8005f2c:	4804      	ldr	r0, [pc, #16]	; (8005f40 <MX_CAN1_Init+0x64>)
 8005f2e:	f7fb f8af 	bl	8001090 <HAL_CAN_Init>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8005f38:	f002 f9da 	bl	80082f0 <Error_Handler>
  }

}
 8005f3c:	bf00      	nop
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	2000031c 	.word	0x2000031c
 8005f44:	40006400 	.word	0x40006400

08005f48 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 8005f4c:	4b17      	ldr	r3, [pc, #92]	; (8005fac <MX_CAN2_Init+0x64>)
 8005f4e:	4a18      	ldr	r2, [pc, #96]	; (8005fb0 <MX_CAN2_Init+0x68>)
 8005f50:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 7;
 8005f52:	4b16      	ldr	r3, [pc, #88]	; (8005fac <MX_CAN2_Init+0x64>)
 8005f54:	2207      	movs	r2, #7
 8005f56:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8005f58:	4b14      	ldr	r3, [pc, #80]	; (8005fac <MX_CAN2_Init+0x64>)
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8005f5e:	4b13      	ldr	r3, [pc, #76]	; (8005fac <MX_CAN2_Init+0x64>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8005f64:	4b11      	ldr	r3, [pc, #68]	; (8005fac <MX_CAN2_Init+0x64>)
 8005f66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005f6a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8005f6c:	4b0f      	ldr	r3, [pc, #60]	; (8005fac <MX_CAN2_Init+0x64>)
 8005f6e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005f72:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8005f74:	4b0d      	ldr	r3, [pc, #52]	; (8005fac <MX_CAN2_Init+0x64>)
 8005f76:	2200      	movs	r2, #0
 8005f78:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8005f7a:	4b0c      	ldr	r3, [pc, #48]	; (8005fac <MX_CAN2_Init+0x64>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8005f80:	4b0a      	ldr	r3, [pc, #40]	; (8005fac <MX_CAN2_Init+0x64>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8005f86:	4b09      	ldr	r3, [pc, #36]	; (8005fac <MX_CAN2_Init+0x64>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8005f8c:	4b07      	ldr	r3, [pc, #28]	; (8005fac <MX_CAN2_Init+0x64>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = ENABLE;
 8005f92:	4b06      	ldr	r3, [pc, #24]	; (8005fac <MX_CAN2_Init+0x64>)
 8005f94:	2201      	movs	r2, #1
 8005f96:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8005f98:	4804      	ldr	r0, [pc, #16]	; (8005fac <MX_CAN2_Init+0x64>)
 8005f9a:	f7fb f879 	bl	8001090 <HAL_CAN_Init>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d001      	beq.n	8005fa8 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8005fa4:	f002 f9a4 	bl	80082f0 <Error_Handler>
  }

}
 8005fa8:	bf00      	nop
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	200002f4 	.word	0x200002f4
 8005fb0:	40006800 	.word	0x40006800

08005fb4 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b08c      	sub	sp, #48	; 0x30
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fbc:	f107 031c 	add.w	r3, r7, #28
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	601a      	str	r2, [r3, #0]
 8005fc4:	605a      	str	r2, [r3, #4]
 8005fc6:	609a      	str	r2, [r3, #8]
 8005fc8:	60da      	str	r2, [r3, #12]
 8005fca:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a52      	ldr	r2, [pc, #328]	; (800611c <HAL_CAN_MspInit+0x168>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d145      	bne.n	8006062 <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8005fd6:	4b52      	ldr	r3, [pc, #328]	; (8006120 <HAL_CAN_MspInit+0x16c>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	4a50      	ldr	r2, [pc, #320]	; (8006120 <HAL_CAN_MspInit+0x16c>)
 8005fde:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8005fe0:	4b4f      	ldr	r3, [pc, #316]	; (8006120 <HAL_CAN_MspInit+0x16c>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d10d      	bne.n	8006004 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8005fe8:	2300      	movs	r3, #0
 8005fea:	61bb      	str	r3, [r7, #24]
 8005fec:	4b4d      	ldr	r3, [pc, #308]	; (8006124 <HAL_CAN_MspInit+0x170>)
 8005fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff0:	4a4c      	ldr	r2, [pc, #304]	; (8006124 <HAL_CAN_MspInit+0x170>)
 8005ff2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8005ff8:	4b4a      	ldr	r3, [pc, #296]	; (8006124 <HAL_CAN_MspInit+0x170>)
 8005ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006000:	61bb      	str	r3, [r7, #24]
 8006002:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006004:	2300      	movs	r3, #0
 8006006:	617b      	str	r3, [r7, #20]
 8006008:	4b46      	ldr	r3, [pc, #280]	; (8006124 <HAL_CAN_MspInit+0x170>)
 800600a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600c:	4a45      	ldr	r2, [pc, #276]	; (8006124 <HAL_CAN_MspInit+0x170>)
 800600e:	f043 0308 	orr.w	r3, r3, #8
 8006012:	6313      	str	r3, [r2, #48]	; 0x30
 8006014:	4b43      	ldr	r3, [pc, #268]	; (8006124 <HAL_CAN_MspInit+0x170>)
 8006016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006018:	f003 0308 	and.w	r3, r3, #8
 800601c:	617b      	str	r3, [r7, #20]
 800601e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006020:	2303      	movs	r3, #3
 8006022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006024:	2302      	movs	r3, #2
 8006026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006028:	2300      	movs	r3, #0
 800602a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800602c:	2303      	movs	r3, #3
 800602e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8006030:	2309      	movs	r3, #9
 8006032:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006034:	f107 031c 	add.w	r3, r7, #28
 8006038:	4619      	mov	r1, r3
 800603a:	483b      	ldr	r0, [pc, #236]	; (8006128 <HAL_CAN_MspInit+0x174>)
 800603c:	f7fb ffba 	bl	8001fb4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8006040:	2200      	movs	r2, #0
 8006042:	2100      	movs	r1, #0
 8006044:	2014      	movs	r0, #20
 8006046:	f7fb ff5c 	bl	8001f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800604a:	2014      	movs	r0, #20
 800604c:	f7fb ff75 	bl	8001f3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8006050:	2200      	movs	r2, #0
 8006052:	2100      	movs	r1, #0
 8006054:	2015      	movs	r0, #21
 8006056:	f7fb ff54 	bl	8001f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800605a:	2015      	movs	r0, #21
 800605c:	f7fb ff6d 	bl	8001f3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8006060:	e058      	b.n	8006114 <HAL_CAN_MspInit+0x160>
  else if(canHandle->Instance==CAN2)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a31      	ldr	r2, [pc, #196]	; (800612c <HAL_CAN_MspInit+0x178>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d153      	bne.n	8006114 <HAL_CAN_MspInit+0x160>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800606c:	2300      	movs	r3, #0
 800606e:	613b      	str	r3, [r7, #16]
 8006070:	4b2c      	ldr	r3, [pc, #176]	; (8006124 <HAL_CAN_MspInit+0x170>)
 8006072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006074:	4a2b      	ldr	r2, [pc, #172]	; (8006124 <HAL_CAN_MspInit+0x170>)
 8006076:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800607a:	6413      	str	r3, [r2, #64]	; 0x40
 800607c:	4b29      	ldr	r3, [pc, #164]	; (8006124 <HAL_CAN_MspInit+0x170>)
 800607e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006080:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006084:	613b      	str	r3, [r7, #16]
 8006086:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8006088:	4b25      	ldr	r3, [pc, #148]	; (8006120 <HAL_CAN_MspInit+0x16c>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	3301      	adds	r3, #1
 800608e:	4a24      	ldr	r2, [pc, #144]	; (8006120 <HAL_CAN_MspInit+0x16c>)
 8006090:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8006092:	4b23      	ldr	r3, [pc, #140]	; (8006120 <HAL_CAN_MspInit+0x16c>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d10d      	bne.n	80060b6 <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800609a:	2300      	movs	r3, #0
 800609c:	60fb      	str	r3, [r7, #12]
 800609e:	4b21      	ldr	r3, [pc, #132]	; (8006124 <HAL_CAN_MspInit+0x170>)
 80060a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a2:	4a20      	ldr	r2, [pc, #128]	; (8006124 <HAL_CAN_MspInit+0x170>)
 80060a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80060a8:	6413      	str	r3, [r2, #64]	; 0x40
 80060aa:	4b1e      	ldr	r3, [pc, #120]	; (8006124 <HAL_CAN_MspInit+0x170>)
 80060ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060b2:	60fb      	str	r3, [r7, #12]
 80060b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060b6:	2300      	movs	r3, #0
 80060b8:	60bb      	str	r3, [r7, #8]
 80060ba:	4b1a      	ldr	r3, [pc, #104]	; (8006124 <HAL_CAN_MspInit+0x170>)
 80060bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060be:	4a19      	ldr	r2, [pc, #100]	; (8006124 <HAL_CAN_MspInit+0x170>)
 80060c0:	f043 0302 	orr.w	r3, r3, #2
 80060c4:	6313      	str	r3, [r2, #48]	; 0x30
 80060c6:	4b17      	ldr	r3, [pc, #92]	; (8006124 <HAL_CAN_MspInit+0x170>)
 80060c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	60bb      	str	r3, [r7, #8]
 80060d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80060d2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80060d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060d8:	2302      	movs	r3, #2
 80060da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060dc:	2300      	movs	r3, #0
 80060de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060e0:	2303      	movs	r3, #3
 80060e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80060e4:	2309      	movs	r3, #9
 80060e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060e8:	f107 031c 	add.w	r3, r7, #28
 80060ec:	4619      	mov	r1, r3
 80060ee:	4810      	ldr	r0, [pc, #64]	; (8006130 <HAL_CAN_MspInit+0x17c>)
 80060f0:	f7fb ff60 	bl	8001fb4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80060f4:	2200      	movs	r2, #0
 80060f6:	2100      	movs	r1, #0
 80060f8:	2040      	movs	r0, #64	; 0x40
 80060fa:	f7fb ff02 	bl	8001f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80060fe:	2040      	movs	r0, #64	; 0x40
 8006100:	f7fb ff1b 	bl	8001f3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8006104:	2200      	movs	r2, #0
 8006106:	2100      	movs	r1, #0
 8006108:	2041      	movs	r0, #65	; 0x41
 800610a:	f7fb fefa 	bl	8001f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800610e:	2041      	movs	r0, #65	; 0x41
 8006110:	f7fb ff13 	bl	8001f3a <HAL_NVIC_EnableIRQ>
}
 8006114:	bf00      	nop
 8006116:	3730      	adds	r7, #48	; 0x30
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	40006400 	.word	0x40006400
 8006120:	20000278 	.word	0x20000278
 8006124:	40023800 	.word	0x40023800
 8006128:	40020c00 	.word	0x40020c00
 800612c:	40006800 	.word	0x40006800
 8006130:	40020400 	.word	0x40020400

08006134 <initCanFilter>:
  /* USER CODE END CAN2_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void initCanFilter() {
 8006134:	b580      	push	{r7, lr}
 8006136:	b08a      	sub	sp, #40	; 0x28
 8006138:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 800613a:	2300      	movs	r3, #0
 800613c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800613e:	2300      	movs	r3, #0
 8006140:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8006142:	2301      	movs	r3, #1
 8006144:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8006146:	2300      	movs	r3, #0
 8006148:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 800614a:	2300      	movs	r3, #0
 800614c:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 800614e:	2300      	movs	r3, #0
 8006150:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8006152:	2300      	movs	r3, #0
 8006154:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8006156:	2300      	movs	r3, #0
 8006158:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800615a:	2301      	movs	r3, #1
 800615c:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 0;
 800615e:	2300      	movs	r3, #0
 8006160:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8006162:	463b      	mov	r3, r7
 8006164:	4619      	mov	r1, r3
 8006166:	4808      	ldr	r0, [pc, #32]	; (8006188 <initCanFilter+0x54>)
 8006168:	f7fb f88e 	bl	8001288 <HAL_CAN_ConfigFilter>

	sFilterConfig.SlaveStartFilterBank = 0;
 800616c:	2300      	movs	r3, #0
 800616e:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterBank = 0;
 8006170:	2300      	movs	r3, #0
 8006172:	617b      	str	r3, [r7, #20]

	HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig);
 8006174:	463b      	mov	r3, r7
 8006176:	4619      	mov	r1, r3
 8006178:	4804      	ldr	r0, [pc, #16]	; (800618c <initCanFilter+0x58>)
 800617a:	f7fb f885 	bl	8001288 <HAL_CAN_ConfigFilter>
}
 800617e:	bf00      	nop
 8006180:	3728      	adds	r7, #40	; 0x28
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	2000031c 	.word	0x2000031c
 800618c:	200002f4 	.word	0x200002f4

08006190 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b08e      	sub	sp, #56	; 0x38
 8006194:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800619a:	2200      	movs	r2, #0
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	605a      	str	r2, [r3, #4]
 80061a0:	609a      	str	r2, [r3, #8]
 80061a2:	60da      	str	r2, [r3, #12]
 80061a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80061a6:	2300      	movs	r3, #0
 80061a8:	623b      	str	r3, [r7, #32]
 80061aa:	4b7c      	ldr	r3, [pc, #496]	; (800639c <MX_GPIO_Init+0x20c>)
 80061ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ae:	4a7b      	ldr	r2, [pc, #492]	; (800639c <MX_GPIO_Init+0x20c>)
 80061b0:	f043 0310 	orr.w	r3, r3, #16
 80061b4:	6313      	str	r3, [r2, #48]	; 0x30
 80061b6:	4b79      	ldr	r3, [pc, #484]	; (800639c <MX_GPIO_Init+0x20c>)
 80061b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ba:	f003 0310 	and.w	r3, r3, #16
 80061be:	623b      	str	r3, [r7, #32]
 80061c0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80061c2:	2300      	movs	r3, #0
 80061c4:	61fb      	str	r3, [r7, #28]
 80061c6:	4b75      	ldr	r3, [pc, #468]	; (800639c <MX_GPIO_Init+0x20c>)
 80061c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ca:	4a74      	ldr	r2, [pc, #464]	; (800639c <MX_GPIO_Init+0x20c>)
 80061cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061d0:	6313      	str	r3, [r2, #48]	; 0x30
 80061d2:	4b72      	ldr	r3, [pc, #456]	; (800639c <MX_GPIO_Init+0x20c>)
 80061d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061da:	61fb      	str	r3, [r7, #28]
 80061dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80061de:	2300      	movs	r3, #0
 80061e0:	61bb      	str	r3, [r7, #24]
 80061e2:	4b6e      	ldr	r3, [pc, #440]	; (800639c <MX_GPIO_Init+0x20c>)
 80061e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e6:	4a6d      	ldr	r2, [pc, #436]	; (800639c <MX_GPIO_Init+0x20c>)
 80061e8:	f043 0301 	orr.w	r3, r3, #1
 80061ec:	6313      	str	r3, [r2, #48]	; 0x30
 80061ee:	4b6b      	ldr	r3, [pc, #428]	; (800639c <MX_GPIO_Init+0x20c>)
 80061f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	61bb      	str	r3, [r7, #24]
 80061f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80061fa:	2300      	movs	r3, #0
 80061fc:	617b      	str	r3, [r7, #20]
 80061fe:	4b67      	ldr	r3, [pc, #412]	; (800639c <MX_GPIO_Init+0x20c>)
 8006200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006202:	4a66      	ldr	r2, [pc, #408]	; (800639c <MX_GPIO_Init+0x20c>)
 8006204:	f043 0302 	orr.w	r3, r3, #2
 8006208:	6313      	str	r3, [r2, #48]	; 0x30
 800620a:	4b64      	ldr	r3, [pc, #400]	; (800639c <MX_GPIO_Init+0x20c>)
 800620c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	617b      	str	r3, [r7, #20]
 8006214:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006216:	2300      	movs	r3, #0
 8006218:	613b      	str	r3, [r7, #16]
 800621a:	4b60      	ldr	r3, [pc, #384]	; (800639c <MX_GPIO_Init+0x20c>)
 800621c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621e:	4a5f      	ldr	r2, [pc, #380]	; (800639c <MX_GPIO_Init+0x20c>)
 8006220:	f043 0308 	orr.w	r3, r3, #8
 8006224:	6313      	str	r3, [r2, #48]	; 0x30
 8006226:	4b5d      	ldr	r3, [pc, #372]	; (800639c <MX_GPIO_Init+0x20c>)
 8006228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622a:	f003 0308 	and.w	r3, r3, #8
 800622e:	613b      	str	r3, [r7, #16]
 8006230:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006232:	2300      	movs	r3, #0
 8006234:	60fb      	str	r3, [r7, #12]
 8006236:	4b59      	ldr	r3, [pc, #356]	; (800639c <MX_GPIO_Init+0x20c>)
 8006238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623a:	4a58      	ldr	r2, [pc, #352]	; (800639c <MX_GPIO_Init+0x20c>)
 800623c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006240:	6313      	str	r3, [r2, #48]	; 0x30
 8006242:	4b56      	ldr	r3, [pc, #344]	; (800639c <MX_GPIO_Init+0x20c>)
 8006244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800624a:	60fb      	str	r3, [r7, #12]
 800624c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800624e:	2300      	movs	r3, #0
 8006250:	60bb      	str	r3, [r7, #8]
 8006252:	4b52      	ldr	r3, [pc, #328]	; (800639c <MX_GPIO_Init+0x20c>)
 8006254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006256:	4a51      	ldr	r2, [pc, #324]	; (800639c <MX_GPIO_Init+0x20c>)
 8006258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800625c:	6313      	str	r3, [r2, #48]	; 0x30
 800625e:	4b4f      	ldr	r3, [pc, #316]	; (800639c <MX_GPIO_Init+0x20c>)
 8006260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006266:	60bb      	str	r3, [r7, #8]
 8006268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800626a:	2300      	movs	r3, #0
 800626c:	607b      	str	r3, [r7, #4]
 800626e:	4b4b      	ldr	r3, [pc, #300]	; (800639c <MX_GPIO_Init+0x20c>)
 8006270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006272:	4a4a      	ldr	r2, [pc, #296]	; (800639c <MX_GPIO_Init+0x20c>)
 8006274:	f043 0320 	orr.w	r3, r3, #32
 8006278:	6313      	str	r3, [r2, #48]	; 0x30
 800627a:	4b48      	ldr	r3, [pc, #288]	; (800639c <MX_GPIO_Init+0x20c>)
 800627c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627e:	f003 0320 	and.w	r3, r3, #32
 8006282:	607b      	str	r3, [r7, #4]
 8006284:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 8006286:	2200      	movs	r2, #0
 8006288:	2101      	movs	r1, #1
 800628a:	4845      	ldr	r0, [pc, #276]	; (80063a0 <MX_GPIO_Init+0x210>)
 800628c:	f7fc f854 	bl	8002338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, POWER_OUT1_Pin|POWER_OUT2_Pin|POWER_OUT3_Pin|POWER_OUT4_Pin, GPIO_PIN_RESET);
 8006290:	2200      	movs	r2, #0
 8006292:	213c      	movs	r1, #60	; 0x3c
 8006294:	4843      	ldr	r0, [pc, #268]	; (80063a4 <MX_GPIO_Init+0x214>)
 8006296:	f7fc f84f 	bl	8002338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5 
 800629a:	2200      	movs	r2, #0
 800629c:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 80062a0:	4841      	ldr	r0, [pc, #260]	; (80063a8 <MX_GPIO_Init+0x218>)
 80062a2:	f7fc f849 	bl	8002338 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI_MPU_CS_Pin|LED_G_Pin, GPIO_PIN_RESET);
 80062a6:	2200      	movs	r2, #0
 80062a8:	f244 0140 	movw	r1, #16448	; 0x4040
 80062ac:	483f      	ldr	r0, [pc, #252]	; (80063ac <MX_GPIO_Init+0x21c>)
 80062ae:	f7fc f843 	bl	8002338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80062b2:	2200      	movs	r2, #0
 80062b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80062b8:	483d      	ldr	r0, [pc, #244]	; (80063b0 <MX_GPIO_Init+0x220>)
 80062ba:	f7fc f83d 	bl	8002338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 80062be:	2200      	movs	r2, #0
 80062c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80062c4:	483b      	ldr	r0, [pc, #236]	; (80063b4 <MX_GPIO_Init+0x224>)
 80062c6:	f7fc f837 	bl	8002338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80062ca:	2301      	movs	r3, #1
 80062cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80062ce:	2301      	movs	r3, #1
 80062d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062d2:	2300      	movs	r3, #0
 80062d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062d6:	2300      	movs	r3, #0
 80062d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80062da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062de:	4619      	mov	r1, r3
 80062e0:	482f      	ldr	r0, [pc, #188]	; (80063a0 <MX_GPIO_Init+0x210>)
 80062e2:	f7fb fe67 	bl	8001fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = POWER_OUT1_Pin|POWER_OUT2_Pin|POWER_OUT3_Pin|POWER_OUT4_Pin;
 80062e6:	233c      	movs	r3, #60	; 0x3c
 80062e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80062ea:	2301      	movs	r3, #1
 80062ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062ee:	2300      	movs	r3, #0
 80062f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062f2:	2300      	movs	r3, #0
 80062f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80062f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062fa:	4619      	mov	r1, r3
 80062fc:	4829      	ldr	r0, [pc, #164]	; (80063a4 <MX_GPIO_Init+0x214>)
 80062fe:	f7fb fe59 	bl	8001fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG8 PG7 PG6 PG5 
                           PG4 PG3 PG2 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5 
 8006302:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8006306:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006308:	2301      	movs	r3, #1
 800630a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800630c:	2300      	movs	r3, #0
 800630e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006310:	2300      	movs	r3, #0
 8006312:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006318:	4619      	mov	r1, r3
 800631a:	4823      	ldr	r0, [pc, #140]	; (80063a8 <MX_GPIO_Init+0x218>)
 800631c:	f7fb fe4a 	bl	8001fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = SPI_MPU_CS_Pin|LED_G_Pin;
 8006320:	f244 0340 	movw	r3, #16448	; 0x4040
 8006324:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006326:	2301      	movs	r3, #1
 8006328:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800632a:	2300      	movs	r3, #0
 800632c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800632e:	2300      	movs	r3, #0
 8006330:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006336:	4619      	mov	r1, r3
 8006338:	481c      	ldr	r0, [pc, #112]	; (80063ac <MX_GPIO_Init+0x21c>)
 800633a:	f7fb fe3b 	bl	8001fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800633e:	2304      	movs	r3, #4
 8006340:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006342:	2300      	movs	r3, #0
 8006344:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006346:	2300      	movs	r3, #0
 8006348:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800634a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800634e:	4619      	mov	r1, r3
 8006350:	4819      	ldr	r0, [pc, #100]	; (80063b8 <MX_GPIO_Init+0x228>)
 8006352:	f7fb fe2f 	bl	8001fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800635a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800635c:	2301      	movs	r3, #1
 800635e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006360:	2300      	movs	r3, #0
 8006362:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006364:	2300      	movs	r3, #0
 8006366:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800636c:	4619      	mov	r1, r3
 800636e:	4810      	ldr	r0, [pc, #64]	; (80063b0 <MX_GPIO_Init+0x220>)
 8006370:	f7fb fe20 	bl	8001fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 8006374:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006378:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800637a:	2301      	movs	r3, #1
 800637c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800637e:	2300      	movs	r3, #0
 8006380:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006382:	2300      	movs	r3, #0
 8006384:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8006386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800638a:	4619      	mov	r1, r3
 800638c:	4809      	ldr	r0, [pc, #36]	; (80063b4 <MX_GPIO_Init+0x224>)
 800638e:	f7fb fe11 	bl	8001fb4 <HAL_GPIO_Init>

}
 8006392:	bf00      	nop
 8006394:	3738      	adds	r7, #56	; 0x38
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	40023800 	.word	0x40023800
 80063a0:	40022000 	.word	0x40022000
 80063a4:	40021c00 	.word	0x40021c00
 80063a8:	40021800 	.word	0x40021800
 80063ac:	40021400 	.word	0x40021400
 80063b0:	40020c00 	.word	0x40020c00
 80063b4:	40021000 	.word	0x40021000
 80063b8:	40020400 	.word	0x40020400

080063bc <__NVIC_SystemReset>:
{
 80063bc:	b480      	push	{r7}
 80063be:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80063c0:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80063c4:	4b05      	ldr	r3, [pc, #20]	; (80063dc <__NVIC_SystemReset+0x20>)
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80063cc:	4903      	ldr	r1, [pc, #12]	; (80063dc <__NVIC_SystemReset+0x20>)
 80063ce:	4b04      	ldr	r3, [pc, #16]	; (80063e0 <__NVIC_SystemReset+0x24>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	60cb      	str	r3, [r1, #12]
 80063d4:	f3bf 8f4f 	dsb	sy
    __NOP();
 80063d8:	bf00      	nop
 80063da:	e7fd      	b.n	80063d8 <__NVIC_SystemReset+0x1c>
 80063dc:	e000ed00 	.word	0xe000ed00
 80063e0:	05fa0004 	.word	0x05fa0004

080063e4 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch) {
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	4603      	mov	r3, r0
 80063ec:	71fb      	strb	r3, [r7, #7]
HAL_UART_Transmit(&huart7, &ch, 1, 1);
 80063ee:	1df9      	adds	r1, r7, #7
 80063f0:	2301      	movs	r3, #1
 80063f2:	2201      	movs	r2, #1
 80063f4:	4803      	ldr	r0, [pc, #12]	; (8006404 <__io_putchar+0x20>)
 80063f6:	f7fd fcaa 	bl	8003d4e <HAL_UART_Transmit>
}
 80063fa:	bf00      	nop
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	200007b8 	.word	0x200007b8

08006408 <map>:
void fire_task_open();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
 8006414:	603b      	str	r3, [r7, #0]
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	69b9      	ldr	r1, [r7, #24]
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	1a8a      	subs	r2, r1, r2
 8006422:	fb02 f203 	mul.w	r2, r2, r3
 8006426:	6879      	ldr	r1, [r7, #4]
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	1acb      	subs	r3, r1, r3
 800642c:	fb92 f2f3 	sdiv	r2, r2, r3
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	4413      	add	r3, r2
}
 8006434:	4618      	mov	r0, r3
 8006436:	3714      	adds	r7, #20
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006440:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006444:	b084      	sub	sp, #16
 8006446:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006448:	f7fa fd8e 	bl	8000f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800644c:	f000 f986 	bl	800675c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006450:	f7ff fe9e 	bl	8006190 <MX_GPIO_Init>
  MX_CAN1_Init();
 8006454:	f7ff fd42 	bl	8005edc <MX_CAN1_Init>
  MX_CAN2_Init();
 8006458:	f7ff fd76 	bl	8005f48 <MX_CAN2_Init>
  MX_SPI5_Init();
 800645c:	f002 fac4 	bl	80089e8 <MX_SPI5_Init>
  MX_TIM1_Init();
 8006460:	f002 fcac 	bl	8008dbc <MX_TIM1_Init>
  MX_TIM6_Init();
 8006464:	f002 fd9e 	bl	8008fa4 <MX_TIM6_Init>
  MX_TIM12_Init();
 8006468:	f002 fe54 	bl	8009114 <MX_TIM12_Init>
  MX_UART7_Init();
 800646c:	f002 ffea 	bl	8009444 <MX_UART7_Init>
  MX_UART8_Init();
 8006470:	f003 f812 	bl	8009498 <MX_UART8_Init>
  MX_USART1_UART_Init();
 8006474:	f003 f83a 	bl	80094ec <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8006478:	f003 f862 	bl	8009540 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 800647c:	f002 fd26 	bl	8008ecc <MX_TIM2_Init>
  MX_TIM8_Init();
 8006480:	f002 fdc2 	bl	8009008 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, rcData, 18);
 8006484:	2212      	movs	r2, #18
 8006486:	4999      	ldr	r1, [pc, #612]	; (80066ec <main+0x2ac>)
 8006488:	4899      	ldr	r0, [pc, #612]	; (80066f0 <main+0x2b0>)
 800648a:	f7fd fcf9 	bl	8003e80 <HAL_UART_Receive_IT>

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 800648e:	2200      	movs	r2, #0
 8006490:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006494:	4897      	ldr	r0, [pc, #604]	; (80066f4 <main+0x2b4>)
 8006496:	f7fb ff4f 	bl	8002338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, 1);
 800649a:	2201      	movs	r2, #1
 800649c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80064a0:	4895      	ldr	r0, [pc, #596]	; (80066f8 <main+0x2b8>)
 80064a2:	f7fb ff49 	bl	8002338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 1);
 80064a6:	2201      	movs	r2, #1
 80064a8:	2102      	movs	r1, #2
 80064aa:	4894      	ldr	r0, [pc, #592]	; (80066fc <main+0x2bc>)
 80064ac:	f7fb ff44 	bl	8002338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 80064b0:	2201      	movs	r2, #1
 80064b2:	2104      	movs	r1, #4
 80064b4:	4891      	ldr	r0, [pc, #580]	; (80066fc <main+0x2bc>)
 80064b6:	f7fb ff3f 	bl	8002338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 80064ba:	2201      	movs	r2, #1
 80064bc:	2108      	movs	r1, #8
 80064be:	488f      	ldr	r0, [pc, #572]	; (80066fc <main+0x2bc>)
 80064c0:	f7fb ff3a 	bl	8002338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, 1);
 80064c4:	2201      	movs	r2, #1
 80064c6:	2110      	movs	r1, #16
 80064c8:	488c      	ldr	r0, [pc, #560]	; (80066fc <main+0x2bc>)
 80064ca:	f7fb ff35 	bl	8002338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, 1);
 80064ce:	2201      	movs	r2, #1
 80064d0:	2120      	movs	r1, #32
 80064d2:	488a      	ldr	r0, [pc, #552]	; (80066fc <main+0x2bc>)
 80064d4:	f7fb ff30 	bl	8002338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, 1);
 80064d8:	2201      	movs	r2, #1
 80064da:	2140      	movs	r1, #64	; 0x40
 80064dc:	4887      	ldr	r0, [pc, #540]	; (80066fc <main+0x2bc>)
 80064de:	f7fb ff2b 	bl	8002338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, 1);
 80064e2:	2201      	movs	r2, #1
 80064e4:	2180      	movs	r1, #128	; 0x80
 80064e6:	4885      	ldr	r0, [pc, #532]	; (80066fc <main+0x2bc>)
 80064e8:	f7fb ff26 	bl	8002338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8, 1);
 80064ec:	2201      	movs	r2, #1
 80064ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80064f2:	4882      	ldr	r0, [pc, #520]	; (80066fc <main+0x2bc>)
 80064f4:	f7fb ff20 	bl	8002338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 80064f8:	2200      	movs	r2, #0
 80064fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80064fe:	4880      	ldr	r0, [pc, #512]	; (8006700 <main+0x2c0>)
 8006500:	f7fb ff1a 	bl	8002338 <HAL_GPIO_WritePin>
  sConfigOC.Pulse = map(90,0,180,500,2500);
 8006504:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800650e:	22b4      	movs	r2, #180	; 0xb4
 8006510:	2100      	movs	r1, #0
 8006512:	205a      	movs	r0, #90	; 0x5a
 8006514:	f7ff ff78 	bl	8006408 <map>
 8006518:	4603      	mov	r3, r0
 800651a:	461a      	mov	r2, r3
 800651c:	4b79      	ldr	r3, [pc, #484]	; (8006704 <main+0x2c4>)
 800651e:	605a      	str	r2, [r3, #4]
  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8006520:	2200      	movs	r2, #0
 8006522:	4978      	ldr	r1, [pc, #480]	; (8006704 <main+0x2c4>)
 8006524:	4878      	ldr	r0, [pc, #480]	; (8006708 <main+0x2c8>)
 8006526:	f7fc ffb7 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800652a:	2100      	movs	r1, #0
 800652c:	4876      	ldr	r0, [pc, #472]	; (8006708 <main+0x2c8>)
 800652e:	f7fc fe6d 	bl	800320c <HAL_TIM_PWM_Start>
  sConfigOC.Pulse = map(90,0,180,500,2500);
 8006532:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800653c:	22b4      	movs	r2, #180	; 0xb4
 800653e:	2100      	movs	r1, #0
 8006540:	205a      	movs	r0, #90	; 0x5a
 8006542:	f7ff ff61 	bl	8006408 <map>
 8006546:	4603      	mov	r3, r0
 8006548:	461a      	mov	r2, r3
 800654a:	4b6e      	ldr	r3, [pc, #440]	; (8006704 <main+0x2c4>)
 800654c:	605a      	str	r2, [r3, #4]
  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 800654e:	2204      	movs	r2, #4
 8006550:	496c      	ldr	r1, [pc, #432]	; (8006704 <main+0x2c4>)
 8006552:	486d      	ldr	r0, [pc, #436]	; (8006708 <main+0x2c8>)
 8006554:	f7fc ffa0 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8006558:	2104      	movs	r1, #4
 800655a:	486b      	ldr	r0, [pc, #428]	; (8006708 <main+0x2c8>)
 800655c:	f7fc fe56 	bl	800320c <HAL_TIM_PWM_Start>
  sConfigOC.Pulse = map(145,0,180,500,2500);
 8006560:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800656a:	22b4      	movs	r2, #180	; 0xb4
 800656c:	2100      	movs	r1, #0
 800656e:	2091      	movs	r0, #145	; 0x91
 8006570:	f7ff ff4a 	bl	8006408 <map>
 8006574:	4603      	mov	r3, r0
 8006576:	461a      	mov	r2, r3
 8006578:	4b62      	ldr	r3, [pc, #392]	; (8006704 <main+0x2c4>)
 800657a:	605a      	str	r2, [r3, #4]
  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 800657c:	2208      	movs	r2, #8
 800657e:	4961      	ldr	r1, [pc, #388]	; (8006704 <main+0x2c4>)
 8006580:	4861      	ldr	r0, [pc, #388]	; (8006708 <main+0x2c8>)
 8006582:	f7fc ff89 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8006586:	2108      	movs	r1, #8
 8006588:	485f      	ldr	r0, [pc, #380]	; (8006708 <main+0x2c8>)
 800658a:	f7fc fe3f 	bl	800320c <HAL_TIM_PWM_Start>
  sConfigOC.Pulse = map(145,0,180,500,2500);
 800658e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8006592:	9300      	str	r3, [sp, #0]
 8006594:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006598:	22b4      	movs	r2, #180	; 0xb4
 800659a:	2100      	movs	r1, #0
 800659c:	2091      	movs	r0, #145	; 0x91
 800659e:	f7ff ff33 	bl	8006408 <map>
 80065a2:	4603      	mov	r3, r0
 80065a4:	461a      	mov	r2, r3
 80065a6:	4b57      	ldr	r3, [pc, #348]	; (8006704 <main+0x2c4>)
 80065a8:	605a      	str	r2, [r3, #4]
  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4);
 80065aa:	220c      	movs	r2, #12
 80065ac:	4955      	ldr	r1, [pc, #340]	; (8006704 <main+0x2c4>)
 80065ae:	4856      	ldr	r0, [pc, #344]	; (8006708 <main+0x2c8>)
 80065b0:	f7fc ff72 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80065b4:	210c      	movs	r1, #12
 80065b6:	4854      	ldr	r0, [pc, #336]	; (8006708 <main+0x2c8>)
 80065b8:	f7fc fe28 	bl	800320c <HAL_TIM_PWM_Start>

  mpu_device_init();
 80065bc:	f7fe fc54 	bl	8004e68 <mpu_device_init>
  mpu_offset_call();
 80065c0:	f7fe fcb6 	bl	8004f30 <mpu_offset_call>
  init_quaternion();
 80065c4:	f7fe fd8e 	bl	80050e4 <init_quaternion>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); // friction wheel
 80065c8:	2100      	movs	r1, #0
 80065ca:	4850      	ldr	r0, [pc, #320]	; (800670c <main+0x2cc>)
 80065cc:	f7fc fe1e 	bl	800320c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80065d0:	2104      	movs	r1, #4
 80065d2:	484e      	ldr	r0, [pc, #312]	; (800670c <main+0x2cc>)
 80065d4:	f7fc fe1a 	bl	800320c <HAL_TIM_PWM_Start>

  initFriction();
 80065d8:	f001 f91e 	bl	8007818 <initFriction>
  initPID();
 80065dc:	f001 f89e 	bl	800771c <initPID>
  initLoadPID();
 80065e0:	f001 f95e 	bl	80078a0 <initLoadPID>
  initCanFilter();
 80065e4:	f7ff fda6 	bl	8006134 <initCanFilter>
  initMecanum();
 80065e8:	f001 f8f6 	bl	80077d8 <initMecanum>
  HAL_TIM_Base_Start_IT(&htim6);
 80065ec:	4848      	ldr	r0, [pc, #288]	; (8006710 <main+0x2d0>)
 80065ee:	f7fc fdbe 	bl	800316e <HAL_TIM_Base_Start_IT>
  setbuf(stdout, NULL);
 80065f2:	4b48      	ldr	r3, [pc, #288]	; (8006714 <main+0x2d4>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	2100      	movs	r1, #0
 80065fa:	4618      	mov	r0, r3
 80065fc:	f003 fe04 	bl	800a208 <setbuf>
  HAL_CAN_Start(&hcan1);
 8006600:	4845      	ldr	r0, [pc, #276]	; (8006718 <main+0x2d8>)
 8006602:	f7fa ff21 	bl	8001448 <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 8006606:	4845      	ldr	r0, [pc, #276]	; (800671c <main+0x2dc>)
 8006608:	f7fa ff1e 	bl	8001448 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800660c:	2102      	movs	r1, #2
 800660e:	4842      	ldr	r0, [pc, #264]	; (8006718 <main+0x2d8>)
 8006610:	f7fb f94c 	bl	80018ac <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8006614:	2102      	movs	r1, #2
 8006616:	4841      	ldr	r0, [pc, #260]	; (800671c <main+0x2dc>)
 8006618:	f7fb f948 	bl	80018ac <HAL_CAN_ActivateNotification>
  HAL_GPIO_WritePin(POWER_OUT1_GPIO_Port, POWER_OUT1_Pin, 1);
 800661c:	2201      	movs	r2, #1
 800661e:	2104      	movs	r1, #4
 8006620:	483f      	ldr	r0, [pc, #252]	; (8006720 <main+0x2e0>)
 8006622:	f7fb fe89 	bl	8002338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(POWER_OUT2_GPIO_Port, POWER_OUT2_Pin, 1);
 8006626:	2201      	movs	r2, #1
 8006628:	2108      	movs	r1, #8
 800662a:	483d      	ldr	r0, [pc, #244]	; (8006720 <main+0x2e0>)
 800662c:	f7fb fe84 	bl	8002338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(POWER_OUT3_GPIO_Port, POWER_OUT3_Pin, 1);
 8006630:	2201      	movs	r2, #1
 8006632:	2110      	movs	r1, #16
 8006634:	483a      	ldr	r0, [pc, #232]	; (8006720 <main+0x2e0>)
 8006636:	f7fb fe7f 	bl	8002338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(POWER_OUT4_GPIO_Port, POWER_OUT4_Pin, 1);
 800663a:	2201      	movs	r2, #1
 800663c:	2120      	movs	r1, #32
 800663e:	4838      	ldr	r0, [pc, #224]	; (8006720 <main+0x2e0>)
 8006640:	f7fb fe7a 	bl	8002338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 8006644:	2201      	movs	r2, #1
 8006646:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800664a:	482a      	ldr	r0, [pc, #168]	; (80066f4 <main+0x2b4>)
 800664c:	f7fb fe74 	bl	8002338 <HAL_GPIO_WritePin>

  IMU_pich_set=imu.pit;
 8006650:	4b34      	ldr	r3, [pc, #208]	; (8006724 <main+0x2e4>)
 8006652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006654:	4a34      	ldr	r2, [pc, #208]	; (8006728 <main+0x2e8>)
 8006656:	6013      	str	r3, [r2, #0]
  IMU_yaw_set=imu.yaw;
 8006658:	4b32      	ldr	r3, [pc, #200]	; (8006724 <main+0x2e4>)
 800665a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665c:	4a33      	ldr	r2, [pc, #204]	; (800672c <main+0x2ec>)
 800665e:	6013      	str	r3, [r2, #0]
  IMU_rol_set=imu.rol;
 8006660:	4b30      	ldr	r3, [pc, #192]	; (8006724 <main+0x2e4>)
 8006662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006664:	4a32      	ldr	r2, [pc, #200]	; (8006730 <main+0x2f0>)
 8006666:	6013      	str	r3, [r2, #0]
  PC_mouse_x=0;
 8006668:	4b32      	ldr	r3, [pc, #200]	; (8006734 <main+0x2f4>)
 800666a:	2200      	movs	r2, #0
 800666c:	601a      	str	r2, [r3, #0]
  PC_mouse_y=0;
 800666e:	4b32      	ldr	r3, [pc, #200]	; (8006738 <main+0x2f8>)
 8006670:	2200      	movs	r2, #0
 8006672:	601a      	str	r2, [r3, #0]

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2)==1){
 8006674:	2104      	movs	r1, #4
 8006676:	4831      	ldr	r0, [pc, #196]	; (800673c <main+0x2fc>)
 8006678:	f7fb fe46 	bl	8002308 <HAL_GPIO_ReadPin>
 800667c:	4603      	mov	r3, r0
 800667e:	2b01      	cmp	r3, #1
 8006680:	d10b      	bne.n	800669a <main+0x25a>
		  IMU_pich_set=imu.pit;
 8006682:	4b28      	ldr	r3, [pc, #160]	; (8006724 <main+0x2e4>)
 8006684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006686:	4a28      	ldr	r2, [pc, #160]	; (8006728 <main+0x2e8>)
 8006688:	6013      	str	r3, [r2, #0]
		  IMU_yaw_set=imu.yaw;
 800668a:	4b26      	ldr	r3, [pc, #152]	; (8006724 <main+0x2e4>)
 800668c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668e:	4a27      	ldr	r2, [pc, #156]	; (800672c <main+0x2ec>)
 8006690:	6013      	str	r3, [r2, #0]
		  IMU_rol_set=imu.rol;
 8006692:	4b24      	ldr	r3, [pc, #144]	; (8006724 <main+0x2e4>)
 8006694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006696:	4a26      	ldr	r2, [pc, #152]	; (8006730 <main+0x2f0>)
 8006698:	6013      	str	r3, [r2, #0]
	  }

	   printf(" Roll:%8.3lf  Pitch:%8.3lf  Yaw:%8.3lf", IMU_rol, IMU_pich, IMU_yaw);
 800669a:	4b29      	ldr	r3, [pc, #164]	; (8006740 <main+0x300>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4618      	mov	r0, r3
 80066a0:	f7f9 ff62 	bl	8000568 <__aeabi_f2d>
 80066a4:	4680      	mov	r8, r0
 80066a6:	4689      	mov	r9, r1
 80066a8:	4b26      	ldr	r3, [pc, #152]	; (8006744 <main+0x304>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7f9 ff5b 	bl	8000568 <__aeabi_f2d>
 80066b2:	4604      	mov	r4, r0
 80066b4:	460d      	mov	r5, r1
 80066b6:	4b24      	ldr	r3, [pc, #144]	; (8006748 <main+0x308>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7f9 ff54 	bl	8000568 <__aeabi_f2d>
 80066c0:	4602      	mov	r2, r0
 80066c2:	460b      	mov	r3, r1
 80066c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80066c8:	e9cd 4500 	strd	r4, r5, [sp]
 80066cc:	4642      	mov	r2, r8
 80066ce:	464b      	mov	r3, r9
 80066d0:	481e      	ldr	r0, [pc, #120]	; (800674c <main+0x30c>)
 80066d2:	f003 fd1d 	bl	800a110 <iprintf>
	  //printf("ch1=%d ch2=%d ch3=%d ch4=%d ch5=%d sw1=%d sw2=%d m_x=%d m_y=%d m_z=%d m_l=%d m_r=%d W=%d S=%d A=%d D=%d Q=%d E=%d Shift=%d Ctrl=%d"
	  //	 ,rc.ch1,rc.ch2,rc.ch3,rc.ch4,rc.ch5,rc.sw1,rc.sw2,rc.mouse_x, rc.mouse_y, rc.mouse_z,rc.mouse_press_l,rc.mouse_press_r
	//		 ,rc.key_W,rc.key_S,rc.key_A,rc.key_D,rc.key_Q,rc.key_E,rc.key_Shift,rc.key_Ctrl);
	  //printf("PC_mouse_x=%d PC_mouse_y=%d",PC_mouse_x,PC_mouse_y);
	  //printf("M0=%d M1=%d M2=%d M3=%d",wheelFdb[0].rpm,wheelFdb[1].rpm,wheelFdb[2].rpm,wheelFdb[3].rpm);
	  printf(" cnt_tim_fire_task=%d",cnt_tim_fire_task);
 80066d6:	4b1e      	ldr	r3, [pc, #120]	; (8006750 <main+0x310>)
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	4619      	mov	r1, r3
 80066dc:	481d      	ldr	r0, [pc, #116]	; (8006754 <main+0x314>)
 80066de:	f003 fd17 	bl	800a110 <iprintf>
	   //printf(" ch5=%d vw=%f cnt=%d shift=%d",rc.ch5,mecanum.speed.vw,cnt_tim_omega,rc.key_Shift);
	  //printf(" target_yaw=%d angle=%f",target_yaw,(float)((gimbalYawFdb.angle-4096.0)/8191.0*360.0));
	  printf("\r\n");
 80066e2:	481d      	ldr	r0, [pc, #116]	; (8006758 <main+0x318>)
 80066e4:	f003 fd88 	bl	800a1f8 <puts>
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2)==1){
 80066e8:	e7c4      	b.n	8006674 <main+0x234>
 80066ea:	bf00      	nop
 80066ec:	200005dc 	.word	0x200005dc
 80066f0:	200007f8 	.word	0x200007f8
 80066f4:	40021000 	.word	0x40021000
 80066f8:	40021400 	.word	0x40021400
 80066fc:	40021800 	.word	0x40021800
 8006700:	40020c00 	.word	0x40020c00
 8006704:	2000055c 	.word	0x2000055c
 8006708:	20000738 	.word	0x20000738
 800670c:	20000678 	.word	0x20000678
 8006710:	200006b8 	.word	0x200006b8
 8006714:	20000020 	.word	0x20000020
 8006718:	2000031c 	.word	0x2000031c
 800671c:	200002f4 	.word	0x200002f4
 8006720:	40021c00 	.word	0x40021c00
 8006724:	20000244 	.word	0x20000244
 8006728:	20000378 	.word	0x20000378
 800672c:	200005b8 	.word	0x200005b8
 8006730:	2000037c 	.word	0x2000037c
 8006734:	200003b0 	.word	0x200003b0
 8006738:	2000044c 	.word	0x2000044c
 800673c:	40020400 	.word	0x40020400
 8006740:	200003c4 	.word	0x200003c4
 8006744:	200005c8 	.word	0x200005c8
 8006748:	20000364 	.word	0x20000364
 800674c:	0800ccf0 	.word	0x0800ccf0
 8006750:	200005b4 	.word	0x200005b4
 8006754:	0800cd18 	.word	0x0800cd18
 8006758:	0800cd30 	.word	0x0800cd30

0800675c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b094      	sub	sp, #80	; 0x50
 8006760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006762:	f107 0320 	add.w	r3, r7, #32
 8006766:	2230      	movs	r2, #48	; 0x30
 8006768:	2100      	movs	r1, #0
 800676a:	4618      	mov	r0, r3
 800676c:	f003 f86b 	bl	8009846 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006770:	f107 030c 	add.w	r3, r7, #12
 8006774:	2200      	movs	r2, #0
 8006776:	601a      	str	r2, [r3, #0]
 8006778:	605a      	str	r2, [r3, #4]
 800677a:	609a      	str	r2, [r3, #8]
 800677c:	60da      	str	r2, [r3, #12]
 800677e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006780:	2300      	movs	r3, #0
 8006782:	60bb      	str	r3, [r7, #8]
 8006784:	4b28      	ldr	r3, [pc, #160]	; (8006828 <SystemClock_Config+0xcc>)
 8006786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006788:	4a27      	ldr	r2, [pc, #156]	; (8006828 <SystemClock_Config+0xcc>)
 800678a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800678e:	6413      	str	r3, [r2, #64]	; 0x40
 8006790:	4b25      	ldr	r3, [pc, #148]	; (8006828 <SystemClock_Config+0xcc>)
 8006792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006798:	60bb      	str	r3, [r7, #8]
 800679a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800679c:	2300      	movs	r3, #0
 800679e:	607b      	str	r3, [r7, #4]
 80067a0:	4b22      	ldr	r3, [pc, #136]	; (800682c <SystemClock_Config+0xd0>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a21      	ldr	r2, [pc, #132]	; (800682c <SystemClock_Config+0xd0>)
 80067a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067aa:	6013      	str	r3, [r2, #0]
 80067ac:	4b1f      	ldr	r3, [pc, #124]	; (800682c <SystemClock_Config+0xd0>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80067b4:	607b      	str	r3, [r7, #4]
 80067b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80067b8:	2301      	movs	r3, #1
 80067ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80067bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80067c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80067c2:	2302      	movs	r3, #2
 80067c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80067c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80067ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80067cc:	2306      	movs	r3, #6
 80067ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80067d0:	23a8      	movs	r3, #168	; 0xa8
 80067d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80067d4:	2302      	movs	r3, #2
 80067d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80067d8:	2304      	movs	r3, #4
 80067da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80067dc:	f107 0320 	add.w	r3, r7, #32
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7fb fddd 	bl	80023a0 <HAL_RCC_OscConfig>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d001      	beq.n	80067f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80067ec:	f001 fd80 	bl	80082f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80067f0:	230f      	movs	r3, #15
 80067f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80067f4:	2302      	movs	r3, #2
 80067f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80067f8:	2300      	movs	r3, #0
 80067fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80067fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006800:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006806:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006808:	f107 030c 	add.w	r3, r7, #12
 800680c:	2105      	movs	r1, #5
 800680e:	4618      	mov	r0, r3
 8006810:	f7fc f808 	bl	8002824 <HAL_RCC_ClockConfig>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800681a:	f001 fd69 	bl	80082f0 <Error_Handler>
  }
}
 800681e:	bf00      	nop
 8006820:	3750      	adds	r7, #80	; 0x50
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	40023800 	.word	0x40023800
 800682c:	40007000 	.word	0x40007000

08006830 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
	static long unsigned int c = 0;
	c++;
 8006838:	4b17      	ldr	r3, [pc, #92]	; (8006898 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	3301      	adds	r3, #1
 800683e:	4a16      	ldr	r2, [pc, #88]	; (8006898 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8006840:	6013      	str	r3, [r2, #0]
	if (htim->Instance == htim6.Instance) {//500Hz
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	4b15      	ldr	r3, [pc, #84]	; (800689c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	429a      	cmp	r2, r3
 800684c:	d120      	bne.n	8006890 <HAL_TIM_PeriodElapsedCallback+0x60>
		timerTask();
 800684e:	f001 f853 	bl	80078f8 <timerTask>
		if(cnt_tim>20){
 8006852:	4b13      	ldr	r3, [pc, #76]	; (80068a0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	2b14      	cmp	r3, #20
 8006858:	d907      	bls.n	800686a <HAL_TIM_PeriodElapsedCallback+0x3a>
		HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 800685a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800685e:	4811      	ldr	r0, [pc, #68]	; (80068a4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8006860:	f7fb fd83 	bl	800236a <HAL_GPIO_TogglePin>
		cnt_tim=0;
 8006864:	4b0e      	ldr	r3, [pc, #56]	; (80068a0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8006866:	2200      	movs	r2, #0
 8006868:	701a      	strb	r2, [r3, #0]
		}
		cnt_tim++;
 800686a:	4b0d      	ldr	r3, [pc, #52]	; (80068a0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	3301      	adds	r3, #1
 8006870:	b2da      	uxtb	r2, r3
 8006872:	4b0b      	ldr	r3, [pc, #44]	; (80068a0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8006874:	701a      	strb	r2, [r3, #0]

		RC_time++;
 8006876:	4b0c      	ldr	r3, [pc, #48]	; (80068a8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3301      	adds	r3, #1
 800687c:	4a0a      	ldr	r2, [pc, #40]	; (80068a8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800687e:	6013      	str	r3, [r2, #0]
		if(RC_time>10000){
 8006880:	4b09      	ldr	r3, [pc, #36]	; (80068a8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f242 7210 	movw	r2, #10000	; 0x2710
 8006888:	4293      	cmp	r3, r2
 800688a:	d901      	bls.n	8006890 <HAL_TIM_PeriodElapsedCallback+0x60>
			NVIC_SystemReset();
 800688c:	f7ff fd96 	bl	80063bc <__NVIC_SystemReset>
		}
	}
}
 8006890:	bf00      	nop
 8006892:	3708      	adds	r7, #8
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	20000280 	.word	0x20000280
 800689c:	200006b8 	.word	0x200006b8
 80068a0:	200005b6 	.word	0x200005b6
 80068a4:	40021400 	.word	0x40021400
 80068a8:	200003bc 	.word	0x200003bc

080068ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == huart1.Instance) {	//Propo-receive Interrupts
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	4b9f      	ldr	r3, [pc, #636]	; (8006b38 <HAL_UART_RxCpltCallback+0x28c>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	429a      	cmp	r2, r3
 80068be:	f040 81a6 	bne.w	8006c0e <HAL_UART_RxCpltCallback+0x362>
		HAL_UART_Receive_IT(&huart1, rcData, 18);
 80068c2:	2212      	movs	r2, #18
 80068c4:	499d      	ldr	r1, [pc, #628]	; (8006b3c <HAL_UART_RxCpltCallback+0x290>)
 80068c6:	489c      	ldr	r0, [pc, #624]	; (8006b38 <HAL_UART_RxCpltCallback+0x28c>)
 80068c8:	f7fd fada 	bl	8003e80 <HAL_UART_Receive_IT>
		HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_1);
 80068cc:	2102      	movs	r1, #2
 80068ce:	489c      	ldr	r0, [pc, #624]	; (8006b40 <HAL_UART_RxCpltCallback+0x294>)
 80068d0:	f7fb fd4b 	bl	800236a <HAL_GPIO_TogglePin>
		rc.ch1 = (((rcData[1] & 0x07) << 8) | rcData[0]);
 80068d4:	4b99      	ldr	r3, [pc, #612]	; (8006b3c <HAL_UART_RxCpltCallback+0x290>)
 80068d6:	785b      	ldrb	r3, [r3, #1]
 80068d8:	021b      	lsls	r3, r3, #8
 80068da:	b21b      	sxth	r3, r3
 80068dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068e0:	b21a      	sxth	r2, r3
 80068e2:	4b96      	ldr	r3, [pc, #600]	; (8006b3c <HAL_UART_RxCpltCallback+0x290>)
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	b21b      	sxth	r3, r3
 80068e8:	4313      	orrs	r3, r2
 80068ea:	b21a      	sxth	r2, r3
 80068ec:	4b95      	ldr	r3, [pc, #596]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 80068ee:	801a      	strh	r2, [r3, #0]
		rc.ch1 -= 1024;
 80068f0:	4b94      	ldr	r3, [pc, #592]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 80068f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	b21a      	sxth	r2, r3
 8006900:	4b90      	ldr	r3, [pc, #576]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 8006902:	801a      	strh	r2, [r3, #0]
		rc.ch2 = (((rcData[2] & 0x3F) << 5) | (rcData[1] >> 3));
 8006904:	4b8d      	ldr	r3, [pc, #564]	; (8006b3c <HAL_UART_RxCpltCallback+0x290>)
 8006906:	789b      	ldrb	r3, [r3, #2]
 8006908:	015b      	lsls	r3, r3, #5
 800690a:	b21b      	sxth	r3, r3
 800690c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8006910:	b21a      	sxth	r2, r3
 8006912:	4b8a      	ldr	r3, [pc, #552]	; (8006b3c <HAL_UART_RxCpltCallback+0x290>)
 8006914:	785b      	ldrb	r3, [r3, #1]
 8006916:	08db      	lsrs	r3, r3, #3
 8006918:	b2db      	uxtb	r3, r3
 800691a:	b21b      	sxth	r3, r3
 800691c:	4313      	orrs	r3, r2
 800691e:	b21a      	sxth	r2, r3
 8006920:	4b88      	ldr	r3, [pc, #544]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 8006922:	805a      	strh	r2, [r3, #2]
		rc.ch2 -= 1024;
 8006924:	4b87      	ldr	r3, [pc, #540]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 8006926:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800692a:	b29b      	uxth	r3, r3
 800692c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006930:	b29b      	uxth	r3, r3
 8006932:	b21a      	sxth	r2, r3
 8006934:	4b83      	ldr	r3, [pc, #524]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 8006936:	805a      	strh	r2, [r3, #2]
		rc.ch3 = (((rcData[4] & 0x01) << 10) | (rcData[3] << 2) | (rcData[2] >> 6));
 8006938:	4b80      	ldr	r3, [pc, #512]	; (8006b3c <HAL_UART_RxCpltCallback+0x290>)
 800693a:	791b      	ldrb	r3, [r3, #4]
 800693c:	029b      	lsls	r3, r3, #10
 800693e:	b21b      	sxth	r3, r3
 8006940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006944:	b21a      	sxth	r2, r3
 8006946:	4b7d      	ldr	r3, [pc, #500]	; (8006b3c <HAL_UART_RxCpltCallback+0x290>)
 8006948:	78db      	ldrb	r3, [r3, #3]
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	b21b      	sxth	r3, r3
 800694e:	4313      	orrs	r3, r2
 8006950:	b21a      	sxth	r2, r3
 8006952:	4b7a      	ldr	r3, [pc, #488]	; (8006b3c <HAL_UART_RxCpltCallback+0x290>)
 8006954:	789b      	ldrb	r3, [r3, #2]
 8006956:	099b      	lsrs	r3, r3, #6
 8006958:	b2db      	uxtb	r3, r3
 800695a:	b21b      	sxth	r3, r3
 800695c:	4313      	orrs	r3, r2
 800695e:	b21a      	sxth	r2, r3
 8006960:	4b78      	ldr	r3, [pc, #480]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 8006962:	809a      	strh	r2, [r3, #4]
		rc.ch3 -= 1024;
 8006964:	4b77      	ldr	r3, [pc, #476]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 8006966:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800696a:	b29b      	uxth	r3, r3
 800696c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006970:	b29b      	uxth	r3, r3
 8006972:	b21a      	sxth	r2, r3
 8006974:	4b73      	ldr	r3, [pc, #460]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 8006976:	809a      	strh	r2, [r3, #4]
		rc.ch4 = (((rcData[5] & 0x0F) << 7) | (rcData[4] >> 1));
 8006978:	4b70      	ldr	r3, [pc, #448]	; (8006b3c <HAL_UART_RxCpltCallback+0x290>)
 800697a:	795b      	ldrb	r3, [r3, #5]
 800697c:	01db      	lsls	r3, r3, #7
 800697e:	b21b      	sxth	r3, r3
 8006980:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 8006984:	b21a      	sxth	r2, r3
 8006986:	4b6d      	ldr	r3, [pc, #436]	; (8006b3c <HAL_UART_RxCpltCallback+0x290>)
 8006988:	791b      	ldrb	r3, [r3, #4]
 800698a:	085b      	lsrs	r3, r3, #1
 800698c:	b2db      	uxtb	r3, r3
 800698e:	b21b      	sxth	r3, r3
 8006990:	4313      	orrs	r3, r2
 8006992:	b21a      	sxth	r2, r3
 8006994:	4b6b      	ldr	r3, [pc, #428]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 8006996:	80da      	strh	r2, [r3, #6]
		rc.ch4 -= 1024;
 8006998:	4b6a      	ldr	r3, [pc, #424]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 800699a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800699e:	b29b      	uxth	r3, r3
 80069a0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	b21a      	sxth	r2, r3
 80069a8:	4b66      	ldr	r3, [pc, #408]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 80069aa:	80da      	strh	r2, [r3, #6]
		rc.ch5 = (rcData[17]<<8) | rcData[16];
 80069ac:	4b63      	ldr	r3, [pc, #396]	; (8006b3c <HAL_UART_RxCpltCallback+0x290>)
 80069ae:	7c5b      	ldrb	r3, [r3, #17]
 80069b0:	021b      	lsls	r3, r3, #8
 80069b2:	b21a      	sxth	r2, r3
 80069b4:	4b61      	ldr	r3, [pc, #388]	; (8006b3c <HAL_UART_RxCpltCallback+0x290>)
 80069b6:	7c1b      	ldrb	r3, [r3, #16]
 80069b8:	b21b      	sxth	r3, r3
 80069ba:	4313      	orrs	r3, r2
 80069bc:	b21a      	sxth	r2, r3
 80069be:	4b61      	ldr	r3, [pc, #388]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 80069c0:	811a      	strh	r2, [r3, #8]
		rc.ch5 = 1024-rc.ch5;
 80069c2:	4b60      	ldr	r3, [pc, #384]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 80069c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	b21a      	sxth	r2, r3
 80069d2:	4b5c      	ldr	r3, [pc, #368]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 80069d4:	811a      	strh	r2, [r3, #8]
		rc.sw1 = ((rcData[5] & 0x30) >> 4);
 80069d6:	4b59      	ldr	r3, [pc, #356]	; (8006b3c <HAL_UART_RxCpltCallback+0x290>)
 80069d8:	795b      	ldrb	r3, [r3, #5]
 80069da:	111b      	asrs	r3, r3, #4
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	f003 0303 	and.w	r3, r3, #3
 80069e2:	b2da      	uxtb	r2, r3
 80069e4:	4b57      	ldr	r3, [pc, #348]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 80069e6:	729a      	strb	r2, [r3, #10]
		rc.sw2 = ((rcData[5] & 0xC0) >> 6);
 80069e8:	4b54      	ldr	r3, [pc, #336]	; (8006b3c <HAL_UART_RxCpltCallback+0x290>)
 80069ea:	795b      	ldrb	r3, [r3, #5]
 80069ec:	099b      	lsrs	r3, r3, #6
 80069ee:	b2da      	uxtb	r2, r3
 80069f0:	4b54      	ldr	r3, [pc, #336]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 80069f2:	72da      	strb	r2, [r3, #11]
		rc.mouse_x = ((int16_t)rcData[6]) | ((int16_t)rcData[7] << 8);
 80069f4:	4b51      	ldr	r3, [pc, #324]	; (8006b3c <HAL_UART_RxCpltCallback+0x290>)
 80069f6:	799b      	ldrb	r3, [r3, #6]
 80069f8:	b21a      	sxth	r2, r3
 80069fa:	4b50      	ldr	r3, [pc, #320]	; (8006b3c <HAL_UART_RxCpltCallback+0x290>)
 80069fc:	79db      	ldrb	r3, [r3, #7]
 80069fe:	021b      	lsls	r3, r3, #8
 8006a00:	b21b      	sxth	r3, r3
 8006a02:	4313      	orrs	r3, r2
 8006a04:	b21a      	sxth	r2, r3
 8006a06:	4b4f      	ldr	r3, [pc, #316]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 8006a08:	819a      	strh	r2, [r3, #12]
		rc.mouse_y = ((int16_t)rcData[8]) | ((int16_t)rcData[9] << 8);
 8006a0a:	4b4c      	ldr	r3, [pc, #304]	; (8006b3c <HAL_UART_RxCpltCallback+0x290>)
 8006a0c:	7a1b      	ldrb	r3, [r3, #8]
 8006a0e:	b21a      	sxth	r2, r3
 8006a10:	4b4a      	ldr	r3, [pc, #296]	; (8006b3c <HAL_UART_RxCpltCallback+0x290>)
 8006a12:	7a5b      	ldrb	r3, [r3, #9]
 8006a14:	021b      	lsls	r3, r3, #8
 8006a16:	b21b      	sxth	r3, r3
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	b21a      	sxth	r2, r3
 8006a1c:	4b49      	ldr	r3, [pc, #292]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 8006a1e:	81da      	strh	r2, [r3, #14]
		rc.mouse_z = ((int16_t)rcData[10]) | ((int16_t)rcData[11] << 8);
 8006a20:	4b46      	ldr	r3, [pc, #280]	; (8006b3c <HAL_UART_RxCpltCallback+0x290>)
 8006a22:	7a9b      	ldrb	r3, [r3, #10]
 8006a24:	b21a      	sxth	r2, r3
 8006a26:	4b45      	ldr	r3, [pc, #276]	; (8006b3c <HAL_UART_RxCpltCallback+0x290>)
 8006a28:	7adb      	ldrb	r3, [r3, #11]
 8006a2a:	021b      	lsls	r3, r3, #8
 8006a2c:	b21b      	sxth	r3, r3
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	b21a      	sxth	r2, r3
 8006a32:	4b44      	ldr	r3, [pc, #272]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 8006a34:	821a      	strh	r2, [r3, #16]
		rc.mouse_press_l = rcData[12];
 8006a36:	4b41      	ldr	r3, [pc, #260]	; (8006b3c <HAL_UART_RxCpltCallback+0x290>)
 8006a38:	7b1b      	ldrb	r3, [r3, #12]
 8006a3a:	b21a      	sxth	r2, r3
 8006a3c:	4b41      	ldr	r3, [pc, #260]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 8006a3e:	825a      	strh	r2, [r3, #18]
		rc.mouse_press_r = rcData[13];
 8006a40:	4b3e      	ldr	r3, [pc, #248]	; (8006b3c <HAL_UART_RxCpltCallback+0x290>)
 8006a42:	7b5b      	ldrb	r3, [r3, #13]
 8006a44:	b21a      	sxth	r2, r3
 8006a46:	4b3f      	ldr	r3, [pc, #252]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 8006a48:	829a      	strh	r2, [r3, #20]
		rc.key_v = ((int16_t)rcData[14]);
 8006a4a:	4b3c      	ldr	r3, [pc, #240]	; (8006b3c <HAL_UART_RxCpltCallback+0x290>)
 8006a4c:	7b9b      	ldrb	r3, [r3, #14]
 8006a4e:	b21a      	sxth	r2, r3
 8006a50:	4b3c      	ldr	r3, [pc, #240]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 8006a52:	82da      	strh	r2, [r3, #22]
		rc.key_W =     (0b0000000000000001 & rc.key_v);
 8006a54:	4b3b      	ldr	r3, [pc, #236]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 8006a56:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8006a5a:	b25b      	sxtb	r3, r3
 8006a5c:	f003 0301 	and.w	r3, r3, #1
 8006a60:	b25a      	sxtb	r2, r3
 8006a62:	4b38      	ldr	r3, [pc, #224]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 8006a64:	761a      	strb	r2, [r3, #24]
		rc.key_S =     (0b0000000000000010 & rc.key_v)>>1;
 8006a66:	4b37      	ldr	r3, [pc, #220]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 8006a68:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8006a6c:	105b      	asrs	r3, r3, #1
 8006a6e:	b21b      	sxth	r3, r3
 8006a70:	b25b      	sxtb	r3, r3
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	b25a      	sxtb	r2, r3
 8006a78:	4b32      	ldr	r3, [pc, #200]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 8006a7a:	769a      	strb	r2, [r3, #26]
		rc.key_A =     (0b0000000000000100 & rc.key_v)>>2;
 8006a7c:	4b31      	ldr	r3, [pc, #196]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 8006a7e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8006a82:	109b      	asrs	r3, r3, #2
 8006a84:	b21b      	sxth	r3, r3
 8006a86:	b25b      	sxtb	r3, r3
 8006a88:	f003 0301 	and.w	r3, r3, #1
 8006a8c:	b25a      	sxtb	r2, r3
 8006a8e:	4b2d      	ldr	r3, [pc, #180]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 8006a90:	765a      	strb	r2, [r3, #25]
		rc.key_D =     (0b0000000000001000 & rc.key_v)>>3;
 8006a92:	4b2c      	ldr	r3, [pc, #176]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 8006a94:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8006a98:	10db      	asrs	r3, r3, #3
 8006a9a:	b21b      	sxth	r3, r3
 8006a9c:	b25b      	sxtb	r3, r3
 8006a9e:	f003 0301 	and.w	r3, r3, #1
 8006aa2:	b25a      	sxtb	r2, r3
 8006aa4:	4b27      	ldr	r3, [pc, #156]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 8006aa6:	76da      	strb	r2, [r3, #27]
		rc.key_Shift = (0b0000000000010000 & rc.key_v)>>4;
 8006aa8:	4b26      	ldr	r3, [pc, #152]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 8006aaa:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8006aae:	111b      	asrs	r3, r3, #4
 8006ab0:	b21b      	sxth	r3, r3
 8006ab2:	b25b      	sxtb	r3, r3
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	b25a      	sxtb	r2, r3
 8006aba:	4b22      	ldr	r3, [pc, #136]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 8006abc:	779a      	strb	r2, [r3, #30]
		rc.key_Ctrl =  (0b0000000000100000 & rc.key_v)>>5;
 8006abe:	4b21      	ldr	r3, [pc, #132]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 8006ac0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8006ac4:	115b      	asrs	r3, r3, #5
 8006ac6:	b21b      	sxth	r3, r3
 8006ac8:	b25b      	sxtb	r3, r3
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	b25a      	sxtb	r2, r3
 8006ad0:	4b1c      	ldr	r3, [pc, #112]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 8006ad2:	77da      	strb	r2, [r3, #31]
		rc.key_Q =     (0b0000000001000000 & rc.key_v)>>6;
 8006ad4:	4b1b      	ldr	r3, [pc, #108]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 8006ad6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8006ada:	119b      	asrs	r3, r3, #6
 8006adc:	b21b      	sxth	r3, r3
 8006ade:	b25b      	sxtb	r3, r3
 8006ae0:	f003 0301 	and.w	r3, r3, #1
 8006ae4:	b25a      	sxtb	r2, r3
 8006ae6:	4b17      	ldr	r3, [pc, #92]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 8006ae8:	771a      	strb	r2, [r3, #28]
		rc.key_E =     (0b0000000010000000 & rc.key_v)>>7;
 8006aea:	4b16      	ldr	r3, [pc, #88]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 8006aec:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8006af0:	11db      	asrs	r3, r3, #7
 8006af2:	b21b      	sxth	r3, r3
 8006af4:	b25b      	sxtb	r3, r3
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	b25a      	sxtb	r2, r3
 8006afc:	4b11      	ldr	r3, [pc, #68]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 8006afe:	775a      	strb	r2, [r3, #29]

		if ((abs(rc.ch5) > 660) ||(abs(rc.ch3) > 660) ||(abs(rc.ch4) > 660)){
 8006b00:	4b10      	ldr	r3, [pc, #64]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 8006b02:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	bfb8      	it	lt
 8006b0a:	425b      	neglt	r3, r3
 8006b0c:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8006b10:	dc1b      	bgt.n	8006b4a <HAL_UART_RxCpltCallback+0x29e>
 8006b12:	4b0c      	ldr	r3, [pc, #48]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 8006b14:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	bfb8      	it	lt
 8006b1c:	425b      	neglt	r3, r3
 8006b1e:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8006b22:	dc12      	bgt.n	8006b4a <HAL_UART_RxCpltCallback+0x29e>
 8006b24:	4b07      	ldr	r3, [pc, #28]	; (8006b44 <HAL_UART_RxCpltCallback+0x298>)
 8006b26:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	bfb8      	it	lt
 8006b2e:	425b      	neglt	r3, r3
 8006b30:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8006b34:	e008      	b.n	8006b48 <HAL_UART_RxCpltCallback+0x29c>
 8006b36:	bf00      	nop
 8006b38:	200007f8 	.word	0x200007f8
 8006b3c:	200005dc 	.word	0x200005dc
 8006b40:	40021800 	.word	0x40021800
 8006b44:	20000344 	.word	0x20000344
 8006b48:	dd01      	ble.n	8006b4e <HAL_UART_RxCpltCallback+0x2a2>
					NVIC_SystemReset();
 8006b4a:	f7ff fc37 	bl	80063bc <__NVIC_SystemReset>
		}
		else{
			RC_time=0;
 8006b4e:	4b32      	ldr	r3, [pc, #200]	; (8006c18 <HAL_UART_RxCpltCallback+0x36c>)
 8006b50:	2200      	movs	r2, #0
 8006b52:	601a      	str	r2, [r3, #0]
		}


		if(rc.sw2==2){
 8006b54:	4b31      	ldr	r3, [pc, #196]	; (8006c1c <HAL_UART_RxCpltCallback+0x370>)
 8006b56:	7adb      	ldrb	r3, [r3, #11]
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d106      	bne.n	8006b6a <HAL_UART_RxCpltCallback+0x2be>
			PC_mouse_x=0;
 8006b5c:	4b30      	ldr	r3, [pc, #192]	; (8006c20 <HAL_UART_RxCpltCallback+0x374>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	601a      	str	r2, [r3, #0]
			PC_mouse_y=0;
 8006b62:	4b30      	ldr	r3, [pc, #192]	; (8006c24 <HAL_UART_RxCpltCallback+0x378>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	601a      	str	r2, [r3, #0]
			if(PC_mouse_x < -1*yaw_MAX*yaw_magnification){	PC_mouse_x = -1*yaw_MAX*yaw_magnification;}
			}
		}

	}
}
 8006b68:	e051      	b.n	8006c0e <HAL_UART_RxCpltCallback+0x362>
			if(rc.mouse_press_l==1){
 8006b6a:	4b2c      	ldr	r3, [pc, #176]	; (8006c1c <HAL_UART_RxCpltCallback+0x370>)
 8006b6c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d14c      	bne.n	8006c0e <HAL_UART_RxCpltCallback+0x362>
			PC_mouse_x=PC_mouse_x+rc.mouse_x*(-1);
 8006b74:	4b2a      	ldr	r3, [pc, #168]	; (8006c20 <HAL_UART_RxCpltCallback+0x374>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a28      	ldr	r2, [pc, #160]	; (8006c1c <HAL_UART_RxCpltCallback+0x370>)
 8006b7a:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8006b7e:	1a9b      	subs	r3, r3, r2
 8006b80:	4a27      	ldr	r2, [pc, #156]	; (8006c20 <HAL_UART_RxCpltCallback+0x374>)
 8006b82:	6013      	str	r3, [r2, #0]
			PC_mouse_y=PC_mouse_y+rc.mouse_y;
 8006b84:	4b25      	ldr	r3, [pc, #148]	; (8006c1c <HAL_UART_RxCpltCallback+0x370>)
 8006b86:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	4b25      	ldr	r3, [pc, #148]	; (8006c24 <HAL_UART_RxCpltCallback+0x378>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4413      	add	r3, r2
 8006b92:	4a24      	ldr	r2, [pc, #144]	; (8006c24 <HAL_UART_RxCpltCallback+0x378>)
 8006b94:	6013      	str	r3, [r2, #0]
			if(PC_mouse_y > pich_MAX*pich_magnification){	PC_mouse_y = pich_MAX*pich_magnification;}
 8006b96:	231e      	movs	r3, #30
 8006b98:	2232      	movs	r2, #50	; 0x32
 8006b9a:	fb02 f203 	mul.w	r2, r2, r3
 8006b9e:	4b21      	ldr	r3, [pc, #132]	; (8006c24 <HAL_UART_RxCpltCallback+0x378>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	da05      	bge.n	8006bb2 <HAL_UART_RxCpltCallback+0x306>
 8006ba6:	231e      	movs	r3, #30
 8006ba8:	2232      	movs	r2, #50	; 0x32
 8006baa:	fb02 f303 	mul.w	r3, r2, r3
 8006bae:	4a1d      	ldr	r2, [pc, #116]	; (8006c24 <HAL_UART_RxCpltCallback+0x378>)
 8006bb0:	6013      	str	r3, [r2, #0]
			if(PC_mouse_y < -1*pich_MAX*pich_magnification){PC_mouse_y = -1*pich_MAX*pich_magnification;}
 8006bb2:	231e      	movs	r3, #30
 8006bb4:	425b      	negs	r3, r3
 8006bb6:	2232      	movs	r2, #50	; 0x32
 8006bb8:	fb02 f203 	mul.w	r2, r2, r3
 8006bbc:	4b19      	ldr	r3, [pc, #100]	; (8006c24 <HAL_UART_RxCpltCallback+0x378>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	dd06      	ble.n	8006bd2 <HAL_UART_RxCpltCallback+0x326>
 8006bc4:	231e      	movs	r3, #30
 8006bc6:	425b      	negs	r3, r3
 8006bc8:	2232      	movs	r2, #50	; 0x32
 8006bca:	fb02 f303 	mul.w	r3, r2, r3
 8006bce:	4a15      	ldr	r2, [pc, #84]	; (8006c24 <HAL_UART_RxCpltCallback+0x378>)
 8006bd0:	6013      	str	r3, [r2, #0]
			if(PC_mouse_x > yaw_MAX*yaw_magnification){		PC_mouse_x = yaw_MAX*yaw_magnification;}
 8006bd2:	2346      	movs	r3, #70	; 0x46
 8006bd4:	2214      	movs	r2, #20
 8006bd6:	fb02 f203 	mul.w	r2, r2, r3
 8006bda:	4b11      	ldr	r3, [pc, #68]	; (8006c20 <HAL_UART_RxCpltCallback+0x374>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	da05      	bge.n	8006bee <HAL_UART_RxCpltCallback+0x342>
 8006be2:	2346      	movs	r3, #70	; 0x46
 8006be4:	2214      	movs	r2, #20
 8006be6:	fb02 f303 	mul.w	r3, r2, r3
 8006bea:	4a0d      	ldr	r2, [pc, #52]	; (8006c20 <HAL_UART_RxCpltCallback+0x374>)
 8006bec:	6013      	str	r3, [r2, #0]
			if(PC_mouse_x < -1*yaw_MAX*yaw_magnification){	PC_mouse_x = -1*yaw_MAX*yaw_magnification;}
 8006bee:	2346      	movs	r3, #70	; 0x46
 8006bf0:	425b      	negs	r3, r3
 8006bf2:	2214      	movs	r2, #20
 8006bf4:	fb02 f203 	mul.w	r2, r2, r3
 8006bf8:	4b09      	ldr	r3, [pc, #36]	; (8006c20 <HAL_UART_RxCpltCallback+0x374>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	dd06      	ble.n	8006c0e <HAL_UART_RxCpltCallback+0x362>
 8006c00:	2346      	movs	r3, #70	; 0x46
 8006c02:	425b      	negs	r3, r3
 8006c04:	2214      	movs	r2, #20
 8006c06:	fb02 f303 	mul.w	r3, r2, r3
 8006c0a:	4a05      	ldr	r2, [pc, #20]	; (8006c20 <HAL_UART_RxCpltCallback+0x374>)
 8006c0c:	6013      	str	r3, [r2, #0]
}
 8006c0e:	bf00      	nop
 8006c10:	3708      	adds	r7, #8
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	200003bc 	.word	0x200003bc
 8006c1c:	20000344 	.word	0x20000344
 8006c20:	200003b0 	.word	0x200003b0
 8006c24:	2000044c 	.word	0x2000044c

08006c28 <HAL_CAN_RxFifo0MsgPendingCallback>:

//can fifo0 receive interrupt
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8006c28:	b590      	push	{r4, r7, lr}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
	/* Get RX message */
	if (hcan->Instance == hcan2.Instance) {// can2 bus receive interrupt
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	4b7e      	ldr	r3, [pc, #504]	; (8006e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d17f      	bne.n	8006d3c <HAL_CAN_RxFifo0MsgPendingCallback+0x114>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, canRxData);
 8006c3c:	4b7d      	ldr	r3, [pc, #500]	; (8006e34 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8006c3e:	4a7e      	ldr	r2, [pc, #504]	; (8006e38 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8006c40:	2100      	movs	r1, #0
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7fa fd1f 	bl	8001686 <HAL_CAN_GetRxMessage>
		//check ESC identifier
		int id = canRxHeader.StdId - 513;
 8006c48:	4b7b      	ldr	r3, [pc, #492]	; (8006e38 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8006c50:	60bb      	str	r3, [r7, #8]

		wheelFdb[id].angle = canRxData[0] * 256 + canRxData[1];
 8006c52:	4b78      	ldr	r3, [pc, #480]	; (8006e34 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	021b      	lsls	r3, r3, #8
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	4b75      	ldr	r3, [pc, #468]	; (8006e34 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8006c5e:	785b      	ldrb	r3, [r3, #1]
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	4413      	add	r3, r2
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	b218      	sxth	r0, r3
 8006c68:	4974      	ldr	r1, [pc, #464]	; (8006e3c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8006c6a:	68ba      	ldr	r2, [r7, #8]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	005b      	lsls	r3, r3, #1
 8006c70:	4413      	add	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	440b      	add	r3, r1
 8006c76:	4602      	mov	r2, r0
 8006c78:	801a      	strh	r2, [r3, #0]
		wheelFdb[id].rpm = canRxData[2] * 256 + canRxData[3];
 8006c7a:	4b6e      	ldr	r3, [pc, #440]	; (8006e34 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8006c7c:	789b      	ldrb	r3, [r3, #2]
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	021b      	lsls	r3, r3, #8
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	4b6b      	ldr	r3, [pc, #428]	; (8006e34 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8006c86:	78db      	ldrb	r3, [r3, #3]
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	4413      	add	r3, r2
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	b218      	sxth	r0, r3
 8006c90:	496a      	ldr	r1, [pc, #424]	; (8006e3c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	4613      	mov	r3, r2
 8006c96:	005b      	lsls	r3, r3, #1
 8006c98:	4413      	add	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	440b      	add	r3, r1
 8006c9e:	3302      	adds	r3, #2
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	801a      	strh	r2, [r3, #0]
		wheelFdb[id].torque = canRxData[4] * 256 + canRxData[5];
 8006ca4:	4b63      	ldr	r3, [pc, #396]	; (8006e34 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8006ca6:	791b      	ldrb	r3, [r3, #4]
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	021b      	lsls	r3, r3, #8
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	4b61      	ldr	r3, [pc, #388]	; (8006e34 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8006cb0:	795b      	ldrb	r3, [r3, #5]
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	4413      	add	r3, r2
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	b218      	sxth	r0, r3
 8006cba:	4960      	ldr	r1, [pc, #384]	; (8006e3c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	005b      	lsls	r3, r3, #1
 8006cc2:	4413      	add	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	440b      	add	r3, r1
 8006cc8:	3304      	adds	r3, #4
 8006cca:	4602      	mov	r2, r0
 8006ccc:	801a      	strh	r2, [r3, #0]
		wheelFdb[id].temp = canRxData[6];
 8006cce:	4b59      	ldr	r3, [pc, #356]	; (8006e34 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8006cd0:	799b      	ldrb	r3, [r3, #6]
 8006cd2:	b218      	sxth	r0, r3
 8006cd4:	4959      	ldr	r1, [pc, #356]	; (8006e3c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	005b      	lsls	r3, r3, #1
 8006cdc:	4413      	add	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	440b      	add	r3, r1
 8006ce2:	3306      	adds	r3, #6
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	801a      	strh	r2, [r3, #0]
		wheelFdb[id].omg = 6.28318530718 * (wheelFdb[id].rpm) / 1140.0;
 8006ce8:	4954      	ldr	r1, [pc, #336]	; (8006e3c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	4613      	mov	r3, r2
 8006cee:	005b      	lsls	r3, r3, #1
 8006cf0:	4413      	add	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	440b      	add	r3, r1
 8006cf6:	3302      	adds	r3, #2
 8006cf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7f9 fc21 	bl	8000544 <__aeabi_i2d>
 8006d02:	a347      	add	r3, pc, #284	; (adr r3, 8006e20 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8006d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d08:	f7f9 fc86 	bl	8000618 <__aeabi_dmul>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	460c      	mov	r4, r1
 8006d10:	4618      	mov	r0, r3
 8006d12:	4621      	mov	r1, r4
 8006d14:	a344      	add	r3, pc, #272	; (adr r3, 8006e28 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8006d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1a:	f7f9 fda7 	bl	800086c <__aeabi_ddiv>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	460c      	mov	r4, r1
 8006d22:	4618      	mov	r0, r3
 8006d24:	4621      	mov	r1, r4
 8006d26:	f7f9 ff4f 	bl	8000bc8 <__aeabi_d2f>
 8006d2a:	4944      	ldr	r1, [pc, #272]	; (8006e3c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	005b      	lsls	r3, r3, #1
 8006d32:	4413      	add	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	440b      	add	r3, r1
 8006d38:	3308      	adds	r3, #8
 8006d3a:	6018      	str	r0, [r3, #0]
	}
	if (hcan->Instance == hcan1.Instance) {// can1 bus receive interrupt
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	4b3f      	ldr	r3, [pc, #252]	; (8006e40 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d167      	bne.n	8006e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, canRxData);
 8006d48:	4b3a      	ldr	r3, [pc, #232]	; (8006e34 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8006d4a:	4a3b      	ldr	r2, [pc, #236]	; (8006e38 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7fa fc99 	bl	8001686 <HAL_CAN_GetRxMessage>
		motor_fdb *fdb = 0;
 8006d54:	2300      	movs	r3, #0
 8006d56:	60fb      	str	r3, [r7, #12]
		switch (canRxHeader.StdId) {
 8006d58:	4b37      	ldr	r3, [pc, #220]	; (8006e38 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f240 2206 	movw	r2, #518	; 0x206
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d00a      	beq.n	8006d7a <HAL_CAN_RxFifo0MsgPendingCallback+0x152>
 8006d64:	f240 2207 	movw	r2, #519	; 0x207
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d009      	beq.n	8006d80 <HAL_CAN_RxFifo0MsgPendingCallback+0x158>
 8006d6c:	f240 2205 	movw	r2, #517	; 0x205
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d108      	bne.n	8006d86 <HAL_CAN_RxFifo0MsgPendingCallback+0x15e>
		case 0x205:
			fdb = &gimbalYawFdb;
 8006d74:	4b33      	ldr	r3, [pc, #204]	; (8006e44 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8006d76:	60fb      	str	r3, [r7, #12]
			break;
 8006d78:	e005      	b.n	8006d86 <HAL_CAN_RxFifo0MsgPendingCallback+0x15e>
		case 0x206:
			fdb = &gimbalPitchFdb;
 8006d7a:	4b33      	ldr	r3, [pc, #204]	; (8006e48 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8006d7c:	60fb      	str	r3, [r7, #12]
			break;
 8006d7e:	e002      	b.n	8006d86 <HAL_CAN_RxFifo0MsgPendingCallback+0x15e>
		case 0x207:
			fdb = &loadMotorFdb;
 8006d80:	4b32      	ldr	r3, [pc, #200]	; (8006e4c <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8006d82:	60fb      	str	r3, [r7, #12]
			break;
 8006d84:	bf00      	nop
		}
		fdb->angle = canRxData[0] * 256 + canRxData[1];
 8006d86:	4b2b      	ldr	r3, [pc, #172]	; (8006e34 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	021b      	lsls	r3, r3, #8
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	4b28      	ldr	r3, [pc, #160]	; (8006e34 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8006d92:	785b      	ldrb	r3, [r3, #1]
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	4413      	add	r3, r2
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	b21a      	sxth	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	801a      	strh	r2, [r3, #0]
		fdb->rpm = canRxData[2] * 256 + canRxData[3];
 8006da0:	4b24      	ldr	r3, [pc, #144]	; (8006e34 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8006da2:	789b      	ldrb	r3, [r3, #2]
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	021b      	lsls	r3, r3, #8
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	4b22      	ldr	r3, [pc, #136]	; (8006e34 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8006dac:	78db      	ldrb	r3, [r3, #3]
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	4413      	add	r3, r2
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	b21a      	sxth	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	805a      	strh	r2, [r3, #2]
		fdb->torque = canRxData[4] * 256 + canRxData[5];
 8006dba:	4b1e      	ldr	r3, [pc, #120]	; (8006e34 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8006dbc:	791b      	ldrb	r3, [r3, #4]
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	021b      	lsls	r3, r3, #8
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	4b1b      	ldr	r3, [pc, #108]	; (8006e34 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8006dc6:	795b      	ldrb	r3, [r3, #5]
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	4413      	add	r3, r2
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	b21a      	sxth	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	809a      	strh	r2, [r3, #4]
		fdb->temp = canRxData[6];
 8006dd4:	4b17      	ldr	r3, [pc, #92]	; (8006e34 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8006dd6:	799b      	ldrb	r3, [r3, #6]
 8006dd8:	b21a      	sxth	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	80da      	strh	r2, [r3, #6]
		fdb->omg = 6.28318530718 * (fdb->rpm) / 1140.0;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006de4:	4618      	mov	r0, r3
 8006de6:	f7f9 fbad 	bl	8000544 <__aeabi_i2d>
 8006dea:	a30d      	add	r3, pc, #52	; (adr r3, 8006e20 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8006dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df0:	f7f9 fc12 	bl	8000618 <__aeabi_dmul>
 8006df4:	4603      	mov	r3, r0
 8006df6:	460c      	mov	r4, r1
 8006df8:	4618      	mov	r0, r3
 8006dfa:	4621      	mov	r1, r4
 8006dfc:	a30a      	add	r3, pc, #40	; (adr r3, 8006e28 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8006dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e02:	f7f9 fd33 	bl	800086c <__aeabi_ddiv>
 8006e06:	4603      	mov	r3, r0
 8006e08:	460c      	mov	r4, r1
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	4621      	mov	r1, r4
 8006e0e:	f7f9 fedb 	bl	8000bc8 <__aeabi_d2f>
 8006e12:	4602      	mov	r2, r0
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	609a      	str	r2, [r3, #8]
	}
}
 8006e18:	bf00      	nop
 8006e1a:	3714      	adds	r7, #20
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd90      	pop	{r4, r7, pc}
 8006e20:	54442eea 	.word	0x54442eea
 8006e24:	401921fb 	.word	0x401921fb
 8006e28:	00000000 	.word	0x00000000
 8006e2c:	4091d000 	.word	0x4091d000
 8006e30:	200002f4 	.word	0x200002f4
 8006e34:	20000500 	.word	0x20000500
 8006e38:	20000578 	.word	0x20000578
 8006e3c:	20000380 	.word	0x20000380
 8006e40:	2000031c 	.word	0x2000031c
 8006e44:	20000368 	.word	0x20000368
 8006e48:	200005cc 	.word	0x200005cc
 8006e4c:	200005bc 	.word	0x200005bc

08006e50 <driveWheelTask>:

void driveWheelTask() {
 8006e50:	b590      	push	{r4, r7, lr}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0

	mecanum.speed.vx = (float) rc.ch4 / 660 * MAX_CHASSIS_VX_SPEED;
 8006e56:	4bd0      	ldr	r3, [pc, #832]	; (8007198 <driveWheelTask+0x348>)
 8006e58:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006e5c:	ee07 3a90 	vmov	s15, r3
 8006e60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e64:	eddf 6acd 	vldr	s13, [pc, #820]	; 800719c <driveWheelTask+0x34c>
 8006e68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e6c:	ed9f 7acc 	vldr	s14, [pc, #816]	; 80071a0 <driveWheelTask+0x350>
 8006e70:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006e74:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006e78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e7c:	4bc9      	ldr	r3, [pc, #804]	; (80071a4 <driveWheelTask+0x354>)
 8006e7e:	edc3 7a05 	vstr	s15, [r3, #20]
	mecanum.speed.vy = -(float) rc.ch3 / 660 * MAX_CHASSIS_VX_SPEED;
 8006e82:	4bc5      	ldr	r3, [pc, #788]	; (8007198 <driveWheelTask+0x348>)
 8006e84:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006e88:	ee07 3a90 	vmov	s15, r3
 8006e8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e90:	eeb1 7a67 	vneg.f32	s14, s15
 8006e94:	eddf 6ac1 	vldr	s13, [pc, #772]	; 800719c <driveWheelTask+0x34c>
 8006e98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e9c:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 80071a0 <driveWheelTask+0x350>
 8006ea0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006ea4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006ea8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006eac:	4bbd      	ldr	r3, [pc, #756]	; (80071a4 <driveWheelTask+0x354>)
 8006eae:	edc3 7a06 	vstr	s15, [r3, #24]

	if(rc.sw1==1){
 8006eb2:	4bb9      	ldr	r3, [pc, #740]	; (8007198 <driveWheelTask+0x348>)
 8006eb4:	7a9b      	ldrb	r3, [r3, #10]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	f040 8396 	bne.w	80075e8 <driveWheelTask+0x798>
		if(cnt_tim_omega<100)      {mecanum.speed.vw = -(float) (rc.ch5-400.0) / 660.0 * MAX_CHASSIS_VW_SPEED;}
 8006ebc:	4bba      	ldr	r3, [pc, #744]	; (80071a8 <driveWheelTask+0x358>)
 8006ebe:	881b      	ldrh	r3, [r3, #0]
 8006ec0:	2b63      	cmp	r3, #99	; 0x63
 8006ec2:	d838      	bhi.n	8006f36 <driveWheelTask+0xe6>
 8006ec4:	4bb4      	ldr	r3, [pc, #720]	; (8007198 <driveWheelTask+0x348>)
 8006ec6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7f9 fb3a 	bl	8000544 <__aeabi_i2d>
 8006ed0:	f04f 0200 	mov.w	r2, #0
 8006ed4:	4bb5      	ldr	r3, [pc, #724]	; (80071ac <driveWheelTask+0x35c>)
 8006ed6:	f7f9 f9e7 	bl	80002a8 <__aeabi_dsub>
 8006eda:	4603      	mov	r3, r0
 8006edc:	460c      	mov	r4, r1
 8006ede:	4618      	mov	r0, r3
 8006ee0:	4621      	mov	r1, r4
 8006ee2:	f7f9 fe71 	bl	8000bc8 <__aeabi_d2f>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7f9 fb3b 	bl	8000568 <__aeabi_f2d>
 8006ef2:	f04f 0200 	mov.w	r2, #0
 8006ef6:	4bae      	ldr	r3, [pc, #696]	; (80071b0 <driveWheelTask+0x360>)
 8006ef8:	f7f9 fcb8 	bl	800086c <__aeabi_ddiv>
 8006efc:	4603      	mov	r3, r0
 8006efe:	460c      	mov	r4, r1
 8006f00:	4618      	mov	r0, r3
 8006f02:	4621      	mov	r1, r4
 8006f04:	a3a2      	add	r3, pc, #648	; (adr r3, 8007190 <driveWheelTask+0x340>)
 8006f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0a:	f7f9 fb85 	bl	8000618 <__aeabi_dmul>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	460c      	mov	r4, r1
 8006f12:	4618      	mov	r0, r3
 8006f14:	4621      	mov	r1, r4
 8006f16:	f04f 0200 	mov.w	r2, #0
 8006f1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f1e:	f7f9 fca5 	bl	800086c <__aeabi_ddiv>
 8006f22:	4603      	mov	r3, r0
 8006f24:	460c      	mov	r4, r1
 8006f26:	4618      	mov	r0, r3
 8006f28:	4621      	mov	r1, r4
 8006f2a:	f7f9 fe4d 	bl	8000bc8 <__aeabi_d2f>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	4b9c      	ldr	r3, [pc, #624]	; (80071a4 <driveWheelTask+0x354>)
 8006f32:	61da      	str	r2, [r3, #28]
 8006f34:	e349      	b.n	80075ca <driveWheelTask+0x77a>
		else if(cnt_tim_omega<150) {mecanum.speed.vw = -(float) (rc.ch5-250.0) / 660.0 * MAX_CHASSIS_VW_SPEED;}
 8006f36:	4b9c      	ldr	r3, [pc, #624]	; (80071a8 <driveWheelTask+0x358>)
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	2b95      	cmp	r3, #149	; 0x95
 8006f3c:	d838      	bhi.n	8006fb0 <driveWheelTask+0x160>
 8006f3e:	4b96      	ldr	r3, [pc, #600]	; (8007198 <driveWheelTask+0x348>)
 8006f40:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7f9 fafd 	bl	8000544 <__aeabi_i2d>
 8006f4a:	f04f 0200 	mov.w	r2, #0
 8006f4e:	4b99      	ldr	r3, [pc, #612]	; (80071b4 <driveWheelTask+0x364>)
 8006f50:	f7f9 f9aa 	bl	80002a8 <__aeabi_dsub>
 8006f54:	4603      	mov	r3, r0
 8006f56:	460c      	mov	r4, r1
 8006f58:	4618      	mov	r0, r3
 8006f5a:	4621      	mov	r1, r4
 8006f5c:	f7f9 fe34 	bl	8000bc8 <__aeabi_d2f>
 8006f60:	4603      	mov	r3, r0
 8006f62:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7f9 fafe 	bl	8000568 <__aeabi_f2d>
 8006f6c:	f04f 0200 	mov.w	r2, #0
 8006f70:	4b8f      	ldr	r3, [pc, #572]	; (80071b0 <driveWheelTask+0x360>)
 8006f72:	f7f9 fc7b 	bl	800086c <__aeabi_ddiv>
 8006f76:	4603      	mov	r3, r0
 8006f78:	460c      	mov	r4, r1
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	4621      	mov	r1, r4
 8006f7e:	a384      	add	r3, pc, #528	; (adr r3, 8007190 <driveWheelTask+0x340>)
 8006f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f84:	f7f9 fb48 	bl	8000618 <__aeabi_dmul>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	460c      	mov	r4, r1
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	4621      	mov	r1, r4
 8006f90:	f04f 0200 	mov.w	r2, #0
 8006f94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f98:	f7f9 fc68 	bl	800086c <__aeabi_ddiv>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	460c      	mov	r4, r1
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	4621      	mov	r1, r4
 8006fa4:	f7f9 fe10 	bl	8000bc8 <__aeabi_d2f>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	4b7e      	ldr	r3, [pc, #504]	; (80071a4 <driveWheelTask+0x354>)
 8006fac:	61da      	str	r2, [r3, #28]
 8006fae:	e30c      	b.n	80075ca <driveWheelTask+0x77a>
		else if(cnt_tim_omega<200) {mecanum.speed.vw = -(float) (rc.ch5-100.0) / 660.0 * MAX_CHASSIS_VW_SPEED;}
 8006fb0:	4b7d      	ldr	r3, [pc, #500]	; (80071a8 <driveWheelTask+0x358>)
 8006fb2:	881b      	ldrh	r3, [r3, #0]
 8006fb4:	2bc7      	cmp	r3, #199	; 0xc7
 8006fb6:	d838      	bhi.n	800702a <driveWheelTask+0x1da>
 8006fb8:	4b77      	ldr	r3, [pc, #476]	; (8007198 <driveWheelTask+0x348>)
 8006fba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7f9 fac0 	bl	8000544 <__aeabi_i2d>
 8006fc4:	f04f 0200 	mov.w	r2, #0
 8006fc8:	4b7b      	ldr	r3, [pc, #492]	; (80071b8 <driveWheelTask+0x368>)
 8006fca:	f7f9 f96d 	bl	80002a8 <__aeabi_dsub>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	460c      	mov	r4, r1
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	4621      	mov	r1, r4
 8006fd6:	f7f9 fdf7 	bl	8000bc8 <__aeabi_d2f>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7f9 fac1 	bl	8000568 <__aeabi_f2d>
 8006fe6:	f04f 0200 	mov.w	r2, #0
 8006fea:	4b71      	ldr	r3, [pc, #452]	; (80071b0 <driveWheelTask+0x360>)
 8006fec:	f7f9 fc3e 	bl	800086c <__aeabi_ddiv>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	460c      	mov	r4, r1
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	4621      	mov	r1, r4
 8006ff8:	a365      	add	r3, pc, #404	; (adr r3, 8007190 <driveWheelTask+0x340>)
 8006ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffe:	f7f9 fb0b 	bl	8000618 <__aeabi_dmul>
 8007002:	4603      	mov	r3, r0
 8007004:	460c      	mov	r4, r1
 8007006:	4618      	mov	r0, r3
 8007008:	4621      	mov	r1, r4
 800700a:	f04f 0200 	mov.w	r2, #0
 800700e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007012:	f7f9 fc2b 	bl	800086c <__aeabi_ddiv>
 8007016:	4603      	mov	r3, r0
 8007018:	460c      	mov	r4, r1
 800701a:	4618      	mov	r0, r3
 800701c:	4621      	mov	r1, r4
 800701e:	f7f9 fdd3 	bl	8000bc8 <__aeabi_d2f>
 8007022:	4602      	mov	r2, r0
 8007024:	4b5f      	ldr	r3, [pc, #380]	; (80071a4 <driveWheelTask+0x354>)
 8007026:	61da      	str	r2, [r3, #28]
 8007028:	e2cf      	b.n	80075ca <driveWheelTask+0x77a>
		else if(cnt_tim_omega==200){mecanum.speed.vw = -(float) (rc.ch5-  0.0) / 660.0 * MAX_CHASSIS_VW_SPEED;}
 800702a:	4b5f      	ldr	r3, [pc, #380]	; (80071a8 <driveWheelTask+0x358>)
 800702c:	881b      	ldrh	r3, [r3, #0]
 800702e:	2bc8      	cmp	r3, #200	; 0xc8
 8007030:	d133      	bne.n	800709a <driveWheelTask+0x24a>
 8007032:	4b59      	ldr	r3, [pc, #356]	; (8007198 <driveWheelTask+0x348>)
 8007034:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007038:	4618      	mov	r0, r3
 800703a:	f7f9 fa83 	bl	8000544 <__aeabi_i2d>
 800703e:	4603      	mov	r3, r0
 8007040:	460c      	mov	r4, r1
 8007042:	4618      	mov	r0, r3
 8007044:	4621      	mov	r1, r4
 8007046:	f7f9 fdbf 	bl	8000bc8 <__aeabi_d2f>
 800704a:	4603      	mov	r3, r0
 800704c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007050:	4618      	mov	r0, r3
 8007052:	f7f9 fa89 	bl	8000568 <__aeabi_f2d>
 8007056:	f04f 0200 	mov.w	r2, #0
 800705a:	4b55      	ldr	r3, [pc, #340]	; (80071b0 <driveWheelTask+0x360>)
 800705c:	f7f9 fc06 	bl	800086c <__aeabi_ddiv>
 8007060:	4603      	mov	r3, r0
 8007062:	460c      	mov	r4, r1
 8007064:	4618      	mov	r0, r3
 8007066:	4621      	mov	r1, r4
 8007068:	a349      	add	r3, pc, #292	; (adr r3, 8007190 <driveWheelTask+0x340>)
 800706a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706e:	f7f9 fad3 	bl	8000618 <__aeabi_dmul>
 8007072:	4603      	mov	r3, r0
 8007074:	460c      	mov	r4, r1
 8007076:	4618      	mov	r0, r3
 8007078:	4621      	mov	r1, r4
 800707a:	f04f 0200 	mov.w	r2, #0
 800707e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007082:	f7f9 fbf3 	bl	800086c <__aeabi_ddiv>
 8007086:	4603      	mov	r3, r0
 8007088:	460c      	mov	r4, r1
 800708a:	4618      	mov	r0, r3
 800708c:	4621      	mov	r1, r4
 800708e:	f7f9 fd9b 	bl	8000bc8 <__aeabi_d2f>
 8007092:	4602      	mov	r2, r0
 8007094:	4b43      	ldr	r3, [pc, #268]	; (80071a4 <driveWheelTask+0x354>)
 8007096:	61da      	str	r2, [r3, #28]
 8007098:	e297      	b.n	80075ca <driveWheelTask+0x77a>
		else if(cnt_tim_omega<250) {mecanum.speed.vw = -(float) (rc.ch5+100.0) / 660.0 * MAX_CHASSIS_VW_SPEED;}
 800709a:	4b43      	ldr	r3, [pc, #268]	; (80071a8 <driveWheelTask+0x358>)
 800709c:	881b      	ldrh	r3, [r3, #0]
 800709e:	2bf9      	cmp	r3, #249	; 0xf9
 80070a0:	d838      	bhi.n	8007114 <driveWheelTask+0x2c4>
 80070a2:	4b3d      	ldr	r3, [pc, #244]	; (8007198 <driveWheelTask+0x348>)
 80070a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7f9 fa4b 	bl	8000544 <__aeabi_i2d>
 80070ae:	f04f 0200 	mov.w	r2, #0
 80070b2:	4b41      	ldr	r3, [pc, #260]	; (80071b8 <driveWheelTask+0x368>)
 80070b4:	f7f9 f8fa 	bl	80002ac <__adddf3>
 80070b8:	4603      	mov	r3, r0
 80070ba:	460c      	mov	r4, r1
 80070bc:	4618      	mov	r0, r3
 80070be:	4621      	mov	r1, r4
 80070c0:	f7f9 fd82 	bl	8000bc8 <__aeabi_d2f>
 80070c4:	4603      	mov	r3, r0
 80070c6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7f9 fa4c 	bl	8000568 <__aeabi_f2d>
 80070d0:	f04f 0200 	mov.w	r2, #0
 80070d4:	4b36      	ldr	r3, [pc, #216]	; (80071b0 <driveWheelTask+0x360>)
 80070d6:	f7f9 fbc9 	bl	800086c <__aeabi_ddiv>
 80070da:	4603      	mov	r3, r0
 80070dc:	460c      	mov	r4, r1
 80070de:	4618      	mov	r0, r3
 80070e0:	4621      	mov	r1, r4
 80070e2:	a32b      	add	r3, pc, #172	; (adr r3, 8007190 <driveWheelTask+0x340>)
 80070e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e8:	f7f9 fa96 	bl	8000618 <__aeabi_dmul>
 80070ec:	4603      	mov	r3, r0
 80070ee:	460c      	mov	r4, r1
 80070f0:	4618      	mov	r0, r3
 80070f2:	4621      	mov	r1, r4
 80070f4:	f04f 0200 	mov.w	r2, #0
 80070f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80070fc:	f7f9 fbb6 	bl	800086c <__aeabi_ddiv>
 8007100:	4603      	mov	r3, r0
 8007102:	460c      	mov	r4, r1
 8007104:	4618      	mov	r0, r3
 8007106:	4621      	mov	r1, r4
 8007108:	f7f9 fd5e 	bl	8000bc8 <__aeabi_d2f>
 800710c:	4602      	mov	r2, r0
 800710e:	4b25      	ldr	r3, [pc, #148]	; (80071a4 <driveWheelTask+0x354>)
 8007110:	61da      	str	r2, [r3, #28]
 8007112:	e25a      	b.n	80075ca <driveWheelTask+0x77a>
		else if(cnt_tim_omega<300) {mecanum.speed.vw = -(float) (rc.ch5+250.0) / 660.0 * MAX_CHASSIS_VW_SPEED;}
 8007114:	4b24      	ldr	r3, [pc, #144]	; (80071a8 <driveWheelTask+0x358>)
 8007116:	881b      	ldrh	r3, [r3, #0]
 8007118:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800711c:	d24e      	bcs.n	80071bc <driveWheelTask+0x36c>
 800711e:	4b1e      	ldr	r3, [pc, #120]	; (8007198 <driveWheelTask+0x348>)
 8007120:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007124:	4618      	mov	r0, r3
 8007126:	f7f9 fa0d 	bl	8000544 <__aeabi_i2d>
 800712a:	f04f 0200 	mov.w	r2, #0
 800712e:	4b21      	ldr	r3, [pc, #132]	; (80071b4 <driveWheelTask+0x364>)
 8007130:	f7f9 f8bc 	bl	80002ac <__adddf3>
 8007134:	4603      	mov	r3, r0
 8007136:	460c      	mov	r4, r1
 8007138:	4618      	mov	r0, r3
 800713a:	4621      	mov	r1, r4
 800713c:	f7f9 fd44 	bl	8000bc8 <__aeabi_d2f>
 8007140:	4603      	mov	r3, r0
 8007142:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007146:	4618      	mov	r0, r3
 8007148:	f7f9 fa0e 	bl	8000568 <__aeabi_f2d>
 800714c:	f04f 0200 	mov.w	r2, #0
 8007150:	4b17      	ldr	r3, [pc, #92]	; (80071b0 <driveWheelTask+0x360>)
 8007152:	f7f9 fb8b 	bl	800086c <__aeabi_ddiv>
 8007156:	4603      	mov	r3, r0
 8007158:	460c      	mov	r4, r1
 800715a:	4618      	mov	r0, r3
 800715c:	4621      	mov	r1, r4
 800715e:	a30c      	add	r3, pc, #48	; (adr r3, 8007190 <driveWheelTask+0x340>)
 8007160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007164:	f7f9 fa58 	bl	8000618 <__aeabi_dmul>
 8007168:	4603      	mov	r3, r0
 800716a:	460c      	mov	r4, r1
 800716c:	4618      	mov	r0, r3
 800716e:	4621      	mov	r1, r4
 8007170:	f04f 0200 	mov.w	r2, #0
 8007174:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007178:	f7f9 fb78 	bl	800086c <__aeabi_ddiv>
 800717c:	4603      	mov	r3, r0
 800717e:	460c      	mov	r4, r1
 8007180:	4618      	mov	r0, r3
 8007182:	4621      	mov	r1, r4
 8007184:	f7f9 fd20 	bl	8000bc8 <__aeabi_d2f>
 8007188:	4602      	mov	r2, r0
 800718a:	4b06      	ldr	r3, [pc, #24]	; (80071a4 <driveWheelTask+0x354>)
 800718c:	61da      	str	r2, [r3, #28]
 800718e:	e21c      	b.n	80075ca <driveWheelTask+0x77a>
 8007190:	00000000 	.word	0x00000000
 8007194:	4072c000 	.word	0x4072c000
 8007198:	20000344 	.word	0x20000344
 800719c:	44250000 	.word	0x44250000
 80071a0:	454e4000 	.word	0x454e4000
 80071a4:	2000050c 	.word	0x2000050c
 80071a8:	20000508 	.word	0x20000508
 80071ac:	40790000 	.word	0x40790000
 80071b0:	4084a000 	.word	0x4084a000
 80071b4:	406f4000 	.word	0x406f4000
 80071b8:	40590000 	.word	0x40590000
		else if(cnt_tim_omega<400) {mecanum.speed.vw = -(float) (rc.ch5+400.0) / 660.0 * MAX_CHASSIS_VW_SPEED;}
 80071bc:	4bbe      	ldr	r3, [pc, #760]	; (80074b8 <driveWheelTask+0x668>)
 80071be:	881b      	ldrh	r3, [r3, #0]
 80071c0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80071c4:	d238      	bcs.n	8007238 <driveWheelTask+0x3e8>
 80071c6:	4bbd      	ldr	r3, [pc, #756]	; (80074bc <driveWheelTask+0x66c>)
 80071c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7f9 f9b9 	bl	8000544 <__aeabi_i2d>
 80071d2:	f04f 0200 	mov.w	r2, #0
 80071d6:	4bba      	ldr	r3, [pc, #744]	; (80074c0 <driveWheelTask+0x670>)
 80071d8:	f7f9 f868 	bl	80002ac <__adddf3>
 80071dc:	4603      	mov	r3, r0
 80071de:	460c      	mov	r4, r1
 80071e0:	4618      	mov	r0, r3
 80071e2:	4621      	mov	r1, r4
 80071e4:	f7f9 fcf0 	bl	8000bc8 <__aeabi_d2f>
 80071e8:	4603      	mov	r3, r0
 80071ea:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7f9 f9ba 	bl	8000568 <__aeabi_f2d>
 80071f4:	f04f 0200 	mov.w	r2, #0
 80071f8:	4bb2      	ldr	r3, [pc, #712]	; (80074c4 <driveWheelTask+0x674>)
 80071fa:	f7f9 fb37 	bl	800086c <__aeabi_ddiv>
 80071fe:	4603      	mov	r3, r0
 8007200:	460c      	mov	r4, r1
 8007202:	4618      	mov	r0, r3
 8007204:	4621      	mov	r1, r4
 8007206:	a3aa      	add	r3, pc, #680	; (adr r3, 80074b0 <driveWheelTask+0x660>)
 8007208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720c:	f7f9 fa04 	bl	8000618 <__aeabi_dmul>
 8007210:	4603      	mov	r3, r0
 8007212:	460c      	mov	r4, r1
 8007214:	4618      	mov	r0, r3
 8007216:	4621      	mov	r1, r4
 8007218:	f04f 0200 	mov.w	r2, #0
 800721c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007220:	f7f9 fb24 	bl	800086c <__aeabi_ddiv>
 8007224:	4603      	mov	r3, r0
 8007226:	460c      	mov	r4, r1
 8007228:	4618      	mov	r0, r3
 800722a:	4621      	mov	r1, r4
 800722c:	f7f9 fccc 	bl	8000bc8 <__aeabi_d2f>
 8007230:	4602      	mov	r2, r0
 8007232:	4ba5      	ldr	r3, [pc, #660]	; (80074c8 <driveWheelTask+0x678>)
 8007234:	61da      	str	r2, [r3, #28]
 8007236:	e1c8      	b.n	80075ca <driveWheelTask+0x77a>
		else if(cnt_tim_omega<500) {mecanum.speed.vw = -(float) (rc.ch5+400.0) / 660.0 * MAX_CHASSIS_VW_SPEED;}
 8007238:	4b9f      	ldr	r3, [pc, #636]	; (80074b8 <driveWheelTask+0x668>)
 800723a:	881b      	ldrh	r3, [r3, #0]
 800723c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007240:	d238      	bcs.n	80072b4 <driveWheelTask+0x464>
 8007242:	4b9e      	ldr	r3, [pc, #632]	; (80074bc <driveWheelTask+0x66c>)
 8007244:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007248:	4618      	mov	r0, r3
 800724a:	f7f9 f97b 	bl	8000544 <__aeabi_i2d>
 800724e:	f04f 0200 	mov.w	r2, #0
 8007252:	4b9b      	ldr	r3, [pc, #620]	; (80074c0 <driveWheelTask+0x670>)
 8007254:	f7f9 f82a 	bl	80002ac <__adddf3>
 8007258:	4603      	mov	r3, r0
 800725a:	460c      	mov	r4, r1
 800725c:	4618      	mov	r0, r3
 800725e:	4621      	mov	r1, r4
 8007260:	f7f9 fcb2 	bl	8000bc8 <__aeabi_d2f>
 8007264:	4603      	mov	r3, r0
 8007266:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800726a:	4618      	mov	r0, r3
 800726c:	f7f9 f97c 	bl	8000568 <__aeabi_f2d>
 8007270:	f04f 0200 	mov.w	r2, #0
 8007274:	4b93      	ldr	r3, [pc, #588]	; (80074c4 <driveWheelTask+0x674>)
 8007276:	f7f9 faf9 	bl	800086c <__aeabi_ddiv>
 800727a:	4603      	mov	r3, r0
 800727c:	460c      	mov	r4, r1
 800727e:	4618      	mov	r0, r3
 8007280:	4621      	mov	r1, r4
 8007282:	a38b      	add	r3, pc, #556	; (adr r3, 80074b0 <driveWheelTask+0x660>)
 8007284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007288:	f7f9 f9c6 	bl	8000618 <__aeabi_dmul>
 800728c:	4603      	mov	r3, r0
 800728e:	460c      	mov	r4, r1
 8007290:	4618      	mov	r0, r3
 8007292:	4621      	mov	r1, r4
 8007294:	f04f 0200 	mov.w	r2, #0
 8007298:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800729c:	f7f9 fae6 	bl	800086c <__aeabi_ddiv>
 80072a0:	4603      	mov	r3, r0
 80072a2:	460c      	mov	r4, r1
 80072a4:	4618      	mov	r0, r3
 80072a6:	4621      	mov	r1, r4
 80072a8:	f7f9 fc8e 	bl	8000bc8 <__aeabi_d2f>
 80072ac:	4602      	mov	r2, r0
 80072ae:	4b86      	ldr	r3, [pc, #536]	; (80074c8 <driveWheelTask+0x678>)
 80072b0:	61da      	str	r2, [r3, #28]
 80072b2:	e18a      	b.n	80075ca <driveWheelTask+0x77a>
		else if(cnt_tim_omega<550) {mecanum.speed.vw = -(float) (rc.ch5+250.0) / 660.0 * MAX_CHASSIS_VW_SPEED;}
 80072b4:	4b80      	ldr	r3, [pc, #512]	; (80074b8 <driveWheelTask+0x668>)
 80072b6:	881b      	ldrh	r3, [r3, #0]
 80072b8:	f240 2225 	movw	r2, #549	; 0x225
 80072bc:	4293      	cmp	r3, r2
 80072be:	d838      	bhi.n	8007332 <driveWheelTask+0x4e2>
 80072c0:	4b7e      	ldr	r3, [pc, #504]	; (80074bc <driveWheelTask+0x66c>)
 80072c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7f9 f93c 	bl	8000544 <__aeabi_i2d>
 80072cc:	f04f 0200 	mov.w	r2, #0
 80072d0:	4b7e      	ldr	r3, [pc, #504]	; (80074cc <driveWheelTask+0x67c>)
 80072d2:	f7f8 ffeb 	bl	80002ac <__adddf3>
 80072d6:	4603      	mov	r3, r0
 80072d8:	460c      	mov	r4, r1
 80072da:	4618      	mov	r0, r3
 80072dc:	4621      	mov	r1, r4
 80072de:	f7f9 fc73 	bl	8000bc8 <__aeabi_d2f>
 80072e2:	4603      	mov	r3, r0
 80072e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7f9 f93d 	bl	8000568 <__aeabi_f2d>
 80072ee:	f04f 0200 	mov.w	r2, #0
 80072f2:	4b74      	ldr	r3, [pc, #464]	; (80074c4 <driveWheelTask+0x674>)
 80072f4:	f7f9 faba 	bl	800086c <__aeabi_ddiv>
 80072f8:	4603      	mov	r3, r0
 80072fa:	460c      	mov	r4, r1
 80072fc:	4618      	mov	r0, r3
 80072fe:	4621      	mov	r1, r4
 8007300:	a36b      	add	r3, pc, #428	; (adr r3, 80074b0 <driveWheelTask+0x660>)
 8007302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007306:	f7f9 f987 	bl	8000618 <__aeabi_dmul>
 800730a:	4603      	mov	r3, r0
 800730c:	460c      	mov	r4, r1
 800730e:	4618      	mov	r0, r3
 8007310:	4621      	mov	r1, r4
 8007312:	f04f 0200 	mov.w	r2, #0
 8007316:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800731a:	f7f9 faa7 	bl	800086c <__aeabi_ddiv>
 800731e:	4603      	mov	r3, r0
 8007320:	460c      	mov	r4, r1
 8007322:	4618      	mov	r0, r3
 8007324:	4621      	mov	r1, r4
 8007326:	f7f9 fc4f 	bl	8000bc8 <__aeabi_d2f>
 800732a:	4602      	mov	r2, r0
 800732c:	4b66      	ldr	r3, [pc, #408]	; (80074c8 <driveWheelTask+0x678>)
 800732e:	61da      	str	r2, [r3, #28]
 8007330:	e14b      	b.n	80075ca <driveWheelTask+0x77a>
		else if(cnt_tim_omega<600) {mecanum.speed.vw = -(float) (rc.ch5+100.0) / 660.0 * MAX_CHASSIS_VW_SPEED;}
 8007332:	4b61      	ldr	r3, [pc, #388]	; (80074b8 <driveWheelTask+0x668>)
 8007334:	881b      	ldrh	r3, [r3, #0]
 8007336:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800733a:	d238      	bcs.n	80073ae <driveWheelTask+0x55e>
 800733c:	4b5f      	ldr	r3, [pc, #380]	; (80074bc <driveWheelTask+0x66c>)
 800733e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007342:	4618      	mov	r0, r3
 8007344:	f7f9 f8fe 	bl	8000544 <__aeabi_i2d>
 8007348:	f04f 0200 	mov.w	r2, #0
 800734c:	4b60      	ldr	r3, [pc, #384]	; (80074d0 <driveWheelTask+0x680>)
 800734e:	f7f8 ffad 	bl	80002ac <__adddf3>
 8007352:	4603      	mov	r3, r0
 8007354:	460c      	mov	r4, r1
 8007356:	4618      	mov	r0, r3
 8007358:	4621      	mov	r1, r4
 800735a:	f7f9 fc35 	bl	8000bc8 <__aeabi_d2f>
 800735e:	4603      	mov	r3, r0
 8007360:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007364:	4618      	mov	r0, r3
 8007366:	f7f9 f8ff 	bl	8000568 <__aeabi_f2d>
 800736a:	f04f 0200 	mov.w	r2, #0
 800736e:	4b55      	ldr	r3, [pc, #340]	; (80074c4 <driveWheelTask+0x674>)
 8007370:	f7f9 fa7c 	bl	800086c <__aeabi_ddiv>
 8007374:	4603      	mov	r3, r0
 8007376:	460c      	mov	r4, r1
 8007378:	4618      	mov	r0, r3
 800737a:	4621      	mov	r1, r4
 800737c:	a34c      	add	r3, pc, #304	; (adr r3, 80074b0 <driveWheelTask+0x660>)
 800737e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007382:	f7f9 f949 	bl	8000618 <__aeabi_dmul>
 8007386:	4603      	mov	r3, r0
 8007388:	460c      	mov	r4, r1
 800738a:	4618      	mov	r0, r3
 800738c:	4621      	mov	r1, r4
 800738e:	f04f 0200 	mov.w	r2, #0
 8007392:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007396:	f7f9 fa69 	bl	800086c <__aeabi_ddiv>
 800739a:	4603      	mov	r3, r0
 800739c:	460c      	mov	r4, r1
 800739e:	4618      	mov	r0, r3
 80073a0:	4621      	mov	r1, r4
 80073a2:	f7f9 fc11 	bl	8000bc8 <__aeabi_d2f>
 80073a6:	4602      	mov	r2, r0
 80073a8:	4b47      	ldr	r3, [pc, #284]	; (80074c8 <driveWheelTask+0x678>)
 80073aa:	61da      	str	r2, [r3, #28]
 80073ac:	e10d      	b.n	80075ca <driveWheelTask+0x77a>
		else if(cnt_tim_omega==600){mecanum.speed.vw = -(float) (rc.ch5+  0.0) / 660.0 * MAX_CHASSIS_VW_SPEED;}
 80073ae:	4b42      	ldr	r3, [pc, #264]	; (80074b8 <driveWheelTask+0x668>)
 80073b0:	881b      	ldrh	r3, [r3, #0]
 80073b2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80073b6:	d139      	bne.n	800742c <driveWheelTask+0x5dc>
 80073b8:	4b40      	ldr	r3, [pc, #256]	; (80074bc <driveWheelTask+0x66c>)
 80073ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80073be:	4618      	mov	r0, r3
 80073c0:	f7f9 f8c0 	bl	8000544 <__aeabi_i2d>
 80073c4:	f04f 0200 	mov.w	r2, #0
 80073c8:	f04f 0300 	mov.w	r3, #0
 80073cc:	f7f8 ff6e 	bl	80002ac <__adddf3>
 80073d0:	4603      	mov	r3, r0
 80073d2:	460c      	mov	r4, r1
 80073d4:	4618      	mov	r0, r3
 80073d6:	4621      	mov	r1, r4
 80073d8:	f7f9 fbf6 	bl	8000bc8 <__aeabi_d2f>
 80073dc:	4603      	mov	r3, r0
 80073de:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7f9 f8c0 	bl	8000568 <__aeabi_f2d>
 80073e8:	f04f 0200 	mov.w	r2, #0
 80073ec:	4b35      	ldr	r3, [pc, #212]	; (80074c4 <driveWheelTask+0x674>)
 80073ee:	f7f9 fa3d 	bl	800086c <__aeabi_ddiv>
 80073f2:	4603      	mov	r3, r0
 80073f4:	460c      	mov	r4, r1
 80073f6:	4618      	mov	r0, r3
 80073f8:	4621      	mov	r1, r4
 80073fa:	a32d      	add	r3, pc, #180	; (adr r3, 80074b0 <driveWheelTask+0x660>)
 80073fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007400:	f7f9 f90a 	bl	8000618 <__aeabi_dmul>
 8007404:	4603      	mov	r3, r0
 8007406:	460c      	mov	r4, r1
 8007408:	4618      	mov	r0, r3
 800740a:	4621      	mov	r1, r4
 800740c:	f04f 0200 	mov.w	r2, #0
 8007410:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007414:	f7f9 fa2a 	bl	800086c <__aeabi_ddiv>
 8007418:	4603      	mov	r3, r0
 800741a:	460c      	mov	r4, r1
 800741c:	4618      	mov	r0, r3
 800741e:	4621      	mov	r1, r4
 8007420:	f7f9 fbd2 	bl	8000bc8 <__aeabi_d2f>
 8007424:	4602      	mov	r2, r0
 8007426:	4b28      	ldr	r3, [pc, #160]	; (80074c8 <driveWheelTask+0x678>)
 8007428:	61da      	str	r2, [r3, #28]
 800742a:	e0ce      	b.n	80075ca <driveWheelTask+0x77a>
		else if(cnt_tim_omega<650) {mecanum.speed.vw = -(float) (rc.ch5-100.0) / 660.0 * MAX_CHASSIS_VW_SPEED;}
 800742c:	4b22      	ldr	r3, [pc, #136]	; (80074b8 <driveWheelTask+0x668>)
 800742e:	881b      	ldrh	r3, [r3, #0]
 8007430:	f240 2289 	movw	r2, #649	; 0x289
 8007434:	4293      	cmp	r3, r2
 8007436:	d84d      	bhi.n	80074d4 <driveWheelTask+0x684>
 8007438:	4b20      	ldr	r3, [pc, #128]	; (80074bc <driveWheelTask+0x66c>)
 800743a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800743e:	4618      	mov	r0, r3
 8007440:	f7f9 f880 	bl	8000544 <__aeabi_i2d>
 8007444:	f04f 0200 	mov.w	r2, #0
 8007448:	4b21      	ldr	r3, [pc, #132]	; (80074d0 <driveWheelTask+0x680>)
 800744a:	f7f8 ff2d 	bl	80002a8 <__aeabi_dsub>
 800744e:	4603      	mov	r3, r0
 8007450:	460c      	mov	r4, r1
 8007452:	4618      	mov	r0, r3
 8007454:	4621      	mov	r1, r4
 8007456:	f7f9 fbb7 	bl	8000bc8 <__aeabi_d2f>
 800745a:	4603      	mov	r3, r0
 800745c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007460:	4618      	mov	r0, r3
 8007462:	f7f9 f881 	bl	8000568 <__aeabi_f2d>
 8007466:	f04f 0200 	mov.w	r2, #0
 800746a:	4b16      	ldr	r3, [pc, #88]	; (80074c4 <driveWheelTask+0x674>)
 800746c:	f7f9 f9fe 	bl	800086c <__aeabi_ddiv>
 8007470:	4603      	mov	r3, r0
 8007472:	460c      	mov	r4, r1
 8007474:	4618      	mov	r0, r3
 8007476:	4621      	mov	r1, r4
 8007478:	a30d      	add	r3, pc, #52	; (adr r3, 80074b0 <driveWheelTask+0x660>)
 800747a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747e:	f7f9 f8cb 	bl	8000618 <__aeabi_dmul>
 8007482:	4603      	mov	r3, r0
 8007484:	460c      	mov	r4, r1
 8007486:	4618      	mov	r0, r3
 8007488:	4621      	mov	r1, r4
 800748a:	f04f 0200 	mov.w	r2, #0
 800748e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007492:	f7f9 f9eb 	bl	800086c <__aeabi_ddiv>
 8007496:	4603      	mov	r3, r0
 8007498:	460c      	mov	r4, r1
 800749a:	4618      	mov	r0, r3
 800749c:	4621      	mov	r1, r4
 800749e:	f7f9 fb93 	bl	8000bc8 <__aeabi_d2f>
 80074a2:	4602      	mov	r2, r0
 80074a4:	4b08      	ldr	r3, [pc, #32]	; (80074c8 <driveWheelTask+0x678>)
 80074a6:	61da      	str	r2, [r3, #28]
 80074a8:	e08f      	b.n	80075ca <driveWheelTask+0x77a>
 80074aa:	bf00      	nop
 80074ac:	f3af 8000 	nop.w
 80074b0:	00000000 	.word	0x00000000
 80074b4:	4072c000 	.word	0x4072c000
 80074b8:	20000508 	.word	0x20000508
 80074bc:	20000344 	.word	0x20000344
 80074c0:	40790000 	.word	0x40790000
 80074c4:	4084a000 	.word	0x4084a000
 80074c8:	2000050c 	.word	0x2000050c
 80074cc:	406f4000 	.word	0x406f4000
 80074d0:	40590000 	.word	0x40590000
		else if(cnt_tim_omega<700) {mecanum.speed.vw = -(float) (rc.ch5-250.0) / 660.0 * MAX_CHASSIS_VW_SPEED;}
 80074d4:	4b88      	ldr	r3, [pc, #544]	; (80076f8 <driveWheelTask+0x8a8>)
 80074d6:	881b      	ldrh	r3, [r3, #0]
 80074d8:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80074dc:	d238      	bcs.n	8007550 <driveWheelTask+0x700>
 80074de:	4b87      	ldr	r3, [pc, #540]	; (80076fc <driveWheelTask+0x8ac>)
 80074e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7f9 f82d 	bl	8000544 <__aeabi_i2d>
 80074ea:	f04f 0200 	mov.w	r2, #0
 80074ee:	4b84      	ldr	r3, [pc, #528]	; (8007700 <driveWheelTask+0x8b0>)
 80074f0:	f7f8 feda 	bl	80002a8 <__aeabi_dsub>
 80074f4:	4603      	mov	r3, r0
 80074f6:	460c      	mov	r4, r1
 80074f8:	4618      	mov	r0, r3
 80074fa:	4621      	mov	r1, r4
 80074fc:	f7f9 fb64 	bl	8000bc8 <__aeabi_d2f>
 8007500:	4603      	mov	r3, r0
 8007502:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007506:	4618      	mov	r0, r3
 8007508:	f7f9 f82e 	bl	8000568 <__aeabi_f2d>
 800750c:	f04f 0200 	mov.w	r2, #0
 8007510:	4b7c      	ldr	r3, [pc, #496]	; (8007704 <driveWheelTask+0x8b4>)
 8007512:	f7f9 f9ab 	bl	800086c <__aeabi_ddiv>
 8007516:	4603      	mov	r3, r0
 8007518:	460c      	mov	r4, r1
 800751a:	4618      	mov	r0, r3
 800751c:	4621      	mov	r1, r4
 800751e:	a374      	add	r3, pc, #464	; (adr r3, 80076f0 <driveWheelTask+0x8a0>)
 8007520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007524:	f7f9 f878 	bl	8000618 <__aeabi_dmul>
 8007528:	4603      	mov	r3, r0
 800752a:	460c      	mov	r4, r1
 800752c:	4618      	mov	r0, r3
 800752e:	4621      	mov	r1, r4
 8007530:	f04f 0200 	mov.w	r2, #0
 8007534:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007538:	f7f9 f998 	bl	800086c <__aeabi_ddiv>
 800753c:	4603      	mov	r3, r0
 800753e:	460c      	mov	r4, r1
 8007540:	4618      	mov	r0, r3
 8007542:	4621      	mov	r1, r4
 8007544:	f7f9 fb40 	bl	8000bc8 <__aeabi_d2f>
 8007548:	4602      	mov	r2, r0
 800754a:	4b6f      	ldr	r3, [pc, #444]	; (8007708 <driveWheelTask+0x8b8>)
 800754c:	61da      	str	r2, [r3, #28]
 800754e:	e03c      	b.n	80075ca <driveWheelTask+0x77a>
		else if(cnt_tim_omega<=800){mecanum.speed.vw = -(float) (rc.ch5-400.0) / 660.0 * MAX_CHASSIS_VW_SPEED;}
 8007550:	4b69      	ldr	r3, [pc, #420]	; (80076f8 <driveWheelTask+0x8a8>)
 8007552:	881b      	ldrh	r3, [r3, #0]
 8007554:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8007558:	d837      	bhi.n	80075ca <driveWheelTask+0x77a>
 800755a:	4b68      	ldr	r3, [pc, #416]	; (80076fc <driveWheelTask+0x8ac>)
 800755c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007560:	4618      	mov	r0, r3
 8007562:	f7f8 ffef 	bl	8000544 <__aeabi_i2d>
 8007566:	f04f 0200 	mov.w	r2, #0
 800756a:	4b68      	ldr	r3, [pc, #416]	; (800770c <driveWheelTask+0x8bc>)
 800756c:	f7f8 fe9c 	bl	80002a8 <__aeabi_dsub>
 8007570:	4603      	mov	r3, r0
 8007572:	460c      	mov	r4, r1
 8007574:	4618      	mov	r0, r3
 8007576:	4621      	mov	r1, r4
 8007578:	f7f9 fb26 	bl	8000bc8 <__aeabi_d2f>
 800757c:	4603      	mov	r3, r0
 800757e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007582:	4618      	mov	r0, r3
 8007584:	f7f8 fff0 	bl	8000568 <__aeabi_f2d>
 8007588:	f04f 0200 	mov.w	r2, #0
 800758c:	4b5d      	ldr	r3, [pc, #372]	; (8007704 <driveWheelTask+0x8b4>)
 800758e:	f7f9 f96d 	bl	800086c <__aeabi_ddiv>
 8007592:	4603      	mov	r3, r0
 8007594:	460c      	mov	r4, r1
 8007596:	4618      	mov	r0, r3
 8007598:	4621      	mov	r1, r4
 800759a:	a355      	add	r3, pc, #340	; (adr r3, 80076f0 <driveWheelTask+0x8a0>)
 800759c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a0:	f7f9 f83a 	bl	8000618 <__aeabi_dmul>
 80075a4:	4603      	mov	r3, r0
 80075a6:	460c      	mov	r4, r1
 80075a8:	4618      	mov	r0, r3
 80075aa:	4621      	mov	r1, r4
 80075ac:	f04f 0200 	mov.w	r2, #0
 80075b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80075b4:	f7f9 f95a 	bl	800086c <__aeabi_ddiv>
 80075b8:	4603      	mov	r3, r0
 80075ba:	460c      	mov	r4, r1
 80075bc:	4618      	mov	r0, r3
 80075be:	4621      	mov	r1, r4
 80075c0:	f7f9 fb02 	bl	8000bc8 <__aeabi_d2f>
 80075c4:	4602      	mov	r2, r0
 80075c6:	4b50      	ldr	r3, [pc, #320]	; (8007708 <driveWheelTask+0x8b8>)
 80075c8:	61da      	str	r2, [r3, #28]
		cnt_tim_omega++;
 80075ca:	4b4b      	ldr	r3, [pc, #300]	; (80076f8 <driveWheelTask+0x8a8>)
 80075cc:	881b      	ldrh	r3, [r3, #0]
 80075ce:	3301      	adds	r3, #1
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	4b49      	ldr	r3, [pc, #292]	; (80076f8 <driveWheelTask+0x8a8>)
 80075d4:	801a      	strh	r2, [r3, #0]
		if(cnt_tim_omega>800){cnt_tim_omega=0;}
 80075d6:	4b48      	ldr	r3, [pc, #288]	; (80076f8 <driveWheelTask+0x8a8>)
 80075d8:	881b      	ldrh	r3, [r3, #0]
 80075da:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80075de:	d92f      	bls.n	8007640 <driveWheelTask+0x7f0>
 80075e0:	4b45      	ldr	r3, [pc, #276]	; (80076f8 <driveWheelTask+0x8a8>)
 80075e2:	2200      	movs	r2, #0
 80075e4:	801a      	strh	r2, [r3, #0]
 80075e6:	e02b      	b.n	8007640 <driveWheelTask+0x7f0>
	}
	else{
		cnt_tim_omega=0;
 80075e8:	4b43      	ldr	r3, [pc, #268]	; (80076f8 <driveWheelTask+0x8a8>)
 80075ea:	2200      	movs	r2, #0
 80075ec:	801a      	strh	r2, [r3, #0]
		mecanum.speed.vw = -(float) rc.ch5 / 660 * MAX_CHASSIS_VW_SPEED;
 80075ee:	4b43      	ldr	r3, [pc, #268]	; (80076fc <driveWheelTask+0x8ac>)
 80075f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80075f4:	ee07 3a90 	vmov	s15, r3
 80075f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075fc:	eef1 7a67 	vneg.f32	s15, s15
 8007600:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8007710 <driveWheelTask+0x8c0>
 8007604:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007608:	ee16 0a90 	vmov	r0, s13
 800760c:	f7f8 ffac 	bl	8000568 <__aeabi_f2d>
 8007610:	a337      	add	r3, pc, #220	; (adr r3, 80076f0 <driveWheelTask+0x8a0>)
 8007612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007616:	f7f8 ffff 	bl	8000618 <__aeabi_dmul>
 800761a:	4603      	mov	r3, r0
 800761c:	460c      	mov	r4, r1
 800761e:	4618      	mov	r0, r3
 8007620:	4621      	mov	r1, r4
 8007622:	f04f 0200 	mov.w	r2, #0
 8007626:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800762a:	f7f9 f91f 	bl	800086c <__aeabi_ddiv>
 800762e:	4603      	mov	r3, r0
 8007630:	460c      	mov	r4, r1
 8007632:	4618      	mov	r0, r3
 8007634:	4621      	mov	r1, r4
 8007636:	f7f9 fac7 	bl	8000bc8 <__aeabi_d2f>
 800763a:	4602      	mov	r2, r0
 800763c:	4b32      	ldr	r3, [pc, #200]	; (8007708 <driveWheelTask+0x8b8>)
 800763e:	61da      	str	r2, [r3, #28]
	}

	mecanum_calculate(&mecanum);
 8007640:	4831      	ldr	r0, [pc, #196]	; (8007708 <driveWheelTask+0x8b8>)
 8007642:	f000 fe59 	bl	80082f8 <mecanum_calculate>

	int16_t u[4];
	for (int i = 0; i < 4; i++) {
 8007646:	2300      	movs	r3, #0
 8007648:	60fb      	str	r3, [r7, #12]
 800764a:	e043      	b.n	80076d4 <driveWheelTask+0x884>
		int error = mecanum.wheel_rpm[i] - wheelFdb[i].rpm;
 800764c:	4a2e      	ldr	r2, [pc, #184]	; (8007708 <driveWheelTask+0x8b8>)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	3310      	adds	r3, #16
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	4413      	add	r3, r2
 8007656:	ed93 7a00 	vldr	s14, [r3]
 800765a:	492e      	ldr	r1, [pc, #184]	; (8007714 <driveWheelTask+0x8c4>)
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	4613      	mov	r3, r2
 8007660:	005b      	lsls	r3, r3, #1
 8007662:	4413      	add	r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	440b      	add	r3, r1
 8007668:	3302      	adds	r3, #2
 800766a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800766e:	ee07 3a90 	vmov	s15, r3
 8007672:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007676:	ee77 7a67 	vsub.f32	s15, s14, s15
 800767a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800767e:	ee17 3a90 	vmov	r3, s15
 8007682:	60bb      	str	r3, [r7, #8]
		wheelPID[i].error = error;
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	ee07 3a90 	vmov	s15, r3
 800768a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800768e:	4a22      	ldr	r2, [pc, #136]	; (8007718 <driveWheelTask+0x8c8>)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	212c      	movs	r1, #44	; 0x2c
 8007694:	fb01 f303 	mul.w	r3, r1, r3
 8007698:	4413      	add	r3, r2
 800769a:	3328      	adds	r3, #40	; 0x28
 800769c:	edc3 7a00 	vstr	s15, [r3]
		u[i] = (int16_t) pidExecute(&(wheelPID[i]));
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	222c      	movs	r2, #44	; 0x2c
 80076a4:	fb02 f303 	mul.w	r3, r2, r3
 80076a8:	4a1b      	ldr	r2, [pc, #108]	; (8007718 <driveWheelTask+0x8c8>)
 80076aa:	4413      	add	r3, r2
 80076ac:	4618      	mov	r0, r3
 80076ae:	f001 f8e5 	bl	800887c <pidExecute>
 80076b2:	eef0 7a40 	vmov.f32	s15, s0
 80076b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076ba:	ee17 3a90 	vmov	r3, s15
 80076be:	b21a      	sxth	r2, r3
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	005b      	lsls	r3, r3, #1
 80076c4:	f107 0110 	add.w	r1, r7, #16
 80076c8:	440b      	add	r3, r1
 80076ca:	f823 2c10 	strh.w	r2, [r3, #-16]
	for (int i = 0; i < 4; i++) {
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	3301      	adds	r3, #1
 80076d2:	60fb      	str	r3, [r7, #12]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2b03      	cmp	r3, #3
 80076d8:	ddb8      	ble.n	800764c <driveWheelTask+0x7fc>
	}
	driveWheel(u);
 80076da:	463b      	mov	r3, r7
 80076dc:	4618      	mov	r0, r3
 80076de:	f000 ffd9 	bl	8008694 <driveWheel>

}
 80076e2:	bf00      	nop
 80076e4:	3714      	adds	r7, #20
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd90      	pop	{r4, r7, pc}
 80076ea:	bf00      	nop
 80076ec:	f3af 8000 	nop.w
 80076f0:	00000000 	.word	0x00000000
 80076f4:	4072c000 	.word	0x4072c000
 80076f8:	20000508 	.word	0x20000508
 80076fc:	20000344 	.word	0x20000344
 8007700:	406f4000 	.word	0x406f4000
 8007704:	4084a000 	.word	0x4084a000
 8007708:	2000050c 	.word	0x2000050c
 800770c:	40790000 	.word	0x40790000
 8007710:	44250000 	.word	0x44250000
 8007714:	20000380 	.word	0x20000380
 8007718:	20000450 	.word	0x20000450

0800771c <initPID>:

void initPID() {
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++) {
 8007722:	2300      	movs	r3, #0
 8007724:	607b      	str	r3, [r7, #4]
 8007726:	e042      	b.n	80077ae <initPID+0x92>
		wheelPID[i].t = 2.0f;
 8007728:	4a25      	ldr	r2, [pc, #148]	; (80077c0 <initPID+0xa4>)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	212c      	movs	r1, #44	; 0x2c
 800772e:	fb01 f303 	mul.w	r3, r1, r3
 8007732:	4413      	add	r3, r2
 8007734:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007738:	601a      	str	r2, [r3, #0]
		wheelPID[i].p = 6.5f;
 800773a:	4a21      	ldr	r2, [pc, #132]	; (80077c0 <initPID+0xa4>)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	212c      	movs	r1, #44	; 0x2c
 8007740:	fb01 f303 	mul.w	r3, r1, r3
 8007744:	4413      	add	r3, r2
 8007746:	3304      	adds	r3, #4
 8007748:	4a1e      	ldr	r2, [pc, #120]	; (80077c4 <initPID+0xa8>)
 800774a:	601a      	str	r2, [r3, #0]
		wheelPID[i].i = 50.0f;
 800774c:	4a1c      	ldr	r2, [pc, #112]	; (80077c0 <initPID+0xa4>)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	212c      	movs	r1, #44	; 0x2c
 8007752:	fb01 f303 	mul.w	r3, r1, r3
 8007756:	4413      	add	r3, r2
 8007758:	3308      	adds	r3, #8
 800775a:	4a1b      	ldr	r2, [pc, #108]	; (80077c8 <initPID+0xac>)
 800775c:	601a      	str	r2, [r3, #0]
		wheelPID[i].d = 0.0f;
 800775e:	4a18      	ldr	r2, [pc, #96]	; (80077c0 <initPID+0xa4>)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	212c      	movs	r1, #44	; 0x2c
 8007764:	fb01 f303 	mul.w	r3, r1, r3
 8007768:	4413      	add	r3, r2
 800776a:	330c      	adds	r3, #12
 800776c:	f04f 0200 	mov.w	r2, #0
 8007770:	601a      	str	r2, [r3, #0]
		wheelPID[i].outLimit = 15000.0f;
 8007772:	4a13      	ldr	r2, [pc, #76]	; (80077c0 <initPID+0xa4>)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	212c      	movs	r1, #44	; 0x2c
 8007778:	fb01 f303 	mul.w	r3, r1, r3
 800777c:	4413      	add	r3, r2
 800777e:	3310      	adds	r3, #16
 8007780:	4a12      	ldr	r2, [pc, #72]	; (80077cc <initPID+0xb0>)
 8007782:	601a      	str	r2, [r3, #0]
		wheelPID[i].integralOutLimit = 500.0f;
 8007784:	4a0e      	ldr	r2, [pc, #56]	; (80077c0 <initPID+0xa4>)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	212c      	movs	r1, #44	; 0x2c
 800778a:	fb01 f303 	mul.w	r3, r1, r3
 800778e:	4413      	add	r3, r2
 8007790:	3314      	adds	r3, #20
 8007792:	4a0f      	ldr	r2, [pc, #60]	; (80077d0 <initPID+0xb4>)
 8007794:	601a      	str	r2, [r3, #0]
		wheelPID[i].differentialFilterRate = 0.9f;
 8007796:	4a0a      	ldr	r2, [pc, #40]	; (80077c0 <initPID+0xa4>)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	212c      	movs	r1, #44	; 0x2c
 800779c:	fb01 f303 	mul.w	r3, r1, r3
 80077a0:	4413      	add	r3, r2
 80077a2:	3318      	adds	r3, #24
 80077a4:	4a0b      	ldr	r2, [pc, #44]	; (80077d4 <initPID+0xb8>)
 80077a6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	3301      	adds	r3, #1
 80077ac:	607b      	str	r3, [r7, #4]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2b03      	cmp	r3, #3
 80077b2:	ddb9      	ble.n	8007728 <initPID+0xc>
	}
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr
 80077c0:	20000450 	.word	0x20000450
 80077c4:	40d00000 	.word	0x40d00000
 80077c8:	42480000 	.word	0x42480000
 80077cc:	466a6000 	.word	0x466a6000
 80077d0:	43fa0000 	.word	0x43fa0000
 80077d4:	3f666666 	.word	0x3f666666

080077d8 <initMecanum>:

void initMecanum() {
 80077d8:	b480      	push	{r7}
 80077da:	af00      	add	r7, sp, #0
	mecanum.param.wheel_perimeter = PERIMETER;
 80077dc:	4b0a      	ldr	r3, [pc, #40]	; (8007808 <initMecanum+0x30>)
 80077de:	4a0b      	ldr	r2, [pc, #44]	; (800780c <initMecanum+0x34>)
 80077e0:	601a      	str	r2, [r3, #0]
	mecanum.param.wheeltrack = WHEELTRACK;
 80077e2:	4b09      	ldr	r3, [pc, #36]	; (8007808 <initMecanum+0x30>)
 80077e4:	4a0a      	ldr	r2, [pc, #40]	; (8007810 <initMecanum+0x38>)
 80077e6:	605a      	str	r2, [r3, #4]
	mecanum.param.wheelbase = WHEELBASE;
 80077e8:	4b07      	ldr	r3, [pc, #28]	; (8007808 <initMecanum+0x30>)
 80077ea:	4a0a      	ldr	r2, [pc, #40]	; (8007814 <initMecanum+0x3c>)
 80077ec:	609a      	str	r2, [r3, #8]
	mecanum.param.rotate_x_offset = 0;
 80077ee:	4b06      	ldr	r3, [pc, #24]	; (8007808 <initMecanum+0x30>)
 80077f0:	f04f 0200 	mov.w	r2, #0
 80077f4:	60da      	str	r2, [r3, #12]
	mecanum.param.rotate_y_offset = 0;
 80077f6:	4b04      	ldr	r3, [pc, #16]	; (8007808 <initMecanum+0x30>)
 80077f8:	f04f 0200 	mov.w	r2, #0
 80077fc:	611a      	str	r2, [r3, #16]
}
 80077fe:	bf00      	nop
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr
 8007808:	2000050c 	.word	0x2000050c
 800780c:	43ef0000 	.word	0x43ef0000
 8007810:	43c50000 	.word	0x43c50000
 8007814:	43cf8000 	.word	0x43cf8000

08007818 <initFriction>:

void initFriction() {
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
	for(int i=0;i<300;i++){
 800781e:	2300      	movs	r3, #0
 8007820:	607b      	str	r3, [r7, #4]
 8007822:	e015      	b.n	8007850 <initFriction+0x38>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 1500);
 8007824:	4b1d      	ldr	r3, [pc, #116]	; (800789c <initFriction+0x84>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800782c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 1500);
 800782e:	4b1b      	ldr	r3, [pc, #108]	; (800789c <initFriction+0x84>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007836:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(10);
 8007838:	200a      	movs	r0, #10
 800783a:	f7f9 fc07 	bl	800104c <HAL_Delay>
	mpu_get_data();
 800783e:	f7fd fa1d 	bl	8004c7c <mpu_get_data>
	imu_ahrs_update();
 8007842:	f7fd fd7d 	bl	8005340 <imu_ahrs_update>
	imu_attitude_update();
 8007846:	f7fe fa1b 	bl	8005c80 <imu_attitude_update>
	for(int i=0;i<300;i++){
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	3301      	adds	r3, #1
 800784e:	607b      	str	r3, [r7, #4]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8007856:	dbe5      	blt.n	8007824 <initFriction+0xc>
	}
	for(int i=0;i<500;i++){
 8007858:	2300      	movs	r3, #0
 800785a:	603b      	str	r3, [r7, #0]
 800785c:	e015      	b.n	800788a <initFriction+0x72>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 1220);
 800785e:	4b0f      	ldr	r3, [pc, #60]	; (800789c <initFriction+0x84>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8007866:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 1220);
 8007868:	4b0c      	ldr	r3, [pc, #48]	; (800789c <initFriction+0x84>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8007870:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(10);
 8007872:	200a      	movs	r0, #10
 8007874:	f7f9 fbea 	bl	800104c <HAL_Delay>
	mpu_get_data();
 8007878:	f7fd fa00 	bl	8004c7c <mpu_get_data>
	imu_ahrs_update();
 800787c:	f7fd fd60 	bl	8005340 <imu_ahrs_update>
	imu_attitude_update();
 8007880:	f7fe f9fe 	bl	8005c80 <imu_attitude_update>
	for(int i=0;i<500;i++){
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	3301      	adds	r3, #1
 8007888:	603b      	str	r3, [r7, #0]
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007890:	dbe5      	blt.n	800785e <initFriction+0x46>
	}

}
 8007892:	bf00      	nop
 8007894:	3708      	adds	r7, #8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	20000678 	.word	0x20000678

080078a0 <initLoadPID>:

void initLoadPID() {
 80078a0:	b480      	push	{r7}
 80078a2:	af00      	add	r7, sp, #0
	loadPID.t = 2.0f;
 80078a4:	4b0d      	ldr	r3, [pc, #52]	; (80078dc <initLoadPID+0x3c>)
 80078a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80078aa:	601a      	str	r2, [r3, #0]
	loadPID.p = 10.0f;
 80078ac:	4b0b      	ldr	r3, [pc, #44]	; (80078dc <initLoadPID+0x3c>)
 80078ae:	4a0c      	ldr	r2, [pc, #48]	; (80078e0 <initLoadPID+0x40>)
 80078b0:	605a      	str	r2, [r3, #4]
	loadPID.i = 0.1f*500;
 80078b2:	4b0a      	ldr	r3, [pc, #40]	; (80078dc <initLoadPID+0x3c>)
 80078b4:	4a0b      	ldr	r2, [pc, #44]	; (80078e4 <initLoadPID+0x44>)
 80078b6:	609a      	str	r2, [r3, #8]
	loadPID.d = 0.07f;
 80078b8:	4b08      	ldr	r3, [pc, #32]	; (80078dc <initLoadPID+0x3c>)
 80078ba:	4a0b      	ldr	r2, [pc, #44]	; (80078e8 <initLoadPID+0x48>)
 80078bc:	60da      	str	r2, [r3, #12]
	loadPID.outLimit = 30000.0f;
 80078be:	4b07      	ldr	r3, [pc, #28]	; (80078dc <initLoadPID+0x3c>)
 80078c0:	4a0a      	ldr	r2, [pc, #40]	; (80078ec <initLoadPID+0x4c>)
 80078c2:	611a      	str	r2, [r3, #16]
	loadPID.integralOutLimit = 10000.0f;
 80078c4:	4b05      	ldr	r3, [pc, #20]	; (80078dc <initLoadPID+0x3c>)
 80078c6:	4a0a      	ldr	r2, [pc, #40]	; (80078f0 <initLoadPID+0x50>)
 80078c8:	615a      	str	r2, [r3, #20]
	loadPID.differentialFilterRate = 0.9f;
 80078ca:	4b04      	ldr	r3, [pc, #16]	; (80078dc <initLoadPID+0x3c>)
 80078cc:	4a09      	ldr	r2, [pc, #36]	; (80078f4 <initLoadPID+0x54>)
 80078ce:	619a      	str	r2, [r3, #24]
}
 80078d0:	bf00      	nop
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	200005f0 	.word	0x200005f0
 80078e0:	41200000 	.word	0x41200000
 80078e4:	42480000 	.word	0x42480000
 80078e8:	3d8f5c29 	.word	0x3d8f5c29
 80078ec:	46ea6000 	.word	0x46ea6000
 80078f0:	461c4000 	.word	0x461c4000
 80078f4:	3f666666 	.word	0x3f666666

080078f8 <timerTask>:

void timerTask() { //call 500Hz
 80078f8:	b580      	push	{r7, lr}
 80078fa:	af00      	add	r7, sp, #0
	driveWheelTask();
 80078fc:	f7ff faa8 	bl	8006e50 <driveWheelTask>
	Gimbal_Task();
 8007900:	f000 f8be 	bl	8007a80 <Gimbal_Task>
	fire_Task();
 8007904:	f000 fc4a 	bl	800819c <fire_Task>
	mpu_get_data();
 8007908:	f7fd f9b8 	bl	8004c7c <mpu_get_data>
	imu_ahrs_update();
 800790c:	f7fd fd18 	bl	8005340 <imu_ahrs_update>
	imu_attitude_update();
 8007910:	f7fe f9b6 	bl	8005c80 <imu_attitude_update>
	fire_task_open();
 8007914:	f000 fc7e 	bl	8008214 <fire_task_open>

	IMU_pich=(imu.pit)-IMU_pich_set;
 8007918:	4b4d      	ldr	r3, [pc, #308]	; (8007a50 <timerTask+0x158>)
 800791a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800791e:	4b4d      	ldr	r3, [pc, #308]	; (8007a54 <timerTask+0x15c>)
 8007920:	edd3 7a00 	vldr	s15, [r3]
 8007924:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007928:	4b4b      	ldr	r3, [pc, #300]	; (8007a58 <timerTask+0x160>)
 800792a:	edc3 7a00 	vstr	s15, [r3]
		if(IMU_pich>  90.0){IMU_pich=IMU_pich-180;}
 800792e:	4b4a      	ldr	r3, [pc, #296]	; (8007a58 <timerTask+0x160>)
 8007930:	edd3 7a00 	vldr	s15, [r3]
 8007934:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8007a5c <timerTask+0x164>
 8007938:	eef4 7ac7 	vcmpe.f32	s15, s14
 800793c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007940:	dd09      	ble.n	8007956 <timerTask+0x5e>
 8007942:	4b45      	ldr	r3, [pc, #276]	; (8007a58 <timerTask+0x160>)
 8007944:	edd3 7a00 	vldr	s15, [r3]
 8007948:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8007a60 <timerTask+0x168>
 800794c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007950:	4b41      	ldr	r3, [pc, #260]	; (8007a58 <timerTask+0x160>)
 8007952:	edc3 7a00 	vstr	s15, [r3]
		if(IMU_pich< -90.0){IMU_pich=IMU_pich+180;}
 8007956:	4b40      	ldr	r3, [pc, #256]	; (8007a58 <timerTask+0x160>)
 8007958:	edd3 7a00 	vldr	s15, [r3]
 800795c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8007a64 <timerTask+0x16c>
 8007960:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007968:	d509      	bpl.n	800797e <timerTask+0x86>
 800796a:	4b3b      	ldr	r3, [pc, #236]	; (8007a58 <timerTask+0x160>)
 800796c:	edd3 7a00 	vldr	s15, [r3]
 8007970:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8007a60 <timerTask+0x168>
 8007974:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007978:	4b37      	ldr	r3, [pc, #220]	; (8007a58 <timerTask+0x160>)
 800797a:	edc3 7a00 	vstr	s15, [r3]
	IMU_yaw=(imu.yaw)-IMU_yaw_set;
 800797e:	4b34      	ldr	r3, [pc, #208]	; (8007a50 <timerTask+0x158>)
 8007980:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8007984:	4b38      	ldr	r3, [pc, #224]	; (8007a68 <timerTask+0x170>)
 8007986:	edd3 7a00 	vldr	s15, [r3]
 800798a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800798e:	4b37      	ldr	r3, [pc, #220]	; (8007a6c <timerTask+0x174>)
 8007990:	edc3 7a00 	vstr	s15, [r3]
		if(IMU_yaw>  180.0){IMU_yaw=IMU_yaw-360;}
 8007994:	4b35      	ldr	r3, [pc, #212]	; (8007a6c <timerTask+0x174>)
 8007996:	edd3 7a00 	vldr	s15, [r3]
 800799a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8007a60 <timerTask+0x168>
 800799e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80079a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079a6:	dd09      	ble.n	80079bc <timerTask+0xc4>
 80079a8:	4b30      	ldr	r3, [pc, #192]	; (8007a6c <timerTask+0x174>)
 80079aa:	edd3 7a00 	vldr	s15, [r3]
 80079ae:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8007a70 <timerTask+0x178>
 80079b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80079b6:	4b2d      	ldr	r3, [pc, #180]	; (8007a6c <timerTask+0x174>)
 80079b8:	edc3 7a00 	vstr	s15, [r3]
		if(IMU_yaw< -180.0){IMU_yaw=IMU_yaw+360;}
 80079bc:	4b2b      	ldr	r3, [pc, #172]	; (8007a6c <timerTask+0x174>)
 80079be:	edd3 7a00 	vldr	s15, [r3]
 80079c2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8007a74 <timerTask+0x17c>
 80079c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80079ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079ce:	d509      	bpl.n	80079e4 <timerTask+0xec>
 80079d0:	4b26      	ldr	r3, [pc, #152]	; (8007a6c <timerTask+0x174>)
 80079d2:	edd3 7a00 	vldr	s15, [r3]
 80079d6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007a70 <timerTask+0x178>
 80079da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079de:	4b23      	ldr	r3, [pc, #140]	; (8007a6c <timerTask+0x174>)
 80079e0:	edc3 7a00 	vstr	s15, [r3]
	IMU_rol=(imu.rol)-IMU_rol_set;
 80079e4:	4b1a      	ldr	r3, [pc, #104]	; (8007a50 <timerTask+0x158>)
 80079e6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80079ea:	4b23      	ldr	r3, [pc, #140]	; (8007a78 <timerTask+0x180>)
 80079ec:	edd3 7a00 	vldr	s15, [r3]
 80079f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079f4:	4b21      	ldr	r3, [pc, #132]	; (8007a7c <timerTask+0x184>)
 80079f6:	edc3 7a00 	vstr	s15, [r3]
		if(IMU_rol>  180.0){IMU_rol=IMU_rol-360;}
 80079fa:	4b20      	ldr	r3, [pc, #128]	; (8007a7c <timerTask+0x184>)
 80079fc:	edd3 7a00 	vldr	s15, [r3]
 8007a00:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8007a60 <timerTask+0x168>
 8007a04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a0c:	dd09      	ble.n	8007a22 <timerTask+0x12a>
 8007a0e:	4b1b      	ldr	r3, [pc, #108]	; (8007a7c <timerTask+0x184>)
 8007a10:	edd3 7a00 	vldr	s15, [r3]
 8007a14:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8007a70 <timerTask+0x178>
 8007a18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a1c:	4b17      	ldr	r3, [pc, #92]	; (8007a7c <timerTask+0x184>)
 8007a1e:	edc3 7a00 	vstr	s15, [r3]
		if(IMU_rol< -180.0){IMU_rol=IMU_rol+360;}
 8007a22:	4b16      	ldr	r3, [pc, #88]	; (8007a7c <timerTask+0x184>)
 8007a24:	edd3 7a00 	vldr	s15, [r3]
 8007a28:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8007a74 <timerTask+0x17c>
 8007a2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a34:	d400      	bmi.n	8007a38 <timerTask+0x140>
}
 8007a36:	e009      	b.n	8007a4c <timerTask+0x154>
		if(IMU_rol< -180.0){IMU_rol=IMU_rol+360;}
 8007a38:	4b10      	ldr	r3, [pc, #64]	; (8007a7c <timerTask+0x184>)
 8007a3a:	edd3 7a00 	vldr	s15, [r3]
 8007a3e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8007a70 <timerTask+0x178>
 8007a42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a46:	4b0d      	ldr	r3, [pc, #52]	; (8007a7c <timerTask+0x184>)
 8007a48:	edc3 7a00 	vstr	s15, [r3]
}
 8007a4c:	bf00      	nop
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	20000244 	.word	0x20000244
 8007a54:	20000378 	.word	0x20000378
 8007a58:	200005c8 	.word	0x200005c8
 8007a5c:	42b40000 	.word	0x42b40000
 8007a60:	43340000 	.word	0x43340000
 8007a64:	c2b40000 	.word	0xc2b40000
 8007a68:	200005b8 	.word	0x200005b8
 8007a6c:	20000364 	.word	0x20000364
 8007a70:	43b40000 	.word	0x43b40000
 8007a74:	c3340000 	.word	0xc3340000
 8007a78:	2000037c 	.word	0x2000037c
 8007a7c:	200003c4 	.word	0x200003c4

08007a80 <Gimbal_Task>:

void Gimbal_Task(){
 8007a80:	b5b0      	push	{r4, r5, r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af02      	add	r7, sp, #8
	int16_t u[4];
	if (rc.mouse_press_r == 1) {
 8007a86:	4bc0      	ldr	r3, [pc, #768]	; (8007d88 <Gimbal_Task+0x308>)
 8007a88:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d102      	bne.n	8007a96 <Gimbal_Task+0x16>
		fire=1;
 8007a90:	4bbe      	ldr	r3, [pc, #760]	; (8007d8c <Gimbal_Task+0x30c>)
 8007a92:	2201      	movs	r2, #1
 8007a94:	701a      	strb	r2, [r3, #0]
	}
	fire_task_push();
 8007a96:	f000 fa11 	bl	8007ebc <fire_task_push>

	if(rc.sw2==2){target_yaw=0;}
 8007a9a:	4bbb      	ldr	r3, [pc, #748]	; (8007d88 <Gimbal_Task+0x308>)
 8007a9c:	7adb      	ldrb	r3, [r3, #11]
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d103      	bne.n	8007aaa <Gimbal_Task+0x2a>
 8007aa2:	4bbb      	ldr	r3, [pc, #748]	; (8007d90 <Gimbal_Task+0x310>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	801a      	strh	r2, [r3, #0]
 8007aa8:	e05b      	b.n	8007b62 <Gimbal_Task+0xe2>
	else{
		if(rc.sw1==1){
 8007aaa:	4bb7      	ldr	r3, [pc, #732]	; (8007d88 <Gimbal_Task+0x308>)
 8007aac:	7a9b      	ldrb	r3, [r3, #10]
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d132      	bne.n	8007b18 <Gimbal_Task+0x98>
			if(rc_SW1_temp==3){IMU_yaw_set=imu.yaw;}
 8007ab2:	4bb8      	ldr	r3, [pc, #736]	; (8007d94 <Gimbal_Task+0x314>)
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	2b03      	cmp	r3, #3
 8007ab8:	d103      	bne.n	8007ac2 <Gimbal_Task+0x42>
 8007aba:	4bb7      	ldr	r3, [pc, #732]	; (8007d98 <Gimbal_Task+0x318>)
 8007abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007abe:	4ab7      	ldr	r2, [pc, #732]	; (8007d9c <Gimbal_Task+0x31c>)
 8007ac0:	6013      	str	r3, [r2, #0]
		target_yaw =((float)PC_mouse_x / yaw_magnification)-IMU_yaw;
 8007ac2:	4bb7      	ldr	r3, [pc, #732]	; (8007da0 <Gimbal_Task+0x320>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	ee07 3a90 	vmov	s15, r3
 8007aca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007ace:	eddf 7ab5 	vldr	s15, [pc, #724]	; 8007da4 <Gimbal_Task+0x324>
 8007ad2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ada:	4bb3      	ldr	r3, [pc, #716]	; (8007da8 <Gimbal_Task+0x328>)
 8007adc:	edd3 7a00 	vldr	s15, [r3]
 8007ae0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ae4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ae8:	ee17 3a90 	vmov	r3, s15
 8007aec:	b21a      	sxth	r2, r3
 8007aee:	4ba8      	ldr	r3, [pc, #672]	; (8007d90 <Gimbal_Task+0x310>)
 8007af0:	801a      	strh	r2, [r3, #0]
		if(target_yaw>70){target_yaw=70;}
 8007af2:	4ba7      	ldr	r3, [pc, #668]	; (8007d90 <Gimbal_Task+0x310>)
 8007af4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007af8:	2b46      	cmp	r3, #70	; 0x46
 8007afa:	dd02      	ble.n	8007b02 <Gimbal_Task+0x82>
 8007afc:	4ba4      	ldr	r3, [pc, #656]	; (8007d90 <Gimbal_Task+0x310>)
 8007afe:	2246      	movs	r2, #70	; 0x46
 8007b00:	801a      	strh	r2, [r3, #0]
		if(target_yaw<-70){target_yaw=-70;}
 8007b02:	4ba3      	ldr	r3, [pc, #652]	; (8007d90 <Gimbal_Task+0x310>)
 8007b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b08:	f113 0f46 	cmn.w	r3, #70	; 0x46
 8007b0c:	da29      	bge.n	8007b62 <Gimbal_Task+0xe2>
 8007b0e:	4ba0      	ldr	r3, [pc, #640]	; (8007d90 <Gimbal_Task+0x310>)
 8007b10:	f64f 72ba 	movw	r2, #65466	; 0xffba
 8007b14:	801a      	strh	r2, [r3, #0]
 8007b16:	e024      	b.n	8007b62 <Gimbal_Task+0xe2>
		}
		else{
			target_yaw=(float)PC_mouse_x / yaw_magnification;
 8007b18:	4ba1      	ldr	r3, [pc, #644]	; (8007da0 <Gimbal_Task+0x320>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	ee07 3a90 	vmov	s15, r3
 8007b20:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007b24:	eddf 7a9f 	vldr	s15, [pc, #636]	; 8007da4 <Gimbal_Task+0x324>
 8007b28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007b2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b34:	ee17 3a90 	vmov	r3, s15
 8007b38:	b21a      	sxth	r2, r3
 8007b3a:	4b95      	ldr	r3, [pc, #596]	; (8007d90 <Gimbal_Task+0x310>)
 8007b3c:	801a      	strh	r2, [r3, #0]
			if(target_yaw>70){target_yaw=70;}
 8007b3e:	4b94      	ldr	r3, [pc, #592]	; (8007d90 <Gimbal_Task+0x310>)
 8007b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b44:	2b46      	cmp	r3, #70	; 0x46
 8007b46:	dd02      	ble.n	8007b4e <Gimbal_Task+0xce>
 8007b48:	4b91      	ldr	r3, [pc, #580]	; (8007d90 <Gimbal_Task+0x310>)
 8007b4a:	2246      	movs	r2, #70	; 0x46
 8007b4c:	801a      	strh	r2, [r3, #0]
			if(target_yaw<-70){target_yaw=-70;}
 8007b4e:	4b90      	ldr	r3, [pc, #576]	; (8007d90 <Gimbal_Task+0x310>)
 8007b50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b54:	f113 0f46 	cmn.w	r3, #70	; 0x46
 8007b58:	da03      	bge.n	8007b62 <Gimbal_Task+0xe2>
 8007b5a:	4b8d      	ldr	r3, [pc, #564]	; (8007d90 <Gimbal_Task+0x310>)
 8007b5c:	f64f 72ba 	movw	r2, #65466	; 0xffba
 8007b60:	801a      	strh	r2, [r3, #0]
		}
	}
	yaw_now=(float)((gimbalYawFdb.angle-4096.0)/8191.0*360.0);
 8007b62:	4b92      	ldr	r3, [pc, #584]	; (8007dac <Gimbal_Task+0x32c>)
 8007b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f7f8 fceb 	bl	8000544 <__aeabi_i2d>
 8007b6e:	f04f 0200 	mov.w	r2, #0
 8007b72:	4b8f      	ldr	r3, [pc, #572]	; (8007db0 <Gimbal_Task+0x330>)
 8007b74:	f7f8 fb98 	bl	80002a8 <__aeabi_dsub>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	460c      	mov	r4, r1
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	4621      	mov	r1, r4
 8007b80:	a37f      	add	r3, pc, #508	; (adr r3, 8007d80 <Gimbal_Task+0x300>)
 8007b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b86:	f7f8 fe71 	bl	800086c <__aeabi_ddiv>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	460c      	mov	r4, r1
 8007b8e:	4618      	mov	r0, r3
 8007b90:	4621      	mov	r1, r4
 8007b92:	f04f 0200 	mov.w	r2, #0
 8007b96:	4b87      	ldr	r3, [pc, #540]	; (8007db4 <Gimbal_Task+0x334>)
 8007b98:	f7f8 fd3e 	bl	8000618 <__aeabi_dmul>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	460c      	mov	r4, r1
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	4621      	mov	r1, r4
 8007ba4:	f7f9 f810 	bl	8000bc8 <__aeabi_d2f>
 8007ba8:	ee07 0a90 	vmov	s15, r0
 8007bac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007bb0:	ee17 3a90 	vmov	r3, s15
 8007bb4:	b21a      	sxth	r2, r3
 8007bb6:	4b80      	ldr	r3, [pc, #512]	; (8007db8 <Gimbal_Task+0x338>)
 8007bb8:	801a      	strh	r2, [r3, #0]
	if((target_yaw-yaw_now)>60){u[0]=30000;}
 8007bba:	4b75      	ldr	r3, [pc, #468]	; (8007d90 <Gimbal_Task+0x310>)
 8007bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	4b7d      	ldr	r3, [pc, #500]	; (8007db8 <Gimbal_Task+0x338>)
 8007bc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	2b3c      	cmp	r3, #60	; 0x3c
 8007bcc:	dd03      	ble.n	8007bd6 <Gimbal_Task+0x156>
 8007bce:	f247 5330 	movw	r3, #30000	; 0x7530
 8007bd2:	803b      	strh	r3, [r7, #0]
 8007bd4:	e050      	b.n	8007c78 <Gimbal_Task+0x1f8>
	else if((target_yaw-yaw_now)<-60){u[0]=-30000;}
 8007bd6:	4b6e      	ldr	r3, [pc, #440]	; (8007d90 <Gimbal_Task+0x310>)
 8007bd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007bdc:	461a      	mov	r2, r3
 8007bde:	4b76      	ldr	r3, [pc, #472]	; (8007db8 <Gimbal_Task+0x338>)
 8007be0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	f113 0f3c 	cmn.w	r3, #60	; 0x3c
 8007bea:	da03      	bge.n	8007bf4 <Gimbal_Task+0x174>
 8007bec:	f648 23d0 	movw	r3, #35536	; 0x8ad0
 8007bf0:	803b      	strh	r3, [r7, #0]
 8007bf2:	e041      	b.n	8007c78 <Gimbal_Task+0x1f8>
	else{
		u[0]=map(target_yaw-yaw_now, -60, 60, -30000, 30000)-(gimbalYawFdb.rpm*50.0);//param is not yet
 8007bf4:	4b66      	ldr	r3, [pc, #408]	; (8007d90 <Gimbal_Task+0x310>)
 8007bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	4b6e      	ldr	r3, [pc, #440]	; (8007db8 <Gimbal_Task+0x338>)
 8007bfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c02:	1ad0      	subs	r0, r2, r3
 8007c04:	f247 5330 	movw	r3, #30000	; 0x7530
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	4b6c      	ldr	r3, [pc, #432]	; (8007dbc <Gimbal_Task+0x33c>)
 8007c0c:	223c      	movs	r2, #60	; 0x3c
 8007c0e:	f06f 013b 	mvn.w	r1, #59	; 0x3b
 8007c12:	f7fe fbf9 	bl	8006408 <map>
 8007c16:	4603      	mov	r3, r0
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7f8 fc93 	bl	8000544 <__aeabi_i2d>
 8007c1e:	4604      	mov	r4, r0
 8007c20:	460d      	mov	r5, r1
 8007c22:	4b62      	ldr	r3, [pc, #392]	; (8007dac <Gimbal_Task+0x32c>)
 8007c24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7f8 fc8b 	bl	8000544 <__aeabi_i2d>
 8007c2e:	f04f 0200 	mov.w	r2, #0
 8007c32:	4b63      	ldr	r3, [pc, #396]	; (8007dc0 <Gimbal_Task+0x340>)
 8007c34:	f7f8 fcf0 	bl	8000618 <__aeabi_dmul>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	4629      	mov	r1, r5
 8007c40:	f7f8 fb32 	bl	80002a8 <__aeabi_dsub>
 8007c44:	4603      	mov	r3, r0
 8007c46:	460c      	mov	r4, r1
 8007c48:	4618      	mov	r0, r3
 8007c4a:	4621      	mov	r1, r4
 8007c4c:	f7f8 ff94 	bl	8000b78 <__aeabi_d2iz>
 8007c50:	4603      	mov	r3, r0
 8007c52:	b21b      	sxth	r3, r3
 8007c54:	803b      	strh	r3, [r7, #0]
		if(u[0]>30000){u[0]=30000;}
 8007c56:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007c5a:	f247 5230 	movw	r2, #30000	; 0x7530
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	dd02      	ble.n	8007c68 <Gimbal_Task+0x1e8>
 8007c62:	f247 5330 	movw	r3, #30000	; 0x7530
 8007c66:	803b      	strh	r3, [r7, #0]
		if(u[0]<-30000){u[0]=-30000;}
 8007c68:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007c6c:	4a53      	ldr	r2, [pc, #332]	; (8007dbc <Gimbal_Task+0x33c>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	da02      	bge.n	8007c78 <Gimbal_Task+0x1f8>
 8007c72:	f648 23d0 	movw	r3, #35536	; 0x8ad0
 8007c76:	803b      	strh	r3, [r7, #0]
	}

	if(rc.sw2==2){target_pich=0;}
 8007c78:	4b43      	ldr	r3, [pc, #268]	; (8007d88 <Gimbal_Task+0x308>)
 8007c7a:	7adb      	ldrb	r3, [r3, #11]
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d103      	bne.n	8007c88 <Gimbal_Task+0x208>
 8007c80:	4b50      	ldr	r3, [pc, #320]	; (8007dc4 <Gimbal_Task+0x344>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	801a      	strh	r2, [r3, #0]
 8007c86:	e029      	b.n	8007cdc <Gimbal_Task+0x25c>
	else{
		target_pich=((float)PC_mouse_y / pich_magnification)-IMU_pich;
 8007c88:	4b4f      	ldr	r3, [pc, #316]	; (8007dc8 <Gimbal_Task+0x348>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	ee07 3a90 	vmov	s15, r3
 8007c90:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007c94:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8007dcc <Gimbal_Task+0x34c>
 8007c98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ca0:	4b4b      	ldr	r3, [pc, #300]	; (8007dd0 <Gimbal_Task+0x350>)
 8007ca2:	edd3 7a00 	vldr	s15, [r3]
 8007ca6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007caa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007cae:	ee17 3a90 	vmov	r3, s15
 8007cb2:	b21a      	sxth	r2, r3
 8007cb4:	4b43      	ldr	r3, [pc, #268]	; (8007dc4 <Gimbal_Task+0x344>)
 8007cb6:	801a      	strh	r2, [r3, #0]
		if(target_pich>=30){target_pich=30;}
 8007cb8:	4b42      	ldr	r3, [pc, #264]	; (8007dc4 <Gimbal_Task+0x344>)
 8007cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007cbe:	2b1d      	cmp	r3, #29
 8007cc0:	dd02      	ble.n	8007cc8 <Gimbal_Task+0x248>
 8007cc2:	4b40      	ldr	r3, [pc, #256]	; (8007dc4 <Gimbal_Task+0x344>)
 8007cc4:	221e      	movs	r2, #30
 8007cc6:	801a      	strh	r2, [r3, #0]
		if(target_pich<-30){target_pich=-30;}
 8007cc8:	4b3e      	ldr	r3, [pc, #248]	; (8007dc4 <Gimbal_Task+0x344>)
 8007cca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007cce:	f113 0f1e 	cmn.w	r3, #30
 8007cd2:	da03      	bge.n	8007cdc <Gimbal_Task+0x25c>
 8007cd4:	4b3b      	ldr	r3, [pc, #236]	; (8007dc4 <Gimbal_Task+0x344>)
 8007cd6:	f64f 72e2 	movw	r2, #65506	; 0xffe2
 8007cda:	801a      	strh	r2, [r3, #0]
	}
	pich_now=(float)((gimbalPitchFdb.angle-4096.0)/8191.0*360.0)+28;
 8007cdc:	4b3d      	ldr	r3, [pc, #244]	; (8007dd4 <Gimbal_Task+0x354>)
 8007cde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7f8 fc2e 	bl	8000544 <__aeabi_i2d>
 8007ce8:	f04f 0200 	mov.w	r2, #0
 8007cec:	4b30      	ldr	r3, [pc, #192]	; (8007db0 <Gimbal_Task+0x330>)
 8007cee:	f7f8 fadb 	bl	80002a8 <__aeabi_dsub>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	460c      	mov	r4, r1
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	4621      	mov	r1, r4
 8007cfa:	a321      	add	r3, pc, #132	; (adr r3, 8007d80 <Gimbal_Task+0x300>)
 8007cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d00:	f7f8 fdb4 	bl	800086c <__aeabi_ddiv>
 8007d04:	4603      	mov	r3, r0
 8007d06:	460c      	mov	r4, r1
 8007d08:	4618      	mov	r0, r3
 8007d0a:	4621      	mov	r1, r4
 8007d0c:	f04f 0200 	mov.w	r2, #0
 8007d10:	4b28      	ldr	r3, [pc, #160]	; (8007db4 <Gimbal_Task+0x334>)
 8007d12:	f7f8 fc81 	bl	8000618 <__aeabi_dmul>
 8007d16:	4603      	mov	r3, r0
 8007d18:	460c      	mov	r4, r1
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	4621      	mov	r1, r4
 8007d1e:	f7f8 ff53 	bl	8000bc8 <__aeabi_d2f>
 8007d22:	ee07 0a10 	vmov	s14, r0
 8007d26:	eef3 7a0c 	vmov.f32	s15, #60	; 0x41e00000  28.0
 8007d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d32:	ee17 3a90 	vmov	r3, s15
 8007d36:	b21a      	sxth	r2, r3
 8007d38:	4b27      	ldr	r3, [pc, #156]	; (8007dd8 <Gimbal_Task+0x358>)
 8007d3a:	801a      	strh	r2, [r3, #0]
	if(pich_now>-4){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);}
 8007d3c:	4b26      	ldr	r3, [pc, #152]	; (8007dd8 <Gimbal_Task+0x358>)
 8007d3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d42:	f113 0f03 	cmn.w	r3, #3
 8007d46:	db06      	blt.n	8007d56 <Gimbal_Task+0x2d6>
 8007d48:	2201      	movs	r2, #1
 8007d4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007d4e:	4823      	ldr	r0, [pc, #140]	; (8007ddc <Gimbal_Task+0x35c>)
 8007d50:	f7fa faf2 	bl	8002338 <HAL_GPIO_WritePin>
 8007d54:	e005      	b.n	8007d62 <Gimbal_Task+0x2e2>
		else{HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);}
 8007d56:	2200      	movs	r2, #0
 8007d58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007d5c:	481f      	ldr	r0, [pc, #124]	; (8007ddc <Gimbal_Task+0x35c>)
 8007d5e:	f7fa faeb 	bl	8002338 <HAL_GPIO_WritePin>

	if((target_pich-pich_now)>30){u[1]=30000;}
 8007d62:	4b18      	ldr	r3, [pc, #96]	; (8007dc4 <Gimbal_Task+0x344>)
 8007d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d68:	461a      	mov	r2, r3
 8007d6a:	4b1b      	ldr	r3, [pc, #108]	; (8007dd8 <Gimbal_Task+0x358>)
 8007d6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	2b1e      	cmp	r3, #30
 8007d74:	dd34      	ble.n	8007de0 <Gimbal_Task+0x360>
 8007d76:	f247 5330 	movw	r3, #30000	; 0x7530
 8007d7a:	807b      	strh	r3, [r7, #2]
 8007d7c:	e081      	b.n	8007e82 <Gimbal_Task+0x402>
 8007d7e:	bf00      	nop
 8007d80:	00000000 	.word	0x00000000
 8007d84:	40bfff00 	.word	0x40bfff00
 8007d88:	20000344 	.word	0x20000344
 8007d8c:	2000027c 	.word	0x2000027c
 8007d90:	200005d8 	.word	0x200005d8
 8007d94:	20000374 	.word	0x20000374
 8007d98:	20000244 	.word	0x20000244
 8007d9c:	200005b8 	.word	0x200005b8
 8007da0:	200003b0 	.word	0x200003b0
 8007da4:	00000014 	.word	0x00000014
 8007da8:	20000364 	.word	0x20000364
 8007dac:	20000368 	.word	0x20000368
 8007db0:	40b00000 	.word	0x40b00000
 8007db4:	40768000 	.word	0x40768000
 8007db8:	200005ee 	.word	0x200005ee
 8007dbc:	ffff8ad0 	.word	0xffff8ad0
 8007dc0:	40490000 	.word	0x40490000
 8007dc4:	200003c0 	.word	0x200003c0
 8007dc8:	2000044c 	.word	0x2000044c
 8007dcc:	00000032 	.word	0x00000032
 8007dd0:	200005c8 	.word	0x200005c8
 8007dd4:	200005cc 	.word	0x200005cc
 8007dd8:	2000061c 	.word	0x2000061c
 8007ddc:	40020c00 	.word	0x40020c00
	else if((target_pich-pich_now)<-30){u[1]=-30000;}
 8007de0:	4b2f      	ldr	r3, [pc, #188]	; (8007ea0 <Gimbal_Task+0x420>)
 8007de2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007de6:	461a      	mov	r2, r3
 8007de8:	4b2e      	ldr	r3, [pc, #184]	; (8007ea4 <Gimbal_Task+0x424>)
 8007dea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	f113 0f1e 	cmn.w	r3, #30
 8007df4:	da03      	bge.n	8007dfe <Gimbal_Task+0x37e>
 8007df6:	f648 23d0 	movw	r3, #35536	; 0x8ad0
 8007dfa:	807b      	strh	r3, [r7, #2]
 8007dfc:	e041      	b.n	8007e82 <Gimbal_Task+0x402>
	else{
		u[1]=map(target_pich-pich_now, -30, 30, -30000, 30000)-(gimbalPitchFdb.rpm*50.0);//param is not yet
 8007dfe:	4b28      	ldr	r3, [pc, #160]	; (8007ea0 <Gimbal_Task+0x420>)
 8007e00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e04:	461a      	mov	r2, r3
 8007e06:	4b27      	ldr	r3, [pc, #156]	; (8007ea4 <Gimbal_Task+0x424>)
 8007e08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e0c:	1ad0      	subs	r0, r2, r3
 8007e0e:	f247 5330 	movw	r3, #30000	; 0x7530
 8007e12:	9300      	str	r3, [sp, #0]
 8007e14:	4b24      	ldr	r3, [pc, #144]	; (8007ea8 <Gimbal_Task+0x428>)
 8007e16:	221e      	movs	r2, #30
 8007e18:	f06f 011d 	mvn.w	r1, #29
 8007e1c:	f7fe faf4 	bl	8006408 <map>
 8007e20:	4603      	mov	r3, r0
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7f8 fb8e 	bl	8000544 <__aeabi_i2d>
 8007e28:	4604      	mov	r4, r0
 8007e2a:	460d      	mov	r5, r1
 8007e2c:	4b1f      	ldr	r3, [pc, #124]	; (8007eac <Gimbal_Task+0x42c>)
 8007e2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7f8 fb86 	bl	8000544 <__aeabi_i2d>
 8007e38:	f04f 0200 	mov.w	r2, #0
 8007e3c:	4b1c      	ldr	r3, [pc, #112]	; (8007eb0 <Gimbal_Task+0x430>)
 8007e3e:	f7f8 fbeb 	bl	8000618 <__aeabi_dmul>
 8007e42:	4602      	mov	r2, r0
 8007e44:	460b      	mov	r3, r1
 8007e46:	4620      	mov	r0, r4
 8007e48:	4629      	mov	r1, r5
 8007e4a:	f7f8 fa2d 	bl	80002a8 <__aeabi_dsub>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	460c      	mov	r4, r1
 8007e52:	4618      	mov	r0, r3
 8007e54:	4621      	mov	r1, r4
 8007e56:	f7f8 fe8f 	bl	8000b78 <__aeabi_d2iz>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	b21b      	sxth	r3, r3
 8007e5e:	807b      	strh	r3, [r7, #2]
		if(u[1]>30000){u[1]=30000;}
 8007e60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007e64:	f247 5230 	movw	r2, #30000	; 0x7530
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	dd02      	ble.n	8007e72 <Gimbal_Task+0x3f2>
 8007e6c:	f247 5330 	movw	r3, #30000	; 0x7530
 8007e70:	807b      	strh	r3, [r7, #2]
		if(u[1]<-30000){u[1]=-30000;}
 8007e72:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007e76:	4a0c      	ldr	r2, [pc, #48]	; (8007ea8 <Gimbal_Task+0x428>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	da02      	bge.n	8007e82 <Gimbal_Task+0x402>
 8007e7c:	f648 23d0 	movw	r3, #35536	; 0x8ad0
 8007e80:	807b      	strh	r3, [r7, #2]
	}

	u[3]=0;
 8007e82:	2300      	movs	r3, #0
 8007e84:	80fb      	strh	r3, [r7, #6]
	driveGimbalMotors(u);
 8007e86:	463b      	mov	r3, r7
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f000 fc7b 	bl	8008784 <driveGimbalMotors>
	rc_SW1_temp=rc.sw1;
 8007e8e:	4b09      	ldr	r3, [pc, #36]	; (8007eb4 <Gimbal_Task+0x434>)
 8007e90:	7a9a      	ldrb	r2, [r3, #10]
 8007e92:	4b09      	ldr	r3, [pc, #36]	; (8007eb8 <Gimbal_Task+0x438>)
 8007e94:	701a      	strb	r2, [r3, #0]
}
 8007e96:	bf00      	nop
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bdb0      	pop	{r4, r5, r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	200003c0 	.word	0x200003c0
 8007ea4:	2000061c 	.word	0x2000061c
 8007ea8:	ffff8ad0 	.word	0xffff8ad0
 8007eac:	200005cc 	.word	0x200005cc
 8007eb0:	40490000 	.word	0x40490000
 8007eb4:	20000344 	.word	0x20000344
 8007eb8:	20000374 	.word	0x20000374

08007ebc <fire_task_push>:

void fire_task_push(){
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af02      	add	r7, sp, #8
	if(fire==1){
 8007ec2:	4bb2      	ldr	r3, [pc, #712]	; (800818c <fire_task_push+0x2d0>)
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	f040 815d 	bne.w	8008186 <fire_task_push+0x2ca>
	if(cnt_tim_fire_task>0 && cnt_tim_fire_task<=150){
 8007ecc:	4bb0      	ldr	r3, [pc, #704]	; (8008190 <fire_task_push+0x2d4>)
 8007ece:	881b      	ldrh	r3, [r3, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d032      	beq.n	8007f3a <fire_task_push+0x7e>
 8007ed4:	4bae      	ldr	r3, [pc, #696]	; (8008190 <fire_task_push+0x2d4>)
 8007ed6:	881b      	ldrh	r3, [r3, #0]
 8007ed8:	2b96      	cmp	r3, #150	; 0x96
 8007eda:	d82e      	bhi.n	8007f3a <fire_task_push+0x7e>
		sConfigOC.Pulse = map(50,0,180,500,2500);
 8007edc:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8007ee0:	9300      	str	r3, [sp, #0]
 8007ee2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007ee6:	22b4      	movs	r2, #180	; 0xb4
 8007ee8:	2100      	movs	r1, #0
 8007eea:	2032      	movs	r0, #50	; 0x32
 8007eec:	f7fe fa8c 	bl	8006408 <map>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	4ba7      	ldr	r3, [pc, #668]	; (8008194 <fire_task_push+0x2d8>)
 8007ef6:	605a      	str	r2, [r3, #4]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8007ef8:	2200      	movs	r2, #0
 8007efa:	49a6      	ldr	r1, [pc, #664]	; (8008194 <fire_task_push+0x2d8>)
 8007efc:	48a6      	ldr	r0, [pc, #664]	; (8008198 <fire_task_push+0x2dc>)
 8007efe:	f7fb facb 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8007f02:	2100      	movs	r1, #0
 8007f04:	48a4      	ldr	r0, [pc, #656]	; (8008198 <fire_task_push+0x2dc>)
 8007f06:	f7fb f981 	bl	800320c <HAL_TIM_PWM_Start>
		sConfigOC.Pulse = map(90,0,180,500,2500);
 8007f0a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8007f0e:	9300      	str	r3, [sp, #0]
 8007f10:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007f14:	22b4      	movs	r2, #180	; 0xb4
 8007f16:	2100      	movs	r1, #0
 8007f18:	205a      	movs	r0, #90	; 0x5a
 8007f1a:	f7fe fa75 	bl	8006408 <map>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	461a      	mov	r2, r3
 8007f22:	4b9c      	ldr	r3, [pc, #624]	; (8008194 <fire_task_push+0x2d8>)
 8007f24:	605a      	str	r2, [r3, #4]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 8007f26:	2204      	movs	r2, #4
 8007f28:	499a      	ldr	r1, [pc, #616]	; (8008194 <fire_task_push+0x2d8>)
 8007f2a:	489b      	ldr	r0, [pc, #620]	; (8008198 <fire_task_push+0x2dc>)
 8007f2c:	f7fb fab4 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8007f30:	2104      	movs	r1, #4
 8007f32:	4899      	ldr	r0, [pc, #612]	; (8008198 <fire_task_push+0x2dc>)
 8007f34:	f7fb f96a 	bl	800320c <HAL_TIM_PWM_Start>
 8007f38:	e113      	b.n	8008162 <fire_task_push+0x2a6>
	}
	else if(cnt_tim_fire_task>150 && cnt_tim_fire_task<=500){
 8007f3a:	4b95      	ldr	r3, [pc, #596]	; (8008190 <fire_task_push+0x2d4>)
 8007f3c:	881b      	ldrh	r3, [r3, #0]
 8007f3e:	2b96      	cmp	r3, #150	; 0x96
 8007f40:	d933      	bls.n	8007faa <fire_task_push+0xee>
 8007f42:	4b93      	ldr	r3, [pc, #588]	; (8008190 <fire_task_push+0x2d4>)
 8007f44:	881b      	ldrh	r3, [r3, #0]
 8007f46:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007f4a:	d82e      	bhi.n	8007faa <fire_task_push+0xee>
		sConfigOC.Pulse = map(120,0,180,500,2500);
 8007f4c:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8007f50:	9300      	str	r3, [sp, #0]
 8007f52:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007f56:	22b4      	movs	r2, #180	; 0xb4
 8007f58:	2100      	movs	r1, #0
 8007f5a:	2078      	movs	r0, #120	; 0x78
 8007f5c:	f7fe fa54 	bl	8006408 <map>
 8007f60:	4603      	mov	r3, r0
 8007f62:	461a      	mov	r2, r3
 8007f64:	4b8b      	ldr	r3, [pc, #556]	; (8008194 <fire_task_push+0x2d8>)
 8007f66:	605a      	str	r2, [r3, #4]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8007f68:	2200      	movs	r2, #0
 8007f6a:	498a      	ldr	r1, [pc, #552]	; (8008194 <fire_task_push+0x2d8>)
 8007f6c:	488a      	ldr	r0, [pc, #552]	; (8008198 <fire_task_push+0x2dc>)
 8007f6e:	f7fb fa93 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8007f72:	2100      	movs	r1, #0
 8007f74:	4888      	ldr	r0, [pc, #544]	; (8008198 <fire_task_push+0x2dc>)
 8007f76:	f7fb f949 	bl	800320c <HAL_TIM_PWM_Start>
		sConfigOC.Pulse = map(90,0,180,500,2500);
 8007f7a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8007f7e:	9300      	str	r3, [sp, #0]
 8007f80:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007f84:	22b4      	movs	r2, #180	; 0xb4
 8007f86:	2100      	movs	r1, #0
 8007f88:	205a      	movs	r0, #90	; 0x5a
 8007f8a:	f7fe fa3d 	bl	8006408 <map>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	461a      	mov	r2, r3
 8007f92:	4b80      	ldr	r3, [pc, #512]	; (8008194 <fire_task_push+0x2d8>)
 8007f94:	605a      	str	r2, [r3, #4]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 8007f96:	2204      	movs	r2, #4
 8007f98:	497e      	ldr	r1, [pc, #504]	; (8008194 <fire_task_push+0x2d8>)
 8007f9a:	487f      	ldr	r0, [pc, #508]	; (8008198 <fire_task_push+0x2dc>)
 8007f9c:	f7fb fa7c 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8007fa0:	2104      	movs	r1, #4
 8007fa2:	487d      	ldr	r0, [pc, #500]	; (8008198 <fire_task_push+0x2dc>)
 8007fa4:	f7fb f932 	bl	800320c <HAL_TIM_PWM_Start>
 8007fa8:	e0db      	b.n	8008162 <fire_task_push+0x2a6>
	}
	else if(cnt_tim_fire_task>500 && cnt_tim_fire_task<=600){
 8007faa:	4b79      	ldr	r3, [pc, #484]	; (8008190 <fire_task_push+0x2d4>)
 8007fac:	881b      	ldrh	r3, [r3, #0]
 8007fae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007fb2:	d933      	bls.n	800801c <fire_task_push+0x160>
 8007fb4:	4b76      	ldr	r3, [pc, #472]	; (8008190 <fire_task_push+0x2d4>)
 8007fb6:	881b      	ldrh	r3, [r3, #0]
 8007fb8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8007fbc:	d82e      	bhi.n	800801c <fire_task_push+0x160>
		sConfigOC.Pulse = map(90,0,180,500,2500);
 8007fbe:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007fc8:	22b4      	movs	r2, #180	; 0xb4
 8007fca:	2100      	movs	r1, #0
 8007fcc:	205a      	movs	r0, #90	; 0x5a
 8007fce:	f7fe fa1b 	bl	8006408 <map>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	4b6f      	ldr	r3, [pc, #444]	; (8008194 <fire_task_push+0x2d8>)
 8007fd8:	605a      	str	r2, [r3, #4]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8007fda:	2200      	movs	r2, #0
 8007fdc:	496d      	ldr	r1, [pc, #436]	; (8008194 <fire_task_push+0x2d8>)
 8007fde:	486e      	ldr	r0, [pc, #440]	; (8008198 <fire_task_push+0x2dc>)
 8007fe0:	f7fb fa5a 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	486c      	ldr	r0, [pc, #432]	; (8008198 <fire_task_push+0x2dc>)
 8007fe8:	f7fb f910 	bl	800320c <HAL_TIM_PWM_Start>
		sConfigOC.Pulse = map(90,0,180,500,2500);
 8007fec:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8007ff0:	9300      	str	r3, [sp, #0]
 8007ff2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007ff6:	22b4      	movs	r2, #180	; 0xb4
 8007ff8:	2100      	movs	r1, #0
 8007ffa:	205a      	movs	r0, #90	; 0x5a
 8007ffc:	f7fe fa04 	bl	8006408 <map>
 8008000:	4603      	mov	r3, r0
 8008002:	461a      	mov	r2, r3
 8008004:	4b63      	ldr	r3, [pc, #396]	; (8008194 <fire_task_push+0x2d8>)
 8008006:	605a      	str	r2, [r3, #4]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 8008008:	2204      	movs	r2, #4
 800800a:	4962      	ldr	r1, [pc, #392]	; (8008194 <fire_task_push+0x2d8>)
 800800c:	4862      	ldr	r0, [pc, #392]	; (8008198 <fire_task_push+0x2dc>)
 800800e:	f7fb fa43 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8008012:	2104      	movs	r1, #4
 8008014:	4860      	ldr	r0, [pc, #384]	; (8008198 <fire_task_push+0x2dc>)
 8008016:	f7fb f8f9 	bl	800320c <HAL_TIM_PWM_Start>
 800801a:	e0a2      	b.n	8008162 <fire_task_push+0x2a6>
	}
	else if(cnt_tim_fire_task>600 && cnt_tim_fire_task<=850){
 800801c:	4b5c      	ldr	r3, [pc, #368]	; (8008190 <fire_task_push+0x2d4>)
 800801e:	881b      	ldrh	r3, [r3, #0]
 8008020:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8008024:	d934      	bls.n	8008090 <fire_task_push+0x1d4>
 8008026:	4b5a      	ldr	r3, [pc, #360]	; (8008190 <fire_task_push+0x2d4>)
 8008028:	881b      	ldrh	r3, [r3, #0]
 800802a:	f240 3252 	movw	r2, #850	; 0x352
 800802e:	4293      	cmp	r3, r2
 8008030:	d82e      	bhi.n	8008090 <fire_task_push+0x1d4>
		sConfigOC.Pulse = map(90,0,180,500,2500);
 8008032:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8008036:	9300      	str	r3, [sp, #0]
 8008038:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800803c:	22b4      	movs	r2, #180	; 0xb4
 800803e:	2100      	movs	r1, #0
 8008040:	205a      	movs	r0, #90	; 0x5a
 8008042:	f7fe f9e1 	bl	8006408 <map>
 8008046:	4603      	mov	r3, r0
 8008048:	461a      	mov	r2, r3
 800804a:	4b52      	ldr	r3, [pc, #328]	; (8008194 <fire_task_push+0x2d8>)
 800804c:	605a      	str	r2, [r3, #4]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 800804e:	2200      	movs	r2, #0
 8008050:	4950      	ldr	r1, [pc, #320]	; (8008194 <fire_task_push+0x2d8>)
 8008052:	4851      	ldr	r0, [pc, #324]	; (8008198 <fire_task_push+0x2dc>)
 8008054:	f7fb fa20 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8008058:	2100      	movs	r1, #0
 800805a:	484f      	ldr	r0, [pc, #316]	; (8008198 <fire_task_push+0x2dc>)
 800805c:	f7fb f8d6 	bl	800320c <HAL_TIM_PWM_Start>
		sConfigOC.Pulse = map(120,0,180,500,2500);
 8008060:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800806a:	22b4      	movs	r2, #180	; 0xb4
 800806c:	2100      	movs	r1, #0
 800806e:	2078      	movs	r0, #120	; 0x78
 8008070:	f7fe f9ca 	bl	8006408 <map>
 8008074:	4603      	mov	r3, r0
 8008076:	461a      	mov	r2, r3
 8008078:	4b46      	ldr	r3, [pc, #280]	; (8008194 <fire_task_push+0x2d8>)
 800807a:	605a      	str	r2, [r3, #4]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 800807c:	2204      	movs	r2, #4
 800807e:	4945      	ldr	r1, [pc, #276]	; (8008194 <fire_task_push+0x2d8>)
 8008080:	4845      	ldr	r0, [pc, #276]	; (8008198 <fire_task_push+0x2dc>)
 8008082:	f7fb fa09 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8008086:	2104      	movs	r1, #4
 8008088:	4843      	ldr	r0, [pc, #268]	; (8008198 <fire_task_push+0x2dc>)
 800808a:	f7fb f8bf 	bl	800320c <HAL_TIM_PWM_Start>
 800808e:	e068      	b.n	8008162 <fire_task_push+0x2a6>
	}
	else if(cnt_tim_fire_task>850 && cnt_tim_fire_task<=950){
 8008090:	4b3f      	ldr	r3, [pc, #252]	; (8008190 <fire_task_push+0x2d4>)
 8008092:	881b      	ldrh	r3, [r3, #0]
 8008094:	f240 3252 	movw	r2, #850	; 0x352
 8008098:	4293      	cmp	r3, r2
 800809a:	d934      	bls.n	8008106 <fire_task_push+0x24a>
 800809c:	4b3c      	ldr	r3, [pc, #240]	; (8008190 <fire_task_push+0x2d4>)
 800809e:	881b      	ldrh	r3, [r3, #0]
 80080a0:	f240 32b6 	movw	r2, #950	; 0x3b6
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d82e      	bhi.n	8008106 <fire_task_push+0x24a>
		sConfigOC.Pulse = map(90,0,180,500,2500);
 80080a8:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80080ac:	9300      	str	r3, [sp, #0]
 80080ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80080b2:	22b4      	movs	r2, #180	; 0xb4
 80080b4:	2100      	movs	r1, #0
 80080b6:	205a      	movs	r0, #90	; 0x5a
 80080b8:	f7fe f9a6 	bl	8006408 <map>
 80080bc:	4603      	mov	r3, r0
 80080be:	461a      	mov	r2, r3
 80080c0:	4b34      	ldr	r3, [pc, #208]	; (8008194 <fire_task_push+0x2d8>)
 80080c2:	605a      	str	r2, [r3, #4]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 80080c4:	2200      	movs	r2, #0
 80080c6:	4933      	ldr	r1, [pc, #204]	; (8008194 <fire_task_push+0x2d8>)
 80080c8:	4833      	ldr	r0, [pc, #204]	; (8008198 <fire_task_push+0x2dc>)
 80080ca:	f7fb f9e5 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80080ce:	2100      	movs	r1, #0
 80080d0:	4831      	ldr	r0, [pc, #196]	; (8008198 <fire_task_push+0x2dc>)
 80080d2:	f7fb f89b 	bl	800320c <HAL_TIM_PWM_Start>
		sConfigOC.Pulse = map(90,0,180,500,2500);
 80080d6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80080e0:	22b4      	movs	r2, #180	; 0xb4
 80080e2:	2100      	movs	r1, #0
 80080e4:	205a      	movs	r0, #90	; 0x5a
 80080e6:	f7fe f98f 	bl	8006408 <map>
 80080ea:	4603      	mov	r3, r0
 80080ec:	461a      	mov	r2, r3
 80080ee:	4b29      	ldr	r3, [pc, #164]	; (8008194 <fire_task_push+0x2d8>)
 80080f0:	605a      	str	r2, [r3, #4]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 80080f2:	2204      	movs	r2, #4
 80080f4:	4927      	ldr	r1, [pc, #156]	; (8008194 <fire_task_push+0x2d8>)
 80080f6:	4828      	ldr	r0, [pc, #160]	; (8008198 <fire_task_push+0x2dc>)
 80080f8:	f7fb f9ce 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80080fc:	2104      	movs	r1, #4
 80080fe:	4826      	ldr	r0, [pc, #152]	; (8008198 <fire_task_push+0x2dc>)
 8008100:	f7fb f884 	bl	800320c <HAL_TIM_PWM_Start>
 8008104:	e02d      	b.n	8008162 <fire_task_push+0x2a6>
	}
	else{
		sConfigOC.Pulse = map(90,0,180,500,2500);
 8008106:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800810a:	9300      	str	r3, [sp, #0]
 800810c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008110:	22b4      	movs	r2, #180	; 0xb4
 8008112:	2100      	movs	r1, #0
 8008114:	205a      	movs	r0, #90	; 0x5a
 8008116:	f7fe f977 	bl	8006408 <map>
 800811a:	4603      	mov	r3, r0
 800811c:	461a      	mov	r2, r3
 800811e:	4b1d      	ldr	r3, [pc, #116]	; (8008194 <fire_task_push+0x2d8>)
 8008120:	605a      	str	r2, [r3, #4]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8008122:	2200      	movs	r2, #0
 8008124:	491b      	ldr	r1, [pc, #108]	; (8008194 <fire_task_push+0x2d8>)
 8008126:	481c      	ldr	r0, [pc, #112]	; (8008198 <fire_task_push+0x2dc>)
 8008128:	f7fb f9b6 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800812c:	2100      	movs	r1, #0
 800812e:	481a      	ldr	r0, [pc, #104]	; (8008198 <fire_task_push+0x2dc>)
 8008130:	f7fb f86c 	bl	800320c <HAL_TIM_PWM_Start>
		sConfigOC.Pulse = map(90,0,180,500,2500);
 8008134:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800813e:	22b4      	movs	r2, #180	; 0xb4
 8008140:	2100      	movs	r1, #0
 8008142:	205a      	movs	r0, #90	; 0x5a
 8008144:	f7fe f960 	bl	8006408 <map>
 8008148:	4603      	mov	r3, r0
 800814a:	461a      	mov	r2, r3
 800814c:	4b11      	ldr	r3, [pc, #68]	; (8008194 <fire_task_push+0x2d8>)
 800814e:	605a      	str	r2, [r3, #4]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 8008150:	2204      	movs	r2, #4
 8008152:	4910      	ldr	r1, [pc, #64]	; (8008194 <fire_task_push+0x2d8>)
 8008154:	4810      	ldr	r0, [pc, #64]	; (8008198 <fire_task_push+0x2dc>)
 8008156:	f7fb f99f 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800815a:	2104      	movs	r1, #4
 800815c:	480e      	ldr	r0, [pc, #56]	; (8008198 <fire_task_push+0x2dc>)
 800815e:	f7fb f855 	bl	800320c <HAL_TIM_PWM_Start>
	}


	cnt_tim_fire_task++;
 8008162:	4b0b      	ldr	r3, [pc, #44]	; (8008190 <fire_task_push+0x2d4>)
 8008164:	881b      	ldrh	r3, [r3, #0]
 8008166:	3301      	adds	r3, #1
 8008168:	b29a      	uxth	r2, r3
 800816a:	4b09      	ldr	r3, [pc, #36]	; (8008190 <fire_task_push+0x2d4>)
 800816c:	801a      	strh	r2, [r3, #0]
	if(cnt_tim_fire_task>950){
 800816e:	4b08      	ldr	r3, [pc, #32]	; (8008190 <fire_task_push+0x2d4>)
 8008170:	881b      	ldrh	r3, [r3, #0]
 8008172:	f240 32b6 	movw	r2, #950	; 0x3b6
 8008176:	4293      	cmp	r3, r2
 8008178:	d905      	bls.n	8008186 <fire_task_push+0x2ca>
		cnt_tim_fire_task=0;
 800817a:	4b05      	ldr	r3, [pc, #20]	; (8008190 <fire_task_push+0x2d4>)
 800817c:	2200      	movs	r2, #0
 800817e:	801a      	strh	r2, [r3, #0]
		fire=0;
 8008180:	4b02      	ldr	r3, [pc, #8]	; (800818c <fire_task_push+0x2d0>)
 8008182:	2200      	movs	r2, #0
 8008184:	701a      	strb	r2, [r3, #0]
	}
	}
}
 8008186:	bf00      	nop
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	2000027c 	.word	0x2000027c
 8008190:	200005b4 	.word	0x200005b4
 8008194:	2000055c 	.word	0x2000055c
 8008198:	20000738 	.word	0x20000738

0800819c <fire_Task>:
void fire_Task(){
 800819c:	b480      	push	{r7}
 800819e:	af00      	add	r7, sp, #0
	if(rc.sw2==1){
 80081a0:	4b19      	ldr	r3, [pc, #100]	; (8008208 <fire_Task+0x6c>)
 80081a2:	7adb      	ldrb	r3, [r3, #11]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d11b      	bne.n	80081e0 <fire_Task+0x44>
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, sw1_cnt);
 80081a8:	4b18      	ldr	r3, [pc, #96]	; (800820c <fire_Task+0x70>)
 80081aa:	881a      	ldrh	r2, [r3, #0]
 80081ac:	4b18      	ldr	r3, [pc, #96]	; (8008210 <fire_Task+0x74>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, sw1_cnt);
 80081b2:	4b16      	ldr	r3, [pc, #88]	; (800820c <fire_Task+0x70>)
 80081b4:	881a      	ldrh	r2, [r3, #0]
 80081b6:	4b16      	ldr	r3, [pc, #88]	; (8008210 <fire_Task+0x74>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	639a      	str	r2, [r3, #56]	; 0x38
		//max 1500
		if(sw1_cnt>=1250){
 80081bc:	4b13      	ldr	r3, [pc, #76]	; (800820c <fire_Task+0x70>)
 80081be:	881b      	ldrh	r3, [r3, #0]
 80081c0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d904      	bls.n	80081d2 <fire_Task+0x36>
			sw1_cnt=1250;
 80081c8:	4b10      	ldr	r3, [pc, #64]	; (800820c <fire_Task+0x70>)
 80081ca:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80081ce:	801a      	strh	r2, [r3, #0]
	else{
		sw1_cnt=1220;
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, sw1_cnt);
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, sw1_cnt);
	}
}
 80081d0:	e014      	b.n	80081fc <fire_Task+0x60>
		else{sw1_cnt++;}
 80081d2:	4b0e      	ldr	r3, [pc, #56]	; (800820c <fire_Task+0x70>)
 80081d4:	881b      	ldrh	r3, [r3, #0]
 80081d6:	3301      	adds	r3, #1
 80081d8:	b29a      	uxth	r2, r3
 80081da:	4b0c      	ldr	r3, [pc, #48]	; (800820c <fire_Task+0x70>)
 80081dc:	801a      	strh	r2, [r3, #0]
}
 80081de:	e00d      	b.n	80081fc <fire_Task+0x60>
		sw1_cnt=1220;
 80081e0:	4b0a      	ldr	r3, [pc, #40]	; (800820c <fire_Task+0x70>)
 80081e2:	f240 42c4 	movw	r2, #1220	; 0x4c4
 80081e6:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, sw1_cnt);
 80081e8:	4b08      	ldr	r3, [pc, #32]	; (800820c <fire_Task+0x70>)
 80081ea:	881a      	ldrh	r2, [r3, #0]
 80081ec:	4b08      	ldr	r3, [pc, #32]	; (8008210 <fire_Task+0x74>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, sw1_cnt);
 80081f2:	4b06      	ldr	r3, [pc, #24]	; (800820c <fire_Task+0x70>)
 80081f4:	881a      	ldrh	r2, [r3, #0]
 80081f6:	4b06      	ldr	r3, [pc, #24]	; (8008210 <fire_Task+0x74>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	639a      	str	r2, [r3, #56]	; 0x38
}
 80081fc:	bf00      	nop
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	20000344 	.word	0x20000344
 800820c:	2000001a 	.word	0x2000001a
 8008210:	20000678 	.word	0x20000678

08008214 <fire_task_open>:

void fire_task_open(){
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af02      	add	r7, sp, #8
	if(rc.key_Shift==1){
 800821a:	4b32      	ldr	r3, [pc, #200]	; (80082e4 <fire_task_open+0xd0>)
 800821c:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8008220:	2b01      	cmp	r3, #1
 8008222:	d12e      	bne.n	8008282 <fire_task_open+0x6e>
		sConfigOC.Pulse = map(60,0,180,500,2500);
 8008224:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8008228:	9300      	str	r3, [sp, #0]
 800822a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800822e:	22b4      	movs	r2, #180	; 0xb4
 8008230:	2100      	movs	r1, #0
 8008232:	203c      	movs	r0, #60	; 0x3c
 8008234:	f7fe f8e8 	bl	8006408 <map>
 8008238:	4603      	mov	r3, r0
 800823a:	461a      	mov	r2, r3
 800823c:	4b2a      	ldr	r3, [pc, #168]	; (80082e8 <fire_task_open+0xd4>)
 800823e:	605a      	str	r2, [r3, #4]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 8008240:	2208      	movs	r2, #8
 8008242:	4929      	ldr	r1, [pc, #164]	; (80082e8 <fire_task_open+0xd4>)
 8008244:	4829      	ldr	r0, [pc, #164]	; (80082ec <fire_task_open+0xd8>)
 8008246:	f7fb f927 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800824a:	2108      	movs	r1, #8
 800824c:	4827      	ldr	r0, [pc, #156]	; (80082ec <fire_task_open+0xd8>)
 800824e:	f7fa ffdd 	bl	800320c <HAL_TIM_PWM_Start>

		sConfigOC.Pulse = map(60,0,180,500,2500);
 8008252:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800825c:	22b4      	movs	r2, #180	; 0xb4
 800825e:	2100      	movs	r1, #0
 8008260:	203c      	movs	r0, #60	; 0x3c
 8008262:	f7fe f8d1 	bl	8006408 <map>
 8008266:	4603      	mov	r3, r0
 8008268:	461a      	mov	r2, r3
 800826a:	4b1f      	ldr	r3, [pc, #124]	; (80082e8 <fire_task_open+0xd4>)
 800826c:	605a      	str	r2, [r3, #4]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4);
 800826e:	220c      	movs	r2, #12
 8008270:	491d      	ldr	r1, [pc, #116]	; (80082e8 <fire_task_open+0xd4>)
 8008272:	481e      	ldr	r0, [pc, #120]	; (80082ec <fire_task_open+0xd8>)
 8008274:	f7fb f910 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8008278:	210c      	movs	r1, #12
 800827a:	481c      	ldr	r0, [pc, #112]	; (80082ec <fire_task_open+0xd8>)
 800827c:	f7fa ffc6 	bl	800320c <HAL_TIM_PWM_Start>

		sConfigOC.Pulse = map(145,0,180,500,2500);
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4);
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
	}
}
 8008280:	e02d      	b.n	80082de <fire_task_open+0xca>
		sConfigOC.Pulse = map(145,0,180,500,2500);
 8008282:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8008286:	9300      	str	r3, [sp, #0]
 8008288:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800828c:	22b4      	movs	r2, #180	; 0xb4
 800828e:	2100      	movs	r1, #0
 8008290:	2091      	movs	r0, #145	; 0x91
 8008292:	f7fe f8b9 	bl	8006408 <map>
 8008296:	4603      	mov	r3, r0
 8008298:	461a      	mov	r2, r3
 800829a:	4b13      	ldr	r3, [pc, #76]	; (80082e8 <fire_task_open+0xd4>)
 800829c:	605a      	str	r2, [r3, #4]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 800829e:	2208      	movs	r2, #8
 80082a0:	4911      	ldr	r1, [pc, #68]	; (80082e8 <fire_task_open+0xd4>)
 80082a2:	4812      	ldr	r0, [pc, #72]	; (80082ec <fire_task_open+0xd8>)
 80082a4:	f7fb f8f8 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80082a8:	2108      	movs	r1, #8
 80082aa:	4810      	ldr	r0, [pc, #64]	; (80082ec <fire_task_open+0xd8>)
 80082ac:	f7fa ffae 	bl	800320c <HAL_TIM_PWM_Start>
		sConfigOC.Pulse = map(145,0,180,500,2500);
 80082b0:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80082b4:	9300      	str	r3, [sp, #0]
 80082b6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80082ba:	22b4      	movs	r2, #180	; 0xb4
 80082bc:	2100      	movs	r1, #0
 80082be:	2091      	movs	r0, #145	; 0x91
 80082c0:	f7fe f8a2 	bl	8006408 <map>
 80082c4:	4603      	mov	r3, r0
 80082c6:	461a      	mov	r2, r3
 80082c8:	4b07      	ldr	r3, [pc, #28]	; (80082e8 <fire_task_open+0xd4>)
 80082ca:	605a      	str	r2, [r3, #4]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4);
 80082cc:	220c      	movs	r2, #12
 80082ce:	4906      	ldr	r1, [pc, #24]	; (80082e8 <fire_task_open+0xd4>)
 80082d0:	4806      	ldr	r0, [pc, #24]	; (80082ec <fire_task_open+0xd8>)
 80082d2:	f7fb f8e1 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80082d6:	210c      	movs	r1, #12
 80082d8:	4804      	ldr	r0, [pc, #16]	; (80082ec <fire_task_open+0xd8>)
 80082da:	f7fa ff97 	bl	800320c <HAL_TIM_PWM_Start>
}
 80082de:	bf00      	nop
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	20000344 	.word	0x20000344
 80082e8:	2000055c 	.word	0x2000055c
 80082ec:	20000738 	.word	0x20000738

080082f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80082f0:	b480      	push	{r7}
 80082f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80082f4:	e7fe      	b.n	80082f4 <Error_Handler+0x4>
	...

080082f8 <mecanum_calculate>:
  * @param input : ccx=+vx(mm/s)  ccy=+vy(mm/s)  ccw=+vw(deg/s)
  *        output: every wheel speed(rpm)
  * @note  1=FR 2=FL 3=BL 4=BR
  */
void mecanum_calculate(struct mecanum *mec)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b08a      	sub	sp, #40	; 0x28
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  static float rotate_ratio_fl;
  static float rotate_ratio_bl;
  static float rotate_ratio_br;
  static float wheel_rpm_ratio;

  rotate_ratio_fr = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	ed93 7a02 	vldr	s14, [r3, #8]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	edd3 7a01 	vldr	s15, [r3, #4]
 800830c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008310:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008314:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	edd3 7a03 	vldr	s15, [r3, #12]
 800831e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	edd3 7a04 	vldr	s15, [r3, #16]
 8008328:	ee37 7a27 	vadd.f32	s14, s14, s15
 800832c:	eddf 6ac8 	vldr	s13, [pc, #800]	; 8008650 <mecanum_calculate+0x358>
 8008330:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008334:	4bc7      	ldr	r3, [pc, #796]	; (8008654 <mecanum_calculate+0x35c>)
 8008336:	edc3 7a00 	vstr	s15, [r3]
  rotate_ratio_fl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset - mec->param.rotate_y_offset) / RADIAN_COEF;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	ed93 7a02 	vldr	s14, [r3, #8]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	edd3 7a01 	vldr	s15, [r3, #4]
 8008346:	ee77 7a27 	vadd.f32	s15, s14, s15
 800834a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800834e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	edd3 7a03 	vldr	s15, [r3, #12]
 8008358:	ee37 7a67 	vsub.f32	s14, s14, s15
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	edd3 7a04 	vldr	s15, [r3, #16]
 8008362:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008366:	eddf 6aba 	vldr	s13, [pc, #744]	; 8008650 <mecanum_calculate+0x358>
 800836a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800836e:	4bba      	ldr	r3, [pc, #744]	; (8008658 <mecanum_calculate+0x360>)
 8008370:	edc3 7a00 	vstr	s15, [r3]
  rotate_ratio_bl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f + mec->param.rotate_x_offset - mec->param.rotate_y_offset) / RADIAN_COEF;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	ed93 7a02 	vldr	s14, [r3, #8]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	edd3 7a01 	vldr	s15, [r3, #4]
 8008380:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008384:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008388:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	edd3 7a03 	vldr	s15, [r3, #12]
 8008392:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	edd3 7a04 	vldr	s15, [r3, #16]
 800839c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80083a0:	eddf 6aab 	vldr	s13, [pc, #684]	; 8008650 <mecanum_calculate+0x358>
 80083a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80083a8:	4bac      	ldr	r3, [pc, #688]	; (800865c <mecanum_calculate+0x364>)
 80083aa:	edc3 7a00 	vstr	s15, [r3]
  rotate_ratio_br = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f + mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	ed93 7a02 	vldr	s14, [r3, #8]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80083ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083be:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80083c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80083cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	edd3 7a04 	vldr	s15, [r3, #16]
 80083d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80083da:	eddf 6a9d 	vldr	s13, [pc, #628]	; 8008650 <mecanum_calculate+0x358>
 80083de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80083e2:	4b9f      	ldr	r3, [pc, #636]	; (8008660 <mecanum_calculate+0x368>)
 80083e4:	edc3 7a00 	vstr	s15, [r3]

  wheel_rpm_ratio = 60.0f / (mec->param.wheel_perimeter * MOTOR_DECELE_RATIO);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	edd3 7a00 	vldr	s15, [r3]
 80083ee:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8008664 <mecanum_calculate+0x36c>
 80083f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80083f6:	eddf 6a9c 	vldr	s13, [pc, #624]	; 8008668 <mecanum_calculate+0x370>
 80083fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083fe:	4b9b      	ldr	r3, [pc, #620]	; (800866c <mecanum_calculate+0x374>)
 8008400:	edc3 7a00 	vstr	s15, [r3]

  MEC_VAL_LIMIT(mec->speed.vx, -MAX_CHASSIS_VX_SPEED, MAX_CHASSIS_VX_SPEED); //mm/s
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	edd3 7a05 	vldr	s15, [r3, #20]
 800840a:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8008670 <mecanum_calculate+0x378>
 800840e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008416:	d803      	bhi.n	8008420 <mecanum_calculate+0x128>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a96      	ldr	r2, [pc, #600]	; (8008674 <mecanum_calculate+0x37c>)
 800841c:	615a      	str	r2, [r3, #20]
 800841e:	e00c      	b.n	800843a <mecanum_calculate+0x142>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	edd3 7a05 	vldr	s15, [r3, #20]
 8008426:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8008678 <mecanum_calculate+0x380>
 800842a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800842e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008432:	db02      	blt.n	800843a <mecanum_calculate+0x142>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4a91      	ldr	r2, [pc, #580]	; (800867c <mecanum_calculate+0x384>)
 8008438:	615a      	str	r2, [r3, #20]
  MEC_VAL_LIMIT(mec->speed.vy, -MAX_CHASSIS_VY_SPEED, MAX_CHASSIS_VY_SPEED); //mm/s
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	edd3 7a06 	vldr	s15, [r3, #24]
 8008440:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8008670 <mecanum_calculate+0x378>
 8008444:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800844c:	d803      	bhi.n	8008456 <mecanum_calculate+0x15e>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a88      	ldr	r2, [pc, #544]	; (8008674 <mecanum_calculate+0x37c>)
 8008452:	619a      	str	r2, [r3, #24]
 8008454:	e00c      	b.n	8008470 <mecanum_calculate+0x178>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	edd3 7a06 	vldr	s15, [r3, #24]
 800845c:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8008678 <mecanum_calculate+0x380>
 8008460:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008468:	db02      	blt.n	8008470 <mecanum_calculate+0x178>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a83      	ldr	r2, [pc, #524]	; (800867c <mecanum_calculate+0x384>)
 800846e:	619a      	str	r2, [r3, #24]
  MEC_VAL_LIMIT(mec->speed.vw, -MAX_CHASSIS_VW_SPEED, MAX_CHASSIS_VW_SPEED); //deg/s
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	edd3 7a07 	vldr	s15, [r3, #28]
 8008476:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8008680 <mecanum_calculate+0x388>
 800847a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800847e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008482:	d803      	bhi.n	800848c <mecanum_calculate+0x194>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a7f      	ldr	r2, [pc, #508]	; (8008684 <mecanum_calculate+0x38c>)
 8008488:	61da      	str	r2, [r3, #28]
 800848a:	e00c      	b.n	80084a6 <mecanum_calculate+0x1ae>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	edd3 7a07 	vldr	s15, [r3, #28]
 8008492:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8008688 <mecanum_calculate+0x390>
 8008496:	eef4 7ac7 	vcmpe.f32	s15, s14
 800849a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800849e:	db02      	blt.n	80084a6 <mecanum_calculate+0x1ae>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a7a      	ldr	r2, [pc, #488]	; (800868c <mecanum_calculate+0x394>)
 80084a4:	61da      	str	r2, [r3, #28]

  float wheel_rpm[4];
  float max = 0;
 80084a6:	f04f 0300 	mov.w	r3, #0
 80084aa:	627b      	str	r3, [r7, #36]	; 0x24

  wheel_rpm[0] = (-mec->speed.vx - mec->speed.vy - mec->speed.vw * rotate_ratio_fr) * wheel_rpm_ratio;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	edd3 7a05 	vldr	s15, [r3, #20]
 80084b2:	eeb1 7a67 	vneg.f32	s14, s15
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	edd3 7a06 	vldr	s15, [r3, #24]
 80084bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	edd3 6a07 	vldr	s13, [r3, #28]
 80084c6:	4b63      	ldr	r3, [pc, #396]	; (8008654 <mecanum_calculate+0x35c>)
 80084c8:	edd3 7a00 	vldr	s15, [r3]
 80084cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80084d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80084d4:	4b65      	ldr	r3, [pc, #404]	; (800866c <mecanum_calculate+0x374>)
 80084d6:	edd3 7a00 	vldr	s15, [r3]
 80084da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084de:	edc7 7a03 	vstr	s15, [r7, #12]
  wheel_rpm[1] = (mec->speed.vx - mec->speed.vy - mec->speed.vw * rotate_ratio_fl) * wheel_rpm_ratio;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	ed93 7a05 	vldr	s14, [r3, #20]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	edd3 7a06 	vldr	s15, [r3, #24]
 80084ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	edd3 6a07 	vldr	s13, [r3, #28]
 80084f8:	4b57      	ldr	r3, [pc, #348]	; (8008658 <mecanum_calculate+0x360>)
 80084fa:	edd3 7a00 	vldr	s15, [r3]
 80084fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008502:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008506:	4b59      	ldr	r3, [pc, #356]	; (800866c <mecanum_calculate+0x374>)
 8008508:	edd3 7a00 	vldr	s15, [r3]
 800850c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008510:	edc7 7a04 	vstr	s15, [r7, #16]
  wheel_rpm[2] = (mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_bl) * wheel_rpm_ratio;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	ed93 7a05 	vldr	s14, [r3, #20]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	edd3 7a06 	vldr	s15, [r3, #24]
 8008520:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	edd3 6a07 	vldr	s13, [r3, #28]
 800852a:	4b4c      	ldr	r3, [pc, #304]	; (800865c <mecanum_calculate+0x364>)
 800852c:	edd3 7a00 	vldr	s15, [r3]
 8008530:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008534:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008538:	4b4c      	ldr	r3, [pc, #304]	; (800866c <mecanum_calculate+0x374>)
 800853a:	edd3 7a00 	vldr	s15, [r3]
 800853e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008542:	edc7 7a05 	vstr	s15, [r7, #20]
  wheel_rpm[3] = (-mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_br) * wheel_rpm_ratio;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	ed93 7a06 	vldr	s14, [r3, #24]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	edd3 7a05 	vldr	s15, [r3, #20]
 8008552:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	edd3 6a07 	vldr	s13, [r3, #28]
 800855c:	4b40      	ldr	r3, [pc, #256]	; (8008660 <mecanum_calculate+0x368>)
 800855e:	edd3 7a00 	vldr	s15, [r3]
 8008562:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008566:	ee37 7a67 	vsub.f32	s14, s14, s15
 800856a:	4b40      	ldr	r3, [pc, #256]	; (800866c <mecanum_calculate+0x374>)
 800856c:	edd3 7a00 	vldr	s15, [r3]
 8008570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008574:	edc7 7a06 	vstr	s15, [r7, #24]

  //find max item
  for (uint8_t i = 0; i < 4; i++)
 8008578:	2300      	movs	r3, #0
 800857a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800857e:	e023      	b.n	80085c8 <mecanum_calculate+0x2d0>
  {
    if (fabs(wheel_rpm[i]) > max)
 8008580:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800858a:	4413      	add	r3, r2
 800858c:	3b1c      	subs	r3, #28
 800858e:	edd3 7a00 	vldr	s15, [r3]
 8008592:	eef0 7ae7 	vabs.f32	s15, s15
 8008596:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800859a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800859e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085a2:	d50c      	bpl.n	80085be <mecanum_calculate+0x2c6>
      max = fabs(wheel_rpm[i]);
 80085a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80085ae:	4413      	add	r3, r2
 80085b0:	3b1c      	subs	r3, #28
 80085b2:	edd3 7a00 	vldr	s15, [r3]
 80085b6:	eef0 7ae7 	vabs.f32	s15, s15
 80085ba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint8_t i = 0; i < 4; i++)
 80085be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085c2:	3301      	adds	r3, #1
 80085c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085cc:	2b03      	cmp	r3, #3
 80085ce:	d9d7      	bls.n	8008580 <mecanum_calculate+0x288>
  }

  //equal proportion
  if (max > MAX_WHEEL_RPM)
 80085d0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80085d4:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8008690 <mecanum_calculate+0x398>
 80085d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80085dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085e0:	dd2a      	ble.n	8008638 <mecanum_calculate+0x340>
  {
    float rate = MAX_WHEEL_RPM / max;
 80085e2:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8008690 <mecanum_calculate+0x398>
 80085e6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80085ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085ee:	edc7 7a07 	vstr	s15, [r7, #28]
    for (uint8_t i = 0; i < 4; i++)
 80085f2:	2300      	movs	r3, #0
 80085f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80085f8:	e01a      	b.n	8008630 <mecanum_calculate+0x338>
      wheel_rpm[i] *= rate;
 80085fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008604:	4413      	add	r3, r2
 8008606:	3b1c      	subs	r3, #28
 8008608:	ed93 7a00 	vldr	s14, [r3]
 800860c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008610:	edd7 7a07 	vldr	s15, [r7, #28]
 8008614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800861e:	4413      	add	r3, r2
 8008620:	3b1c      	subs	r3, #28
 8008622:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t i = 0; i < 4; i++)
 8008626:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800862a:	3301      	adds	r3, #1
 800862c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008630:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008634:	2b03      	cmp	r3, #3
 8008636:	d9e0      	bls.n	80085fa <mecanum_calculate+0x302>
  }
  memcpy(mec->wheel_rpm, wheel_rpm, 4 * sizeof(float));
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	3340      	adds	r3, #64	; 0x40
 800863c:	f107 010c 	add.w	r1, r7, #12
 8008640:	2210      	movs	r2, #16
 8008642:	4618      	mov	r0, r3
 8008644:	f001 f8f4 	bl	8009830 <memcpy>
}
 8008648:	bf00      	nop
 800864a:	3728      	adds	r7, #40	; 0x28
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}
 8008650:	42653333 	.word	0x42653333
 8008654:	20000284 	.word	0x20000284
 8008658:	20000288 	.word	0x20000288
 800865c:	2000028c 	.word	0x2000028c
 8008660:	20000290 	.word	0x20000290
 8008664:	3d579436 	.word	0x3d579436
 8008668:	42700000 	.word	0x42700000
 800866c:	20000294 	.word	0x20000294
 8008670:	c4ce4000 	.word	0xc4ce4000
 8008674:	c4ce4000 	.word	0xc4ce4000
 8008678:	44ce4000 	.word	0x44ce4000
 800867c:	44ce4000 	.word	0x44ce4000
 8008680:	c3160000 	.word	0xc3160000
 8008684:	c3160000 	.word	0xc3160000
 8008688:	43160000 	.word	0x43160000
 800868c:	43160000 	.word	0x43160000
 8008690:	4584d000 	.word	0x4584d000

08008694 <driveWheel>:
 */
#include "motor.h"

const int CaseMotor_MaxSpeed = 30 * 256;

void driveWheel(int16_t *u) {
 8008694:	b580      	push	{r7, lr}
 8008696:	b08c      	sub	sp, #48	; 0x30
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef header;
	uint8_t TxData[8] = { 0 };
 800869c:	f107 030c 	add.w	r3, r7, #12
 80086a0:	2200      	movs	r2, #0
 80086a2:	601a      	str	r2, [r3, #0]
 80086a4:	605a      	str	r2, [r3, #4]
	uint32_t TxMailbox;

	header.StdId = 0x200;
 80086a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086aa:	617b      	str	r3, [r7, #20]
	header.RTR = CAN_RTR_DATA;
 80086ac:	2300      	movs	r3, #0
 80086ae:	623b      	str	r3, [r7, #32]
	header.IDE = CAN_ID_STD;
 80086b0:	2300      	movs	r3, #0
 80086b2:	61fb      	str	r3, [r7, #28]
	header.DLC = 8;
 80086b4:	2308      	movs	r3, #8
 80086b6:	627b      	str	r3, [r7, #36]	; 0x24
	//header.TransmitGlobalTime = DISABLE;

	for (int i = 0; i < 4; i++) {
 80086b8:	2300      	movs	r3, #0
 80086ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086bc:	e050      	b.n	8008760 <driveWheel+0xcc>
		if (CaseMotor_MaxSpeed < u[i]) {
 80086be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c0:	005b      	lsls	r3, r3, #1
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	4413      	add	r3, r2
 80086c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086ca:	461a      	mov	r2, r3
 80086cc:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80086d0:	429a      	cmp	r2, r3
 80086d2:	dd0b      	ble.n	80086ec <driveWheel+0x58>
			u[i] = CaseMotor_MaxSpeed - 1;
 80086d4:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80086d8:	b29b      	uxth	r3, r3
 80086da:	3b01      	subs	r3, #1
 80086dc:	b299      	uxth	r1, r3
 80086de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e0:	005b      	lsls	r3, r3, #1
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	4413      	add	r3, r2
 80086e6:	b20a      	sxth	r2, r1
 80086e8:	801a      	strh	r2, [r3, #0]
 80086ea:	e017      	b.n	800871c <driveWheel+0x88>
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 80086ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ee:	005b      	lsls	r3, r3, #1
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	4413      	add	r3, r2
 80086f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086f8:	461a      	mov	r2, r3
 80086fa:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80086fe:	425b      	negs	r3, r3
 8008700:	429a      	cmp	r2, r3
 8008702:	da0b      	bge.n	800871c <driveWheel+0x88>
			u[i] = -CaseMotor_MaxSpeed + 1;
 8008704:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8008708:	b29b      	uxth	r3, r3
 800870a:	f1c3 0301 	rsb	r3, r3, #1
 800870e:	b299      	uxth	r1, r3
 8008710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008712:	005b      	lsls	r3, r3, #1
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	4413      	add	r3, r2
 8008718:	b20a      	sxth	r2, r1
 800871a:	801a      	strh	r2, [r3, #0]
		}
		TxData[i * 2] = u[i] >> 8;
 800871c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871e:	005b      	lsls	r3, r3, #1
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	4413      	add	r3, r2
 8008724:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008728:	121b      	asrs	r3, r3, #8
 800872a:	b21a      	sxth	r2, r3
 800872c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800872e:	005b      	lsls	r3, r3, #1
 8008730:	b2d2      	uxtb	r2, r2
 8008732:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8008736:	440b      	add	r3, r1
 8008738:	f803 2c24 	strb.w	r2, [r3, #-36]
		TxData[i * 2 + 1] = u[i] & 0xFF;
 800873c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800873e:	005b      	lsls	r3, r3, #1
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	4413      	add	r3, r2
 8008744:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874a:	005b      	lsls	r3, r3, #1
 800874c:	3301      	adds	r3, #1
 800874e:	b2d2      	uxtb	r2, r2
 8008750:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8008754:	440b      	add	r3, r1
 8008756:	f803 2c24 	strb.w	r2, [r3, #-36]
	for (int i = 0; i < 4; i++) {
 800875a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875c:	3301      	adds	r3, #1
 800875e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008762:	2b03      	cmp	r3, #3
 8008764:	ddab      	ble.n	80086be <driveWheel+0x2a>
	}

	HAL_CAN_AddTxMessage(&hcan2, &header, TxData, &TxMailbox);
 8008766:	f107 0308 	add.w	r3, r7, #8
 800876a:	f107 020c 	add.w	r2, r7, #12
 800876e:	f107 0114 	add.w	r1, r7, #20
 8008772:	4803      	ldr	r0, [pc, #12]	; (8008780 <driveWheel+0xec>)
 8008774:	f7f8 feac 	bl	80014d0 <HAL_CAN_AddTxMessage>

}
 8008778:	bf00      	nop
 800877a:	3730      	adds	r7, #48	; 0x30
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}
 8008780:	200002f4 	.word	0x200002f4

08008784 <driveGimbalMotors>:

void driveGimbalMotors(int16_t *u) {
 8008784:	b580      	push	{r7, lr}
 8008786:	b08c      	sub	sp, #48	; 0x30
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef header;
	uint8_t TxData[8] = { 0 };
 800878c:	f107 030c 	add.w	r3, r7, #12
 8008790:	2200      	movs	r2, #0
 8008792:	601a      	str	r2, [r3, #0]
 8008794:	605a      	str	r2, [r3, #4]
	uint32_t TxMailbox;

	header.StdId = 0x1ff;
 8008796:	f240 13ff 	movw	r3, #511	; 0x1ff
 800879a:	617b      	str	r3, [r7, #20]
	header.RTR = CAN_RTR_DATA;
 800879c:	2300      	movs	r3, #0
 800879e:	623b      	str	r3, [r7, #32]
	header.IDE = CAN_ID_STD;
 80087a0:	2300      	movs	r3, #0
 80087a2:	61fb      	str	r3, [r7, #28]
	header.DLC = 8;
 80087a4:	2308      	movs	r3, #8
 80087a6:	627b      	str	r3, [r7, #36]	; 0x24
	//header.TransmitGlobalTime = DISABLE;

	for (int i = 0; i < 4; i++) {
 80087a8:	2300      	movs	r3, #0
 80087aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087ac:	e053      	b.n	8008856 <driveGimbalMotors+0xd2>
		if(i==2){
 80087ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d12e      	bne.n	8008812 <driveGimbalMotors+0x8e>
		if (CaseMotor_MaxSpeed < u[i]) {
 80087b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b6:	005b      	lsls	r3, r3, #1
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	4413      	add	r3, r2
 80087bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087c0:	461a      	mov	r2, r3
 80087c2:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80087c6:	429a      	cmp	r2, r3
 80087c8:	dd0b      	ble.n	80087e2 <driveGimbalMotors+0x5e>
			u[i] = CaseMotor_MaxSpeed - 1;
 80087ca:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	3b01      	subs	r3, #1
 80087d2:	b299      	uxth	r1, r3
 80087d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d6:	005b      	lsls	r3, r3, #1
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	4413      	add	r3, r2
 80087dc:	b20a      	sxth	r2, r1
 80087de:	801a      	strh	r2, [r3, #0]
 80087e0:	e017      	b.n	8008812 <driveGimbalMotors+0x8e>
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 80087e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e4:	005b      	lsls	r3, r3, #1
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	4413      	add	r3, r2
 80087ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087ee:	461a      	mov	r2, r3
 80087f0:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80087f4:	425b      	negs	r3, r3
 80087f6:	429a      	cmp	r2, r3
 80087f8:	da0b      	bge.n	8008812 <driveGimbalMotors+0x8e>
			u[i] = -CaseMotor_MaxSpeed + 1;
 80087fa:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80087fe:	b29b      	uxth	r3, r3
 8008800:	f1c3 0301 	rsb	r3, r3, #1
 8008804:	b299      	uxth	r1, r3
 8008806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008808:	005b      	lsls	r3, r3, #1
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	4413      	add	r3, r2
 800880e:	b20a      	sxth	r2, r1
 8008810:	801a      	strh	r2, [r3, #0]
		}
		}
		TxData[i * 2] = u[i] >> 8;
 8008812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008814:	005b      	lsls	r3, r3, #1
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	4413      	add	r3, r2
 800881a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800881e:	121b      	asrs	r3, r3, #8
 8008820:	b21a      	sxth	r2, r3
 8008822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008824:	005b      	lsls	r3, r3, #1
 8008826:	b2d2      	uxtb	r2, r2
 8008828:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800882c:	440b      	add	r3, r1
 800882e:	f803 2c24 	strb.w	r2, [r3, #-36]
		TxData[i * 2 + 1] = u[i] & 0xFF;
 8008832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008834:	005b      	lsls	r3, r3, #1
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	4413      	add	r3, r2
 800883a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800883e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008840:	005b      	lsls	r3, r3, #1
 8008842:	3301      	adds	r3, #1
 8008844:	b2d2      	uxtb	r2, r2
 8008846:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800884a:	440b      	add	r3, r1
 800884c:	f803 2c24 	strb.w	r2, [r3, #-36]
	for (int i = 0; i < 4; i++) {
 8008850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008852:	3301      	adds	r3, #1
 8008854:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008858:	2b03      	cmp	r3, #3
 800885a:	dda8      	ble.n	80087ae <driveGimbalMotors+0x2a>
	}

	HAL_CAN_AddTxMessage(&hcan1, &header, TxData, &TxMailbox);
 800885c:	f107 0308 	add.w	r3, r7, #8
 8008860:	f107 020c 	add.w	r2, r7, #12
 8008864:	f107 0114 	add.w	r1, r7, #20
 8008868:	4803      	ldr	r0, [pc, #12]	; (8008878 <driveGimbalMotors+0xf4>)
 800886a:	f7f8 fe31 	bl	80014d0 <HAL_CAN_AddTxMessage>
}
 800886e:	bf00      	nop
 8008870:	3730      	adds	r7, #48	; 0x30
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	2000031c 	.word	0x2000031c

0800887c <pidExecute>:
 *  Created on: 2019/03/12
 *      Author: User
 */
#include "pid.h"

float pidExecute(_pid_t *pid) {
 800887c:	b480      	push	{r7}
 800887e:	b085      	sub	sp, #20
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
	float u = 0;
 8008884:	f04f 0300 	mov.w	r3, #0
 8008888:	60fb      	str	r3, [r7, #12]
	pid->integralOut += pid->i * pid->error * (pid->t/1000.0f);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	ed93 7a07 	vldr	s14, [r3, #28]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	edd3 6a02 	vldr	s13, [r3, #8]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800889c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	ed93 6a00 	vldr	s12, [r3]
 80088a6:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80089e4 <pidExecute+0x168>
 80088aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80088b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	edc3 7a07 	vstr	s15, [r3, #28]
	if (pid->integralOutLimit < pid->integralOut) pid->integralOut = pid->integralOutLimit;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	ed93 7a05 	vldr	s14, [r3, #20]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	edd3 7a07 	vldr	s15, [r3, #28]
 80088c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80088cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088d0:	d504      	bpl.n	80088dc <pidExecute+0x60>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	695a      	ldr	r2, [r3, #20]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	61da      	str	r2, [r3, #28]
 80088da:	e014      	b.n	8008906 <pidExecute+0x8a>
	else if (pid->integralOut < -pid->integralOutLimit) pid->integralOut = -pid->integralOutLimit;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	ed93 7a07 	vldr	s14, [r3, #28]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	edd3 7a05 	vldr	s15, [r3, #20]
 80088e8:	eef1 7a67 	vneg.f32	s15, s15
 80088ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80088f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088f4:	d507      	bpl.n	8008906 <pidExecute+0x8a>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	edd3 7a05 	vldr	s15, [r3, #20]
 80088fc:	eef1 7a67 	vneg.f32	s15, s15
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	edc3 7a07 	vstr	s15, [r3, #28]
	pid->differentialFilter = pid->differentialFilter * pid->differentialFilterRate + (pid->d * (pid->error - pid->lastError)*(1000.0f/pid->t)) * (1 - pid->differentialFilterRate);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	edd3 7a06 	vldr	s15, [r3, #24]
 8008912:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	edd3 6a03 	vldr	s13, [r3, #12]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	edd3 7a08 	vldr	s15, [r3, #32]
 8008928:	ee76 7a67 	vsub.f32	s15, s12, s15
 800892c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	ed93 6a00 	vldr	s12, [r3]
 8008936:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80089e4 <pidExecute+0x168>
 800893a:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800893e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	edd3 7a06 	vldr	s15, [r3, #24]
 8008948:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800894c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8008950:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	u = pid->p * pid->error + pid->integralOut + pid->differentialFilter;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	ed93 7a01 	vldr	s14, [r3, #4]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800896a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	edd3 7a07 	vldr	s15, [r3, #28]
 8008974:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800897e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008982:	edc7 7a03 	vstr	s15, [r7, #12]
	if (pid->outLimit < u) u = pid->outLimit;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	edd3 7a04 	vldr	s15, [r3, #16]
 800898c:	ed97 7a03 	vldr	s14, [r7, #12]
 8008990:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008998:	dd03      	ble.n	80089a2 <pidExecute+0x126>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	60fb      	str	r3, [r7, #12]
 80089a0:	e012      	b.n	80089c8 <pidExecute+0x14c>
	else if (u < -pid->outLimit)u = -pid->outLimit;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	edd3 7a04 	vldr	s15, [r3, #16]
 80089a8:	eef1 7a67 	vneg.f32	s15, s15
 80089ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80089b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80089b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089b8:	d506      	bpl.n	80089c8 <pidExecute+0x14c>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80089c0:	eef1 7a67 	vneg.f32	s15, s15
 80089c4:	edc7 7a03 	vstr	s15, [r7, #12]
	pid->lastError = pid->error;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	621a      	str	r2, [r3, #32]
	return u;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	ee07 3a90 	vmov	s15, r3
}
 80089d6:	eeb0 0a67 	vmov.f32	s0, s15
 80089da:	3714      	adds	r7, #20
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr
 80089e4:	447a0000 	.word	0x447a0000

080089e8 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 80089ec:	4b17      	ldr	r3, [pc, #92]	; (8008a4c <MX_SPI5_Init+0x64>)
 80089ee:	4a18      	ldr	r2, [pc, #96]	; (8008a50 <MX_SPI5_Init+0x68>)
 80089f0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80089f2:	4b16      	ldr	r3, [pc, #88]	; (8008a4c <MX_SPI5_Init+0x64>)
 80089f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80089f8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80089fa:	4b14      	ldr	r3, [pc, #80]	; (8008a4c <MX_SPI5_Init+0x64>)
 80089fc:	2200      	movs	r2, #0
 80089fe:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8008a00:	4b12      	ldr	r3, [pc, #72]	; (8008a4c <MX_SPI5_Init+0x64>)
 8008a02:	2200      	movs	r2, #0
 8008a04:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a06:	4b11      	ldr	r3, [pc, #68]	; (8008a4c <MX_SPI5_Init+0x64>)
 8008a08:	2200      	movs	r2, #0
 8008a0a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008a0c:	4b0f      	ldr	r3, [pc, #60]	; (8008a4c <MX_SPI5_Init+0x64>)
 8008a0e:	2200      	movs	r2, #0
 8008a10:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8008a12:	4b0e      	ldr	r3, [pc, #56]	; (8008a4c <MX_SPI5_Init+0x64>)
 8008a14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a18:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8008a1a:	4b0c      	ldr	r3, [pc, #48]	; (8008a4c <MX_SPI5_Init+0x64>)
 8008a1c:	2230      	movs	r2, #48	; 0x30
 8008a1e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008a20:	4b0a      	ldr	r3, [pc, #40]	; (8008a4c <MX_SPI5_Init+0x64>)
 8008a22:	2200      	movs	r2, #0
 8008a24:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8008a26:	4b09      	ldr	r3, [pc, #36]	; (8008a4c <MX_SPI5_Init+0x64>)
 8008a28:	2200      	movs	r2, #0
 8008a2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a2c:	4b07      	ldr	r3, [pc, #28]	; (8008a4c <MX_SPI5_Init+0x64>)
 8008a2e:	2200      	movs	r2, #0
 8008a30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8008a32:	4b06      	ldr	r3, [pc, #24]	; (8008a4c <MX_SPI5_Init+0x64>)
 8008a34:	220a      	movs	r2, #10
 8008a36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8008a38:	4804      	ldr	r0, [pc, #16]	; (8008a4c <MX_SPI5_Init+0x64>)
 8008a3a:	f7fa f8bb 	bl	8002bb4 <HAL_SPI_Init>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d001      	beq.n	8008a48 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8008a44:	f7ff fc54 	bl	80082f0 <Error_Handler>
  }

}
 8008a48:	bf00      	nop
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	20000620 	.word	0x20000620
 8008a50:	40015000 	.word	0x40015000

08008a54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b08a      	sub	sp, #40	; 0x28
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a5c:	f107 0314 	add.w	r3, r7, #20
 8008a60:	2200      	movs	r2, #0
 8008a62:	601a      	str	r2, [r3, #0]
 8008a64:	605a      	str	r2, [r3, #4]
 8008a66:	609a      	str	r2, [r3, #8]
 8008a68:	60da      	str	r2, [r3, #12]
 8008a6a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a19      	ldr	r2, [pc, #100]	; (8008ad8 <HAL_SPI_MspInit+0x84>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d12c      	bne.n	8008ad0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8008a76:	2300      	movs	r3, #0
 8008a78:	613b      	str	r3, [r7, #16]
 8008a7a:	4b18      	ldr	r3, [pc, #96]	; (8008adc <HAL_SPI_MspInit+0x88>)
 8008a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a7e:	4a17      	ldr	r2, [pc, #92]	; (8008adc <HAL_SPI_MspInit+0x88>)
 8008a80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a84:	6453      	str	r3, [r2, #68]	; 0x44
 8008a86:	4b15      	ldr	r3, [pc, #84]	; (8008adc <HAL_SPI_MspInit+0x88>)
 8008a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a8e:	613b      	str	r3, [r7, #16]
 8008a90:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008a92:	2300      	movs	r3, #0
 8008a94:	60fb      	str	r3, [r7, #12]
 8008a96:	4b11      	ldr	r3, [pc, #68]	; (8008adc <HAL_SPI_MspInit+0x88>)
 8008a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a9a:	4a10      	ldr	r2, [pc, #64]	; (8008adc <HAL_SPI_MspInit+0x88>)
 8008a9c:	f043 0320 	orr.w	r3, r3, #32
 8008aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8008aa2:	4b0e      	ldr	r3, [pc, #56]	; (8008adc <HAL_SPI_MspInit+0x88>)
 8008aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa6:	f003 0320 	and.w	r3, r3, #32
 8008aaa:	60fb      	str	r3, [r7, #12]
 8008aac:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 8008aae:	f44f 7360 	mov.w	r3, #896	; 0x380
 8008ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ab4:	2302      	movs	r3, #2
 8008ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008abc:	2303      	movs	r3, #3
 8008abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8008ac0:	2305      	movs	r3, #5
 8008ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008ac4:	f107 0314 	add.w	r3, r7, #20
 8008ac8:	4619      	mov	r1, r3
 8008aca:	4805      	ldr	r0, [pc, #20]	; (8008ae0 <HAL_SPI_MspInit+0x8c>)
 8008acc:	f7f9 fa72 	bl	8001fb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8008ad0:	bf00      	nop
 8008ad2:	3728      	adds	r7, #40	; 0x28
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	40015000 	.word	0x40015000
 8008adc:	40023800 	.word	0x40023800
 8008ae0:	40021400 	.word	0x40021400

08008ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008aea:	2300      	movs	r3, #0
 8008aec:	607b      	str	r3, [r7, #4]
 8008aee:	4b10      	ldr	r3, [pc, #64]	; (8008b30 <HAL_MspInit+0x4c>)
 8008af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008af2:	4a0f      	ldr	r2, [pc, #60]	; (8008b30 <HAL_MspInit+0x4c>)
 8008af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008af8:	6453      	str	r3, [r2, #68]	; 0x44
 8008afa:	4b0d      	ldr	r3, [pc, #52]	; (8008b30 <HAL_MspInit+0x4c>)
 8008afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b02:	607b      	str	r3, [r7, #4]
 8008b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008b06:	2300      	movs	r3, #0
 8008b08:	603b      	str	r3, [r7, #0]
 8008b0a:	4b09      	ldr	r3, [pc, #36]	; (8008b30 <HAL_MspInit+0x4c>)
 8008b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b0e:	4a08      	ldr	r2, [pc, #32]	; (8008b30 <HAL_MspInit+0x4c>)
 8008b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b14:	6413      	str	r3, [r2, #64]	; 0x40
 8008b16:	4b06      	ldr	r3, [pc, #24]	; (8008b30 <HAL_MspInit+0x4c>)
 8008b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b1e:	603b      	str	r3, [r7, #0]
 8008b20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008b22:	bf00      	nop
 8008b24:	370c      	adds	r7, #12
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	40023800 	.word	0x40023800

08008b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008b34:	b480      	push	{r7}
 8008b36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008b38:	bf00      	nop
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr

08008b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008b42:	b480      	push	{r7}
 8008b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008b46:	e7fe      	b.n	8008b46 <HardFault_Handler+0x4>

08008b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008b4c:	e7fe      	b.n	8008b4c <MemManage_Handler+0x4>

08008b4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008b52:	e7fe      	b.n	8008b52 <BusFault_Handler+0x4>

08008b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008b54:	b480      	push	{r7}
 8008b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008b58:	e7fe      	b.n	8008b58 <UsageFault_Handler+0x4>

08008b5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008b5e:	bf00      	nop
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008b6c:	bf00      	nop
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr

08008b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008b76:	b480      	push	{r7}
 8008b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008b7a:	bf00      	nop
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008b88:	f7f8 fa40 	bl	800100c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008b8c:	bf00      	nop
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8008b94:	4802      	ldr	r0, [pc, #8]	; (8008ba0 <CAN1_RX0_IRQHandler+0x10>)
 8008b96:	f7f8 feaf 	bl	80018f8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8008b9a:	bf00      	nop
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	2000031c 	.word	0x2000031c

08008ba4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8008ba8:	4802      	ldr	r0, [pc, #8]	; (8008bb4 <CAN1_RX1_IRQHandler+0x10>)
 8008baa:	f7f8 fea5 	bl	80018f8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8008bae:	bf00      	nop
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	2000031c 	.word	0x2000031c

08008bb8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008bbc:	4802      	ldr	r0, [pc, #8]	; (8008bc8 <USART1_IRQHandler+0x10>)
 8008bbe:	f7fb f9b5 	bl	8003f2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008bc2:	bf00      	nop
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	200007f8 	.word	0x200007f8

08008bcc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008bd0:	4802      	ldr	r0, [pc, #8]	; (8008bdc <TIM6_DAC_IRQHandler+0x10>)
 8008bd2:	f7fa fb59 	bl	8003288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8008bd6:	bf00      	nop
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	200006b8 	.word	0x200006b8

08008be0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8008be4:	4802      	ldr	r0, [pc, #8]	; (8008bf0 <CAN2_RX0_IRQHandler+0x10>)
 8008be6:	f7f8 fe87 	bl	80018f8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8008bea:	bf00      	nop
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	200002f4 	.word	0x200002f4

08008bf4 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8008bf8:	4802      	ldr	r0, [pc, #8]	; (8008c04 <CAN2_RX1_IRQHandler+0x10>)
 8008bfa:	f7f8 fe7d 	bl	80018f8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8008bfe:	bf00      	nop
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	200002f4 	.word	0x200002f4

08008c08 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8008c0c:	4802      	ldr	r0, [pc, #8]	; (8008c18 <USART6_IRQHandler+0x10>)
 8008c0e:	f7fb f98d 	bl	8003f2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8008c12:	bf00      	nop
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	20000878 	.word	0x20000878

08008c1c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b086      	sub	sp, #24
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c28:	2300      	movs	r3, #0
 8008c2a:	617b      	str	r3, [r7, #20]
 8008c2c:	e00a      	b.n	8008c44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008c2e:	f3af 8000 	nop.w
 8008c32:	4601      	mov	r1, r0
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	1c5a      	adds	r2, r3, #1
 8008c38:	60ba      	str	r2, [r7, #8]
 8008c3a:	b2ca      	uxtb	r2, r1
 8008c3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	3301      	adds	r3, #1
 8008c42:	617b      	str	r3, [r7, #20]
 8008c44:	697a      	ldr	r2, [r7, #20]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	dbf0      	blt.n	8008c2e <_read+0x12>
	}

return len;
 8008c4c:	687b      	ldr	r3, [r7, #4]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3718      	adds	r7, #24
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <_write>:

int _write(int file, char *ptr, int len)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b086      	sub	sp, #24
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	60f8      	str	r0, [r7, #12]
 8008c5e:	60b9      	str	r1, [r7, #8]
 8008c60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c62:	2300      	movs	r3, #0
 8008c64:	617b      	str	r3, [r7, #20]
 8008c66:	e009      	b.n	8008c7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	1c5a      	adds	r2, r3, #1
 8008c6c:	60ba      	str	r2, [r7, #8]
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7fd fbb7 	bl	80063e4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	617b      	str	r3, [r7, #20]
 8008c7c:	697a      	ldr	r2, [r7, #20]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	dbf1      	blt.n	8008c68 <_write+0x12>
	}
	return len;
 8008c84:	687b      	ldr	r3, [r7, #4]
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3718      	adds	r7, #24
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <_close>:


int _close(int file)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b083      	sub	sp, #12
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
	return -1;
 8008c96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	370c      	adds	r7, #12
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr

08008ca6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008ca6:	b480      	push	{r7}
 8008ca8:	b083      	sub	sp, #12
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008cb6:	605a      	str	r2, [r3, #4]
	return 0;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	370c      	adds	r7, #12
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr

08008cc6 <_isatty>:

int _isatty(int file)
{
 8008cc6:	b480      	push	{r7}
 8008cc8:	b083      	sub	sp, #12
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
	return 1;
 8008cce:	2301      	movs	r3, #1
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b085      	sub	sp, #20
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	60b9      	str	r1, [r7, #8]
 8008ce6:	607a      	str	r2, [r7, #4]
	return 0;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3714      	adds	r7, #20
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
	...

08008cf8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008d00:	4b11      	ldr	r3, [pc, #68]	; (8008d48 <_sbrk+0x50>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d102      	bne.n	8008d0e <_sbrk+0x16>
		heap_end = &end;
 8008d08:	4b0f      	ldr	r3, [pc, #60]	; (8008d48 <_sbrk+0x50>)
 8008d0a:	4a10      	ldr	r2, [pc, #64]	; (8008d4c <_sbrk+0x54>)
 8008d0c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008d0e:	4b0e      	ldr	r3, [pc, #56]	; (8008d48 <_sbrk+0x50>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008d14:	4b0c      	ldr	r3, [pc, #48]	; (8008d48 <_sbrk+0x50>)
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4413      	add	r3, r2
 8008d1c:	466a      	mov	r2, sp
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d907      	bls.n	8008d32 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008d22:	f000 fd5b 	bl	80097dc <__errno>
 8008d26:	4602      	mov	r2, r0
 8008d28:	230c      	movs	r3, #12
 8008d2a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8008d30:	e006      	b.n	8008d40 <_sbrk+0x48>
	}

	heap_end += incr;
 8008d32:	4b05      	ldr	r3, [pc, #20]	; (8008d48 <_sbrk+0x50>)
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4413      	add	r3, r2
 8008d3a:	4a03      	ldr	r2, [pc, #12]	; (8008d48 <_sbrk+0x50>)
 8008d3c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	20000298 	.word	0x20000298
 8008d4c:	200008c0 	.word	0x200008c0

08008d50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008d50:	b480      	push	{r7}
 8008d52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008d54:	4b16      	ldr	r3, [pc, #88]	; (8008db0 <SystemInit+0x60>)
 8008d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d5a:	4a15      	ldr	r2, [pc, #84]	; (8008db0 <SystemInit+0x60>)
 8008d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008d64:	4b13      	ldr	r3, [pc, #76]	; (8008db4 <SystemInit+0x64>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a12      	ldr	r2, [pc, #72]	; (8008db4 <SystemInit+0x64>)
 8008d6a:	f043 0301 	orr.w	r3, r3, #1
 8008d6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008d70:	4b10      	ldr	r3, [pc, #64]	; (8008db4 <SystemInit+0x64>)
 8008d72:	2200      	movs	r2, #0
 8008d74:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008d76:	4b0f      	ldr	r3, [pc, #60]	; (8008db4 <SystemInit+0x64>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a0e      	ldr	r2, [pc, #56]	; (8008db4 <SystemInit+0x64>)
 8008d7c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8008d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d84:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8008d86:	4b0b      	ldr	r3, [pc, #44]	; (8008db4 <SystemInit+0x64>)
 8008d88:	4a0b      	ldr	r2, [pc, #44]	; (8008db8 <SystemInit+0x68>)
 8008d8a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008d8c:	4b09      	ldr	r3, [pc, #36]	; (8008db4 <SystemInit+0x64>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a08      	ldr	r2, [pc, #32]	; (8008db4 <SystemInit+0x64>)
 8008d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d96:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008d98:	4b06      	ldr	r3, [pc, #24]	; (8008db4 <SystemInit+0x64>)
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008d9e:	4b04      	ldr	r3, [pc, #16]	; (8008db0 <SystemInit+0x60>)
 8008da0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008da4:	609a      	str	r2, [r3, #8]
#endif
}
 8008da6:	bf00      	nop
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr
 8008db0:	e000ed00 	.word	0xe000ed00
 8008db4:	40023800 	.word	0x40023800
 8008db8:	24003010 	.word	0x24003010

08008dbc <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	af00      	add	r7, sp, #0

  htim1.Instance = TIM1;
 8008dc0:	4b3d      	ldr	r3, [pc, #244]	; (8008eb8 <MX_TIM1_Init+0xfc>)
 8008dc2:	4a3e      	ldr	r2, [pc, #248]	; (8008ebc <MX_TIM1_Init+0x100>)
 8008dc4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8008dc6:	4b3c      	ldr	r3, [pc, #240]	; (8008eb8 <MX_TIM1_Init+0xfc>)
 8008dc8:	22a7      	movs	r2, #167	; 0xa7
 8008dca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008dcc:	4b3a      	ldr	r3, [pc, #232]	; (8008eb8 <MX_TIM1_Init+0xfc>)
 8008dce:	2200      	movs	r2, #0
 8008dd0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8008dd2:	4b39      	ldr	r3, [pc, #228]	; (8008eb8 <MX_TIM1_Init+0xfc>)
 8008dd4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8008dd8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008dda:	4b37      	ldr	r3, [pc, #220]	; (8008eb8 <MX_TIM1_Init+0xfc>)
 8008ddc:	2200      	movs	r2, #0
 8008dde:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008de0:	4b35      	ldr	r3, [pc, #212]	; (8008eb8 <MX_TIM1_Init+0xfc>)
 8008de2:	2200      	movs	r2, #0
 8008de4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008de6:	4b34      	ldr	r3, [pc, #208]	; (8008eb8 <MX_TIM1_Init+0xfc>)
 8008de8:	2200      	movs	r2, #0
 8008dea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008dec:	4832      	ldr	r0, [pc, #200]	; (8008eb8 <MX_TIM1_Init+0xfc>)
 8008dee:	f7fa f9e2 	bl	80031b6 <HAL_TIM_PWM_Init>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d001      	beq.n	8008dfc <MX_TIM1_Init+0x40>
  {
    Error_Handler();
 8008df8:	f7ff fa7a 	bl	80082f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008dfc:	4b30      	ldr	r3, [pc, #192]	; (8008ec0 <MX_TIM1_Init+0x104>)
 8008dfe:	2200      	movs	r2, #0
 8008e00:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008e02:	4b2f      	ldr	r3, [pc, #188]	; (8008ec0 <MX_TIM1_Init+0x104>)
 8008e04:	2200      	movs	r2, #0
 8008e06:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008e08:	492d      	ldr	r1, [pc, #180]	; (8008ec0 <MX_TIM1_Init+0x104>)
 8008e0a:	482b      	ldr	r0, [pc, #172]	; (8008eb8 <MX_TIM1_Init+0xfc>)
 8008e0c:	f7fa fea7 	bl	8003b5e <HAL_TIMEx_MasterConfigSynchronization>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d001      	beq.n	8008e1a <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8008e16:	f7ff fa6b 	bl	80082f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008e1a:	4b2a      	ldr	r3, [pc, #168]	; (8008ec4 <MX_TIM1_Init+0x108>)
 8008e1c:	2260      	movs	r2, #96	; 0x60
 8008e1e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1000;
 8008e20:	4b28      	ldr	r3, [pc, #160]	; (8008ec4 <MX_TIM1_Init+0x108>)
 8008e22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008e26:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008e28:	4b26      	ldr	r3, [pc, #152]	; (8008ec4 <MX_TIM1_Init+0x108>)
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008e2e:	4b25      	ldr	r3, [pc, #148]	; (8008ec4 <MX_TIM1_Init+0x108>)
 8008e30:	2200      	movs	r2, #0
 8008e32:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008e34:	4b23      	ldr	r3, [pc, #140]	; (8008ec4 <MX_TIM1_Init+0x108>)
 8008e36:	2200      	movs	r2, #0
 8008e38:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008e3a:	4b22      	ldr	r3, [pc, #136]	; (8008ec4 <MX_TIM1_Init+0x108>)
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008e40:	4b20      	ldr	r3, [pc, #128]	; (8008ec4 <MX_TIM1_Init+0x108>)
 8008e42:	2200      	movs	r2, #0
 8008e44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008e46:	2200      	movs	r2, #0
 8008e48:	491e      	ldr	r1, [pc, #120]	; (8008ec4 <MX_TIM1_Init+0x108>)
 8008e4a:	481b      	ldr	r0, [pc, #108]	; (8008eb8 <MX_TIM1_Init+0xfc>)
 8008e4c:	f7fa fb24 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d001      	beq.n	8008e5a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8008e56:	f7ff fa4b 	bl	80082f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008e5a:	220c      	movs	r2, #12
 8008e5c:	4919      	ldr	r1, [pc, #100]	; (8008ec4 <MX_TIM1_Init+0x108>)
 8008e5e:	4816      	ldr	r0, [pc, #88]	; (8008eb8 <MX_TIM1_Init+0xfc>)
 8008e60:	f7fa fb1a 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d001      	beq.n	8008e6e <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 8008e6a:	f7ff fa41 	bl	80082f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008e6e:	4b16      	ldr	r3, [pc, #88]	; (8008ec8 <MX_TIM1_Init+0x10c>)
 8008e70:	2200      	movs	r2, #0
 8008e72:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008e74:	4b14      	ldr	r3, [pc, #80]	; (8008ec8 <MX_TIM1_Init+0x10c>)
 8008e76:	2200      	movs	r2, #0
 8008e78:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008e7a:	4b13      	ldr	r3, [pc, #76]	; (8008ec8 <MX_TIM1_Init+0x10c>)
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008e80:	4b11      	ldr	r3, [pc, #68]	; (8008ec8 <MX_TIM1_Init+0x10c>)
 8008e82:	2200      	movs	r2, #0
 8008e84:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008e86:	4b10      	ldr	r3, [pc, #64]	; (8008ec8 <MX_TIM1_Init+0x10c>)
 8008e88:	2200      	movs	r2, #0
 8008e8a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008e8c:	4b0e      	ldr	r3, [pc, #56]	; (8008ec8 <MX_TIM1_Init+0x10c>)
 8008e8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008e92:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008e94:	4b0c      	ldr	r3, [pc, #48]	; (8008ec8 <MX_TIM1_Init+0x10c>)
 8008e96:	2200      	movs	r2, #0
 8008e98:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008e9a:	490b      	ldr	r1, [pc, #44]	; (8008ec8 <MX_TIM1_Init+0x10c>)
 8008e9c:	4806      	ldr	r0, [pc, #24]	; (8008eb8 <MX_TIM1_Init+0xfc>)
 8008e9e:	f7fa fea3 	bl	8003be8 <HAL_TIMEx_ConfigBreakDeadTime>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d001      	beq.n	8008eac <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8008ea8:	f7ff fa22 	bl	80082f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8008eac:	4802      	ldr	r0, [pc, #8]	; (8008eb8 <MX_TIM1_Init+0xfc>)
 8008eae:	f000 f9f9 	bl	80092a4 <HAL_TIM_MspPostInit>

}
 8008eb2:	bf00      	nop
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	200006f8 	.word	0x200006f8
 8008ebc:	40010000 	.word	0x40010000
 8008ec0:	200003b4 	.word	0x200003b4
 8008ec4:	2000055c 	.word	0x2000055c
 8008ec8:	20000594 	.word	0x20000594

08008ecc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	af00      	add	r7, sp, #0

  htim2.Instance = TIM2;
 8008ed0:	4b31      	ldr	r3, [pc, #196]	; (8008f98 <MX_TIM2_Init+0xcc>)
 8008ed2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008ed6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84;
 8008ed8:	4b2f      	ldr	r3, [pc, #188]	; (8008f98 <MX_TIM2_Init+0xcc>)
 8008eda:	2254      	movs	r2, #84	; 0x54
 8008edc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008ede:	4b2e      	ldr	r3, [pc, #184]	; (8008f98 <MX_TIM2_Init+0xcc>)
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8008ee4:	4b2c      	ldr	r3, [pc, #176]	; (8008f98 <MX_TIM2_Init+0xcc>)
 8008ee6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8008eea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008eec:	4b2a      	ldr	r3, [pc, #168]	; (8008f98 <MX_TIM2_Init+0xcc>)
 8008eee:	2200      	movs	r2, #0
 8008ef0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008ef2:	4b29      	ldr	r3, [pc, #164]	; (8008f98 <MX_TIM2_Init+0xcc>)
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8008ef8:	4827      	ldr	r0, [pc, #156]	; (8008f98 <MX_TIM2_Init+0xcc>)
 8008efa:	f7fa f95c 	bl	80031b6 <HAL_TIM_PWM_Init>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d001      	beq.n	8008f08 <MX_TIM2_Init+0x3c>
  {
    Error_Handler();
 8008f04:	f7ff f9f4 	bl	80082f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008f08:	4b24      	ldr	r3, [pc, #144]	; (8008f9c <MX_TIM2_Init+0xd0>)
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008f0e:	4b23      	ldr	r3, [pc, #140]	; (8008f9c <MX_TIM2_Init+0xd0>)
 8008f10:	2200      	movs	r2, #0
 8008f12:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008f14:	4921      	ldr	r1, [pc, #132]	; (8008f9c <MX_TIM2_Init+0xd0>)
 8008f16:	4820      	ldr	r0, [pc, #128]	; (8008f98 <MX_TIM2_Init+0xcc>)
 8008f18:	f7fa fe21 	bl	8003b5e <HAL_TIMEx_MasterConfigSynchronization>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d001      	beq.n	8008f26 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8008f22:	f7ff f9e5 	bl	80082f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008f26:	4b1e      	ldr	r3, [pc, #120]	; (8008fa0 <MX_TIM2_Init+0xd4>)
 8008f28:	2260      	movs	r2, #96	; 0x60
 8008f2a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8008f2c:	4b1c      	ldr	r3, [pc, #112]	; (8008fa0 <MX_TIM2_Init+0xd4>)
 8008f2e:	2200      	movs	r2, #0
 8008f30:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008f32:	4b1b      	ldr	r3, [pc, #108]	; (8008fa0 <MX_TIM2_Init+0xd4>)
 8008f34:	2200      	movs	r2, #0
 8008f36:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008f38:	4b19      	ldr	r3, [pc, #100]	; (8008fa0 <MX_TIM2_Init+0xd4>)
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008f3e:	2200      	movs	r2, #0
 8008f40:	4917      	ldr	r1, [pc, #92]	; (8008fa0 <MX_TIM2_Init+0xd4>)
 8008f42:	4815      	ldr	r0, [pc, #84]	; (8008f98 <MX_TIM2_Init+0xcc>)
 8008f44:	f7fa faa8 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d001      	beq.n	8008f52 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8008f4e:	f7ff f9cf 	bl	80082f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008f52:	2204      	movs	r2, #4
 8008f54:	4912      	ldr	r1, [pc, #72]	; (8008fa0 <MX_TIM2_Init+0xd4>)
 8008f56:	4810      	ldr	r0, [pc, #64]	; (8008f98 <MX_TIM2_Init+0xcc>)
 8008f58:	f7fa fa9e 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d001      	beq.n	8008f66 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8008f62:	f7ff f9c5 	bl	80082f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008f66:	2208      	movs	r2, #8
 8008f68:	490d      	ldr	r1, [pc, #52]	; (8008fa0 <MX_TIM2_Init+0xd4>)
 8008f6a:	480b      	ldr	r0, [pc, #44]	; (8008f98 <MX_TIM2_Init+0xcc>)
 8008f6c:	f7fa fa94 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d001      	beq.n	8008f7a <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8008f76:	f7ff f9bb 	bl	80082f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008f7a:	220c      	movs	r2, #12
 8008f7c:	4908      	ldr	r1, [pc, #32]	; (8008fa0 <MX_TIM2_Init+0xd4>)
 8008f7e:	4806      	ldr	r0, [pc, #24]	; (8008f98 <MX_TIM2_Init+0xcc>)
 8008f80:	f7fa fa8a 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d001      	beq.n	8008f8e <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 8008f8a:	f7ff f9b1 	bl	80082f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8008f8e:	4802      	ldr	r0, [pc, #8]	; (8008f98 <MX_TIM2_Init+0xcc>)
 8008f90:	f000 f988 	bl	80092a4 <HAL_TIM_MspPostInit>

}
 8008f94:	bf00      	nop
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	20000738 	.word	0x20000738
 8008f9c:	200003b4 	.word	0x200003b4
 8008fa0:	2000055c 	.word	0x2000055c

08008fa4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	af00      	add	r7, sp, #0
  htim6.Instance = TIM6;
 8008fa8:	4b14      	ldr	r3, [pc, #80]	; (8008ffc <MX_TIM6_Init+0x58>)
 8008faa:	4a15      	ldr	r2, [pc, #84]	; (8009000 <MX_TIM6_Init+0x5c>)
 8008fac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10-1;
 8008fae:	4b13      	ldr	r3, [pc, #76]	; (8008ffc <MX_TIM6_Init+0x58>)
 8008fb0:	2209      	movs	r2, #9
 8008fb2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008fb4:	4b11      	ldr	r3, [pc, #68]	; (8008ffc <MX_TIM6_Init+0x58>)
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 16800;
 8008fba:	4b10      	ldr	r3, [pc, #64]	; (8008ffc <MX_TIM6_Init+0x58>)
 8008fbc:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8008fc0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008fc2:	4b0e      	ldr	r3, [pc, #56]	; (8008ffc <MX_TIM6_Init+0x58>)
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8008fc8:	480c      	ldr	r0, [pc, #48]	; (8008ffc <MX_TIM6_Init+0x58>)
 8008fca:	f7fa f8a5 	bl	8003118 <HAL_TIM_Base_Init>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d001      	beq.n	8008fd8 <MX_TIM6_Init+0x34>
  {
    Error_Handler();
 8008fd4:	f7ff f98c 	bl	80082f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008fd8:	4b0a      	ldr	r3, [pc, #40]	; (8009004 <MX_TIM6_Init+0x60>)
 8008fda:	2200      	movs	r2, #0
 8008fdc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008fde:	4b09      	ldr	r3, [pc, #36]	; (8009004 <MX_TIM6_Init+0x60>)
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8008fe4:	4907      	ldr	r1, [pc, #28]	; (8009004 <MX_TIM6_Init+0x60>)
 8008fe6:	4805      	ldr	r0, [pc, #20]	; (8008ffc <MX_TIM6_Init+0x58>)
 8008fe8:	f7fa fdb9 	bl	8003b5e <HAL_TIMEx_MasterConfigSynchronization>
 8008fec:	4603      	mov	r3, r0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d001      	beq.n	8008ff6 <MX_TIM6_Init+0x52>
  {
    Error_Handler();
 8008ff2:	f7ff f97d 	bl	80082f0 <Error_Handler>
  }

}
 8008ff6:	bf00      	nop
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	200006b8 	.word	0x200006b8
 8009000:	40001000 	.word	0x40001000
 8009004:	200003b4 	.word	0x200003b4

08009008 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	af00      	add	r7, sp, #0
  htim8.Instance = TIM8;
 800900c:	4b3c      	ldr	r3, [pc, #240]	; (8009100 <MX_TIM8_Init+0xf8>)
 800900e:	4a3d      	ldr	r2, [pc, #244]	; (8009104 <MX_TIM8_Init+0xfc>)
 8009010:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 167;
 8009012:	4b3b      	ldr	r3, [pc, #236]	; (8009100 <MX_TIM8_Init+0xf8>)
 8009014:	22a7      	movs	r2, #167	; 0xa7
 8009016:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009018:	4b39      	ldr	r3, [pc, #228]	; (8009100 <MX_TIM8_Init+0xf8>)
 800901a:	2200      	movs	r2, #0
 800901c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 20000-1;
 800901e:	4b38      	ldr	r3, [pc, #224]	; (8009100 <MX_TIM8_Init+0xf8>)
 8009020:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8009024:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009026:	4b36      	ldr	r3, [pc, #216]	; (8009100 <MX_TIM8_Init+0xf8>)
 8009028:	2200      	movs	r2, #0
 800902a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800902c:	4b34      	ldr	r3, [pc, #208]	; (8009100 <MX_TIM8_Init+0xf8>)
 800902e:	2200      	movs	r2, #0
 8009030:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009032:	4b33      	ldr	r3, [pc, #204]	; (8009100 <MX_TIM8_Init+0xf8>)
 8009034:	2200      	movs	r2, #0
 8009036:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8009038:	4831      	ldr	r0, [pc, #196]	; (8009100 <MX_TIM8_Init+0xf8>)
 800903a:	f7fa f8bc 	bl	80031b6 <HAL_TIM_PWM_Init>
 800903e:	4603      	mov	r3, r0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d001      	beq.n	8009048 <MX_TIM8_Init+0x40>
  {
    Error_Handler();
 8009044:	f7ff f954 	bl	80082f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009048:	4b2f      	ldr	r3, [pc, #188]	; (8009108 <MX_TIM8_Init+0x100>)
 800904a:	2200      	movs	r2, #0
 800904c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800904e:	4b2e      	ldr	r3, [pc, #184]	; (8009108 <MX_TIM8_Init+0x100>)
 8009050:	2200      	movs	r2, #0
 8009052:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009054:	492c      	ldr	r1, [pc, #176]	; (8009108 <MX_TIM8_Init+0x100>)
 8009056:	482a      	ldr	r0, [pc, #168]	; (8009100 <MX_TIM8_Init+0xf8>)
 8009058:	f7fa fd81 	bl	8003b5e <HAL_TIMEx_MasterConfigSynchronization>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d001      	beq.n	8009066 <MX_TIM8_Init+0x5e>
  {
    Error_Handler();
 8009062:	f7ff f945 	bl	80082f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009066:	4b29      	ldr	r3, [pc, #164]	; (800910c <MX_TIM8_Init+0x104>)
 8009068:	2260      	movs	r2, #96	; 0x60
 800906a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800906c:	4b27      	ldr	r3, [pc, #156]	; (800910c <MX_TIM8_Init+0x104>)
 800906e:	2200      	movs	r2, #0
 8009070:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009072:	4b26      	ldr	r3, [pc, #152]	; (800910c <MX_TIM8_Init+0x104>)
 8009074:	2200      	movs	r2, #0
 8009076:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009078:	4b24      	ldr	r3, [pc, #144]	; (800910c <MX_TIM8_Init+0x104>)
 800907a:	2200      	movs	r2, #0
 800907c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800907e:	4b23      	ldr	r3, [pc, #140]	; (800910c <MX_TIM8_Init+0x104>)
 8009080:	2200      	movs	r2, #0
 8009082:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009084:	4b21      	ldr	r3, [pc, #132]	; (800910c <MX_TIM8_Init+0x104>)
 8009086:	2200      	movs	r2, #0
 8009088:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800908a:	4b20      	ldr	r3, [pc, #128]	; (800910c <MX_TIM8_Init+0x104>)
 800908c:	2200      	movs	r2, #0
 800908e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009090:	2200      	movs	r2, #0
 8009092:	491e      	ldr	r1, [pc, #120]	; (800910c <MX_TIM8_Init+0x104>)
 8009094:	481a      	ldr	r0, [pc, #104]	; (8009100 <MX_TIM8_Init+0xf8>)
 8009096:	f7fa f9ff 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
 800909a:	4603      	mov	r3, r0
 800909c:	2b00      	cmp	r3, #0
 800909e:	d001      	beq.n	80090a4 <MX_TIM8_Init+0x9c>
  {
    Error_Handler();
 80090a0:	f7ff f926 	bl	80082f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80090a4:	2204      	movs	r2, #4
 80090a6:	4919      	ldr	r1, [pc, #100]	; (800910c <MX_TIM8_Init+0x104>)
 80090a8:	4815      	ldr	r0, [pc, #84]	; (8009100 <MX_TIM8_Init+0xf8>)
 80090aa:	f7fa f9f5 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d001      	beq.n	80090b8 <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 80090b4:	f7ff f91c 	bl	80082f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80090b8:	4b15      	ldr	r3, [pc, #84]	; (8009110 <MX_TIM8_Init+0x108>)
 80090ba:	2200      	movs	r2, #0
 80090bc:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80090be:	4b14      	ldr	r3, [pc, #80]	; (8009110 <MX_TIM8_Init+0x108>)
 80090c0:	2200      	movs	r2, #0
 80090c2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80090c4:	4b12      	ldr	r3, [pc, #72]	; (8009110 <MX_TIM8_Init+0x108>)
 80090c6:	2200      	movs	r2, #0
 80090c8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80090ca:	4b11      	ldr	r3, [pc, #68]	; (8009110 <MX_TIM8_Init+0x108>)
 80090cc:	2200      	movs	r2, #0
 80090ce:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80090d0:	4b0f      	ldr	r3, [pc, #60]	; (8009110 <MX_TIM8_Init+0x108>)
 80090d2:	2200      	movs	r2, #0
 80090d4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80090d6:	4b0e      	ldr	r3, [pc, #56]	; (8009110 <MX_TIM8_Init+0x108>)
 80090d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80090dc:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80090de:	4b0c      	ldr	r3, [pc, #48]	; (8009110 <MX_TIM8_Init+0x108>)
 80090e0:	2200      	movs	r2, #0
 80090e2:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80090e4:	490a      	ldr	r1, [pc, #40]	; (8009110 <MX_TIM8_Init+0x108>)
 80090e6:	4806      	ldr	r0, [pc, #24]	; (8009100 <MX_TIM8_Init+0xf8>)
 80090e8:	f7fa fd7e 	bl	8003be8 <HAL_TIMEx_ConfigBreakDeadTime>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d001      	beq.n	80090f6 <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 80090f2:	f7ff f8fd 	bl	80082f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 80090f6:	4802      	ldr	r0, [pc, #8]	; (8009100 <MX_TIM8_Init+0xf8>)
 80090f8:	f000 f8d4 	bl	80092a4 <HAL_TIM_MspPostInit>

}
 80090fc:	bf00      	nop
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	20000678 	.word	0x20000678
 8009104:	40010400 	.word	0x40010400
 8009108:	200003b4 	.word	0x200003b4
 800910c:	2000055c 	.word	0x2000055c
 8009110:	20000594 	.word	0x20000594

08009114 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	af00      	add	r7, sp, #0
  htim12.Instance = TIM12;
 8009118:	4b1a      	ldr	r3, [pc, #104]	; (8009184 <MX_TIM12_Init+0x70>)
 800911a:	4a1b      	ldr	r2, [pc, #108]	; (8009188 <MX_TIM12_Init+0x74>)
 800911c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 83;
 800911e:	4b19      	ldr	r3, [pc, #100]	; (8009184 <MX_TIM12_Init+0x70>)
 8009120:	2253      	movs	r2, #83	; 0x53
 8009122:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009124:	4b17      	ldr	r3, [pc, #92]	; (8009184 <MX_TIM12_Init+0x70>)
 8009126:	2200      	movs	r2, #0
 8009128:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 20000-1;
 800912a:	4b16      	ldr	r3, [pc, #88]	; (8009184 <MX_TIM12_Init+0x70>)
 800912c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8009130:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009132:	4b14      	ldr	r3, [pc, #80]	; (8009184 <MX_TIM12_Init+0x70>)
 8009134:	2200      	movs	r2, #0
 8009136:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009138:	4b12      	ldr	r3, [pc, #72]	; (8009184 <MX_TIM12_Init+0x70>)
 800913a:	2200      	movs	r2, #0
 800913c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800913e:	4811      	ldr	r0, [pc, #68]	; (8009184 <MX_TIM12_Init+0x70>)
 8009140:	f7fa f839 	bl	80031b6 <HAL_TIM_PWM_Init>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d001      	beq.n	800914e <MX_TIM12_Init+0x3a>
  {
    Error_Handler();
 800914a:	f7ff f8d1 	bl	80082f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800914e:	4b0f      	ldr	r3, [pc, #60]	; (800918c <MX_TIM12_Init+0x78>)
 8009150:	2260      	movs	r2, #96	; 0x60
 8009152:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8009154:	4b0d      	ldr	r3, [pc, #52]	; (800918c <MX_TIM12_Init+0x78>)
 8009156:	2200      	movs	r2, #0
 8009158:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800915a:	4b0c      	ldr	r3, [pc, #48]	; (800918c <MX_TIM12_Init+0x78>)
 800915c:	2200      	movs	r2, #0
 800915e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009160:	4b0a      	ldr	r3, [pc, #40]	; (800918c <MX_TIM12_Init+0x78>)
 8009162:	2200      	movs	r2, #0
 8009164:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009166:	2200      	movs	r2, #0
 8009168:	4908      	ldr	r1, [pc, #32]	; (800918c <MX_TIM12_Init+0x78>)
 800916a:	4806      	ldr	r0, [pc, #24]	; (8009184 <MX_TIM12_Init+0x70>)
 800916c:	f7fa f994 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
 8009170:	4603      	mov	r3, r0
 8009172:	2b00      	cmp	r3, #0
 8009174:	d001      	beq.n	800917a <MX_TIM12_Init+0x66>
  {
    Error_Handler();
 8009176:	f7ff f8bb 	bl	80082f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 800917a:	4802      	ldr	r0, [pc, #8]	; (8009184 <MX_TIM12_Init+0x70>)
 800917c:	f000 f892 	bl	80092a4 <HAL_TIM_MspPostInit>

}
 8009180:	bf00      	nop
 8009182:	bd80      	pop	{r7, pc}
 8009184:	20000778 	.word	0x20000778
 8009188:	40001800 	.word	0x40001800
 800918c:	2000055c 	.word	0x2000055c

08009190 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8009190:	b480      	push	{r7}
 8009192:	b087      	sub	sp, #28
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a29      	ldr	r2, [pc, #164]	; (8009244 <HAL_TIM_PWM_MspInit+0xb4>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d10e      	bne.n	80091c0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80091a2:	2300      	movs	r3, #0
 80091a4:	617b      	str	r3, [r7, #20]
 80091a6:	4b28      	ldr	r3, [pc, #160]	; (8009248 <HAL_TIM_PWM_MspInit+0xb8>)
 80091a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091aa:	4a27      	ldr	r2, [pc, #156]	; (8009248 <HAL_TIM_PWM_MspInit+0xb8>)
 80091ac:	f043 0301 	orr.w	r3, r3, #1
 80091b0:	6453      	str	r3, [r2, #68]	; 0x44
 80091b2:	4b25      	ldr	r3, [pc, #148]	; (8009248 <HAL_TIM_PWM_MspInit+0xb8>)
 80091b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091b6:	f003 0301 	and.w	r3, r3, #1
 80091ba:	617b      	str	r3, [r7, #20]
 80091bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80091be:	e03a      	b.n	8009236 <HAL_TIM_PWM_MspInit+0xa6>
  else if(tim_pwmHandle->Instance==TIM2)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091c8:	d10e      	bne.n	80091e8 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80091ca:	2300      	movs	r3, #0
 80091cc:	613b      	str	r3, [r7, #16]
 80091ce:	4b1e      	ldr	r3, [pc, #120]	; (8009248 <HAL_TIM_PWM_MspInit+0xb8>)
 80091d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d2:	4a1d      	ldr	r2, [pc, #116]	; (8009248 <HAL_TIM_PWM_MspInit+0xb8>)
 80091d4:	f043 0301 	orr.w	r3, r3, #1
 80091d8:	6413      	str	r3, [r2, #64]	; 0x40
 80091da:	4b1b      	ldr	r3, [pc, #108]	; (8009248 <HAL_TIM_PWM_MspInit+0xb8>)
 80091dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091de:	f003 0301 	and.w	r3, r3, #1
 80091e2:	613b      	str	r3, [r7, #16]
 80091e4:	693b      	ldr	r3, [r7, #16]
}
 80091e6:	e026      	b.n	8009236 <HAL_TIM_PWM_MspInit+0xa6>
  else if(tim_pwmHandle->Instance==TIM8)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a17      	ldr	r2, [pc, #92]	; (800924c <HAL_TIM_PWM_MspInit+0xbc>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d10e      	bne.n	8009210 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80091f2:	2300      	movs	r3, #0
 80091f4:	60fb      	str	r3, [r7, #12]
 80091f6:	4b14      	ldr	r3, [pc, #80]	; (8009248 <HAL_TIM_PWM_MspInit+0xb8>)
 80091f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091fa:	4a13      	ldr	r2, [pc, #76]	; (8009248 <HAL_TIM_PWM_MspInit+0xb8>)
 80091fc:	f043 0302 	orr.w	r3, r3, #2
 8009200:	6453      	str	r3, [r2, #68]	; 0x44
 8009202:	4b11      	ldr	r3, [pc, #68]	; (8009248 <HAL_TIM_PWM_MspInit+0xb8>)
 8009204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009206:	f003 0302 	and.w	r3, r3, #2
 800920a:	60fb      	str	r3, [r7, #12]
 800920c:	68fb      	ldr	r3, [r7, #12]
}
 800920e:	e012      	b.n	8009236 <HAL_TIM_PWM_MspInit+0xa6>
  else if(tim_pwmHandle->Instance==TIM12)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a0e      	ldr	r2, [pc, #56]	; (8009250 <HAL_TIM_PWM_MspInit+0xc0>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d10d      	bne.n	8009236 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800921a:	2300      	movs	r3, #0
 800921c:	60bb      	str	r3, [r7, #8]
 800921e:	4b0a      	ldr	r3, [pc, #40]	; (8009248 <HAL_TIM_PWM_MspInit+0xb8>)
 8009220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009222:	4a09      	ldr	r2, [pc, #36]	; (8009248 <HAL_TIM_PWM_MspInit+0xb8>)
 8009224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009228:	6413      	str	r3, [r2, #64]	; 0x40
 800922a:	4b07      	ldr	r3, [pc, #28]	; (8009248 <HAL_TIM_PWM_MspInit+0xb8>)
 800922c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800922e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009232:	60bb      	str	r3, [r7, #8]
 8009234:	68bb      	ldr	r3, [r7, #8]
}
 8009236:	bf00      	nop
 8009238:	371c      	adds	r7, #28
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop
 8009244:	40010000 	.word	0x40010000
 8009248:	40023800 	.word	0x40023800
 800924c:	40010400 	.word	0x40010400
 8009250:	40001800 	.word	0x40001800

08009254 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a0e      	ldr	r2, [pc, #56]	; (800929c <HAL_TIM_Base_MspInit+0x48>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d115      	bne.n	8009292 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8009266:	2300      	movs	r3, #0
 8009268:	60fb      	str	r3, [r7, #12]
 800926a:	4b0d      	ldr	r3, [pc, #52]	; (80092a0 <HAL_TIM_Base_MspInit+0x4c>)
 800926c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800926e:	4a0c      	ldr	r2, [pc, #48]	; (80092a0 <HAL_TIM_Base_MspInit+0x4c>)
 8009270:	f043 0310 	orr.w	r3, r3, #16
 8009274:	6413      	str	r3, [r2, #64]	; 0x40
 8009276:	4b0a      	ldr	r3, [pc, #40]	; (80092a0 <HAL_TIM_Base_MspInit+0x4c>)
 8009278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800927a:	f003 0310 	and.w	r3, r3, #16
 800927e:	60fb      	str	r3, [r7, #12]
 8009280:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8009282:	2200      	movs	r2, #0
 8009284:	2101      	movs	r1, #1
 8009286:	2036      	movs	r0, #54	; 0x36
 8009288:	f7f8 fe3b 	bl	8001f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800928c:	2036      	movs	r0, #54	; 0x36
 800928e:	f7f8 fe54 	bl	8001f3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8009292:	bf00      	nop
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	40001000 	.word	0x40001000
 80092a0:	40023800 	.word	0x40023800

080092a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b08c      	sub	sp, #48	; 0x30
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092ac:	f107 031c 	add.w	r3, r7, #28
 80092b0:	2200      	movs	r2, #0
 80092b2:	601a      	str	r2, [r3, #0]
 80092b4:	605a      	str	r2, [r3, #4]
 80092b6:	609a      	str	r2, [r3, #8]
 80092b8:	60da      	str	r2, [r3, #12]
 80092ba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a58      	ldr	r2, [pc, #352]	; (8009424 <HAL_TIM_MspPostInit+0x180>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d13e      	bne.n	8009344 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80092c6:	2300      	movs	r3, #0
 80092c8:	61bb      	str	r3, [r7, #24]
 80092ca:	4b57      	ldr	r3, [pc, #348]	; (8009428 <HAL_TIM_MspPostInit+0x184>)
 80092cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ce:	4a56      	ldr	r2, [pc, #344]	; (8009428 <HAL_TIM_MspPostInit+0x184>)
 80092d0:	f043 0301 	orr.w	r3, r3, #1
 80092d4:	6313      	str	r3, [r2, #48]	; 0x30
 80092d6:	4b54      	ldr	r3, [pc, #336]	; (8009428 <HAL_TIM_MspPostInit+0x184>)
 80092d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092da:	f003 0301 	and.w	r3, r3, #1
 80092de:	61bb      	str	r3, [r7, #24]
 80092e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80092e2:	2300      	movs	r3, #0
 80092e4:	617b      	str	r3, [r7, #20]
 80092e6:	4b50      	ldr	r3, [pc, #320]	; (8009428 <HAL_TIM_MspPostInit+0x184>)
 80092e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ea:	4a4f      	ldr	r2, [pc, #316]	; (8009428 <HAL_TIM_MspPostInit+0x184>)
 80092ec:	f043 0310 	orr.w	r3, r3, #16
 80092f0:	6313      	str	r3, [r2, #48]	; 0x30
 80092f2:	4b4d      	ldr	r3, [pc, #308]	; (8009428 <HAL_TIM_MspPostInit+0x184>)
 80092f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f6:	f003 0310 	and.w	r3, r3, #16
 80092fa:	617b      	str	r3, [r7, #20]
 80092fc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PE14     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = FRICTION_L_Pin;
 80092fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009304:	2302      	movs	r3, #2
 8009306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009308:	2300      	movs	r3, #0
 800930a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800930c:	2300      	movs	r3, #0
 800930e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8009310:	2301      	movs	r3, #1
 8009312:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 8009314:	f107 031c 	add.w	r3, r7, #28
 8009318:	4619      	mov	r1, r3
 800931a:	4844      	ldr	r0, [pc, #272]	; (800942c <HAL_TIM_MspPostInit+0x188>)
 800931c:	f7f8 fe4a 	bl	8001fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FRICTION_R_Pin;
 8009320:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009326:	2302      	movs	r3, #2
 8009328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800932a:	2300      	movs	r3, #0
 800932c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800932e:	2300      	movs	r3, #0
 8009330:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8009332:	2301      	movs	r3, #1
 8009334:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(FRICTION_R_GPIO_Port, &GPIO_InitStruct);
 8009336:	f107 031c 	add.w	r3, r7, #28
 800933a:	4619      	mov	r1, r3
 800933c:	483c      	ldr	r0, [pc, #240]	; (8009430 <HAL_TIM_MspPostInit+0x18c>)
 800933e:	f7f8 fe39 	bl	8001fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8009342:	e06a      	b.n	800941a <HAL_TIM_MspPostInit+0x176>
  else if(timHandle->Instance==TIM2)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800934c:	d11e      	bne.n	800938c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800934e:	2300      	movs	r3, #0
 8009350:	613b      	str	r3, [r7, #16]
 8009352:	4b35      	ldr	r3, [pc, #212]	; (8009428 <HAL_TIM_MspPostInit+0x184>)
 8009354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009356:	4a34      	ldr	r2, [pc, #208]	; (8009428 <HAL_TIM_MspPostInit+0x184>)
 8009358:	f043 0301 	orr.w	r3, r3, #1
 800935c:	6313      	str	r3, [r2, #48]	; 0x30
 800935e:	4b32      	ldr	r3, [pc, #200]	; (8009428 <HAL_TIM_MspPostInit+0x184>)
 8009360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009362:	f003 0301 	and.w	r3, r3, #1
 8009366:	613b      	str	r3, [r7, #16]
 8009368:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800936a:	230f      	movs	r3, #15
 800936c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800936e:	2302      	movs	r3, #2
 8009370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009372:	2300      	movs	r3, #0
 8009374:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009376:	2300      	movs	r3, #0
 8009378:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800937a:	2301      	movs	r3, #1
 800937c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800937e:	f107 031c 	add.w	r3, r7, #28
 8009382:	4619      	mov	r1, r3
 8009384:	4829      	ldr	r0, [pc, #164]	; (800942c <HAL_TIM_MspPostInit+0x188>)
 8009386:	f7f8 fe15 	bl	8001fb4 <HAL_GPIO_Init>
}
 800938a:	e046      	b.n	800941a <HAL_TIM_MspPostInit+0x176>
  else if(timHandle->Instance==TIM8)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a28      	ldr	r2, [pc, #160]	; (8009434 <HAL_TIM_MspPostInit+0x190>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d11e      	bne.n	80093d4 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8009396:	2300      	movs	r3, #0
 8009398:	60fb      	str	r3, [r7, #12]
 800939a:	4b23      	ldr	r3, [pc, #140]	; (8009428 <HAL_TIM_MspPostInit+0x184>)
 800939c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800939e:	4a22      	ldr	r2, [pc, #136]	; (8009428 <HAL_TIM_MspPostInit+0x184>)
 80093a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093a4:	6313      	str	r3, [r2, #48]	; 0x30
 80093a6:	4b20      	ldr	r3, [pc, #128]	; (8009428 <HAL_TIM_MspPostInit+0x184>)
 80093a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093ae:	60fb      	str	r3, [r7, #12]
 80093b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 80093b2:	2360      	movs	r3, #96	; 0x60
 80093b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093b6:	2302      	movs	r3, #2
 80093b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093ba:	2300      	movs	r3, #0
 80093bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093be:	2300      	movs	r3, #0
 80093c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80093c2:	2303      	movs	r3, #3
 80093c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80093c6:	f107 031c 	add.w	r3, r7, #28
 80093ca:	4619      	mov	r1, r3
 80093cc:	481a      	ldr	r0, [pc, #104]	; (8009438 <HAL_TIM_MspPostInit+0x194>)
 80093ce:	f7f8 fdf1 	bl	8001fb4 <HAL_GPIO_Init>
}
 80093d2:	e022      	b.n	800941a <HAL_TIM_MspPostInit+0x176>
  else if(timHandle->Instance==TIM12)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a18      	ldr	r2, [pc, #96]	; (800943c <HAL_TIM_MspPostInit+0x198>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d11d      	bne.n	800941a <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80093de:	2300      	movs	r3, #0
 80093e0:	60bb      	str	r3, [r7, #8]
 80093e2:	4b11      	ldr	r3, [pc, #68]	; (8009428 <HAL_TIM_MspPostInit+0x184>)
 80093e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e6:	4a10      	ldr	r2, [pc, #64]	; (8009428 <HAL_TIM_MspPostInit+0x184>)
 80093e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093ec:	6313      	str	r3, [r2, #48]	; 0x30
 80093ee:	4b0e      	ldr	r3, [pc, #56]	; (8009428 <HAL_TIM_MspPostInit+0x184>)
 80093f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093f6:	60bb      	str	r3, [r7, #8]
 80093f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BEEP_CTRL_Pin;
 80093fa:	2340      	movs	r3, #64	; 0x40
 80093fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093fe:	2302      	movs	r3, #2
 8009400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009402:	2300      	movs	r3, #0
 8009404:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009406:	2300      	movs	r3, #0
 8009408:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800940a:	2309      	movs	r3, #9
 800940c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 800940e:	f107 031c 	add.w	r3, r7, #28
 8009412:	4619      	mov	r1, r3
 8009414:	480a      	ldr	r0, [pc, #40]	; (8009440 <HAL_TIM_MspPostInit+0x19c>)
 8009416:	f7f8 fdcd 	bl	8001fb4 <HAL_GPIO_Init>
}
 800941a:	bf00      	nop
 800941c:	3730      	adds	r7, #48	; 0x30
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	40010000 	.word	0x40010000
 8009428:	40023800 	.word	0x40023800
 800942c:	40020000 	.word	0x40020000
 8009430:	40021000 	.word	0x40021000
 8009434:	40010400 	.word	0x40010400
 8009438:	40022000 	.word	0x40022000
 800943c:	40001800 	.word	0x40001800
 8009440:	40021c00 	.word	0x40021c00

08009444 <MX_UART7_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8009448:	4b11      	ldr	r3, [pc, #68]	; (8009490 <MX_UART7_Init+0x4c>)
 800944a:	4a12      	ldr	r2, [pc, #72]	; (8009494 <MX_UART7_Init+0x50>)
 800944c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800944e:	4b10      	ldr	r3, [pc, #64]	; (8009490 <MX_UART7_Init+0x4c>)
 8009450:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009454:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8009456:	4b0e      	ldr	r3, [pc, #56]	; (8009490 <MX_UART7_Init+0x4c>)
 8009458:	2200      	movs	r2, #0
 800945a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800945c:	4b0c      	ldr	r3, [pc, #48]	; (8009490 <MX_UART7_Init+0x4c>)
 800945e:	2200      	movs	r2, #0
 8009460:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8009462:	4b0b      	ldr	r3, [pc, #44]	; (8009490 <MX_UART7_Init+0x4c>)
 8009464:	2200      	movs	r2, #0
 8009466:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8009468:	4b09      	ldr	r3, [pc, #36]	; (8009490 <MX_UART7_Init+0x4c>)
 800946a:	220c      	movs	r2, #12
 800946c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800946e:	4b08      	ldr	r3, [pc, #32]	; (8009490 <MX_UART7_Init+0x4c>)
 8009470:	2200      	movs	r2, #0
 8009472:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8009474:	4b06      	ldr	r3, [pc, #24]	; (8009490 <MX_UART7_Init+0x4c>)
 8009476:	2200      	movs	r2, #0
 8009478:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800947a:	4805      	ldr	r0, [pc, #20]	; (8009490 <MX_UART7_Init+0x4c>)
 800947c:	f7fa fc1a 	bl	8003cb4 <HAL_UART_Init>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d001      	beq.n	800948a <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8009486:	f7fe ff33 	bl	80082f0 <Error_Handler>
  }

}
 800948a:	bf00      	nop
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	200007b8 	.word	0x200007b8
 8009494:	40007800 	.word	0x40007800

08009498 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 800949c:	4b11      	ldr	r3, [pc, #68]	; (80094e4 <MX_UART8_Init+0x4c>)
 800949e:	4a12      	ldr	r2, [pc, #72]	; (80094e8 <MX_UART8_Init+0x50>)
 80094a0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80094a2:	4b10      	ldr	r3, [pc, #64]	; (80094e4 <MX_UART8_Init+0x4c>)
 80094a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80094a8:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80094aa:	4b0e      	ldr	r3, [pc, #56]	; (80094e4 <MX_UART8_Init+0x4c>)
 80094ac:	2200      	movs	r2, #0
 80094ae:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80094b0:	4b0c      	ldr	r3, [pc, #48]	; (80094e4 <MX_UART8_Init+0x4c>)
 80094b2:	2200      	movs	r2, #0
 80094b4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80094b6:	4b0b      	ldr	r3, [pc, #44]	; (80094e4 <MX_UART8_Init+0x4c>)
 80094b8:	2200      	movs	r2, #0
 80094ba:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80094bc:	4b09      	ldr	r3, [pc, #36]	; (80094e4 <MX_UART8_Init+0x4c>)
 80094be:	220c      	movs	r2, #12
 80094c0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80094c2:	4b08      	ldr	r3, [pc, #32]	; (80094e4 <MX_UART8_Init+0x4c>)
 80094c4:	2200      	movs	r2, #0
 80094c6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80094c8:	4b06      	ldr	r3, [pc, #24]	; (80094e4 <MX_UART8_Init+0x4c>)
 80094ca:	2200      	movs	r2, #0
 80094cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80094ce:	4805      	ldr	r0, [pc, #20]	; (80094e4 <MX_UART8_Init+0x4c>)
 80094d0:	f7fa fbf0 	bl	8003cb4 <HAL_UART_Init>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d001      	beq.n	80094de <MX_UART8_Init+0x46>
  {
    Error_Handler();
 80094da:	f7fe ff09 	bl	80082f0 <Error_Handler>
  }

}
 80094de:	bf00      	nop
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	20000838 	.word	0x20000838
 80094e8:	40007c00 	.word	0x40007c00

080094ec <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80094f0:	4b10      	ldr	r3, [pc, #64]	; (8009534 <MX_USART1_UART_Init+0x48>)
 80094f2:	4a11      	ldr	r2, [pc, #68]	; (8009538 <MX_USART1_UART_Init+0x4c>)
 80094f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 80094f6:	4b0f      	ldr	r3, [pc, #60]	; (8009534 <MX_USART1_UART_Init+0x48>)
 80094f8:	4a10      	ldr	r2, [pc, #64]	; (800953c <MX_USART1_UART_Init+0x50>)
 80094fa:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80094fc:	4b0d      	ldr	r3, [pc, #52]	; (8009534 <MX_USART1_UART_Init+0x48>)
 80094fe:	2200      	movs	r2, #0
 8009500:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009502:	4b0c      	ldr	r3, [pc, #48]	; (8009534 <MX_USART1_UART_Init+0x48>)
 8009504:	2200      	movs	r2, #0
 8009506:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009508:	4b0a      	ldr	r3, [pc, #40]	; (8009534 <MX_USART1_UART_Init+0x48>)
 800950a:	2200      	movs	r2, #0
 800950c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800950e:	4b09      	ldr	r3, [pc, #36]	; (8009534 <MX_USART1_UART_Init+0x48>)
 8009510:	220c      	movs	r2, #12
 8009512:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009514:	4b07      	ldr	r3, [pc, #28]	; (8009534 <MX_USART1_UART_Init+0x48>)
 8009516:	2200      	movs	r2, #0
 8009518:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800951a:	4b06      	ldr	r3, [pc, #24]	; (8009534 <MX_USART1_UART_Init+0x48>)
 800951c:	2200      	movs	r2, #0
 800951e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009520:	4804      	ldr	r0, [pc, #16]	; (8009534 <MX_USART1_UART_Init+0x48>)
 8009522:	f7fa fbc7 	bl	8003cb4 <HAL_UART_Init>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d001      	beq.n	8009530 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 800952c:	f7fe fee0 	bl	80082f0 <Error_Handler>
  }

}
 8009530:	bf00      	nop
 8009532:	bd80      	pop	{r7, pc}
 8009534:	200007f8 	.word	0x200007f8
 8009538:	40011000 	.word	0x40011000
 800953c:	000186a0 	.word	0x000186a0

08009540 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8009544:	4b11      	ldr	r3, [pc, #68]	; (800958c <MX_USART6_UART_Init+0x4c>)
 8009546:	4a12      	ldr	r2, [pc, #72]	; (8009590 <MX_USART6_UART_Init+0x50>)
 8009548:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800954a:	4b10      	ldr	r3, [pc, #64]	; (800958c <MX_USART6_UART_Init+0x4c>)
 800954c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009550:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8009552:	4b0e      	ldr	r3, [pc, #56]	; (800958c <MX_USART6_UART_Init+0x4c>)
 8009554:	2200      	movs	r2, #0
 8009556:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8009558:	4b0c      	ldr	r3, [pc, #48]	; (800958c <MX_USART6_UART_Init+0x4c>)
 800955a:	2200      	movs	r2, #0
 800955c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800955e:	4b0b      	ldr	r3, [pc, #44]	; (800958c <MX_USART6_UART_Init+0x4c>)
 8009560:	2200      	movs	r2, #0
 8009562:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8009564:	4b09      	ldr	r3, [pc, #36]	; (800958c <MX_USART6_UART_Init+0x4c>)
 8009566:	220c      	movs	r2, #12
 8009568:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800956a:	4b08      	ldr	r3, [pc, #32]	; (800958c <MX_USART6_UART_Init+0x4c>)
 800956c:	2200      	movs	r2, #0
 800956e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8009570:	4b06      	ldr	r3, [pc, #24]	; (800958c <MX_USART6_UART_Init+0x4c>)
 8009572:	2200      	movs	r2, #0
 8009574:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8009576:	4805      	ldr	r0, [pc, #20]	; (800958c <MX_USART6_UART_Init+0x4c>)
 8009578:	f7fa fb9c 	bl	8003cb4 <HAL_UART_Init>
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d001      	beq.n	8009586 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8009582:	f7fe feb5 	bl	80082f0 <Error_Handler>
  }

}
 8009586:	bf00      	nop
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	20000878 	.word	0x20000878
 8009590:	40011400 	.word	0x40011400

08009594 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b090      	sub	sp, #64	; 0x40
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800959c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80095a0:	2200      	movs	r2, #0
 80095a2:	601a      	str	r2, [r3, #0]
 80095a4:	605a      	str	r2, [r3, #4]
 80095a6:	609a      	str	r2, [r3, #8]
 80095a8:	60da      	str	r2, [r3, #12]
 80095aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a6d      	ldr	r2, [pc, #436]	; (8009768 <HAL_UART_MspInit+0x1d4>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d12d      	bne.n	8009612 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80095b6:	2300      	movs	r3, #0
 80095b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80095ba:	4b6c      	ldr	r3, [pc, #432]	; (800976c <HAL_UART_MspInit+0x1d8>)
 80095bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095be:	4a6b      	ldr	r2, [pc, #428]	; (800976c <HAL_UART_MspInit+0x1d8>)
 80095c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80095c4:	6413      	str	r3, [r2, #64]	; 0x40
 80095c6:	4b69      	ldr	r3, [pc, #420]	; (800976c <HAL_UART_MspInit+0x1d8>)
 80095c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80095ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80095d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80095d2:	2300      	movs	r3, #0
 80095d4:	627b      	str	r3, [r7, #36]	; 0x24
 80095d6:	4b65      	ldr	r3, [pc, #404]	; (800976c <HAL_UART_MspInit+0x1d8>)
 80095d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095da:	4a64      	ldr	r2, [pc, #400]	; (800976c <HAL_UART_MspInit+0x1d8>)
 80095dc:	f043 0310 	orr.w	r3, r3, #16
 80095e0:	6313      	str	r3, [r2, #48]	; 0x30
 80095e2:	4b62      	ldr	r3, [pc, #392]	; (800976c <HAL_UART_MspInit+0x1d8>)
 80095e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e6:	f003 0310 	and.w	r3, r3, #16
 80095ea:	627b      	str	r3, [r7, #36]	; 0x24
 80095ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration    
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 80095ee:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80095f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095f4:	2302      	movs	r3, #2
 80095f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80095f8:	2301      	movs	r3, #1
 80095fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80095fc:	2303      	movs	r3, #3
 80095fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8009600:	2308      	movs	r3, #8
 8009602:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009604:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009608:	4619      	mov	r1, r3
 800960a:	4859      	ldr	r0, [pc, #356]	; (8009770 <HAL_UART_MspInit+0x1dc>)
 800960c:	f7f8 fcd2 	bl	8001fb4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8009610:	e0a5      	b.n	800975e <HAL_UART_MspInit+0x1ca>
  else if(uartHandle->Instance==UART8)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a57      	ldr	r2, [pc, #348]	; (8009774 <HAL_UART_MspInit+0x1e0>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d12c      	bne.n	8009676 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_UART8_CLK_ENABLE();
 800961c:	2300      	movs	r3, #0
 800961e:	623b      	str	r3, [r7, #32]
 8009620:	4b52      	ldr	r3, [pc, #328]	; (800976c <HAL_UART_MspInit+0x1d8>)
 8009622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009624:	4a51      	ldr	r2, [pc, #324]	; (800976c <HAL_UART_MspInit+0x1d8>)
 8009626:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800962a:	6413      	str	r3, [r2, #64]	; 0x40
 800962c:	4b4f      	ldr	r3, [pc, #316]	; (800976c <HAL_UART_MspInit+0x1d8>)
 800962e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009630:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009634:	623b      	str	r3, [r7, #32]
 8009636:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009638:	2300      	movs	r3, #0
 800963a:	61fb      	str	r3, [r7, #28]
 800963c:	4b4b      	ldr	r3, [pc, #300]	; (800976c <HAL_UART_MspInit+0x1d8>)
 800963e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009640:	4a4a      	ldr	r2, [pc, #296]	; (800976c <HAL_UART_MspInit+0x1d8>)
 8009642:	f043 0310 	orr.w	r3, r3, #16
 8009646:	6313      	str	r3, [r2, #48]	; 0x30
 8009648:	4b48      	ldr	r3, [pc, #288]	; (800976c <HAL_UART_MspInit+0x1d8>)
 800964a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800964c:	f003 0310 	and.w	r3, r3, #16
 8009650:	61fb      	str	r3, [r7, #28]
 8009652:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8009654:	2303      	movs	r3, #3
 8009656:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009658:	2302      	movs	r3, #2
 800965a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800965c:	2301      	movs	r3, #1
 800965e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009660:	2303      	movs	r3, #3
 8009662:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8009664:	2308      	movs	r3, #8
 8009666:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009668:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800966c:	4619      	mov	r1, r3
 800966e:	4840      	ldr	r0, [pc, #256]	; (8009770 <HAL_UART_MspInit+0x1dc>)
 8009670:	f7f8 fca0 	bl	8001fb4 <HAL_GPIO_Init>
}
 8009674:	e073      	b.n	800975e <HAL_UART_MspInit+0x1ca>
  else if(uartHandle->Instance==USART1)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a3f      	ldr	r2, [pc, #252]	; (8009778 <HAL_UART_MspInit+0x1e4>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d134      	bne.n	80096ea <HAL_UART_MspInit+0x156>
    __HAL_RCC_USART1_CLK_ENABLE();
 8009680:	2300      	movs	r3, #0
 8009682:	61bb      	str	r3, [r7, #24]
 8009684:	4b39      	ldr	r3, [pc, #228]	; (800976c <HAL_UART_MspInit+0x1d8>)
 8009686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009688:	4a38      	ldr	r2, [pc, #224]	; (800976c <HAL_UART_MspInit+0x1d8>)
 800968a:	f043 0310 	orr.w	r3, r3, #16
 800968e:	6453      	str	r3, [r2, #68]	; 0x44
 8009690:	4b36      	ldr	r3, [pc, #216]	; (800976c <HAL_UART_MspInit+0x1d8>)
 8009692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009694:	f003 0310 	and.w	r3, r3, #16
 8009698:	61bb      	str	r3, [r7, #24]
 800969a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800969c:	2300      	movs	r3, #0
 800969e:	617b      	str	r3, [r7, #20]
 80096a0:	4b32      	ldr	r3, [pc, #200]	; (800976c <HAL_UART_MspInit+0x1d8>)
 80096a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096a4:	4a31      	ldr	r2, [pc, #196]	; (800976c <HAL_UART_MspInit+0x1d8>)
 80096a6:	f043 0302 	orr.w	r3, r3, #2
 80096aa:	6313      	str	r3, [r2, #48]	; 0x30
 80096ac:	4b2f      	ldr	r3, [pc, #188]	; (800976c <HAL_UART_MspInit+0x1d8>)
 80096ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b0:	f003 0302 	and.w	r3, r3, #2
 80096b4:	617b      	str	r3, [r7, #20]
 80096b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80096b8:	23c0      	movs	r3, #192	; 0xc0
 80096ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096bc:	2302      	movs	r3, #2
 80096be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80096c0:	2301      	movs	r3, #1
 80096c2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80096c4:	2303      	movs	r3, #3
 80096c6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80096c8:	2307      	movs	r3, #7
 80096ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80096cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80096d0:	4619      	mov	r1, r3
 80096d2:	482a      	ldr	r0, [pc, #168]	; (800977c <HAL_UART_MspInit+0x1e8>)
 80096d4:	f7f8 fc6e 	bl	8001fb4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80096d8:	2200      	movs	r2, #0
 80096da:	2100      	movs	r1, #0
 80096dc:	2025      	movs	r0, #37	; 0x25
 80096de:	f7f8 fc10 	bl	8001f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80096e2:	2025      	movs	r0, #37	; 0x25
 80096e4:	f7f8 fc29 	bl	8001f3a <HAL_NVIC_EnableIRQ>
}
 80096e8:	e039      	b.n	800975e <HAL_UART_MspInit+0x1ca>
  else if(uartHandle->Instance==USART6)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a24      	ldr	r2, [pc, #144]	; (8009780 <HAL_UART_MspInit+0x1ec>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d134      	bne.n	800975e <HAL_UART_MspInit+0x1ca>
    __HAL_RCC_USART6_CLK_ENABLE();
 80096f4:	2300      	movs	r3, #0
 80096f6:	613b      	str	r3, [r7, #16]
 80096f8:	4b1c      	ldr	r3, [pc, #112]	; (800976c <HAL_UART_MspInit+0x1d8>)
 80096fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096fc:	4a1b      	ldr	r2, [pc, #108]	; (800976c <HAL_UART_MspInit+0x1d8>)
 80096fe:	f043 0320 	orr.w	r3, r3, #32
 8009702:	6453      	str	r3, [r2, #68]	; 0x44
 8009704:	4b19      	ldr	r3, [pc, #100]	; (800976c <HAL_UART_MspInit+0x1d8>)
 8009706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009708:	f003 0320 	and.w	r3, r3, #32
 800970c:	613b      	str	r3, [r7, #16]
 800970e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009710:	2300      	movs	r3, #0
 8009712:	60fb      	str	r3, [r7, #12]
 8009714:	4b15      	ldr	r3, [pc, #84]	; (800976c <HAL_UART_MspInit+0x1d8>)
 8009716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009718:	4a14      	ldr	r2, [pc, #80]	; (800976c <HAL_UART_MspInit+0x1d8>)
 800971a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800971e:	6313      	str	r3, [r2, #48]	; 0x30
 8009720:	4b12      	ldr	r3, [pc, #72]	; (800976c <HAL_UART_MspInit+0x1d8>)
 8009722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009728:	60fb      	str	r3, [r7, #12]
 800972a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 800972c:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8009730:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009732:	2302      	movs	r3, #2
 8009734:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009736:	2301      	movs	r3, #1
 8009738:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800973a:	2303      	movs	r3, #3
 800973c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800973e:	2308      	movs	r3, #8
 8009740:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009742:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009746:	4619      	mov	r1, r3
 8009748:	480e      	ldr	r0, [pc, #56]	; (8009784 <HAL_UART_MspInit+0x1f0>)
 800974a:	f7f8 fc33 	bl	8001fb4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800974e:	2200      	movs	r2, #0
 8009750:	2100      	movs	r1, #0
 8009752:	2047      	movs	r0, #71	; 0x47
 8009754:	f7f8 fbd5 	bl	8001f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8009758:	2047      	movs	r0, #71	; 0x47
 800975a:	f7f8 fbee 	bl	8001f3a <HAL_NVIC_EnableIRQ>
}
 800975e:	bf00      	nop
 8009760:	3740      	adds	r7, #64	; 0x40
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	40007800 	.word	0x40007800
 800976c:	40023800 	.word	0x40023800
 8009770:	40021000 	.word	0x40021000
 8009774:	40007c00 	.word	0x40007c00
 8009778:	40011000 	.word	0x40011000
 800977c:	40020400 	.word	0x40020400
 8009780:	40011400 	.word	0x40011400
 8009784:	40021800 	.word	0x40021800

08009788 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009788:	f8df d034 	ldr.w	sp, [pc, #52]	; 80097c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800978c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800978e:	e003      	b.n	8009798 <LoopCopyDataInit>

08009790 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009790:	4b0c      	ldr	r3, [pc, #48]	; (80097c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009792:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009794:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009796:	3104      	adds	r1, #4

08009798 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009798:	480b      	ldr	r0, [pc, #44]	; (80097c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800979a:	4b0c      	ldr	r3, [pc, #48]	; (80097cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800979c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800979e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80097a0:	d3f6      	bcc.n	8009790 <CopyDataInit>
  ldr  r2, =_sbss
 80097a2:	4a0b      	ldr	r2, [pc, #44]	; (80097d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80097a4:	e002      	b.n	80097ac <LoopFillZerobss>

080097a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80097a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80097a8:	f842 3b04 	str.w	r3, [r2], #4

080097ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80097ac:	4b09      	ldr	r3, [pc, #36]	; (80097d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80097ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80097b0:	d3f9      	bcc.n	80097a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80097b2:	f7ff facd 	bl	8008d50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80097b6:	f000 f817 	bl	80097e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80097ba:	f7fc fe41 	bl	8006440 <main>
  bx  lr    
 80097be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80097c0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80097c4:	0800d070 	.word	0x0800d070
  ldr  r0, =_sdata
 80097c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80097cc:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 80097d0:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 80097d4:	200008bc 	.word	0x200008bc

080097d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80097d8:	e7fe      	b.n	80097d8 <ADC_IRQHandler>
	...

080097dc <__errno>:
 80097dc:	4b01      	ldr	r3, [pc, #4]	; (80097e4 <__errno+0x8>)
 80097de:	6818      	ldr	r0, [r3, #0]
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop
 80097e4:	20000020 	.word	0x20000020

080097e8 <__libc_init_array>:
 80097e8:	b570      	push	{r4, r5, r6, lr}
 80097ea:	4e0d      	ldr	r6, [pc, #52]	; (8009820 <__libc_init_array+0x38>)
 80097ec:	4c0d      	ldr	r4, [pc, #52]	; (8009824 <__libc_init_array+0x3c>)
 80097ee:	1ba4      	subs	r4, r4, r6
 80097f0:	10a4      	asrs	r4, r4, #2
 80097f2:	2500      	movs	r5, #0
 80097f4:	42a5      	cmp	r5, r4
 80097f6:	d109      	bne.n	800980c <__libc_init_array+0x24>
 80097f8:	4e0b      	ldr	r6, [pc, #44]	; (8009828 <__libc_init_array+0x40>)
 80097fa:	4c0c      	ldr	r4, [pc, #48]	; (800982c <__libc_init_array+0x44>)
 80097fc:	f003 fa6c 	bl	800ccd8 <_init>
 8009800:	1ba4      	subs	r4, r4, r6
 8009802:	10a4      	asrs	r4, r4, #2
 8009804:	2500      	movs	r5, #0
 8009806:	42a5      	cmp	r5, r4
 8009808:	d105      	bne.n	8009816 <__libc_init_array+0x2e>
 800980a:	bd70      	pop	{r4, r5, r6, pc}
 800980c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009810:	4798      	blx	r3
 8009812:	3501      	adds	r5, #1
 8009814:	e7ee      	b.n	80097f4 <__libc_init_array+0xc>
 8009816:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800981a:	4798      	blx	r3
 800981c:	3501      	adds	r5, #1
 800981e:	e7f2      	b.n	8009806 <__libc_init_array+0x1e>
 8009820:	0800d068 	.word	0x0800d068
 8009824:	0800d068 	.word	0x0800d068
 8009828:	0800d068 	.word	0x0800d068
 800982c:	0800d06c 	.word	0x0800d06c

08009830 <memcpy>:
 8009830:	b510      	push	{r4, lr}
 8009832:	1e43      	subs	r3, r0, #1
 8009834:	440a      	add	r2, r1
 8009836:	4291      	cmp	r1, r2
 8009838:	d100      	bne.n	800983c <memcpy+0xc>
 800983a:	bd10      	pop	{r4, pc}
 800983c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009840:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009844:	e7f7      	b.n	8009836 <memcpy+0x6>

08009846 <memset>:
 8009846:	4402      	add	r2, r0
 8009848:	4603      	mov	r3, r0
 800984a:	4293      	cmp	r3, r2
 800984c:	d100      	bne.n	8009850 <memset+0xa>
 800984e:	4770      	bx	lr
 8009850:	f803 1b01 	strb.w	r1, [r3], #1
 8009854:	e7f9      	b.n	800984a <memset+0x4>

08009856 <__cvt>:
 8009856:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800985a:	ec55 4b10 	vmov	r4, r5, d0
 800985e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009860:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009864:	2d00      	cmp	r5, #0
 8009866:	460e      	mov	r6, r1
 8009868:	4691      	mov	r9, r2
 800986a:	4619      	mov	r1, r3
 800986c:	bfb8      	it	lt
 800986e:	4622      	movlt	r2, r4
 8009870:	462b      	mov	r3, r5
 8009872:	f027 0720 	bic.w	r7, r7, #32
 8009876:	bfbb      	ittet	lt
 8009878:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800987c:	461d      	movlt	r5, r3
 800987e:	2300      	movge	r3, #0
 8009880:	232d      	movlt	r3, #45	; 0x2d
 8009882:	bfb8      	it	lt
 8009884:	4614      	movlt	r4, r2
 8009886:	2f46      	cmp	r7, #70	; 0x46
 8009888:	700b      	strb	r3, [r1, #0]
 800988a:	d004      	beq.n	8009896 <__cvt+0x40>
 800988c:	2f45      	cmp	r7, #69	; 0x45
 800988e:	d100      	bne.n	8009892 <__cvt+0x3c>
 8009890:	3601      	adds	r6, #1
 8009892:	2102      	movs	r1, #2
 8009894:	e000      	b.n	8009898 <__cvt+0x42>
 8009896:	2103      	movs	r1, #3
 8009898:	ab03      	add	r3, sp, #12
 800989a:	9301      	str	r3, [sp, #4]
 800989c:	ab02      	add	r3, sp, #8
 800989e:	9300      	str	r3, [sp, #0]
 80098a0:	4632      	mov	r2, r6
 80098a2:	4653      	mov	r3, sl
 80098a4:	ec45 4b10 	vmov	d0, r4, r5
 80098a8:	f000 feb2 	bl	800a610 <_dtoa_r>
 80098ac:	2f47      	cmp	r7, #71	; 0x47
 80098ae:	4680      	mov	r8, r0
 80098b0:	d102      	bne.n	80098b8 <__cvt+0x62>
 80098b2:	f019 0f01 	tst.w	r9, #1
 80098b6:	d026      	beq.n	8009906 <__cvt+0xb0>
 80098b8:	2f46      	cmp	r7, #70	; 0x46
 80098ba:	eb08 0906 	add.w	r9, r8, r6
 80098be:	d111      	bne.n	80098e4 <__cvt+0x8e>
 80098c0:	f898 3000 	ldrb.w	r3, [r8]
 80098c4:	2b30      	cmp	r3, #48	; 0x30
 80098c6:	d10a      	bne.n	80098de <__cvt+0x88>
 80098c8:	2200      	movs	r2, #0
 80098ca:	2300      	movs	r3, #0
 80098cc:	4620      	mov	r0, r4
 80098ce:	4629      	mov	r1, r5
 80098d0:	f7f7 f90a 	bl	8000ae8 <__aeabi_dcmpeq>
 80098d4:	b918      	cbnz	r0, 80098de <__cvt+0x88>
 80098d6:	f1c6 0601 	rsb	r6, r6, #1
 80098da:	f8ca 6000 	str.w	r6, [sl]
 80098de:	f8da 3000 	ldr.w	r3, [sl]
 80098e2:	4499      	add	r9, r3
 80098e4:	2200      	movs	r2, #0
 80098e6:	2300      	movs	r3, #0
 80098e8:	4620      	mov	r0, r4
 80098ea:	4629      	mov	r1, r5
 80098ec:	f7f7 f8fc 	bl	8000ae8 <__aeabi_dcmpeq>
 80098f0:	b938      	cbnz	r0, 8009902 <__cvt+0xac>
 80098f2:	2230      	movs	r2, #48	; 0x30
 80098f4:	9b03      	ldr	r3, [sp, #12]
 80098f6:	454b      	cmp	r3, r9
 80098f8:	d205      	bcs.n	8009906 <__cvt+0xb0>
 80098fa:	1c59      	adds	r1, r3, #1
 80098fc:	9103      	str	r1, [sp, #12]
 80098fe:	701a      	strb	r2, [r3, #0]
 8009900:	e7f8      	b.n	80098f4 <__cvt+0x9e>
 8009902:	f8cd 900c 	str.w	r9, [sp, #12]
 8009906:	9b03      	ldr	r3, [sp, #12]
 8009908:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800990a:	eba3 0308 	sub.w	r3, r3, r8
 800990e:	4640      	mov	r0, r8
 8009910:	6013      	str	r3, [r2, #0]
 8009912:	b004      	add	sp, #16
 8009914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009918 <__exponent>:
 8009918:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800991a:	2900      	cmp	r1, #0
 800991c:	4604      	mov	r4, r0
 800991e:	bfba      	itte	lt
 8009920:	4249      	neglt	r1, r1
 8009922:	232d      	movlt	r3, #45	; 0x2d
 8009924:	232b      	movge	r3, #43	; 0x2b
 8009926:	2909      	cmp	r1, #9
 8009928:	f804 2b02 	strb.w	r2, [r4], #2
 800992c:	7043      	strb	r3, [r0, #1]
 800992e:	dd20      	ble.n	8009972 <__exponent+0x5a>
 8009930:	f10d 0307 	add.w	r3, sp, #7
 8009934:	461f      	mov	r7, r3
 8009936:	260a      	movs	r6, #10
 8009938:	fb91 f5f6 	sdiv	r5, r1, r6
 800993c:	fb06 1115 	mls	r1, r6, r5, r1
 8009940:	3130      	adds	r1, #48	; 0x30
 8009942:	2d09      	cmp	r5, #9
 8009944:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009948:	f103 32ff 	add.w	r2, r3, #4294967295
 800994c:	4629      	mov	r1, r5
 800994e:	dc09      	bgt.n	8009964 <__exponent+0x4c>
 8009950:	3130      	adds	r1, #48	; 0x30
 8009952:	3b02      	subs	r3, #2
 8009954:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009958:	42bb      	cmp	r3, r7
 800995a:	4622      	mov	r2, r4
 800995c:	d304      	bcc.n	8009968 <__exponent+0x50>
 800995e:	1a10      	subs	r0, r2, r0
 8009960:	b003      	add	sp, #12
 8009962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009964:	4613      	mov	r3, r2
 8009966:	e7e7      	b.n	8009938 <__exponent+0x20>
 8009968:	f813 2b01 	ldrb.w	r2, [r3], #1
 800996c:	f804 2b01 	strb.w	r2, [r4], #1
 8009970:	e7f2      	b.n	8009958 <__exponent+0x40>
 8009972:	2330      	movs	r3, #48	; 0x30
 8009974:	4419      	add	r1, r3
 8009976:	7083      	strb	r3, [r0, #2]
 8009978:	1d02      	adds	r2, r0, #4
 800997a:	70c1      	strb	r1, [r0, #3]
 800997c:	e7ef      	b.n	800995e <__exponent+0x46>
	...

08009980 <_printf_float>:
 8009980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009984:	b08d      	sub	sp, #52	; 0x34
 8009986:	460c      	mov	r4, r1
 8009988:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800998c:	4616      	mov	r6, r2
 800998e:	461f      	mov	r7, r3
 8009990:	4605      	mov	r5, r0
 8009992:	f001 fd6f 	bl	800b474 <_localeconv_r>
 8009996:	6803      	ldr	r3, [r0, #0]
 8009998:	9304      	str	r3, [sp, #16]
 800999a:	4618      	mov	r0, r3
 800999c:	f7f6 fc28 	bl	80001f0 <strlen>
 80099a0:	2300      	movs	r3, #0
 80099a2:	930a      	str	r3, [sp, #40]	; 0x28
 80099a4:	f8d8 3000 	ldr.w	r3, [r8]
 80099a8:	9005      	str	r0, [sp, #20]
 80099aa:	3307      	adds	r3, #7
 80099ac:	f023 0307 	bic.w	r3, r3, #7
 80099b0:	f103 0208 	add.w	r2, r3, #8
 80099b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80099b8:	f8d4 b000 	ldr.w	fp, [r4]
 80099bc:	f8c8 2000 	str.w	r2, [r8]
 80099c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80099c8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80099cc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80099d0:	9307      	str	r3, [sp, #28]
 80099d2:	f8cd 8018 	str.w	r8, [sp, #24]
 80099d6:	f04f 32ff 	mov.w	r2, #4294967295
 80099da:	4ba7      	ldr	r3, [pc, #668]	; (8009c78 <_printf_float+0x2f8>)
 80099dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099e0:	f7f7 f8b4 	bl	8000b4c <__aeabi_dcmpun>
 80099e4:	bb70      	cbnz	r0, 8009a44 <_printf_float+0xc4>
 80099e6:	f04f 32ff 	mov.w	r2, #4294967295
 80099ea:	4ba3      	ldr	r3, [pc, #652]	; (8009c78 <_printf_float+0x2f8>)
 80099ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099f0:	f7f7 f88e 	bl	8000b10 <__aeabi_dcmple>
 80099f4:	bb30      	cbnz	r0, 8009a44 <_printf_float+0xc4>
 80099f6:	2200      	movs	r2, #0
 80099f8:	2300      	movs	r3, #0
 80099fa:	4640      	mov	r0, r8
 80099fc:	4649      	mov	r1, r9
 80099fe:	f7f7 f87d 	bl	8000afc <__aeabi_dcmplt>
 8009a02:	b110      	cbz	r0, 8009a0a <_printf_float+0x8a>
 8009a04:	232d      	movs	r3, #45	; 0x2d
 8009a06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a0a:	4a9c      	ldr	r2, [pc, #624]	; (8009c7c <_printf_float+0x2fc>)
 8009a0c:	4b9c      	ldr	r3, [pc, #624]	; (8009c80 <_printf_float+0x300>)
 8009a0e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009a12:	bf8c      	ite	hi
 8009a14:	4690      	movhi	r8, r2
 8009a16:	4698      	movls	r8, r3
 8009a18:	2303      	movs	r3, #3
 8009a1a:	f02b 0204 	bic.w	r2, fp, #4
 8009a1e:	6123      	str	r3, [r4, #16]
 8009a20:	6022      	str	r2, [r4, #0]
 8009a22:	f04f 0900 	mov.w	r9, #0
 8009a26:	9700      	str	r7, [sp, #0]
 8009a28:	4633      	mov	r3, r6
 8009a2a:	aa0b      	add	r2, sp, #44	; 0x2c
 8009a2c:	4621      	mov	r1, r4
 8009a2e:	4628      	mov	r0, r5
 8009a30:	f000 f9e6 	bl	8009e00 <_printf_common>
 8009a34:	3001      	adds	r0, #1
 8009a36:	f040 808d 	bne.w	8009b54 <_printf_float+0x1d4>
 8009a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a3e:	b00d      	add	sp, #52	; 0x34
 8009a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a44:	4642      	mov	r2, r8
 8009a46:	464b      	mov	r3, r9
 8009a48:	4640      	mov	r0, r8
 8009a4a:	4649      	mov	r1, r9
 8009a4c:	f7f7 f87e 	bl	8000b4c <__aeabi_dcmpun>
 8009a50:	b110      	cbz	r0, 8009a58 <_printf_float+0xd8>
 8009a52:	4a8c      	ldr	r2, [pc, #560]	; (8009c84 <_printf_float+0x304>)
 8009a54:	4b8c      	ldr	r3, [pc, #560]	; (8009c88 <_printf_float+0x308>)
 8009a56:	e7da      	b.n	8009a0e <_printf_float+0x8e>
 8009a58:	6861      	ldr	r1, [r4, #4]
 8009a5a:	1c4b      	adds	r3, r1, #1
 8009a5c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009a60:	a80a      	add	r0, sp, #40	; 0x28
 8009a62:	d13e      	bne.n	8009ae2 <_printf_float+0x162>
 8009a64:	2306      	movs	r3, #6
 8009a66:	6063      	str	r3, [r4, #4]
 8009a68:	2300      	movs	r3, #0
 8009a6a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009a6e:	ab09      	add	r3, sp, #36	; 0x24
 8009a70:	9300      	str	r3, [sp, #0]
 8009a72:	ec49 8b10 	vmov	d0, r8, r9
 8009a76:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009a7a:	6022      	str	r2, [r4, #0]
 8009a7c:	f8cd a004 	str.w	sl, [sp, #4]
 8009a80:	6861      	ldr	r1, [r4, #4]
 8009a82:	4628      	mov	r0, r5
 8009a84:	f7ff fee7 	bl	8009856 <__cvt>
 8009a88:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009a8c:	2b47      	cmp	r3, #71	; 0x47
 8009a8e:	4680      	mov	r8, r0
 8009a90:	d109      	bne.n	8009aa6 <_printf_float+0x126>
 8009a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a94:	1cd8      	adds	r0, r3, #3
 8009a96:	db02      	blt.n	8009a9e <_printf_float+0x11e>
 8009a98:	6862      	ldr	r2, [r4, #4]
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	dd47      	ble.n	8009b2e <_printf_float+0x1ae>
 8009a9e:	f1aa 0a02 	sub.w	sl, sl, #2
 8009aa2:	fa5f fa8a 	uxtb.w	sl, sl
 8009aa6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009aaa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009aac:	d824      	bhi.n	8009af8 <_printf_float+0x178>
 8009aae:	3901      	subs	r1, #1
 8009ab0:	4652      	mov	r2, sl
 8009ab2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009ab6:	9109      	str	r1, [sp, #36]	; 0x24
 8009ab8:	f7ff ff2e 	bl	8009918 <__exponent>
 8009abc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009abe:	1813      	adds	r3, r2, r0
 8009ac0:	2a01      	cmp	r2, #1
 8009ac2:	4681      	mov	r9, r0
 8009ac4:	6123      	str	r3, [r4, #16]
 8009ac6:	dc02      	bgt.n	8009ace <_printf_float+0x14e>
 8009ac8:	6822      	ldr	r2, [r4, #0]
 8009aca:	07d1      	lsls	r1, r2, #31
 8009acc:	d501      	bpl.n	8009ad2 <_printf_float+0x152>
 8009ace:	3301      	adds	r3, #1
 8009ad0:	6123      	str	r3, [r4, #16]
 8009ad2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d0a5      	beq.n	8009a26 <_printf_float+0xa6>
 8009ada:	232d      	movs	r3, #45	; 0x2d
 8009adc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ae0:	e7a1      	b.n	8009a26 <_printf_float+0xa6>
 8009ae2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009ae6:	f000 8177 	beq.w	8009dd8 <_printf_float+0x458>
 8009aea:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009aee:	d1bb      	bne.n	8009a68 <_printf_float+0xe8>
 8009af0:	2900      	cmp	r1, #0
 8009af2:	d1b9      	bne.n	8009a68 <_printf_float+0xe8>
 8009af4:	2301      	movs	r3, #1
 8009af6:	e7b6      	b.n	8009a66 <_printf_float+0xe6>
 8009af8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009afc:	d119      	bne.n	8009b32 <_printf_float+0x1b2>
 8009afe:	2900      	cmp	r1, #0
 8009b00:	6863      	ldr	r3, [r4, #4]
 8009b02:	dd0c      	ble.n	8009b1e <_printf_float+0x19e>
 8009b04:	6121      	str	r1, [r4, #16]
 8009b06:	b913      	cbnz	r3, 8009b0e <_printf_float+0x18e>
 8009b08:	6822      	ldr	r2, [r4, #0]
 8009b0a:	07d2      	lsls	r2, r2, #31
 8009b0c:	d502      	bpl.n	8009b14 <_printf_float+0x194>
 8009b0e:	3301      	adds	r3, #1
 8009b10:	440b      	add	r3, r1
 8009b12:	6123      	str	r3, [r4, #16]
 8009b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b16:	65a3      	str	r3, [r4, #88]	; 0x58
 8009b18:	f04f 0900 	mov.w	r9, #0
 8009b1c:	e7d9      	b.n	8009ad2 <_printf_float+0x152>
 8009b1e:	b913      	cbnz	r3, 8009b26 <_printf_float+0x1a6>
 8009b20:	6822      	ldr	r2, [r4, #0]
 8009b22:	07d0      	lsls	r0, r2, #31
 8009b24:	d501      	bpl.n	8009b2a <_printf_float+0x1aa>
 8009b26:	3302      	adds	r3, #2
 8009b28:	e7f3      	b.n	8009b12 <_printf_float+0x192>
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	e7f1      	b.n	8009b12 <_printf_float+0x192>
 8009b2e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009b32:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009b36:	4293      	cmp	r3, r2
 8009b38:	db05      	blt.n	8009b46 <_printf_float+0x1c6>
 8009b3a:	6822      	ldr	r2, [r4, #0]
 8009b3c:	6123      	str	r3, [r4, #16]
 8009b3e:	07d1      	lsls	r1, r2, #31
 8009b40:	d5e8      	bpl.n	8009b14 <_printf_float+0x194>
 8009b42:	3301      	adds	r3, #1
 8009b44:	e7e5      	b.n	8009b12 <_printf_float+0x192>
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	bfd4      	ite	le
 8009b4a:	f1c3 0302 	rsble	r3, r3, #2
 8009b4e:	2301      	movgt	r3, #1
 8009b50:	4413      	add	r3, r2
 8009b52:	e7de      	b.n	8009b12 <_printf_float+0x192>
 8009b54:	6823      	ldr	r3, [r4, #0]
 8009b56:	055a      	lsls	r2, r3, #21
 8009b58:	d407      	bmi.n	8009b6a <_printf_float+0x1ea>
 8009b5a:	6923      	ldr	r3, [r4, #16]
 8009b5c:	4642      	mov	r2, r8
 8009b5e:	4631      	mov	r1, r6
 8009b60:	4628      	mov	r0, r5
 8009b62:	47b8      	blx	r7
 8009b64:	3001      	adds	r0, #1
 8009b66:	d12b      	bne.n	8009bc0 <_printf_float+0x240>
 8009b68:	e767      	b.n	8009a3a <_printf_float+0xba>
 8009b6a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009b6e:	f240 80dc 	bls.w	8009d2a <_printf_float+0x3aa>
 8009b72:	2200      	movs	r2, #0
 8009b74:	2300      	movs	r3, #0
 8009b76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b7a:	f7f6 ffb5 	bl	8000ae8 <__aeabi_dcmpeq>
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	d033      	beq.n	8009bea <_printf_float+0x26a>
 8009b82:	2301      	movs	r3, #1
 8009b84:	4a41      	ldr	r2, [pc, #260]	; (8009c8c <_printf_float+0x30c>)
 8009b86:	4631      	mov	r1, r6
 8009b88:	4628      	mov	r0, r5
 8009b8a:	47b8      	blx	r7
 8009b8c:	3001      	adds	r0, #1
 8009b8e:	f43f af54 	beq.w	8009a3a <_printf_float+0xba>
 8009b92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b96:	429a      	cmp	r2, r3
 8009b98:	db02      	blt.n	8009ba0 <_printf_float+0x220>
 8009b9a:	6823      	ldr	r3, [r4, #0]
 8009b9c:	07d8      	lsls	r0, r3, #31
 8009b9e:	d50f      	bpl.n	8009bc0 <_printf_float+0x240>
 8009ba0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ba4:	4631      	mov	r1, r6
 8009ba6:	4628      	mov	r0, r5
 8009ba8:	47b8      	blx	r7
 8009baa:	3001      	adds	r0, #1
 8009bac:	f43f af45 	beq.w	8009a3a <_printf_float+0xba>
 8009bb0:	f04f 0800 	mov.w	r8, #0
 8009bb4:	f104 091a 	add.w	r9, r4, #26
 8009bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	4543      	cmp	r3, r8
 8009bbe:	dc09      	bgt.n	8009bd4 <_printf_float+0x254>
 8009bc0:	6823      	ldr	r3, [r4, #0]
 8009bc2:	079b      	lsls	r3, r3, #30
 8009bc4:	f100 8103 	bmi.w	8009dce <_printf_float+0x44e>
 8009bc8:	68e0      	ldr	r0, [r4, #12]
 8009bca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bcc:	4298      	cmp	r0, r3
 8009bce:	bfb8      	it	lt
 8009bd0:	4618      	movlt	r0, r3
 8009bd2:	e734      	b.n	8009a3e <_printf_float+0xbe>
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	464a      	mov	r2, r9
 8009bd8:	4631      	mov	r1, r6
 8009bda:	4628      	mov	r0, r5
 8009bdc:	47b8      	blx	r7
 8009bde:	3001      	adds	r0, #1
 8009be0:	f43f af2b 	beq.w	8009a3a <_printf_float+0xba>
 8009be4:	f108 0801 	add.w	r8, r8, #1
 8009be8:	e7e6      	b.n	8009bb8 <_printf_float+0x238>
 8009bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	dc2b      	bgt.n	8009c48 <_printf_float+0x2c8>
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	4a26      	ldr	r2, [pc, #152]	; (8009c8c <_printf_float+0x30c>)
 8009bf4:	4631      	mov	r1, r6
 8009bf6:	4628      	mov	r0, r5
 8009bf8:	47b8      	blx	r7
 8009bfa:	3001      	adds	r0, #1
 8009bfc:	f43f af1d 	beq.w	8009a3a <_printf_float+0xba>
 8009c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c02:	b923      	cbnz	r3, 8009c0e <_printf_float+0x28e>
 8009c04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c06:	b913      	cbnz	r3, 8009c0e <_printf_float+0x28e>
 8009c08:	6823      	ldr	r3, [r4, #0]
 8009c0a:	07d9      	lsls	r1, r3, #31
 8009c0c:	d5d8      	bpl.n	8009bc0 <_printf_float+0x240>
 8009c0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c12:	4631      	mov	r1, r6
 8009c14:	4628      	mov	r0, r5
 8009c16:	47b8      	blx	r7
 8009c18:	3001      	adds	r0, #1
 8009c1a:	f43f af0e 	beq.w	8009a3a <_printf_float+0xba>
 8009c1e:	f04f 0900 	mov.w	r9, #0
 8009c22:	f104 0a1a 	add.w	sl, r4, #26
 8009c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c28:	425b      	negs	r3, r3
 8009c2a:	454b      	cmp	r3, r9
 8009c2c:	dc01      	bgt.n	8009c32 <_printf_float+0x2b2>
 8009c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c30:	e794      	b.n	8009b5c <_printf_float+0x1dc>
 8009c32:	2301      	movs	r3, #1
 8009c34:	4652      	mov	r2, sl
 8009c36:	4631      	mov	r1, r6
 8009c38:	4628      	mov	r0, r5
 8009c3a:	47b8      	blx	r7
 8009c3c:	3001      	adds	r0, #1
 8009c3e:	f43f aefc 	beq.w	8009a3a <_printf_float+0xba>
 8009c42:	f109 0901 	add.w	r9, r9, #1
 8009c46:	e7ee      	b.n	8009c26 <_printf_float+0x2a6>
 8009c48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	bfa8      	it	ge
 8009c50:	461a      	movge	r2, r3
 8009c52:	2a00      	cmp	r2, #0
 8009c54:	4691      	mov	r9, r2
 8009c56:	dd07      	ble.n	8009c68 <_printf_float+0x2e8>
 8009c58:	4613      	mov	r3, r2
 8009c5a:	4631      	mov	r1, r6
 8009c5c:	4642      	mov	r2, r8
 8009c5e:	4628      	mov	r0, r5
 8009c60:	47b8      	blx	r7
 8009c62:	3001      	adds	r0, #1
 8009c64:	f43f aee9 	beq.w	8009a3a <_printf_float+0xba>
 8009c68:	f104 031a 	add.w	r3, r4, #26
 8009c6c:	f04f 0b00 	mov.w	fp, #0
 8009c70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c74:	9306      	str	r3, [sp, #24]
 8009c76:	e015      	b.n	8009ca4 <_printf_float+0x324>
 8009c78:	7fefffff 	.word	0x7fefffff
 8009c7c:	0800cd54 	.word	0x0800cd54
 8009c80:	0800cd50 	.word	0x0800cd50
 8009c84:	0800cd5c 	.word	0x0800cd5c
 8009c88:	0800cd58 	.word	0x0800cd58
 8009c8c:	0800cd60 	.word	0x0800cd60
 8009c90:	2301      	movs	r3, #1
 8009c92:	9a06      	ldr	r2, [sp, #24]
 8009c94:	4631      	mov	r1, r6
 8009c96:	4628      	mov	r0, r5
 8009c98:	47b8      	blx	r7
 8009c9a:	3001      	adds	r0, #1
 8009c9c:	f43f aecd 	beq.w	8009a3a <_printf_float+0xba>
 8009ca0:	f10b 0b01 	add.w	fp, fp, #1
 8009ca4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009ca8:	ebaa 0309 	sub.w	r3, sl, r9
 8009cac:	455b      	cmp	r3, fp
 8009cae:	dcef      	bgt.n	8009c90 <_printf_float+0x310>
 8009cb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	44d0      	add	r8, sl
 8009cb8:	db15      	blt.n	8009ce6 <_printf_float+0x366>
 8009cba:	6823      	ldr	r3, [r4, #0]
 8009cbc:	07da      	lsls	r2, r3, #31
 8009cbe:	d412      	bmi.n	8009ce6 <_printf_float+0x366>
 8009cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009cc4:	eba3 020a 	sub.w	r2, r3, sl
 8009cc8:	eba3 0a01 	sub.w	sl, r3, r1
 8009ccc:	4592      	cmp	sl, r2
 8009cce:	bfa8      	it	ge
 8009cd0:	4692      	movge	sl, r2
 8009cd2:	f1ba 0f00 	cmp.w	sl, #0
 8009cd6:	dc0e      	bgt.n	8009cf6 <_printf_float+0x376>
 8009cd8:	f04f 0800 	mov.w	r8, #0
 8009cdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ce0:	f104 091a 	add.w	r9, r4, #26
 8009ce4:	e019      	b.n	8009d1a <_printf_float+0x39a>
 8009ce6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cea:	4631      	mov	r1, r6
 8009cec:	4628      	mov	r0, r5
 8009cee:	47b8      	blx	r7
 8009cf0:	3001      	adds	r0, #1
 8009cf2:	d1e5      	bne.n	8009cc0 <_printf_float+0x340>
 8009cf4:	e6a1      	b.n	8009a3a <_printf_float+0xba>
 8009cf6:	4653      	mov	r3, sl
 8009cf8:	4642      	mov	r2, r8
 8009cfa:	4631      	mov	r1, r6
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	47b8      	blx	r7
 8009d00:	3001      	adds	r0, #1
 8009d02:	d1e9      	bne.n	8009cd8 <_printf_float+0x358>
 8009d04:	e699      	b.n	8009a3a <_printf_float+0xba>
 8009d06:	2301      	movs	r3, #1
 8009d08:	464a      	mov	r2, r9
 8009d0a:	4631      	mov	r1, r6
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	47b8      	blx	r7
 8009d10:	3001      	adds	r0, #1
 8009d12:	f43f ae92 	beq.w	8009a3a <_printf_float+0xba>
 8009d16:	f108 0801 	add.w	r8, r8, #1
 8009d1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d1e:	1a9b      	subs	r3, r3, r2
 8009d20:	eba3 030a 	sub.w	r3, r3, sl
 8009d24:	4543      	cmp	r3, r8
 8009d26:	dcee      	bgt.n	8009d06 <_printf_float+0x386>
 8009d28:	e74a      	b.n	8009bc0 <_printf_float+0x240>
 8009d2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d2c:	2a01      	cmp	r2, #1
 8009d2e:	dc01      	bgt.n	8009d34 <_printf_float+0x3b4>
 8009d30:	07db      	lsls	r3, r3, #31
 8009d32:	d53a      	bpl.n	8009daa <_printf_float+0x42a>
 8009d34:	2301      	movs	r3, #1
 8009d36:	4642      	mov	r2, r8
 8009d38:	4631      	mov	r1, r6
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	47b8      	blx	r7
 8009d3e:	3001      	adds	r0, #1
 8009d40:	f43f ae7b 	beq.w	8009a3a <_printf_float+0xba>
 8009d44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d48:	4631      	mov	r1, r6
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	47b8      	blx	r7
 8009d4e:	3001      	adds	r0, #1
 8009d50:	f108 0801 	add.w	r8, r8, #1
 8009d54:	f43f ae71 	beq.w	8009a3a <_printf_float+0xba>
 8009d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f103 3aff 	add.w	sl, r3, #4294967295
 8009d60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d64:	2300      	movs	r3, #0
 8009d66:	f7f6 febf 	bl	8000ae8 <__aeabi_dcmpeq>
 8009d6a:	b9c8      	cbnz	r0, 8009da0 <_printf_float+0x420>
 8009d6c:	4653      	mov	r3, sl
 8009d6e:	4642      	mov	r2, r8
 8009d70:	4631      	mov	r1, r6
 8009d72:	4628      	mov	r0, r5
 8009d74:	47b8      	blx	r7
 8009d76:	3001      	adds	r0, #1
 8009d78:	d10e      	bne.n	8009d98 <_printf_float+0x418>
 8009d7a:	e65e      	b.n	8009a3a <_printf_float+0xba>
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	4652      	mov	r2, sl
 8009d80:	4631      	mov	r1, r6
 8009d82:	4628      	mov	r0, r5
 8009d84:	47b8      	blx	r7
 8009d86:	3001      	adds	r0, #1
 8009d88:	f43f ae57 	beq.w	8009a3a <_printf_float+0xba>
 8009d8c:	f108 0801 	add.w	r8, r8, #1
 8009d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d92:	3b01      	subs	r3, #1
 8009d94:	4543      	cmp	r3, r8
 8009d96:	dcf1      	bgt.n	8009d7c <_printf_float+0x3fc>
 8009d98:	464b      	mov	r3, r9
 8009d9a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009d9e:	e6de      	b.n	8009b5e <_printf_float+0x1de>
 8009da0:	f04f 0800 	mov.w	r8, #0
 8009da4:	f104 0a1a 	add.w	sl, r4, #26
 8009da8:	e7f2      	b.n	8009d90 <_printf_float+0x410>
 8009daa:	2301      	movs	r3, #1
 8009dac:	e7df      	b.n	8009d6e <_printf_float+0x3ee>
 8009dae:	2301      	movs	r3, #1
 8009db0:	464a      	mov	r2, r9
 8009db2:	4631      	mov	r1, r6
 8009db4:	4628      	mov	r0, r5
 8009db6:	47b8      	blx	r7
 8009db8:	3001      	adds	r0, #1
 8009dba:	f43f ae3e 	beq.w	8009a3a <_printf_float+0xba>
 8009dbe:	f108 0801 	add.w	r8, r8, #1
 8009dc2:	68e3      	ldr	r3, [r4, #12]
 8009dc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009dc6:	1a9b      	subs	r3, r3, r2
 8009dc8:	4543      	cmp	r3, r8
 8009dca:	dcf0      	bgt.n	8009dae <_printf_float+0x42e>
 8009dcc:	e6fc      	b.n	8009bc8 <_printf_float+0x248>
 8009dce:	f04f 0800 	mov.w	r8, #0
 8009dd2:	f104 0919 	add.w	r9, r4, #25
 8009dd6:	e7f4      	b.n	8009dc2 <_printf_float+0x442>
 8009dd8:	2900      	cmp	r1, #0
 8009dda:	f43f ae8b 	beq.w	8009af4 <_printf_float+0x174>
 8009dde:	2300      	movs	r3, #0
 8009de0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009de4:	ab09      	add	r3, sp, #36	; 0x24
 8009de6:	9300      	str	r3, [sp, #0]
 8009de8:	ec49 8b10 	vmov	d0, r8, r9
 8009dec:	6022      	str	r2, [r4, #0]
 8009dee:	f8cd a004 	str.w	sl, [sp, #4]
 8009df2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009df6:	4628      	mov	r0, r5
 8009df8:	f7ff fd2d 	bl	8009856 <__cvt>
 8009dfc:	4680      	mov	r8, r0
 8009dfe:	e648      	b.n	8009a92 <_printf_float+0x112>

08009e00 <_printf_common>:
 8009e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e04:	4691      	mov	r9, r2
 8009e06:	461f      	mov	r7, r3
 8009e08:	688a      	ldr	r2, [r1, #8]
 8009e0a:	690b      	ldr	r3, [r1, #16]
 8009e0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e10:	4293      	cmp	r3, r2
 8009e12:	bfb8      	it	lt
 8009e14:	4613      	movlt	r3, r2
 8009e16:	f8c9 3000 	str.w	r3, [r9]
 8009e1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e1e:	4606      	mov	r6, r0
 8009e20:	460c      	mov	r4, r1
 8009e22:	b112      	cbz	r2, 8009e2a <_printf_common+0x2a>
 8009e24:	3301      	adds	r3, #1
 8009e26:	f8c9 3000 	str.w	r3, [r9]
 8009e2a:	6823      	ldr	r3, [r4, #0]
 8009e2c:	0699      	lsls	r1, r3, #26
 8009e2e:	bf42      	ittt	mi
 8009e30:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009e34:	3302      	addmi	r3, #2
 8009e36:	f8c9 3000 	strmi.w	r3, [r9]
 8009e3a:	6825      	ldr	r5, [r4, #0]
 8009e3c:	f015 0506 	ands.w	r5, r5, #6
 8009e40:	d107      	bne.n	8009e52 <_printf_common+0x52>
 8009e42:	f104 0a19 	add.w	sl, r4, #25
 8009e46:	68e3      	ldr	r3, [r4, #12]
 8009e48:	f8d9 2000 	ldr.w	r2, [r9]
 8009e4c:	1a9b      	subs	r3, r3, r2
 8009e4e:	42ab      	cmp	r3, r5
 8009e50:	dc28      	bgt.n	8009ea4 <_printf_common+0xa4>
 8009e52:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009e56:	6822      	ldr	r2, [r4, #0]
 8009e58:	3300      	adds	r3, #0
 8009e5a:	bf18      	it	ne
 8009e5c:	2301      	movne	r3, #1
 8009e5e:	0692      	lsls	r2, r2, #26
 8009e60:	d42d      	bmi.n	8009ebe <_printf_common+0xbe>
 8009e62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e66:	4639      	mov	r1, r7
 8009e68:	4630      	mov	r0, r6
 8009e6a:	47c0      	blx	r8
 8009e6c:	3001      	adds	r0, #1
 8009e6e:	d020      	beq.n	8009eb2 <_printf_common+0xb2>
 8009e70:	6823      	ldr	r3, [r4, #0]
 8009e72:	68e5      	ldr	r5, [r4, #12]
 8009e74:	f8d9 2000 	ldr.w	r2, [r9]
 8009e78:	f003 0306 	and.w	r3, r3, #6
 8009e7c:	2b04      	cmp	r3, #4
 8009e7e:	bf08      	it	eq
 8009e80:	1aad      	subeq	r5, r5, r2
 8009e82:	68a3      	ldr	r3, [r4, #8]
 8009e84:	6922      	ldr	r2, [r4, #16]
 8009e86:	bf0c      	ite	eq
 8009e88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e8c:	2500      	movne	r5, #0
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	bfc4      	itt	gt
 8009e92:	1a9b      	subgt	r3, r3, r2
 8009e94:	18ed      	addgt	r5, r5, r3
 8009e96:	f04f 0900 	mov.w	r9, #0
 8009e9a:	341a      	adds	r4, #26
 8009e9c:	454d      	cmp	r5, r9
 8009e9e:	d11a      	bne.n	8009ed6 <_printf_common+0xd6>
 8009ea0:	2000      	movs	r0, #0
 8009ea2:	e008      	b.n	8009eb6 <_printf_common+0xb6>
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	4652      	mov	r2, sl
 8009ea8:	4639      	mov	r1, r7
 8009eaa:	4630      	mov	r0, r6
 8009eac:	47c0      	blx	r8
 8009eae:	3001      	adds	r0, #1
 8009eb0:	d103      	bne.n	8009eba <_printf_common+0xba>
 8009eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8009eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eba:	3501      	adds	r5, #1
 8009ebc:	e7c3      	b.n	8009e46 <_printf_common+0x46>
 8009ebe:	18e1      	adds	r1, r4, r3
 8009ec0:	1c5a      	adds	r2, r3, #1
 8009ec2:	2030      	movs	r0, #48	; 0x30
 8009ec4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ec8:	4422      	add	r2, r4
 8009eca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ece:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ed2:	3302      	adds	r3, #2
 8009ed4:	e7c5      	b.n	8009e62 <_printf_common+0x62>
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	4622      	mov	r2, r4
 8009eda:	4639      	mov	r1, r7
 8009edc:	4630      	mov	r0, r6
 8009ede:	47c0      	blx	r8
 8009ee0:	3001      	adds	r0, #1
 8009ee2:	d0e6      	beq.n	8009eb2 <_printf_common+0xb2>
 8009ee4:	f109 0901 	add.w	r9, r9, #1
 8009ee8:	e7d8      	b.n	8009e9c <_printf_common+0x9c>
	...

08009eec <_printf_i>:
 8009eec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ef0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009ef4:	460c      	mov	r4, r1
 8009ef6:	7e09      	ldrb	r1, [r1, #24]
 8009ef8:	b085      	sub	sp, #20
 8009efa:	296e      	cmp	r1, #110	; 0x6e
 8009efc:	4617      	mov	r7, r2
 8009efe:	4606      	mov	r6, r0
 8009f00:	4698      	mov	r8, r3
 8009f02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f04:	f000 80b3 	beq.w	800a06e <_printf_i+0x182>
 8009f08:	d822      	bhi.n	8009f50 <_printf_i+0x64>
 8009f0a:	2963      	cmp	r1, #99	; 0x63
 8009f0c:	d036      	beq.n	8009f7c <_printf_i+0x90>
 8009f0e:	d80a      	bhi.n	8009f26 <_printf_i+0x3a>
 8009f10:	2900      	cmp	r1, #0
 8009f12:	f000 80b9 	beq.w	800a088 <_printf_i+0x19c>
 8009f16:	2958      	cmp	r1, #88	; 0x58
 8009f18:	f000 8083 	beq.w	800a022 <_printf_i+0x136>
 8009f1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f20:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009f24:	e032      	b.n	8009f8c <_printf_i+0xa0>
 8009f26:	2964      	cmp	r1, #100	; 0x64
 8009f28:	d001      	beq.n	8009f2e <_printf_i+0x42>
 8009f2a:	2969      	cmp	r1, #105	; 0x69
 8009f2c:	d1f6      	bne.n	8009f1c <_printf_i+0x30>
 8009f2e:	6820      	ldr	r0, [r4, #0]
 8009f30:	6813      	ldr	r3, [r2, #0]
 8009f32:	0605      	lsls	r5, r0, #24
 8009f34:	f103 0104 	add.w	r1, r3, #4
 8009f38:	d52a      	bpl.n	8009f90 <_printf_i+0xa4>
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	6011      	str	r1, [r2, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	da03      	bge.n	8009f4a <_printf_i+0x5e>
 8009f42:	222d      	movs	r2, #45	; 0x2d
 8009f44:	425b      	negs	r3, r3
 8009f46:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009f4a:	486f      	ldr	r0, [pc, #444]	; (800a108 <_printf_i+0x21c>)
 8009f4c:	220a      	movs	r2, #10
 8009f4e:	e039      	b.n	8009fc4 <_printf_i+0xd8>
 8009f50:	2973      	cmp	r1, #115	; 0x73
 8009f52:	f000 809d 	beq.w	800a090 <_printf_i+0x1a4>
 8009f56:	d808      	bhi.n	8009f6a <_printf_i+0x7e>
 8009f58:	296f      	cmp	r1, #111	; 0x6f
 8009f5a:	d020      	beq.n	8009f9e <_printf_i+0xb2>
 8009f5c:	2970      	cmp	r1, #112	; 0x70
 8009f5e:	d1dd      	bne.n	8009f1c <_printf_i+0x30>
 8009f60:	6823      	ldr	r3, [r4, #0]
 8009f62:	f043 0320 	orr.w	r3, r3, #32
 8009f66:	6023      	str	r3, [r4, #0]
 8009f68:	e003      	b.n	8009f72 <_printf_i+0x86>
 8009f6a:	2975      	cmp	r1, #117	; 0x75
 8009f6c:	d017      	beq.n	8009f9e <_printf_i+0xb2>
 8009f6e:	2978      	cmp	r1, #120	; 0x78
 8009f70:	d1d4      	bne.n	8009f1c <_printf_i+0x30>
 8009f72:	2378      	movs	r3, #120	; 0x78
 8009f74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f78:	4864      	ldr	r0, [pc, #400]	; (800a10c <_printf_i+0x220>)
 8009f7a:	e055      	b.n	800a028 <_printf_i+0x13c>
 8009f7c:	6813      	ldr	r3, [r2, #0]
 8009f7e:	1d19      	adds	r1, r3, #4
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	6011      	str	r1, [r2, #0]
 8009f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	e08c      	b.n	800a0aa <_printf_i+0x1be>
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	6011      	str	r1, [r2, #0]
 8009f94:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009f98:	bf18      	it	ne
 8009f9a:	b21b      	sxthne	r3, r3
 8009f9c:	e7cf      	b.n	8009f3e <_printf_i+0x52>
 8009f9e:	6813      	ldr	r3, [r2, #0]
 8009fa0:	6825      	ldr	r5, [r4, #0]
 8009fa2:	1d18      	adds	r0, r3, #4
 8009fa4:	6010      	str	r0, [r2, #0]
 8009fa6:	0628      	lsls	r0, r5, #24
 8009fa8:	d501      	bpl.n	8009fae <_printf_i+0xc2>
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	e002      	b.n	8009fb4 <_printf_i+0xc8>
 8009fae:	0668      	lsls	r0, r5, #25
 8009fb0:	d5fb      	bpl.n	8009faa <_printf_i+0xbe>
 8009fb2:	881b      	ldrh	r3, [r3, #0]
 8009fb4:	4854      	ldr	r0, [pc, #336]	; (800a108 <_printf_i+0x21c>)
 8009fb6:	296f      	cmp	r1, #111	; 0x6f
 8009fb8:	bf14      	ite	ne
 8009fba:	220a      	movne	r2, #10
 8009fbc:	2208      	moveq	r2, #8
 8009fbe:	2100      	movs	r1, #0
 8009fc0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009fc4:	6865      	ldr	r5, [r4, #4]
 8009fc6:	60a5      	str	r5, [r4, #8]
 8009fc8:	2d00      	cmp	r5, #0
 8009fca:	f2c0 8095 	blt.w	800a0f8 <_printf_i+0x20c>
 8009fce:	6821      	ldr	r1, [r4, #0]
 8009fd0:	f021 0104 	bic.w	r1, r1, #4
 8009fd4:	6021      	str	r1, [r4, #0]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d13d      	bne.n	800a056 <_printf_i+0x16a>
 8009fda:	2d00      	cmp	r5, #0
 8009fdc:	f040 808e 	bne.w	800a0fc <_printf_i+0x210>
 8009fe0:	4665      	mov	r5, ip
 8009fe2:	2a08      	cmp	r2, #8
 8009fe4:	d10b      	bne.n	8009ffe <_printf_i+0x112>
 8009fe6:	6823      	ldr	r3, [r4, #0]
 8009fe8:	07db      	lsls	r3, r3, #31
 8009fea:	d508      	bpl.n	8009ffe <_printf_i+0x112>
 8009fec:	6923      	ldr	r3, [r4, #16]
 8009fee:	6862      	ldr	r2, [r4, #4]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	bfde      	ittt	le
 8009ff4:	2330      	movle	r3, #48	; 0x30
 8009ff6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ffa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009ffe:	ebac 0305 	sub.w	r3, ip, r5
 800a002:	6123      	str	r3, [r4, #16]
 800a004:	f8cd 8000 	str.w	r8, [sp]
 800a008:	463b      	mov	r3, r7
 800a00a:	aa03      	add	r2, sp, #12
 800a00c:	4621      	mov	r1, r4
 800a00e:	4630      	mov	r0, r6
 800a010:	f7ff fef6 	bl	8009e00 <_printf_common>
 800a014:	3001      	adds	r0, #1
 800a016:	d14d      	bne.n	800a0b4 <_printf_i+0x1c8>
 800a018:	f04f 30ff 	mov.w	r0, #4294967295
 800a01c:	b005      	add	sp, #20
 800a01e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a022:	4839      	ldr	r0, [pc, #228]	; (800a108 <_printf_i+0x21c>)
 800a024:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a028:	6813      	ldr	r3, [r2, #0]
 800a02a:	6821      	ldr	r1, [r4, #0]
 800a02c:	1d1d      	adds	r5, r3, #4
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	6015      	str	r5, [r2, #0]
 800a032:	060a      	lsls	r2, r1, #24
 800a034:	d50b      	bpl.n	800a04e <_printf_i+0x162>
 800a036:	07ca      	lsls	r2, r1, #31
 800a038:	bf44      	itt	mi
 800a03a:	f041 0120 	orrmi.w	r1, r1, #32
 800a03e:	6021      	strmi	r1, [r4, #0]
 800a040:	b91b      	cbnz	r3, 800a04a <_printf_i+0x15e>
 800a042:	6822      	ldr	r2, [r4, #0]
 800a044:	f022 0220 	bic.w	r2, r2, #32
 800a048:	6022      	str	r2, [r4, #0]
 800a04a:	2210      	movs	r2, #16
 800a04c:	e7b7      	b.n	8009fbe <_printf_i+0xd2>
 800a04e:	064d      	lsls	r5, r1, #25
 800a050:	bf48      	it	mi
 800a052:	b29b      	uxthmi	r3, r3
 800a054:	e7ef      	b.n	800a036 <_printf_i+0x14a>
 800a056:	4665      	mov	r5, ip
 800a058:	fbb3 f1f2 	udiv	r1, r3, r2
 800a05c:	fb02 3311 	mls	r3, r2, r1, r3
 800a060:	5cc3      	ldrb	r3, [r0, r3]
 800a062:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a066:	460b      	mov	r3, r1
 800a068:	2900      	cmp	r1, #0
 800a06a:	d1f5      	bne.n	800a058 <_printf_i+0x16c>
 800a06c:	e7b9      	b.n	8009fe2 <_printf_i+0xf6>
 800a06e:	6813      	ldr	r3, [r2, #0]
 800a070:	6825      	ldr	r5, [r4, #0]
 800a072:	6961      	ldr	r1, [r4, #20]
 800a074:	1d18      	adds	r0, r3, #4
 800a076:	6010      	str	r0, [r2, #0]
 800a078:	0628      	lsls	r0, r5, #24
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	d501      	bpl.n	800a082 <_printf_i+0x196>
 800a07e:	6019      	str	r1, [r3, #0]
 800a080:	e002      	b.n	800a088 <_printf_i+0x19c>
 800a082:	066a      	lsls	r2, r5, #25
 800a084:	d5fb      	bpl.n	800a07e <_printf_i+0x192>
 800a086:	8019      	strh	r1, [r3, #0]
 800a088:	2300      	movs	r3, #0
 800a08a:	6123      	str	r3, [r4, #16]
 800a08c:	4665      	mov	r5, ip
 800a08e:	e7b9      	b.n	800a004 <_printf_i+0x118>
 800a090:	6813      	ldr	r3, [r2, #0]
 800a092:	1d19      	adds	r1, r3, #4
 800a094:	6011      	str	r1, [r2, #0]
 800a096:	681d      	ldr	r5, [r3, #0]
 800a098:	6862      	ldr	r2, [r4, #4]
 800a09a:	2100      	movs	r1, #0
 800a09c:	4628      	mov	r0, r5
 800a09e:	f7f6 f8af 	bl	8000200 <memchr>
 800a0a2:	b108      	cbz	r0, 800a0a8 <_printf_i+0x1bc>
 800a0a4:	1b40      	subs	r0, r0, r5
 800a0a6:	6060      	str	r0, [r4, #4]
 800a0a8:	6863      	ldr	r3, [r4, #4]
 800a0aa:	6123      	str	r3, [r4, #16]
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0b2:	e7a7      	b.n	800a004 <_printf_i+0x118>
 800a0b4:	6923      	ldr	r3, [r4, #16]
 800a0b6:	462a      	mov	r2, r5
 800a0b8:	4639      	mov	r1, r7
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	47c0      	blx	r8
 800a0be:	3001      	adds	r0, #1
 800a0c0:	d0aa      	beq.n	800a018 <_printf_i+0x12c>
 800a0c2:	6823      	ldr	r3, [r4, #0]
 800a0c4:	079b      	lsls	r3, r3, #30
 800a0c6:	d413      	bmi.n	800a0f0 <_printf_i+0x204>
 800a0c8:	68e0      	ldr	r0, [r4, #12]
 800a0ca:	9b03      	ldr	r3, [sp, #12]
 800a0cc:	4298      	cmp	r0, r3
 800a0ce:	bfb8      	it	lt
 800a0d0:	4618      	movlt	r0, r3
 800a0d2:	e7a3      	b.n	800a01c <_printf_i+0x130>
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	464a      	mov	r2, r9
 800a0d8:	4639      	mov	r1, r7
 800a0da:	4630      	mov	r0, r6
 800a0dc:	47c0      	blx	r8
 800a0de:	3001      	adds	r0, #1
 800a0e0:	d09a      	beq.n	800a018 <_printf_i+0x12c>
 800a0e2:	3501      	adds	r5, #1
 800a0e4:	68e3      	ldr	r3, [r4, #12]
 800a0e6:	9a03      	ldr	r2, [sp, #12]
 800a0e8:	1a9b      	subs	r3, r3, r2
 800a0ea:	42ab      	cmp	r3, r5
 800a0ec:	dcf2      	bgt.n	800a0d4 <_printf_i+0x1e8>
 800a0ee:	e7eb      	b.n	800a0c8 <_printf_i+0x1dc>
 800a0f0:	2500      	movs	r5, #0
 800a0f2:	f104 0919 	add.w	r9, r4, #25
 800a0f6:	e7f5      	b.n	800a0e4 <_printf_i+0x1f8>
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d1ac      	bne.n	800a056 <_printf_i+0x16a>
 800a0fc:	7803      	ldrb	r3, [r0, #0]
 800a0fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a102:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a106:	e76c      	b.n	8009fe2 <_printf_i+0xf6>
 800a108:	0800cd62 	.word	0x0800cd62
 800a10c:	0800cd73 	.word	0x0800cd73

0800a110 <iprintf>:
 800a110:	b40f      	push	{r0, r1, r2, r3}
 800a112:	4b0a      	ldr	r3, [pc, #40]	; (800a13c <iprintf+0x2c>)
 800a114:	b513      	push	{r0, r1, r4, lr}
 800a116:	681c      	ldr	r4, [r3, #0]
 800a118:	b124      	cbz	r4, 800a124 <iprintf+0x14>
 800a11a:	69a3      	ldr	r3, [r4, #24]
 800a11c:	b913      	cbnz	r3, 800a124 <iprintf+0x14>
 800a11e:	4620      	mov	r0, r4
 800a120:	f001 f91e 	bl	800b360 <__sinit>
 800a124:	ab05      	add	r3, sp, #20
 800a126:	9a04      	ldr	r2, [sp, #16]
 800a128:	68a1      	ldr	r1, [r4, #8]
 800a12a:	9301      	str	r3, [sp, #4]
 800a12c:	4620      	mov	r0, r4
 800a12e:	f001 fdd7 	bl	800bce0 <_vfiprintf_r>
 800a132:	b002      	add	sp, #8
 800a134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a138:	b004      	add	sp, #16
 800a13a:	4770      	bx	lr
 800a13c:	20000020 	.word	0x20000020

0800a140 <_puts_r>:
 800a140:	b570      	push	{r4, r5, r6, lr}
 800a142:	460e      	mov	r6, r1
 800a144:	4605      	mov	r5, r0
 800a146:	b118      	cbz	r0, 800a150 <_puts_r+0x10>
 800a148:	6983      	ldr	r3, [r0, #24]
 800a14a:	b90b      	cbnz	r3, 800a150 <_puts_r+0x10>
 800a14c:	f001 f908 	bl	800b360 <__sinit>
 800a150:	69ab      	ldr	r3, [r5, #24]
 800a152:	68ac      	ldr	r4, [r5, #8]
 800a154:	b913      	cbnz	r3, 800a15c <_puts_r+0x1c>
 800a156:	4628      	mov	r0, r5
 800a158:	f001 f902 	bl	800b360 <__sinit>
 800a15c:	4b23      	ldr	r3, [pc, #140]	; (800a1ec <_puts_r+0xac>)
 800a15e:	429c      	cmp	r4, r3
 800a160:	d117      	bne.n	800a192 <_puts_r+0x52>
 800a162:	686c      	ldr	r4, [r5, #4]
 800a164:	89a3      	ldrh	r3, [r4, #12]
 800a166:	071b      	lsls	r3, r3, #28
 800a168:	d51d      	bpl.n	800a1a6 <_puts_r+0x66>
 800a16a:	6923      	ldr	r3, [r4, #16]
 800a16c:	b1db      	cbz	r3, 800a1a6 <_puts_r+0x66>
 800a16e:	3e01      	subs	r6, #1
 800a170:	68a3      	ldr	r3, [r4, #8]
 800a172:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a176:	3b01      	subs	r3, #1
 800a178:	60a3      	str	r3, [r4, #8]
 800a17a:	b9e9      	cbnz	r1, 800a1b8 <_puts_r+0x78>
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	da2e      	bge.n	800a1de <_puts_r+0x9e>
 800a180:	4622      	mov	r2, r4
 800a182:	210a      	movs	r1, #10
 800a184:	4628      	mov	r0, r5
 800a186:	f000 f8f5 	bl	800a374 <__swbuf_r>
 800a18a:	3001      	adds	r0, #1
 800a18c:	d011      	beq.n	800a1b2 <_puts_r+0x72>
 800a18e:	200a      	movs	r0, #10
 800a190:	e011      	b.n	800a1b6 <_puts_r+0x76>
 800a192:	4b17      	ldr	r3, [pc, #92]	; (800a1f0 <_puts_r+0xb0>)
 800a194:	429c      	cmp	r4, r3
 800a196:	d101      	bne.n	800a19c <_puts_r+0x5c>
 800a198:	68ac      	ldr	r4, [r5, #8]
 800a19a:	e7e3      	b.n	800a164 <_puts_r+0x24>
 800a19c:	4b15      	ldr	r3, [pc, #84]	; (800a1f4 <_puts_r+0xb4>)
 800a19e:	429c      	cmp	r4, r3
 800a1a0:	bf08      	it	eq
 800a1a2:	68ec      	ldreq	r4, [r5, #12]
 800a1a4:	e7de      	b.n	800a164 <_puts_r+0x24>
 800a1a6:	4621      	mov	r1, r4
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	f000 f935 	bl	800a418 <__swsetup_r>
 800a1ae:	2800      	cmp	r0, #0
 800a1b0:	d0dd      	beq.n	800a16e <_puts_r+0x2e>
 800a1b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b6:	bd70      	pop	{r4, r5, r6, pc}
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	da04      	bge.n	800a1c6 <_puts_r+0x86>
 800a1bc:	69a2      	ldr	r2, [r4, #24]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	dc06      	bgt.n	800a1d0 <_puts_r+0x90>
 800a1c2:	290a      	cmp	r1, #10
 800a1c4:	d004      	beq.n	800a1d0 <_puts_r+0x90>
 800a1c6:	6823      	ldr	r3, [r4, #0]
 800a1c8:	1c5a      	adds	r2, r3, #1
 800a1ca:	6022      	str	r2, [r4, #0]
 800a1cc:	7019      	strb	r1, [r3, #0]
 800a1ce:	e7cf      	b.n	800a170 <_puts_r+0x30>
 800a1d0:	4622      	mov	r2, r4
 800a1d2:	4628      	mov	r0, r5
 800a1d4:	f000 f8ce 	bl	800a374 <__swbuf_r>
 800a1d8:	3001      	adds	r0, #1
 800a1da:	d1c9      	bne.n	800a170 <_puts_r+0x30>
 800a1dc:	e7e9      	b.n	800a1b2 <_puts_r+0x72>
 800a1de:	6823      	ldr	r3, [r4, #0]
 800a1e0:	200a      	movs	r0, #10
 800a1e2:	1c5a      	adds	r2, r3, #1
 800a1e4:	6022      	str	r2, [r4, #0]
 800a1e6:	7018      	strb	r0, [r3, #0]
 800a1e8:	e7e5      	b.n	800a1b6 <_puts_r+0x76>
 800a1ea:	bf00      	nop
 800a1ec:	0800cdb4 	.word	0x0800cdb4
 800a1f0:	0800cdd4 	.word	0x0800cdd4
 800a1f4:	0800cd94 	.word	0x0800cd94

0800a1f8 <puts>:
 800a1f8:	4b02      	ldr	r3, [pc, #8]	; (800a204 <puts+0xc>)
 800a1fa:	4601      	mov	r1, r0
 800a1fc:	6818      	ldr	r0, [r3, #0]
 800a1fe:	f7ff bf9f 	b.w	800a140 <_puts_r>
 800a202:	bf00      	nop
 800a204:	20000020 	.word	0x20000020

0800a208 <setbuf>:
 800a208:	2900      	cmp	r1, #0
 800a20a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a20e:	bf0c      	ite	eq
 800a210:	2202      	moveq	r2, #2
 800a212:	2200      	movne	r2, #0
 800a214:	f000 b800 	b.w	800a218 <setvbuf>

0800a218 <setvbuf>:
 800a218:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a21c:	461d      	mov	r5, r3
 800a21e:	4b51      	ldr	r3, [pc, #324]	; (800a364 <setvbuf+0x14c>)
 800a220:	681e      	ldr	r6, [r3, #0]
 800a222:	4604      	mov	r4, r0
 800a224:	460f      	mov	r7, r1
 800a226:	4690      	mov	r8, r2
 800a228:	b126      	cbz	r6, 800a234 <setvbuf+0x1c>
 800a22a:	69b3      	ldr	r3, [r6, #24]
 800a22c:	b913      	cbnz	r3, 800a234 <setvbuf+0x1c>
 800a22e:	4630      	mov	r0, r6
 800a230:	f001 f896 	bl	800b360 <__sinit>
 800a234:	4b4c      	ldr	r3, [pc, #304]	; (800a368 <setvbuf+0x150>)
 800a236:	429c      	cmp	r4, r3
 800a238:	d152      	bne.n	800a2e0 <setvbuf+0xc8>
 800a23a:	6874      	ldr	r4, [r6, #4]
 800a23c:	f1b8 0f02 	cmp.w	r8, #2
 800a240:	d006      	beq.n	800a250 <setvbuf+0x38>
 800a242:	f1b8 0f01 	cmp.w	r8, #1
 800a246:	f200 8089 	bhi.w	800a35c <setvbuf+0x144>
 800a24a:	2d00      	cmp	r5, #0
 800a24c:	f2c0 8086 	blt.w	800a35c <setvbuf+0x144>
 800a250:	4621      	mov	r1, r4
 800a252:	4630      	mov	r0, r6
 800a254:	f001 f81a 	bl	800b28c <_fflush_r>
 800a258:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a25a:	b141      	cbz	r1, 800a26e <setvbuf+0x56>
 800a25c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a260:	4299      	cmp	r1, r3
 800a262:	d002      	beq.n	800a26a <setvbuf+0x52>
 800a264:	4630      	mov	r0, r6
 800a266:	f001 fc69 	bl	800bb3c <_free_r>
 800a26a:	2300      	movs	r3, #0
 800a26c:	6363      	str	r3, [r4, #52]	; 0x34
 800a26e:	2300      	movs	r3, #0
 800a270:	61a3      	str	r3, [r4, #24]
 800a272:	6063      	str	r3, [r4, #4]
 800a274:	89a3      	ldrh	r3, [r4, #12]
 800a276:	061b      	lsls	r3, r3, #24
 800a278:	d503      	bpl.n	800a282 <setvbuf+0x6a>
 800a27a:	6921      	ldr	r1, [r4, #16]
 800a27c:	4630      	mov	r0, r6
 800a27e:	f001 fc5d 	bl	800bb3c <_free_r>
 800a282:	89a3      	ldrh	r3, [r4, #12]
 800a284:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800a288:	f023 0303 	bic.w	r3, r3, #3
 800a28c:	f1b8 0f02 	cmp.w	r8, #2
 800a290:	81a3      	strh	r3, [r4, #12]
 800a292:	d05d      	beq.n	800a350 <setvbuf+0x138>
 800a294:	ab01      	add	r3, sp, #4
 800a296:	466a      	mov	r2, sp
 800a298:	4621      	mov	r1, r4
 800a29a:	4630      	mov	r0, r6
 800a29c:	f001 f8f8 	bl	800b490 <__swhatbuf_r>
 800a2a0:	89a3      	ldrh	r3, [r4, #12]
 800a2a2:	4318      	orrs	r0, r3
 800a2a4:	81a0      	strh	r0, [r4, #12]
 800a2a6:	bb2d      	cbnz	r5, 800a2f4 <setvbuf+0xdc>
 800a2a8:	9d00      	ldr	r5, [sp, #0]
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	f001 f954 	bl	800b558 <malloc>
 800a2b0:	4607      	mov	r7, r0
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	d14e      	bne.n	800a354 <setvbuf+0x13c>
 800a2b6:	f8dd 9000 	ldr.w	r9, [sp]
 800a2ba:	45a9      	cmp	r9, r5
 800a2bc:	d13c      	bne.n	800a338 <setvbuf+0x120>
 800a2be:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c2:	89a3      	ldrh	r3, [r4, #12]
 800a2c4:	f043 0302 	orr.w	r3, r3, #2
 800a2c8:	81a3      	strh	r3, [r4, #12]
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	60a3      	str	r3, [r4, #8]
 800a2ce:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a2d2:	6023      	str	r3, [r4, #0]
 800a2d4:	6123      	str	r3, [r4, #16]
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	6163      	str	r3, [r4, #20]
 800a2da:	b003      	add	sp, #12
 800a2dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2e0:	4b22      	ldr	r3, [pc, #136]	; (800a36c <setvbuf+0x154>)
 800a2e2:	429c      	cmp	r4, r3
 800a2e4:	d101      	bne.n	800a2ea <setvbuf+0xd2>
 800a2e6:	68b4      	ldr	r4, [r6, #8]
 800a2e8:	e7a8      	b.n	800a23c <setvbuf+0x24>
 800a2ea:	4b21      	ldr	r3, [pc, #132]	; (800a370 <setvbuf+0x158>)
 800a2ec:	429c      	cmp	r4, r3
 800a2ee:	bf08      	it	eq
 800a2f0:	68f4      	ldreq	r4, [r6, #12]
 800a2f2:	e7a3      	b.n	800a23c <setvbuf+0x24>
 800a2f4:	2f00      	cmp	r7, #0
 800a2f6:	d0d8      	beq.n	800a2aa <setvbuf+0x92>
 800a2f8:	69b3      	ldr	r3, [r6, #24]
 800a2fa:	b913      	cbnz	r3, 800a302 <setvbuf+0xea>
 800a2fc:	4630      	mov	r0, r6
 800a2fe:	f001 f82f 	bl	800b360 <__sinit>
 800a302:	f1b8 0f01 	cmp.w	r8, #1
 800a306:	bf08      	it	eq
 800a308:	89a3      	ldrheq	r3, [r4, #12]
 800a30a:	6027      	str	r7, [r4, #0]
 800a30c:	bf04      	itt	eq
 800a30e:	f043 0301 	orreq.w	r3, r3, #1
 800a312:	81a3      	strheq	r3, [r4, #12]
 800a314:	89a3      	ldrh	r3, [r4, #12]
 800a316:	f013 0008 	ands.w	r0, r3, #8
 800a31a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800a31e:	d01b      	beq.n	800a358 <setvbuf+0x140>
 800a320:	f013 0001 	ands.w	r0, r3, #1
 800a324:	bf18      	it	ne
 800a326:	426d      	negne	r5, r5
 800a328:	f04f 0300 	mov.w	r3, #0
 800a32c:	bf1d      	ittte	ne
 800a32e:	60a3      	strne	r3, [r4, #8]
 800a330:	61a5      	strne	r5, [r4, #24]
 800a332:	4618      	movne	r0, r3
 800a334:	60a5      	streq	r5, [r4, #8]
 800a336:	e7d0      	b.n	800a2da <setvbuf+0xc2>
 800a338:	4648      	mov	r0, r9
 800a33a:	f001 f90d 	bl	800b558 <malloc>
 800a33e:	4607      	mov	r7, r0
 800a340:	2800      	cmp	r0, #0
 800a342:	d0bc      	beq.n	800a2be <setvbuf+0xa6>
 800a344:	89a3      	ldrh	r3, [r4, #12]
 800a346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a34a:	81a3      	strh	r3, [r4, #12]
 800a34c:	464d      	mov	r5, r9
 800a34e:	e7d3      	b.n	800a2f8 <setvbuf+0xe0>
 800a350:	2000      	movs	r0, #0
 800a352:	e7b6      	b.n	800a2c2 <setvbuf+0xaa>
 800a354:	46a9      	mov	r9, r5
 800a356:	e7f5      	b.n	800a344 <setvbuf+0x12c>
 800a358:	60a0      	str	r0, [r4, #8]
 800a35a:	e7be      	b.n	800a2da <setvbuf+0xc2>
 800a35c:	f04f 30ff 	mov.w	r0, #4294967295
 800a360:	e7bb      	b.n	800a2da <setvbuf+0xc2>
 800a362:	bf00      	nop
 800a364:	20000020 	.word	0x20000020
 800a368:	0800cdb4 	.word	0x0800cdb4
 800a36c:	0800cdd4 	.word	0x0800cdd4
 800a370:	0800cd94 	.word	0x0800cd94

0800a374 <__swbuf_r>:
 800a374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a376:	460e      	mov	r6, r1
 800a378:	4614      	mov	r4, r2
 800a37a:	4605      	mov	r5, r0
 800a37c:	b118      	cbz	r0, 800a386 <__swbuf_r+0x12>
 800a37e:	6983      	ldr	r3, [r0, #24]
 800a380:	b90b      	cbnz	r3, 800a386 <__swbuf_r+0x12>
 800a382:	f000 ffed 	bl	800b360 <__sinit>
 800a386:	4b21      	ldr	r3, [pc, #132]	; (800a40c <__swbuf_r+0x98>)
 800a388:	429c      	cmp	r4, r3
 800a38a:	d12a      	bne.n	800a3e2 <__swbuf_r+0x6e>
 800a38c:	686c      	ldr	r4, [r5, #4]
 800a38e:	69a3      	ldr	r3, [r4, #24]
 800a390:	60a3      	str	r3, [r4, #8]
 800a392:	89a3      	ldrh	r3, [r4, #12]
 800a394:	071a      	lsls	r2, r3, #28
 800a396:	d52e      	bpl.n	800a3f6 <__swbuf_r+0x82>
 800a398:	6923      	ldr	r3, [r4, #16]
 800a39a:	b363      	cbz	r3, 800a3f6 <__swbuf_r+0x82>
 800a39c:	6923      	ldr	r3, [r4, #16]
 800a39e:	6820      	ldr	r0, [r4, #0]
 800a3a0:	1ac0      	subs	r0, r0, r3
 800a3a2:	6963      	ldr	r3, [r4, #20]
 800a3a4:	b2f6      	uxtb	r6, r6
 800a3a6:	4283      	cmp	r3, r0
 800a3a8:	4637      	mov	r7, r6
 800a3aa:	dc04      	bgt.n	800a3b6 <__swbuf_r+0x42>
 800a3ac:	4621      	mov	r1, r4
 800a3ae:	4628      	mov	r0, r5
 800a3b0:	f000 ff6c 	bl	800b28c <_fflush_r>
 800a3b4:	bb28      	cbnz	r0, 800a402 <__swbuf_r+0x8e>
 800a3b6:	68a3      	ldr	r3, [r4, #8]
 800a3b8:	3b01      	subs	r3, #1
 800a3ba:	60a3      	str	r3, [r4, #8]
 800a3bc:	6823      	ldr	r3, [r4, #0]
 800a3be:	1c5a      	adds	r2, r3, #1
 800a3c0:	6022      	str	r2, [r4, #0]
 800a3c2:	701e      	strb	r6, [r3, #0]
 800a3c4:	6963      	ldr	r3, [r4, #20]
 800a3c6:	3001      	adds	r0, #1
 800a3c8:	4283      	cmp	r3, r0
 800a3ca:	d004      	beq.n	800a3d6 <__swbuf_r+0x62>
 800a3cc:	89a3      	ldrh	r3, [r4, #12]
 800a3ce:	07db      	lsls	r3, r3, #31
 800a3d0:	d519      	bpl.n	800a406 <__swbuf_r+0x92>
 800a3d2:	2e0a      	cmp	r6, #10
 800a3d4:	d117      	bne.n	800a406 <__swbuf_r+0x92>
 800a3d6:	4621      	mov	r1, r4
 800a3d8:	4628      	mov	r0, r5
 800a3da:	f000 ff57 	bl	800b28c <_fflush_r>
 800a3de:	b190      	cbz	r0, 800a406 <__swbuf_r+0x92>
 800a3e0:	e00f      	b.n	800a402 <__swbuf_r+0x8e>
 800a3e2:	4b0b      	ldr	r3, [pc, #44]	; (800a410 <__swbuf_r+0x9c>)
 800a3e4:	429c      	cmp	r4, r3
 800a3e6:	d101      	bne.n	800a3ec <__swbuf_r+0x78>
 800a3e8:	68ac      	ldr	r4, [r5, #8]
 800a3ea:	e7d0      	b.n	800a38e <__swbuf_r+0x1a>
 800a3ec:	4b09      	ldr	r3, [pc, #36]	; (800a414 <__swbuf_r+0xa0>)
 800a3ee:	429c      	cmp	r4, r3
 800a3f0:	bf08      	it	eq
 800a3f2:	68ec      	ldreq	r4, [r5, #12]
 800a3f4:	e7cb      	b.n	800a38e <__swbuf_r+0x1a>
 800a3f6:	4621      	mov	r1, r4
 800a3f8:	4628      	mov	r0, r5
 800a3fa:	f000 f80d 	bl	800a418 <__swsetup_r>
 800a3fe:	2800      	cmp	r0, #0
 800a400:	d0cc      	beq.n	800a39c <__swbuf_r+0x28>
 800a402:	f04f 37ff 	mov.w	r7, #4294967295
 800a406:	4638      	mov	r0, r7
 800a408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a40a:	bf00      	nop
 800a40c:	0800cdb4 	.word	0x0800cdb4
 800a410:	0800cdd4 	.word	0x0800cdd4
 800a414:	0800cd94 	.word	0x0800cd94

0800a418 <__swsetup_r>:
 800a418:	4b32      	ldr	r3, [pc, #200]	; (800a4e4 <__swsetup_r+0xcc>)
 800a41a:	b570      	push	{r4, r5, r6, lr}
 800a41c:	681d      	ldr	r5, [r3, #0]
 800a41e:	4606      	mov	r6, r0
 800a420:	460c      	mov	r4, r1
 800a422:	b125      	cbz	r5, 800a42e <__swsetup_r+0x16>
 800a424:	69ab      	ldr	r3, [r5, #24]
 800a426:	b913      	cbnz	r3, 800a42e <__swsetup_r+0x16>
 800a428:	4628      	mov	r0, r5
 800a42a:	f000 ff99 	bl	800b360 <__sinit>
 800a42e:	4b2e      	ldr	r3, [pc, #184]	; (800a4e8 <__swsetup_r+0xd0>)
 800a430:	429c      	cmp	r4, r3
 800a432:	d10f      	bne.n	800a454 <__swsetup_r+0x3c>
 800a434:	686c      	ldr	r4, [r5, #4]
 800a436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a43a:	b29a      	uxth	r2, r3
 800a43c:	0715      	lsls	r5, r2, #28
 800a43e:	d42c      	bmi.n	800a49a <__swsetup_r+0x82>
 800a440:	06d0      	lsls	r0, r2, #27
 800a442:	d411      	bmi.n	800a468 <__swsetup_r+0x50>
 800a444:	2209      	movs	r2, #9
 800a446:	6032      	str	r2, [r6, #0]
 800a448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a44c:	81a3      	strh	r3, [r4, #12]
 800a44e:	f04f 30ff 	mov.w	r0, #4294967295
 800a452:	e03e      	b.n	800a4d2 <__swsetup_r+0xba>
 800a454:	4b25      	ldr	r3, [pc, #148]	; (800a4ec <__swsetup_r+0xd4>)
 800a456:	429c      	cmp	r4, r3
 800a458:	d101      	bne.n	800a45e <__swsetup_r+0x46>
 800a45a:	68ac      	ldr	r4, [r5, #8]
 800a45c:	e7eb      	b.n	800a436 <__swsetup_r+0x1e>
 800a45e:	4b24      	ldr	r3, [pc, #144]	; (800a4f0 <__swsetup_r+0xd8>)
 800a460:	429c      	cmp	r4, r3
 800a462:	bf08      	it	eq
 800a464:	68ec      	ldreq	r4, [r5, #12]
 800a466:	e7e6      	b.n	800a436 <__swsetup_r+0x1e>
 800a468:	0751      	lsls	r1, r2, #29
 800a46a:	d512      	bpl.n	800a492 <__swsetup_r+0x7a>
 800a46c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a46e:	b141      	cbz	r1, 800a482 <__swsetup_r+0x6a>
 800a470:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a474:	4299      	cmp	r1, r3
 800a476:	d002      	beq.n	800a47e <__swsetup_r+0x66>
 800a478:	4630      	mov	r0, r6
 800a47a:	f001 fb5f 	bl	800bb3c <_free_r>
 800a47e:	2300      	movs	r3, #0
 800a480:	6363      	str	r3, [r4, #52]	; 0x34
 800a482:	89a3      	ldrh	r3, [r4, #12]
 800a484:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a488:	81a3      	strh	r3, [r4, #12]
 800a48a:	2300      	movs	r3, #0
 800a48c:	6063      	str	r3, [r4, #4]
 800a48e:	6923      	ldr	r3, [r4, #16]
 800a490:	6023      	str	r3, [r4, #0]
 800a492:	89a3      	ldrh	r3, [r4, #12]
 800a494:	f043 0308 	orr.w	r3, r3, #8
 800a498:	81a3      	strh	r3, [r4, #12]
 800a49a:	6923      	ldr	r3, [r4, #16]
 800a49c:	b94b      	cbnz	r3, 800a4b2 <__swsetup_r+0x9a>
 800a49e:	89a3      	ldrh	r3, [r4, #12]
 800a4a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a4a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4a8:	d003      	beq.n	800a4b2 <__swsetup_r+0x9a>
 800a4aa:	4621      	mov	r1, r4
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	f001 f813 	bl	800b4d8 <__smakebuf_r>
 800a4b2:	89a2      	ldrh	r2, [r4, #12]
 800a4b4:	f012 0301 	ands.w	r3, r2, #1
 800a4b8:	d00c      	beq.n	800a4d4 <__swsetup_r+0xbc>
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	60a3      	str	r3, [r4, #8]
 800a4be:	6963      	ldr	r3, [r4, #20]
 800a4c0:	425b      	negs	r3, r3
 800a4c2:	61a3      	str	r3, [r4, #24]
 800a4c4:	6923      	ldr	r3, [r4, #16]
 800a4c6:	b953      	cbnz	r3, 800a4de <__swsetup_r+0xc6>
 800a4c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4cc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a4d0:	d1ba      	bne.n	800a448 <__swsetup_r+0x30>
 800a4d2:	bd70      	pop	{r4, r5, r6, pc}
 800a4d4:	0792      	lsls	r2, r2, #30
 800a4d6:	bf58      	it	pl
 800a4d8:	6963      	ldrpl	r3, [r4, #20]
 800a4da:	60a3      	str	r3, [r4, #8]
 800a4dc:	e7f2      	b.n	800a4c4 <__swsetup_r+0xac>
 800a4de:	2000      	movs	r0, #0
 800a4e0:	e7f7      	b.n	800a4d2 <__swsetup_r+0xba>
 800a4e2:	bf00      	nop
 800a4e4:	20000020 	.word	0x20000020
 800a4e8:	0800cdb4 	.word	0x0800cdb4
 800a4ec:	0800cdd4 	.word	0x0800cdd4
 800a4f0:	0800cd94 	.word	0x0800cd94

0800a4f4 <quorem>:
 800a4f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f8:	6903      	ldr	r3, [r0, #16]
 800a4fa:	690c      	ldr	r4, [r1, #16]
 800a4fc:	42a3      	cmp	r3, r4
 800a4fe:	4680      	mov	r8, r0
 800a500:	f2c0 8082 	blt.w	800a608 <quorem+0x114>
 800a504:	3c01      	subs	r4, #1
 800a506:	f101 0714 	add.w	r7, r1, #20
 800a50a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a50e:	f100 0614 	add.w	r6, r0, #20
 800a512:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a516:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a51a:	eb06 030c 	add.w	r3, r6, ip
 800a51e:	3501      	adds	r5, #1
 800a520:	eb07 090c 	add.w	r9, r7, ip
 800a524:	9301      	str	r3, [sp, #4]
 800a526:	fbb0 f5f5 	udiv	r5, r0, r5
 800a52a:	b395      	cbz	r5, 800a592 <quorem+0x9e>
 800a52c:	f04f 0a00 	mov.w	sl, #0
 800a530:	4638      	mov	r0, r7
 800a532:	46b6      	mov	lr, r6
 800a534:	46d3      	mov	fp, sl
 800a536:	f850 2b04 	ldr.w	r2, [r0], #4
 800a53a:	b293      	uxth	r3, r2
 800a53c:	fb05 a303 	mla	r3, r5, r3, sl
 800a540:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a544:	b29b      	uxth	r3, r3
 800a546:	ebab 0303 	sub.w	r3, fp, r3
 800a54a:	0c12      	lsrs	r2, r2, #16
 800a54c:	f8de b000 	ldr.w	fp, [lr]
 800a550:	fb05 a202 	mla	r2, r5, r2, sl
 800a554:	fa13 f38b 	uxtah	r3, r3, fp
 800a558:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a55c:	fa1f fb82 	uxth.w	fp, r2
 800a560:	f8de 2000 	ldr.w	r2, [lr]
 800a564:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a568:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a572:	4581      	cmp	r9, r0
 800a574:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a578:	f84e 3b04 	str.w	r3, [lr], #4
 800a57c:	d2db      	bcs.n	800a536 <quorem+0x42>
 800a57e:	f856 300c 	ldr.w	r3, [r6, ip]
 800a582:	b933      	cbnz	r3, 800a592 <quorem+0x9e>
 800a584:	9b01      	ldr	r3, [sp, #4]
 800a586:	3b04      	subs	r3, #4
 800a588:	429e      	cmp	r6, r3
 800a58a:	461a      	mov	r2, r3
 800a58c:	d330      	bcc.n	800a5f0 <quorem+0xfc>
 800a58e:	f8c8 4010 	str.w	r4, [r8, #16]
 800a592:	4640      	mov	r0, r8
 800a594:	f001 f9fe 	bl	800b994 <__mcmp>
 800a598:	2800      	cmp	r0, #0
 800a59a:	db25      	blt.n	800a5e8 <quorem+0xf4>
 800a59c:	3501      	adds	r5, #1
 800a59e:	4630      	mov	r0, r6
 800a5a0:	f04f 0c00 	mov.w	ip, #0
 800a5a4:	f857 2b04 	ldr.w	r2, [r7], #4
 800a5a8:	f8d0 e000 	ldr.w	lr, [r0]
 800a5ac:	b293      	uxth	r3, r2
 800a5ae:	ebac 0303 	sub.w	r3, ip, r3
 800a5b2:	0c12      	lsrs	r2, r2, #16
 800a5b4:	fa13 f38e 	uxtah	r3, r3, lr
 800a5b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a5bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a5c0:	b29b      	uxth	r3, r3
 800a5c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5c6:	45b9      	cmp	r9, r7
 800a5c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a5cc:	f840 3b04 	str.w	r3, [r0], #4
 800a5d0:	d2e8      	bcs.n	800a5a4 <quorem+0xb0>
 800a5d2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a5d6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a5da:	b92a      	cbnz	r2, 800a5e8 <quorem+0xf4>
 800a5dc:	3b04      	subs	r3, #4
 800a5de:	429e      	cmp	r6, r3
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	d30b      	bcc.n	800a5fc <quorem+0x108>
 800a5e4:	f8c8 4010 	str.w	r4, [r8, #16]
 800a5e8:	4628      	mov	r0, r5
 800a5ea:	b003      	add	sp, #12
 800a5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5f0:	6812      	ldr	r2, [r2, #0]
 800a5f2:	3b04      	subs	r3, #4
 800a5f4:	2a00      	cmp	r2, #0
 800a5f6:	d1ca      	bne.n	800a58e <quorem+0x9a>
 800a5f8:	3c01      	subs	r4, #1
 800a5fa:	e7c5      	b.n	800a588 <quorem+0x94>
 800a5fc:	6812      	ldr	r2, [r2, #0]
 800a5fe:	3b04      	subs	r3, #4
 800a600:	2a00      	cmp	r2, #0
 800a602:	d1ef      	bne.n	800a5e4 <quorem+0xf0>
 800a604:	3c01      	subs	r4, #1
 800a606:	e7ea      	b.n	800a5de <quorem+0xea>
 800a608:	2000      	movs	r0, #0
 800a60a:	e7ee      	b.n	800a5ea <quorem+0xf6>
 800a60c:	0000      	movs	r0, r0
	...

0800a610 <_dtoa_r>:
 800a610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a614:	ec57 6b10 	vmov	r6, r7, d0
 800a618:	b097      	sub	sp, #92	; 0x5c
 800a61a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a61c:	9106      	str	r1, [sp, #24]
 800a61e:	4604      	mov	r4, r0
 800a620:	920b      	str	r2, [sp, #44]	; 0x2c
 800a622:	9312      	str	r3, [sp, #72]	; 0x48
 800a624:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a628:	e9cd 6700 	strd	r6, r7, [sp]
 800a62c:	b93d      	cbnz	r5, 800a63e <_dtoa_r+0x2e>
 800a62e:	2010      	movs	r0, #16
 800a630:	f000 ff92 	bl	800b558 <malloc>
 800a634:	6260      	str	r0, [r4, #36]	; 0x24
 800a636:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a63a:	6005      	str	r5, [r0, #0]
 800a63c:	60c5      	str	r5, [r0, #12]
 800a63e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a640:	6819      	ldr	r1, [r3, #0]
 800a642:	b151      	cbz	r1, 800a65a <_dtoa_r+0x4a>
 800a644:	685a      	ldr	r2, [r3, #4]
 800a646:	604a      	str	r2, [r1, #4]
 800a648:	2301      	movs	r3, #1
 800a64a:	4093      	lsls	r3, r2
 800a64c:	608b      	str	r3, [r1, #8]
 800a64e:	4620      	mov	r0, r4
 800a650:	f000 ffbe 	bl	800b5d0 <_Bfree>
 800a654:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a656:	2200      	movs	r2, #0
 800a658:	601a      	str	r2, [r3, #0]
 800a65a:	1e3b      	subs	r3, r7, #0
 800a65c:	bfbb      	ittet	lt
 800a65e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a662:	9301      	strlt	r3, [sp, #4]
 800a664:	2300      	movge	r3, #0
 800a666:	2201      	movlt	r2, #1
 800a668:	bfac      	ite	ge
 800a66a:	f8c8 3000 	strge.w	r3, [r8]
 800a66e:	f8c8 2000 	strlt.w	r2, [r8]
 800a672:	4baf      	ldr	r3, [pc, #700]	; (800a930 <_dtoa_r+0x320>)
 800a674:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a678:	ea33 0308 	bics.w	r3, r3, r8
 800a67c:	d114      	bne.n	800a6a8 <_dtoa_r+0x98>
 800a67e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a680:	f242 730f 	movw	r3, #9999	; 0x270f
 800a684:	6013      	str	r3, [r2, #0]
 800a686:	9b00      	ldr	r3, [sp, #0]
 800a688:	b923      	cbnz	r3, 800a694 <_dtoa_r+0x84>
 800a68a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a68e:	2800      	cmp	r0, #0
 800a690:	f000 8542 	beq.w	800b118 <_dtoa_r+0xb08>
 800a694:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a696:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a944 <_dtoa_r+0x334>
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	f000 8544 	beq.w	800b128 <_dtoa_r+0xb18>
 800a6a0:	f10b 0303 	add.w	r3, fp, #3
 800a6a4:	f000 bd3e 	b.w	800b124 <_dtoa_r+0xb14>
 800a6a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	4630      	mov	r0, r6
 800a6b2:	4639      	mov	r1, r7
 800a6b4:	f7f6 fa18 	bl	8000ae8 <__aeabi_dcmpeq>
 800a6b8:	4681      	mov	r9, r0
 800a6ba:	b168      	cbz	r0, 800a6d8 <_dtoa_r+0xc8>
 800a6bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a6be:	2301      	movs	r3, #1
 800a6c0:	6013      	str	r3, [r2, #0]
 800a6c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	f000 8524 	beq.w	800b112 <_dtoa_r+0xb02>
 800a6ca:	4b9a      	ldr	r3, [pc, #616]	; (800a934 <_dtoa_r+0x324>)
 800a6cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a6ce:	f103 3bff 	add.w	fp, r3, #4294967295
 800a6d2:	6013      	str	r3, [r2, #0]
 800a6d4:	f000 bd28 	b.w	800b128 <_dtoa_r+0xb18>
 800a6d8:	aa14      	add	r2, sp, #80	; 0x50
 800a6da:	a915      	add	r1, sp, #84	; 0x54
 800a6dc:	ec47 6b10 	vmov	d0, r6, r7
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	f001 f9ce 	bl	800ba82 <__d2b>
 800a6e6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a6ea:	9004      	str	r0, [sp, #16]
 800a6ec:	2d00      	cmp	r5, #0
 800a6ee:	d07c      	beq.n	800a7ea <_dtoa_r+0x1da>
 800a6f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a6f4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a6f8:	46b2      	mov	sl, r6
 800a6fa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a6fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a702:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a706:	2200      	movs	r2, #0
 800a708:	4b8b      	ldr	r3, [pc, #556]	; (800a938 <_dtoa_r+0x328>)
 800a70a:	4650      	mov	r0, sl
 800a70c:	4659      	mov	r1, fp
 800a70e:	f7f5 fdcb 	bl	80002a8 <__aeabi_dsub>
 800a712:	a381      	add	r3, pc, #516	; (adr r3, 800a918 <_dtoa_r+0x308>)
 800a714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a718:	f7f5 ff7e 	bl	8000618 <__aeabi_dmul>
 800a71c:	a380      	add	r3, pc, #512	; (adr r3, 800a920 <_dtoa_r+0x310>)
 800a71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a722:	f7f5 fdc3 	bl	80002ac <__adddf3>
 800a726:	4606      	mov	r6, r0
 800a728:	4628      	mov	r0, r5
 800a72a:	460f      	mov	r7, r1
 800a72c:	f7f5 ff0a 	bl	8000544 <__aeabi_i2d>
 800a730:	a37d      	add	r3, pc, #500	; (adr r3, 800a928 <_dtoa_r+0x318>)
 800a732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a736:	f7f5 ff6f 	bl	8000618 <__aeabi_dmul>
 800a73a:	4602      	mov	r2, r0
 800a73c:	460b      	mov	r3, r1
 800a73e:	4630      	mov	r0, r6
 800a740:	4639      	mov	r1, r7
 800a742:	f7f5 fdb3 	bl	80002ac <__adddf3>
 800a746:	4606      	mov	r6, r0
 800a748:	460f      	mov	r7, r1
 800a74a:	f7f6 fa15 	bl	8000b78 <__aeabi_d2iz>
 800a74e:	2200      	movs	r2, #0
 800a750:	4682      	mov	sl, r0
 800a752:	2300      	movs	r3, #0
 800a754:	4630      	mov	r0, r6
 800a756:	4639      	mov	r1, r7
 800a758:	f7f6 f9d0 	bl	8000afc <__aeabi_dcmplt>
 800a75c:	b148      	cbz	r0, 800a772 <_dtoa_r+0x162>
 800a75e:	4650      	mov	r0, sl
 800a760:	f7f5 fef0 	bl	8000544 <__aeabi_i2d>
 800a764:	4632      	mov	r2, r6
 800a766:	463b      	mov	r3, r7
 800a768:	f7f6 f9be 	bl	8000ae8 <__aeabi_dcmpeq>
 800a76c:	b908      	cbnz	r0, 800a772 <_dtoa_r+0x162>
 800a76e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a772:	f1ba 0f16 	cmp.w	sl, #22
 800a776:	d859      	bhi.n	800a82c <_dtoa_r+0x21c>
 800a778:	4970      	ldr	r1, [pc, #448]	; (800a93c <_dtoa_r+0x32c>)
 800a77a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a77e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a782:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a786:	f7f6 f9d7 	bl	8000b38 <__aeabi_dcmpgt>
 800a78a:	2800      	cmp	r0, #0
 800a78c:	d050      	beq.n	800a830 <_dtoa_r+0x220>
 800a78e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a792:	2300      	movs	r3, #0
 800a794:	930f      	str	r3, [sp, #60]	; 0x3c
 800a796:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a798:	1b5d      	subs	r5, r3, r5
 800a79a:	f1b5 0801 	subs.w	r8, r5, #1
 800a79e:	bf49      	itett	mi
 800a7a0:	f1c5 0301 	rsbmi	r3, r5, #1
 800a7a4:	2300      	movpl	r3, #0
 800a7a6:	9305      	strmi	r3, [sp, #20]
 800a7a8:	f04f 0800 	movmi.w	r8, #0
 800a7ac:	bf58      	it	pl
 800a7ae:	9305      	strpl	r3, [sp, #20]
 800a7b0:	f1ba 0f00 	cmp.w	sl, #0
 800a7b4:	db3e      	blt.n	800a834 <_dtoa_r+0x224>
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	44d0      	add	r8, sl
 800a7ba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a7be:	9307      	str	r3, [sp, #28]
 800a7c0:	9b06      	ldr	r3, [sp, #24]
 800a7c2:	2b09      	cmp	r3, #9
 800a7c4:	f200 8090 	bhi.w	800a8e8 <_dtoa_r+0x2d8>
 800a7c8:	2b05      	cmp	r3, #5
 800a7ca:	bfc4      	itt	gt
 800a7cc:	3b04      	subgt	r3, #4
 800a7ce:	9306      	strgt	r3, [sp, #24]
 800a7d0:	9b06      	ldr	r3, [sp, #24]
 800a7d2:	f1a3 0302 	sub.w	r3, r3, #2
 800a7d6:	bfcc      	ite	gt
 800a7d8:	2500      	movgt	r5, #0
 800a7da:	2501      	movle	r5, #1
 800a7dc:	2b03      	cmp	r3, #3
 800a7de:	f200 808f 	bhi.w	800a900 <_dtoa_r+0x2f0>
 800a7e2:	e8df f003 	tbb	[pc, r3]
 800a7e6:	7f7d      	.short	0x7f7d
 800a7e8:	7131      	.short	0x7131
 800a7ea:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a7ee:	441d      	add	r5, r3
 800a7f0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a7f4:	2820      	cmp	r0, #32
 800a7f6:	dd13      	ble.n	800a820 <_dtoa_r+0x210>
 800a7f8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a7fc:	9b00      	ldr	r3, [sp, #0]
 800a7fe:	fa08 f800 	lsl.w	r8, r8, r0
 800a802:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a806:	fa23 f000 	lsr.w	r0, r3, r0
 800a80a:	ea48 0000 	orr.w	r0, r8, r0
 800a80e:	f7f5 fe89 	bl	8000524 <__aeabi_ui2d>
 800a812:	2301      	movs	r3, #1
 800a814:	4682      	mov	sl, r0
 800a816:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a81a:	3d01      	subs	r5, #1
 800a81c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a81e:	e772      	b.n	800a706 <_dtoa_r+0xf6>
 800a820:	9b00      	ldr	r3, [sp, #0]
 800a822:	f1c0 0020 	rsb	r0, r0, #32
 800a826:	fa03 f000 	lsl.w	r0, r3, r0
 800a82a:	e7f0      	b.n	800a80e <_dtoa_r+0x1fe>
 800a82c:	2301      	movs	r3, #1
 800a82e:	e7b1      	b.n	800a794 <_dtoa_r+0x184>
 800a830:	900f      	str	r0, [sp, #60]	; 0x3c
 800a832:	e7b0      	b.n	800a796 <_dtoa_r+0x186>
 800a834:	9b05      	ldr	r3, [sp, #20]
 800a836:	eba3 030a 	sub.w	r3, r3, sl
 800a83a:	9305      	str	r3, [sp, #20]
 800a83c:	f1ca 0300 	rsb	r3, sl, #0
 800a840:	9307      	str	r3, [sp, #28]
 800a842:	2300      	movs	r3, #0
 800a844:	930e      	str	r3, [sp, #56]	; 0x38
 800a846:	e7bb      	b.n	800a7c0 <_dtoa_r+0x1b0>
 800a848:	2301      	movs	r3, #1
 800a84a:	930a      	str	r3, [sp, #40]	; 0x28
 800a84c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a84e:	2b00      	cmp	r3, #0
 800a850:	dd59      	ble.n	800a906 <_dtoa_r+0x2f6>
 800a852:	9302      	str	r3, [sp, #8]
 800a854:	4699      	mov	r9, r3
 800a856:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a858:	2200      	movs	r2, #0
 800a85a:	6072      	str	r2, [r6, #4]
 800a85c:	2204      	movs	r2, #4
 800a85e:	f102 0014 	add.w	r0, r2, #20
 800a862:	4298      	cmp	r0, r3
 800a864:	6871      	ldr	r1, [r6, #4]
 800a866:	d953      	bls.n	800a910 <_dtoa_r+0x300>
 800a868:	4620      	mov	r0, r4
 800a86a:	f000 fe7d 	bl	800b568 <_Balloc>
 800a86e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a870:	6030      	str	r0, [r6, #0]
 800a872:	f1b9 0f0e 	cmp.w	r9, #14
 800a876:	f8d3 b000 	ldr.w	fp, [r3]
 800a87a:	f200 80e6 	bhi.w	800aa4a <_dtoa_r+0x43a>
 800a87e:	2d00      	cmp	r5, #0
 800a880:	f000 80e3 	beq.w	800aa4a <_dtoa_r+0x43a>
 800a884:	ed9d 7b00 	vldr	d7, [sp]
 800a888:	f1ba 0f00 	cmp.w	sl, #0
 800a88c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a890:	dd74      	ble.n	800a97c <_dtoa_r+0x36c>
 800a892:	4a2a      	ldr	r2, [pc, #168]	; (800a93c <_dtoa_r+0x32c>)
 800a894:	f00a 030f 	and.w	r3, sl, #15
 800a898:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a89c:	ed93 7b00 	vldr	d7, [r3]
 800a8a0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a8a4:	06f0      	lsls	r0, r6, #27
 800a8a6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a8aa:	d565      	bpl.n	800a978 <_dtoa_r+0x368>
 800a8ac:	4b24      	ldr	r3, [pc, #144]	; (800a940 <_dtoa_r+0x330>)
 800a8ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a8b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a8b6:	f7f5 ffd9 	bl	800086c <__aeabi_ddiv>
 800a8ba:	e9cd 0100 	strd	r0, r1, [sp]
 800a8be:	f006 060f 	and.w	r6, r6, #15
 800a8c2:	2503      	movs	r5, #3
 800a8c4:	4f1e      	ldr	r7, [pc, #120]	; (800a940 <_dtoa_r+0x330>)
 800a8c6:	e04c      	b.n	800a962 <_dtoa_r+0x352>
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	930a      	str	r3, [sp, #40]	; 0x28
 800a8cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8ce:	4453      	add	r3, sl
 800a8d0:	f103 0901 	add.w	r9, r3, #1
 800a8d4:	9302      	str	r3, [sp, #8]
 800a8d6:	464b      	mov	r3, r9
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	bfb8      	it	lt
 800a8dc:	2301      	movlt	r3, #1
 800a8de:	e7ba      	b.n	800a856 <_dtoa_r+0x246>
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	e7b2      	b.n	800a84a <_dtoa_r+0x23a>
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	e7f0      	b.n	800a8ca <_dtoa_r+0x2ba>
 800a8e8:	2501      	movs	r5, #1
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	9306      	str	r3, [sp, #24]
 800a8ee:	950a      	str	r5, [sp, #40]	; 0x28
 800a8f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a8f4:	9302      	str	r3, [sp, #8]
 800a8f6:	4699      	mov	r9, r3
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	2312      	movs	r3, #18
 800a8fc:	920b      	str	r2, [sp, #44]	; 0x2c
 800a8fe:	e7aa      	b.n	800a856 <_dtoa_r+0x246>
 800a900:	2301      	movs	r3, #1
 800a902:	930a      	str	r3, [sp, #40]	; 0x28
 800a904:	e7f4      	b.n	800a8f0 <_dtoa_r+0x2e0>
 800a906:	2301      	movs	r3, #1
 800a908:	9302      	str	r3, [sp, #8]
 800a90a:	4699      	mov	r9, r3
 800a90c:	461a      	mov	r2, r3
 800a90e:	e7f5      	b.n	800a8fc <_dtoa_r+0x2ec>
 800a910:	3101      	adds	r1, #1
 800a912:	6071      	str	r1, [r6, #4]
 800a914:	0052      	lsls	r2, r2, #1
 800a916:	e7a2      	b.n	800a85e <_dtoa_r+0x24e>
 800a918:	636f4361 	.word	0x636f4361
 800a91c:	3fd287a7 	.word	0x3fd287a7
 800a920:	8b60c8b3 	.word	0x8b60c8b3
 800a924:	3fc68a28 	.word	0x3fc68a28
 800a928:	509f79fb 	.word	0x509f79fb
 800a92c:	3fd34413 	.word	0x3fd34413
 800a930:	7ff00000 	.word	0x7ff00000
 800a934:	0800cd61 	.word	0x0800cd61
 800a938:	3ff80000 	.word	0x3ff80000
 800a93c:	0800ce20 	.word	0x0800ce20
 800a940:	0800cdf8 	.word	0x0800cdf8
 800a944:	0800cd8d 	.word	0x0800cd8d
 800a948:	07f1      	lsls	r1, r6, #31
 800a94a:	d508      	bpl.n	800a95e <_dtoa_r+0x34e>
 800a94c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a950:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a954:	f7f5 fe60 	bl	8000618 <__aeabi_dmul>
 800a958:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a95c:	3501      	adds	r5, #1
 800a95e:	1076      	asrs	r6, r6, #1
 800a960:	3708      	adds	r7, #8
 800a962:	2e00      	cmp	r6, #0
 800a964:	d1f0      	bne.n	800a948 <_dtoa_r+0x338>
 800a966:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a96a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a96e:	f7f5 ff7d 	bl	800086c <__aeabi_ddiv>
 800a972:	e9cd 0100 	strd	r0, r1, [sp]
 800a976:	e01a      	b.n	800a9ae <_dtoa_r+0x39e>
 800a978:	2502      	movs	r5, #2
 800a97a:	e7a3      	b.n	800a8c4 <_dtoa_r+0x2b4>
 800a97c:	f000 80a0 	beq.w	800aac0 <_dtoa_r+0x4b0>
 800a980:	f1ca 0600 	rsb	r6, sl, #0
 800a984:	4b9f      	ldr	r3, [pc, #636]	; (800ac04 <_dtoa_r+0x5f4>)
 800a986:	4fa0      	ldr	r7, [pc, #640]	; (800ac08 <_dtoa_r+0x5f8>)
 800a988:	f006 020f 	and.w	r2, r6, #15
 800a98c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a994:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a998:	f7f5 fe3e 	bl	8000618 <__aeabi_dmul>
 800a99c:	e9cd 0100 	strd	r0, r1, [sp]
 800a9a0:	1136      	asrs	r6, r6, #4
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	2502      	movs	r5, #2
 800a9a6:	2e00      	cmp	r6, #0
 800a9a8:	d17f      	bne.n	800aaaa <_dtoa_r+0x49a>
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d1e1      	bne.n	800a972 <_dtoa_r+0x362>
 800a9ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	f000 8087 	beq.w	800aac4 <_dtoa_r+0x4b4>
 800a9b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	4b93      	ldr	r3, [pc, #588]	; (800ac0c <_dtoa_r+0x5fc>)
 800a9be:	4630      	mov	r0, r6
 800a9c0:	4639      	mov	r1, r7
 800a9c2:	f7f6 f89b 	bl	8000afc <__aeabi_dcmplt>
 800a9c6:	2800      	cmp	r0, #0
 800a9c8:	d07c      	beq.n	800aac4 <_dtoa_r+0x4b4>
 800a9ca:	f1b9 0f00 	cmp.w	r9, #0
 800a9ce:	d079      	beq.n	800aac4 <_dtoa_r+0x4b4>
 800a9d0:	9b02      	ldr	r3, [sp, #8]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	dd35      	ble.n	800aa42 <_dtoa_r+0x432>
 800a9d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a9da:	9308      	str	r3, [sp, #32]
 800a9dc:	4639      	mov	r1, r7
 800a9de:	2200      	movs	r2, #0
 800a9e0:	4b8b      	ldr	r3, [pc, #556]	; (800ac10 <_dtoa_r+0x600>)
 800a9e2:	4630      	mov	r0, r6
 800a9e4:	f7f5 fe18 	bl	8000618 <__aeabi_dmul>
 800a9e8:	e9cd 0100 	strd	r0, r1, [sp]
 800a9ec:	9f02      	ldr	r7, [sp, #8]
 800a9ee:	3501      	adds	r5, #1
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	f7f5 fda7 	bl	8000544 <__aeabi_i2d>
 800a9f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9fa:	f7f5 fe0d 	bl	8000618 <__aeabi_dmul>
 800a9fe:	2200      	movs	r2, #0
 800aa00:	4b84      	ldr	r3, [pc, #528]	; (800ac14 <_dtoa_r+0x604>)
 800aa02:	f7f5 fc53 	bl	80002ac <__adddf3>
 800aa06:	4605      	mov	r5, r0
 800aa08:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800aa0c:	2f00      	cmp	r7, #0
 800aa0e:	d15d      	bne.n	800aacc <_dtoa_r+0x4bc>
 800aa10:	2200      	movs	r2, #0
 800aa12:	4b81      	ldr	r3, [pc, #516]	; (800ac18 <_dtoa_r+0x608>)
 800aa14:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa18:	f7f5 fc46 	bl	80002a8 <__aeabi_dsub>
 800aa1c:	462a      	mov	r2, r5
 800aa1e:	4633      	mov	r3, r6
 800aa20:	e9cd 0100 	strd	r0, r1, [sp]
 800aa24:	f7f6 f888 	bl	8000b38 <__aeabi_dcmpgt>
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	f040 8288 	bne.w	800af3e <_dtoa_r+0x92e>
 800aa2e:	462a      	mov	r2, r5
 800aa30:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800aa34:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa38:	f7f6 f860 	bl	8000afc <__aeabi_dcmplt>
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	f040 827c 	bne.w	800af3a <_dtoa_r+0x92a>
 800aa42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aa46:	e9cd 2300 	strd	r2, r3, [sp]
 800aa4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	f2c0 8150 	blt.w	800acf2 <_dtoa_r+0x6e2>
 800aa52:	f1ba 0f0e 	cmp.w	sl, #14
 800aa56:	f300 814c 	bgt.w	800acf2 <_dtoa_r+0x6e2>
 800aa5a:	4b6a      	ldr	r3, [pc, #424]	; (800ac04 <_dtoa_r+0x5f4>)
 800aa5c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800aa60:	ed93 7b00 	vldr	d7, [r3]
 800aa64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aa6c:	f280 80d8 	bge.w	800ac20 <_dtoa_r+0x610>
 800aa70:	f1b9 0f00 	cmp.w	r9, #0
 800aa74:	f300 80d4 	bgt.w	800ac20 <_dtoa_r+0x610>
 800aa78:	f040 825e 	bne.w	800af38 <_dtoa_r+0x928>
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	4b66      	ldr	r3, [pc, #408]	; (800ac18 <_dtoa_r+0x608>)
 800aa80:	ec51 0b17 	vmov	r0, r1, d7
 800aa84:	f7f5 fdc8 	bl	8000618 <__aeabi_dmul>
 800aa88:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa8c:	f7f6 f84a 	bl	8000b24 <__aeabi_dcmpge>
 800aa90:	464f      	mov	r7, r9
 800aa92:	464e      	mov	r6, r9
 800aa94:	2800      	cmp	r0, #0
 800aa96:	f040 8234 	bne.w	800af02 <_dtoa_r+0x8f2>
 800aa9a:	2331      	movs	r3, #49	; 0x31
 800aa9c:	f10b 0501 	add.w	r5, fp, #1
 800aaa0:	f88b 3000 	strb.w	r3, [fp]
 800aaa4:	f10a 0a01 	add.w	sl, sl, #1
 800aaa8:	e22f      	b.n	800af0a <_dtoa_r+0x8fa>
 800aaaa:	07f2      	lsls	r2, r6, #31
 800aaac:	d505      	bpl.n	800aaba <_dtoa_r+0x4aa>
 800aaae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aab2:	f7f5 fdb1 	bl	8000618 <__aeabi_dmul>
 800aab6:	3501      	adds	r5, #1
 800aab8:	2301      	movs	r3, #1
 800aaba:	1076      	asrs	r6, r6, #1
 800aabc:	3708      	adds	r7, #8
 800aabe:	e772      	b.n	800a9a6 <_dtoa_r+0x396>
 800aac0:	2502      	movs	r5, #2
 800aac2:	e774      	b.n	800a9ae <_dtoa_r+0x39e>
 800aac4:	f8cd a020 	str.w	sl, [sp, #32]
 800aac8:	464f      	mov	r7, r9
 800aaca:	e791      	b.n	800a9f0 <_dtoa_r+0x3e0>
 800aacc:	4b4d      	ldr	r3, [pc, #308]	; (800ac04 <_dtoa_r+0x5f4>)
 800aace:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aad2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800aad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d047      	beq.n	800ab6c <_dtoa_r+0x55c>
 800aadc:	4602      	mov	r2, r0
 800aade:	460b      	mov	r3, r1
 800aae0:	2000      	movs	r0, #0
 800aae2:	494e      	ldr	r1, [pc, #312]	; (800ac1c <_dtoa_r+0x60c>)
 800aae4:	f7f5 fec2 	bl	800086c <__aeabi_ddiv>
 800aae8:	462a      	mov	r2, r5
 800aaea:	4633      	mov	r3, r6
 800aaec:	f7f5 fbdc 	bl	80002a8 <__aeabi_dsub>
 800aaf0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800aaf4:	465d      	mov	r5, fp
 800aaf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aafa:	f7f6 f83d 	bl	8000b78 <__aeabi_d2iz>
 800aafe:	4606      	mov	r6, r0
 800ab00:	f7f5 fd20 	bl	8000544 <__aeabi_i2d>
 800ab04:	4602      	mov	r2, r0
 800ab06:	460b      	mov	r3, r1
 800ab08:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab0c:	f7f5 fbcc 	bl	80002a8 <__aeabi_dsub>
 800ab10:	3630      	adds	r6, #48	; 0x30
 800ab12:	f805 6b01 	strb.w	r6, [r5], #1
 800ab16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ab1a:	e9cd 0100 	strd	r0, r1, [sp]
 800ab1e:	f7f5 ffed 	bl	8000afc <__aeabi_dcmplt>
 800ab22:	2800      	cmp	r0, #0
 800ab24:	d163      	bne.n	800abee <_dtoa_r+0x5de>
 800ab26:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab2a:	2000      	movs	r0, #0
 800ab2c:	4937      	ldr	r1, [pc, #220]	; (800ac0c <_dtoa_r+0x5fc>)
 800ab2e:	f7f5 fbbb 	bl	80002a8 <__aeabi_dsub>
 800ab32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ab36:	f7f5 ffe1 	bl	8000afc <__aeabi_dcmplt>
 800ab3a:	2800      	cmp	r0, #0
 800ab3c:	f040 80b7 	bne.w	800acae <_dtoa_r+0x69e>
 800ab40:	eba5 030b 	sub.w	r3, r5, fp
 800ab44:	429f      	cmp	r7, r3
 800ab46:	f77f af7c 	ble.w	800aa42 <_dtoa_r+0x432>
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	4b30      	ldr	r3, [pc, #192]	; (800ac10 <_dtoa_r+0x600>)
 800ab4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ab52:	f7f5 fd61 	bl	8000618 <__aeabi_dmul>
 800ab56:	2200      	movs	r2, #0
 800ab58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ab5c:	4b2c      	ldr	r3, [pc, #176]	; (800ac10 <_dtoa_r+0x600>)
 800ab5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab62:	f7f5 fd59 	bl	8000618 <__aeabi_dmul>
 800ab66:	e9cd 0100 	strd	r0, r1, [sp]
 800ab6a:	e7c4      	b.n	800aaf6 <_dtoa_r+0x4e6>
 800ab6c:	462a      	mov	r2, r5
 800ab6e:	4633      	mov	r3, r6
 800ab70:	f7f5 fd52 	bl	8000618 <__aeabi_dmul>
 800ab74:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ab78:	eb0b 0507 	add.w	r5, fp, r7
 800ab7c:	465e      	mov	r6, fp
 800ab7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab82:	f7f5 fff9 	bl	8000b78 <__aeabi_d2iz>
 800ab86:	4607      	mov	r7, r0
 800ab88:	f7f5 fcdc 	bl	8000544 <__aeabi_i2d>
 800ab8c:	3730      	adds	r7, #48	; 0x30
 800ab8e:	4602      	mov	r2, r0
 800ab90:	460b      	mov	r3, r1
 800ab92:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab96:	f7f5 fb87 	bl	80002a8 <__aeabi_dsub>
 800ab9a:	f806 7b01 	strb.w	r7, [r6], #1
 800ab9e:	42ae      	cmp	r6, r5
 800aba0:	e9cd 0100 	strd	r0, r1, [sp]
 800aba4:	f04f 0200 	mov.w	r2, #0
 800aba8:	d126      	bne.n	800abf8 <_dtoa_r+0x5e8>
 800abaa:	4b1c      	ldr	r3, [pc, #112]	; (800ac1c <_dtoa_r+0x60c>)
 800abac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800abb0:	f7f5 fb7c 	bl	80002ac <__adddf3>
 800abb4:	4602      	mov	r2, r0
 800abb6:	460b      	mov	r3, r1
 800abb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abbc:	f7f5 ffbc 	bl	8000b38 <__aeabi_dcmpgt>
 800abc0:	2800      	cmp	r0, #0
 800abc2:	d174      	bne.n	800acae <_dtoa_r+0x69e>
 800abc4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800abc8:	2000      	movs	r0, #0
 800abca:	4914      	ldr	r1, [pc, #80]	; (800ac1c <_dtoa_r+0x60c>)
 800abcc:	f7f5 fb6c 	bl	80002a8 <__aeabi_dsub>
 800abd0:	4602      	mov	r2, r0
 800abd2:	460b      	mov	r3, r1
 800abd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abd8:	f7f5 ff90 	bl	8000afc <__aeabi_dcmplt>
 800abdc:	2800      	cmp	r0, #0
 800abde:	f43f af30 	beq.w	800aa42 <_dtoa_r+0x432>
 800abe2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800abe6:	2b30      	cmp	r3, #48	; 0x30
 800abe8:	f105 32ff 	add.w	r2, r5, #4294967295
 800abec:	d002      	beq.n	800abf4 <_dtoa_r+0x5e4>
 800abee:	f8dd a020 	ldr.w	sl, [sp, #32]
 800abf2:	e04a      	b.n	800ac8a <_dtoa_r+0x67a>
 800abf4:	4615      	mov	r5, r2
 800abf6:	e7f4      	b.n	800abe2 <_dtoa_r+0x5d2>
 800abf8:	4b05      	ldr	r3, [pc, #20]	; (800ac10 <_dtoa_r+0x600>)
 800abfa:	f7f5 fd0d 	bl	8000618 <__aeabi_dmul>
 800abfe:	e9cd 0100 	strd	r0, r1, [sp]
 800ac02:	e7bc      	b.n	800ab7e <_dtoa_r+0x56e>
 800ac04:	0800ce20 	.word	0x0800ce20
 800ac08:	0800cdf8 	.word	0x0800cdf8
 800ac0c:	3ff00000 	.word	0x3ff00000
 800ac10:	40240000 	.word	0x40240000
 800ac14:	401c0000 	.word	0x401c0000
 800ac18:	40140000 	.word	0x40140000
 800ac1c:	3fe00000 	.word	0x3fe00000
 800ac20:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ac24:	465d      	mov	r5, fp
 800ac26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac2a:	4630      	mov	r0, r6
 800ac2c:	4639      	mov	r1, r7
 800ac2e:	f7f5 fe1d 	bl	800086c <__aeabi_ddiv>
 800ac32:	f7f5 ffa1 	bl	8000b78 <__aeabi_d2iz>
 800ac36:	4680      	mov	r8, r0
 800ac38:	f7f5 fc84 	bl	8000544 <__aeabi_i2d>
 800ac3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac40:	f7f5 fcea 	bl	8000618 <__aeabi_dmul>
 800ac44:	4602      	mov	r2, r0
 800ac46:	460b      	mov	r3, r1
 800ac48:	4630      	mov	r0, r6
 800ac4a:	4639      	mov	r1, r7
 800ac4c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800ac50:	f7f5 fb2a 	bl	80002a8 <__aeabi_dsub>
 800ac54:	f805 6b01 	strb.w	r6, [r5], #1
 800ac58:	eba5 060b 	sub.w	r6, r5, fp
 800ac5c:	45b1      	cmp	r9, r6
 800ac5e:	4602      	mov	r2, r0
 800ac60:	460b      	mov	r3, r1
 800ac62:	d139      	bne.n	800acd8 <_dtoa_r+0x6c8>
 800ac64:	f7f5 fb22 	bl	80002ac <__adddf3>
 800ac68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac6c:	4606      	mov	r6, r0
 800ac6e:	460f      	mov	r7, r1
 800ac70:	f7f5 ff62 	bl	8000b38 <__aeabi_dcmpgt>
 800ac74:	b9c8      	cbnz	r0, 800acaa <_dtoa_r+0x69a>
 800ac76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac7a:	4630      	mov	r0, r6
 800ac7c:	4639      	mov	r1, r7
 800ac7e:	f7f5 ff33 	bl	8000ae8 <__aeabi_dcmpeq>
 800ac82:	b110      	cbz	r0, 800ac8a <_dtoa_r+0x67a>
 800ac84:	f018 0f01 	tst.w	r8, #1
 800ac88:	d10f      	bne.n	800acaa <_dtoa_r+0x69a>
 800ac8a:	9904      	ldr	r1, [sp, #16]
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	f000 fc9f 	bl	800b5d0 <_Bfree>
 800ac92:	2300      	movs	r3, #0
 800ac94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ac96:	702b      	strb	r3, [r5, #0]
 800ac98:	f10a 0301 	add.w	r3, sl, #1
 800ac9c:	6013      	str	r3, [r2, #0]
 800ac9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	f000 8241 	beq.w	800b128 <_dtoa_r+0xb18>
 800aca6:	601d      	str	r5, [r3, #0]
 800aca8:	e23e      	b.n	800b128 <_dtoa_r+0xb18>
 800acaa:	f8cd a020 	str.w	sl, [sp, #32]
 800acae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800acb2:	2a39      	cmp	r2, #57	; 0x39
 800acb4:	f105 33ff 	add.w	r3, r5, #4294967295
 800acb8:	d108      	bne.n	800accc <_dtoa_r+0x6bc>
 800acba:	459b      	cmp	fp, r3
 800acbc:	d10a      	bne.n	800acd4 <_dtoa_r+0x6c4>
 800acbe:	9b08      	ldr	r3, [sp, #32]
 800acc0:	3301      	adds	r3, #1
 800acc2:	9308      	str	r3, [sp, #32]
 800acc4:	2330      	movs	r3, #48	; 0x30
 800acc6:	f88b 3000 	strb.w	r3, [fp]
 800acca:	465b      	mov	r3, fp
 800accc:	781a      	ldrb	r2, [r3, #0]
 800acce:	3201      	adds	r2, #1
 800acd0:	701a      	strb	r2, [r3, #0]
 800acd2:	e78c      	b.n	800abee <_dtoa_r+0x5de>
 800acd4:	461d      	mov	r5, r3
 800acd6:	e7ea      	b.n	800acae <_dtoa_r+0x69e>
 800acd8:	2200      	movs	r2, #0
 800acda:	4b9b      	ldr	r3, [pc, #620]	; (800af48 <_dtoa_r+0x938>)
 800acdc:	f7f5 fc9c 	bl	8000618 <__aeabi_dmul>
 800ace0:	2200      	movs	r2, #0
 800ace2:	2300      	movs	r3, #0
 800ace4:	4606      	mov	r6, r0
 800ace6:	460f      	mov	r7, r1
 800ace8:	f7f5 fefe 	bl	8000ae8 <__aeabi_dcmpeq>
 800acec:	2800      	cmp	r0, #0
 800acee:	d09a      	beq.n	800ac26 <_dtoa_r+0x616>
 800acf0:	e7cb      	b.n	800ac8a <_dtoa_r+0x67a>
 800acf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acf4:	2a00      	cmp	r2, #0
 800acf6:	f000 808b 	beq.w	800ae10 <_dtoa_r+0x800>
 800acfa:	9a06      	ldr	r2, [sp, #24]
 800acfc:	2a01      	cmp	r2, #1
 800acfe:	dc6e      	bgt.n	800adde <_dtoa_r+0x7ce>
 800ad00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ad02:	2a00      	cmp	r2, #0
 800ad04:	d067      	beq.n	800add6 <_dtoa_r+0x7c6>
 800ad06:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ad0a:	9f07      	ldr	r7, [sp, #28]
 800ad0c:	9d05      	ldr	r5, [sp, #20]
 800ad0e:	9a05      	ldr	r2, [sp, #20]
 800ad10:	2101      	movs	r1, #1
 800ad12:	441a      	add	r2, r3
 800ad14:	4620      	mov	r0, r4
 800ad16:	9205      	str	r2, [sp, #20]
 800ad18:	4498      	add	r8, r3
 800ad1a:	f000 fcf9 	bl	800b710 <__i2b>
 800ad1e:	4606      	mov	r6, r0
 800ad20:	2d00      	cmp	r5, #0
 800ad22:	dd0c      	ble.n	800ad3e <_dtoa_r+0x72e>
 800ad24:	f1b8 0f00 	cmp.w	r8, #0
 800ad28:	dd09      	ble.n	800ad3e <_dtoa_r+0x72e>
 800ad2a:	4545      	cmp	r5, r8
 800ad2c:	9a05      	ldr	r2, [sp, #20]
 800ad2e:	462b      	mov	r3, r5
 800ad30:	bfa8      	it	ge
 800ad32:	4643      	movge	r3, r8
 800ad34:	1ad2      	subs	r2, r2, r3
 800ad36:	9205      	str	r2, [sp, #20]
 800ad38:	1aed      	subs	r5, r5, r3
 800ad3a:	eba8 0803 	sub.w	r8, r8, r3
 800ad3e:	9b07      	ldr	r3, [sp, #28]
 800ad40:	b1eb      	cbz	r3, 800ad7e <_dtoa_r+0x76e>
 800ad42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d067      	beq.n	800ae18 <_dtoa_r+0x808>
 800ad48:	b18f      	cbz	r7, 800ad6e <_dtoa_r+0x75e>
 800ad4a:	4631      	mov	r1, r6
 800ad4c:	463a      	mov	r2, r7
 800ad4e:	4620      	mov	r0, r4
 800ad50:	f000 fd7e 	bl	800b850 <__pow5mult>
 800ad54:	9a04      	ldr	r2, [sp, #16]
 800ad56:	4601      	mov	r1, r0
 800ad58:	4606      	mov	r6, r0
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	f000 fce1 	bl	800b722 <__multiply>
 800ad60:	9904      	ldr	r1, [sp, #16]
 800ad62:	9008      	str	r0, [sp, #32]
 800ad64:	4620      	mov	r0, r4
 800ad66:	f000 fc33 	bl	800b5d0 <_Bfree>
 800ad6a:	9b08      	ldr	r3, [sp, #32]
 800ad6c:	9304      	str	r3, [sp, #16]
 800ad6e:	9b07      	ldr	r3, [sp, #28]
 800ad70:	1bda      	subs	r2, r3, r7
 800ad72:	d004      	beq.n	800ad7e <_dtoa_r+0x76e>
 800ad74:	9904      	ldr	r1, [sp, #16]
 800ad76:	4620      	mov	r0, r4
 800ad78:	f000 fd6a 	bl	800b850 <__pow5mult>
 800ad7c:	9004      	str	r0, [sp, #16]
 800ad7e:	2101      	movs	r1, #1
 800ad80:	4620      	mov	r0, r4
 800ad82:	f000 fcc5 	bl	800b710 <__i2b>
 800ad86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad88:	4607      	mov	r7, r0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	f000 81d0 	beq.w	800b130 <_dtoa_r+0xb20>
 800ad90:	461a      	mov	r2, r3
 800ad92:	4601      	mov	r1, r0
 800ad94:	4620      	mov	r0, r4
 800ad96:	f000 fd5b 	bl	800b850 <__pow5mult>
 800ad9a:	9b06      	ldr	r3, [sp, #24]
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	4607      	mov	r7, r0
 800ada0:	dc40      	bgt.n	800ae24 <_dtoa_r+0x814>
 800ada2:	9b00      	ldr	r3, [sp, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d139      	bne.n	800ae1c <_dtoa_r+0x80c>
 800ada8:	9b01      	ldr	r3, [sp, #4]
 800adaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d136      	bne.n	800ae20 <_dtoa_r+0x810>
 800adb2:	9b01      	ldr	r3, [sp, #4]
 800adb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800adb8:	0d1b      	lsrs	r3, r3, #20
 800adba:	051b      	lsls	r3, r3, #20
 800adbc:	b12b      	cbz	r3, 800adca <_dtoa_r+0x7ba>
 800adbe:	9b05      	ldr	r3, [sp, #20]
 800adc0:	3301      	adds	r3, #1
 800adc2:	9305      	str	r3, [sp, #20]
 800adc4:	f108 0801 	add.w	r8, r8, #1
 800adc8:	2301      	movs	r3, #1
 800adca:	9307      	str	r3, [sp, #28]
 800adcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800adce:	2b00      	cmp	r3, #0
 800add0:	d12a      	bne.n	800ae28 <_dtoa_r+0x818>
 800add2:	2001      	movs	r0, #1
 800add4:	e030      	b.n	800ae38 <_dtoa_r+0x828>
 800add6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800add8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800addc:	e795      	b.n	800ad0a <_dtoa_r+0x6fa>
 800adde:	9b07      	ldr	r3, [sp, #28]
 800ade0:	f109 37ff 	add.w	r7, r9, #4294967295
 800ade4:	42bb      	cmp	r3, r7
 800ade6:	bfbf      	itttt	lt
 800ade8:	9b07      	ldrlt	r3, [sp, #28]
 800adea:	9707      	strlt	r7, [sp, #28]
 800adec:	1afa      	sublt	r2, r7, r3
 800adee:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800adf0:	bfbb      	ittet	lt
 800adf2:	189b      	addlt	r3, r3, r2
 800adf4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800adf6:	1bdf      	subge	r7, r3, r7
 800adf8:	2700      	movlt	r7, #0
 800adfa:	f1b9 0f00 	cmp.w	r9, #0
 800adfe:	bfb5      	itete	lt
 800ae00:	9b05      	ldrlt	r3, [sp, #20]
 800ae02:	9d05      	ldrge	r5, [sp, #20]
 800ae04:	eba3 0509 	sublt.w	r5, r3, r9
 800ae08:	464b      	movge	r3, r9
 800ae0a:	bfb8      	it	lt
 800ae0c:	2300      	movlt	r3, #0
 800ae0e:	e77e      	b.n	800ad0e <_dtoa_r+0x6fe>
 800ae10:	9f07      	ldr	r7, [sp, #28]
 800ae12:	9d05      	ldr	r5, [sp, #20]
 800ae14:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ae16:	e783      	b.n	800ad20 <_dtoa_r+0x710>
 800ae18:	9a07      	ldr	r2, [sp, #28]
 800ae1a:	e7ab      	b.n	800ad74 <_dtoa_r+0x764>
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	e7d4      	b.n	800adca <_dtoa_r+0x7ba>
 800ae20:	9b00      	ldr	r3, [sp, #0]
 800ae22:	e7d2      	b.n	800adca <_dtoa_r+0x7ba>
 800ae24:	2300      	movs	r3, #0
 800ae26:	9307      	str	r3, [sp, #28]
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ae2e:	6918      	ldr	r0, [r3, #16]
 800ae30:	f000 fc20 	bl	800b674 <__hi0bits>
 800ae34:	f1c0 0020 	rsb	r0, r0, #32
 800ae38:	4440      	add	r0, r8
 800ae3a:	f010 001f 	ands.w	r0, r0, #31
 800ae3e:	d047      	beq.n	800aed0 <_dtoa_r+0x8c0>
 800ae40:	f1c0 0320 	rsb	r3, r0, #32
 800ae44:	2b04      	cmp	r3, #4
 800ae46:	dd3b      	ble.n	800aec0 <_dtoa_r+0x8b0>
 800ae48:	9b05      	ldr	r3, [sp, #20]
 800ae4a:	f1c0 001c 	rsb	r0, r0, #28
 800ae4e:	4403      	add	r3, r0
 800ae50:	9305      	str	r3, [sp, #20]
 800ae52:	4405      	add	r5, r0
 800ae54:	4480      	add	r8, r0
 800ae56:	9b05      	ldr	r3, [sp, #20]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	dd05      	ble.n	800ae68 <_dtoa_r+0x858>
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	9904      	ldr	r1, [sp, #16]
 800ae60:	4620      	mov	r0, r4
 800ae62:	f000 fd43 	bl	800b8ec <__lshift>
 800ae66:	9004      	str	r0, [sp, #16]
 800ae68:	f1b8 0f00 	cmp.w	r8, #0
 800ae6c:	dd05      	ble.n	800ae7a <_dtoa_r+0x86a>
 800ae6e:	4639      	mov	r1, r7
 800ae70:	4642      	mov	r2, r8
 800ae72:	4620      	mov	r0, r4
 800ae74:	f000 fd3a 	bl	800b8ec <__lshift>
 800ae78:	4607      	mov	r7, r0
 800ae7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae7c:	b353      	cbz	r3, 800aed4 <_dtoa_r+0x8c4>
 800ae7e:	4639      	mov	r1, r7
 800ae80:	9804      	ldr	r0, [sp, #16]
 800ae82:	f000 fd87 	bl	800b994 <__mcmp>
 800ae86:	2800      	cmp	r0, #0
 800ae88:	da24      	bge.n	800aed4 <_dtoa_r+0x8c4>
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	220a      	movs	r2, #10
 800ae8e:	9904      	ldr	r1, [sp, #16]
 800ae90:	4620      	mov	r0, r4
 800ae92:	f000 fbb4 	bl	800b5fe <__multadd>
 800ae96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae98:	9004      	str	r0, [sp, #16]
 800ae9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	f000 814d 	beq.w	800b13e <_dtoa_r+0xb2e>
 800aea4:	2300      	movs	r3, #0
 800aea6:	4631      	mov	r1, r6
 800aea8:	220a      	movs	r2, #10
 800aeaa:	4620      	mov	r0, r4
 800aeac:	f000 fba7 	bl	800b5fe <__multadd>
 800aeb0:	9b02      	ldr	r3, [sp, #8]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	4606      	mov	r6, r0
 800aeb6:	dc4f      	bgt.n	800af58 <_dtoa_r+0x948>
 800aeb8:	9b06      	ldr	r3, [sp, #24]
 800aeba:	2b02      	cmp	r3, #2
 800aebc:	dd4c      	ble.n	800af58 <_dtoa_r+0x948>
 800aebe:	e011      	b.n	800aee4 <_dtoa_r+0x8d4>
 800aec0:	d0c9      	beq.n	800ae56 <_dtoa_r+0x846>
 800aec2:	9a05      	ldr	r2, [sp, #20]
 800aec4:	331c      	adds	r3, #28
 800aec6:	441a      	add	r2, r3
 800aec8:	9205      	str	r2, [sp, #20]
 800aeca:	441d      	add	r5, r3
 800aecc:	4498      	add	r8, r3
 800aece:	e7c2      	b.n	800ae56 <_dtoa_r+0x846>
 800aed0:	4603      	mov	r3, r0
 800aed2:	e7f6      	b.n	800aec2 <_dtoa_r+0x8b2>
 800aed4:	f1b9 0f00 	cmp.w	r9, #0
 800aed8:	dc38      	bgt.n	800af4c <_dtoa_r+0x93c>
 800aeda:	9b06      	ldr	r3, [sp, #24]
 800aedc:	2b02      	cmp	r3, #2
 800aede:	dd35      	ble.n	800af4c <_dtoa_r+0x93c>
 800aee0:	f8cd 9008 	str.w	r9, [sp, #8]
 800aee4:	9b02      	ldr	r3, [sp, #8]
 800aee6:	b963      	cbnz	r3, 800af02 <_dtoa_r+0x8f2>
 800aee8:	4639      	mov	r1, r7
 800aeea:	2205      	movs	r2, #5
 800aeec:	4620      	mov	r0, r4
 800aeee:	f000 fb86 	bl	800b5fe <__multadd>
 800aef2:	4601      	mov	r1, r0
 800aef4:	4607      	mov	r7, r0
 800aef6:	9804      	ldr	r0, [sp, #16]
 800aef8:	f000 fd4c 	bl	800b994 <__mcmp>
 800aefc:	2800      	cmp	r0, #0
 800aefe:	f73f adcc 	bgt.w	800aa9a <_dtoa_r+0x48a>
 800af02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af04:	465d      	mov	r5, fp
 800af06:	ea6f 0a03 	mvn.w	sl, r3
 800af0a:	f04f 0900 	mov.w	r9, #0
 800af0e:	4639      	mov	r1, r7
 800af10:	4620      	mov	r0, r4
 800af12:	f000 fb5d 	bl	800b5d0 <_Bfree>
 800af16:	2e00      	cmp	r6, #0
 800af18:	f43f aeb7 	beq.w	800ac8a <_dtoa_r+0x67a>
 800af1c:	f1b9 0f00 	cmp.w	r9, #0
 800af20:	d005      	beq.n	800af2e <_dtoa_r+0x91e>
 800af22:	45b1      	cmp	r9, r6
 800af24:	d003      	beq.n	800af2e <_dtoa_r+0x91e>
 800af26:	4649      	mov	r1, r9
 800af28:	4620      	mov	r0, r4
 800af2a:	f000 fb51 	bl	800b5d0 <_Bfree>
 800af2e:	4631      	mov	r1, r6
 800af30:	4620      	mov	r0, r4
 800af32:	f000 fb4d 	bl	800b5d0 <_Bfree>
 800af36:	e6a8      	b.n	800ac8a <_dtoa_r+0x67a>
 800af38:	2700      	movs	r7, #0
 800af3a:	463e      	mov	r6, r7
 800af3c:	e7e1      	b.n	800af02 <_dtoa_r+0x8f2>
 800af3e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800af42:	463e      	mov	r6, r7
 800af44:	e5a9      	b.n	800aa9a <_dtoa_r+0x48a>
 800af46:	bf00      	nop
 800af48:	40240000 	.word	0x40240000
 800af4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af4e:	f8cd 9008 	str.w	r9, [sp, #8]
 800af52:	2b00      	cmp	r3, #0
 800af54:	f000 80fa 	beq.w	800b14c <_dtoa_r+0xb3c>
 800af58:	2d00      	cmp	r5, #0
 800af5a:	dd05      	ble.n	800af68 <_dtoa_r+0x958>
 800af5c:	4631      	mov	r1, r6
 800af5e:	462a      	mov	r2, r5
 800af60:	4620      	mov	r0, r4
 800af62:	f000 fcc3 	bl	800b8ec <__lshift>
 800af66:	4606      	mov	r6, r0
 800af68:	9b07      	ldr	r3, [sp, #28]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d04c      	beq.n	800b008 <_dtoa_r+0x9f8>
 800af6e:	6871      	ldr	r1, [r6, #4]
 800af70:	4620      	mov	r0, r4
 800af72:	f000 faf9 	bl	800b568 <_Balloc>
 800af76:	6932      	ldr	r2, [r6, #16]
 800af78:	3202      	adds	r2, #2
 800af7a:	4605      	mov	r5, r0
 800af7c:	0092      	lsls	r2, r2, #2
 800af7e:	f106 010c 	add.w	r1, r6, #12
 800af82:	300c      	adds	r0, #12
 800af84:	f7fe fc54 	bl	8009830 <memcpy>
 800af88:	2201      	movs	r2, #1
 800af8a:	4629      	mov	r1, r5
 800af8c:	4620      	mov	r0, r4
 800af8e:	f000 fcad 	bl	800b8ec <__lshift>
 800af92:	9b00      	ldr	r3, [sp, #0]
 800af94:	f8cd b014 	str.w	fp, [sp, #20]
 800af98:	f003 0301 	and.w	r3, r3, #1
 800af9c:	46b1      	mov	r9, r6
 800af9e:	9307      	str	r3, [sp, #28]
 800afa0:	4606      	mov	r6, r0
 800afa2:	4639      	mov	r1, r7
 800afa4:	9804      	ldr	r0, [sp, #16]
 800afa6:	f7ff faa5 	bl	800a4f4 <quorem>
 800afaa:	4649      	mov	r1, r9
 800afac:	4605      	mov	r5, r0
 800afae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800afb2:	9804      	ldr	r0, [sp, #16]
 800afb4:	f000 fcee 	bl	800b994 <__mcmp>
 800afb8:	4632      	mov	r2, r6
 800afba:	9000      	str	r0, [sp, #0]
 800afbc:	4639      	mov	r1, r7
 800afbe:	4620      	mov	r0, r4
 800afc0:	f000 fd02 	bl	800b9c8 <__mdiff>
 800afc4:	68c3      	ldr	r3, [r0, #12]
 800afc6:	4602      	mov	r2, r0
 800afc8:	bb03      	cbnz	r3, 800b00c <_dtoa_r+0x9fc>
 800afca:	4601      	mov	r1, r0
 800afcc:	9008      	str	r0, [sp, #32]
 800afce:	9804      	ldr	r0, [sp, #16]
 800afd0:	f000 fce0 	bl	800b994 <__mcmp>
 800afd4:	9a08      	ldr	r2, [sp, #32]
 800afd6:	4603      	mov	r3, r0
 800afd8:	4611      	mov	r1, r2
 800afda:	4620      	mov	r0, r4
 800afdc:	9308      	str	r3, [sp, #32]
 800afde:	f000 faf7 	bl	800b5d0 <_Bfree>
 800afe2:	9b08      	ldr	r3, [sp, #32]
 800afe4:	b9a3      	cbnz	r3, 800b010 <_dtoa_r+0xa00>
 800afe6:	9a06      	ldr	r2, [sp, #24]
 800afe8:	b992      	cbnz	r2, 800b010 <_dtoa_r+0xa00>
 800afea:	9a07      	ldr	r2, [sp, #28]
 800afec:	b982      	cbnz	r2, 800b010 <_dtoa_r+0xa00>
 800afee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aff2:	d029      	beq.n	800b048 <_dtoa_r+0xa38>
 800aff4:	9b00      	ldr	r3, [sp, #0]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	dd01      	ble.n	800affe <_dtoa_r+0x9ee>
 800affa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800affe:	9b05      	ldr	r3, [sp, #20]
 800b000:	1c5d      	adds	r5, r3, #1
 800b002:	f883 8000 	strb.w	r8, [r3]
 800b006:	e782      	b.n	800af0e <_dtoa_r+0x8fe>
 800b008:	4630      	mov	r0, r6
 800b00a:	e7c2      	b.n	800af92 <_dtoa_r+0x982>
 800b00c:	2301      	movs	r3, #1
 800b00e:	e7e3      	b.n	800afd8 <_dtoa_r+0x9c8>
 800b010:	9a00      	ldr	r2, [sp, #0]
 800b012:	2a00      	cmp	r2, #0
 800b014:	db04      	blt.n	800b020 <_dtoa_r+0xa10>
 800b016:	d125      	bne.n	800b064 <_dtoa_r+0xa54>
 800b018:	9a06      	ldr	r2, [sp, #24]
 800b01a:	bb1a      	cbnz	r2, 800b064 <_dtoa_r+0xa54>
 800b01c:	9a07      	ldr	r2, [sp, #28]
 800b01e:	bb0a      	cbnz	r2, 800b064 <_dtoa_r+0xa54>
 800b020:	2b00      	cmp	r3, #0
 800b022:	ddec      	ble.n	800affe <_dtoa_r+0x9ee>
 800b024:	2201      	movs	r2, #1
 800b026:	9904      	ldr	r1, [sp, #16]
 800b028:	4620      	mov	r0, r4
 800b02a:	f000 fc5f 	bl	800b8ec <__lshift>
 800b02e:	4639      	mov	r1, r7
 800b030:	9004      	str	r0, [sp, #16]
 800b032:	f000 fcaf 	bl	800b994 <__mcmp>
 800b036:	2800      	cmp	r0, #0
 800b038:	dc03      	bgt.n	800b042 <_dtoa_r+0xa32>
 800b03a:	d1e0      	bne.n	800affe <_dtoa_r+0x9ee>
 800b03c:	f018 0f01 	tst.w	r8, #1
 800b040:	d0dd      	beq.n	800affe <_dtoa_r+0x9ee>
 800b042:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b046:	d1d8      	bne.n	800affa <_dtoa_r+0x9ea>
 800b048:	9b05      	ldr	r3, [sp, #20]
 800b04a:	9a05      	ldr	r2, [sp, #20]
 800b04c:	1c5d      	adds	r5, r3, #1
 800b04e:	2339      	movs	r3, #57	; 0x39
 800b050:	7013      	strb	r3, [r2, #0]
 800b052:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b056:	2b39      	cmp	r3, #57	; 0x39
 800b058:	f105 32ff 	add.w	r2, r5, #4294967295
 800b05c:	d04f      	beq.n	800b0fe <_dtoa_r+0xaee>
 800b05e:	3301      	adds	r3, #1
 800b060:	7013      	strb	r3, [r2, #0]
 800b062:	e754      	b.n	800af0e <_dtoa_r+0x8fe>
 800b064:	9a05      	ldr	r2, [sp, #20]
 800b066:	2b00      	cmp	r3, #0
 800b068:	f102 0501 	add.w	r5, r2, #1
 800b06c:	dd06      	ble.n	800b07c <_dtoa_r+0xa6c>
 800b06e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b072:	d0e9      	beq.n	800b048 <_dtoa_r+0xa38>
 800b074:	f108 0801 	add.w	r8, r8, #1
 800b078:	9b05      	ldr	r3, [sp, #20]
 800b07a:	e7c2      	b.n	800b002 <_dtoa_r+0x9f2>
 800b07c:	9a02      	ldr	r2, [sp, #8]
 800b07e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b082:	eba5 030b 	sub.w	r3, r5, fp
 800b086:	4293      	cmp	r3, r2
 800b088:	d021      	beq.n	800b0ce <_dtoa_r+0xabe>
 800b08a:	2300      	movs	r3, #0
 800b08c:	220a      	movs	r2, #10
 800b08e:	9904      	ldr	r1, [sp, #16]
 800b090:	4620      	mov	r0, r4
 800b092:	f000 fab4 	bl	800b5fe <__multadd>
 800b096:	45b1      	cmp	r9, r6
 800b098:	9004      	str	r0, [sp, #16]
 800b09a:	f04f 0300 	mov.w	r3, #0
 800b09e:	f04f 020a 	mov.w	r2, #10
 800b0a2:	4649      	mov	r1, r9
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	d105      	bne.n	800b0b4 <_dtoa_r+0xaa4>
 800b0a8:	f000 faa9 	bl	800b5fe <__multadd>
 800b0ac:	4681      	mov	r9, r0
 800b0ae:	4606      	mov	r6, r0
 800b0b0:	9505      	str	r5, [sp, #20]
 800b0b2:	e776      	b.n	800afa2 <_dtoa_r+0x992>
 800b0b4:	f000 faa3 	bl	800b5fe <__multadd>
 800b0b8:	4631      	mov	r1, r6
 800b0ba:	4681      	mov	r9, r0
 800b0bc:	2300      	movs	r3, #0
 800b0be:	220a      	movs	r2, #10
 800b0c0:	4620      	mov	r0, r4
 800b0c2:	f000 fa9c 	bl	800b5fe <__multadd>
 800b0c6:	4606      	mov	r6, r0
 800b0c8:	e7f2      	b.n	800b0b0 <_dtoa_r+0xaa0>
 800b0ca:	f04f 0900 	mov.w	r9, #0
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	9904      	ldr	r1, [sp, #16]
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	f000 fc0a 	bl	800b8ec <__lshift>
 800b0d8:	4639      	mov	r1, r7
 800b0da:	9004      	str	r0, [sp, #16]
 800b0dc:	f000 fc5a 	bl	800b994 <__mcmp>
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	dcb6      	bgt.n	800b052 <_dtoa_r+0xa42>
 800b0e4:	d102      	bne.n	800b0ec <_dtoa_r+0xadc>
 800b0e6:	f018 0f01 	tst.w	r8, #1
 800b0ea:	d1b2      	bne.n	800b052 <_dtoa_r+0xa42>
 800b0ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b0f0:	2b30      	cmp	r3, #48	; 0x30
 800b0f2:	f105 32ff 	add.w	r2, r5, #4294967295
 800b0f6:	f47f af0a 	bne.w	800af0e <_dtoa_r+0x8fe>
 800b0fa:	4615      	mov	r5, r2
 800b0fc:	e7f6      	b.n	800b0ec <_dtoa_r+0xadc>
 800b0fe:	4593      	cmp	fp, r2
 800b100:	d105      	bne.n	800b10e <_dtoa_r+0xafe>
 800b102:	2331      	movs	r3, #49	; 0x31
 800b104:	f10a 0a01 	add.w	sl, sl, #1
 800b108:	f88b 3000 	strb.w	r3, [fp]
 800b10c:	e6ff      	b.n	800af0e <_dtoa_r+0x8fe>
 800b10e:	4615      	mov	r5, r2
 800b110:	e79f      	b.n	800b052 <_dtoa_r+0xa42>
 800b112:	f8df b064 	ldr.w	fp, [pc, #100]	; 800b178 <_dtoa_r+0xb68>
 800b116:	e007      	b.n	800b128 <_dtoa_r+0xb18>
 800b118:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b11a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800b17c <_dtoa_r+0xb6c>
 800b11e:	b11b      	cbz	r3, 800b128 <_dtoa_r+0xb18>
 800b120:	f10b 0308 	add.w	r3, fp, #8
 800b124:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b126:	6013      	str	r3, [r2, #0]
 800b128:	4658      	mov	r0, fp
 800b12a:	b017      	add	sp, #92	; 0x5c
 800b12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b130:	9b06      	ldr	r3, [sp, #24]
 800b132:	2b01      	cmp	r3, #1
 800b134:	f77f ae35 	ble.w	800ada2 <_dtoa_r+0x792>
 800b138:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b13a:	9307      	str	r3, [sp, #28]
 800b13c:	e649      	b.n	800add2 <_dtoa_r+0x7c2>
 800b13e:	9b02      	ldr	r3, [sp, #8]
 800b140:	2b00      	cmp	r3, #0
 800b142:	dc03      	bgt.n	800b14c <_dtoa_r+0xb3c>
 800b144:	9b06      	ldr	r3, [sp, #24]
 800b146:	2b02      	cmp	r3, #2
 800b148:	f73f aecc 	bgt.w	800aee4 <_dtoa_r+0x8d4>
 800b14c:	465d      	mov	r5, fp
 800b14e:	4639      	mov	r1, r7
 800b150:	9804      	ldr	r0, [sp, #16]
 800b152:	f7ff f9cf 	bl	800a4f4 <quorem>
 800b156:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b15a:	f805 8b01 	strb.w	r8, [r5], #1
 800b15e:	9a02      	ldr	r2, [sp, #8]
 800b160:	eba5 030b 	sub.w	r3, r5, fp
 800b164:	429a      	cmp	r2, r3
 800b166:	ddb0      	ble.n	800b0ca <_dtoa_r+0xaba>
 800b168:	2300      	movs	r3, #0
 800b16a:	220a      	movs	r2, #10
 800b16c:	9904      	ldr	r1, [sp, #16]
 800b16e:	4620      	mov	r0, r4
 800b170:	f000 fa45 	bl	800b5fe <__multadd>
 800b174:	9004      	str	r0, [sp, #16]
 800b176:	e7ea      	b.n	800b14e <_dtoa_r+0xb3e>
 800b178:	0800cd60 	.word	0x0800cd60
 800b17c:	0800cd84 	.word	0x0800cd84

0800b180 <__sflush_r>:
 800b180:	898a      	ldrh	r2, [r1, #12]
 800b182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b186:	4605      	mov	r5, r0
 800b188:	0710      	lsls	r0, r2, #28
 800b18a:	460c      	mov	r4, r1
 800b18c:	d458      	bmi.n	800b240 <__sflush_r+0xc0>
 800b18e:	684b      	ldr	r3, [r1, #4]
 800b190:	2b00      	cmp	r3, #0
 800b192:	dc05      	bgt.n	800b1a0 <__sflush_r+0x20>
 800b194:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b196:	2b00      	cmp	r3, #0
 800b198:	dc02      	bgt.n	800b1a0 <__sflush_r+0x20>
 800b19a:	2000      	movs	r0, #0
 800b19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1a2:	2e00      	cmp	r6, #0
 800b1a4:	d0f9      	beq.n	800b19a <__sflush_r+0x1a>
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b1ac:	682f      	ldr	r7, [r5, #0]
 800b1ae:	6a21      	ldr	r1, [r4, #32]
 800b1b0:	602b      	str	r3, [r5, #0]
 800b1b2:	d032      	beq.n	800b21a <__sflush_r+0x9a>
 800b1b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b1b6:	89a3      	ldrh	r3, [r4, #12]
 800b1b8:	075a      	lsls	r2, r3, #29
 800b1ba:	d505      	bpl.n	800b1c8 <__sflush_r+0x48>
 800b1bc:	6863      	ldr	r3, [r4, #4]
 800b1be:	1ac0      	subs	r0, r0, r3
 800b1c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b1c2:	b10b      	cbz	r3, 800b1c8 <__sflush_r+0x48>
 800b1c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b1c6:	1ac0      	subs	r0, r0, r3
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	4602      	mov	r2, r0
 800b1cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1ce:	6a21      	ldr	r1, [r4, #32]
 800b1d0:	4628      	mov	r0, r5
 800b1d2:	47b0      	blx	r6
 800b1d4:	1c43      	adds	r3, r0, #1
 800b1d6:	89a3      	ldrh	r3, [r4, #12]
 800b1d8:	d106      	bne.n	800b1e8 <__sflush_r+0x68>
 800b1da:	6829      	ldr	r1, [r5, #0]
 800b1dc:	291d      	cmp	r1, #29
 800b1de:	d848      	bhi.n	800b272 <__sflush_r+0xf2>
 800b1e0:	4a29      	ldr	r2, [pc, #164]	; (800b288 <__sflush_r+0x108>)
 800b1e2:	40ca      	lsrs	r2, r1
 800b1e4:	07d6      	lsls	r6, r2, #31
 800b1e6:	d544      	bpl.n	800b272 <__sflush_r+0xf2>
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	6062      	str	r2, [r4, #4]
 800b1ec:	04d9      	lsls	r1, r3, #19
 800b1ee:	6922      	ldr	r2, [r4, #16]
 800b1f0:	6022      	str	r2, [r4, #0]
 800b1f2:	d504      	bpl.n	800b1fe <__sflush_r+0x7e>
 800b1f4:	1c42      	adds	r2, r0, #1
 800b1f6:	d101      	bne.n	800b1fc <__sflush_r+0x7c>
 800b1f8:	682b      	ldr	r3, [r5, #0]
 800b1fa:	b903      	cbnz	r3, 800b1fe <__sflush_r+0x7e>
 800b1fc:	6560      	str	r0, [r4, #84]	; 0x54
 800b1fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b200:	602f      	str	r7, [r5, #0]
 800b202:	2900      	cmp	r1, #0
 800b204:	d0c9      	beq.n	800b19a <__sflush_r+0x1a>
 800b206:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b20a:	4299      	cmp	r1, r3
 800b20c:	d002      	beq.n	800b214 <__sflush_r+0x94>
 800b20e:	4628      	mov	r0, r5
 800b210:	f000 fc94 	bl	800bb3c <_free_r>
 800b214:	2000      	movs	r0, #0
 800b216:	6360      	str	r0, [r4, #52]	; 0x34
 800b218:	e7c0      	b.n	800b19c <__sflush_r+0x1c>
 800b21a:	2301      	movs	r3, #1
 800b21c:	4628      	mov	r0, r5
 800b21e:	47b0      	blx	r6
 800b220:	1c41      	adds	r1, r0, #1
 800b222:	d1c8      	bne.n	800b1b6 <__sflush_r+0x36>
 800b224:	682b      	ldr	r3, [r5, #0]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d0c5      	beq.n	800b1b6 <__sflush_r+0x36>
 800b22a:	2b1d      	cmp	r3, #29
 800b22c:	d001      	beq.n	800b232 <__sflush_r+0xb2>
 800b22e:	2b16      	cmp	r3, #22
 800b230:	d101      	bne.n	800b236 <__sflush_r+0xb6>
 800b232:	602f      	str	r7, [r5, #0]
 800b234:	e7b1      	b.n	800b19a <__sflush_r+0x1a>
 800b236:	89a3      	ldrh	r3, [r4, #12]
 800b238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b23c:	81a3      	strh	r3, [r4, #12]
 800b23e:	e7ad      	b.n	800b19c <__sflush_r+0x1c>
 800b240:	690f      	ldr	r7, [r1, #16]
 800b242:	2f00      	cmp	r7, #0
 800b244:	d0a9      	beq.n	800b19a <__sflush_r+0x1a>
 800b246:	0793      	lsls	r3, r2, #30
 800b248:	680e      	ldr	r6, [r1, #0]
 800b24a:	bf08      	it	eq
 800b24c:	694b      	ldreq	r3, [r1, #20]
 800b24e:	600f      	str	r7, [r1, #0]
 800b250:	bf18      	it	ne
 800b252:	2300      	movne	r3, #0
 800b254:	eba6 0807 	sub.w	r8, r6, r7
 800b258:	608b      	str	r3, [r1, #8]
 800b25a:	f1b8 0f00 	cmp.w	r8, #0
 800b25e:	dd9c      	ble.n	800b19a <__sflush_r+0x1a>
 800b260:	4643      	mov	r3, r8
 800b262:	463a      	mov	r2, r7
 800b264:	6a21      	ldr	r1, [r4, #32]
 800b266:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b268:	4628      	mov	r0, r5
 800b26a:	47b0      	blx	r6
 800b26c:	2800      	cmp	r0, #0
 800b26e:	dc06      	bgt.n	800b27e <__sflush_r+0xfe>
 800b270:	89a3      	ldrh	r3, [r4, #12]
 800b272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b276:	81a3      	strh	r3, [r4, #12]
 800b278:	f04f 30ff 	mov.w	r0, #4294967295
 800b27c:	e78e      	b.n	800b19c <__sflush_r+0x1c>
 800b27e:	4407      	add	r7, r0
 800b280:	eba8 0800 	sub.w	r8, r8, r0
 800b284:	e7e9      	b.n	800b25a <__sflush_r+0xda>
 800b286:	bf00      	nop
 800b288:	20400001 	.word	0x20400001

0800b28c <_fflush_r>:
 800b28c:	b538      	push	{r3, r4, r5, lr}
 800b28e:	690b      	ldr	r3, [r1, #16]
 800b290:	4605      	mov	r5, r0
 800b292:	460c      	mov	r4, r1
 800b294:	b1db      	cbz	r3, 800b2ce <_fflush_r+0x42>
 800b296:	b118      	cbz	r0, 800b2a0 <_fflush_r+0x14>
 800b298:	6983      	ldr	r3, [r0, #24]
 800b29a:	b90b      	cbnz	r3, 800b2a0 <_fflush_r+0x14>
 800b29c:	f000 f860 	bl	800b360 <__sinit>
 800b2a0:	4b0c      	ldr	r3, [pc, #48]	; (800b2d4 <_fflush_r+0x48>)
 800b2a2:	429c      	cmp	r4, r3
 800b2a4:	d109      	bne.n	800b2ba <_fflush_r+0x2e>
 800b2a6:	686c      	ldr	r4, [r5, #4]
 800b2a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2ac:	b17b      	cbz	r3, 800b2ce <_fflush_r+0x42>
 800b2ae:	4621      	mov	r1, r4
 800b2b0:	4628      	mov	r0, r5
 800b2b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2b6:	f7ff bf63 	b.w	800b180 <__sflush_r>
 800b2ba:	4b07      	ldr	r3, [pc, #28]	; (800b2d8 <_fflush_r+0x4c>)
 800b2bc:	429c      	cmp	r4, r3
 800b2be:	d101      	bne.n	800b2c4 <_fflush_r+0x38>
 800b2c0:	68ac      	ldr	r4, [r5, #8]
 800b2c2:	e7f1      	b.n	800b2a8 <_fflush_r+0x1c>
 800b2c4:	4b05      	ldr	r3, [pc, #20]	; (800b2dc <_fflush_r+0x50>)
 800b2c6:	429c      	cmp	r4, r3
 800b2c8:	bf08      	it	eq
 800b2ca:	68ec      	ldreq	r4, [r5, #12]
 800b2cc:	e7ec      	b.n	800b2a8 <_fflush_r+0x1c>
 800b2ce:	2000      	movs	r0, #0
 800b2d0:	bd38      	pop	{r3, r4, r5, pc}
 800b2d2:	bf00      	nop
 800b2d4:	0800cdb4 	.word	0x0800cdb4
 800b2d8:	0800cdd4 	.word	0x0800cdd4
 800b2dc:	0800cd94 	.word	0x0800cd94

0800b2e0 <std>:
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	b510      	push	{r4, lr}
 800b2e4:	4604      	mov	r4, r0
 800b2e6:	e9c0 3300 	strd	r3, r3, [r0]
 800b2ea:	6083      	str	r3, [r0, #8]
 800b2ec:	8181      	strh	r1, [r0, #12]
 800b2ee:	6643      	str	r3, [r0, #100]	; 0x64
 800b2f0:	81c2      	strh	r2, [r0, #14]
 800b2f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b2f6:	6183      	str	r3, [r0, #24]
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	2208      	movs	r2, #8
 800b2fc:	305c      	adds	r0, #92	; 0x5c
 800b2fe:	f7fe faa2 	bl	8009846 <memset>
 800b302:	4b05      	ldr	r3, [pc, #20]	; (800b318 <std+0x38>)
 800b304:	6263      	str	r3, [r4, #36]	; 0x24
 800b306:	4b05      	ldr	r3, [pc, #20]	; (800b31c <std+0x3c>)
 800b308:	62a3      	str	r3, [r4, #40]	; 0x28
 800b30a:	4b05      	ldr	r3, [pc, #20]	; (800b320 <std+0x40>)
 800b30c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b30e:	4b05      	ldr	r3, [pc, #20]	; (800b324 <std+0x44>)
 800b310:	6224      	str	r4, [r4, #32]
 800b312:	6323      	str	r3, [r4, #48]	; 0x30
 800b314:	bd10      	pop	{r4, pc}
 800b316:	bf00      	nop
 800b318:	0800bf2d 	.word	0x0800bf2d
 800b31c:	0800bf4f 	.word	0x0800bf4f
 800b320:	0800bf87 	.word	0x0800bf87
 800b324:	0800bfab 	.word	0x0800bfab

0800b328 <_cleanup_r>:
 800b328:	4901      	ldr	r1, [pc, #4]	; (800b330 <_cleanup_r+0x8>)
 800b32a:	f000 b885 	b.w	800b438 <_fwalk_reent>
 800b32e:	bf00      	nop
 800b330:	0800b28d 	.word	0x0800b28d

0800b334 <__sfmoreglue>:
 800b334:	b570      	push	{r4, r5, r6, lr}
 800b336:	1e4a      	subs	r2, r1, #1
 800b338:	2568      	movs	r5, #104	; 0x68
 800b33a:	4355      	muls	r5, r2
 800b33c:	460e      	mov	r6, r1
 800b33e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b342:	f000 fc49 	bl	800bbd8 <_malloc_r>
 800b346:	4604      	mov	r4, r0
 800b348:	b140      	cbz	r0, 800b35c <__sfmoreglue+0x28>
 800b34a:	2100      	movs	r1, #0
 800b34c:	e9c0 1600 	strd	r1, r6, [r0]
 800b350:	300c      	adds	r0, #12
 800b352:	60a0      	str	r0, [r4, #8]
 800b354:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b358:	f7fe fa75 	bl	8009846 <memset>
 800b35c:	4620      	mov	r0, r4
 800b35e:	bd70      	pop	{r4, r5, r6, pc}

0800b360 <__sinit>:
 800b360:	6983      	ldr	r3, [r0, #24]
 800b362:	b510      	push	{r4, lr}
 800b364:	4604      	mov	r4, r0
 800b366:	bb33      	cbnz	r3, 800b3b6 <__sinit+0x56>
 800b368:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b36c:	6503      	str	r3, [r0, #80]	; 0x50
 800b36e:	4b12      	ldr	r3, [pc, #72]	; (800b3b8 <__sinit+0x58>)
 800b370:	4a12      	ldr	r2, [pc, #72]	; (800b3bc <__sinit+0x5c>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	6282      	str	r2, [r0, #40]	; 0x28
 800b376:	4298      	cmp	r0, r3
 800b378:	bf04      	itt	eq
 800b37a:	2301      	moveq	r3, #1
 800b37c:	6183      	streq	r3, [r0, #24]
 800b37e:	f000 f81f 	bl	800b3c0 <__sfp>
 800b382:	6060      	str	r0, [r4, #4]
 800b384:	4620      	mov	r0, r4
 800b386:	f000 f81b 	bl	800b3c0 <__sfp>
 800b38a:	60a0      	str	r0, [r4, #8]
 800b38c:	4620      	mov	r0, r4
 800b38e:	f000 f817 	bl	800b3c0 <__sfp>
 800b392:	2200      	movs	r2, #0
 800b394:	60e0      	str	r0, [r4, #12]
 800b396:	2104      	movs	r1, #4
 800b398:	6860      	ldr	r0, [r4, #4]
 800b39a:	f7ff ffa1 	bl	800b2e0 <std>
 800b39e:	2201      	movs	r2, #1
 800b3a0:	2109      	movs	r1, #9
 800b3a2:	68a0      	ldr	r0, [r4, #8]
 800b3a4:	f7ff ff9c 	bl	800b2e0 <std>
 800b3a8:	2202      	movs	r2, #2
 800b3aa:	2112      	movs	r1, #18
 800b3ac:	68e0      	ldr	r0, [r4, #12]
 800b3ae:	f7ff ff97 	bl	800b2e0 <std>
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	61a3      	str	r3, [r4, #24]
 800b3b6:	bd10      	pop	{r4, pc}
 800b3b8:	0800cd4c 	.word	0x0800cd4c
 800b3bc:	0800b329 	.word	0x0800b329

0800b3c0 <__sfp>:
 800b3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3c2:	4b1b      	ldr	r3, [pc, #108]	; (800b430 <__sfp+0x70>)
 800b3c4:	681e      	ldr	r6, [r3, #0]
 800b3c6:	69b3      	ldr	r3, [r6, #24]
 800b3c8:	4607      	mov	r7, r0
 800b3ca:	b913      	cbnz	r3, 800b3d2 <__sfp+0x12>
 800b3cc:	4630      	mov	r0, r6
 800b3ce:	f7ff ffc7 	bl	800b360 <__sinit>
 800b3d2:	3648      	adds	r6, #72	; 0x48
 800b3d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b3d8:	3b01      	subs	r3, #1
 800b3da:	d503      	bpl.n	800b3e4 <__sfp+0x24>
 800b3dc:	6833      	ldr	r3, [r6, #0]
 800b3de:	b133      	cbz	r3, 800b3ee <__sfp+0x2e>
 800b3e0:	6836      	ldr	r6, [r6, #0]
 800b3e2:	e7f7      	b.n	800b3d4 <__sfp+0x14>
 800b3e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b3e8:	b16d      	cbz	r5, 800b406 <__sfp+0x46>
 800b3ea:	3468      	adds	r4, #104	; 0x68
 800b3ec:	e7f4      	b.n	800b3d8 <__sfp+0x18>
 800b3ee:	2104      	movs	r1, #4
 800b3f0:	4638      	mov	r0, r7
 800b3f2:	f7ff ff9f 	bl	800b334 <__sfmoreglue>
 800b3f6:	6030      	str	r0, [r6, #0]
 800b3f8:	2800      	cmp	r0, #0
 800b3fa:	d1f1      	bne.n	800b3e0 <__sfp+0x20>
 800b3fc:	230c      	movs	r3, #12
 800b3fe:	603b      	str	r3, [r7, #0]
 800b400:	4604      	mov	r4, r0
 800b402:	4620      	mov	r0, r4
 800b404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b406:	4b0b      	ldr	r3, [pc, #44]	; (800b434 <__sfp+0x74>)
 800b408:	6665      	str	r5, [r4, #100]	; 0x64
 800b40a:	e9c4 5500 	strd	r5, r5, [r4]
 800b40e:	60a5      	str	r5, [r4, #8]
 800b410:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b414:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b418:	2208      	movs	r2, #8
 800b41a:	4629      	mov	r1, r5
 800b41c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b420:	f7fe fa11 	bl	8009846 <memset>
 800b424:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b428:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b42c:	e7e9      	b.n	800b402 <__sfp+0x42>
 800b42e:	bf00      	nop
 800b430:	0800cd4c 	.word	0x0800cd4c
 800b434:	ffff0001 	.word	0xffff0001

0800b438 <_fwalk_reent>:
 800b438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b43c:	4680      	mov	r8, r0
 800b43e:	4689      	mov	r9, r1
 800b440:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b444:	2600      	movs	r6, #0
 800b446:	b914      	cbnz	r4, 800b44e <_fwalk_reent+0x16>
 800b448:	4630      	mov	r0, r6
 800b44a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b44e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b452:	3f01      	subs	r7, #1
 800b454:	d501      	bpl.n	800b45a <_fwalk_reent+0x22>
 800b456:	6824      	ldr	r4, [r4, #0]
 800b458:	e7f5      	b.n	800b446 <_fwalk_reent+0xe>
 800b45a:	89ab      	ldrh	r3, [r5, #12]
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d907      	bls.n	800b470 <_fwalk_reent+0x38>
 800b460:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b464:	3301      	adds	r3, #1
 800b466:	d003      	beq.n	800b470 <_fwalk_reent+0x38>
 800b468:	4629      	mov	r1, r5
 800b46a:	4640      	mov	r0, r8
 800b46c:	47c8      	blx	r9
 800b46e:	4306      	orrs	r6, r0
 800b470:	3568      	adds	r5, #104	; 0x68
 800b472:	e7ee      	b.n	800b452 <_fwalk_reent+0x1a>

0800b474 <_localeconv_r>:
 800b474:	4b04      	ldr	r3, [pc, #16]	; (800b488 <_localeconv_r+0x14>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	6a18      	ldr	r0, [r3, #32]
 800b47a:	4b04      	ldr	r3, [pc, #16]	; (800b48c <_localeconv_r+0x18>)
 800b47c:	2800      	cmp	r0, #0
 800b47e:	bf08      	it	eq
 800b480:	4618      	moveq	r0, r3
 800b482:	30f0      	adds	r0, #240	; 0xf0
 800b484:	4770      	bx	lr
 800b486:	bf00      	nop
 800b488:	20000020 	.word	0x20000020
 800b48c:	20000084 	.word	0x20000084

0800b490 <__swhatbuf_r>:
 800b490:	b570      	push	{r4, r5, r6, lr}
 800b492:	460e      	mov	r6, r1
 800b494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b498:	2900      	cmp	r1, #0
 800b49a:	b096      	sub	sp, #88	; 0x58
 800b49c:	4614      	mov	r4, r2
 800b49e:	461d      	mov	r5, r3
 800b4a0:	da07      	bge.n	800b4b2 <__swhatbuf_r+0x22>
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	602b      	str	r3, [r5, #0]
 800b4a6:	89b3      	ldrh	r3, [r6, #12]
 800b4a8:	061a      	lsls	r2, r3, #24
 800b4aa:	d410      	bmi.n	800b4ce <__swhatbuf_r+0x3e>
 800b4ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4b0:	e00e      	b.n	800b4d0 <__swhatbuf_r+0x40>
 800b4b2:	466a      	mov	r2, sp
 800b4b4:	f000 fda0 	bl	800bff8 <_fstat_r>
 800b4b8:	2800      	cmp	r0, #0
 800b4ba:	dbf2      	blt.n	800b4a2 <__swhatbuf_r+0x12>
 800b4bc:	9a01      	ldr	r2, [sp, #4]
 800b4be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b4c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b4c6:	425a      	negs	r2, r3
 800b4c8:	415a      	adcs	r2, r3
 800b4ca:	602a      	str	r2, [r5, #0]
 800b4cc:	e7ee      	b.n	800b4ac <__swhatbuf_r+0x1c>
 800b4ce:	2340      	movs	r3, #64	; 0x40
 800b4d0:	2000      	movs	r0, #0
 800b4d2:	6023      	str	r3, [r4, #0]
 800b4d4:	b016      	add	sp, #88	; 0x58
 800b4d6:	bd70      	pop	{r4, r5, r6, pc}

0800b4d8 <__smakebuf_r>:
 800b4d8:	898b      	ldrh	r3, [r1, #12]
 800b4da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b4dc:	079d      	lsls	r5, r3, #30
 800b4de:	4606      	mov	r6, r0
 800b4e0:	460c      	mov	r4, r1
 800b4e2:	d507      	bpl.n	800b4f4 <__smakebuf_r+0x1c>
 800b4e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b4e8:	6023      	str	r3, [r4, #0]
 800b4ea:	6123      	str	r3, [r4, #16]
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	6163      	str	r3, [r4, #20]
 800b4f0:	b002      	add	sp, #8
 800b4f2:	bd70      	pop	{r4, r5, r6, pc}
 800b4f4:	ab01      	add	r3, sp, #4
 800b4f6:	466a      	mov	r2, sp
 800b4f8:	f7ff ffca 	bl	800b490 <__swhatbuf_r>
 800b4fc:	9900      	ldr	r1, [sp, #0]
 800b4fe:	4605      	mov	r5, r0
 800b500:	4630      	mov	r0, r6
 800b502:	f000 fb69 	bl	800bbd8 <_malloc_r>
 800b506:	b948      	cbnz	r0, 800b51c <__smakebuf_r+0x44>
 800b508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b50c:	059a      	lsls	r2, r3, #22
 800b50e:	d4ef      	bmi.n	800b4f0 <__smakebuf_r+0x18>
 800b510:	f023 0303 	bic.w	r3, r3, #3
 800b514:	f043 0302 	orr.w	r3, r3, #2
 800b518:	81a3      	strh	r3, [r4, #12]
 800b51a:	e7e3      	b.n	800b4e4 <__smakebuf_r+0xc>
 800b51c:	4b0d      	ldr	r3, [pc, #52]	; (800b554 <__smakebuf_r+0x7c>)
 800b51e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b520:	89a3      	ldrh	r3, [r4, #12]
 800b522:	6020      	str	r0, [r4, #0]
 800b524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b528:	81a3      	strh	r3, [r4, #12]
 800b52a:	9b00      	ldr	r3, [sp, #0]
 800b52c:	6163      	str	r3, [r4, #20]
 800b52e:	9b01      	ldr	r3, [sp, #4]
 800b530:	6120      	str	r0, [r4, #16]
 800b532:	b15b      	cbz	r3, 800b54c <__smakebuf_r+0x74>
 800b534:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b538:	4630      	mov	r0, r6
 800b53a:	f000 fd6f 	bl	800c01c <_isatty_r>
 800b53e:	b128      	cbz	r0, 800b54c <__smakebuf_r+0x74>
 800b540:	89a3      	ldrh	r3, [r4, #12]
 800b542:	f023 0303 	bic.w	r3, r3, #3
 800b546:	f043 0301 	orr.w	r3, r3, #1
 800b54a:	81a3      	strh	r3, [r4, #12]
 800b54c:	89a3      	ldrh	r3, [r4, #12]
 800b54e:	431d      	orrs	r5, r3
 800b550:	81a5      	strh	r5, [r4, #12]
 800b552:	e7cd      	b.n	800b4f0 <__smakebuf_r+0x18>
 800b554:	0800b329 	.word	0x0800b329

0800b558 <malloc>:
 800b558:	4b02      	ldr	r3, [pc, #8]	; (800b564 <malloc+0xc>)
 800b55a:	4601      	mov	r1, r0
 800b55c:	6818      	ldr	r0, [r3, #0]
 800b55e:	f000 bb3b 	b.w	800bbd8 <_malloc_r>
 800b562:	bf00      	nop
 800b564:	20000020 	.word	0x20000020

0800b568 <_Balloc>:
 800b568:	b570      	push	{r4, r5, r6, lr}
 800b56a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b56c:	4604      	mov	r4, r0
 800b56e:	460e      	mov	r6, r1
 800b570:	b93d      	cbnz	r5, 800b582 <_Balloc+0x1a>
 800b572:	2010      	movs	r0, #16
 800b574:	f7ff fff0 	bl	800b558 <malloc>
 800b578:	6260      	str	r0, [r4, #36]	; 0x24
 800b57a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b57e:	6005      	str	r5, [r0, #0]
 800b580:	60c5      	str	r5, [r0, #12]
 800b582:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b584:	68eb      	ldr	r3, [r5, #12]
 800b586:	b183      	cbz	r3, 800b5aa <_Balloc+0x42>
 800b588:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b590:	b9b8      	cbnz	r0, 800b5c2 <_Balloc+0x5a>
 800b592:	2101      	movs	r1, #1
 800b594:	fa01 f506 	lsl.w	r5, r1, r6
 800b598:	1d6a      	adds	r2, r5, #5
 800b59a:	0092      	lsls	r2, r2, #2
 800b59c:	4620      	mov	r0, r4
 800b59e:	f000 fabf 	bl	800bb20 <_calloc_r>
 800b5a2:	b160      	cbz	r0, 800b5be <_Balloc+0x56>
 800b5a4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b5a8:	e00e      	b.n	800b5c8 <_Balloc+0x60>
 800b5aa:	2221      	movs	r2, #33	; 0x21
 800b5ac:	2104      	movs	r1, #4
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	f000 fab6 	bl	800bb20 <_calloc_r>
 800b5b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5b6:	60e8      	str	r0, [r5, #12]
 800b5b8:	68db      	ldr	r3, [r3, #12]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d1e4      	bne.n	800b588 <_Balloc+0x20>
 800b5be:	2000      	movs	r0, #0
 800b5c0:	bd70      	pop	{r4, r5, r6, pc}
 800b5c2:	6802      	ldr	r2, [r0, #0]
 800b5c4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b5ce:	e7f7      	b.n	800b5c0 <_Balloc+0x58>

0800b5d0 <_Bfree>:
 800b5d0:	b570      	push	{r4, r5, r6, lr}
 800b5d2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b5d4:	4606      	mov	r6, r0
 800b5d6:	460d      	mov	r5, r1
 800b5d8:	b93c      	cbnz	r4, 800b5ea <_Bfree+0x1a>
 800b5da:	2010      	movs	r0, #16
 800b5dc:	f7ff ffbc 	bl	800b558 <malloc>
 800b5e0:	6270      	str	r0, [r6, #36]	; 0x24
 800b5e2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b5e6:	6004      	str	r4, [r0, #0]
 800b5e8:	60c4      	str	r4, [r0, #12]
 800b5ea:	b13d      	cbz	r5, 800b5fc <_Bfree+0x2c>
 800b5ec:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b5ee:	686a      	ldr	r2, [r5, #4]
 800b5f0:	68db      	ldr	r3, [r3, #12]
 800b5f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b5f6:	6029      	str	r1, [r5, #0]
 800b5f8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b5fc:	bd70      	pop	{r4, r5, r6, pc}

0800b5fe <__multadd>:
 800b5fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b602:	690d      	ldr	r5, [r1, #16]
 800b604:	461f      	mov	r7, r3
 800b606:	4606      	mov	r6, r0
 800b608:	460c      	mov	r4, r1
 800b60a:	f101 0c14 	add.w	ip, r1, #20
 800b60e:	2300      	movs	r3, #0
 800b610:	f8dc 0000 	ldr.w	r0, [ip]
 800b614:	b281      	uxth	r1, r0
 800b616:	fb02 7101 	mla	r1, r2, r1, r7
 800b61a:	0c0f      	lsrs	r7, r1, #16
 800b61c:	0c00      	lsrs	r0, r0, #16
 800b61e:	fb02 7000 	mla	r0, r2, r0, r7
 800b622:	b289      	uxth	r1, r1
 800b624:	3301      	adds	r3, #1
 800b626:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b62a:	429d      	cmp	r5, r3
 800b62c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b630:	f84c 1b04 	str.w	r1, [ip], #4
 800b634:	dcec      	bgt.n	800b610 <__multadd+0x12>
 800b636:	b1d7      	cbz	r7, 800b66e <__multadd+0x70>
 800b638:	68a3      	ldr	r3, [r4, #8]
 800b63a:	42ab      	cmp	r3, r5
 800b63c:	dc12      	bgt.n	800b664 <__multadd+0x66>
 800b63e:	6861      	ldr	r1, [r4, #4]
 800b640:	4630      	mov	r0, r6
 800b642:	3101      	adds	r1, #1
 800b644:	f7ff ff90 	bl	800b568 <_Balloc>
 800b648:	6922      	ldr	r2, [r4, #16]
 800b64a:	3202      	adds	r2, #2
 800b64c:	f104 010c 	add.w	r1, r4, #12
 800b650:	4680      	mov	r8, r0
 800b652:	0092      	lsls	r2, r2, #2
 800b654:	300c      	adds	r0, #12
 800b656:	f7fe f8eb 	bl	8009830 <memcpy>
 800b65a:	4621      	mov	r1, r4
 800b65c:	4630      	mov	r0, r6
 800b65e:	f7ff ffb7 	bl	800b5d0 <_Bfree>
 800b662:	4644      	mov	r4, r8
 800b664:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b668:	3501      	adds	r5, #1
 800b66a:	615f      	str	r7, [r3, #20]
 800b66c:	6125      	str	r5, [r4, #16]
 800b66e:	4620      	mov	r0, r4
 800b670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b674 <__hi0bits>:
 800b674:	0c02      	lsrs	r2, r0, #16
 800b676:	0412      	lsls	r2, r2, #16
 800b678:	4603      	mov	r3, r0
 800b67a:	b9b2      	cbnz	r2, 800b6aa <__hi0bits+0x36>
 800b67c:	0403      	lsls	r3, r0, #16
 800b67e:	2010      	movs	r0, #16
 800b680:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b684:	bf04      	itt	eq
 800b686:	021b      	lsleq	r3, r3, #8
 800b688:	3008      	addeq	r0, #8
 800b68a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b68e:	bf04      	itt	eq
 800b690:	011b      	lsleq	r3, r3, #4
 800b692:	3004      	addeq	r0, #4
 800b694:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b698:	bf04      	itt	eq
 800b69a:	009b      	lsleq	r3, r3, #2
 800b69c:	3002      	addeq	r0, #2
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	db06      	blt.n	800b6b0 <__hi0bits+0x3c>
 800b6a2:	005b      	lsls	r3, r3, #1
 800b6a4:	d503      	bpl.n	800b6ae <__hi0bits+0x3a>
 800b6a6:	3001      	adds	r0, #1
 800b6a8:	4770      	bx	lr
 800b6aa:	2000      	movs	r0, #0
 800b6ac:	e7e8      	b.n	800b680 <__hi0bits+0xc>
 800b6ae:	2020      	movs	r0, #32
 800b6b0:	4770      	bx	lr

0800b6b2 <__lo0bits>:
 800b6b2:	6803      	ldr	r3, [r0, #0]
 800b6b4:	f013 0207 	ands.w	r2, r3, #7
 800b6b8:	4601      	mov	r1, r0
 800b6ba:	d00b      	beq.n	800b6d4 <__lo0bits+0x22>
 800b6bc:	07da      	lsls	r2, r3, #31
 800b6be:	d423      	bmi.n	800b708 <__lo0bits+0x56>
 800b6c0:	0798      	lsls	r0, r3, #30
 800b6c2:	bf49      	itett	mi
 800b6c4:	085b      	lsrmi	r3, r3, #1
 800b6c6:	089b      	lsrpl	r3, r3, #2
 800b6c8:	2001      	movmi	r0, #1
 800b6ca:	600b      	strmi	r3, [r1, #0]
 800b6cc:	bf5c      	itt	pl
 800b6ce:	600b      	strpl	r3, [r1, #0]
 800b6d0:	2002      	movpl	r0, #2
 800b6d2:	4770      	bx	lr
 800b6d4:	b298      	uxth	r0, r3
 800b6d6:	b9a8      	cbnz	r0, 800b704 <__lo0bits+0x52>
 800b6d8:	0c1b      	lsrs	r3, r3, #16
 800b6da:	2010      	movs	r0, #16
 800b6dc:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b6e0:	bf04      	itt	eq
 800b6e2:	0a1b      	lsreq	r3, r3, #8
 800b6e4:	3008      	addeq	r0, #8
 800b6e6:	071a      	lsls	r2, r3, #28
 800b6e8:	bf04      	itt	eq
 800b6ea:	091b      	lsreq	r3, r3, #4
 800b6ec:	3004      	addeq	r0, #4
 800b6ee:	079a      	lsls	r2, r3, #30
 800b6f0:	bf04      	itt	eq
 800b6f2:	089b      	lsreq	r3, r3, #2
 800b6f4:	3002      	addeq	r0, #2
 800b6f6:	07da      	lsls	r2, r3, #31
 800b6f8:	d402      	bmi.n	800b700 <__lo0bits+0x4e>
 800b6fa:	085b      	lsrs	r3, r3, #1
 800b6fc:	d006      	beq.n	800b70c <__lo0bits+0x5a>
 800b6fe:	3001      	adds	r0, #1
 800b700:	600b      	str	r3, [r1, #0]
 800b702:	4770      	bx	lr
 800b704:	4610      	mov	r0, r2
 800b706:	e7e9      	b.n	800b6dc <__lo0bits+0x2a>
 800b708:	2000      	movs	r0, #0
 800b70a:	4770      	bx	lr
 800b70c:	2020      	movs	r0, #32
 800b70e:	4770      	bx	lr

0800b710 <__i2b>:
 800b710:	b510      	push	{r4, lr}
 800b712:	460c      	mov	r4, r1
 800b714:	2101      	movs	r1, #1
 800b716:	f7ff ff27 	bl	800b568 <_Balloc>
 800b71a:	2201      	movs	r2, #1
 800b71c:	6144      	str	r4, [r0, #20]
 800b71e:	6102      	str	r2, [r0, #16]
 800b720:	bd10      	pop	{r4, pc}

0800b722 <__multiply>:
 800b722:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b726:	4614      	mov	r4, r2
 800b728:	690a      	ldr	r2, [r1, #16]
 800b72a:	6923      	ldr	r3, [r4, #16]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	bfb8      	it	lt
 800b730:	460b      	movlt	r3, r1
 800b732:	4688      	mov	r8, r1
 800b734:	bfbc      	itt	lt
 800b736:	46a0      	movlt	r8, r4
 800b738:	461c      	movlt	r4, r3
 800b73a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b73e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b742:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b746:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b74a:	eb07 0609 	add.w	r6, r7, r9
 800b74e:	42b3      	cmp	r3, r6
 800b750:	bfb8      	it	lt
 800b752:	3101      	addlt	r1, #1
 800b754:	f7ff ff08 	bl	800b568 <_Balloc>
 800b758:	f100 0514 	add.w	r5, r0, #20
 800b75c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b760:	462b      	mov	r3, r5
 800b762:	2200      	movs	r2, #0
 800b764:	4573      	cmp	r3, lr
 800b766:	d316      	bcc.n	800b796 <__multiply+0x74>
 800b768:	f104 0214 	add.w	r2, r4, #20
 800b76c:	f108 0114 	add.w	r1, r8, #20
 800b770:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b774:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b778:	9300      	str	r3, [sp, #0]
 800b77a:	9b00      	ldr	r3, [sp, #0]
 800b77c:	9201      	str	r2, [sp, #4]
 800b77e:	4293      	cmp	r3, r2
 800b780:	d80c      	bhi.n	800b79c <__multiply+0x7a>
 800b782:	2e00      	cmp	r6, #0
 800b784:	dd03      	ble.n	800b78e <__multiply+0x6c>
 800b786:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d05d      	beq.n	800b84a <__multiply+0x128>
 800b78e:	6106      	str	r6, [r0, #16]
 800b790:	b003      	add	sp, #12
 800b792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b796:	f843 2b04 	str.w	r2, [r3], #4
 800b79a:	e7e3      	b.n	800b764 <__multiply+0x42>
 800b79c:	f8b2 b000 	ldrh.w	fp, [r2]
 800b7a0:	f1bb 0f00 	cmp.w	fp, #0
 800b7a4:	d023      	beq.n	800b7ee <__multiply+0xcc>
 800b7a6:	4689      	mov	r9, r1
 800b7a8:	46ac      	mov	ip, r5
 800b7aa:	f04f 0800 	mov.w	r8, #0
 800b7ae:	f859 4b04 	ldr.w	r4, [r9], #4
 800b7b2:	f8dc a000 	ldr.w	sl, [ip]
 800b7b6:	b2a3      	uxth	r3, r4
 800b7b8:	fa1f fa8a 	uxth.w	sl, sl
 800b7bc:	fb0b a303 	mla	r3, fp, r3, sl
 800b7c0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b7c4:	f8dc 4000 	ldr.w	r4, [ip]
 800b7c8:	4443      	add	r3, r8
 800b7ca:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b7ce:	fb0b 840a 	mla	r4, fp, sl, r8
 800b7d2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b7d6:	46e2      	mov	sl, ip
 800b7d8:	b29b      	uxth	r3, r3
 800b7da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b7de:	454f      	cmp	r7, r9
 800b7e0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b7e4:	f84a 3b04 	str.w	r3, [sl], #4
 800b7e8:	d82b      	bhi.n	800b842 <__multiply+0x120>
 800b7ea:	f8cc 8004 	str.w	r8, [ip, #4]
 800b7ee:	9b01      	ldr	r3, [sp, #4]
 800b7f0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b7f4:	3204      	adds	r2, #4
 800b7f6:	f1ba 0f00 	cmp.w	sl, #0
 800b7fa:	d020      	beq.n	800b83e <__multiply+0x11c>
 800b7fc:	682b      	ldr	r3, [r5, #0]
 800b7fe:	4689      	mov	r9, r1
 800b800:	46a8      	mov	r8, r5
 800b802:	f04f 0b00 	mov.w	fp, #0
 800b806:	f8b9 c000 	ldrh.w	ip, [r9]
 800b80a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b80e:	fb0a 440c 	mla	r4, sl, ip, r4
 800b812:	445c      	add	r4, fp
 800b814:	46c4      	mov	ip, r8
 800b816:	b29b      	uxth	r3, r3
 800b818:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b81c:	f84c 3b04 	str.w	r3, [ip], #4
 800b820:	f859 3b04 	ldr.w	r3, [r9], #4
 800b824:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b828:	0c1b      	lsrs	r3, r3, #16
 800b82a:	fb0a b303 	mla	r3, sl, r3, fp
 800b82e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b832:	454f      	cmp	r7, r9
 800b834:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b838:	d805      	bhi.n	800b846 <__multiply+0x124>
 800b83a:	f8c8 3004 	str.w	r3, [r8, #4]
 800b83e:	3504      	adds	r5, #4
 800b840:	e79b      	b.n	800b77a <__multiply+0x58>
 800b842:	46d4      	mov	ip, sl
 800b844:	e7b3      	b.n	800b7ae <__multiply+0x8c>
 800b846:	46e0      	mov	r8, ip
 800b848:	e7dd      	b.n	800b806 <__multiply+0xe4>
 800b84a:	3e01      	subs	r6, #1
 800b84c:	e799      	b.n	800b782 <__multiply+0x60>
	...

0800b850 <__pow5mult>:
 800b850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b854:	4615      	mov	r5, r2
 800b856:	f012 0203 	ands.w	r2, r2, #3
 800b85a:	4606      	mov	r6, r0
 800b85c:	460f      	mov	r7, r1
 800b85e:	d007      	beq.n	800b870 <__pow5mult+0x20>
 800b860:	3a01      	subs	r2, #1
 800b862:	4c21      	ldr	r4, [pc, #132]	; (800b8e8 <__pow5mult+0x98>)
 800b864:	2300      	movs	r3, #0
 800b866:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b86a:	f7ff fec8 	bl	800b5fe <__multadd>
 800b86e:	4607      	mov	r7, r0
 800b870:	10ad      	asrs	r5, r5, #2
 800b872:	d035      	beq.n	800b8e0 <__pow5mult+0x90>
 800b874:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b876:	b93c      	cbnz	r4, 800b888 <__pow5mult+0x38>
 800b878:	2010      	movs	r0, #16
 800b87a:	f7ff fe6d 	bl	800b558 <malloc>
 800b87e:	6270      	str	r0, [r6, #36]	; 0x24
 800b880:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b884:	6004      	str	r4, [r0, #0]
 800b886:	60c4      	str	r4, [r0, #12]
 800b888:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b88c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b890:	b94c      	cbnz	r4, 800b8a6 <__pow5mult+0x56>
 800b892:	f240 2171 	movw	r1, #625	; 0x271
 800b896:	4630      	mov	r0, r6
 800b898:	f7ff ff3a 	bl	800b710 <__i2b>
 800b89c:	2300      	movs	r3, #0
 800b89e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b8a2:	4604      	mov	r4, r0
 800b8a4:	6003      	str	r3, [r0, #0]
 800b8a6:	f04f 0800 	mov.w	r8, #0
 800b8aa:	07eb      	lsls	r3, r5, #31
 800b8ac:	d50a      	bpl.n	800b8c4 <__pow5mult+0x74>
 800b8ae:	4639      	mov	r1, r7
 800b8b0:	4622      	mov	r2, r4
 800b8b2:	4630      	mov	r0, r6
 800b8b4:	f7ff ff35 	bl	800b722 <__multiply>
 800b8b8:	4639      	mov	r1, r7
 800b8ba:	4681      	mov	r9, r0
 800b8bc:	4630      	mov	r0, r6
 800b8be:	f7ff fe87 	bl	800b5d0 <_Bfree>
 800b8c2:	464f      	mov	r7, r9
 800b8c4:	106d      	asrs	r5, r5, #1
 800b8c6:	d00b      	beq.n	800b8e0 <__pow5mult+0x90>
 800b8c8:	6820      	ldr	r0, [r4, #0]
 800b8ca:	b938      	cbnz	r0, 800b8dc <__pow5mult+0x8c>
 800b8cc:	4622      	mov	r2, r4
 800b8ce:	4621      	mov	r1, r4
 800b8d0:	4630      	mov	r0, r6
 800b8d2:	f7ff ff26 	bl	800b722 <__multiply>
 800b8d6:	6020      	str	r0, [r4, #0]
 800b8d8:	f8c0 8000 	str.w	r8, [r0]
 800b8dc:	4604      	mov	r4, r0
 800b8de:	e7e4      	b.n	800b8aa <__pow5mult+0x5a>
 800b8e0:	4638      	mov	r0, r7
 800b8e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8e6:	bf00      	nop
 800b8e8:	0800cee8 	.word	0x0800cee8

0800b8ec <__lshift>:
 800b8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8f0:	460c      	mov	r4, r1
 800b8f2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b8f6:	6923      	ldr	r3, [r4, #16]
 800b8f8:	6849      	ldr	r1, [r1, #4]
 800b8fa:	eb0a 0903 	add.w	r9, sl, r3
 800b8fe:	68a3      	ldr	r3, [r4, #8]
 800b900:	4607      	mov	r7, r0
 800b902:	4616      	mov	r6, r2
 800b904:	f109 0501 	add.w	r5, r9, #1
 800b908:	42ab      	cmp	r3, r5
 800b90a:	db32      	blt.n	800b972 <__lshift+0x86>
 800b90c:	4638      	mov	r0, r7
 800b90e:	f7ff fe2b 	bl	800b568 <_Balloc>
 800b912:	2300      	movs	r3, #0
 800b914:	4680      	mov	r8, r0
 800b916:	f100 0114 	add.w	r1, r0, #20
 800b91a:	461a      	mov	r2, r3
 800b91c:	4553      	cmp	r3, sl
 800b91e:	db2b      	blt.n	800b978 <__lshift+0x8c>
 800b920:	6920      	ldr	r0, [r4, #16]
 800b922:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b926:	f104 0314 	add.w	r3, r4, #20
 800b92a:	f016 021f 	ands.w	r2, r6, #31
 800b92e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b932:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b936:	d025      	beq.n	800b984 <__lshift+0x98>
 800b938:	f1c2 0e20 	rsb	lr, r2, #32
 800b93c:	2000      	movs	r0, #0
 800b93e:	681e      	ldr	r6, [r3, #0]
 800b940:	468a      	mov	sl, r1
 800b942:	4096      	lsls	r6, r2
 800b944:	4330      	orrs	r0, r6
 800b946:	f84a 0b04 	str.w	r0, [sl], #4
 800b94a:	f853 0b04 	ldr.w	r0, [r3], #4
 800b94e:	459c      	cmp	ip, r3
 800b950:	fa20 f00e 	lsr.w	r0, r0, lr
 800b954:	d814      	bhi.n	800b980 <__lshift+0x94>
 800b956:	6048      	str	r0, [r1, #4]
 800b958:	b108      	cbz	r0, 800b95e <__lshift+0x72>
 800b95a:	f109 0502 	add.w	r5, r9, #2
 800b95e:	3d01      	subs	r5, #1
 800b960:	4638      	mov	r0, r7
 800b962:	f8c8 5010 	str.w	r5, [r8, #16]
 800b966:	4621      	mov	r1, r4
 800b968:	f7ff fe32 	bl	800b5d0 <_Bfree>
 800b96c:	4640      	mov	r0, r8
 800b96e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b972:	3101      	adds	r1, #1
 800b974:	005b      	lsls	r3, r3, #1
 800b976:	e7c7      	b.n	800b908 <__lshift+0x1c>
 800b978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b97c:	3301      	adds	r3, #1
 800b97e:	e7cd      	b.n	800b91c <__lshift+0x30>
 800b980:	4651      	mov	r1, sl
 800b982:	e7dc      	b.n	800b93e <__lshift+0x52>
 800b984:	3904      	subs	r1, #4
 800b986:	f853 2b04 	ldr.w	r2, [r3], #4
 800b98a:	f841 2f04 	str.w	r2, [r1, #4]!
 800b98e:	459c      	cmp	ip, r3
 800b990:	d8f9      	bhi.n	800b986 <__lshift+0x9a>
 800b992:	e7e4      	b.n	800b95e <__lshift+0x72>

0800b994 <__mcmp>:
 800b994:	6903      	ldr	r3, [r0, #16]
 800b996:	690a      	ldr	r2, [r1, #16]
 800b998:	1a9b      	subs	r3, r3, r2
 800b99a:	b530      	push	{r4, r5, lr}
 800b99c:	d10c      	bne.n	800b9b8 <__mcmp+0x24>
 800b99e:	0092      	lsls	r2, r2, #2
 800b9a0:	3014      	adds	r0, #20
 800b9a2:	3114      	adds	r1, #20
 800b9a4:	1884      	adds	r4, r0, r2
 800b9a6:	4411      	add	r1, r2
 800b9a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b9ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b9b0:	4295      	cmp	r5, r2
 800b9b2:	d003      	beq.n	800b9bc <__mcmp+0x28>
 800b9b4:	d305      	bcc.n	800b9c2 <__mcmp+0x2e>
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	bd30      	pop	{r4, r5, pc}
 800b9bc:	42a0      	cmp	r0, r4
 800b9be:	d3f3      	bcc.n	800b9a8 <__mcmp+0x14>
 800b9c0:	e7fa      	b.n	800b9b8 <__mcmp+0x24>
 800b9c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b9c6:	e7f7      	b.n	800b9b8 <__mcmp+0x24>

0800b9c8 <__mdiff>:
 800b9c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9cc:	460d      	mov	r5, r1
 800b9ce:	4607      	mov	r7, r0
 800b9d0:	4611      	mov	r1, r2
 800b9d2:	4628      	mov	r0, r5
 800b9d4:	4614      	mov	r4, r2
 800b9d6:	f7ff ffdd 	bl	800b994 <__mcmp>
 800b9da:	1e06      	subs	r6, r0, #0
 800b9dc:	d108      	bne.n	800b9f0 <__mdiff+0x28>
 800b9de:	4631      	mov	r1, r6
 800b9e0:	4638      	mov	r0, r7
 800b9e2:	f7ff fdc1 	bl	800b568 <_Balloc>
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b9ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9f0:	bfa4      	itt	ge
 800b9f2:	4623      	movge	r3, r4
 800b9f4:	462c      	movge	r4, r5
 800b9f6:	4638      	mov	r0, r7
 800b9f8:	6861      	ldr	r1, [r4, #4]
 800b9fa:	bfa6      	itte	ge
 800b9fc:	461d      	movge	r5, r3
 800b9fe:	2600      	movge	r6, #0
 800ba00:	2601      	movlt	r6, #1
 800ba02:	f7ff fdb1 	bl	800b568 <_Balloc>
 800ba06:	692b      	ldr	r3, [r5, #16]
 800ba08:	60c6      	str	r6, [r0, #12]
 800ba0a:	6926      	ldr	r6, [r4, #16]
 800ba0c:	f105 0914 	add.w	r9, r5, #20
 800ba10:	f104 0214 	add.w	r2, r4, #20
 800ba14:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ba18:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ba1c:	f100 0514 	add.w	r5, r0, #20
 800ba20:	f04f 0e00 	mov.w	lr, #0
 800ba24:	f852 ab04 	ldr.w	sl, [r2], #4
 800ba28:	f859 4b04 	ldr.w	r4, [r9], #4
 800ba2c:	fa1e f18a 	uxtah	r1, lr, sl
 800ba30:	b2a3      	uxth	r3, r4
 800ba32:	1ac9      	subs	r1, r1, r3
 800ba34:	0c23      	lsrs	r3, r4, #16
 800ba36:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ba3a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ba3e:	b289      	uxth	r1, r1
 800ba40:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ba44:	45c8      	cmp	r8, r9
 800ba46:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ba4a:	4694      	mov	ip, r2
 800ba4c:	f845 3b04 	str.w	r3, [r5], #4
 800ba50:	d8e8      	bhi.n	800ba24 <__mdiff+0x5c>
 800ba52:	45bc      	cmp	ip, r7
 800ba54:	d304      	bcc.n	800ba60 <__mdiff+0x98>
 800ba56:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ba5a:	b183      	cbz	r3, 800ba7e <__mdiff+0xb6>
 800ba5c:	6106      	str	r6, [r0, #16]
 800ba5e:	e7c5      	b.n	800b9ec <__mdiff+0x24>
 800ba60:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ba64:	fa1e f381 	uxtah	r3, lr, r1
 800ba68:	141a      	asrs	r2, r3, #16
 800ba6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ba6e:	b29b      	uxth	r3, r3
 800ba70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba74:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ba78:	f845 3b04 	str.w	r3, [r5], #4
 800ba7c:	e7e9      	b.n	800ba52 <__mdiff+0x8a>
 800ba7e:	3e01      	subs	r6, #1
 800ba80:	e7e9      	b.n	800ba56 <__mdiff+0x8e>

0800ba82 <__d2b>:
 800ba82:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba86:	460e      	mov	r6, r1
 800ba88:	2101      	movs	r1, #1
 800ba8a:	ec59 8b10 	vmov	r8, r9, d0
 800ba8e:	4615      	mov	r5, r2
 800ba90:	f7ff fd6a 	bl	800b568 <_Balloc>
 800ba94:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ba98:	4607      	mov	r7, r0
 800ba9a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba9e:	bb34      	cbnz	r4, 800baee <__d2b+0x6c>
 800baa0:	9301      	str	r3, [sp, #4]
 800baa2:	f1b8 0300 	subs.w	r3, r8, #0
 800baa6:	d027      	beq.n	800baf8 <__d2b+0x76>
 800baa8:	a802      	add	r0, sp, #8
 800baaa:	f840 3d08 	str.w	r3, [r0, #-8]!
 800baae:	f7ff fe00 	bl	800b6b2 <__lo0bits>
 800bab2:	9900      	ldr	r1, [sp, #0]
 800bab4:	b1f0      	cbz	r0, 800baf4 <__d2b+0x72>
 800bab6:	9a01      	ldr	r2, [sp, #4]
 800bab8:	f1c0 0320 	rsb	r3, r0, #32
 800babc:	fa02 f303 	lsl.w	r3, r2, r3
 800bac0:	430b      	orrs	r3, r1
 800bac2:	40c2      	lsrs	r2, r0
 800bac4:	617b      	str	r3, [r7, #20]
 800bac6:	9201      	str	r2, [sp, #4]
 800bac8:	9b01      	ldr	r3, [sp, #4]
 800baca:	61bb      	str	r3, [r7, #24]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	bf14      	ite	ne
 800bad0:	2102      	movne	r1, #2
 800bad2:	2101      	moveq	r1, #1
 800bad4:	6139      	str	r1, [r7, #16]
 800bad6:	b1c4      	cbz	r4, 800bb0a <__d2b+0x88>
 800bad8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800badc:	4404      	add	r4, r0
 800bade:	6034      	str	r4, [r6, #0]
 800bae0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bae4:	6028      	str	r0, [r5, #0]
 800bae6:	4638      	mov	r0, r7
 800bae8:	b003      	add	sp, #12
 800baea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800baee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800baf2:	e7d5      	b.n	800baa0 <__d2b+0x1e>
 800baf4:	6179      	str	r1, [r7, #20]
 800baf6:	e7e7      	b.n	800bac8 <__d2b+0x46>
 800baf8:	a801      	add	r0, sp, #4
 800bafa:	f7ff fdda 	bl	800b6b2 <__lo0bits>
 800bafe:	9b01      	ldr	r3, [sp, #4]
 800bb00:	617b      	str	r3, [r7, #20]
 800bb02:	2101      	movs	r1, #1
 800bb04:	6139      	str	r1, [r7, #16]
 800bb06:	3020      	adds	r0, #32
 800bb08:	e7e5      	b.n	800bad6 <__d2b+0x54>
 800bb0a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800bb0e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bb12:	6030      	str	r0, [r6, #0]
 800bb14:	6918      	ldr	r0, [r3, #16]
 800bb16:	f7ff fdad 	bl	800b674 <__hi0bits>
 800bb1a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800bb1e:	e7e1      	b.n	800bae4 <__d2b+0x62>

0800bb20 <_calloc_r>:
 800bb20:	b538      	push	{r3, r4, r5, lr}
 800bb22:	fb02 f401 	mul.w	r4, r2, r1
 800bb26:	4621      	mov	r1, r4
 800bb28:	f000 f856 	bl	800bbd8 <_malloc_r>
 800bb2c:	4605      	mov	r5, r0
 800bb2e:	b118      	cbz	r0, 800bb38 <_calloc_r+0x18>
 800bb30:	4622      	mov	r2, r4
 800bb32:	2100      	movs	r1, #0
 800bb34:	f7fd fe87 	bl	8009846 <memset>
 800bb38:	4628      	mov	r0, r5
 800bb3a:	bd38      	pop	{r3, r4, r5, pc}

0800bb3c <_free_r>:
 800bb3c:	b538      	push	{r3, r4, r5, lr}
 800bb3e:	4605      	mov	r5, r0
 800bb40:	2900      	cmp	r1, #0
 800bb42:	d045      	beq.n	800bbd0 <_free_r+0x94>
 800bb44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb48:	1f0c      	subs	r4, r1, #4
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	bfb8      	it	lt
 800bb4e:	18e4      	addlt	r4, r4, r3
 800bb50:	f000 fa98 	bl	800c084 <__malloc_lock>
 800bb54:	4a1f      	ldr	r2, [pc, #124]	; (800bbd4 <_free_r+0x98>)
 800bb56:	6813      	ldr	r3, [r2, #0]
 800bb58:	4610      	mov	r0, r2
 800bb5a:	b933      	cbnz	r3, 800bb6a <_free_r+0x2e>
 800bb5c:	6063      	str	r3, [r4, #4]
 800bb5e:	6014      	str	r4, [r2, #0]
 800bb60:	4628      	mov	r0, r5
 800bb62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb66:	f000 ba8e 	b.w	800c086 <__malloc_unlock>
 800bb6a:	42a3      	cmp	r3, r4
 800bb6c:	d90c      	bls.n	800bb88 <_free_r+0x4c>
 800bb6e:	6821      	ldr	r1, [r4, #0]
 800bb70:	1862      	adds	r2, r4, r1
 800bb72:	4293      	cmp	r3, r2
 800bb74:	bf04      	itt	eq
 800bb76:	681a      	ldreq	r2, [r3, #0]
 800bb78:	685b      	ldreq	r3, [r3, #4]
 800bb7a:	6063      	str	r3, [r4, #4]
 800bb7c:	bf04      	itt	eq
 800bb7e:	1852      	addeq	r2, r2, r1
 800bb80:	6022      	streq	r2, [r4, #0]
 800bb82:	6004      	str	r4, [r0, #0]
 800bb84:	e7ec      	b.n	800bb60 <_free_r+0x24>
 800bb86:	4613      	mov	r3, r2
 800bb88:	685a      	ldr	r2, [r3, #4]
 800bb8a:	b10a      	cbz	r2, 800bb90 <_free_r+0x54>
 800bb8c:	42a2      	cmp	r2, r4
 800bb8e:	d9fa      	bls.n	800bb86 <_free_r+0x4a>
 800bb90:	6819      	ldr	r1, [r3, #0]
 800bb92:	1858      	adds	r0, r3, r1
 800bb94:	42a0      	cmp	r0, r4
 800bb96:	d10b      	bne.n	800bbb0 <_free_r+0x74>
 800bb98:	6820      	ldr	r0, [r4, #0]
 800bb9a:	4401      	add	r1, r0
 800bb9c:	1858      	adds	r0, r3, r1
 800bb9e:	4282      	cmp	r2, r0
 800bba0:	6019      	str	r1, [r3, #0]
 800bba2:	d1dd      	bne.n	800bb60 <_free_r+0x24>
 800bba4:	6810      	ldr	r0, [r2, #0]
 800bba6:	6852      	ldr	r2, [r2, #4]
 800bba8:	605a      	str	r2, [r3, #4]
 800bbaa:	4401      	add	r1, r0
 800bbac:	6019      	str	r1, [r3, #0]
 800bbae:	e7d7      	b.n	800bb60 <_free_r+0x24>
 800bbb0:	d902      	bls.n	800bbb8 <_free_r+0x7c>
 800bbb2:	230c      	movs	r3, #12
 800bbb4:	602b      	str	r3, [r5, #0]
 800bbb6:	e7d3      	b.n	800bb60 <_free_r+0x24>
 800bbb8:	6820      	ldr	r0, [r4, #0]
 800bbba:	1821      	adds	r1, r4, r0
 800bbbc:	428a      	cmp	r2, r1
 800bbbe:	bf04      	itt	eq
 800bbc0:	6811      	ldreq	r1, [r2, #0]
 800bbc2:	6852      	ldreq	r2, [r2, #4]
 800bbc4:	6062      	str	r2, [r4, #4]
 800bbc6:	bf04      	itt	eq
 800bbc8:	1809      	addeq	r1, r1, r0
 800bbca:	6021      	streq	r1, [r4, #0]
 800bbcc:	605c      	str	r4, [r3, #4]
 800bbce:	e7c7      	b.n	800bb60 <_free_r+0x24>
 800bbd0:	bd38      	pop	{r3, r4, r5, pc}
 800bbd2:	bf00      	nop
 800bbd4:	2000029c 	.word	0x2000029c

0800bbd8 <_malloc_r>:
 800bbd8:	b570      	push	{r4, r5, r6, lr}
 800bbda:	1ccd      	adds	r5, r1, #3
 800bbdc:	f025 0503 	bic.w	r5, r5, #3
 800bbe0:	3508      	adds	r5, #8
 800bbe2:	2d0c      	cmp	r5, #12
 800bbe4:	bf38      	it	cc
 800bbe6:	250c      	movcc	r5, #12
 800bbe8:	2d00      	cmp	r5, #0
 800bbea:	4606      	mov	r6, r0
 800bbec:	db01      	blt.n	800bbf2 <_malloc_r+0x1a>
 800bbee:	42a9      	cmp	r1, r5
 800bbf0:	d903      	bls.n	800bbfa <_malloc_r+0x22>
 800bbf2:	230c      	movs	r3, #12
 800bbf4:	6033      	str	r3, [r6, #0]
 800bbf6:	2000      	movs	r0, #0
 800bbf8:	bd70      	pop	{r4, r5, r6, pc}
 800bbfa:	f000 fa43 	bl	800c084 <__malloc_lock>
 800bbfe:	4a21      	ldr	r2, [pc, #132]	; (800bc84 <_malloc_r+0xac>)
 800bc00:	6814      	ldr	r4, [r2, #0]
 800bc02:	4621      	mov	r1, r4
 800bc04:	b991      	cbnz	r1, 800bc2c <_malloc_r+0x54>
 800bc06:	4c20      	ldr	r4, [pc, #128]	; (800bc88 <_malloc_r+0xb0>)
 800bc08:	6823      	ldr	r3, [r4, #0]
 800bc0a:	b91b      	cbnz	r3, 800bc14 <_malloc_r+0x3c>
 800bc0c:	4630      	mov	r0, r6
 800bc0e:	f000 f97d 	bl	800bf0c <_sbrk_r>
 800bc12:	6020      	str	r0, [r4, #0]
 800bc14:	4629      	mov	r1, r5
 800bc16:	4630      	mov	r0, r6
 800bc18:	f000 f978 	bl	800bf0c <_sbrk_r>
 800bc1c:	1c43      	adds	r3, r0, #1
 800bc1e:	d124      	bne.n	800bc6a <_malloc_r+0x92>
 800bc20:	230c      	movs	r3, #12
 800bc22:	6033      	str	r3, [r6, #0]
 800bc24:	4630      	mov	r0, r6
 800bc26:	f000 fa2e 	bl	800c086 <__malloc_unlock>
 800bc2a:	e7e4      	b.n	800bbf6 <_malloc_r+0x1e>
 800bc2c:	680b      	ldr	r3, [r1, #0]
 800bc2e:	1b5b      	subs	r3, r3, r5
 800bc30:	d418      	bmi.n	800bc64 <_malloc_r+0x8c>
 800bc32:	2b0b      	cmp	r3, #11
 800bc34:	d90f      	bls.n	800bc56 <_malloc_r+0x7e>
 800bc36:	600b      	str	r3, [r1, #0]
 800bc38:	50cd      	str	r5, [r1, r3]
 800bc3a:	18cc      	adds	r4, r1, r3
 800bc3c:	4630      	mov	r0, r6
 800bc3e:	f000 fa22 	bl	800c086 <__malloc_unlock>
 800bc42:	f104 000b 	add.w	r0, r4, #11
 800bc46:	1d23      	adds	r3, r4, #4
 800bc48:	f020 0007 	bic.w	r0, r0, #7
 800bc4c:	1ac3      	subs	r3, r0, r3
 800bc4e:	d0d3      	beq.n	800bbf8 <_malloc_r+0x20>
 800bc50:	425a      	negs	r2, r3
 800bc52:	50e2      	str	r2, [r4, r3]
 800bc54:	e7d0      	b.n	800bbf8 <_malloc_r+0x20>
 800bc56:	428c      	cmp	r4, r1
 800bc58:	684b      	ldr	r3, [r1, #4]
 800bc5a:	bf16      	itet	ne
 800bc5c:	6063      	strne	r3, [r4, #4]
 800bc5e:	6013      	streq	r3, [r2, #0]
 800bc60:	460c      	movne	r4, r1
 800bc62:	e7eb      	b.n	800bc3c <_malloc_r+0x64>
 800bc64:	460c      	mov	r4, r1
 800bc66:	6849      	ldr	r1, [r1, #4]
 800bc68:	e7cc      	b.n	800bc04 <_malloc_r+0x2c>
 800bc6a:	1cc4      	adds	r4, r0, #3
 800bc6c:	f024 0403 	bic.w	r4, r4, #3
 800bc70:	42a0      	cmp	r0, r4
 800bc72:	d005      	beq.n	800bc80 <_malloc_r+0xa8>
 800bc74:	1a21      	subs	r1, r4, r0
 800bc76:	4630      	mov	r0, r6
 800bc78:	f000 f948 	bl	800bf0c <_sbrk_r>
 800bc7c:	3001      	adds	r0, #1
 800bc7e:	d0cf      	beq.n	800bc20 <_malloc_r+0x48>
 800bc80:	6025      	str	r5, [r4, #0]
 800bc82:	e7db      	b.n	800bc3c <_malloc_r+0x64>
 800bc84:	2000029c 	.word	0x2000029c
 800bc88:	200002a0 	.word	0x200002a0

0800bc8c <__sfputc_r>:
 800bc8c:	6893      	ldr	r3, [r2, #8]
 800bc8e:	3b01      	subs	r3, #1
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	b410      	push	{r4}
 800bc94:	6093      	str	r3, [r2, #8]
 800bc96:	da08      	bge.n	800bcaa <__sfputc_r+0x1e>
 800bc98:	6994      	ldr	r4, [r2, #24]
 800bc9a:	42a3      	cmp	r3, r4
 800bc9c:	db01      	blt.n	800bca2 <__sfputc_r+0x16>
 800bc9e:	290a      	cmp	r1, #10
 800bca0:	d103      	bne.n	800bcaa <__sfputc_r+0x1e>
 800bca2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bca6:	f7fe bb65 	b.w	800a374 <__swbuf_r>
 800bcaa:	6813      	ldr	r3, [r2, #0]
 800bcac:	1c58      	adds	r0, r3, #1
 800bcae:	6010      	str	r0, [r2, #0]
 800bcb0:	7019      	strb	r1, [r3, #0]
 800bcb2:	4608      	mov	r0, r1
 800bcb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcb8:	4770      	bx	lr

0800bcba <__sfputs_r>:
 800bcba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcbc:	4606      	mov	r6, r0
 800bcbe:	460f      	mov	r7, r1
 800bcc0:	4614      	mov	r4, r2
 800bcc2:	18d5      	adds	r5, r2, r3
 800bcc4:	42ac      	cmp	r4, r5
 800bcc6:	d101      	bne.n	800bccc <__sfputs_r+0x12>
 800bcc8:	2000      	movs	r0, #0
 800bcca:	e007      	b.n	800bcdc <__sfputs_r+0x22>
 800bccc:	463a      	mov	r2, r7
 800bcce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcd2:	4630      	mov	r0, r6
 800bcd4:	f7ff ffda 	bl	800bc8c <__sfputc_r>
 800bcd8:	1c43      	adds	r3, r0, #1
 800bcda:	d1f3      	bne.n	800bcc4 <__sfputs_r+0xa>
 800bcdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bce0 <_vfiprintf_r>:
 800bce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bce4:	460c      	mov	r4, r1
 800bce6:	b09d      	sub	sp, #116	; 0x74
 800bce8:	4617      	mov	r7, r2
 800bcea:	461d      	mov	r5, r3
 800bcec:	4606      	mov	r6, r0
 800bcee:	b118      	cbz	r0, 800bcf8 <_vfiprintf_r+0x18>
 800bcf0:	6983      	ldr	r3, [r0, #24]
 800bcf2:	b90b      	cbnz	r3, 800bcf8 <_vfiprintf_r+0x18>
 800bcf4:	f7ff fb34 	bl	800b360 <__sinit>
 800bcf8:	4b7c      	ldr	r3, [pc, #496]	; (800beec <_vfiprintf_r+0x20c>)
 800bcfa:	429c      	cmp	r4, r3
 800bcfc:	d158      	bne.n	800bdb0 <_vfiprintf_r+0xd0>
 800bcfe:	6874      	ldr	r4, [r6, #4]
 800bd00:	89a3      	ldrh	r3, [r4, #12]
 800bd02:	0718      	lsls	r0, r3, #28
 800bd04:	d55e      	bpl.n	800bdc4 <_vfiprintf_r+0xe4>
 800bd06:	6923      	ldr	r3, [r4, #16]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d05b      	beq.n	800bdc4 <_vfiprintf_r+0xe4>
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	9309      	str	r3, [sp, #36]	; 0x24
 800bd10:	2320      	movs	r3, #32
 800bd12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd16:	2330      	movs	r3, #48	; 0x30
 800bd18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd1c:	9503      	str	r5, [sp, #12]
 800bd1e:	f04f 0b01 	mov.w	fp, #1
 800bd22:	46b8      	mov	r8, r7
 800bd24:	4645      	mov	r5, r8
 800bd26:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bd2a:	b10b      	cbz	r3, 800bd30 <_vfiprintf_r+0x50>
 800bd2c:	2b25      	cmp	r3, #37	; 0x25
 800bd2e:	d154      	bne.n	800bdda <_vfiprintf_r+0xfa>
 800bd30:	ebb8 0a07 	subs.w	sl, r8, r7
 800bd34:	d00b      	beq.n	800bd4e <_vfiprintf_r+0x6e>
 800bd36:	4653      	mov	r3, sl
 800bd38:	463a      	mov	r2, r7
 800bd3a:	4621      	mov	r1, r4
 800bd3c:	4630      	mov	r0, r6
 800bd3e:	f7ff ffbc 	bl	800bcba <__sfputs_r>
 800bd42:	3001      	adds	r0, #1
 800bd44:	f000 80c2 	beq.w	800becc <_vfiprintf_r+0x1ec>
 800bd48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd4a:	4453      	add	r3, sl
 800bd4c:	9309      	str	r3, [sp, #36]	; 0x24
 800bd4e:	f898 3000 	ldrb.w	r3, [r8]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	f000 80ba 	beq.w	800becc <_vfiprintf_r+0x1ec>
 800bd58:	2300      	movs	r3, #0
 800bd5a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd62:	9304      	str	r3, [sp, #16]
 800bd64:	9307      	str	r3, [sp, #28]
 800bd66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd6a:	931a      	str	r3, [sp, #104]	; 0x68
 800bd6c:	46a8      	mov	r8, r5
 800bd6e:	2205      	movs	r2, #5
 800bd70:	f818 1b01 	ldrb.w	r1, [r8], #1
 800bd74:	485e      	ldr	r0, [pc, #376]	; (800bef0 <_vfiprintf_r+0x210>)
 800bd76:	f7f4 fa43 	bl	8000200 <memchr>
 800bd7a:	9b04      	ldr	r3, [sp, #16]
 800bd7c:	bb78      	cbnz	r0, 800bdde <_vfiprintf_r+0xfe>
 800bd7e:	06d9      	lsls	r1, r3, #27
 800bd80:	bf44      	itt	mi
 800bd82:	2220      	movmi	r2, #32
 800bd84:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bd88:	071a      	lsls	r2, r3, #28
 800bd8a:	bf44      	itt	mi
 800bd8c:	222b      	movmi	r2, #43	; 0x2b
 800bd8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bd92:	782a      	ldrb	r2, [r5, #0]
 800bd94:	2a2a      	cmp	r2, #42	; 0x2a
 800bd96:	d02a      	beq.n	800bdee <_vfiprintf_r+0x10e>
 800bd98:	9a07      	ldr	r2, [sp, #28]
 800bd9a:	46a8      	mov	r8, r5
 800bd9c:	2000      	movs	r0, #0
 800bd9e:	250a      	movs	r5, #10
 800bda0:	4641      	mov	r1, r8
 800bda2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bda6:	3b30      	subs	r3, #48	; 0x30
 800bda8:	2b09      	cmp	r3, #9
 800bdaa:	d969      	bls.n	800be80 <_vfiprintf_r+0x1a0>
 800bdac:	b360      	cbz	r0, 800be08 <_vfiprintf_r+0x128>
 800bdae:	e024      	b.n	800bdfa <_vfiprintf_r+0x11a>
 800bdb0:	4b50      	ldr	r3, [pc, #320]	; (800bef4 <_vfiprintf_r+0x214>)
 800bdb2:	429c      	cmp	r4, r3
 800bdb4:	d101      	bne.n	800bdba <_vfiprintf_r+0xda>
 800bdb6:	68b4      	ldr	r4, [r6, #8]
 800bdb8:	e7a2      	b.n	800bd00 <_vfiprintf_r+0x20>
 800bdba:	4b4f      	ldr	r3, [pc, #316]	; (800bef8 <_vfiprintf_r+0x218>)
 800bdbc:	429c      	cmp	r4, r3
 800bdbe:	bf08      	it	eq
 800bdc0:	68f4      	ldreq	r4, [r6, #12]
 800bdc2:	e79d      	b.n	800bd00 <_vfiprintf_r+0x20>
 800bdc4:	4621      	mov	r1, r4
 800bdc6:	4630      	mov	r0, r6
 800bdc8:	f7fe fb26 	bl	800a418 <__swsetup_r>
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	d09d      	beq.n	800bd0c <_vfiprintf_r+0x2c>
 800bdd0:	f04f 30ff 	mov.w	r0, #4294967295
 800bdd4:	b01d      	add	sp, #116	; 0x74
 800bdd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdda:	46a8      	mov	r8, r5
 800bddc:	e7a2      	b.n	800bd24 <_vfiprintf_r+0x44>
 800bdde:	4a44      	ldr	r2, [pc, #272]	; (800bef0 <_vfiprintf_r+0x210>)
 800bde0:	1a80      	subs	r0, r0, r2
 800bde2:	fa0b f000 	lsl.w	r0, fp, r0
 800bde6:	4318      	orrs	r0, r3
 800bde8:	9004      	str	r0, [sp, #16]
 800bdea:	4645      	mov	r5, r8
 800bdec:	e7be      	b.n	800bd6c <_vfiprintf_r+0x8c>
 800bdee:	9a03      	ldr	r2, [sp, #12]
 800bdf0:	1d11      	adds	r1, r2, #4
 800bdf2:	6812      	ldr	r2, [r2, #0]
 800bdf4:	9103      	str	r1, [sp, #12]
 800bdf6:	2a00      	cmp	r2, #0
 800bdf8:	db01      	blt.n	800bdfe <_vfiprintf_r+0x11e>
 800bdfa:	9207      	str	r2, [sp, #28]
 800bdfc:	e004      	b.n	800be08 <_vfiprintf_r+0x128>
 800bdfe:	4252      	negs	r2, r2
 800be00:	f043 0302 	orr.w	r3, r3, #2
 800be04:	9207      	str	r2, [sp, #28]
 800be06:	9304      	str	r3, [sp, #16]
 800be08:	f898 3000 	ldrb.w	r3, [r8]
 800be0c:	2b2e      	cmp	r3, #46	; 0x2e
 800be0e:	d10e      	bne.n	800be2e <_vfiprintf_r+0x14e>
 800be10:	f898 3001 	ldrb.w	r3, [r8, #1]
 800be14:	2b2a      	cmp	r3, #42	; 0x2a
 800be16:	d138      	bne.n	800be8a <_vfiprintf_r+0x1aa>
 800be18:	9b03      	ldr	r3, [sp, #12]
 800be1a:	1d1a      	adds	r2, r3, #4
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	9203      	str	r2, [sp, #12]
 800be20:	2b00      	cmp	r3, #0
 800be22:	bfb8      	it	lt
 800be24:	f04f 33ff 	movlt.w	r3, #4294967295
 800be28:	f108 0802 	add.w	r8, r8, #2
 800be2c:	9305      	str	r3, [sp, #20]
 800be2e:	4d33      	ldr	r5, [pc, #204]	; (800befc <_vfiprintf_r+0x21c>)
 800be30:	f898 1000 	ldrb.w	r1, [r8]
 800be34:	2203      	movs	r2, #3
 800be36:	4628      	mov	r0, r5
 800be38:	f7f4 f9e2 	bl	8000200 <memchr>
 800be3c:	b140      	cbz	r0, 800be50 <_vfiprintf_r+0x170>
 800be3e:	2340      	movs	r3, #64	; 0x40
 800be40:	1b40      	subs	r0, r0, r5
 800be42:	fa03 f000 	lsl.w	r0, r3, r0
 800be46:	9b04      	ldr	r3, [sp, #16]
 800be48:	4303      	orrs	r3, r0
 800be4a:	f108 0801 	add.w	r8, r8, #1
 800be4e:	9304      	str	r3, [sp, #16]
 800be50:	f898 1000 	ldrb.w	r1, [r8]
 800be54:	482a      	ldr	r0, [pc, #168]	; (800bf00 <_vfiprintf_r+0x220>)
 800be56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be5a:	2206      	movs	r2, #6
 800be5c:	f108 0701 	add.w	r7, r8, #1
 800be60:	f7f4 f9ce 	bl	8000200 <memchr>
 800be64:	2800      	cmp	r0, #0
 800be66:	d037      	beq.n	800bed8 <_vfiprintf_r+0x1f8>
 800be68:	4b26      	ldr	r3, [pc, #152]	; (800bf04 <_vfiprintf_r+0x224>)
 800be6a:	bb1b      	cbnz	r3, 800beb4 <_vfiprintf_r+0x1d4>
 800be6c:	9b03      	ldr	r3, [sp, #12]
 800be6e:	3307      	adds	r3, #7
 800be70:	f023 0307 	bic.w	r3, r3, #7
 800be74:	3308      	adds	r3, #8
 800be76:	9303      	str	r3, [sp, #12]
 800be78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be7a:	444b      	add	r3, r9
 800be7c:	9309      	str	r3, [sp, #36]	; 0x24
 800be7e:	e750      	b.n	800bd22 <_vfiprintf_r+0x42>
 800be80:	fb05 3202 	mla	r2, r5, r2, r3
 800be84:	2001      	movs	r0, #1
 800be86:	4688      	mov	r8, r1
 800be88:	e78a      	b.n	800bda0 <_vfiprintf_r+0xc0>
 800be8a:	2300      	movs	r3, #0
 800be8c:	f108 0801 	add.w	r8, r8, #1
 800be90:	9305      	str	r3, [sp, #20]
 800be92:	4619      	mov	r1, r3
 800be94:	250a      	movs	r5, #10
 800be96:	4640      	mov	r0, r8
 800be98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be9c:	3a30      	subs	r2, #48	; 0x30
 800be9e:	2a09      	cmp	r2, #9
 800bea0:	d903      	bls.n	800beaa <_vfiprintf_r+0x1ca>
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d0c3      	beq.n	800be2e <_vfiprintf_r+0x14e>
 800bea6:	9105      	str	r1, [sp, #20]
 800bea8:	e7c1      	b.n	800be2e <_vfiprintf_r+0x14e>
 800beaa:	fb05 2101 	mla	r1, r5, r1, r2
 800beae:	2301      	movs	r3, #1
 800beb0:	4680      	mov	r8, r0
 800beb2:	e7f0      	b.n	800be96 <_vfiprintf_r+0x1b6>
 800beb4:	ab03      	add	r3, sp, #12
 800beb6:	9300      	str	r3, [sp, #0]
 800beb8:	4622      	mov	r2, r4
 800beba:	4b13      	ldr	r3, [pc, #76]	; (800bf08 <_vfiprintf_r+0x228>)
 800bebc:	a904      	add	r1, sp, #16
 800bebe:	4630      	mov	r0, r6
 800bec0:	f7fd fd5e 	bl	8009980 <_printf_float>
 800bec4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bec8:	4681      	mov	r9, r0
 800beca:	d1d5      	bne.n	800be78 <_vfiprintf_r+0x198>
 800becc:	89a3      	ldrh	r3, [r4, #12]
 800bece:	065b      	lsls	r3, r3, #25
 800bed0:	f53f af7e 	bmi.w	800bdd0 <_vfiprintf_r+0xf0>
 800bed4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bed6:	e77d      	b.n	800bdd4 <_vfiprintf_r+0xf4>
 800bed8:	ab03      	add	r3, sp, #12
 800beda:	9300      	str	r3, [sp, #0]
 800bedc:	4622      	mov	r2, r4
 800bede:	4b0a      	ldr	r3, [pc, #40]	; (800bf08 <_vfiprintf_r+0x228>)
 800bee0:	a904      	add	r1, sp, #16
 800bee2:	4630      	mov	r0, r6
 800bee4:	f7fe f802 	bl	8009eec <_printf_i>
 800bee8:	e7ec      	b.n	800bec4 <_vfiprintf_r+0x1e4>
 800beea:	bf00      	nop
 800beec:	0800cdb4 	.word	0x0800cdb4
 800bef0:	0800cef4 	.word	0x0800cef4
 800bef4:	0800cdd4 	.word	0x0800cdd4
 800bef8:	0800cd94 	.word	0x0800cd94
 800befc:	0800cefa 	.word	0x0800cefa
 800bf00:	0800cefe 	.word	0x0800cefe
 800bf04:	08009981 	.word	0x08009981
 800bf08:	0800bcbb 	.word	0x0800bcbb

0800bf0c <_sbrk_r>:
 800bf0c:	b538      	push	{r3, r4, r5, lr}
 800bf0e:	4c06      	ldr	r4, [pc, #24]	; (800bf28 <_sbrk_r+0x1c>)
 800bf10:	2300      	movs	r3, #0
 800bf12:	4605      	mov	r5, r0
 800bf14:	4608      	mov	r0, r1
 800bf16:	6023      	str	r3, [r4, #0]
 800bf18:	f7fc feee 	bl	8008cf8 <_sbrk>
 800bf1c:	1c43      	adds	r3, r0, #1
 800bf1e:	d102      	bne.n	800bf26 <_sbrk_r+0x1a>
 800bf20:	6823      	ldr	r3, [r4, #0]
 800bf22:	b103      	cbz	r3, 800bf26 <_sbrk_r+0x1a>
 800bf24:	602b      	str	r3, [r5, #0]
 800bf26:	bd38      	pop	{r3, r4, r5, pc}
 800bf28:	200008b8 	.word	0x200008b8

0800bf2c <__sread>:
 800bf2c:	b510      	push	{r4, lr}
 800bf2e:	460c      	mov	r4, r1
 800bf30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf34:	f000 f8a8 	bl	800c088 <_read_r>
 800bf38:	2800      	cmp	r0, #0
 800bf3a:	bfab      	itete	ge
 800bf3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bf3e:	89a3      	ldrhlt	r3, [r4, #12]
 800bf40:	181b      	addge	r3, r3, r0
 800bf42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bf46:	bfac      	ite	ge
 800bf48:	6563      	strge	r3, [r4, #84]	; 0x54
 800bf4a:	81a3      	strhlt	r3, [r4, #12]
 800bf4c:	bd10      	pop	{r4, pc}

0800bf4e <__swrite>:
 800bf4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf52:	461f      	mov	r7, r3
 800bf54:	898b      	ldrh	r3, [r1, #12]
 800bf56:	05db      	lsls	r3, r3, #23
 800bf58:	4605      	mov	r5, r0
 800bf5a:	460c      	mov	r4, r1
 800bf5c:	4616      	mov	r6, r2
 800bf5e:	d505      	bpl.n	800bf6c <__swrite+0x1e>
 800bf60:	2302      	movs	r3, #2
 800bf62:	2200      	movs	r2, #0
 800bf64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf68:	f000 f868 	bl	800c03c <_lseek_r>
 800bf6c:	89a3      	ldrh	r3, [r4, #12]
 800bf6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf76:	81a3      	strh	r3, [r4, #12]
 800bf78:	4632      	mov	r2, r6
 800bf7a:	463b      	mov	r3, r7
 800bf7c:	4628      	mov	r0, r5
 800bf7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf82:	f000 b817 	b.w	800bfb4 <_write_r>

0800bf86 <__sseek>:
 800bf86:	b510      	push	{r4, lr}
 800bf88:	460c      	mov	r4, r1
 800bf8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf8e:	f000 f855 	bl	800c03c <_lseek_r>
 800bf92:	1c43      	adds	r3, r0, #1
 800bf94:	89a3      	ldrh	r3, [r4, #12]
 800bf96:	bf15      	itete	ne
 800bf98:	6560      	strne	r0, [r4, #84]	; 0x54
 800bf9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bf9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bfa2:	81a3      	strheq	r3, [r4, #12]
 800bfa4:	bf18      	it	ne
 800bfa6:	81a3      	strhne	r3, [r4, #12]
 800bfa8:	bd10      	pop	{r4, pc}

0800bfaa <__sclose>:
 800bfaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfae:	f000 b813 	b.w	800bfd8 <_close_r>
	...

0800bfb4 <_write_r>:
 800bfb4:	b538      	push	{r3, r4, r5, lr}
 800bfb6:	4c07      	ldr	r4, [pc, #28]	; (800bfd4 <_write_r+0x20>)
 800bfb8:	4605      	mov	r5, r0
 800bfba:	4608      	mov	r0, r1
 800bfbc:	4611      	mov	r1, r2
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	6022      	str	r2, [r4, #0]
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	f7fc fe47 	bl	8008c56 <_write>
 800bfc8:	1c43      	adds	r3, r0, #1
 800bfca:	d102      	bne.n	800bfd2 <_write_r+0x1e>
 800bfcc:	6823      	ldr	r3, [r4, #0]
 800bfce:	b103      	cbz	r3, 800bfd2 <_write_r+0x1e>
 800bfd0:	602b      	str	r3, [r5, #0]
 800bfd2:	bd38      	pop	{r3, r4, r5, pc}
 800bfd4:	200008b8 	.word	0x200008b8

0800bfd8 <_close_r>:
 800bfd8:	b538      	push	{r3, r4, r5, lr}
 800bfda:	4c06      	ldr	r4, [pc, #24]	; (800bff4 <_close_r+0x1c>)
 800bfdc:	2300      	movs	r3, #0
 800bfde:	4605      	mov	r5, r0
 800bfe0:	4608      	mov	r0, r1
 800bfe2:	6023      	str	r3, [r4, #0]
 800bfe4:	f7fc fe53 	bl	8008c8e <_close>
 800bfe8:	1c43      	adds	r3, r0, #1
 800bfea:	d102      	bne.n	800bff2 <_close_r+0x1a>
 800bfec:	6823      	ldr	r3, [r4, #0]
 800bfee:	b103      	cbz	r3, 800bff2 <_close_r+0x1a>
 800bff0:	602b      	str	r3, [r5, #0]
 800bff2:	bd38      	pop	{r3, r4, r5, pc}
 800bff4:	200008b8 	.word	0x200008b8

0800bff8 <_fstat_r>:
 800bff8:	b538      	push	{r3, r4, r5, lr}
 800bffa:	4c07      	ldr	r4, [pc, #28]	; (800c018 <_fstat_r+0x20>)
 800bffc:	2300      	movs	r3, #0
 800bffe:	4605      	mov	r5, r0
 800c000:	4608      	mov	r0, r1
 800c002:	4611      	mov	r1, r2
 800c004:	6023      	str	r3, [r4, #0]
 800c006:	f7fc fe4e 	bl	8008ca6 <_fstat>
 800c00a:	1c43      	adds	r3, r0, #1
 800c00c:	d102      	bne.n	800c014 <_fstat_r+0x1c>
 800c00e:	6823      	ldr	r3, [r4, #0]
 800c010:	b103      	cbz	r3, 800c014 <_fstat_r+0x1c>
 800c012:	602b      	str	r3, [r5, #0]
 800c014:	bd38      	pop	{r3, r4, r5, pc}
 800c016:	bf00      	nop
 800c018:	200008b8 	.word	0x200008b8

0800c01c <_isatty_r>:
 800c01c:	b538      	push	{r3, r4, r5, lr}
 800c01e:	4c06      	ldr	r4, [pc, #24]	; (800c038 <_isatty_r+0x1c>)
 800c020:	2300      	movs	r3, #0
 800c022:	4605      	mov	r5, r0
 800c024:	4608      	mov	r0, r1
 800c026:	6023      	str	r3, [r4, #0]
 800c028:	f7fc fe4d 	bl	8008cc6 <_isatty>
 800c02c:	1c43      	adds	r3, r0, #1
 800c02e:	d102      	bne.n	800c036 <_isatty_r+0x1a>
 800c030:	6823      	ldr	r3, [r4, #0]
 800c032:	b103      	cbz	r3, 800c036 <_isatty_r+0x1a>
 800c034:	602b      	str	r3, [r5, #0]
 800c036:	bd38      	pop	{r3, r4, r5, pc}
 800c038:	200008b8 	.word	0x200008b8

0800c03c <_lseek_r>:
 800c03c:	b538      	push	{r3, r4, r5, lr}
 800c03e:	4c07      	ldr	r4, [pc, #28]	; (800c05c <_lseek_r+0x20>)
 800c040:	4605      	mov	r5, r0
 800c042:	4608      	mov	r0, r1
 800c044:	4611      	mov	r1, r2
 800c046:	2200      	movs	r2, #0
 800c048:	6022      	str	r2, [r4, #0]
 800c04a:	461a      	mov	r2, r3
 800c04c:	f7fc fe46 	bl	8008cdc <_lseek>
 800c050:	1c43      	adds	r3, r0, #1
 800c052:	d102      	bne.n	800c05a <_lseek_r+0x1e>
 800c054:	6823      	ldr	r3, [r4, #0]
 800c056:	b103      	cbz	r3, 800c05a <_lseek_r+0x1e>
 800c058:	602b      	str	r3, [r5, #0]
 800c05a:	bd38      	pop	{r3, r4, r5, pc}
 800c05c:	200008b8 	.word	0x200008b8

0800c060 <__ascii_mbtowc>:
 800c060:	b082      	sub	sp, #8
 800c062:	b901      	cbnz	r1, 800c066 <__ascii_mbtowc+0x6>
 800c064:	a901      	add	r1, sp, #4
 800c066:	b142      	cbz	r2, 800c07a <__ascii_mbtowc+0x1a>
 800c068:	b14b      	cbz	r3, 800c07e <__ascii_mbtowc+0x1e>
 800c06a:	7813      	ldrb	r3, [r2, #0]
 800c06c:	600b      	str	r3, [r1, #0]
 800c06e:	7812      	ldrb	r2, [r2, #0]
 800c070:	1c10      	adds	r0, r2, #0
 800c072:	bf18      	it	ne
 800c074:	2001      	movne	r0, #1
 800c076:	b002      	add	sp, #8
 800c078:	4770      	bx	lr
 800c07a:	4610      	mov	r0, r2
 800c07c:	e7fb      	b.n	800c076 <__ascii_mbtowc+0x16>
 800c07e:	f06f 0001 	mvn.w	r0, #1
 800c082:	e7f8      	b.n	800c076 <__ascii_mbtowc+0x16>

0800c084 <__malloc_lock>:
 800c084:	4770      	bx	lr

0800c086 <__malloc_unlock>:
 800c086:	4770      	bx	lr

0800c088 <_read_r>:
 800c088:	b538      	push	{r3, r4, r5, lr}
 800c08a:	4c07      	ldr	r4, [pc, #28]	; (800c0a8 <_read_r+0x20>)
 800c08c:	4605      	mov	r5, r0
 800c08e:	4608      	mov	r0, r1
 800c090:	4611      	mov	r1, r2
 800c092:	2200      	movs	r2, #0
 800c094:	6022      	str	r2, [r4, #0]
 800c096:	461a      	mov	r2, r3
 800c098:	f7fc fdc0 	bl	8008c1c <_read>
 800c09c:	1c43      	adds	r3, r0, #1
 800c09e:	d102      	bne.n	800c0a6 <_read_r+0x1e>
 800c0a0:	6823      	ldr	r3, [r4, #0]
 800c0a2:	b103      	cbz	r3, 800c0a6 <_read_r+0x1e>
 800c0a4:	602b      	str	r3, [r5, #0]
 800c0a6:	bd38      	pop	{r3, r4, r5, pc}
 800c0a8:	200008b8 	.word	0x200008b8

0800c0ac <__ascii_wctomb>:
 800c0ac:	b149      	cbz	r1, 800c0c2 <__ascii_wctomb+0x16>
 800c0ae:	2aff      	cmp	r2, #255	; 0xff
 800c0b0:	bf85      	ittet	hi
 800c0b2:	238a      	movhi	r3, #138	; 0x8a
 800c0b4:	6003      	strhi	r3, [r0, #0]
 800c0b6:	700a      	strbls	r2, [r1, #0]
 800c0b8:	f04f 30ff 	movhi.w	r0, #4294967295
 800c0bc:	bf98      	it	ls
 800c0be:	2001      	movls	r0, #1
 800c0c0:	4770      	bx	lr
 800c0c2:	4608      	mov	r0, r1
 800c0c4:	4770      	bx	lr
	...

0800c0c8 <asin>:
 800c0c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0ca:	ed2d 8b02 	vpush	{d8}
 800c0ce:	4e26      	ldr	r6, [pc, #152]	; (800c168 <asin+0xa0>)
 800c0d0:	b08b      	sub	sp, #44	; 0x2c
 800c0d2:	ec55 4b10 	vmov	r4, r5, d0
 800c0d6:	f000 f8ab 	bl	800c230 <__ieee754_asin>
 800c0da:	f996 3000 	ldrsb.w	r3, [r6]
 800c0de:	eeb0 8a40 	vmov.f32	s16, s0
 800c0e2:	eef0 8a60 	vmov.f32	s17, s1
 800c0e6:	3301      	adds	r3, #1
 800c0e8:	d036      	beq.n	800c158 <asin+0x90>
 800c0ea:	4622      	mov	r2, r4
 800c0ec:	462b      	mov	r3, r5
 800c0ee:	4620      	mov	r0, r4
 800c0f0:	4629      	mov	r1, r5
 800c0f2:	f7f4 fd2b 	bl	8000b4c <__aeabi_dcmpun>
 800c0f6:	4607      	mov	r7, r0
 800c0f8:	bb70      	cbnz	r0, 800c158 <asin+0x90>
 800c0fa:	ec45 4b10 	vmov	d0, r4, r5
 800c0fe:	f000 fdd7 	bl	800ccb0 <fabs>
 800c102:	2200      	movs	r2, #0
 800c104:	4b19      	ldr	r3, [pc, #100]	; (800c16c <asin+0xa4>)
 800c106:	ec51 0b10 	vmov	r0, r1, d0
 800c10a:	f7f4 fd15 	bl	8000b38 <__aeabi_dcmpgt>
 800c10e:	b318      	cbz	r0, 800c158 <asin+0x90>
 800c110:	2301      	movs	r3, #1
 800c112:	9300      	str	r3, [sp, #0]
 800c114:	4816      	ldr	r0, [pc, #88]	; (800c170 <asin+0xa8>)
 800c116:	4b17      	ldr	r3, [pc, #92]	; (800c174 <asin+0xac>)
 800c118:	9301      	str	r3, [sp, #4]
 800c11a:	9708      	str	r7, [sp, #32]
 800c11c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800c120:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c124:	f000 fdd0 	bl	800ccc8 <nan>
 800c128:	f996 3000 	ldrsb.w	r3, [r6]
 800c12c:	2b02      	cmp	r3, #2
 800c12e:	ed8d 0b06 	vstr	d0, [sp, #24]
 800c132:	d104      	bne.n	800c13e <asin+0x76>
 800c134:	f7fd fb52 	bl	80097dc <__errno>
 800c138:	2321      	movs	r3, #33	; 0x21
 800c13a:	6003      	str	r3, [r0, #0]
 800c13c:	e004      	b.n	800c148 <asin+0x80>
 800c13e:	4668      	mov	r0, sp
 800c140:	f000 fdbf 	bl	800ccc2 <matherr>
 800c144:	2800      	cmp	r0, #0
 800c146:	d0f5      	beq.n	800c134 <asin+0x6c>
 800c148:	9b08      	ldr	r3, [sp, #32]
 800c14a:	b11b      	cbz	r3, 800c154 <asin+0x8c>
 800c14c:	f7fd fb46 	bl	80097dc <__errno>
 800c150:	9b08      	ldr	r3, [sp, #32]
 800c152:	6003      	str	r3, [r0, #0]
 800c154:	ed9d 8b06 	vldr	d8, [sp, #24]
 800c158:	eeb0 0a48 	vmov.f32	s0, s16
 800c15c:	eef0 0a68 	vmov.f32	s1, s17
 800c160:	b00b      	add	sp, #44	; 0x2c
 800c162:	ecbd 8b02 	vpop	{d8}
 800c166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c168:	200001f0 	.word	0x200001f0
 800c16c:	3ff00000 	.word	0x3ff00000
 800c170:	0800cef9 	.word	0x0800cef9
 800c174:	0800d010 	.word	0x0800d010

0800c178 <atan2>:
 800c178:	f000 ba6a 	b.w	800c650 <__ieee754_atan2>

0800c17c <sqrt>:
 800c17c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c180:	ed2d 8b02 	vpush	{d8}
 800c184:	b08b      	sub	sp, #44	; 0x2c
 800c186:	ec55 4b10 	vmov	r4, r5, d0
 800c18a:	f000 fb3f 	bl	800c80c <__ieee754_sqrt>
 800c18e:	4b26      	ldr	r3, [pc, #152]	; (800c228 <sqrt+0xac>)
 800c190:	eeb0 8a40 	vmov.f32	s16, s0
 800c194:	eef0 8a60 	vmov.f32	s17, s1
 800c198:	f993 6000 	ldrsb.w	r6, [r3]
 800c19c:	1c73      	adds	r3, r6, #1
 800c19e:	d02a      	beq.n	800c1f6 <sqrt+0x7a>
 800c1a0:	4622      	mov	r2, r4
 800c1a2:	462b      	mov	r3, r5
 800c1a4:	4620      	mov	r0, r4
 800c1a6:	4629      	mov	r1, r5
 800c1a8:	f7f4 fcd0 	bl	8000b4c <__aeabi_dcmpun>
 800c1ac:	4607      	mov	r7, r0
 800c1ae:	bb10      	cbnz	r0, 800c1f6 <sqrt+0x7a>
 800c1b0:	f04f 0800 	mov.w	r8, #0
 800c1b4:	f04f 0900 	mov.w	r9, #0
 800c1b8:	4642      	mov	r2, r8
 800c1ba:	464b      	mov	r3, r9
 800c1bc:	4620      	mov	r0, r4
 800c1be:	4629      	mov	r1, r5
 800c1c0:	f7f4 fc9c 	bl	8000afc <__aeabi_dcmplt>
 800c1c4:	b1b8      	cbz	r0, 800c1f6 <sqrt+0x7a>
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	9300      	str	r3, [sp, #0]
 800c1ca:	4b18      	ldr	r3, [pc, #96]	; (800c22c <sqrt+0xb0>)
 800c1cc:	9301      	str	r3, [sp, #4]
 800c1ce:	9708      	str	r7, [sp, #32]
 800c1d0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800c1d4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c1d8:	b9b6      	cbnz	r6, 800c208 <sqrt+0x8c>
 800c1da:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800c1de:	4668      	mov	r0, sp
 800c1e0:	f000 fd6f 	bl	800ccc2 <matherr>
 800c1e4:	b1d0      	cbz	r0, 800c21c <sqrt+0xa0>
 800c1e6:	9b08      	ldr	r3, [sp, #32]
 800c1e8:	b11b      	cbz	r3, 800c1f2 <sqrt+0x76>
 800c1ea:	f7fd faf7 	bl	80097dc <__errno>
 800c1ee:	9b08      	ldr	r3, [sp, #32]
 800c1f0:	6003      	str	r3, [r0, #0]
 800c1f2:	ed9d 8b06 	vldr	d8, [sp, #24]
 800c1f6:	eeb0 0a48 	vmov.f32	s0, s16
 800c1fa:	eef0 0a68 	vmov.f32	s1, s17
 800c1fe:	b00b      	add	sp, #44	; 0x2c
 800c200:	ecbd 8b02 	vpop	{d8}
 800c204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c208:	4642      	mov	r2, r8
 800c20a:	464b      	mov	r3, r9
 800c20c:	4640      	mov	r0, r8
 800c20e:	4649      	mov	r1, r9
 800c210:	f7f4 fb2c 	bl	800086c <__aeabi_ddiv>
 800c214:	2e02      	cmp	r6, #2
 800c216:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c21a:	d1e0      	bne.n	800c1de <sqrt+0x62>
 800c21c:	f7fd fade 	bl	80097dc <__errno>
 800c220:	2321      	movs	r3, #33	; 0x21
 800c222:	6003      	str	r3, [r0, #0]
 800c224:	e7df      	b.n	800c1e6 <sqrt+0x6a>
 800c226:	bf00      	nop
 800c228:	200001f0 	.word	0x200001f0
 800c22c:	0800d015 	.word	0x0800d015

0800c230 <__ieee754_asin>:
 800c230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c234:	ec55 4b10 	vmov	r4, r5, d0
 800c238:	4bcb      	ldr	r3, [pc, #812]	; (800c568 <__ieee754_asin+0x338>)
 800c23a:	b087      	sub	sp, #28
 800c23c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800c240:	429f      	cmp	r7, r3
 800c242:	9501      	str	r5, [sp, #4]
 800c244:	dd31      	ble.n	800c2aa <__ieee754_asin+0x7a>
 800c246:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 800c24a:	ee10 3a10 	vmov	r3, s0
 800c24e:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 800c252:	433b      	orrs	r3, r7
 800c254:	d117      	bne.n	800c286 <__ieee754_asin+0x56>
 800c256:	a3aa      	add	r3, pc, #680	; (adr r3, 800c500 <__ieee754_asin+0x2d0>)
 800c258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25c:	ee10 0a10 	vmov	r0, s0
 800c260:	4629      	mov	r1, r5
 800c262:	f7f4 f9d9 	bl	8000618 <__aeabi_dmul>
 800c266:	a3a8      	add	r3, pc, #672	; (adr r3, 800c508 <__ieee754_asin+0x2d8>)
 800c268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26c:	4606      	mov	r6, r0
 800c26e:	460f      	mov	r7, r1
 800c270:	4620      	mov	r0, r4
 800c272:	4629      	mov	r1, r5
 800c274:	f7f4 f9d0 	bl	8000618 <__aeabi_dmul>
 800c278:	4602      	mov	r2, r0
 800c27a:	460b      	mov	r3, r1
 800c27c:	4630      	mov	r0, r6
 800c27e:	4639      	mov	r1, r7
 800c280:	f7f4 f814 	bl	80002ac <__adddf3>
 800c284:	e00a      	b.n	800c29c <__ieee754_asin+0x6c>
 800c286:	ee10 2a10 	vmov	r2, s0
 800c28a:	462b      	mov	r3, r5
 800c28c:	4620      	mov	r0, r4
 800c28e:	4629      	mov	r1, r5
 800c290:	f7f4 f80a 	bl	80002a8 <__aeabi_dsub>
 800c294:	4602      	mov	r2, r0
 800c296:	460b      	mov	r3, r1
 800c298:	f7f4 fae8 	bl	800086c <__aeabi_ddiv>
 800c29c:	4604      	mov	r4, r0
 800c29e:	460d      	mov	r5, r1
 800c2a0:	ec45 4b10 	vmov	d0, r4, r5
 800c2a4:	b007      	add	sp, #28
 800c2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2aa:	4bb0      	ldr	r3, [pc, #704]	; (800c56c <__ieee754_asin+0x33c>)
 800c2ac:	429f      	cmp	r7, r3
 800c2ae:	dc11      	bgt.n	800c2d4 <__ieee754_asin+0xa4>
 800c2b0:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800c2b4:	f280 80ae 	bge.w	800c414 <__ieee754_asin+0x1e4>
 800c2b8:	a395      	add	r3, pc, #596	; (adr r3, 800c510 <__ieee754_asin+0x2e0>)
 800c2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2be:	ee10 0a10 	vmov	r0, s0
 800c2c2:	4629      	mov	r1, r5
 800c2c4:	f7f3 fff2 	bl	80002ac <__adddf3>
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	4ba9      	ldr	r3, [pc, #676]	; (800c570 <__ieee754_asin+0x340>)
 800c2cc:	f7f4 fc34 	bl	8000b38 <__aeabi_dcmpgt>
 800c2d0:	2800      	cmp	r0, #0
 800c2d2:	d1e5      	bne.n	800c2a0 <__ieee754_asin+0x70>
 800c2d4:	ec45 4b10 	vmov	d0, r4, r5
 800c2d8:	f000 fcea 	bl	800ccb0 <fabs>
 800c2dc:	2000      	movs	r0, #0
 800c2de:	ec53 2b10 	vmov	r2, r3, d0
 800c2e2:	49a3      	ldr	r1, [pc, #652]	; (800c570 <__ieee754_asin+0x340>)
 800c2e4:	f7f3 ffe0 	bl	80002a8 <__aeabi_dsub>
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	4ba2      	ldr	r3, [pc, #648]	; (800c574 <__ieee754_asin+0x344>)
 800c2ec:	f7f4 f994 	bl	8000618 <__aeabi_dmul>
 800c2f0:	a389      	add	r3, pc, #548	; (adr r3, 800c518 <__ieee754_asin+0x2e8>)
 800c2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f6:	4604      	mov	r4, r0
 800c2f8:	460d      	mov	r5, r1
 800c2fa:	f7f4 f98d 	bl	8000618 <__aeabi_dmul>
 800c2fe:	a388      	add	r3, pc, #544	; (adr r3, 800c520 <__ieee754_asin+0x2f0>)
 800c300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c304:	f7f3 ffd2 	bl	80002ac <__adddf3>
 800c308:	4622      	mov	r2, r4
 800c30a:	462b      	mov	r3, r5
 800c30c:	f7f4 f984 	bl	8000618 <__aeabi_dmul>
 800c310:	a385      	add	r3, pc, #532	; (adr r3, 800c528 <__ieee754_asin+0x2f8>)
 800c312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c316:	f7f3 ffc7 	bl	80002a8 <__aeabi_dsub>
 800c31a:	4622      	mov	r2, r4
 800c31c:	462b      	mov	r3, r5
 800c31e:	f7f4 f97b 	bl	8000618 <__aeabi_dmul>
 800c322:	a383      	add	r3, pc, #524	; (adr r3, 800c530 <__ieee754_asin+0x300>)
 800c324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c328:	f7f3 ffc0 	bl	80002ac <__adddf3>
 800c32c:	4622      	mov	r2, r4
 800c32e:	462b      	mov	r3, r5
 800c330:	f7f4 f972 	bl	8000618 <__aeabi_dmul>
 800c334:	a380      	add	r3, pc, #512	; (adr r3, 800c538 <__ieee754_asin+0x308>)
 800c336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33a:	f7f3 ffb5 	bl	80002a8 <__aeabi_dsub>
 800c33e:	4622      	mov	r2, r4
 800c340:	462b      	mov	r3, r5
 800c342:	f7f4 f969 	bl	8000618 <__aeabi_dmul>
 800c346:	a37e      	add	r3, pc, #504	; (adr r3, 800c540 <__ieee754_asin+0x310>)
 800c348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c34c:	f7f3 ffae 	bl	80002ac <__adddf3>
 800c350:	4622      	mov	r2, r4
 800c352:	462b      	mov	r3, r5
 800c354:	f7f4 f960 	bl	8000618 <__aeabi_dmul>
 800c358:	a37b      	add	r3, pc, #492	; (adr r3, 800c548 <__ieee754_asin+0x318>)
 800c35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c35e:	4680      	mov	r8, r0
 800c360:	4689      	mov	r9, r1
 800c362:	4620      	mov	r0, r4
 800c364:	4629      	mov	r1, r5
 800c366:	f7f4 f957 	bl	8000618 <__aeabi_dmul>
 800c36a:	a379      	add	r3, pc, #484	; (adr r3, 800c550 <__ieee754_asin+0x320>)
 800c36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c370:	f7f3 ff9a 	bl	80002a8 <__aeabi_dsub>
 800c374:	4622      	mov	r2, r4
 800c376:	462b      	mov	r3, r5
 800c378:	f7f4 f94e 	bl	8000618 <__aeabi_dmul>
 800c37c:	a376      	add	r3, pc, #472	; (adr r3, 800c558 <__ieee754_asin+0x328>)
 800c37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c382:	f7f3 ff93 	bl	80002ac <__adddf3>
 800c386:	4622      	mov	r2, r4
 800c388:	462b      	mov	r3, r5
 800c38a:	f7f4 f945 	bl	8000618 <__aeabi_dmul>
 800c38e:	a374      	add	r3, pc, #464	; (adr r3, 800c560 <__ieee754_asin+0x330>)
 800c390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c394:	f7f3 ff88 	bl	80002a8 <__aeabi_dsub>
 800c398:	4622      	mov	r2, r4
 800c39a:	462b      	mov	r3, r5
 800c39c:	f7f4 f93c 	bl	8000618 <__aeabi_dmul>
 800c3a0:	4b73      	ldr	r3, [pc, #460]	; (800c570 <__ieee754_asin+0x340>)
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f7f3 ff82 	bl	80002ac <__adddf3>
 800c3a8:	ec45 4b10 	vmov	d0, r4, r5
 800c3ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3b0:	f000 fa2c 	bl	800c80c <__ieee754_sqrt>
 800c3b4:	4b70      	ldr	r3, [pc, #448]	; (800c578 <__ieee754_asin+0x348>)
 800c3b6:	429f      	cmp	r7, r3
 800c3b8:	ec5b ab10 	vmov	sl, fp, d0
 800c3bc:	f340 80de 	ble.w	800c57c <__ieee754_asin+0x34c>
 800c3c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3c4:	4640      	mov	r0, r8
 800c3c6:	4649      	mov	r1, r9
 800c3c8:	f7f4 fa50 	bl	800086c <__aeabi_ddiv>
 800c3cc:	4652      	mov	r2, sl
 800c3ce:	465b      	mov	r3, fp
 800c3d0:	f7f4 f922 	bl	8000618 <__aeabi_dmul>
 800c3d4:	4652      	mov	r2, sl
 800c3d6:	465b      	mov	r3, fp
 800c3d8:	f7f3 ff68 	bl	80002ac <__adddf3>
 800c3dc:	4602      	mov	r2, r0
 800c3de:	460b      	mov	r3, r1
 800c3e0:	f7f3 ff64 	bl	80002ac <__adddf3>
 800c3e4:	a348      	add	r3, pc, #288	; (adr r3, 800c508 <__ieee754_asin+0x2d8>)
 800c3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ea:	f7f3 ff5d 	bl	80002a8 <__aeabi_dsub>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	a143      	add	r1, pc, #268	; (adr r1, 800c500 <__ieee754_asin+0x2d0>)
 800c3f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3f8:	f7f3 ff56 	bl	80002a8 <__aeabi_dsub>
 800c3fc:	9b01      	ldr	r3, [sp, #4]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	bfdc      	itt	le
 800c402:	4602      	movle	r2, r0
 800c404:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800c408:	4604      	mov	r4, r0
 800c40a:	460d      	mov	r5, r1
 800c40c:	bfdc      	itt	le
 800c40e:	4614      	movle	r4, r2
 800c410:	461d      	movle	r5, r3
 800c412:	e745      	b.n	800c2a0 <__ieee754_asin+0x70>
 800c414:	ee10 2a10 	vmov	r2, s0
 800c418:	ee10 0a10 	vmov	r0, s0
 800c41c:	462b      	mov	r3, r5
 800c41e:	4629      	mov	r1, r5
 800c420:	f7f4 f8fa 	bl	8000618 <__aeabi_dmul>
 800c424:	a33c      	add	r3, pc, #240	; (adr r3, 800c518 <__ieee754_asin+0x2e8>)
 800c426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42a:	4606      	mov	r6, r0
 800c42c:	460f      	mov	r7, r1
 800c42e:	f7f4 f8f3 	bl	8000618 <__aeabi_dmul>
 800c432:	a33b      	add	r3, pc, #236	; (adr r3, 800c520 <__ieee754_asin+0x2f0>)
 800c434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c438:	f7f3 ff38 	bl	80002ac <__adddf3>
 800c43c:	4632      	mov	r2, r6
 800c43e:	463b      	mov	r3, r7
 800c440:	f7f4 f8ea 	bl	8000618 <__aeabi_dmul>
 800c444:	a338      	add	r3, pc, #224	; (adr r3, 800c528 <__ieee754_asin+0x2f8>)
 800c446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44a:	f7f3 ff2d 	bl	80002a8 <__aeabi_dsub>
 800c44e:	4632      	mov	r2, r6
 800c450:	463b      	mov	r3, r7
 800c452:	f7f4 f8e1 	bl	8000618 <__aeabi_dmul>
 800c456:	a336      	add	r3, pc, #216	; (adr r3, 800c530 <__ieee754_asin+0x300>)
 800c458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c45c:	f7f3 ff26 	bl	80002ac <__adddf3>
 800c460:	4632      	mov	r2, r6
 800c462:	463b      	mov	r3, r7
 800c464:	f7f4 f8d8 	bl	8000618 <__aeabi_dmul>
 800c468:	a333      	add	r3, pc, #204	; (adr r3, 800c538 <__ieee754_asin+0x308>)
 800c46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c46e:	f7f3 ff1b 	bl	80002a8 <__aeabi_dsub>
 800c472:	4632      	mov	r2, r6
 800c474:	463b      	mov	r3, r7
 800c476:	f7f4 f8cf 	bl	8000618 <__aeabi_dmul>
 800c47a:	a331      	add	r3, pc, #196	; (adr r3, 800c540 <__ieee754_asin+0x310>)
 800c47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c480:	f7f3 ff14 	bl	80002ac <__adddf3>
 800c484:	4632      	mov	r2, r6
 800c486:	463b      	mov	r3, r7
 800c488:	f7f4 f8c6 	bl	8000618 <__aeabi_dmul>
 800c48c:	a32e      	add	r3, pc, #184	; (adr r3, 800c548 <__ieee754_asin+0x318>)
 800c48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c492:	4680      	mov	r8, r0
 800c494:	4689      	mov	r9, r1
 800c496:	4630      	mov	r0, r6
 800c498:	4639      	mov	r1, r7
 800c49a:	f7f4 f8bd 	bl	8000618 <__aeabi_dmul>
 800c49e:	a32c      	add	r3, pc, #176	; (adr r3, 800c550 <__ieee754_asin+0x320>)
 800c4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a4:	f7f3 ff00 	bl	80002a8 <__aeabi_dsub>
 800c4a8:	4632      	mov	r2, r6
 800c4aa:	463b      	mov	r3, r7
 800c4ac:	f7f4 f8b4 	bl	8000618 <__aeabi_dmul>
 800c4b0:	a329      	add	r3, pc, #164	; (adr r3, 800c558 <__ieee754_asin+0x328>)
 800c4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b6:	f7f3 fef9 	bl	80002ac <__adddf3>
 800c4ba:	4632      	mov	r2, r6
 800c4bc:	463b      	mov	r3, r7
 800c4be:	f7f4 f8ab 	bl	8000618 <__aeabi_dmul>
 800c4c2:	a327      	add	r3, pc, #156	; (adr r3, 800c560 <__ieee754_asin+0x330>)
 800c4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c8:	f7f3 feee 	bl	80002a8 <__aeabi_dsub>
 800c4cc:	4632      	mov	r2, r6
 800c4ce:	463b      	mov	r3, r7
 800c4d0:	f7f4 f8a2 	bl	8000618 <__aeabi_dmul>
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	4b26      	ldr	r3, [pc, #152]	; (800c570 <__ieee754_asin+0x340>)
 800c4d8:	f7f3 fee8 	bl	80002ac <__adddf3>
 800c4dc:	4602      	mov	r2, r0
 800c4de:	460b      	mov	r3, r1
 800c4e0:	4640      	mov	r0, r8
 800c4e2:	4649      	mov	r1, r9
 800c4e4:	f7f4 f9c2 	bl	800086c <__aeabi_ddiv>
 800c4e8:	4622      	mov	r2, r4
 800c4ea:	462b      	mov	r3, r5
 800c4ec:	f7f4 f894 	bl	8000618 <__aeabi_dmul>
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	460b      	mov	r3, r1
 800c4f4:	4620      	mov	r0, r4
 800c4f6:	4629      	mov	r1, r5
 800c4f8:	e6c2      	b.n	800c280 <__ieee754_asin+0x50>
 800c4fa:	bf00      	nop
 800c4fc:	f3af 8000 	nop.w
 800c500:	54442d18 	.word	0x54442d18
 800c504:	3ff921fb 	.word	0x3ff921fb
 800c508:	33145c07 	.word	0x33145c07
 800c50c:	3c91a626 	.word	0x3c91a626
 800c510:	8800759c 	.word	0x8800759c
 800c514:	7e37e43c 	.word	0x7e37e43c
 800c518:	0dfdf709 	.word	0x0dfdf709
 800c51c:	3f023de1 	.word	0x3f023de1
 800c520:	7501b288 	.word	0x7501b288
 800c524:	3f49efe0 	.word	0x3f49efe0
 800c528:	b5688f3b 	.word	0xb5688f3b
 800c52c:	3fa48228 	.word	0x3fa48228
 800c530:	0e884455 	.word	0x0e884455
 800c534:	3fc9c155 	.word	0x3fc9c155
 800c538:	03eb6f7d 	.word	0x03eb6f7d
 800c53c:	3fd4d612 	.word	0x3fd4d612
 800c540:	55555555 	.word	0x55555555
 800c544:	3fc55555 	.word	0x3fc55555
 800c548:	b12e9282 	.word	0xb12e9282
 800c54c:	3fb3b8c5 	.word	0x3fb3b8c5
 800c550:	1b8d0159 	.word	0x1b8d0159
 800c554:	3fe6066c 	.word	0x3fe6066c
 800c558:	9c598ac8 	.word	0x9c598ac8
 800c55c:	40002ae5 	.word	0x40002ae5
 800c560:	1c8a2d4b 	.word	0x1c8a2d4b
 800c564:	40033a27 	.word	0x40033a27
 800c568:	3fefffff 	.word	0x3fefffff
 800c56c:	3fdfffff 	.word	0x3fdfffff
 800c570:	3ff00000 	.word	0x3ff00000
 800c574:	3fe00000 	.word	0x3fe00000
 800c578:	3fef3332 	.word	0x3fef3332
 800c57c:	ee10 2a10 	vmov	r2, s0
 800c580:	ee10 0a10 	vmov	r0, s0
 800c584:	465b      	mov	r3, fp
 800c586:	4659      	mov	r1, fp
 800c588:	f7f3 fe90 	bl	80002ac <__adddf3>
 800c58c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c590:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c594:	4640      	mov	r0, r8
 800c596:	4649      	mov	r1, r9
 800c598:	f7f4 f968 	bl	800086c <__aeabi_ddiv>
 800c59c:	4602      	mov	r2, r0
 800c59e:	460b      	mov	r3, r1
 800c5a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c5a4:	f7f4 f838 	bl	8000618 <__aeabi_dmul>
 800c5a8:	2600      	movs	r6, #0
 800c5aa:	4680      	mov	r8, r0
 800c5ac:	4689      	mov	r9, r1
 800c5ae:	4632      	mov	r2, r6
 800c5b0:	465b      	mov	r3, fp
 800c5b2:	4630      	mov	r0, r6
 800c5b4:	4659      	mov	r1, fp
 800c5b6:	f7f4 f82f 	bl	8000618 <__aeabi_dmul>
 800c5ba:	4602      	mov	r2, r0
 800c5bc:	460b      	mov	r3, r1
 800c5be:	4620      	mov	r0, r4
 800c5c0:	4629      	mov	r1, r5
 800c5c2:	f7f3 fe71 	bl	80002a8 <__aeabi_dsub>
 800c5c6:	4632      	mov	r2, r6
 800c5c8:	4604      	mov	r4, r0
 800c5ca:	460d      	mov	r5, r1
 800c5cc:	465b      	mov	r3, fp
 800c5ce:	4650      	mov	r0, sl
 800c5d0:	4659      	mov	r1, fp
 800c5d2:	f7f3 fe6b 	bl	80002ac <__adddf3>
 800c5d6:	4602      	mov	r2, r0
 800c5d8:	460b      	mov	r3, r1
 800c5da:	4620      	mov	r0, r4
 800c5dc:	4629      	mov	r1, r5
 800c5de:	f7f4 f945 	bl	800086c <__aeabi_ddiv>
 800c5e2:	4602      	mov	r2, r0
 800c5e4:	460b      	mov	r3, r1
 800c5e6:	f7f3 fe61 	bl	80002ac <__adddf3>
 800c5ea:	4602      	mov	r2, r0
 800c5ec:	460b      	mov	r3, r1
 800c5ee:	a114      	add	r1, pc, #80	; (adr r1, 800c640 <__ieee754_asin+0x410>)
 800c5f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5f4:	f7f3 fe58 	bl	80002a8 <__aeabi_dsub>
 800c5f8:	4602      	mov	r2, r0
 800c5fa:	460b      	mov	r3, r1
 800c5fc:	4640      	mov	r0, r8
 800c5fe:	4649      	mov	r1, r9
 800c600:	f7f3 fe52 	bl	80002a8 <__aeabi_dsub>
 800c604:	465f      	mov	r7, fp
 800c606:	4604      	mov	r4, r0
 800c608:	460d      	mov	r5, r1
 800c60a:	4632      	mov	r2, r6
 800c60c:	465b      	mov	r3, fp
 800c60e:	4630      	mov	r0, r6
 800c610:	4639      	mov	r1, r7
 800c612:	f7f3 fe4b 	bl	80002ac <__adddf3>
 800c616:	4602      	mov	r2, r0
 800c618:	460b      	mov	r3, r1
 800c61a:	a10b      	add	r1, pc, #44	; (adr r1, 800c648 <__ieee754_asin+0x418>)
 800c61c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c620:	f7f3 fe42 	bl	80002a8 <__aeabi_dsub>
 800c624:	4602      	mov	r2, r0
 800c626:	460b      	mov	r3, r1
 800c628:	4620      	mov	r0, r4
 800c62a:	4629      	mov	r1, r5
 800c62c:	f7f3 fe3c 	bl	80002a8 <__aeabi_dsub>
 800c630:	4602      	mov	r2, r0
 800c632:	460b      	mov	r3, r1
 800c634:	a104      	add	r1, pc, #16	; (adr r1, 800c648 <__ieee754_asin+0x418>)
 800c636:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c63a:	e6dd      	b.n	800c3f8 <__ieee754_asin+0x1c8>
 800c63c:	f3af 8000 	nop.w
 800c640:	33145c07 	.word	0x33145c07
 800c644:	3c91a626 	.word	0x3c91a626
 800c648:	54442d18 	.word	0x54442d18
 800c64c:	3fe921fb 	.word	0x3fe921fb

0800c650 <__ieee754_atan2>:
 800c650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c654:	ec57 6b11 	vmov	r6, r7, d1
 800c658:	4273      	negs	r3, r6
 800c65a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800c65e:	4333      	orrs	r3, r6
 800c660:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800c808 <__ieee754_atan2+0x1b8>
 800c664:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c668:	4573      	cmp	r3, lr
 800c66a:	ec51 0b10 	vmov	r0, r1, d0
 800c66e:	ee11 8a10 	vmov	r8, s2
 800c672:	d80a      	bhi.n	800c68a <__ieee754_atan2+0x3a>
 800c674:	4244      	negs	r4, r0
 800c676:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c67a:	4304      	orrs	r4, r0
 800c67c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c680:	4574      	cmp	r4, lr
 800c682:	468c      	mov	ip, r1
 800c684:	ee10 9a10 	vmov	r9, s0
 800c688:	d907      	bls.n	800c69a <__ieee754_atan2+0x4a>
 800c68a:	4632      	mov	r2, r6
 800c68c:	463b      	mov	r3, r7
 800c68e:	f7f3 fe0d 	bl	80002ac <__adddf3>
 800c692:	ec41 0b10 	vmov	d0, r0, r1
 800c696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c69a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800c69e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c6a2:	4334      	orrs	r4, r6
 800c6a4:	d103      	bne.n	800c6ae <__ieee754_atan2+0x5e>
 800c6a6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6aa:	f000 b961 	b.w	800c970 <atan>
 800c6ae:	17bc      	asrs	r4, r7, #30
 800c6b0:	f004 0402 	and.w	r4, r4, #2
 800c6b4:	ea53 0909 	orrs.w	r9, r3, r9
 800c6b8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c6bc:	d107      	bne.n	800c6ce <__ieee754_atan2+0x7e>
 800c6be:	2c02      	cmp	r4, #2
 800c6c0:	d073      	beq.n	800c7aa <__ieee754_atan2+0x15a>
 800c6c2:	2c03      	cmp	r4, #3
 800c6c4:	d1e5      	bne.n	800c692 <__ieee754_atan2+0x42>
 800c6c6:	a13e      	add	r1, pc, #248	; (adr r1, 800c7c0 <__ieee754_atan2+0x170>)
 800c6c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6cc:	e7e1      	b.n	800c692 <__ieee754_atan2+0x42>
 800c6ce:	ea52 0808 	orrs.w	r8, r2, r8
 800c6d2:	d106      	bne.n	800c6e2 <__ieee754_atan2+0x92>
 800c6d4:	f1bc 0f00 	cmp.w	ip, #0
 800c6d8:	da6b      	bge.n	800c7b2 <__ieee754_atan2+0x162>
 800c6da:	a13b      	add	r1, pc, #236	; (adr r1, 800c7c8 <__ieee754_atan2+0x178>)
 800c6dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6e0:	e7d7      	b.n	800c692 <__ieee754_atan2+0x42>
 800c6e2:	4572      	cmp	r2, lr
 800c6e4:	d120      	bne.n	800c728 <__ieee754_atan2+0xd8>
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d111      	bne.n	800c70e <__ieee754_atan2+0xbe>
 800c6ea:	2c02      	cmp	r4, #2
 800c6ec:	d007      	beq.n	800c6fe <__ieee754_atan2+0xae>
 800c6ee:	2c03      	cmp	r4, #3
 800c6f0:	d009      	beq.n	800c706 <__ieee754_atan2+0xb6>
 800c6f2:	2c01      	cmp	r4, #1
 800c6f4:	d155      	bne.n	800c7a2 <__ieee754_atan2+0x152>
 800c6f6:	a136      	add	r1, pc, #216	; (adr r1, 800c7d0 <__ieee754_atan2+0x180>)
 800c6f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6fc:	e7c9      	b.n	800c692 <__ieee754_atan2+0x42>
 800c6fe:	a136      	add	r1, pc, #216	; (adr r1, 800c7d8 <__ieee754_atan2+0x188>)
 800c700:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c704:	e7c5      	b.n	800c692 <__ieee754_atan2+0x42>
 800c706:	a136      	add	r1, pc, #216	; (adr r1, 800c7e0 <__ieee754_atan2+0x190>)
 800c708:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c70c:	e7c1      	b.n	800c692 <__ieee754_atan2+0x42>
 800c70e:	2c02      	cmp	r4, #2
 800c710:	d04b      	beq.n	800c7aa <__ieee754_atan2+0x15a>
 800c712:	2c03      	cmp	r4, #3
 800c714:	d0d7      	beq.n	800c6c6 <__ieee754_atan2+0x76>
 800c716:	2c01      	cmp	r4, #1
 800c718:	f04f 0000 	mov.w	r0, #0
 800c71c:	d102      	bne.n	800c724 <__ieee754_atan2+0xd4>
 800c71e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c722:	e7b6      	b.n	800c692 <__ieee754_atan2+0x42>
 800c724:	2100      	movs	r1, #0
 800c726:	e7b4      	b.n	800c692 <__ieee754_atan2+0x42>
 800c728:	4573      	cmp	r3, lr
 800c72a:	d0d3      	beq.n	800c6d4 <__ieee754_atan2+0x84>
 800c72c:	1a9b      	subs	r3, r3, r2
 800c72e:	151b      	asrs	r3, r3, #20
 800c730:	2b3c      	cmp	r3, #60	; 0x3c
 800c732:	dc1e      	bgt.n	800c772 <__ieee754_atan2+0x122>
 800c734:	2f00      	cmp	r7, #0
 800c736:	da01      	bge.n	800c73c <__ieee754_atan2+0xec>
 800c738:	333c      	adds	r3, #60	; 0x3c
 800c73a:	db1e      	blt.n	800c77a <__ieee754_atan2+0x12a>
 800c73c:	4632      	mov	r2, r6
 800c73e:	463b      	mov	r3, r7
 800c740:	f7f4 f894 	bl	800086c <__aeabi_ddiv>
 800c744:	ec41 0b10 	vmov	d0, r0, r1
 800c748:	f000 fab2 	bl	800ccb0 <fabs>
 800c74c:	f000 f910 	bl	800c970 <atan>
 800c750:	ec51 0b10 	vmov	r0, r1, d0
 800c754:	2c01      	cmp	r4, #1
 800c756:	d013      	beq.n	800c780 <__ieee754_atan2+0x130>
 800c758:	2c02      	cmp	r4, #2
 800c75a:	d015      	beq.n	800c788 <__ieee754_atan2+0x138>
 800c75c:	2c00      	cmp	r4, #0
 800c75e:	d098      	beq.n	800c692 <__ieee754_atan2+0x42>
 800c760:	a321      	add	r3, pc, #132	; (adr r3, 800c7e8 <__ieee754_atan2+0x198>)
 800c762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c766:	f7f3 fd9f 	bl	80002a8 <__aeabi_dsub>
 800c76a:	a321      	add	r3, pc, #132	; (adr r3, 800c7f0 <__ieee754_atan2+0x1a0>)
 800c76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c770:	e014      	b.n	800c79c <__ieee754_atan2+0x14c>
 800c772:	a121      	add	r1, pc, #132	; (adr r1, 800c7f8 <__ieee754_atan2+0x1a8>)
 800c774:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c778:	e7ec      	b.n	800c754 <__ieee754_atan2+0x104>
 800c77a:	2000      	movs	r0, #0
 800c77c:	2100      	movs	r1, #0
 800c77e:	e7e9      	b.n	800c754 <__ieee754_atan2+0x104>
 800c780:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c784:	4619      	mov	r1, r3
 800c786:	e784      	b.n	800c692 <__ieee754_atan2+0x42>
 800c788:	a317      	add	r3, pc, #92	; (adr r3, 800c7e8 <__ieee754_atan2+0x198>)
 800c78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78e:	f7f3 fd8b 	bl	80002a8 <__aeabi_dsub>
 800c792:	4602      	mov	r2, r0
 800c794:	460b      	mov	r3, r1
 800c796:	a116      	add	r1, pc, #88	; (adr r1, 800c7f0 <__ieee754_atan2+0x1a0>)
 800c798:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c79c:	f7f3 fd84 	bl	80002a8 <__aeabi_dsub>
 800c7a0:	e777      	b.n	800c692 <__ieee754_atan2+0x42>
 800c7a2:	a117      	add	r1, pc, #92	; (adr r1, 800c800 <__ieee754_atan2+0x1b0>)
 800c7a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7a8:	e773      	b.n	800c692 <__ieee754_atan2+0x42>
 800c7aa:	a111      	add	r1, pc, #68	; (adr r1, 800c7f0 <__ieee754_atan2+0x1a0>)
 800c7ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7b0:	e76f      	b.n	800c692 <__ieee754_atan2+0x42>
 800c7b2:	a111      	add	r1, pc, #68	; (adr r1, 800c7f8 <__ieee754_atan2+0x1a8>)
 800c7b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7b8:	e76b      	b.n	800c692 <__ieee754_atan2+0x42>
 800c7ba:	bf00      	nop
 800c7bc:	f3af 8000 	nop.w
 800c7c0:	54442d18 	.word	0x54442d18
 800c7c4:	c00921fb 	.word	0xc00921fb
 800c7c8:	54442d18 	.word	0x54442d18
 800c7cc:	bff921fb 	.word	0xbff921fb
 800c7d0:	54442d18 	.word	0x54442d18
 800c7d4:	bfe921fb 	.word	0xbfe921fb
 800c7d8:	7f3321d2 	.word	0x7f3321d2
 800c7dc:	4002d97c 	.word	0x4002d97c
 800c7e0:	7f3321d2 	.word	0x7f3321d2
 800c7e4:	c002d97c 	.word	0xc002d97c
 800c7e8:	33145c07 	.word	0x33145c07
 800c7ec:	3ca1a626 	.word	0x3ca1a626
 800c7f0:	54442d18 	.word	0x54442d18
 800c7f4:	400921fb 	.word	0x400921fb
 800c7f8:	54442d18 	.word	0x54442d18
 800c7fc:	3ff921fb 	.word	0x3ff921fb
 800c800:	54442d18 	.word	0x54442d18
 800c804:	3fe921fb 	.word	0x3fe921fb
 800c808:	7ff00000 	.word	0x7ff00000

0800c80c <__ieee754_sqrt>:
 800c80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c810:	4955      	ldr	r1, [pc, #340]	; (800c968 <__ieee754_sqrt+0x15c>)
 800c812:	ec55 4b10 	vmov	r4, r5, d0
 800c816:	43a9      	bics	r1, r5
 800c818:	462b      	mov	r3, r5
 800c81a:	462a      	mov	r2, r5
 800c81c:	d112      	bne.n	800c844 <__ieee754_sqrt+0x38>
 800c81e:	ee10 2a10 	vmov	r2, s0
 800c822:	ee10 0a10 	vmov	r0, s0
 800c826:	4629      	mov	r1, r5
 800c828:	f7f3 fef6 	bl	8000618 <__aeabi_dmul>
 800c82c:	4602      	mov	r2, r0
 800c82e:	460b      	mov	r3, r1
 800c830:	4620      	mov	r0, r4
 800c832:	4629      	mov	r1, r5
 800c834:	f7f3 fd3a 	bl	80002ac <__adddf3>
 800c838:	4604      	mov	r4, r0
 800c83a:	460d      	mov	r5, r1
 800c83c:	ec45 4b10 	vmov	d0, r4, r5
 800c840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c844:	2d00      	cmp	r5, #0
 800c846:	ee10 0a10 	vmov	r0, s0
 800c84a:	4621      	mov	r1, r4
 800c84c:	dc0f      	bgt.n	800c86e <__ieee754_sqrt+0x62>
 800c84e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c852:	4330      	orrs	r0, r6
 800c854:	d0f2      	beq.n	800c83c <__ieee754_sqrt+0x30>
 800c856:	b155      	cbz	r5, 800c86e <__ieee754_sqrt+0x62>
 800c858:	ee10 2a10 	vmov	r2, s0
 800c85c:	4620      	mov	r0, r4
 800c85e:	4629      	mov	r1, r5
 800c860:	f7f3 fd22 	bl	80002a8 <__aeabi_dsub>
 800c864:	4602      	mov	r2, r0
 800c866:	460b      	mov	r3, r1
 800c868:	f7f4 f800 	bl	800086c <__aeabi_ddiv>
 800c86c:	e7e4      	b.n	800c838 <__ieee754_sqrt+0x2c>
 800c86e:	151b      	asrs	r3, r3, #20
 800c870:	d073      	beq.n	800c95a <__ieee754_sqrt+0x14e>
 800c872:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c876:	07dd      	lsls	r5, r3, #31
 800c878:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c87c:	bf48      	it	mi
 800c87e:	0fc8      	lsrmi	r0, r1, #31
 800c880:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c884:	bf44      	itt	mi
 800c886:	0049      	lslmi	r1, r1, #1
 800c888:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800c88c:	2500      	movs	r5, #0
 800c88e:	1058      	asrs	r0, r3, #1
 800c890:	0fcb      	lsrs	r3, r1, #31
 800c892:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800c896:	0049      	lsls	r1, r1, #1
 800c898:	2316      	movs	r3, #22
 800c89a:	462c      	mov	r4, r5
 800c89c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800c8a0:	19a7      	adds	r7, r4, r6
 800c8a2:	4297      	cmp	r7, r2
 800c8a4:	bfde      	ittt	le
 800c8a6:	19bc      	addle	r4, r7, r6
 800c8a8:	1bd2      	suble	r2, r2, r7
 800c8aa:	19ad      	addle	r5, r5, r6
 800c8ac:	0fcf      	lsrs	r7, r1, #31
 800c8ae:	3b01      	subs	r3, #1
 800c8b0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800c8b4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c8b8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c8bc:	d1f0      	bne.n	800c8a0 <__ieee754_sqrt+0x94>
 800c8be:	f04f 0c20 	mov.w	ip, #32
 800c8c2:	469e      	mov	lr, r3
 800c8c4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c8c8:	42a2      	cmp	r2, r4
 800c8ca:	eb06 070e 	add.w	r7, r6, lr
 800c8ce:	dc02      	bgt.n	800c8d6 <__ieee754_sqrt+0xca>
 800c8d0:	d112      	bne.n	800c8f8 <__ieee754_sqrt+0xec>
 800c8d2:	428f      	cmp	r7, r1
 800c8d4:	d810      	bhi.n	800c8f8 <__ieee754_sqrt+0xec>
 800c8d6:	2f00      	cmp	r7, #0
 800c8d8:	eb07 0e06 	add.w	lr, r7, r6
 800c8dc:	da42      	bge.n	800c964 <__ieee754_sqrt+0x158>
 800c8de:	f1be 0f00 	cmp.w	lr, #0
 800c8e2:	db3f      	blt.n	800c964 <__ieee754_sqrt+0x158>
 800c8e4:	f104 0801 	add.w	r8, r4, #1
 800c8e8:	1b12      	subs	r2, r2, r4
 800c8ea:	428f      	cmp	r7, r1
 800c8ec:	bf88      	it	hi
 800c8ee:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c8f2:	1bc9      	subs	r1, r1, r7
 800c8f4:	4433      	add	r3, r6
 800c8f6:	4644      	mov	r4, r8
 800c8f8:	0052      	lsls	r2, r2, #1
 800c8fa:	f1bc 0c01 	subs.w	ip, ip, #1
 800c8fe:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800c902:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c906:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c90a:	d1dd      	bne.n	800c8c8 <__ieee754_sqrt+0xbc>
 800c90c:	430a      	orrs	r2, r1
 800c90e:	d006      	beq.n	800c91e <__ieee754_sqrt+0x112>
 800c910:	1c5c      	adds	r4, r3, #1
 800c912:	bf13      	iteet	ne
 800c914:	3301      	addne	r3, #1
 800c916:	3501      	addeq	r5, #1
 800c918:	4663      	moveq	r3, ip
 800c91a:	f023 0301 	bicne.w	r3, r3, #1
 800c91e:	106a      	asrs	r2, r5, #1
 800c920:	085b      	lsrs	r3, r3, #1
 800c922:	07e9      	lsls	r1, r5, #31
 800c924:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c928:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c92c:	bf48      	it	mi
 800c92e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c932:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800c936:	461c      	mov	r4, r3
 800c938:	e780      	b.n	800c83c <__ieee754_sqrt+0x30>
 800c93a:	0aca      	lsrs	r2, r1, #11
 800c93c:	3815      	subs	r0, #21
 800c93e:	0549      	lsls	r1, r1, #21
 800c940:	2a00      	cmp	r2, #0
 800c942:	d0fa      	beq.n	800c93a <__ieee754_sqrt+0x12e>
 800c944:	02d6      	lsls	r6, r2, #11
 800c946:	d50a      	bpl.n	800c95e <__ieee754_sqrt+0x152>
 800c948:	f1c3 0420 	rsb	r4, r3, #32
 800c94c:	fa21 f404 	lsr.w	r4, r1, r4
 800c950:	1e5d      	subs	r5, r3, #1
 800c952:	4099      	lsls	r1, r3
 800c954:	4322      	orrs	r2, r4
 800c956:	1b43      	subs	r3, r0, r5
 800c958:	e78b      	b.n	800c872 <__ieee754_sqrt+0x66>
 800c95a:	4618      	mov	r0, r3
 800c95c:	e7f0      	b.n	800c940 <__ieee754_sqrt+0x134>
 800c95e:	0052      	lsls	r2, r2, #1
 800c960:	3301      	adds	r3, #1
 800c962:	e7ef      	b.n	800c944 <__ieee754_sqrt+0x138>
 800c964:	46a0      	mov	r8, r4
 800c966:	e7bf      	b.n	800c8e8 <__ieee754_sqrt+0xdc>
 800c968:	7ff00000 	.word	0x7ff00000
 800c96c:	00000000 	.word	0x00000000

0800c970 <atan>:
 800c970:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c974:	ec55 4b10 	vmov	r4, r5, d0
 800c978:	4bc3      	ldr	r3, [pc, #780]	; (800cc88 <atan+0x318>)
 800c97a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c97e:	429e      	cmp	r6, r3
 800c980:	46ab      	mov	fp, r5
 800c982:	dd18      	ble.n	800c9b6 <atan+0x46>
 800c984:	4bc1      	ldr	r3, [pc, #772]	; (800cc8c <atan+0x31c>)
 800c986:	429e      	cmp	r6, r3
 800c988:	dc01      	bgt.n	800c98e <atan+0x1e>
 800c98a:	d109      	bne.n	800c9a0 <atan+0x30>
 800c98c:	b144      	cbz	r4, 800c9a0 <atan+0x30>
 800c98e:	4622      	mov	r2, r4
 800c990:	462b      	mov	r3, r5
 800c992:	4620      	mov	r0, r4
 800c994:	4629      	mov	r1, r5
 800c996:	f7f3 fc89 	bl	80002ac <__adddf3>
 800c99a:	4604      	mov	r4, r0
 800c99c:	460d      	mov	r5, r1
 800c99e:	e006      	b.n	800c9ae <atan+0x3e>
 800c9a0:	f1bb 0f00 	cmp.w	fp, #0
 800c9a4:	f340 8131 	ble.w	800cc0a <atan+0x29a>
 800c9a8:	a59b      	add	r5, pc, #620	; (adr r5, 800cc18 <atan+0x2a8>)
 800c9aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c9ae:	ec45 4b10 	vmov	d0, r4, r5
 800c9b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9b6:	4bb6      	ldr	r3, [pc, #728]	; (800cc90 <atan+0x320>)
 800c9b8:	429e      	cmp	r6, r3
 800c9ba:	dc14      	bgt.n	800c9e6 <atan+0x76>
 800c9bc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c9c0:	429e      	cmp	r6, r3
 800c9c2:	dc0d      	bgt.n	800c9e0 <atan+0x70>
 800c9c4:	a396      	add	r3, pc, #600	; (adr r3, 800cc20 <atan+0x2b0>)
 800c9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ca:	ee10 0a10 	vmov	r0, s0
 800c9ce:	4629      	mov	r1, r5
 800c9d0:	f7f3 fc6c 	bl	80002ac <__adddf3>
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	4baf      	ldr	r3, [pc, #700]	; (800cc94 <atan+0x324>)
 800c9d8:	f7f4 f8ae 	bl	8000b38 <__aeabi_dcmpgt>
 800c9dc:	2800      	cmp	r0, #0
 800c9de:	d1e6      	bne.n	800c9ae <atan+0x3e>
 800c9e0:	f04f 3aff 	mov.w	sl, #4294967295
 800c9e4:	e02b      	b.n	800ca3e <atan+0xce>
 800c9e6:	f000 f963 	bl	800ccb0 <fabs>
 800c9ea:	4bab      	ldr	r3, [pc, #684]	; (800cc98 <atan+0x328>)
 800c9ec:	429e      	cmp	r6, r3
 800c9ee:	ec55 4b10 	vmov	r4, r5, d0
 800c9f2:	f300 80bf 	bgt.w	800cb74 <atan+0x204>
 800c9f6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c9fa:	429e      	cmp	r6, r3
 800c9fc:	f300 80a0 	bgt.w	800cb40 <atan+0x1d0>
 800ca00:	ee10 2a10 	vmov	r2, s0
 800ca04:	ee10 0a10 	vmov	r0, s0
 800ca08:	462b      	mov	r3, r5
 800ca0a:	4629      	mov	r1, r5
 800ca0c:	f7f3 fc4e 	bl	80002ac <__adddf3>
 800ca10:	2200      	movs	r2, #0
 800ca12:	4ba0      	ldr	r3, [pc, #640]	; (800cc94 <atan+0x324>)
 800ca14:	f7f3 fc48 	bl	80002a8 <__aeabi_dsub>
 800ca18:	2200      	movs	r2, #0
 800ca1a:	4606      	mov	r6, r0
 800ca1c:	460f      	mov	r7, r1
 800ca1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ca22:	4620      	mov	r0, r4
 800ca24:	4629      	mov	r1, r5
 800ca26:	f7f3 fc41 	bl	80002ac <__adddf3>
 800ca2a:	4602      	mov	r2, r0
 800ca2c:	460b      	mov	r3, r1
 800ca2e:	4630      	mov	r0, r6
 800ca30:	4639      	mov	r1, r7
 800ca32:	f7f3 ff1b 	bl	800086c <__aeabi_ddiv>
 800ca36:	f04f 0a00 	mov.w	sl, #0
 800ca3a:	4604      	mov	r4, r0
 800ca3c:	460d      	mov	r5, r1
 800ca3e:	4622      	mov	r2, r4
 800ca40:	462b      	mov	r3, r5
 800ca42:	4620      	mov	r0, r4
 800ca44:	4629      	mov	r1, r5
 800ca46:	f7f3 fde7 	bl	8000618 <__aeabi_dmul>
 800ca4a:	4602      	mov	r2, r0
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	4680      	mov	r8, r0
 800ca50:	4689      	mov	r9, r1
 800ca52:	f7f3 fde1 	bl	8000618 <__aeabi_dmul>
 800ca56:	a374      	add	r3, pc, #464	; (adr r3, 800cc28 <atan+0x2b8>)
 800ca58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca5c:	4606      	mov	r6, r0
 800ca5e:	460f      	mov	r7, r1
 800ca60:	f7f3 fdda 	bl	8000618 <__aeabi_dmul>
 800ca64:	a372      	add	r3, pc, #456	; (adr r3, 800cc30 <atan+0x2c0>)
 800ca66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6a:	f7f3 fc1f 	bl	80002ac <__adddf3>
 800ca6e:	4632      	mov	r2, r6
 800ca70:	463b      	mov	r3, r7
 800ca72:	f7f3 fdd1 	bl	8000618 <__aeabi_dmul>
 800ca76:	a370      	add	r3, pc, #448	; (adr r3, 800cc38 <atan+0x2c8>)
 800ca78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca7c:	f7f3 fc16 	bl	80002ac <__adddf3>
 800ca80:	4632      	mov	r2, r6
 800ca82:	463b      	mov	r3, r7
 800ca84:	f7f3 fdc8 	bl	8000618 <__aeabi_dmul>
 800ca88:	a36d      	add	r3, pc, #436	; (adr r3, 800cc40 <atan+0x2d0>)
 800ca8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca8e:	f7f3 fc0d 	bl	80002ac <__adddf3>
 800ca92:	4632      	mov	r2, r6
 800ca94:	463b      	mov	r3, r7
 800ca96:	f7f3 fdbf 	bl	8000618 <__aeabi_dmul>
 800ca9a:	a36b      	add	r3, pc, #428	; (adr r3, 800cc48 <atan+0x2d8>)
 800ca9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa0:	f7f3 fc04 	bl	80002ac <__adddf3>
 800caa4:	4632      	mov	r2, r6
 800caa6:	463b      	mov	r3, r7
 800caa8:	f7f3 fdb6 	bl	8000618 <__aeabi_dmul>
 800caac:	a368      	add	r3, pc, #416	; (adr r3, 800cc50 <atan+0x2e0>)
 800caae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab2:	f7f3 fbfb 	bl	80002ac <__adddf3>
 800cab6:	4642      	mov	r2, r8
 800cab8:	464b      	mov	r3, r9
 800caba:	f7f3 fdad 	bl	8000618 <__aeabi_dmul>
 800cabe:	a366      	add	r3, pc, #408	; (adr r3, 800cc58 <atan+0x2e8>)
 800cac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac4:	4680      	mov	r8, r0
 800cac6:	4689      	mov	r9, r1
 800cac8:	4630      	mov	r0, r6
 800caca:	4639      	mov	r1, r7
 800cacc:	f7f3 fda4 	bl	8000618 <__aeabi_dmul>
 800cad0:	a363      	add	r3, pc, #396	; (adr r3, 800cc60 <atan+0x2f0>)
 800cad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad6:	f7f3 fbe7 	bl	80002a8 <__aeabi_dsub>
 800cada:	4632      	mov	r2, r6
 800cadc:	463b      	mov	r3, r7
 800cade:	f7f3 fd9b 	bl	8000618 <__aeabi_dmul>
 800cae2:	a361      	add	r3, pc, #388	; (adr r3, 800cc68 <atan+0x2f8>)
 800cae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae8:	f7f3 fbde 	bl	80002a8 <__aeabi_dsub>
 800caec:	4632      	mov	r2, r6
 800caee:	463b      	mov	r3, r7
 800caf0:	f7f3 fd92 	bl	8000618 <__aeabi_dmul>
 800caf4:	a35e      	add	r3, pc, #376	; (adr r3, 800cc70 <atan+0x300>)
 800caf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cafa:	f7f3 fbd5 	bl	80002a8 <__aeabi_dsub>
 800cafe:	4632      	mov	r2, r6
 800cb00:	463b      	mov	r3, r7
 800cb02:	f7f3 fd89 	bl	8000618 <__aeabi_dmul>
 800cb06:	a35c      	add	r3, pc, #368	; (adr r3, 800cc78 <atan+0x308>)
 800cb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb0c:	f7f3 fbcc 	bl	80002a8 <__aeabi_dsub>
 800cb10:	4632      	mov	r2, r6
 800cb12:	463b      	mov	r3, r7
 800cb14:	f7f3 fd80 	bl	8000618 <__aeabi_dmul>
 800cb18:	4602      	mov	r2, r0
 800cb1a:	460b      	mov	r3, r1
 800cb1c:	4640      	mov	r0, r8
 800cb1e:	4649      	mov	r1, r9
 800cb20:	f7f3 fbc4 	bl	80002ac <__adddf3>
 800cb24:	4622      	mov	r2, r4
 800cb26:	462b      	mov	r3, r5
 800cb28:	f7f3 fd76 	bl	8000618 <__aeabi_dmul>
 800cb2c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800cb30:	4602      	mov	r2, r0
 800cb32:	460b      	mov	r3, r1
 800cb34:	d14b      	bne.n	800cbce <atan+0x25e>
 800cb36:	4620      	mov	r0, r4
 800cb38:	4629      	mov	r1, r5
 800cb3a:	f7f3 fbb5 	bl	80002a8 <__aeabi_dsub>
 800cb3e:	e72c      	b.n	800c99a <atan+0x2a>
 800cb40:	ee10 0a10 	vmov	r0, s0
 800cb44:	2200      	movs	r2, #0
 800cb46:	4b53      	ldr	r3, [pc, #332]	; (800cc94 <atan+0x324>)
 800cb48:	4629      	mov	r1, r5
 800cb4a:	f7f3 fbad 	bl	80002a8 <__aeabi_dsub>
 800cb4e:	2200      	movs	r2, #0
 800cb50:	4606      	mov	r6, r0
 800cb52:	460f      	mov	r7, r1
 800cb54:	4b4f      	ldr	r3, [pc, #316]	; (800cc94 <atan+0x324>)
 800cb56:	4620      	mov	r0, r4
 800cb58:	4629      	mov	r1, r5
 800cb5a:	f7f3 fba7 	bl	80002ac <__adddf3>
 800cb5e:	4602      	mov	r2, r0
 800cb60:	460b      	mov	r3, r1
 800cb62:	4630      	mov	r0, r6
 800cb64:	4639      	mov	r1, r7
 800cb66:	f7f3 fe81 	bl	800086c <__aeabi_ddiv>
 800cb6a:	f04f 0a01 	mov.w	sl, #1
 800cb6e:	4604      	mov	r4, r0
 800cb70:	460d      	mov	r5, r1
 800cb72:	e764      	b.n	800ca3e <atan+0xce>
 800cb74:	4b49      	ldr	r3, [pc, #292]	; (800cc9c <atan+0x32c>)
 800cb76:	429e      	cmp	r6, r3
 800cb78:	dc1d      	bgt.n	800cbb6 <atan+0x246>
 800cb7a:	ee10 0a10 	vmov	r0, s0
 800cb7e:	2200      	movs	r2, #0
 800cb80:	4b47      	ldr	r3, [pc, #284]	; (800cca0 <atan+0x330>)
 800cb82:	4629      	mov	r1, r5
 800cb84:	f7f3 fb90 	bl	80002a8 <__aeabi_dsub>
 800cb88:	2200      	movs	r2, #0
 800cb8a:	4606      	mov	r6, r0
 800cb8c:	460f      	mov	r7, r1
 800cb8e:	4b44      	ldr	r3, [pc, #272]	; (800cca0 <atan+0x330>)
 800cb90:	4620      	mov	r0, r4
 800cb92:	4629      	mov	r1, r5
 800cb94:	f7f3 fd40 	bl	8000618 <__aeabi_dmul>
 800cb98:	2200      	movs	r2, #0
 800cb9a:	4b3e      	ldr	r3, [pc, #248]	; (800cc94 <atan+0x324>)
 800cb9c:	f7f3 fb86 	bl	80002ac <__adddf3>
 800cba0:	4602      	mov	r2, r0
 800cba2:	460b      	mov	r3, r1
 800cba4:	4630      	mov	r0, r6
 800cba6:	4639      	mov	r1, r7
 800cba8:	f7f3 fe60 	bl	800086c <__aeabi_ddiv>
 800cbac:	f04f 0a02 	mov.w	sl, #2
 800cbb0:	4604      	mov	r4, r0
 800cbb2:	460d      	mov	r5, r1
 800cbb4:	e743      	b.n	800ca3e <atan+0xce>
 800cbb6:	462b      	mov	r3, r5
 800cbb8:	ee10 2a10 	vmov	r2, s0
 800cbbc:	2000      	movs	r0, #0
 800cbbe:	4939      	ldr	r1, [pc, #228]	; (800cca4 <atan+0x334>)
 800cbc0:	f7f3 fe54 	bl	800086c <__aeabi_ddiv>
 800cbc4:	f04f 0a03 	mov.w	sl, #3
 800cbc8:	4604      	mov	r4, r0
 800cbca:	460d      	mov	r5, r1
 800cbcc:	e737      	b.n	800ca3e <atan+0xce>
 800cbce:	4b36      	ldr	r3, [pc, #216]	; (800cca8 <atan+0x338>)
 800cbd0:	4e36      	ldr	r6, [pc, #216]	; (800ccac <atan+0x33c>)
 800cbd2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800cbd6:	4456      	add	r6, sl
 800cbd8:	449a      	add	sl, r3
 800cbda:	e9da 2300 	ldrd	r2, r3, [sl]
 800cbde:	f7f3 fb63 	bl	80002a8 <__aeabi_dsub>
 800cbe2:	4622      	mov	r2, r4
 800cbe4:	462b      	mov	r3, r5
 800cbe6:	f7f3 fb5f 	bl	80002a8 <__aeabi_dsub>
 800cbea:	4602      	mov	r2, r0
 800cbec:	460b      	mov	r3, r1
 800cbee:	e9d6 0100 	ldrd	r0, r1, [r6]
 800cbf2:	f7f3 fb59 	bl	80002a8 <__aeabi_dsub>
 800cbf6:	f1bb 0f00 	cmp.w	fp, #0
 800cbfa:	4604      	mov	r4, r0
 800cbfc:	460d      	mov	r5, r1
 800cbfe:	f6bf aed6 	bge.w	800c9ae <atan+0x3e>
 800cc02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc06:	461d      	mov	r5, r3
 800cc08:	e6d1      	b.n	800c9ae <atan+0x3e>
 800cc0a:	a51d      	add	r5, pc, #116	; (adr r5, 800cc80 <atan+0x310>)
 800cc0c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cc10:	e6cd      	b.n	800c9ae <atan+0x3e>
 800cc12:	bf00      	nop
 800cc14:	f3af 8000 	nop.w
 800cc18:	54442d18 	.word	0x54442d18
 800cc1c:	3ff921fb 	.word	0x3ff921fb
 800cc20:	8800759c 	.word	0x8800759c
 800cc24:	7e37e43c 	.word	0x7e37e43c
 800cc28:	e322da11 	.word	0xe322da11
 800cc2c:	3f90ad3a 	.word	0x3f90ad3a
 800cc30:	24760deb 	.word	0x24760deb
 800cc34:	3fa97b4b 	.word	0x3fa97b4b
 800cc38:	a0d03d51 	.word	0xa0d03d51
 800cc3c:	3fb10d66 	.word	0x3fb10d66
 800cc40:	c54c206e 	.word	0xc54c206e
 800cc44:	3fb745cd 	.word	0x3fb745cd
 800cc48:	920083ff 	.word	0x920083ff
 800cc4c:	3fc24924 	.word	0x3fc24924
 800cc50:	5555550d 	.word	0x5555550d
 800cc54:	3fd55555 	.word	0x3fd55555
 800cc58:	2c6a6c2f 	.word	0x2c6a6c2f
 800cc5c:	bfa2b444 	.word	0xbfa2b444
 800cc60:	52defd9a 	.word	0x52defd9a
 800cc64:	3fadde2d 	.word	0x3fadde2d
 800cc68:	af749a6d 	.word	0xaf749a6d
 800cc6c:	3fb3b0f2 	.word	0x3fb3b0f2
 800cc70:	fe231671 	.word	0xfe231671
 800cc74:	3fbc71c6 	.word	0x3fbc71c6
 800cc78:	9998ebc4 	.word	0x9998ebc4
 800cc7c:	3fc99999 	.word	0x3fc99999
 800cc80:	54442d18 	.word	0x54442d18
 800cc84:	bff921fb 	.word	0xbff921fb
 800cc88:	440fffff 	.word	0x440fffff
 800cc8c:	7ff00000 	.word	0x7ff00000
 800cc90:	3fdbffff 	.word	0x3fdbffff
 800cc94:	3ff00000 	.word	0x3ff00000
 800cc98:	3ff2ffff 	.word	0x3ff2ffff
 800cc9c:	40037fff 	.word	0x40037fff
 800cca0:	3ff80000 	.word	0x3ff80000
 800cca4:	bff00000 	.word	0xbff00000
 800cca8:	0800d040 	.word	0x0800d040
 800ccac:	0800d020 	.word	0x0800d020

0800ccb0 <fabs>:
 800ccb0:	ec51 0b10 	vmov	r0, r1, d0
 800ccb4:	ee10 2a10 	vmov	r2, s0
 800ccb8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ccbc:	ec43 2b10 	vmov	d0, r2, r3
 800ccc0:	4770      	bx	lr

0800ccc2 <matherr>:
 800ccc2:	2000      	movs	r0, #0
 800ccc4:	4770      	bx	lr
	...

0800ccc8 <nan>:
 800ccc8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ccd0 <nan+0x8>
 800cccc:	4770      	bx	lr
 800ccce:	bf00      	nop
 800ccd0:	00000000 	.word	0x00000000
 800ccd4:	7ff80000 	.word	0x7ff80000

0800ccd8 <_init>:
 800ccd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccda:	bf00      	nop
 800ccdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccde:	bc08      	pop	{r3}
 800cce0:	469e      	mov	lr, r3
 800cce2:	4770      	bx	lr

0800cce4 <_fini>:
 800cce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cce6:	bf00      	nop
 800cce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccea:	bc08      	pop	{r3}
 800ccec:	469e      	mov	lr, r3
 800ccee:	4770      	bx	lr
