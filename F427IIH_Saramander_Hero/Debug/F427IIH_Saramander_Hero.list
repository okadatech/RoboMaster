
F427IIH_Saramander_Hero.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc34  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000740  0800bde8  0800bde8  0001bde8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c528  0800c528  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c528  0800c528  0001c528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c530  0800c530  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c530  0800c530  0001c530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c534  0800c534  0001c534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800c538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000730  200001fc  0800c734  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000092c  0800c734  0002092c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000225e4  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004571  00000000  00000000  00042810  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00010ce1  00000000  00000000  00046d81  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000f18  00000000  00000000  00057a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002ba0  00000000  00000000  00058980  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000265d3  00000000  00000000  0005b520  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000123f5  00000000  00000000  00081af3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000dd465  00000000  00000000  00093ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0017134d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048f0  00000000  00000000  001713c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bdcc 	.word	0x0800bdcc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000200 	.word	0x20000200
 80001ec:	0800bdcc 	.word	0x0800bdcc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b972 	b.w	8000f64 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	4688      	mov	r8, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14b      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4615      	mov	r5, r2
 8000caa:	d967      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0720 	rsb	r7, r2, #32
 8000cb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cba:	fa20 f707 	lsr.w	r7, r0, r7
 8000cbe:	4095      	lsls	r5, r2
 8000cc0:	ea47 0803 	orr.w	r8, r7, r3
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cd0:	fa1f fc85 	uxth.w	ip, r5
 8000cd4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cd8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cdc:	fb07 f10c 	mul.w	r1, r7, ip
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18eb      	adds	r3, r5, r3
 8000ce6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cea:	f080 811b 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8118 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000cf4:	3f02      	subs	r7, #2
 8000cf6:	442b      	add	r3, r5
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0c:	45a4      	cmp	ip, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	192c      	adds	r4, r5, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 8107 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000d1a:	45a4      	cmp	ip, r4
 8000d1c:	f240 8104 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000d20:	3802      	subs	r0, #2
 8000d22:	442c      	add	r4, r5
 8000d24:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d28:	eba4 040c 	sub.w	r4, r4, ip
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	b11e      	cbz	r6, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c6 4300 	strd	r4, r3, [r6]
 8000d38:	4639      	mov	r1, r7
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0xbe>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80eb 	beq.w	8000f1e <__udivmoddi4+0x286>
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d4e:	4638      	mov	r0, r7
 8000d50:	4639      	mov	r1, r7
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f783 	clz	r7, r3
 8000d5a:	2f00      	cmp	r7, #0
 8000d5c:	d147      	bne.n	8000dee <__udivmoddi4+0x156>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0xd0>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80fa 	bhi.w	8000f5c <__udivmoddi4+0x2c4>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	4698      	mov	r8, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d0e0      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000d76:	e9c6 4800 	strd	r4, r8, [r6]
 8000d7a:	e7dd      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000d7c:	b902      	cbnz	r2, 8000d80 <__udivmoddi4+0xe8>
 8000d7e:	deff      	udf	#255	; 0xff
 8000d80:	fab2 f282 	clz	r2, r2
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f040 808f 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d8a:	1b49      	subs	r1, r1, r5
 8000d8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d90:	fa1f f885 	uxth.w	r8, r5
 8000d94:	2701      	movs	r7, #1
 8000d96:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d9a:	0c23      	lsrs	r3, r4, #16
 8000d9c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb08 f10c 	mul.w	r1, r8, ip
 8000da8:	4299      	cmp	r1, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000dac:	18eb      	adds	r3, r5, r3
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4299      	cmp	r1, r3
 8000db6:	f200 80cd 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1a59      	subs	r1, r3, r1
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dc8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x14c>
 8000dd4:	192c      	adds	r4, r5, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x14a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80b6 	bhi.w	8000f4e <__udivmoddi4+0x2b6>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e79f      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dee:	f1c7 0c20 	rsb	ip, r7, #32
 8000df2:	40bb      	lsls	r3, r7
 8000df4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000df8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dfc:	fa01 f407 	lsl.w	r4, r1, r7
 8000e00:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e04:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e08:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e0c:	4325      	orrs	r5, r4
 8000e0e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e12:	0c2c      	lsrs	r4, r5, #16
 8000e14:	fb08 3319 	mls	r3, r8, r9, r3
 8000e18:	fa1f fa8e 	uxth.w	sl, lr
 8000e1c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e20:	fb09 f40a 	mul.w	r4, r9, sl
 8000e24:	429c      	cmp	r4, r3
 8000e26:	fa02 f207 	lsl.w	r2, r2, r7
 8000e2a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1e 0303 	adds.w	r3, lr, r3
 8000e34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e38:	f080 8087 	bcs.w	8000f4a <__udivmoddi4+0x2b2>
 8000e3c:	429c      	cmp	r4, r3
 8000e3e:	f240 8084 	bls.w	8000f4a <__udivmoddi4+0x2b2>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4473      	add	r3, lr
 8000e48:	1b1b      	subs	r3, r3, r4
 8000e4a:	b2ad      	uxth	r5, r5
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3310 	mls	r3, r8, r0, r3
 8000e54:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e58:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e5c:	45a2      	cmp	sl, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1e 0404 	adds.w	r4, lr, r4
 8000e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e68:	d26b      	bcs.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6a:	45a2      	cmp	sl, r4
 8000e6c:	d969      	bls.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4474      	add	r4, lr
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7a:	eba4 040a 	sub.w	r4, r4, sl
 8000e7e:	454c      	cmp	r4, r9
 8000e80:	46c2      	mov	sl, r8
 8000e82:	464b      	mov	r3, r9
 8000e84:	d354      	bcc.n	8000f30 <__udivmoddi4+0x298>
 8000e86:	d051      	beq.n	8000f2c <__udivmoddi4+0x294>
 8000e88:	2e00      	cmp	r6, #0
 8000e8a:	d069      	beq.n	8000f60 <__udivmoddi4+0x2c8>
 8000e8c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e90:	eb64 0403 	sbc.w	r4, r4, r3
 8000e94:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e98:	40fd      	lsrs	r5, r7
 8000e9a:	40fc      	lsrs	r4, r7
 8000e9c:	ea4c 0505 	orr.w	r5, ip, r5
 8000ea0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ea4:	2700      	movs	r7, #0
 8000ea6:	e747      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f703 	lsr.w	r7, r0, r3
 8000eb0:	4095      	lsls	r5, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ebe:	4338      	orrs	r0, r7
 8000ec0:	0c01      	lsrs	r1, r0, #16
 8000ec2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ec6:	fa1f f885 	uxth.w	r8, r5
 8000eca:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb07 f308 	mul.w	r3, r7, r8
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	fa04 f402 	lsl.w	r4, r4, r2
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x256>
 8000ede:	1869      	adds	r1, r5, r1
 8000ee0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ee4:	d22f      	bcs.n	8000f46 <__udivmoddi4+0x2ae>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	d92d      	bls.n	8000f46 <__udivmoddi4+0x2ae>
 8000eea:	3f02      	subs	r7, #2
 8000eec:	4429      	add	r1, r5
 8000eee:	1acb      	subs	r3, r1, r3
 8000ef0:	b281      	uxth	r1, r0
 8000ef2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000efe:	fb00 f308 	mul.w	r3, r0, r8
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x27e>
 8000f06:	1869      	adds	r1, r5, r1
 8000f08:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0c:	d217      	bcs.n	8000f3e <__udivmoddi4+0x2a6>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d915      	bls.n	8000f3e <__udivmoddi4+0x2a6>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4429      	add	r1, r5
 8000f16:	1ac9      	subs	r1, r1, r3
 8000f18:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f1c:	e73b      	b.n	8000d96 <__udivmoddi4+0xfe>
 8000f1e:	4637      	mov	r7, r6
 8000f20:	4630      	mov	r0, r6
 8000f22:	e709      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f24:	4607      	mov	r7, r0
 8000f26:	e6e7      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fb      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f2c:	4541      	cmp	r1, r8
 8000f2e:	d2ab      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f30:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f34:	eb69 020e 	sbc.w	r2, r9, lr
 8000f38:	3801      	subs	r0, #1
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	e7a4      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f3e:	4660      	mov	r0, ip
 8000f40:	e7e9      	b.n	8000f16 <__udivmoddi4+0x27e>
 8000f42:	4618      	mov	r0, r3
 8000f44:	e795      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f46:	4667      	mov	r7, ip
 8000f48:	e7d1      	b.n	8000eee <__udivmoddi4+0x256>
 8000f4a:	4681      	mov	r9, r0
 8000f4c:	e77c      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	442c      	add	r4, r5
 8000f52:	e747      	b.n	8000de4 <__udivmoddi4+0x14c>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	442b      	add	r3, r5
 8000f5a:	e72f      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f5c:	4638      	mov	r0, r7
 8000f5e:	e708      	b.n	8000d72 <__udivmoddi4+0xda>
 8000f60:	4637      	mov	r7, r6
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0xa0>

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f6a:	4a0e      	ldr	r2, [pc, #56]	; (8000fa4 <HAL_InitTick+0x3c>)
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <HAL_InitTick+0x40>)
 8000f6e:	7812      	ldrb	r2, [r2, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
{
 8000f72:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f78:	fbb0 f0f2 	udiv	r0, r0, r2
 8000f7c:	fbb3 f0f0 	udiv	r0, r3, r0
 8000f80:	f000 fc0a 	bl	8001798 <HAL_SYSTICK_Config>
 8000f84:	b908      	cbnz	r0, 8000f8a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f86:	2d0f      	cmp	r5, #15
 8000f88:	d901      	bls.n	8000f8e <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000f8a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000f8c:	bd38      	pop	{r3, r4, r5, pc}
 8000f8e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f90:	4602      	mov	r2, r0
 8000f92:	4629      	mov	r1, r5
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295
 8000f98:	f000 fbba 	bl	8001710 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f9c:	4b03      	ldr	r3, [pc, #12]	; (8000fac <HAL_InitTick+0x44>)
 8000f9e:	4620      	mov	r0, r4
 8000fa0:	601d      	str	r5, [r3, #0]
}
 8000fa2:	bd38      	pop	{r3, r4, r5, pc}
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	20000024 	.word	0x20000024
 8000fac:	20000004 	.word	0x20000004

08000fb0 <HAL_Init>:
{
 8000fb0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <HAL_Init+0x30>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fba:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fc2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fca:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f000 fb8d 	bl	80016ec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f7ff ffc8 	bl	8000f68 <HAL_InitTick>
  HAL_MspInit();
 8000fd8:	f005 fbf2 	bl	80067c0 <HAL_MspInit>
}
 8000fdc:	2000      	movs	r0, #0
 8000fde:	bd08      	pop	{r3, pc}
 8000fe0:	40023c00 	.word	0x40023c00

08000fe4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000fe4:	4a03      	ldr	r2, [pc, #12]	; (8000ff4 <HAL_IncTick+0x10>)
 8000fe6:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <HAL_IncTick+0x14>)
 8000fe8:	6811      	ldr	r1, [r2, #0]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	440b      	add	r3, r1
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	200002d4 	.word	0x200002d4
 8000ff8:	20000000 	.word	0x20000000

08000ffc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ffc:	4b01      	ldr	r3, [pc, #4]	; (8001004 <HAL_GetTick+0x8>)
 8000ffe:	6818      	ldr	r0, [r3, #0]
}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	200002d4 	.word	0x200002d4

08001008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001008:	b538      	push	{r3, r4, r5, lr}
 800100a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800100c:	f7ff fff6 	bl	8000ffc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001010:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001012:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001014:	d002      	beq.n	800101c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001016:	4b04      	ldr	r3, [pc, #16]	; (8001028 <HAL_Delay+0x20>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800101c:	f7ff ffee 	bl	8000ffc <HAL_GetTick>
 8001020:	1b40      	subs	r0, r0, r5
 8001022:	42a0      	cmp	r0, r4
 8001024:	d3fa      	bcc.n	800101c <HAL_Delay+0x14>
  {
  }
}
 8001026:	bd38      	pop	{r3, r4, r5, pc}
 8001028:	20000000 	.word	0x20000000

0800102c <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800102c:	2800      	cmp	r0, #0
 800102e:	d07c      	beq.n	800112a <HAL_CAN_Init+0xfe>
{
 8001030:	b538      	push	{r3, r4, r5, lr}
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001032:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001036:	4604      	mov	r4, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d073      	beq.n	8001124 <HAL_CAN_Init+0xf8>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800103c:	6822      	ldr	r2, [r4, #0]
 800103e:	6813      	ldr	r3, [r2, #0]
 8001040:	f023 0302 	bic.w	r3, r3, #2
 8001044:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001046:	f7ff ffd9 	bl	8000ffc <HAL_GetTick>
 800104a:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800104c:	e004      	b.n	8001058 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800104e:	f7ff ffd5 	bl	8000ffc <HAL_GetTick>
 8001052:	1b40      	subs	r0, r0, r5
 8001054:	280a      	cmp	r0, #10
 8001056:	d85c      	bhi.n	8001112 <HAL_CAN_Init+0xe6>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001058:	6823      	ldr	r3, [r4, #0]
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	0791      	lsls	r1, r2, #30
 800105e:	d4f6      	bmi.n	800104e <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	f042 0201 	orr.w	r2, r2, #1
 8001066:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001068:	f7ff ffc8 	bl	8000ffc <HAL_GetTick>
 800106c:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800106e:	e004      	b.n	800107a <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001070:	f7ff ffc4 	bl	8000ffc <HAL_GetTick>
 8001074:	1b40      	subs	r0, r0, r5
 8001076:	280a      	cmp	r0, #10
 8001078:	d84b      	bhi.n	8001112 <HAL_CAN_Init+0xe6>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800107a:	6823      	ldr	r3, [r4, #0]
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	07d2      	lsls	r2, r2, #31
 8001080:	d5f6      	bpl.n	8001070 <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001082:	7e22      	ldrb	r2, [r4, #24]
 8001084:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	bf0c      	ite	eq
 800108a:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800108e:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8001092:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001094:	7e62      	ldrb	r2, [r4, #25]
 8001096:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	bf0c      	ite	eq
 800109c:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010a0:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80010a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010a6:	7ea2      	ldrb	r2, [r4, #26]
 80010a8:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	bf0c      	ite	eq
 80010ae:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010b2:	f022 0220 	bicne.w	r2, r2, #32
 80010b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010b8:	7ee2      	ldrb	r2, [r4, #27]
 80010ba:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	bf0c      	ite	eq
 80010c0:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010c4:	f042 0210 	orrne.w	r2, r2, #16
 80010c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010ca:	7f22      	ldrb	r2, [r4, #28]
 80010cc:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	bf0c      	ite	eq
 80010d2:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010d6:	f022 0208 	bicne.w	r2, r2, #8
 80010da:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80010dc:	7f62      	ldrb	r2, [r4, #29]
 80010de:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	bf0c      	ite	eq
 80010e4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010e8:	f022 0204 	bicne.w	r2, r2, #4
 80010ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80010ee:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80010f2:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
 80010f6:	430a      	orrs	r2, r1
 80010f8:	6861      	ldr	r1, [r4, #4]
 80010fa:	432a      	orrs	r2, r5
 80010fc:	4302      	orrs	r2, r0
 80010fe:	3901      	subs	r1, #1
 8001100:	430a      	orrs	r2, r1

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001102:	2501      	movs	r5, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001104:	2100      	movs	r1, #0
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001106:	61da      	str	r2, [r3, #28]

  /* Return function status */
  return HAL_OK;
 8001108:	4608      	mov	r0, r1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800110a:	6261      	str	r1, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800110c:	f884 5020 	strb.w	r5, [r4, #32]
}
 8001110:	bd38      	pop	{r3, r4, r5, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001112:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8001114:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001116:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800111a:	6263      	str	r3, [r4, #36]	; 0x24
      return HAL_ERROR;
 800111c:	2001      	movs	r0, #1
      hcan->State = HAL_CAN_STATE_ERROR;
 800111e:	f884 2020 	strb.w	r2, [r4, #32]
}
 8001122:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8001124:	f003 f8f2 	bl	800430c <HAL_CAN_MspInit>
 8001128:	e788      	b.n	800103c <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 800112a:	2001      	movs	r0, #1
}
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop

08001130 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001130:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8001134:	3b01      	subs	r3, #1
 8001136:	2b01      	cmp	r3, #1
 8001138:	d905      	bls.n	8001146 <HAL_CAN_ConfigFilter+0x16>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800113a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800113c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001140:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001142:	2001      	movs	r0, #1
  }
}
 8001144:	4770      	bx	lr
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001146:	4b3c      	ldr	r3, [pc, #240]	; (8001238 <HAL_CAN_ConfigFilter+0x108>)
 8001148:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800114c:	f042 0201 	orr.w	r2, r2, #1
{
 8001150:	b4f0      	push	{r4, r5, r6, r7}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001152:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001156:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800115a:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800115e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001162:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001166:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8001168:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800116c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001170:	694a      	ldr	r2, [r1, #20]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001172:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001176:	2401      	movs	r4, #1
 8001178:	f002 001f 	and.w	r0, r2, #31
 800117c:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001180:	43c4      	mvns	r4, r0
 8001182:	4025      	ands	r5, r4
 8001184:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001188:	69cd      	ldr	r5, [r1, #28]
 800118a:	2d00      	cmp	r5, #0
 800118c:	d03a      	beq.n	8001204 <HAL_CAN_ConfigFilter+0xd4>
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800118e:	2d01      	cmp	r5, #1
 8001190:	d115      	bne.n	80011be <HAL_CAN_ConfigFilter+0x8e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001192:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8001196:	4305      	orrs	r5, r0
 8001198:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
 800119c:	00d2      	lsls	r2, r2, #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800119e:	680f      	ldr	r7, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011a0:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011a2:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80011a4:	898b      	ldrh	r3, [r1, #12]
 80011a6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80011aa:	f502 42c8 	add.w	r2, r2, #25600	; 0x6400
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011ae:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011b2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011b6:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011ba:	f8c2 3244 	str.w	r3, [r2, #580]	; 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80011be:	698b      	ldr	r3, [r1, #24]
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80011c0:	4a1d      	ldr	r2, [pc, #116]	; (8001238 <HAL_CAN_ConfigFilter+0x108>)
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80011c2:	bb9b      	cbnz	r3, 800122c <HAL_CAN_ConfigFilter+0xfc>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80011c4:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 80011c8:	4023      	ands	r3, r4
 80011ca:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80011ce:	690b      	ldr	r3, [r1, #16]
 80011d0:	bb2b      	cbnz	r3, 800121e <HAL_CAN_ConfigFilter+0xee>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <HAL_CAN_ConfigFilter+0x108>)
 80011d4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80011d8:	4014      	ands	r4, r2
 80011da:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80011de:	6a0b      	ldr	r3, [r1, #32]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d105      	bne.n	80011f0 <HAL_CAN_ConfigFilter+0xc0>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80011e4:	4a14      	ldr	r2, [pc, #80]	; (8001238 <HAL_CAN_ConfigFilter+0x108>)
 80011e6:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
 80011ea:	4318      	orrs	r0, r3
 80011ec:	f8c2 021c 	str.w	r0, [r2, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011f0:	4a11      	ldr	r2, [pc, #68]	; (8001238 <HAL_CAN_ConfigFilter+0x108>)
 80011f2:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 80011f6:	f023 0301 	bic.w	r3, r3, #1
    return HAL_OK;
 80011fa:	2000      	movs	r0, #0
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011fc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 8001200:	bcf0      	pop	{r4, r5, r6, r7}
 8001202:	4770      	bx	lr
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001204:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8001208:	4025      	ands	r5, r4
 800120a:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
 800120e:	00d2      	lsls	r2, r2, #3
 8001210:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001214:	68cf      	ldr	r7, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001216:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001218:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800121a:	880b      	ldrh	r3, [r1, #0]
 800121c:	e7c5      	b.n	80011aa <HAL_CAN_ConfigFilter+0x7a>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800121e:	4a06      	ldr	r2, [pc, #24]	; (8001238 <HAL_CAN_ConfigFilter+0x108>)
 8001220:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8001224:	4303      	orrs	r3, r0
 8001226:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 800122a:	e7d8      	b.n	80011de <HAL_CAN_ConfigFilter+0xae>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800122c:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 8001230:	4303      	orrs	r3, r0
 8001232:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 8001236:	e7ca      	b.n	80011ce <HAL_CAN_ConfigFilter+0x9e>
 8001238:	40006400 	.word	0x40006400

0800123c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800123c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800123e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d005      	beq.n	8001252 <HAL_CAN_Start+0x16>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001246:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001248:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800124c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800124e:	2001      	movs	r0, #1
  }
}
 8001250:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001252:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001254:	2302      	movs	r3, #2
 8001256:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800125a:	6813      	ldr	r3, [r2, #0]
 800125c:	f023 0301 	bic.w	r3, r3, #1
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8001264:	f7ff feca 	bl	8000ffc <HAL_GetTick>
 8001268:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800126a:	e004      	b.n	8001276 <HAL_CAN_Start+0x3a>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800126c:	f7ff fec6 	bl	8000ffc <HAL_GetTick>
 8001270:	1b40      	subs	r0, r0, r5
 8001272:	280a      	cmp	r0, #10
 8001274:	d807      	bhi.n	8001286 <HAL_CAN_Start+0x4a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001276:	6823      	ldr	r3, [r4, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f013 0301 	ands.w	r3, r3, #1
 800127e:	d1f5      	bne.n	800126c <HAL_CAN_Start+0x30>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001280:	6263      	str	r3, [r4, #36]	; 0x24
    return HAL_OK;
 8001282:	4618      	mov	r0, r3
}
 8001284:	bd38      	pop	{r3, r4, r5, pc}
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001286:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8001288:	2205      	movs	r2, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800128a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800128e:	6263      	str	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 8001290:	2001      	movs	r0, #1
        hcan->State = HAL_CAN_STATE_ERROR;
 8001292:	f884 2020 	strb.w	r2, [r4, #32]
}
 8001296:	bd38      	pop	{r3, r4, r5, pc}

08001298 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001298:	b470      	push	{r4, r5, r6}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800129a:	f890 4020 	ldrb.w	r4, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800129e:	6805      	ldr	r5, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80012a0:	3c01      	subs	r4, #1
 80012a2:	2c01      	cmp	r4, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80012a4:	68ae      	ldr	r6, [r5, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 80012a6:	d906      	bls.n	80012b6 <HAL_CAN_AddTxMessage+0x1e>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80012aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ae:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80012b0:	2001      	movs	r0, #1
  }
}
 80012b2:	bc70      	pop	{r4, r5, r6}
 80012b4:	4770      	bx	lr
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012b6:	f016 5fe0 	tst.w	r6, #469762048	; 0x1c000000
 80012ba:	d02e      	beq.n	800131a <HAL_CAN_AddTxMessage+0x82>
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80012bc:	f3c6 6601 	ubfx	r6, r6, #24, #2
      if (transmitmailbox > 2U)
 80012c0:	2e03      	cmp	r6, #3
 80012c2:	d031      	beq.n	8001328 <HAL_CAN_AddTxMessage+0x90>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80012c4:	2001      	movs	r0, #1
 80012c6:	40b0      	lsls	r0, r6
 80012c8:	6018      	str	r0, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 80012ca:	688b      	ldr	r3, [r1, #8]
 80012cc:	bb93      	cbnz	r3, 8001334 <HAL_CAN_AddTxMessage+0x9c>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012ce:	680c      	ldr	r4, [r1, #0]
 80012d0:	68c8      	ldr	r0, [r1, #12]
 80012d2:	f106 0318 	add.w	r3, r6, #24
 80012d6:	011b      	lsls	r3, r3, #4
 80012d8:	ea40 5044 	orr.w	r0, r0, r4, lsl #21
 80012dc:	50e8      	str	r0, [r5, r3]
      if (pHeader->TransmitGlobalTime == ENABLE)
 80012de:	7d08      	ldrb	r0, [r1, #20]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80012e0:	6909      	ldr	r1, [r1, #16]
 80012e2:	0136      	lsls	r6, r6, #4
 80012e4:	19ab      	adds	r3, r5, r6
      if (pHeader->TransmitGlobalTime == ENABLE)
 80012e6:	2801      	cmp	r0, #1
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80012e8:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 80012ec:	d105      	bne.n	80012fa <HAL_CAN_AddTxMessage+0x62>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80012ee:	f8d3 1184 	ldr.w	r1, [r3, #388]	; 0x184
 80012f2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80012f6:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80012fa:	4435      	add	r5, r6
 80012fc:	6851      	ldr	r1, [r2, #4]
 80012fe:	f8c5 118c 	str.w	r1, [r5, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001302:	6812      	ldr	r2, [r2, #0]
 8001304:	f8c5 2188 	str.w	r2, [r5, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001308:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800130c:	f042 0201 	orr.w	r2, r2, #1
      return HAL_OK;
 8001310:	2000      	movs	r0, #0
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001312:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
 8001316:	bc70      	pop	{r4, r5, r6}
 8001318:	4770      	bx	lr
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800131a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800131c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001320:	6243      	str	r3, [r0, #36]	; 0x24
}
 8001322:	bc70      	pop	{r4, r5, r6}
      return HAL_ERROR;
 8001324:	2001      	movs	r0, #1
}
 8001326:	4770      	bx	lr
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001328:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800132a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800132e:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 8001330:	2001      	movs	r0, #1
 8001332:	e7be      	b.n	80012b2 <HAL_CAN_AddTxMessage+0x1a>
                                                           pHeader->IDE |
 8001334:	68c8      	ldr	r0, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001336:	684c      	ldr	r4, [r1, #4]
                                                           pHeader->IDE |
 8001338:	4303      	orrs	r3, r0
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800133a:	f106 0018 	add.w	r0, r6, #24
 800133e:	0100      	lsls	r0, r0, #4
                                                           pHeader->IDE |
 8001340:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001344:	502b      	str	r3, [r5, r0]
 8001346:	e7ca      	b.n	80012de <HAL_CAN_AddTxMessage+0x46>

08001348 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 800134c:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001350:	3c01      	subs	r4, #1
 8001352:	2c01      	cmp	r4, #1
 8001354:	d906      	bls.n	8001364 <HAL_CAN_GetRxMessage+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001356:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800135c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800135e:	2001      	movs	r0, #1
  }
}
 8001360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001364:	6805      	ldr	r5, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001366:	2900      	cmp	r1, #0
 8001368:	d058      	beq.n	800141c <HAL_CAN_GetRxMessage+0xd4>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800136a:	692c      	ldr	r4, [r5, #16]
 800136c:	07a4      	lsls	r4, r4, #30
 800136e:	d058      	beq.n	8001422 <HAL_CAN_GetRxMessage+0xda>
 8001370:	010c      	lsls	r4, r1, #4
 8001372:	192e      	adds	r6, r5, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001374:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 8001378:	f007 0704 	and.w	r7, r7, #4
 800137c:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800137e:	2f00      	cmp	r7, #0
 8001380:	d15c      	bne.n	800143c <HAL_CAN_GetRxMessage+0xf4>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001382:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 8001386:	0d7f      	lsrs	r7, r7, #21
 8001388:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 800138a:	f8d6 e1b0 	ldr.w	lr, [r6, #432]	; 0x1b0
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800138e:	f8d6 c1b4 	ldr.w	ip, [r6, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001392:	f8d6 71b4 	ldr.w	r7, [r6, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001396:	f8d6 61b4 	ldr.w	r6, [r6, #436]	; 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800139a:	4425      	add	r5, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 800139c:	f3ce 0e40 	ubfx	lr, lr, #1, #1
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80013a0:	f8d5 81b8 	ldr.w	r8, [r5, #440]	; 0x1b8
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80013a4:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80013a8:	f00c 050f 	and.w	r5, ip, #15
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80013ac:	0c36      	lsrs	r6, r6, #16
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80013ae:	e9c2 e503 	strd	lr, r5, [r2, #12]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80013b2:	e9c2 6705 	strd	r6, r7, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80013b6:	f883 8000 	strb.w	r8, [r3]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80013ba:	6802      	ldr	r2, [r0, #0]
 80013bc:	4422      	add	r2, r4
 80013be:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80013c2:	0a12      	lsrs	r2, r2, #8
 80013c4:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80013c6:	6802      	ldr	r2, [r0, #0]
 80013c8:	4422      	add	r2, r4
 80013ca:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80013ce:	0c12      	lsrs	r2, r2, #16
 80013d0:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80013d2:	6802      	ldr	r2, [r0, #0]
 80013d4:	4422      	add	r2, r4
 80013d6:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80013da:	0e12      	lsrs	r2, r2, #24
 80013dc:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80013de:	6802      	ldr	r2, [r0, #0]
 80013e0:	4422      	add	r2, r4
 80013e2:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80013e6:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80013e8:	6802      	ldr	r2, [r0, #0]
 80013ea:	4422      	add	r2, r4
 80013ec:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80013f0:	0a12      	lsrs	r2, r2, #8
 80013f2:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80013f4:	6802      	ldr	r2, [r0, #0]
 80013f6:	4422      	add	r2, r4
 80013f8:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80013fc:	0c12      	lsrs	r2, r2, #16
 80013fe:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001400:	6802      	ldr	r2, [r0, #0]
 8001402:	4414      	add	r4, r2
 8001404:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 8001408:	0e12      	lsrs	r2, r2, #24
 800140a:	71da      	strb	r2, [r3, #7]
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800140c:	6802      	ldr	r2, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800140e:	b979      	cbnz	r1, 8001430 <HAL_CAN_GetRxMessage+0xe8>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001410:	68d3      	ldr	r3, [r2, #12]
 8001412:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 8001416:	4608      	mov	r0, r1
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001418:	60d3      	str	r3, [r2, #12]
 800141a:	e7a1      	b.n	8001360 <HAL_CAN_GetRxMessage+0x18>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800141c:	68ec      	ldr	r4, [r5, #12]
 800141e:	07a6      	lsls	r6, r4, #30
 8001420:	d1a6      	bne.n	8001370 <HAL_CAN_GetRxMessage+0x28>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001422:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001424:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001428:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 800142a:	2001      	movs	r0, #1
}
 800142c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001430:	6913      	ldr	r3, [r2, #16]
 8001432:	f043 0320 	orr.w	r3, r3, #32
 8001436:	6113      	str	r3, [r2, #16]
    return HAL_OK;
 8001438:	2000      	movs	r0, #0
 800143a:	e791      	b.n	8001360 <HAL_CAN_GetRxMessage+0x18>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800143c:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 8001440:	08ff      	lsrs	r7, r7, #3
 8001442:	6057      	str	r7, [r2, #4]
 8001444:	e7a1      	b.n	800138a <HAL_CAN_GetRxMessage+0x42>
 8001446:	bf00      	nop

08001448 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8001448:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800144c:	3b01      	subs	r3, #1
 800144e:	2b01      	cmp	r3, #1
 8001450:	d905      	bls.n	800145e <HAL_CAN_ActivateNotification+0x16>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001452:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001458:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800145a:	2001      	movs	r0, #1
  }
}
 800145c:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800145e:	6802      	ldr	r2, [r0, #0]
 8001460:	6953      	ldr	r3, [r2, #20]
 8001462:	4319      	orrs	r1, r3
 8001464:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8001466:	2000      	movs	r0, #0
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop

0800146c <HAL_CAN_TxMailbox0CompleteCallback>:
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop

08001470 <HAL_CAN_TxMailbox1CompleteCallback>:
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop

08001474 <HAL_CAN_TxMailbox2CompleteCallback>:
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop

08001478 <HAL_CAN_TxMailbox0AbortCallback>:
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop

0800147c <HAL_CAN_TxMailbox1AbortCallback>:
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop

08001480 <HAL_CAN_TxMailbox2AbortCallback>:
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop

08001484 <HAL_CAN_RxFifo0FullCallback>:
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop

08001488 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop

0800148c <HAL_CAN_RxFifo1FullCallback>:
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop

08001490 <HAL_CAN_SleepCallback>:
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop

08001494 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop

08001498 <HAL_CAN_ErrorCallback>:
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop

0800149c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800149c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80014a0:	6803      	ldr	r3, [r0, #0]
 80014a2:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80014a4:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80014a8:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80014aa:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80014ae:	f8d3 9010 	ldr.w	r9, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80014b2:	f8d3 a018 	ldr.w	sl, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80014b6:	f014 0601 	ands.w	r6, r4, #1
{
 80014ba:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80014bc:	d025      	beq.n	800150a <HAL_CAN_IRQHandler+0x6e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80014be:	f017 0601 	ands.w	r6, r7, #1
 80014c2:	f040 809c 	bne.w	80015fe <HAL_CAN_IRQHandler+0x162>
 80014c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80014ce:	05f8      	lsls	r0, r7, #23
 80014d0:	d50d      	bpl.n	80014ee <HAL_CAN_IRQHandler+0x52>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80014d2:	682b      	ldr	r3, [r5, #0]
 80014d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80014d8:	6098      	str	r0, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80014da:	05bb      	lsls	r3, r7, #22
 80014dc:	f100 80c7 	bmi.w	800166e <HAL_CAN_IRQHandler+0x1d2>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80014e0:	0578      	lsls	r0, r7, #21
 80014e2:	f100 80d7 	bmi.w	8001694 <HAL_CAN_IRQHandler+0x1f8>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80014e6:	053a      	lsls	r2, r7, #20
 80014e8:	f140 80e8 	bpl.w	80016bc <HAL_CAN_IRQHandler+0x220>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80014ec:	460e      	mov	r6, r1
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80014ee:	03fb      	lsls	r3, r7, #15
 80014f0:	d50b      	bpl.n	800150a <HAL_CAN_IRQHandler+0x6e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80014f2:	682b      	ldr	r3, [r5, #0]
 80014f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80014f8:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80014fa:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80014fc:	f100 80b3 	bmi.w	8001666 <HAL_CAN_IRQHandler+0x1ca>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001500:	0379      	lsls	r1, r7, #13
 8001502:	f140 80c9 	bpl.w	8001698 <HAL_CAN_IRQHandler+0x1fc>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001506:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800150a:	0723      	lsls	r3, r4, #28
 800150c:	d502      	bpl.n	8001514 <HAL_CAN_IRQHandler+0x78>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800150e:	f01b 0f10 	tst.w	fp, #16
 8001512:	d16e      	bne.n	80015f2 <HAL_CAN_IRQHandler+0x156>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001514:	0767      	lsls	r7, r4, #29
 8001516:	d502      	bpl.n	800151e <HAL_CAN_IRQHandler+0x82>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001518:	f01b 0f08 	tst.w	fp, #8
 800151c:	d17f      	bne.n	800161e <HAL_CAN_IRQHandler+0x182>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800151e:	07a0      	lsls	r0, r4, #30
 8001520:	d504      	bpl.n	800152c <HAL_CAN_IRQHandler+0x90>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001522:	682b      	ldr	r3, [r5, #0]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	0799      	lsls	r1, r3, #30
 8001528:	f040 808e 	bne.w	8001648 <HAL_CAN_IRQHandler+0x1ac>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800152c:	0662      	lsls	r2, r4, #25
 800152e:	d502      	bpl.n	8001536 <HAL_CAN_IRQHandler+0x9a>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001530:	f019 0f10 	tst.w	r9, #16
 8001534:	d157      	bne.n	80015e6 <HAL_CAN_IRQHandler+0x14a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001536:	06a3      	lsls	r3, r4, #26
 8001538:	d503      	bpl.n	8001542 <HAL_CAN_IRQHandler+0xa6>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800153a:	f019 0f08 	tst.w	r9, #8
 800153e:	f040 8087 	bne.w	8001650 <HAL_CAN_IRQHandler+0x1b4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001542:	06e7      	lsls	r7, r4, #27
 8001544:	d504      	bpl.n	8001550 <HAL_CAN_IRQHandler+0xb4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001546:	682b      	ldr	r3, [r5, #0]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	0798      	lsls	r0, r3, #30
 800154c:	f040 8087 	bne.w	800165e <HAL_CAN_IRQHandler+0x1c2>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001550:	03a1      	lsls	r1, r4, #14
 8001552:	d502      	bpl.n	800155a <HAL_CAN_IRQHandler+0xbe>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001554:	f018 0f10 	tst.w	r8, #16
 8001558:	d168      	bne.n	800162c <HAL_CAN_IRQHandler+0x190>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800155a:	03e2      	lsls	r2, r4, #15
 800155c:	d502      	bpl.n	8001564 <HAL_CAN_IRQHandler+0xc8>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800155e:	f018 0f08 	tst.w	r8, #8
 8001562:	d16a      	bne.n	800163a <HAL_CAN_IRQHandler+0x19e>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001564:	0423      	lsls	r3, r4, #16
 8001566:	d535      	bpl.n	80015d4 <HAL_CAN_IRQHandler+0x138>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001568:	f018 0f04 	tst.w	r8, #4
 800156c:	682b      	ldr	r3, [r5, #0]
 800156e:	d02f      	beq.n	80015d0 <HAL_CAN_IRQHandler+0x134>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001570:	05e7      	lsls	r7, r4, #23
 8001572:	d504      	bpl.n	800157e <HAL_CAN_IRQHandler+0xe2>
 8001574:	f01a 0f01 	tst.w	sl, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001578:	bf18      	it	ne
 800157a:	f046 0601 	orrne.w	r6, r6, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800157e:	05a0      	lsls	r0, r4, #22
 8001580:	d504      	bpl.n	800158c <HAL_CAN_IRQHandler+0xf0>
 8001582:	f01a 0f02 	tst.w	sl, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001586:	bf18      	it	ne
 8001588:	f046 0602 	orrne.w	r6, r6, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800158c:	0561      	lsls	r1, r4, #21
 800158e:	d504      	bpl.n	800159a <HAL_CAN_IRQHandler+0xfe>
 8001590:	f01a 0f04 	tst.w	sl, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001594:	bf18      	it	ne
 8001596:	f046 0604 	orrne.w	r6, r6, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800159a:	0522      	lsls	r2, r4, #20
 800159c:	d518      	bpl.n	80015d0 <HAL_CAN_IRQHandler+0x134>
 800159e:	f01a 0a70 	ands.w	sl, sl, #112	; 0x70
 80015a2:	d015      	beq.n	80015d0 <HAL_CAN_IRQHandler+0x134>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 80015a4:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 80015a8:	f000 8096 	beq.w	80016d8 <HAL_CAN_IRQHandler+0x23c>
 80015ac:	d979      	bls.n	80016a2 <HAL_CAN_IRQHandler+0x206>
 80015ae:	f1ba 0f50 	cmp.w	sl, #80	; 0x50
 80015b2:	f000 808e 	beq.w	80016d2 <HAL_CAN_IRQHandler+0x236>
 80015b6:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 80015ba:	f000 8090 	beq.w	80016de <HAL_CAN_IRQHandler+0x242>
 80015be:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 80015c2:	d101      	bne.n	80015c8 <HAL_CAN_IRQHandler+0x12c>
            /* Set CAN error code to Acknowledgement error */
            errorcode |= HAL_CAN_ERROR_ACK;
            break;
          case (CAN_ESR_LEC_2):
            /* Set CAN error code to Bit recessive error */
            errorcode |= HAL_CAN_ERROR_BR;
 80015c4:	f046 0640 	orr.w	r6, r6, #64	; 0x40
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80015c8:	699a      	ldr	r2, [r3, #24]
 80015ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80015ce:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80015d0:	2204      	movs	r2, #4
 80015d2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80015d4:	b12e      	cbz	r6, 80015e2 <HAL_CAN_IRQHandler+0x146>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80015d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80015d8:	431e      	orrs	r6, r3
 80015da:	626e      	str	r6, [r5, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80015dc:	4628      	mov	r0, r5
 80015de:	f7ff ff5b 	bl	8001498 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80015e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80015e6:	682b      	ldr	r3, [r5, #0]
 80015e8:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80015ea:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80015ee:	611a      	str	r2, [r3, #16]
 80015f0:	e7a1      	b.n	8001536 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80015f2:	682b      	ldr	r3, [r5, #0]
 80015f4:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80015f6:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	e78a      	b.n	8001514 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80015fe:	2201      	movs	r2, #1
 8001600:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001602:	07bb      	lsls	r3, r7, #30
 8001604:	d437      	bmi.n	8001676 <HAL_CAN_IRQHandler+0x1da>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001606:	077e      	lsls	r6, r7, #29
 8001608:	d43d      	bmi.n	8001686 <HAL_CAN_IRQHandler+0x1ea>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800160a:	f017 0608 	ands.w	r6, r7, #8
 800160e:	d059      	beq.n	80016c4 <HAL_CAN_IRQHandler+0x228>
 8001610:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001614:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001618:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 800161c:	e757      	b.n	80014ce <HAL_CAN_IRQHandler+0x32>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800161e:	682b      	ldr	r3, [r5, #0]
 8001620:	2208      	movs	r2, #8
 8001622:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001624:	4628      	mov	r0, r5
 8001626:	f7ff ff2d 	bl	8001484 <HAL_CAN_RxFifo0FullCallback>
 800162a:	e778      	b.n	800151e <HAL_CAN_IRQHandler+0x82>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800162c:	682b      	ldr	r3, [r5, #0]
 800162e:	2210      	movs	r2, #16
 8001630:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8001632:	4628      	mov	r0, r5
 8001634:	f7ff ff2c 	bl	8001490 <HAL_CAN_SleepCallback>
 8001638:	e78f      	b.n	800155a <HAL_CAN_IRQHandler+0xbe>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800163a:	682b      	ldr	r3, [r5, #0]
 800163c:	2208      	movs	r2, #8
 800163e:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001640:	4628      	mov	r0, r5
 8001642:	f7ff ff27 	bl	8001494 <HAL_CAN_WakeUpFromRxMsgCallback>
 8001646:	e78d      	b.n	8001564 <HAL_CAN_IRQHandler+0xc8>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001648:	4628      	mov	r0, r5
 800164a:	f003 fc05 	bl	8004e58 <HAL_CAN_RxFifo0MsgPendingCallback>
 800164e:	e76d      	b.n	800152c <HAL_CAN_IRQHandler+0x90>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001650:	682b      	ldr	r3, [r5, #0]
 8001652:	2208      	movs	r2, #8
 8001654:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001656:	4628      	mov	r0, r5
 8001658:	f7ff ff18 	bl	800148c <HAL_CAN_RxFifo1FullCallback>
 800165c:	e771      	b.n	8001542 <HAL_CAN_IRQHandler+0xa6>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800165e:	4628      	mov	r0, r5
 8001660:	f7ff ff12 	bl	8001488 <HAL_CAN_RxFifo1MsgPendingCallback>
 8001664:	e774      	b.n	8001550 <HAL_CAN_IRQHandler+0xb4>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001666:	4628      	mov	r0, r5
 8001668:	f7ff ff04 	bl	8001474 <HAL_CAN_TxMailbox2CompleteCallback>
 800166c:	e74d      	b.n	800150a <HAL_CAN_IRQHandler+0x6e>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800166e:	4628      	mov	r0, r5
 8001670:	f7ff fefe 	bl	8001470 <HAL_CAN_TxMailbox1CompleteCallback>
 8001674:	e73b      	b.n	80014ee <HAL_CAN_IRQHandler+0x52>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001676:	f7ff fef9 	bl	800146c <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800167a:	2600      	movs	r6, #0
 800167c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001680:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001684:	e723      	b.n	80014ce <HAL_CAN_IRQHandler+0x32>
 8001686:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800168a:	f44f 4190 	mov.w	r1, #18432	; 0x4800
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800168e:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8001692:	e71c      	b.n	80014ce <HAL_CAN_IRQHandler+0x32>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001694:	4616      	mov	r6, r2
 8001696:	e72a      	b.n	80014ee <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001698:	033a      	lsls	r2, r7, #12
 800169a:	d50b      	bpl.n	80016b4 <HAL_CAN_IRQHandler+0x218>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800169c:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 80016a0:	e733      	b.n	800150a <HAL_CAN_IRQHandler+0x6e>
        switch (esrflags & CAN_ESR_LEC)
 80016a2:	f1ba 0f10 	cmp.w	sl, #16
 80016a6:	d01d      	beq.n	80016e4 <HAL_CAN_IRQHandler+0x248>
 80016a8:	f1ba 0f20 	cmp.w	sl, #32
 80016ac:	d18c      	bne.n	80015c8 <HAL_CAN_IRQHandler+0x12c>
            errorcode |= HAL_CAN_ERROR_FOR;
 80016ae:	f046 0610 	orr.w	r6, r6, #16
            break;
 80016b2:	e789      	b.n	80015c8 <HAL_CAN_IRQHandler+0x12c>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80016b4:	4628      	mov	r0, r5
 80016b6:	f7ff fee3 	bl	8001480 <HAL_CAN_TxMailbox2AbortCallback>
 80016ba:	e726      	b.n	800150a <HAL_CAN_IRQHandler+0x6e>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80016bc:	4628      	mov	r0, r5
 80016be:	f7ff fedd 	bl	800147c <HAL_CAN_TxMailbox1AbortCallback>
 80016c2:	e714      	b.n	80014ee <HAL_CAN_IRQHandler+0x52>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80016c4:	f7ff fed8 	bl	8001478 <HAL_CAN_TxMailbox0AbortCallback>
 80016c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016d0:	e6fd      	b.n	80014ce <HAL_CAN_IRQHandler+0x32>
            errorcode |= HAL_CAN_ERROR_BD;
 80016d2:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 80016d6:	e777      	b.n	80015c8 <HAL_CAN_IRQHandler+0x12c>
            errorcode |= HAL_CAN_ERROR_ACK;
 80016d8:	f046 0620 	orr.w	r6, r6, #32
            break;
 80016dc:	e774      	b.n	80015c8 <HAL_CAN_IRQHandler+0x12c>
            errorcode |= HAL_CAN_ERROR_CRC;
 80016de:	f446 7680 	orr.w	r6, r6, #256	; 0x100
            break;
 80016e2:	e771      	b.n	80015c8 <HAL_CAN_IRQHandler+0x12c>
            errorcode |= HAL_CAN_ERROR_STF;
 80016e4:	f046 0608 	orr.w	r6, r6, #8
            break;
 80016e8:	e76e      	b.n	80015c8 <HAL_CAN_IRQHandler+0x12c>
 80016ea:	bf00      	nop

080016ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ec:	4a07      	ldr	r2, [pc, #28]	; (800170c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80016ee:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f0:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 80016f4:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f6:	0200      	lsls	r0, r0, #8
 80016f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016fc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001704:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001706:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001710:	4b18      	ldr	r3, [pc, #96]	; (8001774 <HAL_NVIC_SetPriority+0x64>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001718:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800171a:	f1c3 0507 	rsb	r5, r3, #7
 800171e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001720:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001724:	bf28      	it	cs
 8001726:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001728:	2c06      	cmp	r4, #6
 800172a:	d919      	bls.n	8001760 <HAL_NVIC_SetPriority+0x50>
 800172c:	3b03      	subs	r3, #3
 800172e:	f04f 34ff 	mov.w	r4, #4294967295
 8001732:	409c      	lsls	r4, r3
 8001734:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001738:	f04f 32ff 	mov.w	r2, #4294967295
 800173c:	40aa      	lsls	r2, r5
 800173e:	ea21 0102 	bic.w	r1, r1, r2
 8001742:	fa01 f203 	lsl.w	r2, r1, r3
 8001746:	4322      	orrs	r2, r4
 8001748:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 800174a:	2800      	cmp	r0, #0
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	db0a      	blt.n	8001766 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001750:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001754:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001758:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800175c:	bc30      	pop	{r4, r5}
 800175e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001760:	2400      	movs	r4, #0
 8001762:	4623      	mov	r3, r4
 8001764:	e7e8      	b.n	8001738 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001766:	4b04      	ldr	r3, [pc, #16]	; (8001778 <HAL_NVIC_SetPriority+0x68>)
 8001768:	f000 000f 	and.w	r0, r0, #15
 800176c:	4403      	add	r3, r0
 800176e:	761a      	strb	r2, [r3, #24]
 8001770:	bc30      	pop	{r4, r5}
 8001772:	4770      	bx	lr
 8001774:	e000ed00 	.word	0xe000ed00
 8001778:	e000ecfc 	.word	0xe000ecfc

0800177c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800177c:	2800      	cmp	r0, #0
 800177e:	db07      	blt.n	8001790 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001780:	f000 011f 	and.w	r1, r0, #31
 8001784:	2301      	movs	r3, #1
 8001786:	0940      	lsrs	r0, r0, #5
 8001788:	4a02      	ldr	r2, [pc, #8]	; (8001794 <HAL_NVIC_EnableIRQ+0x18>)
 800178a:	408b      	lsls	r3, r1
 800178c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000e100 	.word	0xe000e100

08001798 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001798:	3801      	subs	r0, #1
 800179a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800179e:	d20e      	bcs.n	80017be <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a2:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a4:	4c08      	ldr	r4, [pc, #32]	; (80017c8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a8:	20f0      	movs	r0, #240	; 0xf0
 80017aa:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ae:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b0:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b6:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80017b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017bc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80017be:	2001      	movs	r0, #1
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000e010 	.word	0xe000e010
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017cc:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d003      	beq.n	80017dc <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017d4:	2380      	movs	r3, #128	; 0x80
 80017d6:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80017d8:	2001      	movs	r0, #1
 80017da:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017dc:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80017de:	2305      	movs	r3, #5
 80017e0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80017e4:	6813      	ldr	r3, [r2, #0]
 80017e6:	f023 0301 	bic.w	r3, r3, #1
 80017ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80017ec:	2000      	movs	r0, #0
}
 80017ee:	4770      	bx	lr

080017f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017f4:	f8df c260 	ldr.w	ip, [pc, #608]	; 8001a58 <HAL_GPIO_Init+0x268>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f8:	f8df 8260 	ldr.w	r8, [pc, #608]	; 8001a5c <HAL_GPIO_Init+0x26c>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fc:	f8d1 e000 	ldr.w	lr, [r1]
{
 8001800:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001802:	2500      	movs	r5, #0
 8001804:	e003      	b.n	800180e <HAL_GPIO_Init+0x1e>
 8001806:	3501      	adds	r5, #1
 8001808:	2d10      	cmp	r5, #16
 800180a:	f000 80a4 	beq.w	8001956 <HAL_GPIO_Init+0x166>
    ioposition = 0x01U << position;
 800180e:	2301      	movs	r3, #1
 8001810:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001812:	ea0e 0403 	and.w	r4, lr, r3
    if(iocurrent == ioposition)
 8001816:	42a3      	cmp	r3, r4
 8001818:	d1f5      	bne.n	8001806 <HAL_GPIO_Init+0x16>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800181a:	684e      	ldr	r6, [r1, #4]
 800181c:	f026 0a10 	bic.w	sl, r6, #16
 8001820:	f1ba 0f02 	cmp.w	sl, #2
 8001824:	f000 809a 	beq.w	800195c <HAL_GPIO_Init+0x16c>
 8001828:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800182c:	2203      	movs	r2, #3
      temp = GPIOx->MODER;
 800182e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001832:	fa02 f209 	lsl.w	r2, r2, r9
 8001836:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001838:	f006 0703 	and.w	r7, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800183c:	ea02 0b0b 	and.w	fp, r2, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001840:	fa07 f709 	lsl.w	r7, r7, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001844:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001848:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800184c:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8001850:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001852:	f240 80a9 	bls.w	80019a8 <HAL_GPIO_Init+0x1b8>
      temp = GPIOx->PUPDR;
 8001856:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001858:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800185a:	403a      	ands	r2, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800185c:	fa03 f309 	lsl.w	r3, r3, r9
 8001860:	4313      	orrs	r3, r2
      GPIOx->PUPDR = temp;
 8001862:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001864:	00f3      	lsls	r3, r6, #3
 8001866:	d5ce      	bpl.n	8001806 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001868:	2300      	movs	r3, #0
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8001870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001874:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
 8001878:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800187c:	f025 0203 	bic.w	r2, r5, #3
 8001880:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001884:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001888:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 800188c:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800188e:	f005 0703 	and.w	r7, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001892:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001894:	f8d2 9008 	ldr.w	r9, [r2, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001898:	00bf      	lsls	r7, r7, #2
 800189a:	230f      	movs	r3, #15
 800189c:	40bb      	lsls	r3, r7
 800189e:	ea29 0a03 	bic.w	sl, r9, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018a2:	4b67      	ldr	r3, [pc, #412]	; (8001a40 <HAL_GPIO_Init+0x250>)
 80018a4:	4298      	cmp	r0, r3
 80018a6:	d02e      	beq.n	8001906 <HAL_GPIO_Init+0x116>
 80018a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018ac:	4298      	cmp	r0, r3
 80018ae:	f000 808e 	beq.w	80019ce <HAL_GPIO_Init+0x1de>
 80018b2:	4b64      	ldr	r3, [pc, #400]	; (8001a44 <HAL_GPIO_Init+0x254>)
 80018b4:	4298      	cmp	r0, r3
 80018b6:	f000 8091 	beq.w	80019dc <HAL_GPIO_Init+0x1ec>
 80018ba:	4b63      	ldr	r3, [pc, #396]	; (8001a48 <HAL_GPIO_Init+0x258>)
 80018bc:	4298      	cmp	r0, r3
 80018be:	f000 8094 	beq.w	80019ea <HAL_GPIO_Init+0x1fa>
 80018c2:	4b62      	ldr	r3, [pc, #392]	; (8001a4c <HAL_GPIO_Init+0x25c>)
 80018c4:	4298      	cmp	r0, r3
 80018c6:	f000 8097 	beq.w	80019f8 <HAL_GPIO_Init+0x208>
 80018ca:	4b61      	ldr	r3, [pc, #388]	; (8001a50 <HAL_GPIO_Init+0x260>)
 80018cc:	4298      	cmp	r0, r3
 80018ce:	f000 80a1 	beq.w	8001a14 <HAL_GPIO_Init+0x224>
 80018d2:	4b60      	ldr	r3, [pc, #384]	; (8001a54 <HAL_GPIO_Init+0x264>)
 80018d4:	4298      	cmp	r0, r3
 80018d6:	f000 80a4 	beq.w	8001a22 <HAL_GPIO_Init+0x232>
 80018da:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8001a60 <HAL_GPIO_Init+0x270>
 80018de:	4548      	cmp	r0, r9
 80018e0:	f000 8091 	beq.w	8001a06 <HAL_GPIO_Init+0x216>
 80018e4:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8001a64 <HAL_GPIO_Init+0x274>
 80018e8:	4548      	cmp	r0, r9
 80018ea:	f000 80a1 	beq.w	8001a30 <HAL_GPIO_Init+0x240>
 80018ee:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8001a68 <HAL_GPIO_Init+0x278>
 80018f2:	4548      	cmp	r0, r9
 80018f4:	bf0c      	ite	eq
 80018f6:	f04f 0909 	moveq.w	r9, #9
 80018fa:	f04f 090a 	movne.w	r9, #10
 80018fe:	fa09 f707 	lsl.w	r7, r9, r7
 8001902:	ea4a 0a07 	orr.w	sl, sl, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001906:	f8c2 a008 	str.w	sl, [r2, #8]
        temp = EXTI->IMR;
 800190a:	f8dc 3000 	ldr.w	r3, [ip]
        temp &= ~((uint32_t)iocurrent);
 800190e:	43e2      	mvns	r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001910:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 8001912:	bf54      	ite	pl
 8001914:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001916:	4323      	orrmi	r3, r4
        }
        EXTI->IMR = temp;
 8001918:	f8cc 3000 	str.w	r3, [ip]

        temp = EXTI->EMR;
 800191c:	f8dc 3004 	ldr.w	r3, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001920:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 8001922:	bf54      	ite	pl
 8001924:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001926:	4323      	orrmi	r3, r4
        }
        EXTI->EMR = temp;
 8001928:	f8cc 3004 	str.w	r3, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800192c:	f8dc 3008 	ldr.w	r3, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001930:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 8001932:	bf54      	ite	pl
 8001934:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001936:	4323      	orrmi	r3, r4
        }
        EXTI->RTSR = temp;
 8001938:	f8cc 3008 	str.w	r3, [ip, #8]

        temp = EXTI->FTSR;
 800193c:	f8dc 300c 	ldr.w	r3, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001940:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001942:	f105 0501 	add.w	r5, r5, #1
        temp &= ~((uint32_t)iocurrent);
 8001946:	bf54      	ite	pl
 8001948:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800194a:	4323      	orrmi	r3, r4
  for(position = 0U; position < GPIO_NUMBER; position++)
 800194c:	2d10      	cmp	r5, #16
        }
        EXTI->FTSR = temp;
 800194e:	f8cc 300c 	str.w	r3, [ip, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001952:	f47f af5c 	bne.w	800180e <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8001956:	b003      	add	sp, #12
 8001958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->AFR[position >> 3U];
 800195c:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 8001960:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001964:	f005 0707 	and.w	r7, r5, #7
        temp = GPIOx->AFR[position >> 3U];
 8001968:	f8d9 2020 	ldr.w	r2, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800196c:	00bf      	lsls	r7, r7, #2
 800196e:	f04f 0b0f 	mov.w	fp, #15
 8001972:	fa0b fb07 	lsl.w	fp, fp, r7
 8001976:	ea22 0a0b 	bic.w	sl, r2, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800197a:	690a      	ldr	r2, [r1, #16]
 800197c:	40ba      	lsls	r2, r7
 800197e:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->AFR[position >> 3U] = temp;
 8001982:	f8c9 2020 	str.w	r2, [r9, #32]
 8001986:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800198a:	2203      	movs	r2, #3
      temp = GPIOx->MODER;
 800198c:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001990:	fa02 f209 	lsl.w	r2, r2, r9
 8001994:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001996:	f006 0703 	and.w	r7, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800199a:	ea02 0a0a 	and.w	sl, r2, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800199e:	fa07 f709 	lsl.w	r7, r7, r9
 80019a2:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->MODER = temp;
 80019a6:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 80019a8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019aa:	ea07 0a02 	and.w	sl, r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ae:	68cf      	ldr	r7, [r1, #12]
 80019b0:	fa07 f709 	lsl.w	r7, r7, r9
 80019b4:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80019b8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80019ba:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019be:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019c2:	ea2a 0303 	bic.w	r3, sl, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019c6:	40af      	lsls	r7, r5
 80019c8:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 80019ca:	6047      	str	r7, [r0, #4]
 80019cc:	e743      	b.n	8001856 <HAL_GPIO_Init+0x66>
 80019ce:	f04f 0901 	mov.w	r9, #1
 80019d2:	fa09 f707 	lsl.w	r7, r9, r7
 80019d6:	ea4a 0a07 	orr.w	sl, sl, r7
 80019da:	e794      	b.n	8001906 <HAL_GPIO_Init+0x116>
 80019dc:	f04f 0902 	mov.w	r9, #2
 80019e0:	fa09 f707 	lsl.w	r7, r9, r7
 80019e4:	ea4a 0a07 	orr.w	sl, sl, r7
 80019e8:	e78d      	b.n	8001906 <HAL_GPIO_Init+0x116>
 80019ea:	f04f 0903 	mov.w	r9, #3
 80019ee:	fa09 f707 	lsl.w	r7, r9, r7
 80019f2:	ea4a 0a07 	orr.w	sl, sl, r7
 80019f6:	e786      	b.n	8001906 <HAL_GPIO_Init+0x116>
 80019f8:	f04f 0904 	mov.w	r9, #4
 80019fc:	fa09 f707 	lsl.w	r7, r9, r7
 8001a00:	ea4a 0a07 	orr.w	sl, sl, r7
 8001a04:	e77f      	b.n	8001906 <HAL_GPIO_Init+0x116>
 8001a06:	f04f 0907 	mov.w	r9, #7
 8001a0a:	fa09 f707 	lsl.w	r7, r9, r7
 8001a0e:	ea4a 0a07 	orr.w	sl, sl, r7
 8001a12:	e778      	b.n	8001906 <HAL_GPIO_Init+0x116>
 8001a14:	f04f 0905 	mov.w	r9, #5
 8001a18:	fa09 f707 	lsl.w	r7, r9, r7
 8001a1c:	ea4a 0a07 	orr.w	sl, sl, r7
 8001a20:	e771      	b.n	8001906 <HAL_GPIO_Init+0x116>
 8001a22:	f04f 0906 	mov.w	r9, #6
 8001a26:	fa09 f707 	lsl.w	r7, r9, r7
 8001a2a:	ea4a 0a07 	orr.w	sl, sl, r7
 8001a2e:	e76a      	b.n	8001906 <HAL_GPIO_Init+0x116>
 8001a30:	f04f 0908 	mov.w	r9, #8
 8001a34:	fa09 f707 	lsl.w	r7, r9, r7
 8001a38:	ea4a 0a07 	orr.w	sl, sl, r7
 8001a3c:	e763      	b.n	8001906 <HAL_GPIO_Init+0x116>
 8001a3e:	bf00      	nop
 8001a40:	40020000 	.word	0x40020000
 8001a44:	40020800 	.word	0x40020800
 8001a48:	40020c00 	.word	0x40020c00
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40021400 	.word	0x40021400
 8001a54:	40021800 	.word	0x40021800
 8001a58:	40013c00 	.word	0x40013c00
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40021c00 	.word	0x40021c00
 8001a64:	40022000 	.word	0x40022000
 8001a68:	40022400 	.word	0x40022400

08001a6c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a6c:	6903      	ldr	r3, [r0, #16]
 8001a6e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001a70:	bf14      	ite	ne
 8001a72:	2001      	movne	r0, #1
 8001a74:	2000      	moveq	r0, #0
 8001a76:	4770      	bx	lr

08001a78 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a78:	b902      	cbnz	r2, 8001a7c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a7a:	0409      	lsls	r1, r1, #16
 8001a7c:	6181      	str	r1, [r0, #24]
  }
}
 8001a7e:	4770      	bx	lr

08001a80 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001a80:	6943      	ldr	r3, [r0, #20]
 8001a82:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001a86:	bf08      	it	eq
 8001a88:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a8a:	6181      	str	r1, [r0, #24]
  }
}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop

08001a90 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a90:	2800      	cmp	r0, #0
 8001a92:	f000 8132 	beq.w	8001cfa <HAL_RCC_OscConfig+0x26a>
{
 8001a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a9a:	6803      	ldr	r3, [r0, #0]
 8001a9c:	07dd      	lsls	r5, r3, #31
{
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa2:	d52f      	bpl.n	8001b04 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001aa4:	49ac      	ldr	r1, [pc, #688]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
 8001aa6:	688a      	ldr	r2, [r1, #8]
 8001aa8:	f002 020c 	and.w	r2, r2, #12
 8001aac:	2a04      	cmp	r2, #4
 8001aae:	f000 80ea 	beq.w	8001c86 <HAL_RCC_OscConfig+0x1f6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ab2:	688a      	ldr	r2, [r1, #8]
 8001ab4:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ab8:	2a08      	cmp	r2, #8
 8001aba:	f000 80e0 	beq.w	8001c7e <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001abe:	6863      	ldr	r3, [r4, #4]
 8001ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac4:	f000 80e9 	beq.w	8001c9a <HAL_RCC_OscConfig+0x20a>
 8001ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001acc:	f000 8154 	beq.w	8001d78 <HAL_RCC_OscConfig+0x2e8>
 8001ad0:	4da1      	ldr	r5, [pc, #644]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
 8001ad2:	682a      	ldr	r2, [r5, #0]
 8001ad4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ad8:	602a      	str	r2, [r5, #0]
 8001ada:	682a      	ldr	r2, [r5, #0]
 8001adc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ae0:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f040 80de 	bne.w	8001ca4 <HAL_RCC_OscConfig+0x214>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7ff fa88 	bl	8000ffc <HAL_GetTick>
 8001aec:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aee:	e005      	b.n	8001afc <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001af0:	f7ff fa84 	bl	8000ffc <HAL_GetTick>
 8001af4:	1b80      	subs	r0, r0, r6
 8001af6:	2864      	cmp	r0, #100	; 0x64
 8001af8:	f200 80f2 	bhi.w	8001ce0 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afc:	682b      	ldr	r3, [r5, #0]
 8001afe:	039b      	lsls	r3, r3, #14
 8001b00:	d4f6      	bmi.n	8001af0 <HAL_RCC_OscConfig+0x60>
 8001b02:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b04:	079f      	lsls	r7, r3, #30
 8001b06:	d475      	bmi.n	8001bf4 <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b08:	071a      	lsls	r2, r3, #28
 8001b0a:	d515      	bpl.n	8001b38 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b0c:	6963      	ldr	r3, [r4, #20]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 80a5 	beq.w	8001c5e <HAL_RCC_OscConfig+0x1ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b14:	4b91      	ldr	r3, [pc, #580]	; (8001d5c <HAL_RCC_OscConfig+0x2cc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b16:	4d90      	ldr	r5, [pc, #576]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8001b18:	2201      	movs	r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001b1c:	f7ff fa6e 	bl	8000ffc <HAL_GetTick>
 8001b20:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b22:	e005      	b.n	8001b30 <HAL_RCC_OscConfig+0xa0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b24:	f7ff fa6a 	bl	8000ffc <HAL_GetTick>
 8001b28:	1b80      	subs	r0, r0, r6
 8001b2a:	2802      	cmp	r0, #2
 8001b2c:	f200 80d8 	bhi.w	8001ce0 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b30:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001b32:	079b      	lsls	r3, r3, #30
 8001b34:	d5f6      	bpl.n	8001b24 <HAL_RCC_OscConfig+0x94>
 8001b36:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b38:	0758      	lsls	r0, r3, #29
 8001b3a:	d53b      	bpl.n	8001bb4 <HAL_RCC_OscConfig+0x124>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b3c:	4a86      	ldr	r2, [pc, #536]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
 8001b3e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001b40:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8001b44:	f040 80db 	bne.w	8001cfe <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b48:	9301      	str	r3, [sp, #4]
 8001b4a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b50:	6413      	str	r3, [r2, #64]	; 0x40
 8001b52:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001b5c:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5e:	4d80      	ldr	r5, [pc, #512]	; (8001d60 <HAL_RCC_OscConfig+0x2d0>)
 8001b60:	682a      	ldr	r2, [r5, #0]
 8001b62:	05d1      	lsls	r1, r2, #23
 8001b64:	f140 80ac 	bpl.w	8001cc0 <HAL_RCC_OscConfig+0x230>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b68:	68a3      	ldr	r3, [r4, #8]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	f000 80c9 	beq.w	8001d02 <HAL_RCC_OscConfig+0x272>
 8001b70:	2b05      	cmp	r3, #5
 8001b72:	f000 810b 	beq.w	8001d8c <HAL_RCC_OscConfig+0x2fc>
 8001b76:	4d78      	ldr	r5, [pc, #480]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
 8001b78:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001b7a:	f022 0201 	bic.w	r2, r2, #1
 8001b7e:	672a      	str	r2, [r5, #112]	; 0x70
 8001b80:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001b82:	f022 0204 	bic.w	r2, r2, #4
 8001b86:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f040 80bf 	bne.w	8001d0c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b8e:	f7ff fa35 	bl	8000ffc <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b92:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001b96:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b98:	e006      	b.n	8001ba8 <HAL_RCC_OscConfig+0x118>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b9a:	f7ff fa2f 	bl	8000ffc <HAL_GetTick>
 8001b9e:	eba0 0008 	sub.w	r0, r0, r8
 8001ba2:	42b8      	cmp	r0, r7
 8001ba4:	f200 809c 	bhi.w	8001ce0 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001baa:	0798      	lsls	r0, r3, #30
 8001bac:	d4f5      	bmi.n	8001b9a <HAL_RCC_OscConfig+0x10a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bae:	2e00      	cmp	r6, #0
 8001bb0:	f040 80dc 	bne.w	8001d6c <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bb4:	69a2      	ldr	r2, [r4, #24]
 8001bb6:	b1ca      	cbz	r2, 8001bec <HAL_RCC_OscConfig+0x15c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bb8:	4d67      	ldr	r5, [pc, #412]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
 8001bba:	68a9      	ldr	r1, [r5, #8]
 8001bbc:	f001 010c 	and.w	r1, r1, #12
 8001bc0:	2908      	cmp	r1, #8
 8001bc2:	d048      	beq.n	8001c56 <HAL_RCC_OscConfig+0x1c6>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bc4:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc6:	4a67      	ldr	r2, [pc, #412]	; (8001d64 <HAL_RCC_OscConfig+0x2d4>)
 8001bc8:	f04f 0100 	mov.w	r1, #0
 8001bcc:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bce:	f000 80e7 	beq.w	8001da0 <HAL_RCC_OscConfig+0x310>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd2:	f7ff fa13 	bl	8000ffc <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd6:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8001bd8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bda:	e004      	b.n	8001be6 <HAL_RCC_OscConfig+0x156>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bdc:	f7ff fa0e 	bl	8000ffc <HAL_GetTick>
 8001be0:	1b40      	subs	r0, r0, r5
 8001be2:	2802      	cmp	r0, #2
 8001be4:	d87c      	bhi.n	8001ce0 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be6:	6823      	ldr	r3, [r4, #0]
 8001be8:	019b      	lsls	r3, r3, #6
 8001bea:	d4f7      	bmi.n	8001bdc <HAL_RCC_OscConfig+0x14c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001bec:	2000      	movs	r0, #0
}
 8001bee:	b002      	add	sp, #8
 8001bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bf4:	4a58      	ldr	r2, [pc, #352]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
 8001bf6:	6891      	ldr	r1, [r2, #8]
 8001bf8:	f011 0f0c 	tst.w	r1, #12
 8001bfc:	d024      	beq.n	8001c48 <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bfe:	6891      	ldr	r1, [r2, #8]
 8001c00:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c04:	2908      	cmp	r1, #8
 8001c06:	d01c      	beq.n	8001c42 <HAL_RCC_OscConfig+0x1b2>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c08:	68e3      	ldr	r3, [r4, #12]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 8092 	beq.w	8001d34 <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSI_ENABLE();
 8001c10:	4b55      	ldr	r3, [pc, #340]	; (8001d68 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c12:	4d51      	ldr	r5, [pc, #324]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 8001c14:	2201      	movs	r2, #1
 8001c16:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c18:	f7ff f9f0 	bl	8000ffc <HAL_GetTick>
 8001c1c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1e:	e004      	b.n	8001c2a <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c20:	f7ff f9ec 	bl	8000ffc <HAL_GetTick>
 8001c24:	1b80      	subs	r0, r0, r6
 8001c26:	2802      	cmp	r0, #2
 8001c28:	d85a      	bhi.n	8001ce0 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2a:	682b      	ldr	r3, [r5, #0]
 8001c2c:	0798      	lsls	r0, r3, #30
 8001c2e:	d5f7      	bpl.n	8001c20 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c30:	682b      	ldr	r3, [r5, #0]
 8001c32:	6922      	ldr	r2, [r4, #16]
 8001c34:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c38:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001c3c:	602b      	str	r3, [r5, #0]
 8001c3e:	6823      	ldr	r3, [r4, #0]
 8001c40:	e762      	b.n	8001b08 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c42:	6852      	ldr	r2, [r2, #4]
 8001c44:	0256      	lsls	r6, r2, #9
 8001c46:	d4df      	bmi.n	8001c08 <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c48:	4a43      	ldr	r2, [pc, #268]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	0795      	lsls	r5, r2, #30
 8001c4e:	d54b      	bpl.n	8001ce8 <HAL_RCC_OscConfig+0x258>
 8001c50:	68e2      	ldr	r2, [r4, #12]
 8001c52:	2a01      	cmp	r2, #1
 8001c54:	d048      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x258>
    return HAL_ERROR;
 8001c56:	2001      	movs	r0, #1
}
 8001c58:	b002      	add	sp, #8
 8001c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8001c5e:	4a3f      	ldr	r2, [pc, #252]	; (8001d5c <HAL_RCC_OscConfig+0x2cc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c60:	4d3d      	ldr	r5, [pc, #244]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 8001c62:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001c64:	f7ff f9ca 	bl	8000ffc <HAL_GetTick>
 8001c68:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c6a:	e004      	b.n	8001c76 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c6c:	f7ff f9c6 	bl	8000ffc <HAL_GetTick>
 8001c70:	1b80      	subs	r0, r0, r6
 8001c72:	2802      	cmp	r0, #2
 8001c74:	d834      	bhi.n	8001ce0 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c76:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001c78:	079f      	lsls	r7, r3, #30
 8001c7a:	d4f7      	bmi.n	8001c6c <HAL_RCC_OscConfig+0x1dc>
 8001c7c:	e75b      	b.n	8001b36 <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c7e:	684a      	ldr	r2, [r1, #4]
 8001c80:	0250      	lsls	r0, r2, #9
 8001c82:	f57f af1c 	bpl.w	8001abe <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c86:	4a34      	ldr	r2, [pc, #208]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	0391      	lsls	r1, r2, #14
 8001c8c:	f57f af3a 	bpl.w	8001b04 <HAL_RCC_OscConfig+0x74>
 8001c90:	6862      	ldr	r2, [r4, #4]
 8001c92:	2a00      	cmp	r2, #0
 8001c94:	f47f af36 	bne.w	8001b04 <HAL_RCC_OscConfig+0x74>
 8001c98:	e7dd      	b.n	8001c56 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c9a:	4a2f      	ldr	r2, [pc, #188]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
 8001c9c:	6813      	ldr	r3, [r2, #0]
 8001c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001ca4:	f7ff f9aa 	bl	8000ffc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca8:	4d2b      	ldr	r5, [pc, #172]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001caa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cac:	e004      	b.n	8001cb8 <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cae:	f7ff f9a5 	bl	8000ffc <HAL_GetTick>
 8001cb2:	1b80      	subs	r0, r0, r6
 8001cb4:	2864      	cmp	r0, #100	; 0x64
 8001cb6:	d813      	bhi.n	8001ce0 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb8:	682b      	ldr	r3, [r5, #0]
 8001cba:	039a      	lsls	r2, r3, #14
 8001cbc:	d5f7      	bpl.n	8001cae <HAL_RCC_OscConfig+0x21e>
 8001cbe:	e720      	b.n	8001b02 <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cc0:	682a      	ldr	r2, [r5, #0]
 8001cc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cc6:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8001cc8:	f7ff f998 	bl	8000ffc <HAL_GetTick>
 8001ccc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cce:	682b      	ldr	r3, [r5, #0]
 8001cd0:	05da      	lsls	r2, r3, #23
 8001cd2:	f53f af49 	bmi.w	8001b68 <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd6:	f7ff f991 	bl	8000ffc <HAL_GetTick>
 8001cda:	1bc0      	subs	r0, r0, r7
 8001cdc:	2802      	cmp	r0, #2
 8001cde:	d9f6      	bls.n	8001cce <HAL_RCC_OscConfig+0x23e>
            return HAL_TIMEOUT;
 8001ce0:	2003      	movs	r0, #3
}
 8001ce2:	b002      	add	sp, #8
 8001ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce8:	491b      	ldr	r1, [pc, #108]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
 8001cea:	6920      	ldr	r0, [r4, #16]
 8001cec:	680a      	ldr	r2, [r1, #0]
 8001cee:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001cf2:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001cf6:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf8:	e706      	b.n	8001b08 <HAL_RCC_OscConfig+0x78>
    return HAL_ERROR;
 8001cfa:	2001      	movs	r0, #1
}
 8001cfc:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 8001cfe:	2600      	movs	r6, #0
 8001d00:	e72d      	b.n	8001b5e <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d02:	4a15      	ldr	r2, [pc, #84]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
 8001d04:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001d06:	f043 0301 	orr.w	r3, r3, #1
 8001d0a:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001d0c:	f7ff f976 	bl	8000ffc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d10:	4d11      	ldr	r5, [pc, #68]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001d12:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d14:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d18:	e005      	b.n	8001d26 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d1a:	f7ff f96f 	bl	8000ffc <HAL_GetTick>
 8001d1e:	eba0 0008 	sub.w	r0, r0, r8
 8001d22:	42b8      	cmp	r0, r7
 8001d24:	d8dc      	bhi.n	8001ce0 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d26:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001d28:	079b      	lsls	r3, r3, #30
 8001d2a:	d5f6      	bpl.n	8001d1a <HAL_RCC_OscConfig+0x28a>
    if(pwrclkchanged == SET)
 8001d2c:	2e00      	cmp	r6, #0
 8001d2e:	f43f af41 	beq.w	8001bb4 <HAL_RCC_OscConfig+0x124>
 8001d32:	e01b      	b.n	8001d6c <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_HSI_DISABLE();
 8001d34:	4a0c      	ldr	r2, [pc, #48]	; (8001d68 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d36:	4d08      	ldr	r5, [pc, #32]	; (8001d58 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8001d38:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001d3a:	f7ff f95f 	bl	8000ffc <HAL_GetTick>
 8001d3e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d40:	e004      	b.n	8001d4c <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d42:	f7ff f95b 	bl	8000ffc <HAL_GetTick>
 8001d46:	1b80      	subs	r0, r0, r6
 8001d48:	2802      	cmp	r0, #2
 8001d4a:	d8c9      	bhi.n	8001ce0 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4c:	682b      	ldr	r3, [r5, #0]
 8001d4e:	0799      	lsls	r1, r3, #30
 8001d50:	d4f7      	bmi.n	8001d42 <HAL_RCC_OscConfig+0x2b2>
 8001d52:	6823      	ldr	r3, [r4, #0]
 8001d54:	e6d8      	b.n	8001b08 <HAL_RCC_OscConfig+0x78>
 8001d56:	bf00      	nop
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	42470e80 	.word	0x42470e80
 8001d60:	40007000 	.word	0x40007000
 8001d64:	42470060 	.word	0x42470060
 8001d68:	42470000 	.word	0x42470000
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d6c:	4a23      	ldr	r2, [pc, #140]	; (8001dfc <HAL_RCC_OscConfig+0x36c>)
 8001d6e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d74:	6413      	str	r3, [r2, #64]	; 0x40
 8001d76:	e71d      	b.n	8001bb4 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d78:	4b20      	ldr	r3, [pc, #128]	; (8001dfc <HAL_RCC_OscConfig+0x36c>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	e78b      	b.n	8001ca4 <HAL_RCC_OscConfig+0x214>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d8c:	4b1b      	ldr	r3, [pc, #108]	; (8001dfc <HAL_RCC_OscConfig+0x36c>)
 8001d8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d90:	f042 0204 	orr.w	r2, r2, #4
 8001d94:	671a      	str	r2, [r3, #112]	; 0x70
 8001d96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d98:	f042 0201 	orr.w	r2, r2, #1
 8001d9c:	671a      	str	r2, [r3, #112]	; 0x70
 8001d9e:	e7b5      	b.n	8001d0c <HAL_RCC_OscConfig+0x27c>
        tickstart = HAL_GetTick();
 8001da0:	f7ff f92c 	bl	8000ffc <HAL_GetTick>
 8001da4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da6:	e004      	b.n	8001db2 <HAL_RCC_OscConfig+0x322>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da8:	f7ff f928 	bl	8000ffc <HAL_GetTick>
 8001dac:	1b80      	subs	r0, r0, r6
 8001dae:	2802      	cmp	r0, #2
 8001db0:	d896      	bhi.n	8001ce0 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001db2:	682b      	ldr	r3, [r5, #0]
 8001db4:	0199      	lsls	r1, r3, #6
 8001db6:	d4f7      	bmi.n	8001da8 <HAL_RCC_OscConfig+0x318>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001db8:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 8001dbc:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8001dc0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc2:	4c0e      	ldr	r4, [pc, #56]	; (8001dfc <HAL_RCC_OscConfig+0x36c>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dc4:	4333      	orrs	r3, r6
 8001dc6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001dca:	0852      	lsrs	r2, r2, #1
 8001dcc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001dd0:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8001dd2:	490b      	ldr	r1, [pc, #44]	; (8001e00 <HAL_RCC_OscConfig+0x370>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8001dd8:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dda:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001ddc:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8001dde:	f7ff f90d 	bl	8000ffc <HAL_GetTick>
 8001de2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de4:	e005      	b.n	8001df2 <HAL_RCC_OscConfig+0x362>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001de6:	f7ff f909 	bl	8000ffc <HAL_GetTick>
 8001dea:	1b40      	subs	r0, r0, r5
 8001dec:	2802      	cmp	r0, #2
 8001dee:	f63f af77 	bhi.w	8001ce0 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df2:	6823      	ldr	r3, [r4, #0]
 8001df4:	019a      	lsls	r2, r3, #6
 8001df6:	d5f6      	bpl.n	8001de6 <HAL_RCC_OscConfig+0x356>
 8001df8:	e6f8      	b.n	8001bec <HAL_RCC_OscConfig+0x15c>
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	42470060 	.word	0x42470060

08001e04 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e04:	4917      	ldr	r1, [pc, #92]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x60>)
{
 8001e06:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e08:	688b      	ldr	r3, [r1, #8]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d01b      	beq.n	8001e4a <HAL_RCC_GetSysClockFreq+0x46>
 8001e12:	2b08      	cmp	r3, #8
 8001e14:	d117      	bne.n	8001e46 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e16:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e18:	684b      	ldr	r3, [r1, #4]
 8001e1a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e1e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e22:	d114      	bne.n	8001e4e <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e24:	6849      	ldr	r1, [r1, #4]
 8001e26:	4810      	ldr	r0, [pc, #64]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x64>)
 8001e28:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001e2c:	fba1 0100 	umull	r0, r1, r1, r0
 8001e30:	f7fe ff1a 	bl	8000c68 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x60>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001e40:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001e44:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8001e46:	4808      	ldr	r0, [pc, #32]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001e48:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001e4a:	4808      	ldr	r0, [pc, #32]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x68>)
}
 8001e4c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e4e:	684b      	ldr	r3, [r1, #4]
 8001e50:	4806      	ldr	r0, [pc, #24]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x68>)
 8001e52:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001e56:	fba3 0100 	umull	r0, r1, r3, r0
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f7fe ff04 	bl	8000c68 <__aeabi_uldivmod>
 8001e60:	e7e8      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x30>
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800
 8001e68:	00f42400 	.word	0x00f42400
 8001e6c:	00b71b00 	.word	0x00b71b00

08001e70 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001e70:	b160      	cbz	r0, 8001e8c <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e72:	4a48      	ldr	r2, [pc, #288]	; (8001f94 <HAL_RCC_ClockConfig+0x124>)
 8001e74:	6813      	ldr	r3, [r2, #0]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	428b      	cmp	r3, r1
 8001e7c:	d208      	bcs.n	8001e90 <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7e:	b2cb      	uxtb	r3, r1
 8001e80:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e82:	6813      	ldr	r3, [r2, #0]
 8001e84:	f003 030f 	and.w	r3, r3, #15
 8001e88:	428b      	cmp	r3, r1
 8001e8a:	d001      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 8001e8c:	2001      	movs	r0, #1
}
 8001e8e:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e90:	6803      	ldr	r3, [r0, #0]
{
 8001e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e96:	079d      	lsls	r5, r3, #30
 8001e98:	d514      	bpl.n	8001ec4 <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e9a:	075c      	lsls	r4, r3, #29
 8001e9c:	d504      	bpl.n	8001ea8 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e9e:	4c3e      	ldr	r4, [pc, #248]	; (8001f98 <HAL_RCC_ClockConfig+0x128>)
 8001ea0:	68a2      	ldr	r2, [r4, #8]
 8001ea2:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001ea6:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea8:	071a      	lsls	r2, r3, #28
 8001eaa:	d504      	bpl.n	8001eb6 <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eac:	4c3a      	ldr	r4, [pc, #232]	; (8001f98 <HAL_RCC_ClockConfig+0x128>)
 8001eae:	68a2      	ldr	r2, [r4, #8]
 8001eb0:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001eb4:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb6:	4c38      	ldr	r4, [pc, #224]	; (8001f98 <HAL_RCC_ClockConfig+0x128>)
 8001eb8:	6885      	ldr	r5, [r0, #8]
 8001eba:	68a2      	ldr	r2, [r4, #8]
 8001ebc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001ec0:	432a      	orrs	r2, r5
 8001ec2:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ec4:	07df      	lsls	r7, r3, #31
 8001ec6:	4604      	mov	r4, r0
 8001ec8:	460d      	mov	r5, r1
 8001eca:	d522      	bpl.n	8001f12 <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ecc:	6842      	ldr	r2, [r0, #4]
 8001ece:	2a01      	cmp	r2, #1
 8001ed0:	d056      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x110>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ed2:	1e93      	subs	r3, r2, #2
 8001ed4:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed6:	4b30      	ldr	r3, [pc, #192]	; (8001f98 <HAL_RCC_ClockConfig+0x128>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eda:	d958      	bls.n	8001f8e <HAL_RCC_ClockConfig+0x11e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001edc:	0799      	lsls	r1, r3, #30
 8001ede:	d525      	bpl.n	8001f2c <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ee0:	4e2d      	ldr	r6, [pc, #180]	; (8001f98 <HAL_RCC_ClockConfig+0x128>)
 8001ee2:	68b3      	ldr	r3, [r6, #8]
 8001ee4:	f023 0303 	bic.w	r3, r3, #3
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001eec:	f7ff f886 	bl	8000ffc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef0:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001ef4:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef6:	e005      	b.n	8001f04 <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef8:	f7ff f880 	bl	8000ffc <HAL_GetTick>
 8001efc:	eba0 0008 	sub.w	r0, r0, r8
 8001f00:	42b8      	cmp	r0, r7
 8001f02:	d842      	bhi.n	8001f8a <HAL_RCC_ClockConfig+0x11a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f04:	68b3      	ldr	r3, [r6, #8]
 8001f06:	6862      	ldr	r2, [r4, #4]
 8001f08:	f003 030c 	and.w	r3, r3, #12
 8001f0c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001f10:	d1f2      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f12:	4a20      	ldr	r2, [pc, #128]	; (8001f94 <HAL_RCC_ClockConfig+0x124>)
 8001f14:	6813      	ldr	r3, [r2, #0]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	42ab      	cmp	r3, r5
 8001f1c:	d909      	bls.n	8001f32 <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1e:	b2eb      	uxtb	r3, r5
 8001f20:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f22:	6813      	ldr	r3, [r2, #0]
 8001f24:	f003 030f 	and.w	r3, r3, #15
 8001f28:	42ab      	cmp	r3, r5
 8001f2a:	d002      	beq.n	8001f32 <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 8001f2c:	2001      	movs	r0, #1
}
 8001f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f32:	6823      	ldr	r3, [r4, #0]
 8001f34:	075a      	lsls	r2, r3, #29
 8001f36:	d506      	bpl.n	8001f46 <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f38:	4917      	ldr	r1, [pc, #92]	; (8001f98 <HAL_RCC_ClockConfig+0x128>)
 8001f3a:	68e0      	ldr	r0, [r4, #12]
 8001f3c:	688a      	ldr	r2, [r1, #8]
 8001f3e:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8001f42:	4302      	orrs	r2, r0
 8001f44:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f46:	071b      	lsls	r3, r3, #28
 8001f48:	d411      	bmi.n	8001f6e <HAL_RCC_ClockConfig+0xfe>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f4a:	f7ff ff5b 	bl	8001e04 <HAL_RCC_GetSysClockFreq>
 8001f4e:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_RCC_ClockConfig+0x128>)
 8001f50:	4912      	ldr	r1, [pc, #72]	; (8001f9c <HAL_RCC_ClockConfig+0x12c>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	4a12      	ldr	r2, [pc, #72]	; (8001fa0 <HAL_RCC_ClockConfig+0x130>)
 8001f56:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001f5a:	5ccb      	ldrb	r3, [r1, r3]
 8001f5c:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f60:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f62:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f64:	f7ff f800 	bl	8000f68 <HAL_InitTick>
  return HAL_OK;
 8001f68:	2000      	movs	r0, #0
}
 8001f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f6e:	4a0a      	ldr	r2, [pc, #40]	; (8001f98 <HAL_RCC_ClockConfig+0x128>)
 8001f70:	6921      	ldr	r1, [r4, #16]
 8001f72:	6893      	ldr	r3, [r2, #8]
 8001f74:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001f78:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001f7c:	6093      	str	r3, [r2, #8]
 8001f7e:	e7e4      	b.n	8001f4a <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <HAL_RCC_ClockConfig+0x128>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	039e      	lsls	r6, r3, #14
 8001f86:	d4ab      	bmi.n	8001ee0 <HAL_RCC_ClockConfig+0x70>
 8001f88:	e7d0      	b.n	8001f2c <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8001f8a:	2003      	movs	r0, #3
 8001f8c:	e7ed      	b.n	8001f6a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8e:	0198      	lsls	r0, r3, #6
 8001f90:	d4a6      	bmi.n	8001ee0 <HAL_RCC_ClockConfig+0x70>
 8001f92:	e7cb      	b.n	8001f2c <HAL_RCC_ClockConfig+0xbc>
 8001f94:	40023c00 	.word	0x40023c00
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	0800c028 	.word	0x0800c028
 8001fa0:	20000024 	.word	0x20000024

08001fa4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001fa6:	4a05      	ldr	r2, [pc, #20]	; (8001fbc <HAL_RCC_GetPCLK1Freq+0x18>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8001faa:	4905      	ldr	r1, [pc, #20]	; (8001fc0 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fac:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001fb0:	6808      	ldr	r0, [r1, #0]
 8001fb2:	5cd3      	ldrb	r3, [r2, r3]
}
 8001fb4:	40d8      	lsrs	r0, r3
 8001fb6:	4770      	bx	lr
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	0800c038 	.word	0x0800c038
 8001fc0:	20000024 	.word	0x20000024

08001fc4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001fc6:	4a05      	ldr	r2, [pc, #20]	; (8001fdc <HAL_RCC_GetPCLK2Freq+0x18>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8001fca:	4905      	ldr	r1, [pc, #20]	; (8001fe0 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fcc:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001fd0:	6808      	ldr	r0, [r1, #0]
 8001fd2:	5cd3      	ldrb	r3, [r2, r3]
}
 8001fd4:	40d8      	lsrs	r0, r3
 8001fd6:	4770      	bx	lr
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	0800c038 	.word	0x0800c038
 8001fe0:	20000024 	.word	0x20000024

08001fe4 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fe4:	2800      	cmp	r0, #0
 8001fe6:	d03b      	beq.n	8002060 <HAL_SPI_Init+0x7c>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fe8:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fec:	2300      	movs	r3, #0
{
 8001fee:	b570      	push	{r4, r5, r6, lr}
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ff0:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8001ff4:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ff6:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ff8:	b362      	cbz	r2, 8002054 <HAL_SPI_Init+0x70>
 8001ffa:	4618      	mov	r0, r3
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001ffc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8002000:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 8002004:	432b      	orrs	r3, r5
 8002006:	4313      	orrs	r3, r2
 8002008:	6962      	ldr	r2, [r4, #20]
 800200a:	69e5      	ldr	r5, [r4, #28]
 800200c:	6a26      	ldr	r6, [r4, #32]
 800200e:	430b      	orrs	r3, r1
 8002010:	4313      	orrs	r3, r2
 8002012:	69a2      	ldr	r2, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8002014:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002016:	432b      	orrs	r3, r5
  hspi->State = HAL_SPI_STATE_BUSY;
 8002018:	2502      	movs	r5, #2
 800201a:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800201e:	4333      	orrs	r3, r6
 8002020:	f402 7500 	and.w	r5, r2, #512	; 0x200
  __HAL_SPI_DISABLE(hspi);
 8002024:	680e      	ldr	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002026:	432b      	orrs	r3, r5
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002028:	0c12      	lsrs	r2, r2, #16
 800202a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800202c:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002030:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002032:	432a      	orrs	r2, r5
  __HAL_SPI_DISABLE(hspi);
 8002034:	f026 0640 	bic.w	r6, r6, #64	; 0x40
 8002038:	600e      	str	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800203a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800203c:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800203e:	69cb      	ldr	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002040:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002042:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8002046:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002048:	61cb      	str	r3, [r1, #28]

  return HAL_OK;
 800204a:	4610      	mov	r0, r2
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800204c:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800204e:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
}
 8002052:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002054:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002058:	f004 fb7a 	bl	8006750 <HAL_SPI_MspInit>
 800205c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800205e:	e7cd      	b.n	8001ffc <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8002060:	2001      	movs	r0, #1
}
 8002062:	4770      	bx	lr

08002064 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002068:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 800206c:	2c01      	cmp	r4, #1
{
 800206e:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8002070:	f000 80aa 	beq.w	80021c8 <HAL_SPI_TransmitReceive+0x164>
 8002074:	461e      	mov	r6, r3
 8002076:	2301      	movs	r3, #1
 8002078:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 800207c:	4604      	mov	r4, r0
 800207e:	4617      	mov	r7, r2
 8002080:	460d      	mov	r5, r1

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002082:	f7fe ffbb 	bl	8000ffc <HAL_GetTick>
 8002086:	4680      	mov	r8, r0

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002088:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 800208c:	6863      	ldr	r3, [r4, #4]
  tmp_state           = hspi->State;
 800208e:	b2c0      	uxtb	r0, r0
  initial_TxXferCount = Size;

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002090:	2801      	cmp	r0, #1
 8002092:	d011      	beq.n	80020b8 <HAL_SPI_TransmitReceive+0x54>
 8002094:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002098:	d009      	beq.n	80020ae <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800209a:	2002      	movs	r0, #2
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 800209c:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800209e:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80020a0:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80020a4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
}
 80020a8:	b002      	add	sp, #8
 80020aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80020ae:	68a2      	ldr	r2, [r4, #8]
 80020b0:	2a00      	cmp	r2, #0
 80020b2:	d1f2      	bne.n	800209a <HAL_SPI_TransmitReceive+0x36>
 80020b4:	2804      	cmp	r0, #4
 80020b6:	d1f0      	bne.n	800209a <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80020b8:	2d00      	cmp	r5, #0
 80020ba:	f000 8089 	beq.w	80021d0 <HAL_SPI_TransmitReceive+0x16c>
 80020be:	2f00      	cmp	r7, #0
 80020c0:	f000 8086 	beq.w	80021d0 <HAL_SPI_TransmitReceive+0x16c>
 80020c4:	2e00      	cmp	r6, #0
 80020c6:	f000 8083 	beq.w	80021d0 <HAL_SPI_TransmitReceive+0x16c>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80020ca:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020ce:	6820      	ldr	r0, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80020d0:	63a7      	str	r7, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80020d2:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80020d4:	bf1c      	itt	ne
 80020d6:	2205      	movne	r2, #5
 80020d8:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020dc:	2200      	movs	r2, #0
 80020de:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 80020e0:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80020e2:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020e4:	6801      	ldr	r1, [r0, #0]
  hspi->RxXferSize  = Size;
 80020e6:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->TxISR       = NULL;
 80020e8:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020ec:	064a      	lsls	r2, r1, #25
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80020ee:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80020f0:	86a6      	strh	r6, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020f2:	d403      	bmi.n	80020fc <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 80020f4:	6802      	ldr	r2, [r0, #0]
 80020f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020fa:	6002      	str	r2, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020fc:	68e2      	ldr	r2, [r4, #12]
 80020fe:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002102:	f000 809d 	beq.w	8002240 <HAL_SPI_TransmitReceive+0x1dc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 8102 	beq.w	8002310 <HAL_SPI_TransmitReceive+0x2ac>
 800210c:	2e01      	cmp	r6, #1
 800210e:	f000 80ff 	beq.w	8002310 <HAL_SPI_TransmitReceive+0x2ac>
 8002112:	9b08      	ldr	r3, [sp, #32]
 8002114:	3301      	adds	r3, #1
        txallowed = 1U;
 8002116:	f04f 0501 	mov.w	r5, #1
 800211a:	d027      	beq.n	800216c <HAL_SPI_TransmitReceive+0x108>
 800211c:	e05a      	b.n	80021d4 <HAL_SPI_TransmitReceive+0x170>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800211e:	6823      	ldr	r3, [r4, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	0792      	lsls	r2, r2, #30
 8002124:	d50f      	bpl.n	8002146 <HAL_SPI_TransmitReceive+0xe2>
 8002126:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002128:	b292      	uxth	r2, r2
 800212a:	b162      	cbz	r2, 8002146 <HAL_SPI_TransmitReceive+0xe2>
 800212c:	b15d      	cbz	r5, 8002146 <HAL_SPI_TransmitReceive+0xe2>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800212e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002130:	7812      	ldrb	r2, [r2, #0]
 8002132:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8002134:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8002136:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002138:	6823      	ldr	r3, [r4, #0]
        hspi->TxXferCount--;
 800213a:	3a01      	subs	r2, #1
 800213c:	b292      	uxth	r2, r2
        hspi->pTxBuffPtr++;
 800213e:	3101      	adds	r1, #1
        hspi->TxXferCount--;
 8002140:	86e2      	strh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8002142:	6321      	str	r1, [r4, #48]	; 0x30
        txallowed = 0U;
 8002144:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	07d7      	lsls	r7, r2, #31
 800214a:	d50d      	bpl.n	8002168 <HAL_SPI_TransmitReceive+0x104>
 800214c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800214e:	b292      	uxth	r2, r2
 8002150:	b152      	cbz	r2, 8002168 <HAL_SPI_TransmitReceive+0x104>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002152:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 8002158:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 800215a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800215c:	3b01      	subs	r3, #1
 800215e:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr++;
 8002160:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 8002162:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8002164:	63a2      	str	r2, [r4, #56]	; 0x38
        txallowed = 1U;
 8002166:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002168:	f7fe ff48 	bl	8000ffc <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800216c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800216e:	b29b      	uxth	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1d4      	bne.n	800211e <HAL_SPI_TransmitReceive+0xba>
 8002174:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002176:	b29b      	uxth	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1d0      	bne.n	800211e <HAL_SPI_TransmitReceive+0xba>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800217c:	4b90      	ldr	r3, [pc, #576]	; (80023c0 <HAL_SPI_TransmitReceive+0x35c>)
 800217e:	4a91      	ldr	r2, [pc, #580]	; (80023c4 <HAL_SPI_TransmitReceive+0x360>)
 8002180:	681b      	ldr	r3, [r3, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002182:	6861      	ldr	r1, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002184:	fba2 2303 	umull	r2, r3, r2, r3
 8002188:	0d5b      	lsrs	r3, r3, #21
 800218a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800218e:	fb02 f303 	mul.w	r3, r2, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002192:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002196:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002198:	d107      	bne.n	80021aa <HAL_SPI_TransmitReceive+0x146>
 800219a:	e0ce      	b.n	800233a <HAL_SPI_TransmitReceive+0x2d6>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 800219c:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800219e:	6822      	ldr	r2, [r4, #0]
      count--;
 80021a0:	3b01      	subs	r3, #1
 80021a2:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80021a4:	6893      	ldr	r3, [r2, #8]
 80021a6:	061b      	lsls	r3, r3, #24
 80021a8:	d502      	bpl.n	80021b0 <HAL_SPI_TransmitReceive+0x14c>
      if (count == 0U)
 80021aa:	9b01      	ldr	r3, [sp, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1f5      	bne.n	800219c <HAL_SPI_TransmitReceive+0x138>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80021b0:	68a0      	ldr	r0, [r4, #8]
 80021b2:	2800      	cmp	r0, #0
 80021b4:	f040 80bf 	bne.w	8002336 <HAL_SPI_TransmitReceive+0x2d2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021b8:	6823      	ldr	r3, [r4, #0]
 80021ba:	9000      	str	r0, [sp, #0]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	9200      	str	r2, [sp, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	9b00      	ldr	r3, [sp, #0]
 80021c6:	e769      	b.n	800209c <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 80021c8:	2002      	movs	r0, #2
}
 80021ca:	b002      	add	sp, #8
 80021cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errorcode = HAL_ERROR;
 80021d0:	2001      	movs	r0, #1
 80021d2:	e763      	b.n	800209c <HAL_SPI_TransmitReceive+0x38>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021d4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	b923      	cbnz	r3, 80021e4 <HAL_SPI_TransmitReceive+0x180>
 80021da:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80021dc:	b29b      	uxth	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 80b0 	beq.w	8002344 <HAL_SPI_TransmitReceive+0x2e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021e4:	6823      	ldr	r3, [r4, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	0796      	lsls	r6, r2, #30
 80021ea:	d50f      	bpl.n	800220c <HAL_SPI_TransmitReceive+0x1a8>
 80021ec:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80021ee:	b292      	uxth	r2, r2
 80021f0:	b162      	cbz	r2, 800220c <HAL_SPI_TransmitReceive+0x1a8>
 80021f2:	b15d      	cbz	r5, 800220c <HAL_SPI_TransmitReceive+0x1a8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80021f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80021f6:	7812      	ldrb	r2, [r2, #0]
 80021f8:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80021fa:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 80021fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80021fe:	6823      	ldr	r3, [r4, #0]
        hspi->TxXferCount--;
 8002200:	3a01      	subs	r2, #1
 8002202:	b292      	uxth	r2, r2
        hspi->pTxBuffPtr++;
 8002204:	3101      	adds	r1, #1
        hspi->TxXferCount--;
 8002206:	86e2      	strh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8002208:	6321      	str	r1, [r4, #48]	; 0x30
        txallowed = 0U;
 800220a:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	07d0      	lsls	r0, r2, #31
 8002210:	d50d      	bpl.n	800222e <HAL_SPI_TransmitReceive+0x1ca>
 8002212:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002214:	b292      	uxth	r2, r2
 8002216:	b152      	cbz	r2, 800222e <HAL_SPI_TransmitReceive+0x1ca>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002218:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 800221e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8002220:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002222:	3b01      	subs	r3, #1
 8002224:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr++;
 8002226:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 8002228:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 800222a:	63a2      	str	r2, [r4, #56]	; 0x38
        txallowed = 1U;
 800222c:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800222e:	f7fe fee5 	bl	8000ffc <HAL_GetTick>
 8002232:	9b08      	ldr	r3, [sp, #32]
 8002234:	eba0 0008 	sub.w	r0, r0, r8
 8002238:	4283      	cmp	r3, r0
 800223a:	d8cb      	bhi.n	80021d4 <HAL_SPI_TransmitReceive+0x170>
        errorcode = HAL_TIMEOUT;
 800223c:	2003      	movs	r0, #3
 800223e:	e72d      	b.n	800209c <HAL_SPI_TransmitReceive+0x38>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002240:	2b00      	cmp	r3, #0
 8002242:	d06f      	beq.n	8002324 <HAL_SPI_TransmitReceive+0x2c0>
 8002244:	2e01      	cmp	r6, #1
 8002246:	d06d      	beq.n	8002324 <HAL_SPI_TransmitReceive+0x2c0>
 8002248:	9b08      	ldr	r3, [sp, #32]
 800224a:	3301      	adds	r3, #1
{
 800224c:	f04f 0501 	mov.w	r5, #1
 8002250:	d024      	beq.n	800229c <HAL_SPI_TransmitReceive+0x238>
 8002252:	e02c      	b.n	80022ae <HAL_SPI_TransmitReceive+0x24a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002254:	6823      	ldr	r3, [r4, #0]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	0797      	lsls	r7, r2, #30
 800225a:	d50d      	bpl.n	8002278 <HAL_SPI_TransmitReceive+0x214>
 800225c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800225e:	b292      	uxth	r2, r2
 8002260:	b152      	cbz	r2, 8002278 <HAL_SPI_TransmitReceive+0x214>
 8002262:	b14d      	cbz	r5, 8002278 <HAL_SPI_TransmitReceive+0x214>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002264:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002266:	f831 2b02 	ldrh.w	r2, [r1], #2
 800226a:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800226c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800226e:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002270:	3a01      	subs	r2, #1
 8002272:	b292      	uxth	r2, r2
 8002274:	86e2      	strh	r2, [r4, #54]	; 0x36
        txallowed = 0U;
 8002276:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	07d6      	lsls	r6, r2, #31
 800227c:	d50c      	bpl.n	8002298 <HAL_SPI_TransmitReceive+0x234>
 800227e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002280:	b292      	uxth	r2, r2
 8002282:	b14a      	cbz	r2, 8002298 <HAL_SPI_TransmitReceive+0x234>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002284:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 800228c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800228e:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002290:	3b01      	subs	r3, #1
 8002292:	b29b      	uxth	r3, r3
 8002294:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002296:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002298:	f7fe feb0 	bl	8000ffc <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800229c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800229e:	b29b      	uxth	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1d7      	bne.n	8002254 <HAL_SPI_TransmitReceive+0x1f0>
 80022a4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1d3      	bne.n	8002254 <HAL_SPI_TransmitReceive+0x1f0>
 80022ac:	e766      	b.n	800217c <HAL_SPI_TransmitReceive+0x118>
 80022ae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	b91b      	cbnz	r3, 80022bc <HAL_SPI_TransmitReceive+0x258>
 80022b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d043      	beq.n	8002344 <HAL_SPI_TransmitReceive+0x2e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022bc:	6823      	ldr	r3, [r4, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	0790      	lsls	r0, r2, #30
 80022c2:	d50d      	bpl.n	80022e0 <HAL_SPI_TransmitReceive+0x27c>
 80022c4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80022c6:	b292      	uxth	r2, r2
 80022c8:	b152      	cbz	r2, 80022e0 <HAL_SPI_TransmitReceive+0x27c>
 80022ca:	b14d      	cbz	r5, 80022e0 <HAL_SPI_TransmitReceive+0x27c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80022ce:	f831 2b02 	ldrh.w	r2, [r1], #2
 80022d2:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80022d4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022d6:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80022d8:	3a01      	subs	r2, #1
 80022da:	b292      	uxth	r2, r2
 80022dc:	86e2      	strh	r2, [r4, #54]	; 0x36
        txallowed = 0U;
 80022de:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	07d1      	lsls	r1, r2, #31
 80022e4:	d50c      	bpl.n	8002300 <HAL_SPI_TransmitReceive+0x29c>
 80022e6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80022e8:	b292      	uxth	r2, r2
 80022ea:	b14a      	cbz	r2, 8002300 <HAL_SPI_TransmitReceive+0x29c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 80022f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80022f6:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80022f8:	3b01      	subs	r3, #1
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80022fe:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002300:	f7fe fe7c 	bl	8000ffc <HAL_GetTick>
 8002304:	9b08      	ldr	r3, [sp, #32]
 8002306:	eba0 0008 	sub.w	r0, r0, r8
 800230a:	4283      	cmp	r3, r0
 800230c:	d8cf      	bhi.n	80022ae <HAL_SPI_TransmitReceive+0x24a>
 800230e:	e795      	b.n	800223c <HAL_SPI_TransmitReceive+0x1d8>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002310:	782b      	ldrb	r3, [r5, #0]
 8002312:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 8002314:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002316:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002318:	3b01      	subs	r3, #1
 800231a:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800231c:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 800231e:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002320:	6322      	str	r2, [r4, #48]	; 0x30
 8002322:	e6f6      	b.n	8002112 <HAL_SPI_TransmitReceive+0xae>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002324:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002328:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 800232a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800232c:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800232e:	3b01      	subs	r3, #1
 8002330:	b29b      	uxth	r3, r3
 8002332:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002334:	e788      	b.n	8002248 <HAL_SPI_TransmitReceive+0x1e4>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002336:	2000      	movs	r0, #0
 8002338:	e6b0      	b.n	800209c <HAL_SPI_TransmitReceive+0x38>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800233a:	6822      	ldr	r2, [r4, #0]
 800233c:	6893      	ldr	r3, [r2, #8]
 800233e:	0619      	lsls	r1, r3, #24
 8002340:	d4fc      	bmi.n	800233c <HAL_SPI_TransmitReceive+0x2d8>
 8002342:	e735      	b.n	80021b0 <HAL_SPI_TransmitReceive+0x14c>
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002344:	4b1e      	ldr	r3, [pc, #120]	; (80023c0 <HAL_SPI_TransmitReceive+0x35c>)
 8002346:	4a1f      	ldr	r2, [pc, #124]	; (80023c4 <HAL_SPI_TransmitReceive+0x360>)
 8002348:	681b      	ldr	r3, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800234a:	6861      	ldr	r1, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800234c:	fba2 2303 	umull	r2, r3, r2, r3
 8002350:	0d5b      	lsrs	r3, r3, #21
 8002352:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002356:	fb02 f303 	mul.w	r3, r2, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800235a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800235e:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002360:	f47f af23 	bne.w	80021aa <HAL_SPI_TransmitReceive+0x146>
 8002364:	9b08      	ldr	r3, [sp, #32]
 8002366:	e006      	b.n	8002376 <HAL_SPI_TransmitReceive+0x312>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002368:	f7fe fe48 	bl	8000ffc <HAL_GetTick>
 800236c:	9b08      	ldr	r3, [sp, #32]
 800236e:	eba0 0008 	sub.w	r0, r0, r8
 8002372:	4283      	cmp	r3, r0
 8002374:	d906      	bls.n	8002384 <HAL_SPI_TransmitReceive+0x320>
 8002376:	3301      	adds	r3, #1
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002378:	6822      	ldr	r2, [r4, #0]
 800237a:	d0df      	beq.n	800233c <HAL_SPI_TransmitReceive+0x2d8>
 800237c:	6893      	ldr	r3, [r2, #8]
 800237e:	061a      	lsls	r2, r3, #24
 8002380:	d4f2      	bmi.n	8002368 <HAL_SPI_TransmitReceive+0x304>
 8002382:	e715      	b.n	80021b0 <HAL_SPI_TransmitReceive+0x14c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002384:	e9d4 3100 	ldrd	r3, r1, [r4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002388:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800238a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800238e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002392:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002394:	d018      	beq.n	80023c8 <HAL_SPI_TransmitReceive+0x364>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002396:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002398:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800239c:	d107      	bne.n	80023ae <HAL_SPI_TransmitReceive+0x34a>
          SPI_RESET_CRC(hspi);
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023ac:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80023ae:	2001      	movs	r0, #1
 80023b0:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023b6:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023b8:	4313      	orrs	r3, r2
 80023ba:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023bc:	6562      	str	r2, [r4, #84]	; 0x54
 80023be:	e66d      	b.n	800209c <HAL_SPI_TransmitReceive+0x38>
 80023c0:	20000024 	.word	0x20000024
 80023c4:	165e9f81 	.word	0x165e9f81
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023c8:	68a2      	ldr	r2, [r4, #8]
 80023ca:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80023ce:	d002      	beq.n	80023d6 <HAL_SPI_TransmitReceive+0x372>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023d0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80023d4:	d1df      	bne.n	8002396 <HAL_SPI_TransmitReceive+0x332>
          __HAL_SPI_DISABLE(hspi);
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	e7da      	b.n	8002396 <HAL_SPI_TransmitReceive+0x332>

080023e0 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023e0:	2800      	cmp	r0, #0
 80023e2:	d05c      	beq.n	800249e <HAL_TIM_Base_Init+0xbe>
{
 80023e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023e6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80023ea:	4604      	mov	r4, r0
 80023ec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023f0:	b3bb      	cbz	r3, 8002462 <HAL_TIM_Base_Init+0x82>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023f2:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023f4:	4e3a      	ldr	r6, [pc, #232]	; (80024e0 <HAL_TIM_Base_Init+0x100>)
 80023f6:	69a5      	ldr	r5, [r4, #24]
 80023f8:	68e0      	ldr	r0, [r4, #12]
 80023fa:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 80023fc:	2302      	movs	r3, #2
 80023fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002402:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8002404:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002406:	d04c      	beq.n	80024a2 <HAL_TIM_Base_Init+0xc2>
 8002408:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800240c:	d058      	beq.n	80024c0 <HAL_TIM_Base_Init+0xe0>
 800240e:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8002412:	42b2      	cmp	r2, r6
 8002414:	d02a      	beq.n	800246c <HAL_TIM_Base_Init+0x8c>
 8002416:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800241a:	42b2      	cmp	r2, r6
 800241c:	d026      	beq.n	800246c <HAL_TIM_Base_Init+0x8c>
 800241e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002422:	42b2      	cmp	r2, r6
 8002424:	d022      	beq.n	800246c <HAL_TIM_Base_Init+0x8c>
 8002426:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 800242a:	42b2      	cmp	r2, r6
 800242c:	d01e      	beq.n	800246c <HAL_TIM_Base_Init+0x8c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800242e:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8002432:	42b2      	cmp	r2, r6
 8002434:	d013      	beq.n	800245e <HAL_TIM_Base_Init+0x7e>
 8002436:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800243a:	42b2      	cmp	r2, r6
 800243c:	d00f      	beq.n	800245e <HAL_TIM_Base_Init+0x7e>
 800243e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002442:	42b2      	cmp	r2, r6
 8002444:	d00b      	beq.n	800245e <HAL_TIM_Base_Init+0x7e>
 8002446:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 800244a:	42b2      	cmp	r2, r6
 800244c:	d007      	beq.n	800245e <HAL_TIM_Base_Init+0x7e>
 800244e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002452:	42b2      	cmp	r2, r6
 8002454:	d003      	beq.n	800245e <HAL_TIM_Base_Init+0x7e>
 8002456:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800245a:	42b2      	cmp	r2, r6
 800245c:	d138      	bne.n	80024d0 <HAL_TIM_Base_Init+0xf0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800245e:	6926      	ldr	r6, [r4, #16]
 8002460:	e033      	b.n	80024ca <HAL_TIM_Base_Init+0xea>
    htim->Lock = HAL_UNLOCKED;
 8002462:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002466:	f004 fe7d 	bl	8007164 <HAL_TIM_Base_MspInit>
 800246a:	e7c2      	b.n	80023f2 <HAL_TIM_Base_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 800246c:	68a6      	ldr	r6, [r4, #8]
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800246e:	4f1d      	ldr	r7, [pc, #116]	; (80024e4 <HAL_TIM_Base_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002474:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002476:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800247c:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800247e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002482:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002484:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 8002486:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002488:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800248a:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800248c:	d101      	bne.n	8002492 <HAL_TIM_Base_Init+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800248e:	6963      	ldr	r3, [r4, #20]
 8002490:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002492:	2301      	movs	r3, #1
 8002494:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8002496:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002498:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800249c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800249e:	2001      	movs	r0, #1
}
 80024a0:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80024a2:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024a4:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80024aa:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80024ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024b0:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024b6:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80024b8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024ba:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80024bc:	6291      	str	r1, [r2, #40]	; 0x28
 80024be:	e7e6      	b.n	800248e <HAL_TIM_Base_Init+0xae>
    tmpcr1 |= Structure->CounterMode;
 80024c0:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024c2:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80024c8:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80024ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024ce:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024d4:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80024d6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024d8:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80024da:	6291      	str	r1, [r2, #40]	; 0x28
 80024dc:	e7d9      	b.n	8002492 <HAL_TIM_Base_Init+0xb2>
 80024de:	bf00      	nop
 80024e0:	40010000 	.word	0x40010000
 80024e4:	40010400 	.word	0x40010400

080024e8 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024e8:	6803      	ldr	r3, [r0, #0]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	f042 0201 	orr.w	r2, r2, #1
 80024f0:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f8:	2a06      	cmp	r2, #6
 80024fa:	d003      	beq.n	8002504 <HAL_TIM_Base_Start_IT+0x1c>
    __HAL_TIM_ENABLE(htim);
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	f042 0201 	orr.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]
}
 8002504:	2000      	movs	r0, #0
 8002506:	4770      	bx	lr

08002508 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002508:	2800      	cmp	r0, #0
 800250a:	d05c      	beq.n	80025c6 <HAL_TIM_PWM_Init+0xbe>
{
 800250c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800250e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002512:	4604      	mov	r4, r0
 8002514:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002518:	b3bb      	cbz	r3, 800258a <HAL_TIM_PWM_Init+0x82>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800251a:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800251c:	4e3a      	ldr	r6, [pc, #232]	; (8002608 <HAL_TIM_PWM_Init+0x100>)
 800251e:	69a5      	ldr	r5, [r4, #24]
 8002520:	68e0      	ldr	r0, [r4, #12]
 8002522:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8002524:	2302      	movs	r3, #2
 8002526:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800252a:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 800252c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800252e:	d04c      	beq.n	80025ca <HAL_TIM_PWM_Init+0xc2>
 8002530:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002534:	d058      	beq.n	80025e8 <HAL_TIM_PWM_Init+0xe0>
 8002536:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 800253a:	42b2      	cmp	r2, r6
 800253c:	d02a      	beq.n	8002594 <HAL_TIM_PWM_Init+0x8c>
 800253e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002542:	42b2      	cmp	r2, r6
 8002544:	d026      	beq.n	8002594 <HAL_TIM_PWM_Init+0x8c>
 8002546:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800254a:	42b2      	cmp	r2, r6
 800254c:	d022      	beq.n	8002594 <HAL_TIM_PWM_Init+0x8c>
 800254e:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8002552:	42b2      	cmp	r2, r6
 8002554:	d01e      	beq.n	8002594 <HAL_TIM_PWM_Init+0x8c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002556:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 800255a:	42b2      	cmp	r2, r6
 800255c:	d013      	beq.n	8002586 <HAL_TIM_PWM_Init+0x7e>
 800255e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002562:	42b2      	cmp	r2, r6
 8002564:	d00f      	beq.n	8002586 <HAL_TIM_PWM_Init+0x7e>
 8002566:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800256a:	42b2      	cmp	r2, r6
 800256c:	d00b      	beq.n	8002586 <HAL_TIM_PWM_Init+0x7e>
 800256e:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 8002572:	42b2      	cmp	r2, r6
 8002574:	d007      	beq.n	8002586 <HAL_TIM_PWM_Init+0x7e>
 8002576:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800257a:	42b2      	cmp	r2, r6
 800257c:	d003      	beq.n	8002586 <HAL_TIM_PWM_Init+0x7e>
 800257e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002582:	42b2      	cmp	r2, r6
 8002584:	d138      	bne.n	80025f8 <HAL_TIM_PWM_Init+0xf0>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002586:	6926      	ldr	r6, [r4, #16]
 8002588:	e033      	b.n	80025f2 <HAL_TIM_PWM_Init+0xea>
    htim->Lock = HAL_UNLOCKED;
 800258a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800258e:	f004 fd99 	bl	80070c4 <HAL_TIM_PWM_MspInit>
 8002592:	e7c2      	b.n	800251a <HAL_TIM_PWM_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8002594:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002596:	4f1d      	ldr	r7, [pc, #116]	; (800260c <HAL_TIM_PWM_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800259c:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800259e:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80025a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025a4:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025aa:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025ac:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 80025ae:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025b0:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80025b2:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025b4:	d101      	bne.n	80025ba <HAL_TIM_PWM_Init+0xb2>
    TIMx->RCR = Structure->RepetitionCounter;
 80025b6:	6963      	ldr	r3, [r4, #20]
 80025b8:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80025ba:	2301      	movs	r3, #1
 80025bc:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 80025be:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80025c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80025c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80025c6:	2001      	movs	r0, #1
}
 80025c8:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80025ca:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025cc:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80025d2:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80025d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025d8:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025de:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80025e0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025e2:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80025e4:	6291      	str	r1, [r2, #40]	; 0x28
 80025e6:	e7e6      	b.n	80025b6 <HAL_TIM_PWM_Init+0xae>
    tmpcr1 |= Structure->CounterMode;
 80025e8:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025ea:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80025f0:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80025f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025f6:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025fc:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80025fe:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002600:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002602:	6291      	str	r1, [r2, #40]	; 0x28
 8002604:	e7d9      	b.n	80025ba <HAL_TIM_PWM_Init+0xb2>
 8002606:	bf00      	nop
 8002608:	40010000 	.word	0x40010000
 800260c:	40010400 	.word	0x40010400

08002610 <HAL_TIM_PWM_Start>:
 8002610:	6803      	ldr	r3, [r0, #0]
 8002612:	2201      	movs	r2, #1
 8002614:	6a18      	ldr	r0, [r3, #32]
 8002616:	f001 011f 	and.w	r1, r1, #31
 800261a:	fa02 f101 	lsl.w	r1, r2, r1
 800261e:	ea20 0001 	bic.w	r0, r0, r1
 8002622:	b410      	push	{r4}
 8002624:	6218      	str	r0, [r3, #32]
 8002626:	6a1a      	ldr	r2, [r3, #32]
 8002628:	4c0c      	ldr	r4, [pc, #48]	; (800265c <HAL_TIM_PWM_Start+0x4c>)
 800262a:	4311      	orrs	r1, r2
 800262c:	42a3      	cmp	r3, r4
 800262e:	6219      	str	r1, [r3, #32]
 8002630:	d00f      	beq.n	8002652 <HAL_TIM_PWM_Start+0x42>
 8002632:	4a0b      	ldr	r2, [pc, #44]	; (8002660 <HAL_TIM_PWM_Start+0x50>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d00c      	beq.n	8002652 <HAL_TIM_PWM_Start+0x42>
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	f002 0207 	and.w	r2, r2, #7
 800263e:	2a06      	cmp	r2, #6
 8002640:	d003      	beq.n	800264a <HAL_TIM_PWM_Start+0x3a>
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	f042 0201 	orr.w	r2, r2, #1
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	2000      	movs	r0, #0
 800264c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002654:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002658:	645a      	str	r2, [r3, #68]	; 0x44
 800265a:	e7ed      	b.n	8002638 <HAL_TIM_PWM_Start+0x28>
 800265c:	40010000 	.word	0x40010000
 8002660:	40010400 	.word	0x40010400

08002664 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8002664:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002668:	2b01      	cmp	r3, #1
 800266a:	f000 80cc 	beq.w	8002806 <HAL_TIM_PWM_ConfigChannel+0x1a2>
{
 800266e:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8002670:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8002672:	2401      	movs	r4, #1
 8002674:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002678:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 800267c:	2a0c      	cmp	r2, #12
 800267e:	d835      	bhi.n	80026ec <HAL_TIM_PWM_ConfigChannel+0x88>
 8002680:	e8df f002 	tbb	[pc, r2]
 8002684:	34343407 	.word	0x34343407
 8002688:	3434346a 	.word	0x3434346a
 800268c:	34343496 	.word	0x34343496
 8002690:	3d          	.byte	0x3d
 8002691:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002692:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002694:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002698:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800269a:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800269c:	4e74      	ldr	r6, [pc, #464]	; (8002870 <HAL_TIM_PWM_ConfigChannel+0x20c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800269e:	f025 0501 	bic.w	r5, r5, #1
 80026a2:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80026a4:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80026a6:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80026a8:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 80026aa:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026ae:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026b2:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 80026b4:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmrx |= OC_Config->OCMode;
 80026b8:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026bc:	f000 80bb 	beq.w	8002836 <HAL_TIM_PWM_ConfigChannel+0x1d2>
 80026c0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80026c4:	42b3      	cmp	r3, r6
 80026c6:	f000 80b6 	beq.w	8002836 <HAL_TIM_PWM_ConfigChannel+0x1d2>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026ca:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80026cc:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80026ce:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80026d0:	635e      	str	r6, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026d2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026d4:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026d6:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026d8:	f044 0408 	orr.w	r4, r4, #8
 80026dc:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026de:	6999      	ldr	r1, [r3, #24]
 80026e0:	f021 0104 	bic.w	r1, r1, #4
 80026e4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026e6:	699a      	ldr	r2, [r3, #24]
 80026e8:	432a      	orrs	r2, r5
 80026ea:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80026ec:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80026ee:	2201      	movs	r2, #1
 80026f0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80026f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80026fa:	4618      	mov	r0, r3
}
 80026fc:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026fe:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002700:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002704:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002706:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002708:	4e59      	ldr	r6, [pc, #356]	; (8002870 <HAL_TIM_PWM_ConfigChannel+0x20c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800270a:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 800270e:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8002710:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8002712:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8002714:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8002716:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800271a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800271e:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002720:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002724:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002728:	d06f      	beq.n	800280a <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800272a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800272e:	42b3      	cmp	r3, r6
 8002730:	d06b      	beq.n	800280a <HAL_TIM_PWM_ConfigChannel+0x1a6>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002732:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002734:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002736:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002738:	641e      	str	r6, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800273a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800273c:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800273e:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002740:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8002744:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002746:	69d9      	ldr	r1, [r3, #28]
 8002748:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800274c:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800274e:	69da      	ldr	r2, [r3, #28]
 8002750:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8002754:	61da      	str	r2, [r3, #28]
      break;
 8002756:	e7c9      	b.n	80026ec <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002758:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800275a:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800275c:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800275e:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002760:	f8df c10c 	ldr.w	ip, [pc, #268]	; 8002870 <HAL_TIM_PWM_ConfigChannel+0x20c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002764:	f025 0510 	bic.w	r5, r5, #16
 8002768:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800276a:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800276c:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800276e:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8002770:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002774:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002778:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800277a:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800277e:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002782:	d065      	beq.n	8002850 <HAL_TIM_PWM_ConfigChannel+0x1ec>
 8002784:	4f3b      	ldr	r7, [pc, #236]	; (8002874 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8002786:	42bb      	cmp	r3, r7
 8002788:	d062      	beq.n	8002850 <HAL_TIM_PWM_ConfigChannel+0x1ec>
  TIMx->CCR2 = OC_Config->Pulse;
 800278a:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800278c:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800278e:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002790:	639e      	str	r6, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002792:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002794:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002796:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002798:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 800279c:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800279e:	6999      	ldr	r1, [r3, #24]
 80027a0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80027a4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027a6:	699a      	ldr	r2, [r3, #24]
 80027a8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80027ac:	619a      	str	r2, [r3, #24]
      break;
 80027ae:	e79d      	b.n	80026ec <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027b0:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027b2:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027b4:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 80027b6:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027b8:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8002870 <HAL_TIM_PWM_ConfigChannel+0x20c>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027bc:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 80027c0:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80027c2:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80027c4:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80027c6:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 80027c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027cc:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027d0:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027d2:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 80027d6:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027da:	d01c      	beq.n	8002816 <HAL_TIM_PWM_ConfigChannel+0x1b2>
 80027dc:	4f25      	ldr	r7, [pc, #148]	; (8002874 <HAL_TIM_PWM_ConfigChannel+0x210>)
 80027de:	42bb      	cmp	r3, r7
 80027e0:	d019      	beq.n	8002816 <HAL_TIM_PWM_ConfigChannel+0x1b2>
  TIMx->CCR3 = OC_Config->Pulse;
 80027e2:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80027e4:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80027e6:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80027e8:	63de      	str	r6, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80027ea:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027ec:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027ee:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027f0:	f044 0408 	orr.w	r4, r4, #8
 80027f4:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027f6:	69d9      	ldr	r1, [r3, #28]
 80027f8:	f021 0104 	bic.w	r1, r1, #4
 80027fc:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027fe:	69da      	ldr	r2, [r3, #28]
 8002800:	432a      	orrs	r2, r5
 8002802:	61da      	str	r2, [r3, #28]
      break;
 8002804:	e772      	b.n	80026ec <HAL_TIM_PWM_ConfigChannel+0x88>
  __HAL_LOCK(htim);
 8002806:	2002      	movs	r0, #2
}
 8002808:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800280a:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800280c:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002810:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8002814:	e78d      	b.n	8002732 <HAL_TIM_PWM_ConfigChannel+0xce>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002816:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002818:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800281c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002820:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002824:	f425 5c40 	bic.w	ip, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002828:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 800282c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002830:	ea4c 1505 	orr.w	r5, ip, r5, lsl #4
 8002834:	e7d5      	b.n	80027e2 <HAL_TIM_PWM_ConfigChannel+0x17e>
    tmpccer |= OC_Config->OCNPolarity;
 8002836:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002838:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 800283c:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 800283e:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002842:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002846:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 8002848:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800284c:	4335      	orrs	r5, r6
 800284e:	e73c      	b.n	80026ca <HAL_TIM_PWM_ConfigChannel+0x66>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002850:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002852:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002856:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800285a:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800285e:	f425 6c40 	bic.w	ip, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002862:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8002866:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800286a:	ea4c 0585 	orr.w	r5, ip, r5, lsl #2
 800286e:	e78c      	b.n	800278a <HAL_TIM_PWM_ConfigChannel+0x126>
 8002870:	40010000 	.word	0x40010000
 8002874:	40010400 	.word	0x40010400

08002878 <HAL_TIM_OC_DelayElapsedCallback>:
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop

0800287c <HAL_TIM_IC_CaptureCallback>:
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop

08002880 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop

08002884 <HAL_TIM_TriggerCallback>:
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop

08002888 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002888:	6803      	ldr	r3, [r0, #0]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	0791      	lsls	r1, r2, #30
{
 800288e:	b510      	push	{r4, lr}
 8002890:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002892:	d502      	bpl.n	800289a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	0792      	lsls	r2, r2, #30
 8002898:	d45f      	bmi.n	800295a <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	0750      	lsls	r0, r2, #29
 800289e:	d502      	bpl.n	80028a6 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	0751      	lsls	r1, r2, #29
 80028a4:	d446      	bmi.n	8002934 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	0712      	lsls	r2, r2, #28
 80028aa:	d502      	bpl.n	80028b2 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	0710      	lsls	r0, r2, #28
 80028b0:	d42e      	bmi.n	8002910 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	06d2      	lsls	r2, r2, #27
 80028b6:	d502      	bpl.n	80028be <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	06d0      	lsls	r0, r2, #27
 80028bc:	d418      	bmi.n	80028f0 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	07d1      	lsls	r1, r2, #31
 80028c2:	d502      	bpl.n	80028ca <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	07d2      	lsls	r2, r2, #31
 80028c8:	d45d      	bmi.n	8002986 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	0610      	lsls	r0, r2, #24
 80028ce:	d502      	bpl.n	80028d6 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	0611      	lsls	r1, r2, #24
 80028d4:	d45f      	bmi.n	8002996 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028d6:	691a      	ldr	r2, [r3, #16]
 80028d8:	0652      	lsls	r2, r2, #25
 80028da:	d502      	bpl.n	80028e2 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	0650      	lsls	r0, r2, #25
 80028e0:	d461      	bmi.n	80029a6 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	0691      	lsls	r1, r2, #26
 80028e6:	d502      	bpl.n	80028ee <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	0692      	lsls	r2, r2, #26
 80028ec:	d443      	bmi.n	8002976 <HAL_TIM_IRQHandler+0xee>
}
 80028ee:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028f0:	f06f 0210 	mvn.w	r2, #16
 80028f4:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028f6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028f8:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028fa:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028fe:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002900:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002902:	d064      	beq.n	80029ce <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002904:	f7ff ffba 	bl	800287c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002908:	2200      	movs	r2, #0
 800290a:	6823      	ldr	r3, [r4, #0]
 800290c:	7722      	strb	r2, [r4, #28]
 800290e:	e7d6      	b.n	80028be <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002910:	f06f 0208 	mvn.w	r2, #8
 8002914:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002916:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002918:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800291a:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800291c:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800291e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002920:	d152      	bne.n	80029c8 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002922:	f7ff ffa9 	bl	8002878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002926:	4620      	mov	r0, r4
 8002928:	f7ff ffaa 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800292c:	2200      	movs	r2, #0
 800292e:	6823      	ldr	r3, [r4, #0]
 8002930:	7722      	strb	r2, [r4, #28]
 8002932:	e7be      	b.n	80028b2 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002934:	f06f 0204 	mvn.w	r2, #4
 8002938:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800293a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800293c:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800293e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002942:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002944:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002946:	d13c      	bne.n	80029c2 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002948:	f7ff ff96 	bl	8002878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800294c:	4620      	mov	r0, r4
 800294e:	f7ff ff97 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002952:	2200      	movs	r2, #0
 8002954:	6823      	ldr	r3, [r4, #0]
 8002956:	7722      	strb	r2, [r4, #28]
 8002958:	e7a5      	b.n	80028a6 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800295a:	f06f 0202 	mvn.w	r2, #2
 800295e:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002960:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002962:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002964:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002966:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002968:	d025      	beq.n	80029b6 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800296a:	f7ff ff87 	bl	800287c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800296e:	2200      	movs	r2, #0
 8002970:	6823      	ldr	r3, [r4, #0]
 8002972:	7722      	strb	r2, [r4, #28]
 8002974:	e791      	b.n	800289a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002976:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800297a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800297c:	611a      	str	r2, [r3, #16]
}
 800297e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002982:	f000 b877 	b.w	8002a74 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002986:	f06f 0201 	mvn.w	r2, #1
 800298a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800298c:	4620      	mov	r0, r4
 800298e:	f003 fb33 	bl	8005ff8 <HAL_TIM_PeriodElapsedCallback>
 8002992:	6823      	ldr	r3, [r4, #0]
 8002994:	e799      	b.n	80028ca <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002996:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800299a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800299c:	4620      	mov	r0, r4
 800299e:	f000 f86b 	bl	8002a78 <HAL_TIMEx_BreakCallback>
 80029a2:	6823      	ldr	r3, [r4, #0]
 80029a4:	e797      	b.n	80028d6 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029aa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80029ac:	4620      	mov	r0, r4
 80029ae:	f7ff ff69 	bl	8002884 <HAL_TIM_TriggerCallback>
 80029b2:	6823      	ldr	r3, [r4, #0]
 80029b4:	e795      	b.n	80028e2 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b6:	f7ff ff5f 	bl	8002878 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ba:	4620      	mov	r0, r4
 80029bc:	f7ff ff60 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
 80029c0:	e7d5      	b.n	800296e <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 80029c2:	f7ff ff5b 	bl	800287c <HAL_TIM_IC_CaptureCallback>
 80029c6:	e7c4      	b.n	8002952 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 80029c8:	f7ff ff58 	bl	800287c <HAL_TIM_IC_CaptureCallback>
 80029cc:	e7ae      	b.n	800292c <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ce:	f7ff ff53 	bl	8002878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d2:	4620      	mov	r0, r4
 80029d4:	f7ff ff54 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
 80029d8:	e796      	b.n	8002908 <HAL_TIM_IRQHandler+0x80>
 80029da:	bf00      	nop

080029dc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029dc:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80029e0:	2a01      	cmp	r2, #1
 80029e2:	d01a      	beq.n	8002a1a <HAL_TIMEx_MasterConfigSynchronization+0x3e>
{
 80029e4:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e6:	2202      	movs	r2, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029e8:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80029ea:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029ee:	e9d1 6500 	ldrd	r6, r5, [r1]
 80029f2:	4603      	mov	r3, r0
  tmpcr2 = htim->Instance->CR2;
 80029f4:	6860      	ldr	r0, [r4, #4]
  tmpsmcr = htim->Instance->SMCR;
 80029f6:	68a2      	ldr	r2, [r4, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80029f8:	f020 0170 	bic.w	r1, r0, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 80029fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a00:	4331      	orrs	r1, r6
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a02:	432a      	orrs	r2, r5

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a04:	2601      	movs	r6, #1

  __HAL_UNLOCK(htim);
 8002a06:	2500      	movs	r5, #0
  htim->Instance->CR2 = tmpcr2;
 8002a08:	6061      	str	r1, [r4, #4]

  return HAL_OK;
 8002a0a:	4628      	mov	r0, r5
  htim->Instance->SMCR = tmpsmcr;
 8002a0c:	60a2      	str	r2, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002a0e:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002a12:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
}
 8002a16:	bc70      	pop	{r4, r5, r6}
 8002a18:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002a1a:	2002      	movs	r0, #2
}
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop

08002a20 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a20:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d021      	beq.n	8002a6c <HAL_TIMEx_ConfigBreakDeadTime+0x4c>
{
 8002a28:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002a2a:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002a2e:	e9d1 2400 	ldrd	r2, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a36:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002a38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a3c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002a3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002a42:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002a46:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002a48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a4c:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002a4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002a52:	69c9      	ldr	r1, [r1, #28]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002a54:	6802      	ldr	r2, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002a56:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002a58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a5c:	430b      	orrs	r3, r1

  __HAL_UNLOCK(htim);
 8002a5e:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8002a60:	6453      	str	r3, [r2, #68]	; 0x44

  return HAL_OK;
}
 8002a62:	bc30      	pop	{r4, r5}
  __HAL_UNLOCK(htim);
 8002a64:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
}
 8002a68:	4608      	mov	r0, r1
 8002a6a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002a6c:	2302      	movs	r3, #2
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop

08002a74 <HAL_TIMEx_CommutCallback>:
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop

08002a78 <HAL_TIMEx_BreakCallback>:
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop

08002a7c <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a7c:	2800      	cmp	r0, #0
 8002a7e:	f000 8104 	beq.w	8002c8a <HAL_UART_Init+0x20e>
{
 8002a82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a86:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002a8a:	4604      	mov	r4, r0
 8002a8c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 80f5 	beq.w	8002c80 <HAL_UART_Init+0x204>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a96:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a98:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8002a9a:	2224      	movs	r2, #36	; 0x24
 8002a9c:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002aa0:	68d8      	ldr	r0, [r3, #12]
 8002aa2:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002aa6:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8002aaa:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aac:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002aae:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ab0:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002ab4:	4329      	orrs	r1, r5
 8002ab6:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002ab8:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002aba:	6965      	ldr	r5, [r4, #20]
 8002abc:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 8002abe:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ac2:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8002ac4:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ac8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002aca:	430a      	orrs	r2, r1
 8002acc:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ace:	695a      	ldr	r2, [r3, #20]
 8002ad0:	69a1      	ldr	r1, [r4, #24]
 8002ad2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002ad6:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ad8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002adc:	615a      	str	r2, [r3, #20]
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ade:	4aaa      	ldr	r2, [pc, #680]	; (8002d88 <HAL_UART_Init+0x30c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ae0:	d071      	beq.n	8002bc6 <HAL_UART_Init+0x14a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	f000 80d3 	beq.w	8002c8e <HAL_UART_Init+0x212>
 8002ae8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002aec:	4293      	cmp	r3, r2
 8002aee:	f000 80ce 	beq.w	8002c8e <HAL_UART_Init+0x212>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002af2:	f7ff fa57 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 8002af6:	4fa5      	ldr	r7, [pc, #660]	; (8002d8c <HAL_UART_Init+0x310>)
 8002af8:	6863      	ldr	r3, [r4, #4]
 8002afa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002afe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b08:	fba7 2303 	umull	r2, r3, r7, r3
 8002b0c:	095b      	lsrs	r3, r3, #5
 8002b0e:	011d      	lsls	r5, r3, #4
 8002b10:	f7ff fa48 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 8002b14:	6866      	ldr	r6, [r4, #4]
 8002b16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b1e:	00b6      	lsls	r6, r6, #2
 8002b20:	fbb0 f6f6 	udiv	r6, r0, r6
 8002b24:	f7ff fa3e 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 8002b28:	6863      	ldr	r3, [r4, #4]
 8002b2a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b2e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b38:	fba7 2303 	umull	r2, r3, r7, r3
 8002b3c:	095b      	lsrs	r3, r3, #5
 8002b3e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002b42:	fb09 6313 	mls	r3, r9, r3, r6
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	3332      	adds	r3, #50	; 0x32
 8002b4a:	fba7 2303 	umull	r2, r3, r7, r3
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8002b54:	f7ff fa26 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 8002b58:	6862      	ldr	r2, [r4, #4]
 8002b5a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b5e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b62:	0093      	lsls	r3, r2, #2
 8002b64:	fbb0 f8f3 	udiv	r8, r0, r3
 8002b68:	f7ff fa1c 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 8002b6c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8002b70:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b74:	008b      	lsls	r3, r1, #2
 8002b76:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b7e:	fba7 1303 	umull	r1, r3, r7, r3
 8002b82:	095b      	lsrs	r3, r3, #5
 8002b84:	fb09 8313 	mls	r3, r9, r3, r8
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	3332      	adds	r3, #50	; 0x32
 8002b8c:	fba7 1303 	umull	r1, r3, r7, r3
 8002b90:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8002b94:	4333      	orrs	r3, r6
 8002b96:	442b      	add	r3, r5
 8002b98:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b9a:	6913      	ldr	r3, [r2, #16]
 8002b9c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002ba0:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ba2:	6953      	ldr	r3, [r2, #20]
 8002ba4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002ba8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002baa:	68d3      	ldr	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bac:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8002bae:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8002bb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bb4:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8002bb6:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb8:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002bba:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002bbe:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8002bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	f000 809f 	beq.w	8002d0a <HAL_UART_Init+0x28e>
 8002bcc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	f000 809a 	beq.w	8002d0a <HAL_UART_Init+0x28e>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002bd6:	f7ff f9e5 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 8002bda:	4f6c      	ldr	r7, [pc, #432]	; (8002d8c <HAL_UART_Init+0x310>)
 8002bdc:	6863      	ldr	r3, [r4, #4]
 8002bde:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002be2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bec:	fba7 2303 	umull	r2, r3, r7, r3
 8002bf0:	095b      	lsrs	r3, r3, #5
 8002bf2:	011e      	lsls	r6, r3, #4
 8002bf4:	f7ff f9d6 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 8002bf8:	6865      	ldr	r5, [r4, #4]
 8002bfa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002bfe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c02:	006d      	lsls	r5, r5, #1
 8002c04:	fbb0 f5f5 	udiv	r5, r0, r5
 8002c08:	f7ff f9cc 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 8002c0c:	6863      	ldr	r3, [r4, #4]
 8002c0e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c1c:	fba7 2303 	umull	r2, r3, r7, r3
 8002c20:	095b      	lsrs	r3, r3, #5
 8002c22:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002c26:	fb09 5313 	mls	r3, r9, r3, r5
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	3332      	adds	r3, #50	; 0x32
 8002c2e:	fba7 2303 	umull	r2, r3, r7, r3
 8002c32:	091b      	lsrs	r3, r3, #4
 8002c34:	f403 75f8 	and.w	r5, r3, #496	; 0x1f0
 8002c38:	f7ff f9b4 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 8002c3c:	6862      	ldr	r2, [r4, #4]
 8002c3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c46:	0053      	lsls	r3, r2, #1
 8002c48:	fbb0 f8f3 	udiv	r8, r0, r3
 8002c4c:	f7ff f9aa 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 8002c50:	e9d4 2100 	ldrd	r2, r1, [r4]
 8002c54:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c58:	004b      	lsls	r3, r1, #1
 8002c5a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c62:	fba7 1303 	umull	r1, r3, r7, r3
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	fb09 8313 	mls	r3, r9, r3, r8
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	3332      	adds	r3, #50	; 0x32
 8002c70:	fba7 1303 	umull	r1, r3, r7, r3
 8002c74:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002c78:	4433      	add	r3, r6
 8002c7a:	442b      	add	r3, r5
 8002c7c:	6093      	str	r3, [r2, #8]
 8002c7e:	e78c      	b.n	8002b9a <HAL_UART_Init+0x11e>
    huart->Lock = HAL_UNLOCKED;
 8002c80:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002c84:	f004 fb00 	bl	8007288 <HAL_UART_MspInit>
 8002c88:	e705      	b.n	8002a96 <HAL_UART_Init+0x1a>
    return HAL_ERROR;
 8002c8a:	2001      	movs	r0, #1
}
 8002c8c:	4770      	bx	lr
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002c8e:	f7ff f999 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 8002c92:	4f3e      	ldr	r7, [pc, #248]	; (8002d8c <HAL_UART_Init+0x310>)
 8002c94:	6863      	ldr	r3, [r4, #4]
 8002c96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c9a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ca4:	fba7 2303 	umull	r2, r3, r7, r3
 8002ca8:	095b      	lsrs	r3, r3, #5
 8002caa:	011d      	lsls	r5, r3, #4
 8002cac:	f7ff f98a 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 8002cb0:	6866      	ldr	r6, [r4, #4]
 8002cb2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002cb6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002cba:	00b6      	lsls	r6, r6, #2
 8002cbc:	fbb0 f6f6 	udiv	r6, r0, r6
 8002cc0:	f7ff f980 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 8002cc4:	6863      	ldr	r3, [r4, #4]
 8002cc6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002cca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cd4:	fba7 2303 	umull	r2, r3, r7, r3
 8002cd8:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002cdc:	095b      	lsrs	r3, r3, #5
 8002cde:	fb09 6313 	mls	r3, r9, r3, r6
 8002ce2:	011b      	lsls	r3, r3, #4
 8002ce4:	3332      	adds	r3, #50	; 0x32
 8002ce6:	fba7 2303 	umull	r2, r3, r7, r3
 8002cea:	095b      	lsrs	r3, r3, #5
 8002cec:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8002cf0:	f7ff f968 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 8002cf4:	6862      	ldr	r2, [r4, #4]
 8002cf6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002cfa:	0093      	lsls	r3, r2, #2
 8002cfc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d00:	fbb0 f8f3 	udiv	r8, r0, r3
 8002d04:	f7ff f95e 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 8002d08:	e730      	b.n	8002b6c <HAL_UART_Init+0xf0>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002d0a:	f7ff f95b 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 8002d0e:	4f1f      	ldr	r7, [pc, #124]	; (8002d8c <HAL_UART_Init+0x310>)
 8002d10:	6863      	ldr	r3, [r4, #4]
 8002d12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d20:	fba7 2303 	umull	r2, r3, r7, r3
 8002d24:	095b      	lsrs	r3, r3, #5
 8002d26:	011e      	lsls	r6, r3, #4
 8002d28:	f7ff f94c 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 8002d2c:	6865      	ldr	r5, [r4, #4]
 8002d2e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d32:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d36:	006d      	lsls	r5, r5, #1
 8002d38:	fbb0 f5f5 	udiv	r5, r0, r5
 8002d3c:	f7ff f942 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 8002d40:	6863      	ldr	r3, [r4, #4]
 8002d42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d46:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d50:	fba7 2303 	umull	r2, r3, r7, r3
 8002d54:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002d58:	095b      	lsrs	r3, r3, #5
 8002d5a:	fb09 5313 	mls	r3, r9, r3, r5
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	3332      	adds	r3, #50	; 0x32
 8002d62:	fba7 2303 	umull	r2, r3, r7, r3
 8002d66:	091b      	lsrs	r3, r3, #4
 8002d68:	f403 75f8 	and.w	r5, r3, #496	; 0x1f0
 8002d6c:	f7ff f92a 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 8002d70:	6862      	ldr	r2, [r4, #4]
 8002d72:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d76:	0053      	lsls	r3, r2, #1
 8002d78:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d7c:	fbb0 f8f3 	udiv	r8, r0, r3
 8002d80:	f7ff f920 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 8002d84:	e764      	b.n	8002c50 <HAL_UART_Init+0x1d4>
 8002d86:	bf00      	nop
 8002d88:	40011000 	.word	0x40011000
 8002d8c:	51eb851f 	.word	0x51eb851f

08002d90 <HAL_UART_Transmit>:
{
 8002d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d92:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8002d94:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8002d98:	2920      	cmp	r1, #32
{
 8002d9a:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8002d9c:	d12d      	bne.n	8002dfa <HAL_UART_Transmit+0x6a>
    if ((pData == NULL) || (Size == 0U))
 8002d9e:	2e00      	cmp	r6, #0
 8002da0:	d02e      	beq.n	8002e00 <HAL_UART_Transmit+0x70>
 8002da2:	9201      	str	r2, [sp, #4]
 8002da4:	b362      	cbz	r2, 8002e00 <HAL_UART_Transmit+0x70>
 8002da6:	461f      	mov	r7, r3
    __HAL_LOCK(huart);
 8002da8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	4604      	mov	r4, r0
 8002db0:	d023      	beq.n	8002dfa <HAL_UART_Transmit+0x6a>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002db2:	2300      	movs	r3, #0
 8002db4:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_LOCK(huart);
 8002db6:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002db8:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8002dba:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dbe:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002dc2:	f7fe f91b 	bl	8000ffc <HAL_GetTick>
    huart->TxXferSize = Size;
 8002dc6:	9a01      	ldr	r2, [sp, #4]
 8002dc8:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002dca:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002dcc:	6822      	ldr	r2, [r4, #0]
    tickstart = HAL_GetTick();
 8002dce:	4605      	mov	r5, r0
    while (huart->TxXferCount > 0U)
 8002dd0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d039      	beq.n	8002e4c <HAL_UART_Transmit+0xbc>
      huart->TxXferCount--;
 8002dd8:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002dda:	68a1      	ldr	r1, [r4, #8]
      huart->TxXferCount--;
 8002ddc:	3801      	subs	r0, #1
 8002dde:	b280      	uxth	r0, r0
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002de0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      huart->TxXferCount--;
 8002de4:	84e0      	strh	r0, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002de6:	d019      	beq.n	8002e1c <HAL_UART_Transmit+0x8c>
 8002de8:	1c78      	adds	r0, r7, #1
 8002dea:	d13b      	bne.n	8002e64 <HAL_UART_Transmit+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dec:	6810      	ldr	r0, [r2, #0]
 8002dee:	0601      	lsls	r1, r0, #24
 8002df0:	d5fc      	bpl.n	8002dec <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002df2:	7833      	ldrb	r3, [r6, #0]
 8002df4:	6053      	str	r3, [r2, #4]
 8002df6:	3601      	adds	r6, #1
 8002df8:	e7ea      	b.n	8002dd0 <HAL_UART_Transmit+0x40>
    return HAL_BUSY;
 8002dfa:	2002      	movs	r0, #2
}
 8002dfc:	b003      	add	sp, #12
 8002dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 8002e00:	2001      	movs	r0, #1
}
 8002e02:	b003      	add	sp, #12
 8002e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e06:	6813      	ldr	r3, [r2, #0]
 8002e08:	061b      	lsls	r3, r3, #24
 8002e0a:	d40c      	bmi.n	8002e26 <HAL_UART_Transmit+0x96>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e0c:	2f00      	cmp	r7, #0
 8002e0e:	d033      	beq.n	8002e78 <HAL_UART_Transmit+0xe8>
 8002e10:	f7fe f8f4 	bl	8000ffc <HAL_GetTick>
 8002e14:	1b40      	subs	r0, r0, r5
 8002e16:	4287      	cmp	r7, r0
 8002e18:	6822      	ldr	r2, [r4, #0]
 8002e1a:	d32d      	bcc.n	8002e78 <HAL_UART_Transmit+0xe8>
 8002e1c:	1c78      	adds	r0, r7, #1
 8002e1e:	d1f2      	bne.n	8002e06 <HAL_UART_Transmit+0x76>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e20:	6810      	ldr	r0, [r2, #0]
 8002e22:	0601      	lsls	r1, r0, #24
 8002e24:	d5fc      	bpl.n	8002e20 <HAL_UART_Transmit+0x90>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002e26:	8833      	ldrh	r3, [r6, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002e28:	6921      	ldr	r1, [r4, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e2e:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002e30:	2900      	cmp	r1, #0
 8002e32:	d1e0      	bne.n	8002df6 <HAL_UART_Transmit+0x66>
          pData += 2U;
 8002e34:	3602      	adds	r6, #2
 8002e36:	e7cb      	b.n	8002dd0 <HAL_UART_Transmit+0x40>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e38:	6813      	ldr	r3, [r2, #0]
 8002e3a:	065b      	lsls	r3, r3, #25
 8002e3c:	d40b      	bmi.n	8002e56 <HAL_UART_Transmit+0xc6>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e3e:	b1df      	cbz	r7, 8002e78 <HAL_UART_Transmit+0xe8>
 8002e40:	f7fe f8dc 	bl	8000ffc <HAL_GetTick>
 8002e44:	1b40      	subs	r0, r0, r5
 8002e46:	4287      	cmp	r7, r0
 8002e48:	6822      	ldr	r2, [r4, #0]
 8002e4a:	d315      	bcc.n	8002e78 <HAL_UART_Transmit+0xe8>
 8002e4c:	1c78      	adds	r0, r7, #1
 8002e4e:	d1f3      	bne.n	8002e38 <HAL_UART_Transmit+0xa8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e50:	6813      	ldr	r3, [r2, #0]
 8002e52:	0659      	lsls	r1, r3, #25
 8002e54:	d5fc      	bpl.n	8002e50 <HAL_UART_Transmit+0xc0>
    huart->gState = HAL_UART_STATE_READY;
 8002e56:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002e58:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 8002e5a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002e5e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002e62:	e7cb      	b.n	8002dfc <HAL_UART_Transmit+0x6c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e64:	6813      	ldr	r3, [r2, #0]
 8002e66:	061b      	lsls	r3, r3, #24
 8002e68:	d4c3      	bmi.n	8002df2 <HAL_UART_Transmit+0x62>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e6a:	b12f      	cbz	r7, 8002e78 <HAL_UART_Transmit+0xe8>
 8002e6c:	f7fe f8c6 	bl	8000ffc <HAL_GetTick>
 8002e70:	1b40      	subs	r0, r0, r5
 8002e72:	4287      	cmp	r7, r0
 8002e74:	6822      	ldr	r2, [r4, #0]
 8002e76:	d2b7      	bcs.n	8002de8 <HAL_UART_Transmit+0x58>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e78:	68d3      	ldr	r3, [r2, #12]
 8002e7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e7e:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e80:	6953      	ldr	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002e82:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e84:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8002e88:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 8002e8a:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e8c:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002e8e:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
        __HAL_UNLOCK(huart);
 8002e92:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 8002e96:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8002e9a:	b003      	add	sp, #12
 8002e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e9e:	bf00      	nop

08002ea0 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ea0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002ea4:	2b20      	cmp	r3, #32
 8002ea6:	d120      	bne.n	8002eea <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8002ea8:	b309      	cbz	r1, 8002eee <HAL_UART_Receive_IT+0x4e>
 8002eaa:	b302      	cbz	r2, 8002eee <HAL_UART_Receive_IT+0x4e>
    __HAL_LOCK(huart);
 8002eac:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d01a      	beq.n	8002eea <HAL_UART_Receive_IT+0x4a>
{
 8002eb4:	b430      	push	{r4, r5}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb6:	2300      	movs	r3, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002eb8:	6804      	ldr	r4, [r0, #0]
    huart->RxXferCount = Size;
 8002eba:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ebc:	2522      	movs	r5, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ebe:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ec0:	f880 503a 	strb.w	r5, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ec4:	68e5      	ldr	r5, [r4, #12]
    huart->RxXferSize = Size;
 8002ec6:	8582      	strh	r2, [r0, #44]	; 0x2c
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ec8:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    huart->pRxBuffPtr = pData;
 8002ecc:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UNLOCK(huart);
 8002ece:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ed2:	60e5      	str	r5, [r4, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002ed4:	6962      	ldr	r2, [r4, #20]
 8002ed6:	f042 0201 	orr.w	r2, r2, #1
 8002eda:	6162      	str	r2, [r4, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002edc:	68e2      	ldr	r2, [r4, #12]
 8002ede:	f042 0220 	orr.w	r2, r2, #32
    return HAL_OK;
 8002ee2:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002ee4:	60e2      	str	r2, [r4, #12]
}
 8002ee6:	bc30      	pop	{r4, r5}
 8002ee8:	4770      	bx	lr
    return HAL_BUSY;
 8002eea:	2002      	movs	r0, #2
}
 8002eec:	4770      	bx	lr
      return HAL_ERROR;
 8002eee:	2001      	movs	r0, #1
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop

08002ef4 <HAL_UART_TxCpltCallback>:
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop

08002ef8 <UART_Receive_IT.part.1>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8002ef8:	b510      	push	{r4, lr}
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002efa:	6884      	ldr	r4, [r0, #8]
 8002efc:	6901      	ldr	r1, [r0, #16]
 8002efe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002f00:	6802      	ldr	r2, [r0, #0]
 8002f02:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8002f06:	d020      	beq.n	8002f4a <UART_Receive_IT.part.1+0x52>
 8002f08:	1c5c      	adds	r4, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f0a:	6852      	ldr	r2, [r2, #4]
 8002f0c:	6284      	str	r4, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002f0e:	b9c9      	cbnz	r1, 8002f44 <UART_Receive_IT.part.1+0x4c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f10:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 8002f12:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8002f14:	3b01      	subs	r3, #1
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8002f1a:	b98b      	cbnz	r3, 8002f40 <UART_Receive_IT.part.1+0x48>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f1c:	6802      	ldr	r2, [r0, #0]
 8002f1e:	68d1      	ldr	r1, [r2, #12]
 8002f20:	f021 0120 	bic.w	r1, r1, #32
 8002f24:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f26:	68d1      	ldr	r1, [r2, #12]
 8002f28:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002f2c:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f2e:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002f30:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f32:	f021 0101 	bic.w	r1, r1, #1
 8002f36:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002f38:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002f3c:	f001 fea6 	bl	8004c8c <HAL_UART_RxCpltCallback>
}
 8002f40:	2000      	movs	r0, #0
 8002f42:	bd10      	pop	{r4, pc}
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f48:	e7e2      	b.n	8002f10 <UART_Receive_IT.part.1+0x18>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f4a:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002f4c:	b929      	cbnz	r1, 8002f5a <UART_Receive_IT.part.1+0x62>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f52:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 2U;
 8002f56:	6283      	str	r3, [r0, #40]	; 0x28
 8002f58:	e7db      	b.n	8002f12 <UART_Receive_IT.part.1+0x1a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1U;
 8002f60:	6283      	str	r3, [r0, #40]	; 0x28
 8002f62:	e7d6      	b.n	8002f12 <UART_Receive_IT.part.1+0x1a>

08002f64 <HAL_UART_ErrorCallback>:
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop

08002f68 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f68:	6803      	ldr	r3, [r0, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
{
 8002f6c:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8002f6e:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f70:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f72:	6959      	ldr	r1, [r3, #20]
{
 8002f74:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8002f76:	d049      	beq.n	800300c <HAL_UART_IRQHandler+0xa4>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f78:	f011 0101 	ands.w	r1, r1, #1
 8002f7c:	d04f      	beq.n	800301e <HAL_UART_IRQHandler+0xb6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f7e:	07d6      	lsls	r6, r2, #31
 8002f80:	d505      	bpl.n	8002f8e <HAL_UART_IRQHandler+0x26>
 8002f82:	05e8      	lsls	r0, r5, #23
 8002f84:	d503      	bpl.n	8002f8e <HAL_UART_IRQHandler+0x26>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f86:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002f88:	f040 0001 	orr.w	r0, r0, #1
 8002f8c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f8e:	0756      	lsls	r6, r2, #29
 8002f90:	f002 0002 	and.w	r0, r2, #2
 8002f94:	d575      	bpl.n	8003082 <HAL_UART_IRQHandler+0x11a>
 8002f96:	b161      	cbz	r1, 8002fb2 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f98:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002f9a:	f041 0102 	orr.w	r1, r1, #2
 8002f9e:	63e1      	str	r1, [r4, #60]	; 0x3c
 8002fa0:	f002 0608 	and.w	r6, r2, #8
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fa4:	2800      	cmp	r0, #0
 8002fa6:	d171      	bne.n	800308c <HAL_UART_IRQHandler+0x124>
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fa8:	b11e      	cbz	r6, 8002fb2 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002faa:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002fac:	f041 0108 	orr.w	r1, r1, #8
 8002fb0:	63e1      	str	r1, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fb2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002fb4:	2900      	cmp	r1, #0
 8002fb6:	d031      	beq.n	800301c <HAL_UART_IRQHandler+0xb4>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fb8:	0696      	lsls	r6, r2, #26
 8002fba:	d501      	bpl.n	8002fc0 <HAL_UART_IRQHandler+0x58>
 8002fbc:	06a8      	lsls	r0, r5, #26
 8002fbe:	d473      	bmi.n	80030a8 <HAL_UART_IRQHandler+0x140>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002fc0:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002fc2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002fc4:	0709      	lsls	r1, r1, #28
 8002fc6:	d402      	bmi.n	8002fce <HAL_UART_IRQHandler+0x66>
 8002fc8:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002fcc:	d079      	beq.n	80030c2 <HAL_UART_IRQHandler+0x15a>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002fd4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd6:	695a      	ldr	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8002fd8:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fda:	f022 0201 	bic.w	r2, r2, #1
 8002fde:	615a      	str	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8002fe0:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe4:	695a      	ldr	r2, [r3, #20]
 8002fe6:	0652      	lsls	r2, r2, #25
 8002fe8:	d55a      	bpl.n	80030a0 <HAL_UART_IRQHandler+0x138>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fea:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002fec:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ff2:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002ff4:	2800      	cmp	r0, #0
 8002ff6:	d053      	beq.n	80030a0 <HAL_UART_IRQHandler+0x138>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ff8:	4b3a      	ldr	r3, [pc, #232]	; (80030e4 <HAL_UART_IRQHandler+0x17c>)
 8002ffa:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ffc:	f7fe fbe6 	bl	80017cc <HAL_DMA_Abort_IT>
 8003000:	b160      	cbz	r0, 800301c <HAL_UART_IRQHandler+0xb4>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003002:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8003004:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003008:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800300a:	4718      	bx	r3
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800300c:	0696      	lsls	r6, r2, #26
 800300e:	d509      	bpl.n	8003024 <HAL_UART_IRQHandler+0xbc>
 8003010:	06a9      	lsls	r1, r5, #26
 8003012:	d507      	bpl.n	8003024 <HAL_UART_IRQHandler+0xbc>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003014:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003018:	2b22      	cmp	r3, #34	; 0x22
 800301a:	d04e      	beq.n	80030ba <HAL_UART_IRQHandler+0x152>
}
 800301c:	bd70      	pop	{r4, r5, r6, pc}
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800301e:	f415 7f90 	tst.w	r5, #288	; 0x120
 8003022:	d1ac      	bne.n	8002f7e <HAL_UART_IRQHandler+0x16>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003024:	0616      	lsls	r6, r2, #24
 8003026:	d40e      	bmi.n	8003046 <HAL_UART_IRQHandler+0xde>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003028:	0651      	lsls	r1, r2, #25
 800302a:	d5f7      	bpl.n	800301c <HAL_UART_IRQHandler+0xb4>
 800302c:	066a      	lsls	r2, r5, #25
 800302e:	d5f5      	bpl.n	800301c <HAL_UART_IRQHandler+0xb4>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003030:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003032:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003038:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800303a:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 800303c:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8003040:	f7ff ff58 	bl	8002ef4 <HAL_UART_TxCpltCallback>
}
 8003044:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003046:	0628      	lsls	r0, r5, #24
 8003048:	d5ee      	bpl.n	8003028 <HAL_UART_IRQHandler+0xc0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800304a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800304e:	2a21      	cmp	r2, #33	; 0x21
 8003050:	d1e4      	bne.n	800301c <HAL_UART_IRQHandler+0xb4>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003052:	68a1      	ldr	r1, [r4, #8]
 8003054:	6a22      	ldr	r2, [r4, #32]
 8003056:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800305a:	d037      	beq.n	80030cc <HAL_UART_IRQHandler+0x164>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800305c:	1c51      	adds	r1, r2, #1
 800305e:	6221      	str	r1, [r4, #32]
 8003060:	7812      	ldrb	r2, [r2, #0]
 8003062:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8003064:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003066:	3a01      	subs	r2, #1
 8003068:	b292      	uxth	r2, r2
 800306a:	84e2      	strh	r2, [r4, #38]	; 0x26
 800306c:	2a00      	cmp	r2, #0
 800306e:	d1d5      	bne.n	800301c <HAL_UART_IRQHandler+0xb4>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003076:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800307e:	60da      	str	r2, [r3, #12]
}
 8003080:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003082:	b140      	cbz	r0, 8003096 <HAL_UART_IRQHandler+0x12e>
 8003084:	2900      	cmp	r1, #0
 8003086:	d094      	beq.n	8002fb2 <HAL_UART_IRQHandler+0x4a>
 8003088:	f002 0608 	and.w	r6, r2, #8
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800308c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800308e:	f041 0104 	orr.w	r1, r1, #4
 8003092:	63e1      	str	r1, [r4, #60]	; 0x3c
 8003094:	e788      	b.n	8002fa8 <HAL_UART_IRQHandler+0x40>
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003096:	0710      	lsls	r0, r2, #28
 8003098:	d58b      	bpl.n	8002fb2 <HAL_UART_IRQHandler+0x4a>
 800309a:	2900      	cmp	r1, #0
 800309c:	d185      	bne.n	8002faa <HAL_UART_IRQHandler+0x42>
 800309e:	e788      	b.n	8002fb2 <HAL_UART_IRQHandler+0x4a>
            HAL_UART_ErrorCallback(huart);
 80030a0:	4620      	mov	r0, r4
 80030a2:	f7ff ff5f 	bl	8002f64 <HAL_UART_ErrorCallback>
}
 80030a6:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030a8:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
 80030ac:	2a22      	cmp	r2, #34	; 0x22
 80030ae:	d187      	bne.n	8002fc0 <HAL_UART_IRQHandler+0x58>
 80030b0:	4620      	mov	r0, r4
 80030b2:	f7ff ff21 	bl	8002ef8 <UART_Receive_IT.part.1>
 80030b6:	6823      	ldr	r3, [r4, #0]
 80030b8:	e782      	b.n	8002fc0 <HAL_UART_IRQHandler+0x58>
}
 80030ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80030be:	f7ff bf1b 	b.w	8002ef8 <UART_Receive_IT.part.1>
        HAL_UART_ErrorCallback(huart);
 80030c2:	4620      	mov	r0, r4
 80030c4:	f7ff ff4e 	bl	8002f64 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c8:	63e5      	str	r5, [r4, #60]	; 0x3c
}
 80030ca:	bd70      	pop	{r4, r5, r6, pc}
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80030cc:	8811      	ldrh	r1, [r2, #0]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80030ce:	6920      	ldr	r0, [r4, #16]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80030d0:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80030d4:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80030d6:	b910      	cbnz	r0, 80030de <HAL_UART_IRQHandler+0x176>
        huart->pTxBuffPtr += 2U;
 80030d8:	3202      	adds	r2, #2
 80030da:	6222      	str	r2, [r4, #32]
 80030dc:	e7c2      	b.n	8003064 <HAL_UART_IRQHandler+0xfc>
        huart->pTxBuffPtr += 1U;
 80030de:	3201      	adds	r2, #1
 80030e0:	6222      	str	r2, [r4, #32]
 80030e2:	e7bf      	b.n	8003064 <HAL_UART_IRQHandler+0xfc>
 80030e4:	080030e9 	.word	0x080030e9

080030e8 <UART_DMAAbortOnError>:
{
 80030e8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80030ec:	2200      	movs	r2, #0
 80030ee:	85da      	strh	r2, [r3, #46]	; 0x2e
  HAL_UART_ErrorCallback(huart);
 80030f0:	4618      	mov	r0, r3
  huart->TxXferCount = 0x00U;
 80030f2:	84da      	strh	r2, [r3, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80030f4:	f7ff ff36 	bl	8002f64 <HAL_UART_ErrorCallback>
}
 80030f8:	bd08      	pop	{r3, pc}
 80030fa:	bf00      	nop

080030fc <ist_reg_read_by_mpu>:
	* @param  addr: the address to be read of IST8310's register
	* @retval 
  * @usage  call in ist8310_init() function
	*/
static uint8_t ist_reg_read_by_mpu(uint8_t addr)
{
 80030fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    MPU_NSS_LOW;
 8003100:	4e4a      	ldr	r6, [pc, #296]	; (800322c <ist_reg_read_by_mpu+0x130>)
    tx = reg & 0x7F;
 8003102:	4c4b      	ldr	r4, [pc, #300]	; (8003230 <ist_reg_read_by_mpu+0x134>)
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003104:	4d4b      	ldr	r5, [pc, #300]	; (8003234 <ist_reg_read_by_mpu+0x138>)
 8003106:	4f4c      	ldr	r7, [pc, #304]	; (8003238 <ist_reg_read_by_mpu+0x13c>)
{
 8003108:	b082      	sub	sp, #8
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800310a:	f04f 0837 	mov.w	r8, #55	; 0x37
{
 800310e:	4681      	mov	r9, r0
    MPU_NSS_LOW;
 8003110:	2200      	movs	r2, #0
 8003112:	4630      	mov	r0, r6
 8003114:	2140      	movs	r1, #64	; 0x40
 8003116:	f7fe fcaf 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 800311a:	f04f 0c32 	mov.w	ip, #50	; 0x32
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800311e:	4621      	mov	r1, r4
 8003120:	462a      	mov	r2, r5
 8003122:	4638      	mov	r0, r7
 8003124:	f8cd 8000 	str.w	r8, [sp]
 8003128:	2301      	movs	r3, #1
    tx = reg & 0x7F;
 800312a:	f884 c000 	strb.w	ip, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800312e:	f7fe ff99 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003132:	2301      	movs	r3, #1
 8003134:	462a      	mov	r2, r5
 8003136:	4621      	mov	r1, r4
 8003138:	f8cd 8000 	str.w	r8, [sp]
 800313c:	4638      	mov	r0, r7
    tx = data;
 800313e:	f884 9000 	strb.w	r9, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003142:	f7fe ff8f 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003146:	4630      	mov	r0, r6
 8003148:	2201      	movs	r2, #1
 800314a:	2140      	movs	r1, #64	; 0x40
 800314c:	f7fe fc94 	bl	8001a78 <HAL_GPIO_WritePin>
    uint8_t retval;
    mpu_write_byte(MPU6500_I2C_SLV4_REG, addr);
    MPU_DELAY(10);
 8003150:	200a      	movs	r0, #10
 8003152:	f7fd ff59 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003156:	4630      	mov	r0, r6
 8003158:	2200      	movs	r2, #0
 800315a:	2140      	movs	r1, #64	; 0x40
 800315c:	f7fe fc8c 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 8003160:	f04f 0934 	mov.w	r9, #52	; 0x34
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003164:	462a      	mov	r2, r5
 8003166:	4621      	mov	r1, r4
 8003168:	f8cd 8000 	str.w	r8, [sp]
 800316c:	4638      	mov	r0, r7
 800316e:	2301      	movs	r3, #1
    tx = reg & 0x7F;
 8003170:	f884 9000 	strb.w	r9, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003174:	f7fe ff76 	bl	8002064 <HAL_SPI_TransmitReceive>
    tx = data;
 8003178:	f04f 0c80 	mov.w	ip, #128	; 0x80
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800317c:	2301      	movs	r3, #1
 800317e:	462a      	mov	r2, r5
 8003180:	4621      	mov	r1, r4
 8003182:	f8cd 8000 	str.w	r8, [sp]
 8003186:	4638      	mov	r0, r7
    tx = data;
 8003188:	f884 c000 	strb.w	ip, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800318c:	f7fe ff6a 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003190:	4630      	mov	r0, r6
 8003192:	2201      	movs	r2, #1
 8003194:	2140      	movs	r1, #64	; 0x40
 8003196:	f7fe fc6f 	bl	8001a78 <HAL_GPIO_WritePin>
    mpu_write_byte(MPU6500_I2C_SLV4_CTRL, 0x80);
    MPU_DELAY(10);
 800319a:	200a      	movs	r0, #10
 800319c:	f7fd ff34 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 80031a0:	4630      	mov	r0, r6
 80031a2:	2200      	movs	r2, #0
 80031a4:	2140      	movs	r1, #64	; 0x40
 80031a6:	f7fe fc67 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg | 0x80;
 80031aa:	f04f 0cb5 	mov.w	ip, #181	; 0xb5
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80031ae:	462a      	mov	r2, r5
 80031b0:	4621      	mov	r1, r4
 80031b2:	f8cd 8000 	str.w	r8, [sp]
 80031b6:	4638      	mov	r0, r7
 80031b8:	2301      	movs	r3, #1
    tx = reg | 0x80;
 80031ba:	f884 c000 	strb.w	ip, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80031be:	f7fe ff51 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80031c2:	2301      	movs	r3, #1
 80031c4:	462a      	mov	r2, r5
 80031c6:	4621      	mov	r1, r4
 80031c8:	f8cd 8000 	str.w	r8, [sp]
 80031cc:	4638      	mov	r0, r7
 80031ce:	f7fe ff49 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80031d2:	4630      	mov	r0, r6
 80031d4:	2201      	movs	r2, #1
 80031d6:	2140      	movs	r1, #64	; 0x40
 80031d8:	f7fe fc4e 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_NSS_LOW;
 80031dc:	4630      	mov	r0, r6
 80031de:	2200      	movs	r2, #0
 80031e0:	2140      	movs	r1, #64	; 0x40
    return rx;
 80031e2:	f895 a000 	ldrb.w	sl, [r5]
    MPU_NSS_LOW;
 80031e6:	f7fe fc47 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80031ea:	462a      	mov	r2, r5
 80031ec:	4621      	mov	r1, r4
 80031ee:	f8cd 8000 	str.w	r8, [sp]
 80031f2:	4638      	mov	r0, r7
 80031f4:	2301      	movs	r3, #1
    tx = reg & 0x7F;
 80031f6:	f884 9000 	strb.w	r9, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80031fa:	f7fe ff33 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80031fe:	2301      	movs	r3, #1
 8003200:	462a      	mov	r2, r5
 8003202:	4621      	mov	r1, r4
 8003204:	f8cd 8000 	str.w	r8, [sp]
 8003208:	4638      	mov	r0, r7
    tx = data;
 800320a:	2500      	movs	r5, #0
 800320c:	7025      	strb	r5, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800320e:	f7fe ff29 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003212:	4630      	mov	r0, r6
 8003214:	2201      	movs	r2, #1
 8003216:	2140      	movs	r1, #64	; 0x40
 8003218:	f7fe fc2e 	bl	8001a78 <HAL_GPIO_WritePin>
    retval = mpu_read_byte(MPU6500_I2C_SLV4_DI);
    /* turn off slave4 after read */
    mpu_write_byte(MPU6500_I2C_SLV4_CTRL, 0x00);
    MPU_DELAY(10);
 800321c:	200a      	movs	r0, #10
 800321e:	f7fd fef3 	bl	8001008 <HAL_Delay>
    return retval;
}
 8003222:	4650      	mov	r0, sl
 8003224:	b002      	add	sp, #8
 8003226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800322a:	bf00      	nop
 800322c:	40021400 	.word	0x40021400
 8003230:	2000024d 	.word	0x2000024d
 8003234:	2000024c 	.word	0x2000024c
 8003238:	20000690 	.word	0x20000690

0800323c <ist_reg_write_by_mpu>:
{
 800323c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    tx = reg & 0x7F;
 8003240:	4c4a      	ldr	r4, [pc, #296]	; (800336c <ist_reg_write_by_mpu+0x130>)
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003242:	4f4b      	ldr	r7, [pc, #300]	; (8003370 <ist_reg_write_by_mpu+0x134>)
 8003244:	4e4b      	ldr	r6, [pc, #300]	; (8003374 <ist_reg_write_by_mpu+0x138>)
{
 8003246:	b083      	sub	sp, #12
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003248:	f04f 0837 	mov.w	r8, #55	; 0x37
{
 800324c:	4683      	mov	fp, r0
 800324e:	460d      	mov	r5, r1
    MPU_NSS_LOW;
 8003250:	4849      	ldr	r0, [pc, #292]	; (8003378 <ist_reg_write_by_mpu+0x13c>)
 8003252:	2200      	movs	r2, #0
 8003254:	2140      	movs	r1, #64	; 0x40
 8003256:	f7fe fc0f 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 800325a:	f04f 0a2a 	mov.w	sl, #42	; 0x2a
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800325e:	4621      	mov	r1, r4
 8003260:	463a      	mov	r2, r7
 8003262:	4630      	mov	r0, r6
 8003264:	f8cd 8000 	str.w	r8, [sp]
 8003268:	2301      	movs	r3, #1
    tx = data;
 800326a:	f04f 0900 	mov.w	r9, #0
    tx = reg & 0x7F;
 800326e:	f884 a000 	strb.w	sl, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003272:	f7fe fef7 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003276:	2301      	movs	r3, #1
 8003278:	463a      	mov	r2, r7
 800327a:	4621      	mov	r1, r4
 800327c:	f8cd 8000 	str.w	r8, [sp]
 8003280:	4630      	mov	r0, r6
    tx = data;
 8003282:	f884 9000 	strb.w	r9, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003286:	f7fe feed 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 800328a:	2201      	movs	r2, #1
 800328c:	2140      	movs	r1, #64	; 0x40
 800328e:	483a      	ldr	r0, [pc, #232]	; (8003378 <ist_reg_write_by_mpu+0x13c>)
 8003290:	f7fe fbf2 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 8003294:	2002      	movs	r0, #2
 8003296:	f7fd feb7 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 800329a:	464a      	mov	r2, r9
 800329c:	4836      	ldr	r0, [pc, #216]	; (8003378 <ist_reg_write_by_mpu+0x13c>)
 800329e:	2140      	movs	r1, #64	; 0x40
 80032a0:	f7fe fbea 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 80032a4:	f04f 0c29 	mov.w	ip, #41	; 0x29
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80032a8:	463a      	mov	r2, r7
 80032aa:	4621      	mov	r1, r4
 80032ac:	f8cd 8000 	str.w	r8, [sp]
 80032b0:	4630      	mov	r0, r6
 80032b2:	2301      	movs	r3, #1
    tx = reg & 0x7F;
 80032b4:	f884 c000 	strb.w	ip, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80032b8:	f7fe fed4 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80032bc:	2301      	movs	r3, #1
 80032be:	463a      	mov	r2, r7
 80032c0:	4621      	mov	r1, r4
 80032c2:	f8cd 8000 	str.w	r8, [sp]
 80032c6:	4630      	mov	r0, r6
    tx = data;
 80032c8:	f884 b000 	strb.w	fp, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80032cc:	f7fe feca 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80032d0:	2201      	movs	r2, #1
 80032d2:	2140      	movs	r1, #64	; 0x40
 80032d4:	4828      	ldr	r0, [pc, #160]	; (8003378 <ist_reg_write_by_mpu+0x13c>)
 80032d6:	f7fe fbcf 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 80032da:	2002      	movs	r0, #2
 80032dc:	f7fd fe94 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 80032e0:	464a      	mov	r2, r9
 80032e2:	4825      	ldr	r0, [pc, #148]	; (8003378 <ist_reg_write_by_mpu+0x13c>)
 80032e4:	2140      	movs	r1, #64	; 0x40
 80032e6:	f7fe fbc7 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 80032ea:	f04f 0c64 	mov.w	ip, #100	; 0x64
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80032ee:	463a      	mov	r2, r7
 80032f0:	4621      	mov	r1, r4
 80032f2:	f8cd 8000 	str.w	r8, [sp]
 80032f6:	4630      	mov	r0, r6
 80032f8:	2301      	movs	r3, #1
    tx = reg & 0x7F;
 80032fa:	f884 c000 	strb.w	ip, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80032fe:	f7fe feb1 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003302:	2301      	movs	r3, #1
 8003304:	463a      	mov	r2, r7
 8003306:	4621      	mov	r1, r4
 8003308:	f8cd 8000 	str.w	r8, [sp]
 800330c:	4630      	mov	r0, r6
    tx = data;
 800330e:	7025      	strb	r5, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003310:	f7fe fea8 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003314:	2201      	movs	r2, #1
 8003316:	2140      	movs	r1, #64	; 0x40
 8003318:	4817      	ldr	r0, [pc, #92]	; (8003378 <ist_reg_write_by_mpu+0x13c>)
 800331a:	f7fe fbad 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 800331e:	2002      	movs	r0, #2
 8003320:	f7fd fe72 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003324:	464a      	mov	r2, r9
 8003326:	4814      	ldr	r0, [pc, #80]	; (8003378 <ist_reg_write_by_mpu+0x13c>)
 8003328:	2140      	movs	r1, #64	; 0x40
 800332a:	f7fe fba5 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800332e:	463a      	mov	r2, r7
 8003330:	4621      	mov	r1, r4
 8003332:	f8cd 8000 	str.w	r8, [sp]
 8003336:	4630      	mov	r0, r6
 8003338:	2301      	movs	r3, #1
    tx = reg & 0x7F;
 800333a:	f884 a000 	strb.w	sl, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800333e:	f7fe fe91 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003342:	463a      	mov	r2, r7
 8003344:	4621      	mov	r1, r4
 8003346:	2301      	movs	r3, #1
 8003348:	f8cd 8000 	str.w	r8, [sp]
 800334c:	4630      	mov	r0, r6
    tx = data;
 800334e:	2681      	movs	r6, #129	; 0x81
 8003350:	7026      	strb	r6, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003352:	f7fe fe87 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003356:	4808      	ldr	r0, [pc, #32]	; (8003378 <ist_reg_write_by_mpu+0x13c>)
 8003358:	2201      	movs	r2, #1
 800335a:	2140      	movs	r1, #64	; 0x40
 800335c:	f7fe fb8c 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(10);
 8003360:	200a      	movs	r0, #10
}
 8003362:	b003      	add	sp, #12
 8003364:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MPU_DELAY(10);
 8003368:	f7fd be4e 	b.w	8001008 <HAL_Delay>
 800336c:	2000024d 	.word	0x2000024d
 8003370:	2000024c 	.word	0x2000024c
 8003374:	20000690 	.word	0x20000690
 8003378:	40021400 	.word	0x40021400

0800337c <ist8310_init>:
	* @param  
	* @retval 
  * @usage  call in mpu_device_init() function
	*/
uint8_t ist8310_init()
{
 800337c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    tx = reg & 0x7F;
 8003380:	4cc9      	ldr	r4, [pc, #804]	; (80036a8 <ist8310_init+0x32c>)
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003382:	4dca      	ldr	r5, [pc, #808]	; (80036ac <ist8310_init+0x330>)
    MPU_NSS_LOW;
 8003384:	48ca      	ldr	r0, [pc, #808]	; (80036b0 <ist8310_init+0x334>)
{
 8003386:	b083      	sub	sp, #12
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003388:	2637      	movs	r6, #55	; 0x37
    MPU_NSS_LOW;
 800338a:	2200      	movs	r2, #0
 800338c:	2140      	movs	r1, #64	; 0x40
 800338e:	f7fe fb73 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 8003392:	276a      	movs	r7, #106	; 0x6a
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003394:	4621      	mov	r1, r4
 8003396:	462a      	mov	r2, r5
 8003398:	2301      	movs	r3, #1
 800339a:	9600      	str	r6, [sp, #0]
 800339c:	48c5      	ldr	r0, [pc, #788]	; (80036b4 <ist8310_init+0x338>)
    tx = reg & 0x7F;
 800339e:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80033a0:	f7fe fe60 	bl	8002064 <HAL_SPI_TransmitReceive>
    tx = data;
 80033a4:	2730      	movs	r7, #48	; 0x30
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80033a6:	2301      	movs	r3, #1
 80033a8:	462a      	mov	r2, r5
 80033aa:	4621      	mov	r1, r4
 80033ac:	9600      	str	r6, [sp, #0]
 80033ae:	48c1      	ldr	r0, [pc, #772]	; (80036b4 <ist8310_init+0x338>)
    tx = data;
 80033b0:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80033b2:	f7fe fe57 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80033b6:	2201      	movs	r2, #1
 80033b8:	2140      	movs	r1, #64	; 0x40
 80033ba:	48bd      	ldr	r0, [pc, #756]	; (80036b0 <ist8310_init+0x334>)
 80033bc:	f7fe fb5c 	bl	8001a78 <HAL_GPIO_WritePin>
	  /* enable iic master mode */
    mpu_write_byte(MPU6500_USER_CTRL, 0x30);
    MPU_DELAY(10);
 80033c0:	200a      	movs	r0, #10
 80033c2:	f7fd fe21 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 80033c6:	2200      	movs	r2, #0
 80033c8:	2140      	movs	r1, #64	; 0x40
 80033ca:	48b9      	ldr	r0, [pc, #740]	; (80036b0 <ist8310_init+0x334>)
 80033cc:	f7fe fb54 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 80033d0:	f04f 0724 	mov.w	r7, #36	; 0x24
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80033d4:	462a      	mov	r2, r5
 80033d6:	4621      	mov	r1, r4
 80033d8:	2301      	movs	r3, #1
 80033da:	9600      	str	r6, [sp, #0]
 80033dc:	48b5      	ldr	r0, [pc, #724]	; (80036b4 <ist8310_init+0x338>)
    tx = reg & 0x7F;
 80033de:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80033e0:	f7fe fe40 	bl	8002064 <HAL_SPI_TransmitReceive>
    tx = data;
 80033e4:	270d      	movs	r7, #13
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80033e6:	2301      	movs	r3, #1
 80033e8:	462a      	mov	r2, r5
 80033ea:	4621      	mov	r1, r4
 80033ec:	9600      	str	r6, [sp, #0]
 80033ee:	48b1      	ldr	r0, [pc, #708]	; (80036b4 <ist8310_init+0x338>)
    tx = data;
 80033f0:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80033f2:	f7fe fe37 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80033f6:	2201      	movs	r2, #1
 80033f8:	2140      	movs	r1, #64	; 0x40
 80033fa:	48ad      	ldr	r0, [pc, #692]	; (80036b0 <ist8310_init+0x334>)
 80033fc:	f7fe fb3c 	bl	8001a78 <HAL_GPIO_WritePin>
	  /* enable iic 400khz */
    mpu_write_byte(MPU6500_I2C_MST_CTRL, 0x0d); 
    MPU_DELAY(10);
 8003400:	200a      	movs	r0, #10
 8003402:	f7fd fe01 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003406:	2200      	movs	r2, #0
 8003408:	2140      	movs	r1, #64	; 0x40
 800340a:	48a9      	ldr	r0, [pc, #676]	; (80036b0 <ist8310_init+0x334>)
 800340c:	f7fe fb34 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 8003410:	f04f 0728 	mov.w	r7, #40	; 0x28
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003414:	462a      	mov	r2, r5
 8003416:	4621      	mov	r1, r4
 8003418:	2301      	movs	r3, #1
 800341a:	9600      	str	r6, [sp, #0]
 800341c:	48a5      	ldr	r0, [pc, #660]	; (80036b4 <ist8310_init+0x338>)
    tx = reg & 0x7F;
 800341e:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003420:	f7fe fe20 	bl	8002064 <HAL_SPI_TransmitReceive>
    tx = data;
 8003424:	f04f 070e 	mov.w	r7, #14
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003428:	2301      	movs	r3, #1
 800342a:	462a      	mov	r2, r5
 800342c:	4621      	mov	r1, r4
 800342e:	9600      	str	r6, [sp, #0]
 8003430:	48a0      	ldr	r0, [pc, #640]	; (80036b4 <ist8310_init+0x338>)
    tx = data;
 8003432:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003434:	f7fe fe16 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003438:	2201      	movs	r2, #1
 800343a:	2140      	movs	r1, #64	; 0x40
 800343c:	489c      	ldr	r0, [pc, #624]	; (80036b0 <ist8310_init+0x334>)
 800343e:	f7fe fb1b 	bl	8001a78 <HAL_GPIO_WritePin>

    /* turn on slave 1 for ist write and slave 4 to ist read */
    mpu_write_byte(MPU6500_I2C_SLV1_ADDR, IST8310_ADDRESS);  
    MPU_DELAY(10);
 8003442:	200a      	movs	r0, #10
 8003444:	f7fd fde0 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003448:	2200      	movs	r2, #0
 800344a:	2140      	movs	r1, #64	; 0x40
 800344c:	4898      	ldr	r0, [pc, #608]	; (80036b0 <ist8310_init+0x334>)
 800344e:	f7fe fb13 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 8003452:	2731      	movs	r7, #49	; 0x31
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003454:	462a      	mov	r2, r5
 8003456:	4621      	mov	r1, r4
 8003458:	2301      	movs	r3, #1
 800345a:	9600      	str	r6, [sp, #0]
 800345c:	4895      	ldr	r0, [pc, #596]	; (80036b4 <ist8310_init+0x338>)
    tx = reg & 0x7F;
 800345e:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003460:	f7fe fe00 	bl	8002064 <HAL_SPI_TransmitReceive>
    tx = data;
 8003464:	f06f 0771 	mvn.w	r7, #113	; 0x71
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003468:	2301      	movs	r3, #1
 800346a:	462a      	mov	r2, r5
 800346c:	4621      	mov	r1, r4
 800346e:	9600      	str	r6, [sp, #0]
 8003470:	4890      	ldr	r0, [pc, #576]	; (80036b4 <ist8310_init+0x338>)
    tx = data;
 8003472:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003474:	f7fe fdf6 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003478:	2201      	movs	r2, #1
 800347a:	2140      	movs	r1, #64	; 0x40
 800347c:	488c      	ldr	r0, [pc, #560]	; (80036b0 <ist8310_init+0x334>)
 800347e:	f7fe fafb 	bl	8001a78 <HAL_GPIO_WritePin>
    mpu_write_byte(MPU6500_I2C_SLV4_ADDR, 0x80 | IST8310_ADDRESS);
    MPU_DELAY(10);
 8003482:	200a      	movs	r0, #10
 8003484:	f7fd fdc0 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003488:	2200      	movs	r2, #0
 800348a:	2140      	movs	r1, #64	; 0x40
 800348c:	4888      	ldr	r0, [pc, #544]	; (80036b0 <ist8310_init+0x334>)
 800348e:	f7fe faf3 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 8003492:	f04f 0a2a 	mov.w	sl, #42	; 0x2a
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003496:	462a      	mov	r2, r5
 8003498:	4621      	mov	r1, r4
 800349a:	2301      	movs	r3, #1
 800349c:	9600      	str	r6, [sp, #0]
 800349e:	4885      	ldr	r0, [pc, #532]	; (80036b4 <ist8310_init+0x338>)
    tx = reg & 0x7F;
 80034a0:	f884 a000 	strb.w	sl, [r4]
    tx = data;
 80034a4:	f04f 0800 	mov.w	r8, #0
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80034a8:	f7fe fddc 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80034ac:	2301      	movs	r3, #1
 80034ae:	462a      	mov	r2, r5
 80034b0:	4621      	mov	r1, r4
 80034b2:	9600      	str	r6, [sp, #0]
 80034b4:	487f      	ldr	r0, [pc, #508]	; (80036b4 <ist8310_init+0x338>)
    tx = data;
 80034b6:	f884 8000 	strb.w	r8, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80034ba:	f7fe fdd3 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80034be:	2201      	movs	r2, #1
 80034c0:	2140      	movs	r1, #64	; 0x40
 80034c2:	487b      	ldr	r0, [pc, #492]	; (80036b0 <ist8310_init+0x334>)
 80034c4:	f7fe fad8 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 80034c8:	2002      	movs	r0, #2
 80034ca:	f7fd fd9d 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 80034ce:	4642      	mov	r2, r8
 80034d0:	2140      	movs	r1, #64	; 0x40
 80034d2:	4877      	ldr	r0, [pc, #476]	; (80036b0 <ist8310_init+0x334>)
 80034d4:	f7fe fad0 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 80034d8:	f04f 0729 	mov.w	r7, #41	; 0x29
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80034dc:	462a      	mov	r2, r5
 80034de:	4621      	mov	r1, r4
 80034e0:	2301      	movs	r3, #1
 80034e2:	9600      	str	r6, [sp, #0]
 80034e4:	4873      	ldr	r0, [pc, #460]	; (80036b4 <ist8310_init+0x338>)
    tx = reg & 0x7F;
 80034e6:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80034e8:	f7fe fdbc 	bl	8002064 <HAL_SPI_TransmitReceive>
    tx = data;
 80034ec:	f04f 070b 	mov.w	r7, #11
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80034f0:	2301      	movs	r3, #1
 80034f2:	462a      	mov	r2, r5
 80034f4:	4621      	mov	r1, r4
 80034f6:	9600      	str	r6, [sp, #0]
 80034f8:	486e      	ldr	r0, [pc, #440]	; (80036b4 <ist8310_init+0x338>)
    tx = data;
 80034fa:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80034fc:	f7fe fdb2 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003500:	2201      	movs	r2, #1
 8003502:	2140      	movs	r1, #64	; 0x40
 8003504:	486a      	ldr	r0, [pc, #424]	; (80036b0 <ist8310_init+0x334>)
 8003506:	f7fe fab7 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 800350a:	2002      	movs	r0, #2
 800350c:	f7fd fd7c 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003510:	4642      	mov	r2, r8
 8003512:	2140      	movs	r1, #64	; 0x40
 8003514:	4866      	ldr	r0, [pc, #408]	; (80036b0 <ist8310_init+0x334>)
 8003516:	f7fe faaf 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 800351a:	f04f 0764 	mov.w	r7, #100	; 0x64
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800351e:	462a      	mov	r2, r5
 8003520:	4621      	mov	r1, r4
 8003522:	2301      	movs	r3, #1
 8003524:	9600      	str	r6, [sp, #0]
 8003526:	4863      	ldr	r0, [pc, #396]	; (80036b4 <ist8310_init+0x338>)
    tx = reg & 0x7F;
 8003528:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800352a:	f7fe fd9b 	bl	8002064 <HAL_SPI_TransmitReceive>
    tx = data;
 800352e:	f04f 0701 	mov.w	r7, #1
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003532:	2301      	movs	r3, #1
 8003534:	462a      	mov	r2, r5
 8003536:	4621      	mov	r1, r4
 8003538:	9600      	str	r6, [sp, #0]
 800353a:	485e      	ldr	r0, [pc, #376]	; (80036b4 <ist8310_init+0x338>)
    tx = data;
 800353c:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800353e:	f7fe fd91 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003542:	2201      	movs	r2, #1
 8003544:	2140      	movs	r1, #64	; 0x40
 8003546:	485a      	ldr	r0, [pc, #360]	; (80036b0 <ist8310_init+0x334>)
 8003548:	f7fe fa96 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 800354c:	2002      	movs	r0, #2
 800354e:	f7fd fd5b 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003552:	4642      	mov	r2, r8
 8003554:	2140      	movs	r1, #64	; 0x40
 8003556:	4856      	ldr	r0, [pc, #344]	; (80036b0 <ist8310_init+0x334>)
 8003558:	f7fe fa8e 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800355c:	2301      	movs	r3, #1
 800355e:	462a      	mov	r2, r5
 8003560:	4621      	mov	r1, r4
 8003562:	9600      	str	r6, [sp, #0]
 8003564:	4853      	ldr	r0, [pc, #332]	; (80036b4 <ist8310_init+0x338>)
    tx = reg & 0x7F;
 8003566:	f884 a000 	strb.w	sl, [r4]
    tx = data;
 800356a:	f06f 077e 	mvn.w	r7, #126	; 0x7e
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800356e:	f7fe fd79 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003572:	2301      	movs	r3, #1
 8003574:	462a      	mov	r2, r5
 8003576:	4621      	mov	r1, r4
 8003578:	9600      	str	r6, [sp, #0]
 800357a:	484e      	ldr	r0, [pc, #312]	; (80036b4 <ist8310_init+0x338>)
    tx = data;
 800357c:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800357e:	f7fe fd71 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003582:	2201      	movs	r2, #1
 8003584:	2140      	movs	r1, #64	; 0x40
 8003586:	484a      	ldr	r0, [pc, #296]	; (80036b0 <ist8310_init+0x334>)
 8003588:	f7fe fa76 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(10);
 800358c:	200a      	movs	r0, #10
 800358e:	f7fd fd3b 	bl	8001008 <HAL_Delay>

    /* IST8310_R_CONFB 0x01 = device rst */
    ist_reg_write_by_mpu(IST8310_R_CONFB, 0x01);
    MPU_DELAY(10);
 8003592:	200a      	movs	r0, #10
 8003594:	f7fd fd38 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003598:	4642      	mov	r2, r8
 800359a:	2140      	movs	r1, #64	; 0x40
 800359c:	4844      	ldr	r0, [pc, #272]	; (80036b0 <ist8310_init+0x334>)
 800359e:	f7fe fa6b 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 80035a2:	f04f 0732 	mov.w	r7, #50	; 0x32
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80035a6:	2301      	movs	r3, #1
 80035a8:	462a      	mov	r2, r5
 80035aa:	4621      	mov	r1, r4
 80035ac:	9600      	str	r6, [sp, #0]
 80035ae:	4841      	ldr	r0, [pc, #260]	; (80036b4 <ist8310_init+0x338>)
    tx = reg & 0x7F;
 80035b0:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80035b2:	f7fe fd57 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80035b6:	2301      	movs	r3, #1
 80035b8:	462a      	mov	r2, r5
 80035ba:	4621      	mov	r1, r4
 80035bc:	9600      	str	r6, [sp, #0]
 80035be:	483d      	ldr	r0, [pc, #244]	; (80036b4 <ist8310_init+0x338>)
    tx = data;
 80035c0:	f884 8000 	strb.w	r8, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80035c4:	f7fe fd4e 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80035c8:	2201      	movs	r2, #1
 80035ca:	2140      	movs	r1, #64	; 0x40
 80035cc:	4838      	ldr	r0, [pc, #224]	; (80036b0 <ist8310_init+0x334>)
 80035ce:	f7fe fa53 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(10);
 80035d2:	200a      	movs	r0, #10
 80035d4:	f7fd fd18 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 80035d8:	4642      	mov	r2, r8
 80035da:	2140      	movs	r1, #64	; 0x40
 80035dc:	4834      	ldr	r0, [pc, #208]	; (80036b0 <ist8310_init+0x334>)
 80035de:	f7fe fa4b 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 80035e2:	f04f 0934 	mov.w	r9, #52	; 0x34
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80035e6:	2301      	movs	r3, #1
 80035e8:	462a      	mov	r2, r5
 80035ea:	4621      	mov	r1, r4
 80035ec:	9600      	str	r6, [sp, #0]
 80035ee:	4831      	ldr	r0, [pc, #196]	; (80036b4 <ist8310_init+0x338>)
    tx = reg & 0x7F;
 80035f0:	f884 9000 	strb.w	r9, [r4]
    tx = data;
 80035f4:	f06f 077f 	mvn.w	r7, #127	; 0x7f
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80035f8:	f7fe fd34 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80035fc:	2301      	movs	r3, #1
 80035fe:	462a      	mov	r2, r5
 8003600:	4621      	mov	r1, r4
 8003602:	9600      	str	r6, [sp, #0]
 8003604:	482b      	ldr	r0, [pc, #172]	; (80036b4 <ist8310_init+0x338>)
    tx = data;
 8003606:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003608:	f7fe fd2c 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 800360c:	2201      	movs	r2, #1
 800360e:	2140      	movs	r1, #64	; 0x40
 8003610:	4827      	ldr	r0, [pc, #156]	; (80036b0 <ist8310_init+0x334>)
 8003612:	f7fe fa31 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(10);
 8003616:	200a      	movs	r0, #10
 8003618:	f7fd fcf6 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 800361c:	4642      	mov	r2, r8
 800361e:	2140      	movs	r1, #64	; 0x40
 8003620:	4823      	ldr	r0, [pc, #140]	; (80036b0 <ist8310_init+0x334>)
 8003622:	f7fe fa29 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg | 0x80;
 8003626:	f06f 074a 	mvn.w	r7, #74	; 0x4a
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800362a:	2301      	movs	r3, #1
 800362c:	462a      	mov	r2, r5
 800362e:	4621      	mov	r1, r4
 8003630:	9600      	str	r6, [sp, #0]
 8003632:	4820      	ldr	r0, [pc, #128]	; (80036b4 <ist8310_init+0x338>)
    tx = reg | 0x80;
 8003634:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003636:	f7fe fd15 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800363a:	2301      	movs	r3, #1
 800363c:	462a      	mov	r2, r5
 800363e:	4621      	mov	r1, r4
 8003640:	9600      	str	r6, [sp, #0]
 8003642:	481c      	ldr	r0, [pc, #112]	; (80036b4 <ist8310_init+0x338>)
 8003644:	f7fe fd0e 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003648:	2201      	movs	r2, #1
 800364a:	2140      	movs	r1, #64	; 0x40
 800364c:	4818      	ldr	r0, [pc, #96]	; (80036b0 <ist8310_init+0x334>)
 800364e:	f7fe fa13 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_NSS_LOW;
 8003652:	4642      	mov	r2, r8
 8003654:	2140      	movs	r1, #64	; 0x40
 8003656:	4816      	ldr	r0, [pc, #88]	; (80036b0 <ist8310_init+0x334>)
    return rx;
 8003658:	f895 b000 	ldrb.w	fp, [r5]
    MPU_NSS_LOW;
 800365c:	f7fe fa0c 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003660:	2301      	movs	r3, #1
 8003662:	462a      	mov	r2, r5
 8003664:	4621      	mov	r1, r4
 8003666:	9600      	str	r6, [sp, #0]
 8003668:	4812      	ldr	r0, [pc, #72]	; (80036b4 <ist8310_init+0x338>)
    tx = reg & 0x7F;
 800366a:	f884 9000 	strb.w	r9, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800366e:	f7fe fcf9 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003672:	2301      	movs	r3, #1
 8003674:	462a      	mov	r2, r5
 8003676:	4621      	mov	r1, r4
 8003678:	9600      	str	r6, [sp, #0]
 800367a:	480e      	ldr	r0, [pc, #56]	; (80036b4 <ist8310_init+0x338>)
    tx = data;
 800367c:	f884 8000 	strb.w	r8, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003680:	f7fe fcf0 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003684:	2201      	movs	r2, #1
 8003686:	2140      	movs	r1, #64	; 0x40
 8003688:	4809      	ldr	r0, [pc, #36]	; (80036b0 <ist8310_init+0x334>)
 800368a:	f7fe f9f5 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(10);
 800368e:	200a      	movs	r0, #10
 8003690:	f7fd fcba 	bl	8001008 <HAL_Delay>
    if (IST8310_DEVICE_ID_A != ist_reg_read_by_mpu(IST8310_WHO_AM_I))
 8003694:	f1bb 0f10 	cmp.w	fp, #16
 8003698:	d00e      	beq.n	80036b8 <ist8310_init+0x33c>
        return 1;
 800369a:	f04f 0801 	mov.w	r8, #1

    /* configure and turn on slave 0 */
    mpu_master_i2c_auto_read_config(IST8310_ADDRESS, IST8310_R_XL, 0x06);
    MPU_DELAY(100);
    return 0;
}
 800369e:	4640      	mov	r0, r8
 80036a0:	b003      	add	sp, #12
 80036a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036a6:	bf00      	nop
 80036a8:	2000024d 	.word	0x2000024d
 80036ac:	2000024c 	.word	0x2000024c
 80036b0:	40021400 	.word	0x40021400
 80036b4:	20000690 	.word	0x20000690
    MPU_NSS_LOW;
 80036b8:	4642      	mov	r2, r8
 80036ba:	2140      	movs	r1, #64	; 0x40
 80036bc:	48d4      	ldr	r0, [pc, #848]	; (8003a10 <ist8310_init+0x694>)
 80036be:	f7fe f9db 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80036c2:	2301      	movs	r3, #1
 80036c4:	462a      	mov	r2, r5
 80036c6:	4621      	mov	r1, r4
 80036c8:	9600      	str	r6, [sp, #0]
 80036ca:	48d2      	ldr	r0, [pc, #840]	; (8003a14 <ist8310_init+0x698>)
    tx = reg & 0x7F;
 80036cc:	f884 a000 	strb.w	sl, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80036d0:	f7fe fcc8 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80036d4:	2301      	movs	r3, #1
 80036d6:	462a      	mov	r2, r5
 80036d8:	4621      	mov	r1, r4
 80036da:	9600      	str	r6, [sp, #0]
 80036dc:	48cd      	ldr	r0, [pc, #820]	; (8003a14 <ist8310_init+0x698>)
    tx = data;
 80036de:	f884 8000 	strb.w	r8, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80036e2:	f7fe fcbf 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80036e6:	2201      	movs	r2, #1
 80036e8:	2140      	movs	r1, #64	; 0x40
 80036ea:	48c9      	ldr	r0, [pc, #804]	; (8003a10 <ist8310_init+0x694>)
 80036ec:	f7fe f9c4 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 80036f0:	2002      	movs	r0, #2
 80036f2:	f7fd fc89 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 80036f6:	4642      	mov	r2, r8
 80036f8:	2140      	movs	r1, #64	; 0x40
 80036fa:	48c5      	ldr	r0, [pc, #788]	; (8003a10 <ist8310_init+0x694>)
 80036fc:	f7fe f9bc 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 8003700:	f04f 0729 	mov.w	r7, #41	; 0x29
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003704:	2301      	movs	r3, #1
 8003706:	462a      	mov	r2, r5
 8003708:	4621      	mov	r1, r4
 800370a:	9600      	str	r6, [sp, #0]
 800370c:	48c1      	ldr	r0, [pc, #772]	; (8003a14 <ist8310_init+0x698>)
    tx = reg & 0x7F;
 800370e:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003710:	f7fe fca8 	bl	8002064 <HAL_SPI_TransmitReceive>
    tx = data;
 8003714:	f04f 0c0b 	mov.w	ip, #11
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003718:	2301      	movs	r3, #1
 800371a:	462a      	mov	r2, r5
 800371c:	4621      	mov	r1, r4
 800371e:	9600      	str	r6, [sp, #0]
 8003720:	48bc      	ldr	r0, [pc, #752]	; (8003a14 <ist8310_init+0x698>)
    tx = data;
 8003722:	f884 c000 	strb.w	ip, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003726:	f7fe fc9d 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 800372a:	2201      	movs	r2, #1
 800372c:	2140      	movs	r1, #64	; 0x40
 800372e:	48b8      	ldr	r0, [pc, #736]	; (8003a10 <ist8310_init+0x694>)
 8003730:	f7fe f9a2 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 8003734:	2002      	movs	r0, #2
 8003736:	f7fd fc67 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 800373a:	4642      	mov	r2, r8
 800373c:	2140      	movs	r1, #64	; 0x40
 800373e:	48b4      	ldr	r0, [pc, #720]	; (8003a10 <ist8310_init+0x694>)
 8003740:	f7fe f99a 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 8003744:	f04f 0c64 	mov.w	ip, #100	; 0x64
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003748:	2301      	movs	r3, #1
 800374a:	462a      	mov	r2, r5
 800374c:	4621      	mov	r1, r4
 800374e:	9600      	str	r6, [sp, #0]
 8003750:	48b0      	ldr	r0, [pc, #704]	; (8003a14 <ist8310_init+0x698>)
    tx = reg & 0x7F;
 8003752:	f884 c000 	strb.w	ip, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003756:	f7fe fc85 	bl	8002064 <HAL_SPI_TransmitReceive>
    tx = data;
 800375a:	f04f 0c01 	mov.w	ip, #1
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800375e:	2301      	movs	r3, #1
 8003760:	462a      	mov	r2, r5
 8003762:	4621      	mov	r1, r4
 8003764:	9600      	str	r6, [sp, #0]
 8003766:	48ab      	ldr	r0, [pc, #684]	; (8003a14 <ist8310_init+0x698>)
    tx = data;
 8003768:	f884 c000 	strb.w	ip, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800376c:	f7fe fc7a 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003770:	2201      	movs	r2, #1
 8003772:	2140      	movs	r1, #64	; 0x40
 8003774:	48a6      	ldr	r0, [pc, #664]	; (8003a10 <ist8310_init+0x694>)
 8003776:	f7fe f97f 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 800377a:	2002      	movs	r0, #2
 800377c:	f7fd fc44 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003780:	4642      	mov	r2, r8
 8003782:	2140      	movs	r1, #64	; 0x40
 8003784:	48a2      	ldr	r0, [pc, #648]	; (8003a10 <ist8310_init+0x694>)
 8003786:	f7fe f977 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800378a:	2301      	movs	r3, #1
 800378c:	462a      	mov	r2, r5
 800378e:	4621      	mov	r1, r4
 8003790:	9600      	str	r6, [sp, #0]
 8003792:	48a0      	ldr	r0, [pc, #640]	; (8003a14 <ist8310_init+0x698>)
    tx = reg & 0x7F;
 8003794:	f884 a000 	strb.w	sl, [r4]
    tx = data;
 8003798:	f06f 0b7e 	mvn.w	fp, #126	; 0x7e
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800379c:	f7fe fc62 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80037a0:	2301      	movs	r3, #1
 80037a2:	462a      	mov	r2, r5
 80037a4:	4621      	mov	r1, r4
 80037a6:	9600      	str	r6, [sp, #0]
 80037a8:	489a      	ldr	r0, [pc, #616]	; (8003a14 <ist8310_init+0x698>)
    tx = data;
 80037aa:	f884 b000 	strb.w	fp, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80037ae:	f7fe fc59 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80037b2:	2201      	movs	r2, #1
 80037b4:	2140      	movs	r1, #64	; 0x40
 80037b6:	4896      	ldr	r0, [pc, #600]	; (8003a10 <ist8310_init+0x694>)
 80037b8:	f7fe f95e 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(10);
 80037bc:	200a      	movs	r0, #10
 80037be:	f7fd fc23 	bl	8001008 <HAL_Delay>
    MPU_DELAY(10);
 80037c2:	200a      	movs	r0, #10
 80037c4:	f7fd fc20 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 80037c8:	4642      	mov	r2, r8
 80037ca:	2140      	movs	r1, #64	; 0x40
 80037cc:	4890      	ldr	r0, [pc, #576]	; (8003a10 <ist8310_init+0x694>)
 80037ce:	f7fe f953 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80037d2:	2301      	movs	r3, #1
 80037d4:	462a      	mov	r2, r5
 80037d6:	4621      	mov	r1, r4
 80037d8:	9600      	str	r6, [sp, #0]
 80037da:	488e      	ldr	r0, [pc, #568]	; (8003a14 <ist8310_init+0x698>)
    tx = reg & 0x7F;
 80037dc:	f884 a000 	strb.w	sl, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80037e0:	f7fe fc40 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80037e4:	2301      	movs	r3, #1
 80037e6:	462a      	mov	r2, r5
 80037e8:	4621      	mov	r1, r4
 80037ea:	9600      	str	r6, [sp, #0]
 80037ec:	4889      	ldr	r0, [pc, #548]	; (8003a14 <ist8310_init+0x698>)
    tx = data;
 80037ee:	f884 8000 	strb.w	r8, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80037f2:	f7fe fc37 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80037f6:	2201      	movs	r2, #1
 80037f8:	2140      	movs	r1, #64	; 0x40
 80037fa:	4885      	ldr	r0, [pc, #532]	; (8003a10 <ist8310_init+0x694>)
 80037fc:	f7fe f93c 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 8003800:	2002      	movs	r0, #2
 8003802:	f7fd fc01 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003806:	4642      	mov	r2, r8
 8003808:	2140      	movs	r1, #64	; 0x40
 800380a:	4881      	ldr	r0, [pc, #516]	; (8003a10 <ist8310_init+0x694>)
 800380c:	f7fe f934 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003810:	2301      	movs	r3, #1
 8003812:	462a      	mov	r2, r5
 8003814:	4621      	mov	r1, r4
 8003816:	9600      	str	r6, [sp, #0]
 8003818:	487e      	ldr	r0, [pc, #504]	; (8003a14 <ist8310_init+0x698>)
    tx = reg & 0x7F;
 800381a:	7027      	strb	r7, [r4, #0]
    tx = data;
 800381c:	f04f 0b0a 	mov.w	fp, #10
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003820:	f7fe fc20 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003824:	2301      	movs	r3, #1
 8003826:	462a      	mov	r2, r5
 8003828:	4621      	mov	r1, r4
 800382a:	9600      	str	r6, [sp, #0]
 800382c:	4879      	ldr	r0, [pc, #484]	; (8003a14 <ist8310_init+0x698>)
    tx = data;
 800382e:	f884 b000 	strb.w	fp, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003832:	f7fe fc17 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003836:	2201      	movs	r2, #1
 8003838:	2140      	movs	r1, #64	; 0x40
 800383a:	4875      	ldr	r0, [pc, #468]	; (8003a10 <ist8310_init+0x694>)
 800383c:	f7fe f91c 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 8003840:	2002      	movs	r0, #2
 8003842:	f7fd fbe1 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003846:	4642      	mov	r2, r8
 8003848:	2140      	movs	r1, #64	; 0x40
 800384a:	4871      	ldr	r0, [pc, #452]	; (8003a10 <ist8310_init+0x694>)
 800384c:	f7fe f914 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 8003850:	f04f 0e64 	mov.w	lr, #100	; 0x64
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003854:	2301      	movs	r3, #1
 8003856:	462a      	mov	r2, r5
 8003858:	4621      	mov	r1, r4
 800385a:	9600      	str	r6, [sp, #0]
 800385c:	486d      	ldr	r0, [pc, #436]	; (8003a14 <ist8310_init+0x698>)
    tx = reg & 0x7F;
 800385e:	f884 e000 	strb.w	lr, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003862:	f7fe fbff 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003866:	2301      	movs	r3, #1
 8003868:	462a      	mov	r2, r5
 800386a:	4621      	mov	r1, r4
 800386c:	9600      	str	r6, [sp, #0]
 800386e:	4869      	ldr	r0, [pc, #420]	; (8003a14 <ist8310_init+0x698>)
    tx = data;
 8003870:	f884 8000 	strb.w	r8, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003874:	f7fe fbf6 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003878:	2201      	movs	r2, #1
 800387a:	2140      	movs	r1, #64	; 0x40
 800387c:	4864      	ldr	r0, [pc, #400]	; (8003a10 <ist8310_init+0x694>)
 800387e:	f7fe f8fb 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 8003882:	2002      	movs	r0, #2
 8003884:	f7fd fbc0 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003888:	4642      	mov	r2, r8
 800388a:	2140      	movs	r1, #64	; 0x40
 800388c:	4860      	ldr	r0, [pc, #384]	; (8003a10 <ist8310_init+0x694>)
 800388e:	f7fe f8f3 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003892:	2301      	movs	r3, #1
 8003894:	462a      	mov	r2, r5
 8003896:	4621      	mov	r1, r4
 8003898:	9600      	str	r6, [sp, #0]
 800389a:	485e      	ldr	r0, [pc, #376]	; (8003a14 <ist8310_init+0x698>)
    tx = reg & 0x7F;
 800389c:	f884 a000 	strb.w	sl, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80038a0:	f7fe fbe0 	bl	8002064 <HAL_SPI_TransmitReceive>
    tx = data;
 80038a4:	f06f 0c7e 	mvn.w	ip, #126	; 0x7e
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80038a8:	2301      	movs	r3, #1
 80038aa:	462a      	mov	r2, r5
 80038ac:	4621      	mov	r1, r4
 80038ae:	9600      	str	r6, [sp, #0]
 80038b0:	4858      	ldr	r0, [pc, #352]	; (8003a14 <ist8310_init+0x698>)
    tx = data;
 80038b2:	f884 c000 	strb.w	ip, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80038b6:	f7fe fbd5 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80038ba:	2201      	movs	r2, #1
 80038bc:	2140      	movs	r1, #64	; 0x40
 80038be:	4854      	ldr	r0, [pc, #336]	; (8003a10 <ist8310_init+0x694>)
 80038c0:	f7fe f8da 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(10);
 80038c4:	4658      	mov	r0, fp
 80038c6:	f7fd fb9f 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 80038ca:	4642      	mov	r2, r8
 80038cc:	2140      	movs	r1, #64	; 0x40
 80038ce:	4850      	ldr	r0, [pc, #320]	; (8003a10 <ist8310_init+0x694>)
 80038d0:	f7fe f8d2 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 80038d4:	f04f 0732 	mov.w	r7, #50	; 0x32
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80038d8:	2301      	movs	r3, #1
 80038da:	462a      	mov	r2, r5
 80038dc:	4621      	mov	r1, r4
 80038de:	9600      	str	r6, [sp, #0]
 80038e0:	484c      	ldr	r0, [pc, #304]	; (8003a14 <ist8310_init+0x698>)
    tx = reg & 0x7F;
 80038e2:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80038e4:	f7fe fbbe 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80038e8:	2301      	movs	r3, #1
 80038ea:	462a      	mov	r2, r5
 80038ec:	4621      	mov	r1, r4
 80038ee:	9600      	str	r6, [sp, #0]
 80038f0:	4848      	ldr	r0, [pc, #288]	; (8003a14 <ist8310_init+0x698>)
    tx = data;
 80038f2:	f884 b000 	strb.w	fp, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80038f6:	f7fe fbb5 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80038fa:	2201      	movs	r2, #1
 80038fc:	2140      	movs	r1, #64	; 0x40
 80038fe:	4844      	ldr	r0, [pc, #272]	; (8003a10 <ist8310_init+0x694>)
 8003900:	f7fe f8ba 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(10);
 8003904:	4658      	mov	r0, fp
 8003906:	f7fd fb7f 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 800390a:	4642      	mov	r2, r8
 800390c:	2140      	movs	r1, #64	; 0x40
 800390e:	4840      	ldr	r0, [pc, #256]	; (8003a10 <ist8310_init+0x694>)
 8003910:	f7fe f8b2 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003914:	2301      	movs	r3, #1
 8003916:	462a      	mov	r2, r5
 8003918:	4621      	mov	r1, r4
 800391a:	9600      	str	r6, [sp, #0]
 800391c:	483d      	ldr	r0, [pc, #244]	; (8003a14 <ist8310_init+0x698>)
    tx = reg & 0x7F;
 800391e:	f884 9000 	strb.w	r9, [r4]
    tx = data;
 8003922:	f06f 077f 	mvn.w	r7, #127	; 0x7f
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003926:	f7fe fb9d 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800392a:	2301      	movs	r3, #1
 800392c:	462a      	mov	r2, r5
 800392e:	4621      	mov	r1, r4
 8003930:	9600      	str	r6, [sp, #0]
 8003932:	4838      	ldr	r0, [pc, #224]	; (8003a14 <ist8310_init+0x698>)
    tx = data;
 8003934:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003936:	f7fe fb95 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 800393a:	2201      	movs	r2, #1
 800393c:	2140      	movs	r1, #64	; 0x40
 800393e:	4834      	ldr	r0, [pc, #208]	; (8003a10 <ist8310_init+0x694>)
 8003940:	f7fe f89a 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(10);
 8003944:	4658      	mov	r0, fp
 8003946:	f7fd fb5f 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 800394a:	4642      	mov	r2, r8
 800394c:	2140      	movs	r1, #64	; 0x40
 800394e:	4830      	ldr	r0, [pc, #192]	; (8003a10 <ist8310_init+0x694>)
 8003950:	f7fe f892 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg | 0x80;
 8003954:	f06f 074a 	mvn.w	r7, #74	; 0x4a
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003958:	2301      	movs	r3, #1
 800395a:	462a      	mov	r2, r5
 800395c:	4621      	mov	r1, r4
 800395e:	9600      	str	r6, [sp, #0]
 8003960:	482c      	ldr	r0, [pc, #176]	; (8003a14 <ist8310_init+0x698>)
    tx = reg | 0x80;
 8003962:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003964:	f7fe fb7e 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003968:	2301      	movs	r3, #1
 800396a:	462a      	mov	r2, r5
 800396c:	4621      	mov	r1, r4
 800396e:	9600      	str	r6, [sp, #0]
 8003970:	4828      	ldr	r0, [pc, #160]	; (8003a14 <ist8310_init+0x698>)
 8003972:	f7fe fb77 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003976:	2201      	movs	r2, #1
 8003978:	2140      	movs	r1, #64	; 0x40
 800397a:	4825      	ldr	r0, [pc, #148]	; (8003a10 <ist8310_init+0x694>)
 800397c:	f7fe f87c 	bl	8001a78 <HAL_GPIO_WritePin>
    return rx;
 8003980:	782b      	ldrb	r3, [r5, #0]
    MPU_NSS_LOW;
 8003982:	4823      	ldr	r0, [pc, #140]	; (8003a10 <ist8310_init+0x694>)
 8003984:	4642      	mov	r2, r8
 8003986:	2140      	movs	r1, #64	; 0x40
    return rx;
 8003988:	461f      	mov	r7, r3
    MPU_NSS_LOW;
 800398a:	f7fe f875 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800398e:	2301      	movs	r3, #1
 8003990:	462a      	mov	r2, r5
 8003992:	4621      	mov	r1, r4
 8003994:	9600      	str	r6, [sp, #0]
 8003996:	481f      	ldr	r0, [pc, #124]	; (8003a14 <ist8310_init+0x698>)
    tx = reg & 0x7F;
 8003998:	f884 9000 	strb.w	r9, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800399c:	f7fe fb62 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80039a0:	2301      	movs	r3, #1
 80039a2:	462a      	mov	r2, r5
 80039a4:	4621      	mov	r1, r4
 80039a6:	9600      	str	r6, [sp, #0]
 80039a8:	481a      	ldr	r0, [pc, #104]	; (8003a14 <ist8310_init+0x698>)
    tx = data;
 80039aa:	f884 8000 	strb.w	r8, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80039ae:	f7fe fb59 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80039b2:	4817      	ldr	r0, [pc, #92]	; (8003a10 <ist8310_init+0x694>)
 80039b4:	2201      	movs	r2, #1
 80039b6:	2140      	movs	r1, #64	; 0x40
 80039b8:	f7fe f85e 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(10);
 80039bc:	4658      	mov	r0, fp
 80039be:	f7fd fb23 	bl	8001008 <HAL_Delay>
    if (ist_reg_read_by_mpu(IST8310_R_CONFA) != 0x00)
 80039c2:	2f00      	cmp	r7, #0
 80039c4:	f040 809e 	bne.w	8003b04 <ist8310_init+0x788>
    MPU_DELAY(10);
 80039c8:	4658      	mov	r0, fp
 80039ca:	f7fd fb1d 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 80039ce:	463a      	mov	r2, r7
 80039d0:	2140      	movs	r1, #64	; 0x40
 80039d2:	480f      	ldr	r0, [pc, #60]	; (8003a10 <ist8310_init+0x694>)
 80039d4:	f7fe f850 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80039d8:	2301      	movs	r3, #1
 80039da:	462a      	mov	r2, r5
 80039dc:	4621      	mov	r1, r4
 80039de:	9600      	str	r6, [sp, #0]
 80039e0:	480c      	ldr	r0, [pc, #48]	; (8003a14 <ist8310_init+0x698>)
    tx = reg & 0x7F;
 80039e2:	f884 a000 	strb.w	sl, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80039e6:	f7fe fb3d 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80039ea:	2301      	movs	r3, #1
 80039ec:	462a      	mov	r2, r5
 80039ee:	4621      	mov	r1, r4
 80039f0:	9600      	str	r6, [sp, #0]
 80039f2:	4808      	ldr	r0, [pc, #32]	; (8003a14 <ist8310_init+0x698>)
    tx = data;
 80039f4:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80039f6:	f7fe fb35 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80039fa:	2201      	movs	r2, #1
 80039fc:	2140      	movs	r1, #64	; 0x40
 80039fe:	4804      	ldr	r0, [pc, #16]	; (8003a10 <ist8310_init+0x694>)
 8003a00:	f7fe f83a 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 8003a04:	2002      	movs	r0, #2
 8003a06:	f7fd faff 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003a0a:	463a      	mov	r2, r7
 8003a0c:	2140      	movs	r1, #64	; 0x40
 8003a0e:	e003      	b.n	8003a18 <ist8310_init+0x69c>
 8003a10:	40021400 	.word	0x40021400
 8003a14:	20000690 	.word	0x20000690
 8003a18:	4846      	ldr	r0, [pc, #280]	; (8003b34 <ist8310_init+0x7b8>)
 8003a1a:	f7fe f82d 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 8003a1e:	f04f 0c29 	mov.w	ip, #41	; 0x29
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003a22:	2301      	movs	r3, #1
 8003a24:	462a      	mov	r2, r5
 8003a26:	4621      	mov	r1, r4
 8003a28:	9600      	str	r6, [sp, #0]
 8003a2a:	4843      	ldr	r0, [pc, #268]	; (8003b38 <ist8310_init+0x7bc>)
    tx = reg & 0x7F;
 8003a2c:	f884 c000 	strb.w	ip, [r4]
    tx = data;
 8003a30:	f04f 080b 	mov.w	r8, #11
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003a34:	f7fe fb16 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003a38:	2301      	movs	r3, #1
 8003a3a:	462a      	mov	r2, r5
 8003a3c:	4621      	mov	r1, r4
 8003a3e:	9600      	str	r6, [sp, #0]
 8003a40:	483d      	ldr	r0, [pc, #244]	; (8003b38 <ist8310_init+0x7bc>)
    tx = data;
 8003a42:	f884 8000 	strb.w	r8, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003a46:	f7fe fb0d 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	2140      	movs	r1, #64	; 0x40
 8003a4e:	4839      	ldr	r0, [pc, #228]	; (8003b34 <ist8310_init+0x7b8>)
 8003a50:	f7fe f812 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 8003a54:	2002      	movs	r0, #2
 8003a56:	f7fd fad7 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003a5a:	463a      	mov	r2, r7
 8003a5c:	2140      	movs	r1, #64	; 0x40
 8003a5e:	4835      	ldr	r0, [pc, #212]	; (8003b34 <ist8310_init+0x7b8>)
 8003a60:	f7fe f80a 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 8003a64:	f04f 0e64 	mov.w	lr, #100	; 0x64
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003a68:	2301      	movs	r3, #1
 8003a6a:	462a      	mov	r2, r5
 8003a6c:	4621      	mov	r1, r4
 8003a6e:	9600      	str	r6, [sp, #0]
 8003a70:	4831      	ldr	r0, [pc, #196]	; (8003b38 <ist8310_init+0x7bc>)
    tx = reg & 0x7F;
 8003a72:	f884 e000 	strb.w	lr, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003a76:	f7fe faf5 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	462a      	mov	r2, r5
 8003a7e:	4621      	mov	r1, r4
 8003a80:	9600      	str	r6, [sp, #0]
 8003a82:	482d      	ldr	r0, [pc, #180]	; (8003b38 <ist8310_init+0x7bc>)
    tx = data;
 8003a84:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003a86:	f7fe faed 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	2140      	movs	r1, #64	; 0x40
 8003a8e:	4829      	ldr	r0, [pc, #164]	; (8003b34 <ist8310_init+0x7b8>)
 8003a90:	f7fd fff2 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 8003a94:	2002      	movs	r0, #2
 8003a96:	f7fd fab7 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003a9a:	463a      	mov	r2, r7
 8003a9c:	2140      	movs	r1, #64	; 0x40
 8003a9e:	4825      	ldr	r0, [pc, #148]	; (8003b34 <ist8310_init+0x7b8>)
 8003aa0:	f7fd ffea 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	462a      	mov	r2, r5
 8003aa8:	4621      	mov	r1, r4
 8003aaa:	9600      	str	r6, [sp, #0]
 8003aac:	4822      	ldr	r0, [pc, #136]	; (8003b38 <ist8310_init+0x7bc>)
    tx = reg & 0x7F;
 8003aae:	f884 a000 	strb.w	sl, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003ab2:	f7fe fad7 	bl	8002064 <HAL_SPI_TransmitReceive>
    tx = data;
 8003ab6:	f06f 0c7e 	mvn.w	ip, #126	; 0x7e
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003aba:	2301      	movs	r3, #1
 8003abc:	462a      	mov	r2, r5
 8003abe:	4621      	mov	r1, r4
 8003ac0:	9600      	str	r6, [sp, #0]
 8003ac2:	481d      	ldr	r0, [pc, #116]	; (8003b38 <ist8310_init+0x7bc>)
    tx = data;
 8003ac4:	f884 c000 	strb.w	ip, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003ac8:	f7fe facc 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003acc:	2201      	movs	r2, #1
 8003ace:	2140      	movs	r1, #64	; 0x40
 8003ad0:	4818      	ldr	r0, [pc, #96]	; (8003b34 <ist8310_init+0x7b8>)
 8003ad2:	f7fd ffd1 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(10);
 8003ad6:	4658      	mov	r0, fp
 8003ad8:	f7fd fa96 	bl	8001008 <HAL_Delay>
    if (ist_reg_read_by_mpu(IST8310_R_CONFB) != 0x00)
 8003adc:	200b      	movs	r0, #11
 8003ade:	f7ff fb0d 	bl	80030fc <ist_reg_read_by_mpu>
 8003ae2:	4680      	mov	r8, r0
 8003ae4:	b9a0      	cbnz	r0, 8003b10 <ist8310_init+0x794>
    MPU_DELAY(10);
 8003ae6:	4658      	mov	r0, fp
 8003ae8:	f7fd fa8e 	bl	8001008 <HAL_Delay>
    ist_reg_write_by_mpu(IST8310_AVGCNTL, 0x24); //100100
 8003aec:	2124      	movs	r1, #36	; 0x24
 8003aee:	2041      	movs	r0, #65	; 0x41
 8003af0:	f7ff fba4 	bl	800323c <ist_reg_write_by_mpu>
    if (ist_reg_read_by_mpu(IST8310_AVGCNTL) != 0x24)
 8003af4:	2041      	movs	r0, #65	; 0x41
 8003af6:	f7ff fb01 	bl	80030fc <ist_reg_read_by_mpu>
 8003afa:	2824      	cmp	r0, #36	; 0x24
 8003afc:	d00b      	beq.n	8003b16 <ist8310_init+0x79a>
        return 4;
 8003afe:	f04f 0804 	mov.w	r8, #4
 8003b02:	e5cc      	b.n	800369e <ist8310_init+0x322>
        return 2;
 8003b04:	f04f 0802 	mov.w	r8, #2
}
 8003b08:	4640      	mov	r0, r8
 8003b0a:	b003      	add	sp, #12
 8003b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 3;
 8003b10:	f04f 0803 	mov.w	r8, #3
 8003b14:	e5c3      	b.n	800369e <ist8310_init+0x322>
    MPU_DELAY(10);
 8003b16:	4658      	mov	r0, fp
 8003b18:	f7fd fa76 	bl	8001008 <HAL_Delay>
    ist_reg_write_by_mpu(IST8310_PDCNTL, 0xc0);
 8003b1c:	21c0      	movs	r1, #192	; 0xc0
 8003b1e:	2042      	movs	r0, #66	; 0x42
 8003b20:	f7ff fb8c 	bl	800323c <ist_reg_write_by_mpu>
    if (ist_reg_read_by_mpu(IST8310_PDCNTL) != 0xc0)
 8003b24:	2042      	movs	r0, #66	; 0x42
 8003b26:	f7ff fae9 	bl	80030fc <ist_reg_read_by_mpu>
 8003b2a:	28c0      	cmp	r0, #192	; 0xc0
 8003b2c:	d006      	beq.n	8003b3c <ist8310_init+0x7c0>
        return 5;
 8003b2e:	f04f 0805 	mov.w	r8, #5
 8003b32:	e5b4      	b.n	800369e <ist8310_init+0x322>
 8003b34:	40021400 	.word	0x40021400
 8003b38:	20000690 	.word	0x20000690
    MPU_DELAY(10);
 8003b3c:	4658      	mov	r0, fp
 8003b3e:	f7fd fa63 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003b42:	4642      	mov	r2, r8
 8003b44:	2140      	movs	r1, #64	; 0x40
 8003b46:	48b3      	ldr	r0, [pc, #716]	; (8003e14 <ist8310_init+0xa98>)
 8003b48:	f7fd ff96 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003b4c:	462a      	mov	r2, r5
 8003b4e:	4621      	mov	r1, r4
 8003b50:	9600      	str	r6, [sp, #0]
 8003b52:	2301      	movs	r3, #1
 8003b54:	48b0      	ldr	r0, [pc, #704]	; (8003e18 <ist8310_init+0xa9c>)
    tx = reg & 0x7F;
 8003b56:	f884 a000 	strb.w	sl, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003b5a:	f7fe fa83 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003b5e:	2301      	movs	r3, #1
 8003b60:	462a      	mov	r2, r5
 8003b62:	4621      	mov	r1, r4
 8003b64:	9600      	str	r6, [sp, #0]
 8003b66:	48ac      	ldr	r0, [pc, #688]	; (8003e18 <ist8310_init+0xa9c>)
    tx = data;
 8003b68:	f884 8000 	strb.w	r8, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003b6c:	f7fe fa7a 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003b70:	2201      	movs	r2, #1
 8003b72:	2140      	movs	r1, #64	; 0x40
 8003b74:	48a7      	ldr	r0, [pc, #668]	; (8003e14 <ist8310_init+0xa98>)
 8003b76:	f7fd ff7f 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(10);
 8003b7a:	4658      	mov	r0, fp
 8003b7c:	f7fd fa44 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003b80:	4642      	mov	r2, r8
 8003b82:	2140      	movs	r1, #64	; 0x40
 8003b84:	48a3      	ldr	r0, [pc, #652]	; (8003e14 <ist8310_init+0xa98>)
 8003b86:	f7fd ff77 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003b8a:	462a      	mov	r2, r5
 8003b8c:	4621      	mov	r1, r4
 8003b8e:	9600      	str	r6, [sp, #0]
 8003b90:	2301      	movs	r3, #1
 8003b92:	48a1      	ldr	r0, [pc, #644]	; (8003e18 <ist8310_init+0xa9c>)
    tx = reg & 0x7F;
 8003b94:	f884 9000 	strb.w	r9, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003b98:	f7fe fa64 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	462a      	mov	r2, r5
 8003ba0:	4621      	mov	r1, r4
 8003ba2:	9600      	str	r6, [sp, #0]
 8003ba4:	489c      	ldr	r0, [pc, #624]	; (8003e18 <ist8310_init+0xa9c>)
    tx = data;
 8003ba6:	f884 8000 	strb.w	r8, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003baa:	f7fe fa5b 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003bae:	2201      	movs	r2, #1
 8003bb0:	2140      	movs	r1, #64	; 0x40
 8003bb2:	4898      	ldr	r0, [pc, #608]	; (8003e14 <ist8310_init+0xa98>)
 8003bb4:	f7fd ff60 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(10);
 8003bb8:	4658      	mov	r0, fp
 8003bba:	f7fd fa25 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003bbe:	4642      	mov	r2, r8
 8003bc0:	2140      	movs	r1, #64	; 0x40
 8003bc2:	4894      	ldr	r0, [pc, #592]	; (8003e14 <ist8310_init+0xa98>)
 8003bc4:	f7fd ff58 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 8003bc8:	f04f 0728 	mov.w	r7, #40	; 0x28
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003bcc:	462a      	mov	r2, r5
 8003bce:	4621      	mov	r1, r4
 8003bd0:	9600      	str	r6, [sp, #0]
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	4890      	ldr	r0, [pc, #576]	; (8003e18 <ist8310_init+0xa9c>)
    tx = reg & 0x7F;
 8003bd6:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003bd8:	f7fe fa44 	bl	8002064 <HAL_SPI_TransmitReceive>
    tx = data;
 8003bdc:	f04f 070e 	mov.w	r7, #14
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003be0:	2301      	movs	r3, #1
 8003be2:	462a      	mov	r2, r5
 8003be4:	4621      	mov	r1, r4
 8003be6:	9600      	str	r6, [sp, #0]
 8003be8:	488b      	ldr	r0, [pc, #556]	; (8003e18 <ist8310_init+0xa9c>)
    tx = data;
 8003bea:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003bec:	f7fe fa3a 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	2140      	movs	r1, #64	; 0x40
 8003bf4:	4887      	ldr	r0, [pc, #540]	; (8003e14 <ist8310_init+0xa98>)
 8003bf6:	f7fd ff3f 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 8003bfa:	2002      	movs	r0, #2
 8003bfc:	f7fd fa04 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003c00:	4642      	mov	r2, r8
 8003c02:	2140      	movs	r1, #64	; 0x40
 8003c04:	4883      	ldr	r0, [pc, #524]	; (8003e14 <ist8310_init+0xa98>)
 8003c06:	f7fd ff37 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 8003c0a:	f04f 0729 	mov.w	r7, #41	; 0x29
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003c0e:	462a      	mov	r2, r5
 8003c10:	4621      	mov	r1, r4
 8003c12:	9600      	str	r6, [sp, #0]
 8003c14:	2301      	movs	r3, #1
 8003c16:	4880      	ldr	r0, [pc, #512]	; (8003e18 <ist8310_init+0xa9c>)
    tx = reg & 0x7F;
 8003c18:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003c1a:	f7fe fa23 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003c1e:	2301      	movs	r3, #1
 8003c20:	462a      	mov	r2, r5
 8003c22:	4621      	mov	r1, r4
 8003c24:	9600      	str	r6, [sp, #0]
 8003c26:	487c      	ldr	r0, [pc, #496]	; (8003e18 <ist8310_init+0xa9c>)
    tx = data;
 8003c28:	f884 b000 	strb.w	fp, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003c2c:	f7fe fa1a 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003c30:	2201      	movs	r2, #1
 8003c32:	2140      	movs	r1, #64	; 0x40
 8003c34:	4877      	ldr	r0, [pc, #476]	; (8003e14 <ist8310_init+0xa98>)
 8003c36:	f7fd ff1f 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 8003c3a:	2002      	movs	r0, #2
 8003c3c:	f7fd f9e4 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003c40:	4642      	mov	r2, r8
 8003c42:	2140      	movs	r1, #64	; 0x40
 8003c44:	4873      	ldr	r0, [pc, #460]	; (8003e14 <ist8310_init+0xa98>)
 8003c46:	f7fd ff17 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 8003c4a:	f04f 0764 	mov.w	r7, #100	; 0x64
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003c4e:	462a      	mov	r2, r5
 8003c50:	4621      	mov	r1, r4
 8003c52:	9600      	str	r6, [sp, #0]
 8003c54:	2301      	movs	r3, #1
 8003c56:	4870      	ldr	r0, [pc, #448]	; (8003e18 <ist8310_init+0xa9c>)
    tx = reg & 0x7F;
 8003c58:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003c5a:	f7fe fa03 	bl	8002064 <HAL_SPI_TransmitReceive>
    tx = data;
 8003c5e:	f04f 0701 	mov.w	r7, #1
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003c62:	2301      	movs	r3, #1
 8003c64:	462a      	mov	r2, r5
 8003c66:	4621      	mov	r1, r4
 8003c68:	9600      	str	r6, [sp, #0]
 8003c6a:	486b      	ldr	r0, [pc, #428]	; (8003e18 <ist8310_init+0xa9c>)
    tx = data;
 8003c6c:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003c6e:	f7fe f9f9 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003c72:	2201      	movs	r2, #1
 8003c74:	2140      	movs	r1, #64	; 0x40
 8003c76:	4867      	ldr	r0, [pc, #412]	; (8003e14 <ist8310_init+0xa98>)
 8003c78:	f7fd fefe 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 8003c7c:	2002      	movs	r0, #2
 8003c7e:	f7fd f9c3 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003c82:	4642      	mov	r2, r8
 8003c84:	2140      	movs	r1, #64	; 0x40
 8003c86:	4863      	ldr	r0, [pc, #396]	; (8003e14 <ist8310_init+0xa98>)
 8003c88:	f7fd fef6 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 8003c8c:	f04f 0c25 	mov.w	ip, #37	; 0x25
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003c90:	462a      	mov	r2, r5
 8003c92:	4621      	mov	r1, r4
 8003c94:	9600      	str	r6, [sp, #0]
 8003c96:	2301      	movs	r3, #1
 8003c98:	485f      	ldr	r0, [pc, #380]	; (8003e18 <ist8310_init+0xa9c>)
    tx = reg & 0x7F;
 8003c9a:	f884 c000 	strb.w	ip, [r4]
    tx = data;
 8003c9e:	f06f 0771 	mvn.w	r7, #113	; 0x71
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003ca2:	f7fe f9df 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	462a      	mov	r2, r5
 8003caa:	4621      	mov	r1, r4
 8003cac:	9600      	str	r6, [sp, #0]
 8003cae:	485a      	ldr	r0, [pc, #360]	; (8003e18 <ist8310_init+0xa9c>)
    tx = data;
 8003cb0:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003cb2:	f7fe f9d7 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	2140      	movs	r1, #64	; 0x40
 8003cba:	4856      	ldr	r0, [pc, #344]	; (8003e14 <ist8310_init+0xa98>)
 8003cbc:	f7fd fedc 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 8003cc0:	2002      	movs	r0, #2
 8003cc2:	f7fd f9a1 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003cc6:	4642      	mov	r2, r8
 8003cc8:	2140      	movs	r1, #64	; 0x40
 8003cca:	4852      	ldr	r0, [pc, #328]	; (8003e14 <ist8310_init+0xa98>)
 8003ccc:	f7fd fed4 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 8003cd0:	f04f 0c26 	mov.w	ip, #38	; 0x26
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003cd4:	462a      	mov	r2, r5
 8003cd6:	4621      	mov	r1, r4
 8003cd8:	9600      	str	r6, [sp, #0]
 8003cda:	2301      	movs	r3, #1
 8003cdc:	484e      	ldr	r0, [pc, #312]	; (8003e18 <ist8310_init+0xa9c>)
    tx = reg & 0x7F;
 8003cde:	f884 c000 	strb.w	ip, [r4]
    tx = data;
 8003ce2:	f04f 0b03 	mov.w	fp, #3
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003ce6:	f7fe f9bd 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003cea:	2301      	movs	r3, #1
 8003cec:	462a      	mov	r2, r5
 8003cee:	4621      	mov	r1, r4
 8003cf0:	9600      	str	r6, [sp, #0]
 8003cf2:	4849      	ldr	r0, [pc, #292]	; (8003e18 <ist8310_init+0xa9c>)
    tx = data;
 8003cf4:	f884 b000 	strb.w	fp, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003cf8:	f7fe f9b4 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	2140      	movs	r1, #64	; 0x40
 8003d00:	4844      	ldr	r0, [pc, #272]	; (8003e14 <ist8310_init+0xa98>)
 8003d02:	f7fd feb9 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 8003d06:	2002      	movs	r0, #2
 8003d08:	f7fd f97e 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003d0c:	4642      	mov	r2, r8
 8003d0e:	2140      	movs	r1, #64	; 0x40
 8003d10:	4840      	ldr	r0, [pc, #256]	; (8003e14 <ist8310_init+0xa98>)
 8003d12:	f7fd feb1 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003d16:	462a      	mov	r2, r5
 8003d18:	4621      	mov	r1, r4
 8003d1a:	9600      	str	r6, [sp, #0]
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	483e      	ldr	r0, [pc, #248]	; (8003e18 <ist8310_init+0xa9c>)
    tx = reg & 0x7F;
 8003d20:	f884 9000 	strb.w	r9, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003d24:	f7fe f99e 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003d28:	2301      	movs	r3, #1
 8003d2a:	462a      	mov	r2, r5
 8003d2c:	4621      	mov	r1, r4
 8003d2e:	9600      	str	r6, [sp, #0]
 8003d30:	4839      	ldr	r0, [pc, #228]	; (8003e18 <ist8310_init+0xa9c>)
    tx = data;
 8003d32:	f884 b000 	strb.w	fp, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003d36:	f7fe f995 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	2140      	movs	r1, #64	; 0x40
 8003d3e:	4835      	ldr	r0, [pc, #212]	; (8003e14 <ist8310_init+0xa98>)
 8003d40:	f7fd fe9a 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 8003d44:	2002      	movs	r0, #2
 8003d46:	f7fd f95f 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003d4a:	4642      	mov	r2, r8
 8003d4c:	2140      	movs	r1, #64	; 0x40
 8003d4e:	4831      	ldr	r0, [pc, #196]	; (8003e14 <ist8310_init+0xa98>)
 8003d50:	f7fd fe92 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 8003d54:	f04f 0c67 	mov.w	ip, #103	; 0x67
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003d58:	462a      	mov	r2, r5
 8003d5a:	4621      	mov	r1, r4
 8003d5c:	9600      	str	r6, [sp, #0]
 8003d5e:	2301      	movs	r3, #1
 8003d60:	482d      	ldr	r0, [pc, #180]	; (8003e18 <ist8310_init+0xa9c>)
    tx = reg & 0x7F;
 8003d62:	f884 c000 	strb.w	ip, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003d66:	f7fe f97d 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	462a      	mov	r2, r5
 8003d6e:	4621      	mov	r1, r4
 8003d70:	9600      	str	r6, [sp, #0]
 8003d72:	4829      	ldr	r0, [pc, #164]	; (8003e18 <ist8310_init+0xa9c>)
    tx = data;
 8003d74:	f884 b000 	strb.w	fp, [r4]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003d78:	f7fe f974 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	2140      	movs	r1, #64	; 0x40
 8003d80:	4824      	ldr	r0, [pc, #144]	; (8003e14 <ist8310_init+0xa98>)
 8003d82:	f7fd fe79 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 8003d86:	2002      	movs	r0, #2
 8003d88:	f7fd f93e 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003d8c:	4642      	mov	r2, r8
 8003d8e:	2140      	movs	r1, #64	; 0x40
 8003d90:	4820      	ldr	r0, [pc, #128]	; (8003e14 <ist8310_init+0xa98>)
 8003d92:	f7fd fe71 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003d96:	462a      	mov	r2, r5
 8003d98:	4621      	mov	r1, r4
 8003d9a:	9600      	str	r6, [sp, #0]
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	481e      	ldr	r0, [pc, #120]	; (8003e18 <ist8310_init+0xa9c>)
    tx = reg & 0x7F;
 8003da0:	f884 a000 	strb.w	sl, [r4]
    tx = data;
 8003da4:	f06f 077e 	mvn.w	r7, #126	; 0x7e
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003da8:	f7fe f95c 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003dac:	2301      	movs	r3, #1
 8003dae:	462a      	mov	r2, r5
 8003db0:	4621      	mov	r1, r4
 8003db2:	9600      	str	r6, [sp, #0]
 8003db4:	4818      	ldr	r0, [pc, #96]	; (8003e18 <ist8310_init+0xa9c>)
    tx = data;
 8003db6:	7027      	strb	r7, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003db8:	f7fe f954 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	2140      	movs	r1, #64	; 0x40
 8003dc0:	4814      	ldr	r0, [pc, #80]	; (8003e14 <ist8310_init+0xa98>)
 8003dc2:	f7fd fe59 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(6); 
 8003dc6:	2006      	movs	r0, #6
 8003dc8:	f7fd f91e 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 8003dcc:	4642      	mov	r2, r8
 8003dce:	2140      	movs	r1, #64	; 0x40
 8003dd0:	4810      	ldr	r0, [pc, #64]	; (8003e14 <ist8310_init+0xa98>)
 8003dd2:	f7fd fe51 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003dd6:	462a      	mov	r2, r5
 8003dd8:	4621      	mov	r1, r4
 8003dda:	9600      	str	r6, [sp, #0]
    tx = reg & 0x7F;
 8003ddc:	2527      	movs	r5, #39	; 0x27
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003dde:	2301      	movs	r3, #1
 8003de0:	480d      	ldr	r0, [pc, #52]	; (8003e18 <ist8310_init+0xa9c>)
    tx = reg & 0x7F;
 8003de2:	7025      	strb	r5, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003de4:	f7fe f93e 	bl	8002064 <HAL_SPI_TransmitReceive>
    tx = data;
 8003de8:	2586      	movs	r5, #134	; 0x86
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003dea:	2301      	movs	r3, #1
 8003dec:	4621      	mov	r1, r4
 8003dee:	9600      	str	r6, [sp, #0]
 8003df0:	4a0a      	ldr	r2, [pc, #40]	; (8003e1c <ist8310_init+0xaa0>)
 8003df2:	4809      	ldr	r0, [pc, #36]	; (8003e18 <ist8310_init+0xa9c>)
    tx = data;
 8003df4:	7025      	strb	r5, [r4, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003df6:	f7fe f935 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	2140      	movs	r1, #64	; 0x40
 8003dfe:	4805      	ldr	r0, [pc, #20]	; (8003e14 <ist8310_init+0xa98>)
 8003e00:	f7fd fe3a 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_DELAY(2);
 8003e04:	2002      	movs	r0, #2
 8003e06:	f7fd f8ff 	bl	8001008 <HAL_Delay>
    MPU_DELAY(100);
 8003e0a:	2064      	movs	r0, #100	; 0x64
 8003e0c:	f7fd f8fc 	bl	8001008 <HAL_Delay>
 8003e10:	e445      	b.n	800369e <ist8310_init+0x322>
 8003e12:	bf00      	nop
 8003e14:	40021400 	.word	0x40021400
 8003e18:	20000690 	.word	0x20000690
 8003e1c:	2000024c 	.word	0x2000024c

08003e20 <mpu_get_data>:
  * @param  
	* @retval 
  * @usage  call in main() function
	*/
void mpu_get_data()
{
 8003e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MPU_NSS_LOW;
 8003e24:	4e5b      	ldr	r6, [pc, #364]	; (8003f94 <mpu_get_data+0x174>)
    tx         = regAddr | 0x80;
 8003e26:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8003fb4 <mpu_get_data+0x194>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003e2a:	4f5b      	ldr	r7, [pc, #364]	; (8003f98 <mpu_get_data+0x178>)
    tx_buff[0] = tx;
 8003e2c:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8003fb8 <mpu_get_data+0x198>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003e30:	f8df b188 	ldr.w	fp, [pc, #392]	; 8003fbc <mpu_get_data+0x19c>
    HAL_SPI_TransmitReceive(&MPU_HSPI, tx_buff, pData, len, 55);
 8003e34:	4d59      	ldr	r5, [pc, #356]	; (8003f9c <mpu_get_data+0x17c>)
    mpu_read_bytes(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);

    mpu_data.ax   = mpu_buff[0] << 8 | mpu_buff[1];
 8003e36:	4c5a      	ldr	r4, [pc, #360]	; (8003fa0 <mpu_get_data+0x180>)
{
 8003e38:	b083      	sub	sp, #12
    MPU_NSS_LOW;
 8003e3a:	4630      	mov	r0, r6
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	2140      	movs	r1, #64	; 0x40
 8003e40:	f7fd fe1a 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003e44:	f04f 0937 	mov.w	r9, #55	; 0x37
    tx         = regAddr | 0x80;
 8003e48:	23bb      	movs	r3, #187	; 0xbb
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003e4a:	4651      	mov	r1, sl
 8003e4c:	465a      	mov	r2, fp
    tx         = regAddr | 0x80;
 8003e4e:	f88a 3000 	strb.w	r3, [sl]
    tx_buff[0] = tx;
 8003e52:	f888 3000 	strb.w	r3, [r8]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003e56:	4638      	mov	r0, r7
 8003e58:	f8cd 9000 	str.w	r9, [sp]
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	f7fe f901 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, tx_buff, pData, len, 55);
 8003e62:	4641      	mov	r1, r8
 8003e64:	462a      	mov	r2, r5
 8003e66:	230e      	movs	r3, #14
 8003e68:	f8cd 9000 	str.w	r9, [sp]
 8003e6c:	4638      	mov	r0, r7
 8003e6e:	f7fe f8f9 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003e72:	4630      	mov	r0, r6
 8003e74:	2201      	movs	r2, #1
 8003e76:	2140      	movs	r1, #64	; 0x40
 8003e78:	f7fd fdfe 	bl	8001a78 <HAL_GPIO_WritePin>
    mpu_data.ay   = mpu_buff[2] << 8 | mpu_buff[3];
    mpu_data.az   = mpu_buff[4] << 8 | mpu_buff[5];
    mpu_data.temp = mpu_buff[6] << 8 | mpu_buff[7];

    mpu_data.gx = ((mpu_buff[8]  << 8 | mpu_buff[9])  - mpu_data.gx_offset);
 8003e7c:	7a28      	ldrb	r0, [r5, #8]
 8003e7e:	7a69      	ldrb	r1, [r5, #9]
    mpu_data.gy = ((mpu_buff[10] << 8 | mpu_buff[11]) - mpu_data.gy_offset);
    mpu_data.gz = ((mpu_buff[12] << 8 | mpu_buff[13]) - mpu_data.gz_offset);
 8003e80:	f895 c00c 	ldrb.w	ip, [r5, #12]
 8003e84:	7b6b      	ldrb	r3, [r5, #13]
    mpu_data.gy = ((mpu_buff[10] << 8 | mpu_buff[11]) - mpu_data.gy_offset);
 8003e86:	f895 e00a 	ldrb.w	lr, [r5, #10]
 8003e8a:	7aea      	ldrb	r2, [r5, #11]
    mpu_data.gx = ((mpu_buff[8]  << 8 | mpu_buff[9])  - mpu_data.gx_offset);
 8003e8c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8003e90:	8b60      	ldrh	r0, [r4, #26]
    mpu_data.gz = ((mpu_buff[12] << 8 | mpu_buff[13]) - mpu_data.gz_offset);
 8003e92:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    mpu_data.gx = ((mpu_buff[8]  << 8 | mpu_buff[9])  - mpu_data.gx_offset);
 8003e96:	1a09      	subs	r1, r1, r0
    mpu_data.ax   = mpu_buff[0] << 8 | mpu_buff[1];
 8003e98:	f895 c000 	ldrb.w	ip, [r5]
 8003e9c:	7868      	ldrb	r0, [r5, #1]
    mpu_data.gx = ((mpu_buff[8]  << 8 | mpu_buff[9])  - mpu_data.gx_offset);
 8003e9e:	81e1      	strh	r1, [r4, #14]
    mpu_data.ax   = mpu_buff[0] << 8 | mpu_buff[1];
 8003ea0:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    mpu_data.ay   = mpu_buff[2] << 8 | mpu_buff[3];
 8003ea4:	78e9      	ldrb	r1, [r5, #3]
 8003ea6:	f895 c002 	ldrb.w	ip, [r5, #2]
    mpu_data.ax   = mpu_buff[0] << 8 | mpu_buff[1];
 8003eaa:	8020      	strh	r0, [r4, #0]
    mpu_data.ay   = mpu_buff[2] << 8 | mpu_buff[3];
 8003eac:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
    mpu_data.az   = mpu_buff[4] << 8 | mpu_buff[5];
 8003eb0:	7968      	ldrb	r0, [r5, #5]
 8003eb2:	f895 c004 	ldrb.w	ip, [r5, #4]
    mpu_data.ay   = mpu_buff[2] << 8 | mpu_buff[3];
 8003eb6:	8061      	strh	r1, [r4, #2]
    mpu_data.az   = mpu_buff[4] << 8 | mpu_buff[5];
 8003eb8:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    mpu_data.temp = mpu_buff[6] << 8 | mpu_buff[7];
 8003ebc:	79e9      	ldrb	r1, [r5, #7]
 8003ebe:	f895 c006 	ldrb.w	ip, [r5, #6]
    mpu_data.gy = ((mpu_buff[10] << 8 | mpu_buff[11]) - mpu_data.gy_offset);
 8003ec2:	8ba5      	ldrh	r5, [r4, #28]
    mpu_data.az   = mpu_buff[4] << 8 | mpu_buff[5];
 8003ec4:	80a0      	strh	r0, [r4, #4]
    mpu_data.gy = ((mpu_buff[10] << 8 | mpu_buff[11]) - mpu_data.gy_offset);
 8003ec6:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
    mpu_data.gz = ((mpu_buff[12] << 8 | mpu_buff[13]) - mpu_data.gz_offset);
 8003eca:	8be0      	ldrh	r0, [r4, #30]
    mpu_data.temp = mpu_buff[6] << 8 | mpu_buff[7];
 8003ecc:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
    mpu_data.gy = ((mpu_buff[10] << 8 | mpu_buff[11]) - mpu_data.gy_offset);
 8003ed0:	1b55      	subs	r5, r2, r5
    mpu_data.gz = ((mpu_buff[12] << 8 | mpu_buff[13]) - mpu_data.gz_offset);
 8003ed2:	1a1b      	subs	r3, r3, r0
    mpu_data.temp = mpu_buff[6] << 8 | mpu_buff[7];
 8003ed4:	81a1      	strh	r1, [r4, #12]
    MPU_NSS_LOW;
 8003ed6:	4630      	mov	r0, r6
    mpu_data.gy = ((mpu_buff[10] << 8 | mpu_buff[11]) - mpu_data.gy_offset);
 8003ed8:	8225      	strh	r5, [r4, #16]
    MPU_NSS_LOW;
 8003eda:	2200      	movs	r2, #0
    HAL_SPI_TransmitReceive(&MPU_HSPI, tx_buff, pData, len, 55);
 8003edc:	4d31      	ldr	r5, [pc, #196]	; (8003fa4 <mpu_get_data+0x184>)
    mpu_data.gz = ((mpu_buff[12] << 8 | mpu_buff[13]) - mpu_data.gz_offset);
 8003ede:	8263      	strh	r3, [r4, #18]
    MPU_NSS_LOW;
 8003ee0:	2140      	movs	r1, #64	; 0x40
 8003ee2:	f7fd fdc9 	bl	8001a78 <HAL_GPIO_WritePin>
    tx         = regAddr | 0x80;
 8003ee6:	f04f 0cc9 	mov.w	ip, #201	; 0xc9
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003eea:	465a      	mov	r2, fp
 8003eec:	4651      	mov	r1, sl
 8003eee:	f8cd 9000 	str.w	r9, [sp]
 8003ef2:	4638      	mov	r0, r7
 8003ef4:	2301      	movs	r3, #1
    tx         = regAddr | 0x80;
 8003ef6:	f88a c000 	strb.w	ip, [sl]
    tx_buff[0] = tx;
 8003efa:	f888 c000 	strb.w	ip, [r8]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003efe:	f7fe f8b1 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, tx_buff, pData, len, 55);
 8003f02:	4641      	mov	r1, r8
 8003f04:	462a      	mov	r2, r5
 8003f06:	2306      	movs	r3, #6
 8003f08:	f8cd 9000 	str.w	r9, [sp]
 8003f0c:	4638      	mov	r0, r7
 8003f0e:	f7fe f8a9 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8003f12:	4630      	mov	r0, r6
 8003f14:	2201      	movs	r2, #1
 8003f16:	2140      	movs	r1, #64	; 0x40
 8003f18:	f7fd fdae 	bl	8001a78 <HAL_GPIO_WritePin>
    ist8310_get_data(ist_buff);
    memcpy(&mpu_data.mx, ist_buff, 6);

    memcpy(&imu.ax, &mpu_data.ax, 6 * sizeof(int16_t));
	
    imu.temp = 21 + mpu_data.temp / 333.87f;
 8003f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    memcpy(&mpu_data.mx, ist_buff, 6);
 8003f20:	682a      	ldr	r2, [r5, #0]
 8003f22:	f8c4 2006 	str.w	r2, [r4, #6]
    imu.temp = 21 + mpu_data.temp / 333.87f;
 8003f26:	ee05 3a10 	vmov	s10, r3
	  /* 2000dps -> rad/s */
	imu.wx   = mpu_data.gx / 16.384f / 57.3f;
 8003f2a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    memcpy(&imu.ax, &mpu_data.ax, 6 * sizeof(int16_t));
 8003f2e:	6861      	ldr	r1, [r4, #4]
 8003f30:	6820      	ldr	r0, [r4, #0]
    imu.temp = 21 + mpu_data.temp / 333.87f;
 8003f32:	eddf 4a1d 	vldr	s9, [pc, #116]	; 8003fa8 <mpu_get_data+0x188>
	imu.wx   = mpu_data.gx / 16.384f / 57.3f;
 8003f36:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003fac <mpu_get_data+0x18c>
 8003f3a:	ee07 3a10 	vmov	s14, r3
    imu.wy   = mpu_data.gy / 16.384f / 57.3f; 
 8003f3e:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8003f42:	ee06 3a90 	vmov	s13, r3
    imu.wz   = mpu_data.gz / 16.384f / 57.3f;
 8003f46:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 8003f4a:	ee07 3a90 	vmov	s15, r3
    memcpy(&mpu_data.mx, ist_buff, 6);
 8003f4e:	88ab      	ldrh	r3, [r5, #4]
 8003f50:	8163      	strh	r3, [r4, #10]
    memcpy(&imu.ax, &mpu_data.ax, 6 * sizeof(int16_t));
 8003f52:	4b17      	ldr	r3, [pc, #92]	; (8003fb0 <mpu_get_data+0x190>)
 8003f54:	68a2      	ldr	r2, [r4, #8]
    imu.temp = 21 + mpu_data.temp / 333.87f;
 8003f56:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
    memcpy(&imu.ax, &mpu_data.ax, 6 * sizeof(int16_t));
 8003f5a:	461c      	mov	r4, r3
    imu.temp = 21 + mpu_data.temp / 333.87f;
 8003f5c:	eeb3 6a05 	vmov.f32	s12, #53	; 0x41a80000  21.0
    memcpy(&imu.ax, &mpu_data.ax, 6 * sizeof(int16_t));
 8003f60:	c407      	stmia	r4!, {r0, r1, r2}
    imu.temp = 21 + mpu_data.temp / 333.87f;
 8003f62:	eea5 6a24 	vfma.f32	s12, s10, s9
	imu.wx   = mpu_data.gx / 16.384f / 57.3f;
 8003f66:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    imu.wy   = mpu_data.gy / 16.384f / 57.3f; 
 8003f6a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    imu.wz   = mpu_data.gz / 16.384f / 57.3f;
 8003f6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	imu.wx   = mpu_data.gx / 16.384f / 57.3f;
 8003f72:	ee27 7a25 	vmul.f32	s14, s14, s11
    imu.wy   = mpu_data.gy / 16.384f / 57.3f; 
 8003f76:	ee66 6aa5 	vmul.f32	s13, s13, s11
    imu.wz   = mpu_data.gz / 16.384f / 57.3f;
 8003f7a:	ee67 7aa5 	vmul.f32	s15, s15, s11
    imu.wy   = mpu_data.gy / 16.384f / 57.3f; 
 8003f7e:	edc3 6a05 	vstr	s13, [r3, #20]
    imu.temp = 21 + mpu_data.temp / 333.87f;
 8003f82:	ed83 6a03 	vstr	s12, [r3, #12]
	imu.wx   = mpu_data.gx / 16.384f / 57.3f;
 8003f86:	ed83 7a04 	vstr	s14, [r3, #16]
    imu.wz   = mpu_data.gz / 16.384f / 57.3f;
 8003f8a:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8003f8e:	b003      	add	sp, #12
 8003f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f94:	40021400 	.word	0x40021400
 8003f98:	20000690 	.word	0x20000690
 8003f9c:	2000030c 	.word	0x2000030c
 8003fa0:	200002ec 	.word	0x200002ec
 8003fa4:	200002dc 	.word	0x200002dc
 8003fa8:	3b444abf 	.word	0x3b444abf
 8003fac:	3a8b9db5 	.word	0x3a8b9db5
 8003fb0:	20000218 	.word	0x20000218
 8003fb4:	2000024d 	.word	0x2000024d
 8003fb8:	20000008 	.word	0x20000008
 8003fbc:	2000024c 	.word	0x2000024c

08003fc0 <mpu_offset_call>:
  * @param  
	* @retval 
  * @usage  call in main() function
	*/
void mpu_offset_call(void)
{
 8003fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fc4:	b085      	sub	sp, #20
 8003fc6:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 8003fca:	4d4b      	ldr	r5, [pc, #300]	; (80040f8 <mpu_offset_call+0x138>)
 8003fcc:	4c4b      	ldr	r4, [pc, #300]	; (80040fc <mpu_offset_call+0x13c>)
    MPU_NSS_LOW;
 8003fce:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8004114 <mpu_offset_call+0x154>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003fd2:	4f4b      	ldr	r7, [pc, #300]	; (8004100 <mpu_offset_call+0x140>)
{
 8003fd4:	9603      	str	r6, [sp, #12]
    MPU_NSS_LOW;
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	2140      	movs	r1, #64	; 0x40
 8003fda:	4640      	mov	r0, r8
 8003fdc:	f7fd fd4c 	bl	8001a78 <HAL_GPIO_WritePin>
    tx_buff[0] = tx;
 8003fe0:	4e48      	ldr	r6, [pc, #288]	; (8004104 <mpu_offset_call+0x144>)
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003fe2:	4949      	ldr	r1, [pc, #292]	; (8004108 <mpu_offset_call+0x148>)
 8003fe4:	4a49      	ldr	r2, [pc, #292]	; (800410c <mpu_offset_call+0x14c>)
    tx         = regAddr | 0x80;
 8003fe6:	f04f 0cbb 	mov.w	ip, #187	; 0xbb
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003fea:	f04f 0937 	mov.w	r9, #55	; 0x37
 8003fee:	f8cd 9000 	str.w	r9, [sp]
 8003ff2:	2301      	movs	r3, #1
    tx         = regAddr | 0x80;
 8003ff4:	f881 c000 	strb.w	ip, [r1]
    tx_buff[0] = tx;
 8003ff8:	f886 c000 	strb.w	ip, [r6]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003ffc:	4638      	mov	r0, r7
 8003ffe:	f7fe f831 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, tx_buff, pData, len, 55);
 8004002:	230e      	movs	r3, #14
 8004004:	f8cd 9000 	str.w	r9, [sp]
 8004008:	4a3b      	ldr	r2, [pc, #236]	; (80040f8 <mpu_offset_call+0x138>)
 800400a:	4631      	mov	r1, r6
 800400c:	4638      	mov	r0, r7
 800400e:	f7fe f829 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8004012:	2201      	movs	r2, #1
 8004014:	2140      	movs	r1, #64	; 0x40
 8004016:	4640      	mov	r0, r8
 8004018:	f7fd fd2e 	bl	8001a78 <HAL_GPIO_WritePin>
	for (i=0; i<500;i++)
	{
		mpu_read_bytes(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);

		mpu_data.ax_offset += mpu_buff[0] << 8 | mpu_buff[1];
		mpu_data.ay_offset += mpu_buff[2] << 8 | mpu_buff[3];
 800401c:	f895 a002 	ldrb.w	sl, [r5, #2]
		mpu_data.az_offset += mpu_buff[4] << 8 | mpu_buff[5];
	
		mpu_data.gx_offset += mpu_buff[8]  << 8 | mpu_buff[9];
 8004020:	7a2b      	ldrb	r3, [r5, #8]
		mpu_data.ay_offset += mpu_buff[2] << 8 | mpu_buff[3];
 8004022:	f895 c003 	ldrb.w	ip, [r5, #3]
		mpu_data.gx_offset += mpu_buff[8]  << 8 | mpu_buff[9];
 8004026:	7a69      	ldrb	r1, [r5, #9]
		mpu_data.ax_offset += mpu_buff[0] << 8 | mpu_buff[1];
 8004028:	f895 9000 	ldrb.w	r9, [r5]
 800402c:	f895 e001 	ldrb.w	lr, [r5, #1]
		mpu_data.az_offset += mpu_buff[4] << 8 | mpu_buff[5];
 8004030:	792a      	ldrb	r2, [r5, #4]
 8004032:	7968      	ldrb	r0, [r5, #5]
		mpu_data.gy_offset += mpu_buff[10] << 8 | mpu_buff[11];
 8004034:	f895 b00a 	ldrb.w	fp, [r5, #10]
		mpu_data.ay_offset += mpu_buff[2] << 8 | mpu_buff[3];
 8004038:	ea4c 2c0a 	orr.w	ip, ip, sl, lsl #8
		mpu_data.gx_offset += mpu_buff[8]  << 8 | mpu_buff[9];
 800403c:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
		mpu_data.gz_offset += mpu_buff[12] << 8 | mpu_buff[13];
 8004040:	f895 a00c 	ldrb.w	sl, [r5, #12]
 8004044:	7b6b      	ldrb	r3, [r5, #13]
		mpu_data.ax_offset += mpu_buff[0] << 8 | mpu_buff[1];
 8004046:	ea4e 2e09 	orr.w	lr, lr, r9, lsl #8
		mpu_data.gz_offset += mpu_buff[12] << 8 | mpu_buff[13];
 800404a:	ea43 230a 	orr.w	r3, r3, sl, lsl #8
		mpu_data.ax_offset += mpu_buff[0] << 8 | mpu_buff[1];
 800404e:	f8b4 9014 	ldrh.w	r9, [r4, #20]
		mpu_data.ay_offset += mpu_buff[2] << 8 | mpu_buff[3];
 8004052:	f8b4 a016 	ldrh.w	sl, [r4, #22]
		mpu_data.ax_offset += mpu_buff[0] << 8 | mpu_buff[1];
 8004056:	44ce      	add	lr, r9
		mpu_data.ay_offset += mpu_buff[2] << 8 | mpu_buff[3];
 8004058:	44d4      	add	ip, sl
		mpu_data.az_offset += mpu_buff[4] << 8 | mpu_buff[5];
 800405a:	f8b4 9018 	ldrh.w	r9, [r4, #24]
		mpu_data.gx_offset += mpu_buff[8]  << 8 | mpu_buff[9];
 800405e:	f8b4 a01a 	ldrh.w	sl, [r4, #26]
		mpu_data.ax_offset += mpu_buff[0] << 8 | mpu_buff[1];
 8004062:	f8a4 e014 	strh.w	lr, [r4, #20]
		mpu_data.az_offset += mpu_buff[4] << 8 | mpu_buff[5];
 8004066:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
		mpu_data.gy_offset += mpu_buff[10] << 8 | mpu_buff[11];
 800406a:	7aea      	ldrb	r2, [r5, #11]
 800406c:	f8b4 e01c 	ldrh.w	lr, [r4, #28]
		mpu_data.ay_offset += mpu_buff[2] << 8 | mpu_buff[3];
 8004070:	f8a4 c016 	strh.w	ip, [r4, #22]
		mpu_data.gz_offset += mpu_buff[12] << 8 | mpu_buff[13];
 8004074:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		mpu_data.az_offset += mpu_buff[4] << 8 | mpu_buff[5];
 8004078:	4448      	add	r0, r9
		mpu_data.gy_offset += mpu_buff[10] << 8 | mpu_buff[11];
 800407a:	ea42 220b 	orr.w	r2, r2, fp, lsl #8
		mpu_data.gz_offset += mpu_buff[12] << 8 | mpu_buff[13];
 800407e:	4463      	add	r3, ip
		mpu_data.az_offset += mpu_buff[4] << 8 | mpu_buff[5];
 8004080:	8320      	strh	r0, [r4, #24]
		mpu_data.gx_offset += mpu_buff[8]  << 8 | mpu_buff[9];
 8004082:	4451      	add	r1, sl
		mpu_data.gy_offset += mpu_buff[10] << 8 | mpu_buff[11];
 8004084:	4472      	add	r2, lr

		MPU_DELAY(5);
 8004086:	2005      	movs	r0, #5
		mpu_data.gz_offset += mpu_buff[12] << 8 | mpu_buff[13];
 8004088:	83e3      	strh	r3, [r4, #30]
		mpu_data.gx_offset += mpu_buff[8]  << 8 | mpu_buff[9];
 800408a:	8361      	strh	r1, [r4, #26]
		mpu_data.gy_offset += mpu_buff[10] << 8 | mpu_buff[11];
 800408c:	83a2      	strh	r2, [r4, #28]
		MPU_DELAY(5);
 800408e:	f7fc ffbb 	bl	8001008 <HAL_Delay>
	for (i=0; i<500;i++)
 8004092:	9b03      	ldr	r3, [sp, #12]
 8004094:	3b01      	subs	r3, #1
 8004096:	9303      	str	r3, [sp, #12]
 8004098:	d19d      	bne.n	8003fd6 <mpu_offset_call+0x16>
	}
	mpu_data.ax_offset=mpu_data.ax_offset / 500;
 800409a:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
	mpu_data.ay_offset=mpu_data.ay_offset / 500;
 800409e:	f9b4 5016 	ldrsh.w	r5, [r4, #22]
	mpu_data.az_offset=mpu_data.az_offset / 500;
 80040a2:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
	mpu_data.gx_offset=mpu_data.gx_offset / 500;
 80040a6:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
	mpu_data.gy_offset=mpu_data.gx_offset / 500;
	mpu_data.gz_offset=mpu_data.gz_offset / 500;
 80040aa:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 80040ae:	461e      	mov	r6, r3
	mpu_data.ax_offset=mpu_data.ax_offset / 500;
 80040b0:	4b17      	ldr	r3, [pc, #92]	; (8004110 <mpu_offset_call+0x150>)
	mpu_data.gy_offset=mpu_data.gx_offset / 500;
 80040b2:	83a6      	strh	r6, [r4, #28]
	mpu_data.ax_offset=mpu_data.ax_offset / 500;
 80040b4:	fb83 6c07 	smull	r6, ip, r3, r7
 80040b8:	17fe      	asrs	r6, r7, #31
 80040ba:	ebc6 166c 	rsb	r6, r6, ip, asr #5
 80040be:	82a6      	strh	r6, [r4, #20]
	mpu_data.ay_offset=mpu_data.ay_offset / 500;
 80040c0:	fb83 7605 	smull	r7, r6, r3, r5
 80040c4:	17ed      	asrs	r5, r5, #31
 80040c6:	ebc5 1566 	rsb	r5, r5, r6, asr #5
 80040ca:	82e5      	strh	r5, [r4, #22]
	mpu_data.az_offset=mpu_data.az_offset / 500;
 80040cc:	fb83 6500 	smull	r6, r5, r3, r0
 80040d0:	17c0      	asrs	r0, r0, #31
 80040d2:	ebc0 1065 	rsb	r0, r0, r5, asr #5
	mpu_data.gx_offset=mpu_data.gx_offset / 500;
 80040d6:	fb83 6501 	smull	r6, r5, r3, r1
	mpu_data.gz_offset=mpu_data.gz_offset / 500;
 80040da:	fb83 6302 	smull	r6, r3, r3, r2
	mpu_data.gx_offset=mpu_data.gx_offset / 500;
 80040de:	17c9      	asrs	r1, r1, #31
	mpu_data.gz_offset=mpu_data.gz_offset / 500;
 80040e0:	17d2      	asrs	r2, r2, #31
	mpu_data.gx_offset=mpu_data.gx_offset / 500;
 80040e2:	ebc1 1165 	rsb	r1, r1, r5, asr #5
	mpu_data.gz_offset=mpu_data.gz_offset / 500;
 80040e6:	ebc2 1363 	rsb	r3, r2, r3, asr #5
	mpu_data.az_offset=mpu_data.az_offset / 500;
 80040ea:	8320      	strh	r0, [r4, #24]
	mpu_data.gx_offset=mpu_data.gx_offset / 500;
 80040ec:	8361      	strh	r1, [r4, #26]
	mpu_data.gz_offset=mpu_data.gz_offset / 500;
 80040ee:	83e3      	strh	r3, [r4, #30]
}
 80040f0:	b005      	add	sp, #20
 80040f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040f6:	bf00      	nop
 80040f8:	2000030c 	.word	0x2000030c
 80040fc:	200002ec 	.word	0x200002ec
 8004100:	20000690 	.word	0x20000690
 8004104:	20000008 	.word	0x20000008
 8004108:	2000024d 	.word	0x2000024d
 800410c:	2000024c 	.word	0x2000024c
 8004110:	10624dd3 	.word	0x10624dd3
 8004114:	40021400 	.word	0x40021400

08004118 <mpu_device_init>:
{
 8004118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MPU_NSS_LOW;
 800411c:	f8df a168 	ldr.w	sl, [pc, #360]	; 8004288 <mpu_device_init+0x170>
    tx = reg | 0x80;
 8004120:	4e52      	ldr	r6, [pc, #328]	; (800426c <mpu_device_init+0x154>)
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8004122:	4f53      	ldr	r7, [pc, #332]	; (8004270 <mpu_device_init+0x158>)
{
 8004124:	b08b      	sub	sp, #44	; 0x2c
	MPU_DELAY(100);
 8004126:	2064      	movs	r0, #100	; 0x64
 8004128:	f7fc ff6e 	bl	8001008 <HAL_Delay>
    MPU_NSS_LOW;
 800412c:	2200      	movs	r2, #0
 800412e:	2140      	movs	r1, #64	; 0x40
 8004130:	4650      	mov	r0, sl
 8004132:	f7fd fca1 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8004136:	2437      	movs	r4, #55	; 0x37
    tx = reg | 0x80;
 8004138:	20f5      	movs	r0, #245	; 0xf5
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800413a:	4631      	mov	r1, r6
 800413c:	463a      	mov	r2, r7
 800413e:	9400      	str	r4, [sp, #0]
 8004140:	2301      	movs	r3, #1
    tx = reg | 0x80;
 8004142:	7030      	strb	r0, [r6, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8004144:	484b      	ldr	r0, [pc, #300]	; (8004274 <mpu_device_init+0x15c>)
 8004146:	f7fd ff8d 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800414a:	484a      	ldr	r0, [pc, #296]	; (8004274 <mpu_device_init+0x15c>)
 800414c:	9400      	str	r4, [sp, #0]
 800414e:	2301      	movs	r3, #1
 8004150:	463a      	mov	r2, r7
 8004152:	4631      	mov	r1, r6
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8004154:	4681      	mov	r9, r0
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8004156:	f7fd ff85 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 800415a:	2201      	movs	r2, #1
 800415c:	2140      	movs	r1, #64	; 0x40
 800415e:	4650      	mov	r0, sl
 8004160:	f7fd fc8a 	bl	8001a78 <HAL_GPIO_WritePin>
	id                               = mpu_read_byte(MPU6500_WHO_AM_I);
 8004164:	4b44      	ldr	r3, [pc, #272]	; (8004278 <mpu_device_init+0x160>)
 8004166:	7839      	ldrb	r1, [r7, #0]
 8004168:	7019      	strb	r1, [r3, #0]
	uint8_t MPU6500_Init_Data[10][2] = {{ MPU6500_PWR_MGMT_1, 0x80 },     /* Reset Device */ 
 800416a:	2300      	movs	r3, #0
 800416c:	9306      	str	r3, [sp, #24]
 800416e:	4a43      	ldr	r2, [pc, #268]	; (800427c <mpu_device_init+0x164>)
 8004170:	9309      	str	r3, [sp, #36]	; 0x24
 8004172:	236c      	movs	r3, #108	; 0x6c
 8004174:	4842      	ldr	r0, [pc, #264]	; (8004280 <mpu_device_init+0x168>)
 8004176:	9205      	str	r2, [sp, #20]
 8004178:	4942      	ldr	r1, [pc, #264]	; (8004284 <mpu_device_init+0x16c>)
 800417a:	f88d 3018 	strb.w	r3, [sp, #24]
 800417e:	226a      	movs	r2, #106	; 0x6a
 8004180:	2320      	movs	r3, #32
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8004182:	46b0      	mov	r8, r6
	uint8_t MPU6500_Init_Data[10][2] = {{ MPU6500_PWR_MGMT_1, 0x80 },     /* Reset Device */ 
 8004184:	f8cd 001a 	str.w	r0, [sp, #26]
 8004188:	f8cd 101e 	str.w	r1, [sp, #30]
 800418c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
 8004190:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8004194:	ac05      	add	r4, sp, #20
		mpu_write_byte(MPU6500_Init_Data[i][0], MPU6500_Init_Data[i][1]);
 8004196:	7823      	ldrb	r3, [r4, #0]
 8004198:	f894 b001 	ldrb.w	fp, [r4, #1]
 800419c:	9303      	str	r3, [sp, #12]
    MPU_NSS_LOW;
 800419e:	2200      	movs	r2, #0
 80041a0:	2140      	movs	r1, #64	; 0x40
 80041a2:	4650      	mov	r0, sl
 80041a4:	f7fd fc68 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 80041a8:	9b03      	ldr	r3, [sp, #12]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80041aa:	2537      	movs	r5, #55	; 0x37
    tx = reg & 0x7F;
 80041ac:	f003 0c7f 	and.w	ip, r3, #127	; 0x7f
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80041b0:	463a      	mov	r2, r7
 80041b2:	2301      	movs	r3, #1
 80041b4:	4641      	mov	r1, r8
 80041b6:	9500      	str	r5, [sp, #0]
 80041b8:	4648      	mov	r0, r9
    tx = reg & 0x7F;
 80041ba:	f886 c000 	strb.w	ip, [r6]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80041be:	f7fd ff51 	bl	8002064 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80041c2:	2301      	movs	r3, #1
 80041c4:	463a      	mov	r2, r7
 80041c6:	4641      	mov	r1, r8
 80041c8:	9500      	str	r5, [sp, #0]
 80041ca:	4648      	mov	r0, r9
    tx = data;
 80041cc:	f886 b000 	strb.w	fp, [r6]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80041d0:	f7fd ff48 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80041d4:	2201      	movs	r2, #1
 80041d6:	2140      	movs	r1, #64	; 0x40
 80041d8:	4650      	mov	r0, sl
 80041da:	f7fd fc4d 	bl	8001a78 <HAL_GPIO_WritePin>
		MPU_DELAY(1);
 80041de:	2001      	movs	r0, #1
 80041e0:	f7fc ff12 	bl	8001008 <HAL_Delay>
 80041e4:	3402      	adds	r4, #2
	for (i = 0; i < 10; i++)
 80041e6:	ab0a      	add	r3, sp, #40	; 0x28
 80041e8:	42a3      	cmp	r3, r4
 80041ea:	d1d4      	bne.n	8004196 <mpu_device_init+0x7e>
    MPU_NSS_LOW;
 80041ec:	2200      	movs	r2, #0
 80041ee:	2140      	movs	r1, #64	; 0x40
 80041f0:	4825      	ldr	r0, [pc, #148]	; (8004288 <mpu_device_init+0x170>)
 80041f2:	f7fd fc41 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 80041f6:	241b      	movs	r4, #27
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80041f8:	9500      	str	r5, [sp, #0]
 80041fa:	2301      	movs	r3, #1
 80041fc:	4a1c      	ldr	r2, [pc, #112]	; (8004270 <mpu_device_init+0x158>)
 80041fe:	491b      	ldr	r1, [pc, #108]	; (800426c <mpu_device_init+0x154>)
 8004200:	481c      	ldr	r0, [pc, #112]	; (8004274 <mpu_device_init+0x15c>)
    tx = reg & 0x7F;
 8004202:	7034      	strb	r4, [r6, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8004204:	f7fd ff2e 	bl	8002064 <HAL_SPI_TransmitReceive>
    tx = data;
 8004208:	2418      	movs	r4, #24
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800420a:	2301      	movs	r3, #1
 800420c:	9500      	str	r5, [sp, #0]
 800420e:	4a18      	ldr	r2, [pc, #96]	; (8004270 <mpu_device_init+0x158>)
 8004210:	4916      	ldr	r1, [pc, #88]	; (800426c <mpu_device_init+0x154>)
 8004212:	4818      	ldr	r0, [pc, #96]	; (8004274 <mpu_device_init+0x15c>)
    tx = data;
 8004214:	7034      	strb	r4, [r6, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8004216:	f7fd ff25 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 800421a:	2201      	movs	r2, #1
 800421c:	2140      	movs	r1, #64	; 0x40
 800421e:	481a      	ldr	r0, [pc, #104]	; (8004288 <mpu_device_init+0x170>)
 8004220:	f7fd fc2a 	bl	8001a78 <HAL_GPIO_WritePin>
    MPU_NSS_LOW;
 8004224:	2200      	movs	r2, #0
 8004226:	2140      	movs	r1, #64	; 0x40
 8004228:	4817      	ldr	r0, [pc, #92]	; (8004288 <mpu_device_init+0x170>)
 800422a:	f7fd fc25 	bl	8001a78 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 800422e:	241c      	movs	r4, #28
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8004230:	9500      	str	r5, [sp, #0]
 8004232:	2301      	movs	r3, #1
 8004234:	4a0e      	ldr	r2, [pc, #56]	; (8004270 <mpu_device_init+0x158>)
 8004236:	490d      	ldr	r1, [pc, #52]	; (800426c <mpu_device_init+0x154>)
 8004238:	480e      	ldr	r0, [pc, #56]	; (8004274 <mpu_device_init+0x15c>)
    tx = reg & 0x7F;
 800423a:	7034      	strb	r4, [r6, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800423c:	f7fd ff12 	bl	8002064 <HAL_SPI_TransmitReceive>
    tx = data;
 8004240:	2410      	movs	r4, #16
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8004242:	2301      	movs	r3, #1
 8004244:	9500      	str	r5, [sp, #0]
 8004246:	4a0a      	ldr	r2, [pc, #40]	; (8004270 <mpu_device_init+0x158>)
 8004248:	4908      	ldr	r1, [pc, #32]	; (800426c <mpu_device_init+0x154>)
 800424a:	480a      	ldr	r0, [pc, #40]	; (8004274 <mpu_device_init+0x15c>)
    tx = data;
 800424c:	7034      	strb	r4, [r6, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800424e:	f7fd ff09 	bl	8002064 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8004252:	2201      	movs	r2, #1
 8004254:	2140      	movs	r1, #64	; 0x40
 8004256:	480c      	ldr	r0, [pc, #48]	; (8004288 <mpu_device_init+0x170>)
 8004258:	f7fd fc0e 	bl	8001a78 <HAL_GPIO_WritePin>
	ist8310_init();
 800425c:	f7ff f88e 	bl	800337c <ist8310_init>
	mpu_offset_call();
 8004260:	f7ff feae 	bl	8003fc0 <mpu_offset_call>
}
 8004264:	2000      	movs	r0, #0
 8004266:	b00b      	add	sp, #44	; 0x2c
 8004268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800426c:	2000024d 	.word	0x2000024d
 8004270:	2000024c 	.word	0x2000024c
 8004274:	20000690 	.word	0x20000690
 8004278:	200002e2 	.word	0x200002e2
 800427c:	036b806b 	.word	0x036b806b
 8004280:	181b041a 	.word	0x181b041a
 8004284:	021d101c 	.word	0x021d101c
 8004288:	40021400 	.word	0x40021400

0800428c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800428c:	b538      	push	{r3, r4, r5, lr}

  hcan1.Instance = CAN1;
 800428e:	4b0d      	ldr	r3, [pc, #52]	; (80042c4 <MX_CAN1_Init+0x38>)
 8004290:	4a0d      	ldr	r2, [pc, #52]	; (80042c8 <MX_CAN1_Init+0x3c>)
 8004292:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 8004294:	2207      	movs	r2, #7
 8004296:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8004298:	2200      	movs	r2, #0
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800429a:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800429e:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
  hcan1.Init.TimeTriggeredMode = DISABLE;
  hcan1.Init.AutoBusOff = DISABLE;
  hcan1.Init.AutoWakeUp = DISABLE;
  hcan1.Init.AutoRetransmission = DISABLE;
  hcan1.Init.ReceiveFifoLocked = DISABLE;
  hcan1.Init.TransmitFifoPriority = ENABLE;
 80042a2:	2101      	movs	r1, #1
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80042a4:	4618      	mov	r0, r3
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80042a6:	619a      	str	r2, [r3, #24]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80042a8:	e9c3 5404 	strd	r5, r4, [r3, #16]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 80042ac:	7759      	strb	r1, [r3, #29]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80042ae:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80042b2:	771a      	strb	r2, [r3, #28]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80042b4:	f7fc feba 	bl	800102c <HAL_CAN_Init>
 80042b8:	b900      	cbnz	r0, 80042bc <MX_CAN1_Init+0x30>
  {
    Error_Handler();
  }

}
 80042ba:	bd38      	pop	{r3, r4, r5, pc}
 80042bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80042c0:	f001 bf94 	b.w	80061ec <Error_Handler>
 80042c4:	2000034c 	.word	0x2000034c
 80042c8:	40006400 	.word	0x40006400

080042cc <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80042cc:	b538      	push	{r3, r4, r5, lr}

  hcan2.Instance = CAN2;
 80042ce:	4b0d      	ldr	r3, [pc, #52]	; (8004304 <MX_CAN2_Init+0x38>)
 80042d0:	4a0d      	ldr	r2, [pc, #52]	; (8004308 <MX_CAN2_Init+0x3c>)
 80042d2:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 7;
 80042d4:	2207      	movs	r2, #7
 80042d6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80042d8:	2200      	movs	r2, #0
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 80042da:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 80042de:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
  hcan2.Init.TimeTriggeredMode = DISABLE;
  hcan2.Init.AutoBusOff = DISABLE;
  hcan2.Init.AutoWakeUp = DISABLE;
  hcan2.Init.AutoRetransmission = DISABLE;
  hcan2.Init.ReceiveFifoLocked = DISABLE;
  hcan2.Init.TransmitFifoPriority = ENABLE;
 80042e2:	2101      	movs	r1, #1
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80042e4:	4618      	mov	r0, r3
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80042e6:	619a      	str	r2, [r3, #24]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 80042e8:	e9c3 5404 	strd	r5, r4, [r3, #16]
  hcan2.Init.TransmitFifoPriority = ENABLE;
 80042ec:	7759      	strb	r1, [r3, #29]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80042ee:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80042f2:	771a      	strb	r2, [r3, #28]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80042f4:	f7fc fe9a 	bl	800102c <HAL_CAN_Init>
 80042f8:	b900      	cbnz	r0, 80042fc <MX_CAN2_Init+0x30>
  {
    Error_Handler();
  }

}
 80042fa:	bd38      	pop	{r3, r4, r5, pc}
 80042fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8004300:	f001 bf74 	b.w	80061ec <Error_Handler>
 8004304:	20000324 	.word	0x20000324
 8004308:	40006800 	.word	0x40006800

0800430c <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800430c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(canHandle->Instance==CAN1)
 800430e:	6802      	ldr	r2, [r0, #0]
 8004310:	4948      	ldr	r1, [pc, #288]	; (8004434 <HAL_CAN_MspInit+0x128>)
{
 8004312:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004314:	2300      	movs	r3, #0
  if(canHandle->Instance==CAN1)
 8004316:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004318:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800431c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004320:	9309      	str	r3, [sp, #36]	; 0x24
  if(canHandle->Instance==CAN1)
 8004322:	d040      	beq.n	80043a6 <HAL_CAN_MspInit+0x9a>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
  else if(canHandle->Instance==CAN2)
 8004324:	4944      	ldr	r1, [pc, #272]	; (8004438 <HAL_CAN_MspInit+0x12c>)
 8004326:	428a      	cmp	r2, r1
 8004328:	d001      	beq.n	800432e <HAL_CAN_MspInit+0x22>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800432a:	b00a      	add	sp, #40	; 0x28
 800432c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_CAN2_CLK_ENABLE();
 800432e:	4a43      	ldr	r2, [pc, #268]	; (800443c <HAL_CAN_MspInit+0x130>)
 8004330:	9302      	str	r3, [sp, #8]
 8004332:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004334:	4c42      	ldr	r4, [pc, #264]	; (8004440 <HAL_CAN_MspInit+0x134>)
    __HAL_RCC_CAN2_CLK_ENABLE();
 8004336:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 800433a:	6411      	str	r1, [r2, #64]	; 0x40
 800433c:	6c10      	ldr	r0, [r2, #64]	; 0x40
    HAL_RCC_CAN1_CLK_ENABLED++;
 800433e:	6821      	ldr	r1, [r4, #0]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8004340:	f000 6080 	and.w	r0, r0, #67108864	; 0x4000000
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004344:	3101      	adds	r1, #1
    __HAL_RCC_CAN2_CLK_ENABLE();
 8004346:	9002      	str	r0, [sp, #8]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004348:	2901      	cmp	r1, #1
    __HAL_RCC_CAN2_CLK_ENABLE();
 800434a:	9802      	ldr	r0, [sp, #8]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800434c:	6021      	str	r1, [r4, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800434e:	d065      	beq.n	800441c <HAL_CAN_MspInit+0x110>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004350:	2400      	movs	r4, #0
 8004352:	4b3a      	ldr	r3, [pc, #232]	; (800443c <HAL_CAN_MspInit+0x130>)
 8004354:	9404      	str	r4, [sp, #16]
 8004356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004358:	483a      	ldr	r0, [pc, #232]	; (8004444 <HAL_CAN_MspInit+0x138>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800435a:	f042 0202 	orr.w	r2, r2, #2
 800435e:	631a      	str	r2, [r3, #48]	; 0x30
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004368:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800436c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800436e:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004370:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004372:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8004374:	2309      	movs	r3, #9
 8004376:	e9cd 2308 	strd	r2, r3, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800437a:	9e04      	ldr	r6, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800437c:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800437e:	f7fd fa37 	bl	80017f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8004382:	4622      	mov	r2, r4
 8004384:	4621      	mov	r1, r4
 8004386:	2040      	movs	r0, #64	; 0x40
 8004388:	f7fd f9c2 	bl	8001710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800438c:	2040      	movs	r0, #64	; 0x40
 800438e:	f7fd f9f5 	bl	800177c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8004392:	4622      	mov	r2, r4
 8004394:	4621      	mov	r1, r4
 8004396:	2041      	movs	r0, #65	; 0x41
 8004398:	f7fd f9ba 	bl	8001710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800439c:	2041      	movs	r0, #65	; 0x41
 800439e:	f7fd f9ed 	bl	800177c <HAL_NVIC_EnableIRQ>
}
 80043a2:	b00a      	add	sp, #40	; 0x28
 80043a4:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_CAN1_CLK_ENABLED++;
 80043a6:	4926      	ldr	r1, [pc, #152]	; (8004440 <HAL_CAN_MspInit+0x134>)
 80043a8:	680a      	ldr	r2, [r1, #0]
 80043aa:	3201      	adds	r2, #1
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80043ac:	2a01      	cmp	r2, #1
    HAL_RCC_CAN1_CLK_ENABLED++;
 80043ae:	600a      	str	r2, [r1, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80043b0:	d028      	beq.n	8004404 <HAL_CAN_MspInit+0xf8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80043b2:	2400      	movs	r4, #0
 80043b4:	4b21      	ldr	r3, [pc, #132]	; (800443c <HAL_CAN_MspInit+0x130>)
 80043b6:	9401      	str	r4, [sp, #4]
 80043b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043ba:	4823      	ldr	r0, [pc, #140]	; (8004448 <HAL_CAN_MspInit+0x13c>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80043bc:	f042 0208 	orr.w	r2, r2, #8
 80043c0:	631a      	str	r2, [r3, #48]	; 0x30
 80043c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c4:	f003 0308 	and.w	r3, r3, #8
 80043c8:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043ca:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80043cc:	2303      	movs	r3, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80043ce:	2209      	movs	r2, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d0:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80043d2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043d4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80043d6:	9209      	str	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80043d8:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043da:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043dc:	f7fd fa08 	bl	80017f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80043e0:	4622      	mov	r2, r4
 80043e2:	4621      	mov	r1, r4
 80043e4:	2014      	movs	r0, #20
 80043e6:	f7fd f993 	bl	8001710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80043ea:	2014      	movs	r0, #20
 80043ec:	f7fd f9c6 	bl	800177c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80043f0:	4622      	mov	r2, r4
 80043f2:	4621      	mov	r1, r4
 80043f4:	2015      	movs	r0, #21
 80043f6:	f7fd f98b 	bl	8001710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80043fa:	2015      	movs	r0, #21
 80043fc:	f7fd f9be 	bl	800177c <HAL_NVIC_EnableIRQ>
}
 8004400:	b00a      	add	sp, #40	; 0x28
 8004402:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004404:	4a0d      	ldr	r2, [pc, #52]	; (800443c <HAL_CAN_MspInit+0x130>)
 8004406:	9300      	str	r3, [sp, #0]
 8004408:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800440a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800440e:	6413      	str	r3, [r2, #64]	; 0x40
 8004410:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	9b00      	ldr	r3, [sp, #0]
 800441a:	e7ca      	b.n	80043b2 <HAL_CAN_MspInit+0xa6>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800441c:	9303      	str	r3, [sp, #12]
 800441e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004420:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004424:	6413      	str	r3, [r2, #64]	; 0x40
 8004426:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442c:	9303      	str	r3, [sp, #12]
 800442e:	9b03      	ldr	r3, [sp, #12]
 8004430:	e78e      	b.n	8004350 <HAL_CAN_MspInit+0x44>
 8004432:	bf00      	nop
 8004434:	40006400 	.word	0x40006400
 8004438:	40006800 	.word	0x40006800
 800443c:	40023800 	.word	0x40023800
 8004440:	20000250 	.word	0x20000250
 8004444:	40020400 	.word	0x40020400
 8004448:	40020c00 	.word	0x40020c00

0800444c <initCanFilter>:
  /* USER CODE END CAN2_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void initCanFilter() {
 800444c:	b510      	push	{r4, lr}
 800444e:	b08a      	sub	sp, #40	; 0x28
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8004450:	2400      	movs	r4, #0
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8004452:	2301      	movs	r3, #1
	sFilterConfig.FilterMaskIdLow = 0x0000;
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
	sFilterConfig.FilterActivation = ENABLE;
	sFilterConfig.SlaveStartFilterBank = 0;

	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8004454:	4669      	mov	r1, sp
 8004456:	480a      	ldr	r0, [pc, #40]	; (8004480 <initCanFilter+0x34>)
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8004458:	9404      	str	r4, [sp, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800445a:	e9cd 3307 	strd	r3, r3, [sp, #28]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800445e:	e9cd 4405 	strd	r4, r4, [sp, #20]
	sFilterConfig.FilterIdLow = 0x0000;
 8004462:	e9cd 4400 	strd	r4, r4, [sp]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8004466:	e9cd 4402 	strd	r4, r4, [sp, #8]
	sFilterConfig.SlaveStartFilterBank = 0;
 800446a:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 800446c:	f7fc fe60 	bl	8001130 <HAL_CAN_ConfigFilter>

	sFilterConfig.SlaveStartFilterBank = 0;
	sFilterConfig.FilterBank = 0;

	HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig);
 8004470:	4669      	mov	r1, sp
 8004472:	4804      	ldr	r0, [pc, #16]	; (8004484 <initCanFilter+0x38>)
	sFilterConfig.SlaveStartFilterBank = 0;
 8004474:	9409      	str	r4, [sp, #36]	; 0x24
	sFilterConfig.FilterBank = 0;
 8004476:	9405      	str	r4, [sp, #20]
	HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig);
 8004478:	f7fc fe5a 	bl	8001130 <HAL_CAN_ConfigFilter>
}
 800447c:	b00a      	add	sp, #40	; 0x28
 800447e:	bd10      	pop	{r4, pc}
 8004480:	2000034c 	.word	0x2000034c
 8004484:	20000324 	.word	0x20000324

08004488 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800448c:	2400      	movs	r4, #0
{
 800448e:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004490:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8004494:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004498:	4b61      	ldr	r3, [pc, #388]	; (8004620 <MX_GPIO_Init+0x198>)
 800449a:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800449c:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800449e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 80044a0:	f8df b18c 	ldr.w	fp, [pc, #396]	; 8004630 <MX_GPIO_Init+0x1a8>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, POWER_OUT1_Pin|POWER_OUT2_Pin|POWER_OUT3_Pin|POWER_OUT4_Pin, GPIO_PIN_RESET);
 80044a4:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8004634 <MX_GPIO_Init+0x1ac>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5 
 80044a8:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8004638 <MX_GPIO_Init+0x1b0>
                          |GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI_MPU_CS_Pin|LED_G_Pin, GPIO_PIN_RESET);
 80044ac:	f8df 818c 	ldr.w	r8, [pc, #396]	; 800463c <MX_GPIO_Init+0x1b4>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80044b0:	4f5c      	ldr	r7, [pc, #368]	; (8004624 <MX_GPIO_Init+0x19c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 80044b2:	4e5d      	ldr	r6, [pc, #372]	; (8004628 <MX_GPIO_Init+0x1a0>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80044b4:	f042 0210 	orr.w	r2, r2, #16
 80044b8:	631a      	str	r2, [r3, #48]	; 0x30
 80044ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044bc:	f002 0210 	and.w	r2, r2, #16
 80044c0:	9201      	str	r2, [sp, #4]
 80044c2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80044c4:	9402      	str	r4, [sp, #8]
 80044c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044cc:	631a      	str	r2, [r3, #48]	; 0x30
 80044ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044d0:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80044d4:	9202      	str	r2, [sp, #8]
 80044d6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044d8:	9403      	str	r4, [sp, #12]
 80044da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044dc:	f042 0201 	orr.w	r2, r2, #1
 80044e0:	631a      	str	r2, [r3, #48]	; 0x30
 80044e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044e4:	f002 0201 	and.w	r2, r2, #1
 80044e8:	9203      	str	r2, [sp, #12]
 80044ea:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044ec:	9404      	str	r4, [sp, #16]
 80044ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044f0:	f042 0202 	orr.w	r2, r2, #2
 80044f4:	631a      	str	r2, [r3, #48]	; 0x30
 80044f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044f8:	f002 0202 	and.w	r2, r2, #2
 80044fc:	9204      	str	r2, [sp, #16]
 80044fe:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004500:	9405      	str	r4, [sp, #20]
 8004502:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004504:	f042 0208 	orr.w	r2, r2, #8
 8004508:	631a      	str	r2, [r3, #48]	; 0x30
 800450a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800450c:	f002 0208 	and.w	r2, r2, #8
 8004510:	9205      	str	r2, [sp, #20]
 8004512:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004514:	9406      	str	r4, [sp, #24]
 8004516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004518:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800451c:	631a      	str	r2, [r3, #48]	; 0x30
 800451e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004520:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8004524:	9206      	str	r2, [sp, #24]
 8004526:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004528:	9407      	str	r4, [sp, #28]
 800452a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800452c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004530:	631a      	str	r2, [r3, #48]	; 0x30
 8004532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004534:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004538:	9207      	str	r2, [sp, #28]
 800453a:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800453c:	9408      	str	r4, [sp, #32]
 800453e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004540:	f042 0220 	orr.w	r2, r2, #32
 8004544:	631a      	str	r2, [r3, #48]	; 0x30
 8004546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 800454e:	4622      	mov	r2, r4
 8004550:	4658      	mov	r0, fp
 8004552:	2101      	movs	r1, #1
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004554:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 8004556:	f7fd fa8f 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOH, POWER_OUT1_Pin|POWER_OUT2_Pin|POWER_OUT3_Pin|POWER_OUT4_Pin, GPIO_PIN_RESET);
 800455a:	4622      	mov	r2, r4
 800455c:	4650      	mov	r0, sl
 800455e:	213c      	movs	r1, #60	; 0x3c
 8004560:	f7fd fa8a 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5 
 8004564:	4622      	mov	r2, r4
 8004566:	4648      	mov	r0, r9
 8004568:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 800456c:	f7fd fa84 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, SPI_MPU_CS_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8004570:	4622      	mov	r2, r4
 8004572:	4640      	mov	r0, r8
 8004574:	f244 0140 	movw	r1, #16448	; 0x4040
 8004578:	f7fd fa7e 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800457c:	4622      	mov	r2, r4
 800457e:	4638      	mov	r0, r7
 8004580:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004584:	f7fd fa78 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8004588:	4622      	mov	r2, r4
 800458a:	4630      	mov	r0, r6
 800458c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004590:	f7fd fa72 	bl	8001a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004594:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004596:	4658      	mov	r0, fp
 8004598:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800459a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800459e:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80045a2:	f7fd f925 	bl	80017f0 <HAL_GPIO_Init>
  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = POWER_OUT1_Pin|POWER_OUT2_Pin|POWER_OUT3_Pin|POWER_OUT4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80045a6:	4650      	mov	r0, sl
 80045a8:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = POWER_OUT1_Pin|POWER_OUT2_Pin|POWER_OUT3_Pin|POWER_OUT4_Pin;
 80045aa:	233c      	movs	r3, #60	; 0x3c
 80045ac:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ae:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045b2:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80045b4:	f7fd f91c 	bl	80017f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5 
                          |GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80045b8:	4648      	mov	r0, r9
 80045ba:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5 
 80045bc:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 80045c0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c2:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045c6:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80045c8:	f7fd f912 	bl	80017f0 <HAL_GPIO_Init>
  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = SPI_MPU_CS_Pin|LED_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80045cc:	4640      	mov	r0, r8
 80045ce:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = SPI_MPU_CS_Pin|LED_G_Pin;
 80045d0:	f244 0340 	movw	r3, #16448	; 0x4040
 80045d4:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d6:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045da:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80045dc:	f7fd f908 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045e0:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80045e2:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045e4:	4811      	ldr	r0, [pc, #68]	; (800462c <MX_GPIO_Init+0x1a4>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80045e6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e8:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045ec:	f7fd f900 	bl	80017f0 <HAL_GPIO_Init>
  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045f0:	4638      	mov	r0, r7
 80045f2:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80045f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045f8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045fa:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045fe:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004600:	f7fd f8f6 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 8004604:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8004608:	a909      	add	r1, sp, #36	; 0x24
 800460a:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800460c:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004610:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = LED_R_Pin;
 8004612:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8004614:	f7fd f8ec 	bl	80017f0 <HAL_GPIO_Init>

}
 8004618:	b00f      	add	sp, #60	; 0x3c
 800461a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800461e:	bf00      	nop
 8004620:	40023800 	.word	0x40023800
 8004624:	40020c00 	.word	0x40020c00
 8004628:	40021000 	.word	0x40021000
 800462c:	40020400 	.word	0x40020400
 8004630:	40022000 	.word	0x40022000
 8004634:	40021c00 	.word	0x40021c00
 8004638:	40021800 	.word	0x40021800
 800463c:	40021400 	.word	0x40021400

08004640 <madgwick_ahrs_updateIMU>:
    atti->pitch = (asin(2.0 * (q0q2 - q1q3)))*(180.0/M_PI)*(-1.0);
    atti->yaw = (atan2(2.0 * (q1q2 + q0q3), q0q0 + q1q1 - q2q2 - q3q3))*(180.0/M_PI);
}

void madgwick_ahrs_updateIMU(struct ahrs_sensor *sensor, struct attitude *atti)
{
 8004640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  float recipNorm;
  float s0, s1, s2, s3;
  float qDot1, qDot2, qDot3, qDot4;
  float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2, _8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

  gx = sensor->wx;
 8004644:	f8df c404 	ldr.w	ip, [pc, #1028]	; 8004a4c <madgwick_ahrs_updateIMU+0x40c>
  gy = sensor->wy;
 8004648:	f8df e404 	ldr.w	lr, [pc, #1028]	; 8004a50 <madgwick_ahrs_updateIMU+0x410>
  gx = sensor->wx;
 800464c:	68c3      	ldr	r3, [r0, #12]
  gy = sensor->wy;
 800464e:	f8d0 9010 	ldr.w	r9, [r0, #16]
  gz = sensor->wz;
 8004652:	f8df 8400 	ldr.w	r8, [pc, #1024]	; 8004a54 <madgwick_ahrs_updateIMU+0x414>
  ax = sensor->ax;
 8004656:	4ef1      	ldr	r6, [pc, #964]	; (8004a1c <madgwick_ahrs_updateIMU+0x3dc>)
  ay = sensor->ay;
 8004658:	4ff1      	ldr	r7, [pc, #964]	; (8004a20 <madgwick_ahrs_updateIMU+0x3e0>)
  ax = sensor->ax;
 800465a:	6802      	ldr	r2, [r0, #0]
  gz = sensor->wz;
 800465c:	6945      	ldr	r5, [r0, #20]
  ay = sensor->ay;
 800465e:	6844      	ldr	r4, [r0, #4]
  az = sensor->az;
  mx = sensor->mx;
 8004660:	f8d0 a018 	ldr.w	sl, [r0, #24]
{
 8004664:	ed2d 8b10 	vpush	{d8-d15}
  gx = sensor->wx;
 8004668:	f8cc 3000 	str.w	r3, [ip]
  gy = sensor->wy;
 800466c:	f8ce 9000 	str.w	r9, [lr]
  az = sensor->az;
 8004670:	f8df 93e4 	ldr.w	r9, [pc, #996]	; 8004a58 <madgwick_ahrs_updateIMU+0x418>
 8004674:	6883      	ldr	r3, [r0, #8]
  gz = sensor->wz;
 8004676:	f8c8 5000 	str.w	r5, [r8]
  ax = sensor->ax;
 800467a:	6032      	str	r2, [r6, #0]
  my = sensor->my;
  mz = sensor->mz;
 800467c:	6a05      	ldr	r5, [r0, #32]
  ay = sensor->ay;
 800467e:	603c      	str	r4, [r7, #0]
  mx = sensor->mx;
 8004680:	4ae8      	ldr	r2, [pc, #928]	; (8004a24 <madgwick_ahrs_updateIMU+0x3e4>)
  az = sensor->az;
 8004682:	f8c9 3000 	str.w	r3, [r9]
  my = sensor->my;
 8004686:	69c4      	ldr	r4, [r0, #28]
 8004688:	4be7      	ldr	r3, [pc, #924]	; (8004a28 <madgwick_ahrs_updateIMU+0x3e8>)
  mz = sensor->mz;
 800468a:	48e8      	ldr	r0, [pc, #928]	; (8004a2c <madgwick_ahrs_updateIMU+0x3ec>)
  mx = sensor->mx;
 800468c:	f8c2 a000 	str.w	sl, [r2]
  my = sensor->my;
 8004690:	601c      	str	r4, [r3, #0]

  // Rate of change of quaternion from gyroscope
  qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8004692:	4ae7      	ldr	r2, [pc, #924]	; (8004a30 <madgwick_ahrs_updateIMU+0x3f0>)
  mz = sensor->mz;
 8004694:	6005      	str	r5, [r0, #0]
  qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8004696:	4be7      	ldr	r3, [pc, #924]	; (8004a34 <madgwick_ahrs_updateIMU+0x3f4>)
 8004698:	4ce7      	ldr	r4, [pc, #924]	; (8004a38 <madgwick_ahrs_updateIMU+0x3f8>)
  qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800469a:	4de8      	ldr	r5, [pc, #928]	; (8004a3c <madgwick_ahrs_updateIMU+0x3fc>)
  qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800469c:	ed92 aa00 	vldr	s20, [r2]
 80046a0:	eddc 9a00 	vldr	s19, [ip]
 80046a4:	ed93 5a00 	vldr	s10, [r3]
 80046a8:	edde aa00 	vldr	s21, [lr]
 80046ac:	edd4 1a00 	vldr	s3, [r4]
 80046b0:	ed98 2a00 	vldr	s4, [r8]
  qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80046b4:	ed95 0a00 	vldr	s0, [r5]
 80046b8:	eddc 0a00 	vldr	s1, [ip]
 80046bc:	edd3 5a00 	vldr	s11, [r3]
 80046c0:	edd8 6a00 	vldr	s13, [r8]
 80046c4:	edd4 2a00 	vldr	s5, [r4]
 80046c8:	ed9e 3a00 	vldr	s6, [lr]
  qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80046cc:	ed95 1a00 	vldr	s2, [r5]
 80046d0:	edde 4a00 	vldr	s9, [lr]
 80046d4:	edd2 3a00 	vldr	s7, [r2]
 80046d8:	ed98 4a00 	vldr	s8, [r8]
 80046dc:	ed94 6a00 	vldr	s12, [r4]
 80046e0:	eddc 7a00 	vldr	s15, [ip]
  qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80046e4:	ed95 7a00 	vldr	s14, [r5]
  qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80046e8:	ee25 5a2a 	vmul.f32	s10, s10, s21
  qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80046ec:	ee65 5aa6 	vmul.f32	s11, s11, s13
  qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80046f0:	ee26 6a27 	vmul.f32	s12, s12, s15
  qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80046f4:	edd8 7a00 	vldr	s15, [r8]
 80046f8:	edd2 6a00 	vldr	s13, [r2]
 80046fc:	edde aa00 	vldr	s21, [lr]
 8004700:	ee66 6aaa 	vmul.f32	s13, s13, s21
  qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8004704:	eea1 6a24 	vfma.f32	s12, s2, s9
{
 8004708:	b084      	sub	sp, #16
 800470a:	4688      	mov	r8, r1
  qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800470c:	eee7 6a27 	vfma.f32	s13, s14, s15
  qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8004710:	eeaa 5a29 	vfma.f32	s10, s20, s19
  qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8004714:	eee0 5a20 	vfma.f32	s11, s0, s1
  qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8004718:	edd3 4a00 	vldr	s9, [r3]
 800471c:	eddc 7a00 	vldr	s15, [ip]

  // Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
  if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f)))
 8004720:	ed96 7a00 	vldr	s14, [r6]
  qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8004724:	eee4 6ae7 	vfms.f32	s13, s9, s15
  qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8004728:	eea1 5a82 	vfma.f32	s10, s3, s4
  qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800472c:	eee2 5ac3 	vfms.f32	s11, s5, s6
  qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8004730:	eea3 6ac4 	vfms.f32	s12, s7, s8
  if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f)))
 8004734:	eeb5 7a40 	vcmp.f32	s14, #0.0
  qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8004738:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
  if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f)))
 800473c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8004740:	ee25 5a67 	vnmul.f32	s10, s10, s15
  qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8004744:	ee65 5aa7 	vmul.f32	s11, s11, s15
  qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8004748:	ee26 6a27 	vmul.f32	s12, s12, s15
  qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800474c:	ee66 6aa7 	vmul.f32	s13, s13, s15
  if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f)))
 8004750:	d107      	bne.n	8004762 <madgwick_ahrs_updateIMU+0x122>
 8004752:	edd7 7a00 	vldr	s15, [r7]
 8004756:	eef5 7a40 	vcmp.f32	s15, #0.0
 800475a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800475e:	f000 8213 	beq.w	8004b88 <madgwick_ahrs_updateIMU+0x548>
  {

    // Normalise accelerometer measurement
    recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8004762:	ed96 3a00 	vldr	s6, [r6]
 8004766:	edd6 3a00 	vldr	s7, [r6]
 800476a:	edd7 7a00 	vldr	s15, [r7]
 800476e:	edd7 2a00 	vldr	s5, [r7]
 8004772:	ed99 4a00 	vldr	s8, [r9]
 8004776:	ed99 7a00 	vldr	s14, [r9]
float invSqrt(float x)
{
  float halfx = 0.5f * x;
  float y = x;
  long i = *(long *)&y;
  i = 0x5f3759df - (i >> 1);
 800477a:	49b1      	ldr	r1, [pc, #708]	; (8004a40 <madgwick_ahrs_updateIMU+0x400>)
    ax *= recipNorm;
 800477c:	edd6 4a00 	vldr	s9, [r6]
    qDot1 -= beta * s0;
 8004780:	48b0      	ldr	r0, [pc, #704]	; (8004a44 <madgwick_ahrs_updateIMU+0x404>)
    recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8004782:	ee67 7aa2 	vmul.f32	s15, s15, s5
  y = *(float *)&i;
  y = y * (1.5f - (halfx * y * y));
 8004786:	eef6 2a00 	vmov.f32	s5, #96	; 0x3f000000  0.5
    recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800478a:	eee3 7a23 	vfma.f32	s15, s6, s7
  y = y * (1.5f - (halfx * y * y));
 800478e:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
    recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8004792:	eee4 7a07 	vfma.f32	s15, s8, s14
  y = y * (1.5f - (halfx * y * y));
 8004796:	eeb0 4a60 	vmov.f32	s8, s1
  y = *(float *)&i;
 800479a:	ee17 ca90 	vmov	ip, s15
 800479e:	eba1 0c6c 	sub.w	ip, r1, ip, asr #1
  y = y * (1.5f - (halfx * y * y));
 80047a2:	ee27 7aa2 	vmul.f32	s14, s15, s5
  y = *(float *)&i;
 80047a6:	ee07 ca90 	vmov	s15, ip
  y = y * (1.5f - (halfx * y * y));
 80047aa:	ee27 7ac7 	vnmul.f32	s14, s15, s14
    _4q1 = 4.0f * q1;
 80047ae:	eef1 3a00 	vmov.f32	s7, #16	; 0x40800000  4.0
  y = y * (1.5f - (halfx * y * y));
 80047b2:	eea7 4a27 	vfma.f32	s8, s14, s15
    _8q1 = 8.0f * q1;
 80047b6:	eef2 ca00 	vmov.f32	s25, #32	; 0x41000000  8.0
  y = y * (1.5f - (halfx * y * y));
 80047ba:	ee64 7a27 	vmul.f32	s15, s8, s15
    ax *= recipNorm;
 80047be:	ee24 7aa7 	vmul.f32	s14, s9, s15
 80047c2:	ed86 7a00 	vstr	s14, [r6]
    ay *= recipNorm;
 80047c6:	ed97 7a00 	vldr	s14, [r7]
 80047ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80047ce:	ed87 7a00 	vstr	s14, [r7]
    az *= recipNorm;
 80047d2:	ed99 7a00 	vldr	s14, [r9]
 80047d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047da:	edc9 7a00 	vstr	s15, [r9]
    _2q0 = 2.0f * q0;
 80047de:	edd5 1a00 	vldr	s3, [r5]
    _2q1 = 2.0f * q1;
 80047e2:	ed92 1a00 	vldr	s2, [r2]
    _2q2 = 2.0f * q2;
 80047e6:	ed93 2a00 	vldr	s4, [r3]
    _2q3 = 2.0f * q3;
 80047ea:	ed94 4a00 	vldr	s8, [r4]
    _4q0 = 4.0f * q0;
 80047ee:	ed95 ba00 	vldr	s22, [r5]
    _4q1 = 4.0f * q1;
 80047f2:	ed92 0a00 	vldr	s0, [r2]
    _4q2 = 4.0f * q2;
 80047f6:	edd3 9a00 	vldr	s19, [r3]
    _8q1 = 8.0f * q1;
 80047fa:	edd2 7a00 	vldr	s15, [r2]
    _8q2 = 8.0f * q2;
 80047fe:	edd3 aa00 	vldr	s21, [r3]
    _8q1 = 8.0f * q1;
 8004802:	edcd 7a00 	vstr	s15, [sp]
    q0q0 = q0 * q0;
 8004806:	ed95 8a00 	vldr	s16, [r5]
 800480a:	ed95 7a00 	vldr	s14, [r5]
    q1q1 = q1 * q1;
 800480e:	ed92 9a00 	vldr	s18, [r2]
 8004812:	edd2 7a00 	vldr	s15, [r2]
    q2q2 = q2 * q2;
 8004816:	ed93 aa00 	vldr	s20, [r3]
 800481a:	edd3 8a00 	vldr	s17, [r3]
    q3q3 = q3 * q3;
 800481e:	ed94 fa00 	vldr	s30, [r4]
 8004822:	ed94 3a00 	vldr	s6, [r4]
    s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8004826:	ed96 ea00 	vldr	s28, [r6]
 800482a:	edd7 4a00 	vldr	s9, [r7]
    s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 800482e:	ed96 da00 	vldr	s26, [r6]
 8004832:	edd2 ba00 	vldr	s23, [r2]
 8004836:	edd7 ea00 	vldr	s29, [r7]
    _2q0 = 2.0f * q0;
 800483a:	ee71 1aa1 	vadd.f32	s3, s3, s3
    q2q2 = q2 * q2;
 800483e:	ee6a 8a28 	vmul.f32	s17, s20, s17
    q0q0 = q0 * q0;
 8004842:	ee28 8a07 	vmul.f32	s16, s16, s14
    s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8004846:	ed99 aa00 	vldr	s20, [r9]
    s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800484a:	ed93 7a00 	vldr	s14, [r3]
    s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 800484e:	ed8d aa03 	vstr	s20, [sp, #12]
    q1q1 = q1 * q1;
 8004852:	ee29 9a27 	vmul.f32	s18, s18, s15
    s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8004856:	edd6 7a00 	vldr	s15, [r6]
 800485a:	edd7 da00 	vldr	s27, [r7]
 800485e:	ed99 aa00 	vldr	s20, [r9]
    s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8004862:	ed94 ca00 	vldr	s24, [r4]
 8004866:	edd6 fa00 	vldr	s31, [r6]
    s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800486a:	ee27 7a23 	vmul.f32	s14, s14, s7
 800486e:	ee67 7aa1 	vmul.f32	s15, s15, s3
    s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8004872:	ee2c ca23 	vmul.f32	s24, s24, s7
    s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8004876:	eee8 7a07 	vfma.f32	s15, s16, s14
    s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 800487a:	ed94 7a00 	vldr	s14, [r4]
 800487e:	ee27 7a23 	vmul.f32	s14, s14, s7
    _2q1 = 2.0f * q1;
 8004882:	ee31 1a01 	vadd.f32	s2, s2, s2
    s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8004886:	ee27 7a28 	vmul.f32	s14, s14, s17
    _4q1 = 4.0f * q1;
 800488a:	ee20 0a23 	vmul.f32	s0, s0, s7
    s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 800488e:	eea9 7a0c 	vfma.f32	s14, s18, s24
    _4q2 = 4.0f * q2;
 8004892:	ee69 9aa3 	vmul.f32	s19, s19, s7
    _4q0 = 4.0f * q0;
 8004896:	ee2b ba23 	vmul.f32	s22, s22, s7
    s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 800489a:	ee6b 3aa3 	vmul.f32	s7, s23, s7
    s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 800489e:	ee61 4a64 	vnmul.f32	s9, s2, s9
    s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 80048a2:	eeaf 7ac1 	vfms.f32	s14, s31, s2
    s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80048a6:	eeb0 1a40 	vmov.f32	s2, s0
 80048aa:	ee98 1a23 	vfnms.f32	s2, s16, s7
    _8q2 = 8.0f * q2;
 80048ae:	ee6a aaac 	vmul.f32	s21, s21, s25
    s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80048b2:	eef0 3a41 	vmov.f32	s7, s2
 80048b6:	eeee 3ae1 	vfms.f32	s7, s29, s3
 80048ba:	ee39 1a28 	vadd.f32	s2, s18, s17
    s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80048be:	ee77 7ae9 	vsub.f32	s15, s15, s19
    _2q2 = 2.0f * q2;
 80048c2:	ee32 2a02 	vadd.f32	s4, s4, s4
    q3q3 = q3 * q3;
 80048c6:	ee2f fa03 	vmul.f32	s30, s30, s6
    s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 80048ca:	eeeb 4a01 	vfma.f32	s9, s22, s2
    s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80048ce:	eeb0 3a63 	vmov.f32	s6, s7
    s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80048d2:	eeea 7a81 	vfma.f32	s15, s21, s2
    s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 80048d6:	edd7 3a00 	vldr	s7, [r7]
    qDot1 -= beta * s0;
 80048da:	edd0 1a00 	vldr	s3, [r0]
    _2q3 = 2.0f * q3;
 80048de:	ee34 4a04 	vadd.f32	s8, s8, s8
    s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 80048e2:	eea3 7ac2 	vfms.f32	s14, s7, s4
    s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 80048e6:	eeee 4a02 	vfma.f32	s9, s28, s4
    s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80048ea:	eeed 7ac4 	vfms.f32	s15, s27, s8
    recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80048ee:	ee67 3a07 	vmul.f32	s7, s14, s14
    s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80048f2:	ee24 da4d 	vnmul.f32	s26, s8, s26
    _8q1 = 8.0f * q1;
 80048f6:	ed9d 2a00 	vldr	s4, [sp]
    s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80048fa:	ed9d 4a03 	vldr	s8, [sp, #12]
    s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80048fe:	ee3a aa0f 	vadd.f32	s20, s20, s30
    s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8004902:	ee34 4a0f 	vadd.f32	s8, s8, s30
    _8q1 = 8.0f * q1;
 8004906:	ee62 ca2c 	vmul.f32	s25, s4, s25
    s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800490a:	eee9 7a8a 	vfma.f32	s15, s19, s20
    recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800490e:	eee4 3aa4 	vfma.f32	s7, s9, s9
    s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8004912:	eea0 3a04 	vfma.f32	s6, s0, s8
 8004916:	eeac da81 	vfma.f32	s26, s25, s2
    recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800491a:	eee7 3aa7 	vfma.f32	s7, s15, s15
    s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 800491e:	ee33 da0d 	vadd.f32	s26, s6, s26
    qDot2 -= beta * s1;
 8004922:	ed90 2a00 	vldr	s4, [r0]
    qDot3 -= beta * s2;
 8004926:	ed90 3a00 	vldr	s6, [r0]
    qDot4 -= beta * s3;
 800492a:	ed90 4a00 	vldr	s8, [r0]
    recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800492e:	eeed 3a0d 	vfma.f32	s7, s26, s26
    qDot1 -= beta * s0;
 8004932:	ee61 4aa4 	vmul.f32	s9, s3, s9
  y = *(float *)&i;
 8004936:	ee13 0a90 	vmov	r0, s7
 800493a:	eba1 0160 	sub.w	r1, r1, r0, asr #1
  y = y * (1.5f - (halfx * y * y));
 800493e:	ee63 2aa2 	vmul.f32	s5, s7, s5
  y = *(float *)&i;
 8004942:	ee03 1a90 	vmov	s7, r1
  y = y * (1.5f - (halfx * y * y));
 8004946:	ee62 2aa3 	vmul.f32	s5, s5, s7
    qDot2 -= beta * s1;
 800494a:	ee22 da0d 	vmul.f32	s26, s4, s26
  y = y * (1.5f - (halfx * y * y));
 800494e:	eee3 0ae2 	vfms.f32	s1, s7, s5
    qDot3 -= beta * s2;
 8004952:	ee63 7a27 	vmul.f32	s15, s6, s15
    qDot1 -= beta * s0;
 8004956:	ee63 0ae0 	vnmul.f32	s1, s7, s1
    qDot4 -= beta * s3;
 800495a:	ee24 7a07 	vmul.f32	s14, s8, s14
    qDot1 -= beta * s0;
 800495e:	eea0 5aa4 	vfma.f32	s10, s1, s9
    qDot2 -= beta * s1;
 8004962:	eee0 5a8d 	vfma.f32	s11, s1, s26
    qDot3 -= beta * s2;
 8004966:	eea0 6aa7 	vfma.f32	s12, s1, s15
    qDot4 -= beta * s3;
 800496a:	eee0 6a87 	vfma.f32	s13, s1, s14
  i = 0x5f3759df - (i >> 1);
 800496e:	4934      	ldr	r1, [pc, #208]	; (8004a40 <madgwick_ahrs_updateIMU+0x400>)
  q0 += qDot1 * (1.0f / sampleFreq);
 8004970:	ed95 7a00 	vldr	s14, [r5]
 8004974:	eddf 7a34 	vldr	s15, [pc, #208]	; 8004a48 <madgwick_ahrs_updateIMU+0x408>
 8004978:	eea5 7a27 	vfma.f32	s14, s10, s15
  y = y * (1.5f - (halfx * y * y));
 800497c:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
  q0 += qDot1 * (1.0f / sampleFreq);
 8004980:	ed85 7a00 	vstr	s14, [r5]
  q1 += qDot2 * (1.0f / sampleFreq);
 8004984:	ed92 7a00 	vldr	s14, [r2]
 8004988:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800498c:	eef0 5a47 	vmov.f32	s11, s14
 8004990:	edc2 5a00 	vstr	s11, [r2]
  q2 += qDot3 * (1.0f / sampleFreq);
 8004994:	edd3 5a00 	vldr	s11, [r3]
 8004998:	eee6 5a27 	vfma.f32	s11, s12, s15
  atti->roll = (atan2(2.0 * (q2q3 + q0q1), q0q0 - q1q1 - q2q2 + q3q3)*(180.0/M_PI))*(-1.0);
 800499c:	ee38 6a49 	vsub.f32	s12, s16, s18
  q2 += qDot3 * (1.0f / sampleFreq);
 80049a0:	edc3 5a00 	vstr	s11, [r3]
  q3 += qDot4 * (1.0f / sampleFreq);
 80049a4:	edd4 5a00 	vldr	s11, [r4]
 80049a8:	eee6 5aa7 	vfma.f32	s11, s13, s15
  atti->roll = (atan2(2.0 * (q2q3 + q0q1), q0q0 - q1q1 - q2q2 + q3q3)*(180.0/M_PI))*(-1.0);
 80049ac:	ee76 6a68 	vsub.f32	s13, s12, s17
  q3 += qDot4 * (1.0f / sampleFreq);
 80049b0:	edc4 5a00 	vstr	s11, [r4]
  recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80049b4:	edd5 2a00 	vldr	s5, [r5]
 80049b8:	ed95 3a00 	vldr	s6, [r5]
 80049bc:	edd2 7a00 	vldr	s15, [r2]
 80049c0:	ed92 2a00 	vldr	s4, [r2]
 80049c4:	edd3 3a00 	vldr	s7, [r3]
 80049c8:	ed93 4a00 	vldr	s8, [r3]
 80049cc:	edd4 4a00 	vldr	s9, [r4]
 80049d0:	ed94 6a00 	vldr	s12, [r4]
  q0 *= recipNorm;
 80049d4:	edd5 5a00 	vldr	s11, [r5]
  recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80049d8:	ee67 7a82 	vmul.f32	s15, s15, s4
  atti->roll = (atan2(2.0 * (q2q3 + q0q1), q0q0 - q1q1 - q2q2 + q3q3)*(180.0/M_PI))*(-1.0);
 80049dc:	ee76 6a8f 	vadd.f32	s13, s13, s30
  recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80049e0:	eee2 7a83 	vfma.f32	s15, s5, s6
  atti->roll = (atan2(2.0 * (q2q3 + q0q1), q0q0 - q1q1 - q2q2 + q3q3)*(180.0/M_PI))*(-1.0);
 80049e4:	ee16 0a90 	vmov	r0, s13
  recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80049e8:	eee3 7a84 	vfma.f32	s15, s7, s8
  y = y * (1.5f - (halfx * y * y));
 80049ec:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
  recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80049f0:	eee4 7a86 	vfma.f32	s15, s9, s12
  atti->yaw = (atan2(2.0 * (q1q2 + q0q3), q0q0 + q1q1 - q2q2 - q3q3))*(180.0/M_PI);
 80049f4:	ee38 8a09 	vadd.f32	s16, s16, s18
  y = *(float *)&i;
 80049f8:	ee17 6a90 	vmov	r6, s15
 80049fc:	eba1 0166 	sub.w	r1, r1, r6, asr #1
 8004a00:	ee06 1a90 	vmov	s13, r1
  y = y * (1.5f - (halfx * y * y));
 8004a04:	ee27 6a85 	vmul.f32	s12, s15, s10
  atti->yaw = (atan2(2.0 * (q1q2 + q0q3), q0q0 + q1q1 - q2q2 - q3q3))*(180.0/M_PI);
 8004a08:	ee78 8a68 	vsub.f32	s17, s16, s17
  y = y * (1.5f - (halfx * y * y));
 8004a0c:	ee66 7ac6 	vnmul.f32	s15, s13, s12
 8004a10:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8004a14:	ee67 7a26 	vmul.f32	s15, s14, s13
 8004a18:	e020      	b.n	8004a5c <madgwick_ahrs_updateIMU+0x41c>
 8004a1a:	bf00      	nop
 8004a1c:	20000254 	.word	0x20000254
 8004a20:	20000258 	.word	0x20000258
 8004a24:	2000026c 	.word	0x2000026c
 8004a28:	20000270 	.word	0x20000270
 8004a2c:	20000274 	.word	0x20000274
 8004a30:	20000278 	.word	0x20000278
 8004a34:	2000027c 	.word	0x2000027c
 8004a38:	20000280 	.word	0x20000280
 8004a3c:	2000001c 	.word	0x2000001c
 8004a40:	5f3759df 	.word	0x5f3759df
 8004a44:	20000018 	.word	0x20000018
 8004a48:	3a83126f 	.word	0x3a83126f
 8004a4c:	20000260 	.word	0x20000260
 8004a50:	20000264 	.word	0x20000264
 8004a54:	20000268 	.word	0x20000268
 8004a58:	2000025c 	.word	0x2000025c
  q0 *= recipNorm;
 8004a5c:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8004a60:	ed85 7a00 	vstr	s14, [r5]
  q1 *= recipNorm;
 8004a64:	ed92 7a00 	vldr	s14, [r2]
 8004a68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a6c:	ed82 7a00 	vstr	s14, [r2]
  q2 *= recipNorm;
 8004a70:	ed93 7a00 	vldr	s14, [r3]
 8004a74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a78:	ed83 7a00 	vstr	s14, [r3]
  q3 *= recipNorm;
 8004a7c:	ed94 7a00 	vldr	s14, [r4]
 8004a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a84:	edc4 7a00 	vstr	s15, [r4]
  float q0q1 = q0 * q1;
 8004a88:	edd5 ea00 	vldr	s29, [r5]
 8004a8c:	ed92 ea00 	vldr	s28, [r2]
  float q0q2 = q0 * q2;
 8004a90:	ed95 da00 	vldr	s26, [r5]
 8004a94:	edd3 ca00 	vldr	s25, [r3]
  float q0q3 = q0 * q3;
 8004a98:	edd5 ba00 	vldr	s23, [r5]
 8004a9c:	ed94 ba00 	vldr	s22, [r4]
  float q1q2 = q1 * q2;
 8004aa0:	edd2 9a00 	vldr	s19, [r2]
 8004aa4:	ed93 ca00 	vldr	s24, [r3]
  float q1q3 = q1 * q3;
 8004aa8:	ed92 aa00 	vldr	s20, [r2]
 8004aac:	edd4 da00 	vldr	s27, [r4]
  float q2q3 = q2 * q3;
 8004ab0:	edd3 aa00 	vldr	s21, [r3]
 8004ab4:	edd4 fa00 	vldr	s31, [r4]
  atti->roll = (atan2(2.0 * (q2q3 + q0q1), q0q0 - q1q1 - q2q2 + q3q3)*(180.0/M_PI))*(-1.0);
 8004ab8:	f7fb fd56 	bl	8000568 <__aeabi_f2d>
  float q2q3 = q2 * q3;
 8004abc:	ee6a 7aaf 	vmul.f32	s15, s21, s31
  atti->roll = (atan2(2.0 * (q2q3 + q0q1), q0q0 - q1q1 - q2q2 + q3q3)*(180.0/M_PI))*(-1.0);
 8004ac0:	e9cd 0100 	strd	r0, r1, [sp]
 8004ac4:	eeee 7a8e 	vfma.f32	s15, s29, s28
  float q1q3 = q1 * q3;
 8004ac8:	ee2a aa2d 	vmul.f32	s20, s20, s27
  atti->roll = (atan2(2.0 * (q2q3 + q0q1), q0q0 - q1q1 - q2q2 + q3q3)*(180.0/M_PI))*(-1.0);
 8004acc:	ee17 0a90 	vmov	r0, s15
 8004ad0:	f7fb fd4a 	bl	8000568 <__aeabi_f2d>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	f7fb fbe8 	bl	80002ac <__adddf3>
 8004adc:	ed9d 1b00 	vldr	d1, [sp]
 8004ae0:	ec41 0b10 	vmov	d0, r0, r1
 8004ae4:	f005 fa20 	bl	8009f28 <atan2>
 8004ae8:	a32d      	add	r3, pc, #180	; (adr r3, 8004ba0 <madgwick_ahrs_updateIMU+0x560>)
 8004aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aee:	ec51 0b10 	vmov	r0, r1, d0
 8004af2:	f7fb fd91 	bl	8000618 <__aeabi_dmul>
 8004af6:	f7fc f867 	bl	8000bc8 <__aeabi_d2f>
  atti->pitch =(asin(2.0 * (q0q2 - q1q3)))*(180.0/M_PI)*(-1.0);
 8004afa:	eead aa6c 	vfms.f32	s20, s26, s25
  atti->roll = (atan2(2.0 * (q2q3 + q0q1), q0q0 - q1q1 - q2q2 + q3q3)*(180.0/M_PI))*(-1.0);
 8004afe:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8004b02:	f8c8 0000 	str.w	r0, [r8]
  atti->pitch =(asin(2.0 * (q0q2 - q1q3)))*(180.0/M_PI)*(-1.0);
 8004b06:	ee1a 0a10 	vmov	r0, s20
 8004b0a:	f7fb fd2d 	bl	8000568 <__aeabi_f2d>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	f7fb fbcb 	bl	80002ac <__adddf3>
 8004b16:	ec41 0b10 	vmov	d0, r0, r1
 8004b1a:	f005 f9ad 	bl	8009e78 <asin>
 8004b1e:	a320      	add	r3, pc, #128	; (adr r3, 8004ba0 <madgwick_ahrs_updateIMU+0x560>)
 8004b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b24:	ec51 0b10 	vmov	r0, r1, d0
 8004b28:	f7fb fd76 	bl	8000618 <__aeabi_dmul>
 8004b2c:	f7fc f84c 	bl	8000bc8 <__aeabi_d2f>
  float q1q2 = q1 * q2;
 8004b30:	ee69 9a8c 	vmul.f32	s19, s19, s24
  atti->yaw = (atan2(2.0 * (q1q2 + q0q3), q0q0 + q1q1 - q2q2 - q3q3))*(180.0/M_PI);
 8004b34:	ee78 7acf 	vsub.f32	s15, s17, s30
  atti->pitch =(asin(2.0 * (q0q2 - q1q3)))*(180.0/M_PI)*(-1.0);
 8004b38:	f8c8 0004 	str.w	r0, [r8, #4]
  atti->yaw = (atan2(2.0 * (q1q2 + q0q3), q0q0 + q1q1 - q2q2 - q3q3))*(180.0/M_PI);
 8004b3c:	eeeb 9a8b 	vfma.f32	s19, s23, s22
 8004b40:	ee17 0a90 	vmov	r0, s15
 8004b44:	f7fb fd10 	bl	8000568 <__aeabi_f2d>
 8004b48:	e9cd 0100 	strd	r0, r1, [sp]
 8004b4c:	ee19 0a90 	vmov	r0, s19
 8004b50:	f7fb fd0a 	bl	8000568 <__aeabi_f2d>
 8004b54:	4602      	mov	r2, r0
 8004b56:	460b      	mov	r3, r1
 8004b58:	f7fb fba8 	bl	80002ac <__adddf3>
 8004b5c:	ed9d 1b00 	vldr	d1, [sp]
 8004b60:	ec41 0b10 	vmov	d0, r0, r1
 8004b64:	f005 f9e0 	bl	8009f28 <atan2>
 8004b68:	a30d      	add	r3, pc, #52	; (adr r3, 8004ba0 <madgwick_ahrs_updateIMU+0x560>)
 8004b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6e:	ec51 0b10 	vmov	r0, r1, d0
 8004b72:	f7fb fd51 	bl	8000618 <__aeabi_dmul>
 8004b76:	f7fc f827 	bl	8000bc8 <__aeabi_d2f>
 8004b7a:	f8c8 0008 	str.w	r0, [r8, #8]
}
 8004b7e:	b004      	add	sp, #16
 8004b80:	ecbd 8b10 	vpop	{d8-d15}
 8004b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f)))
 8004b88:	edd9 7a00 	vldr	s15, [r9]
 8004b8c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b94:	f47f ade5 	bne.w	8004762 <madgwick_ahrs_updateIMU+0x122>
 8004b98:	e6e9      	b.n	800496e <madgwick_ahrs_updateIMU+0x32e>
 8004b9a:	bf00      	nop
 8004b9c:	f3af 8000 	nop.w
 8004ba0:	1a63c1f8 	.word	0x1a63c1f8
 8004ba4:	404ca5dc 	.word	0x404ca5dc

08004ba8 <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004ba8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004bac:	4905      	ldr	r1, [pc, #20]	; (8004bc4 <__NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004bae:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004bb0:	68ca      	ldr	r2, [r1, #12]
 8004bb2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60cb      	str	r3, [r1, #12]
 8004bba:	f3bf 8f4f 	dsb	sy
    __NOP();
 8004bbe:	bf00      	nop
 8004bc0:	e7fd      	b.n	8004bbe <__NVIC_SystemReset+0x16>
 8004bc2:	bf00      	nop
 8004bc4:	e000ed00 	.word	0xe000ed00
 8004bc8:	05fa0004 	.word	0x05fa0004

08004bcc <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch) {
 8004bcc:	b500      	push	{lr}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	a902      	add	r1, sp, #8
HAL_UART_Transmit(&huart7, &ch, 1, 1);
 8004bd2:	2301      	movs	r3, #1
void __io_putchar(uint8_t ch) {
 8004bd4:	f801 0d01 	strb.w	r0, [r1, #-1]!
HAL_UART_Transmit(&huart7, &ch, 1, 1);
 8004bd8:	461a      	mov	r2, r3
 8004bda:	4803      	ldr	r0, [pc, #12]	; (8004be8 <__io_putchar+0x1c>)
 8004bdc:	f7fe f8d8 	bl	8002d90 <HAL_UART_Transmit>
}
 8004be0:	b003      	add	sp, #12
 8004be2:	f85d fb04 	ldr.w	pc, [sp], #4
 8004be6:	bf00      	nop
 8004be8:	20000828 	.word	0x20000828

08004bec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004bec:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004bee:	2300      	movs	r3, #0
{
 8004bf0:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004bf2:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8004bf6:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004bfa:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004bfe:	e9cd 3306 	strd	r3, r3, [sp, #24]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c02:	4920      	ldr	r1, [pc, #128]	; (8004c84 <SystemClock_Config+0x98>)
 8004c04:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004c06:	9303      	str	r3, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c08:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c0a:	4a1f      	ldr	r2, [pc, #124]	; (8004c88 <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c0c:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8004c10:	6408      	str	r0, [r1, #64]	; 0x40
 8004c12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c14:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8004c18:	9101      	str	r1, [sp, #4]
 8004c1a:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c1c:	9302      	str	r3, [sp, #8]
 8004c1e:	6813      	ldr	r3, [r2, #0]
 8004c20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c24:	6013      	str	r3, [r2, #0]
 8004c26:	6813      	ldr	r3, [r2, #0]
 8004c28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c2c:	9302      	str	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004c2e:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004c30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004c34:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c38:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 6;
 8004c3a:	2106      	movs	r1, #6
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004c3c:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004c3e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004c40:	22a8      	movs	r2, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004c42:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004c44:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c46:	a808      	add	r0, sp, #32
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c48:	9d02      	ldr	r5, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c4a:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004c4c:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004c4e:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004c52:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c54:	f7fc ff1c 	bl	8001a90 <HAL_RCC_OscConfig>
 8004c58:	b100      	cbz	r0, 8004c5c <SystemClock_Config+0x70>
 8004c5a:	e7fe      	b.n	8004c5a <SystemClock_Config+0x6e>
 8004c5c:	4603      	mov	r3, r0
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c5e:	260f      	movs	r6, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004c60:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004c64:	f44f 5280 	mov.w	r2, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004c68:	a803      	add	r0, sp, #12
 8004c6a:	2105      	movs	r1, #5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c6c:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c6e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c70:	9603      	str	r6, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004c72:	e9cd 5206 	strd	r5, r2, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004c76:	f7fd f8fb 	bl	8001e70 <HAL_RCC_ClockConfig>
 8004c7a:	b100      	cbz	r0, 8004c7e <SystemClock_Config+0x92>
 8004c7c:	e7fe      	b.n	8004c7c <SystemClock_Config+0x90>
  {
    Error_Handler();
  }
}
 8004c7e:	b014      	add	sp, #80	; 0x50
 8004c80:	bd70      	pop	{r4, r5, r6, pc}
 8004c82:	bf00      	nop
 8004c84:	40023800 	.word	0x40023800
 8004c88:	40007000 	.word	0x40007000

08004c8c <HAL_UART_RxCpltCallback>:
		}
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
	if (UartHandle->Instance == huart1.Instance) {	//Propo-receive Interrupts
 8004c8c:	4b68      	ldr	r3, [pc, #416]	; (8004e30 <HAL_UART_RxCpltCallback+0x1a4>)
 8004c8e:	6801      	ldr	r1, [r0, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	4291      	cmp	r1, r2
 8004c94:	d000      	beq.n	8004c98 <HAL_UART_RxCpltCallback+0xc>
 8004c96:	4770      	bx	lr
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8004c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		HAL_UART_Receive_IT(&huart1, rcData, 18);
 8004c9c:	4c65      	ldr	r4, [pc, #404]	; (8004e34 <HAL_UART_RxCpltCallback+0x1a8>)
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	4621      	mov	r1, r4
 8004ca2:	2212      	movs	r2, #18
 8004ca4:	f7fe f8fc 	bl	8002ea0 <HAL_UART_Receive_IT>
		HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_1);
 8004ca8:	2102      	movs	r1, #2
 8004caa:	4863      	ldr	r0, [pc, #396]	; (8004e38 <HAL_UART_RxCpltCallback+0x1ac>)
 8004cac:	f7fc fee8 	bl	8001a80 <HAL_GPIO_TogglePin>
		rc.ch1 -= 1024;
		rc.ch2 = (((rcData[2] & 0x3F) << 5) | (rcData[1] >> 3));
		rc.ch2 -= 1024;
		rc.ch3 = (((rcData[4] & 0x01) << 10) | (rcData[3] << 2) | (rcData[2] >> 6));
		rc.ch3 -= 1024;
		rc.ch4 = (((rcData[5] & 0x0F) << 7) | (rcData[4] >> 1));
 8004cb0:	7967      	ldrb	r7, [r4, #5]
		rc.ch4 -= 1024;
		rc.ch5 = (rcData[17]<<8) | rcData[16];
 8004cb2:	7c62      	ldrb	r2, [r4, #17]
 8004cb4:	7c21      	ldrb	r1, [r4, #16]
		rc.ch2 = (((rcData[2] & 0x3F) << 5) | (rcData[1] >> 3));
 8004cb6:	78a0      	ldrb	r0, [r4, #2]
		rc.ch3 = (((rcData[4] & 0x01) << 10) | (rcData[3] << 2) | (rcData[2] >> 6));
 8004cb8:	7926      	ldrb	r6, [r4, #4]
		rc.ch1 = (((rcData[1] & 0x07) << 8) | rcData[0]);
 8004cba:	f894 a001 	ldrb.w	sl, [r4, #1]
		rc.ch3 = (((rcData[4] & 0x01) << 10) | (rcData[3] << 2) | (rcData[2] >> 6));
 8004cbe:	78e3      	ldrb	r3, [r4, #3]
		rc.ch1 = (((rcData[1] & 0x07) << 8) | rcData[0]);
 8004cc0:	f894 9000 	ldrb.w	r9, [r4]
		rc.ch5 = 1024-rc.ch5;
		rc.sw1 = ((rcData[5] & 0x30) >> 4);
		rc.sw2 = ((rcData[5] & 0xC0) >> 6);
		rc.mouse_x = ((int16_t)rcData[6]) | ((int16_t)rcData[7] << 8);
 8004cc4:	f894 c006 	ldrb.w	ip, [r4, #6]
		rc.mouse_y = ((int16_t)rcData[8]) | ((int16_t)rcData[9] << 8);
		rc.mouse_z = ((int16_t)rcData[10]) | ((int16_t)rcData[11] << 8);
		rc.mouse_press_r = rcData[12];
		rc.mouse_press_l = rcData[13];
		rc.key_v = ((int16_t)rcData[14]);
 8004cc8:	f894 800e 	ldrb.w	r8, [r4, #14]
		rc.ch5 = (rcData[17]<<8) | rcData[16];
 8004ccc:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
		rc.ch4 = (((rcData[5] & 0x0F) << 7) | (rcData[4] >> 1));
 8004cd0:	01fa      	lsls	r2, r7, #7
		rc.ch3 = (((rcData[4] & 0x01) << 10) | (rcData[3] << 2) | (rcData[2] >> 6));
 8004cd2:	0985      	lsrs	r5, r0, #6
		rc.ch4 = (((rcData[5] & 0x0F) << 7) | (rcData[4] >> 1));
 8004cd4:	f402 62f0 	and.w	r2, r2, #1920	; 0x780
		rc.ch3 = (((rcData[4] & 0x01) << 10) | (rcData[3] << 2) | (rcData[2] >> 6));
 8004cd8:	ea45 0583 	orr.w	r5, r5, r3, lsl #2
		rc.ch1 = (((rcData[1] & 0x07) << 8) | rcData[0]);
 8004cdc:	ea4f 2e0a 	mov.w	lr, sl, lsl #8
		rc.ch3 = (((rcData[4] & 0x01) << 10) | (rcData[3] << 2) | (rcData[2] >> 6));
 8004ce0:	02b3      	lsls	r3, r6, #10
		rc.ch4 = (((rcData[5] & 0x0F) << 7) | (rcData[4] >> 1));
 8004ce2:	ea42 0256 	orr.w	r2, r2, r6, lsr #1
		rc.mouse_x = ((int16_t)rcData[6]) | ((int16_t)rcData[7] << 8);
 8004ce6:	79e6      	ldrb	r6, [r4, #7]
		rc.ch2 = (((rcData[2] & 0x3F) << 5) | (rcData[1] >> 3));
 8004ce8:	0140      	lsls	r0, r0, #5
		rc.ch1 = (((rcData[1] & 0x07) << 8) | rcData[0]);
 8004cea:	f40e 6ee0 	and.w	lr, lr, #1792	; 0x700
		rc.ch3 = (((rcData[4] & 0x01) << 10) | (rcData[3] << 2) | (rcData[2] >> 6));
 8004cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
		rc.ch1 = (((rcData[1] & 0x07) << 8) | rcData[0]);
 8004cf2:	ea49 0e0e 	orr.w	lr, r9, lr
		rc.mouse_x = ((int16_t)rcData[6]) | ((int16_t)rcData[7] << 8);
 8004cf6:	ea4c 2c06 	orr.w	ip, ip, r6, lsl #8
		rc.mouse_y = ((int16_t)rcData[8]) | ((int16_t)rcData[9] << 8);
 8004cfa:	f894 9009 	ldrb.w	r9, [r4, #9]
 8004cfe:	7a26      	ldrb	r6, [r4, #8]
		rc.ch2 = (((rcData[2] & 0x3F) << 5) | (rcData[1] >> 3));
 8004d00:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
		rc.ch3 = (((rcData[4] & 0x01) << 10) | (rcData[3] << 2) | (rcData[2] >> 6));
 8004d04:	431d      	orrs	r5, r3
		rc.ch2 = (((rcData[2] & 0x3F) << 5) | (rcData[1] >> 3));
 8004d06:	ea40 00da 	orr.w	r0, r0, sl, lsr #3
		rc.ch1 -= 1024;
 8004d0a:	4b4c      	ldr	r3, [pc, #304]	; (8004e3c <HAL_UART_RxCpltCallback+0x1b0>)
		rc.mouse_z = ((int16_t)rcData[10]) | ((int16_t)rcData[11] << 8);
 8004d0c:	f894 a00b 	ldrb.w	sl, [r4, #11]
		rc.mouse_y = ((int16_t)rcData[8]) | ((int16_t)rcData[9] << 8);
 8004d10:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
		rc.ch2 -= 1024;
 8004d14:	f5a0 6080 	sub.w	r0, r0, #1024	; 0x400
		rc.mouse_z = ((int16_t)rcData[10]) | ((int16_t)rcData[11] << 8);
 8004d18:	f894 900a 	ldrb.w	r9, [r4, #10]
		rc.ch2 -= 1024;
 8004d1c:	8058      	strh	r0, [r3, #2]
		rc.ch1 -= 1024;
 8004d1e:	f5ae 6e80 	sub.w	lr, lr, #1024	; 0x400
		rc.sw1 = ((rcData[5] & 0x30) >> 4);
 8004d22:	f3c7 1001 	ubfx	r0, r7, #4, #2
		rc.ch5 = 1024-rc.ch5;
 8004d26:	f5c1 6180 	rsb	r1, r1, #1024	; 0x400
 8004d2a:	b209      	sxth	r1, r1
		rc.mouse_z = ((int16_t)rcData[10]) | ((int16_t)rcData[11] << 8);
 8004d2c:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
		rc.ch1 -= 1024;
 8004d30:	f8a3 e000 	strh.w	lr, [r3]
		rc.sw1 = ((rcData[5] & 0x30) >> 4);
 8004d34:	7298      	strb	r0, [r3, #10]
		rc.mouse_press_r = rcData[12];
 8004d36:	f894 e00c 	ldrb.w	lr, [r4, #12]
		rc.mouse_z = ((int16_t)rcData[10]) | ((int16_t)rcData[11] << 8);
 8004d3a:	f8a3 9010 	strh.w	r9, [r3, #16]
		rc.key_v = ((int16_t)rcData[14]);
 8004d3e:	fa0f f088 	sxth.w	r0, r8
		rc.ch3 -= 1024;
 8004d42:	f5a5 6580 	sub.w	r5, r5, #1024	; 0x400
		rc.ch4 -= 1024;
 8004d46:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
		rc.key_Shift = (0b0000000000010000 & rc.key_v)>>4;
		rc.key_Ctrl =  (0b0000000000100000 & rc.key_v)>>5;
		rc.key_Q =     (0b0000000001000000 & rc.key_v)>>6;
		rc.key_E =     (0b0000000010000000 & rc.key_v)>>7;

		if ((abs(rc.ch5) > 660) ||(abs(rc.ch3) > 660) ||(abs(rc.ch4) > 660)){
 8004d4a:	2900      	cmp	r1, #0
		rc.key_W =     (0b0000000000000001 & rc.key_v);
 8004d4c:	f008 0801 	and.w	r8, r8, #1
		rc.mouse_press_l = rcData[13];
 8004d50:	7b64      	ldrb	r4, [r4, #13]
		rc.mouse_press_r = rcData[12];
 8004d52:	f8a3 e014 	strh.w	lr, [r3, #20]
		rc.key_S =     (0b0000000000000010 & rc.key_v)>>1;
 8004d56:	f3c0 0940 	ubfx	r9, r0, #1, #1
		rc.key_A =     (0b0000000000000100 & rc.key_v)>>2;
 8004d5a:	f3c0 0e80 	ubfx	lr, r0, #2, #1
		rc.ch3 -= 1024;
 8004d5e:	b22d      	sxth	r5, r5
		rc.ch4 -= 1024;
 8004d60:	b212      	sxth	r2, r2
		rc.mouse_x = ((int16_t)rcData[6]) | ((int16_t)rcData[7] << 8);
 8004d62:	fa0f fc8c 	sxth.w	ip, ip
		rc.mouse_y = ((int16_t)rcData[8]) | ((int16_t)rcData[9] << 8);
 8004d66:	b236      	sxth	r6, r6
		rc.sw2 = ((rcData[5] & 0xC0) >> 6);
 8004d68:	ea4f 1797 	mov.w	r7, r7, lsr #6
		rc.ch5 = 1024-rc.ch5;
 8004d6c:	8119      	strh	r1, [r3, #8]
		rc.key_W =     (0b0000000000000001 & rc.key_v);
 8004d6e:	f883 8018 	strb.w	r8, [r3, #24]
		rc.key_v = ((int16_t)rcData[14]);
 8004d72:	82d8      	strh	r0, [r3, #22]
		rc.key_D =     (0b0000000000001000 & rc.key_v)>>3;
 8004d74:	f3c0 08c0 	ubfx	r8, r0, #3, #1
		if ((abs(rc.ch5) > 660) ||(abs(rc.ch3) > 660) ||(abs(rc.ch4) > 660)){
 8004d78:	bfb8      	it	lt
 8004d7a:	4249      	neglt	r1, r1
		rc.ch3 -= 1024;
 8004d7c:	809d      	strh	r5, [r3, #4]
		rc.ch4 -= 1024;
 8004d7e:	80da      	strh	r2, [r3, #6]
		rc.sw2 = ((rcData[5] & 0xC0) >> 6);
 8004d80:	72df      	strb	r7, [r3, #11]
		rc.key_S =     (0b0000000000000010 & rc.key_v)>>1;
 8004d82:	f883 901a 	strb.w	r9, [r3, #26]
		rc.mouse_x = ((int16_t)rcData[6]) | ((int16_t)rcData[7] << 8);
 8004d86:	f8a3 c00c 	strh.w	ip, [r3, #12]
		rc.mouse_press_l = rcData[13];
 8004d8a:	825c      	strh	r4, [r3, #18]
		rc.mouse_y = ((int16_t)rcData[8]) | ((int16_t)rcData[9] << 8);
 8004d8c:	81de      	strh	r6, [r3, #14]
		rc.key_A =     (0b0000000000000100 & rc.key_v)>>2;
 8004d8e:	f883 e019 	strb.w	lr, [r3, #25]
		rc.key_Shift = (0b0000000000010000 & rc.key_v)>>4;
 8004d92:	f3c0 1e00 	ubfx	lr, r0, #4, #1
		rc.key_D =     (0b0000000000001000 & rc.key_v)>>3;
 8004d96:	f883 801b 	strb.w	r8, [r3, #27]
		rc.key_Shift = (0b0000000000010000 & rc.key_v)>>4;
 8004d9a:	f883 e01e 	strb.w	lr, [r3, #30]
		rc.key_Ctrl =  (0b0000000000100000 & rc.key_v)>>5;
 8004d9e:	f3c0 1840 	ubfx	r8, r0, #5, #1
		rc.key_Q =     (0b0000000001000000 & rc.key_v)>>6;
 8004da2:	f3c0 1e80 	ubfx	lr, r0, #6, #1
		if ((abs(rc.ch5) > 660) ||(abs(rc.ch3) > 660) ||(abs(rc.ch4) > 660)){
 8004da6:	f5b1 7f25 	cmp.w	r1, #660	; 0x294
		rc.key_E =     (0b0000000010000000 & rc.key_v)>>7;
 8004daa:	ea4f 10e0 	mov.w	r0, r0, asr #7
		rc.key_Ctrl =  (0b0000000000100000 & rc.key_v)>>5;
 8004dae:	f883 801f 	strb.w	r8, [r3, #31]
		rc.key_Q =     (0b0000000001000000 & rc.key_v)>>6;
 8004db2:	f883 e01c 	strb.w	lr, [r3, #28]
		rc.key_E =     (0b0000000010000000 & rc.key_v)>>7;
 8004db6:	7758      	strb	r0, [r3, #29]
		if ((abs(rc.ch5) > 660) ||(abs(rc.ch3) > 660) ||(abs(rc.ch4) > 660)){
 8004db8:	dc38      	bgt.n	8004e2c <HAL_UART_RxCpltCallback+0x1a0>
 8004dba:	2d00      	cmp	r5, #0
 8004dbc:	bfb8      	it	lt
 8004dbe:	426d      	neglt	r5, r5
 8004dc0:	f5b5 7f25 	cmp.w	r5, #660	; 0x294
 8004dc4:	dc32      	bgt.n	8004e2c <HAL_UART_RxCpltCallback+0x1a0>
 8004dc6:	2a00      	cmp	r2, #0
 8004dc8:	bfb8      	it	lt
 8004dca:	4252      	neglt	r2, r2
 8004dcc:	f5b2 7f25 	cmp.w	r2, #660	; 0x294
 8004dd0:	dc2c      	bgt.n	8004e2c <HAL_UART_RxCpltCallback+0x1a0>
			NVIC_SystemReset();
		  }
		else{
			 RC_time=0;
 8004dd2:	4a1b      	ldr	r2, [pc, #108]	; (8004e40 <HAL_UART_RxCpltCallback+0x1b4>)
 8004dd4:	2300      	movs	r3, #0
		}

		if(rc.sw2==2){
 8004dd6:	2f02      	cmp	r7, #2
			 RC_time=0;
 8004dd8:	6013      	str	r3, [r2, #0]
		if(rc.sw2==2){
 8004dda:	d003      	beq.n	8004de4 <HAL_UART_RxCpltCallback+0x158>
			PC_mouse_x=0;
			PC_mouse_y=0;
		}
		else{
			if(rc.mouse_press_l==1){
 8004ddc:	2c01      	cmp	r4, #1
 8004dde:	d006      	beq.n	8004dee <HAL_UART_RxCpltCallback+0x162>
			if(PC_mouse_x < -1*yaw_MAX*yaw_magnification){	PC_mouse_x = -1*yaw_MAX*yaw_magnification;}
			}
		}

	}
}
 8004de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			PC_mouse_x=0;
 8004de4:	4917      	ldr	r1, [pc, #92]	; (8004e44 <HAL_UART_RxCpltCallback+0x1b8>)
			PC_mouse_y=0;
 8004de6:	4a18      	ldr	r2, [pc, #96]	; (8004e48 <HAL_UART_RxCpltCallback+0x1bc>)
			PC_mouse_x=0;
 8004de8:	600b      	str	r3, [r1, #0]
			PC_mouse_y=0;
 8004dea:	6013      	str	r3, [r2, #0]
 8004dec:	e7f8      	b.n	8004de0 <HAL_UART_RxCpltCallback+0x154>
			PC_mouse_y=PC_mouse_y+rc.mouse_y;
 8004dee:	4916      	ldr	r1, [pc, #88]	; (8004e48 <HAL_UART_RxCpltCallback+0x1bc>)
			PC_mouse_x=PC_mouse_x+rc.mouse_x*(-1);
 8004df0:	4a14      	ldr	r2, [pc, #80]	; (8004e44 <HAL_UART_RxCpltCallback+0x1b8>)
			PC_mouse_y=PC_mouse_y+rc.mouse_y;
 8004df2:	6808      	ldr	r0, [r1, #0]
			PC_mouse_x=PC_mouse_x+rc.mouse_x*(-1);
 8004df4:	6813      	ldr	r3, [r2, #0]
			PC_mouse_y=PC_mouse_y+rc.mouse_y;
 8004df6:	4406      	add	r6, r0
			if(PC_mouse_y > pich_MAX*pich_magnification){	PC_mouse_y = pich_MAX*pich_magnification;}
 8004df8:	f240 50dc 	movw	r0, #1500	; 0x5dc
			PC_mouse_x=PC_mouse_x+rc.mouse_x*(-1);
 8004dfc:	eba3 030c 	sub.w	r3, r3, ip
			if(PC_mouse_y > pich_MAX*pich_magnification){	PC_mouse_y = pich_MAX*pich_magnification;}
 8004e00:	4286      	cmp	r6, r0
			PC_mouse_x=PC_mouse_x+rc.mouse_x*(-1);
 8004e02:	6013      	str	r3, [r2, #0]
			if(PC_mouse_y > pich_MAX*pich_magnification){	PC_mouse_y = pich_MAX*pich_magnification;}
 8004e04:	dd07      	ble.n	8004e16 <HAL_UART_RxCpltCallback+0x18a>
 8004e06:	6008      	str	r0, [r1, #0]
			if(PC_mouse_x > yaw_MAX*yaw_magnification){		PC_mouse_x = yaw_MAX*yaw_magnification;}
 8004e08:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8004e0c:	dd09      	ble.n	8004e22 <HAL_UART_RxCpltCallback+0x196>
 8004e0e:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8004e12:	6013      	str	r3, [r2, #0]
 8004e14:	e7e4      	b.n	8004de0 <HAL_UART_RxCpltCallback+0x154>
			if(PC_mouse_y < -1*pich_MAX*pich_magnification){PC_mouse_y = -1*pich_MAX*pich_magnification;}
 8004e16:	480d      	ldr	r0, [pc, #52]	; (8004e4c <HAL_UART_RxCpltCallback+0x1c0>)
			PC_mouse_y=PC_mouse_y+rc.mouse_y;
 8004e18:	4286      	cmp	r6, r0
 8004e1a:	bfb8      	it	lt
 8004e1c:	4606      	movlt	r6, r0
 8004e1e:	600e      	str	r6, [r1, #0]
 8004e20:	e7f2      	b.n	8004e08 <HAL_UART_RxCpltCallback+0x17c>
			if(PC_mouse_x < -1*yaw_MAX*yaw_magnification){	PC_mouse_x = -1*yaw_MAX*yaw_magnification;}
 8004e22:	490b      	ldr	r1, [pc, #44]	; (8004e50 <HAL_UART_RxCpltCallback+0x1c4>)
 8004e24:	428b      	cmp	r3, r1
 8004e26:	bfb8      	it	lt
 8004e28:	6011      	strlt	r1, [r2, #0]
}
 8004e2a:	e7d9      	b.n	8004de0 <HAL_UART_RxCpltCallback+0x154>
			NVIC_SystemReset();
 8004e2c:	f7ff febc 	bl	8004ba8 <__NVIC_SystemReset>
 8004e30:	20000868 	.word	0x20000868
 8004e34:	200005e0 	.word	0x200005e0
 8004e38:	40021800 	.word	0x40021800
 8004e3c:	20000374 	.word	0x20000374
 8004e40:	200003f4 	.word	0x200003f4
 8004e44:	200003f0 	.word	0x200003f0
 8004e48:	20000484 	.word	0x20000484
 8004e4c:	fffffa24 	.word	0xfffffa24
 8004e50:	fffffa88 	.word	0xfffffa88
 8004e54:	00000000 	.word	0x00000000

08004e58 <HAL_CAN_RxFifo0MsgPendingCallback>:

//can fifo0 receive interrupt
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
	/* Get RX message */
	if (hcan->Instance == hcan2.Instance) {// can2 bus receive interrupt
 8004e58:	4a39      	ldr	r2, [pc, #228]	; (8004f40 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8004e5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (hcan->Instance == hcan2.Instance) {// can2 bus receive interrupt
 8004e5c:	6812      	ldr	r2, [r2, #0]
 8004e5e:	6803      	ldr	r3, [r0, #0]
 8004e60:	4293      	cmp	r3, r2
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8004e62:	4604      	mov	r4, r0
	if (hcan->Instance == hcan2.Instance) {// can2 bus receive interrupt
 8004e64:	d035      	beq.n	8004ed2 <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
		wheelFdb[id].rpm = canRxData[2] * 256 + canRxData[3];
		wheelFdb[id].torque = canRxData[4] * 256 + canRxData[5];
		wheelFdb[id].temp = canRxData[6];
		wheelFdb[id].omg = 6.28318530718 * (wheelFdb[id].rpm) / 1140.0;
	}
	if (hcan->Instance == hcan1.Instance) {// can1 bus receive interrupt
 8004e66:	4a37      	ldr	r2, [pc, #220]	; (8004f44 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8004e68:	6812      	ldr	r2, [r2, #0]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d000      	beq.n	8004e70 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>
		fdb->rpm = canRxData[2] * 256 + canRxData[3];
		fdb->torque = canRxData[4] * 256 + canRxData[5];
		fdb->temp = canRxData[6];
		fdb->omg = 6.28318530718 * (fdb->rpm) / 1140.0;
	}
}
 8004e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, canRxData);
 8004e70:	4e35      	ldr	r6, [pc, #212]	; (8004f48 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8004e72:	4d36      	ldr	r5, [pc, #216]	; (8004f4c <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8004e74:	4632      	mov	r2, r6
 8004e76:	462b      	mov	r3, r5
 8004e78:	4620      	mov	r0, r4
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	f7fc fa64 	bl	8001348 <HAL_CAN_GetRxMessage>
 8004e80:	6833      	ldr	r3, [r6, #0]
 8004e82:	f46f 7201 	mvn.w	r2, #516	; 0x204
 8004e86:	4413      	add	r3, r2
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d81f      	bhi.n	8004ecc <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
 8004e8c:	4830      	ldr	r0, [pc, #192]	; (8004f50 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
		fdb->angle = canRxData[0] * 256 + canRxData[1];
 8004e8e:	786a      	ldrb	r2, [r5, #1]
 8004e90:	7829      	ldrb	r1, [r5, #0]
 8004e92:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8004e96:	eb02 2301 	add.w	r3, r2, r1, lsl #8
 8004e9a:	8023      	strh	r3, [r4, #0]
		fdb->rpm = canRxData[2] * 256 + canRxData[3];
 8004e9c:	78ab      	ldrb	r3, [r5, #2]
 8004e9e:	78e8      	ldrb	r0, [r5, #3]
 8004ea0:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8004ea4:	b200      	sxth	r0, r0
 8004ea6:	8060      	strh	r0, [r4, #2]
		fdb->torque = canRxData[4] * 256 + canRxData[5];
 8004ea8:	792a      	ldrb	r2, [r5, #4]
 8004eaa:	796b      	ldrb	r3, [r5, #5]
 8004eac:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004eb0:	80a3      	strh	r3, [r4, #4]
		fdb->temp = canRxData[6];
 8004eb2:	79ab      	ldrb	r3, [r5, #6]
 8004eb4:	80e3      	strh	r3, [r4, #6]
		fdb->omg = 6.28318530718 * (fdb->rpm) / 1140.0;
 8004eb6:	f7fb fb45 	bl	8000544 <__aeabi_i2d>
 8004eba:	a31f      	add	r3, pc, #124	; (adr r3, 8004f38 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8004ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec0:	f7fb fbaa 	bl	8000618 <__aeabi_dmul>
 8004ec4:	f7fb fe80 	bl	8000bc8 <__aeabi_d2f>
 8004ec8:	60a0      	str	r0, [r4, #8]
}
 8004eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		fdb->angle = canRxData[0] * 256 + canRxData[1];
 8004ecc:	2300      	movs	r3, #0
 8004ece:	801b      	strh	r3, [r3, #0]
 8004ed0:	deff      	udf	#255	; 0xff
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, canRxData);
 8004ed2:	4d1e      	ldr	r5, [pc, #120]	; (8004f4c <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8004ed4:	4e1c      	ldr	r6, [pc, #112]	; (8004f48 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8004ed6:	462b      	mov	r3, r5
 8004ed8:	4632      	mov	r2, r6
 8004eda:	2100      	movs	r1, #0
 8004edc:	f7fc fa34 	bl	8001348 <HAL_CAN_GetRxMessage>
		int id = canRxHeader.StdId - 513;
 8004ee0:	6833      	ldr	r3, [r6, #0]
		wheelFdb[id].rpm = canRxData[2] * 256 + canRxData[3];
 8004ee2:	78aa      	ldrb	r2, [r5, #2]
 8004ee4:	78e8      	ldrb	r0, [r5, #3]
		wheelFdb[id].angle = canRxData[0] * 256 + canRxData[1];
 8004ee6:	4e1b      	ldr	r6, [pc, #108]	; (8004f54 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
		wheelFdb[id].torque = canRxData[4] * 256 + canRxData[5];
 8004ee8:	f895 c004 	ldrb.w	ip, [r5, #4]
		wheelFdb[id].angle = canRxData[0] * 256 + canRxData[1];
 8004eec:	f895 e000 	ldrb.w	lr, [r5]
 8004ef0:	7869      	ldrb	r1, [r5, #1]
		int id = canRxHeader.StdId - 513;
 8004ef2:	f46f 7700 	mvn.w	r7, #512	; 0x200
 8004ef6:	443b      	add	r3, r7
		wheelFdb[id].angle = canRxData[0] * 256 + canRxData[1];
 8004ef8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004efc:	009b      	lsls	r3, r3, #2
		wheelFdb[id].rpm = canRxData[2] * 256 + canRxData[3];
 8004efe:	eb00 2002 	add.w	r0, r0, r2, lsl #8
		wheelFdb[id].torque = canRxData[4] * 256 + canRxData[5];
 8004f02:	796a      	ldrb	r2, [r5, #5]
		wheelFdb[id].temp = canRxData[6];
 8004f04:	79af      	ldrb	r7, [r5, #6]
		wheelFdb[id].angle = canRxData[0] * 256 + canRxData[1];
 8004f06:	18f5      	adds	r5, r6, r3
		wheelFdb[id].torque = canRxData[4] * 256 + canRxData[5];
 8004f08:	eb02 220c 	add.w	r2, r2, ip, lsl #8
		wheelFdb[id].angle = canRxData[0] * 256 + canRxData[1];
 8004f0c:	eb01 210e 	add.w	r1, r1, lr, lsl #8
		wheelFdb[id].rpm = canRxData[2] * 256 + canRxData[3];
 8004f10:	b200      	sxth	r0, r0
		wheelFdb[id].angle = canRxData[0] * 256 + canRxData[1];
 8004f12:	52f1      	strh	r1, [r6, r3]
		wheelFdb[id].torque = canRxData[4] * 256 + canRxData[5];
 8004f14:	80aa      	strh	r2, [r5, #4]
		wheelFdb[id].temp = canRxData[6];
 8004f16:	80ef      	strh	r7, [r5, #6]
		wheelFdb[id].rpm = canRxData[2] * 256 + canRxData[3];
 8004f18:	8068      	strh	r0, [r5, #2]
		wheelFdb[id].omg = 6.28318530718 * (wheelFdb[id].rpm) / 1140.0;
 8004f1a:	f7fb fb13 	bl	8000544 <__aeabi_i2d>
 8004f1e:	a306      	add	r3, pc, #24	; (adr r3, 8004f38 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8004f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f24:	f7fb fb78 	bl	8000618 <__aeabi_dmul>
 8004f28:	f7fb fe4e 	bl	8000bc8 <__aeabi_d2f>
 8004f2c:	6823      	ldr	r3, [r4, #0]
 8004f2e:	60a8      	str	r0, [r5, #8]
 8004f30:	e799      	b.n	8004e66 <HAL_CAN_RxFifo0MsgPendingCallback+0xe>
 8004f32:	bf00      	nop
 8004f34:	f3af 8000 	nop.w
 8004f38:	bf90c83b 	.word	0xbf90c83b
 8004f3c:	3f76934b 	.word	0x3f76934b
 8004f40:	20000324 	.word	0x20000324
 8004f44:	2000034c 	.word	0x2000034c
 8004f48:	20000594 	.word	0x20000594
 8004f4c:	20000538 	.word	0x20000538
 8004f50:	0800bde8 	.word	0x0800bde8
 8004f54:	200003bc 	.word	0x200003bc

08004f58 <driveWheelTask>:

void driveWheelTask() {
 8004f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	MAX_CHASSIS_VX_SPEED_calc= MAX_CHASSIS_VX_SPEED;
	MAX_CHASSIS_VY_SPEED_calc= MAX_CHASSIS_VY_SPEED;
    MAX_CHASSIS_VW_SPEED_calc= MAX_CHASSIS_VW_SPEED;


    torque_sum = fabs((float)wheelFdb[0].torque/16384.0*20.0)+fabs((float)wheelFdb[1].torque/16384.0*20.0)
 8004f5c:	4dd8      	ldr	r5, [pc, #864]	; (80052c0 <driveWheelTask+0x368>)
 8004f5e:	4cd9      	ldr	r4, [pc, #868]	; (80052c4 <driveWheelTask+0x36c>)
 8004f60:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8004f64:	ee07 0a90 	vmov	s15, r0
void driveWheelTask() {
 8004f68:	ed2d 8b02 	vpush	{d8}
    torque_sum = fabs((float)wheelFdb[0].torque/16384.0*20.0)+fabs((float)wheelFdb[1].torque/16384.0*20.0)
 8004f6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
void driveWheelTask() {
 8004f70:	b087      	sub	sp, #28
    torque_sum = fabs((float)wheelFdb[0].torque/16384.0*20.0)+fabs((float)wheelFdb[1].torque/16384.0*20.0)
 8004f72:	ee17 0a90 	vmov	r0, s15
 8004f76:	f7fb faf7 	bl	8000568 <__aeabi_f2d>
 8004f7a:	4bd3      	ldr	r3, [pc, #844]	; (80052c8 <driveWheelTask+0x370>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f7fb fb4b 	bl	8000618 <__aeabi_dmul>
 8004f82:	4602      	mov	r2, r0
 8004f84:	f9b5 0010 	ldrsh.w	r0, [r5, #16]
 8004f88:	ee07 0a90 	vmov	s15, r0
 8004f8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f90:	4616      	mov	r6, r2
 8004f92:	ee17 0a90 	vmov	r0, s15
 8004f96:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8004f9a:	f7fb fae5 	bl	8000568 <__aeabi_f2d>
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	4bc9      	ldr	r3, [pc, #804]	; (80052c8 <driveWheelTask+0x370>)
 8004fa2:	f7fb fb39 	bl	8000618 <__aeabi_dmul>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004fac:	4630      	mov	r0, r6
 8004fae:	4639      	mov	r1, r7
 8004fb0:	f7fb f97c 	bl	80002ac <__adddf3>
 8004fb4:	4606      	mov	r6, r0
    		    +fabs((float)wheelFdb[2].torque/16384.0*20.0)+fabs((float)wheelFdb[3].torque/16384.0*20.0);
 8004fb6:	f9b5 001c 	ldrsh.w	r0, [r5, #28]
 8004fba:	ee07 0a90 	vmov	s15, r0
 8004fbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    torque_sum = fabs((float)wheelFdb[0].torque/16384.0*20.0)+fabs((float)wheelFdb[1].torque/16384.0*20.0)
 8004fc2:	460f      	mov	r7, r1
    		    +fabs((float)wheelFdb[2].torque/16384.0*20.0)+fabs((float)wheelFdb[3].torque/16384.0*20.0);
 8004fc4:	ee17 0a90 	vmov	r0, s15
 8004fc8:	f7fb face 	bl	8000568 <__aeabi_f2d>
 8004fcc:	2200      	movs	r2, #0
 8004fce:	4bbe      	ldr	r3, [pc, #760]	; (80052c8 <driveWheelTask+0x370>)
 8004fd0:	f7fb fb22 	bl	8000618 <__aeabi_dmul>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004fda:	4630      	mov	r0, r6
 8004fdc:	4639      	mov	r1, r7
 8004fde:	f7fb f965 	bl	80002ac <__adddf3>
 8004fe2:	4606      	mov	r6, r0
 8004fe4:	f9b5 0028 	ldrsh.w	r0, [r5, #40]	; 0x28
 8004fe8:	ee07 0a90 	vmov	s15, r0
 8004fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ff0:	460f      	mov	r7, r1
 8004ff2:	ee17 0a90 	vmov	r0, s15
 8004ff6:	f7fb fab7 	bl	8000568 <__aeabi_f2d>
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	4bb2      	ldr	r3, [pc, #712]	; (80052c8 <driveWheelTask+0x370>)
 8004ffe:	f7fb fb0b 	bl	8000618 <__aeabi_dmul>
 8005002:	4602      	mov	r2, r0
 8005004:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005008:	4630      	mov	r0, r6
 800500a:	4639      	mov	r1, r7
 800500c:	f7fb f94e 	bl	80002ac <__adddf3>
    torque_sum = fabs((float)wheelFdb[0].torque/16384.0*20.0)+fabs((float)wheelFdb[1].torque/16384.0*20.0)
 8005010:	f7fb fdda 	bl	8000bc8 <__aeabi_d2f>
 8005014:	4605      	mov	r5, r0
 8005016:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 800501a:	ee07 0a90 	vmov	s15, r0
 800501e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005022:	ee17 0a90 	vmov	r0, s15
 8005026:	f7fb fa9f 	bl	8000568 <__aeabi_f2d>
 800502a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800502e:	ee07 3a90 	vmov	s15, r3
 8005032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005036:	4680      	mov	r8, r0
 8005038:	eef1 7a67 	vneg.f32	s15, s15
 800503c:	ee17 0a90 	vmov	r0, s15
 8005040:	4689      	mov	r9, r1
 8005042:	f7fb fa91 	bl	8000568 <__aeabi_f2d>


	if(rc.sw2==1){
 8005046:	7ae3      	ldrb	r3, [r4, #11]
 8005048:	2b01      	cmp	r3, #1
 800504a:	4606      	mov	r6, r0
 800504c:	460f      	mov	r7, r1
 800504e:	f000 8081 	beq.w	8005154 <driveWheelTask+0x1fc>
								+ vy_temp*cos((IMU_yaw+feed_forward_param)*M_PI/180.0);
	}
	else{
		cnt_tim_omega=0;
		feed_forward_param=0;
		mecanum.speed.vw = -(float)(rc.ch5*log(abs(rc.ch5)+1.0)*0.153) / 660.0 * MAX_CHASSIS_VW_SPEED_calc;
 8005052:	f9b4 a008 	ldrsh.w	sl, [r4, #8]
		feed_forward_param=0;
 8005056:	4a9d      	ldr	r2, [pc, #628]	; (80052cc <driveWheelTask+0x374>)
		cnt_tim_omega=0;
 8005058:	499d      	ldr	r1, [pc, #628]	; (80052d0 <driveWheelTask+0x378>)
		mecanum.speed.vw = -(float)(rc.ch5*log(abs(rc.ch5)+1.0)*0.153) / 660.0 * MAX_CHASSIS_VW_SPEED_calc;
 800505a:	4c9e      	ldr	r4, [pc, #632]	; (80052d4 <driveWheelTask+0x37c>)
		cnt_tim_omega=0;
 800505c:	2300      	movs	r3, #0
		mecanum.speed.vw = -(float)(rc.ch5*log(abs(rc.ch5)+1.0)*0.153) / 660.0 * MAX_CHASSIS_VW_SPEED_calc;
 800505e:	ea8a 70ea 	eor.w	r0, sl, sl, asr #31
		feed_forward_param=0;
 8005062:	8013      	strh	r3, [r2, #0]
		cnt_tim_omega=0;
 8005064:	800b      	strh	r3, [r1, #0]
		mecanum.speed.vw = -(float)(rc.ch5*log(abs(rc.ch5)+1.0)*0.153) / 660.0 * MAX_CHASSIS_VW_SPEED_calc;
 8005066:	eba0 70ea 	sub.w	r0, r0, sl, asr #31
 800506a:	f7fb fa6b 	bl	8000544 <__aeabi_i2d>
 800506e:	2200      	movs	r2, #0
 8005070:	4b99      	ldr	r3, [pc, #612]	; (80052d8 <driveWheelTask+0x380>)
 8005072:	f7fb f91b 	bl	80002ac <__adddf3>
 8005076:	ec41 0b10 	vmov	d0, r0, r1
 800507a:	f004 ff57 	bl	8009f2c <log>
 800507e:	4650      	mov	r0, sl
 8005080:	ed8d 0b00 	vstr	d0, [sp]
 8005084:	f7fb fa5e 	bl	8000544 <__aeabi_i2d>
 8005088:	a383      	add	r3, pc, #524	; (adr r3, 8005298 <driveWheelTask+0x340>)
 800508a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508e:	f7fb fac3 	bl	8000618 <__aeabi_dmul>
 8005092:	ed9d 0b00 	vldr	d0, [sp]
 8005096:	ec53 2b10 	vmov	r2, r3, d0
 800509a:	f7fb fabd 	bl	8000618 <__aeabi_dmul>
 800509e:	f7fb fd93 	bl	8000bc8 <__aeabi_d2f>
 80050a2:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80050a6:	f7fb fa5f 	bl	8000568 <__aeabi_f2d>
 80050aa:	a37d      	add	r3, pc, #500	; (adr r3, 80052a0 <driveWheelTask+0x348>)
 80050ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b0:	f7fb fab2 	bl	8000618 <__aeabi_dmul>
 80050b4:	f7fb fd88 	bl	8000bc8 <__aeabi_d2f>
		mecanum.speed.vx =  (float) rc.ch4 / 660.0 * MAX_CHASSIS_VX_SPEED_calc;
 80050b8:	2200      	movs	r2, #0
 80050ba:	4b88      	ldr	r3, [pc, #544]	; (80052dc <driveWheelTask+0x384>)
		mecanum.speed.vw = -(float)(rc.ch5*log(abs(rc.ch5)+1.0)*0.153) / 660.0 * MAX_CHASSIS_VW_SPEED_calc;
 80050bc:	61e0      	str	r0, [r4, #28]
		mecanum.speed.vx =  (float) rc.ch4 / 660.0 * MAX_CHASSIS_VX_SPEED_calc;
 80050be:	4649      	mov	r1, r9
 80050c0:	4640      	mov	r0, r8
 80050c2:	f7fb faa9 	bl	8000618 <__aeabi_dmul>
 80050c6:	f7fb fd7f 	bl	8000bc8 <__aeabi_d2f>
		mecanum.speed.vy = -(float) rc.ch3 / 660.0 * MAX_CHASSIS_VY_SPEED_calc;
 80050ca:	2200      	movs	r2, #0
 80050cc:	4b83      	ldr	r3, [pc, #524]	; (80052dc <driveWheelTask+0x384>)
		mecanum.speed.vx =  (float) rc.ch4 / 660.0 * MAX_CHASSIS_VX_SPEED_calc;
 80050ce:	6160      	str	r0, [r4, #20]
		mecanum.speed.vy = -(float) rc.ch3 / 660.0 * MAX_CHASSIS_VY_SPEED_calc;
 80050d0:	4639      	mov	r1, r7
 80050d2:	4630      	mov	r0, r6
 80050d4:	f7fb faa0 	bl	8000618 <__aeabi_dmul>
 80050d8:	f7fb fd76 	bl	8000bc8 <__aeabi_d2f>
 80050dc:	61a0      	str	r0, [r4, #24]

	}

	mecanum_calculate(&mecanum);
 80050de:	487d      	ldr	r0, [pc, #500]	; (80052d4 <driveWheelTask+0x37c>)
 80050e0:	4e77      	ldr	r6, [pc, #476]	; (80052c0 <driveWheelTask+0x368>)
 80050e2:	4c7f      	ldr	r4, [pc, #508]	; (80052e0 <driveWheelTask+0x388>)
 80050e4:	f001 f884 	bl	80061f0 <mecanum_calculate>
	for (int i = 0; i < 4; i++) {
		int error = mecanum.wheel_rpm[i] - wheelFdb[i].rpm;
		wheelPID[i].error = error;
		u[i] = (int16_t) pidExecute(&(wheelPID[i]));

		if(torque_sum>3.9){
 80050e8:	4628      	mov	r0, r5
 80050ea:	f7fb fa3d 	bl	8000568 <__aeabi_f2d>
 80050ee:	a36e      	add	r3, pc, #440	; (adr r3, 80052a8 <driveWheelTask+0x350>)
 80050f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f4:	f7fb fd20 	bl	8000b38 <__aeabi_dcmpgt>
 80050f8:	4d7a      	ldr	r5, [pc, #488]	; (80052e4 <driveWheelTask+0x38c>)
 80050fa:	f10d 0810 	add.w	r8, sp, #16
 80050fe:	2800      	cmp	r0, #0
 8005100:	f040 80f4 	bne.w	80052ec <driveWheelTask+0x394>
 8005104:	f105 0910 	add.w	r9, r5, #16
 8005108:	4647      	mov	r7, r8
		int error = mecanum.wheel_rpm[i] - wheelFdb[i].rpm;
 800510a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800510e:	ecb5 7a01 	vldmia	r5!, {s14}
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		u[i] = (int16_t) pidExecute(&(wheelPID[i]));
 800511a:	4620      	mov	r0, r4
		int error = mecanum.wheel_rpm[i] - wheelFdb[i].rpm;
 800511c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005120:	360c      	adds	r6, #12
 8005122:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005126:	342c      	adds	r4, #44	; 0x2c
		wheelPID[i].error = error;
 8005128:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800512c:	ed44 7a01 	vstr	s15, [r4, #-4]
		u[i] = (int16_t) pidExecute(&(wheelPID[i]));
 8005130:	f001 fa08 	bl	8006544 <pidExecute>
 8005134:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	for (int i = 0; i < 4; i++) {
 8005138:	454d      	cmp	r5, r9
		u[i] = (int16_t) pidExecute(&(wheelPID[i]));
 800513a:	ee10 3a10 	vmov	r3, s0
 800513e:	f827 3b02 	strh.w	r3, [r7], #2
	for (int i = 0; i < 4; i++) {
 8005142:	d1e2      	bne.n	800510a <driveWheelTask+0x1b2>
			for (int i = 0; i < 4; i++) {
				u[i] = 0;
			}
		}
	}
	driveWheel(u);
 8005144:	4640      	mov	r0, r8
 8005146:	f001 f93d 	bl	80063c4 <driveWheel>


}
 800514a:	b007      	add	sp, #28
 800514c:	ecbd 8b02 	vpop	{d8}
 8005150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(cnt_tim_omega<=100)     {mecanum.speed.vw=-(float)(rc.ch5-400.0)/660.0*MAX_CHASSIS_VW_SPEED;feed_forward_param=-5;}
 8005154:	f8df b178 	ldr.w	fp, [pc, #376]	; 80052d0 <driveWheelTask+0x378>
 8005158:	f8bb a000 	ldrh.w	sl, [fp]
 800515c:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 8005160:	f240 80e8 	bls.w	8005334 <driveWheelTask+0x3dc>
		else if(cnt_tim_omega<=150){mecanum.speed.vw=-(float)(rc.ch5-300.0)/660.0*MAX_CHASSIS_VW_SPEED;feed_forward_param=-4;}
 8005164:	f1ba 0f96 	cmp.w	sl, #150	; 0x96
 8005168:	f200 8100 	bhi.w	800536c <driveWheelTask+0x414>
 800516c:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8005170:	4c58      	ldr	r4, [pc, #352]	; (80052d4 <driveWheelTask+0x37c>)
 8005172:	f7fb f9e7 	bl	8000544 <__aeabi_i2d>
 8005176:	a34e      	add	r3, pc, #312	; (adr r3, 80052b0 <driveWheelTask+0x358>)
 8005178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517c:	f7fb f894 	bl	80002a8 <__aeabi_dsub>
 8005180:	f7fb fd22 	bl	8000bc8 <__aeabi_d2f>
 8005184:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8005188:	f7fb f9ee 	bl	8000568 <__aeabi_f2d>
 800518c:	a344      	add	r3, pc, #272	; (adr r3, 80052a0 <driveWheelTask+0x348>)
 800518e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005192:	f7fb fa41 	bl	8000618 <__aeabi_dmul>
 8005196:	f7fb fd17 	bl	8000bc8 <__aeabi_d2f>
 800519a:	4b4c      	ldr	r3, [pc, #304]	; (80052cc <driveWheelTask+0x374>)
 800519c:	61e0      	str	r0, [r4, #28]
 800519e:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80051a2:	801a      	strh	r2, [r3, #0]
 80051a4:	881b      	ldrh	r3, [r3, #0]
		cnt_tim_omega++;
 80051a6:	f10a 0a01 	add.w	sl, sl, #1
 80051aa:	fa1f fa8a 	uxth.w	sl, sl
 80051ae:	ee08 3a10 	vmov	s16, r3
		if(cnt_tim_omega>800){cnt_tim_omega=0;}
 80051b2:	f5ba 7f48 	cmp.w	sl, #800	; 0x320
 80051b6:	bf88      	it	hi
 80051b8:	2300      	movhi	r3, #0
 80051ba:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
		cnt_tim_omega++;
 80051be:	f8ab a000 	strh.w	sl, [fp]
		if(cnt_tim_omega>800){cnt_tim_omega=0;}
 80051c2:	bf88      	it	hi
 80051c4:	f8ab 3000 	strhhi.w	r3, [fp]
		vx_temp =  (float) rc.ch4 / 660.0 * MAX_CHASSIS_VX_SPEED_calc*2.0/2.5;
 80051c8:	4642      	mov	r2, r8
 80051ca:	464b      	mov	r3, r9
 80051cc:	4640      	mov	r0, r8
 80051ce:	4649      	mov	r1, r9
 80051d0:	f7fb f86c 	bl	80002ac <__adddf3>
 80051d4:	f7fb fcf8 	bl	8000bc8 <__aeabi_d2f>
		mecanum.speed.vx = vx_temp*cos((IMU_yaw+feed_forward_param)*M_PI/180.0)
 80051d8:	f7fb f9c6 	bl	8000568 <__aeabi_f2d>
 80051dc:	4b42      	ldr	r3, [pc, #264]	; (80052e8 <driveWheelTask+0x390>)
 80051de:	edd3 7a00 	vldr	s15, [r3]
 80051e2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80051e6:	4680      	mov	r8, r0
 80051e8:	ee17 0a90 	vmov	r0, s15
 80051ec:	4689      	mov	r9, r1
 80051ee:	f7fb f9bb 	bl	8000568 <__aeabi_f2d>
 80051f2:	a331      	add	r3, pc, #196	; (adr r3, 80052b8 <driveWheelTask+0x360>)
 80051f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f8:	f7fb fa0e 	bl	8000618 <__aeabi_dmul>
 80051fc:	ec41 0b10 	vmov	d0, r0, r1
 8005200:	ec41 0b18 	vmov	d8, r0, r1
 8005204:	f004 fdac 	bl	8009d60 <cos>
		vy_temp = -(float) rc.ch3 / 660.0 * MAX_CHASSIS_VY_SPEED_calc*2.0/2.5;
 8005208:	4632      	mov	r2, r6
 800520a:	463b      	mov	r3, r7
 800520c:	4630      	mov	r0, r6
 800520e:	4639      	mov	r1, r7
		mecanum.speed.vx = vx_temp*cos((IMU_yaw+feed_forward_param)*M_PI/180.0)
 8005210:	ed8d 0b00 	vstr	d0, [sp]
		vy_temp = -(float) rc.ch3 / 660.0 * MAX_CHASSIS_VY_SPEED_calc*2.0/2.5;
 8005214:	f7fb f84a 	bl	80002ac <__adddf3>
 8005218:	f7fb fcd6 	bl	8000bc8 <__aeabi_d2f>
								- vy_temp*sin((IMU_yaw+feed_forward_param)*M_PI/180.0);
 800521c:	f7fb f9a4 	bl	8000568 <__aeabi_f2d>
 8005220:	eeb0 0a48 	vmov.f32	s0, s16
 8005224:	eef0 0a68 	vmov.f32	s1, s17
 8005228:	4682      	mov	sl, r0
 800522a:	468b      	mov	fp, r1
 800522c:	f004 fddc 	bl	8009de8 <sin>
		mecanum.speed.vx = vx_temp*cos((IMU_yaw+feed_forward_param)*M_PI/180.0)
 8005230:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005234:	4640      	mov	r0, r8
 8005236:	4649      	mov	r1, r9
								- vy_temp*sin((IMU_yaw+feed_forward_param)*M_PI/180.0);
 8005238:	ec57 6b10 	vmov	r6, r7, d0
		mecanum.speed.vx = vx_temp*cos((IMU_yaw+feed_forward_param)*M_PI/180.0)
 800523c:	f7fb f9ec 	bl	8000618 <__aeabi_dmul>
								- vy_temp*sin((IMU_yaw+feed_forward_param)*M_PI/180.0);
 8005240:	4632      	mov	r2, r6
		mecanum.speed.vx = vx_temp*cos((IMU_yaw+feed_forward_param)*M_PI/180.0)
 8005242:	e9cd 0102 	strd	r0, r1, [sp, #8]
								- vy_temp*sin((IMU_yaw+feed_forward_param)*M_PI/180.0);
 8005246:	463b      	mov	r3, r7
 8005248:	4650      	mov	r0, sl
 800524a:	4659      	mov	r1, fp
 800524c:	f7fb f9e4 	bl	8000618 <__aeabi_dmul>
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005258:	f7fb f826 	bl	80002a8 <__aeabi_dsub>
 800525c:	f7fb fcb4 	bl	8000bc8 <__aeabi_d2f>
		mecanum.speed.vy = vx_temp*sin((IMU_yaw+feed_forward_param)*M_PI/180.0)
 8005260:	4632      	mov	r2, r6
 8005262:	463b      	mov	r3, r7
								- vy_temp*sin((IMU_yaw+feed_forward_param)*M_PI/180.0);
 8005264:	6160      	str	r0, [r4, #20]
		mecanum.speed.vy = vx_temp*sin((IMU_yaw+feed_forward_param)*M_PI/180.0)
 8005266:	4649      	mov	r1, r9
 8005268:	4640      	mov	r0, r8
 800526a:	f7fb f9d5 	bl	8000618 <__aeabi_dmul>
								+ vy_temp*cos((IMU_yaw+feed_forward_param)*M_PI/180.0);
 800526e:	4652      	mov	r2, sl
		mecanum.speed.vy = vx_temp*sin((IMU_yaw+feed_forward_param)*M_PI/180.0)
 8005270:	4606      	mov	r6, r0
 8005272:	460f      	mov	r7, r1
								+ vy_temp*cos((IMU_yaw+feed_forward_param)*M_PI/180.0);
 8005274:	465b      	mov	r3, fp
 8005276:	e9dd 0100 	ldrd	r0, r1, [sp]
 800527a:	f7fb f9cd 	bl	8000618 <__aeabi_dmul>
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	4630      	mov	r0, r6
 8005284:	4639      	mov	r1, r7
 8005286:	f7fb f811 	bl	80002ac <__adddf3>
 800528a:	f7fb fc9d 	bl	8000bc8 <__aeabi_d2f>
 800528e:	61a0      	str	r0, [r4, #24]
 8005290:	e725      	b.n	80050de <driveWheelTask+0x186>
 8005292:	bf00      	nop
 8005294:	f3af 8000 	nop.w
 8005298:	0624dd2f 	.word	0x0624dd2f
 800529c:	3fc39581 	.word	0x3fc39581
 80052a0:	d1745d17 	.word	0xd1745d17
 80052a4:	3fcd1745 	.word	0x3fcd1745
 80052a8:	33333333 	.word	0x33333333
 80052ac:	400f3333 	.word	0x400f3333
 80052b0:	00000000 	.word	0x00000000
 80052b4:	4072c000 	.word	0x4072c000
 80052b8:	a2529d39 	.word	0xa2529d39
 80052bc:	3f91df46 	.word	0x3f91df46
 80052c0:	200003bc 	.word	0x200003bc
 80052c4:	20000374 	.word	0x20000374
 80052c8:	3f540000 	.word	0x3f540000
 80052cc:	200005b0 	.word	0x200005b0
 80052d0:	20000540 	.word	0x20000540
 80052d4:	20000544 	.word	0x20000544
 80052d8:	3ff00000 	.word	0x3ff00000
 80052dc:	40040000 	.word	0x40040000
 80052e0:	20000488 	.word	0x20000488
 80052e4:	20000584 	.word	0x20000584
 80052e8:	20000394 	.word	0x20000394
 80052ec:	f105 0a10 	add.w	sl, r5, #16
 80052f0:	46c1      	mov	r9, r8
				u[i] = 0;
 80052f2:	2700      	movs	r7, #0
		int error = mecanum.wheel_rpm[i] - wheelFdb[i].rpm;
 80052f4:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80052f8:	ecb5 7a01 	vldmia	r5!, {s14}
 80052fc:	ee07 3a90 	vmov	s15, r3
 8005300:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		u[i] = (int16_t) pidExecute(&(wheelPID[i]));
 8005304:	4620      	mov	r0, r4
		int error = mecanum.wheel_rpm[i] - wheelFdb[i].rpm;
 8005306:	ee77 7a67 	vsub.f32	s15, s14, s15
 800530a:	360c      	adds	r6, #12
 800530c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005310:	342c      	adds	r4, #44	; 0x2c
		wheelPID[i].error = error;
 8005312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005316:	ed44 7a01 	vstr	s15, [r4, #-4]
		u[i] = (int16_t) pidExecute(&(wheelPID[i]));
 800531a:	f001 f913 	bl	8006544 <pidExecute>
 800531e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	for (int i = 0; i < 4; i++) {
 8005322:	45aa      	cmp	sl, r5
		u[i] = (int16_t) pidExecute(&(wheelPID[i]));
 8005324:	ee10 3a10 	vmov	r3, s0
 8005328:	f829 3b02 	strh.w	r3, [r9], #2
				u[i] = 0;
 800532c:	e9cd 7704 	strd	r7, r7, [sp, #16]
	for (int i = 0; i < 4; i++) {
 8005330:	d1e0      	bne.n	80052f4 <driveWheelTask+0x39c>
 8005332:	e707      	b.n	8005144 <driveWheelTask+0x1ec>
		else if(cnt_tim_omega<=800){mecanum.speed.vw=-(float)(rc.ch5-400.0)/660.0*MAX_CHASSIS_VW_SPEED;feed_forward_param=-5;}
 8005334:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8005338:	4c69      	ldr	r4, [pc, #420]	; (80054e0 <driveWheelTask+0x588>)
 800533a:	f7fb f903 	bl	8000544 <__aeabi_i2d>
 800533e:	2200      	movs	r2, #0
 8005340:	4b68      	ldr	r3, [pc, #416]	; (80054e4 <driveWheelTask+0x58c>)
 8005342:	f7fa ffb1 	bl	80002a8 <__aeabi_dsub>
 8005346:	f7fb fc3f 	bl	8000bc8 <__aeabi_d2f>
 800534a:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800534e:	f7fb f90b 	bl	8000568 <__aeabi_f2d>
 8005352:	a35f      	add	r3, pc, #380	; (adr r3, 80054d0 <driveWheelTask+0x578>)
 8005354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005358:	f7fb f95e 	bl	8000618 <__aeabi_dmul>
 800535c:	f7fb fc34 	bl	8000bc8 <__aeabi_d2f>
 8005360:	4b61      	ldr	r3, [pc, #388]	; (80054e8 <driveWheelTask+0x590>)
 8005362:	61e0      	str	r0, [r4, #28]
 8005364:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8005368:	801a      	strh	r2, [r3, #0]
 800536a:	e71b      	b.n	80051a4 <driveWheelTask+0x24c>
		else if(cnt_tim_omega<=199){mecanum.speed.vw=-(float)(rc.ch5-100.0)/660.0*MAX_CHASSIS_VW_SPEED;feed_forward_param=-2;}
 800536c:	f1ba 0fc7 	cmp.w	sl, #199	; 0xc7
 8005370:	d920      	bls.n	80053b4 <driveWheelTask+0x45c>
		else if(cnt_tim_omega==200){mecanum.speed.vw=-(float)(rc.ch5-  0.0)/660.0*MAX_CHASSIS_VW_SPEED;feed_forward_param=0;}
 8005372:	f1ba 0fc8 	cmp.w	sl, #200	; 0xc8
 8005376:	d058      	beq.n	800542a <driveWheelTask+0x4d2>
		else if(cnt_tim_omega<=250){mecanum.speed.vw=-(float)(rc.ch5+100.0)/660.0*MAX_CHASSIS_VW_SPEED;feed_forward_param=2;}
 8005378:	f1ba 0ffa 	cmp.w	sl, #250	; 0xfa
 800537c:	d836      	bhi.n	80053ec <driveWheelTask+0x494>
 800537e:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8005382:	4c57      	ldr	r4, [pc, #348]	; (80054e0 <driveWheelTask+0x588>)
 8005384:	f7fb f8de 	bl	8000544 <__aeabi_i2d>
 8005388:	2200      	movs	r2, #0
 800538a:	4b58      	ldr	r3, [pc, #352]	; (80054ec <driveWheelTask+0x594>)
 800538c:	f7fa ff8e 	bl	80002ac <__adddf3>
 8005390:	f7fb fc1a 	bl	8000bc8 <__aeabi_d2f>
 8005394:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8005398:	f7fb f8e6 	bl	8000568 <__aeabi_f2d>
 800539c:	a34c      	add	r3, pc, #304	; (adr r3, 80054d0 <driveWheelTask+0x578>)
 800539e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a2:	f7fb f939 	bl	8000618 <__aeabi_dmul>
 80053a6:	f7fb fc0f 	bl	8000bc8 <__aeabi_d2f>
 80053aa:	4b4f      	ldr	r3, [pc, #316]	; (80054e8 <driveWheelTask+0x590>)
 80053ac:	61e0      	str	r0, [r4, #28]
 80053ae:	2202      	movs	r2, #2
 80053b0:	801a      	strh	r2, [r3, #0]
 80053b2:	e6f7      	b.n	80051a4 <driveWheelTask+0x24c>
		else if(cnt_tim_omega<=199){mecanum.speed.vw=-(float)(rc.ch5-100.0)/660.0*MAX_CHASSIS_VW_SPEED;feed_forward_param=-2;}
 80053b4:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 80053b8:	4c49      	ldr	r4, [pc, #292]	; (80054e0 <driveWheelTask+0x588>)
 80053ba:	f7fb f8c3 	bl	8000544 <__aeabi_i2d>
 80053be:	2200      	movs	r2, #0
 80053c0:	4b4a      	ldr	r3, [pc, #296]	; (80054ec <driveWheelTask+0x594>)
 80053c2:	f7fa ff71 	bl	80002a8 <__aeabi_dsub>
 80053c6:	f7fb fbff 	bl	8000bc8 <__aeabi_d2f>
 80053ca:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80053ce:	f7fb f8cb 	bl	8000568 <__aeabi_f2d>
 80053d2:	a33f      	add	r3, pc, #252	; (adr r3, 80054d0 <driveWheelTask+0x578>)
 80053d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d8:	f7fb f91e 	bl	8000618 <__aeabi_dmul>
 80053dc:	f7fb fbf4 	bl	8000bc8 <__aeabi_d2f>
 80053e0:	4b41      	ldr	r3, [pc, #260]	; (80054e8 <driveWheelTask+0x590>)
 80053e2:	61e0      	str	r0, [r4, #28]
 80053e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80053e8:	801a      	strh	r2, [r3, #0]
 80053ea:	e6db      	b.n	80051a4 <driveWheelTask+0x24c>
		else if(cnt_tim_omega<=300){mecanum.speed.vw=-(float)(rc.ch5+300.0)/660.0*MAX_CHASSIS_VW_SPEED;feed_forward_param=4;}
 80053ec:	f5ba 7f96 	cmp.w	sl, #300	; 0x12c
 80053f0:	d838      	bhi.n	8005464 <driveWheelTask+0x50c>
 80053f2:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 80053f6:	4c3a      	ldr	r4, [pc, #232]	; (80054e0 <driveWheelTask+0x588>)
 80053f8:	f7fb f8a4 	bl	8000544 <__aeabi_i2d>
 80053fc:	a336      	add	r3, pc, #216	; (adr r3, 80054d8 <driveWheelTask+0x580>)
 80053fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005402:	f7fa ff53 	bl	80002ac <__adddf3>
 8005406:	f7fb fbdf 	bl	8000bc8 <__aeabi_d2f>
 800540a:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800540e:	f7fb f8ab 	bl	8000568 <__aeabi_f2d>
 8005412:	a32f      	add	r3, pc, #188	; (adr r3, 80054d0 <driveWheelTask+0x578>)
 8005414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005418:	f7fb f8fe 	bl	8000618 <__aeabi_dmul>
 800541c:	f7fb fbd4 	bl	8000bc8 <__aeabi_d2f>
 8005420:	4b31      	ldr	r3, [pc, #196]	; (80054e8 <driveWheelTask+0x590>)
 8005422:	61e0      	str	r0, [r4, #28]
 8005424:	2204      	movs	r2, #4
 8005426:	801a      	strh	r2, [r3, #0]
 8005428:	e6bc      	b.n	80051a4 <driveWheelTask+0x24c>
		else if(cnt_tim_omega==200){mecanum.speed.vw=-(float)(rc.ch5-  0.0)/660.0*MAX_CHASSIS_VW_SPEED;feed_forward_param=0;}
 800542a:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 800542e:	4c2c      	ldr	r4, [pc, #176]	; (80054e0 <driveWheelTask+0x588>)
		cnt_tim_omega++;
 8005430:	ed9f 8a2f 	vldr	s16, [pc, #188]	; 80054f0 <driveWheelTask+0x598>
		else if(cnt_tim_omega==200){mecanum.speed.vw=-(float)(rc.ch5-  0.0)/660.0*MAX_CHASSIS_VW_SPEED;feed_forward_param=0;}
 8005434:	f7fb f886 	bl	8000544 <__aeabi_i2d>
 8005438:	f7fb fbc6 	bl	8000bc8 <__aeabi_d2f>
 800543c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8005440:	f7fb f892 	bl	8000568 <__aeabi_f2d>
 8005444:	a322      	add	r3, pc, #136	; (adr r3, 80054d0 <driveWheelTask+0x578>)
 8005446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544a:	f7fb f8e5 	bl	8000618 <__aeabi_dmul>
 800544e:	f7fb fbbb 	bl	8000bc8 <__aeabi_d2f>
 8005452:	4b25      	ldr	r3, [pc, #148]	; (80054e8 <driveWheelTask+0x590>)
 8005454:	61e0      	str	r0, [r4, #28]
		cnt_tim_omega++;
 8005456:	f10a 0a01 	add.w	sl, sl, #1
		else if(cnt_tim_omega==200){mecanum.speed.vw=-(float)(rc.ch5-  0.0)/660.0*MAX_CHASSIS_VW_SPEED;feed_forward_param=0;}
 800545a:	2200      	movs	r2, #0
		cnt_tim_omega++;
 800545c:	f8ab a000 	strh.w	sl, [fp]
		else if(cnt_tim_omega==200){mecanum.speed.vw=-(float)(rc.ch5-  0.0)/660.0*MAX_CHASSIS_VW_SPEED;feed_forward_param=0;}
 8005460:	801a      	strh	r2, [r3, #0]
 8005462:	e6b1      	b.n	80051c8 <driveWheelTask+0x270>
		else if(cnt_tim_omega<=400){mecanum.speed.vw=-(float)(rc.ch5+400.0)/660.0*MAX_CHASSIS_VW_SPEED;feed_forward_param=5;}
 8005464:	f5ba 7ffa 	cmp.w	sl, #500	; 0x1f4
 8005468:	d916      	bls.n	8005498 <driveWheelTask+0x540>
		else if(cnt_tim_omega<=550){mecanum.speed.vw=-(float)(rc.ch5+300.0)/660.0*MAX_CHASSIS_VW_SPEED;feed_forward_param=4;}
 800546a:	f240 2326 	movw	r3, #550	; 0x226
 800546e:	459a      	cmp	sl, r3
 8005470:	d9bf      	bls.n	80053f2 <driveWheelTask+0x49a>
		else if(cnt_tim_omega<=599){mecanum.speed.vw=-(float)(rc.ch5+100.0)/660.0*MAX_CHASSIS_VW_SPEED;feed_forward_param=2;}
 8005472:	f5ba 7f16 	cmp.w	sl, #600	; 0x258
 8005476:	d382      	bcc.n	800537e <driveWheelTask+0x426>
		else if(cnt_tim_omega==600){mecanum.speed.vw=-(float)(rc.ch5+  0.0)/660.0*MAX_CHASSIS_VW_SPEED;feed_forward_param=0;}
 8005478:	d0d7      	beq.n	800542a <driveWheelTask+0x4d2>
		else if(cnt_tim_omega<=650){mecanum.speed.vw=-(float)(rc.ch5-100.0)/660.0*MAX_CHASSIS_VW_SPEED;feed_forward_param=-2;}
 800547a:	f240 238a 	movw	r3, #650	; 0x28a
 800547e:	459a      	cmp	sl, r3
 8005480:	d998      	bls.n	80053b4 <driveWheelTask+0x45c>
		else if(cnt_tim_omega<=700){mecanum.speed.vw=-(float)(rc.ch5-300.0)/660.0*MAX_CHASSIS_VW_SPEED;feed_forward_param=-4;}
 8005482:	f5ba 7f2f 	cmp.w	sl, #700	; 0x2bc
 8005486:	f67f ae71 	bls.w	800516c <driveWheelTask+0x214>
		else if(cnt_tim_omega<=800){mecanum.speed.vw=-(float)(rc.ch5-400.0)/660.0*MAX_CHASSIS_VW_SPEED;feed_forward_param=-5;}
 800548a:	f5ba 7f48 	cmp.w	sl, #800	; 0x320
 800548e:	f67f af51 	bls.w	8005334 <driveWheelTask+0x3dc>
 8005492:	4c13      	ldr	r4, [pc, #76]	; (80054e0 <driveWheelTask+0x588>)
 8005494:	4b14      	ldr	r3, [pc, #80]	; (80054e8 <driveWheelTask+0x590>)
 8005496:	e685      	b.n	80051a4 <driveWheelTask+0x24c>
		else if(cnt_tim_omega<=400){mecanum.speed.vw=-(float)(rc.ch5+400.0)/660.0*MAX_CHASSIS_VW_SPEED;feed_forward_param=5;}
 8005498:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 800549c:	4c10      	ldr	r4, [pc, #64]	; (80054e0 <driveWheelTask+0x588>)
 800549e:	f7fb f851 	bl	8000544 <__aeabi_i2d>
 80054a2:	2200      	movs	r2, #0
 80054a4:	4b0f      	ldr	r3, [pc, #60]	; (80054e4 <driveWheelTask+0x58c>)
 80054a6:	f7fa ff01 	bl	80002ac <__adddf3>
 80054aa:	f7fb fb8d 	bl	8000bc8 <__aeabi_d2f>
 80054ae:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80054b2:	f7fb f859 	bl	8000568 <__aeabi_f2d>
 80054b6:	a306      	add	r3, pc, #24	; (adr r3, 80054d0 <driveWheelTask+0x578>)
 80054b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054bc:	f7fb f8ac 	bl	8000618 <__aeabi_dmul>
 80054c0:	f7fb fb82 	bl	8000bc8 <__aeabi_d2f>
 80054c4:	4b08      	ldr	r3, [pc, #32]	; (80054e8 <driveWheelTask+0x590>)
 80054c6:	61e0      	str	r0, [r4, #28]
 80054c8:	2205      	movs	r2, #5
 80054ca:	801a      	strh	r2, [r3, #0]
 80054cc:	e66a      	b.n	80051a4 <driveWheelTask+0x24c>
 80054ce:	bf00      	nop
 80054d0:	d1745d17 	.word	0xd1745d17
 80054d4:	3fcd1745 	.word	0x3fcd1745
 80054d8:	00000000 	.word	0x00000000
 80054dc:	4072c000 	.word	0x4072c000
 80054e0:	20000544 	.word	0x20000544
 80054e4:	40790000 	.word	0x40790000
 80054e8:	200005b0 	.word	0x200005b0
 80054ec:	40590000 	.word	0x40590000
 80054f0:	00000000 	.word	0x00000000

080054f4 <initFriction>:
	mecanum.param.wheelbase = WHEELBASE;
	mecanum.param.rotate_x_offset = 0;
	mecanum.param.rotate_y_offset = 0;
}

void initFriction() {
 80054f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054f8:	4c52      	ldr	r4, [pc, #328]	; (8005644 <initFriction+0x150>)
 80054fa:	f8df a154 	ldr.w	sl, [pc, #340]	; 8005650 <initFriction+0x15c>
 80054fe:	4d52      	ldr	r5, [pc, #328]	; (8005648 <initFriction+0x154>)
	imu_sensor.my=imu.my;
	imu_sensor.mz=imu.mz;
	imu_sensor.wx=imu.wx;
	imu_sensor.wy=imu.wy;
	imu_sensor.wz=imu.wz;
	madgwick_ahrs_updateIMU(&imu_sensor, &imu_attitude);
 8005500:	4f52      	ldr	r7, [pc, #328]	; (800564c <initFriction+0x158>)
void initFriction() {
 8005502:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
	madgwick_ahrs_updateIMU(&imu_sensor, &imu_attitude);
 8005506:	4626      	mov	r6, r4
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 2000);
 8005508:	46c1      	mov	r9, r8
 800550a:	f8da 3000 	ldr.w	r3, [sl]
 800550e:	f8c3 9034 	str.w	r9, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 2000);
 8005512:	f8c3 9038 	str.w	r9, [r3, #56]	; 0x38
	mpu_get_data();
 8005516:	f7fe fc83 	bl	8003e20 <mpu_get_data>
	imu_sensor.ax=imu.ax;
 800551a:	f9b5 3000 	ldrsh.w	r3, [r5]
	imu_sensor.wx=imu.wx;
 800551e:	f8d5 c010 	ldr.w	ip, [r5, #16]
	imu_sensor.wy=imu.wy;
 8005522:	696a      	ldr	r2, [r5, #20]
	imu_sensor.wx=imu.wx;
 8005524:	f8c4 c00c 	str.w	ip, [r4, #12]
	imu_sensor.ax=imu.ax;
 8005528:	ee05 3a10 	vmov	s10, r3
	imu_sensor.ay=imu.ay;
 800552c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
	imu_sensor.wy=imu.wy;
 8005530:	6122      	str	r2, [r4, #16]
	imu_sensor.ay=imu.ay;
 8005532:	ee05 3a90 	vmov	s11, r3
	imu_sensor.az=imu.az;
 8005536:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800553a:	ee06 3a10 	vmov	s12, r3
	imu_sensor.mx=imu.mx;
 800553e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8005542:	ee06 3a90 	vmov	s13, r3
	imu_sensor.my=imu.my;
 8005546:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 800554a:	ee07 3a10 	vmov	s14, r3
	imu_sensor.mz=imu.mz;
 800554e:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8005552:	ee07 3a90 	vmov	s15, r3
	imu_sensor.ax=imu.ax;
 8005556:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
	imu_sensor.ay=imu.ay;
 800555a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
	imu_sensor.az=imu.az;
 800555e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
	imu_sensor.mx=imu.mx;
 8005562:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	imu_sensor.my=imu.my;
 8005566:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	imu_sensor.mz=imu.mz;
 800556a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	imu_sensor.wz=imu.wz;
 800556e:	69ab      	ldr	r3, [r5, #24]
	imu_sensor.ax=imu.ax;
 8005570:	ed84 5a00 	vstr	s10, [r4]
	madgwick_ahrs_updateIMU(&imu_sensor, &imu_attitude);
 8005574:	4639      	mov	r1, r7
 8005576:	4630      	mov	r0, r6
	imu_sensor.ay=imu.ay;
 8005578:	edc4 5a01 	vstr	s11, [r4, #4]
	imu_sensor.az=imu.az;
 800557c:	ed84 6a02 	vstr	s12, [r4, #8]
	imu_sensor.mx=imu.mx;
 8005580:	edc4 6a06 	vstr	s13, [r4, #24]
	imu_sensor.my=imu.my;
 8005584:	ed84 7a07 	vstr	s14, [r4, #28]
	imu_sensor.mz=imu.mz;
 8005588:	edc4 7a08 	vstr	s15, [r4, #32]
	imu_sensor.wz=imu.wz;
 800558c:	6163      	str	r3, [r4, #20]
	madgwick_ahrs_updateIMU(&imu_sensor, &imu_attitude);
 800558e:	f7ff f857 	bl	8004640 <madgwick_ahrs_updateIMU>
	HAL_Delay(1);
 8005592:	2001      	movs	r0, #1
 8005594:	f7fb fd38 	bl	8001008 <HAL_Delay>
	for(int i=0;i<2000;i++){
 8005598:	f1b8 0801 	subs.w	r8, r8, #1
 800559c:	d1b5      	bne.n	800550a <initFriction+0x16>
	imu_sensor.my=imu.my;
	imu_sensor.mz=imu.mz;
	imu_sensor.wx=imu.wx;
	imu_sensor.wy=imu.wy;
	imu_sensor.wz=imu.wz;
	madgwick_ahrs_updateIMU(&imu_sensor, &imu_attitude);
 800559e:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800564c <initFriction+0x158>
 80055a2:	4f28      	ldr	r7, [pc, #160]	; (8005644 <initFriction+0x150>)
 80055a4:	f640 16c4 	movw	r6, #2500	; 0x9c4
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 1500);
 80055a8:	f240 59dc 	movw	r9, #1500	; 0x5dc
 80055ac:	f8da 3000 	ldr.w	r3, [sl]
 80055b0:	f8c3 9034 	str.w	r9, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 1500);
 80055b4:	f8c3 9038 	str.w	r9, [r3, #56]	; 0x38
	mpu_get_data();
 80055b8:	f7fe fc32 	bl	8003e20 <mpu_get_data>
	imu_sensor.ax=imu.ax;
 80055bc:	f9b5 3000 	ldrsh.w	r3, [r5]
	imu_sensor.wx=imu.wx;
 80055c0:	f8d5 c010 	ldr.w	ip, [r5, #16]
	imu_sensor.wy=imu.wy;
 80055c4:	696a      	ldr	r2, [r5, #20]
	imu_sensor.wx=imu.wx;
 80055c6:	f8c4 c00c 	str.w	ip, [r4, #12]
	imu_sensor.ax=imu.ax;
 80055ca:	ee05 3a10 	vmov	s10, r3
	imu_sensor.ay=imu.ay;
 80055ce:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
	imu_sensor.wy=imu.wy;
 80055d2:	6122      	str	r2, [r4, #16]
	imu_sensor.ay=imu.ay;
 80055d4:	ee05 3a90 	vmov	s11, r3
	imu_sensor.az=imu.az;
 80055d8:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80055dc:	ee06 3a10 	vmov	s12, r3
	imu_sensor.mx=imu.mx;
 80055e0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80055e4:	ee06 3a90 	vmov	s13, r3
	imu_sensor.my=imu.my;
 80055e8:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 80055ec:	ee07 3a10 	vmov	s14, r3
	imu_sensor.mz=imu.mz;
 80055f0:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 80055f4:	ee07 3a90 	vmov	s15, r3
	imu_sensor.ax=imu.ax;
 80055f8:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
	imu_sensor.ay=imu.ay;
 80055fc:	eef8 5ae5 	vcvt.f32.s32	s11, s11
	imu_sensor.az=imu.az;
 8005600:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
	imu_sensor.mx=imu.mx;
 8005604:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	imu_sensor.my=imu.my;
 8005608:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	imu_sensor.mz=imu.mz;
 800560c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	imu_sensor.wz=imu.wz;
 8005610:	69ab      	ldr	r3, [r5, #24]
	imu_sensor.ax=imu.ax;
 8005612:	ed84 5a00 	vstr	s10, [r4]
	madgwick_ahrs_updateIMU(&imu_sensor, &imu_attitude);
 8005616:	4641      	mov	r1, r8
 8005618:	4638      	mov	r0, r7
	imu_sensor.ay=imu.ay;
 800561a:	edc4 5a01 	vstr	s11, [r4, #4]
	imu_sensor.az=imu.az;
 800561e:	ed84 6a02 	vstr	s12, [r4, #8]
	imu_sensor.mx=imu.mx;
 8005622:	edc4 6a06 	vstr	s13, [r4, #24]
	imu_sensor.my=imu.my;
 8005626:	ed84 7a07 	vstr	s14, [r4, #28]
	imu_sensor.mz=imu.mz;
 800562a:	edc4 7a08 	vstr	s15, [r4, #32]
	imu_sensor.wz=imu.wz;
 800562e:	6163      	str	r3, [r4, #20]
	madgwick_ahrs_updateIMU(&imu_sensor, &imu_attitude);
 8005630:	f7ff f806 	bl	8004640 <madgwick_ahrs_updateIMU>
	HAL_Delay(1);
 8005634:	2001      	movs	r0, #1
 8005636:	f7fb fce7 	bl	8001008 <HAL_Delay>
	for(int i=0;i<2500;i++){
 800563a:	3e01      	subs	r6, #1
 800563c:	d1b6      	bne.n	80055ac <initFriction+0xb8>
	}

}
 800563e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005642:	bf00      	nop
 8005644:	20000620 	.word	0x20000620
 8005648:	20000218 	.word	0x20000218
 800564c:	200003b0 	.word	0x200003b0
 8005650:	200006e8 	.word	0x200006e8

08005654 <main>:
{
 8005654:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8005658:	b087      	sub	sp, #28
  HAL_Init();
 800565a:	f7fb fca9 	bl	8000fb0 <HAL_Init>
  SystemClock_Config();
 800565e:	f7ff fac5 	bl	8004bec <SystemClock_Config>
  MX_GPIO_Init();
 8005662:	f7fe ff11 	bl	8004488 <MX_GPIO_Init>
  MX_CAN1_Init();
 8005666:	f7fe fe11 	bl	800428c <MX_CAN1_Init>
  MX_CAN2_Init();
 800566a:	f7fe fe2f 	bl	80042cc <MX_CAN2_Init>
  MX_SPI5_Init();
 800566e:	f001 f84b 	bl	8006708 <MX_SPI5_Init>
  MX_TIM1_Init();
 8005672:	f001 f96d 	bl	8006950 <MX_TIM1_Init>
  MX_TIM6_Init();
 8005676:	f001 fb4b 	bl	8006d10 <MX_TIM6_Init>
  MX_TIM12_Init();
 800567a:	f001 fc63 	bl	8006f44 <MX_TIM12_Init>
  MX_UART7_Init();
 800567e:	f001 fd91 	bl	80071a4 <MX_UART7_Init>
  MX_UART8_Init();
 8005682:	f001 fdab 	bl	80071dc <MX_UART8_Init>
  MX_USART1_UART_Init();
 8005686:	f001 fdc5 	bl	8007214 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800568a:	f001 fde1 	bl	8007250 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 800568e:	f001 fa53 	bl	8006b38 <MX_TIM2_Init>
  MX_TIM8_Init();
 8005692:	f001 fb65 	bl	8006d60 <MX_TIM8_Init>
  HAL_UART_Receive_IT(&huart1, rcData, 18);
 8005696:	2212      	movs	r2, #18
 8005698:	49bb      	ldr	r1, [pc, #748]	; (8005988 <main+0x334>)
 800569a:	48bc      	ldr	r0, [pc, #752]	; (800598c <main+0x338>)
  sConfigOC.Pulse = map(90,0,180,500,2500);
 800569c:	4dbc      	ldr	r5, [pc, #752]	; (8005990 <main+0x33c>)
  IMU_pich_set=imu_attitude.pitch;
 800569e:	f8df a390 	ldr.w	sl, [pc, #912]	; 8005a30 <main+0x3dc>
 80056a2:	4ebc      	ldr	r6, [pc, #752]	; (8005994 <main+0x340>)
 80056a4:	4fbc      	ldr	r7, [pc, #752]	; (8005998 <main+0x344>)
	  printf("torque M0=%8.3lf M1=%8.3lf M2=%8.3lf M3=%8.3lf",(float)wheelFdb[0].torque/16384.0*20.0,(float)wheelFdb[1].torque/16384.0*20.0
 80056a6:	f8df b38c 	ldr.w	fp, [pc, #908]	; 8005a34 <main+0x3e0>
  HAL_UART_Receive_IT(&huart1, rcData, 18);
 80056aa:	f7fd fbf9 	bl	8002ea0 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 80056ae:	2200      	movs	r2, #0
 80056b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80056b4:	48b9      	ldr	r0, [pc, #740]	; (800599c <main+0x348>)
 80056b6:	f7fc f9df 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, 1);
 80056ba:	2201      	movs	r2, #1
 80056bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80056c0:	48b7      	ldr	r0, [pc, #732]	; (80059a0 <main+0x34c>)
 80056c2:	f7fc f9d9 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 1);
 80056c6:	2201      	movs	r2, #1
 80056c8:	2102      	movs	r1, #2
 80056ca:	48b6      	ldr	r0, [pc, #728]	; (80059a4 <main+0x350>)
 80056cc:	f7fc f9d4 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 80056d0:	2201      	movs	r2, #1
 80056d2:	2104      	movs	r1, #4
 80056d4:	48b3      	ldr	r0, [pc, #716]	; (80059a4 <main+0x350>)
 80056d6:	f7fc f9cf 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 80056da:	2201      	movs	r2, #1
 80056dc:	2108      	movs	r1, #8
 80056de:	48b1      	ldr	r0, [pc, #708]	; (80059a4 <main+0x350>)
 80056e0:	f7fc f9ca 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, 1);
 80056e4:	2201      	movs	r2, #1
 80056e6:	2110      	movs	r1, #16
 80056e8:	48ae      	ldr	r0, [pc, #696]	; (80059a4 <main+0x350>)
 80056ea:	f7fc f9c5 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, 1);
 80056ee:	2201      	movs	r2, #1
 80056f0:	2120      	movs	r1, #32
 80056f2:	48ac      	ldr	r0, [pc, #688]	; (80059a4 <main+0x350>)
 80056f4:	f7fc f9c0 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, 1);
 80056f8:	2201      	movs	r2, #1
 80056fa:	2140      	movs	r1, #64	; 0x40
 80056fc:	48a9      	ldr	r0, [pc, #676]	; (80059a4 <main+0x350>)
 80056fe:	f7fc f9bb 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, 1);
 8005702:	2201      	movs	r2, #1
 8005704:	2180      	movs	r1, #128	; 0x80
 8005706:	48a7      	ldr	r0, [pc, #668]	; (80059a4 <main+0x350>)
 8005708:	f7fc f9b6 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8, 1);
 800570c:	2201      	movs	r2, #1
 800570e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005712:	48a4      	ldr	r0, [pc, #656]	; (80059a4 <main+0x350>)
 8005714:	f7fc f9b0 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8005718:	2200      	movs	r2, #0
 800571a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800571e:	48a2      	ldr	r0, [pc, #648]	; (80059a8 <main+0x354>)
 8005720:	f7fc f9aa 	bl	8001a78 <HAL_GPIO_WritePin>
  sConfigOC.Pulse = map(90,0,180,500,2500);
 8005724:	f240 54dc 	movw	r4, #1500	; 0x5dc
  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8005728:	4629      	mov	r1, r5
 800572a:	2200      	movs	r2, #0
 800572c:	489f      	ldr	r0, [pc, #636]	; (80059ac <main+0x358>)
  sConfigOC.Pulse = map(90,0,180,500,2500);
 800572e:	606c      	str	r4, [r5, #4]
  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8005730:	f7fc ff98 	bl	8002664 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8005734:	2100      	movs	r1, #0
 8005736:	489d      	ldr	r0, [pc, #628]	; (80059ac <main+0x358>)
 8005738:	f7fc ff6a 	bl	8002610 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 800573c:	4629      	mov	r1, r5
 800573e:	2204      	movs	r2, #4
 8005740:	489a      	ldr	r0, [pc, #616]	; (80059ac <main+0x358>)
  sConfigOC.Pulse = map(90,0,180,500,2500);
 8005742:	606c      	str	r4, [r5, #4]
  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 8005744:	f7fc ff8e 	bl	8002664 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8005748:	2104      	movs	r1, #4
 800574a:	4898      	ldr	r0, [pc, #608]	; (80059ac <main+0x358>)
 800574c:	f7fc ff60 	bl	8002610 <HAL_TIM_PWM_Start>
  sConfigOC.Pulse = map(145,0,180,500,2500);
 8005750:	f640 043f 	movw	r4, #2111	; 0x83f
  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 8005754:	4629      	mov	r1, r5
 8005756:	2208      	movs	r2, #8
 8005758:	4894      	ldr	r0, [pc, #592]	; (80059ac <main+0x358>)
  sConfigOC.Pulse = map(145,0,180,500,2500);
 800575a:	606c      	str	r4, [r5, #4]
  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 800575c:	f7fc ff82 	bl	8002664 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8005760:	2108      	movs	r1, #8
 8005762:	4892      	ldr	r0, [pc, #584]	; (80059ac <main+0x358>)
 8005764:	f7fc ff54 	bl	8002610 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4);
 8005768:	220c      	movs	r2, #12
 800576a:	4629      	mov	r1, r5
 800576c:	488f      	ldr	r0, [pc, #572]	; (80059ac <main+0x358>)
  sConfigOC.Pulse = map(145,0,180,500,2500);
 800576e:	606c      	str	r4, [r5, #4]
  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4);
 8005770:	f7fc ff78 	bl	8002664 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8005774:	210c      	movs	r1, #12
 8005776:	488d      	ldr	r0, [pc, #564]	; (80059ac <main+0x358>)
	  printf("torque M0=%8.3lf M1=%8.3lf M2=%8.3lf M3=%8.3lf",(float)wheelFdb[0].torque/16384.0*20.0,(float)wheelFdb[1].torque/16384.0*20.0
 8005778:	4d8d      	ldr	r5, [pc, #564]	; (80059b0 <main+0x35c>)
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800577a:	f7fc ff49 	bl	8002610 <HAL_TIM_PWM_Start>
  mpu_device_init();
 800577e:	f7fe fccb 	bl	8004118 <mpu_device_init>
  mpu_offset_call();
 8005782:	f7fe fc1d 	bl	8003fc0 <mpu_offset_call>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); // friction wheel
 8005786:	2100      	movs	r1, #0
 8005788:	488a      	ldr	r0, [pc, #552]	; (80059b4 <main+0x360>)
 800578a:	f7fc ff41 	bl	8002610 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800578e:	2104      	movs	r1, #4
 8005790:	4888      	ldr	r0, [pc, #544]	; (80059b4 <main+0x360>)
 8005792:	f7fc ff3d 	bl	8002610 <HAL_TIM_PWM_Start>
  initFriction();
 8005796:	f7ff fead 	bl	80054f4 <initFriction>
		wheelPID[i].differentialFilterRate = 0.9f;
	}
}

void initLoadPID() {
	loadPID.t = 2.0f;
 800579a:	4a87      	ldr	r2, [pc, #540]	; (80059b8 <main+0x364>)
		wheelPID[i].t = 2.0f;
 800579c:	4b87      	ldr	r3, [pc, #540]	; (80059bc <main+0x368>)
	loadPID.p = 10.0f;
	loadPID.i = 0.1f*500;
 800579e:	4988      	ldr	r1, [pc, #544]	; (80059c0 <main+0x36c>)
 80057a0:	6091      	str	r1, [r2, #8]
		wheelPID[i].t = 2.0f;
 80057a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	loadPID.t = 2.0f;
 80057a6:	6011      	str	r1, [r2, #0]
		wheelPID[i].t = 2.0f;
 80057a8:	6019      	str	r1, [r3, #0]
 80057aa:	62d9      	str	r1, [r3, #44]	; 0x2c
 80057ac:	6599      	str	r1, [r3, #88]	; 0x58
 80057ae:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	loadPID.p = 10.0f;
 80057b2:	4984      	ldr	r1, [pc, #528]	; (80059c4 <main+0x370>)
 80057b4:	6051      	str	r1, [r2, #4]
		wheelPID[i].p = 3.0f;
 80057b6:	4984      	ldr	r1, [pc, #528]	; (80059c8 <main+0x374>)
 80057b8:	6059      	str	r1, [r3, #4]
 80057ba:	6319      	str	r1, [r3, #48]	; 0x30
 80057bc:	65d9      	str	r1, [r3, #92]	; 0x5c
 80057be:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	loadPID.d = 0.07f;
 80057c2:	4882      	ldr	r0, [pc, #520]	; (80059cc <main+0x378>)
		wheelPID[i].i = 20.0f;
 80057c4:	4982      	ldr	r1, [pc, #520]	; (80059d0 <main+0x37c>)
	loadPID.d = 0.07f;
 80057c6:	60d0      	str	r0, [r2, #12]
		wheelPID[i].i = 20.0f;
 80057c8:	6099      	str	r1, [r3, #8]
		wheelPID[i].d = 0.01f;
 80057ca:	4882      	ldr	r0, [pc, #520]	; (80059d4 <main+0x380>)
		wheelPID[i].i = 20.0f;
 80057cc:	6359      	str	r1, [r3, #52]	; 0x34
 80057ce:	6619      	str	r1, [r3, #96]	; 0x60
 80057d0:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
		wheelPID[i].outLimit = 15000.0f;
 80057d4:	4980      	ldr	r1, [pc, #512]	; (80059d8 <main+0x384>)
		wheelPID[i].d = 0.01f;
 80057d6:	60d8      	str	r0, [r3, #12]
 80057d8:	6398      	str	r0, [r3, #56]	; 0x38
 80057da:	6658      	str	r0, [r3, #100]	; 0x64
 80057dc:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		wheelPID[i].outLimit = 15000.0f;
 80057e0:	6119      	str	r1, [r3, #16]
		wheelPID[i].integralOutLimit = 500.0f;
 80057e2:	487e      	ldr	r0, [pc, #504]	; (80059dc <main+0x388>)
		wheelPID[i].outLimit = 15000.0f;
 80057e4:	63d9      	str	r1, [r3, #60]	; 0x3c
 80057e6:	6699      	str	r1, [r3, #104]	; 0x68
 80057e8:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
		wheelPID[i].differentialFilterRate = 0.9f;
 80057ec:	497c      	ldr	r1, [pc, #496]	; (80059e0 <main+0x38c>)
 80057ee:	6199      	str	r1, [r3, #24]
 80057f0:	6459      	str	r1, [r3, #68]	; 0x44
 80057f2:	6719      	str	r1, [r3, #112]	; 0x70
 80057f4:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
		wheelPID[i].integralOutLimit = 500.0f;
 80057f8:	6158      	str	r0, [r3, #20]
 80057fa:	6418      	str	r0, [r3, #64]	; 0x40
 80057fc:	66d8      	str	r0, [r3, #108]	; 0x6c
 80057fe:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	loadPID.outLimit = 30000.0f;
 8005802:	4878      	ldr	r0, [pc, #480]	; (80059e4 <main+0x390>)
	loadPID.integralOutLimit = 10000.0f;
 8005804:	4b78      	ldr	r3, [pc, #480]	; (80059e8 <main+0x394>)
	loadPID.outLimit = 30000.0f;
 8005806:	6110      	str	r0, [r2, #16]
	loadPID.differentialFilterRate = 0.9f;
 8005808:	6191      	str	r1, [r2, #24]
	loadPID.integralOutLimit = 10000.0f;
 800580a:	6153      	str	r3, [r2, #20]
  initCanFilter();
 800580c:	f7fe fe1e 	bl	800444c <initCanFilter>
	mecanum.param.wheel_perimeter = PERIMETER;
 8005810:	4b76      	ldr	r3, [pc, #472]	; (80059ec <main+0x398>)
 8005812:	4977      	ldr	r1, [pc, #476]	; (80059f0 <main+0x39c>)
	mecanum.param.wheeltrack = WHEELTRACK;
 8005814:	4a77      	ldr	r2, [pc, #476]	; (80059f4 <main+0x3a0>)
	mecanum.param.wheel_perimeter = PERIMETER;
 8005816:	6019      	str	r1, [r3, #0]
	mecanum.param.wheeltrack = WHEELTRACK;
 8005818:	605a      	str	r2, [r3, #4]
	mecanum.param.wheelbase = WHEELBASE;
 800581a:	4977      	ldr	r1, [pc, #476]	; (80059f8 <main+0x3a4>)
  HAL_TIM_Base_Start_IT(&htim6);
 800581c:	4877      	ldr	r0, [pc, #476]	; (80059fc <main+0x3a8>)
	mecanum.param.wheelbase = WHEELBASE;
 800581e:	6099      	str	r1, [r3, #8]
	mecanum.param.rotate_x_offset = 0;
 8005820:	2200      	movs	r2, #0
 8005822:	60da      	str	r2, [r3, #12]
	mecanum.param.rotate_y_offset = 0;
 8005824:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim6);
 8005826:	f7fc fe5f 	bl	80024e8 <HAL_TIM_Base_Start_IT>
  setbuf(stdout, NULL);
 800582a:	4b75      	ldr	r3, [pc, #468]	; (8005a00 <main+0x3ac>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2100      	movs	r1, #0
 8005830:	6898      	ldr	r0, [r3, #8]
 8005832:	f002 fb29 	bl	8007e88 <setbuf>
  HAL_CAN_Start(&hcan1);
 8005836:	4873      	ldr	r0, [pc, #460]	; (8005a04 <main+0x3b0>)
 8005838:	f7fb fd00 	bl	800123c <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 800583c:	4872      	ldr	r0, [pc, #456]	; (8005a08 <main+0x3b4>)
 800583e:	f7fb fcfd 	bl	800123c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8005842:	2102      	movs	r1, #2
 8005844:	486f      	ldr	r0, [pc, #444]	; (8005a04 <main+0x3b0>)
 8005846:	f7fb fdff 	bl	8001448 <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 800584a:	2102      	movs	r1, #2
 800584c:	486e      	ldr	r0, [pc, #440]	; (8005a08 <main+0x3b4>)
 800584e:	f7fb fdfb 	bl	8001448 <HAL_CAN_ActivateNotification>
  HAL_GPIO_WritePin(POWER_OUT1_GPIO_Port, POWER_OUT1_Pin, 1);
 8005852:	2201      	movs	r2, #1
 8005854:	2104      	movs	r1, #4
 8005856:	486d      	ldr	r0, [pc, #436]	; (8005a0c <main+0x3b8>)
 8005858:	f7fc f90e 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(POWER_OUT2_GPIO_Port, POWER_OUT2_Pin, 1);
 800585c:	2201      	movs	r2, #1
 800585e:	2108      	movs	r1, #8
 8005860:	486a      	ldr	r0, [pc, #424]	; (8005a0c <main+0x3b8>)
 8005862:	f7fc f909 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(POWER_OUT3_GPIO_Port, POWER_OUT3_Pin, 1);
 8005866:	2201      	movs	r2, #1
 8005868:	2110      	movs	r1, #16
 800586a:	4868      	ldr	r0, [pc, #416]	; (8005a0c <main+0x3b8>)
 800586c:	f7fc f904 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(POWER_OUT4_GPIO_Port, POWER_OUT4_Pin, 1);
 8005870:	2201      	movs	r2, #1
 8005872:	2120      	movs	r1, #32
 8005874:	4865      	ldr	r0, [pc, #404]	; (8005a0c <main+0x3b8>)
 8005876:	f7fc f8ff 	bl	8001a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 800587a:	2201      	movs	r2, #1
 800587c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005880:	4846      	ldr	r0, [pc, #280]	; (800599c <main+0x348>)
 8005882:	f7fc f8f9 	bl	8001a78 <HAL_GPIO_WritePin>
  CustomData_init(11,0x0111);  //blue-1
 8005886:	f240 1111 	movw	r1, #273	; 0x111
 800588a:	200b      	movs	r0, #11
 800588c:	f000 ff30 	bl	80066f0 <CustomData_init>
  IMU_pich_set=imu_attitude.pitch;
 8005890:	485f      	ldr	r0, [pc, #380]	; (8005a10 <main+0x3bc>)
 8005892:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005896:	6001      	str	r1, [r0, #0]
  IMU_yaw_set=imu_attitude.yaw;
 8005898:	485e      	ldr	r0, [pc, #376]	; (8005a14 <main+0x3c0>)
 800589a:	f8da 2008 	ldr.w	r2, [sl, #8]
 800589e:	6002      	str	r2, [r0, #0]
  IMU_rol_set=imu_attitude.roll;
 80058a0:	485d      	ldr	r0, [pc, #372]	; (8005a18 <main+0x3c4>)
 80058a2:	f8da 3000 	ldr.w	r3, [sl]
  PC_mouse_x=0;
 80058a6:	495d      	ldr	r1, [pc, #372]	; (8005a1c <main+0x3c8>)
  PC_mouse_y=0;
 80058a8:	4a5d      	ldr	r2, [pc, #372]	; (8005a20 <main+0x3cc>)
  IMU_rol_set=imu_attitude.roll;
 80058aa:	6003      	str	r3, [r0, #0]
  PC_mouse_x=0;
 80058ac:	2300      	movs	r3, #0
 80058ae:	600b      	str	r3, [r1, #0]
	  printf("torque M0=%8.3lf M1=%8.3lf M2=%8.3lf M3=%8.3lf",(float)wheelFdb[0].torque/16384.0*20.0,(float)wheelFdb[1].torque/16384.0*20.0
 80058b0:	2400      	movs	r4, #0
  PC_mouse_y=0;
 80058b2:	6013      	str	r3, [r2, #0]
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2)==1 || rc.sw1==2){
 80058b4:	2104      	movs	r1, #4
 80058b6:	485b      	ldr	r0, [pc, #364]	; (8005a24 <main+0x3d0>)
 80058b8:	f7fc f8d8 	bl	8001a6c <HAL_GPIO_ReadPin>
 80058bc:	2801      	cmp	r0, #1
 80058be:	d056      	beq.n	800596e <main+0x31a>
 80058c0:	4b59      	ldr	r3, [pc, #356]	; (8005a28 <main+0x3d4>)
 80058c2:	7a9b      	ldrb	r3, [r3, #10]
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d052      	beq.n	800596e <main+0x31a>
	  printf("torque M0=%8.3lf M1=%8.3lf M2=%8.3lf M3=%8.3lf",(float)wheelFdb[0].torque/16384.0*20.0,(float)wheelFdb[1].torque/16384.0*20.0
 80058c8:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 80058cc:	ee07 0a90 	vmov	s15, r0
 80058d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058d4:	ee17 0a90 	vmov	r0, s15
 80058d8:	f7fa fe46 	bl	8000568 <__aeabi_f2d>
 80058dc:	4622      	mov	r2, r4
 80058de:	462b      	mov	r3, r5
 80058e0:	f7fa fe9a 	bl	8000618 <__aeabi_dmul>
 80058e4:	4680      	mov	r8, r0
	    			  ,(float)wheelFdb[2].torque/16384.0*20.0,(float)wheelFdb[3].torque/16384.0*20.0);
 80058e6:	f9b6 0028 	ldrsh.w	r0, [r6, #40]	; 0x28
 80058ea:	ee07 0a90 	vmov	s15, r0
 80058ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	  printf("torque M0=%8.3lf M1=%8.3lf M2=%8.3lf M3=%8.3lf",(float)wheelFdb[0].torque/16384.0*20.0,(float)wheelFdb[1].torque/16384.0*20.0
 80058f2:	4689      	mov	r9, r1
	    			  ,(float)wheelFdb[2].torque/16384.0*20.0,(float)wheelFdb[3].torque/16384.0*20.0);
 80058f4:	ee17 0a90 	vmov	r0, s15
 80058f8:	f7fa fe36 	bl	8000568 <__aeabi_f2d>
	  printf("torque M0=%8.3lf M1=%8.3lf M2=%8.3lf M3=%8.3lf",(float)wheelFdb[0].torque/16384.0*20.0,(float)wheelFdb[1].torque/16384.0*20.0
 80058fc:	4622      	mov	r2, r4
 80058fe:	462b      	mov	r3, r5
 8005900:	f7fa fe8a 	bl	8000618 <__aeabi_dmul>
	    			  ,(float)wheelFdb[2].torque/16384.0*20.0,(float)wheelFdb[3].torque/16384.0*20.0);
 8005904:	f9b6 301c 	ldrsh.w	r3, [r6, #28]
 8005908:	ee07 3a90 	vmov	s15, r3
 800590c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	  printf("torque M0=%8.3lf M1=%8.3lf M2=%8.3lf M3=%8.3lf",(float)wheelFdb[0].torque/16384.0*20.0,(float)wheelFdb[1].torque/16384.0*20.0
 8005910:	e9cd 0104 	strd	r0, r1, [sp, #16]
	    			  ,(float)wheelFdb[2].torque/16384.0*20.0,(float)wheelFdb[3].torque/16384.0*20.0);
 8005914:	ee17 0a90 	vmov	r0, s15
 8005918:	f7fa fe26 	bl	8000568 <__aeabi_f2d>
	  printf("torque M0=%8.3lf M1=%8.3lf M2=%8.3lf M3=%8.3lf",(float)wheelFdb[0].torque/16384.0*20.0,(float)wheelFdb[1].torque/16384.0*20.0
 800591c:	4622      	mov	r2, r4
 800591e:	462b      	mov	r3, r5
 8005920:	f7fa fe7a 	bl	8000618 <__aeabi_dmul>
 8005924:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
 8005928:	ee07 3a90 	vmov	s15, r3
 800592c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005930:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005934:	ee17 0a90 	vmov	r0, s15
 8005938:	f7fa fe16 	bl	8000568 <__aeabi_f2d>
 800593c:	4622      	mov	r2, r4
 800593e:	462b      	mov	r3, r5
 8005940:	f7fa fe6a 	bl	8000618 <__aeabi_dmul>
 8005944:	464b      	mov	r3, r9
 8005946:	e9cd 0100 	strd	r0, r1, [sp]
 800594a:	4642      	mov	r2, r8
 800594c:	4658      	mov	r0, fp
 800594e:	f002 fa1f 	bl	8007d90 <iprintf>
	   printf("\r\n");
 8005952:	4836      	ldr	r0, [pc, #216]	; (8005a2c <main+0x3d8>)
 8005954:	f002 fa90 	bl	8007e78 <puts>
		if(cnt_time_main>=10){
 8005958:	783b      	ldrb	r3, [r7, #0]
 800595a:	2b09      	cmp	r3, #9
 800595c:	d86c      	bhi.n	8005a38 <main+0x3e4>
			cnt_time_main++;
 800595e:	3301      	adds	r3, #1
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2)==1 || rc.sw1==2){
 8005960:	2104      	movs	r1, #4
 8005962:	4830      	ldr	r0, [pc, #192]	; (8005a24 <main+0x3d0>)
			cnt_time_main++;
 8005964:	703b      	strb	r3, [r7, #0]
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2)==1 || rc.sw1==2){
 8005966:	f7fc f881 	bl	8001a6c <HAL_GPIO_ReadPin>
 800596a:	2801      	cmp	r0, #1
 800596c:	d1a8      	bne.n	80058c0 <main+0x26c>
		  IMU_pich_set=imu_attitude.pitch;
 800596e:	4928      	ldr	r1, [pc, #160]	; (8005a10 <main+0x3bc>)
 8005970:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005974:	600b      	str	r3, [r1, #0]
		  IMU_yaw_set=imu_attitude.yaw;
 8005976:	4927      	ldr	r1, [pc, #156]	; (8005a14 <main+0x3c0>)
 8005978:	f8da 2008 	ldr.w	r2, [sl, #8]
 800597c:	600a      	str	r2, [r1, #0]
		  IMU_rol_set=imu_attitude.roll;
 800597e:	4a26      	ldr	r2, [pc, #152]	; (8005a18 <main+0x3c4>)
 8005980:	f8da 3000 	ldr.w	r3, [sl]
 8005984:	6013      	str	r3, [r2, #0]
 8005986:	e79f      	b.n	80058c8 <main+0x274>
 8005988:	200005e0 	.word	0x200005e0
 800598c:	20000868 	.word	0x20000868
 8005990:	200002a8 	.word	0x200002a8
 8005994:	200003bc 	.word	0x200003bc
 8005998:	200003ed 	.word	0x200003ed
 800599c:	40021000 	.word	0x40021000
 80059a0:	40021400 	.word	0x40021400
 80059a4:	40021800 	.word	0x40021800
 80059a8:	40020c00 	.word	0x40020c00
 80059ac:	200007a8 	.word	0x200007a8
 80059b0:	3f540000 	.word	0x3f540000
 80059b4:	200006e8 	.word	0x200006e8
 80059b8:	200005f4 	.word	0x200005f4
 80059bc:	20000488 	.word	0x20000488
 80059c0:	42480000 	.word	0x42480000
 80059c4:	41200000 	.word	0x41200000
 80059c8:	40400000 	.word	0x40400000
 80059cc:	3d8f5c29 	.word	0x3d8f5c29
 80059d0:	41a00000 	.word	0x41a00000
 80059d4:	3c23d70a 	.word	0x3c23d70a
 80059d8:	466a6000 	.word	0x466a6000
 80059dc:	43fa0000 	.word	0x43fa0000
 80059e0:	3f666666 	.word	0x3f666666
 80059e4:	46ea6000 	.word	0x46ea6000
 80059e8:	461c4000 	.word	0x461c4000
 80059ec:	20000544 	.word	0x20000544
 80059f0:	43ef0000 	.word	0x43ef0000
 80059f4:	440d4000 	.word	0x440d4000
 80059f8:	43f78000 	.word	0x43f78000
 80059fc:	20000728 	.word	0x20000728
 8005a00:	20000028 	.word	0x20000028
 8005a04:	2000034c 	.word	0x2000034c
 8005a08:	20000324 	.word	0x20000324
 8005a0c:	40021c00 	.word	0x40021c00
 8005a10:	200003a8 	.word	0x200003a8
 8005a14:	200005bc 	.word	0x200005bc
 8005a18:	200003ac 	.word	0x200003ac
 8005a1c:	200003f0 	.word	0x200003f0
 8005a20:	20000484 	.word	0x20000484
 8005a24:	40020400 	.word	0x40020400
 8005a28:	20000374 	.word	0x20000374
 8005a2c:	0800be24 	.word	0x0800be24
 8005a30:	200003b0 	.word	0x200003b0
 8005a34:	0800bdf4 	.word	0x0800bdf4
		    setData1(IMU_pich);
 8005a38:	4b3e      	ldr	r3, [pc, #248]	; (8005b34 <main+0x4e0>)
 8005a3a:	ed93 0a00 	vldr	s0, [r3]
 8005a3e:	f000 fe3f 	bl	80066c0 <setData1>
		    setData2(IMU_yaw);
 8005a42:	4b3d      	ldr	r3, [pc, #244]	; (8005b38 <main+0x4e4>)
 8005a44:	ed93 0a00 	vldr	s0, [r3]
 8005a48:	f000 fe40 	bl	80066cc <setData2>
		    setData3((float)yaw_now);
 8005a4c:	4b3b      	ldr	r3, [pc, #236]	; (8005b3c <main+0x4e8>)
 8005a4e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005a52:	ee00 2a10 	vmov	s0, r2
 8005a56:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8005a5a:	f000 fe3d 	bl	80066d8 <setData3>
		    	 if(yaw_now>=-75 && yaw_now<=-55){setMasks(0b011111);}
 8005a5e:	4b37      	ldr	r3, [pc, #220]	; (8005b3c <main+0x4e8>)
 8005a60:	881b      	ldrh	r3, [r3, #0]
 8005a62:	f103 024b 	add.w	r2, r3, #75	; 0x4b
 8005a66:	b292      	uxth	r2, r2
 8005a68:	2a14      	cmp	r2, #20
 8005a6a:	d93b      	bls.n	8005ae4 <main+0x490>
		    else if(yaw_now>=-55 && yaw_now<=-45){setMasks(0b001111);}
 8005a6c:	f103 0237 	add.w	r2, r3, #55	; 0x37
 8005a70:	b292      	uxth	r2, r2
 8005a72:	2a0a      	cmp	r2, #10
 8005a74:	d93a      	bls.n	8005aec <main+0x498>
		    else if(yaw_now>=-45 && yaw_now<=-35){setMasks(0b101111);}
 8005a76:	f103 022d 	add.w	r2, r3, #45	; 0x2d
 8005a7a:	b292      	uxth	r2, r2
 8005a7c:	2a0a      	cmp	r2, #10
 8005a7e:	d939      	bls.n	8005af4 <main+0x4a0>
		    else if(yaw_now>=-35 && yaw_now<=-20){setMasks(0b100111);}
 8005a80:	f103 0223 	add.w	r2, r3, #35	; 0x23
 8005a84:	b292      	uxth	r2, r2
 8005a86:	2a0f      	cmp	r2, #15
 8005a88:	d938      	bls.n	8005afc <main+0x4a8>
		    else if(yaw_now>=-20 && yaw_now<=-10){setMasks(0b110111);}
 8005a8a:	f103 0214 	add.w	r2, r3, #20
 8005a8e:	b292      	uxth	r2, r2
 8005a90:	2a0a      	cmp	r2, #10
 8005a92:	d937      	bls.n	8005b04 <main+0x4b0>
		    else if(yaw_now>=-10 && yaw_now<= 10){setMasks(0b110011);}
 8005a94:	f103 020a 	add.w	r2, r3, #10
 8005a98:	b292      	uxth	r2, r2
 8005a9a:	2a14      	cmp	r2, #20
 8005a9c:	d936      	bls.n	8005b0c <main+0x4b8>
		    else if(yaw_now>= 10 && yaw_now<= 20){setMasks(0b111011);}
 8005a9e:	f1a3 020a 	sub.w	r2, r3, #10
 8005aa2:	2a0a      	cmp	r2, #10
 8005aa4:	d936      	bls.n	8005b14 <main+0x4c0>
		    else if(yaw_now>= 20 && yaw_now<= 35){setMasks(0b111001);}
 8005aa6:	f1a3 0214 	sub.w	r2, r3, #20
 8005aaa:	2a0f      	cmp	r2, #15
 8005aac:	d936      	bls.n	8005b1c <main+0x4c8>
		    else if(yaw_now>= 35 && yaw_now<= 45){setMasks(0b111101);}
 8005aae:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8005ab2:	2a0a      	cmp	r2, #10
 8005ab4:	d936      	bls.n	8005b24 <main+0x4d0>
		    else if(yaw_now>= 45 && yaw_now<= 55){setMasks(0b111100);}
 8005ab6:	f1a3 022d 	sub.w	r2, r3, #45	; 0x2d
 8005aba:	2a0a      	cmp	r2, #10
 8005abc:	d936      	bls.n	8005b2c <main+0x4d8>
		    else if(yaw_now>= 55 && yaw_now<= 75){setMasks(0b111110);}
 8005abe:	3b37      	subs	r3, #55	; 0x37
 8005ac0:	2b14      	cmp	r3, #20
 8005ac2:	bf94      	ite	ls
 8005ac4:	203e      	movls	r0, #62	; 0x3e
		    else  								 {setMasks(0b000000);}
 8005ac6:	2000      	movhi	r0, #0
 8005ac8:	f000 fe0c 	bl	80066e4 <setMasks>
		    makeCustomDataPacket(customdataPacket);
 8005acc:	481c      	ldr	r0, [pc, #112]	; (8005b40 <main+0x4ec>)
 8005ace:	f000 fd99 	bl	8006604 <makeCustomDataPacket>
		    HAL_UART_Transmit(&huart8, (uint8_t *)customdataPacket, 28,100);
 8005ad2:	2364      	movs	r3, #100	; 0x64
 8005ad4:	221c      	movs	r2, #28
 8005ad6:	491a      	ldr	r1, [pc, #104]	; (8005b40 <main+0x4ec>)
 8005ad8:	481a      	ldr	r0, [pc, #104]	; (8005b44 <main+0x4f0>)
 8005ada:	f7fd f959 	bl	8002d90 <HAL_UART_Transmit>
			cnt_time_main=0;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	703b      	strb	r3, [r7, #0]
 8005ae2:	e6e7      	b.n	80058b4 <main+0x260>
		    	 if(yaw_now>=-75 && yaw_now<=-55){setMasks(0b011111);}
 8005ae4:	201f      	movs	r0, #31
 8005ae6:	f000 fdfd 	bl	80066e4 <setMasks>
 8005aea:	e7ef      	b.n	8005acc <main+0x478>
		    else if(yaw_now>=-55 && yaw_now<=-45){setMasks(0b001111);}
 8005aec:	200f      	movs	r0, #15
 8005aee:	f000 fdf9 	bl	80066e4 <setMasks>
 8005af2:	e7eb      	b.n	8005acc <main+0x478>
		    else if(yaw_now>=-45 && yaw_now<=-35){setMasks(0b101111);}
 8005af4:	202f      	movs	r0, #47	; 0x2f
 8005af6:	f000 fdf5 	bl	80066e4 <setMasks>
 8005afa:	e7e7      	b.n	8005acc <main+0x478>
		    else if(yaw_now>=-35 && yaw_now<=-20){setMasks(0b100111);}
 8005afc:	2027      	movs	r0, #39	; 0x27
 8005afe:	f000 fdf1 	bl	80066e4 <setMasks>
 8005b02:	e7e3      	b.n	8005acc <main+0x478>
		    else if(yaw_now>=-20 && yaw_now<=-10){setMasks(0b110111);}
 8005b04:	2037      	movs	r0, #55	; 0x37
 8005b06:	f000 fded 	bl	80066e4 <setMasks>
 8005b0a:	e7df      	b.n	8005acc <main+0x478>
		    else if(yaw_now>=-10 && yaw_now<= 10){setMasks(0b110011);}
 8005b0c:	2033      	movs	r0, #51	; 0x33
 8005b0e:	f000 fde9 	bl	80066e4 <setMasks>
 8005b12:	e7db      	b.n	8005acc <main+0x478>
		    else if(yaw_now>= 10 && yaw_now<= 20){setMasks(0b111011);}
 8005b14:	203b      	movs	r0, #59	; 0x3b
 8005b16:	f000 fde5 	bl	80066e4 <setMasks>
 8005b1a:	e7d7      	b.n	8005acc <main+0x478>
		    else if(yaw_now>= 20 && yaw_now<= 35){setMasks(0b111001);}
 8005b1c:	2039      	movs	r0, #57	; 0x39
 8005b1e:	f000 fde1 	bl	80066e4 <setMasks>
 8005b22:	e7d3      	b.n	8005acc <main+0x478>
		    else if(yaw_now>= 35 && yaw_now<= 45){setMasks(0b111101);}
 8005b24:	203d      	movs	r0, #61	; 0x3d
 8005b26:	f000 fddd 	bl	80066e4 <setMasks>
 8005b2a:	e7cf      	b.n	8005acc <main+0x478>
		    else if(yaw_now>= 45 && yaw_now<= 55){setMasks(0b111100);}
 8005b2c:	203c      	movs	r0, #60	; 0x3c
 8005b2e:	f000 fdd9 	bl	80066e4 <setMasks>
 8005b32:	e7cb      	b.n	8005acc <main+0x478>
 8005b34:	200005cc 	.word	0x200005cc
 8005b38:	20000394 	.word	0x20000394
 8005b3c:	200005f2 	.word	0x200005f2
 8005b40:	20000648 	.word	0x20000648
 8005b44:	200008a8 	.word	0x200008a8

08005b48 <Gimbal_Task>:
	Gimbal_Task();
	fire_Task();
	fire_task_open();
}

void Gimbal_Task(){
 8005b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int16_t u[4];
	if (rc.mouse_press_r == 1 ||  rc.ch1==660) {
 8005b4c:	4dd0      	ldr	r5, [pc, #832]	; (8005e90 <Gimbal_Task+0x348>)
		fire=1;
 8005b4e:	4cd1      	ldr	r4, [pc, #836]	; (8005e94 <Gimbal_Task+0x34c>)
	if (rc.mouse_press_r == 1 ||  rc.ch1==660) {
 8005b50:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
void Gimbal_Task(){
 8005b54:	ed2d 8b02 	vpush	{d8}
	if (rc.mouse_press_r == 1 ||  rc.ch1==660) {
 8005b58:	2b01      	cmp	r3, #1
void Gimbal_Task(){
 8005b5a:	b082      	sub	sp, #8
	if (rc.mouse_press_r == 1 ||  rc.ch1==660) {
 8005b5c:	f000 810d 	beq.w	8005d7a <Gimbal_Task+0x232>
 8005b60:	f9b5 3000 	ldrsh.w	r3, [r5]
 8005b64:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8005b68:	f000 8107 	beq.w	8005d7a <Gimbal_Task+0x232>
	rc_SW1_temp=rc.sw2;
}


void fire_task_push(){
	if(fire==1){
 8005b6c:	7823      	ldrb	r3, [r4, #0]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	f000 8105 	beq.w	8005d7e <Gimbal_Task+0x236>
	if(rc.sw2==2){target_yaw=0;}
 8005b74:	7aee      	ldrb	r6, [r5, #11]
 8005b76:	2e02      	cmp	r6, #2
 8005b78:	f000 813b 	beq.w	8005df2 <Gimbal_Task+0x2aa>
 8005b7c:	4bc6      	ldr	r3, [pc, #792]	; (8005e98 <Gimbal_Task+0x350>)
 8005b7e:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 8005e9c <Gimbal_Task+0x354>
 8005b82:	edd3 7a00 	vldr	s15, [r3]
 8005b86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		if(rc.sw2==1){
 8005b8a:	2e01      	cmp	r6, #1
 8005b8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b90:	f000 8156 	beq.w	8005e40 <Gimbal_Task+0x2f8>
			target_yaw=(float)PC_mouse_x / yaw_magnification;
 8005b94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b98:	4ac1      	ldr	r2, [pc, #772]	; (8005ea0 <Gimbal_Task+0x358>)
 8005b9a:	4fc2      	ldr	r7, [pc, #776]	; (8005ea4 <Gimbal_Task+0x35c>)
 8005b9c:	ee17 3a90 	vmov	r3, s15
 8005ba0:	b21b      	sxth	r3, r3
			if(target_yaw>70){target_yaw=70;}
 8005ba2:	2b46      	cmp	r3, #70	; 0x46
			target_yaw=(float)PC_mouse_x / yaw_magnification;
 8005ba4:	8013      	strh	r3, [r2, #0]
			if(target_yaw>70){target_yaw=70;}
 8005ba6:	f300 816a 	bgt.w	8005e7e <Gimbal_Task+0x336>
			if(target_yaw<-70){target_yaw=-70;}
 8005baa:	f113 0f46 	cmn.w	r3, #70	; 0x46
 8005bae:	f280 81d2 	bge.w	8005f56 <Gimbal_Task+0x40e>
		if(target_yaw<-70){target_yaw=-70;}
 8005bb2:	f64f 73ba 	movw	r3, #65466	; 0xffba
 8005bb6:	8013      	strh	r3, [r2, #0]
 8005bb8:	f06f 0445 	mvn.w	r4, #69	; 0x45
	yaw_now=(float)((gimbalYawFdb.angle-4096.0)/8191.0*360.0);
 8005bbc:	f8df a334 	ldr.w	sl, [pc, #820]	; 8005ef4 <Gimbal_Task+0x3ac>
 8005bc0:	f9ba 0000 	ldrsh.w	r0, [sl]
 8005bc4:	f7fa fcbe 	bl	8000544 <__aeabi_i2d>
 8005bc8:	2200      	movs	r2, #0
 8005bca:	4bb7      	ldr	r3, [pc, #732]	; (8005ea8 <Gimbal_Task+0x360>)
 8005bcc:	f7fa fb6c 	bl	80002a8 <__aeabi_dsub>
 8005bd0:	a3ad      	add	r3, pc, #692	; (adr r3, 8005e88 <Gimbal_Task+0x340>)
 8005bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd6:	f7fa fd1f 	bl	8000618 <__aeabi_dmul>
 8005bda:	f7fa fff5 	bl	8000bc8 <__aeabi_d2f>
 8005bde:	ee07 0a90 	vmov	s15, r0
 8005be2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005be6:	49b1      	ldr	r1, [pc, #708]	; (8005eac <Gimbal_Task+0x364>)
 8005be8:	ee17 3a90 	vmov	r3, s15
 8005bec:	b21a      	sxth	r2, r3
	if((target_yaw-yaw_now)>50){u[0]=30000;}
 8005bee:	1aa3      	subs	r3, r4, r2
 8005bf0:	2b32      	cmp	r3, #50	; 0x32
	yaw_now=(float)((gimbalYawFdb.angle-4096.0)/8191.0*360.0);
 8005bf2:	800a      	strh	r2, [r1, #0]
	if((target_yaw-yaw_now)>50){u[0]=30000;}
 8005bf4:	dc2b      	bgt.n	8005c4e <Gimbal_Task+0x106>
	else if((target_yaw-yaw_now)<-50){u[0]=-30000;}
 8005bf6:	f113 0f32 	cmn.w	r3, #50	; 0x32
 8005bfa:	f2c0 810c 	blt.w	8005e16 <Gimbal_Task+0x2ce>
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005bfe:	4aac      	ldr	r2, [pc, #688]	; (8005eb0 <Gimbal_Task+0x368>)
 8005c00:	f64e 2060 	movw	r0, #60000	; 0xea60
 8005c04:	3332      	adds	r3, #50	; 0x32
 8005c06:	fb00 f303 	mul.w	r3, r0, r3
 8005c0a:	fba2 3003 	umull	r3, r0, r2, r3
 8005c0e:	0940      	lsrs	r0, r0, #5
		u[0]=map(target_yaw-yaw_now, -50, 50, -30000, 30000)-(gimbalYawFdb.rpm*60.0);
 8005c10:	f5a0 40ea 	sub.w	r0, r0, #29952	; 0x7500
 8005c14:	3830      	subs	r0, #48	; 0x30
 8005c16:	f7fa fc95 	bl	8000544 <__aeabi_i2d>
 8005c1a:	4680      	mov	r8, r0
 8005c1c:	f9ba 0002 	ldrsh.w	r0, [sl, #2]
 8005c20:	4689      	mov	r9, r1
 8005c22:	f7fa fc8f 	bl	8000544 <__aeabi_i2d>
 8005c26:	2200      	movs	r2, #0
 8005c28:	4ba2      	ldr	r3, [pc, #648]	; (8005eb4 <Gimbal_Task+0x36c>)
 8005c2a:	f7fa fcf5 	bl	8000618 <__aeabi_dmul>
 8005c2e:	460b      	mov	r3, r1
 8005c30:	4602      	mov	r2, r0
 8005c32:	4649      	mov	r1, r9
 8005c34:	4640      	mov	r0, r8
 8005c36:	f7fa fb37 	bl	80002a8 <__aeabi_dsub>
 8005c3a:	f7fa ff9d 	bl	8000b78 <__aeabi_d2iz>
		if(u[0]>30000){u[0]=30000;}
 8005c3e:	f247 5330 	movw	r3, #30000	; 0x7530
		u[0]=map(target_yaw-yaw_now, -50, 50, -30000, 30000)-(gimbalYawFdb.rpm*60.0);
 8005c42:	b200      	sxth	r0, r0
		if(u[0]>30000){u[0]=30000;}
 8005c44:	4298      	cmp	r0, r3
		u[0]=map(target_yaw-yaw_now, -50, 50, -30000, 30000)-(gimbalYawFdb.rpm*60.0);
 8005c46:	f8ad 0000 	strh.w	r0, [sp]
		if(u[0]>30000){u[0]=30000;}
 8005c4a:	f340 80e0 	ble.w	8005e0e <Gimbal_Task+0x2c6>
	if((target_yaw-yaw_now)>50){u[0]=30000;}
 8005c4e:	f247 5330 	movw	r3, #30000	; 0x7530
 8005c52:	f8ad 3000 	strh.w	r3, [sp]
 8005c56:	4b98      	ldr	r3, [pc, #608]	; (8005eb8 <Gimbal_Task+0x370>)
	if(rc.sw2==2){target_pich=0;}
 8005c58:	2e02      	cmp	r6, #2
 8005c5a:	ed93 8a00 	vldr	s16, [r3]
 8005c5e:	f000 80e4 	beq.w	8005e2a <Gimbal_Task+0x2e2>
		target_pich=((float)PC_mouse_y / pich_magnification)-IMU_pich;
 8005c62:	4b96      	ldr	r3, [pc, #600]	; (8005ebc <Gimbal_Task+0x374>)
 8005c64:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8005ec0 <Gimbal_Task+0x378>
 8005c68:	edd3 7a00 	vldr	s15, [r3]
		if(target_pich>=19){target_pich=19;}
 8005c6c:	4c95      	ldr	r4, [pc, #596]	; (8005ec4 <Gimbal_Task+0x37c>)
		target_pich=((float)PC_mouse_y / pich_magnification)-IMU_pich;
 8005c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c72:	eef0 6a48 	vmov.f32	s13, s16
 8005c76:	eed7 6a87 	vfnms.f32	s13, s15, s14
 8005c7a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8005c7e:	ee17 3a90 	vmov	r3, s15
 8005c82:	b21b      	sxth	r3, r3
		if(target_pich>=19){target_pich=19;}
 8005c84:	2b12      	cmp	r3, #18
 8005c86:	f340 80d4 	ble.w	8005e32 <Gimbal_Task+0x2ea>
 8005c8a:	2313      	movs	r3, #19
 8005c8c:	8023      	strh	r3, [r4, #0]
	pich_now=(float)((gimbalPitchFdb.angle-4096.0)/8191.0*360.0)+29;
 8005c8e:	4e8e      	ldr	r6, [pc, #568]	; (8005ec8 <Gimbal_Task+0x380>)
 8005c90:	f8df 8264 	ldr.w	r8, [pc, #612]	; 8005ef8 <Gimbal_Task+0x3b0>
 8005c94:	f9b6 0000 	ldrsh.w	r0, [r6]
 8005c98:	f7fa fc54 	bl	8000544 <__aeabi_i2d>
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	4b82      	ldr	r3, [pc, #520]	; (8005ea8 <Gimbal_Task+0x360>)
 8005ca0:	f7fa fb02 	bl	80002a8 <__aeabi_dsub>
 8005ca4:	a378      	add	r3, pc, #480	; (adr r3, 8005e88 <Gimbal_Task+0x340>)
 8005ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005caa:	f7fa fcb5 	bl	8000618 <__aeabi_dmul>
 8005cae:	f7fa ff8b 	bl	8000bc8 <__aeabi_d2f>
 8005cb2:	ee07 0a10 	vmov	s14, r0
 8005cb6:	eef3 7a0d 	vmov.f32	s15, #61	; 0x41e80000  29.0
 8005cba:	ee77 7a27 	vadd.f32	s15, s14, s15
	if((pich_now+IMU_pich)>-4){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);}
 8005cbe:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
	pich_now=(float)((gimbalPitchFdb.angle-4096.0)/8191.0*360.0)+29;
 8005cc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	else{HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);}
 8005cc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	pich_now=(float)((gimbalPitchFdb.angle-4096.0)/8191.0*360.0)+29;
 8005cca:	ee17 3a90 	vmov	r3, s15
 8005cce:	b21b      	sxth	r3, r3
	if((pich_now+IMU_pich)>-4){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);}
 8005cd0:	ee07 3a90 	vmov	s15, r3
 8005cd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	else{HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);}
 8005cd8:	487c      	ldr	r0, [pc, #496]	; (8005ecc <Gimbal_Task+0x384>)
	pich_now=(float)((gimbalPitchFdb.angle-4096.0)/8191.0*360.0)+29;
 8005cda:	f8a8 3000 	strh.w	r3, [r8]
	if((pich_now+IMU_pich)>-4){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);}
 8005cde:	ee77 7a88 	vadd.f32	s15, s15, s16
 8005ce2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cea:	bfcc      	ite	gt
 8005cec:	2201      	movgt	r2, #1
	else{HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);}
 8005cee:	2200      	movle	r2, #0
 8005cf0:	f7fb fec2 	bl	8001a78 <HAL_GPIO_WritePin>
	if((target_pich-pich_now)>19){u[1]=30000;}
 8005cf4:	f9b4 3000 	ldrsh.w	r3, [r4]
 8005cf8:	f9b8 2000 	ldrsh.w	r2, [r8]
 8005cfc:	1a9b      	subs	r3, r3, r2
 8005cfe:	2b13      	cmp	r3, #19
 8005d00:	dc2a      	bgt.n	8005d58 <Gimbal_Task+0x210>
	else if((target_pich-pich_now)<-19){u[1]=-30000;}
 8005d02:	f113 0f13 	cmn.w	r3, #19
 8005d06:	db7d      	blt.n	8005e04 <Gimbal_Task+0x2bc>
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005d08:	f64e 2060 	movw	r0, #60000	; 0xea60
 8005d0c:	3313      	adds	r3, #19
 8005d0e:	fb00 f303 	mul.w	r3, r0, r3
 8005d12:	4a6f      	ldr	r2, [pc, #444]	; (8005ed0 <Gimbal_Task+0x388>)
 8005d14:	0858      	lsrs	r0, r3, #1
 8005d16:	fba2 3000 	umull	r3, r0, r2, r0
 8005d1a:	08c0      	lsrs	r0, r0, #3
		u[1]=map(target_pich-pich_now, -19, 19, -30000, 30000)-(gimbalPitchFdb.rpm*60.0);//param is not yet
 8005d1c:	f5a0 40ea 	sub.w	r0, r0, #29952	; 0x7500
 8005d20:	3830      	subs	r0, #48	; 0x30
 8005d22:	f7fa fc0f 	bl	8000544 <__aeabi_i2d>
 8005d26:	4680      	mov	r8, r0
 8005d28:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 8005d2c:	4689      	mov	r9, r1
 8005d2e:	f7fa fc09 	bl	8000544 <__aeabi_i2d>
 8005d32:	2200      	movs	r2, #0
 8005d34:	4b5f      	ldr	r3, [pc, #380]	; (8005eb4 <Gimbal_Task+0x36c>)
 8005d36:	f7fa fc6f 	bl	8000618 <__aeabi_dmul>
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	4649      	mov	r1, r9
 8005d40:	4640      	mov	r0, r8
 8005d42:	f7fa fab1 	bl	80002a8 <__aeabi_dsub>
 8005d46:	f7fa ff17 	bl	8000b78 <__aeabi_d2iz>
		if(u[1]>30000){u[1]=30000;}
 8005d4a:	f247 5330 	movw	r3, #30000	; 0x7530
		u[1]=map(target_pich-pich_now, -19, 19, -30000, 30000)-(gimbalPitchFdb.rpm*60.0);//param is not yet
 8005d4e:	b200      	sxth	r0, r0
		if(u[1]>30000){u[1]=30000;}
 8005d50:	4298      	cmp	r0, r3
		u[1]=map(target_pich-pich_now, -19, 19, -30000, 30000)-(gimbalPitchFdb.rpm*60.0);//param is not yet
 8005d52:	f8ad 0002 	strh.w	r0, [sp, #2]
		if(u[1]>30000){u[1]=30000;}
 8005d56:	dd52      	ble.n	8005dfe <Gimbal_Task+0x2b6>
	if((target_pich-pich_now)>19){u[1]=30000;}
 8005d58:	f247 5330 	movw	r3, #30000	; 0x7530
 8005d5c:	f8ad 3002 	strh.w	r3, [sp, #2]
	u[3]=0;
 8005d60:	2300      	movs	r3, #0
	driveGimbalMotors(u);
 8005d62:	4668      	mov	r0, sp
	u[3]=0;
 8005d64:	f8ad 3006 	strh.w	r3, [sp, #6]
	driveGimbalMotors(u);
 8005d68:	f000 fbac 	bl	80064c4 <driveGimbalMotors>
	rc_SW1_temp=rc.sw2;
 8005d6c:	7aeb      	ldrb	r3, [r5, #11]
 8005d6e:	703b      	strb	r3, [r7, #0]
}
 8005d70:	b002      	add	sp, #8
 8005d72:	ecbd 8b02 	vpop	{d8}
 8005d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		fire=1;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	7023      	strb	r3, [r4, #0]
	if(cnt_tim_fire_task>0 && cnt_tim_fire_task<=110){
 8005d7e:	4e55      	ldr	r6, [pc, #340]	; (8005ed4 <Gimbal_Task+0x38c>)
 8005d80:	6833      	ldr	r3, [r6, #0]
 8005d82:	1e5a      	subs	r2, r3, #1
 8005d84:	2a6d      	cmp	r2, #109	; 0x6d
 8005d86:	f240 80b9 	bls.w	8005efc <Gimbal_Task+0x3b4>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
		sConfigOC.Pulse = map(90,0,180,500,2500);
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
	}
	else if(cnt_tim_fire_task>110 && cnt_tim_fire_task<=410){
 8005d8a:	f1a3 026f 	sub.w	r2, r3, #111	; 0x6f
 8005d8e:	f5b2 7f96 	cmp.w	r2, #300	; 0x12c
 8005d92:	f0c0 80db 	bcc.w	8005f4c <Gimbal_Task+0x404>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
		sConfigOC.Pulse = map(90,0,180,500,2500);
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
	}
	else if(cnt_tim_fire_task>410 && cnt_tim_fire_task<=500){
 8005d96:	f46f 72fa 	mvn.w	r2, #500	; 0x1f4
 8005d9a:	4413      	add	r3, r2
 8005d9c:	2bc7      	cmp	r3, #199	; 0xc7
		sConfigOC.Pulse = map(90,0,180,500,2500);
 8005d9e:	4f4e      	ldr	r7, [pc, #312]	; (8005ed8 <Gimbal_Task+0x390>)
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8005da0:	484e      	ldr	r0, [pc, #312]	; (8005edc <Gimbal_Task+0x394>)
	else if(cnt_tim_fire_task>410 && cnt_tim_fire_task<=500){
 8005da2:	f200 80bb 	bhi.w	8005f1c <Gimbal_Task+0x3d4>
		sConfigOC.Pulse = map(90,0,180,500,2500);
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
	}
	else if(cnt_tim_fire_task>500 && cnt_tim_fire_task<=700){
		sConfigOC.Pulse = map(90,0,180,500,2500);
 8005da6:	f240 53dc 	movw	r3, #1500	; 0x5dc
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8005daa:	4639      	mov	r1, r7
 8005dac:	2200      	movs	r2, #0
		sConfigOC.Pulse = map(90,0,180,500,2500);
 8005dae:	607b      	str	r3, [r7, #4]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8005db0:	f7fc fc58 	bl	8002664 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8005db4:	2100      	movs	r1, #0
 8005db6:	4849      	ldr	r0, [pc, #292]	; (8005edc <Gimbal_Task+0x394>)
 8005db8:	f7fc fc2a 	bl	8002610 <HAL_TIM_PWM_Start>
		sConfigOC.Pulse = map(120,0,180,500,2500);
 8005dbc:	f240 7329 	movw	r3, #1833	; 0x729
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 8005dc0:	4639      	mov	r1, r7
 8005dc2:	2204      	movs	r2, #4
 8005dc4:	4845      	ldr	r0, [pc, #276]	; (8005edc <Gimbal_Task+0x394>)
		sConfigOC.Pulse = map(120,0,180,500,2500);
 8005dc6:	607b      	str	r3, [r7, #4]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 8005dc8:	f7fc fc4c 	bl	8002664 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8005dcc:	2104      	movs	r1, #4
 8005dce:	4843      	ldr	r0, [pc, #268]	; (8005edc <Gimbal_Task+0x394>)
 8005dd0:	f7fc fc1e 	bl	8002610 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
	}


	cnt_tim_fire_task++;
 8005dd4:	6833      	ldr	r3, [r6, #0]
	if(cnt_tim_fire_task>790){
 8005dd6:	f240 3216 	movw	r2, #790	; 0x316
	cnt_tim_fire_task++;
 8005dda:	3301      	adds	r3, #1
	if(cnt_tim_fire_task>790){
 8005ddc:	4293      	cmp	r3, r2
		cnt_tim_fire_task=0;
 8005dde:	bf8a      	itet	hi
 8005de0:	2300      	movhi	r3, #0
	cnt_tim_fire_task++;
 8005de2:	6033      	strls	r3, [r6, #0]
		cnt_tim_fire_task=0;
 8005de4:	6033      	strhi	r3, [r6, #0]
	if(rc.sw2==2){target_yaw=0;}
 8005de6:	7aee      	ldrb	r6, [r5, #11]
		fire=0;
 8005de8:	bf88      	it	hi
 8005dea:	7023      	strbhi	r3, [r4, #0]
	if(rc.sw2==2){target_yaw=0;}
 8005dec:	2e02      	cmp	r6, #2
 8005dee:	f47f aec5 	bne.w	8005b7c <Gimbal_Task+0x34>
 8005df2:	4a2b      	ldr	r2, [pc, #172]	; (8005ea0 <Gimbal_Task+0x358>)
 8005df4:	4f2b      	ldr	r7, [pc, #172]	; (8005ea4 <Gimbal_Task+0x35c>)
 8005df6:	2300      	movs	r3, #0
 8005df8:	8013      	strh	r3, [r2, #0]
 8005dfa:	461c      	mov	r4, r3
 8005dfc:	e6de      	b.n	8005bbc <Gimbal_Task+0x74>
		if(u[1]<-30000){u[1]=-30000;}
 8005dfe:	4b38      	ldr	r3, [pc, #224]	; (8005ee0 <Gimbal_Task+0x398>)
 8005e00:	4298      	cmp	r0, r3
 8005e02:	daad      	bge.n	8005d60 <Gimbal_Task+0x218>
	else if((target_pich-pich_now)<-19){u[1]=-30000;}
 8005e04:	f648 23d0 	movw	r3, #35536	; 0x8ad0
 8005e08:	f8ad 3002 	strh.w	r3, [sp, #2]
 8005e0c:	e7a8      	b.n	8005d60 <Gimbal_Task+0x218>
		if(u[0]<-30000){u[0]=-30000;}
 8005e0e:	4b34      	ldr	r3, [pc, #208]	; (8005ee0 <Gimbal_Task+0x398>)
 8005e10:	4298      	cmp	r0, r3
 8005e12:	f6bf af20 	bge.w	8005c56 <Gimbal_Task+0x10e>
	else if((target_yaw-yaw_now)<-50){u[0]=-30000;}
 8005e16:	f648 23d0 	movw	r3, #35536	; 0x8ad0
 8005e1a:	f8ad 3000 	strh.w	r3, [sp]
 8005e1e:	4b26      	ldr	r3, [pc, #152]	; (8005eb8 <Gimbal_Task+0x370>)
	if(rc.sw2==2){target_pich=0;}
 8005e20:	2e02      	cmp	r6, #2
 8005e22:	ed93 8a00 	vldr	s16, [r3]
 8005e26:	f47f af1c 	bne.w	8005c62 <Gimbal_Task+0x11a>
 8005e2a:	4c26      	ldr	r4, [pc, #152]	; (8005ec4 <Gimbal_Task+0x37c>)
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	8023      	strh	r3, [r4, #0]
 8005e30:	e72d      	b.n	8005c8e <Gimbal_Task+0x146>
		if(target_pich<-22){target_pich=-22;}
 8005e32:	f113 0f16 	cmn.w	r3, #22
 8005e36:	bfb8      	it	lt
 8005e38:	f64f 73ea 	movwlt	r3, #65514	; 0xffea
 8005e3c:	8023      	strh	r3, [r4, #0]
 8005e3e:	e726      	b.n	8005c8e <Gimbal_Task+0x146>
			if(rc_SW1_temp==3){IMU_yaw_set=imu_attitude.yaw;}
 8005e40:	4f18      	ldr	r7, [pc, #96]	; (8005ea4 <Gimbal_Task+0x35c>)
 8005e42:	783b      	ldrb	r3, [r7, #0]
 8005e44:	2b03      	cmp	r3, #3
 8005e46:	d103      	bne.n	8005e50 <Gimbal_Task+0x308>
 8005e48:	4a26      	ldr	r2, [pc, #152]	; (8005ee4 <Gimbal_Task+0x39c>)
 8005e4a:	4b27      	ldr	r3, [pc, #156]	; (8005ee8 <Gimbal_Task+0x3a0>)
 8005e4c:	6892      	ldr	r2, [r2, #8]
 8005e4e:	601a      	str	r2, [r3, #0]
		target_yaw =((float)PC_mouse_x / yaw_magnification)-IMU_yaw+feed_forward_param;
 8005e50:	4a26      	ldr	r2, [pc, #152]	; (8005eec <Gimbal_Task+0x3a4>)
 8005e52:	4b27      	ldr	r3, [pc, #156]	; (8005ef0 <Gimbal_Task+0x3a8>)
 8005e54:	8812      	ldrh	r2, [r2, #0]
 8005e56:	edd3 6a00 	vldr	s13, [r3]
 8005e5a:	ee07 2a10 	vmov	s14, r2
 8005e5e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005e62:	4a0f      	ldr	r2, [pc, #60]	; (8005ea0 <Gimbal_Task+0x358>)
 8005e64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e68:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005e6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e70:	ee17 3a90 	vmov	r3, s15
 8005e74:	b21b      	sxth	r3, r3
		if(target_yaw>70){target_yaw=70;}
 8005e76:	2b46      	cmp	r3, #70	; 0x46
		target_yaw =((float)PC_mouse_x / yaw_magnification)-IMU_yaw+feed_forward_param;
 8005e78:	8013      	strh	r3, [r2, #0]
		if(target_yaw>70){target_yaw=70;}
 8005e7a:	f77f ae96 	ble.w	8005baa <Gimbal_Task+0x62>
 8005e7e:	2346      	movs	r3, #70	; 0x46
 8005e80:	8013      	strh	r3, [r2, #0]
 8005e82:	461c      	mov	r4, r3
 8005e84:	e69a      	b.n	8005bbc <Gimbal_Task+0x74>
 8005e86:	bf00      	nop
 8005e88:	05a02d01 	.word	0x05a02d01
 8005e8c:	3fa680b4 	.word	0x3fa680b4
 8005e90:	20000374 	.word	0x20000374
 8005e94:	20000644 	.word	0x20000644
 8005e98:	200003f0 	.word	0x200003f0
 8005e9c:	3d4ccccd 	.word	0x3d4ccccd
 8005ea0:	200005dc 	.word	0x200005dc
 8005ea4:	200003a4 	.word	0x200003a4
 8005ea8:	40b00000 	.word	0x40b00000
 8005eac:	200005f2 	.word	0x200005f2
 8005eb0:	51eb851f 	.word	0x51eb851f
 8005eb4:	404e0000 	.word	0x404e0000
 8005eb8:	200005cc 	.word	0x200005cc
 8005ebc:	20000484 	.word	0x20000484
 8005ec0:	3ca3d70a 	.word	0x3ca3d70a
 8005ec4:	200003f8 	.word	0x200003f8
 8005ec8:	200005d0 	.word	0x200005d0
 8005ecc:	40020c00 	.word	0x40020c00
 8005ed0:	6bca1af3 	.word	0x6bca1af3
 8005ed4:	200005b4 	.word	0x200005b4
 8005ed8:	200002a8 	.word	0x200002a8
 8005edc:	200007a8 	.word	0x200007a8
 8005ee0:	ffff8ad0 	.word	0xffff8ad0
 8005ee4:	200003b0 	.word	0x200003b0
 8005ee8:	200005bc 	.word	0x200005bc
 8005eec:	200005b0 	.word	0x200005b0
 8005ef0:	20000394 	.word	0x20000394
 8005ef4:	20000398 	.word	0x20000398
 8005ef8:	20000664 	.word	0x20000664
		sConfigOC.Pulse = map(50,0,180,500,2500);
 8005efc:	4f17      	ldr	r7, [pc, #92]	; (8005f5c <Gimbal_Task+0x414>)
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8005efe:	4818      	ldr	r0, [pc, #96]	; (8005f60 <Gimbal_Task+0x418>)
		sConfigOC.Pulse = map(50,0,180,500,2500);
 8005f00:	f240 431f 	movw	r3, #1055	; 0x41f
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8005f04:	4639      	mov	r1, r7
 8005f06:	2200      	movs	r2, #0
		sConfigOC.Pulse = map(120,0,180,500,2500);
 8005f08:	607b      	str	r3, [r7, #4]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8005f0a:	f7fc fbab 	bl	8002664 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8005f0e:	2100      	movs	r1, #0
 8005f10:	4813      	ldr	r0, [pc, #76]	; (8005f60 <Gimbal_Task+0x418>)
 8005f12:	f7fc fb7d 	bl	8002610 <HAL_TIM_PWM_Start>
		sConfigOC.Pulse = map(90,0,180,500,2500);
 8005f16:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8005f1a:	e751      	b.n	8005dc0 <Gimbal_Task+0x278>
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8005f1c:	4639      	mov	r1, r7
		sConfigOC.Pulse = map(90,0,180,500,2500);
 8005f1e:	f240 58dc 	movw	r8, #1500	; 0x5dc
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8005f22:	2200      	movs	r2, #0
		sConfigOC.Pulse = map(90,0,180,500,2500);
 8005f24:	f8c7 8004 	str.w	r8, [r7, #4]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8005f28:	f7fc fb9c 	bl	8002664 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	480c      	ldr	r0, [pc, #48]	; (8005f60 <Gimbal_Task+0x418>)
 8005f30:	f7fc fb6e 	bl	8002610 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 8005f34:	4639      	mov	r1, r7
 8005f36:	2204      	movs	r2, #4
 8005f38:	4809      	ldr	r0, [pc, #36]	; (8005f60 <Gimbal_Task+0x418>)
		sConfigOC.Pulse = map(90,0,180,500,2500);
 8005f3a:	f8c7 8004 	str.w	r8, [r7, #4]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 8005f3e:	f7fc fb91 	bl	8002664 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8005f42:	2104      	movs	r1, #4
 8005f44:	4806      	ldr	r0, [pc, #24]	; (8005f60 <Gimbal_Task+0x418>)
 8005f46:	f7fc fb63 	bl	8002610 <HAL_TIM_PWM_Start>
 8005f4a:	e743      	b.n	8005dd4 <Gimbal_Task+0x28c>
		sConfigOC.Pulse = map(120,0,180,500,2500);
 8005f4c:	4f03      	ldr	r7, [pc, #12]	; (8005f5c <Gimbal_Task+0x414>)
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8005f4e:	4804      	ldr	r0, [pc, #16]	; (8005f60 <Gimbal_Task+0x418>)
		sConfigOC.Pulse = map(120,0,180,500,2500);
 8005f50:	f240 7329 	movw	r3, #1833	; 0x729
 8005f54:	e7d6      	b.n	8005f04 <Gimbal_Task+0x3bc>
 8005f56:	461c      	mov	r4, r3
 8005f58:	e630      	b.n	8005bbc <Gimbal_Task+0x74>
 8005f5a:	bf00      	nop
 8005f5c:	200002a8 	.word	0x200002a8
 8005f60:	200007a8 	.word	0x200007a8

08005f64 <timerTask>:
void timerTask() { //call 500Hz
 8005f64:	b538      	push	{r3, r4, r5, lr}
	driveWheelTask();
 8005f66:	f7fe fff7 	bl	8004f58 <driveWheelTask>
	Gimbal_Task();
 8005f6a:	f7ff fded 	bl	8005b48 <Gimbal_Task>
	}
	}
}

void fire_Task(){
	if(rc.sw1==1){
 8005f6e:	4a1d      	ldr	r2, [pc, #116]	; (8005fe4 <timerTask+0x80>)
 8005f70:	7a93      	ldrb	r3, [r2, #10]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d026      	beq.n	8005fc4 <timerTask+0x60>
		}
		else{sw1_cnt++;}
	}
	else{
		sw1_cnt=1500;
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, sw1_cnt);
 8005f76:	4b1c      	ldr	r3, [pc, #112]	; (8005fe8 <timerTask+0x84>)
		sw1_cnt=1500;
 8005f78:	481c      	ldr	r0, [pc, #112]	; (8005fec <timerTask+0x88>)
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, sw1_cnt);
 8005f7a:	6819      	ldr	r1, [r3, #0]
		sw1_cnt=1500;
 8005f7c:	f240 53dc 	movw	r3, #1500	; 0x5dc
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, sw1_cnt);
 8005f80:	634b      	str	r3, [r1, #52]	; 0x34
		sw1_cnt=1500;
 8005f82:	8003      	strh	r3, [r0, #0]
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, sw1_cnt);
 8005f84:	638b      	str	r3, [r1, #56]	; 0x38
	}
}

void fire_task_open(){
	if(rc.key_Shift==1){
 8005f86:	f992 301e 	ldrsb.w	r3, [r2, #30]
		sConfigOC.Pulse = map(60,0,180,500,2500);
 8005f8a:	4c19      	ldr	r4, [pc, #100]	; (8005ff0 <timerTask+0x8c>)
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 8005f8c:	4819      	ldr	r0, [pc, #100]	; (8005ff4 <timerTask+0x90>)
	if(rc.key_Shift==1){
 8005f8e:	2b01      	cmp	r3, #1
		sConfigOC.Pulse = map(60,0,180,500,2500);
 8005f90:	bf0c      	ite	eq
 8005f92:	f240 458e 	movweq	r5, #1166	; 0x48e
		sConfigOC.Pulse = map(60,0,180,500,2500);
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4);
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
	}
	else{
		sConfigOC.Pulse = map(145,0,180,500,2500);
 8005f96:	f640 053f 	movwne	r5, #2111	; 0x83f
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 8005f9a:	4621      	mov	r1, r4
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 8005f9c:	2208      	movs	r2, #8
		sConfigOC.Pulse = map(145,0,180,500,2500);
 8005f9e:	6065      	str	r5, [r4, #4]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 8005fa0:	f7fc fb60 	bl	8002664 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8005fa4:	2108      	movs	r1, #8
 8005fa6:	4813      	ldr	r0, [pc, #76]	; (8005ff4 <timerTask+0x90>)
 8005fa8:	f7fc fb32 	bl	8002610 <HAL_TIM_PWM_Start>

		sConfigOC.Pulse = map(145,0,180,500,2500);
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4);
 8005fac:	4621      	mov	r1, r4
 8005fae:	220c      	movs	r2, #12
 8005fb0:	4810      	ldr	r0, [pc, #64]	; (8005ff4 <timerTask+0x90>)
		sConfigOC.Pulse = map(145,0,180,500,2500);
 8005fb2:	6065      	str	r5, [r4, #4]
		HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4);
 8005fb4:	f7fc fb56 	bl	8002664 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8005fb8:	210c      	movs	r1, #12
 8005fba:	480e      	ldr	r0, [pc, #56]	; (8005ff4 <timerTask+0x90>)
}
 8005fbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8005fc0:	f7fc bb26 	b.w	8002610 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, sw1_cnt);
 8005fc4:	4809      	ldr	r0, [pc, #36]	; (8005fec <timerTask+0x88>)
 8005fc6:	4908      	ldr	r1, [pc, #32]	; (8005fe8 <timerTask+0x84>)
 8005fc8:	8803      	ldrh	r3, [r0, #0]
 8005fca:	6809      	ldr	r1, [r1, #0]
		if(sw1_cnt>=1540){
 8005fcc:	f240 6403 	movw	r4, #1539	; 0x603
 8005fd0:	42a3      	cmp	r3, r4
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, sw1_cnt);
 8005fd2:	634b      	str	r3, [r1, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, sw1_cnt);
 8005fd4:	638b      	str	r3, [r1, #56]	; 0x38
			sw1_cnt=1540;
 8005fd6:	bf8c      	ite	hi
 8005fd8:	f240 6304 	movwhi	r3, #1540	; 0x604
		else{sw1_cnt++;}
 8005fdc:	3301      	addls	r3, #1
 8005fde:	8003      	strh	r3, [r0, #0]
 8005fe0:	e7d1      	b.n	8005f86 <timerTask+0x22>
 8005fe2:	bf00      	nop
 8005fe4:	20000374 	.word	0x20000374
 8005fe8:	200006e8 	.word	0x200006e8
 8005fec:	20000020 	.word	0x20000020
 8005ff0:	200002a8 	.word	0x200002a8
 8005ff4:	200007a8 	.word	0x200007a8

08005ff8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005ff8:	b538      	push	{r3, r4, r5, lr}
	if (htim->Instance == htim6.Instance) {
 8005ffa:	4b69      	ldr	r3, [pc, #420]	; (80061a0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8005ffc:	6802      	ldr	r2, [r0, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	429a      	cmp	r2, r3
 8006002:	d000      	beq.n	8006006 <HAL_TIM_PeriodElapsedCallback+0xe>
}
 8006004:	bd38      	pop	{r3, r4, r5, pc}
		mpu_get_data();
 8006006:	f7fd ff0b 	bl	8003e20 <mpu_get_data>
		imu_sensor.ax=imu.ax;
 800600a:	4a66      	ldr	r2, [pc, #408]	; (80061a4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800600c:	4b66      	ldr	r3, [pc, #408]	; (80061a8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800600e:	f9b2 1000 	ldrsh.w	r1, [r2]
		madgwick_ahrs_updateIMU(&imu_sensor, &imu_attitude);
 8006012:	4c66      	ldr	r4, [pc, #408]	; (80061ac <HAL_TIM_PeriodElapsedCallback+0x1b4>)
		imu_sensor.wy=imu.wy;
 8006014:	6955      	ldr	r5, [r2, #20]
 8006016:	611d      	str	r5, [r3, #16]
		imu_sensor.ax=imu.ax;
 8006018:	ee05 1a10 	vmov	s10, r1
		imu_sensor.ay=imu.ay;
 800601c:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 8006020:	ee05 1a90 	vmov	s11, r1
		imu_sensor.az=imu.az;
 8006024:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8006028:	ee06 1a10 	vmov	s12, r1
		imu_sensor.mx=imu.mx;
 800602c:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8006030:	ee06 1a90 	vmov	s13, r1
		imu_sensor.my=imu.my;
 8006034:	f9b2 1008 	ldrsh.w	r1, [r2, #8]
 8006038:	ee07 1a10 	vmov	s14, r1
		imu_sensor.mz=imu.mz;
 800603c:	f9b2 100a 	ldrsh.w	r1, [r2, #10]
 8006040:	ee07 1a90 	vmov	s15, r1
		imu_sensor.mx=imu.mx;
 8006044:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		imu_sensor.wx=imu.wx;
 8006048:	6911      	ldr	r1, [r2, #16]
 800604a:	60d9      	str	r1, [r3, #12]
		imu_sensor.my=imu.my;
 800604c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		imu_sensor.mz=imu.mz;
 8006050:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		imu_sensor.ax=imu.ax;
 8006054:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
		imu_sensor.ay=imu.ay;
 8006058:	eef8 5ae5 	vcvt.f32.s32	s11, s11
		imu_sensor.az=imu.az;
 800605c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
		imu_sensor.wz=imu.wz;
 8006060:	6992      	ldr	r2, [r2, #24]
		imu_sensor.mx=imu.mx;
 8006062:	edc3 6a06 	vstr	s13, [r3, #24]
		madgwick_ahrs_updateIMU(&imu_sensor, &imu_attitude);
 8006066:	4618      	mov	r0, r3
 8006068:	4621      	mov	r1, r4
		imu_sensor.my=imu.my;
 800606a:	ed83 7a07 	vstr	s14, [r3, #28]
		imu_sensor.mz=imu.mz;
 800606e:	edc3 7a08 	vstr	s15, [r3, #32]
		imu_sensor.ax=imu.ax;
 8006072:	ed83 5a00 	vstr	s10, [r3]
		imu_sensor.ay=imu.ay;
 8006076:	edc3 5a01 	vstr	s11, [r3, #4]
		imu_sensor.az=imu.az;
 800607a:	ed83 6a02 	vstr	s12, [r3, #8]
		imu_sensor.wz=imu.wz;
 800607e:	615a      	str	r2, [r3, #20]
		madgwick_ahrs_updateIMU(&imu_sensor, &imu_attitude);
 8006080:	f7fe fade 	bl	8004640 <madgwick_ahrs_updateIMU>
		IMU_pich=(imu_attitude.pitch)-IMU_pich_set;
 8006084:	4b4a      	ldr	r3, [pc, #296]	; (80061b0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8006086:	edd4 7a01 	vldr	s15, [r4, #4]
 800608a:	edd3 6a00 	vldr	s13, [r3]
		if(IMU_pich>  90.0){IMU_pich=IMU_pich-180;}
 800608e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80061b4 <HAL_TIM_PeriodElapsedCallback+0x1bc>
		IMU_pich=(imu_attitude.pitch)-IMU_pich_set;
 8006092:	ee77 7ae6 	vsub.f32	s15, s15, s13
		if(IMU_pich>  90.0){IMU_pich=IMU_pich-180;}
 8006096:	eef4 7ac7 	vcmpe.f32	s15, s14
 800609a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800609e:	bfc9      	itett	gt
 80060a0:	ed9f 7a45 	vldrgt	s14, [pc, #276]	; 80061b8 <HAL_TIM_PeriodElapsedCallback+0x1c0>
		IMU_pich=(imu_attitude.pitch)-IMU_pich_set;
 80060a4:	4b45      	ldrle	r3, [pc, #276]	; (80061bc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
		if(IMU_pich>  90.0){IMU_pich=IMU_pich-180;}
 80060a6:	4b45      	ldrgt	r3, [pc, #276]	; (80061bc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80060a8:	ee77 7ac7 	vsubgt.f32	s15, s15, s14
		if(IMU_pich< -90.0){IMU_pich=IMU_pich+180;}
 80060ac:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80061c0 <HAL_TIM_PeriodElapsedCallback+0x1c8>
		if(IMU_pich>  90.0){IMU_pich=IMU_pich-180;}
 80060b0:	edc3 7a00 	vstr	s15, [r3]
		if(IMU_pich< -90.0){IMU_pich=IMU_pich+180;}
 80060b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060bc:	d505      	bpl.n	80060ca <HAL_TIM_PeriodElapsedCallback+0xd2>
 80060be:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80061b8 <HAL_TIM_PeriodElapsedCallback+0x1c0>
 80060c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80060c6:	edc3 7a00 	vstr	s15, [r3]
		IMU_yaw=(imu_attitude.yaw)-IMU_yaw_set;
 80060ca:	4b3e      	ldr	r3, [pc, #248]	; (80061c4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80060cc:	edd4 7a02 	vldr	s15, [r4, #8]
 80060d0:	edd3 6a00 	vldr	s13, [r3]
		if(IMU_yaw>  180.0){IMU_yaw=IMU_yaw-360;}
 80060d4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80061b8 <HAL_TIM_PeriodElapsedCallback+0x1c0>
		IMU_yaw=(imu_attitude.yaw)-IMU_yaw_set;
 80060d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
		if(IMU_yaw>  180.0){IMU_yaw=IMU_yaw-360;}
 80060dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060e4:	bfc9      	itett	gt
 80060e6:	ed9f 7a38 	vldrgt	s14, [pc, #224]	; 80061c8 <HAL_TIM_PeriodElapsedCallback+0x1d0>
		IMU_yaw=(imu_attitude.yaw)-IMU_yaw_set;
 80060ea:	4b38      	ldrle	r3, [pc, #224]	; (80061cc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
		if(IMU_yaw>  180.0){IMU_yaw=IMU_yaw-360;}
 80060ec:	4b37      	ldrgt	r3, [pc, #220]	; (80061cc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80060ee:	ee77 7ac7 	vsubgt.f32	s15, s15, s14
		if(IMU_yaw< -180.0){IMU_yaw=IMU_yaw+360;}
 80060f2:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80061d0 <HAL_TIM_PeriodElapsedCallback+0x1d8>
		if(IMU_yaw>  180.0){IMU_yaw=IMU_yaw-360;}
 80060f6:	edc3 7a00 	vstr	s15, [r3]
		if(IMU_yaw< -180.0){IMU_yaw=IMU_yaw+360;}
 80060fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006102:	d505      	bpl.n	8006110 <HAL_TIM_PeriodElapsedCallback+0x118>
 8006104:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80061c8 <HAL_TIM_PeriodElapsedCallback+0x1d0>
 8006108:	ee77 7a87 	vadd.f32	s15, s15, s14
 800610c:	edc3 7a00 	vstr	s15, [r3]
		IMU_rol=(imu_attitude.roll)-IMU_rol_set;
 8006110:	4b30      	ldr	r3, [pc, #192]	; (80061d4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8006112:	edd4 7a00 	vldr	s15, [r4]
 8006116:	edd3 6a00 	vldr	s13, [r3]
		if(IMU_rol>  180.0){IMU_rol=IMU_rol-360;}
 800611a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80061b8 <HAL_TIM_PeriodElapsedCallback+0x1c0>
		IMU_rol=(imu_attitude.roll)-IMU_rol_set;
 800611e:	ee77 7ae6 	vsub.f32	s15, s15, s13
		if(IMU_rol>  180.0){IMU_rol=IMU_rol-360;}
 8006122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800612a:	bfc9      	itett	gt
 800612c:	ed9f 7a26 	vldrgt	s14, [pc, #152]	; 80061c8 <HAL_TIM_PeriodElapsedCallback+0x1d0>
		IMU_rol=(imu_attitude.roll)-IMU_rol_set;
 8006130:	4b29      	ldrle	r3, [pc, #164]	; (80061d8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
		if(IMU_rol>  180.0){IMU_rol=IMU_rol-360;}
 8006132:	4b29      	ldrgt	r3, [pc, #164]	; (80061d8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8006134:	ee77 7ac7 	vsubgt.f32	s15, s15, s14
		if(IMU_rol< -180.0){IMU_rol=IMU_rol+360;}
 8006138:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80061d0 <HAL_TIM_PeriodElapsedCallback+0x1d8>
		if(IMU_rol>  180.0){IMU_rol=IMU_rol-360;}
 800613c:	edc3 7a00 	vstr	s15, [r3]
		if(IMU_rol< -180.0){IMU_rol=IMU_rol+360;}
 8006140:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006148:	d505      	bpl.n	8006156 <HAL_TIM_PeriodElapsedCallback+0x15e>
 800614a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80061c8 <HAL_TIM_PeriodElapsedCallback+0x1d0>
 800614e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006152:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_tim_task>1){
 8006156:	4d21      	ldr	r5, [pc, #132]	; (80061dc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8006158:	782b      	ldrb	r3, [r5, #0]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d814      	bhi.n	8006188 <HAL_TIM_PeriodElapsedCallback+0x190>
 800615e:	3301      	adds	r3, #1
 8006160:	b2db      	uxtb	r3, r3
		if(cnt_tim>40){
 8006162:	4c1f      	ldr	r4, [pc, #124]	; (80061e0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
		cnt_tim_task++;
 8006164:	702b      	strb	r3, [r5, #0]
		if(cnt_tim>40){
 8006166:	7823      	ldrb	r3, [r4, #0]
 8006168:	2b28      	cmp	r3, #40	; 0x28
 800616a:	d811      	bhi.n	8006190 <HAL_TIM_PeriodElapsedCallback+0x198>
 800616c:	3301      	adds	r3, #1
 800616e:	b2db      	uxtb	r3, r3
		RC_time++;
 8006170:	4a1c      	ldr	r2, [pc, #112]	; (80061e4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
		cnt_tim++;
 8006172:	7023      	strb	r3, [r4, #0]
		RC_time++;
 8006174:	6813      	ldr	r3, [r2, #0]
		if(RC_time>20000){
 8006176:	f644 6120 	movw	r1, #20000	; 0x4e20
		RC_time++;
 800617a:	3301      	adds	r3, #1
		if(RC_time>20000){
 800617c:	428b      	cmp	r3, r1
		RC_time++;
 800617e:	6013      	str	r3, [r2, #0]
		if(RC_time>20000){
 8006180:	f67f af40 	bls.w	8006004 <HAL_TIM_PeriodElapsedCallback+0xc>
			NVIC_SystemReset();
 8006184:	f7fe fd10 	bl	8004ba8 <__NVIC_SystemReset>
		timerTask();
 8006188:	f7ff feec 	bl	8005f64 <timerTask>
 800618c:	2301      	movs	r3, #1
 800618e:	e7e8      	b.n	8006162 <HAL_TIM_PeriodElapsedCallback+0x16a>
			HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8006190:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006194:	4814      	ldr	r0, [pc, #80]	; (80061e8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8006196:	f7fb fc73 	bl	8001a80 <HAL_GPIO_TogglePin>
 800619a:	2301      	movs	r3, #1
 800619c:	e7e8      	b.n	8006170 <HAL_TIM_PeriodElapsedCallback+0x178>
 800619e:	bf00      	nop
 80061a0:	20000728 	.word	0x20000728
 80061a4:	20000218 	.word	0x20000218
 80061a8:	20000620 	.word	0x20000620
 80061ac:	200003b0 	.word	0x200003b0
 80061b0:	200003a8 	.word	0x200003a8
 80061b4:	42b40000 	.word	0x42b40000
 80061b8:	43340000 	.word	0x43340000
 80061bc:	200005cc 	.word	0x200005cc
 80061c0:	c2b40000 	.word	0xc2b40000
 80061c4:	200005bc 	.word	0x200005bc
 80061c8:	43b40000 	.word	0x43b40000
 80061cc:	20000394 	.word	0x20000394
 80061d0:	c3340000 	.word	0xc3340000
 80061d4:	200003ac 	.word	0x200003ac
 80061d8:	200003fc 	.word	0x200003fc
 80061dc:	200003ec 	.word	0x200003ec
 80061e0:	200005b8 	.word	0x200005b8
 80061e4:	200003f4 	.word	0x200003f4
 80061e8:	40021400 	.word	0x40021400

080061ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80061ec:	e7fe      	b.n	80061ec <Error_Handler>
 80061ee:	bf00      	nop

080061f0 <mecanum_calculate>:
  static float rotate_ratio_fl;
  static float rotate_ratio_bl;
  static float rotate_ratio_br;
  static float wheel_rpm_ratio;

  rotate_ratio_fr = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 80061f0:	edd0 7a01 	vldr	s15, [r0, #4]
 80061f4:	edd0 6a02 	vldr	s13, [r0, #8]
 80061f8:	ed90 5a03 	vldr	s10, [r0, #12]
  rotate_ratio_bl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f + mec->param.rotate_x_offset - mec->param.rotate_y_offset) / RADIAN_COEF;
  rotate_ratio_br = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f + mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;

  wheel_rpm_ratio = 60.0f / (mec->param.wheel_perimeter * MOTOR_DECELE_RATIO);

  MEC_VAL_LIMIT(mec->speed.vx, -MAX_CHASSIS_VX_SPEED, MAX_CHASSIS_VX_SPEED); //mm/s
 80061fc:	edd0 4a05 	vldr	s9, [r0, #20]
 8006200:	ed9f 6a67 	vldr	s12, [pc, #412]	; 80063a0 <mecanum_calculate+0x1b0>
  rotate_ratio_fr = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 8006204:	ed90 7a04 	vldr	s14, [r0, #16]
  wheel_rpm_ratio = 60.0f / (mec->param.wheel_perimeter * MOTOR_DECELE_RATIO);
 8006208:	ed90 2a00 	vldr	s4, [r0]
 800620c:	eddf 1a65 	vldr	s3, [pc, #404]	; 80063a4 <mecanum_calculate+0x1b4>
  rotate_ratio_fr = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 8006210:	ee76 6aa7 	vadd.f32	s13, s13, s15
{
 8006214:	b430      	push	{r4, r5}
  rotate_ratio_fr = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 8006216:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800621a:	eef0 7a45 	vmov.f32	s15, s10
 800621e:	eed6 7aa5 	vfnms.f32	s15, s13, s11
{
 8006222:	b084      	sub	sp, #16
 8006224:	4604      	mov	r4, r0
  rotate_ratio_bl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f + mec->param.rotate_x_offset - mec->param.rotate_y_offset) / RADIAN_COEF;
 8006226:	eea6 5aa5 	vfma.f32	s10, s13, s11
  MEC_VAL_LIMIT(mec->speed.vx, -MAX_CHASSIS_VX_SPEED, MAX_CHASSIS_VX_SPEED); //mm/s
 800622a:	eef4 4ac6 	vcmpe.f32	s9, s12
 800622e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  rotate_ratio_bl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f + mec->param.rotate_x_offset - mec->param.rotate_y_offset) / RADIAN_COEF;
 8006232:	ee35 3a47 	vsub.f32	s6, s10, s14
  rotate_ratio_fr = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 8006236:	ee77 2a87 	vadd.f32	s5, s15, s14
  rotate_ratio_fl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset - mec->param.rotate_y_offset) / RADIAN_COEF;
 800623a:	ee77 3ac7 	vsub.f32	s7, s15, s14
  rotate_ratio_br = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f + mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 800623e:	ee37 5a05 	vadd.f32	s10, s14, s10
  wheel_rpm_ratio = 60.0f / (mec->param.wheel_perimeter * MOTOR_DECELE_RATIO);
 8006242:	ee81 4a82 	vdiv.f32	s8, s3, s4
  MEC_VAL_LIMIT(mec->speed.vx, -MAX_CHASSIS_VX_SPEED, MAX_CHASSIS_VX_SPEED); //mm/s
 8006246:	f200 809e 	bhi.w	8006386 <mecanum_calculate+0x196>
 800624a:	ed80 6a05 	vstr	s12, [r0, #20]
 800624e:	eef0 4a46 	vmov.f32	s9, s12
  MEC_VAL_LIMIT(mec->speed.vy, -MAX_CHASSIS_VY_SPEED, MAX_CHASSIS_VY_SPEED); //mm/s
 8006252:	edd4 7a06 	vldr	s15, [r4, #24]
 8006256:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80063a0 <mecanum_calculate+0x1b0>
 800625a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800625e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006262:	f200 8084 	bhi.w	800636e <mecanum_calculate+0x17e>
 8006266:	ed84 7a06 	vstr	s14, [r4, #24]
 800626a:	eef0 7a47 	vmov.f32	s15, s14
  MEC_VAL_LIMIT(mec->speed.vw, -MAX_CHASSIS_VW_SPEED, MAX_CHASSIS_VW_SPEED); //deg/s
 800626e:	edd4 5a07 	vldr	s11, [r4, #28]
 8006272:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80063a8 <mecanum_calculate+0x1b8>
 8006276:	eef4 5ac7 	vcmpe.f32	s11, s14
 800627a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800627e:	d866      	bhi.n	800634e <mecanum_calculate+0x15e>
 8006280:	eddf 5a4a 	vldr	s11, [pc, #296]	; 80063ac <mecanum_calculate+0x1bc>
 8006284:	ed84 7a07 	vstr	s14, [r4, #28]
 8006288:	ee34 7aa7 	vadd.f32	s14, s9, s15

  float wheel_rpm[4];
  float max = 0;

  wheel_rpm[0] = (-mec->speed.vx - mec->speed.vy - mec->speed.vw * rotate_ratio_fr) * wheel_rpm_ratio;
  wheel_rpm[1] = ( mec->speed.vx - mec->speed.vy - mec->speed.vw * rotate_ratio_fl) * wheel_rpm_ratio;
 800628c:	ee74 6ae7 	vsub.f32	s13, s9, s15
 8006290:	eeb0 6a47 	vmov.f32	s12, s14
 8006294:	eea2 6aa5 	vfma.f32	s12, s5, s11
 8006298:	eee3 6ae5 	vfms.f32	s13, s7, s11
  wheel_rpm[2] = ( mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_bl) * wheel_rpm_ratio;
 800629c:	eea3 7a65 	vfms.f32	s14, s6, s11
 80062a0:	ee26 6a04 	vmul.f32	s12, s12, s8
  wheel_rpm[1] = ( mec->speed.vx - mec->speed.vy - mec->speed.vw * rotate_ratio_fl) * wheel_rpm_ratio;
 80062a4:	ee66 6a84 	vmul.f32	s13, s13, s8
  wheel_rpm[3] = (-mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_br) * wheel_rpm_ratio;
 80062a8:	ee77 7ae4 	vsub.f32	s15, s15, s9

  //find max item
  for (uint8_t i = 0; i < 4; i++)
  {
    if (fabs(wheel_rpm[i]) > max)
 80062ac:	eef0 4ac6 	vabs.f32	s9, s12
  wheel_rpm[3] = (-mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_br) * wheel_rpm_ratio;
 80062b0:	eee5 7a65 	vfms.f32	s15, s10, s11
    if (fabs(wheel_rpm[i]) > max)
 80062b4:	eef0 5ae6 	vabs.f32	s11, s13
 80062b8:	eef4 5ae4 	vcmpe.f32	s11, s9
  wheel_rpm[2] = ( mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_bl) * wheel_rpm_ratio;
 80062bc:	ee27 7a04 	vmul.f32	s14, s14, s8
 80062c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062c4:	bfb4      	ite	lt
 80062c6:	eeb0 5a64 	vmovlt.f32	s10, s9
 80062ca:	eeb0 5a65 	vmovge.f32	s10, s11
    if (fabs(wheel_rpm[i]) > max)
 80062ce:	eef0 5ac7 	vabs.f32	s11, s14
 80062d2:	eef4 5ac5 	vcmpe.f32	s11, s10
  wheel_rpm[3] = (-mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_br) * wheel_rpm_ratio;
 80062d6:	ee67 7a84 	vmul.f32	s15, s15, s8
 80062da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062de:	bfb8      	it	lt
 80062e0:	eef0 5a45 	vmovlt.f32	s11, s10
    if (fabs(wheel_rpm[i]) > max)
 80062e4:	eeb0 5ae7 	vabs.f32	s10, s15
 80062e8:	eeb4 5ae5 	vcmpe.f32	s10, s11
 80062ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      max = fabs(wheel_rpm[i]);
  }

  //equal proportion
  if (max > MAX_WHEEL_RPM)
 80062f0:	eddf 4a2f 	vldr	s9, [pc, #188]	; 80063b0 <mecanum_calculate+0x1c0>
  wheel_rpm[1] = ( mec->speed.vx - mec->speed.vy - mec->speed.vw * rotate_ratio_fl) * wheel_rpm_ratio;
 80062f4:	edcd 6a01 	vstr	s13, [sp, #4]
 80062f8:	bfa8      	it	ge
 80062fa:	eef0 5a45 	vmovge.f32	s11, s10
  if (max > MAX_WHEEL_RPM)
 80062fe:	eef4 5ae4 	vcmpe.f32	s11, s9
 8006302:	eeb1 6a46 	vneg.f32	s12, s12
 8006306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  wheel_rpm[2] = ( mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_bl) * wheel_rpm_ratio;
 800630a:	ed8d 7a02 	vstr	s14, [sp, #8]
  wheel_rpm[0] = (-mec->speed.vx - mec->speed.vy - mec->speed.vw * rotate_ratio_fr) * wheel_rpm_ratio;
 800630e:	ed8d 6a00 	vstr	s12, [sp]
  wheel_rpm[3] = (-mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_br) * wheel_rpm_ratio;
 8006312:	edcd 7a03 	vstr	s15, [sp, #12]
  if (max > MAX_WHEEL_RPM)
 8006316:	dd11      	ble.n	800633c <mecanum_calculate+0x14c>
  {
    float rate = MAX_WHEEL_RPM / max;
 8006318:	ee84 5aa5 	vdiv.f32	s10, s9, s11
    for (uint8_t i = 0; i < 4; i++)
      wheel_rpm[i] *= rate;
 800631c:	ee26 6a05 	vmul.f32	s12, s12, s10
 8006320:	ee66 6a85 	vmul.f32	s13, s13, s10
 8006324:	ee27 7a05 	vmul.f32	s14, s14, s10
 8006328:	ee67 7a85 	vmul.f32	s15, s15, s10
 800632c:	ed8d 6a00 	vstr	s12, [sp]
 8006330:	edcd 6a01 	vstr	s13, [sp, #4]
 8006334:	ed8d 7a02 	vstr	s14, [sp, #8]
 8006338:	edcd 7a03 	vstr	s15, [sp, #12]
  }
  memcpy(mec->wheel_rpm, wheel_rpm, 4 * sizeof(float));
 800633c:	466d      	mov	r5, sp
 800633e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006340:	6420      	str	r0, [r4, #64]	; 0x40
 8006342:	6461      	str	r1, [r4, #68]	; 0x44
 8006344:	64a2      	str	r2, [r4, #72]	; 0x48
 8006346:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8006348:	b004      	add	sp, #16
 800634a:	bc30      	pop	{r4, r5}
 800634c:	4770      	bx	lr
  MEC_VAL_LIMIT(mec->speed.vw, -MAX_CHASSIS_VW_SPEED, MAX_CHASSIS_VW_SPEED); //deg/s
 800634e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80063b4 <mecanum_calculate+0x1c4>
 8006352:	eef4 5ac7 	vcmpe.f32	s11, s14
 8006356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800635a:	bfb3      	iteet	lt
 800635c:	ed9f 7a16 	vldrlt	s14, [pc, #88]	; 80063b8 <mecanum_calculate+0x1c8>
 8006360:	eddf 5a16 	vldrge	s11, [pc, #88]	; 80063bc <mecanum_calculate+0x1cc>
 8006364:	ed84 7a07 	vstrge	s14, [r4, #28]
 8006368:	ee65 5a87 	vmullt.f32	s11, s11, s14
 800636c:	e78c      	b.n	8006288 <mecanum_calculate+0x98>
  MEC_VAL_LIMIT(mec->speed.vy, -MAX_CHASSIS_VY_SPEED, MAX_CHASSIS_VY_SPEED); //mm/s
 800636e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80063c0 <mecanum_calculate+0x1d0>
 8006372:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800637a:	bfa4      	itt	ge
 800637c:	eef0 7a47 	vmovge.f32	s15, s14
 8006380:	ed84 7a06 	vstrge	s14, [r4, #24]
 8006384:	e773      	b.n	800626e <mecanum_calculate+0x7e>
  MEC_VAL_LIMIT(mec->speed.vx, -MAX_CHASSIS_VX_SPEED, MAX_CHASSIS_VX_SPEED); //mm/s
 8006386:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80063c0 <mecanum_calculate+0x1d0>
 800638a:	eef4 4ae7 	vcmpe.f32	s9, s15
 800638e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006392:	bfa4      	itt	ge
 8006394:	eef0 4a67 	vmovge.f32	s9, s15
 8006398:	edc0 7a05 	vstrge	s15, [r0, #20]
 800639c:	e759      	b.n	8006252 <mecanum_calculate+0x62>
 800639e:	bf00      	nop
 80063a0:	c4ce4000 	.word	0xc4ce4000
 80063a4:	448e8000 	.word	0x448e8000
 80063a8:	c3160000 	.word	0xc3160000
 80063ac:	c0278a0e 	.word	0xc0278a0e
 80063b0:	4584d000 	.word	0x4584d000
 80063b4:	43160000 	.word	0x43160000
 80063b8:	3c8ef783 	.word	0x3c8ef783
 80063bc:	40278a0e 	.word	0x40278a0e
 80063c0:	44ce4000 	.word	0x44ce4000

080063c4 <driveWheel>:
 */
#include "motor.h"

const int CaseMotor_MaxSpeed = 30 * 256;

void driveWheel(int16_t *u) {
 80063c4:	b530      	push	{r4, r5, lr}
	header.IDE = CAN_ID_STD;
	header.DLC = 8;
	//header.TransmitGlobalTime = DISABLE;

	for (int i = 0; i < 4; i++) {
		if (CaseMotor_MaxSpeed < u[i]) {
 80063c6:	f9b0 3000 	ldrsh.w	r3, [r0]
void driveWheel(int16_t *u) {
 80063ca:	b08b      	sub	sp, #44	; 0x2c
	uint8_t TxData[8] = { 0 };
 80063cc:	2200      	movs	r2, #0
	header.StdId = 0x200;
 80063ce:	f44f 7400 	mov.w	r4, #512	; 0x200
	header.DLC = 8;
 80063d2:	2108      	movs	r1, #8
		if (CaseMotor_MaxSpeed < u[i]) {
 80063d4:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
	header.RTR = CAN_RTR_DATA;
 80063d8:	9207      	str	r2, [sp, #28]
	header.IDE = CAN_ID_STD;
 80063da:	9206      	str	r2, [sp, #24]
	header.StdId = 0x200;
 80063dc:	9404      	str	r4, [sp, #16]
	header.DLC = 8;
 80063de:	9108      	str	r1, [sp, #32]
		if (CaseMotor_MaxSpeed < u[i]) {
 80063e0:	dc08      	bgt.n	80063f4 <driveWheel+0x30>
			u[i] = CaseMotor_MaxSpeed - 1;
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 80063e2:	f513 5ff0 	cmn.w	r3, #7680	; 0x1e00
 80063e6:	da67      	bge.n	80064b8 <driveWheel+0xf4>
			u[i] = -CaseMotor_MaxSpeed + 1;
 80063e8:	f24e 2301 	movw	r3, #57857	; 0xe201
 80063ec:	8003      	strh	r3, [r0, #0]
 80063ee:	2201      	movs	r2, #1
 80063f0:	21e2      	movs	r1, #226	; 0xe2
 80063f2:	e004      	b.n	80063fe <driveWheel+0x3a>
			u[i] = CaseMotor_MaxSpeed - 1;
 80063f4:	f641 53ff 	movw	r3, #7679	; 0x1dff
 80063f8:	8003      	strh	r3, [r0, #0]
 80063fa:	22ff      	movs	r2, #255	; 0xff
 80063fc:	211d      	movs	r1, #29
		if (CaseMotor_MaxSpeed < u[i]) {
 80063fe:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
		}
		TxData[i * 2] = u[i] >> 8;
 8006402:	f88d 1008 	strb.w	r1, [sp, #8]
		if (CaseMotor_MaxSpeed < u[i]) {
 8006406:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
		TxData[i * 2 + 1] = u[i] & 0xFF;
 800640a:	f88d 2009 	strb.w	r2, [sp, #9]
		if (CaseMotor_MaxSpeed < u[i]) {
 800640e:	dc08      	bgt.n	8006422 <driveWheel+0x5e>
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 8006410:	f513 5ff0 	cmn.w	r3, #7680	; 0x1e00
 8006414:	da4c      	bge.n	80064b0 <driveWheel+0xec>
			u[i] = -CaseMotor_MaxSpeed + 1;
 8006416:	f24e 2301 	movw	r3, #57857	; 0xe201
 800641a:	8043      	strh	r3, [r0, #2]
 800641c:	2201      	movs	r2, #1
 800641e:	21e2      	movs	r1, #226	; 0xe2
 8006420:	e004      	b.n	800642c <driveWheel+0x68>
			u[i] = CaseMotor_MaxSpeed - 1;
 8006422:	f641 53ff 	movw	r3, #7679	; 0x1dff
 8006426:	8043      	strh	r3, [r0, #2]
 8006428:	22ff      	movs	r2, #255	; 0xff
 800642a:	211d      	movs	r1, #29
		if (CaseMotor_MaxSpeed < u[i]) {
 800642c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
		TxData[i * 2] = u[i] >> 8;
 8006430:	f88d 100a 	strb.w	r1, [sp, #10]
		if (CaseMotor_MaxSpeed < u[i]) {
 8006434:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
		TxData[i * 2 + 1] = u[i] & 0xFF;
 8006438:	f88d 200b 	strb.w	r2, [sp, #11]
		if (CaseMotor_MaxSpeed < u[i]) {
 800643c:	dc08      	bgt.n	8006450 <driveWheel+0x8c>
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 800643e:	f513 5ff0 	cmn.w	r3, #7680	; 0x1e00
 8006442:	da31      	bge.n	80064a8 <driveWheel+0xe4>
			u[i] = -CaseMotor_MaxSpeed + 1;
 8006444:	f24e 2301 	movw	r3, #57857	; 0xe201
 8006448:	8083      	strh	r3, [r0, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	21e2      	movs	r1, #226	; 0xe2
 800644e:	e004      	b.n	800645a <driveWheel+0x96>
			u[i] = CaseMotor_MaxSpeed - 1;
 8006450:	f641 53ff 	movw	r3, #7679	; 0x1dff
 8006454:	8083      	strh	r3, [r0, #4]
 8006456:	22ff      	movs	r2, #255	; 0xff
 8006458:	211d      	movs	r1, #29
		if (CaseMotor_MaxSpeed < u[i]) {
 800645a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
		TxData[i * 2] = u[i] >> 8;
 800645e:	f88d 100c 	strb.w	r1, [sp, #12]
		if (CaseMotor_MaxSpeed < u[i]) {
 8006462:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
		TxData[i * 2 + 1] = u[i] & 0xFF;
 8006466:	f88d 200d 	strb.w	r2, [sp, #13]
		if (CaseMotor_MaxSpeed < u[i]) {
 800646a:	dd10      	ble.n	800648e <driveWheel+0xca>
			u[i] = CaseMotor_MaxSpeed - 1;
 800646c:	f641 53ff 	movw	r3, #7679	; 0x1dff
 8006470:	80c3      	strh	r3, [r0, #6]
 8006472:	24ff      	movs	r4, #255	; 0xff
 8006474:	251d      	movs	r5, #29
	}

	HAL_CAN_AddTxMessage(&hcan2, &header, TxData, &TxMailbox);
 8006476:	aa02      	add	r2, sp, #8
 8006478:	ab01      	add	r3, sp, #4
 800647a:	a904      	add	r1, sp, #16
 800647c:	4810      	ldr	r0, [pc, #64]	; (80064c0 <driveWheel+0xfc>)
		TxData[i * 2] = u[i] >> 8;
 800647e:	f88d 500e 	strb.w	r5, [sp, #14]
		TxData[i * 2 + 1] = u[i] & 0xFF;
 8006482:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_CAN_AddTxMessage(&hcan2, &header, TxData, &TxMailbox);
 8006486:	f7fa ff07 	bl	8001298 <HAL_CAN_AddTxMessage>

}
 800648a:	b00b      	add	sp, #44	; 0x2c
 800648c:	bd30      	pop	{r4, r5, pc}
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 800648e:	f513 5ff0 	cmn.w	r3, #7680	; 0x1e00
 8006492:	da05      	bge.n	80064a0 <driveWheel+0xdc>
			u[i] = -CaseMotor_MaxSpeed + 1;
 8006494:	f24e 2301 	movw	r3, #57857	; 0xe201
 8006498:	80c3      	strh	r3, [r0, #6]
 800649a:	2401      	movs	r4, #1
 800649c:	25e2      	movs	r5, #226	; 0xe2
 800649e:	e7ea      	b.n	8006476 <driveWheel+0xb2>
 80064a0:	f3c3 2507 	ubfx	r5, r3, #8, #8
 80064a4:	b2dc      	uxtb	r4, r3
 80064a6:	e7e6      	b.n	8006476 <driveWheel+0xb2>
 80064a8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80064ac:	b2da      	uxtb	r2, r3
 80064ae:	e7d4      	b.n	800645a <driveWheel+0x96>
 80064b0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80064b4:	b2da      	uxtb	r2, r3
 80064b6:	e7b9      	b.n	800642c <driveWheel+0x68>
 80064b8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80064bc:	b2da      	uxtb	r2, r3
 80064be:	e79e      	b.n	80063fe <driveWheel+0x3a>
 80064c0:	20000324 	.word	0x20000324

080064c4 <driveGimbalMotors>:

void driveGimbalMotors(int16_t *u) {
 80064c4:	b5f0      	push	{r4, r5, r6, r7, lr}
			u[i] = CaseMotor_MaxSpeed - 1;
		} else if (u[i] < -CaseMotor_MaxSpeed) {
			u[i] = -CaseMotor_MaxSpeed + 1;
		}
		}
		TxData[i * 2] = u[i] >> 8;
 80064c6:	f9b0 3000 	ldrsh.w	r3, [r0]
 80064ca:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
		if (CaseMotor_MaxSpeed < u[i]) {
 80064ce:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
void driveGimbalMotors(int16_t *u) {
 80064d2:	b08b      	sub	sp, #44	; 0x2c
	header.StdId = 0x1ff;
 80064d4:	f240 11ff 	movw	r1, #511	; 0x1ff
		TxData[i * 2 + 1] = u[i] & 0xFF;
 80064d8:	f88d 3009 	strb.w	r3, [sp, #9]
		TxData[i * 2] = u[i] >> 8;
 80064dc:	121b      	asrs	r3, r3, #8
 80064de:	1215      	asrs	r5, r2, #8
 80064e0:	f88d 3008 	strb.w	r3, [sp, #8]
	header.IDE = CAN_ID_STD;
 80064e4:	2600      	movs	r6, #0
	header.DLC = 8;
 80064e6:	2308      	movs	r3, #8
	header.IDE = CAN_ID_STD;
 80064e8:	2700      	movs	r7, #0
		if (CaseMotor_MaxSpeed < u[i]) {
 80064ea:	f5b4 5ff0 	cmp.w	r4, #7680	; 0x1e00
		TxData[i * 2 + 1] = u[i] & 0xFF;
 80064ee:	f88d 200b 	strb.w	r2, [sp, #11]
		TxData[i * 2] = u[i] >> 8;
 80064f2:	f88d 500a 	strb.w	r5, [sp, #10]
	header.StdId = 0x1ff;
 80064f6:	9104      	str	r1, [sp, #16]
	header.IDE = CAN_ID_STD;
 80064f8:	e9cd 6706 	strd	r6, r7, [sp, #24]
	header.DLC = 8;
 80064fc:	9308      	str	r3, [sp, #32]
		if (CaseMotor_MaxSpeed < u[i]) {
 80064fe:	dd16      	ble.n	800652e <driveGimbalMotors+0x6a>
			u[i] = CaseMotor_MaxSpeed - 1;
 8006500:	f641 54ff 	movw	r4, #7679	; 0x1dff
 8006504:	8084      	strh	r4, [r0, #4]
		TxData[i * 2] = u[i] >> 8;
 8006506:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
		TxData[i * 2 + 1] = u[i] & 0xFF;
 800650a:	f88d 300f 	strb.w	r3, [sp, #15]
		TxData[i * 2] = u[i] >> 8;
 800650e:	1219      	asrs	r1, r3, #8
 8006510:	f88d 100e 	strb.w	r1, [sp, #14]
 8006514:	1225      	asrs	r5, r4, #8
	}

	HAL_CAN_AddTxMessage(&hcan1, &header, TxData, &TxMailbox);
 8006516:	ab01      	add	r3, sp, #4
 8006518:	aa02      	add	r2, sp, #8
 800651a:	a904      	add	r1, sp, #16
 800651c:	4808      	ldr	r0, [pc, #32]	; (8006540 <driveGimbalMotors+0x7c>)
		TxData[i * 2 + 1] = u[i] & 0xFF;
 800651e:	f88d 400d 	strb.w	r4, [sp, #13]
		TxData[i * 2] = u[i] >> 8;
 8006522:	f88d 500c 	strb.w	r5, [sp, #12]
	HAL_CAN_AddTxMessage(&hcan1, &header, TxData, &TxMailbox);
 8006526:	f7fa feb7 	bl	8001298 <HAL_CAN_AddTxMessage>
}
 800652a:	b00b      	add	sp, #44	; 0x2c
 800652c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 800652e:	f514 5ff0 	cmn.w	r4, #7680	; 0x1e00
 8006532:	dae8      	bge.n	8006506 <driveGimbalMotors+0x42>
			u[i] = -CaseMotor_MaxSpeed + 1;
 8006534:	f24e 2401 	movw	r4, #57857	; 0xe201
 8006538:	8084      	strh	r4, [r0, #4]
 800653a:	b224      	sxth	r4, r4
 800653c:	e7e3      	b.n	8006506 <driveGimbalMotors+0x42>
 800653e:	bf00      	nop
 8006540:	2000034c 	.word	0x2000034c

08006544 <pidExecute>:
 */
#include "pid.h"

float pidExecute(_pid_t *pid) {
	float u = 0;
	pid->integralOut += pid->i * pid->error * (pid->t/1000.0f);
 8006544:	ed90 6a0a 	vldr	s12, [r0, #40]	; 0x28
 8006548:	edd0 7a02 	vldr	s15, [r0, #8]
 800654c:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80065fc <pidExecute+0xb8>
 8006550:	ed90 7a07 	vldr	s14, [r0, #28]
 8006554:	edd0 4a00 	vldr	s9, [r0]
	if (pid->integralOutLimit < pid->integralOut) pid->integralOut = pid->integralOutLimit;
 8006558:	edd0 6a05 	vldr	s13, [r0, #20]
	pid->integralOut += pid->i * pid->error * (pid->t/1000.0f);
 800655c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006560:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006564:	eea4 7aa7 	vfma.f32	s14, s9, s15
	if (pid->integralOutLimit < pid->integralOut) pid->integralOut = pid->integralOutLimit;
 8006568:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800656c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	pid->integralOut += pid->i * pid->error * (pid->t/1000.0f);
 8006570:	ed80 7a07 	vstr	s14, [r0, #28]
	if (pid->integralOutLimit < pid->integralOut) pid->integralOut = pid->integralOutLimit;
 8006574:	dc06      	bgt.n	8006584 <pidExecute+0x40>
	else if (pid->integralOut < -pid->integralOutLimit) pid->integralOut = -pid->integralOutLimit;
 8006576:	eef1 6a66 	vneg.f32	s13, s13
 800657a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800657e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006582:	d538      	bpl.n	80065f6 <pidExecute+0xb2>
 8006584:	edc0 6a07 	vstr	s13, [r0, #28]
	pid->differentialFilter = pid->differentialFilter * pid->differentialFilterRate + (pid->d * (pid->error - pid->lastError)*(1000.0f/pid->t)) * (1 - pid->differentialFilterRate);
 8006588:	ed9f 3a1d 	vldr	s6, [pc, #116]	; 8006600 <pidExecute+0xbc>
 800658c:	ed90 7a03 	vldr	s14, [r0, #12]
 8006590:	edd0 5a08 	vldr	s11, [r0, #32]
 8006594:	ed90 5a06 	vldr	s10, [r0, #24]
 8006598:	edd0 3a09 	vldr	s7, [r0, #36]	; 0x24
	u = pid->p * pid->error + pid->integralOut + pid->differentialFilter;
 800659c:	ed90 4a01 	vldr	s8, [r0, #4]
	if (pid->outLimit < u) u = pid->outLimit;
 80065a0:	ed90 0a04 	vldr	s0, [r0, #16]
	pid->differentialFilter = pid->differentialFilter * pid->differentialFilterRate + (pid->d * (pid->error - pid->lastError)*(1000.0f/pid->t)) * (1 - pid->differentialFilterRate);
 80065a4:	eec3 7a24 	vdiv.f32	s15, s6, s9
 80065a8:	ee76 5a65 	vsub.f32	s11, s12, s11
 80065ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065b4:	ee37 7a45 	vsub.f32	s14, s14, s10
 80065b8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80065bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065c0:	eee3 7a85 	vfma.f32	s15, s7, s10
	u = pid->p * pid->error + pid->integralOut + pid->differentialFilter;
 80065c4:	eeb0 7a67 	vmov.f32	s14, s15
 80065c8:	eea6 7a04 	vfma.f32	s14, s12, s8
	pid->differentialFilter = pid->differentialFilter * pid->differentialFilterRate + (pid->d * (pid->error - pid->lastError)*(1000.0f/pid->t)) * (1 - pid->differentialFilterRate);
 80065cc:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
	u = pid->p * pid->error + pid->integralOut + pid->differentialFilter;
 80065d0:	ee77 6a26 	vadd.f32	s13, s14, s13
	if (pid->outLimit < u) u = pid->outLimit;
 80065d4:	eeb4 0ae6 	vcmpe.f32	s0, s13
 80065d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065dc:	d408      	bmi.n	80065f0 <pidExecute+0xac>
	else if (u < -pid->outLimit)u = -pid->outLimit;
 80065de:	eeb1 0a40 	vneg.f32	s0, s0
 80065e2:	eeb4 0ae6 	vcmpe.f32	s0, s13
 80065e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ea:	bfb8      	it	lt
 80065ec:	eeb0 0a66 	vmovlt.f32	s0, s13
	pid->lastError = pid->error;
 80065f0:	ed80 6a08 	vstr	s12, [r0, #32]
	return u;
}
 80065f4:	4770      	bx	lr
 80065f6:	eef0 6a47 	vmov.f32	s13, s14
 80065fa:	e7c5      	b.n	8006588 <pidExecute+0x44>
 80065fc:	3a83126f 	.word	0x3a83126f
 8006600:	447a0000 	.word	0x447a0000

08006604 <makeCustomDataPacket>:
extClientCustomData_t CustomData;
extFrameHeader_t frameHeader;

uint16_t crc16Value;

void makeCustomDataPacket(uint8_t packet[28]){
 8006604:	b470      	push	{r4, r5, r6}


}

void setFrameHeader(uint8_t header[7]){
  frameHeader.sof = 0xA5;
 8006606:	4a29      	ldr	r2, [pc, #164]	; (80066ac <makeCustomDataPacket+0xa8>)
  packet[OFFSET +3] = (uint8_t)(((0xFF00 & CustomData.senderID) >> 8) & 0xFF);
 8006608:	4b29      	ldr	r3, [pc, #164]	; (80066b0 <makeCustomDataPacket+0xac>)
  frameHeader.dataLength = 19;
  frameHeader.seq = 1;
  frameHeader.cmdId = 0x0301;
  //CRCCheck
  header[0] = 0xA5; //sof
 800660a:	492a      	ldr	r1, [pc, #168]	; (80066b4 <makeCustomDataPacket+0xb0>)
wCRC = Get_CRC16_Check_Sum ( (uint8_t *)pchMessage, dwLength-2, CRC_INIT );
 800660c:	4e2a      	ldr	r6, [pc, #168]	; (80066b8 <makeCustomDataPacket+0xb4>)
  frameHeader.sof = 0xA5;
 800660e:	24a5      	movs	r4, #165	; 0xa5
 8006610:	7014      	strb	r4, [r2, #0]
  frameHeader.dataLength = 19;
 8006612:	2413      	movs	r4, #19
 8006614:	8054      	strh	r4, [r2, #2]
  frameHeader.seq = 1;
 8006616:	2401      	movs	r4, #1
 8006618:	7114      	strb	r4, [r2, #4]
void makeCustomDataPacket(uint8_t packet[28]){
 800661a:	b083      	sub	sp, #12
  frameHeader.cmdId = 0x0301;
 800661c:	f240 3401 	movw	r4, #769	; 0x301
 8006620:	80d4      	strh	r4, [r2, #6]
  header[0] = 0xA5; //sof
 8006622:	f240 1233 	movw	r2, #307	; 0x133
 8006626:	f8ad 2004 	strh.w	r2, [sp, #4]
 800662a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800662e:	6001      	str	r1, [r0, #0]
 8006630:	8082      	strh	r2, [r0, #4]
 8006632:	2203      	movs	r2, #3
 8006634:	7182      	strb	r2, [r0, #6]
  packet[OFFSET +3] = (uint8_t)(((0xFF00 & CustomData.senderID) >> 8) & 0xFF);
 8006636:	8859      	ldrh	r1, [r3, #2]
  packet[OFFSET +2] = (uint8_t)((0x00FF & CustomData.senderID) & 0xFF);
 8006638:	7241      	strb	r1, [r0, #9]
  packet[OFFSET +0] = (uint8_t)((0x00FF & dataContentsID) & 0xFF);
 800663a:	2280      	movs	r2, #128	; 0x80
 800663c:	71c2      	strb	r2, [r0, #7]
  packet[OFFSET +1] = (uint8_t)(((0xFF00 & dataContentsID) >> 8) & 0xFF);
 800663e:	24d1      	movs	r4, #209	; 0xd1
  packet[OFFSET +5] = (uint8_t)(((0xFF00 & CustomData.ClientID) >> 8) & 0xFF);
 8006640:	889a      	ldrh	r2, [r3, #4]
  packet[OFFSET +1] = (uint8_t)(((0xFF00 & dataContentsID) >> 8) & 0xFF);
 8006642:	7204      	strb	r4, [r0, #8]
  packet[OFFSET +3] = (uint8_t)(((0xFF00 & CustomData.senderID) >> 8) & 0xFF);
 8006644:	0a0c      	lsrs	r4, r1, #8
 8006646:	7284      	strb	r4, [r0, #10]
  packet[OFFSET +5] = (uint8_t)(((0xFF00 & CustomData.ClientID) >> 8) & 0xFF);
 8006648:	0a15      	lsrs	r5, r2, #8
  packet[OFFSET +4] = (uint8_t)((0x00FF & CustomData.ClientID) & 0xFF);
 800664a:	72c2      	strb	r2, [r0, #11]
  packet[OFFSET +5] = (uint8_t)(((0xFF00 & CustomData.ClientID) >> 8) & 0xFF);
 800664c:	7305      	strb	r5, [r0, #12]
  packet[OFFSET +6] = bs1[0];
 800664e:	7a1c      	ldrb	r4, [r3, #8]
  packet[OFFSET +7] = bs1[1];
 8006650:	7a59      	ldrb	r1, [r3, #9]
  packet[OFFSET +8] = bs1[2];
 8006652:	7a9a      	ldrb	r2, [r3, #10]
  packet[OFFSET +6] = bs1[0];
 8006654:	7344      	strb	r4, [r0, #13]
  packet[OFFSET +7] = bs1[1];
 8006656:	7381      	strb	r1, [r0, #14]
  packet[OFFSET +8] = bs1[2];
 8006658:	73c2      	strb	r2, [r0, #15]
  packet[OFFSET +9] = bs1[3];
 800665a:	7ad9      	ldrb	r1, [r3, #11]
  packet[OFFSET +10] = bs2[0];
 800665c:	7b1a      	ldrb	r2, [r3, #12]
  packet[OFFSET +11] = bs2[1];
 800665e:	7b5c      	ldrb	r4, [r3, #13]
  packet[OFFSET +9] = bs1[3];
 8006660:	7401      	strb	r1, [r0, #16]
  packet[OFFSET +10] = bs2[0];
 8006662:	7442      	strb	r2, [r0, #17]
  packet[OFFSET +12] = bs2[2];
 8006664:	7b99      	ldrb	r1, [r3, #14]
  packet[OFFSET +13] = bs2[3];
 8006666:	7bda      	ldrb	r2, [r3, #15]
  packet[OFFSET +11] = bs2[1];
 8006668:	7484      	strb	r4, [r0, #18]
  packet[OFFSET +12] = bs2[2];
 800666a:	74c1      	strb	r1, [r0, #19]
  packet[OFFSET +14] = bs3[0];
 800666c:	7c1c      	ldrb	r4, [r3, #16]
  packet[OFFSET +15] = bs3[1];
 800666e:	7c59      	ldrb	r1, [r3, #17]
  packet[OFFSET +13] = bs2[3];
 8006670:	7502      	strb	r2, [r0, #20]
  packet[OFFSET +14] = bs3[0];
 8006672:	7544      	strb	r4, [r0, #21]
  packet[OFFSET +15] = bs3[1];
 8006674:	7581      	strb	r1, [r0, #22]
  packet[OFFSET +16] = bs3[2];
 8006676:	7c9c      	ldrb	r4, [r3, #18]
  packet[OFFSET +17] = bs3[3];
 8006678:	7cd9      	ldrb	r1, [r3, #19]
 800667a:	4d10      	ldr	r5, [pc, #64]	; (80066bc <makeCustomDataPacket+0xb8>)
  packet[OFFSET +18] = CustomData.masks;
 800667c:	7d1b      	ldrb	r3, [r3, #20]
wCRC = Get_CRC16_Check_Sum ( (uint8_t *)pchMessage, dwLength-2, CRC_INIT );
 800667e:	8832      	ldrh	r2, [r6, #0]
  packet[OFFSET +16] = bs3[2];
 8006680:	75c4      	strb	r4, [r0, #23]
  packet[OFFSET +17] = bs3[3];
 8006682:	7601      	strb	r1, [r0, #24]
  packet[OFFSET +18] = CustomData.masks;
 8006684:	7643      	strb	r3, [r0, #25]
 8006686:	f100 041a 	add.w	r4, r0, #26
wCRC = Get_CRC16_Check_Sum ( (uint8_t *)pchMessage, dwLength-2, CRC_INIT );
 800668a:	4601      	mov	r1, r0
(wCRC) = ((uint16_t)(wCRC) >> 8) ^ wCRC_Table[((uint16_t)(wCRC) ^ (uint16_t)(chData)) & 0x00ff];
 800668c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006690:	4053      	eors	r3, r2
 8006692:	b2db      	uxtb	r3, r3
while(dwLength--)
 8006694:	42a1      	cmp	r1, r4
(wCRC) = ((uint16_t)(wCRC) >> 8) ^ wCRC_Table[((uint16_t)(wCRC) ^ (uint16_t)(chData)) & 0x00ff];
 8006696:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 800669a:	ea83 2212 	eor.w	r2, r3, r2, lsr #8
while(dwLength--)
 800669e:	d1f5      	bne.n	800668c <makeCustomDataPacket+0x88>
pchMessage[dwLength-1] = (uint8_t)((wCRC >> 8)& 0x00ff);
 80066a0:	0a13      	lsrs	r3, r2, #8
pchMessage[dwLength-2] = (uint8_t)(wCRC & 0x00ff);
 80066a2:	7682      	strb	r2, [r0, #26]
pchMessage[dwLength-1] = (uint8_t)((wCRC >> 8)& 0x00ff);
 80066a4:	76c3      	strb	r3, [r0, #27]
}
 80066a6:	b003      	add	sp, #12
 80066a8:	bc70      	pop	{r4, r5, r6}
 80066aa:	4770      	bx	lr
 80066ac:	20000668 	.word	0x20000668
 80066b0:	20000674 	.word	0x20000674
 80066b4:	010013a5 	.word	0x010013a5
 80066b8:	20000022 	.word	0x20000022
 80066bc:	0800be28 	.word	0x0800be28

080066c0 <setData1>:

}


 void setData1(float value){
  CustomData.data1 = value;
 80066c0:	4b01      	ldr	r3, [pc, #4]	; (80066c8 <setData1+0x8>)
 80066c2:	ed83 0a02 	vstr	s0, [r3, #8]
}
 80066c6:	4770      	bx	lr
 80066c8:	20000674 	.word	0x20000674

080066cc <setData2>:
 void setData2(float value){
  CustomData.data2 = value;
 80066cc:	4b01      	ldr	r3, [pc, #4]	; (80066d4 <setData2+0x8>)
 80066ce:	ed83 0a03 	vstr	s0, [r3, #12]
}
 80066d2:	4770      	bx	lr
 80066d4:	20000674 	.word	0x20000674

080066d8 <setData3>:
 void setData3(float value){
  CustomData.data3 = value;
 80066d8:	4b01      	ldr	r3, [pc, #4]	; (80066e0 <setData3+0x8>)
 80066da:	ed83 0a04 	vstr	s0, [r3, #16]
}
 80066de:	4770      	bx	lr
 80066e0:	20000674 	.word	0x20000674

080066e4 <setMasks>:
 void setMasks(uint8_t mask){
  CustomData.masks = mask;
 80066e4:	4b01      	ldr	r3, [pc, #4]	; (80066ec <setMasks+0x8>)
 80066e6:	7518      	strb	r0, [r3, #20]
}
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	20000674 	.word	0x20000674

080066f0 <CustomData_init>:
  CustomData.data1 = value;
 80066f0:	4b04      	ldr	r3, [pc, #16]	; (8006704 <CustomData_init+0x14>)
 80066f2:	2200      	movs	r2, #0
 void setClientID(uint16_t ID){
  CustomData.ClientID= ID;
}
 void setSenderID(uint16_t ID){
  CustomData.senderID = ID;
 80066f4:	8058      	strh	r0, [r3, #2]
  CustomData.masks = mask;
 80066f6:	2000      	movs	r0, #0
  CustomData.ClientID= ID;
 80066f8:	8099      	strh	r1, [r3, #4]
  CustomData.masks = mask;
 80066fa:	7518      	strb	r0, [r3, #20]
  CustomData.data1 = value;
 80066fc:	609a      	str	r2, [r3, #8]
  CustomData.data2 = value;
 80066fe:	60da      	str	r2, [r3, #12]
  CustomData.data3 = value;
 8006700:	611a      	str	r2, [r3, #16]
	 setData2(0.0);
	 setData3(0.0);
	 setMasks(0b000000);
	 setSenderID(sender);
	 setClientID(clientID);
 }
 8006702:	4770      	bx	lr
 8006704:	20000674 	.word	0x20000674

08006708 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8006708:	b538      	push	{r3, r4, r5, lr}

  hspi5.Instance = SPI5;
 800670a:	4b0f      	ldr	r3, [pc, #60]	; (8006748 <MX_SPI5_Init+0x40>)
 800670c:	4a0f      	ldr	r2, [pc, #60]	; (800674c <MX_SPI5_Init+0x44>)
 800670e:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8006710:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8006714:	f44f 7500 	mov.w	r5, #512	; 0x200
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8006718:	2430      	movs	r4, #48	; 0x30
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi5.Init.CRCPolynomial = 10;
 800671a:	210a      	movs	r1, #10
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800671c:	605a      	str	r2, [r3, #4]
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800671e:	4618      	mov	r0, r3
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8006720:	2200      	movs	r2, #0
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8006722:	e9c3 5406 	strd	r5, r4, [r3, #24]
  hspi5.Init.CRCPolynomial = 10;
 8006726:	62d9      	str	r1, [r3, #44]	; 0x2c
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8006728:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800672c:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8006730:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006734:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8006736:	f7fb fc55 	bl	8001fe4 <HAL_SPI_Init>
 800673a:	b900      	cbnz	r0, 800673e <MX_SPI5_Init+0x36>
  {
    Error_Handler();
  }

}
 800673c:	bd38      	pop	{r3, r4, r5, pc}
 800673e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8006742:	f7ff bd53 	b.w	80061ec <Error_Handler>
 8006746:	bf00      	nop
 8006748:	20000690 	.word	0x20000690
 800674c:	40015000 	.word	0x40015000

08006750 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006750:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI5)
 8006752:	6801      	ldr	r1, [r0, #0]
 8006754:	4a18      	ldr	r2, [pc, #96]	; (80067b8 <HAL_SPI_MspInit+0x68>)
{
 8006756:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006758:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI5)
 800675a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800675c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8006760:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006764:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI5)
 8006766:	d001      	beq.n	800676c <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8006768:	b008      	add	sp, #32
 800676a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI5_CLK_ENABLE();
 800676c:	f502 4268 	add.w	r2, r2, #59392	; 0xe800
 8006770:	9301      	str	r3, [sp, #4]
 8006772:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006774:	4811      	ldr	r0, [pc, #68]	; (80067bc <HAL_SPI_MspInit+0x6c>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 8006776:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800677a:	6451      	str	r1, [r2, #68]	; 0x44
 800677c:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800677e:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
 8006782:	9101      	str	r1, [sp, #4]
 8006784:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006786:	9302      	str	r3, [sp, #8]
 8006788:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800678a:	f043 0320 	orr.w	r3, r3, #32
 800678e:	6313      	str	r3, [r2, #48]	; 0x30
 8006790:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006792:	f003 0320 	and.w	r3, r3, #32
 8006796:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006798:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800679a:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800679c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 800679e:	f44f 7560 	mov.w	r5, #896	; 0x380
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067a2:	2402      	movs	r4, #2
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80067a4:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067a6:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80067aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80067ae:	f7fb f81f 	bl	80017f0 <HAL_GPIO_Init>
}
 80067b2:	b008      	add	sp, #32
 80067b4:	bd70      	pop	{r4, r5, r6, pc}
 80067b6:	bf00      	nop
 80067b8:	40015000 	.word	0x40015000
 80067bc:	40021400 	.word	0x40021400

080067c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80067c0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067c2:	4b0c      	ldr	r3, [pc, #48]	; (80067f4 <HAL_MspInit+0x34>)
 80067c4:	2100      	movs	r1, #0
 80067c6:	9100      	str	r1, [sp, #0]
 80067c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067ce:	645a      	str	r2, [r3, #68]	; 0x44
 80067d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067d2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80067d6:	9200      	str	r2, [sp, #0]
 80067d8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80067da:	9101      	str	r1, [sp, #4]
 80067dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067de:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80067e2:	641a      	str	r2, [r3, #64]	; 0x40
 80067e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067ea:	9301      	str	r3, [sp, #4]
 80067ec:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80067ee:	b002      	add	sp, #8
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	40023800 	.word	0x40023800

080067f8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop

080067fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80067fc:	e7fe      	b.n	80067fc <HardFault_Handler>
 80067fe:	bf00      	nop

08006800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006800:	e7fe      	b.n	8006800 <MemManage_Handler>
 8006802:	bf00      	nop

08006804 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006804:	e7fe      	b.n	8006804 <BusFault_Handler>
 8006806:	bf00      	nop

08006808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006808:	e7fe      	b.n	8006808 <UsageFault_Handler>
 800680a:	bf00      	nop

0800680c <SVC_Handler>:
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop

08006810 <DebugMon_Handler>:
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop

08006814 <PendSV_Handler>:
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop

08006818 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006818:	f7fa bbe4 	b.w	8000fe4 <HAL_IncTick>

0800681c <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800681c:	4801      	ldr	r0, [pc, #4]	; (8006824 <CAN1_RX0_IRQHandler+0x8>)
 800681e:	f7fa be3d 	b.w	800149c <HAL_CAN_IRQHandler>
 8006822:	bf00      	nop
 8006824:	2000034c 	.word	0x2000034c

08006828 <CAN1_RX1_IRQHandler>:
 8006828:	4801      	ldr	r0, [pc, #4]	; (8006830 <CAN1_RX1_IRQHandler+0x8>)
 800682a:	f7fa be37 	b.w	800149c <HAL_CAN_IRQHandler>
 800682e:	bf00      	nop
 8006830:	2000034c 	.word	0x2000034c

08006834 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006834:	4801      	ldr	r0, [pc, #4]	; (800683c <USART1_IRQHandler+0x8>)
 8006836:	f7fc bb97 	b.w	8002f68 <HAL_UART_IRQHandler>
 800683a:	bf00      	nop
 800683c:	20000868 	.word	0x20000868

08006840 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006840:	4801      	ldr	r0, [pc, #4]	; (8006848 <TIM6_DAC_IRQHandler+0x8>)
 8006842:	f7fc b821 	b.w	8002888 <HAL_TIM_IRQHandler>
 8006846:	bf00      	nop
 8006848:	20000728 	.word	0x20000728

0800684c <CAN2_RX0_IRQHandler>:
void CAN2_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800684c:	4801      	ldr	r0, [pc, #4]	; (8006854 <CAN2_RX0_IRQHandler+0x8>)
 800684e:	f7fa be25 	b.w	800149c <HAL_CAN_IRQHandler>
 8006852:	bf00      	nop
 8006854:	20000324 	.word	0x20000324

08006858 <CAN2_RX1_IRQHandler>:
 8006858:	4801      	ldr	r0, [pc, #4]	; (8006860 <CAN2_RX1_IRQHandler+0x8>)
 800685a:	f7fa be1f 	b.w	800149c <HAL_CAN_IRQHandler>
 800685e:	bf00      	nop
 8006860:	20000324 	.word	0x20000324

08006864 <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8006864:	4801      	ldr	r0, [pc, #4]	; (800686c <USART6_IRQHandler+0x8>)
 8006866:	f7fc bb7f 	b.w	8002f68 <HAL_UART_IRQHandler>
 800686a:	bf00      	nop
 800686c:	200008e8 	.word	0x200008e8

08006870 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8006870:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006872:	1e16      	subs	r6, r2, #0
 8006874:	dd07      	ble.n	8006886 <_read+0x16>
 8006876:	460c      	mov	r4, r1
 8006878:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800687a:	f3af 8000 	nop.w
 800687e:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006882:	42a5      	cmp	r5, r4
 8006884:	d1f9      	bne.n	800687a <_read+0xa>
	}

return len;
}
 8006886:	4630      	mov	r0, r6
 8006888:	bd70      	pop	{r4, r5, r6, pc}
 800688a:	bf00      	nop

0800688c <_write>:

int _write(int file, char *ptr, int len)
{
 800688c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800688e:	1e16      	subs	r6, r2, #0
 8006890:	dd07      	ble.n	80068a2 <_write+0x16>
 8006892:	460c      	mov	r4, r1
 8006894:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8006896:	f814 0b01 	ldrb.w	r0, [r4], #1
 800689a:	f7fe f997 	bl	8004bcc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800689e:	42ac      	cmp	r4, r5
 80068a0:	d1f9      	bne.n	8006896 <_write+0xa>
	}
	return len;
}
 80068a2:	4630      	mov	r0, r6
 80068a4:	bd70      	pop	{r4, r5, r6, pc}
 80068a6:	bf00      	nop

080068a8 <_close>:


int _close(int file)
{
	return -1;
}
 80068a8:	f04f 30ff 	mov.w	r0, #4294967295
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop

080068b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80068b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80068b4:	604b      	str	r3, [r1, #4]
	return 0;
}
 80068b6:	2000      	movs	r0, #0
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop

080068bc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80068bc:	2001      	movs	r0, #1
 80068be:	4770      	bx	lr

080068c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80068c0:	2000      	movs	r0, #0
 80068c2:	4770      	bx	lr

080068c4 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80068c4:	4a0c      	ldr	r2, [pc, #48]	; (80068f8 <_sbrk+0x34>)
{
 80068c6:	b508      	push	{r3, lr}
	if (heap_end == 0)
 80068c8:	6813      	ldr	r3, [r2, #0]
 80068ca:	b133      	cbz	r3, 80068da <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80068cc:	4418      	add	r0, r3
 80068ce:	4669      	mov	r1, sp
 80068d0:	4288      	cmp	r0, r1
 80068d2:	d808      	bhi.n	80068e6 <_sbrk+0x22>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80068d4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80068da:	4b08      	ldr	r3, [pc, #32]	; (80068fc <_sbrk+0x38>)
 80068dc:	6013      	str	r3, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80068de:	4418      	add	r0, r3
 80068e0:	4669      	mov	r1, sp
 80068e2:	4288      	cmp	r0, r1
 80068e4:	d9f6      	bls.n	80068d4 <_sbrk+0x10>
		errno = ENOMEM;
 80068e6:	f000 fdc5 	bl	8007474 <__errno>
 80068ea:	230c      	movs	r3, #12
 80068ec:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80068ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	bd08      	pop	{r3, pc}
 80068f6:	bf00      	nop
 80068f8:	20000284 	.word	0x20000284
 80068fc:	20000930 	.word	0x20000930

08006900 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006900:	4910      	ldr	r1, [pc, #64]	; (8006944 <SystemInit+0x44>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006902:	4b11      	ldr	r3, [pc, #68]	; (8006948 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006904:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006908:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 800690c:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800690e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8006912:	681a      	ldr	r2, [r3, #0]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006914:	4c0d      	ldr	r4, [pc, #52]	; (800694c <SystemInit+0x4c>)
  RCC->CFGR = 0x00000000;
 8006916:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8006918:	f042 0201 	orr.w	r2, r2, #1
 800691c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800691e:	6098      	str	r0, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8006926:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800692a:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 800692c:	605c      	str	r4, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800692e:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006930:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006934:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006938:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x00000000;
 800693a:	60d8      	str	r0, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800693c:	608c      	str	r4, [r1, #8]
#endif
}
 800693e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006942:	4770      	bx	lr
 8006944:	e000ed00 	.word	0xe000ed00
 8006948:	40023800 	.word	0x40023800
 800694c:	24003010 	.word	0x24003010

08006950 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8006950:	b570      	push	{r4, r5, r6, lr}

  htim1.Instance = TIM1;
 8006952:	4c6d      	ldr	r4, [pc, #436]	; (8006b08 <MX_TIM1_Init+0x1b8>)
 8006954:	4b6d      	ldr	r3, [pc, #436]	; (8006b0c <MX_TIM1_Init+0x1bc>)
 8006956:	6023      	str	r3, [r4, #0]
{
 8006958:	b08a      	sub	sp, #40	; 0x28
  htim1.Init.Prescaler = 167;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800695a:	2300      	movs	r3, #0
  htim1.Init.Prescaler = 167;
 800695c:	21a7      	movs	r1, #167	; 0xa7
  htim1.Init.Period = 20000-1;
 800695e:	f644 621f 	movw	r2, #19999	; 0x4e1f
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006962:	4620      	mov	r0, r4
  htim1.Init.Prescaler = 167;
 8006964:	6061      	str	r1, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006966:	e9c4 3202 	strd	r3, r2, [r4, #8]
  htim1.Init.RepetitionCounter = 0;
 800696a:	e9c4 3304 	strd	r3, r3, [r4, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800696e:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006970:	f7fb fdca 	bl	8002508 <HAL_TIM_PWM_Init>
 8006974:	2800      	cmp	r0, #0
 8006976:	d151      	bne.n	8006a1c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006978:	4b65      	ldr	r3, [pc, #404]	; (8006b10 <MX_TIM1_Init+0x1c0>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800697a:	4863      	ldr	r0, [pc, #396]	; (8006b08 <MX_TIM1_Init+0x1b8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800697c:	2200      	movs	r2, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800697e:	4619      	mov	r1, r3
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006980:	e9c3 2200 	strd	r2, r2, [r3]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006984:	f7fc f82a 	bl	80029dc <HAL_TIMEx_MasterConfigSynchronization>
 8006988:	2800      	cmp	r0, #0
 800698a:	d144      	bne.n	8006a16 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800698c:	4b61      	ldr	r3, [pc, #388]	; (8006b14 <MX_TIM1_Init+0x1c4>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800698e:	485e      	ldr	r0, [pc, #376]	; (8006b08 <MX_TIM1_Init+0x1b8>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006990:	2500      	movs	r5, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006992:	2160      	movs	r1, #96	; 0x60
  sConfigOC.Pulse = 1000;
 8006994:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006998:	6019      	str	r1, [r3, #0]
  sConfigOC.Pulse = 1000;
 800699a:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800699c:	4619      	mov	r1, r3
 800699e:	462a      	mov	r2, r5
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80069a0:	e9c3 5502 	strd	r5, r5, [r3, #8]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80069a4:	e9c3 5504 	strd	r5, r5, [r3, #16]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80069a8:	619d      	str	r5, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80069aa:	f7fb fe5b 	bl	8002664 <HAL_TIM_PWM_ConfigChannel>
 80069ae:	bb78      	cbnz	r0, 8006a10 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80069b0:	220c      	movs	r2, #12
 80069b2:	4958      	ldr	r1, [pc, #352]	; (8006b14 <MX_TIM1_Init+0x1c4>)
 80069b4:	4854      	ldr	r0, [pc, #336]	; (8006b08 <MX_TIM1_Init+0x1b8>)
 80069b6:	f7fb fe55 	bl	8002664 <HAL_TIM_PWM_ConfigChannel>
 80069ba:	bb30      	cbnz	r0, 8006a0a <MX_TIM1_Init+0xba>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80069bc:	4b56      	ldr	r3, [pc, #344]	; (8006b18 <MX_TIM1_Init+0x1c8>)
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80069be:	4852      	ldr	r0, [pc, #328]	; (8006b08 <MX_TIM1_Init+0x1b8>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80069c0:	2200      	movs	r2, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80069c2:	f44f 5500 	mov.w	r5, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80069c6:	4619      	mov	r1, r3
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80069c8:	615d      	str	r5, [r3, #20]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80069ca:	e9c3 2200 	strd	r2, r2, [r3]
  sBreakDeadTimeConfig.DeadTime = 0;
 80069ce:	e9c3 2202 	strd	r2, r2, [r3, #8]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80069d2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80069d4:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80069d6:	f7fc f823 	bl	8002a20 <HAL_TIMEx_ConfigBreakDeadTime>
 80069da:	b108      	cbz	r0, 80069e0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80069dc:	f7ff fc06 	bl	80061ec <Error_Handler>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 80069e0:	6823      	ldr	r3, [r4, #0]
 80069e2:	4a4a      	ldr	r2, [pc, #296]	; (8006b0c <MX_TIM1_Init+0x1bc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069e4:	2400      	movs	r4, #0
  if(timHandle->Instance==TIM1)
 80069e6:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069e8:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80069ec:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80069f0:	9409      	str	r4, [sp, #36]	; 0x24
  if(timHandle->Instance==TIM1)
 80069f2:	d02d      	beq.n	8006a50 <MX_TIM1_Init+0x100>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM2)
 80069f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069f8:	d057      	beq.n	8006aaa <MX_TIM1_Init+0x15a>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM8)
 80069fa:	4a48      	ldr	r2, [pc, #288]	; (8006b1c <MX_TIM1_Init+0x1cc>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d06c      	beq.n	8006ada <MX_TIM1_Init+0x18a>

  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM12)
 8006a00:	4a47      	ldr	r2, [pc, #284]	; (8006b20 <MX_TIM1_Init+0x1d0>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d00d      	beq.n	8006a22 <MX_TIM1_Init+0xd2>
}
 8006a06:	b00a      	add	sp, #40	; 0x28
 8006a08:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8006a0a:	f7ff fbef 	bl	80061ec <Error_Handler>
 8006a0e:	e7d5      	b.n	80069bc <MX_TIM1_Init+0x6c>
    Error_Handler();
 8006a10:	f7ff fbec 	bl	80061ec <Error_Handler>
 8006a14:	e7cc      	b.n	80069b0 <MX_TIM1_Init+0x60>
    Error_Handler();
 8006a16:	f7ff fbe9 	bl	80061ec <Error_Handler>
 8006a1a:	e7b7      	b.n	800698c <MX_TIM1_Init+0x3c>
    Error_Handler();
 8006a1c:	f7ff fbe6 	bl	80061ec <Error_Handler>
 8006a20:	e7aa      	b.n	8006978 <MX_TIM1_Init+0x28>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
  
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006a22:	4b40      	ldr	r3, [pc, #256]	; (8006b24 <MX_TIM1_Init+0x1d4>)
 8006a24:	9404      	str	r4, [sp, #16]
 8006a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = BEEP_CTRL_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 8006a28:	483f      	ldr	r0, [pc, #252]	; (8006b28 <MX_TIM1_Init+0x1d8>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006a2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a2e:	631a      	str	r2, [r3, #48]	; 0x30
 8006a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a36:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a38:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8006a3a:	2309      	movs	r3, #9
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 8006a3c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = BEEP_CTRL_Pin;
 8006a3e:	2440      	movs	r4, #64	; 0x40
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006a40:	9d04      	ldr	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8006a42:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a44:	e9cd 4205 	strd	r4, r2, [sp, #20]
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 8006a48:	f7fa fed2 	bl	80017f0 <HAL_GPIO_Init>
}
 8006a4c:	b00a      	add	sp, #40	; 0x28
 8006a4e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a50:	4b34      	ldr	r3, [pc, #208]	; (8006b24 <MX_TIM1_Init+0x1d4>)
 8006a52:	9400      	str	r4, [sp, #0]
 8006a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 8006a56:	4835      	ldr	r0, [pc, #212]	; (8006b2c <MX_TIM1_Init+0x1dc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a58:	f042 0201 	orr.w	r2, r2, #1
 8006a5c:	631a      	str	r2, [r3, #48]	; 0x30
 8006a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a60:	f002 0201 	and.w	r2, r2, #1
 8006a64:	9200      	str	r2, [sp, #0]
 8006a66:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006a68:	9401      	str	r4, [sp, #4]
 8006a6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a6c:	f042 0210 	orr.w	r2, r2, #16
 8006a70:	631a      	str	r2, [r3, #48]	; 0x30
 8006a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a74:	f003 0310 	and.w	r3, r3, #16
 8006a78:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a7a:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = FRICTION_L_Pin;
 8006a7c:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006a80:	2501      	movs	r5, #1
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 8006a82:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006a84:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006a86:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a88:	e9cd 3605 	strd	r3, r6, [sp, #20]
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 8006a8c:	f7fa feb0 	bl	80017f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = FRICTION_R_Pin;
 8006a90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    HAL_GPIO_Init(FRICTION_R_GPIO_Port, &GPIO_InitStruct);
 8006a94:	a905      	add	r1, sp, #20
 8006a96:	4826      	ldr	r0, [pc, #152]	; (8006b30 <MX_TIM1_Init+0x1e0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a98:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006a9a:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a9c:	e9cd 4407 	strd	r4, r4, [sp, #28]
    GPIO_InitStruct.Pin = FRICTION_R_Pin;
 8006aa0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(FRICTION_R_GPIO_Port, &GPIO_InitStruct);
 8006aa2:	f7fa fea5 	bl	80017f0 <HAL_GPIO_Init>
}
 8006aa6:	b00a      	add	sp, #40	; 0x28
 8006aa8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006aaa:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8006aae:	9402      	str	r4, [sp, #8]
 8006ab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ab2:	481e      	ldr	r0, [pc, #120]	; (8006b2c <MX_TIM1_Init+0x1dc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ab4:	f042 0201 	orr.w	r2, r2, #1
 8006ab8:	631a      	str	r2, [r3, #48]	; 0x30
 8006aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abc:	f003 0301 	and.w	r3, r3, #1
 8006ac0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ac2:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006ac4:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ac6:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8006ac8:	240f      	movs	r4, #15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006aca:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006acc:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ace:	e9cd 4205 	strd	r4, r2, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ad2:	f7fa fe8d 	bl	80017f0 <HAL_GPIO_Init>
}
 8006ad6:	b00a      	add	sp, #40	; 0x28
 8006ad8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8006ada:	4b12      	ldr	r3, [pc, #72]	; (8006b24 <MX_TIM1_Init+0x1d4>)
 8006adc:	9403      	str	r4, [sp, #12]
 8006ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006ae0:	4814      	ldr	r0, [pc, #80]	; (8006b34 <MX_TIM1_Init+0x1e4>)
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8006ae2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ae6:	631a      	str	r2, [r3, #48]	; 0x30
 8006ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006af0:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006af2:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006af4:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8006af6:	2460      	movs	r4, #96	; 0x60
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8006af8:	9d03      	ldr	r5, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006afa:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006afc:	e9cd 4205 	strd	r4, r2, [sp, #20]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006b00:	f7fa fe76 	bl	80017f0 <HAL_GPIO_Init>
}
 8006b04:	b00a      	add	sp, #40	; 0x28
 8006b06:	bd70      	pop	{r4, r5, r6, pc}
 8006b08:	20000768 	.word	0x20000768
 8006b0c:	40010000 	.word	0x40010000
 8006b10:	200002c4 	.word	0x200002c4
 8006b14:	200002a8 	.word	0x200002a8
 8006b18:	20000288 	.word	0x20000288
 8006b1c:	40010400 	.word	0x40010400
 8006b20:	40001800 	.word	0x40001800
 8006b24:	40023800 	.word	0x40023800
 8006b28:	40021c00 	.word	0x40021c00
 8006b2c:	40020000 	.word	0x40020000
 8006b30:	40021000 	.word	0x40021000
 8006b34:	40022000 	.word	0x40022000

08006b38 <MX_TIM2_Init>:
{
 8006b38:	b570      	push	{r4, r5, r6, lr}
  htim2.Instance = TIM2;
 8006b3a:	4c6a      	ldr	r4, [pc, #424]	; (8006ce4 <MX_TIM2_Init+0x1ac>)
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b3c:	2300      	movs	r3, #0
{
 8006b3e:	b08a      	sub	sp, #40	; 0x28
  htim2.Instance = TIM2;
 8006b40:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 84;
 8006b44:	2154      	movs	r1, #84	; 0x54
  htim2.Init.Period = 20000-1;
 8006b46:	f644 621f 	movw	r2, #19999	; 0x4e1f
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8006b4a:	4620      	mov	r0, r4
  htim2.Init.Prescaler = 84;
 8006b4c:	e9c4 5100 	strd	r5, r1, [r4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b50:	e9c4 3202 	strd	r3, r2, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b54:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b56:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8006b58:	f7fb fcd6 	bl	8002508 <HAL_TIM_PWM_Init>
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	d14b      	bne.n	8006bf8 <MX_TIM2_Init+0xc0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006b60:	4b61      	ldr	r3, [pc, #388]	; (8006ce8 <MX_TIM2_Init+0x1b0>)
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006b62:	4860      	ldr	r0, [pc, #384]	; (8006ce4 <MX_TIM2_Init+0x1ac>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006b64:	2200      	movs	r2, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006b66:	4619      	mov	r1, r3
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006b68:	e9c3 2200 	strd	r2, r2, [r3]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006b6c:	f7fb ff36 	bl	80029dc <HAL_TIMEx_MasterConfigSynchronization>
 8006b70:	2800      	cmp	r0, #0
 8006b72:	d13e      	bne.n	8006bf2 <MX_TIM2_Init+0xba>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006b74:	4b5d      	ldr	r3, [pc, #372]	; (8006cec <MX_TIM2_Init+0x1b4>)
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006b76:	485b      	ldr	r0, [pc, #364]	; (8006ce4 <MX_TIM2_Init+0x1ac>)
  sConfigOC.Pulse = 0;
 8006b78:	2500      	movs	r5, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006b7a:	2260      	movs	r2, #96	; 0x60
 8006b7c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006b7e:	4619      	mov	r1, r3
 8006b80:	462a      	mov	r2, r5
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006b82:	e9c3 5501 	strd	r5, r5, [r3, #4]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006b86:	611d      	str	r5, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006b88:	f7fb fd6c 	bl	8002664 <HAL_TIM_PWM_ConfigChannel>
 8006b8c:	bb70      	cbnz	r0, 8006bec <MX_TIM2_Init+0xb4>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006b8e:	2204      	movs	r2, #4
 8006b90:	4956      	ldr	r1, [pc, #344]	; (8006cec <MX_TIM2_Init+0x1b4>)
 8006b92:	4854      	ldr	r0, [pc, #336]	; (8006ce4 <MX_TIM2_Init+0x1ac>)
 8006b94:	f7fb fd66 	bl	8002664 <HAL_TIM_PWM_ConfigChannel>
 8006b98:	bb28      	cbnz	r0, 8006be6 <MX_TIM2_Init+0xae>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006b9a:	2208      	movs	r2, #8
 8006b9c:	4953      	ldr	r1, [pc, #332]	; (8006cec <MX_TIM2_Init+0x1b4>)
 8006b9e:	4851      	ldr	r0, [pc, #324]	; (8006ce4 <MX_TIM2_Init+0x1ac>)
 8006ba0:	f7fb fd60 	bl	8002664 <HAL_TIM_PWM_ConfigChannel>
 8006ba4:	b9e0      	cbnz	r0, 8006be0 <MX_TIM2_Init+0xa8>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006ba6:	220c      	movs	r2, #12
 8006ba8:	4950      	ldr	r1, [pc, #320]	; (8006cec <MX_TIM2_Init+0x1b4>)
 8006baa:	484e      	ldr	r0, [pc, #312]	; (8006ce4 <MX_TIM2_Init+0x1ac>)
 8006bac:	f7fb fd5a 	bl	8002664 <HAL_TIM_PWM_ConfigChannel>
 8006bb0:	b108      	cbz	r0, 8006bb6 <MX_TIM2_Init+0x7e>
    Error_Handler();
 8006bb2:	f7ff fb1b 	bl	80061ec <Error_Handler>
  if(timHandle->Instance==TIM1)
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	4a4d      	ldr	r2, [pc, #308]	; (8006cf0 <MX_TIM2_Init+0x1b8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bba:	2400      	movs	r4, #0
  if(timHandle->Instance==TIM1)
 8006bbc:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bbe:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8006bc2:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8006bc6:	9409      	str	r4, [sp, #36]	; 0x24
  if(timHandle->Instance==TIM1)
 8006bc8:	d030      	beq.n	8006c2c <MX_TIM2_Init+0xf4>
  else if(timHandle->Instance==TIM2)
 8006bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bce:	d05a      	beq.n	8006c86 <MX_TIM2_Init+0x14e>
  else if(timHandle->Instance==TIM8)
 8006bd0:	4a48      	ldr	r2, [pc, #288]	; (8006cf4 <MX_TIM2_Init+0x1bc>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d06f      	beq.n	8006cb6 <MX_TIM2_Init+0x17e>
  else if(timHandle->Instance==TIM12)
 8006bd6:	4a48      	ldr	r2, [pc, #288]	; (8006cf8 <MX_TIM2_Init+0x1c0>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d010      	beq.n	8006bfe <MX_TIM2_Init+0xc6>
}
 8006bdc:	b00a      	add	sp, #40	; 0x28
 8006bde:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8006be0:	f7ff fb04 	bl	80061ec <Error_Handler>
 8006be4:	e7df      	b.n	8006ba6 <MX_TIM2_Init+0x6e>
    Error_Handler();
 8006be6:	f7ff fb01 	bl	80061ec <Error_Handler>
 8006bea:	e7d6      	b.n	8006b9a <MX_TIM2_Init+0x62>
    Error_Handler();
 8006bec:	f7ff fafe 	bl	80061ec <Error_Handler>
 8006bf0:	e7cd      	b.n	8006b8e <MX_TIM2_Init+0x56>
    Error_Handler();
 8006bf2:	f7ff fafb 	bl	80061ec <Error_Handler>
 8006bf6:	e7bd      	b.n	8006b74 <MX_TIM2_Init+0x3c>
    Error_Handler();
 8006bf8:	f7ff faf8 	bl	80061ec <Error_Handler>
 8006bfc:	e7b0      	b.n	8006b60 <MX_TIM2_Init+0x28>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006bfe:	4b3f      	ldr	r3, [pc, #252]	; (8006cfc <MX_TIM2_Init+0x1c4>)
 8006c00:	9404      	str	r4, [sp, #16]
 8006c02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 8006c04:	483e      	ldr	r0, [pc, #248]	; (8006d00 <MX_TIM2_Init+0x1c8>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006c06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c0a:	631a      	str	r2, [r3, #48]	; 0x30
 8006c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c12:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c14:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8006c16:	2309      	movs	r3, #9
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 8006c18:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = BEEP_CTRL_Pin;
 8006c1a:	2440      	movs	r4, #64	; 0x40
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006c1c:	9d04      	ldr	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8006c1e:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c20:	e9cd 4205 	strd	r4, r2, [sp, #20]
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 8006c24:	f7fa fde4 	bl	80017f0 <HAL_GPIO_Init>
}
 8006c28:	b00a      	add	sp, #40	; 0x28
 8006c2a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c2c:	4b33      	ldr	r3, [pc, #204]	; (8006cfc <MX_TIM2_Init+0x1c4>)
 8006c2e:	9400      	str	r4, [sp, #0]
 8006c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 8006c32:	4834      	ldr	r0, [pc, #208]	; (8006d04 <MX_TIM2_Init+0x1cc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c34:	f042 0201 	orr.w	r2, r2, #1
 8006c38:	631a      	str	r2, [r3, #48]	; 0x30
 8006c3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c3c:	f002 0201 	and.w	r2, r2, #1
 8006c40:	9200      	str	r2, [sp, #0]
 8006c42:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006c44:	9401      	str	r4, [sp, #4]
 8006c46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c48:	f042 0210 	orr.w	r2, r2, #16
 8006c4c:	631a      	str	r2, [r3, #48]	; 0x30
 8006c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c50:	f003 0310 	and.w	r3, r3, #16
 8006c54:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c56:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = FRICTION_L_Pin;
 8006c58:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006c5c:	2501      	movs	r5, #1
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 8006c5e:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006c60:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006c62:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c64:	e9cd 3605 	strd	r3, r6, [sp, #20]
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 8006c68:	f7fa fdc2 	bl	80017f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = FRICTION_R_Pin;
 8006c6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    HAL_GPIO_Init(FRICTION_R_GPIO_Port, &GPIO_InitStruct);
 8006c70:	a905      	add	r1, sp, #20
 8006c72:	4825      	ldr	r0, [pc, #148]	; (8006d08 <MX_TIM2_Init+0x1d0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c74:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006c76:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c78:	e9cd 4407 	strd	r4, r4, [sp, #28]
    GPIO_InitStruct.Pin = FRICTION_R_Pin;
 8006c7c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(FRICTION_R_GPIO_Port, &GPIO_InitStruct);
 8006c7e:	f7fa fdb7 	bl	80017f0 <HAL_GPIO_Init>
}
 8006c82:	b00a      	add	sp, #40	; 0x28
 8006c84:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c86:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8006c8a:	9402      	str	r4, [sp, #8]
 8006c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c8e:	481d      	ldr	r0, [pc, #116]	; (8006d04 <MX_TIM2_Init+0x1cc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c90:	f042 0201 	orr.w	r2, r2, #1
 8006c94:	631a      	str	r2, [r3, #48]	; 0x30
 8006c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c9e:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006ca0:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ca2:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8006ca4:	240f      	movs	r4, #15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ca6:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006ca8:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006caa:	e9cd 4205 	strd	r4, r2, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cae:	f7fa fd9f 	bl	80017f0 <HAL_GPIO_Init>
}
 8006cb2:	b00a      	add	sp, #40	; 0x28
 8006cb4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8006cb6:	4b11      	ldr	r3, [pc, #68]	; (8006cfc <MX_TIM2_Init+0x1c4>)
 8006cb8:	9403      	str	r4, [sp, #12]
 8006cba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006cbc:	4813      	ldr	r0, [pc, #76]	; (8006d0c <MX_TIM2_Init+0x1d4>)
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8006cbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cc2:	631a      	str	r2, [r3, #48]	; 0x30
 8006cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ccc:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006cce:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006cd0:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8006cd2:	2460      	movs	r4, #96	; 0x60
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8006cd4:	9d03      	ldr	r5, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006cd6:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cd8:	e9cd 4205 	strd	r4, r2, [sp, #20]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006cdc:	f7fa fd88 	bl	80017f0 <HAL_GPIO_Init>
}
 8006ce0:	b00a      	add	sp, #40	; 0x28
 8006ce2:	bd70      	pop	{r4, r5, r6, pc}
 8006ce4:	200007a8 	.word	0x200007a8
 8006ce8:	200002c4 	.word	0x200002c4
 8006cec:	200002a8 	.word	0x200002a8
 8006cf0:	40010000 	.word	0x40010000
 8006cf4:	40010400 	.word	0x40010400
 8006cf8:	40001800 	.word	0x40001800
 8006cfc:	40023800 	.word	0x40023800
 8006d00:	40021c00 	.word	0x40021c00
 8006d04:	40020000 	.word	0x40020000
 8006d08:	40021000 	.word	0x40021000
 8006d0c:	40022000 	.word	0x40022000

08006d10 <MX_TIM6_Init>:
  htim6.Instance = TIM6;
 8006d10:	4b10      	ldr	r3, [pc, #64]	; (8006d54 <MX_TIM6_Init+0x44>)
 8006d12:	4a11      	ldr	r2, [pc, #68]	; (8006d58 <MX_TIM6_Init+0x48>)
{
 8006d14:	b510      	push	{r4, lr}
  htim6.Init.Period = 16800;
 8006d16:	f244 11a0 	movw	r1, #16800	; 0x41a0
  htim6.Instance = TIM6;
 8006d1a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 5-1;
 8006d1c:	2404      	movs	r4, #4
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d1e:	2200      	movs	r2, #0
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006d20:	4618      	mov	r0, r3
  htim6.Init.Prescaler = 5-1;
 8006d22:	605c      	str	r4, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d24:	e9c3 2102 	strd	r2, r1, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006d2a:	f7fb fb59 	bl	80023e0 <HAL_TIM_Base_Init>
 8006d2e:	b968      	cbnz	r0, 8006d4c <MX_TIM6_Init+0x3c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006d30:	4b0a      	ldr	r3, [pc, #40]	; (8006d5c <MX_TIM6_Init+0x4c>)
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006d32:	4808      	ldr	r0, [pc, #32]	; (8006d54 <MX_TIM6_Init+0x44>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006d34:	2200      	movs	r2, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006d36:	4619      	mov	r1, r3
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006d38:	e9c3 2200 	strd	r2, r2, [r3]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006d3c:	f7fb fe4e 	bl	80029dc <HAL_TIMEx_MasterConfigSynchronization>
 8006d40:	b900      	cbnz	r0, 8006d44 <MX_TIM6_Init+0x34>
}
 8006d42:	bd10      	pop	{r4, pc}
 8006d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8006d48:	f7ff ba50 	b.w	80061ec <Error_Handler>
    Error_Handler();
 8006d4c:	f7ff fa4e 	bl	80061ec <Error_Handler>
 8006d50:	e7ee      	b.n	8006d30 <MX_TIM6_Init+0x20>
 8006d52:	bf00      	nop
 8006d54:	20000728 	.word	0x20000728
 8006d58:	40001000 	.word	0x40001000
 8006d5c:	200002c4 	.word	0x200002c4

08006d60 <MX_TIM8_Init>:
{
 8006d60:	b570      	push	{r4, r5, r6, lr}
  htim8.Instance = TIM8;
 8006d62:	4c6c      	ldr	r4, [pc, #432]	; (8006f14 <MX_TIM8_Init+0x1b4>)
 8006d64:	4b6c      	ldr	r3, [pc, #432]	; (8006f18 <MX_TIM8_Init+0x1b8>)
 8006d66:	6023      	str	r3, [r4, #0]
{
 8006d68:	b08a      	sub	sp, #40	; 0x28
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d6a:	2300      	movs	r3, #0
  htim8.Init.Prescaler = 167;
 8006d6c:	21a7      	movs	r1, #167	; 0xa7
  htim8.Init.Period = 20000-1;
 8006d6e:	f644 621f 	movw	r2, #19999	; 0x4e1f
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8006d72:	4620      	mov	r0, r4
  htim8.Init.Prescaler = 167;
 8006d74:	6061      	str	r1, [r4, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d76:	e9c4 3202 	strd	r3, r2, [r4, #8]
  htim8.Init.RepetitionCounter = 0;
 8006d7a:	e9c4 3304 	strd	r3, r3, [r4, #16]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006d7e:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8006d80:	f7fb fbc2 	bl	8002508 <HAL_TIM_PWM_Init>
 8006d84:	2800      	cmp	r0, #0
 8006d86:	d14f      	bne.n	8006e28 <MX_TIM8_Init+0xc8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006d88:	4b64      	ldr	r3, [pc, #400]	; (8006f1c <MX_TIM8_Init+0x1bc>)
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006d8a:	4862      	ldr	r0, [pc, #392]	; (8006f14 <MX_TIM8_Init+0x1b4>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006d8c:	2200      	movs	r2, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006d8e:	4619      	mov	r1, r3
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006d90:	e9c3 2200 	strd	r2, r2, [r3]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006d94:	f7fb fe22 	bl	80029dc <HAL_TIMEx_MasterConfigSynchronization>
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	d142      	bne.n	8006e22 <MX_TIM8_Init+0xc2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006d9c:	4b60      	ldr	r3, [pc, #384]	; (8006f20 <MX_TIM8_Init+0x1c0>)
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006d9e:	485d      	ldr	r0, [pc, #372]	; (8006f14 <MX_TIM8_Init+0x1b4>)
  sConfigOC.Pulse = 0;
 8006da0:	2500      	movs	r5, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006da2:	2260      	movs	r2, #96	; 0x60
 8006da4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006da6:	4619      	mov	r1, r3
 8006da8:	462a      	mov	r2, r5
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006daa:	e9c3 5501 	strd	r5, r5, [r3, #4]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006dae:	e9c3 5503 	strd	r5, r5, [r3, #12]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006db2:	e9c3 5505 	strd	r5, r5, [r3, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006db6:	f7fb fc55 	bl	8002664 <HAL_TIM_PWM_ConfigChannel>
 8006dba:	bb78      	cbnz	r0, 8006e1c <MX_TIM8_Init+0xbc>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006dbc:	2204      	movs	r2, #4
 8006dbe:	4958      	ldr	r1, [pc, #352]	; (8006f20 <MX_TIM8_Init+0x1c0>)
 8006dc0:	4854      	ldr	r0, [pc, #336]	; (8006f14 <MX_TIM8_Init+0x1b4>)
 8006dc2:	f7fb fc4f 	bl	8002664 <HAL_TIM_PWM_ConfigChannel>
 8006dc6:	bb30      	cbnz	r0, 8006e16 <MX_TIM8_Init+0xb6>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006dc8:	4b56      	ldr	r3, [pc, #344]	; (8006f24 <MX_TIM8_Init+0x1c4>)
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8006dca:	4852      	ldr	r0, [pc, #328]	; (8006f14 <MX_TIM8_Init+0x1b4>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006dcc:	2200      	movs	r2, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006dce:	f44f 5500 	mov.w	r5, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8006dd2:	4619      	mov	r1, r3
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006dd4:	615d      	str	r5, [r3, #20]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006dd6:	e9c3 2200 	strd	r2, r2, [r3]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006dda:	e9c3 2202 	strd	r2, r2, [r3, #8]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006dde:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006de0:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8006de2:	f7fb fe1d 	bl	8002a20 <HAL_TIMEx_ConfigBreakDeadTime>
 8006de6:	b108      	cbz	r0, 8006dec <MX_TIM8_Init+0x8c>
    Error_Handler();
 8006de8:	f7ff fa00 	bl	80061ec <Error_Handler>
  if(timHandle->Instance==TIM1)
 8006dec:	6823      	ldr	r3, [r4, #0]
 8006dee:	4a4e      	ldr	r2, [pc, #312]	; (8006f28 <MX_TIM8_Init+0x1c8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006df0:	2400      	movs	r4, #0
  if(timHandle->Instance==TIM1)
 8006df2:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006df4:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8006df8:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8006dfc:	9409      	str	r4, [sp, #36]	; 0x24
  if(timHandle->Instance==TIM1)
 8006dfe:	d02d      	beq.n	8006e5c <MX_TIM8_Init+0xfc>
  else if(timHandle->Instance==TIM2)
 8006e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e04:	d057      	beq.n	8006eb6 <MX_TIM8_Init+0x156>
  else if(timHandle->Instance==TIM8)
 8006e06:	4a44      	ldr	r2, [pc, #272]	; (8006f18 <MX_TIM8_Init+0x1b8>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d06c      	beq.n	8006ee6 <MX_TIM8_Init+0x186>
  else if(timHandle->Instance==TIM12)
 8006e0c:	4a47      	ldr	r2, [pc, #284]	; (8006f2c <MX_TIM8_Init+0x1cc>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d00d      	beq.n	8006e2e <MX_TIM8_Init+0xce>
}
 8006e12:	b00a      	add	sp, #40	; 0x28
 8006e14:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8006e16:	f7ff f9e9 	bl	80061ec <Error_Handler>
 8006e1a:	e7d5      	b.n	8006dc8 <MX_TIM8_Init+0x68>
    Error_Handler();
 8006e1c:	f7ff f9e6 	bl	80061ec <Error_Handler>
 8006e20:	e7cc      	b.n	8006dbc <MX_TIM8_Init+0x5c>
    Error_Handler();
 8006e22:	f7ff f9e3 	bl	80061ec <Error_Handler>
 8006e26:	e7b9      	b.n	8006d9c <MX_TIM8_Init+0x3c>
    Error_Handler();
 8006e28:	f7ff f9e0 	bl	80061ec <Error_Handler>
 8006e2c:	e7ac      	b.n	8006d88 <MX_TIM8_Init+0x28>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006e2e:	4b40      	ldr	r3, [pc, #256]	; (8006f30 <MX_TIM8_Init+0x1d0>)
 8006e30:	9404      	str	r4, [sp, #16]
 8006e32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 8006e34:	483f      	ldr	r0, [pc, #252]	; (8006f34 <MX_TIM8_Init+0x1d4>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006e36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e3a:	631a      	str	r2, [r3, #48]	; 0x30
 8006e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e42:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e44:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8006e46:	2309      	movs	r3, #9
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 8006e48:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = BEEP_CTRL_Pin;
 8006e4a:	2440      	movs	r4, #64	; 0x40
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006e4c:	9d04      	ldr	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8006e4e:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e50:	e9cd 4205 	strd	r4, r2, [sp, #20]
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 8006e54:	f7fa fccc 	bl	80017f0 <HAL_GPIO_Init>
}
 8006e58:	b00a      	add	sp, #40	; 0x28
 8006e5a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e5c:	4b34      	ldr	r3, [pc, #208]	; (8006f30 <MX_TIM8_Init+0x1d0>)
 8006e5e:	9400      	str	r4, [sp, #0]
 8006e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 8006e62:	4835      	ldr	r0, [pc, #212]	; (8006f38 <MX_TIM8_Init+0x1d8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e64:	f042 0201 	orr.w	r2, r2, #1
 8006e68:	631a      	str	r2, [r3, #48]	; 0x30
 8006e6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e6c:	f002 0201 	and.w	r2, r2, #1
 8006e70:	9200      	str	r2, [sp, #0]
 8006e72:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006e74:	9401      	str	r4, [sp, #4]
 8006e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e78:	f042 0210 	orr.w	r2, r2, #16
 8006e7c:	631a      	str	r2, [r3, #48]	; 0x30
 8006e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e80:	f003 0310 	and.w	r3, r3, #16
 8006e84:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e86:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = FRICTION_L_Pin;
 8006e88:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006e8c:	2501      	movs	r5, #1
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 8006e8e:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006e90:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006e92:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e94:	e9cd 3605 	strd	r3, r6, [sp, #20]
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 8006e98:	f7fa fcaa 	bl	80017f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = FRICTION_R_Pin;
 8006e9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    HAL_GPIO_Init(FRICTION_R_GPIO_Port, &GPIO_InitStruct);
 8006ea0:	a905      	add	r1, sp, #20
 8006ea2:	4826      	ldr	r0, [pc, #152]	; (8006f3c <MX_TIM8_Init+0x1dc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ea4:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006ea6:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ea8:	e9cd 4407 	strd	r4, r4, [sp, #28]
    GPIO_InitStruct.Pin = FRICTION_R_Pin;
 8006eac:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(FRICTION_R_GPIO_Port, &GPIO_InitStruct);
 8006eae:	f7fa fc9f 	bl	80017f0 <HAL_GPIO_Init>
}
 8006eb2:	b00a      	add	sp, #40	; 0x28
 8006eb4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006eb6:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8006eba:	9402      	str	r4, [sp, #8]
 8006ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ebe:	481e      	ldr	r0, [pc, #120]	; (8006f38 <MX_TIM8_Init+0x1d8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ec0:	f042 0201 	orr.w	r2, r2, #1
 8006ec4:	631a      	str	r2, [r3, #48]	; 0x30
 8006ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec8:	f003 0301 	and.w	r3, r3, #1
 8006ecc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ece:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006ed0:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ed2:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8006ed4:	240f      	movs	r4, #15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ed6:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006ed8:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006eda:	e9cd 4205 	strd	r4, r2, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ede:	f7fa fc87 	bl	80017f0 <HAL_GPIO_Init>
}
 8006ee2:	b00a      	add	sp, #40	; 0x28
 8006ee4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8006ee6:	4b12      	ldr	r3, [pc, #72]	; (8006f30 <MX_TIM8_Init+0x1d0>)
 8006ee8:	9403      	str	r4, [sp, #12]
 8006eea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006eec:	4814      	ldr	r0, [pc, #80]	; (8006f40 <MX_TIM8_Init+0x1e0>)
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8006eee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ef2:	631a      	str	r2, [r3, #48]	; 0x30
 8006ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006efa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006efc:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006efe:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006f00:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8006f02:	2460      	movs	r4, #96	; 0x60
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8006f04:	9d03      	ldr	r5, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006f06:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f08:	e9cd 4205 	strd	r4, r2, [sp, #20]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006f0c:	f7fa fc70 	bl	80017f0 <HAL_GPIO_Init>
}
 8006f10:	b00a      	add	sp, #40	; 0x28
 8006f12:	bd70      	pop	{r4, r5, r6, pc}
 8006f14:	200006e8 	.word	0x200006e8
 8006f18:	40010400 	.word	0x40010400
 8006f1c:	200002c4 	.word	0x200002c4
 8006f20:	200002a8 	.word	0x200002a8
 8006f24:	20000288 	.word	0x20000288
 8006f28:	40010000 	.word	0x40010000
 8006f2c:	40001800 	.word	0x40001800
 8006f30:	40023800 	.word	0x40023800
 8006f34:	40021c00 	.word	0x40021c00
 8006f38:	40020000 	.word	0x40020000
 8006f3c:	40021000 	.word	0x40021000
 8006f40:	40022000 	.word	0x40022000

08006f44 <MX_TIM12_Init>:
{
 8006f44:	b570      	push	{r4, r5, r6, lr}
  htim12.Instance = TIM12;
 8006f46:	4c55      	ldr	r4, [pc, #340]	; (800709c <MX_TIM12_Init+0x158>)
 8006f48:	4b55      	ldr	r3, [pc, #340]	; (80070a0 <MX_TIM12_Init+0x15c>)
 8006f4a:	6023      	str	r3, [r4, #0]
{
 8006f4c:	b08a      	sub	sp, #40	; 0x28
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006f4e:	2300      	movs	r3, #0
  htim12.Init.Prescaler = 83;
 8006f50:	2153      	movs	r1, #83	; 0x53
  htim12.Init.Period = 20000-1;
 8006f52:	f644 621f 	movw	r2, #19999	; 0x4e1f
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8006f56:	4620      	mov	r0, r4
  htim12.Init.Prescaler = 83;
 8006f58:	6061      	str	r1, [r4, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006f5a:	e9c4 3202 	strd	r3, r2, [r4, #8]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006f5e:	6123      	str	r3, [r4, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006f60:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8006f62:	f7fb fad1 	bl	8002508 <HAL_TIM_PWM_Init>
 8006f66:	bb18      	cbnz	r0, 8006fb0 <MX_TIM12_Init+0x6c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006f68:	4b4e      	ldr	r3, [pc, #312]	; (80070a4 <MX_TIM12_Init+0x160>)
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006f6a:	484c      	ldr	r0, [pc, #304]	; (800709c <MX_TIM12_Init+0x158>)
  sConfigOC.Pulse = 0;
 8006f6c:	2500      	movs	r5, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006f6e:	2260      	movs	r2, #96	; 0x60
 8006f70:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006f72:	4619      	mov	r1, r3
 8006f74:	462a      	mov	r2, r5
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006f76:	e9c3 5501 	strd	r5, r5, [r3, #4]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006f7a:	611d      	str	r5, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006f7c:	f7fb fb72 	bl	8002664 <HAL_TIM_PWM_ConfigChannel>
 8006f80:	b108      	cbz	r0, 8006f86 <MX_TIM12_Init+0x42>
    Error_Handler();
 8006f82:	f7ff f933 	bl	80061ec <Error_Handler>
  if(timHandle->Instance==TIM1)
 8006f86:	6823      	ldr	r3, [r4, #0]
 8006f88:	4a47      	ldr	r2, [pc, #284]	; (80070a8 <MX_TIM12_Init+0x164>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f8a:	2400      	movs	r4, #0
  if(timHandle->Instance==TIM1)
 8006f8c:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f8e:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8006f92:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8006f96:	9409      	str	r4, [sp, #36]	; 0x24
  if(timHandle->Instance==TIM1)
 8006f98:	d024      	beq.n	8006fe4 <MX_TIM12_Init+0xa0>
  else if(timHandle->Instance==TIM2)
 8006f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f9e:	d04e      	beq.n	800703e <MX_TIM12_Init+0xfa>
  else if(timHandle->Instance==TIM8)
 8006fa0:	4a42      	ldr	r2, [pc, #264]	; (80070ac <MX_TIM12_Init+0x168>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d063      	beq.n	800706e <MX_TIM12_Init+0x12a>
  else if(timHandle->Instance==TIM12)
 8006fa6:	4a3e      	ldr	r2, [pc, #248]	; (80070a0 <MX_TIM12_Init+0x15c>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d004      	beq.n	8006fb6 <MX_TIM12_Init+0x72>
}
 8006fac:	b00a      	add	sp, #40	; 0x28
 8006fae:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8006fb0:	f7ff f91c 	bl	80061ec <Error_Handler>
 8006fb4:	e7d8      	b.n	8006f68 <MX_TIM12_Init+0x24>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006fb6:	4b3e      	ldr	r3, [pc, #248]	; (80070b0 <MX_TIM12_Init+0x16c>)
 8006fb8:	9404      	str	r4, [sp, #16]
 8006fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 8006fbc:	483d      	ldr	r0, [pc, #244]	; (80070b4 <MX_TIM12_Init+0x170>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006fbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006fc2:	631a      	str	r2, [r3, #48]	; 0x30
 8006fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fca:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fcc:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8006fce:	2309      	movs	r3, #9
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 8006fd0:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = BEEP_CTRL_Pin;
 8006fd2:	2440      	movs	r4, #64	; 0x40
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006fd4:	9d04      	ldr	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8006fd6:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fd8:	e9cd 4205 	strd	r4, r2, [sp, #20]
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 8006fdc:	f7fa fc08 	bl	80017f0 <HAL_GPIO_Init>
}
 8006fe0:	b00a      	add	sp, #40	; 0x28
 8006fe2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fe4:	4b32      	ldr	r3, [pc, #200]	; (80070b0 <MX_TIM12_Init+0x16c>)
 8006fe6:	9400      	str	r4, [sp, #0]
 8006fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 8006fea:	4833      	ldr	r0, [pc, #204]	; (80070b8 <MX_TIM12_Init+0x174>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fec:	f042 0201 	orr.w	r2, r2, #1
 8006ff0:	631a      	str	r2, [r3, #48]	; 0x30
 8006ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ff4:	f002 0201 	and.w	r2, r2, #1
 8006ff8:	9200      	str	r2, [sp, #0]
 8006ffa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006ffc:	9401      	str	r4, [sp, #4]
 8006ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007000:	f042 0210 	orr.w	r2, r2, #16
 8007004:	631a      	str	r2, [r3, #48]	; 0x30
 8007006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007008:	f003 0310 	and.w	r3, r3, #16
 800700c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800700e:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = FRICTION_L_Pin;
 8007010:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007014:	2501      	movs	r5, #1
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 8007016:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007018:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800701a:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800701c:	e9cd 3605 	strd	r3, r6, [sp, #20]
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 8007020:	f7fa fbe6 	bl	80017f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = FRICTION_R_Pin;
 8007024:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    HAL_GPIO_Init(FRICTION_R_GPIO_Port, &GPIO_InitStruct);
 8007028:	a905      	add	r1, sp, #20
 800702a:	4824      	ldr	r0, [pc, #144]	; (80070bc <MX_TIM12_Init+0x178>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800702c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800702e:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007030:	e9cd 4407 	strd	r4, r4, [sp, #28]
    GPIO_InitStruct.Pin = FRICTION_R_Pin;
 8007034:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(FRICTION_R_GPIO_Port, &GPIO_InitStruct);
 8007036:	f7fa fbdb 	bl	80017f0 <HAL_GPIO_Init>
}
 800703a:	b00a      	add	sp, #40	; 0x28
 800703c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800703e:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8007042:	9402      	str	r4, [sp, #8]
 8007044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007046:	481c      	ldr	r0, [pc, #112]	; (80070b8 <MX_TIM12_Init+0x174>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007048:	f042 0201 	orr.w	r2, r2, #1
 800704c:	631a      	str	r2, [r3, #48]	; 0x30
 800704e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007050:	f003 0301 	and.w	r3, r3, #1
 8007054:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007056:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007058:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800705a:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800705c:	240f      	movs	r4, #15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800705e:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007060:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007062:	e9cd 4205 	strd	r4, r2, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007066:	f7fa fbc3 	bl	80017f0 <HAL_GPIO_Init>
}
 800706a:	b00a      	add	sp, #40	; 0x28
 800706c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800706e:	4b10      	ldr	r3, [pc, #64]	; (80070b0 <MX_TIM12_Init+0x16c>)
 8007070:	9403      	str	r4, [sp, #12]
 8007072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8007074:	4812      	ldr	r0, [pc, #72]	; (80070c0 <MX_TIM12_Init+0x17c>)
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8007076:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800707a:	631a      	str	r2, [r3, #48]	; 0x30
 800707c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007082:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007084:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8007086:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8007088:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 800708a:	2460      	movs	r4, #96	; 0x60
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800708c:	9d03      	ldr	r5, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800708e:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007090:	e9cd 4205 	strd	r4, r2, [sp, #20]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8007094:	f7fa fbac 	bl	80017f0 <HAL_GPIO_Init>
}
 8007098:	b00a      	add	sp, #40	; 0x28
 800709a:	bd70      	pop	{r4, r5, r6, pc}
 800709c:	200007e8 	.word	0x200007e8
 80070a0:	40001800 	.word	0x40001800
 80070a4:	200002a8 	.word	0x200002a8
 80070a8:	40010000 	.word	0x40010000
 80070ac:	40010400 	.word	0x40010400
 80070b0:	40023800 	.word	0x40023800
 80070b4:	40021c00 	.word	0x40021c00
 80070b8:	40020000 	.word	0x40020000
 80070bc:	40021000 	.word	0x40021000
 80070c0:	40022000 	.word	0x40022000

080070c4 <HAL_TIM_PWM_MspInit>:
  if(tim_pwmHandle->Instance==TIM1)
 80070c4:	6803      	ldr	r3, [r0, #0]
 80070c6:	4a23      	ldr	r2, [pc, #140]	; (8007154 <HAL_TIM_PWM_MspInit+0x90>)
 80070c8:	4293      	cmp	r3, r2
{
 80070ca:	b084      	sub	sp, #16
  if(tim_pwmHandle->Instance==TIM1)
 80070cc:	d016      	beq.n	80070fc <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM2)
 80070ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070d2:	d02f      	beq.n	8007134 <HAL_TIM_PWM_MspInit+0x70>
  else if(tim_pwmHandle->Instance==TIM8)
 80070d4:	4a20      	ldr	r2, [pc, #128]	; (8007158 <HAL_TIM_PWM_MspInit+0x94>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d01e      	beq.n	8007118 <HAL_TIM_PWM_MspInit+0x54>
  else if(tim_pwmHandle->Instance==TIM12)
 80070da:	4a20      	ldr	r2, [pc, #128]	; (800715c <HAL_TIM_PWM_MspInit+0x98>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d10b      	bne.n	80070f8 <HAL_TIM_PWM_MspInit+0x34>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80070e0:	4b1f      	ldr	r3, [pc, #124]	; (8007160 <HAL_TIM_PWM_MspInit+0x9c>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	9203      	str	r2, [sp, #12]
 80070e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070ec:	641a      	str	r2, [r3, #64]	; 0x40
 80070ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070f4:	9303      	str	r3, [sp, #12]
 80070f6:	9b03      	ldr	r3, [sp, #12]
}
 80070f8:	b004      	add	sp, #16
 80070fa:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 80070fc:	4b18      	ldr	r3, [pc, #96]	; (8007160 <HAL_TIM_PWM_MspInit+0x9c>)
 80070fe:	2200      	movs	r2, #0
 8007100:	9200      	str	r2, [sp, #0]
 8007102:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007104:	f042 0201 	orr.w	r2, r2, #1
 8007108:	645a      	str	r2, [r3, #68]	; 0x44
 800710a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800710c:	f003 0301 	and.w	r3, r3, #1
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	9b00      	ldr	r3, [sp, #0]
}
 8007114:	b004      	add	sp, #16
 8007116:	4770      	bx	lr
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007118:	4b11      	ldr	r3, [pc, #68]	; (8007160 <HAL_TIM_PWM_MspInit+0x9c>)
 800711a:	2200      	movs	r2, #0
 800711c:	9202      	str	r2, [sp, #8]
 800711e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007120:	f042 0202 	orr.w	r2, r2, #2
 8007124:	645a      	str	r2, [r3, #68]	; 0x44
 8007126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007128:	f003 0302 	and.w	r3, r3, #2
 800712c:	9302      	str	r3, [sp, #8]
 800712e:	9b02      	ldr	r3, [sp, #8]
}
 8007130:	b004      	add	sp, #16
 8007132:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007134:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8007138:	2200      	movs	r2, #0
 800713a:	9201      	str	r2, [sp, #4]
 800713c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800713e:	f042 0201 	orr.w	r2, r2, #1
 8007142:	641a      	str	r2, [r3, #64]	; 0x40
 8007144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007146:	f003 0301 	and.w	r3, r3, #1
 800714a:	9301      	str	r3, [sp, #4]
 800714c:	9b01      	ldr	r3, [sp, #4]
}
 800714e:	b004      	add	sp, #16
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	40010000 	.word	0x40010000
 8007158:	40010400 	.word	0x40010400
 800715c:	40001800 	.word	0x40001800
 8007160:	40023800 	.word	0x40023800

08007164 <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM6)
 8007164:	6802      	ldr	r2, [r0, #0]
 8007166:	4b0e      	ldr	r3, [pc, #56]	; (80071a0 <HAL_TIM_Base_MspInit+0x3c>)
 8007168:	429a      	cmp	r2, r3
 800716a:	d000      	beq.n	800716e <HAL_TIM_Base_MspInit+0xa>
 800716c:	4770      	bx	lr
{
 800716e:	b500      	push	{lr}
 8007170:	b083      	sub	sp, #12
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007172:	2200      	movs	r2, #0
 8007174:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 8007178:	9201      	str	r2, [sp, #4]
 800717a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800717c:	f041 0110 	orr.w	r1, r1, #16
 8007180:	6419      	str	r1, [r3, #64]	; 0x40
 8007182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007184:	f003 0310 	and.w	r3, r3, #16
 8007188:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800718a:	2101      	movs	r1, #1
 800718c:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 800718e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8007190:	f7fa fabe 	bl	8001710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007194:	2036      	movs	r0, #54	; 0x36
}
 8007196:	b003      	add	sp, #12
 8007198:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800719c:	f7fa baee 	b.w	800177c <HAL_NVIC_EnableIRQ>
 80071a0:	40001000 	.word	0x40001000

080071a4 <MX_UART7_Init>:

/* UART7 init function */
void MX_UART7_Init(void)
{

  huart7.Instance = UART7;
 80071a4:	4b0b      	ldr	r3, [pc, #44]	; (80071d4 <MX_UART7_Init+0x30>)
 80071a6:	4a0c      	ldr	r2, [pc, #48]	; (80071d8 <MX_UART7_Init+0x34>)
{
 80071a8:	b510      	push	{r4, lr}
  huart7.Init.BaudRate = 115200;
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
  huart7.Init.StopBits = UART_STOPBITS_1;
  huart7.Init.Parity = UART_PARITY_NONE;
  huart7.Init.Mode = UART_MODE_TX_RX;
 80071aa:	210c      	movs	r1, #12
  huart7.Instance = UART7;
 80071ac:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80071ae:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80071b2:	2200      	movs	r2, #0
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80071b4:	4618      	mov	r0, r3
  huart7.Init.BaudRate = 115200;
 80071b6:	605c      	str	r4, [r3, #4]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80071b8:	6159      	str	r1, [r3, #20]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80071ba:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart7.Init.Parity = UART_PARITY_NONE;
 80071be:	611a      	str	r2, [r3, #16]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80071c0:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80071c4:	f7fb fc5a 	bl	8002a7c <HAL_UART_Init>
 80071c8:	b900      	cbnz	r0, 80071cc <MX_UART7_Init+0x28>
  {
    Error_Handler();
  }

}
 80071ca:	bd10      	pop	{r4, pc}
 80071cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80071d0:	f7ff b80c 	b.w	80061ec <Error_Handler>
 80071d4:	20000828 	.word	0x20000828
 80071d8:	40007800 	.word	0x40007800

080071dc <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{

  huart8.Instance = UART8;
 80071dc:	4b0b      	ldr	r3, [pc, #44]	; (800720c <MX_UART8_Init+0x30>)
 80071de:	4a0c      	ldr	r2, [pc, #48]	; (8007210 <MX_UART8_Init+0x34>)
{
 80071e0:	b510      	push	{r4, lr}
  huart8.Init.BaudRate = 115200;
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
  huart8.Init.StopBits = UART_STOPBITS_1;
  huart8.Init.Parity = UART_PARITY_NONE;
  huart8.Init.Mode = UART_MODE_TX_RX;
 80071e2:	210c      	movs	r1, #12
  huart8.Instance = UART8;
 80071e4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80071e6:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80071ea:	2200      	movs	r2, #0
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80071ec:	4618      	mov	r0, r3
  huart8.Init.BaudRate = 115200;
 80071ee:	605c      	str	r4, [r3, #4]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80071f0:	6159      	str	r1, [r3, #20]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80071f2:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart8.Init.Parity = UART_PARITY_NONE;
 80071f6:	611a      	str	r2, [r3, #16]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80071f8:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80071fc:	f7fb fc3e 	bl	8002a7c <HAL_UART_Init>
 8007200:	b900      	cbnz	r0, 8007204 <MX_UART8_Init+0x28>
  {
    Error_Handler();
  }

}
 8007202:	bd10      	pop	{r4, pc}
 8007204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8007208:	f7fe bff0 	b.w	80061ec <Error_Handler>
 800720c:	200008a8 	.word	0x200008a8
 8007210:	40007c00 	.word	0x40007c00

08007214 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8007214:	4b0b      	ldr	r3, [pc, #44]	; (8007244 <MX_USART1_UART_Init+0x30>)
 8007216:	4a0c      	ldr	r2, [pc, #48]	; (8007248 <MX_USART1_UART_Init+0x34>)
{
 8007218:	b510      	push	{r4, lr}
  huart1.Init.BaudRate = 100000;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800721a:	210c      	movs	r1, #12
  huart1.Init.BaudRate = 100000;
 800721c:	4c0b      	ldr	r4, [pc, #44]	; (800724c <MX_USART1_UART_Init+0x38>)
  huart1.Instance = USART1;
 800721e:	601a      	str	r2, [r3, #0]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007220:	4618      	mov	r0, r3
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007222:	2200      	movs	r2, #0
  huart1.Init.BaudRate = 100000;
 8007224:	605c      	str	r4, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007226:	6159      	str	r1, [r3, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007228:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 800722c:	611a      	str	r2, [r3, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800722e:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007232:	f7fb fc23 	bl	8002a7c <HAL_UART_Init>
 8007236:	b900      	cbnz	r0, 800723a <MX_USART1_UART_Init+0x26>
  {
    Error_Handler();
  }

}
 8007238:	bd10      	pop	{r4, pc}
 800723a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800723e:	f7fe bfd5 	b.w	80061ec <Error_Handler>
 8007242:	bf00      	nop
 8007244:	20000868 	.word	0x20000868
 8007248:	40011000 	.word	0x40011000
 800724c:	000186a0 	.word	0x000186a0

08007250 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{

  huart6.Instance = USART6;
 8007250:	4b0b      	ldr	r3, [pc, #44]	; (8007280 <MX_USART6_UART_Init+0x30>)
 8007252:	4a0c      	ldr	r2, [pc, #48]	; (8007284 <MX_USART6_UART_Init+0x34>)
{
 8007254:	b510      	push	{r4, lr}
  huart6.Init.BaudRate = 115200;
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
 8007256:	210c      	movs	r1, #12
  huart6.Instance = USART6;
 8007258:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800725a:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800725e:	2200      	movs	r2, #0
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8007260:	4618      	mov	r0, r3
  huart6.Init.BaudRate = 115200;
 8007262:	605c      	str	r4, [r3, #4]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8007264:	6159      	str	r1, [r3, #20]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8007266:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart6.Init.Parity = UART_PARITY_NONE;
 800726a:	611a      	str	r2, [r3, #16]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800726c:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8007270:	f7fb fc04 	bl	8002a7c <HAL_UART_Init>
 8007274:	b900      	cbnz	r0, 8007278 <MX_USART6_UART_Init+0x28>
  {
    Error_Handler();
  }

}
 8007276:	bd10      	pop	{r4, pc}
 8007278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800727c:	f7fe bfb6 	b.w	80061ec <Error_Handler>
 8007280:	200008e8 	.word	0x200008e8
 8007284:	40011400 	.word	0x40011400

08007288 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007288:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==UART7)
 800728a:	6803      	ldr	r3, [r0, #0]
 800728c:	4a5c      	ldr	r2, [pc, #368]	; (8007400 <HAL_UART_MspInit+0x178>)
{
 800728e:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007290:	2400      	movs	r4, #0
  if(uartHandle->Instance==UART7)
 8007292:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007294:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8007298:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800729c:	940d      	str	r4, [sp, #52]	; 0x34
  if(uartHandle->Instance==UART7)
 800729e:	d038      	beq.n	8007312 <HAL_UART_MspInit+0x8a>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(uartHandle->Instance==UART8)
 80072a0:	4a58      	ldr	r2, [pc, #352]	; (8007404 <HAL_UART_MspInit+0x17c>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d05b      	beq.n	800735e <HAL_UART_MspInit+0xd6>

  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 80072a6:	4a58      	ldr	r2, [pc, #352]	; (8007408 <HAL_UART_MspInit+0x180>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d07c      	beq.n	80073a6 <HAL_UART_MspInit+0x11e>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART6)
 80072ac:	4a57      	ldr	r2, [pc, #348]	; (800740c <HAL_UART_MspInit+0x184>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d001      	beq.n	80072b6 <HAL_UART_MspInit+0x2e>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80072b2:	b00e      	add	sp, #56	; 0x38
 80072b4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART6_CLK_ENABLE();
 80072b6:	4b56      	ldr	r3, [pc, #344]	; (8007410 <HAL_UART_MspInit+0x188>)
 80072b8:	9407      	str	r4, [sp, #28]
 80072ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80072bc:	4855      	ldr	r0, [pc, #340]	; (8007414 <HAL_UART_MspInit+0x18c>)
    __HAL_RCC_USART6_CLK_ENABLE();
 80072be:	f042 0220 	orr.w	r2, r2, #32
 80072c2:	645a      	str	r2, [r3, #68]	; 0x44
 80072c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072c6:	f002 0220 	and.w	r2, r2, #32
 80072ca:	9207      	str	r2, [sp, #28]
 80072cc:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80072ce:	9408      	str	r4, [sp, #32]
 80072d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072d6:	631a      	str	r2, [r3, #48]	; 0x30
 80072d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072de:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80072e0:	f44f 4284 	mov.w	r2, #16896	; 0x4200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072e4:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80072e6:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80072e8:	9209      	str	r2, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072ea:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072ec:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80072ee:	2308      	movs	r3, #8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80072f0:	2501      	movs	r5, #1
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80072f2:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072f4:	e9cd 520b 	strd	r5, r2, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80072f8:	9e08      	ldr	r6, [sp, #32]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80072fa:	f7fa fa79 	bl	80017f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80072fe:	4622      	mov	r2, r4
 8007300:	4621      	mov	r1, r4
 8007302:	2047      	movs	r0, #71	; 0x47
 8007304:	f7fa fa04 	bl	8001710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8007308:	2047      	movs	r0, #71	; 0x47
 800730a:	f7fa fa37 	bl	800177c <HAL_NVIC_EnableIRQ>
}
 800730e:	b00e      	add	sp, #56	; 0x38
 8007310:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_UART7_CLK_ENABLE();
 8007312:	4b3f      	ldr	r3, [pc, #252]	; (8007410 <HAL_UART_MspInit+0x188>)
 8007314:	9401      	str	r4, [sp, #4]
 8007316:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007318:	483f      	ldr	r0, [pc, #252]	; (8007418 <HAL_UART_MspInit+0x190>)
    __HAL_RCC_UART7_CLK_ENABLE();
 800731a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800731e:	641a      	str	r2, [r3, #64]	; 0x40
 8007320:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007322:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007326:	9201      	str	r2, [sp, #4]
 8007328:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800732a:	9402      	str	r4, [sp, #8]
 800732c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800732e:	f042 0210 	orr.w	r2, r2, #16
 8007332:	631a      	str	r2, [r3, #48]	; 0x30
 8007334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007336:	f003 0310 	and.w	r3, r3, #16
 800733a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 800733c:	f44f 73c0 	mov.w	r3, #384	; 0x180
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007340:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8007342:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007344:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8007346:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007348:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800734a:	2401      	movs	r4, #1
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800734c:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800734e:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8007352:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007356:	f7fa fa4b 	bl	80017f0 <HAL_GPIO_Init>
}
 800735a:	b00e      	add	sp, #56	; 0x38
 800735c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_UART8_CLK_ENABLE();
 800735e:	4b2c      	ldr	r3, [pc, #176]	; (8007410 <HAL_UART_MspInit+0x188>)
 8007360:	9403      	str	r4, [sp, #12]
 8007362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007364:	482c      	ldr	r0, [pc, #176]	; (8007418 <HAL_UART_MspInit+0x190>)
    __HAL_RCC_UART8_CLK_ENABLE();
 8007366:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800736a:	641a      	str	r2, [r3, #64]	; 0x40
 800736c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800736e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007372:	9203      	str	r2, [sp, #12]
 8007374:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007376:	9404      	str	r4, [sp, #16]
 8007378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800737a:	f042 0210 	orr.w	r2, r2, #16
 800737e:	631a      	str	r2, [r3, #48]	; 0x30
 8007380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007382:	f003 0310 	and.w	r3, r3, #16
 8007386:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8007388:	2208      	movs	r2, #8
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800738a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800738c:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800738e:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007390:	2401      	movs	r4, #1
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007392:	9e04      	ldr	r6, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8007394:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007396:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007398:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800739c:	920d      	str	r2, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800739e:	f7fa fa27 	bl	80017f0 <HAL_GPIO_Init>
}
 80073a2:	b00e      	add	sp, #56	; 0x38
 80073a4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80073a6:	4b1a      	ldr	r3, [pc, #104]	; (8007410 <HAL_UART_MspInit+0x188>)
 80073a8:	9405      	str	r4, [sp, #20]
 80073aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073ac:	481b      	ldr	r0, [pc, #108]	; (800741c <HAL_UART_MspInit+0x194>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80073ae:	f042 0210 	orr.w	r2, r2, #16
 80073b2:	645a      	str	r2, [r3, #68]	; 0x44
 80073b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073b6:	f002 0210 	and.w	r2, r2, #16
 80073ba:	9205      	str	r2, [sp, #20]
 80073bc:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073be:	9406      	str	r4, [sp, #24]
 80073c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073c2:	f042 0202 	orr.w	r2, r2, #2
 80073c6:	631a      	str	r2, [r3, #48]	; 0x30
 80073c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ca:	f003 0302 	and.w	r3, r3, #2
 80073ce:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80073d0:	22c0      	movs	r2, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073d2:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073d4:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80073d6:	9209      	str	r2, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073d8:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073da:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80073dc:	2307      	movs	r3, #7
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80073de:	2501      	movs	r5, #1
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80073e0:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073e2:	e9cd 520b 	strd	r5, r2, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073e6:	9e06      	ldr	r6, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073e8:	f7fa fa02 	bl	80017f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80073ec:	4622      	mov	r2, r4
 80073ee:	4621      	mov	r1, r4
 80073f0:	2025      	movs	r0, #37	; 0x25
 80073f2:	f7fa f98d 	bl	8001710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80073f6:	2025      	movs	r0, #37	; 0x25
 80073f8:	f7fa f9c0 	bl	800177c <HAL_NVIC_EnableIRQ>
}
 80073fc:	b00e      	add	sp, #56	; 0x38
 80073fe:	bd70      	pop	{r4, r5, r6, pc}
 8007400:	40007800 	.word	0x40007800
 8007404:	40007c00 	.word	0x40007c00
 8007408:	40011000 	.word	0x40011000
 800740c:	40011400 	.word	0x40011400
 8007410:	40023800 	.word	0x40023800
 8007414:	40021800 	.word	0x40021800
 8007418:	40021000 	.word	0x40021000
 800741c:	40020400 	.word	0x40020400

08007420 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007420:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007458 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007424:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007426:	e003      	b.n	8007430 <LoopCopyDataInit>

08007428 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007428:	4b0c      	ldr	r3, [pc, #48]	; (800745c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800742a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800742c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800742e:	3104      	adds	r1, #4

08007430 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007430:	480b      	ldr	r0, [pc, #44]	; (8007460 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007432:	4b0c      	ldr	r3, [pc, #48]	; (8007464 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007434:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007436:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007438:	d3f6      	bcc.n	8007428 <CopyDataInit>
  ldr  r2, =_sbss
 800743a:	4a0b      	ldr	r2, [pc, #44]	; (8007468 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800743c:	e002      	b.n	8007444 <LoopFillZerobss>

0800743e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800743e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007440:	f842 3b04 	str.w	r3, [r2], #4

08007444 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007444:	4b09      	ldr	r3, [pc, #36]	; (800746c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007446:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007448:	d3f9      	bcc.n	800743e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800744a:	f7ff fa59 	bl	8006900 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800744e:	f000 f817 	bl	8007480 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007452:	f7fe f8ff 	bl	8005654 <main>
  bx  lr    
 8007456:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007458:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800745c:	0800c538 	.word	0x0800c538
  ldr  r0, =_sdata
 8007460:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007464:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8007468:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 800746c:	2000092c 	.word	0x2000092c

08007470 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007470:	e7fe      	b.n	8007470 <ADC_IRQHandler>
	...

08007474 <__errno>:
 8007474:	4b01      	ldr	r3, [pc, #4]	; (800747c <__errno+0x8>)
 8007476:	6818      	ldr	r0, [r3, #0]
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	20000028 	.word	0x20000028

08007480 <__libc_init_array>:
 8007480:	b570      	push	{r4, r5, r6, lr}
 8007482:	4e0d      	ldr	r6, [pc, #52]	; (80074b8 <__libc_init_array+0x38>)
 8007484:	4c0d      	ldr	r4, [pc, #52]	; (80074bc <__libc_init_array+0x3c>)
 8007486:	1ba4      	subs	r4, r4, r6
 8007488:	10a4      	asrs	r4, r4, #2
 800748a:	2500      	movs	r5, #0
 800748c:	42a5      	cmp	r5, r4
 800748e:	d109      	bne.n	80074a4 <__libc_init_array+0x24>
 8007490:	4e0b      	ldr	r6, [pc, #44]	; (80074c0 <__libc_init_array+0x40>)
 8007492:	4c0c      	ldr	r4, [pc, #48]	; (80074c4 <__libc_init_array+0x44>)
 8007494:	f004 fc9a 	bl	800bdcc <_init>
 8007498:	1ba4      	subs	r4, r4, r6
 800749a:	10a4      	asrs	r4, r4, #2
 800749c:	2500      	movs	r5, #0
 800749e:	42a5      	cmp	r5, r4
 80074a0:	d105      	bne.n	80074ae <__libc_init_array+0x2e>
 80074a2:	bd70      	pop	{r4, r5, r6, pc}
 80074a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074a8:	4798      	blx	r3
 80074aa:	3501      	adds	r5, #1
 80074ac:	e7ee      	b.n	800748c <__libc_init_array+0xc>
 80074ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074b2:	4798      	blx	r3
 80074b4:	3501      	adds	r5, #1
 80074b6:	e7f2      	b.n	800749e <__libc_init_array+0x1e>
 80074b8:	0800c530 	.word	0x0800c530
 80074bc:	0800c530 	.word	0x0800c530
 80074c0:	0800c530 	.word	0x0800c530
 80074c4:	0800c534 	.word	0x0800c534

080074c8 <memset>:
 80074c8:	4402      	add	r2, r0
 80074ca:	4603      	mov	r3, r0
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d100      	bne.n	80074d2 <memset+0xa>
 80074d0:	4770      	bx	lr
 80074d2:	f803 1b01 	strb.w	r1, [r3], #1
 80074d6:	e7f9      	b.n	80074cc <memset+0x4>

080074d8 <__cvt>:
 80074d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074dc:	ec55 4b10 	vmov	r4, r5, d0
 80074e0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80074e2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80074e6:	2d00      	cmp	r5, #0
 80074e8:	460e      	mov	r6, r1
 80074ea:	4691      	mov	r9, r2
 80074ec:	4619      	mov	r1, r3
 80074ee:	bfb8      	it	lt
 80074f0:	4622      	movlt	r2, r4
 80074f2:	462b      	mov	r3, r5
 80074f4:	f027 0720 	bic.w	r7, r7, #32
 80074f8:	bfbb      	ittet	lt
 80074fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80074fe:	461d      	movlt	r5, r3
 8007500:	2300      	movge	r3, #0
 8007502:	232d      	movlt	r3, #45	; 0x2d
 8007504:	bfb8      	it	lt
 8007506:	4614      	movlt	r4, r2
 8007508:	2f46      	cmp	r7, #70	; 0x46
 800750a:	700b      	strb	r3, [r1, #0]
 800750c:	d004      	beq.n	8007518 <__cvt+0x40>
 800750e:	2f45      	cmp	r7, #69	; 0x45
 8007510:	d100      	bne.n	8007514 <__cvt+0x3c>
 8007512:	3601      	adds	r6, #1
 8007514:	2102      	movs	r1, #2
 8007516:	e000      	b.n	800751a <__cvt+0x42>
 8007518:	2103      	movs	r1, #3
 800751a:	ab03      	add	r3, sp, #12
 800751c:	9301      	str	r3, [sp, #4]
 800751e:	ab02      	add	r3, sp, #8
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	4632      	mov	r2, r6
 8007524:	4653      	mov	r3, sl
 8007526:	ec45 4b10 	vmov	d0, r4, r5
 800752a:	f000 feb1 	bl	8008290 <_dtoa_r>
 800752e:	2f47      	cmp	r7, #71	; 0x47
 8007530:	4680      	mov	r8, r0
 8007532:	d102      	bne.n	800753a <__cvt+0x62>
 8007534:	f019 0f01 	tst.w	r9, #1
 8007538:	d026      	beq.n	8007588 <__cvt+0xb0>
 800753a:	2f46      	cmp	r7, #70	; 0x46
 800753c:	eb08 0906 	add.w	r9, r8, r6
 8007540:	d111      	bne.n	8007566 <__cvt+0x8e>
 8007542:	f898 3000 	ldrb.w	r3, [r8]
 8007546:	2b30      	cmp	r3, #48	; 0x30
 8007548:	d10a      	bne.n	8007560 <__cvt+0x88>
 800754a:	2200      	movs	r2, #0
 800754c:	2300      	movs	r3, #0
 800754e:	4620      	mov	r0, r4
 8007550:	4629      	mov	r1, r5
 8007552:	f7f9 fac9 	bl	8000ae8 <__aeabi_dcmpeq>
 8007556:	b918      	cbnz	r0, 8007560 <__cvt+0x88>
 8007558:	f1c6 0601 	rsb	r6, r6, #1
 800755c:	f8ca 6000 	str.w	r6, [sl]
 8007560:	f8da 3000 	ldr.w	r3, [sl]
 8007564:	4499      	add	r9, r3
 8007566:	2200      	movs	r2, #0
 8007568:	2300      	movs	r3, #0
 800756a:	4620      	mov	r0, r4
 800756c:	4629      	mov	r1, r5
 800756e:	f7f9 fabb 	bl	8000ae8 <__aeabi_dcmpeq>
 8007572:	b938      	cbnz	r0, 8007584 <__cvt+0xac>
 8007574:	2230      	movs	r2, #48	; 0x30
 8007576:	9b03      	ldr	r3, [sp, #12]
 8007578:	454b      	cmp	r3, r9
 800757a:	d205      	bcs.n	8007588 <__cvt+0xb0>
 800757c:	1c59      	adds	r1, r3, #1
 800757e:	9103      	str	r1, [sp, #12]
 8007580:	701a      	strb	r2, [r3, #0]
 8007582:	e7f8      	b.n	8007576 <__cvt+0x9e>
 8007584:	f8cd 900c 	str.w	r9, [sp, #12]
 8007588:	9b03      	ldr	r3, [sp, #12]
 800758a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800758c:	eba3 0308 	sub.w	r3, r3, r8
 8007590:	4640      	mov	r0, r8
 8007592:	6013      	str	r3, [r2, #0]
 8007594:	b004      	add	sp, #16
 8007596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800759a <__exponent>:
 800759a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800759c:	2900      	cmp	r1, #0
 800759e:	4604      	mov	r4, r0
 80075a0:	bfba      	itte	lt
 80075a2:	4249      	neglt	r1, r1
 80075a4:	232d      	movlt	r3, #45	; 0x2d
 80075a6:	232b      	movge	r3, #43	; 0x2b
 80075a8:	2909      	cmp	r1, #9
 80075aa:	f804 2b02 	strb.w	r2, [r4], #2
 80075ae:	7043      	strb	r3, [r0, #1]
 80075b0:	dd20      	ble.n	80075f4 <__exponent+0x5a>
 80075b2:	f10d 0307 	add.w	r3, sp, #7
 80075b6:	461f      	mov	r7, r3
 80075b8:	260a      	movs	r6, #10
 80075ba:	fb91 f5f6 	sdiv	r5, r1, r6
 80075be:	fb06 1115 	mls	r1, r6, r5, r1
 80075c2:	3130      	adds	r1, #48	; 0x30
 80075c4:	2d09      	cmp	r5, #9
 80075c6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80075ca:	f103 32ff 	add.w	r2, r3, #4294967295
 80075ce:	4629      	mov	r1, r5
 80075d0:	dc09      	bgt.n	80075e6 <__exponent+0x4c>
 80075d2:	3130      	adds	r1, #48	; 0x30
 80075d4:	3b02      	subs	r3, #2
 80075d6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80075da:	42bb      	cmp	r3, r7
 80075dc:	4622      	mov	r2, r4
 80075de:	d304      	bcc.n	80075ea <__exponent+0x50>
 80075e0:	1a10      	subs	r0, r2, r0
 80075e2:	b003      	add	sp, #12
 80075e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075e6:	4613      	mov	r3, r2
 80075e8:	e7e7      	b.n	80075ba <__exponent+0x20>
 80075ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075ee:	f804 2b01 	strb.w	r2, [r4], #1
 80075f2:	e7f2      	b.n	80075da <__exponent+0x40>
 80075f4:	2330      	movs	r3, #48	; 0x30
 80075f6:	4419      	add	r1, r3
 80075f8:	7083      	strb	r3, [r0, #2]
 80075fa:	1d02      	adds	r2, r0, #4
 80075fc:	70c1      	strb	r1, [r0, #3]
 80075fe:	e7ef      	b.n	80075e0 <__exponent+0x46>

08007600 <_printf_float>:
 8007600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007604:	b08d      	sub	sp, #52	; 0x34
 8007606:	460c      	mov	r4, r1
 8007608:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800760c:	4616      	mov	r6, r2
 800760e:	461f      	mov	r7, r3
 8007610:	4605      	mov	r5, r0
 8007612:	f001 fd6f 	bl	80090f4 <_localeconv_r>
 8007616:	6803      	ldr	r3, [r0, #0]
 8007618:	9304      	str	r3, [sp, #16]
 800761a:	4618      	mov	r0, r3
 800761c:	f7f8 fde8 	bl	80001f0 <strlen>
 8007620:	2300      	movs	r3, #0
 8007622:	930a      	str	r3, [sp, #40]	; 0x28
 8007624:	f8d8 3000 	ldr.w	r3, [r8]
 8007628:	9005      	str	r0, [sp, #20]
 800762a:	3307      	adds	r3, #7
 800762c:	f023 0307 	bic.w	r3, r3, #7
 8007630:	f103 0208 	add.w	r2, r3, #8
 8007634:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007638:	f8d4 b000 	ldr.w	fp, [r4]
 800763c:	f8c8 2000 	str.w	r2, [r8]
 8007640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007644:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007648:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800764c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007650:	9307      	str	r3, [sp, #28]
 8007652:	f8cd 8018 	str.w	r8, [sp, #24]
 8007656:	f04f 32ff 	mov.w	r2, #4294967295
 800765a:	4ba7      	ldr	r3, [pc, #668]	; (80078f8 <_printf_float+0x2f8>)
 800765c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007660:	f7f9 fa74 	bl	8000b4c <__aeabi_dcmpun>
 8007664:	bb70      	cbnz	r0, 80076c4 <_printf_float+0xc4>
 8007666:	f04f 32ff 	mov.w	r2, #4294967295
 800766a:	4ba3      	ldr	r3, [pc, #652]	; (80078f8 <_printf_float+0x2f8>)
 800766c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007670:	f7f9 fa4e 	bl	8000b10 <__aeabi_dcmple>
 8007674:	bb30      	cbnz	r0, 80076c4 <_printf_float+0xc4>
 8007676:	2200      	movs	r2, #0
 8007678:	2300      	movs	r3, #0
 800767a:	4640      	mov	r0, r8
 800767c:	4649      	mov	r1, r9
 800767e:	f7f9 fa3d 	bl	8000afc <__aeabi_dcmplt>
 8007682:	b110      	cbz	r0, 800768a <_printf_float+0x8a>
 8007684:	232d      	movs	r3, #45	; 0x2d
 8007686:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800768a:	4a9c      	ldr	r2, [pc, #624]	; (80078fc <_printf_float+0x2fc>)
 800768c:	4b9c      	ldr	r3, [pc, #624]	; (8007900 <_printf_float+0x300>)
 800768e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007692:	bf8c      	ite	hi
 8007694:	4690      	movhi	r8, r2
 8007696:	4698      	movls	r8, r3
 8007698:	2303      	movs	r3, #3
 800769a:	f02b 0204 	bic.w	r2, fp, #4
 800769e:	6123      	str	r3, [r4, #16]
 80076a0:	6022      	str	r2, [r4, #0]
 80076a2:	f04f 0900 	mov.w	r9, #0
 80076a6:	9700      	str	r7, [sp, #0]
 80076a8:	4633      	mov	r3, r6
 80076aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80076ac:	4621      	mov	r1, r4
 80076ae:	4628      	mov	r0, r5
 80076b0:	f000 f9e6 	bl	8007a80 <_printf_common>
 80076b4:	3001      	adds	r0, #1
 80076b6:	f040 808d 	bne.w	80077d4 <_printf_float+0x1d4>
 80076ba:	f04f 30ff 	mov.w	r0, #4294967295
 80076be:	b00d      	add	sp, #52	; 0x34
 80076c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076c4:	4642      	mov	r2, r8
 80076c6:	464b      	mov	r3, r9
 80076c8:	4640      	mov	r0, r8
 80076ca:	4649      	mov	r1, r9
 80076cc:	f7f9 fa3e 	bl	8000b4c <__aeabi_dcmpun>
 80076d0:	b110      	cbz	r0, 80076d8 <_printf_float+0xd8>
 80076d2:	4a8c      	ldr	r2, [pc, #560]	; (8007904 <_printf_float+0x304>)
 80076d4:	4b8c      	ldr	r3, [pc, #560]	; (8007908 <_printf_float+0x308>)
 80076d6:	e7da      	b.n	800768e <_printf_float+0x8e>
 80076d8:	6861      	ldr	r1, [r4, #4]
 80076da:	1c4b      	adds	r3, r1, #1
 80076dc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80076e0:	a80a      	add	r0, sp, #40	; 0x28
 80076e2:	d13e      	bne.n	8007762 <_printf_float+0x162>
 80076e4:	2306      	movs	r3, #6
 80076e6:	6063      	str	r3, [r4, #4]
 80076e8:	2300      	movs	r3, #0
 80076ea:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80076ee:	ab09      	add	r3, sp, #36	; 0x24
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	ec49 8b10 	vmov	d0, r8, r9
 80076f6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80076fa:	6022      	str	r2, [r4, #0]
 80076fc:	f8cd a004 	str.w	sl, [sp, #4]
 8007700:	6861      	ldr	r1, [r4, #4]
 8007702:	4628      	mov	r0, r5
 8007704:	f7ff fee8 	bl	80074d8 <__cvt>
 8007708:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800770c:	2b47      	cmp	r3, #71	; 0x47
 800770e:	4680      	mov	r8, r0
 8007710:	d109      	bne.n	8007726 <_printf_float+0x126>
 8007712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007714:	1cd8      	adds	r0, r3, #3
 8007716:	db02      	blt.n	800771e <_printf_float+0x11e>
 8007718:	6862      	ldr	r2, [r4, #4]
 800771a:	4293      	cmp	r3, r2
 800771c:	dd47      	ble.n	80077ae <_printf_float+0x1ae>
 800771e:	f1aa 0a02 	sub.w	sl, sl, #2
 8007722:	fa5f fa8a 	uxtb.w	sl, sl
 8007726:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800772a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800772c:	d824      	bhi.n	8007778 <_printf_float+0x178>
 800772e:	3901      	subs	r1, #1
 8007730:	4652      	mov	r2, sl
 8007732:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007736:	9109      	str	r1, [sp, #36]	; 0x24
 8007738:	f7ff ff2f 	bl	800759a <__exponent>
 800773c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800773e:	1813      	adds	r3, r2, r0
 8007740:	2a01      	cmp	r2, #1
 8007742:	4681      	mov	r9, r0
 8007744:	6123      	str	r3, [r4, #16]
 8007746:	dc02      	bgt.n	800774e <_printf_float+0x14e>
 8007748:	6822      	ldr	r2, [r4, #0]
 800774a:	07d1      	lsls	r1, r2, #31
 800774c:	d501      	bpl.n	8007752 <_printf_float+0x152>
 800774e:	3301      	adds	r3, #1
 8007750:	6123      	str	r3, [r4, #16]
 8007752:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007756:	2b00      	cmp	r3, #0
 8007758:	d0a5      	beq.n	80076a6 <_printf_float+0xa6>
 800775a:	232d      	movs	r3, #45	; 0x2d
 800775c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007760:	e7a1      	b.n	80076a6 <_printf_float+0xa6>
 8007762:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007766:	f000 8177 	beq.w	8007a58 <_printf_float+0x458>
 800776a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800776e:	d1bb      	bne.n	80076e8 <_printf_float+0xe8>
 8007770:	2900      	cmp	r1, #0
 8007772:	d1b9      	bne.n	80076e8 <_printf_float+0xe8>
 8007774:	2301      	movs	r3, #1
 8007776:	e7b6      	b.n	80076e6 <_printf_float+0xe6>
 8007778:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800777c:	d119      	bne.n	80077b2 <_printf_float+0x1b2>
 800777e:	2900      	cmp	r1, #0
 8007780:	6863      	ldr	r3, [r4, #4]
 8007782:	dd0c      	ble.n	800779e <_printf_float+0x19e>
 8007784:	6121      	str	r1, [r4, #16]
 8007786:	b913      	cbnz	r3, 800778e <_printf_float+0x18e>
 8007788:	6822      	ldr	r2, [r4, #0]
 800778a:	07d2      	lsls	r2, r2, #31
 800778c:	d502      	bpl.n	8007794 <_printf_float+0x194>
 800778e:	3301      	adds	r3, #1
 8007790:	440b      	add	r3, r1
 8007792:	6123      	str	r3, [r4, #16]
 8007794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007796:	65a3      	str	r3, [r4, #88]	; 0x58
 8007798:	f04f 0900 	mov.w	r9, #0
 800779c:	e7d9      	b.n	8007752 <_printf_float+0x152>
 800779e:	b913      	cbnz	r3, 80077a6 <_printf_float+0x1a6>
 80077a0:	6822      	ldr	r2, [r4, #0]
 80077a2:	07d0      	lsls	r0, r2, #31
 80077a4:	d501      	bpl.n	80077aa <_printf_float+0x1aa>
 80077a6:	3302      	adds	r3, #2
 80077a8:	e7f3      	b.n	8007792 <_printf_float+0x192>
 80077aa:	2301      	movs	r3, #1
 80077ac:	e7f1      	b.n	8007792 <_printf_float+0x192>
 80077ae:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80077b2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80077b6:	4293      	cmp	r3, r2
 80077b8:	db05      	blt.n	80077c6 <_printf_float+0x1c6>
 80077ba:	6822      	ldr	r2, [r4, #0]
 80077bc:	6123      	str	r3, [r4, #16]
 80077be:	07d1      	lsls	r1, r2, #31
 80077c0:	d5e8      	bpl.n	8007794 <_printf_float+0x194>
 80077c2:	3301      	adds	r3, #1
 80077c4:	e7e5      	b.n	8007792 <_printf_float+0x192>
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	bfd4      	ite	le
 80077ca:	f1c3 0302 	rsble	r3, r3, #2
 80077ce:	2301      	movgt	r3, #1
 80077d0:	4413      	add	r3, r2
 80077d2:	e7de      	b.n	8007792 <_printf_float+0x192>
 80077d4:	6823      	ldr	r3, [r4, #0]
 80077d6:	055a      	lsls	r2, r3, #21
 80077d8:	d407      	bmi.n	80077ea <_printf_float+0x1ea>
 80077da:	6923      	ldr	r3, [r4, #16]
 80077dc:	4642      	mov	r2, r8
 80077de:	4631      	mov	r1, r6
 80077e0:	4628      	mov	r0, r5
 80077e2:	47b8      	blx	r7
 80077e4:	3001      	adds	r0, #1
 80077e6:	d12b      	bne.n	8007840 <_printf_float+0x240>
 80077e8:	e767      	b.n	80076ba <_printf_float+0xba>
 80077ea:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80077ee:	f240 80dc 	bls.w	80079aa <_printf_float+0x3aa>
 80077f2:	2200      	movs	r2, #0
 80077f4:	2300      	movs	r3, #0
 80077f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077fa:	f7f9 f975 	bl	8000ae8 <__aeabi_dcmpeq>
 80077fe:	2800      	cmp	r0, #0
 8007800:	d033      	beq.n	800786a <_printf_float+0x26a>
 8007802:	2301      	movs	r3, #1
 8007804:	4a41      	ldr	r2, [pc, #260]	; (800790c <_printf_float+0x30c>)
 8007806:	4631      	mov	r1, r6
 8007808:	4628      	mov	r0, r5
 800780a:	47b8      	blx	r7
 800780c:	3001      	adds	r0, #1
 800780e:	f43f af54 	beq.w	80076ba <_printf_float+0xba>
 8007812:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007816:	429a      	cmp	r2, r3
 8007818:	db02      	blt.n	8007820 <_printf_float+0x220>
 800781a:	6823      	ldr	r3, [r4, #0]
 800781c:	07d8      	lsls	r0, r3, #31
 800781e:	d50f      	bpl.n	8007840 <_printf_float+0x240>
 8007820:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007824:	4631      	mov	r1, r6
 8007826:	4628      	mov	r0, r5
 8007828:	47b8      	blx	r7
 800782a:	3001      	adds	r0, #1
 800782c:	f43f af45 	beq.w	80076ba <_printf_float+0xba>
 8007830:	f04f 0800 	mov.w	r8, #0
 8007834:	f104 091a 	add.w	r9, r4, #26
 8007838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800783a:	3b01      	subs	r3, #1
 800783c:	4543      	cmp	r3, r8
 800783e:	dc09      	bgt.n	8007854 <_printf_float+0x254>
 8007840:	6823      	ldr	r3, [r4, #0]
 8007842:	079b      	lsls	r3, r3, #30
 8007844:	f100 8103 	bmi.w	8007a4e <_printf_float+0x44e>
 8007848:	68e0      	ldr	r0, [r4, #12]
 800784a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800784c:	4298      	cmp	r0, r3
 800784e:	bfb8      	it	lt
 8007850:	4618      	movlt	r0, r3
 8007852:	e734      	b.n	80076be <_printf_float+0xbe>
 8007854:	2301      	movs	r3, #1
 8007856:	464a      	mov	r2, r9
 8007858:	4631      	mov	r1, r6
 800785a:	4628      	mov	r0, r5
 800785c:	47b8      	blx	r7
 800785e:	3001      	adds	r0, #1
 8007860:	f43f af2b 	beq.w	80076ba <_printf_float+0xba>
 8007864:	f108 0801 	add.w	r8, r8, #1
 8007868:	e7e6      	b.n	8007838 <_printf_float+0x238>
 800786a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800786c:	2b00      	cmp	r3, #0
 800786e:	dc2b      	bgt.n	80078c8 <_printf_float+0x2c8>
 8007870:	2301      	movs	r3, #1
 8007872:	4a26      	ldr	r2, [pc, #152]	; (800790c <_printf_float+0x30c>)
 8007874:	4631      	mov	r1, r6
 8007876:	4628      	mov	r0, r5
 8007878:	47b8      	blx	r7
 800787a:	3001      	adds	r0, #1
 800787c:	f43f af1d 	beq.w	80076ba <_printf_float+0xba>
 8007880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007882:	b923      	cbnz	r3, 800788e <_printf_float+0x28e>
 8007884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007886:	b913      	cbnz	r3, 800788e <_printf_float+0x28e>
 8007888:	6823      	ldr	r3, [r4, #0]
 800788a:	07d9      	lsls	r1, r3, #31
 800788c:	d5d8      	bpl.n	8007840 <_printf_float+0x240>
 800788e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007892:	4631      	mov	r1, r6
 8007894:	4628      	mov	r0, r5
 8007896:	47b8      	blx	r7
 8007898:	3001      	adds	r0, #1
 800789a:	f43f af0e 	beq.w	80076ba <_printf_float+0xba>
 800789e:	f04f 0900 	mov.w	r9, #0
 80078a2:	f104 0a1a 	add.w	sl, r4, #26
 80078a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078a8:	425b      	negs	r3, r3
 80078aa:	454b      	cmp	r3, r9
 80078ac:	dc01      	bgt.n	80078b2 <_printf_float+0x2b2>
 80078ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078b0:	e794      	b.n	80077dc <_printf_float+0x1dc>
 80078b2:	2301      	movs	r3, #1
 80078b4:	4652      	mov	r2, sl
 80078b6:	4631      	mov	r1, r6
 80078b8:	4628      	mov	r0, r5
 80078ba:	47b8      	blx	r7
 80078bc:	3001      	adds	r0, #1
 80078be:	f43f aefc 	beq.w	80076ba <_printf_float+0xba>
 80078c2:	f109 0901 	add.w	r9, r9, #1
 80078c6:	e7ee      	b.n	80078a6 <_printf_float+0x2a6>
 80078c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078cc:	429a      	cmp	r2, r3
 80078ce:	bfa8      	it	ge
 80078d0:	461a      	movge	r2, r3
 80078d2:	2a00      	cmp	r2, #0
 80078d4:	4691      	mov	r9, r2
 80078d6:	dd07      	ble.n	80078e8 <_printf_float+0x2e8>
 80078d8:	4613      	mov	r3, r2
 80078da:	4631      	mov	r1, r6
 80078dc:	4642      	mov	r2, r8
 80078de:	4628      	mov	r0, r5
 80078e0:	47b8      	blx	r7
 80078e2:	3001      	adds	r0, #1
 80078e4:	f43f aee9 	beq.w	80076ba <_printf_float+0xba>
 80078e8:	f104 031a 	add.w	r3, r4, #26
 80078ec:	f04f 0b00 	mov.w	fp, #0
 80078f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078f4:	9306      	str	r3, [sp, #24]
 80078f6:	e015      	b.n	8007924 <_printf_float+0x324>
 80078f8:	7fefffff 	.word	0x7fefffff
 80078fc:	0800c048 	.word	0x0800c048
 8007900:	0800c044 	.word	0x0800c044
 8007904:	0800c050 	.word	0x0800c050
 8007908:	0800c04c 	.word	0x0800c04c
 800790c:	0800c054 	.word	0x0800c054
 8007910:	2301      	movs	r3, #1
 8007912:	9a06      	ldr	r2, [sp, #24]
 8007914:	4631      	mov	r1, r6
 8007916:	4628      	mov	r0, r5
 8007918:	47b8      	blx	r7
 800791a:	3001      	adds	r0, #1
 800791c:	f43f aecd 	beq.w	80076ba <_printf_float+0xba>
 8007920:	f10b 0b01 	add.w	fp, fp, #1
 8007924:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007928:	ebaa 0309 	sub.w	r3, sl, r9
 800792c:	455b      	cmp	r3, fp
 800792e:	dcef      	bgt.n	8007910 <_printf_float+0x310>
 8007930:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007934:	429a      	cmp	r2, r3
 8007936:	44d0      	add	r8, sl
 8007938:	db15      	blt.n	8007966 <_printf_float+0x366>
 800793a:	6823      	ldr	r3, [r4, #0]
 800793c:	07da      	lsls	r2, r3, #31
 800793e:	d412      	bmi.n	8007966 <_printf_float+0x366>
 8007940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007942:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007944:	eba3 020a 	sub.w	r2, r3, sl
 8007948:	eba3 0a01 	sub.w	sl, r3, r1
 800794c:	4592      	cmp	sl, r2
 800794e:	bfa8      	it	ge
 8007950:	4692      	movge	sl, r2
 8007952:	f1ba 0f00 	cmp.w	sl, #0
 8007956:	dc0e      	bgt.n	8007976 <_printf_float+0x376>
 8007958:	f04f 0800 	mov.w	r8, #0
 800795c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007960:	f104 091a 	add.w	r9, r4, #26
 8007964:	e019      	b.n	800799a <_printf_float+0x39a>
 8007966:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800796a:	4631      	mov	r1, r6
 800796c:	4628      	mov	r0, r5
 800796e:	47b8      	blx	r7
 8007970:	3001      	adds	r0, #1
 8007972:	d1e5      	bne.n	8007940 <_printf_float+0x340>
 8007974:	e6a1      	b.n	80076ba <_printf_float+0xba>
 8007976:	4653      	mov	r3, sl
 8007978:	4642      	mov	r2, r8
 800797a:	4631      	mov	r1, r6
 800797c:	4628      	mov	r0, r5
 800797e:	47b8      	blx	r7
 8007980:	3001      	adds	r0, #1
 8007982:	d1e9      	bne.n	8007958 <_printf_float+0x358>
 8007984:	e699      	b.n	80076ba <_printf_float+0xba>
 8007986:	2301      	movs	r3, #1
 8007988:	464a      	mov	r2, r9
 800798a:	4631      	mov	r1, r6
 800798c:	4628      	mov	r0, r5
 800798e:	47b8      	blx	r7
 8007990:	3001      	adds	r0, #1
 8007992:	f43f ae92 	beq.w	80076ba <_printf_float+0xba>
 8007996:	f108 0801 	add.w	r8, r8, #1
 800799a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800799e:	1a9b      	subs	r3, r3, r2
 80079a0:	eba3 030a 	sub.w	r3, r3, sl
 80079a4:	4543      	cmp	r3, r8
 80079a6:	dcee      	bgt.n	8007986 <_printf_float+0x386>
 80079a8:	e74a      	b.n	8007840 <_printf_float+0x240>
 80079aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079ac:	2a01      	cmp	r2, #1
 80079ae:	dc01      	bgt.n	80079b4 <_printf_float+0x3b4>
 80079b0:	07db      	lsls	r3, r3, #31
 80079b2:	d53a      	bpl.n	8007a2a <_printf_float+0x42a>
 80079b4:	2301      	movs	r3, #1
 80079b6:	4642      	mov	r2, r8
 80079b8:	4631      	mov	r1, r6
 80079ba:	4628      	mov	r0, r5
 80079bc:	47b8      	blx	r7
 80079be:	3001      	adds	r0, #1
 80079c0:	f43f ae7b 	beq.w	80076ba <_printf_float+0xba>
 80079c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079c8:	4631      	mov	r1, r6
 80079ca:	4628      	mov	r0, r5
 80079cc:	47b8      	blx	r7
 80079ce:	3001      	adds	r0, #1
 80079d0:	f108 0801 	add.w	r8, r8, #1
 80079d4:	f43f ae71 	beq.w	80076ba <_printf_float+0xba>
 80079d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079da:	2200      	movs	r2, #0
 80079dc:	f103 3aff 	add.w	sl, r3, #4294967295
 80079e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079e4:	2300      	movs	r3, #0
 80079e6:	f7f9 f87f 	bl	8000ae8 <__aeabi_dcmpeq>
 80079ea:	b9c8      	cbnz	r0, 8007a20 <_printf_float+0x420>
 80079ec:	4653      	mov	r3, sl
 80079ee:	4642      	mov	r2, r8
 80079f0:	4631      	mov	r1, r6
 80079f2:	4628      	mov	r0, r5
 80079f4:	47b8      	blx	r7
 80079f6:	3001      	adds	r0, #1
 80079f8:	d10e      	bne.n	8007a18 <_printf_float+0x418>
 80079fa:	e65e      	b.n	80076ba <_printf_float+0xba>
 80079fc:	2301      	movs	r3, #1
 80079fe:	4652      	mov	r2, sl
 8007a00:	4631      	mov	r1, r6
 8007a02:	4628      	mov	r0, r5
 8007a04:	47b8      	blx	r7
 8007a06:	3001      	adds	r0, #1
 8007a08:	f43f ae57 	beq.w	80076ba <_printf_float+0xba>
 8007a0c:	f108 0801 	add.w	r8, r8, #1
 8007a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a12:	3b01      	subs	r3, #1
 8007a14:	4543      	cmp	r3, r8
 8007a16:	dcf1      	bgt.n	80079fc <_printf_float+0x3fc>
 8007a18:	464b      	mov	r3, r9
 8007a1a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007a1e:	e6de      	b.n	80077de <_printf_float+0x1de>
 8007a20:	f04f 0800 	mov.w	r8, #0
 8007a24:	f104 0a1a 	add.w	sl, r4, #26
 8007a28:	e7f2      	b.n	8007a10 <_printf_float+0x410>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e7df      	b.n	80079ee <_printf_float+0x3ee>
 8007a2e:	2301      	movs	r3, #1
 8007a30:	464a      	mov	r2, r9
 8007a32:	4631      	mov	r1, r6
 8007a34:	4628      	mov	r0, r5
 8007a36:	47b8      	blx	r7
 8007a38:	3001      	adds	r0, #1
 8007a3a:	f43f ae3e 	beq.w	80076ba <_printf_float+0xba>
 8007a3e:	f108 0801 	add.w	r8, r8, #1
 8007a42:	68e3      	ldr	r3, [r4, #12]
 8007a44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a46:	1a9b      	subs	r3, r3, r2
 8007a48:	4543      	cmp	r3, r8
 8007a4a:	dcf0      	bgt.n	8007a2e <_printf_float+0x42e>
 8007a4c:	e6fc      	b.n	8007848 <_printf_float+0x248>
 8007a4e:	f04f 0800 	mov.w	r8, #0
 8007a52:	f104 0919 	add.w	r9, r4, #25
 8007a56:	e7f4      	b.n	8007a42 <_printf_float+0x442>
 8007a58:	2900      	cmp	r1, #0
 8007a5a:	f43f ae8b 	beq.w	8007774 <_printf_float+0x174>
 8007a5e:	2300      	movs	r3, #0
 8007a60:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007a64:	ab09      	add	r3, sp, #36	; 0x24
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	ec49 8b10 	vmov	d0, r8, r9
 8007a6c:	6022      	str	r2, [r4, #0]
 8007a6e:	f8cd a004 	str.w	sl, [sp, #4]
 8007a72:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007a76:	4628      	mov	r0, r5
 8007a78:	f7ff fd2e 	bl	80074d8 <__cvt>
 8007a7c:	4680      	mov	r8, r0
 8007a7e:	e648      	b.n	8007712 <_printf_float+0x112>

08007a80 <_printf_common>:
 8007a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a84:	4691      	mov	r9, r2
 8007a86:	461f      	mov	r7, r3
 8007a88:	688a      	ldr	r2, [r1, #8]
 8007a8a:	690b      	ldr	r3, [r1, #16]
 8007a8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a90:	4293      	cmp	r3, r2
 8007a92:	bfb8      	it	lt
 8007a94:	4613      	movlt	r3, r2
 8007a96:	f8c9 3000 	str.w	r3, [r9]
 8007a9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a9e:	4606      	mov	r6, r0
 8007aa0:	460c      	mov	r4, r1
 8007aa2:	b112      	cbz	r2, 8007aaa <_printf_common+0x2a>
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	f8c9 3000 	str.w	r3, [r9]
 8007aaa:	6823      	ldr	r3, [r4, #0]
 8007aac:	0699      	lsls	r1, r3, #26
 8007aae:	bf42      	ittt	mi
 8007ab0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007ab4:	3302      	addmi	r3, #2
 8007ab6:	f8c9 3000 	strmi.w	r3, [r9]
 8007aba:	6825      	ldr	r5, [r4, #0]
 8007abc:	f015 0506 	ands.w	r5, r5, #6
 8007ac0:	d107      	bne.n	8007ad2 <_printf_common+0x52>
 8007ac2:	f104 0a19 	add.w	sl, r4, #25
 8007ac6:	68e3      	ldr	r3, [r4, #12]
 8007ac8:	f8d9 2000 	ldr.w	r2, [r9]
 8007acc:	1a9b      	subs	r3, r3, r2
 8007ace:	42ab      	cmp	r3, r5
 8007ad0:	dc28      	bgt.n	8007b24 <_printf_common+0xa4>
 8007ad2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007ad6:	6822      	ldr	r2, [r4, #0]
 8007ad8:	3300      	adds	r3, #0
 8007ada:	bf18      	it	ne
 8007adc:	2301      	movne	r3, #1
 8007ade:	0692      	lsls	r2, r2, #26
 8007ae0:	d42d      	bmi.n	8007b3e <_printf_common+0xbe>
 8007ae2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ae6:	4639      	mov	r1, r7
 8007ae8:	4630      	mov	r0, r6
 8007aea:	47c0      	blx	r8
 8007aec:	3001      	adds	r0, #1
 8007aee:	d020      	beq.n	8007b32 <_printf_common+0xb2>
 8007af0:	6823      	ldr	r3, [r4, #0]
 8007af2:	68e5      	ldr	r5, [r4, #12]
 8007af4:	f8d9 2000 	ldr.w	r2, [r9]
 8007af8:	f003 0306 	and.w	r3, r3, #6
 8007afc:	2b04      	cmp	r3, #4
 8007afe:	bf08      	it	eq
 8007b00:	1aad      	subeq	r5, r5, r2
 8007b02:	68a3      	ldr	r3, [r4, #8]
 8007b04:	6922      	ldr	r2, [r4, #16]
 8007b06:	bf0c      	ite	eq
 8007b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b0c:	2500      	movne	r5, #0
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	bfc4      	itt	gt
 8007b12:	1a9b      	subgt	r3, r3, r2
 8007b14:	18ed      	addgt	r5, r5, r3
 8007b16:	f04f 0900 	mov.w	r9, #0
 8007b1a:	341a      	adds	r4, #26
 8007b1c:	454d      	cmp	r5, r9
 8007b1e:	d11a      	bne.n	8007b56 <_printf_common+0xd6>
 8007b20:	2000      	movs	r0, #0
 8007b22:	e008      	b.n	8007b36 <_printf_common+0xb6>
 8007b24:	2301      	movs	r3, #1
 8007b26:	4652      	mov	r2, sl
 8007b28:	4639      	mov	r1, r7
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	47c0      	blx	r8
 8007b2e:	3001      	adds	r0, #1
 8007b30:	d103      	bne.n	8007b3a <_printf_common+0xba>
 8007b32:	f04f 30ff 	mov.w	r0, #4294967295
 8007b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b3a:	3501      	adds	r5, #1
 8007b3c:	e7c3      	b.n	8007ac6 <_printf_common+0x46>
 8007b3e:	18e1      	adds	r1, r4, r3
 8007b40:	1c5a      	adds	r2, r3, #1
 8007b42:	2030      	movs	r0, #48	; 0x30
 8007b44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b48:	4422      	add	r2, r4
 8007b4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b52:	3302      	adds	r3, #2
 8007b54:	e7c5      	b.n	8007ae2 <_printf_common+0x62>
 8007b56:	2301      	movs	r3, #1
 8007b58:	4622      	mov	r2, r4
 8007b5a:	4639      	mov	r1, r7
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	47c0      	blx	r8
 8007b60:	3001      	adds	r0, #1
 8007b62:	d0e6      	beq.n	8007b32 <_printf_common+0xb2>
 8007b64:	f109 0901 	add.w	r9, r9, #1
 8007b68:	e7d8      	b.n	8007b1c <_printf_common+0x9c>
	...

08007b6c <_printf_i>:
 8007b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b70:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007b74:	460c      	mov	r4, r1
 8007b76:	7e09      	ldrb	r1, [r1, #24]
 8007b78:	b085      	sub	sp, #20
 8007b7a:	296e      	cmp	r1, #110	; 0x6e
 8007b7c:	4617      	mov	r7, r2
 8007b7e:	4606      	mov	r6, r0
 8007b80:	4698      	mov	r8, r3
 8007b82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b84:	f000 80b3 	beq.w	8007cee <_printf_i+0x182>
 8007b88:	d822      	bhi.n	8007bd0 <_printf_i+0x64>
 8007b8a:	2963      	cmp	r1, #99	; 0x63
 8007b8c:	d036      	beq.n	8007bfc <_printf_i+0x90>
 8007b8e:	d80a      	bhi.n	8007ba6 <_printf_i+0x3a>
 8007b90:	2900      	cmp	r1, #0
 8007b92:	f000 80b9 	beq.w	8007d08 <_printf_i+0x19c>
 8007b96:	2958      	cmp	r1, #88	; 0x58
 8007b98:	f000 8083 	beq.w	8007ca2 <_printf_i+0x136>
 8007b9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ba0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007ba4:	e032      	b.n	8007c0c <_printf_i+0xa0>
 8007ba6:	2964      	cmp	r1, #100	; 0x64
 8007ba8:	d001      	beq.n	8007bae <_printf_i+0x42>
 8007baa:	2969      	cmp	r1, #105	; 0x69
 8007bac:	d1f6      	bne.n	8007b9c <_printf_i+0x30>
 8007bae:	6820      	ldr	r0, [r4, #0]
 8007bb0:	6813      	ldr	r3, [r2, #0]
 8007bb2:	0605      	lsls	r5, r0, #24
 8007bb4:	f103 0104 	add.w	r1, r3, #4
 8007bb8:	d52a      	bpl.n	8007c10 <_printf_i+0xa4>
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6011      	str	r1, [r2, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	da03      	bge.n	8007bca <_printf_i+0x5e>
 8007bc2:	222d      	movs	r2, #45	; 0x2d
 8007bc4:	425b      	negs	r3, r3
 8007bc6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007bca:	486f      	ldr	r0, [pc, #444]	; (8007d88 <_printf_i+0x21c>)
 8007bcc:	220a      	movs	r2, #10
 8007bce:	e039      	b.n	8007c44 <_printf_i+0xd8>
 8007bd0:	2973      	cmp	r1, #115	; 0x73
 8007bd2:	f000 809d 	beq.w	8007d10 <_printf_i+0x1a4>
 8007bd6:	d808      	bhi.n	8007bea <_printf_i+0x7e>
 8007bd8:	296f      	cmp	r1, #111	; 0x6f
 8007bda:	d020      	beq.n	8007c1e <_printf_i+0xb2>
 8007bdc:	2970      	cmp	r1, #112	; 0x70
 8007bde:	d1dd      	bne.n	8007b9c <_printf_i+0x30>
 8007be0:	6823      	ldr	r3, [r4, #0]
 8007be2:	f043 0320 	orr.w	r3, r3, #32
 8007be6:	6023      	str	r3, [r4, #0]
 8007be8:	e003      	b.n	8007bf2 <_printf_i+0x86>
 8007bea:	2975      	cmp	r1, #117	; 0x75
 8007bec:	d017      	beq.n	8007c1e <_printf_i+0xb2>
 8007bee:	2978      	cmp	r1, #120	; 0x78
 8007bf0:	d1d4      	bne.n	8007b9c <_printf_i+0x30>
 8007bf2:	2378      	movs	r3, #120	; 0x78
 8007bf4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007bf8:	4864      	ldr	r0, [pc, #400]	; (8007d8c <_printf_i+0x220>)
 8007bfa:	e055      	b.n	8007ca8 <_printf_i+0x13c>
 8007bfc:	6813      	ldr	r3, [r2, #0]
 8007bfe:	1d19      	adds	r1, r3, #4
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	6011      	str	r1, [r2, #0]
 8007c04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e08c      	b.n	8007d2a <_printf_i+0x1be>
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	6011      	str	r1, [r2, #0]
 8007c14:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c18:	bf18      	it	ne
 8007c1a:	b21b      	sxthne	r3, r3
 8007c1c:	e7cf      	b.n	8007bbe <_printf_i+0x52>
 8007c1e:	6813      	ldr	r3, [r2, #0]
 8007c20:	6825      	ldr	r5, [r4, #0]
 8007c22:	1d18      	adds	r0, r3, #4
 8007c24:	6010      	str	r0, [r2, #0]
 8007c26:	0628      	lsls	r0, r5, #24
 8007c28:	d501      	bpl.n	8007c2e <_printf_i+0xc2>
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	e002      	b.n	8007c34 <_printf_i+0xc8>
 8007c2e:	0668      	lsls	r0, r5, #25
 8007c30:	d5fb      	bpl.n	8007c2a <_printf_i+0xbe>
 8007c32:	881b      	ldrh	r3, [r3, #0]
 8007c34:	4854      	ldr	r0, [pc, #336]	; (8007d88 <_printf_i+0x21c>)
 8007c36:	296f      	cmp	r1, #111	; 0x6f
 8007c38:	bf14      	ite	ne
 8007c3a:	220a      	movne	r2, #10
 8007c3c:	2208      	moveq	r2, #8
 8007c3e:	2100      	movs	r1, #0
 8007c40:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c44:	6865      	ldr	r5, [r4, #4]
 8007c46:	60a5      	str	r5, [r4, #8]
 8007c48:	2d00      	cmp	r5, #0
 8007c4a:	f2c0 8095 	blt.w	8007d78 <_printf_i+0x20c>
 8007c4e:	6821      	ldr	r1, [r4, #0]
 8007c50:	f021 0104 	bic.w	r1, r1, #4
 8007c54:	6021      	str	r1, [r4, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d13d      	bne.n	8007cd6 <_printf_i+0x16a>
 8007c5a:	2d00      	cmp	r5, #0
 8007c5c:	f040 808e 	bne.w	8007d7c <_printf_i+0x210>
 8007c60:	4665      	mov	r5, ip
 8007c62:	2a08      	cmp	r2, #8
 8007c64:	d10b      	bne.n	8007c7e <_printf_i+0x112>
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	07db      	lsls	r3, r3, #31
 8007c6a:	d508      	bpl.n	8007c7e <_printf_i+0x112>
 8007c6c:	6923      	ldr	r3, [r4, #16]
 8007c6e:	6862      	ldr	r2, [r4, #4]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	bfde      	ittt	le
 8007c74:	2330      	movle	r3, #48	; 0x30
 8007c76:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c7a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c7e:	ebac 0305 	sub.w	r3, ip, r5
 8007c82:	6123      	str	r3, [r4, #16]
 8007c84:	f8cd 8000 	str.w	r8, [sp]
 8007c88:	463b      	mov	r3, r7
 8007c8a:	aa03      	add	r2, sp, #12
 8007c8c:	4621      	mov	r1, r4
 8007c8e:	4630      	mov	r0, r6
 8007c90:	f7ff fef6 	bl	8007a80 <_printf_common>
 8007c94:	3001      	adds	r0, #1
 8007c96:	d14d      	bne.n	8007d34 <_printf_i+0x1c8>
 8007c98:	f04f 30ff 	mov.w	r0, #4294967295
 8007c9c:	b005      	add	sp, #20
 8007c9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ca2:	4839      	ldr	r0, [pc, #228]	; (8007d88 <_printf_i+0x21c>)
 8007ca4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007ca8:	6813      	ldr	r3, [r2, #0]
 8007caa:	6821      	ldr	r1, [r4, #0]
 8007cac:	1d1d      	adds	r5, r3, #4
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6015      	str	r5, [r2, #0]
 8007cb2:	060a      	lsls	r2, r1, #24
 8007cb4:	d50b      	bpl.n	8007cce <_printf_i+0x162>
 8007cb6:	07ca      	lsls	r2, r1, #31
 8007cb8:	bf44      	itt	mi
 8007cba:	f041 0120 	orrmi.w	r1, r1, #32
 8007cbe:	6021      	strmi	r1, [r4, #0]
 8007cc0:	b91b      	cbnz	r3, 8007cca <_printf_i+0x15e>
 8007cc2:	6822      	ldr	r2, [r4, #0]
 8007cc4:	f022 0220 	bic.w	r2, r2, #32
 8007cc8:	6022      	str	r2, [r4, #0]
 8007cca:	2210      	movs	r2, #16
 8007ccc:	e7b7      	b.n	8007c3e <_printf_i+0xd2>
 8007cce:	064d      	lsls	r5, r1, #25
 8007cd0:	bf48      	it	mi
 8007cd2:	b29b      	uxthmi	r3, r3
 8007cd4:	e7ef      	b.n	8007cb6 <_printf_i+0x14a>
 8007cd6:	4665      	mov	r5, ip
 8007cd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007cdc:	fb02 3311 	mls	r3, r2, r1, r3
 8007ce0:	5cc3      	ldrb	r3, [r0, r3]
 8007ce2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	2900      	cmp	r1, #0
 8007cea:	d1f5      	bne.n	8007cd8 <_printf_i+0x16c>
 8007cec:	e7b9      	b.n	8007c62 <_printf_i+0xf6>
 8007cee:	6813      	ldr	r3, [r2, #0]
 8007cf0:	6825      	ldr	r5, [r4, #0]
 8007cf2:	6961      	ldr	r1, [r4, #20]
 8007cf4:	1d18      	adds	r0, r3, #4
 8007cf6:	6010      	str	r0, [r2, #0]
 8007cf8:	0628      	lsls	r0, r5, #24
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	d501      	bpl.n	8007d02 <_printf_i+0x196>
 8007cfe:	6019      	str	r1, [r3, #0]
 8007d00:	e002      	b.n	8007d08 <_printf_i+0x19c>
 8007d02:	066a      	lsls	r2, r5, #25
 8007d04:	d5fb      	bpl.n	8007cfe <_printf_i+0x192>
 8007d06:	8019      	strh	r1, [r3, #0]
 8007d08:	2300      	movs	r3, #0
 8007d0a:	6123      	str	r3, [r4, #16]
 8007d0c:	4665      	mov	r5, ip
 8007d0e:	e7b9      	b.n	8007c84 <_printf_i+0x118>
 8007d10:	6813      	ldr	r3, [r2, #0]
 8007d12:	1d19      	adds	r1, r3, #4
 8007d14:	6011      	str	r1, [r2, #0]
 8007d16:	681d      	ldr	r5, [r3, #0]
 8007d18:	6862      	ldr	r2, [r4, #4]
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	f7f8 fa6f 	bl	8000200 <memchr>
 8007d22:	b108      	cbz	r0, 8007d28 <_printf_i+0x1bc>
 8007d24:	1b40      	subs	r0, r0, r5
 8007d26:	6060      	str	r0, [r4, #4]
 8007d28:	6863      	ldr	r3, [r4, #4]
 8007d2a:	6123      	str	r3, [r4, #16]
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d32:	e7a7      	b.n	8007c84 <_printf_i+0x118>
 8007d34:	6923      	ldr	r3, [r4, #16]
 8007d36:	462a      	mov	r2, r5
 8007d38:	4639      	mov	r1, r7
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	47c0      	blx	r8
 8007d3e:	3001      	adds	r0, #1
 8007d40:	d0aa      	beq.n	8007c98 <_printf_i+0x12c>
 8007d42:	6823      	ldr	r3, [r4, #0]
 8007d44:	079b      	lsls	r3, r3, #30
 8007d46:	d413      	bmi.n	8007d70 <_printf_i+0x204>
 8007d48:	68e0      	ldr	r0, [r4, #12]
 8007d4a:	9b03      	ldr	r3, [sp, #12]
 8007d4c:	4298      	cmp	r0, r3
 8007d4e:	bfb8      	it	lt
 8007d50:	4618      	movlt	r0, r3
 8007d52:	e7a3      	b.n	8007c9c <_printf_i+0x130>
 8007d54:	2301      	movs	r3, #1
 8007d56:	464a      	mov	r2, r9
 8007d58:	4639      	mov	r1, r7
 8007d5a:	4630      	mov	r0, r6
 8007d5c:	47c0      	blx	r8
 8007d5e:	3001      	adds	r0, #1
 8007d60:	d09a      	beq.n	8007c98 <_printf_i+0x12c>
 8007d62:	3501      	adds	r5, #1
 8007d64:	68e3      	ldr	r3, [r4, #12]
 8007d66:	9a03      	ldr	r2, [sp, #12]
 8007d68:	1a9b      	subs	r3, r3, r2
 8007d6a:	42ab      	cmp	r3, r5
 8007d6c:	dcf2      	bgt.n	8007d54 <_printf_i+0x1e8>
 8007d6e:	e7eb      	b.n	8007d48 <_printf_i+0x1dc>
 8007d70:	2500      	movs	r5, #0
 8007d72:	f104 0919 	add.w	r9, r4, #25
 8007d76:	e7f5      	b.n	8007d64 <_printf_i+0x1f8>
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d1ac      	bne.n	8007cd6 <_printf_i+0x16a>
 8007d7c:	7803      	ldrb	r3, [r0, #0]
 8007d7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d86:	e76c      	b.n	8007c62 <_printf_i+0xf6>
 8007d88:	0800c056 	.word	0x0800c056
 8007d8c:	0800c067 	.word	0x0800c067

08007d90 <iprintf>:
 8007d90:	b40f      	push	{r0, r1, r2, r3}
 8007d92:	4b0a      	ldr	r3, [pc, #40]	; (8007dbc <iprintf+0x2c>)
 8007d94:	b513      	push	{r0, r1, r4, lr}
 8007d96:	681c      	ldr	r4, [r3, #0]
 8007d98:	b124      	cbz	r4, 8007da4 <iprintf+0x14>
 8007d9a:	69a3      	ldr	r3, [r4, #24]
 8007d9c:	b913      	cbnz	r3, 8007da4 <iprintf+0x14>
 8007d9e:	4620      	mov	r0, r4
 8007da0:	f001 f91e 	bl	8008fe0 <__sinit>
 8007da4:	ab05      	add	r3, sp, #20
 8007da6:	9a04      	ldr	r2, [sp, #16]
 8007da8:	68a1      	ldr	r1, [r4, #8]
 8007daa:	9301      	str	r3, [sp, #4]
 8007dac:	4620      	mov	r0, r4
 8007dae:	f001 fde1 	bl	8009974 <_vfiprintf_r>
 8007db2:	b002      	add	sp, #8
 8007db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007db8:	b004      	add	sp, #16
 8007dba:	4770      	bx	lr
 8007dbc:	20000028 	.word	0x20000028

08007dc0 <_puts_r>:
 8007dc0:	b570      	push	{r4, r5, r6, lr}
 8007dc2:	460e      	mov	r6, r1
 8007dc4:	4605      	mov	r5, r0
 8007dc6:	b118      	cbz	r0, 8007dd0 <_puts_r+0x10>
 8007dc8:	6983      	ldr	r3, [r0, #24]
 8007dca:	b90b      	cbnz	r3, 8007dd0 <_puts_r+0x10>
 8007dcc:	f001 f908 	bl	8008fe0 <__sinit>
 8007dd0:	69ab      	ldr	r3, [r5, #24]
 8007dd2:	68ac      	ldr	r4, [r5, #8]
 8007dd4:	b913      	cbnz	r3, 8007ddc <_puts_r+0x1c>
 8007dd6:	4628      	mov	r0, r5
 8007dd8:	f001 f902 	bl	8008fe0 <__sinit>
 8007ddc:	4b23      	ldr	r3, [pc, #140]	; (8007e6c <_puts_r+0xac>)
 8007dde:	429c      	cmp	r4, r3
 8007de0:	d117      	bne.n	8007e12 <_puts_r+0x52>
 8007de2:	686c      	ldr	r4, [r5, #4]
 8007de4:	89a3      	ldrh	r3, [r4, #12]
 8007de6:	071b      	lsls	r3, r3, #28
 8007de8:	d51d      	bpl.n	8007e26 <_puts_r+0x66>
 8007dea:	6923      	ldr	r3, [r4, #16]
 8007dec:	b1db      	cbz	r3, 8007e26 <_puts_r+0x66>
 8007dee:	3e01      	subs	r6, #1
 8007df0:	68a3      	ldr	r3, [r4, #8]
 8007df2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007df6:	3b01      	subs	r3, #1
 8007df8:	60a3      	str	r3, [r4, #8]
 8007dfa:	b9e9      	cbnz	r1, 8007e38 <_puts_r+0x78>
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	da2e      	bge.n	8007e5e <_puts_r+0x9e>
 8007e00:	4622      	mov	r2, r4
 8007e02:	210a      	movs	r1, #10
 8007e04:	4628      	mov	r0, r5
 8007e06:	f000 f8f5 	bl	8007ff4 <__swbuf_r>
 8007e0a:	3001      	adds	r0, #1
 8007e0c:	d011      	beq.n	8007e32 <_puts_r+0x72>
 8007e0e:	200a      	movs	r0, #10
 8007e10:	e011      	b.n	8007e36 <_puts_r+0x76>
 8007e12:	4b17      	ldr	r3, [pc, #92]	; (8007e70 <_puts_r+0xb0>)
 8007e14:	429c      	cmp	r4, r3
 8007e16:	d101      	bne.n	8007e1c <_puts_r+0x5c>
 8007e18:	68ac      	ldr	r4, [r5, #8]
 8007e1a:	e7e3      	b.n	8007de4 <_puts_r+0x24>
 8007e1c:	4b15      	ldr	r3, [pc, #84]	; (8007e74 <_puts_r+0xb4>)
 8007e1e:	429c      	cmp	r4, r3
 8007e20:	bf08      	it	eq
 8007e22:	68ec      	ldreq	r4, [r5, #12]
 8007e24:	e7de      	b.n	8007de4 <_puts_r+0x24>
 8007e26:	4621      	mov	r1, r4
 8007e28:	4628      	mov	r0, r5
 8007e2a:	f000 f935 	bl	8008098 <__swsetup_r>
 8007e2e:	2800      	cmp	r0, #0
 8007e30:	d0dd      	beq.n	8007dee <_puts_r+0x2e>
 8007e32:	f04f 30ff 	mov.w	r0, #4294967295
 8007e36:	bd70      	pop	{r4, r5, r6, pc}
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	da04      	bge.n	8007e46 <_puts_r+0x86>
 8007e3c:	69a2      	ldr	r2, [r4, #24]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	dc06      	bgt.n	8007e50 <_puts_r+0x90>
 8007e42:	290a      	cmp	r1, #10
 8007e44:	d004      	beq.n	8007e50 <_puts_r+0x90>
 8007e46:	6823      	ldr	r3, [r4, #0]
 8007e48:	1c5a      	adds	r2, r3, #1
 8007e4a:	6022      	str	r2, [r4, #0]
 8007e4c:	7019      	strb	r1, [r3, #0]
 8007e4e:	e7cf      	b.n	8007df0 <_puts_r+0x30>
 8007e50:	4622      	mov	r2, r4
 8007e52:	4628      	mov	r0, r5
 8007e54:	f000 f8ce 	bl	8007ff4 <__swbuf_r>
 8007e58:	3001      	adds	r0, #1
 8007e5a:	d1c9      	bne.n	8007df0 <_puts_r+0x30>
 8007e5c:	e7e9      	b.n	8007e32 <_puts_r+0x72>
 8007e5e:	6823      	ldr	r3, [r4, #0]
 8007e60:	200a      	movs	r0, #10
 8007e62:	1c5a      	adds	r2, r3, #1
 8007e64:	6022      	str	r2, [r4, #0]
 8007e66:	7018      	strb	r0, [r3, #0]
 8007e68:	e7e5      	b.n	8007e36 <_puts_r+0x76>
 8007e6a:	bf00      	nop
 8007e6c:	0800c0a8 	.word	0x0800c0a8
 8007e70:	0800c0c8 	.word	0x0800c0c8
 8007e74:	0800c088 	.word	0x0800c088

08007e78 <puts>:
 8007e78:	4b02      	ldr	r3, [pc, #8]	; (8007e84 <puts+0xc>)
 8007e7a:	4601      	mov	r1, r0
 8007e7c:	6818      	ldr	r0, [r3, #0]
 8007e7e:	f7ff bf9f 	b.w	8007dc0 <_puts_r>
 8007e82:	bf00      	nop
 8007e84:	20000028 	.word	0x20000028

08007e88 <setbuf>:
 8007e88:	2900      	cmp	r1, #0
 8007e8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e8e:	bf0c      	ite	eq
 8007e90:	2202      	moveq	r2, #2
 8007e92:	2200      	movne	r2, #0
 8007e94:	f000 b800 	b.w	8007e98 <setvbuf>

08007e98 <setvbuf>:
 8007e98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e9c:	461d      	mov	r5, r3
 8007e9e:	4b51      	ldr	r3, [pc, #324]	; (8007fe4 <setvbuf+0x14c>)
 8007ea0:	681e      	ldr	r6, [r3, #0]
 8007ea2:	4604      	mov	r4, r0
 8007ea4:	460f      	mov	r7, r1
 8007ea6:	4690      	mov	r8, r2
 8007ea8:	b126      	cbz	r6, 8007eb4 <setvbuf+0x1c>
 8007eaa:	69b3      	ldr	r3, [r6, #24]
 8007eac:	b913      	cbnz	r3, 8007eb4 <setvbuf+0x1c>
 8007eae:	4630      	mov	r0, r6
 8007eb0:	f001 f896 	bl	8008fe0 <__sinit>
 8007eb4:	4b4c      	ldr	r3, [pc, #304]	; (8007fe8 <setvbuf+0x150>)
 8007eb6:	429c      	cmp	r4, r3
 8007eb8:	d152      	bne.n	8007f60 <setvbuf+0xc8>
 8007eba:	6874      	ldr	r4, [r6, #4]
 8007ebc:	f1b8 0f02 	cmp.w	r8, #2
 8007ec0:	d006      	beq.n	8007ed0 <setvbuf+0x38>
 8007ec2:	f1b8 0f01 	cmp.w	r8, #1
 8007ec6:	f200 8089 	bhi.w	8007fdc <setvbuf+0x144>
 8007eca:	2d00      	cmp	r5, #0
 8007ecc:	f2c0 8086 	blt.w	8007fdc <setvbuf+0x144>
 8007ed0:	4621      	mov	r1, r4
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	f001 f81a 	bl	8008f0c <_fflush_r>
 8007ed8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007eda:	b141      	cbz	r1, 8007eee <setvbuf+0x56>
 8007edc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ee0:	4299      	cmp	r1, r3
 8007ee2:	d002      	beq.n	8007eea <setvbuf+0x52>
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	f001 fc73 	bl	80097d0 <_free_r>
 8007eea:	2300      	movs	r3, #0
 8007eec:	6363      	str	r3, [r4, #52]	; 0x34
 8007eee:	2300      	movs	r3, #0
 8007ef0:	61a3      	str	r3, [r4, #24]
 8007ef2:	6063      	str	r3, [r4, #4]
 8007ef4:	89a3      	ldrh	r3, [r4, #12]
 8007ef6:	061b      	lsls	r3, r3, #24
 8007ef8:	d503      	bpl.n	8007f02 <setvbuf+0x6a>
 8007efa:	6921      	ldr	r1, [r4, #16]
 8007efc:	4630      	mov	r0, r6
 8007efe:	f001 fc67 	bl	80097d0 <_free_r>
 8007f02:	89a3      	ldrh	r3, [r4, #12]
 8007f04:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007f08:	f023 0303 	bic.w	r3, r3, #3
 8007f0c:	f1b8 0f02 	cmp.w	r8, #2
 8007f10:	81a3      	strh	r3, [r4, #12]
 8007f12:	d05d      	beq.n	8007fd0 <setvbuf+0x138>
 8007f14:	ab01      	add	r3, sp, #4
 8007f16:	466a      	mov	r2, sp
 8007f18:	4621      	mov	r1, r4
 8007f1a:	4630      	mov	r0, r6
 8007f1c:	f001 f8f8 	bl	8009110 <__swhatbuf_r>
 8007f20:	89a3      	ldrh	r3, [r4, #12]
 8007f22:	4318      	orrs	r0, r3
 8007f24:	81a0      	strh	r0, [r4, #12]
 8007f26:	bb2d      	cbnz	r5, 8007f74 <setvbuf+0xdc>
 8007f28:	9d00      	ldr	r5, [sp, #0]
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	f001 f954 	bl	80091d8 <malloc>
 8007f30:	4607      	mov	r7, r0
 8007f32:	2800      	cmp	r0, #0
 8007f34:	d14e      	bne.n	8007fd4 <setvbuf+0x13c>
 8007f36:	f8dd 9000 	ldr.w	r9, [sp]
 8007f3a:	45a9      	cmp	r9, r5
 8007f3c:	d13c      	bne.n	8007fb8 <setvbuf+0x120>
 8007f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f42:	89a3      	ldrh	r3, [r4, #12]
 8007f44:	f043 0302 	orr.w	r3, r3, #2
 8007f48:	81a3      	strh	r3, [r4, #12]
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	60a3      	str	r3, [r4, #8]
 8007f4e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f52:	6023      	str	r3, [r4, #0]
 8007f54:	6123      	str	r3, [r4, #16]
 8007f56:	2301      	movs	r3, #1
 8007f58:	6163      	str	r3, [r4, #20]
 8007f5a:	b003      	add	sp, #12
 8007f5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f60:	4b22      	ldr	r3, [pc, #136]	; (8007fec <setvbuf+0x154>)
 8007f62:	429c      	cmp	r4, r3
 8007f64:	d101      	bne.n	8007f6a <setvbuf+0xd2>
 8007f66:	68b4      	ldr	r4, [r6, #8]
 8007f68:	e7a8      	b.n	8007ebc <setvbuf+0x24>
 8007f6a:	4b21      	ldr	r3, [pc, #132]	; (8007ff0 <setvbuf+0x158>)
 8007f6c:	429c      	cmp	r4, r3
 8007f6e:	bf08      	it	eq
 8007f70:	68f4      	ldreq	r4, [r6, #12]
 8007f72:	e7a3      	b.n	8007ebc <setvbuf+0x24>
 8007f74:	2f00      	cmp	r7, #0
 8007f76:	d0d8      	beq.n	8007f2a <setvbuf+0x92>
 8007f78:	69b3      	ldr	r3, [r6, #24]
 8007f7a:	b913      	cbnz	r3, 8007f82 <setvbuf+0xea>
 8007f7c:	4630      	mov	r0, r6
 8007f7e:	f001 f82f 	bl	8008fe0 <__sinit>
 8007f82:	f1b8 0f01 	cmp.w	r8, #1
 8007f86:	bf08      	it	eq
 8007f88:	89a3      	ldrheq	r3, [r4, #12]
 8007f8a:	6027      	str	r7, [r4, #0]
 8007f8c:	bf04      	itt	eq
 8007f8e:	f043 0301 	orreq.w	r3, r3, #1
 8007f92:	81a3      	strheq	r3, [r4, #12]
 8007f94:	89a3      	ldrh	r3, [r4, #12]
 8007f96:	f013 0008 	ands.w	r0, r3, #8
 8007f9a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8007f9e:	d01b      	beq.n	8007fd8 <setvbuf+0x140>
 8007fa0:	f013 0001 	ands.w	r0, r3, #1
 8007fa4:	bf18      	it	ne
 8007fa6:	426d      	negne	r5, r5
 8007fa8:	f04f 0300 	mov.w	r3, #0
 8007fac:	bf1d      	ittte	ne
 8007fae:	60a3      	strne	r3, [r4, #8]
 8007fb0:	61a5      	strne	r5, [r4, #24]
 8007fb2:	4618      	movne	r0, r3
 8007fb4:	60a5      	streq	r5, [r4, #8]
 8007fb6:	e7d0      	b.n	8007f5a <setvbuf+0xc2>
 8007fb8:	4648      	mov	r0, r9
 8007fba:	f001 f90d 	bl	80091d8 <malloc>
 8007fbe:	4607      	mov	r7, r0
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	d0bc      	beq.n	8007f3e <setvbuf+0xa6>
 8007fc4:	89a3      	ldrh	r3, [r4, #12]
 8007fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fca:	81a3      	strh	r3, [r4, #12]
 8007fcc:	464d      	mov	r5, r9
 8007fce:	e7d3      	b.n	8007f78 <setvbuf+0xe0>
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	e7b6      	b.n	8007f42 <setvbuf+0xaa>
 8007fd4:	46a9      	mov	r9, r5
 8007fd6:	e7f5      	b.n	8007fc4 <setvbuf+0x12c>
 8007fd8:	60a0      	str	r0, [r4, #8]
 8007fda:	e7be      	b.n	8007f5a <setvbuf+0xc2>
 8007fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe0:	e7bb      	b.n	8007f5a <setvbuf+0xc2>
 8007fe2:	bf00      	nop
 8007fe4:	20000028 	.word	0x20000028
 8007fe8:	0800c0a8 	.word	0x0800c0a8
 8007fec:	0800c0c8 	.word	0x0800c0c8
 8007ff0:	0800c088 	.word	0x0800c088

08007ff4 <__swbuf_r>:
 8007ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff6:	460e      	mov	r6, r1
 8007ff8:	4614      	mov	r4, r2
 8007ffa:	4605      	mov	r5, r0
 8007ffc:	b118      	cbz	r0, 8008006 <__swbuf_r+0x12>
 8007ffe:	6983      	ldr	r3, [r0, #24]
 8008000:	b90b      	cbnz	r3, 8008006 <__swbuf_r+0x12>
 8008002:	f000 ffed 	bl	8008fe0 <__sinit>
 8008006:	4b21      	ldr	r3, [pc, #132]	; (800808c <__swbuf_r+0x98>)
 8008008:	429c      	cmp	r4, r3
 800800a:	d12a      	bne.n	8008062 <__swbuf_r+0x6e>
 800800c:	686c      	ldr	r4, [r5, #4]
 800800e:	69a3      	ldr	r3, [r4, #24]
 8008010:	60a3      	str	r3, [r4, #8]
 8008012:	89a3      	ldrh	r3, [r4, #12]
 8008014:	071a      	lsls	r2, r3, #28
 8008016:	d52e      	bpl.n	8008076 <__swbuf_r+0x82>
 8008018:	6923      	ldr	r3, [r4, #16]
 800801a:	b363      	cbz	r3, 8008076 <__swbuf_r+0x82>
 800801c:	6923      	ldr	r3, [r4, #16]
 800801e:	6820      	ldr	r0, [r4, #0]
 8008020:	1ac0      	subs	r0, r0, r3
 8008022:	6963      	ldr	r3, [r4, #20]
 8008024:	b2f6      	uxtb	r6, r6
 8008026:	4283      	cmp	r3, r0
 8008028:	4637      	mov	r7, r6
 800802a:	dc04      	bgt.n	8008036 <__swbuf_r+0x42>
 800802c:	4621      	mov	r1, r4
 800802e:	4628      	mov	r0, r5
 8008030:	f000 ff6c 	bl	8008f0c <_fflush_r>
 8008034:	bb28      	cbnz	r0, 8008082 <__swbuf_r+0x8e>
 8008036:	68a3      	ldr	r3, [r4, #8]
 8008038:	3b01      	subs	r3, #1
 800803a:	60a3      	str	r3, [r4, #8]
 800803c:	6823      	ldr	r3, [r4, #0]
 800803e:	1c5a      	adds	r2, r3, #1
 8008040:	6022      	str	r2, [r4, #0]
 8008042:	701e      	strb	r6, [r3, #0]
 8008044:	6963      	ldr	r3, [r4, #20]
 8008046:	3001      	adds	r0, #1
 8008048:	4283      	cmp	r3, r0
 800804a:	d004      	beq.n	8008056 <__swbuf_r+0x62>
 800804c:	89a3      	ldrh	r3, [r4, #12]
 800804e:	07db      	lsls	r3, r3, #31
 8008050:	d519      	bpl.n	8008086 <__swbuf_r+0x92>
 8008052:	2e0a      	cmp	r6, #10
 8008054:	d117      	bne.n	8008086 <__swbuf_r+0x92>
 8008056:	4621      	mov	r1, r4
 8008058:	4628      	mov	r0, r5
 800805a:	f000 ff57 	bl	8008f0c <_fflush_r>
 800805e:	b190      	cbz	r0, 8008086 <__swbuf_r+0x92>
 8008060:	e00f      	b.n	8008082 <__swbuf_r+0x8e>
 8008062:	4b0b      	ldr	r3, [pc, #44]	; (8008090 <__swbuf_r+0x9c>)
 8008064:	429c      	cmp	r4, r3
 8008066:	d101      	bne.n	800806c <__swbuf_r+0x78>
 8008068:	68ac      	ldr	r4, [r5, #8]
 800806a:	e7d0      	b.n	800800e <__swbuf_r+0x1a>
 800806c:	4b09      	ldr	r3, [pc, #36]	; (8008094 <__swbuf_r+0xa0>)
 800806e:	429c      	cmp	r4, r3
 8008070:	bf08      	it	eq
 8008072:	68ec      	ldreq	r4, [r5, #12]
 8008074:	e7cb      	b.n	800800e <__swbuf_r+0x1a>
 8008076:	4621      	mov	r1, r4
 8008078:	4628      	mov	r0, r5
 800807a:	f000 f80d 	bl	8008098 <__swsetup_r>
 800807e:	2800      	cmp	r0, #0
 8008080:	d0cc      	beq.n	800801c <__swbuf_r+0x28>
 8008082:	f04f 37ff 	mov.w	r7, #4294967295
 8008086:	4638      	mov	r0, r7
 8008088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800808a:	bf00      	nop
 800808c:	0800c0a8 	.word	0x0800c0a8
 8008090:	0800c0c8 	.word	0x0800c0c8
 8008094:	0800c088 	.word	0x0800c088

08008098 <__swsetup_r>:
 8008098:	4b32      	ldr	r3, [pc, #200]	; (8008164 <__swsetup_r+0xcc>)
 800809a:	b570      	push	{r4, r5, r6, lr}
 800809c:	681d      	ldr	r5, [r3, #0]
 800809e:	4606      	mov	r6, r0
 80080a0:	460c      	mov	r4, r1
 80080a2:	b125      	cbz	r5, 80080ae <__swsetup_r+0x16>
 80080a4:	69ab      	ldr	r3, [r5, #24]
 80080a6:	b913      	cbnz	r3, 80080ae <__swsetup_r+0x16>
 80080a8:	4628      	mov	r0, r5
 80080aa:	f000 ff99 	bl	8008fe0 <__sinit>
 80080ae:	4b2e      	ldr	r3, [pc, #184]	; (8008168 <__swsetup_r+0xd0>)
 80080b0:	429c      	cmp	r4, r3
 80080b2:	d10f      	bne.n	80080d4 <__swsetup_r+0x3c>
 80080b4:	686c      	ldr	r4, [r5, #4]
 80080b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	0715      	lsls	r5, r2, #28
 80080be:	d42c      	bmi.n	800811a <__swsetup_r+0x82>
 80080c0:	06d0      	lsls	r0, r2, #27
 80080c2:	d411      	bmi.n	80080e8 <__swsetup_r+0x50>
 80080c4:	2209      	movs	r2, #9
 80080c6:	6032      	str	r2, [r6, #0]
 80080c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080cc:	81a3      	strh	r3, [r4, #12]
 80080ce:	f04f 30ff 	mov.w	r0, #4294967295
 80080d2:	e03e      	b.n	8008152 <__swsetup_r+0xba>
 80080d4:	4b25      	ldr	r3, [pc, #148]	; (800816c <__swsetup_r+0xd4>)
 80080d6:	429c      	cmp	r4, r3
 80080d8:	d101      	bne.n	80080de <__swsetup_r+0x46>
 80080da:	68ac      	ldr	r4, [r5, #8]
 80080dc:	e7eb      	b.n	80080b6 <__swsetup_r+0x1e>
 80080de:	4b24      	ldr	r3, [pc, #144]	; (8008170 <__swsetup_r+0xd8>)
 80080e0:	429c      	cmp	r4, r3
 80080e2:	bf08      	it	eq
 80080e4:	68ec      	ldreq	r4, [r5, #12]
 80080e6:	e7e6      	b.n	80080b6 <__swsetup_r+0x1e>
 80080e8:	0751      	lsls	r1, r2, #29
 80080ea:	d512      	bpl.n	8008112 <__swsetup_r+0x7a>
 80080ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080ee:	b141      	cbz	r1, 8008102 <__swsetup_r+0x6a>
 80080f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080f4:	4299      	cmp	r1, r3
 80080f6:	d002      	beq.n	80080fe <__swsetup_r+0x66>
 80080f8:	4630      	mov	r0, r6
 80080fa:	f001 fb69 	bl	80097d0 <_free_r>
 80080fe:	2300      	movs	r3, #0
 8008100:	6363      	str	r3, [r4, #52]	; 0x34
 8008102:	89a3      	ldrh	r3, [r4, #12]
 8008104:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008108:	81a3      	strh	r3, [r4, #12]
 800810a:	2300      	movs	r3, #0
 800810c:	6063      	str	r3, [r4, #4]
 800810e:	6923      	ldr	r3, [r4, #16]
 8008110:	6023      	str	r3, [r4, #0]
 8008112:	89a3      	ldrh	r3, [r4, #12]
 8008114:	f043 0308 	orr.w	r3, r3, #8
 8008118:	81a3      	strh	r3, [r4, #12]
 800811a:	6923      	ldr	r3, [r4, #16]
 800811c:	b94b      	cbnz	r3, 8008132 <__swsetup_r+0x9a>
 800811e:	89a3      	ldrh	r3, [r4, #12]
 8008120:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008128:	d003      	beq.n	8008132 <__swsetup_r+0x9a>
 800812a:	4621      	mov	r1, r4
 800812c:	4630      	mov	r0, r6
 800812e:	f001 f813 	bl	8009158 <__smakebuf_r>
 8008132:	89a2      	ldrh	r2, [r4, #12]
 8008134:	f012 0301 	ands.w	r3, r2, #1
 8008138:	d00c      	beq.n	8008154 <__swsetup_r+0xbc>
 800813a:	2300      	movs	r3, #0
 800813c:	60a3      	str	r3, [r4, #8]
 800813e:	6963      	ldr	r3, [r4, #20]
 8008140:	425b      	negs	r3, r3
 8008142:	61a3      	str	r3, [r4, #24]
 8008144:	6923      	ldr	r3, [r4, #16]
 8008146:	b953      	cbnz	r3, 800815e <__swsetup_r+0xc6>
 8008148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800814c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008150:	d1ba      	bne.n	80080c8 <__swsetup_r+0x30>
 8008152:	bd70      	pop	{r4, r5, r6, pc}
 8008154:	0792      	lsls	r2, r2, #30
 8008156:	bf58      	it	pl
 8008158:	6963      	ldrpl	r3, [r4, #20]
 800815a:	60a3      	str	r3, [r4, #8]
 800815c:	e7f2      	b.n	8008144 <__swsetup_r+0xac>
 800815e:	2000      	movs	r0, #0
 8008160:	e7f7      	b.n	8008152 <__swsetup_r+0xba>
 8008162:	bf00      	nop
 8008164:	20000028 	.word	0x20000028
 8008168:	0800c0a8 	.word	0x0800c0a8
 800816c:	0800c0c8 	.word	0x0800c0c8
 8008170:	0800c088 	.word	0x0800c088

08008174 <quorem>:
 8008174:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008178:	6903      	ldr	r3, [r0, #16]
 800817a:	690c      	ldr	r4, [r1, #16]
 800817c:	42a3      	cmp	r3, r4
 800817e:	4680      	mov	r8, r0
 8008180:	f2c0 8082 	blt.w	8008288 <quorem+0x114>
 8008184:	3c01      	subs	r4, #1
 8008186:	f101 0714 	add.w	r7, r1, #20
 800818a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800818e:	f100 0614 	add.w	r6, r0, #20
 8008192:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008196:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800819a:	eb06 030c 	add.w	r3, r6, ip
 800819e:	3501      	adds	r5, #1
 80081a0:	eb07 090c 	add.w	r9, r7, ip
 80081a4:	9301      	str	r3, [sp, #4]
 80081a6:	fbb0 f5f5 	udiv	r5, r0, r5
 80081aa:	b395      	cbz	r5, 8008212 <quorem+0x9e>
 80081ac:	f04f 0a00 	mov.w	sl, #0
 80081b0:	4638      	mov	r0, r7
 80081b2:	46b6      	mov	lr, r6
 80081b4:	46d3      	mov	fp, sl
 80081b6:	f850 2b04 	ldr.w	r2, [r0], #4
 80081ba:	b293      	uxth	r3, r2
 80081bc:	fb05 a303 	mla	r3, r5, r3, sl
 80081c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	ebab 0303 	sub.w	r3, fp, r3
 80081ca:	0c12      	lsrs	r2, r2, #16
 80081cc:	f8de b000 	ldr.w	fp, [lr]
 80081d0:	fb05 a202 	mla	r2, r5, r2, sl
 80081d4:	fa13 f38b 	uxtah	r3, r3, fp
 80081d8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80081dc:	fa1f fb82 	uxth.w	fp, r2
 80081e0:	f8de 2000 	ldr.w	r2, [lr]
 80081e4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80081e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081f2:	4581      	cmp	r9, r0
 80081f4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80081f8:	f84e 3b04 	str.w	r3, [lr], #4
 80081fc:	d2db      	bcs.n	80081b6 <quorem+0x42>
 80081fe:	f856 300c 	ldr.w	r3, [r6, ip]
 8008202:	b933      	cbnz	r3, 8008212 <quorem+0x9e>
 8008204:	9b01      	ldr	r3, [sp, #4]
 8008206:	3b04      	subs	r3, #4
 8008208:	429e      	cmp	r6, r3
 800820a:	461a      	mov	r2, r3
 800820c:	d330      	bcc.n	8008270 <quorem+0xfc>
 800820e:	f8c8 4010 	str.w	r4, [r8, #16]
 8008212:	4640      	mov	r0, r8
 8008214:	f001 fa08 	bl	8009628 <__mcmp>
 8008218:	2800      	cmp	r0, #0
 800821a:	db25      	blt.n	8008268 <quorem+0xf4>
 800821c:	3501      	adds	r5, #1
 800821e:	4630      	mov	r0, r6
 8008220:	f04f 0c00 	mov.w	ip, #0
 8008224:	f857 2b04 	ldr.w	r2, [r7], #4
 8008228:	f8d0 e000 	ldr.w	lr, [r0]
 800822c:	b293      	uxth	r3, r2
 800822e:	ebac 0303 	sub.w	r3, ip, r3
 8008232:	0c12      	lsrs	r2, r2, #16
 8008234:	fa13 f38e 	uxtah	r3, r3, lr
 8008238:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800823c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008240:	b29b      	uxth	r3, r3
 8008242:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008246:	45b9      	cmp	r9, r7
 8008248:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800824c:	f840 3b04 	str.w	r3, [r0], #4
 8008250:	d2e8      	bcs.n	8008224 <quorem+0xb0>
 8008252:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008256:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800825a:	b92a      	cbnz	r2, 8008268 <quorem+0xf4>
 800825c:	3b04      	subs	r3, #4
 800825e:	429e      	cmp	r6, r3
 8008260:	461a      	mov	r2, r3
 8008262:	d30b      	bcc.n	800827c <quorem+0x108>
 8008264:	f8c8 4010 	str.w	r4, [r8, #16]
 8008268:	4628      	mov	r0, r5
 800826a:	b003      	add	sp, #12
 800826c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008270:	6812      	ldr	r2, [r2, #0]
 8008272:	3b04      	subs	r3, #4
 8008274:	2a00      	cmp	r2, #0
 8008276:	d1ca      	bne.n	800820e <quorem+0x9a>
 8008278:	3c01      	subs	r4, #1
 800827a:	e7c5      	b.n	8008208 <quorem+0x94>
 800827c:	6812      	ldr	r2, [r2, #0]
 800827e:	3b04      	subs	r3, #4
 8008280:	2a00      	cmp	r2, #0
 8008282:	d1ef      	bne.n	8008264 <quorem+0xf0>
 8008284:	3c01      	subs	r4, #1
 8008286:	e7ea      	b.n	800825e <quorem+0xea>
 8008288:	2000      	movs	r0, #0
 800828a:	e7ee      	b.n	800826a <quorem+0xf6>
 800828c:	0000      	movs	r0, r0
	...

08008290 <_dtoa_r>:
 8008290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008294:	ec57 6b10 	vmov	r6, r7, d0
 8008298:	b097      	sub	sp, #92	; 0x5c
 800829a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800829c:	9106      	str	r1, [sp, #24]
 800829e:	4604      	mov	r4, r0
 80082a0:	920b      	str	r2, [sp, #44]	; 0x2c
 80082a2:	9312      	str	r3, [sp, #72]	; 0x48
 80082a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80082a8:	e9cd 6700 	strd	r6, r7, [sp]
 80082ac:	b93d      	cbnz	r5, 80082be <_dtoa_r+0x2e>
 80082ae:	2010      	movs	r0, #16
 80082b0:	f000 ff92 	bl	80091d8 <malloc>
 80082b4:	6260      	str	r0, [r4, #36]	; 0x24
 80082b6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80082ba:	6005      	str	r5, [r0, #0]
 80082bc:	60c5      	str	r5, [r0, #12]
 80082be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082c0:	6819      	ldr	r1, [r3, #0]
 80082c2:	b151      	cbz	r1, 80082da <_dtoa_r+0x4a>
 80082c4:	685a      	ldr	r2, [r3, #4]
 80082c6:	604a      	str	r2, [r1, #4]
 80082c8:	2301      	movs	r3, #1
 80082ca:	4093      	lsls	r3, r2
 80082cc:	608b      	str	r3, [r1, #8]
 80082ce:	4620      	mov	r0, r4
 80082d0:	f000 ffc9 	bl	8009266 <_Bfree>
 80082d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082d6:	2200      	movs	r2, #0
 80082d8:	601a      	str	r2, [r3, #0]
 80082da:	1e3b      	subs	r3, r7, #0
 80082dc:	bfbb      	ittet	lt
 80082de:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80082e2:	9301      	strlt	r3, [sp, #4]
 80082e4:	2300      	movge	r3, #0
 80082e6:	2201      	movlt	r2, #1
 80082e8:	bfac      	ite	ge
 80082ea:	f8c8 3000 	strge.w	r3, [r8]
 80082ee:	f8c8 2000 	strlt.w	r2, [r8]
 80082f2:	4baf      	ldr	r3, [pc, #700]	; (80085b0 <_dtoa_r+0x320>)
 80082f4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80082f8:	ea33 0308 	bics.w	r3, r3, r8
 80082fc:	d114      	bne.n	8008328 <_dtoa_r+0x98>
 80082fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008300:	f242 730f 	movw	r3, #9999	; 0x270f
 8008304:	6013      	str	r3, [r2, #0]
 8008306:	9b00      	ldr	r3, [sp, #0]
 8008308:	b923      	cbnz	r3, 8008314 <_dtoa_r+0x84>
 800830a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800830e:	2800      	cmp	r0, #0
 8008310:	f000 8542 	beq.w	8008d98 <_dtoa_r+0xb08>
 8008314:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008316:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80085c4 <_dtoa_r+0x334>
 800831a:	2b00      	cmp	r3, #0
 800831c:	f000 8544 	beq.w	8008da8 <_dtoa_r+0xb18>
 8008320:	f10b 0303 	add.w	r3, fp, #3
 8008324:	f000 bd3e 	b.w	8008da4 <_dtoa_r+0xb14>
 8008328:	e9dd 6700 	ldrd	r6, r7, [sp]
 800832c:	2200      	movs	r2, #0
 800832e:	2300      	movs	r3, #0
 8008330:	4630      	mov	r0, r6
 8008332:	4639      	mov	r1, r7
 8008334:	f7f8 fbd8 	bl	8000ae8 <__aeabi_dcmpeq>
 8008338:	4681      	mov	r9, r0
 800833a:	b168      	cbz	r0, 8008358 <_dtoa_r+0xc8>
 800833c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800833e:	2301      	movs	r3, #1
 8008340:	6013      	str	r3, [r2, #0]
 8008342:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008344:	2b00      	cmp	r3, #0
 8008346:	f000 8524 	beq.w	8008d92 <_dtoa_r+0xb02>
 800834a:	4b9a      	ldr	r3, [pc, #616]	; (80085b4 <_dtoa_r+0x324>)
 800834c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800834e:	f103 3bff 	add.w	fp, r3, #4294967295
 8008352:	6013      	str	r3, [r2, #0]
 8008354:	f000 bd28 	b.w	8008da8 <_dtoa_r+0xb18>
 8008358:	aa14      	add	r2, sp, #80	; 0x50
 800835a:	a915      	add	r1, sp, #84	; 0x54
 800835c:	ec47 6b10 	vmov	d0, r6, r7
 8008360:	4620      	mov	r0, r4
 8008362:	f001 f9d8 	bl	8009716 <__d2b>
 8008366:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800836a:	9004      	str	r0, [sp, #16]
 800836c:	2d00      	cmp	r5, #0
 800836e:	d07c      	beq.n	800846a <_dtoa_r+0x1da>
 8008370:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008374:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008378:	46b2      	mov	sl, r6
 800837a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800837e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008382:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008386:	2200      	movs	r2, #0
 8008388:	4b8b      	ldr	r3, [pc, #556]	; (80085b8 <_dtoa_r+0x328>)
 800838a:	4650      	mov	r0, sl
 800838c:	4659      	mov	r1, fp
 800838e:	f7f7 ff8b 	bl	80002a8 <__aeabi_dsub>
 8008392:	a381      	add	r3, pc, #516	; (adr r3, 8008598 <_dtoa_r+0x308>)
 8008394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008398:	f7f8 f93e 	bl	8000618 <__aeabi_dmul>
 800839c:	a380      	add	r3, pc, #512	; (adr r3, 80085a0 <_dtoa_r+0x310>)
 800839e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a2:	f7f7 ff83 	bl	80002ac <__adddf3>
 80083a6:	4606      	mov	r6, r0
 80083a8:	4628      	mov	r0, r5
 80083aa:	460f      	mov	r7, r1
 80083ac:	f7f8 f8ca 	bl	8000544 <__aeabi_i2d>
 80083b0:	a37d      	add	r3, pc, #500	; (adr r3, 80085a8 <_dtoa_r+0x318>)
 80083b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b6:	f7f8 f92f 	bl	8000618 <__aeabi_dmul>
 80083ba:	4602      	mov	r2, r0
 80083bc:	460b      	mov	r3, r1
 80083be:	4630      	mov	r0, r6
 80083c0:	4639      	mov	r1, r7
 80083c2:	f7f7 ff73 	bl	80002ac <__adddf3>
 80083c6:	4606      	mov	r6, r0
 80083c8:	460f      	mov	r7, r1
 80083ca:	f7f8 fbd5 	bl	8000b78 <__aeabi_d2iz>
 80083ce:	2200      	movs	r2, #0
 80083d0:	4682      	mov	sl, r0
 80083d2:	2300      	movs	r3, #0
 80083d4:	4630      	mov	r0, r6
 80083d6:	4639      	mov	r1, r7
 80083d8:	f7f8 fb90 	bl	8000afc <__aeabi_dcmplt>
 80083dc:	b148      	cbz	r0, 80083f2 <_dtoa_r+0x162>
 80083de:	4650      	mov	r0, sl
 80083e0:	f7f8 f8b0 	bl	8000544 <__aeabi_i2d>
 80083e4:	4632      	mov	r2, r6
 80083e6:	463b      	mov	r3, r7
 80083e8:	f7f8 fb7e 	bl	8000ae8 <__aeabi_dcmpeq>
 80083ec:	b908      	cbnz	r0, 80083f2 <_dtoa_r+0x162>
 80083ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083f2:	f1ba 0f16 	cmp.w	sl, #22
 80083f6:	d859      	bhi.n	80084ac <_dtoa_r+0x21c>
 80083f8:	4970      	ldr	r1, [pc, #448]	; (80085bc <_dtoa_r+0x32c>)
 80083fa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80083fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008402:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008406:	f7f8 fb97 	bl	8000b38 <__aeabi_dcmpgt>
 800840a:	2800      	cmp	r0, #0
 800840c:	d050      	beq.n	80084b0 <_dtoa_r+0x220>
 800840e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008412:	2300      	movs	r3, #0
 8008414:	930f      	str	r3, [sp, #60]	; 0x3c
 8008416:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008418:	1b5d      	subs	r5, r3, r5
 800841a:	f1b5 0801 	subs.w	r8, r5, #1
 800841e:	bf49      	itett	mi
 8008420:	f1c5 0301 	rsbmi	r3, r5, #1
 8008424:	2300      	movpl	r3, #0
 8008426:	9305      	strmi	r3, [sp, #20]
 8008428:	f04f 0800 	movmi.w	r8, #0
 800842c:	bf58      	it	pl
 800842e:	9305      	strpl	r3, [sp, #20]
 8008430:	f1ba 0f00 	cmp.w	sl, #0
 8008434:	db3e      	blt.n	80084b4 <_dtoa_r+0x224>
 8008436:	2300      	movs	r3, #0
 8008438:	44d0      	add	r8, sl
 800843a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800843e:	9307      	str	r3, [sp, #28]
 8008440:	9b06      	ldr	r3, [sp, #24]
 8008442:	2b09      	cmp	r3, #9
 8008444:	f200 8090 	bhi.w	8008568 <_dtoa_r+0x2d8>
 8008448:	2b05      	cmp	r3, #5
 800844a:	bfc4      	itt	gt
 800844c:	3b04      	subgt	r3, #4
 800844e:	9306      	strgt	r3, [sp, #24]
 8008450:	9b06      	ldr	r3, [sp, #24]
 8008452:	f1a3 0302 	sub.w	r3, r3, #2
 8008456:	bfcc      	ite	gt
 8008458:	2500      	movgt	r5, #0
 800845a:	2501      	movle	r5, #1
 800845c:	2b03      	cmp	r3, #3
 800845e:	f200 808f 	bhi.w	8008580 <_dtoa_r+0x2f0>
 8008462:	e8df f003 	tbb	[pc, r3]
 8008466:	7f7d      	.short	0x7f7d
 8008468:	7131      	.short	0x7131
 800846a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800846e:	441d      	add	r5, r3
 8008470:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008474:	2820      	cmp	r0, #32
 8008476:	dd13      	ble.n	80084a0 <_dtoa_r+0x210>
 8008478:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800847c:	9b00      	ldr	r3, [sp, #0]
 800847e:	fa08 f800 	lsl.w	r8, r8, r0
 8008482:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008486:	fa23 f000 	lsr.w	r0, r3, r0
 800848a:	ea48 0000 	orr.w	r0, r8, r0
 800848e:	f7f8 f849 	bl	8000524 <__aeabi_ui2d>
 8008492:	2301      	movs	r3, #1
 8008494:	4682      	mov	sl, r0
 8008496:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800849a:	3d01      	subs	r5, #1
 800849c:	9313      	str	r3, [sp, #76]	; 0x4c
 800849e:	e772      	b.n	8008386 <_dtoa_r+0xf6>
 80084a0:	9b00      	ldr	r3, [sp, #0]
 80084a2:	f1c0 0020 	rsb	r0, r0, #32
 80084a6:	fa03 f000 	lsl.w	r0, r3, r0
 80084aa:	e7f0      	b.n	800848e <_dtoa_r+0x1fe>
 80084ac:	2301      	movs	r3, #1
 80084ae:	e7b1      	b.n	8008414 <_dtoa_r+0x184>
 80084b0:	900f      	str	r0, [sp, #60]	; 0x3c
 80084b2:	e7b0      	b.n	8008416 <_dtoa_r+0x186>
 80084b4:	9b05      	ldr	r3, [sp, #20]
 80084b6:	eba3 030a 	sub.w	r3, r3, sl
 80084ba:	9305      	str	r3, [sp, #20]
 80084bc:	f1ca 0300 	rsb	r3, sl, #0
 80084c0:	9307      	str	r3, [sp, #28]
 80084c2:	2300      	movs	r3, #0
 80084c4:	930e      	str	r3, [sp, #56]	; 0x38
 80084c6:	e7bb      	b.n	8008440 <_dtoa_r+0x1b0>
 80084c8:	2301      	movs	r3, #1
 80084ca:	930a      	str	r3, [sp, #40]	; 0x28
 80084cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	dd59      	ble.n	8008586 <_dtoa_r+0x2f6>
 80084d2:	9302      	str	r3, [sp, #8]
 80084d4:	4699      	mov	r9, r3
 80084d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80084d8:	2200      	movs	r2, #0
 80084da:	6072      	str	r2, [r6, #4]
 80084dc:	2204      	movs	r2, #4
 80084de:	f102 0014 	add.w	r0, r2, #20
 80084e2:	4298      	cmp	r0, r3
 80084e4:	6871      	ldr	r1, [r6, #4]
 80084e6:	d953      	bls.n	8008590 <_dtoa_r+0x300>
 80084e8:	4620      	mov	r0, r4
 80084ea:	f000 fe88 	bl	80091fe <_Balloc>
 80084ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084f0:	6030      	str	r0, [r6, #0]
 80084f2:	f1b9 0f0e 	cmp.w	r9, #14
 80084f6:	f8d3 b000 	ldr.w	fp, [r3]
 80084fa:	f200 80e6 	bhi.w	80086ca <_dtoa_r+0x43a>
 80084fe:	2d00      	cmp	r5, #0
 8008500:	f000 80e3 	beq.w	80086ca <_dtoa_r+0x43a>
 8008504:	ed9d 7b00 	vldr	d7, [sp]
 8008508:	f1ba 0f00 	cmp.w	sl, #0
 800850c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008510:	dd74      	ble.n	80085fc <_dtoa_r+0x36c>
 8008512:	4a2a      	ldr	r2, [pc, #168]	; (80085bc <_dtoa_r+0x32c>)
 8008514:	f00a 030f 	and.w	r3, sl, #15
 8008518:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800851c:	ed93 7b00 	vldr	d7, [r3]
 8008520:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008524:	06f0      	lsls	r0, r6, #27
 8008526:	ed8d 7b08 	vstr	d7, [sp, #32]
 800852a:	d565      	bpl.n	80085f8 <_dtoa_r+0x368>
 800852c:	4b24      	ldr	r3, [pc, #144]	; (80085c0 <_dtoa_r+0x330>)
 800852e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008532:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008536:	f7f8 f999 	bl	800086c <__aeabi_ddiv>
 800853a:	e9cd 0100 	strd	r0, r1, [sp]
 800853e:	f006 060f 	and.w	r6, r6, #15
 8008542:	2503      	movs	r5, #3
 8008544:	4f1e      	ldr	r7, [pc, #120]	; (80085c0 <_dtoa_r+0x330>)
 8008546:	e04c      	b.n	80085e2 <_dtoa_r+0x352>
 8008548:	2301      	movs	r3, #1
 800854a:	930a      	str	r3, [sp, #40]	; 0x28
 800854c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800854e:	4453      	add	r3, sl
 8008550:	f103 0901 	add.w	r9, r3, #1
 8008554:	9302      	str	r3, [sp, #8]
 8008556:	464b      	mov	r3, r9
 8008558:	2b01      	cmp	r3, #1
 800855a:	bfb8      	it	lt
 800855c:	2301      	movlt	r3, #1
 800855e:	e7ba      	b.n	80084d6 <_dtoa_r+0x246>
 8008560:	2300      	movs	r3, #0
 8008562:	e7b2      	b.n	80084ca <_dtoa_r+0x23a>
 8008564:	2300      	movs	r3, #0
 8008566:	e7f0      	b.n	800854a <_dtoa_r+0x2ba>
 8008568:	2501      	movs	r5, #1
 800856a:	2300      	movs	r3, #0
 800856c:	9306      	str	r3, [sp, #24]
 800856e:	950a      	str	r5, [sp, #40]	; 0x28
 8008570:	f04f 33ff 	mov.w	r3, #4294967295
 8008574:	9302      	str	r3, [sp, #8]
 8008576:	4699      	mov	r9, r3
 8008578:	2200      	movs	r2, #0
 800857a:	2312      	movs	r3, #18
 800857c:	920b      	str	r2, [sp, #44]	; 0x2c
 800857e:	e7aa      	b.n	80084d6 <_dtoa_r+0x246>
 8008580:	2301      	movs	r3, #1
 8008582:	930a      	str	r3, [sp, #40]	; 0x28
 8008584:	e7f4      	b.n	8008570 <_dtoa_r+0x2e0>
 8008586:	2301      	movs	r3, #1
 8008588:	9302      	str	r3, [sp, #8]
 800858a:	4699      	mov	r9, r3
 800858c:	461a      	mov	r2, r3
 800858e:	e7f5      	b.n	800857c <_dtoa_r+0x2ec>
 8008590:	3101      	adds	r1, #1
 8008592:	6071      	str	r1, [r6, #4]
 8008594:	0052      	lsls	r2, r2, #1
 8008596:	e7a2      	b.n	80084de <_dtoa_r+0x24e>
 8008598:	636f4361 	.word	0x636f4361
 800859c:	3fd287a7 	.word	0x3fd287a7
 80085a0:	8b60c8b3 	.word	0x8b60c8b3
 80085a4:	3fc68a28 	.word	0x3fc68a28
 80085a8:	509f79fb 	.word	0x509f79fb
 80085ac:	3fd34413 	.word	0x3fd34413
 80085b0:	7ff00000 	.word	0x7ff00000
 80085b4:	0800c055 	.word	0x0800c055
 80085b8:	3ff80000 	.word	0x3ff80000
 80085bc:	0800c110 	.word	0x0800c110
 80085c0:	0800c0e8 	.word	0x0800c0e8
 80085c4:	0800c081 	.word	0x0800c081
 80085c8:	07f1      	lsls	r1, r6, #31
 80085ca:	d508      	bpl.n	80085de <_dtoa_r+0x34e>
 80085cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80085d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085d4:	f7f8 f820 	bl	8000618 <__aeabi_dmul>
 80085d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80085dc:	3501      	adds	r5, #1
 80085de:	1076      	asrs	r6, r6, #1
 80085e0:	3708      	adds	r7, #8
 80085e2:	2e00      	cmp	r6, #0
 80085e4:	d1f0      	bne.n	80085c8 <_dtoa_r+0x338>
 80085e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80085ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085ee:	f7f8 f93d 	bl	800086c <__aeabi_ddiv>
 80085f2:	e9cd 0100 	strd	r0, r1, [sp]
 80085f6:	e01a      	b.n	800862e <_dtoa_r+0x39e>
 80085f8:	2502      	movs	r5, #2
 80085fa:	e7a3      	b.n	8008544 <_dtoa_r+0x2b4>
 80085fc:	f000 80a0 	beq.w	8008740 <_dtoa_r+0x4b0>
 8008600:	f1ca 0600 	rsb	r6, sl, #0
 8008604:	4b9f      	ldr	r3, [pc, #636]	; (8008884 <_dtoa_r+0x5f4>)
 8008606:	4fa0      	ldr	r7, [pc, #640]	; (8008888 <_dtoa_r+0x5f8>)
 8008608:	f006 020f 	and.w	r2, r6, #15
 800860c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008614:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008618:	f7f7 fffe 	bl	8000618 <__aeabi_dmul>
 800861c:	e9cd 0100 	strd	r0, r1, [sp]
 8008620:	1136      	asrs	r6, r6, #4
 8008622:	2300      	movs	r3, #0
 8008624:	2502      	movs	r5, #2
 8008626:	2e00      	cmp	r6, #0
 8008628:	d17f      	bne.n	800872a <_dtoa_r+0x49a>
 800862a:	2b00      	cmp	r3, #0
 800862c:	d1e1      	bne.n	80085f2 <_dtoa_r+0x362>
 800862e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008630:	2b00      	cmp	r3, #0
 8008632:	f000 8087 	beq.w	8008744 <_dtoa_r+0x4b4>
 8008636:	e9dd 6700 	ldrd	r6, r7, [sp]
 800863a:	2200      	movs	r2, #0
 800863c:	4b93      	ldr	r3, [pc, #588]	; (800888c <_dtoa_r+0x5fc>)
 800863e:	4630      	mov	r0, r6
 8008640:	4639      	mov	r1, r7
 8008642:	f7f8 fa5b 	bl	8000afc <__aeabi_dcmplt>
 8008646:	2800      	cmp	r0, #0
 8008648:	d07c      	beq.n	8008744 <_dtoa_r+0x4b4>
 800864a:	f1b9 0f00 	cmp.w	r9, #0
 800864e:	d079      	beq.n	8008744 <_dtoa_r+0x4b4>
 8008650:	9b02      	ldr	r3, [sp, #8]
 8008652:	2b00      	cmp	r3, #0
 8008654:	dd35      	ble.n	80086c2 <_dtoa_r+0x432>
 8008656:	f10a 33ff 	add.w	r3, sl, #4294967295
 800865a:	9308      	str	r3, [sp, #32]
 800865c:	4639      	mov	r1, r7
 800865e:	2200      	movs	r2, #0
 8008660:	4b8b      	ldr	r3, [pc, #556]	; (8008890 <_dtoa_r+0x600>)
 8008662:	4630      	mov	r0, r6
 8008664:	f7f7 ffd8 	bl	8000618 <__aeabi_dmul>
 8008668:	e9cd 0100 	strd	r0, r1, [sp]
 800866c:	9f02      	ldr	r7, [sp, #8]
 800866e:	3501      	adds	r5, #1
 8008670:	4628      	mov	r0, r5
 8008672:	f7f7 ff67 	bl	8000544 <__aeabi_i2d>
 8008676:	e9dd 2300 	ldrd	r2, r3, [sp]
 800867a:	f7f7 ffcd 	bl	8000618 <__aeabi_dmul>
 800867e:	2200      	movs	r2, #0
 8008680:	4b84      	ldr	r3, [pc, #528]	; (8008894 <_dtoa_r+0x604>)
 8008682:	f7f7 fe13 	bl	80002ac <__adddf3>
 8008686:	4605      	mov	r5, r0
 8008688:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800868c:	2f00      	cmp	r7, #0
 800868e:	d15d      	bne.n	800874c <_dtoa_r+0x4bc>
 8008690:	2200      	movs	r2, #0
 8008692:	4b81      	ldr	r3, [pc, #516]	; (8008898 <_dtoa_r+0x608>)
 8008694:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008698:	f7f7 fe06 	bl	80002a8 <__aeabi_dsub>
 800869c:	462a      	mov	r2, r5
 800869e:	4633      	mov	r3, r6
 80086a0:	e9cd 0100 	strd	r0, r1, [sp]
 80086a4:	f7f8 fa48 	bl	8000b38 <__aeabi_dcmpgt>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	f040 8288 	bne.w	8008bbe <_dtoa_r+0x92e>
 80086ae:	462a      	mov	r2, r5
 80086b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80086b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086b8:	f7f8 fa20 	bl	8000afc <__aeabi_dcmplt>
 80086bc:	2800      	cmp	r0, #0
 80086be:	f040 827c 	bne.w	8008bba <_dtoa_r+0x92a>
 80086c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80086c6:	e9cd 2300 	strd	r2, r3, [sp]
 80086ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f2c0 8150 	blt.w	8008972 <_dtoa_r+0x6e2>
 80086d2:	f1ba 0f0e 	cmp.w	sl, #14
 80086d6:	f300 814c 	bgt.w	8008972 <_dtoa_r+0x6e2>
 80086da:	4b6a      	ldr	r3, [pc, #424]	; (8008884 <_dtoa_r+0x5f4>)
 80086dc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80086e0:	ed93 7b00 	vldr	d7, [r3]
 80086e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80086ec:	f280 80d8 	bge.w	80088a0 <_dtoa_r+0x610>
 80086f0:	f1b9 0f00 	cmp.w	r9, #0
 80086f4:	f300 80d4 	bgt.w	80088a0 <_dtoa_r+0x610>
 80086f8:	f040 825e 	bne.w	8008bb8 <_dtoa_r+0x928>
 80086fc:	2200      	movs	r2, #0
 80086fe:	4b66      	ldr	r3, [pc, #408]	; (8008898 <_dtoa_r+0x608>)
 8008700:	ec51 0b17 	vmov	r0, r1, d7
 8008704:	f7f7 ff88 	bl	8000618 <__aeabi_dmul>
 8008708:	e9dd 2300 	ldrd	r2, r3, [sp]
 800870c:	f7f8 fa0a 	bl	8000b24 <__aeabi_dcmpge>
 8008710:	464f      	mov	r7, r9
 8008712:	464e      	mov	r6, r9
 8008714:	2800      	cmp	r0, #0
 8008716:	f040 8234 	bne.w	8008b82 <_dtoa_r+0x8f2>
 800871a:	2331      	movs	r3, #49	; 0x31
 800871c:	f10b 0501 	add.w	r5, fp, #1
 8008720:	f88b 3000 	strb.w	r3, [fp]
 8008724:	f10a 0a01 	add.w	sl, sl, #1
 8008728:	e22f      	b.n	8008b8a <_dtoa_r+0x8fa>
 800872a:	07f2      	lsls	r2, r6, #31
 800872c:	d505      	bpl.n	800873a <_dtoa_r+0x4aa>
 800872e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008732:	f7f7 ff71 	bl	8000618 <__aeabi_dmul>
 8008736:	3501      	adds	r5, #1
 8008738:	2301      	movs	r3, #1
 800873a:	1076      	asrs	r6, r6, #1
 800873c:	3708      	adds	r7, #8
 800873e:	e772      	b.n	8008626 <_dtoa_r+0x396>
 8008740:	2502      	movs	r5, #2
 8008742:	e774      	b.n	800862e <_dtoa_r+0x39e>
 8008744:	f8cd a020 	str.w	sl, [sp, #32]
 8008748:	464f      	mov	r7, r9
 800874a:	e791      	b.n	8008670 <_dtoa_r+0x3e0>
 800874c:	4b4d      	ldr	r3, [pc, #308]	; (8008884 <_dtoa_r+0x5f4>)
 800874e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008752:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008758:	2b00      	cmp	r3, #0
 800875a:	d047      	beq.n	80087ec <_dtoa_r+0x55c>
 800875c:	4602      	mov	r2, r0
 800875e:	460b      	mov	r3, r1
 8008760:	2000      	movs	r0, #0
 8008762:	494e      	ldr	r1, [pc, #312]	; (800889c <_dtoa_r+0x60c>)
 8008764:	f7f8 f882 	bl	800086c <__aeabi_ddiv>
 8008768:	462a      	mov	r2, r5
 800876a:	4633      	mov	r3, r6
 800876c:	f7f7 fd9c 	bl	80002a8 <__aeabi_dsub>
 8008770:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008774:	465d      	mov	r5, fp
 8008776:	e9dd 0100 	ldrd	r0, r1, [sp]
 800877a:	f7f8 f9fd 	bl	8000b78 <__aeabi_d2iz>
 800877e:	4606      	mov	r6, r0
 8008780:	f7f7 fee0 	bl	8000544 <__aeabi_i2d>
 8008784:	4602      	mov	r2, r0
 8008786:	460b      	mov	r3, r1
 8008788:	e9dd 0100 	ldrd	r0, r1, [sp]
 800878c:	f7f7 fd8c 	bl	80002a8 <__aeabi_dsub>
 8008790:	3630      	adds	r6, #48	; 0x30
 8008792:	f805 6b01 	strb.w	r6, [r5], #1
 8008796:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800879a:	e9cd 0100 	strd	r0, r1, [sp]
 800879e:	f7f8 f9ad 	bl	8000afc <__aeabi_dcmplt>
 80087a2:	2800      	cmp	r0, #0
 80087a4:	d163      	bne.n	800886e <_dtoa_r+0x5de>
 80087a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087aa:	2000      	movs	r0, #0
 80087ac:	4937      	ldr	r1, [pc, #220]	; (800888c <_dtoa_r+0x5fc>)
 80087ae:	f7f7 fd7b 	bl	80002a8 <__aeabi_dsub>
 80087b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80087b6:	f7f8 f9a1 	bl	8000afc <__aeabi_dcmplt>
 80087ba:	2800      	cmp	r0, #0
 80087bc:	f040 80b7 	bne.w	800892e <_dtoa_r+0x69e>
 80087c0:	eba5 030b 	sub.w	r3, r5, fp
 80087c4:	429f      	cmp	r7, r3
 80087c6:	f77f af7c 	ble.w	80086c2 <_dtoa_r+0x432>
 80087ca:	2200      	movs	r2, #0
 80087cc:	4b30      	ldr	r3, [pc, #192]	; (8008890 <_dtoa_r+0x600>)
 80087ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80087d2:	f7f7 ff21 	bl	8000618 <__aeabi_dmul>
 80087d6:	2200      	movs	r2, #0
 80087d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80087dc:	4b2c      	ldr	r3, [pc, #176]	; (8008890 <_dtoa_r+0x600>)
 80087de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087e2:	f7f7 ff19 	bl	8000618 <__aeabi_dmul>
 80087e6:	e9cd 0100 	strd	r0, r1, [sp]
 80087ea:	e7c4      	b.n	8008776 <_dtoa_r+0x4e6>
 80087ec:	462a      	mov	r2, r5
 80087ee:	4633      	mov	r3, r6
 80087f0:	f7f7 ff12 	bl	8000618 <__aeabi_dmul>
 80087f4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80087f8:	eb0b 0507 	add.w	r5, fp, r7
 80087fc:	465e      	mov	r6, fp
 80087fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008802:	f7f8 f9b9 	bl	8000b78 <__aeabi_d2iz>
 8008806:	4607      	mov	r7, r0
 8008808:	f7f7 fe9c 	bl	8000544 <__aeabi_i2d>
 800880c:	3730      	adds	r7, #48	; 0x30
 800880e:	4602      	mov	r2, r0
 8008810:	460b      	mov	r3, r1
 8008812:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008816:	f7f7 fd47 	bl	80002a8 <__aeabi_dsub>
 800881a:	f806 7b01 	strb.w	r7, [r6], #1
 800881e:	42ae      	cmp	r6, r5
 8008820:	e9cd 0100 	strd	r0, r1, [sp]
 8008824:	f04f 0200 	mov.w	r2, #0
 8008828:	d126      	bne.n	8008878 <_dtoa_r+0x5e8>
 800882a:	4b1c      	ldr	r3, [pc, #112]	; (800889c <_dtoa_r+0x60c>)
 800882c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008830:	f7f7 fd3c 	bl	80002ac <__adddf3>
 8008834:	4602      	mov	r2, r0
 8008836:	460b      	mov	r3, r1
 8008838:	e9dd 0100 	ldrd	r0, r1, [sp]
 800883c:	f7f8 f97c 	bl	8000b38 <__aeabi_dcmpgt>
 8008840:	2800      	cmp	r0, #0
 8008842:	d174      	bne.n	800892e <_dtoa_r+0x69e>
 8008844:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008848:	2000      	movs	r0, #0
 800884a:	4914      	ldr	r1, [pc, #80]	; (800889c <_dtoa_r+0x60c>)
 800884c:	f7f7 fd2c 	bl	80002a8 <__aeabi_dsub>
 8008850:	4602      	mov	r2, r0
 8008852:	460b      	mov	r3, r1
 8008854:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008858:	f7f8 f950 	bl	8000afc <__aeabi_dcmplt>
 800885c:	2800      	cmp	r0, #0
 800885e:	f43f af30 	beq.w	80086c2 <_dtoa_r+0x432>
 8008862:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008866:	2b30      	cmp	r3, #48	; 0x30
 8008868:	f105 32ff 	add.w	r2, r5, #4294967295
 800886c:	d002      	beq.n	8008874 <_dtoa_r+0x5e4>
 800886e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008872:	e04a      	b.n	800890a <_dtoa_r+0x67a>
 8008874:	4615      	mov	r5, r2
 8008876:	e7f4      	b.n	8008862 <_dtoa_r+0x5d2>
 8008878:	4b05      	ldr	r3, [pc, #20]	; (8008890 <_dtoa_r+0x600>)
 800887a:	f7f7 fecd 	bl	8000618 <__aeabi_dmul>
 800887e:	e9cd 0100 	strd	r0, r1, [sp]
 8008882:	e7bc      	b.n	80087fe <_dtoa_r+0x56e>
 8008884:	0800c110 	.word	0x0800c110
 8008888:	0800c0e8 	.word	0x0800c0e8
 800888c:	3ff00000 	.word	0x3ff00000
 8008890:	40240000 	.word	0x40240000
 8008894:	401c0000 	.word	0x401c0000
 8008898:	40140000 	.word	0x40140000
 800889c:	3fe00000 	.word	0x3fe00000
 80088a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80088a4:	465d      	mov	r5, fp
 80088a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088aa:	4630      	mov	r0, r6
 80088ac:	4639      	mov	r1, r7
 80088ae:	f7f7 ffdd 	bl	800086c <__aeabi_ddiv>
 80088b2:	f7f8 f961 	bl	8000b78 <__aeabi_d2iz>
 80088b6:	4680      	mov	r8, r0
 80088b8:	f7f7 fe44 	bl	8000544 <__aeabi_i2d>
 80088bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088c0:	f7f7 feaa 	bl	8000618 <__aeabi_dmul>
 80088c4:	4602      	mov	r2, r0
 80088c6:	460b      	mov	r3, r1
 80088c8:	4630      	mov	r0, r6
 80088ca:	4639      	mov	r1, r7
 80088cc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80088d0:	f7f7 fcea 	bl	80002a8 <__aeabi_dsub>
 80088d4:	f805 6b01 	strb.w	r6, [r5], #1
 80088d8:	eba5 060b 	sub.w	r6, r5, fp
 80088dc:	45b1      	cmp	r9, r6
 80088de:	4602      	mov	r2, r0
 80088e0:	460b      	mov	r3, r1
 80088e2:	d139      	bne.n	8008958 <_dtoa_r+0x6c8>
 80088e4:	f7f7 fce2 	bl	80002ac <__adddf3>
 80088e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088ec:	4606      	mov	r6, r0
 80088ee:	460f      	mov	r7, r1
 80088f0:	f7f8 f922 	bl	8000b38 <__aeabi_dcmpgt>
 80088f4:	b9c8      	cbnz	r0, 800892a <_dtoa_r+0x69a>
 80088f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088fa:	4630      	mov	r0, r6
 80088fc:	4639      	mov	r1, r7
 80088fe:	f7f8 f8f3 	bl	8000ae8 <__aeabi_dcmpeq>
 8008902:	b110      	cbz	r0, 800890a <_dtoa_r+0x67a>
 8008904:	f018 0f01 	tst.w	r8, #1
 8008908:	d10f      	bne.n	800892a <_dtoa_r+0x69a>
 800890a:	9904      	ldr	r1, [sp, #16]
 800890c:	4620      	mov	r0, r4
 800890e:	f000 fcaa 	bl	8009266 <_Bfree>
 8008912:	2300      	movs	r3, #0
 8008914:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008916:	702b      	strb	r3, [r5, #0]
 8008918:	f10a 0301 	add.w	r3, sl, #1
 800891c:	6013      	str	r3, [r2, #0]
 800891e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008920:	2b00      	cmp	r3, #0
 8008922:	f000 8241 	beq.w	8008da8 <_dtoa_r+0xb18>
 8008926:	601d      	str	r5, [r3, #0]
 8008928:	e23e      	b.n	8008da8 <_dtoa_r+0xb18>
 800892a:	f8cd a020 	str.w	sl, [sp, #32]
 800892e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008932:	2a39      	cmp	r2, #57	; 0x39
 8008934:	f105 33ff 	add.w	r3, r5, #4294967295
 8008938:	d108      	bne.n	800894c <_dtoa_r+0x6bc>
 800893a:	459b      	cmp	fp, r3
 800893c:	d10a      	bne.n	8008954 <_dtoa_r+0x6c4>
 800893e:	9b08      	ldr	r3, [sp, #32]
 8008940:	3301      	adds	r3, #1
 8008942:	9308      	str	r3, [sp, #32]
 8008944:	2330      	movs	r3, #48	; 0x30
 8008946:	f88b 3000 	strb.w	r3, [fp]
 800894a:	465b      	mov	r3, fp
 800894c:	781a      	ldrb	r2, [r3, #0]
 800894e:	3201      	adds	r2, #1
 8008950:	701a      	strb	r2, [r3, #0]
 8008952:	e78c      	b.n	800886e <_dtoa_r+0x5de>
 8008954:	461d      	mov	r5, r3
 8008956:	e7ea      	b.n	800892e <_dtoa_r+0x69e>
 8008958:	2200      	movs	r2, #0
 800895a:	4b9b      	ldr	r3, [pc, #620]	; (8008bc8 <_dtoa_r+0x938>)
 800895c:	f7f7 fe5c 	bl	8000618 <__aeabi_dmul>
 8008960:	2200      	movs	r2, #0
 8008962:	2300      	movs	r3, #0
 8008964:	4606      	mov	r6, r0
 8008966:	460f      	mov	r7, r1
 8008968:	f7f8 f8be 	bl	8000ae8 <__aeabi_dcmpeq>
 800896c:	2800      	cmp	r0, #0
 800896e:	d09a      	beq.n	80088a6 <_dtoa_r+0x616>
 8008970:	e7cb      	b.n	800890a <_dtoa_r+0x67a>
 8008972:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008974:	2a00      	cmp	r2, #0
 8008976:	f000 808b 	beq.w	8008a90 <_dtoa_r+0x800>
 800897a:	9a06      	ldr	r2, [sp, #24]
 800897c:	2a01      	cmp	r2, #1
 800897e:	dc6e      	bgt.n	8008a5e <_dtoa_r+0x7ce>
 8008980:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008982:	2a00      	cmp	r2, #0
 8008984:	d067      	beq.n	8008a56 <_dtoa_r+0x7c6>
 8008986:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800898a:	9f07      	ldr	r7, [sp, #28]
 800898c:	9d05      	ldr	r5, [sp, #20]
 800898e:	9a05      	ldr	r2, [sp, #20]
 8008990:	2101      	movs	r1, #1
 8008992:	441a      	add	r2, r3
 8008994:	4620      	mov	r0, r4
 8008996:	9205      	str	r2, [sp, #20]
 8008998:	4498      	add	r8, r3
 800899a:	f000 fd04 	bl	80093a6 <__i2b>
 800899e:	4606      	mov	r6, r0
 80089a0:	2d00      	cmp	r5, #0
 80089a2:	dd0c      	ble.n	80089be <_dtoa_r+0x72e>
 80089a4:	f1b8 0f00 	cmp.w	r8, #0
 80089a8:	dd09      	ble.n	80089be <_dtoa_r+0x72e>
 80089aa:	4545      	cmp	r5, r8
 80089ac:	9a05      	ldr	r2, [sp, #20]
 80089ae:	462b      	mov	r3, r5
 80089b0:	bfa8      	it	ge
 80089b2:	4643      	movge	r3, r8
 80089b4:	1ad2      	subs	r2, r2, r3
 80089b6:	9205      	str	r2, [sp, #20]
 80089b8:	1aed      	subs	r5, r5, r3
 80089ba:	eba8 0803 	sub.w	r8, r8, r3
 80089be:	9b07      	ldr	r3, [sp, #28]
 80089c0:	b1eb      	cbz	r3, 80089fe <_dtoa_r+0x76e>
 80089c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d067      	beq.n	8008a98 <_dtoa_r+0x808>
 80089c8:	b18f      	cbz	r7, 80089ee <_dtoa_r+0x75e>
 80089ca:	4631      	mov	r1, r6
 80089cc:	463a      	mov	r2, r7
 80089ce:	4620      	mov	r0, r4
 80089d0:	f000 fd88 	bl	80094e4 <__pow5mult>
 80089d4:	9a04      	ldr	r2, [sp, #16]
 80089d6:	4601      	mov	r1, r0
 80089d8:	4606      	mov	r6, r0
 80089da:	4620      	mov	r0, r4
 80089dc:	f000 fcec 	bl	80093b8 <__multiply>
 80089e0:	9904      	ldr	r1, [sp, #16]
 80089e2:	9008      	str	r0, [sp, #32]
 80089e4:	4620      	mov	r0, r4
 80089e6:	f000 fc3e 	bl	8009266 <_Bfree>
 80089ea:	9b08      	ldr	r3, [sp, #32]
 80089ec:	9304      	str	r3, [sp, #16]
 80089ee:	9b07      	ldr	r3, [sp, #28]
 80089f0:	1bda      	subs	r2, r3, r7
 80089f2:	d004      	beq.n	80089fe <_dtoa_r+0x76e>
 80089f4:	9904      	ldr	r1, [sp, #16]
 80089f6:	4620      	mov	r0, r4
 80089f8:	f000 fd74 	bl	80094e4 <__pow5mult>
 80089fc:	9004      	str	r0, [sp, #16]
 80089fe:	2101      	movs	r1, #1
 8008a00:	4620      	mov	r0, r4
 8008a02:	f000 fcd0 	bl	80093a6 <__i2b>
 8008a06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a08:	4607      	mov	r7, r0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	f000 81d0 	beq.w	8008db0 <_dtoa_r+0xb20>
 8008a10:	461a      	mov	r2, r3
 8008a12:	4601      	mov	r1, r0
 8008a14:	4620      	mov	r0, r4
 8008a16:	f000 fd65 	bl	80094e4 <__pow5mult>
 8008a1a:	9b06      	ldr	r3, [sp, #24]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	4607      	mov	r7, r0
 8008a20:	dc40      	bgt.n	8008aa4 <_dtoa_r+0x814>
 8008a22:	9b00      	ldr	r3, [sp, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d139      	bne.n	8008a9c <_dtoa_r+0x80c>
 8008a28:	9b01      	ldr	r3, [sp, #4]
 8008a2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d136      	bne.n	8008aa0 <_dtoa_r+0x810>
 8008a32:	9b01      	ldr	r3, [sp, #4]
 8008a34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a38:	0d1b      	lsrs	r3, r3, #20
 8008a3a:	051b      	lsls	r3, r3, #20
 8008a3c:	b12b      	cbz	r3, 8008a4a <_dtoa_r+0x7ba>
 8008a3e:	9b05      	ldr	r3, [sp, #20]
 8008a40:	3301      	adds	r3, #1
 8008a42:	9305      	str	r3, [sp, #20]
 8008a44:	f108 0801 	add.w	r8, r8, #1
 8008a48:	2301      	movs	r3, #1
 8008a4a:	9307      	str	r3, [sp, #28]
 8008a4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d12a      	bne.n	8008aa8 <_dtoa_r+0x818>
 8008a52:	2001      	movs	r0, #1
 8008a54:	e030      	b.n	8008ab8 <_dtoa_r+0x828>
 8008a56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a58:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a5c:	e795      	b.n	800898a <_dtoa_r+0x6fa>
 8008a5e:	9b07      	ldr	r3, [sp, #28]
 8008a60:	f109 37ff 	add.w	r7, r9, #4294967295
 8008a64:	42bb      	cmp	r3, r7
 8008a66:	bfbf      	itttt	lt
 8008a68:	9b07      	ldrlt	r3, [sp, #28]
 8008a6a:	9707      	strlt	r7, [sp, #28]
 8008a6c:	1afa      	sublt	r2, r7, r3
 8008a6e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008a70:	bfbb      	ittet	lt
 8008a72:	189b      	addlt	r3, r3, r2
 8008a74:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008a76:	1bdf      	subge	r7, r3, r7
 8008a78:	2700      	movlt	r7, #0
 8008a7a:	f1b9 0f00 	cmp.w	r9, #0
 8008a7e:	bfb5      	itete	lt
 8008a80:	9b05      	ldrlt	r3, [sp, #20]
 8008a82:	9d05      	ldrge	r5, [sp, #20]
 8008a84:	eba3 0509 	sublt.w	r5, r3, r9
 8008a88:	464b      	movge	r3, r9
 8008a8a:	bfb8      	it	lt
 8008a8c:	2300      	movlt	r3, #0
 8008a8e:	e77e      	b.n	800898e <_dtoa_r+0x6fe>
 8008a90:	9f07      	ldr	r7, [sp, #28]
 8008a92:	9d05      	ldr	r5, [sp, #20]
 8008a94:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008a96:	e783      	b.n	80089a0 <_dtoa_r+0x710>
 8008a98:	9a07      	ldr	r2, [sp, #28]
 8008a9a:	e7ab      	b.n	80089f4 <_dtoa_r+0x764>
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	e7d4      	b.n	8008a4a <_dtoa_r+0x7ba>
 8008aa0:	9b00      	ldr	r3, [sp, #0]
 8008aa2:	e7d2      	b.n	8008a4a <_dtoa_r+0x7ba>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	9307      	str	r3, [sp, #28]
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008aae:	6918      	ldr	r0, [r3, #16]
 8008ab0:	f000 fc2b 	bl	800930a <__hi0bits>
 8008ab4:	f1c0 0020 	rsb	r0, r0, #32
 8008ab8:	4440      	add	r0, r8
 8008aba:	f010 001f 	ands.w	r0, r0, #31
 8008abe:	d047      	beq.n	8008b50 <_dtoa_r+0x8c0>
 8008ac0:	f1c0 0320 	rsb	r3, r0, #32
 8008ac4:	2b04      	cmp	r3, #4
 8008ac6:	dd3b      	ble.n	8008b40 <_dtoa_r+0x8b0>
 8008ac8:	9b05      	ldr	r3, [sp, #20]
 8008aca:	f1c0 001c 	rsb	r0, r0, #28
 8008ace:	4403      	add	r3, r0
 8008ad0:	9305      	str	r3, [sp, #20]
 8008ad2:	4405      	add	r5, r0
 8008ad4:	4480      	add	r8, r0
 8008ad6:	9b05      	ldr	r3, [sp, #20]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	dd05      	ble.n	8008ae8 <_dtoa_r+0x858>
 8008adc:	461a      	mov	r2, r3
 8008ade:	9904      	ldr	r1, [sp, #16]
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f000 fd4d 	bl	8009580 <__lshift>
 8008ae6:	9004      	str	r0, [sp, #16]
 8008ae8:	f1b8 0f00 	cmp.w	r8, #0
 8008aec:	dd05      	ble.n	8008afa <_dtoa_r+0x86a>
 8008aee:	4639      	mov	r1, r7
 8008af0:	4642      	mov	r2, r8
 8008af2:	4620      	mov	r0, r4
 8008af4:	f000 fd44 	bl	8009580 <__lshift>
 8008af8:	4607      	mov	r7, r0
 8008afa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008afc:	b353      	cbz	r3, 8008b54 <_dtoa_r+0x8c4>
 8008afe:	4639      	mov	r1, r7
 8008b00:	9804      	ldr	r0, [sp, #16]
 8008b02:	f000 fd91 	bl	8009628 <__mcmp>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	da24      	bge.n	8008b54 <_dtoa_r+0x8c4>
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	220a      	movs	r2, #10
 8008b0e:	9904      	ldr	r1, [sp, #16]
 8008b10:	4620      	mov	r0, r4
 8008b12:	f000 fbbf 	bl	8009294 <__multadd>
 8008b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b18:	9004      	str	r0, [sp, #16]
 8008b1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f000 814d 	beq.w	8008dbe <_dtoa_r+0xb2e>
 8008b24:	2300      	movs	r3, #0
 8008b26:	4631      	mov	r1, r6
 8008b28:	220a      	movs	r2, #10
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	f000 fbb2 	bl	8009294 <__multadd>
 8008b30:	9b02      	ldr	r3, [sp, #8]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	4606      	mov	r6, r0
 8008b36:	dc4f      	bgt.n	8008bd8 <_dtoa_r+0x948>
 8008b38:	9b06      	ldr	r3, [sp, #24]
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	dd4c      	ble.n	8008bd8 <_dtoa_r+0x948>
 8008b3e:	e011      	b.n	8008b64 <_dtoa_r+0x8d4>
 8008b40:	d0c9      	beq.n	8008ad6 <_dtoa_r+0x846>
 8008b42:	9a05      	ldr	r2, [sp, #20]
 8008b44:	331c      	adds	r3, #28
 8008b46:	441a      	add	r2, r3
 8008b48:	9205      	str	r2, [sp, #20]
 8008b4a:	441d      	add	r5, r3
 8008b4c:	4498      	add	r8, r3
 8008b4e:	e7c2      	b.n	8008ad6 <_dtoa_r+0x846>
 8008b50:	4603      	mov	r3, r0
 8008b52:	e7f6      	b.n	8008b42 <_dtoa_r+0x8b2>
 8008b54:	f1b9 0f00 	cmp.w	r9, #0
 8008b58:	dc38      	bgt.n	8008bcc <_dtoa_r+0x93c>
 8008b5a:	9b06      	ldr	r3, [sp, #24]
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	dd35      	ble.n	8008bcc <_dtoa_r+0x93c>
 8008b60:	f8cd 9008 	str.w	r9, [sp, #8]
 8008b64:	9b02      	ldr	r3, [sp, #8]
 8008b66:	b963      	cbnz	r3, 8008b82 <_dtoa_r+0x8f2>
 8008b68:	4639      	mov	r1, r7
 8008b6a:	2205      	movs	r2, #5
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	f000 fb91 	bl	8009294 <__multadd>
 8008b72:	4601      	mov	r1, r0
 8008b74:	4607      	mov	r7, r0
 8008b76:	9804      	ldr	r0, [sp, #16]
 8008b78:	f000 fd56 	bl	8009628 <__mcmp>
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	f73f adcc 	bgt.w	800871a <_dtoa_r+0x48a>
 8008b82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b84:	465d      	mov	r5, fp
 8008b86:	ea6f 0a03 	mvn.w	sl, r3
 8008b8a:	f04f 0900 	mov.w	r9, #0
 8008b8e:	4639      	mov	r1, r7
 8008b90:	4620      	mov	r0, r4
 8008b92:	f000 fb68 	bl	8009266 <_Bfree>
 8008b96:	2e00      	cmp	r6, #0
 8008b98:	f43f aeb7 	beq.w	800890a <_dtoa_r+0x67a>
 8008b9c:	f1b9 0f00 	cmp.w	r9, #0
 8008ba0:	d005      	beq.n	8008bae <_dtoa_r+0x91e>
 8008ba2:	45b1      	cmp	r9, r6
 8008ba4:	d003      	beq.n	8008bae <_dtoa_r+0x91e>
 8008ba6:	4649      	mov	r1, r9
 8008ba8:	4620      	mov	r0, r4
 8008baa:	f000 fb5c 	bl	8009266 <_Bfree>
 8008bae:	4631      	mov	r1, r6
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f000 fb58 	bl	8009266 <_Bfree>
 8008bb6:	e6a8      	b.n	800890a <_dtoa_r+0x67a>
 8008bb8:	2700      	movs	r7, #0
 8008bba:	463e      	mov	r6, r7
 8008bbc:	e7e1      	b.n	8008b82 <_dtoa_r+0x8f2>
 8008bbe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008bc2:	463e      	mov	r6, r7
 8008bc4:	e5a9      	b.n	800871a <_dtoa_r+0x48a>
 8008bc6:	bf00      	nop
 8008bc8:	40240000 	.word	0x40240000
 8008bcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bce:	f8cd 9008 	str.w	r9, [sp, #8]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	f000 80fa 	beq.w	8008dcc <_dtoa_r+0xb3c>
 8008bd8:	2d00      	cmp	r5, #0
 8008bda:	dd05      	ble.n	8008be8 <_dtoa_r+0x958>
 8008bdc:	4631      	mov	r1, r6
 8008bde:	462a      	mov	r2, r5
 8008be0:	4620      	mov	r0, r4
 8008be2:	f000 fccd 	bl	8009580 <__lshift>
 8008be6:	4606      	mov	r6, r0
 8008be8:	9b07      	ldr	r3, [sp, #28]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d04c      	beq.n	8008c88 <_dtoa_r+0x9f8>
 8008bee:	6871      	ldr	r1, [r6, #4]
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	f000 fb04 	bl	80091fe <_Balloc>
 8008bf6:	6932      	ldr	r2, [r6, #16]
 8008bf8:	3202      	adds	r2, #2
 8008bfa:	4605      	mov	r5, r0
 8008bfc:	0092      	lsls	r2, r2, #2
 8008bfe:	f106 010c 	add.w	r1, r6, #12
 8008c02:	300c      	adds	r0, #12
 8008c04:	f000 faf0 	bl	80091e8 <memcpy>
 8008c08:	2201      	movs	r2, #1
 8008c0a:	4629      	mov	r1, r5
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	f000 fcb7 	bl	8009580 <__lshift>
 8008c12:	9b00      	ldr	r3, [sp, #0]
 8008c14:	f8cd b014 	str.w	fp, [sp, #20]
 8008c18:	f003 0301 	and.w	r3, r3, #1
 8008c1c:	46b1      	mov	r9, r6
 8008c1e:	9307      	str	r3, [sp, #28]
 8008c20:	4606      	mov	r6, r0
 8008c22:	4639      	mov	r1, r7
 8008c24:	9804      	ldr	r0, [sp, #16]
 8008c26:	f7ff faa5 	bl	8008174 <quorem>
 8008c2a:	4649      	mov	r1, r9
 8008c2c:	4605      	mov	r5, r0
 8008c2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008c32:	9804      	ldr	r0, [sp, #16]
 8008c34:	f000 fcf8 	bl	8009628 <__mcmp>
 8008c38:	4632      	mov	r2, r6
 8008c3a:	9000      	str	r0, [sp, #0]
 8008c3c:	4639      	mov	r1, r7
 8008c3e:	4620      	mov	r0, r4
 8008c40:	f000 fd0c 	bl	800965c <__mdiff>
 8008c44:	68c3      	ldr	r3, [r0, #12]
 8008c46:	4602      	mov	r2, r0
 8008c48:	bb03      	cbnz	r3, 8008c8c <_dtoa_r+0x9fc>
 8008c4a:	4601      	mov	r1, r0
 8008c4c:	9008      	str	r0, [sp, #32]
 8008c4e:	9804      	ldr	r0, [sp, #16]
 8008c50:	f000 fcea 	bl	8009628 <__mcmp>
 8008c54:	9a08      	ldr	r2, [sp, #32]
 8008c56:	4603      	mov	r3, r0
 8008c58:	4611      	mov	r1, r2
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	9308      	str	r3, [sp, #32]
 8008c5e:	f000 fb02 	bl	8009266 <_Bfree>
 8008c62:	9b08      	ldr	r3, [sp, #32]
 8008c64:	b9a3      	cbnz	r3, 8008c90 <_dtoa_r+0xa00>
 8008c66:	9a06      	ldr	r2, [sp, #24]
 8008c68:	b992      	cbnz	r2, 8008c90 <_dtoa_r+0xa00>
 8008c6a:	9a07      	ldr	r2, [sp, #28]
 8008c6c:	b982      	cbnz	r2, 8008c90 <_dtoa_r+0xa00>
 8008c6e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008c72:	d029      	beq.n	8008cc8 <_dtoa_r+0xa38>
 8008c74:	9b00      	ldr	r3, [sp, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	dd01      	ble.n	8008c7e <_dtoa_r+0x9ee>
 8008c7a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008c7e:	9b05      	ldr	r3, [sp, #20]
 8008c80:	1c5d      	adds	r5, r3, #1
 8008c82:	f883 8000 	strb.w	r8, [r3]
 8008c86:	e782      	b.n	8008b8e <_dtoa_r+0x8fe>
 8008c88:	4630      	mov	r0, r6
 8008c8a:	e7c2      	b.n	8008c12 <_dtoa_r+0x982>
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e7e3      	b.n	8008c58 <_dtoa_r+0x9c8>
 8008c90:	9a00      	ldr	r2, [sp, #0]
 8008c92:	2a00      	cmp	r2, #0
 8008c94:	db04      	blt.n	8008ca0 <_dtoa_r+0xa10>
 8008c96:	d125      	bne.n	8008ce4 <_dtoa_r+0xa54>
 8008c98:	9a06      	ldr	r2, [sp, #24]
 8008c9a:	bb1a      	cbnz	r2, 8008ce4 <_dtoa_r+0xa54>
 8008c9c:	9a07      	ldr	r2, [sp, #28]
 8008c9e:	bb0a      	cbnz	r2, 8008ce4 <_dtoa_r+0xa54>
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	ddec      	ble.n	8008c7e <_dtoa_r+0x9ee>
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	9904      	ldr	r1, [sp, #16]
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f000 fc69 	bl	8009580 <__lshift>
 8008cae:	4639      	mov	r1, r7
 8008cb0:	9004      	str	r0, [sp, #16]
 8008cb2:	f000 fcb9 	bl	8009628 <__mcmp>
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	dc03      	bgt.n	8008cc2 <_dtoa_r+0xa32>
 8008cba:	d1e0      	bne.n	8008c7e <_dtoa_r+0x9ee>
 8008cbc:	f018 0f01 	tst.w	r8, #1
 8008cc0:	d0dd      	beq.n	8008c7e <_dtoa_r+0x9ee>
 8008cc2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008cc6:	d1d8      	bne.n	8008c7a <_dtoa_r+0x9ea>
 8008cc8:	9b05      	ldr	r3, [sp, #20]
 8008cca:	9a05      	ldr	r2, [sp, #20]
 8008ccc:	1c5d      	adds	r5, r3, #1
 8008cce:	2339      	movs	r3, #57	; 0x39
 8008cd0:	7013      	strb	r3, [r2, #0]
 8008cd2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008cd6:	2b39      	cmp	r3, #57	; 0x39
 8008cd8:	f105 32ff 	add.w	r2, r5, #4294967295
 8008cdc:	d04f      	beq.n	8008d7e <_dtoa_r+0xaee>
 8008cde:	3301      	adds	r3, #1
 8008ce0:	7013      	strb	r3, [r2, #0]
 8008ce2:	e754      	b.n	8008b8e <_dtoa_r+0x8fe>
 8008ce4:	9a05      	ldr	r2, [sp, #20]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	f102 0501 	add.w	r5, r2, #1
 8008cec:	dd06      	ble.n	8008cfc <_dtoa_r+0xa6c>
 8008cee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008cf2:	d0e9      	beq.n	8008cc8 <_dtoa_r+0xa38>
 8008cf4:	f108 0801 	add.w	r8, r8, #1
 8008cf8:	9b05      	ldr	r3, [sp, #20]
 8008cfa:	e7c2      	b.n	8008c82 <_dtoa_r+0x9f2>
 8008cfc:	9a02      	ldr	r2, [sp, #8]
 8008cfe:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008d02:	eba5 030b 	sub.w	r3, r5, fp
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d021      	beq.n	8008d4e <_dtoa_r+0xabe>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	220a      	movs	r2, #10
 8008d0e:	9904      	ldr	r1, [sp, #16]
 8008d10:	4620      	mov	r0, r4
 8008d12:	f000 fabf 	bl	8009294 <__multadd>
 8008d16:	45b1      	cmp	r9, r6
 8008d18:	9004      	str	r0, [sp, #16]
 8008d1a:	f04f 0300 	mov.w	r3, #0
 8008d1e:	f04f 020a 	mov.w	r2, #10
 8008d22:	4649      	mov	r1, r9
 8008d24:	4620      	mov	r0, r4
 8008d26:	d105      	bne.n	8008d34 <_dtoa_r+0xaa4>
 8008d28:	f000 fab4 	bl	8009294 <__multadd>
 8008d2c:	4681      	mov	r9, r0
 8008d2e:	4606      	mov	r6, r0
 8008d30:	9505      	str	r5, [sp, #20]
 8008d32:	e776      	b.n	8008c22 <_dtoa_r+0x992>
 8008d34:	f000 faae 	bl	8009294 <__multadd>
 8008d38:	4631      	mov	r1, r6
 8008d3a:	4681      	mov	r9, r0
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	220a      	movs	r2, #10
 8008d40:	4620      	mov	r0, r4
 8008d42:	f000 faa7 	bl	8009294 <__multadd>
 8008d46:	4606      	mov	r6, r0
 8008d48:	e7f2      	b.n	8008d30 <_dtoa_r+0xaa0>
 8008d4a:	f04f 0900 	mov.w	r9, #0
 8008d4e:	2201      	movs	r2, #1
 8008d50:	9904      	ldr	r1, [sp, #16]
 8008d52:	4620      	mov	r0, r4
 8008d54:	f000 fc14 	bl	8009580 <__lshift>
 8008d58:	4639      	mov	r1, r7
 8008d5a:	9004      	str	r0, [sp, #16]
 8008d5c:	f000 fc64 	bl	8009628 <__mcmp>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	dcb6      	bgt.n	8008cd2 <_dtoa_r+0xa42>
 8008d64:	d102      	bne.n	8008d6c <_dtoa_r+0xadc>
 8008d66:	f018 0f01 	tst.w	r8, #1
 8008d6a:	d1b2      	bne.n	8008cd2 <_dtoa_r+0xa42>
 8008d6c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008d70:	2b30      	cmp	r3, #48	; 0x30
 8008d72:	f105 32ff 	add.w	r2, r5, #4294967295
 8008d76:	f47f af0a 	bne.w	8008b8e <_dtoa_r+0x8fe>
 8008d7a:	4615      	mov	r5, r2
 8008d7c:	e7f6      	b.n	8008d6c <_dtoa_r+0xadc>
 8008d7e:	4593      	cmp	fp, r2
 8008d80:	d105      	bne.n	8008d8e <_dtoa_r+0xafe>
 8008d82:	2331      	movs	r3, #49	; 0x31
 8008d84:	f10a 0a01 	add.w	sl, sl, #1
 8008d88:	f88b 3000 	strb.w	r3, [fp]
 8008d8c:	e6ff      	b.n	8008b8e <_dtoa_r+0x8fe>
 8008d8e:	4615      	mov	r5, r2
 8008d90:	e79f      	b.n	8008cd2 <_dtoa_r+0xa42>
 8008d92:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008df8 <_dtoa_r+0xb68>
 8008d96:	e007      	b.n	8008da8 <_dtoa_r+0xb18>
 8008d98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d9a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008dfc <_dtoa_r+0xb6c>
 8008d9e:	b11b      	cbz	r3, 8008da8 <_dtoa_r+0xb18>
 8008da0:	f10b 0308 	add.w	r3, fp, #8
 8008da4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008da6:	6013      	str	r3, [r2, #0]
 8008da8:	4658      	mov	r0, fp
 8008daa:	b017      	add	sp, #92	; 0x5c
 8008dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008db0:	9b06      	ldr	r3, [sp, #24]
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	f77f ae35 	ble.w	8008a22 <_dtoa_r+0x792>
 8008db8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008dba:	9307      	str	r3, [sp, #28]
 8008dbc:	e649      	b.n	8008a52 <_dtoa_r+0x7c2>
 8008dbe:	9b02      	ldr	r3, [sp, #8]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	dc03      	bgt.n	8008dcc <_dtoa_r+0xb3c>
 8008dc4:	9b06      	ldr	r3, [sp, #24]
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	f73f aecc 	bgt.w	8008b64 <_dtoa_r+0x8d4>
 8008dcc:	465d      	mov	r5, fp
 8008dce:	4639      	mov	r1, r7
 8008dd0:	9804      	ldr	r0, [sp, #16]
 8008dd2:	f7ff f9cf 	bl	8008174 <quorem>
 8008dd6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008dda:	f805 8b01 	strb.w	r8, [r5], #1
 8008dde:	9a02      	ldr	r2, [sp, #8]
 8008de0:	eba5 030b 	sub.w	r3, r5, fp
 8008de4:	429a      	cmp	r2, r3
 8008de6:	ddb0      	ble.n	8008d4a <_dtoa_r+0xaba>
 8008de8:	2300      	movs	r3, #0
 8008dea:	220a      	movs	r2, #10
 8008dec:	9904      	ldr	r1, [sp, #16]
 8008dee:	4620      	mov	r0, r4
 8008df0:	f000 fa50 	bl	8009294 <__multadd>
 8008df4:	9004      	str	r0, [sp, #16]
 8008df6:	e7ea      	b.n	8008dce <_dtoa_r+0xb3e>
 8008df8:	0800c054 	.word	0x0800c054
 8008dfc:	0800c078 	.word	0x0800c078

08008e00 <__sflush_r>:
 8008e00:	898a      	ldrh	r2, [r1, #12]
 8008e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e06:	4605      	mov	r5, r0
 8008e08:	0710      	lsls	r0, r2, #28
 8008e0a:	460c      	mov	r4, r1
 8008e0c:	d458      	bmi.n	8008ec0 <__sflush_r+0xc0>
 8008e0e:	684b      	ldr	r3, [r1, #4]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	dc05      	bgt.n	8008e20 <__sflush_r+0x20>
 8008e14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	dc02      	bgt.n	8008e20 <__sflush_r+0x20>
 8008e1a:	2000      	movs	r0, #0
 8008e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e22:	2e00      	cmp	r6, #0
 8008e24:	d0f9      	beq.n	8008e1a <__sflush_r+0x1a>
 8008e26:	2300      	movs	r3, #0
 8008e28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008e2c:	682f      	ldr	r7, [r5, #0]
 8008e2e:	6a21      	ldr	r1, [r4, #32]
 8008e30:	602b      	str	r3, [r5, #0]
 8008e32:	d032      	beq.n	8008e9a <__sflush_r+0x9a>
 8008e34:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e36:	89a3      	ldrh	r3, [r4, #12]
 8008e38:	075a      	lsls	r2, r3, #29
 8008e3a:	d505      	bpl.n	8008e48 <__sflush_r+0x48>
 8008e3c:	6863      	ldr	r3, [r4, #4]
 8008e3e:	1ac0      	subs	r0, r0, r3
 8008e40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e42:	b10b      	cbz	r3, 8008e48 <__sflush_r+0x48>
 8008e44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e46:	1ac0      	subs	r0, r0, r3
 8008e48:	2300      	movs	r3, #0
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e4e:	6a21      	ldr	r1, [r4, #32]
 8008e50:	4628      	mov	r0, r5
 8008e52:	47b0      	blx	r6
 8008e54:	1c43      	adds	r3, r0, #1
 8008e56:	89a3      	ldrh	r3, [r4, #12]
 8008e58:	d106      	bne.n	8008e68 <__sflush_r+0x68>
 8008e5a:	6829      	ldr	r1, [r5, #0]
 8008e5c:	291d      	cmp	r1, #29
 8008e5e:	d848      	bhi.n	8008ef2 <__sflush_r+0xf2>
 8008e60:	4a29      	ldr	r2, [pc, #164]	; (8008f08 <__sflush_r+0x108>)
 8008e62:	40ca      	lsrs	r2, r1
 8008e64:	07d6      	lsls	r6, r2, #31
 8008e66:	d544      	bpl.n	8008ef2 <__sflush_r+0xf2>
 8008e68:	2200      	movs	r2, #0
 8008e6a:	6062      	str	r2, [r4, #4]
 8008e6c:	04d9      	lsls	r1, r3, #19
 8008e6e:	6922      	ldr	r2, [r4, #16]
 8008e70:	6022      	str	r2, [r4, #0]
 8008e72:	d504      	bpl.n	8008e7e <__sflush_r+0x7e>
 8008e74:	1c42      	adds	r2, r0, #1
 8008e76:	d101      	bne.n	8008e7c <__sflush_r+0x7c>
 8008e78:	682b      	ldr	r3, [r5, #0]
 8008e7a:	b903      	cbnz	r3, 8008e7e <__sflush_r+0x7e>
 8008e7c:	6560      	str	r0, [r4, #84]	; 0x54
 8008e7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e80:	602f      	str	r7, [r5, #0]
 8008e82:	2900      	cmp	r1, #0
 8008e84:	d0c9      	beq.n	8008e1a <__sflush_r+0x1a>
 8008e86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e8a:	4299      	cmp	r1, r3
 8008e8c:	d002      	beq.n	8008e94 <__sflush_r+0x94>
 8008e8e:	4628      	mov	r0, r5
 8008e90:	f000 fc9e 	bl	80097d0 <_free_r>
 8008e94:	2000      	movs	r0, #0
 8008e96:	6360      	str	r0, [r4, #52]	; 0x34
 8008e98:	e7c0      	b.n	8008e1c <__sflush_r+0x1c>
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	47b0      	blx	r6
 8008ea0:	1c41      	adds	r1, r0, #1
 8008ea2:	d1c8      	bne.n	8008e36 <__sflush_r+0x36>
 8008ea4:	682b      	ldr	r3, [r5, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d0c5      	beq.n	8008e36 <__sflush_r+0x36>
 8008eaa:	2b1d      	cmp	r3, #29
 8008eac:	d001      	beq.n	8008eb2 <__sflush_r+0xb2>
 8008eae:	2b16      	cmp	r3, #22
 8008eb0:	d101      	bne.n	8008eb6 <__sflush_r+0xb6>
 8008eb2:	602f      	str	r7, [r5, #0]
 8008eb4:	e7b1      	b.n	8008e1a <__sflush_r+0x1a>
 8008eb6:	89a3      	ldrh	r3, [r4, #12]
 8008eb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ebc:	81a3      	strh	r3, [r4, #12]
 8008ebe:	e7ad      	b.n	8008e1c <__sflush_r+0x1c>
 8008ec0:	690f      	ldr	r7, [r1, #16]
 8008ec2:	2f00      	cmp	r7, #0
 8008ec4:	d0a9      	beq.n	8008e1a <__sflush_r+0x1a>
 8008ec6:	0793      	lsls	r3, r2, #30
 8008ec8:	680e      	ldr	r6, [r1, #0]
 8008eca:	bf08      	it	eq
 8008ecc:	694b      	ldreq	r3, [r1, #20]
 8008ece:	600f      	str	r7, [r1, #0]
 8008ed0:	bf18      	it	ne
 8008ed2:	2300      	movne	r3, #0
 8008ed4:	eba6 0807 	sub.w	r8, r6, r7
 8008ed8:	608b      	str	r3, [r1, #8]
 8008eda:	f1b8 0f00 	cmp.w	r8, #0
 8008ede:	dd9c      	ble.n	8008e1a <__sflush_r+0x1a>
 8008ee0:	4643      	mov	r3, r8
 8008ee2:	463a      	mov	r2, r7
 8008ee4:	6a21      	ldr	r1, [r4, #32]
 8008ee6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ee8:	4628      	mov	r0, r5
 8008eea:	47b0      	blx	r6
 8008eec:	2800      	cmp	r0, #0
 8008eee:	dc06      	bgt.n	8008efe <__sflush_r+0xfe>
 8008ef0:	89a3      	ldrh	r3, [r4, #12]
 8008ef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ef6:	81a3      	strh	r3, [r4, #12]
 8008ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8008efc:	e78e      	b.n	8008e1c <__sflush_r+0x1c>
 8008efe:	4407      	add	r7, r0
 8008f00:	eba8 0800 	sub.w	r8, r8, r0
 8008f04:	e7e9      	b.n	8008eda <__sflush_r+0xda>
 8008f06:	bf00      	nop
 8008f08:	20400001 	.word	0x20400001

08008f0c <_fflush_r>:
 8008f0c:	b538      	push	{r3, r4, r5, lr}
 8008f0e:	690b      	ldr	r3, [r1, #16]
 8008f10:	4605      	mov	r5, r0
 8008f12:	460c      	mov	r4, r1
 8008f14:	b1db      	cbz	r3, 8008f4e <_fflush_r+0x42>
 8008f16:	b118      	cbz	r0, 8008f20 <_fflush_r+0x14>
 8008f18:	6983      	ldr	r3, [r0, #24]
 8008f1a:	b90b      	cbnz	r3, 8008f20 <_fflush_r+0x14>
 8008f1c:	f000 f860 	bl	8008fe0 <__sinit>
 8008f20:	4b0c      	ldr	r3, [pc, #48]	; (8008f54 <_fflush_r+0x48>)
 8008f22:	429c      	cmp	r4, r3
 8008f24:	d109      	bne.n	8008f3a <_fflush_r+0x2e>
 8008f26:	686c      	ldr	r4, [r5, #4]
 8008f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f2c:	b17b      	cbz	r3, 8008f4e <_fflush_r+0x42>
 8008f2e:	4621      	mov	r1, r4
 8008f30:	4628      	mov	r0, r5
 8008f32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f36:	f7ff bf63 	b.w	8008e00 <__sflush_r>
 8008f3a:	4b07      	ldr	r3, [pc, #28]	; (8008f58 <_fflush_r+0x4c>)
 8008f3c:	429c      	cmp	r4, r3
 8008f3e:	d101      	bne.n	8008f44 <_fflush_r+0x38>
 8008f40:	68ac      	ldr	r4, [r5, #8]
 8008f42:	e7f1      	b.n	8008f28 <_fflush_r+0x1c>
 8008f44:	4b05      	ldr	r3, [pc, #20]	; (8008f5c <_fflush_r+0x50>)
 8008f46:	429c      	cmp	r4, r3
 8008f48:	bf08      	it	eq
 8008f4a:	68ec      	ldreq	r4, [r5, #12]
 8008f4c:	e7ec      	b.n	8008f28 <_fflush_r+0x1c>
 8008f4e:	2000      	movs	r0, #0
 8008f50:	bd38      	pop	{r3, r4, r5, pc}
 8008f52:	bf00      	nop
 8008f54:	0800c0a8 	.word	0x0800c0a8
 8008f58:	0800c0c8 	.word	0x0800c0c8
 8008f5c:	0800c088 	.word	0x0800c088

08008f60 <std>:
 8008f60:	2300      	movs	r3, #0
 8008f62:	b510      	push	{r4, lr}
 8008f64:	4604      	mov	r4, r0
 8008f66:	e9c0 3300 	strd	r3, r3, [r0]
 8008f6a:	6083      	str	r3, [r0, #8]
 8008f6c:	8181      	strh	r1, [r0, #12]
 8008f6e:	6643      	str	r3, [r0, #100]	; 0x64
 8008f70:	81c2      	strh	r2, [r0, #14]
 8008f72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f76:	6183      	str	r3, [r0, #24]
 8008f78:	4619      	mov	r1, r3
 8008f7a:	2208      	movs	r2, #8
 8008f7c:	305c      	adds	r0, #92	; 0x5c
 8008f7e:	f7fe faa3 	bl	80074c8 <memset>
 8008f82:	4b05      	ldr	r3, [pc, #20]	; (8008f98 <std+0x38>)
 8008f84:	6263      	str	r3, [r4, #36]	; 0x24
 8008f86:	4b05      	ldr	r3, [pc, #20]	; (8008f9c <std+0x3c>)
 8008f88:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f8a:	4b05      	ldr	r3, [pc, #20]	; (8008fa0 <std+0x40>)
 8008f8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f8e:	4b05      	ldr	r3, [pc, #20]	; (8008fa4 <std+0x44>)
 8008f90:	6224      	str	r4, [r4, #32]
 8008f92:	6323      	str	r3, [r4, #48]	; 0x30
 8008f94:	bd10      	pop	{r4, pc}
 8008f96:	bf00      	nop
 8008f98:	08009bc1 	.word	0x08009bc1
 8008f9c:	08009be3 	.word	0x08009be3
 8008fa0:	08009c1b 	.word	0x08009c1b
 8008fa4:	08009c3f 	.word	0x08009c3f

08008fa8 <_cleanup_r>:
 8008fa8:	4901      	ldr	r1, [pc, #4]	; (8008fb0 <_cleanup_r+0x8>)
 8008faa:	f000 b885 	b.w	80090b8 <_fwalk_reent>
 8008fae:	bf00      	nop
 8008fb0:	08008f0d 	.word	0x08008f0d

08008fb4 <__sfmoreglue>:
 8008fb4:	b570      	push	{r4, r5, r6, lr}
 8008fb6:	1e4a      	subs	r2, r1, #1
 8008fb8:	2568      	movs	r5, #104	; 0x68
 8008fba:	4355      	muls	r5, r2
 8008fbc:	460e      	mov	r6, r1
 8008fbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008fc2:	f000 fc53 	bl	800986c <_malloc_r>
 8008fc6:	4604      	mov	r4, r0
 8008fc8:	b140      	cbz	r0, 8008fdc <__sfmoreglue+0x28>
 8008fca:	2100      	movs	r1, #0
 8008fcc:	e9c0 1600 	strd	r1, r6, [r0]
 8008fd0:	300c      	adds	r0, #12
 8008fd2:	60a0      	str	r0, [r4, #8]
 8008fd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008fd8:	f7fe fa76 	bl	80074c8 <memset>
 8008fdc:	4620      	mov	r0, r4
 8008fde:	bd70      	pop	{r4, r5, r6, pc}

08008fe0 <__sinit>:
 8008fe0:	6983      	ldr	r3, [r0, #24]
 8008fe2:	b510      	push	{r4, lr}
 8008fe4:	4604      	mov	r4, r0
 8008fe6:	bb33      	cbnz	r3, 8009036 <__sinit+0x56>
 8008fe8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008fec:	6503      	str	r3, [r0, #80]	; 0x50
 8008fee:	4b12      	ldr	r3, [pc, #72]	; (8009038 <__sinit+0x58>)
 8008ff0:	4a12      	ldr	r2, [pc, #72]	; (800903c <__sinit+0x5c>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	6282      	str	r2, [r0, #40]	; 0x28
 8008ff6:	4298      	cmp	r0, r3
 8008ff8:	bf04      	itt	eq
 8008ffa:	2301      	moveq	r3, #1
 8008ffc:	6183      	streq	r3, [r0, #24]
 8008ffe:	f000 f81f 	bl	8009040 <__sfp>
 8009002:	6060      	str	r0, [r4, #4]
 8009004:	4620      	mov	r0, r4
 8009006:	f000 f81b 	bl	8009040 <__sfp>
 800900a:	60a0      	str	r0, [r4, #8]
 800900c:	4620      	mov	r0, r4
 800900e:	f000 f817 	bl	8009040 <__sfp>
 8009012:	2200      	movs	r2, #0
 8009014:	60e0      	str	r0, [r4, #12]
 8009016:	2104      	movs	r1, #4
 8009018:	6860      	ldr	r0, [r4, #4]
 800901a:	f7ff ffa1 	bl	8008f60 <std>
 800901e:	2201      	movs	r2, #1
 8009020:	2109      	movs	r1, #9
 8009022:	68a0      	ldr	r0, [r4, #8]
 8009024:	f7ff ff9c 	bl	8008f60 <std>
 8009028:	2202      	movs	r2, #2
 800902a:	2112      	movs	r1, #18
 800902c:	68e0      	ldr	r0, [r4, #12]
 800902e:	f7ff ff97 	bl	8008f60 <std>
 8009032:	2301      	movs	r3, #1
 8009034:	61a3      	str	r3, [r4, #24]
 8009036:	bd10      	pop	{r4, pc}
 8009038:	0800c040 	.word	0x0800c040
 800903c:	08008fa9 	.word	0x08008fa9

08009040 <__sfp>:
 8009040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009042:	4b1b      	ldr	r3, [pc, #108]	; (80090b0 <__sfp+0x70>)
 8009044:	681e      	ldr	r6, [r3, #0]
 8009046:	69b3      	ldr	r3, [r6, #24]
 8009048:	4607      	mov	r7, r0
 800904a:	b913      	cbnz	r3, 8009052 <__sfp+0x12>
 800904c:	4630      	mov	r0, r6
 800904e:	f7ff ffc7 	bl	8008fe0 <__sinit>
 8009052:	3648      	adds	r6, #72	; 0x48
 8009054:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009058:	3b01      	subs	r3, #1
 800905a:	d503      	bpl.n	8009064 <__sfp+0x24>
 800905c:	6833      	ldr	r3, [r6, #0]
 800905e:	b133      	cbz	r3, 800906e <__sfp+0x2e>
 8009060:	6836      	ldr	r6, [r6, #0]
 8009062:	e7f7      	b.n	8009054 <__sfp+0x14>
 8009064:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009068:	b16d      	cbz	r5, 8009086 <__sfp+0x46>
 800906a:	3468      	adds	r4, #104	; 0x68
 800906c:	e7f4      	b.n	8009058 <__sfp+0x18>
 800906e:	2104      	movs	r1, #4
 8009070:	4638      	mov	r0, r7
 8009072:	f7ff ff9f 	bl	8008fb4 <__sfmoreglue>
 8009076:	6030      	str	r0, [r6, #0]
 8009078:	2800      	cmp	r0, #0
 800907a:	d1f1      	bne.n	8009060 <__sfp+0x20>
 800907c:	230c      	movs	r3, #12
 800907e:	603b      	str	r3, [r7, #0]
 8009080:	4604      	mov	r4, r0
 8009082:	4620      	mov	r0, r4
 8009084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009086:	4b0b      	ldr	r3, [pc, #44]	; (80090b4 <__sfp+0x74>)
 8009088:	6665      	str	r5, [r4, #100]	; 0x64
 800908a:	e9c4 5500 	strd	r5, r5, [r4]
 800908e:	60a5      	str	r5, [r4, #8]
 8009090:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009094:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009098:	2208      	movs	r2, #8
 800909a:	4629      	mov	r1, r5
 800909c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80090a0:	f7fe fa12 	bl	80074c8 <memset>
 80090a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80090a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80090ac:	e7e9      	b.n	8009082 <__sfp+0x42>
 80090ae:	bf00      	nop
 80090b0:	0800c040 	.word	0x0800c040
 80090b4:	ffff0001 	.word	0xffff0001

080090b8 <_fwalk_reent>:
 80090b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090bc:	4680      	mov	r8, r0
 80090be:	4689      	mov	r9, r1
 80090c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80090c4:	2600      	movs	r6, #0
 80090c6:	b914      	cbnz	r4, 80090ce <_fwalk_reent+0x16>
 80090c8:	4630      	mov	r0, r6
 80090ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090ce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80090d2:	3f01      	subs	r7, #1
 80090d4:	d501      	bpl.n	80090da <_fwalk_reent+0x22>
 80090d6:	6824      	ldr	r4, [r4, #0]
 80090d8:	e7f5      	b.n	80090c6 <_fwalk_reent+0xe>
 80090da:	89ab      	ldrh	r3, [r5, #12]
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d907      	bls.n	80090f0 <_fwalk_reent+0x38>
 80090e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090e4:	3301      	adds	r3, #1
 80090e6:	d003      	beq.n	80090f0 <_fwalk_reent+0x38>
 80090e8:	4629      	mov	r1, r5
 80090ea:	4640      	mov	r0, r8
 80090ec:	47c8      	blx	r9
 80090ee:	4306      	orrs	r6, r0
 80090f0:	3568      	adds	r5, #104	; 0x68
 80090f2:	e7ee      	b.n	80090d2 <_fwalk_reent+0x1a>

080090f4 <_localeconv_r>:
 80090f4:	4b04      	ldr	r3, [pc, #16]	; (8009108 <_localeconv_r+0x14>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	6a18      	ldr	r0, [r3, #32]
 80090fa:	4b04      	ldr	r3, [pc, #16]	; (800910c <_localeconv_r+0x18>)
 80090fc:	2800      	cmp	r0, #0
 80090fe:	bf08      	it	eq
 8009100:	4618      	moveq	r0, r3
 8009102:	30f0      	adds	r0, #240	; 0xf0
 8009104:	4770      	bx	lr
 8009106:	bf00      	nop
 8009108:	20000028 	.word	0x20000028
 800910c:	2000008c 	.word	0x2000008c

08009110 <__swhatbuf_r>:
 8009110:	b570      	push	{r4, r5, r6, lr}
 8009112:	460e      	mov	r6, r1
 8009114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009118:	2900      	cmp	r1, #0
 800911a:	b096      	sub	sp, #88	; 0x58
 800911c:	4614      	mov	r4, r2
 800911e:	461d      	mov	r5, r3
 8009120:	da07      	bge.n	8009132 <__swhatbuf_r+0x22>
 8009122:	2300      	movs	r3, #0
 8009124:	602b      	str	r3, [r5, #0]
 8009126:	89b3      	ldrh	r3, [r6, #12]
 8009128:	061a      	lsls	r2, r3, #24
 800912a:	d410      	bmi.n	800914e <__swhatbuf_r+0x3e>
 800912c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009130:	e00e      	b.n	8009150 <__swhatbuf_r+0x40>
 8009132:	466a      	mov	r2, sp
 8009134:	f000 fdaa 	bl	8009c8c <_fstat_r>
 8009138:	2800      	cmp	r0, #0
 800913a:	dbf2      	blt.n	8009122 <__swhatbuf_r+0x12>
 800913c:	9a01      	ldr	r2, [sp, #4]
 800913e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009142:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009146:	425a      	negs	r2, r3
 8009148:	415a      	adcs	r2, r3
 800914a:	602a      	str	r2, [r5, #0]
 800914c:	e7ee      	b.n	800912c <__swhatbuf_r+0x1c>
 800914e:	2340      	movs	r3, #64	; 0x40
 8009150:	2000      	movs	r0, #0
 8009152:	6023      	str	r3, [r4, #0]
 8009154:	b016      	add	sp, #88	; 0x58
 8009156:	bd70      	pop	{r4, r5, r6, pc}

08009158 <__smakebuf_r>:
 8009158:	898b      	ldrh	r3, [r1, #12]
 800915a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800915c:	079d      	lsls	r5, r3, #30
 800915e:	4606      	mov	r6, r0
 8009160:	460c      	mov	r4, r1
 8009162:	d507      	bpl.n	8009174 <__smakebuf_r+0x1c>
 8009164:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009168:	6023      	str	r3, [r4, #0]
 800916a:	6123      	str	r3, [r4, #16]
 800916c:	2301      	movs	r3, #1
 800916e:	6163      	str	r3, [r4, #20]
 8009170:	b002      	add	sp, #8
 8009172:	bd70      	pop	{r4, r5, r6, pc}
 8009174:	ab01      	add	r3, sp, #4
 8009176:	466a      	mov	r2, sp
 8009178:	f7ff ffca 	bl	8009110 <__swhatbuf_r>
 800917c:	9900      	ldr	r1, [sp, #0]
 800917e:	4605      	mov	r5, r0
 8009180:	4630      	mov	r0, r6
 8009182:	f000 fb73 	bl	800986c <_malloc_r>
 8009186:	b948      	cbnz	r0, 800919c <__smakebuf_r+0x44>
 8009188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800918c:	059a      	lsls	r2, r3, #22
 800918e:	d4ef      	bmi.n	8009170 <__smakebuf_r+0x18>
 8009190:	f023 0303 	bic.w	r3, r3, #3
 8009194:	f043 0302 	orr.w	r3, r3, #2
 8009198:	81a3      	strh	r3, [r4, #12]
 800919a:	e7e3      	b.n	8009164 <__smakebuf_r+0xc>
 800919c:	4b0d      	ldr	r3, [pc, #52]	; (80091d4 <__smakebuf_r+0x7c>)
 800919e:	62b3      	str	r3, [r6, #40]	; 0x28
 80091a0:	89a3      	ldrh	r3, [r4, #12]
 80091a2:	6020      	str	r0, [r4, #0]
 80091a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091a8:	81a3      	strh	r3, [r4, #12]
 80091aa:	9b00      	ldr	r3, [sp, #0]
 80091ac:	6163      	str	r3, [r4, #20]
 80091ae:	9b01      	ldr	r3, [sp, #4]
 80091b0:	6120      	str	r0, [r4, #16]
 80091b2:	b15b      	cbz	r3, 80091cc <__smakebuf_r+0x74>
 80091b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091b8:	4630      	mov	r0, r6
 80091ba:	f000 fd79 	bl	8009cb0 <_isatty_r>
 80091be:	b128      	cbz	r0, 80091cc <__smakebuf_r+0x74>
 80091c0:	89a3      	ldrh	r3, [r4, #12]
 80091c2:	f023 0303 	bic.w	r3, r3, #3
 80091c6:	f043 0301 	orr.w	r3, r3, #1
 80091ca:	81a3      	strh	r3, [r4, #12]
 80091cc:	89a3      	ldrh	r3, [r4, #12]
 80091ce:	431d      	orrs	r5, r3
 80091d0:	81a5      	strh	r5, [r4, #12]
 80091d2:	e7cd      	b.n	8009170 <__smakebuf_r+0x18>
 80091d4:	08008fa9 	.word	0x08008fa9

080091d8 <malloc>:
 80091d8:	4b02      	ldr	r3, [pc, #8]	; (80091e4 <malloc+0xc>)
 80091da:	4601      	mov	r1, r0
 80091dc:	6818      	ldr	r0, [r3, #0]
 80091de:	f000 bb45 	b.w	800986c <_malloc_r>
 80091e2:	bf00      	nop
 80091e4:	20000028 	.word	0x20000028

080091e8 <memcpy>:
 80091e8:	b510      	push	{r4, lr}
 80091ea:	1e43      	subs	r3, r0, #1
 80091ec:	440a      	add	r2, r1
 80091ee:	4291      	cmp	r1, r2
 80091f0:	d100      	bne.n	80091f4 <memcpy+0xc>
 80091f2:	bd10      	pop	{r4, pc}
 80091f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091fc:	e7f7      	b.n	80091ee <memcpy+0x6>

080091fe <_Balloc>:
 80091fe:	b570      	push	{r4, r5, r6, lr}
 8009200:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009202:	4604      	mov	r4, r0
 8009204:	460e      	mov	r6, r1
 8009206:	b93d      	cbnz	r5, 8009218 <_Balloc+0x1a>
 8009208:	2010      	movs	r0, #16
 800920a:	f7ff ffe5 	bl	80091d8 <malloc>
 800920e:	6260      	str	r0, [r4, #36]	; 0x24
 8009210:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009214:	6005      	str	r5, [r0, #0]
 8009216:	60c5      	str	r5, [r0, #12]
 8009218:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800921a:	68eb      	ldr	r3, [r5, #12]
 800921c:	b183      	cbz	r3, 8009240 <_Balloc+0x42>
 800921e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009226:	b9b8      	cbnz	r0, 8009258 <_Balloc+0x5a>
 8009228:	2101      	movs	r1, #1
 800922a:	fa01 f506 	lsl.w	r5, r1, r6
 800922e:	1d6a      	adds	r2, r5, #5
 8009230:	0092      	lsls	r2, r2, #2
 8009232:	4620      	mov	r0, r4
 8009234:	f000 fabe 	bl	80097b4 <_calloc_r>
 8009238:	b160      	cbz	r0, 8009254 <_Balloc+0x56>
 800923a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800923e:	e00e      	b.n	800925e <_Balloc+0x60>
 8009240:	2221      	movs	r2, #33	; 0x21
 8009242:	2104      	movs	r1, #4
 8009244:	4620      	mov	r0, r4
 8009246:	f000 fab5 	bl	80097b4 <_calloc_r>
 800924a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800924c:	60e8      	str	r0, [r5, #12]
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d1e4      	bne.n	800921e <_Balloc+0x20>
 8009254:	2000      	movs	r0, #0
 8009256:	bd70      	pop	{r4, r5, r6, pc}
 8009258:	6802      	ldr	r2, [r0, #0]
 800925a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800925e:	2300      	movs	r3, #0
 8009260:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009264:	e7f7      	b.n	8009256 <_Balloc+0x58>

08009266 <_Bfree>:
 8009266:	b570      	push	{r4, r5, r6, lr}
 8009268:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800926a:	4606      	mov	r6, r0
 800926c:	460d      	mov	r5, r1
 800926e:	b93c      	cbnz	r4, 8009280 <_Bfree+0x1a>
 8009270:	2010      	movs	r0, #16
 8009272:	f7ff ffb1 	bl	80091d8 <malloc>
 8009276:	6270      	str	r0, [r6, #36]	; 0x24
 8009278:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800927c:	6004      	str	r4, [r0, #0]
 800927e:	60c4      	str	r4, [r0, #12]
 8009280:	b13d      	cbz	r5, 8009292 <_Bfree+0x2c>
 8009282:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009284:	686a      	ldr	r2, [r5, #4]
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800928c:	6029      	str	r1, [r5, #0]
 800928e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009292:	bd70      	pop	{r4, r5, r6, pc}

08009294 <__multadd>:
 8009294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009298:	690d      	ldr	r5, [r1, #16]
 800929a:	461f      	mov	r7, r3
 800929c:	4606      	mov	r6, r0
 800929e:	460c      	mov	r4, r1
 80092a0:	f101 0c14 	add.w	ip, r1, #20
 80092a4:	2300      	movs	r3, #0
 80092a6:	f8dc 0000 	ldr.w	r0, [ip]
 80092aa:	b281      	uxth	r1, r0
 80092ac:	fb02 7101 	mla	r1, r2, r1, r7
 80092b0:	0c0f      	lsrs	r7, r1, #16
 80092b2:	0c00      	lsrs	r0, r0, #16
 80092b4:	fb02 7000 	mla	r0, r2, r0, r7
 80092b8:	b289      	uxth	r1, r1
 80092ba:	3301      	adds	r3, #1
 80092bc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80092c0:	429d      	cmp	r5, r3
 80092c2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80092c6:	f84c 1b04 	str.w	r1, [ip], #4
 80092ca:	dcec      	bgt.n	80092a6 <__multadd+0x12>
 80092cc:	b1d7      	cbz	r7, 8009304 <__multadd+0x70>
 80092ce:	68a3      	ldr	r3, [r4, #8]
 80092d0:	42ab      	cmp	r3, r5
 80092d2:	dc12      	bgt.n	80092fa <__multadd+0x66>
 80092d4:	6861      	ldr	r1, [r4, #4]
 80092d6:	4630      	mov	r0, r6
 80092d8:	3101      	adds	r1, #1
 80092da:	f7ff ff90 	bl	80091fe <_Balloc>
 80092de:	6922      	ldr	r2, [r4, #16]
 80092e0:	3202      	adds	r2, #2
 80092e2:	f104 010c 	add.w	r1, r4, #12
 80092e6:	4680      	mov	r8, r0
 80092e8:	0092      	lsls	r2, r2, #2
 80092ea:	300c      	adds	r0, #12
 80092ec:	f7ff ff7c 	bl	80091e8 <memcpy>
 80092f0:	4621      	mov	r1, r4
 80092f2:	4630      	mov	r0, r6
 80092f4:	f7ff ffb7 	bl	8009266 <_Bfree>
 80092f8:	4644      	mov	r4, r8
 80092fa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80092fe:	3501      	adds	r5, #1
 8009300:	615f      	str	r7, [r3, #20]
 8009302:	6125      	str	r5, [r4, #16]
 8009304:	4620      	mov	r0, r4
 8009306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800930a <__hi0bits>:
 800930a:	0c02      	lsrs	r2, r0, #16
 800930c:	0412      	lsls	r2, r2, #16
 800930e:	4603      	mov	r3, r0
 8009310:	b9b2      	cbnz	r2, 8009340 <__hi0bits+0x36>
 8009312:	0403      	lsls	r3, r0, #16
 8009314:	2010      	movs	r0, #16
 8009316:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800931a:	bf04      	itt	eq
 800931c:	021b      	lsleq	r3, r3, #8
 800931e:	3008      	addeq	r0, #8
 8009320:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009324:	bf04      	itt	eq
 8009326:	011b      	lsleq	r3, r3, #4
 8009328:	3004      	addeq	r0, #4
 800932a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800932e:	bf04      	itt	eq
 8009330:	009b      	lsleq	r3, r3, #2
 8009332:	3002      	addeq	r0, #2
 8009334:	2b00      	cmp	r3, #0
 8009336:	db06      	blt.n	8009346 <__hi0bits+0x3c>
 8009338:	005b      	lsls	r3, r3, #1
 800933a:	d503      	bpl.n	8009344 <__hi0bits+0x3a>
 800933c:	3001      	adds	r0, #1
 800933e:	4770      	bx	lr
 8009340:	2000      	movs	r0, #0
 8009342:	e7e8      	b.n	8009316 <__hi0bits+0xc>
 8009344:	2020      	movs	r0, #32
 8009346:	4770      	bx	lr

08009348 <__lo0bits>:
 8009348:	6803      	ldr	r3, [r0, #0]
 800934a:	f013 0207 	ands.w	r2, r3, #7
 800934e:	4601      	mov	r1, r0
 8009350:	d00b      	beq.n	800936a <__lo0bits+0x22>
 8009352:	07da      	lsls	r2, r3, #31
 8009354:	d423      	bmi.n	800939e <__lo0bits+0x56>
 8009356:	0798      	lsls	r0, r3, #30
 8009358:	bf49      	itett	mi
 800935a:	085b      	lsrmi	r3, r3, #1
 800935c:	089b      	lsrpl	r3, r3, #2
 800935e:	2001      	movmi	r0, #1
 8009360:	600b      	strmi	r3, [r1, #0]
 8009362:	bf5c      	itt	pl
 8009364:	600b      	strpl	r3, [r1, #0]
 8009366:	2002      	movpl	r0, #2
 8009368:	4770      	bx	lr
 800936a:	b298      	uxth	r0, r3
 800936c:	b9a8      	cbnz	r0, 800939a <__lo0bits+0x52>
 800936e:	0c1b      	lsrs	r3, r3, #16
 8009370:	2010      	movs	r0, #16
 8009372:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009376:	bf04      	itt	eq
 8009378:	0a1b      	lsreq	r3, r3, #8
 800937a:	3008      	addeq	r0, #8
 800937c:	071a      	lsls	r2, r3, #28
 800937e:	bf04      	itt	eq
 8009380:	091b      	lsreq	r3, r3, #4
 8009382:	3004      	addeq	r0, #4
 8009384:	079a      	lsls	r2, r3, #30
 8009386:	bf04      	itt	eq
 8009388:	089b      	lsreq	r3, r3, #2
 800938a:	3002      	addeq	r0, #2
 800938c:	07da      	lsls	r2, r3, #31
 800938e:	d402      	bmi.n	8009396 <__lo0bits+0x4e>
 8009390:	085b      	lsrs	r3, r3, #1
 8009392:	d006      	beq.n	80093a2 <__lo0bits+0x5a>
 8009394:	3001      	adds	r0, #1
 8009396:	600b      	str	r3, [r1, #0]
 8009398:	4770      	bx	lr
 800939a:	4610      	mov	r0, r2
 800939c:	e7e9      	b.n	8009372 <__lo0bits+0x2a>
 800939e:	2000      	movs	r0, #0
 80093a0:	4770      	bx	lr
 80093a2:	2020      	movs	r0, #32
 80093a4:	4770      	bx	lr

080093a6 <__i2b>:
 80093a6:	b510      	push	{r4, lr}
 80093a8:	460c      	mov	r4, r1
 80093aa:	2101      	movs	r1, #1
 80093ac:	f7ff ff27 	bl	80091fe <_Balloc>
 80093b0:	2201      	movs	r2, #1
 80093b2:	6144      	str	r4, [r0, #20]
 80093b4:	6102      	str	r2, [r0, #16]
 80093b6:	bd10      	pop	{r4, pc}

080093b8 <__multiply>:
 80093b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093bc:	4614      	mov	r4, r2
 80093be:	690a      	ldr	r2, [r1, #16]
 80093c0:	6923      	ldr	r3, [r4, #16]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	bfb8      	it	lt
 80093c6:	460b      	movlt	r3, r1
 80093c8:	4688      	mov	r8, r1
 80093ca:	bfbc      	itt	lt
 80093cc:	46a0      	movlt	r8, r4
 80093ce:	461c      	movlt	r4, r3
 80093d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80093d4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80093d8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80093dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80093e0:	eb07 0609 	add.w	r6, r7, r9
 80093e4:	42b3      	cmp	r3, r6
 80093e6:	bfb8      	it	lt
 80093e8:	3101      	addlt	r1, #1
 80093ea:	f7ff ff08 	bl	80091fe <_Balloc>
 80093ee:	f100 0514 	add.w	r5, r0, #20
 80093f2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80093f6:	462b      	mov	r3, r5
 80093f8:	2200      	movs	r2, #0
 80093fa:	4573      	cmp	r3, lr
 80093fc:	d316      	bcc.n	800942c <__multiply+0x74>
 80093fe:	f104 0214 	add.w	r2, r4, #20
 8009402:	f108 0114 	add.w	r1, r8, #20
 8009406:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800940a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800940e:	9300      	str	r3, [sp, #0]
 8009410:	9b00      	ldr	r3, [sp, #0]
 8009412:	9201      	str	r2, [sp, #4]
 8009414:	4293      	cmp	r3, r2
 8009416:	d80c      	bhi.n	8009432 <__multiply+0x7a>
 8009418:	2e00      	cmp	r6, #0
 800941a:	dd03      	ble.n	8009424 <__multiply+0x6c>
 800941c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009420:	2b00      	cmp	r3, #0
 8009422:	d05d      	beq.n	80094e0 <__multiply+0x128>
 8009424:	6106      	str	r6, [r0, #16]
 8009426:	b003      	add	sp, #12
 8009428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800942c:	f843 2b04 	str.w	r2, [r3], #4
 8009430:	e7e3      	b.n	80093fa <__multiply+0x42>
 8009432:	f8b2 b000 	ldrh.w	fp, [r2]
 8009436:	f1bb 0f00 	cmp.w	fp, #0
 800943a:	d023      	beq.n	8009484 <__multiply+0xcc>
 800943c:	4689      	mov	r9, r1
 800943e:	46ac      	mov	ip, r5
 8009440:	f04f 0800 	mov.w	r8, #0
 8009444:	f859 4b04 	ldr.w	r4, [r9], #4
 8009448:	f8dc a000 	ldr.w	sl, [ip]
 800944c:	b2a3      	uxth	r3, r4
 800944e:	fa1f fa8a 	uxth.w	sl, sl
 8009452:	fb0b a303 	mla	r3, fp, r3, sl
 8009456:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800945a:	f8dc 4000 	ldr.w	r4, [ip]
 800945e:	4443      	add	r3, r8
 8009460:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009464:	fb0b 840a 	mla	r4, fp, sl, r8
 8009468:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800946c:	46e2      	mov	sl, ip
 800946e:	b29b      	uxth	r3, r3
 8009470:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009474:	454f      	cmp	r7, r9
 8009476:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800947a:	f84a 3b04 	str.w	r3, [sl], #4
 800947e:	d82b      	bhi.n	80094d8 <__multiply+0x120>
 8009480:	f8cc 8004 	str.w	r8, [ip, #4]
 8009484:	9b01      	ldr	r3, [sp, #4]
 8009486:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800948a:	3204      	adds	r2, #4
 800948c:	f1ba 0f00 	cmp.w	sl, #0
 8009490:	d020      	beq.n	80094d4 <__multiply+0x11c>
 8009492:	682b      	ldr	r3, [r5, #0]
 8009494:	4689      	mov	r9, r1
 8009496:	46a8      	mov	r8, r5
 8009498:	f04f 0b00 	mov.w	fp, #0
 800949c:	f8b9 c000 	ldrh.w	ip, [r9]
 80094a0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80094a4:	fb0a 440c 	mla	r4, sl, ip, r4
 80094a8:	445c      	add	r4, fp
 80094aa:	46c4      	mov	ip, r8
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80094b2:	f84c 3b04 	str.w	r3, [ip], #4
 80094b6:	f859 3b04 	ldr.w	r3, [r9], #4
 80094ba:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80094be:	0c1b      	lsrs	r3, r3, #16
 80094c0:	fb0a b303 	mla	r3, sl, r3, fp
 80094c4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80094c8:	454f      	cmp	r7, r9
 80094ca:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80094ce:	d805      	bhi.n	80094dc <__multiply+0x124>
 80094d0:	f8c8 3004 	str.w	r3, [r8, #4]
 80094d4:	3504      	adds	r5, #4
 80094d6:	e79b      	b.n	8009410 <__multiply+0x58>
 80094d8:	46d4      	mov	ip, sl
 80094da:	e7b3      	b.n	8009444 <__multiply+0x8c>
 80094dc:	46e0      	mov	r8, ip
 80094de:	e7dd      	b.n	800949c <__multiply+0xe4>
 80094e0:	3e01      	subs	r6, #1
 80094e2:	e799      	b.n	8009418 <__multiply+0x60>

080094e4 <__pow5mult>:
 80094e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094e8:	4615      	mov	r5, r2
 80094ea:	f012 0203 	ands.w	r2, r2, #3
 80094ee:	4606      	mov	r6, r0
 80094f0:	460f      	mov	r7, r1
 80094f2:	d007      	beq.n	8009504 <__pow5mult+0x20>
 80094f4:	3a01      	subs	r2, #1
 80094f6:	4c21      	ldr	r4, [pc, #132]	; (800957c <__pow5mult+0x98>)
 80094f8:	2300      	movs	r3, #0
 80094fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80094fe:	f7ff fec9 	bl	8009294 <__multadd>
 8009502:	4607      	mov	r7, r0
 8009504:	10ad      	asrs	r5, r5, #2
 8009506:	d035      	beq.n	8009574 <__pow5mult+0x90>
 8009508:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800950a:	b93c      	cbnz	r4, 800951c <__pow5mult+0x38>
 800950c:	2010      	movs	r0, #16
 800950e:	f7ff fe63 	bl	80091d8 <malloc>
 8009512:	6270      	str	r0, [r6, #36]	; 0x24
 8009514:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009518:	6004      	str	r4, [r0, #0]
 800951a:	60c4      	str	r4, [r0, #12]
 800951c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009520:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009524:	b94c      	cbnz	r4, 800953a <__pow5mult+0x56>
 8009526:	f240 2171 	movw	r1, #625	; 0x271
 800952a:	4630      	mov	r0, r6
 800952c:	f7ff ff3b 	bl	80093a6 <__i2b>
 8009530:	2300      	movs	r3, #0
 8009532:	f8c8 0008 	str.w	r0, [r8, #8]
 8009536:	4604      	mov	r4, r0
 8009538:	6003      	str	r3, [r0, #0]
 800953a:	f04f 0800 	mov.w	r8, #0
 800953e:	07eb      	lsls	r3, r5, #31
 8009540:	d50a      	bpl.n	8009558 <__pow5mult+0x74>
 8009542:	4639      	mov	r1, r7
 8009544:	4622      	mov	r2, r4
 8009546:	4630      	mov	r0, r6
 8009548:	f7ff ff36 	bl	80093b8 <__multiply>
 800954c:	4639      	mov	r1, r7
 800954e:	4681      	mov	r9, r0
 8009550:	4630      	mov	r0, r6
 8009552:	f7ff fe88 	bl	8009266 <_Bfree>
 8009556:	464f      	mov	r7, r9
 8009558:	106d      	asrs	r5, r5, #1
 800955a:	d00b      	beq.n	8009574 <__pow5mult+0x90>
 800955c:	6820      	ldr	r0, [r4, #0]
 800955e:	b938      	cbnz	r0, 8009570 <__pow5mult+0x8c>
 8009560:	4622      	mov	r2, r4
 8009562:	4621      	mov	r1, r4
 8009564:	4630      	mov	r0, r6
 8009566:	f7ff ff27 	bl	80093b8 <__multiply>
 800956a:	6020      	str	r0, [r4, #0]
 800956c:	f8c0 8000 	str.w	r8, [r0]
 8009570:	4604      	mov	r4, r0
 8009572:	e7e4      	b.n	800953e <__pow5mult+0x5a>
 8009574:	4638      	mov	r0, r7
 8009576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800957a:	bf00      	nop
 800957c:	0800c1d8 	.word	0x0800c1d8

08009580 <__lshift>:
 8009580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009584:	460c      	mov	r4, r1
 8009586:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800958a:	6923      	ldr	r3, [r4, #16]
 800958c:	6849      	ldr	r1, [r1, #4]
 800958e:	eb0a 0903 	add.w	r9, sl, r3
 8009592:	68a3      	ldr	r3, [r4, #8]
 8009594:	4607      	mov	r7, r0
 8009596:	4616      	mov	r6, r2
 8009598:	f109 0501 	add.w	r5, r9, #1
 800959c:	42ab      	cmp	r3, r5
 800959e:	db32      	blt.n	8009606 <__lshift+0x86>
 80095a0:	4638      	mov	r0, r7
 80095a2:	f7ff fe2c 	bl	80091fe <_Balloc>
 80095a6:	2300      	movs	r3, #0
 80095a8:	4680      	mov	r8, r0
 80095aa:	f100 0114 	add.w	r1, r0, #20
 80095ae:	461a      	mov	r2, r3
 80095b0:	4553      	cmp	r3, sl
 80095b2:	db2b      	blt.n	800960c <__lshift+0x8c>
 80095b4:	6920      	ldr	r0, [r4, #16]
 80095b6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80095ba:	f104 0314 	add.w	r3, r4, #20
 80095be:	f016 021f 	ands.w	r2, r6, #31
 80095c2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80095c6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80095ca:	d025      	beq.n	8009618 <__lshift+0x98>
 80095cc:	f1c2 0e20 	rsb	lr, r2, #32
 80095d0:	2000      	movs	r0, #0
 80095d2:	681e      	ldr	r6, [r3, #0]
 80095d4:	468a      	mov	sl, r1
 80095d6:	4096      	lsls	r6, r2
 80095d8:	4330      	orrs	r0, r6
 80095da:	f84a 0b04 	str.w	r0, [sl], #4
 80095de:	f853 0b04 	ldr.w	r0, [r3], #4
 80095e2:	459c      	cmp	ip, r3
 80095e4:	fa20 f00e 	lsr.w	r0, r0, lr
 80095e8:	d814      	bhi.n	8009614 <__lshift+0x94>
 80095ea:	6048      	str	r0, [r1, #4]
 80095ec:	b108      	cbz	r0, 80095f2 <__lshift+0x72>
 80095ee:	f109 0502 	add.w	r5, r9, #2
 80095f2:	3d01      	subs	r5, #1
 80095f4:	4638      	mov	r0, r7
 80095f6:	f8c8 5010 	str.w	r5, [r8, #16]
 80095fa:	4621      	mov	r1, r4
 80095fc:	f7ff fe33 	bl	8009266 <_Bfree>
 8009600:	4640      	mov	r0, r8
 8009602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009606:	3101      	adds	r1, #1
 8009608:	005b      	lsls	r3, r3, #1
 800960a:	e7c7      	b.n	800959c <__lshift+0x1c>
 800960c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009610:	3301      	adds	r3, #1
 8009612:	e7cd      	b.n	80095b0 <__lshift+0x30>
 8009614:	4651      	mov	r1, sl
 8009616:	e7dc      	b.n	80095d2 <__lshift+0x52>
 8009618:	3904      	subs	r1, #4
 800961a:	f853 2b04 	ldr.w	r2, [r3], #4
 800961e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009622:	459c      	cmp	ip, r3
 8009624:	d8f9      	bhi.n	800961a <__lshift+0x9a>
 8009626:	e7e4      	b.n	80095f2 <__lshift+0x72>

08009628 <__mcmp>:
 8009628:	6903      	ldr	r3, [r0, #16]
 800962a:	690a      	ldr	r2, [r1, #16]
 800962c:	1a9b      	subs	r3, r3, r2
 800962e:	b530      	push	{r4, r5, lr}
 8009630:	d10c      	bne.n	800964c <__mcmp+0x24>
 8009632:	0092      	lsls	r2, r2, #2
 8009634:	3014      	adds	r0, #20
 8009636:	3114      	adds	r1, #20
 8009638:	1884      	adds	r4, r0, r2
 800963a:	4411      	add	r1, r2
 800963c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009640:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009644:	4295      	cmp	r5, r2
 8009646:	d003      	beq.n	8009650 <__mcmp+0x28>
 8009648:	d305      	bcc.n	8009656 <__mcmp+0x2e>
 800964a:	2301      	movs	r3, #1
 800964c:	4618      	mov	r0, r3
 800964e:	bd30      	pop	{r4, r5, pc}
 8009650:	42a0      	cmp	r0, r4
 8009652:	d3f3      	bcc.n	800963c <__mcmp+0x14>
 8009654:	e7fa      	b.n	800964c <__mcmp+0x24>
 8009656:	f04f 33ff 	mov.w	r3, #4294967295
 800965a:	e7f7      	b.n	800964c <__mcmp+0x24>

0800965c <__mdiff>:
 800965c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009660:	460d      	mov	r5, r1
 8009662:	4607      	mov	r7, r0
 8009664:	4611      	mov	r1, r2
 8009666:	4628      	mov	r0, r5
 8009668:	4614      	mov	r4, r2
 800966a:	f7ff ffdd 	bl	8009628 <__mcmp>
 800966e:	1e06      	subs	r6, r0, #0
 8009670:	d108      	bne.n	8009684 <__mdiff+0x28>
 8009672:	4631      	mov	r1, r6
 8009674:	4638      	mov	r0, r7
 8009676:	f7ff fdc2 	bl	80091fe <_Balloc>
 800967a:	2301      	movs	r3, #1
 800967c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009684:	bfa4      	itt	ge
 8009686:	4623      	movge	r3, r4
 8009688:	462c      	movge	r4, r5
 800968a:	4638      	mov	r0, r7
 800968c:	6861      	ldr	r1, [r4, #4]
 800968e:	bfa6      	itte	ge
 8009690:	461d      	movge	r5, r3
 8009692:	2600      	movge	r6, #0
 8009694:	2601      	movlt	r6, #1
 8009696:	f7ff fdb2 	bl	80091fe <_Balloc>
 800969a:	692b      	ldr	r3, [r5, #16]
 800969c:	60c6      	str	r6, [r0, #12]
 800969e:	6926      	ldr	r6, [r4, #16]
 80096a0:	f105 0914 	add.w	r9, r5, #20
 80096a4:	f104 0214 	add.w	r2, r4, #20
 80096a8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80096ac:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80096b0:	f100 0514 	add.w	r5, r0, #20
 80096b4:	f04f 0e00 	mov.w	lr, #0
 80096b8:	f852 ab04 	ldr.w	sl, [r2], #4
 80096bc:	f859 4b04 	ldr.w	r4, [r9], #4
 80096c0:	fa1e f18a 	uxtah	r1, lr, sl
 80096c4:	b2a3      	uxth	r3, r4
 80096c6:	1ac9      	subs	r1, r1, r3
 80096c8:	0c23      	lsrs	r3, r4, #16
 80096ca:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80096ce:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80096d2:	b289      	uxth	r1, r1
 80096d4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80096d8:	45c8      	cmp	r8, r9
 80096da:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80096de:	4694      	mov	ip, r2
 80096e0:	f845 3b04 	str.w	r3, [r5], #4
 80096e4:	d8e8      	bhi.n	80096b8 <__mdiff+0x5c>
 80096e6:	45bc      	cmp	ip, r7
 80096e8:	d304      	bcc.n	80096f4 <__mdiff+0x98>
 80096ea:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80096ee:	b183      	cbz	r3, 8009712 <__mdiff+0xb6>
 80096f0:	6106      	str	r6, [r0, #16]
 80096f2:	e7c5      	b.n	8009680 <__mdiff+0x24>
 80096f4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80096f8:	fa1e f381 	uxtah	r3, lr, r1
 80096fc:	141a      	asrs	r2, r3, #16
 80096fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009702:	b29b      	uxth	r3, r3
 8009704:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009708:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800970c:	f845 3b04 	str.w	r3, [r5], #4
 8009710:	e7e9      	b.n	80096e6 <__mdiff+0x8a>
 8009712:	3e01      	subs	r6, #1
 8009714:	e7e9      	b.n	80096ea <__mdiff+0x8e>

08009716 <__d2b>:
 8009716:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800971a:	460e      	mov	r6, r1
 800971c:	2101      	movs	r1, #1
 800971e:	ec59 8b10 	vmov	r8, r9, d0
 8009722:	4615      	mov	r5, r2
 8009724:	f7ff fd6b 	bl	80091fe <_Balloc>
 8009728:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800972c:	4607      	mov	r7, r0
 800972e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009732:	bb34      	cbnz	r4, 8009782 <__d2b+0x6c>
 8009734:	9301      	str	r3, [sp, #4]
 8009736:	f1b8 0300 	subs.w	r3, r8, #0
 800973a:	d027      	beq.n	800978c <__d2b+0x76>
 800973c:	a802      	add	r0, sp, #8
 800973e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009742:	f7ff fe01 	bl	8009348 <__lo0bits>
 8009746:	9900      	ldr	r1, [sp, #0]
 8009748:	b1f0      	cbz	r0, 8009788 <__d2b+0x72>
 800974a:	9a01      	ldr	r2, [sp, #4]
 800974c:	f1c0 0320 	rsb	r3, r0, #32
 8009750:	fa02 f303 	lsl.w	r3, r2, r3
 8009754:	430b      	orrs	r3, r1
 8009756:	40c2      	lsrs	r2, r0
 8009758:	617b      	str	r3, [r7, #20]
 800975a:	9201      	str	r2, [sp, #4]
 800975c:	9b01      	ldr	r3, [sp, #4]
 800975e:	61bb      	str	r3, [r7, #24]
 8009760:	2b00      	cmp	r3, #0
 8009762:	bf14      	ite	ne
 8009764:	2102      	movne	r1, #2
 8009766:	2101      	moveq	r1, #1
 8009768:	6139      	str	r1, [r7, #16]
 800976a:	b1c4      	cbz	r4, 800979e <__d2b+0x88>
 800976c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009770:	4404      	add	r4, r0
 8009772:	6034      	str	r4, [r6, #0]
 8009774:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009778:	6028      	str	r0, [r5, #0]
 800977a:	4638      	mov	r0, r7
 800977c:	b003      	add	sp, #12
 800977e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009782:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009786:	e7d5      	b.n	8009734 <__d2b+0x1e>
 8009788:	6179      	str	r1, [r7, #20]
 800978a:	e7e7      	b.n	800975c <__d2b+0x46>
 800978c:	a801      	add	r0, sp, #4
 800978e:	f7ff fddb 	bl	8009348 <__lo0bits>
 8009792:	9b01      	ldr	r3, [sp, #4]
 8009794:	617b      	str	r3, [r7, #20]
 8009796:	2101      	movs	r1, #1
 8009798:	6139      	str	r1, [r7, #16]
 800979a:	3020      	adds	r0, #32
 800979c:	e7e5      	b.n	800976a <__d2b+0x54>
 800979e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80097a2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80097a6:	6030      	str	r0, [r6, #0]
 80097a8:	6918      	ldr	r0, [r3, #16]
 80097aa:	f7ff fdae 	bl	800930a <__hi0bits>
 80097ae:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80097b2:	e7e1      	b.n	8009778 <__d2b+0x62>

080097b4 <_calloc_r>:
 80097b4:	b538      	push	{r3, r4, r5, lr}
 80097b6:	fb02 f401 	mul.w	r4, r2, r1
 80097ba:	4621      	mov	r1, r4
 80097bc:	f000 f856 	bl	800986c <_malloc_r>
 80097c0:	4605      	mov	r5, r0
 80097c2:	b118      	cbz	r0, 80097cc <_calloc_r+0x18>
 80097c4:	4622      	mov	r2, r4
 80097c6:	2100      	movs	r1, #0
 80097c8:	f7fd fe7e 	bl	80074c8 <memset>
 80097cc:	4628      	mov	r0, r5
 80097ce:	bd38      	pop	{r3, r4, r5, pc}

080097d0 <_free_r>:
 80097d0:	b538      	push	{r3, r4, r5, lr}
 80097d2:	4605      	mov	r5, r0
 80097d4:	2900      	cmp	r1, #0
 80097d6:	d045      	beq.n	8009864 <_free_r+0x94>
 80097d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097dc:	1f0c      	subs	r4, r1, #4
 80097de:	2b00      	cmp	r3, #0
 80097e0:	bfb8      	it	lt
 80097e2:	18e4      	addlt	r4, r4, r3
 80097e4:	f000 fa98 	bl	8009d18 <__malloc_lock>
 80097e8:	4a1f      	ldr	r2, [pc, #124]	; (8009868 <_free_r+0x98>)
 80097ea:	6813      	ldr	r3, [r2, #0]
 80097ec:	4610      	mov	r0, r2
 80097ee:	b933      	cbnz	r3, 80097fe <_free_r+0x2e>
 80097f0:	6063      	str	r3, [r4, #4]
 80097f2:	6014      	str	r4, [r2, #0]
 80097f4:	4628      	mov	r0, r5
 80097f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097fa:	f000 ba8e 	b.w	8009d1a <__malloc_unlock>
 80097fe:	42a3      	cmp	r3, r4
 8009800:	d90c      	bls.n	800981c <_free_r+0x4c>
 8009802:	6821      	ldr	r1, [r4, #0]
 8009804:	1862      	adds	r2, r4, r1
 8009806:	4293      	cmp	r3, r2
 8009808:	bf04      	itt	eq
 800980a:	681a      	ldreq	r2, [r3, #0]
 800980c:	685b      	ldreq	r3, [r3, #4]
 800980e:	6063      	str	r3, [r4, #4]
 8009810:	bf04      	itt	eq
 8009812:	1852      	addeq	r2, r2, r1
 8009814:	6022      	streq	r2, [r4, #0]
 8009816:	6004      	str	r4, [r0, #0]
 8009818:	e7ec      	b.n	80097f4 <_free_r+0x24>
 800981a:	4613      	mov	r3, r2
 800981c:	685a      	ldr	r2, [r3, #4]
 800981e:	b10a      	cbz	r2, 8009824 <_free_r+0x54>
 8009820:	42a2      	cmp	r2, r4
 8009822:	d9fa      	bls.n	800981a <_free_r+0x4a>
 8009824:	6819      	ldr	r1, [r3, #0]
 8009826:	1858      	adds	r0, r3, r1
 8009828:	42a0      	cmp	r0, r4
 800982a:	d10b      	bne.n	8009844 <_free_r+0x74>
 800982c:	6820      	ldr	r0, [r4, #0]
 800982e:	4401      	add	r1, r0
 8009830:	1858      	adds	r0, r3, r1
 8009832:	4282      	cmp	r2, r0
 8009834:	6019      	str	r1, [r3, #0]
 8009836:	d1dd      	bne.n	80097f4 <_free_r+0x24>
 8009838:	6810      	ldr	r0, [r2, #0]
 800983a:	6852      	ldr	r2, [r2, #4]
 800983c:	605a      	str	r2, [r3, #4]
 800983e:	4401      	add	r1, r0
 8009840:	6019      	str	r1, [r3, #0]
 8009842:	e7d7      	b.n	80097f4 <_free_r+0x24>
 8009844:	d902      	bls.n	800984c <_free_r+0x7c>
 8009846:	230c      	movs	r3, #12
 8009848:	602b      	str	r3, [r5, #0]
 800984a:	e7d3      	b.n	80097f4 <_free_r+0x24>
 800984c:	6820      	ldr	r0, [r4, #0]
 800984e:	1821      	adds	r1, r4, r0
 8009850:	428a      	cmp	r2, r1
 8009852:	bf04      	itt	eq
 8009854:	6811      	ldreq	r1, [r2, #0]
 8009856:	6852      	ldreq	r2, [r2, #4]
 8009858:	6062      	str	r2, [r4, #4]
 800985a:	bf04      	itt	eq
 800985c:	1809      	addeq	r1, r1, r0
 800985e:	6021      	streq	r1, [r4, #0]
 8009860:	605c      	str	r4, [r3, #4]
 8009862:	e7c7      	b.n	80097f4 <_free_r+0x24>
 8009864:	bd38      	pop	{r3, r4, r5, pc}
 8009866:	bf00      	nop
 8009868:	200002cc 	.word	0x200002cc

0800986c <_malloc_r>:
 800986c:	b570      	push	{r4, r5, r6, lr}
 800986e:	1ccd      	adds	r5, r1, #3
 8009870:	f025 0503 	bic.w	r5, r5, #3
 8009874:	3508      	adds	r5, #8
 8009876:	2d0c      	cmp	r5, #12
 8009878:	bf38      	it	cc
 800987a:	250c      	movcc	r5, #12
 800987c:	2d00      	cmp	r5, #0
 800987e:	4606      	mov	r6, r0
 8009880:	db01      	blt.n	8009886 <_malloc_r+0x1a>
 8009882:	42a9      	cmp	r1, r5
 8009884:	d903      	bls.n	800988e <_malloc_r+0x22>
 8009886:	230c      	movs	r3, #12
 8009888:	6033      	str	r3, [r6, #0]
 800988a:	2000      	movs	r0, #0
 800988c:	bd70      	pop	{r4, r5, r6, pc}
 800988e:	f000 fa43 	bl	8009d18 <__malloc_lock>
 8009892:	4a21      	ldr	r2, [pc, #132]	; (8009918 <_malloc_r+0xac>)
 8009894:	6814      	ldr	r4, [r2, #0]
 8009896:	4621      	mov	r1, r4
 8009898:	b991      	cbnz	r1, 80098c0 <_malloc_r+0x54>
 800989a:	4c20      	ldr	r4, [pc, #128]	; (800991c <_malloc_r+0xb0>)
 800989c:	6823      	ldr	r3, [r4, #0]
 800989e:	b91b      	cbnz	r3, 80098a8 <_malloc_r+0x3c>
 80098a0:	4630      	mov	r0, r6
 80098a2:	f000 f97d 	bl	8009ba0 <_sbrk_r>
 80098a6:	6020      	str	r0, [r4, #0]
 80098a8:	4629      	mov	r1, r5
 80098aa:	4630      	mov	r0, r6
 80098ac:	f000 f978 	bl	8009ba0 <_sbrk_r>
 80098b0:	1c43      	adds	r3, r0, #1
 80098b2:	d124      	bne.n	80098fe <_malloc_r+0x92>
 80098b4:	230c      	movs	r3, #12
 80098b6:	6033      	str	r3, [r6, #0]
 80098b8:	4630      	mov	r0, r6
 80098ba:	f000 fa2e 	bl	8009d1a <__malloc_unlock>
 80098be:	e7e4      	b.n	800988a <_malloc_r+0x1e>
 80098c0:	680b      	ldr	r3, [r1, #0]
 80098c2:	1b5b      	subs	r3, r3, r5
 80098c4:	d418      	bmi.n	80098f8 <_malloc_r+0x8c>
 80098c6:	2b0b      	cmp	r3, #11
 80098c8:	d90f      	bls.n	80098ea <_malloc_r+0x7e>
 80098ca:	600b      	str	r3, [r1, #0]
 80098cc:	50cd      	str	r5, [r1, r3]
 80098ce:	18cc      	adds	r4, r1, r3
 80098d0:	4630      	mov	r0, r6
 80098d2:	f000 fa22 	bl	8009d1a <__malloc_unlock>
 80098d6:	f104 000b 	add.w	r0, r4, #11
 80098da:	1d23      	adds	r3, r4, #4
 80098dc:	f020 0007 	bic.w	r0, r0, #7
 80098e0:	1ac3      	subs	r3, r0, r3
 80098e2:	d0d3      	beq.n	800988c <_malloc_r+0x20>
 80098e4:	425a      	negs	r2, r3
 80098e6:	50e2      	str	r2, [r4, r3]
 80098e8:	e7d0      	b.n	800988c <_malloc_r+0x20>
 80098ea:	428c      	cmp	r4, r1
 80098ec:	684b      	ldr	r3, [r1, #4]
 80098ee:	bf16      	itet	ne
 80098f0:	6063      	strne	r3, [r4, #4]
 80098f2:	6013      	streq	r3, [r2, #0]
 80098f4:	460c      	movne	r4, r1
 80098f6:	e7eb      	b.n	80098d0 <_malloc_r+0x64>
 80098f8:	460c      	mov	r4, r1
 80098fa:	6849      	ldr	r1, [r1, #4]
 80098fc:	e7cc      	b.n	8009898 <_malloc_r+0x2c>
 80098fe:	1cc4      	adds	r4, r0, #3
 8009900:	f024 0403 	bic.w	r4, r4, #3
 8009904:	42a0      	cmp	r0, r4
 8009906:	d005      	beq.n	8009914 <_malloc_r+0xa8>
 8009908:	1a21      	subs	r1, r4, r0
 800990a:	4630      	mov	r0, r6
 800990c:	f000 f948 	bl	8009ba0 <_sbrk_r>
 8009910:	3001      	adds	r0, #1
 8009912:	d0cf      	beq.n	80098b4 <_malloc_r+0x48>
 8009914:	6025      	str	r5, [r4, #0]
 8009916:	e7db      	b.n	80098d0 <_malloc_r+0x64>
 8009918:	200002cc 	.word	0x200002cc
 800991c:	200002d0 	.word	0x200002d0

08009920 <__sfputc_r>:
 8009920:	6893      	ldr	r3, [r2, #8]
 8009922:	3b01      	subs	r3, #1
 8009924:	2b00      	cmp	r3, #0
 8009926:	b410      	push	{r4}
 8009928:	6093      	str	r3, [r2, #8]
 800992a:	da08      	bge.n	800993e <__sfputc_r+0x1e>
 800992c:	6994      	ldr	r4, [r2, #24]
 800992e:	42a3      	cmp	r3, r4
 8009930:	db01      	blt.n	8009936 <__sfputc_r+0x16>
 8009932:	290a      	cmp	r1, #10
 8009934:	d103      	bne.n	800993e <__sfputc_r+0x1e>
 8009936:	f85d 4b04 	ldr.w	r4, [sp], #4
 800993a:	f7fe bb5b 	b.w	8007ff4 <__swbuf_r>
 800993e:	6813      	ldr	r3, [r2, #0]
 8009940:	1c58      	adds	r0, r3, #1
 8009942:	6010      	str	r0, [r2, #0]
 8009944:	7019      	strb	r1, [r3, #0]
 8009946:	4608      	mov	r0, r1
 8009948:	f85d 4b04 	ldr.w	r4, [sp], #4
 800994c:	4770      	bx	lr

0800994e <__sfputs_r>:
 800994e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009950:	4606      	mov	r6, r0
 8009952:	460f      	mov	r7, r1
 8009954:	4614      	mov	r4, r2
 8009956:	18d5      	adds	r5, r2, r3
 8009958:	42ac      	cmp	r4, r5
 800995a:	d101      	bne.n	8009960 <__sfputs_r+0x12>
 800995c:	2000      	movs	r0, #0
 800995e:	e007      	b.n	8009970 <__sfputs_r+0x22>
 8009960:	463a      	mov	r2, r7
 8009962:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009966:	4630      	mov	r0, r6
 8009968:	f7ff ffda 	bl	8009920 <__sfputc_r>
 800996c:	1c43      	adds	r3, r0, #1
 800996e:	d1f3      	bne.n	8009958 <__sfputs_r+0xa>
 8009970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009974 <_vfiprintf_r>:
 8009974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009978:	460c      	mov	r4, r1
 800997a:	b09d      	sub	sp, #116	; 0x74
 800997c:	4617      	mov	r7, r2
 800997e:	461d      	mov	r5, r3
 8009980:	4606      	mov	r6, r0
 8009982:	b118      	cbz	r0, 800998c <_vfiprintf_r+0x18>
 8009984:	6983      	ldr	r3, [r0, #24]
 8009986:	b90b      	cbnz	r3, 800998c <_vfiprintf_r+0x18>
 8009988:	f7ff fb2a 	bl	8008fe0 <__sinit>
 800998c:	4b7c      	ldr	r3, [pc, #496]	; (8009b80 <_vfiprintf_r+0x20c>)
 800998e:	429c      	cmp	r4, r3
 8009990:	d158      	bne.n	8009a44 <_vfiprintf_r+0xd0>
 8009992:	6874      	ldr	r4, [r6, #4]
 8009994:	89a3      	ldrh	r3, [r4, #12]
 8009996:	0718      	lsls	r0, r3, #28
 8009998:	d55e      	bpl.n	8009a58 <_vfiprintf_r+0xe4>
 800999a:	6923      	ldr	r3, [r4, #16]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d05b      	beq.n	8009a58 <_vfiprintf_r+0xe4>
 80099a0:	2300      	movs	r3, #0
 80099a2:	9309      	str	r3, [sp, #36]	; 0x24
 80099a4:	2320      	movs	r3, #32
 80099a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099aa:	2330      	movs	r3, #48	; 0x30
 80099ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099b0:	9503      	str	r5, [sp, #12]
 80099b2:	f04f 0b01 	mov.w	fp, #1
 80099b6:	46b8      	mov	r8, r7
 80099b8:	4645      	mov	r5, r8
 80099ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80099be:	b10b      	cbz	r3, 80099c4 <_vfiprintf_r+0x50>
 80099c0:	2b25      	cmp	r3, #37	; 0x25
 80099c2:	d154      	bne.n	8009a6e <_vfiprintf_r+0xfa>
 80099c4:	ebb8 0a07 	subs.w	sl, r8, r7
 80099c8:	d00b      	beq.n	80099e2 <_vfiprintf_r+0x6e>
 80099ca:	4653      	mov	r3, sl
 80099cc:	463a      	mov	r2, r7
 80099ce:	4621      	mov	r1, r4
 80099d0:	4630      	mov	r0, r6
 80099d2:	f7ff ffbc 	bl	800994e <__sfputs_r>
 80099d6:	3001      	adds	r0, #1
 80099d8:	f000 80c2 	beq.w	8009b60 <_vfiprintf_r+0x1ec>
 80099dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099de:	4453      	add	r3, sl
 80099e0:	9309      	str	r3, [sp, #36]	; 0x24
 80099e2:	f898 3000 	ldrb.w	r3, [r8]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	f000 80ba 	beq.w	8009b60 <_vfiprintf_r+0x1ec>
 80099ec:	2300      	movs	r3, #0
 80099ee:	f04f 32ff 	mov.w	r2, #4294967295
 80099f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099f6:	9304      	str	r3, [sp, #16]
 80099f8:	9307      	str	r3, [sp, #28]
 80099fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099fe:	931a      	str	r3, [sp, #104]	; 0x68
 8009a00:	46a8      	mov	r8, r5
 8009a02:	2205      	movs	r2, #5
 8009a04:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009a08:	485e      	ldr	r0, [pc, #376]	; (8009b84 <_vfiprintf_r+0x210>)
 8009a0a:	f7f6 fbf9 	bl	8000200 <memchr>
 8009a0e:	9b04      	ldr	r3, [sp, #16]
 8009a10:	bb78      	cbnz	r0, 8009a72 <_vfiprintf_r+0xfe>
 8009a12:	06d9      	lsls	r1, r3, #27
 8009a14:	bf44      	itt	mi
 8009a16:	2220      	movmi	r2, #32
 8009a18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009a1c:	071a      	lsls	r2, r3, #28
 8009a1e:	bf44      	itt	mi
 8009a20:	222b      	movmi	r2, #43	; 0x2b
 8009a22:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009a26:	782a      	ldrb	r2, [r5, #0]
 8009a28:	2a2a      	cmp	r2, #42	; 0x2a
 8009a2a:	d02a      	beq.n	8009a82 <_vfiprintf_r+0x10e>
 8009a2c:	9a07      	ldr	r2, [sp, #28]
 8009a2e:	46a8      	mov	r8, r5
 8009a30:	2000      	movs	r0, #0
 8009a32:	250a      	movs	r5, #10
 8009a34:	4641      	mov	r1, r8
 8009a36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a3a:	3b30      	subs	r3, #48	; 0x30
 8009a3c:	2b09      	cmp	r3, #9
 8009a3e:	d969      	bls.n	8009b14 <_vfiprintf_r+0x1a0>
 8009a40:	b360      	cbz	r0, 8009a9c <_vfiprintf_r+0x128>
 8009a42:	e024      	b.n	8009a8e <_vfiprintf_r+0x11a>
 8009a44:	4b50      	ldr	r3, [pc, #320]	; (8009b88 <_vfiprintf_r+0x214>)
 8009a46:	429c      	cmp	r4, r3
 8009a48:	d101      	bne.n	8009a4e <_vfiprintf_r+0xda>
 8009a4a:	68b4      	ldr	r4, [r6, #8]
 8009a4c:	e7a2      	b.n	8009994 <_vfiprintf_r+0x20>
 8009a4e:	4b4f      	ldr	r3, [pc, #316]	; (8009b8c <_vfiprintf_r+0x218>)
 8009a50:	429c      	cmp	r4, r3
 8009a52:	bf08      	it	eq
 8009a54:	68f4      	ldreq	r4, [r6, #12]
 8009a56:	e79d      	b.n	8009994 <_vfiprintf_r+0x20>
 8009a58:	4621      	mov	r1, r4
 8009a5a:	4630      	mov	r0, r6
 8009a5c:	f7fe fb1c 	bl	8008098 <__swsetup_r>
 8009a60:	2800      	cmp	r0, #0
 8009a62:	d09d      	beq.n	80099a0 <_vfiprintf_r+0x2c>
 8009a64:	f04f 30ff 	mov.w	r0, #4294967295
 8009a68:	b01d      	add	sp, #116	; 0x74
 8009a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a6e:	46a8      	mov	r8, r5
 8009a70:	e7a2      	b.n	80099b8 <_vfiprintf_r+0x44>
 8009a72:	4a44      	ldr	r2, [pc, #272]	; (8009b84 <_vfiprintf_r+0x210>)
 8009a74:	1a80      	subs	r0, r0, r2
 8009a76:	fa0b f000 	lsl.w	r0, fp, r0
 8009a7a:	4318      	orrs	r0, r3
 8009a7c:	9004      	str	r0, [sp, #16]
 8009a7e:	4645      	mov	r5, r8
 8009a80:	e7be      	b.n	8009a00 <_vfiprintf_r+0x8c>
 8009a82:	9a03      	ldr	r2, [sp, #12]
 8009a84:	1d11      	adds	r1, r2, #4
 8009a86:	6812      	ldr	r2, [r2, #0]
 8009a88:	9103      	str	r1, [sp, #12]
 8009a8a:	2a00      	cmp	r2, #0
 8009a8c:	db01      	blt.n	8009a92 <_vfiprintf_r+0x11e>
 8009a8e:	9207      	str	r2, [sp, #28]
 8009a90:	e004      	b.n	8009a9c <_vfiprintf_r+0x128>
 8009a92:	4252      	negs	r2, r2
 8009a94:	f043 0302 	orr.w	r3, r3, #2
 8009a98:	9207      	str	r2, [sp, #28]
 8009a9a:	9304      	str	r3, [sp, #16]
 8009a9c:	f898 3000 	ldrb.w	r3, [r8]
 8009aa0:	2b2e      	cmp	r3, #46	; 0x2e
 8009aa2:	d10e      	bne.n	8009ac2 <_vfiprintf_r+0x14e>
 8009aa4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009aa8:	2b2a      	cmp	r3, #42	; 0x2a
 8009aaa:	d138      	bne.n	8009b1e <_vfiprintf_r+0x1aa>
 8009aac:	9b03      	ldr	r3, [sp, #12]
 8009aae:	1d1a      	adds	r2, r3, #4
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	9203      	str	r2, [sp, #12]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	bfb8      	it	lt
 8009ab8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009abc:	f108 0802 	add.w	r8, r8, #2
 8009ac0:	9305      	str	r3, [sp, #20]
 8009ac2:	4d33      	ldr	r5, [pc, #204]	; (8009b90 <_vfiprintf_r+0x21c>)
 8009ac4:	f898 1000 	ldrb.w	r1, [r8]
 8009ac8:	2203      	movs	r2, #3
 8009aca:	4628      	mov	r0, r5
 8009acc:	f7f6 fb98 	bl	8000200 <memchr>
 8009ad0:	b140      	cbz	r0, 8009ae4 <_vfiprintf_r+0x170>
 8009ad2:	2340      	movs	r3, #64	; 0x40
 8009ad4:	1b40      	subs	r0, r0, r5
 8009ad6:	fa03 f000 	lsl.w	r0, r3, r0
 8009ada:	9b04      	ldr	r3, [sp, #16]
 8009adc:	4303      	orrs	r3, r0
 8009ade:	f108 0801 	add.w	r8, r8, #1
 8009ae2:	9304      	str	r3, [sp, #16]
 8009ae4:	f898 1000 	ldrb.w	r1, [r8]
 8009ae8:	482a      	ldr	r0, [pc, #168]	; (8009b94 <_vfiprintf_r+0x220>)
 8009aea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009aee:	2206      	movs	r2, #6
 8009af0:	f108 0701 	add.w	r7, r8, #1
 8009af4:	f7f6 fb84 	bl	8000200 <memchr>
 8009af8:	2800      	cmp	r0, #0
 8009afa:	d037      	beq.n	8009b6c <_vfiprintf_r+0x1f8>
 8009afc:	4b26      	ldr	r3, [pc, #152]	; (8009b98 <_vfiprintf_r+0x224>)
 8009afe:	bb1b      	cbnz	r3, 8009b48 <_vfiprintf_r+0x1d4>
 8009b00:	9b03      	ldr	r3, [sp, #12]
 8009b02:	3307      	adds	r3, #7
 8009b04:	f023 0307 	bic.w	r3, r3, #7
 8009b08:	3308      	adds	r3, #8
 8009b0a:	9303      	str	r3, [sp, #12]
 8009b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b0e:	444b      	add	r3, r9
 8009b10:	9309      	str	r3, [sp, #36]	; 0x24
 8009b12:	e750      	b.n	80099b6 <_vfiprintf_r+0x42>
 8009b14:	fb05 3202 	mla	r2, r5, r2, r3
 8009b18:	2001      	movs	r0, #1
 8009b1a:	4688      	mov	r8, r1
 8009b1c:	e78a      	b.n	8009a34 <_vfiprintf_r+0xc0>
 8009b1e:	2300      	movs	r3, #0
 8009b20:	f108 0801 	add.w	r8, r8, #1
 8009b24:	9305      	str	r3, [sp, #20]
 8009b26:	4619      	mov	r1, r3
 8009b28:	250a      	movs	r5, #10
 8009b2a:	4640      	mov	r0, r8
 8009b2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b30:	3a30      	subs	r2, #48	; 0x30
 8009b32:	2a09      	cmp	r2, #9
 8009b34:	d903      	bls.n	8009b3e <_vfiprintf_r+0x1ca>
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d0c3      	beq.n	8009ac2 <_vfiprintf_r+0x14e>
 8009b3a:	9105      	str	r1, [sp, #20]
 8009b3c:	e7c1      	b.n	8009ac2 <_vfiprintf_r+0x14e>
 8009b3e:	fb05 2101 	mla	r1, r5, r1, r2
 8009b42:	2301      	movs	r3, #1
 8009b44:	4680      	mov	r8, r0
 8009b46:	e7f0      	b.n	8009b2a <_vfiprintf_r+0x1b6>
 8009b48:	ab03      	add	r3, sp, #12
 8009b4a:	9300      	str	r3, [sp, #0]
 8009b4c:	4622      	mov	r2, r4
 8009b4e:	4b13      	ldr	r3, [pc, #76]	; (8009b9c <_vfiprintf_r+0x228>)
 8009b50:	a904      	add	r1, sp, #16
 8009b52:	4630      	mov	r0, r6
 8009b54:	f7fd fd54 	bl	8007600 <_printf_float>
 8009b58:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009b5c:	4681      	mov	r9, r0
 8009b5e:	d1d5      	bne.n	8009b0c <_vfiprintf_r+0x198>
 8009b60:	89a3      	ldrh	r3, [r4, #12]
 8009b62:	065b      	lsls	r3, r3, #25
 8009b64:	f53f af7e 	bmi.w	8009a64 <_vfiprintf_r+0xf0>
 8009b68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b6a:	e77d      	b.n	8009a68 <_vfiprintf_r+0xf4>
 8009b6c:	ab03      	add	r3, sp, #12
 8009b6e:	9300      	str	r3, [sp, #0]
 8009b70:	4622      	mov	r2, r4
 8009b72:	4b0a      	ldr	r3, [pc, #40]	; (8009b9c <_vfiprintf_r+0x228>)
 8009b74:	a904      	add	r1, sp, #16
 8009b76:	4630      	mov	r0, r6
 8009b78:	f7fd fff8 	bl	8007b6c <_printf_i>
 8009b7c:	e7ec      	b.n	8009b58 <_vfiprintf_r+0x1e4>
 8009b7e:	bf00      	nop
 8009b80:	0800c0a8 	.word	0x0800c0a8
 8009b84:	0800c1e4 	.word	0x0800c1e4
 8009b88:	0800c0c8 	.word	0x0800c0c8
 8009b8c:	0800c088 	.word	0x0800c088
 8009b90:	0800c1ea 	.word	0x0800c1ea
 8009b94:	0800c1ee 	.word	0x0800c1ee
 8009b98:	08007601 	.word	0x08007601
 8009b9c:	0800994f 	.word	0x0800994f

08009ba0 <_sbrk_r>:
 8009ba0:	b538      	push	{r3, r4, r5, lr}
 8009ba2:	4c06      	ldr	r4, [pc, #24]	; (8009bbc <_sbrk_r+0x1c>)
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	4605      	mov	r5, r0
 8009ba8:	4608      	mov	r0, r1
 8009baa:	6023      	str	r3, [r4, #0]
 8009bac:	f7fc fe8a 	bl	80068c4 <_sbrk>
 8009bb0:	1c43      	adds	r3, r0, #1
 8009bb2:	d102      	bne.n	8009bba <_sbrk_r+0x1a>
 8009bb4:	6823      	ldr	r3, [r4, #0]
 8009bb6:	b103      	cbz	r3, 8009bba <_sbrk_r+0x1a>
 8009bb8:	602b      	str	r3, [r5, #0]
 8009bba:	bd38      	pop	{r3, r4, r5, pc}
 8009bbc:	20000928 	.word	0x20000928

08009bc0 <__sread>:
 8009bc0:	b510      	push	{r4, lr}
 8009bc2:	460c      	mov	r4, r1
 8009bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bc8:	f000 f8a8 	bl	8009d1c <_read_r>
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	bfab      	itete	ge
 8009bd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009bd2:	89a3      	ldrhlt	r3, [r4, #12]
 8009bd4:	181b      	addge	r3, r3, r0
 8009bd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009bda:	bfac      	ite	ge
 8009bdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8009bde:	81a3      	strhlt	r3, [r4, #12]
 8009be0:	bd10      	pop	{r4, pc}

08009be2 <__swrite>:
 8009be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009be6:	461f      	mov	r7, r3
 8009be8:	898b      	ldrh	r3, [r1, #12]
 8009bea:	05db      	lsls	r3, r3, #23
 8009bec:	4605      	mov	r5, r0
 8009bee:	460c      	mov	r4, r1
 8009bf0:	4616      	mov	r6, r2
 8009bf2:	d505      	bpl.n	8009c00 <__swrite+0x1e>
 8009bf4:	2302      	movs	r3, #2
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bfc:	f000 f868 	bl	8009cd0 <_lseek_r>
 8009c00:	89a3      	ldrh	r3, [r4, #12]
 8009c02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c0a:	81a3      	strh	r3, [r4, #12]
 8009c0c:	4632      	mov	r2, r6
 8009c0e:	463b      	mov	r3, r7
 8009c10:	4628      	mov	r0, r5
 8009c12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c16:	f000 b817 	b.w	8009c48 <_write_r>

08009c1a <__sseek>:
 8009c1a:	b510      	push	{r4, lr}
 8009c1c:	460c      	mov	r4, r1
 8009c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c22:	f000 f855 	bl	8009cd0 <_lseek_r>
 8009c26:	1c43      	adds	r3, r0, #1
 8009c28:	89a3      	ldrh	r3, [r4, #12]
 8009c2a:	bf15      	itete	ne
 8009c2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c36:	81a3      	strheq	r3, [r4, #12]
 8009c38:	bf18      	it	ne
 8009c3a:	81a3      	strhne	r3, [r4, #12]
 8009c3c:	bd10      	pop	{r4, pc}

08009c3e <__sclose>:
 8009c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c42:	f000 b813 	b.w	8009c6c <_close_r>
	...

08009c48 <_write_r>:
 8009c48:	b538      	push	{r3, r4, r5, lr}
 8009c4a:	4c07      	ldr	r4, [pc, #28]	; (8009c68 <_write_r+0x20>)
 8009c4c:	4605      	mov	r5, r0
 8009c4e:	4608      	mov	r0, r1
 8009c50:	4611      	mov	r1, r2
 8009c52:	2200      	movs	r2, #0
 8009c54:	6022      	str	r2, [r4, #0]
 8009c56:	461a      	mov	r2, r3
 8009c58:	f7fc fe18 	bl	800688c <_write>
 8009c5c:	1c43      	adds	r3, r0, #1
 8009c5e:	d102      	bne.n	8009c66 <_write_r+0x1e>
 8009c60:	6823      	ldr	r3, [r4, #0]
 8009c62:	b103      	cbz	r3, 8009c66 <_write_r+0x1e>
 8009c64:	602b      	str	r3, [r5, #0]
 8009c66:	bd38      	pop	{r3, r4, r5, pc}
 8009c68:	20000928 	.word	0x20000928

08009c6c <_close_r>:
 8009c6c:	b538      	push	{r3, r4, r5, lr}
 8009c6e:	4c06      	ldr	r4, [pc, #24]	; (8009c88 <_close_r+0x1c>)
 8009c70:	2300      	movs	r3, #0
 8009c72:	4605      	mov	r5, r0
 8009c74:	4608      	mov	r0, r1
 8009c76:	6023      	str	r3, [r4, #0]
 8009c78:	f7fc fe16 	bl	80068a8 <_close>
 8009c7c:	1c43      	adds	r3, r0, #1
 8009c7e:	d102      	bne.n	8009c86 <_close_r+0x1a>
 8009c80:	6823      	ldr	r3, [r4, #0]
 8009c82:	b103      	cbz	r3, 8009c86 <_close_r+0x1a>
 8009c84:	602b      	str	r3, [r5, #0]
 8009c86:	bd38      	pop	{r3, r4, r5, pc}
 8009c88:	20000928 	.word	0x20000928

08009c8c <_fstat_r>:
 8009c8c:	b538      	push	{r3, r4, r5, lr}
 8009c8e:	4c07      	ldr	r4, [pc, #28]	; (8009cac <_fstat_r+0x20>)
 8009c90:	2300      	movs	r3, #0
 8009c92:	4605      	mov	r5, r0
 8009c94:	4608      	mov	r0, r1
 8009c96:	4611      	mov	r1, r2
 8009c98:	6023      	str	r3, [r4, #0]
 8009c9a:	f7fc fe09 	bl	80068b0 <_fstat>
 8009c9e:	1c43      	adds	r3, r0, #1
 8009ca0:	d102      	bne.n	8009ca8 <_fstat_r+0x1c>
 8009ca2:	6823      	ldr	r3, [r4, #0]
 8009ca4:	b103      	cbz	r3, 8009ca8 <_fstat_r+0x1c>
 8009ca6:	602b      	str	r3, [r5, #0]
 8009ca8:	bd38      	pop	{r3, r4, r5, pc}
 8009caa:	bf00      	nop
 8009cac:	20000928 	.word	0x20000928

08009cb0 <_isatty_r>:
 8009cb0:	b538      	push	{r3, r4, r5, lr}
 8009cb2:	4c06      	ldr	r4, [pc, #24]	; (8009ccc <_isatty_r+0x1c>)
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	4605      	mov	r5, r0
 8009cb8:	4608      	mov	r0, r1
 8009cba:	6023      	str	r3, [r4, #0]
 8009cbc:	f7fc fdfe 	bl	80068bc <_isatty>
 8009cc0:	1c43      	adds	r3, r0, #1
 8009cc2:	d102      	bne.n	8009cca <_isatty_r+0x1a>
 8009cc4:	6823      	ldr	r3, [r4, #0]
 8009cc6:	b103      	cbz	r3, 8009cca <_isatty_r+0x1a>
 8009cc8:	602b      	str	r3, [r5, #0]
 8009cca:	bd38      	pop	{r3, r4, r5, pc}
 8009ccc:	20000928 	.word	0x20000928

08009cd0 <_lseek_r>:
 8009cd0:	b538      	push	{r3, r4, r5, lr}
 8009cd2:	4c07      	ldr	r4, [pc, #28]	; (8009cf0 <_lseek_r+0x20>)
 8009cd4:	4605      	mov	r5, r0
 8009cd6:	4608      	mov	r0, r1
 8009cd8:	4611      	mov	r1, r2
 8009cda:	2200      	movs	r2, #0
 8009cdc:	6022      	str	r2, [r4, #0]
 8009cde:	461a      	mov	r2, r3
 8009ce0:	f7fc fdee 	bl	80068c0 <_lseek>
 8009ce4:	1c43      	adds	r3, r0, #1
 8009ce6:	d102      	bne.n	8009cee <_lseek_r+0x1e>
 8009ce8:	6823      	ldr	r3, [r4, #0]
 8009cea:	b103      	cbz	r3, 8009cee <_lseek_r+0x1e>
 8009cec:	602b      	str	r3, [r5, #0]
 8009cee:	bd38      	pop	{r3, r4, r5, pc}
 8009cf0:	20000928 	.word	0x20000928

08009cf4 <__ascii_mbtowc>:
 8009cf4:	b082      	sub	sp, #8
 8009cf6:	b901      	cbnz	r1, 8009cfa <__ascii_mbtowc+0x6>
 8009cf8:	a901      	add	r1, sp, #4
 8009cfa:	b142      	cbz	r2, 8009d0e <__ascii_mbtowc+0x1a>
 8009cfc:	b14b      	cbz	r3, 8009d12 <__ascii_mbtowc+0x1e>
 8009cfe:	7813      	ldrb	r3, [r2, #0]
 8009d00:	600b      	str	r3, [r1, #0]
 8009d02:	7812      	ldrb	r2, [r2, #0]
 8009d04:	1c10      	adds	r0, r2, #0
 8009d06:	bf18      	it	ne
 8009d08:	2001      	movne	r0, #1
 8009d0a:	b002      	add	sp, #8
 8009d0c:	4770      	bx	lr
 8009d0e:	4610      	mov	r0, r2
 8009d10:	e7fb      	b.n	8009d0a <__ascii_mbtowc+0x16>
 8009d12:	f06f 0001 	mvn.w	r0, #1
 8009d16:	e7f8      	b.n	8009d0a <__ascii_mbtowc+0x16>

08009d18 <__malloc_lock>:
 8009d18:	4770      	bx	lr

08009d1a <__malloc_unlock>:
 8009d1a:	4770      	bx	lr

08009d1c <_read_r>:
 8009d1c:	b538      	push	{r3, r4, r5, lr}
 8009d1e:	4c07      	ldr	r4, [pc, #28]	; (8009d3c <_read_r+0x20>)
 8009d20:	4605      	mov	r5, r0
 8009d22:	4608      	mov	r0, r1
 8009d24:	4611      	mov	r1, r2
 8009d26:	2200      	movs	r2, #0
 8009d28:	6022      	str	r2, [r4, #0]
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	f7fc fda0 	bl	8006870 <_read>
 8009d30:	1c43      	adds	r3, r0, #1
 8009d32:	d102      	bne.n	8009d3a <_read_r+0x1e>
 8009d34:	6823      	ldr	r3, [r4, #0]
 8009d36:	b103      	cbz	r3, 8009d3a <_read_r+0x1e>
 8009d38:	602b      	str	r3, [r5, #0]
 8009d3a:	bd38      	pop	{r3, r4, r5, pc}
 8009d3c:	20000928 	.word	0x20000928

08009d40 <__ascii_wctomb>:
 8009d40:	b149      	cbz	r1, 8009d56 <__ascii_wctomb+0x16>
 8009d42:	2aff      	cmp	r2, #255	; 0xff
 8009d44:	bf85      	ittet	hi
 8009d46:	238a      	movhi	r3, #138	; 0x8a
 8009d48:	6003      	strhi	r3, [r0, #0]
 8009d4a:	700a      	strbls	r2, [r1, #0]
 8009d4c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009d50:	bf98      	it	ls
 8009d52:	2001      	movls	r0, #1
 8009d54:	4770      	bx	lr
 8009d56:	4608      	mov	r0, r1
 8009d58:	4770      	bx	lr
 8009d5a:	0000      	movs	r0, r0
 8009d5c:	0000      	movs	r0, r0
	...

08009d60 <cos>:
 8009d60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d62:	ec51 0b10 	vmov	r0, r1, d0
 8009d66:	4a1e      	ldr	r2, [pc, #120]	; (8009de0 <cos+0x80>)
 8009d68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	dc06      	bgt.n	8009d7e <cos+0x1e>
 8009d70:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8009dd8 <cos+0x78>
 8009d74:	f001 f8a4 	bl	800aec0 <__kernel_cos>
 8009d78:	ec51 0b10 	vmov	r0, r1, d0
 8009d7c:	e007      	b.n	8009d8e <cos+0x2e>
 8009d7e:	4a19      	ldr	r2, [pc, #100]	; (8009de4 <cos+0x84>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	dd09      	ble.n	8009d98 <cos+0x38>
 8009d84:	ee10 2a10 	vmov	r2, s0
 8009d88:	460b      	mov	r3, r1
 8009d8a:	f7f6 fa8d 	bl	80002a8 <__aeabi_dsub>
 8009d8e:	ec41 0b10 	vmov	d0, r0, r1
 8009d92:	b005      	add	sp, #20
 8009d94:	f85d fb04 	ldr.w	pc, [sp], #4
 8009d98:	4668      	mov	r0, sp
 8009d9a:	f000 fded 	bl	800a978 <__ieee754_rem_pio2>
 8009d9e:	f000 0003 	and.w	r0, r0, #3
 8009da2:	2801      	cmp	r0, #1
 8009da4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009da8:	ed9d 0b00 	vldr	d0, [sp]
 8009dac:	d007      	beq.n	8009dbe <cos+0x5e>
 8009dae:	2802      	cmp	r0, #2
 8009db0:	d00e      	beq.n	8009dd0 <cos+0x70>
 8009db2:	2800      	cmp	r0, #0
 8009db4:	d0de      	beq.n	8009d74 <cos+0x14>
 8009db6:	2001      	movs	r0, #1
 8009db8:	f001 fc8a 	bl	800b6d0 <__kernel_sin>
 8009dbc:	e7dc      	b.n	8009d78 <cos+0x18>
 8009dbe:	f001 fc87 	bl	800b6d0 <__kernel_sin>
 8009dc2:	ec53 2b10 	vmov	r2, r3, d0
 8009dc6:	ee10 0a10 	vmov	r0, s0
 8009dca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009dce:	e7de      	b.n	8009d8e <cos+0x2e>
 8009dd0:	f001 f876 	bl	800aec0 <__kernel_cos>
 8009dd4:	e7f5      	b.n	8009dc2 <cos+0x62>
 8009dd6:	bf00      	nop
	...
 8009de0:	3fe921fb 	.word	0x3fe921fb
 8009de4:	7fefffff 	.word	0x7fefffff

08009de8 <sin>:
 8009de8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009dea:	ec51 0b10 	vmov	r0, r1, d0
 8009dee:	4a20      	ldr	r2, [pc, #128]	; (8009e70 <sin+0x88>)
 8009df0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009df4:	4293      	cmp	r3, r2
 8009df6:	dc07      	bgt.n	8009e08 <sin+0x20>
 8009df8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8009e68 <sin+0x80>
 8009dfc:	2000      	movs	r0, #0
 8009dfe:	f001 fc67 	bl	800b6d0 <__kernel_sin>
 8009e02:	ec51 0b10 	vmov	r0, r1, d0
 8009e06:	e007      	b.n	8009e18 <sin+0x30>
 8009e08:	4a1a      	ldr	r2, [pc, #104]	; (8009e74 <sin+0x8c>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	dd09      	ble.n	8009e22 <sin+0x3a>
 8009e0e:	ee10 2a10 	vmov	r2, s0
 8009e12:	460b      	mov	r3, r1
 8009e14:	f7f6 fa48 	bl	80002a8 <__aeabi_dsub>
 8009e18:	ec41 0b10 	vmov	d0, r0, r1
 8009e1c:	b005      	add	sp, #20
 8009e1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009e22:	4668      	mov	r0, sp
 8009e24:	f000 fda8 	bl	800a978 <__ieee754_rem_pio2>
 8009e28:	f000 0003 	and.w	r0, r0, #3
 8009e2c:	2801      	cmp	r0, #1
 8009e2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009e32:	ed9d 0b00 	vldr	d0, [sp]
 8009e36:	d004      	beq.n	8009e42 <sin+0x5a>
 8009e38:	2802      	cmp	r0, #2
 8009e3a:	d005      	beq.n	8009e48 <sin+0x60>
 8009e3c:	b970      	cbnz	r0, 8009e5c <sin+0x74>
 8009e3e:	2001      	movs	r0, #1
 8009e40:	e7dd      	b.n	8009dfe <sin+0x16>
 8009e42:	f001 f83d 	bl	800aec0 <__kernel_cos>
 8009e46:	e7dc      	b.n	8009e02 <sin+0x1a>
 8009e48:	2001      	movs	r0, #1
 8009e4a:	f001 fc41 	bl	800b6d0 <__kernel_sin>
 8009e4e:	ec53 2b10 	vmov	r2, r3, d0
 8009e52:	ee10 0a10 	vmov	r0, s0
 8009e56:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009e5a:	e7dd      	b.n	8009e18 <sin+0x30>
 8009e5c:	f001 f830 	bl	800aec0 <__kernel_cos>
 8009e60:	e7f5      	b.n	8009e4e <sin+0x66>
 8009e62:	bf00      	nop
 8009e64:	f3af 8000 	nop.w
	...
 8009e70:	3fe921fb 	.word	0x3fe921fb
 8009e74:	7fefffff 	.word	0x7fefffff

08009e78 <asin>:
 8009e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e7a:	ed2d 8b02 	vpush	{d8}
 8009e7e:	4e26      	ldr	r6, [pc, #152]	; (8009f18 <asin+0xa0>)
 8009e80:	b08b      	sub	sp, #44	; 0x2c
 8009e82:	ec55 4b10 	vmov	r4, r5, d0
 8009e86:	f000 f8d3 	bl	800a030 <__ieee754_asin>
 8009e8a:	f996 3000 	ldrsb.w	r3, [r6]
 8009e8e:	eeb0 8a40 	vmov.f32	s16, s0
 8009e92:	eef0 8a60 	vmov.f32	s17, s1
 8009e96:	3301      	adds	r3, #1
 8009e98:	d036      	beq.n	8009f08 <asin+0x90>
 8009e9a:	4622      	mov	r2, r4
 8009e9c:	462b      	mov	r3, r5
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	4629      	mov	r1, r5
 8009ea2:	f7f6 fe53 	bl	8000b4c <__aeabi_dcmpun>
 8009ea6:	4607      	mov	r7, r0
 8009ea8:	bb70      	cbnz	r0, 8009f08 <asin+0x90>
 8009eaa:	ec45 4b10 	vmov	d0, r4, r5
 8009eae:	f001 fe6b 	bl	800bb88 <fabs>
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	4b19      	ldr	r3, [pc, #100]	; (8009f1c <asin+0xa4>)
 8009eb6:	ec51 0b10 	vmov	r0, r1, d0
 8009eba:	f7f6 fe3d 	bl	8000b38 <__aeabi_dcmpgt>
 8009ebe:	b318      	cbz	r0, 8009f08 <asin+0x90>
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	4816      	ldr	r0, [pc, #88]	; (8009f20 <asin+0xa8>)
 8009ec6:	4b17      	ldr	r3, [pc, #92]	; (8009f24 <asin+0xac>)
 8009ec8:	9301      	str	r3, [sp, #4]
 8009eca:	9708      	str	r7, [sp, #32]
 8009ecc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009ed0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009ed4:	f001 feec 	bl	800bcb0 <nan>
 8009ed8:	f996 3000 	ldrsb.w	r3, [r6]
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	ed8d 0b06 	vstr	d0, [sp, #24]
 8009ee2:	d104      	bne.n	8009eee <asin+0x76>
 8009ee4:	f7fd fac6 	bl	8007474 <__errno>
 8009ee8:	2321      	movs	r3, #33	; 0x21
 8009eea:	6003      	str	r3, [r0, #0]
 8009eec:	e004      	b.n	8009ef8 <asin+0x80>
 8009eee:	4668      	mov	r0, sp
 8009ef0:	f001 feda 	bl	800bca8 <matherr>
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	d0f5      	beq.n	8009ee4 <asin+0x6c>
 8009ef8:	9b08      	ldr	r3, [sp, #32]
 8009efa:	b11b      	cbz	r3, 8009f04 <asin+0x8c>
 8009efc:	f7fd faba 	bl	8007474 <__errno>
 8009f00:	9b08      	ldr	r3, [sp, #32]
 8009f02:	6003      	str	r3, [r0, #0]
 8009f04:	ed9d 8b06 	vldr	d8, [sp, #24]
 8009f08:	eeb0 0a48 	vmov.f32	s0, s16
 8009f0c:	eef0 0a68 	vmov.f32	s1, s17
 8009f10:	b00b      	add	sp, #44	; 0x2c
 8009f12:	ecbd 8b02 	vpop	{d8}
 8009f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f18:	200001f8 	.word	0x200001f8
 8009f1c:	3ff00000 	.word	0x3ff00000
 8009f20:	0800c1e9 	.word	0x0800c1e9
 8009f24:	0800c300 	.word	0x0800c300

08009f28 <atan2>:
 8009f28:	f000 ba92 	b.w	800a450 <__ieee754_atan2>

08009f2c <log>:
 8009f2c:	b570      	push	{r4, r5, r6, lr}
 8009f2e:	ed2d 8b02 	vpush	{d8}
 8009f32:	b08a      	sub	sp, #40	; 0x28
 8009f34:	ec55 4b10 	vmov	r4, r5, d0
 8009f38:	f000 fb6a 	bl	800a610 <__ieee754_log>
 8009f3c:	4b36      	ldr	r3, [pc, #216]	; (800a018 <log+0xec>)
 8009f3e:	eeb0 8a40 	vmov.f32	s16, s0
 8009f42:	eef0 8a60 	vmov.f32	s17, s1
 8009f46:	f993 6000 	ldrsb.w	r6, [r3]
 8009f4a:	1c73      	adds	r3, r6, #1
 8009f4c:	d05b      	beq.n	800a006 <log+0xda>
 8009f4e:	4622      	mov	r2, r4
 8009f50:	462b      	mov	r3, r5
 8009f52:	4620      	mov	r0, r4
 8009f54:	4629      	mov	r1, r5
 8009f56:	f7f6 fdf9 	bl	8000b4c <__aeabi_dcmpun>
 8009f5a:	2800      	cmp	r0, #0
 8009f5c:	d153      	bne.n	800a006 <log+0xda>
 8009f5e:	2200      	movs	r2, #0
 8009f60:	2300      	movs	r3, #0
 8009f62:	4620      	mov	r0, r4
 8009f64:	4629      	mov	r1, r5
 8009f66:	f7f6 fde7 	bl	8000b38 <__aeabi_dcmpgt>
 8009f6a:	2800      	cmp	r0, #0
 8009f6c:	d14b      	bne.n	800a006 <log+0xda>
 8009f6e:	4b2b      	ldr	r3, [pc, #172]	; (800a01c <log+0xf0>)
 8009f70:	9301      	str	r3, [sp, #4]
 8009f72:	9008      	str	r0, [sp, #32]
 8009f74:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009f78:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009f7c:	b9a6      	cbnz	r6, 8009fa8 <log+0x7c>
 8009f7e:	4b28      	ldr	r3, [pc, #160]	; (800a020 <log+0xf4>)
 8009f80:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009f84:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009f88:	4620      	mov	r0, r4
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	4629      	mov	r1, r5
 8009f90:	f7f6 fdaa 	bl	8000ae8 <__aeabi_dcmpeq>
 8009f94:	bb40      	cbnz	r0, 8009fe8 <log+0xbc>
 8009f96:	2301      	movs	r3, #1
 8009f98:	2e02      	cmp	r6, #2
 8009f9a:	9300      	str	r3, [sp, #0]
 8009f9c:	d119      	bne.n	8009fd2 <log+0xa6>
 8009f9e:	f7fd fa69 	bl	8007474 <__errno>
 8009fa2:	2321      	movs	r3, #33	; 0x21
 8009fa4:	6003      	str	r3, [r0, #0]
 8009fa6:	e019      	b.n	8009fdc <log+0xb0>
 8009fa8:	4b1e      	ldr	r3, [pc, #120]	; (800a024 <log+0xf8>)
 8009faa:	2200      	movs	r2, #0
 8009fac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	4629      	mov	r1, r5
 8009fb8:	f7f6 fd96 	bl	8000ae8 <__aeabi_dcmpeq>
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	d0ea      	beq.n	8009f96 <log+0x6a>
 8009fc0:	2302      	movs	r3, #2
 8009fc2:	429e      	cmp	r6, r3
 8009fc4:	9300      	str	r3, [sp, #0]
 8009fc6:	d111      	bne.n	8009fec <log+0xc0>
 8009fc8:	f7fd fa54 	bl	8007474 <__errno>
 8009fcc:	2322      	movs	r3, #34	; 0x22
 8009fce:	6003      	str	r3, [r0, #0]
 8009fd0:	e011      	b.n	8009ff6 <log+0xca>
 8009fd2:	4668      	mov	r0, sp
 8009fd4:	f001 fe68 	bl	800bca8 <matherr>
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	d0e0      	beq.n	8009f9e <log+0x72>
 8009fdc:	4812      	ldr	r0, [pc, #72]	; (800a028 <log+0xfc>)
 8009fde:	f001 fe67 	bl	800bcb0 <nan>
 8009fe2:	ed8d 0b06 	vstr	d0, [sp, #24]
 8009fe6:	e006      	b.n	8009ff6 <log+0xca>
 8009fe8:	2302      	movs	r3, #2
 8009fea:	9300      	str	r3, [sp, #0]
 8009fec:	4668      	mov	r0, sp
 8009fee:	f001 fe5b 	bl	800bca8 <matherr>
 8009ff2:	2800      	cmp	r0, #0
 8009ff4:	d0e8      	beq.n	8009fc8 <log+0x9c>
 8009ff6:	9b08      	ldr	r3, [sp, #32]
 8009ff8:	b11b      	cbz	r3, 800a002 <log+0xd6>
 8009ffa:	f7fd fa3b 	bl	8007474 <__errno>
 8009ffe:	9b08      	ldr	r3, [sp, #32]
 800a000:	6003      	str	r3, [r0, #0]
 800a002:	ed9d 8b06 	vldr	d8, [sp, #24]
 800a006:	eeb0 0a48 	vmov.f32	s0, s16
 800a00a:	eef0 0a68 	vmov.f32	s1, s17
 800a00e:	b00a      	add	sp, #40	; 0x28
 800a010:	ecbd 8b02 	vpop	{d8}
 800a014:	bd70      	pop	{r4, r5, r6, pc}
 800a016:	bf00      	nop
 800a018:	200001f8 	.word	0x200001f8
 800a01c:	0800c305 	.word	0x0800c305
 800a020:	c7efffff 	.word	0xc7efffff
 800a024:	fff00000 	.word	0xfff00000
 800a028:	0800c1e9 	.word	0x0800c1e9
 800a02c:	00000000 	.word	0x00000000

0800a030 <__ieee754_asin>:
 800a030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a034:	ec55 4b10 	vmov	r4, r5, d0
 800a038:	4bcb      	ldr	r3, [pc, #812]	; (800a368 <__ieee754_asin+0x338>)
 800a03a:	b087      	sub	sp, #28
 800a03c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800a040:	429f      	cmp	r7, r3
 800a042:	9501      	str	r5, [sp, #4]
 800a044:	dd31      	ble.n	800a0aa <__ieee754_asin+0x7a>
 800a046:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 800a04a:	ee10 3a10 	vmov	r3, s0
 800a04e:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 800a052:	433b      	orrs	r3, r7
 800a054:	d117      	bne.n	800a086 <__ieee754_asin+0x56>
 800a056:	a3aa      	add	r3, pc, #680	; (adr r3, 800a300 <__ieee754_asin+0x2d0>)
 800a058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05c:	ee10 0a10 	vmov	r0, s0
 800a060:	4629      	mov	r1, r5
 800a062:	f7f6 fad9 	bl	8000618 <__aeabi_dmul>
 800a066:	a3a8      	add	r3, pc, #672	; (adr r3, 800a308 <__ieee754_asin+0x2d8>)
 800a068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06c:	4606      	mov	r6, r0
 800a06e:	460f      	mov	r7, r1
 800a070:	4620      	mov	r0, r4
 800a072:	4629      	mov	r1, r5
 800a074:	f7f6 fad0 	bl	8000618 <__aeabi_dmul>
 800a078:	4602      	mov	r2, r0
 800a07a:	460b      	mov	r3, r1
 800a07c:	4630      	mov	r0, r6
 800a07e:	4639      	mov	r1, r7
 800a080:	f7f6 f914 	bl	80002ac <__adddf3>
 800a084:	e00a      	b.n	800a09c <__ieee754_asin+0x6c>
 800a086:	ee10 2a10 	vmov	r2, s0
 800a08a:	462b      	mov	r3, r5
 800a08c:	4620      	mov	r0, r4
 800a08e:	4629      	mov	r1, r5
 800a090:	f7f6 f90a 	bl	80002a8 <__aeabi_dsub>
 800a094:	4602      	mov	r2, r0
 800a096:	460b      	mov	r3, r1
 800a098:	f7f6 fbe8 	bl	800086c <__aeabi_ddiv>
 800a09c:	4604      	mov	r4, r0
 800a09e:	460d      	mov	r5, r1
 800a0a0:	ec45 4b10 	vmov	d0, r4, r5
 800a0a4:	b007      	add	sp, #28
 800a0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0aa:	4bb0      	ldr	r3, [pc, #704]	; (800a36c <__ieee754_asin+0x33c>)
 800a0ac:	429f      	cmp	r7, r3
 800a0ae:	dc11      	bgt.n	800a0d4 <__ieee754_asin+0xa4>
 800a0b0:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800a0b4:	f280 80ae 	bge.w	800a214 <__ieee754_asin+0x1e4>
 800a0b8:	a395      	add	r3, pc, #596	; (adr r3, 800a310 <__ieee754_asin+0x2e0>)
 800a0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0be:	ee10 0a10 	vmov	r0, s0
 800a0c2:	4629      	mov	r1, r5
 800a0c4:	f7f6 f8f2 	bl	80002ac <__adddf3>
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	4ba9      	ldr	r3, [pc, #676]	; (800a370 <__ieee754_asin+0x340>)
 800a0cc:	f7f6 fd34 	bl	8000b38 <__aeabi_dcmpgt>
 800a0d0:	2800      	cmp	r0, #0
 800a0d2:	d1e5      	bne.n	800a0a0 <__ieee754_asin+0x70>
 800a0d4:	ec45 4b10 	vmov	d0, r4, r5
 800a0d8:	f001 fd56 	bl	800bb88 <fabs>
 800a0dc:	2000      	movs	r0, #0
 800a0de:	ec53 2b10 	vmov	r2, r3, d0
 800a0e2:	49a3      	ldr	r1, [pc, #652]	; (800a370 <__ieee754_asin+0x340>)
 800a0e4:	f7f6 f8e0 	bl	80002a8 <__aeabi_dsub>
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	4ba2      	ldr	r3, [pc, #648]	; (800a374 <__ieee754_asin+0x344>)
 800a0ec:	f7f6 fa94 	bl	8000618 <__aeabi_dmul>
 800a0f0:	a389      	add	r3, pc, #548	; (adr r3, 800a318 <__ieee754_asin+0x2e8>)
 800a0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f6:	4604      	mov	r4, r0
 800a0f8:	460d      	mov	r5, r1
 800a0fa:	f7f6 fa8d 	bl	8000618 <__aeabi_dmul>
 800a0fe:	a388      	add	r3, pc, #544	; (adr r3, 800a320 <__ieee754_asin+0x2f0>)
 800a100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a104:	f7f6 f8d2 	bl	80002ac <__adddf3>
 800a108:	4622      	mov	r2, r4
 800a10a:	462b      	mov	r3, r5
 800a10c:	f7f6 fa84 	bl	8000618 <__aeabi_dmul>
 800a110:	a385      	add	r3, pc, #532	; (adr r3, 800a328 <__ieee754_asin+0x2f8>)
 800a112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a116:	f7f6 f8c7 	bl	80002a8 <__aeabi_dsub>
 800a11a:	4622      	mov	r2, r4
 800a11c:	462b      	mov	r3, r5
 800a11e:	f7f6 fa7b 	bl	8000618 <__aeabi_dmul>
 800a122:	a383      	add	r3, pc, #524	; (adr r3, 800a330 <__ieee754_asin+0x300>)
 800a124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a128:	f7f6 f8c0 	bl	80002ac <__adddf3>
 800a12c:	4622      	mov	r2, r4
 800a12e:	462b      	mov	r3, r5
 800a130:	f7f6 fa72 	bl	8000618 <__aeabi_dmul>
 800a134:	a380      	add	r3, pc, #512	; (adr r3, 800a338 <__ieee754_asin+0x308>)
 800a136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13a:	f7f6 f8b5 	bl	80002a8 <__aeabi_dsub>
 800a13e:	4622      	mov	r2, r4
 800a140:	462b      	mov	r3, r5
 800a142:	f7f6 fa69 	bl	8000618 <__aeabi_dmul>
 800a146:	a37e      	add	r3, pc, #504	; (adr r3, 800a340 <__ieee754_asin+0x310>)
 800a148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14c:	f7f6 f8ae 	bl	80002ac <__adddf3>
 800a150:	4622      	mov	r2, r4
 800a152:	462b      	mov	r3, r5
 800a154:	f7f6 fa60 	bl	8000618 <__aeabi_dmul>
 800a158:	a37b      	add	r3, pc, #492	; (adr r3, 800a348 <__ieee754_asin+0x318>)
 800a15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15e:	4680      	mov	r8, r0
 800a160:	4689      	mov	r9, r1
 800a162:	4620      	mov	r0, r4
 800a164:	4629      	mov	r1, r5
 800a166:	f7f6 fa57 	bl	8000618 <__aeabi_dmul>
 800a16a:	a379      	add	r3, pc, #484	; (adr r3, 800a350 <__ieee754_asin+0x320>)
 800a16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a170:	f7f6 f89a 	bl	80002a8 <__aeabi_dsub>
 800a174:	4622      	mov	r2, r4
 800a176:	462b      	mov	r3, r5
 800a178:	f7f6 fa4e 	bl	8000618 <__aeabi_dmul>
 800a17c:	a376      	add	r3, pc, #472	; (adr r3, 800a358 <__ieee754_asin+0x328>)
 800a17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a182:	f7f6 f893 	bl	80002ac <__adddf3>
 800a186:	4622      	mov	r2, r4
 800a188:	462b      	mov	r3, r5
 800a18a:	f7f6 fa45 	bl	8000618 <__aeabi_dmul>
 800a18e:	a374      	add	r3, pc, #464	; (adr r3, 800a360 <__ieee754_asin+0x330>)
 800a190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a194:	f7f6 f888 	bl	80002a8 <__aeabi_dsub>
 800a198:	4622      	mov	r2, r4
 800a19a:	462b      	mov	r3, r5
 800a19c:	f7f6 fa3c 	bl	8000618 <__aeabi_dmul>
 800a1a0:	4b73      	ldr	r3, [pc, #460]	; (800a370 <__ieee754_asin+0x340>)
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f7f6 f882 	bl	80002ac <__adddf3>
 800a1a8:	ec45 4b10 	vmov	d0, r4, r5
 800a1ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1b0:	f000 fdd4 	bl	800ad5c <__ieee754_sqrt>
 800a1b4:	4b70      	ldr	r3, [pc, #448]	; (800a378 <__ieee754_asin+0x348>)
 800a1b6:	429f      	cmp	r7, r3
 800a1b8:	ec5b ab10 	vmov	sl, fp, d0
 800a1bc:	f340 80de 	ble.w	800a37c <__ieee754_asin+0x34c>
 800a1c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1c4:	4640      	mov	r0, r8
 800a1c6:	4649      	mov	r1, r9
 800a1c8:	f7f6 fb50 	bl	800086c <__aeabi_ddiv>
 800a1cc:	4652      	mov	r2, sl
 800a1ce:	465b      	mov	r3, fp
 800a1d0:	f7f6 fa22 	bl	8000618 <__aeabi_dmul>
 800a1d4:	4652      	mov	r2, sl
 800a1d6:	465b      	mov	r3, fp
 800a1d8:	f7f6 f868 	bl	80002ac <__adddf3>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	460b      	mov	r3, r1
 800a1e0:	f7f6 f864 	bl	80002ac <__adddf3>
 800a1e4:	a348      	add	r3, pc, #288	; (adr r3, 800a308 <__ieee754_asin+0x2d8>)
 800a1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ea:	f7f6 f85d 	bl	80002a8 <__aeabi_dsub>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	a143      	add	r1, pc, #268	; (adr r1, 800a300 <__ieee754_asin+0x2d0>)
 800a1f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1f8:	f7f6 f856 	bl	80002a8 <__aeabi_dsub>
 800a1fc:	9b01      	ldr	r3, [sp, #4]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	bfdc      	itt	le
 800a202:	4602      	movle	r2, r0
 800a204:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800a208:	4604      	mov	r4, r0
 800a20a:	460d      	mov	r5, r1
 800a20c:	bfdc      	itt	le
 800a20e:	4614      	movle	r4, r2
 800a210:	461d      	movle	r5, r3
 800a212:	e745      	b.n	800a0a0 <__ieee754_asin+0x70>
 800a214:	ee10 2a10 	vmov	r2, s0
 800a218:	ee10 0a10 	vmov	r0, s0
 800a21c:	462b      	mov	r3, r5
 800a21e:	4629      	mov	r1, r5
 800a220:	f7f6 f9fa 	bl	8000618 <__aeabi_dmul>
 800a224:	a33c      	add	r3, pc, #240	; (adr r3, 800a318 <__ieee754_asin+0x2e8>)
 800a226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22a:	4606      	mov	r6, r0
 800a22c:	460f      	mov	r7, r1
 800a22e:	f7f6 f9f3 	bl	8000618 <__aeabi_dmul>
 800a232:	a33b      	add	r3, pc, #236	; (adr r3, 800a320 <__ieee754_asin+0x2f0>)
 800a234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a238:	f7f6 f838 	bl	80002ac <__adddf3>
 800a23c:	4632      	mov	r2, r6
 800a23e:	463b      	mov	r3, r7
 800a240:	f7f6 f9ea 	bl	8000618 <__aeabi_dmul>
 800a244:	a338      	add	r3, pc, #224	; (adr r3, 800a328 <__ieee754_asin+0x2f8>)
 800a246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24a:	f7f6 f82d 	bl	80002a8 <__aeabi_dsub>
 800a24e:	4632      	mov	r2, r6
 800a250:	463b      	mov	r3, r7
 800a252:	f7f6 f9e1 	bl	8000618 <__aeabi_dmul>
 800a256:	a336      	add	r3, pc, #216	; (adr r3, 800a330 <__ieee754_asin+0x300>)
 800a258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25c:	f7f6 f826 	bl	80002ac <__adddf3>
 800a260:	4632      	mov	r2, r6
 800a262:	463b      	mov	r3, r7
 800a264:	f7f6 f9d8 	bl	8000618 <__aeabi_dmul>
 800a268:	a333      	add	r3, pc, #204	; (adr r3, 800a338 <__ieee754_asin+0x308>)
 800a26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26e:	f7f6 f81b 	bl	80002a8 <__aeabi_dsub>
 800a272:	4632      	mov	r2, r6
 800a274:	463b      	mov	r3, r7
 800a276:	f7f6 f9cf 	bl	8000618 <__aeabi_dmul>
 800a27a:	a331      	add	r3, pc, #196	; (adr r3, 800a340 <__ieee754_asin+0x310>)
 800a27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a280:	f7f6 f814 	bl	80002ac <__adddf3>
 800a284:	4632      	mov	r2, r6
 800a286:	463b      	mov	r3, r7
 800a288:	f7f6 f9c6 	bl	8000618 <__aeabi_dmul>
 800a28c:	a32e      	add	r3, pc, #184	; (adr r3, 800a348 <__ieee754_asin+0x318>)
 800a28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a292:	4680      	mov	r8, r0
 800a294:	4689      	mov	r9, r1
 800a296:	4630      	mov	r0, r6
 800a298:	4639      	mov	r1, r7
 800a29a:	f7f6 f9bd 	bl	8000618 <__aeabi_dmul>
 800a29e:	a32c      	add	r3, pc, #176	; (adr r3, 800a350 <__ieee754_asin+0x320>)
 800a2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a4:	f7f6 f800 	bl	80002a8 <__aeabi_dsub>
 800a2a8:	4632      	mov	r2, r6
 800a2aa:	463b      	mov	r3, r7
 800a2ac:	f7f6 f9b4 	bl	8000618 <__aeabi_dmul>
 800a2b0:	a329      	add	r3, pc, #164	; (adr r3, 800a358 <__ieee754_asin+0x328>)
 800a2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b6:	f7f5 fff9 	bl	80002ac <__adddf3>
 800a2ba:	4632      	mov	r2, r6
 800a2bc:	463b      	mov	r3, r7
 800a2be:	f7f6 f9ab 	bl	8000618 <__aeabi_dmul>
 800a2c2:	a327      	add	r3, pc, #156	; (adr r3, 800a360 <__ieee754_asin+0x330>)
 800a2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c8:	f7f5 ffee 	bl	80002a8 <__aeabi_dsub>
 800a2cc:	4632      	mov	r2, r6
 800a2ce:	463b      	mov	r3, r7
 800a2d0:	f7f6 f9a2 	bl	8000618 <__aeabi_dmul>
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	4b26      	ldr	r3, [pc, #152]	; (800a370 <__ieee754_asin+0x340>)
 800a2d8:	f7f5 ffe8 	bl	80002ac <__adddf3>
 800a2dc:	4602      	mov	r2, r0
 800a2de:	460b      	mov	r3, r1
 800a2e0:	4640      	mov	r0, r8
 800a2e2:	4649      	mov	r1, r9
 800a2e4:	f7f6 fac2 	bl	800086c <__aeabi_ddiv>
 800a2e8:	4622      	mov	r2, r4
 800a2ea:	462b      	mov	r3, r5
 800a2ec:	f7f6 f994 	bl	8000618 <__aeabi_dmul>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	4629      	mov	r1, r5
 800a2f8:	e6c2      	b.n	800a080 <__ieee754_asin+0x50>
 800a2fa:	bf00      	nop
 800a2fc:	f3af 8000 	nop.w
 800a300:	54442d18 	.word	0x54442d18
 800a304:	3ff921fb 	.word	0x3ff921fb
 800a308:	33145c07 	.word	0x33145c07
 800a30c:	3c91a626 	.word	0x3c91a626
 800a310:	8800759c 	.word	0x8800759c
 800a314:	7e37e43c 	.word	0x7e37e43c
 800a318:	0dfdf709 	.word	0x0dfdf709
 800a31c:	3f023de1 	.word	0x3f023de1
 800a320:	7501b288 	.word	0x7501b288
 800a324:	3f49efe0 	.word	0x3f49efe0
 800a328:	b5688f3b 	.word	0xb5688f3b
 800a32c:	3fa48228 	.word	0x3fa48228
 800a330:	0e884455 	.word	0x0e884455
 800a334:	3fc9c155 	.word	0x3fc9c155
 800a338:	03eb6f7d 	.word	0x03eb6f7d
 800a33c:	3fd4d612 	.word	0x3fd4d612
 800a340:	55555555 	.word	0x55555555
 800a344:	3fc55555 	.word	0x3fc55555
 800a348:	b12e9282 	.word	0xb12e9282
 800a34c:	3fb3b8c5 	.word	0x3fb3b8c5
 800a350:	1b8d0159 	.word	0x1b8d0159
 800a354:	3fe6066c 	.word	0x3fe6066c
 800a358:	9c598ac8 	.word	0x9c598ac8
 800a35c:	40002ae5 	.word	0x40002ae5
 800a360:	1c8a2d4b 	.word	0x1c8a2d4b
 800a364:	40033a27 	.word	0x40033a27
 800a368:	3fefffff 	.word	0x3fefffff
 800a36c:	3fdfffff 	.word	0x3fdfffff
 800a370:	3ff00000 	.word	0x3ff00000
 800a374:	3fe00000 	.word	0x3fe00000
 800a378:	3fef3332 	.word	0x3fef3332
 800a37c:	ee10 2a10 	vmov	r2, s0
 800a380:	ee10 0a10 	vmov	r0, s0
 800a384:	465b      	mov	r3, fp
 800a386:	4659      	mov	r1, fp
 800a388:	f7f5 ff90 	bl	80002ac <__adddf3>
 800a38c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a390:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a394:	4640      	mov	r0, r8
 800a396:	4649      	mov	r1, r9
 800a398:	f7f6 fa68 	bl	800086c <__aeabi_ddiv>
 800a39c:	4602      	mov	r2, r0
 800a39e:	460b      	mov	r3, r1
 800a3a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3a4:	f7f6 f938 	bl	8000618 <__aeabi_dmul>
 800a3a8:	2600      	movs	r6, #0
 800a3aa:	4680      	mov	r8, r0
 800a3ac:	4689      	mov	r9, r1
 800a3ae:	4632      	mov	r2, r6
 800a3b0:	465b      	mov	r3, fp
 800a3b2:	4630      	mov	r0, r6
 800a3b4:	4659      	mov	r1, fp
 800a3b6:	f7f6 f92f 	bl	8000618 <__aeabi_dmul>
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	460b      	mov	r3, r1
 800a3be:	4620      	mov	r0, r4
 800a3c0:	4629      	mov	r1, r5
 800a3c2:	f7f5 ff71 	bl	80002a8 <__aeabi_dsub>
 800a3c6:	4632      	mov	r2, r6
 800a3c8:	4604      	mov	r4, r0
 800a3ca:	460d      	mov	r5, r1
 800a3cc:	465b      	mov	r3, fp
 800a3ce:	4650      	mov	r0, sl
 800a3d0:	4659      	mov	r1, fp
 800a3d2:	f7f5 ff6b 	bl	80002ac <__adddf3>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	460b      	mov	r3, r1
 800a3da:	4620      	mov	r0, r4
 800a3dc:	4629      	mov	r1, r5
 800a3de:	f7f6 fa45 	bl	800086c <__aeabi_ddiv>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	f7f5 ff61 	bl	80002ac <__adddf3>
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	a114      	add	r1, pc, #80	; (adr r1, 800a440 <__ieee754_asin+0x410>)
 800a3f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3f4:	f7f5 ff58 	bl	80002a8 <__aeabi_dsub>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	460b      	mov	r3, r1
 800a3fc:	4640      	mov	r0, r8
 800a3fe:	4649      	mov	r1, r9
 800a400:	f7f5 ff52 	bl	80002a8 <__aeabi_dsub>
 800a404:	465f      	mov	r7, fp
 800a406:	4604      	mov	r4, r0
 800a408:	460d      	mov	r5, r1
 800a40a:	4632      	mov	r2, r6
 800a40c:	465b      	mov	r3, fp
 800a40e:	4630      	mov	r0, r6
 800a410:	4639      	mov	r1, r7
 800a412:	f7f5 ff4b 	bl	80002ac <__adddf3>
 800a416:	4602      	mov	r2, r0
 800a418:	460b      	mov	r3, r1
 800a41a:	a10b      	add	r1, pc, #44	; (adr r1, 800a448 <__ieee754_asin+0x418>)
 800a41c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a420:	f7f5 ff42 	bl	80002a8 <__aeabi_dsub>
 800a424:	4602      	mov	r2, r0
 800a426:	460b      	mov	r3, r1
 800a428:	4620      	mov	r0, r4
 800a42a:	4629      	mov	r1, r5
 800a42c:	f7f5 ff3c 	bl	80002a8 <__aeabi_dsub>
 800a430:	4602      	mov	r2, r0
 800a432:	460b      	mov	r3, r1
 800a434:	a104      	add	r1, pc, #16	; (adr r1, 800a448 <__ieee754_asin+0x418>)
 800a436:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a43a:	e6dd      	b.n	800a1f8 <__ieee754_asin+0x1c8>
 800a43c:	f3af 8000 	nop.w
 800a440:	33145c07 	.word	0x33145c07
 800a444:	3c91a626 	.word	0x3c91a626
 800a448:	54442d18 	.word	0x54442d18
 800a44c:	3fe921fb 	.word	0x3fe921fb

0800a450 <__ieee754_atan2>:
 800a450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a454:	ec57 6b11 	vmov	r6, r7, d1
 800a458:	4273      	negs	r3, r6
 800a45a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800a45e:	4333      	orrs	r3, r6
 800a460:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800a608 <__ieee754_atan2+0x1b8>
 800a464:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a468:	4573      	cmp	r3, lr
 800a46a:	ec51 0b10 	vmov	r0, r1, d0
 800a46e:	ee11 8a10 	vmov	r8, s2
 800a472:	d80a      	bhi.n	800a48a <__ieee754_atan2+0x3a>
 800a474:	4244      	negs	r4, r0
 800a476:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a47a:	4304      	orrs	r4, r0
 800a47c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a480:	4574      	cmp	r4, lr
 800a482:	468c      	mov	ip, r1
 800a484:	ee10 9a10 	vmov	r9, s0
 800a488:	d907      	bls.n	800a49a <__ieee754_atan2+0x4a>
 800a48a:	4632      	mov	r2, r6
 800a48c:	463b      	mov	r3, r7
 800a48e:	f7f5 ff0d 	bl	80002ac <__adddf3>
 800a492:	ec41 0b10 	vmov	d0, r0, r1
 800a496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a49a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800a49e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a4a2:	4334      	orrs	r4, r6
 800a4a4:	d103      	bne.n	800a4ae <__ieee754_atan2+0x5e>
 800a4a6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4aa:	f001 b9cd 	b.w	800b848 <atan>
 800a4ae:	17bc      	asrs	r4, r7, #30
 800a4b0:	f004 0402 	and.w	r4, r4, #2
 800a4b4:	ea53 0909 	orrs.w	r9, r3, r9
 800a4b8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a4bc:	d107      	bne.n	800a4ce <__ieee754_atan2+0x7e>
 800a4be:	2c02      	cmp	r4, #2
 800a4c0:	d073      	beq.n	800a5aa <__ieee754_atan2+0x15a>
 800a4c2:	2c03      	cmp	r4, #3
 800a4c4:	d1e5      	bne.n	800a492 <__ieee754_atan2+0x42>
 800a4c6:	a13e      	add	r1, pc, #248	; (adr r1, 800a5c0 <__ieee754_atan2+0x170>)
 800a4c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4cc:	e7e1      	b.n	800a492 <__ieee754_atan2+0x42>
 800a4ce:	ea52 0808 	orrs.w	r8, r2, r8
 800a4d2:	d106      	bne.n	800a4e2 <__ieee754_atan2+0x92>
 800a4d4:	f1bc 0f00 	cmp.w	ip, #0
 800a4d8:	da6b      	bge.n	800a5b2 <__ieee754_atan2+0x162>
 800a4da:	a13b      	add	r1, pc, #236	; (adr r1, 800a5c8 <__ieee754_atan2+0x178>)
 800a4dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4e0:	e7d7      	b.n	800a492 <__ieee754_atan2+0x42>
 800a4e2:	4572      	cmp	r2, lr
 800a4e4:	d120      	bne.n	800a528 <__ieee754_atan2+0xd8>
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d111      	bne.n	800a50e <__ieee754_atan2+0xbe>
 800a4ea:	2c02      	cmp	r4, #2
 800a4ec:	d007      	beq.n	800a4fe <__ieee754_atan2+0xae>
 800a4ee:	2c03      	cmp	r4, #3
 800a4f0:	d009      	beq.n	800a506 <__ieee754_atan2+0xb6>
 800a4f2:	2c01      	cmp	r4, #1
 800a4f4:	d155      	bne.n	800a5a2 <__ieee754_atan2+0x152>
 800a4f6:	a136      	add	r1, pc, #216	; (adr r1, 800a5d0 <__ieee754_atan2+0x180>)
 800a4f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4fc:	e7c9      	b.n	800a492 <__ieee754_atan2+0x42>
 800a4fe:	a136      	add	r1, pc, #216	; (adr r1, 800a5d8 <__ieee754_atan2+0x188>)
 800a500:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a504:	e7c5      	b.n	800a492 <__ieee754_atan2+0x42>
 800a506:	a136      	add	r1, pc, #216	; (adr r1, 800a5e0 <__ieee754_atan2+0x190>)
 800a508:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a50c:	e7c1      	b.n	800a492 <__ieee754_atan2+0x42>
 800a50e:	2c02      	cmp	r4, #2
 800a510:	d04b      	beq.n	800a5aa <__ieee754_atan2+0x15a>
 800a512:	2c03      	cmp	r4, #3
 800a514:	d0d7      	beq.n	800a4c6 <__ieee754_atan2+0x76>
 800a516:	2c01      	cmp	r4, #1
 800a518:	f04f 0000 	mov.w	r0, #0
 800a51c:	d102      	bne.n	800a524 <__ieee754_atan2+0xd4>
 800a51e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800a522:	e7b6      	b.n	800a492 <__ieee754_atan2+0x42>
 800a524:	2100      	movs	r1, #0
 800a526:	e7b4      	b.n	800a492 <__ieee754_atan2+0x42>
 800a528:	4573      	cmp	r3, lr
 800a52a:	d0d3      	beq.n	800a4d4 <__ieee754_atan2+0x84>
 800a52c:	1a9b      	subs	r3, r3, r2
 800a52e:	151b      	asrs	r3, r3, #20
 800a530:	2b3c      	cmp	r3, #60	; 0x3c
 800a532:	dc1e      	bgt.n	800a572 <__ieee754_atan2+0x122>
 800a534:	2f00      	cmp	r7, #0
 800a536:	da01      	bge.n	800a53c <__ieee754_atan2+0xec>
 800a538:	333c      	adds	r3, #60	; 0x3c
 800a53a:	db1e      	blt.n	800a57a <__ieee754_atan2+0x12a>
 800a53c:	4632      	mov	r2, r6
 800a53e:	463b      	mov	r3, r7
 800a540:	f7f6 f994 	bl	800086c <__aeabi_ddiv>
 800a544:	ec41 0b10 	vmov	d0, r0, r1
 800a548:	f001 fb1e 	bl	800bb88 <fabs>
 800a54c:	f001 f97c 	bl	800b848 <atan>
 800a550:	ec51 0b10 	vmov	r0, r1, d0
 800a554:	2c01      	cmp	r4, #1
 800a556:	d013      	beq.n	800a580 <__ieee754_atan2+0x130>
 800a558:	2c02      	cmp	r4, #2
 800a55a:	d015      	beq.n	800a588 <__ieee754_atan2+0x138>
 800a55c:	2c00      	cmp	r4, #0
 800a55e:	d098      	beq.n	800a492 <__ieee754_atan2+0x42>
 800a560:	a321      	add	r3, pc, #132	; (adr r3, 800a5e8 <__ieee754_atan2+0x198>)
 800a562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a566:	f7f5 fe9f 	bl	80002a8 <__aeabi_dsub>
 800a56a:	a321      	add	r3, pc, #132	; (adr r3, 800a5f0 <__ieee754_atan2+0x1a0>)
 800a56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a570:	e014      	b.n	800a59c <__ieee754_atan2+0x14c>
 800a572:	a121      	add	r1, pc, #132	; (adr r1, 800a5f8 <__ieee754_atan2+0x1a8>)
 800a574:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a578:	e7ec      	b.n	800a554 <__ieee754_atan2+0x104>
 800a57a:	2000      	movs	r0, #0
 800a57c:	2100      	movs	r1, #0
 800a57e:	e7e9      	b.n	800a554 <__ieee754_atan2+0x104>
 800a580:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a584:	4619      	mov	r1, r3
 800a586:	e784      	b.n	800a492 <__ieee754_atan2+0x42>
 800a588:	a317      	add	r3, pc, #92	; (adr r3, 800a5e8 <__ieee754_atan2+0x198>)
 800a58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58e:	f7f5 fe8b 	bl	80002a8 <__aeabi_dsub>
 800a592:	4602      	mov	r2, r0
 800a594:	460b      	mov	r3, r1
 800a596:	a116      	add	r1, pc, #88	; (adr r1, 800a5f0 <__ieee754_atan2+0x1a0>)
 800a598:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a59c:	f7f5 fe84 	bl	80002a8 <__aeabi_dsub>
 800a5a0:	e777      	b.n	800a492 <__ieee754_atan2+0x42>
 800a5a2:	a117      	add	r1, pc, #92	; (adr r1, 800a600 <__ieee754_atan2+0x1b0>)
 800a5a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5a8:	e773      	b.n	800a492 <__ieee754_atan2+0x42>
 800a5aa:	a111      	add	r1, pc, #68	; (adr r1, 800a5f0 <__ieee754_atan2+0x1a0>)
 800a5ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5b0:	e76f      	b.n	800a492 <__ieee754_atan2+0x42>
 800a5b2:	a111      	add	r1, pc, #68	; (adr r1, 800a5f8 <__ieee754_atan2+0x1a8>)
 800a5b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5b8:	e76b      	b.n	800a492 <__ieee754_atan2+0x42>
 800a5ba:	bf00      	nop
 800a5bc:	f3af 8000 	nop.w
 800a5c0:	54442d18 	.word	0x54442d18
 800a5c4:	c00921fb 	.word	0xc00921fb
 800a5c8:	54442d18 	.word	0x54442d18
 800a5cc:	bff921fb 	.word	0xbff921fb
 800a5d0:	54442d18 	.word	0x54442d18
 800a5d4:	bfe921fb 	.word	0xbfe921fb
 800a5d8:	7f3321d2 	.word	0x7f3321d2
 800a5dc:	4002d97c 	.word	0x4002d97c
 800a5e0:	7f3321d2 	.word	0x7f3321d2
 800a5e4:	c002d97c 	.word	0xc002d97c
 800a5e8:	33145c07 	.word	0x33145c07
 800a5ec:	3ca1a626 	.word	0x3ca1a626
 800a5f0:	54442d18 	.word	0x54442d18
 800a5f4:	400921fb 	.word	0x400921fb
 800a5f8:	54442d18 	.word	0x54442d18
 800a5fc:	3ff921fb 	.word	0x3ff921fb
 800a600:	54442d18 	.word	0x54442d18
 800a604:	3fe921fb 	.word	0x3fe921fb
 800a608:	7ff00000 	.word	0x7ff00000
 800a60c:	00000000 	.word	0x00000000

0800a610 <__ieee754_log>:
 800a610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a614:	ec51 0b10 	vmov	r0, r1, d0
 800a618:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800a61c:	b087      	sub	sp, #28
 800a61e:	460d      	mov	r5, r1
 800a620:	da27      	bge.n	800a672 <__ieee754_log+0x62>
 800a622:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a626:	4303      	orrs	r3, r0
 800a628:	ee10 2a10 	vmov	r2, s0
 800a62c:	d10a      	bne.n	800a644 <__ieee754_log+0x34>
 800a62e:	49cc      	ldr	r1, [pc, #816]	; (800a960 <__ieee754_log+0x350>)
 800a630:	2200      	movs	r2, #0
 800a632:	2300      	movs	r3, #0
 800a634:	2000      	movs	r0, #0
 800a636:	f7f6 f919 	bl	800086c <__aeabi_ddiv>
 800a63a:	ec41 0b10 	vmov	d0, r0, r1
 800a63e:	b007      	add	sp, #28
 800a640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a644:	2900      	cmp	r1, #0
 800a646:	da05      	bge.n	800a654 <__ieee754_log+0x44>
 800a648:	460b      	mov	r3, r1
 800a64a:	f7f5 fe2d 	bl	80002a8 <__aeabi_dsub>
 800a64e:	2200      	movs	r2, #0
 800a650:	2300      	movs	r3, #0
 800a652:	e7f0      	b.n	800a636 <__ieee754_log+0x26>
 800a654:	4bc3      	ldr	r3, [pc, #780]	; (800a964 <__ieee754_log+0x354>)
 800a656:	2200      	movs	r2, #0
 800a658:	f7f5 ffde 	bl	8000618 <__aeabi_dmul>
 800a65c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800a660:	460d      	mov	r5, r1
 800a662:	4ac1      	ldr	r2, [pc, #772]	; (800a968 <__ieee754_log+0x358>)
 800a664:	4295      	cmp	r5, r2
 800a666:	dd06      	ble.n	800a676 <__ieee754_log+0x66>
 800a668:	4602      	mov	r2, r0
 800a66a:	460b      	mov	r3, r1
 800a66c:	f7f5 fe1e 	bl	80002ac <__adddf3>
 800a670:	e7e3      	b.n	800a63a <__ieee754_log+0x2a>
 800a672:	2300      	movs	r3, #0
 800a674:	e7f5      	b.n	800a662 <__ieee754_log+0x52>
 800a676:	152c      	asrs	r4, r5, #20
 800a678:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a67c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a680:	441c      	add	r4, r3
 800a682:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800a686:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800a68a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a68e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800a692:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800a696:	ea42 0105 	orr.w	r1, r2, r5
 800a69a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800a69e:	2200      	movs	r2, #0
 800a6a0:	4bb2      	ldr	r3, [pc, #712]	; (800a96c <__ieee754_log+0x35c>)
 800a6a2:	f7f5 fe01 	bl	80002a8 <__aeabi_dsub>
 800a6a6:	1cab      	adds	r3, r5, #2
 800a6a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6ac:	2b02      	cmp	r3, #2
 800a6ae:	4682      	mov	sl, r0
 800a6b0:	468b      	mov	fp, r1
 800a6b2:	f04f 0200 	mov.w	r2, #0
 800a6b6:	dc53      	bgt.n	800a760 <__ieee754_log+0x150>
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	f7f6 fa15 	bl	8000ae8 <__aeabi_dcmpeq>
 800a6be:	b1d0      	cbz	r0, 800a6f6 <__ieee754_log+0xe6>
 800a6c0:	2c00      	cmp	r4, #0
 800a6c2:	f000 8120 	beq.w	800a906 <__ieee754_log+0x2f6>
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f7f5 ff3c 	bl	8000544 <__aeabi_i2d>
 800a6cc:	a390      	add	r3, pc, #576	; (adr r3, 800a910 <__ieee754_log+0x300>)
 800a6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d2:	4606      	mov	r6, r0
 800a6d4:	460f      	mov	r7, r1
 800a6d6:	f7f5 ff9f 	bl	8000618 <__aeabi_dmul>
 800a6da:	a38f      	add	r3, pc, #572	; (adr r3, 800a918 <__ieee754_log+0x308>)
 800a6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e0:	4604      	mov	r4, r0
 800a6e2:	460d      	mov	r5, r1
 800a6e4:	4630      	mov	r0, r6
 800a6e6:	4639      	mov	r1, r7
 800a6e8:	f7f5 ff96 	bl	8000618 <__aeabi_dmul>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	4629      	mov	r1, r5
 800a6f4:	e7ba      	b.n	800a66c <__ieee754_log+0x5c>
 800a6f6:	a38a      	add	r3, pc, #552	; (adr r3, 800a920 <__ieee754_log+0x310>)
 800a6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fc:	4650      	mov	r0, sl
 800a6fe:	4659      	mov	r1, fp
 800a700:	f7f5 ff8a 	bl	8000618 <__aeabi_dmul>
 800a704:	4602      	mov	r2, r0
 800a706:	460b      	mov	r3, r1
 800a708:	2000      	movs	r0, #0
 800a70a:	4999      	ldr	r1, [pc, #612]	; (800a970 <__ieee754_log+0x360>)
 800a70c:	f7f5 fdcc 	bl	80002a8 <__aeabi_dsub>
 800a710:	4652      	mov	r2, sl
 800a712:	4606      	mov	r6, r0
 800a714:	460f      	mov	r7, r1
 800a716:	465b      	mov	r3, fp
 800a718:	4650      	mov	r0, sl
 800a71a:	4659      	mov	r1, fp
 800a71c:	f7f5 ff7c 	bl	8000618 <__aeabi_dmul>
 800a720:	4602      	mov	r2, r0
 800a722:	460b      	mov	r3, r1
 800a724:	4630      	mov	r0, r6
 800a726:	4639      	mov	r1, r7
 800a728:	f7f5 ff76 	bl	8000618 <__aeabi_dmul>
 800a72c:	4606      	mov	r6, r0
 800a72e:	460f      	mov	r7, r1
 800a730:	b914      	cbnz	r4, 800a738 <__ieee754_log+0x128>
 800a732:	4632      	mov	r2, r6
 800a734:	463b      	mov	r3, r7
 800a736:	e0a0      	b.n	800a87a <__ieee754_log+0x26a>
 800a738:	4620      	mov	r0, r4
 800a73a:	f7f5 ff03 	bl	8000544 <__aeabi_i2d>
 800a73e:	a374      	add	r3, pc, #464	; (adr r3, 800a910 <__ieee754_log+0x300>)
 800a740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a744:	4680      	mov	r8, r0
 800a746:	4689      	mov	r9, r1
 800a748:	f7f5 ff66 	bl	8000618 <__aeabi_dmul>
 800a74c:	a372      	add	r3, pc, #456	; (adr r3, 800a918 <__ieee754_log+0x308>)
 800a74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a752:	4604      	mov	r4, r0
 800a754:	460d      	mov	r5, r1
 800a756:	4640      	mov	r0, r8
 800a758:	4649      	mov	r1, r9
 800a75a:	f7f5 ff5d 	bl	8000618 <__aeabi_dmul>
 800a75e:	e0a5      	b.n	800a8ac <__ieee754_log+0x29c>
 800a760:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a764:	f7f5 fda2 	bl	80002ac <__adddf3>
 800a768:	4602      	mov	r2, r0
 800a76a:	460b      	mov	r3, r1
 800a76c:	4650      	mov	r0, sl
 800a76e:	4659      	mov	r1, fp
 800a770:	f7f6 f87c 	bl	800086c <__aeabi_ddiv>
 800a774:	e9cd 0100 	strd	r0, r1, [sp]
 800a778:	4620      	mov	r0, r4
 800a77a:	f7f5 fee3 	bl	8000544 <__aeabi_i2d>
 800a77e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a782:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a786:	4610      	mov	r0, r2
 800a788:	4619      	mov	r1, r3
 800a78a:	f7f5 ff45 	bl	8000618 <__aeabi_dmul>
 800a78e:	4602      	mov	r2, r0
 800a790:	460b      	mov	r3, r1
 800a792:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a796:	f7f5 ff3f 	bl	8000618 <__aeabi_dmul>
 800a79a:	a363      	add	r3, pc, #396	; (adr r3, 800a928 <__ieee754_log+0x318>)
 800a79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a0:	4680      	mov	r8, r0
 800a7a2:	4689      	mov	r9, r1
 800a7a4:	f7f5 ff38 	bl	8000618 <__aeabi_dmul>
 800a7a8:	a361      	add	r3, pc, #388	; (adr r3, 800a930 <__ieee754_log+0x320>)
 800a7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ae:	f7f5 fd7d 	bl	80002ac <__adddf3>
 800a7b2:	4642      	mov	r2, r8
 800a7b4:	464b      	mov	r3, r9
 800a7b6:	f7f5 ff2f 	bl	8000618 <__aeabi_dmul>
 800a7ba:	a35f      	add	r3, pc, #380	; (adr r3, 800a938 <__ieee754_log+0x328>)
 800a7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c0:	f7f5 fd74 	bl	80002ac <__adddf3>
 800a7c4:	4642      	mov	r2, r8
 800a7c6:	464b      	mov	r3, r9
 800a7c8:	f7f5 ff26 	bl	8000618 <__aeabi_dmul>
 800a7cc:	a35c      	add	r3, pc, #368	; (adr r3, 800a940 <__ieee754_log+0x330>)
 800a7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d2:	f7f5 fd6b 	bl	80002ac <__adddf3>
 800a7d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7da:	f7f5 ff1d 	bl	8000618 <__aeabi_dmul>
 800a7de:	a35a      	add	r3, pc, #360	; (adr r3, 800a948 <__ieee754_log+0x338>)
 800a7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7e8:	4640      	mov	r0, r8
 800a7ea:	4649      	mov	r1, r9
 800a7ec:	f7f5 ff14 	bl	8000618 <__aeabi_dmul>
 800a7f0:	a357      	add	r3, pc, #348	; (adr r3, 800a950 <__ieee754_log+0x340>)
 800a7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f6:	f7f5 fd59 	bl	80002ac <__adddf3>
 800a7fa:	4642      	mov	r2, r8
 800a7fc:	464b      	mov	r3, r9
 800a7fe:	f7f5 ff0b 	bl	8000618 <__aeabi_dmul>
 800a802:	a355      	add	r3, pc, #340	; (adr r3, 800a958 <__ieee754_log+0x348>)
 800a804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a808:	f7f5 fd50 	bl	80002ac <__adddf3>
 800a80c:	4642      	mov	r2, r8
 800a80e:	464b      	mov	r3, r9
 800a810:	f7f5 ff02 	bl	8000618 <__aeabi_dmul>
 800a814:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 800a818:	4602      	mov	r2, r0
 800a81a:	460b      	mov	r3, r1
 800a81c:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800a820:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a824:	f7f5 fd42 	bl	80002ac <__adddf3>
 800a828:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800a82c:	3551      	adds	r5, #81	; 0x51
 800a82e:	4335      	orrs	r5, r6
 800a830:	2d00      	cmp	r5, #0
 800a832:	4680      	mov	r8, r0
 800a834:	4689      	mov	r9, r1
 800a836:	dd48      	ble.n	800a8ca <__ieee754_log+0x2ba>
 800a838:	2200      	movs	r2, #0
 800a83a:	4b4d      	ldr	r3, [pc, #308]	; (800a970 <__ieee754_log+0x360>)
 800a83c:	4650      	mov	r0, sl
 800a83e:	4659      	mov	r1, fp
 800a840:	f7f5 feea 	bl	8000618 <__aeabi_dmul>
 800a844:	4652      	mov	r2, sl
 800a846:	465b      	mov	r3, fp
 800a848:	f7f5 fee6 	bl	8000618 <__aeabi_dmul>
 800a84c:	4602      	mov	r2, r0
 800a84e:	460b      	mov	r3, r1
 800a850:	4606      	mov	r6, r0
 800a852:	460f      	mov	r7, r1
 800a854:	4640      	mov	r0, r8
 800a856:	4649      	mov	r1, r9
 800a858:	f7f5 fd28 	bl	80002ac <__adddf3>
 800a85c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a860:	f7f5 feda 	bl	8000618 <__aeabi_dmul>
 800a864:	4680      	mov	r8, r0
 800a866:	4689      	mov	r9, r1
 800a868:	b964      	cbnz	r4, 800a884 <__ieee754_log+0x274>
 800a86a:	4602      	mov	r2, r0
 800a86c:	460b      	mov	r3, r1
 800a86e:	4630      	mov	r0, r6
 800a870:	4639      	mov	r1, r7
 800a872:	f7f5 fd19 	bl	80002a8 <__aeabi_dsub>
 800a876:	4602      	mov	r2, r0
 800a878:	460b      	mov	r3, r1
 800a87a:	4650      	mov	r0, sl
 800a87c:	4659      	mov	r1, fp
 800a87e:	f7f5 fd13 	bl	80002a8 <__aeabi_dsub>
 800a882:	e6da      	b.n	800a63a <__ieee754_log+0x2a>
 800a884:	a322      	add	r3, pc, #136	; (adr r3, 800a910 <__ieee754_log+0x300>)
 800a886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a88e:	f7f5 fec3 	bl	8000618 <__aeabi_dmul>
 800a892:	a321      	add	r3, pc, #132	; (adr r3, 800a918 <__ieee754_log+0x308>)
 800a894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a898:	4604      	mov	r4, r0
 800a89a:	460d      	mov	r5, r1
 800a89c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8a0:	f7f5 feba 	bl	8000618 <__aeabi_dmul>
 800a8a4:	4642      	mov	r2, r8
 800a8a6:	464b      	mov	r3, r9
 800a8a8:	f7f5 fd00 	bl	80002ac <__adddf3>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	4630      	mov	r0, r6
 800a8b2:	4639      	mov	r1, r7
 800a8b4:	f7f5 fcf8 	bl	80002a8 <__aeabi_dsub>
 800a8b8:	4652      	mov	r2, sl
 800a8ba:	465b      	mov	r3, fp
 800a8bc:	f7f5 fcf4 	bl	80002a8 <__aeabi_dsub>
 800a8c0:	4602      	mov	r2, r0
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	4629      	mov	r1, r5
 800a8c8:	e7d9      	b.n	800a87e <__ieee754_log+0x26e>
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	4650      	mov	r0, sl
 800a8d0:	4659      	mov	r1, fp
 800a8d2:	f7f5 fce9 	bl	80002a8 <__aeabi_dsub>
 800a8d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8da:	f7f5 fe9d 	bl	8000618 <__aeabi_dmul>
 800a8de:	4606      	mov	r6, r0
 800a8e0:	460f      	mov	r7, r1
 800a8e2:	2c00      	cmp	r4, #0
 800a8e4:	f43f af25 	beq.w	800a732 <__ieee754_log+0x122>
 800a8e8:	a309      	add	r3, pc, #36	; (adr r3, 800a910 <__ieee754_log+0x300>)
 800a8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8f2:	f7f5 fe91 	bl	8000618 <__aeabi_dmul>
 800a8f6:	a308      	add	r3, pc, #32	; (adr r3, 800a918 <__ieee754_log+0x308>)
 800a8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fc:	4604      	mov	r4, r0
 800a8fe:	460d      	mov	r5, r1
 800a900:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a904:	e729      	b.n	800a75a <__ieee754_log+0x14a>
 800a906:	2000      	movs	r0, #0
 800a908:	2100      	movs	r1, #0
 800a90a:	e696      	b.n	800a63a <__ieee754_log+0x2a>
 800a90c:	f3af 8000 	nop.w
 800a910:	fee00000 	.word	0xfee00000
 800a914:	3fe62e42 	.word	0x3fe62e42
 800a918:	35793c76 	.word	0x35793c76
 800a91c:	3dea39ef 	.word	0x3dea39ef
 800a920:	55555555 	.word	0x55555555
 800a924:	3fd55555 	.word	0x3fd55555
 800a928:	df3e5244 	.word	0xdf3e5244
 800a92c:	3fc2f112 	.word	0x3fc2f112
 800a930:	96cb03de 	.word	0x96cb03de
 800a934:	3fc74664 	.word	0x3fc74664
 800a938:	94229359 	.word	0x94229359
 800a93c:	3fd24924 	.word	0x3fd24924
 800a940:	55555593 	.word	0x55555593
 800a944:	3fe55555 	.word	0x3fe55555
 800a948:	d078c69f 	.word	0xd078c69f
 800a94c:	3fc39a09 	.word	0x3fc39a09
 800a950:	1d8e78af 	.word	0x1d8e78af
 800a954:	3fcc71c5 	.word	0x3fcc71c5
 800a958:	9997fa04 	.word	0x9997fa04
 800a95c:	3fd99999 	.word	0x3fd99999
 800a960:	c3500000 	.word	0xc3500000
 800a964:	43500000 	.word	0x43500000
 800a968:	7fefffff 	.word	0x7fefffff
 800a96c:	3ff00000 	.word	0x3ff00000
 800a970:	3fe00000 	.word	0x3fe00000
 800a974:	00000000 	.word	0x00000000

0800a978 <__ieee754_rem_pio2>:
 800a978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a97c:	ec57 6b10 	vmov	r6, r7, d0
 800a980:	4bc3      	ldr	r3, [pc, #780]	; (800ac90 <__ieee754_rem_pio2+0x318>)
 800a982:	b08d      	sub	sp, #52	; 0x34
 800a984:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a988:	4598      	cmp	r8, r3
 800a98a:	4604      	mov	r4, r0
 800a98c:	9704      	str	r7, [sp, #16]
 800a98e:	dc07      	bgt.n	800a9a0 <__ieee754_rem_pio2+0x28>
 800a990:	2200      	movs	r2, #0
 800a992:	2300      	movs	r3, #0
 800a994:	ed84 0b00 	vstr	d0, [r4]
 800a998:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a99c:	2500      	movs	r5, #0
 800a99e:	e027      	b.n	800a9f0 <__ieee754_rem_pio2+0x78>
 800a9a0:	4bbc      	ldr	r3, [pc, #752]	; (800ac94 <__ieee754_rem_pio2+0x31c>)
 800a9a2:	4598      	cmp	r8, r3
 800a9a4:	dc75      	bgt.n	800aa92 <__ieee754_rem_pio2+0x11a>
 800a9a6:	9b04      	ldr	r3, [sp, #16]
 800a9a8:	4dbb      	ldr	r5, [pc, #748]	; (800ac98 <__ieee754_rem_pio2+0x320>)
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	ee10 0a10 	vmov	r0, s0
 800a9b0:	a3a9      	add	r3, pc, #676	; (adr r3, 800ac58 <__ieee754_rem_pio2+0x2e0>)
 800a9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b6:	4639      	mov	r1, r7
 800a9b8:	dd36      	ble.n	800aa28 <__ieee754_rem_pio2+0xb0>
 800a9ba:	f7f5 fc75 	bl	80002a8 <__aeabi_dsub>
 800a9be:	45a8      	cmp	r8, r5
 800a9c0:	4606      	mov	r6, r0
 800a9c2:	460f      	mov	r7, r1
 800a9c4:	d018      	beq.n	800a9f8 <__ieee754_rem_pio2+0x80>
 800a9c6:	a3a6      	add	r3, pc, #664	; (adr r3, 800ac60 <__ieee754_rem_pio2+0x2e8>)
 800a9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9cc:	f7f5 fc6c 	bl	80002a8 <__aeabi_dsub>
 800a9d0:	4602      	mov	r2, r0
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	e9c4 2300 	strd	r2, r3, [r4]
 800a9d8:	4630      	mov	r0, r6
 800a9da:	4639      	mov	r1, r7
 800a9dc:	f7f5 fc64 	bl	80002a8 <__aeabi_dsub>
 800a9e0:	a39f      	add	r3, pc, #636	; (adr r3, 800ac60 <__ieee754_rem_pio2+0x2e8>)
 800a9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e6:	f7f5 fc5f 	bl	80002a8 <__aeabi_dsub>
 800a9ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a9ee:	2501      	movs	r5, #1
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	b00d      	add	sp, #52	; 0x34
 800a9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9f8:	a39b      	add	r3, pc, #620	; (adr r3, 800ac68 <__ieee754_rem_pio2+0x2f0>)
 800a9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fe:	f7f5 fc53 	bl	80002a8 <__aeabi_dsub>
 800aa02:	a39b      	add	r3, pc, #620	; (adr r3, 800ac70 <__ieee754_rem_pio2+0x2f8>)
 800aa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa08:	4606      	mov	r6, r0
 800aa0a:	460f      	mov	r7, r1
 800aa0c:	f7f5 fc4c 	bl	80002a8 <__aeabi_dsub>
 800aa10:	4602      	mov	r2, r0
 800aa12:	460b      	mov	r3, r1
 800aa14:	e9c4 2300 	strd	r2, r3, [r4]
 800aa18:	4630      	mov	r0, r6
 800aa1a:	4639      	mov	r1, r7
 800aa1c:	f7f5 fc44 	bl	80002a8 <__aeabi_dsub>
 800aa20:	a393      	add	r3, pc, #588	; (adr r3, 800ac70 <__ieee754_rem_pio2+0x2f8>)
 800aa22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa26:	e7de      	b.n	800a9e6 <__ieee754_rem_pio2+0x6e>
 800aa28:	f7f5 fc40 	bl	80002ac <__adddf3>
 800aa2c:	45a8      	cmp	r8, r5
 800aa2e:	4606      	mov	r6, r0
 800aa30:	460f      	mov	r7, r1
 800aa32:	d016      	beq.n	800aa62 <__ieee754_rem_pio2+0xea>
 800aa34:	a38a      	add	r3, pc, #552	; (adr r3, 800ac60 <__ieee754_rem_pio2+0x2e8>)
 800aa36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa3a:	f7f5 fc37 	bl	80002ac <__adddf3>
 800aa3e:	4602      	mov	r2, r0
 800aa40:	460b      	mov	r3, r1
 800aa42:	e9c4 2300 	strd	r2, r3, [r4]
 800aa46:	4630      	mov	r0, r6
 800aa48:	4639      	mov	r1, r7
 800aa4a:	f7f5 fc2d 	bl	80002a8 <__aeabi_dsub>
 800aa4e:	a384      	add	r3, pc, #528	; (adr r3, 800ac60 <__ieee754_rem_pio2+0x2e8>)
 800aa50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa54:	f7f5 fc2a 	bl	80002ac <__adddf3>
 800aa58:	f04f 35ff 	mov.w	r5, #4294967295
 800aa5c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aa60:	e7c6      	b.n	800a9f0 <__ieee754_rem_pio2+0x78>
 800aa62:	a381      	add	r3, pc, #516	; (adr r3, 800ac68 <__ieee754_rem_pio2+0x2f0>)
 800aa64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa68:	f7f5 fc20 	bl	80002ac <__adddf3>
 800aa6c:	a380      	add	r3, pc, #512	; (adr r3, 800ac70 <__ieee754_rem_pio2+0x2f8>)
 800aa6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa72:	4606      	mov	r6, r0
 800aa74:	460f      	mov	r7, r1
 800aa76:	f7f5 fc19 	bl	80002ac <__adddf3>
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	460b      	mov	r3, r1
 800aa7e:	e9c4 2300 	strd	r2, r3, [r4]
 800aa82:	4630      	mov	r0, r6
 800aa84:	4639      	mov	r1, r7
 800aa86:	f7f5 fc0f 	bl	80002a8 <__aeabi_dsub>
 800aa8a:	a379      	add	r3, pc, #484	; (adr r3, 800ac70 <__ieee754_rem_pio2+0x2f8>)
 800aa8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa90:	e7e0      	b.n	800aa54 <__ieee754_rem_pio2+0xdc>
 800aa92:	4b82      	ldr	r3, [pc, #520]	; (800ac9c <__ieee754_rem_pio2+0x324>)
 800aa94:	4598      	cmp	r8, r3
 800aa96:	f300 80d0 	bgt.w	800ac3a <__ieee754_rem_pio2+0x2c2>
 800aa9a:	f001 f875 	bl	800bb88 <fabs>
 800aa9e:	ec57 6b10 	vmov	r6, r7, d0
 800aaa2:	ee10 0a10 	vmov	r0, s0
 800aaa6:	a374      	add	r3, pc, #464	; (adr r3, 800ac78 <__ieee754_rem_pio2+0x300>)
 800aaa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaac:	4639      	mov	r1, r7
 800aaae:	f7f5 fdb3 	bl	8000618 <__aeabi_dmul>
 800aab2:	2200      	movs	r2, #0
 800aab4:	4b7a      	ldr	r3, [pc, #488]	; (800aca0 <__ieee754_rem_pio2+0x328>)
 800aab6:	f7f5 fbf9 	bl	80002ac <__adddf3>
 800aaba:	f7f6 f85d 	bl	8000b78 <__aeabi_d2iz>
 800aabe:	4605      	mov	r5, r0
 800aac0:	f7f5 fd40 	bl	8000544 <__aeabi_i2d>
 800aac4:	a364      	add	r3, pc, #400	; (adr r3, 800ac58 <__ieee754_rem_pio2+0x2e0>)
 800aac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aace:	f7f5 fda3 	bl	8000618 <__aeabi_dmul>
 800aad2:	4602      	mov	r2, r0
 800aad4:	460b      	mov	r3, r1
 800aad6:	4630      	mov	r0, r6
 800aad8:	4639      	mov	r1, r7
 800aada:	f7f5 fbe5 	bl	80002a8 <__aeabi_dsub>
 800aade:	a360      	add	r3, pc, #384	; (adr r3, 800ac60 <__ieee754_rem_pio2+0x2e8>)
 800aae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae4:	4682      	mov	sl, r0
 800aae6:	468b      	mov	fp, r1
 800aae8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aaec:	f7f5 fd94 	bl	8000618 <__aeabi_dmul>
 800aaf0:	2d1f      	cmp	r5, #31
 800aaf2:	4606      	mov	r6, r0
 800aaf4:	460f      	mov	r7, r1
 800aaf6:	dc0c      	bgt.n	800ab12 <__ieee754_rem_pio2+0x19a>
 800aaf8:	1e6a      	subs	r2, r5, #1
 800aafa:	4b6a      	ldr	r3, [pc, #424]	; (800aca4 <__ieee754_rem_pio2+0x32c>)
 800aafc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab00:	4543      	cmp	r3, r8
 800ab02:	d006      	beq.n	800ab12 <__ieee754_rem_pio2+0x19a>
 800ab04:	4632      	mov	r2, r6
 800ab06:	463b      	mov	r3, r7
 800ab08:	4650      	mov	r0, sl
 800ab0a:	4659      	mov	r1, fp
 800ab0c:	f7f5 fbcc 	bl	80002a8 <__aeabi_dsub>
 800ab10:	e00e      	b.n	800ab30 <__ieee754_rem_pio2+0x1b8>
 800ab12:	4632      	mov	r2, r6
 800ab14:	463b      	mov	r3, r7
 800ab16:	4650      	mov	r0, sl
 800ab18:	4659      	mov	r1, fp
 800ab1a:	f7f5 fbc5 	bl	80002a8 <__aeabi_dsub>
 800ab1e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ab22:	9305      	str	r3, [sp, #20]
 800ab24:	9a05      	ldr	r2, [sp, #20]
 800ab26:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ab2a:	1ad3      	subs	r3, r2, r3
 800ab2c:	2b10      	cmp	r3, #16
 800ab2e:	dc02      	bgt.n	800ab36 <__ieee754_rem_pio2+0x1be>
 800ab30:	e9c4 0100 	strd	r0, r1, [r4]
 800ab34:	e039      	b.n	800abaa <__ieee754_rem_pio2+0x232>
 800ab36:	a34c      	add	r3, pc, #304	; (adr r3, 800ac68 <__ieee754_rem_pio2+0x2f0>)
 800ab38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab40:	f7f5 fd6a 	bl	8000618 <__aeabi_dmul>
 800ab44:	4606      	mov	r6, r0
 800ab46:	460f      	mov	r7, r1
 800ab48:	4602      	mov	r2, r0
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	4650      	mov	r0, sl
 800ab4e:	4659      	mov	r1, fp
 800ab50:	f7f5 fbaa 	bl	80002a8 <__aeabi_dsub>
 800ab54:	4602      	mov	r2, r0
 800ab56:	460b      	mov	r3, r1
 800ab58:	4680      	mov	r8, r0
 800ab5a:	4689      	mov	r9, r1
 800ab5c:	4650      	mov	r0, sl
 800ab5e:	4659      	mov	r1, fp
 800ab60:	f7f5 fba2 	bl	80002a8 <__aeabi_dsub>
 800ab64:	4632      	mov	r2, r6
 800ab66:	463b      	mov	r3, r7
 800ab68:	f7f5 fb9e 	bl	80002a8 <__aeabi_dsub>
 800ab6c:	a340      	add	r3, pc, #256	; (adr r3, 800ac70 <__ieee754_rem_pio2+0x2f8>)
 800ab6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab72:	4606      	mov	r6, r0
 800ab74:	460f      	mov	r7, r1
 800ab76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab7a:	f7f5 fd4d 	bl	8000618 <__aeabi_dmul>
 800ab7e:	4632      	mov	r2, r6
 800ab80:	463b      	mov	r3, r7
 800ab82:	f7f5 fb91 	bl	80002a8 <__aeabi_dsub>
 800ab86:	4602      	mov	r2, r0
 800ab88:	460b      	mov	r3, r1
 800ab8a:	4606      	mov	r6, r0
 800ab8c:	460f      	mov	r7, r1
 800ab8e:	4640      	mov	r0, r8
 800ab90:	4649      	mov	r1, r9
 800ab92:	f7f5 fb89 	bl	80002a8 <__aeabi_dsub>
 800ab96:	9a05      	ldr	r2, [sp, #20]
 800ab98:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ab9c:	1ad3      	subs	r3, r2, r3
 800ab9e:	2b31      	cmp	r3, #49	; 0x31
 800aba0:	dc20      	bgt.n	800abe4 <__ieee754_rem_pio2+0x26c>
 800aba2:	e9c4 0100 	strd	r0, r1, [r4]
 800aba6:	46c2      	mov	sl, r8
 800aba8:	46cb      	mov	fp, r9
 800abaa:	e9d4 8900 	ldrd	r8, r9, [r4]
 800abae:	4650      	mov	r0, sl
 800abb0:	4642      	mov	r2, r8
 800abb2:	464b      	mov	r3, r9
 800abb4:	4659      	mov	r1, fp
 800abb6:	f7f5 fb77 	bl	80002a8 <__aeabi_dsub>
 800abba:	463b      	mov	r3, r7
 800abbc:	4632      	mov	r2, r6
 800abbe:	f7f5 fb73 	bl	80002a8 <__aeabi_dsub>
 800abc2:	9b04      	ldr	r3, [sp, #16]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800abca:	f6bf af11 	bge.w	800a9f0 <__ieee754_rem_pio2+0x78>
 800abce:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800abd2:	6063      	str	r3, [r4, #4]
 800abd4:	f8c4 8000 	str.w	r8, [r4]
 800abd8:	60a0      	str	r0, [r4, #8]
 800abda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abde:	60e3      	str	r3, [r4, #12]
 800abe0:	426d      	negs	r5, r5
 800abe2:	e705      	b.n	800a9f0 <__ieee754_rem_pio2+0x78>
 800abe4:	a326      	add	r3, pc, #152	; (adr r3, 800ac80 <__ieee754_rem_pio2+0x308>)
 800abe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abee:	f7f5 fd13 	bl	8000618 <__aeabi_dmul>
 800abf2:	4606      	mov	r6, r0
 800abf4:	460f      	mov	r7, r1
 800abf6:	4602      	mov	r2, r0
 800abf8:	460b      	mov	r3, r1
 800abfa:	4640      	mov	r0, r8
 800abfc:	4649      	mov	r1, r9
 800abfe:	f7f5 fb53 	bl	80002a8 <__aeabi_dsub>
 800ac02:	4602      	mov	r2, r0
 800ac04:	460b      	mov	r3, r1
 800ac06:	4682      	mov	sl, r0
 800ac08:	468b      	mov	fp, r1
 800ac0a:	4640      	mov	r0, r8
 800ac0c:	4649      	mov	r1, r9
 800ac0e:	f7f5 fb4b 	bl	80002a8 <__aeabi_dsub>
 800ac12:	4632      	mov	r2, r6
 800ac14:	463b      	mov	r3, r7
 800ac16:	f7f5 fb47 	bl	80002a8 <__aeabi_dsub>
 800ac1a:	a31b      	add	r3, pc, #108	; (adr r3, 800ac88 <__ieee754_rem_pio2+0x310>)
 800ac1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac20:	4606      	mov	r6, r0
 800ac22:	460f      	mov	r7, r1
 800ac24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac28:	f7f5 fcf6 	bl	8000618 <__aeabi_dmul>
 800ac2c:	4632      	mov	r2, r6
 800ac2e:	463b      	mov	r3, r7
 800ac30:	f7f5 fb3a 	bl	80002a8 <__aeabi_dsub>
 800ac34:	4606      	mov	r6, r0
 800ac36:	460f      	mov	r7, r1
 800ac38:	e764      	b.n	800ab04 <__ieee754_rem_pio2+0x18c>
 800ac3a:	4b1b      	ldr	r3, [pc, #108]	; (800aca8 <__ieee754_rem_pio2+0x330>)
 800ac3c:	4598      	cmp	r8, r3
 800ac3e:	dd35      	ble.n	800acac <__ieee754_rem_pio2+0x334>
 800ac40:	ee10 2a10 	vmov	r2, s0
 800ac44:	463b      	mov	r3, r7
 800ac46:	4630      	mov	r0, r6
 800ac48:	4639      	mov	r1, r7
 800ac4a:	f7f5 fb2d 	bl	80002a8 <__aeabi_dsub>
 800ac4e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ac52:	e9c4 0100 	strd	r0, r1, [r4]
 800ac56:	e6a1      	b.n	800a99c <__ieee754_rem_pio2+0x24>
 800ac58:	54400000 	.word	0x54400000
 800ac5c:	3ff921fb 	.word	0x3ff921fb
 800ac60:	1a626331 	.word	0x1a626331
 800ac64:	3dd0b461 	.word	0x3dd0b461
 800ac68:	1a600000 	.word	0x1a600000
 800ac6c:	3dd0b461 	.word	0x3dd0b461
 800ac70:	2e037073 	.word	0x2e037073
 800ac74:	3ba3198a 	.word	0x3ba3198a
 800ac78:	6dc9c883 	.word	0x6dc9c883
 800ac7c:	3fe45f30 	.word	0x3fe45f30
 800ac80:	2e000000 	.word	0x2e000000
 800ac84:	3ba3198a 	.word	0x3ba3198a
 800ac88:	252049c1 	.word	0x252049c1
 800ac8c:	397b839a 	.word	0x397b839a
 800ac90:	3fe921fb 	.word	0x3fe921fb
 800ac94:	4002d97b 	.word	0x4002d97b
 800ac98:	3ff921fb 	.word	0x3ff921fb
 800ac9c:	413921fb 	.word	0x413921fb
 800aca0:	3fe00000 	.word	0x3fe00000
 800aca4:	0800c30c 	.word	0x0800c30c
 800aca8:	7fefffff 	.word	0x7fefffff
 800acac:	ea4f 5528 	mov.w	r5, r8, asr #20
 800acb0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800acb4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800acb8:	4630      	mov	r0, r6
 800acba:	460f      	mov	r7, r1
 800acbc:	f7f5 ff5c 	bl	8000b78 <__aeabi_d2iz>
 800acc0:	f7f5 fc40 	bl	8000544 <__aeabi_i2d>
 800acc4:	4602      	mov	r2, r0
 800acc6:	460b      	mov	r3, r1
 800acc8:	4630      	mov	r0, r6
 800acca:	4639      	mov	r1, r7
 800accc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800acd0:	f7f5 faea 	bl	80002a8 <__aeabi_dsub>
 800acd4:	2200      	movs	r2, #0
 800acd6:	4b1f      	ldr	r3, [pc, #124]	; (800ad54 <__ieee754_rem_pio2+0x3dc>)
 800acd8:	f7f5 fc9e 	bl	8000618 <__aeabi_dmul>
 800acdc:	460f      	mov	r7, r1
 800acde:	4606      	mov	r6, r0
 800ace0:	f7f5 ff4a 	bl	8000b78 <__aeabi_d2iz>
 800ace4:	f7f5 fc2e 	bl	8000544 <__aeabi_i2d>
 800ace8:	4602      	mov	r2, r0
 800acea:	460b      	mov	r3, r1
 800acec:	4630      	mov	r0, r6
 800acee:	4639      	mov	r1, r7
 800acf0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800acf4:	f7f5 fad8 	bl	80002a8 <__aeabi_dsub>
 800acf8:	2200      	movs	r2, #0
 800acfa:	4b16      	ldr	r3, [pc, #88]	; (800ad54 <__ieee754_rem_pio2+0x3dc>)
 800acfc:	f7f5 fc8c 	bl	8000618 <__aeabi_dmul>
 800ad00:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ad04:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800ad08:	f04f 0803 	mov.w	r8, #3
 800ad0c:	2600      	movs	r6, #0
 800ad0e:	2700      	movs	r7, #0
 800ad10:	4632      	mov	r2, r6
 800ad12:	463b      	mov	r3, r7
 800ad14:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ad18:	f108 3aff 	add.w	sl, r8, #4294967295
 800ad1c:	f7f5 fee4 	bl	8000ae8 <__aeabi_dcmpeq>
 800ad20:	b9b0      	cbnz	r0, 800ad50 <__ieee754_rem_pio2+0x3d8>
 800ad22:	4b0d      	ldr	r3, [pc, #52]	; (800ad58 <__ieee754_rem_pio2+0x3e0>)
 800ad24:	9301      	str	r3, [sp, #4]
 800ad26:	2302      	movs	r3, #2
 800ad28:	9300      	str	r3, [sp, #0]
 800ad2a:	462a      	mov	r2, r5
 800ad2c:	4643      	mov	r3, r8
 800ad2e:	4621      	mov	r1, r4
 800ad30:	a806      	add	r0, sp, #24
 800ad32:	f000 f98d 	bl	800b050 <__kernel_rem_pio2>
 800ad36:	9b04      	ldr	r3, [sp, #16]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	4605      	mov	r5, r0
 800ad3c:	f6bf ae58 	bge.w	800a9f0 <__ieee754_rem_pio2+0x78>
 800ad40:	6863      	ldr	r3, [r4, #4]
 800ad42:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ad46:	6063      	str	r3, [r4, #4]
 800ad48:	68e3      	ldr	r3, [r4, #12]
 800ad4a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ad4e:	e746      	b.n	800abde <__ieee754_rem_pio2+0x266>
 800ad50:	46d0      	mov	r8, sl
 800ad52:	e7dd      	b.n	800ad10 <__ieee754_rem_pio2+0x398>
 800ad54:	41700000 	.word	0x41700000
 800ad58:	0800c38c 	.word	0x0800c38c

0800ad5c <__ieee754_sqrt>:
 800ad5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad60:	4955      	ldr	r1, [pc, #340]	; (800aeb8 <__ieee754_sqrt+0x15c>)
 800ad62:	ec55 4b10 	vmov	r4, r5, d0
 800ad66:	43a9      	bics	r1, r5
 800ad68:	462b      	mov	r3, r5
 800ad6a:	462a      	mov	r2, r5
 800ad6c:	d112      	bne.n	800ad94 <__ieee754_sqrt+0x38>
 800ad6e:	ee10 2a10 	vmov	r2, s0
 800ad72:	ee10 0a10 	vmov	r0, s0
 800ad76:	4629      	mov	r1, r5
 800ad78:	f7f5 fc4e 	bl	8000618 <__aeabi_dmul>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	460b      	mov	r3, r1
 800ad80:	4620      	mov	r0, r4
 800ad82:	4629      	mov	r1, r5
 800ad84:	f7f5 fa92 	bl	80002ac <__adddf3>
 800ad88:	4604      	mov	r4, r0
 800ad8a:	460d      	mov	r5, r1
 800ad8c:	ec45 4b10 	vmov	d0, r4, r5
 800ad90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad94:	2d00      	cmp	r5, #0
 800ad96:	ee10 0a10 	vmov	r0, s0
 800ad9a:	4621      	mov	r1, r4
 800ad9c:	dc0f      	bgt.n	800adbe <__ieee754_sqrt+0x62>
 800ad9e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ada2:	4330      	orrs	r0, r6
 800ada4:	d0f2      	beq.n	800ad8c <__ieee754_sqrt+0x30>
 800ada6:	b155      	cbz	r5, 800adbe <__ieee754_sqrt+0x62>
 800ada8:	ee10 2a10 	vmov	r2, s0
 800adac:	4620      	mov	r0, r4
 800adae:	4629      	mov	r1, r5
 800adb0:	f7f5 fa7a 	bl	80002a8 <__aeabi_dsub>
 800adb4:	4602      	mov	r2, r0
 800adb6:	460b      	mov	r3, r1
 800adb8:	f7f5 fd58 	bl	800086c <__aeabi_ddiv>
 800adbc:	e7e4      	b.n	800ad88 <__ieee754_sqrt+0x2c>
 800adbe:	151b      	asrs	r3, r3, #20
 800adc0:	d073      	beq.n	800aeaa <__ieee754_sqrt+0x14e>
 800adc2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800adc6:	07dd      	lsls	r5, r3, #31
 800adc8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800adcc:	bf48      	it	mi
 800adce:	0fc8      	lsrmi	r0, r1, #31
 800add0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800add4:	bf44      	itt	mi
 800add6:	0049      	lslmi	r1, r1, #1
 800add8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800addc:	2500      	movs	r5, #0
 800adde:	1058      	asrs	r0, r3, #1
 800ade0:	0fcb      	lsrs	r3, r1, #31
 800ade2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800ade6:	0049      	lsls	r1, r1, #1
 800ade8:	2316      	movs	r3, #22
 800adea:	462c      	mov	r4, r5
 800adec:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800adf0:	19a7      	adds	r7, r4, r6
 800adf2:	4297      	cmp	r7, r2
 800adf4:	bfde      	ittt	le
 800adf6:	19bc      	addle	r4, r7, r6
 800adf8:	1bd2      	suble	r2, r2, r7
 800adfa:	19ad      	addle	r5, r5, r6
 800adfc:	0fcf      	lsrs	r7, r1, #31
 800adfe:	3b01      	subs	r3, #1
 800ae00:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800ae04:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ae08:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ae0c:	d1f0      	bne.n	800adf0 <__ieee754_sqrt+0x94>
 800ae0e:	f04f 0c20 	mov.w	ip, #32
 800ae12:	469e      	mov	lr, r3
 800ae14:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ae18:	42a2      	cmp	r2, r4
 800ae1a:	eb06 070e 	add.w	r7, r6, lr
 800ae1e:	dc02      	bgt.n	800ae26 <__ieee754_sqrt+0xca>
 800ae20:	d112      	bne.n	800ae48 <__ieee754_sqrt+0xec>
 800ae22:	428f      	cmp	r7, r1
 800ae24:	d810      	bhi.n	800ae48 <__ieee754_sqrt+0xec>
 800ae26:	2f00      	cmp	r7, #0
 800ae28:	eb07 0e06 	add.w	lr, r7, r6
 800ae2c:	da42      	bge.n	800aeb4 <__ieee754_sqrt+0x158>
 800ae2e:	f1be 0f00 	cmp.w	lr, #0
 800ae32:	db3f      	blt.n	800aeb4 <__ieee754_sqrt+0x158>
 800ae34:	f104 0801 	add.w	r8, r4, #1
 800ae38:	1b12      	subs	r2, r2, r4
 800ae3a:	428f      	cmp	r7, r1
 800ae3c:	bf88      	it	hi
 800ae3e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ae42:	1bc9      	subs	r1, r1, r7
 800ae44:	4433      	add	r3, r6
 800ae46:	4644      	mov	r4, r8
 800ae48:	0052      	lsls	r2, r2, #1
 800ae4a:	f1bc 0c01 	subs.w	ip, ip, #1
 800ae4e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800ae52:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ae56:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ae5a:	d1dd      	bne.n	800ae18 <__ieee754_sqrt+0xbc>
 800ae5c:	430a      	orrs	r2, r1
 800ae5e:	d006      	beq.n	800ae6e <__ieee754_sqrt+0x112>
 800ae60:	1c5c      	adds	r4, r3, #1
 800ae62:	bf13      	iteet	ne
 800ae64:	3301      	addne	r3, #1
 800ae66:	3501      	addeq	r5, #1
 800ae68:	4663      	moveq	r3, ip
 800ae6a:	f023 0301 	bicne.w	r3, r3, #1
 800ae6e:	106a      	asrs	r2, r5, #1
 800ae70:	085b      	lsrs	r3, r3, #1
 800ae72:	07e9      	lsls	r1, r5, #31
 800ae74:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800ae78:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800ae7c:	bf48      	it	mi
 800ae7e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800ae82:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800ae86:	461c      	mov	r4, r3
 800ae88:	e780      	b.n	800ad8c <__ieee754_sqrt+0x30>
 800ae8a:	0aca      	lsrs	r2, r1, #11
 800ae8c:	3815      	subs	r0, #21
 800ae8e:	0549      	lsls	r1, r1, #21
 800ae90:	2a00      	cmp	r2, #0
 800ae92:	d0fa      	beq.n	800ae8a <__ieee754_sqrt+0x12e>
 800ae94:	02d6      	lsls	r6, r2, #11
 800ae96:	d50a      	bpl.n	800aeae <__ieee754_sqrt+0x152>
 800ae98:	f1c3 0420 	rsb	r4, r3, #32
 800ae9c:	fa21 f404 	lsr.w	r4, r1, r4
 800aea0:	1e5d      	subs	r5, r3, #1
 800aea2:	4099      	lsls	r1, r3
 800aea4:	4322      	orrs	r2, r4
 800aea6:	1b43      	subs	r3, r0, r5
 800aea8:	e78b      	b.n	800adc2 <__ieee754_sqrt+0x66>
 800aeaa:	4618      	mov	r0, r3
 800aeac:	e7f0      	b.n	800ae90 <__ieee754_sqrt+0x134>
 800aeae:	0052      	lsls	r2, r2, #1
 800aeb0:	3301      	adds	r3, #1
 800aeb2:	e7ef      	b.n	800ae94 <__ieee754_sqrt+0x138>
 800aeb4:	46a0      	mov	r8, r4
 800aeb6:	e7bf      	b.n	800ae38 <__ieee754_sqrt+0xdc>
 800aeb8:	7ff00000 	.word	0x7ff00000
 800aebc:	00000000 	.word	0x00000000

0800aec0 <__kernel_cos>:
 800aec0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec4:	ec59 8b10 	vmov	r8, r9, d0
 800aec8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800aecc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800aed0:	ed2d 8b02 	vpush	{d8}
 800aed4:	eeb0 8a41 	vmov.f32	s16, s2
 800aed8:	eef0 8a61 	vmov.f32	s17, s3
 800aedc:	da07      	bge.n	800aeee <__kernel_cos+0x2e>
 800aede:	ee10 0a10 	vmov	r0, s0
 800aee2:	4649      	mov	r1, r9
 800aee4:	f7f5 fe48 	bl	8000b78 <__aeabi_d2iz>
 800aee8:	2800      	cmp	r0, #0
 800aeea:	f000 8089 	beq.w	800b000 <__kernel_cos+0x140>
 800aeee:	4642      	mov	r2, r8
 800aef0:	464b      	mov	r3, r9
 800aef2:	4640      	mov	r0, r8
 800aef4:	4649      	mov	r1, r9
 800aef6:	f7f5 fb8f 	bl	8000618 <__aeabi_dmul>
 800aefa:	2200      	movs	r2, #0
 800aefc:	4b4e      	ldr	r3, [pc, #312]	; (800b038 <__kernel_cos+0x178>)
 800aefe:	4604      	mov	r4, r0
 800af00:	460d      	mov	r5, r1
 800af02:	f7f5 fb89 	bl	8000618 <__aeabi_dmul>
 800af06:	a340      	add	r3, pc, #256	; (adr r3, 800b008 <__kernel_cos+0x148>)
 800af08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0c:	4682      	mov	sl, r0
 800af0e:	468b      	mov	fp, r1
 800af10:	4620      	mov	r0, r4
 800af12:	4629      	mov	r1, r5
 800af14:	f7f5 fb80 	bl	8000618 <__aeabi_dmul>
 800af18:	a33d      	add	r3, pc, #244	; (adr r3, 800b010 <__kernel_cos+0x150>)
 800af1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af1e:	f7f5 f9c5 	bl	80002ac <__adddf3>
 800af22:	4622      	mov	r2, r4
 800af24:	462b      	mov	r3, r5
 800af26:	f7f5 fb77 	bl	8000618 <__aeabi_dmul>
 800af2a:	a33b      	add	r3, pc, #236	; (adr r3, 800b018 <__kernel_cos+0x158>)
 800af2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af30:	f7f5 f9ba 	bl	80002a8 <__aeabi_dsub>
 800af34:	4622      	mov	r2, r4
 800af36:	462b      	mov	r3, r5
 800af38:	f7f5 fb6e 	bl	8000618 <__aeabi_dmul>
 800af3c:	a338      	add	r3, pc, #224	; (adr r3, 800b020 <__kernel_cos+0x160>)
 800af3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af42:	f7f5 f9b3 	bl	80002ac <__adddf3>
 800af46:	4622      	mov	r2, r4
 800af48:	462b      	mov	r3, r5
 800af4a:	f7f5 fb65 	bl	8000618 <__aeabi_dmul>
 800af4e:	a336      	add	r3, pc, #216	; (adr r3, 800b028 <__kernel_cos+0x168>)
 800af50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af54:	f7f5 f9a8 	bl	80002a8 <__aeabi_dsub>
 800af58:	4622      	mov	r2, r4
 800af5a:	462b      	mov	r3, r5
 800af5c:	f7f5 fb5c 	bl	8000618 <__aeabi_dmul>
 800af60:	a333      	add	r3, pc, #204	; (adr r3, 800b030 <__kernel_cos+0x170>)
 800af62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af66:	f7f5 f9a1 	bl	80002ac <__adddf3>
 800af6a:	4622      	mov	r2, r4
 800af6c:	462b      	mov	r3, r5
 800af6e:	f7f5 fb53 	bl	8000618 <__aeabi_dmul>
 800af72:	4622      	mov	r2, r4
 800af74:	462b      	mov	r3, r5
 800af76:	f7f5 fb4f 	bl	8000618 <__aeabi_dmul>
 800af7a:	ec53 2b18 	vmov	r2, r3, d8
 800af7e:	4604      	mov	r4, r0
 800af80:	460d      	mov	r5, r1
 800af82:	4640      	mov	r0, r8
 800af84:	4649      	mov	r1, r9
 800af86:	f7f5 fb47 	bl	8000618 <__aeabi_dmul>
 800af8a:	460b      	mov	r3, r1
 800af8c:	4602      	mov	r2, r0
 800af8e:	4629      	mov	r1, r5
 800af90:	4620      	mov	r0, r4
 800af92:	f7f5 f989 	bl	80002a8 <__aeabi_dsub>
 800af96:	4b29      	ldr	r3, [pc, #164]	; (800b03c <__kernel_cos+0x17c>)
 800af98:	429e      	cmp	r6, r3
 800af9a:	4680      	mov	r8, r0
 800af9c:	4689      	mov	r9, r1
 800af9e:	dc11      	bgt.n	800afc4 <__kernel_cos+0x104>
 800afa0:	4602      	mov	r2, r0
 800afa2:	460b      	mov	r3, r1
 800afa4:	4650      	mov	r0, sl
 800afa6:	4659      	mov	r1, fp
 800afa8:	f7f5 f97e 	bl	80002a8 <__aeabi_dsub>
 800afac:	460b      	mov	r3, r1
 800afae:	4924      	ldr	r1, [pc, #144]	; (800b040 <__kernel_cos+0x180>)
 800afb0:	4602      	mov	r2, r0
 800afb2:	2000      	movs	r0, #0
 800afb4:	f7f5 f978 	bl	80002a8 <__aeabi_dsub>
 800afb8:	ecbd 8b02 	vpop	{d8}
 800afbc:	ec41 0b10 	vmov	d0, r0, r1
 800afc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afc4:	4b1f      	ldr	r3, [pc, #124]	; (800b044 <__kernel_cos+0x184>)
 800afc6:	491e      	ldr	r1, [pc, #120]	; (800b040 <__kernel_cos+0x180>)
 800afc8:	429e      	cmp	r6, r3
 800afca:	bfcc      	ite	gt
 800afcc:	4d1e      	ldrgt	r5, [pc, #120]	; (800b048 <__kernel_cos+0x188>)
 800afce:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800afd2:	2400      	movs	r4, #0
 800afd4:	4622      	mov	r2, r4
 800afd6:	462b      	mov	r3, r5
 800afd8:	2000      	movs	r0, #0
 800afda:	f7f5 f965 	bl	80002a8 <__aeabi_dsub>
 800afde:	4622      	mov	r2, r4
 800afe0:	4606      	mov	r6, r0
 800afe2:	460f      	mov	r7, r1
 800afe4:	462b      	mov	r3, r5
 800afe6:	4650      	mov	r0, sl
 800afe8:	4659      	mov	r1, fp
 800afea:	f7f5 f95d 	bl	80002a8 <__aeabi_dsub>
 800afee:	4642      	mov	r2, r8
 800aff0:	464b      	mov	r3, r9
 800aff2:	f7f5 f959 	bl	80002a8 <__aeabi_dsub>
 800aff6:	4602      	mov	r2, r0
 800aff8:	460b      	mov	r3, r1
 800affa:	4630      	mov	r0, r6
 800affc:	4639      	mov	r1, r7
 800affe:	e7d9      	b.n	800afb4 <__kernel_cos+0xf4>
 800b000:	2000      	movs	r0, #0
 800b002:	490f      	ldr	r1, [pc, #60]	; (800b040 <__kernel_cos+0x180>)
 800b004:	e7d8      	b.n	800afb8 <__kernel_cos+0xf8>
 800b006:	bf00      	nop
 800b008:	be8838d4 	.word	0xbe8838d4
 800b00c:	bda8fae9 	.word	0xbda8fae9
 800b010:	bdb4b1c4 	.word	0xbdb4b1c4
 800b014:	3e21ee9e 	.word	0x3e21ee9e
 800b018:	809c52ad 	.word	0x809c52ad
 800b01c:	3e927e4f 	.word	0x3e927e4f
 800b020:	19cb1590 	.word	0x19cb1590
 800b024:	3efa01a0 	.word	0x3efa01a0
 800b028:	16c15177 	.word	0x16c15177
 800b02c:	3f56c16c 	.word	0x3f56c16c
 800b030:	5555554c 	.word	0x5555554c
 800b034:	3fa55555 	.word	0x3fa55555
 800b038:	3fe00000 	.word	0x3fe00000
 800b03c:	3fd33332 	.word	0x3fd33332
 800b040:	3ff00000 	.word	0x3ff00000
 800b044:	3fe90000 	.word	0x3fe90000
 800b048:	3fd20000 	.word	0x3fd20000
 800b04c:	00000000 	.word	0x00000000

0800b050 <__kernel_rem_pio2>:
 800b050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b054:	ed2d 8b02 	vpush	{d8}
 800b058:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b05c:	1ed4      	subs	r4, r2, #3
 800b05e:	9308      	str	r3, [sp, #32]
 800b060:	9101      	str	r1, [sp, #4]
 800b062:	4bc5      	ldr	r3, [pc, #788]	; (800b378 <__kernel_rem_pio2+0x328>)
 800b064:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b066:	9009      	str	r0, [sp, #36]	; 0x24
 800b068:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b06c:	9304      	str	r3, [sp, #16]
 800b06e:	9b08      	ldr	r3, [sp, #32]
 800b070:	3b01      	subs	r3, #1
 800b072:	9307      	str	r3, [sp, #28]
 800b074:	2318      	movs	r3, #24
 800b076:	fb94 f4f3 	sdiv	r4, r4, r3
 800b07a:	f06f 0317 	mvn.w	r3, #23
 800b07e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800b082:	fb04 3303 	mla	r3, r4, r3, r3
 800b086:	eb03 0a02 	add.w	sl, r3, r2
 800b08a:	9b04      	ldr	r3, [sp, #16]
 800b08c:	9a07      	ldr	r2, [sp, #28]
 800b08e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800b368 <__kernel_rem_pio2+0x318>
 800b092:	eb03 0802 	add.w	r8, r3, r2
 800b096:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b098:	1aa7      	subs	r7, r4, r2
 800b09a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b09e:	ae22      	add	r6, sp, #136	; 0x88
 800b0a0:	2500      	movs	r5, #0
 800b0a2:	4545      	cmp	r5, r8
 800b0a4:	dd13      	ble.n	800b0ce <__kernel_rem_pio2+0x7e>
 800b0a6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800b368 <__kernel_rem_pio2+0x318>
 800b0aa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b0ae:	2600      	movs	r6, #0
 800b0b0:	9b04      	ldr	r3, [sp, #16]
 800b0b2:	429e      	cmp	r6, r3
 800b0b4:	dc32      	bgt.n	800b11c <__kernel_rem_pio2+0xcc>
 800b0b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0b8:	9302      	str	r3, [sp, #8]
 800b0ba:	9b08      	ldr	r3, [sp, #32]
 800b0bc:	199d      	adds	r5, r3, r6
 800b0be:	ab22      	add	r3, sp, #136	; 0x88
 800b0c0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b0c4:	9306      	str	r3, [sp, #24]
 800b0c6:	ec59 8b18 	vmov	r8, r9, d8
 800b0ca:	2700      	movs	r7, #0
 800b0cc:	e01f      	b.n	800b10e <__kernel_rem_pio2+0xbe>
 800b0ce:	42ef      	cmn	r7, r5
 800b0d0:	d407      	bmi.n	800b0e2 <__kernel_rem_pio2+0x92>
 800b0d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b0d6:	f7f5 fa35 	bl	8000544 <__aeabi_i2d>
 800b0da:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b0de:	3501      	adds	r5, #1
 800b0e0:	e7df      	b.n	800b0a2 <__kernel_rem_pio2+0x52>
 800b0e2:	ec51 0b18 	vmov	r0, r1, d8
 800b0e6:	e7f8      	b.n	800b0da <__kernel_rem_pio2+0x8a>
 800b0e8:	9906      	ldr	r1, [sp, #24]
 800b0ea:	9d02      	ldr	r5, [sp, #8]
 800b0ec:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800b0f0:	9106      	str	r1, [sp, #24]
 800b0f2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800b0f6:	9502      	str	r5, [sp, #8]
 800b0f8:	f7f5 fa8e 	bl	8000618 <__aeabi_dmul>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	460b      	mov	r3, r1
 800b100:	4640      	mov	r0, r8
 800b102:	4649      	mov	r1, r9
 800b104:	f7f5 f8d2 	bl	80002ac <__adddf3>
 800b108:	3701      	adds	r7, #1
 800b10a:	4680      	mov	r8, r0
 800b10c:	4689      	mov	r9, r1
 800b10e:	9b07      	ldr	r3, [sp, #28]
 800b110:	429f      	cmp	r7, r3
 800b112:	dde9      	ble.n	800b0e8 <__kernel_rem_pio2+0x98>
 800b114:	e8eb 8902 	strd	r8, r9, [fp], #8
 800b118:	3601      	adds	r6, #1
 800b11a:	e7c9      	b.n	800b0b0 <__kernel_rem_pio2+0x60>
 800b11c:	9b04      	ldr	r3, [sp, #16]
 800b11e:	aa0e      	add	r2, sp, #56	; 0x38
 800b120:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b124:	930c      	str	r3, [sp, #48]	; 0x30
 800b126:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b128:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b12c:	9c04      	ldr	r4, [sp, #16]
 800b12e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b130:	ab9a      	add	r3, sp, #616	; 0x268
 800b132:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800b136:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b13a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b13e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800b142:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800b146:	ab9a      	add	r3, sp, #616	; 0x268
 800b148:	445b      	add	r3, fp
 800b14a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800b14e:	2500      	movs	r5, #0
 800b150:	1b63      	subs	r3, r4, r5
 800b152:	2b00      	cmp	r3, #0
 800b154:	dc78      	bgt.n	800b248 <__kernel_rem_pio2+0x1f8>
 800b156:	4650      	mov	r0, sl
 800b158:	ec49 8b10 	vmov	d0, r8, r9
 800b15c:	f000 fdb0 	bl	800bcc0 <scalbn>
 800b160:	ec57 6b10 	vmov	r6, r7, d0
 800b164:	2200      	movs	r2, #0
 800b166:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b16a:	ee10 0a10 	vmov	r0, s0
 800b16e:	4639      	mov	r1, r7
 800b170:	f7f5 fa52 	bl	8000618 <__aeabi_dmul>
 800b174:	ec41 0b10 	vmov	d0, r0, r1
 800b178:	f000 fd12 	bl	800bba0 <floor>
 800b17c:	2200      	movs	r2, #0
 800b17e:	ec51 0b10 	vmov	r0, r1, d0
 800b182:	4b7e      	ldr	r3, [pc, #504]	; (800b37c <__kernel_rem_pio2+0x32c>)
 800b184:	f7f5 fa48 	bl	8000618 <__aeabi_dmul>
 800b188:	4602      	mov	r2, r0
 800b18a:	460b      	mov	r3, r1
 800b18c:	4630      	mov	r0, r6
 800b18e:	4639      	mov	r1, r7
 800b190:	f7f5 f88a 	bl	80002a8 <__aeabi_dsub>
 800b194:	460f      	mov	r7, r1
 800b196:	4606      	mov	r6, r0
 800b198:	f7f5 fcee 	bl	8000b78 <__aeabi_d2iz>
 800b19c:	9006      	str	r0, [sp, #24]
 800b19e:	f7f5 f9d1 	bl	8000544 <__aeabi_i2d>
 800b1a2:	4602      	mov	r2, r0
 800b1a4:	460b      	mov	r3, r1
 800b1a6:	4630      	mov	r0, r6
 800b1a8:	4639      	mov	r1, r7
 800b1aa:	f7f5 f87d 	bl	80002a8 <__aeabi_dsub>
 800b1ae:	f1ba 0f00 	cmp.w	sl, #0
 800b1b2:	4606      	mov	r6, r0
 800b1b4:	460f      	mov	r7, r1
 800b1b6:	dd6c      	ble.n	800b292 <__kernel_rem_pio2+0x242>
 800b1b8:	1e62      	subs	r2, r4, #1
 800b1ba:	ab0e      	add	r3, sp, #56	; 0x38
 800b1bc:	f1ca 0118 	rsb	r1, sl, #24
 800b1c0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b1c4:	9d06      	ldr	r5, [sp, #24]
 800b1c6:	fa40 f301 	asr.w	r3, r0, r1
 800b1ca:	441d      	add	r5, r3
 800b1cc:	408b      	lsls	r3, r1
 800b1ce:	1ac0      	subs	r0, r0, r3
 800b1d0:	ab0e      	add	r3, sp, #56	; 0x38
 800b1d2:	9506      	str	r5, [sp, #24]
 800b1d4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b1d8:	f1ca 0317 	rsb	r3, sl, #23
 800b1dc:	fa40 f303 	asr.w	r3, r0, r3
 800b1e0:	9302      	str	r3, [sp, #8]
 800b1e2:	9b02      	ldr	r3, [sp, #8]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	dd62      	ble.n	800b2ae <__kernel_rem_pio2+0x25e>
 800b1e8:	9b06      	ldr	r3, [sp, #24]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	9306      	str	r3, [sp, #24]
 800b1f0:	4615      	mov	r5, r2
 800b1f2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b1f6:	4294      	cmp	r4, r2
 800b1f8:	f300 8095 	bgt.w	800b326 <__kernel_rem_pio2+0x2d6>
 800b1fc:	f1ba 0f00 	cmp.w	sl, #0
 800b200:	dd07      	ble.n	800b212 <__kernel_rem_pio2+0x1c2>
 800b202:	f1ba 0f01 	cmp.w	sl, #1
 800b206:	f000 80a2 	beq.w	800b34e <__kernel_rem_pio2+0x2fe>
 800b20a:	f1ba 0f02 	cmp.w	sl, #2
 800b20e:	f000 80c1 	beq.w	800b394 <__kernel_rem_pio2+0x344>
 800b212:	9b02      	ldr	r3, [sp, #8]
 800b214:	2b02      	cmp	r3, #2
 800b216:	d14a      	bne.n	800b2ae <__kernel_rem_pio2+0x25e>
 800b218:	4632      	mov	r2, r6
 800b21a:	463b      	mov	r3, r7
 800b21c:	2000      	movs	r0, #0
 800b21e:	4958      	ldr	r1, [pc, #352]	; (800b380 <__kernel_rem_pio2+0x330>)
 800b220:	f7f5 f842 	bl	80002a8 <__aeabi_dsub>
 800b224:	4606      	mov	r6, r0
 800b226:	460f      	mov	r7, r1
 800b228:	2d00      	cmp	r5, #0
 800b22a:	d040      	beq.n	800b2ae <__kernel_rem_pio2+0x25e>
 800b22c:	4650      	mov	r0, sl
 800b22e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800b370 <__kernel_rem_pio2+0x320>
 800b232:	f000 fd45 	bl	800bcc0 <scalbn>
 800b236:	4630      	mov	r0, r6
 800b238:	4639      	mov	r1, r7
 800b23a:	ec53 2b10 	vmov	r2, r3, d0
 800b23e:	f7f5 f833 	bl	80002a8 <__aeabi_dsub>
 800b242:	4606      	mov	r6, r0
 800b244:	460f      	mov	r7, r1
 800b246:	e032      	b.n	800b2ae <__kernel_rem_pio2+0x25e>
 800b248:	2200      	movs	r2, #0
 800b24a:	4b4e      	ldr	r3, [pc, #312]	; (800b384 <__kernel_rem_pio2+0x334>)
 800b24c:	4640      	mov	r0, r8
 800b24e:	4649      	mov	r1, r9
 800b250:	f7f5 f9e2 	bl	8000618 <__aeabi_dmul>
 800b254:	f7f5 fc90 	bl	8000b78 <__aeabi_d2iz>
 800b258:	f7f5 f974 	bl	8000544 <__aeabi_i2d>
 800b25c:	2200      	movs	r2, #0
 800b25e:	4b4a      	ldr	r3, [pc, #296]	; (800b388 <__kernel_rem_pio2+0x338>)
 800b260:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b264:	f7f5 f9d8 	bl	8000618 <__aeabi_dmul>
 800b268:	4602      	mov	r2, r0
 800b26a:	460b      	mov	r3, r1
 800b26c:	4640      	mov	r0, r8
 800b26e:	4649      	mov	r1, r9
 800b270:	f7f5 f81a 	bl	80002a8 <__aeabi_dsub>
 800b274:	f7f5 fc80 	bl	8000b78 <__aeabi_d2iz>
 800b278:	ab0e      	add	r3, sp, #56	; 0x38
 800b27a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800b27e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800b282:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b286:	f7f5 f811 	bl	80002ac <__adddf3>
 800b28a:	3501      	adds	r5, #1
 800b28c:	4680      	mov	r8, r0
 800b28e:	4689      	mov	r9, r1
 800b290:	e75e      	b.n	800b150 <__kernel_rem_pio2+0x100>
 800b292:	d105      	bne.n	800b2a0 <__kernel_rem_pio2+0x250>
 800b294:	1e63      	subs	r3, r4, #1
 800b296:	aa0e      	add	r2, sp, #56	; 0x38
 800b298:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b29c:	15c3      	asrs	r3, r0, #23
 800b29e:	e79f      	b.n	800b1e0 <__kernel_rem_pio2+0x190>
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	4b3a      	ldr	r3, [pc, #232]	; (800b38c <__kernel_rem_pio2+0x33c>)
 800b2a4:	f7f5 fc3e 	bl	8000b24 <__aeabi_dcmpge>
 800b2a8:	2800      	cmp	r0, #0
 800b2aa:	d139      	bne.n	800b320 <__kernel_rem_pio2+0x2d0>
 800b2ac:	9002      	str	r0, [sp, #8]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	4630      	mov	r0, r6
 800b2b4:	4639      	mov	r1, r7
 800b2b6:	f7f5 fc17 	bl	8000ae8 <__aeabi_dcmpeq>
 800b2ba:	2800      	cmp	r0, #0
 800b2bc:	f000 80c7 	beq.w	800b44e <__kernel_rem_pio2+0x3fe>
 800b2c0:	1e65      	subs	r5, r4, #1
 800b2c2:	462b      	mov	r3, r5
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	9904      	ldr	r1, [sp, #16]
 800b2c8:	428b      	cmp	r3, r1
 800b2ca:	da6a      	bge.n	800b3a2 <__kernel_rem_pio2+0x352>
 800b2cc:	2a00      	cmp	r2, #0
 800b2ce:	f000 8088 	beq.w	800b3e2 <__kernel_rem_pio2+0x392>
 800b2d2:	ab0e      	add	r3, sp, #56	; 0x38
 800b2d4:	f1aa 0a18 	sub.w	sl, sl, #24
 800b2d8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	f000 80b4 	beq.w	800b44a <__kernel_rem_pio2+0x3fa>
 800b2e2:	4650      	mov	r0, sl
 800b2e4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800b370 <__kernel_rem_pio2+0x320>
 800b2e8:	f000 fcea 	bl	800bcc0 <scalbn>
 800b2ec:	00ec      	lsls	r4, r5, #3
 800b2ee:	ab72      	add	r3, sp, #456	; 0x1c8
 800b2f0:	191e      	adds	r6, r3, r4
 800b2f2:	ec59 8b10 	vmov	r8, r9, d0
 800b2f6:	f106 0a08 	add.w	sl, r6, #8
 800b2fa:	462f      	mov	r7, r5
 800b2fc:	2f00      	cmp	r7, #0
 800b2fe:	f280 80df 	bge.w	800b4c0 <__kernel_rem_pio2+0x470>
 800b302:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800b368 <__kernel_rem_pio2+0x318>
 800b306:	f04f 0a00 	mov.w	sl, #0
 800b30a:	eba5 030a 	sub.w	r3, r5, sl
 800b30e:	2b00      	cmp	r3, #0
 800b310:	f2c0 810a 	blt.w	800b528 <__kernel_rem_pio2+0x4d8>
 800b314:	f8df b078 	ldr.w	fp, [pc, #120]	; 800b390 <__kernel_rem_pio2+0x340>
 800b318:	ec59 8b18 	vmov	r8, r9, d8
 800b31c:	2700      	movs	r7, #0
 800b31e:	e0f5      	b.n	800b50c <__kernel_rem_pio2+0x4bc>
 800b320:	2302      	movs	r3, #2
 800b322:	9302      	str	r3, [sp, #8]
 800b324:	e760      	b.n	800b1e8 <__kernel_rem_pio2+0x198>
 800b326:	ab0e      	add	r3, sp, #56	; 0x38
 800b328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b32c:	b94d      	cbnz	r5, 800b342 <__kernel_rem_pio2+0x2f2>
 800b32e:	b12b      	cbz	r3, 800b33c <__kernel_rem_pio2+0x2ec>
 800b330:	a80e      	add	r0, sp, #56	; 0x38
 800b332:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b336:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b33a:	2301      	movs	r3, #1
 800b33c:	3201      	adds	r2, #1
 800b33e:	461d      	mov	r5, r3
 800b340:	e759      	b.n	800b1f6 <__kernel_rem_pio2+0x1a6>
 800b342:	a80e      	add	r0, sp, #56	; 0x38
 800b344:	1acb      	subs	r3, r1, r3
 800b346:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b34a:	462b      	mov	r3, r5
 800b34c:	e7f6      	b.n	800b33c <__kernel_rem_pio2+0x2ec>
 800b34e:	1e62      	subs	r2, r4, #1
 800b350:	ab0e      	add	r3, sp, #56	; 0x38
 800b352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b356:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b35a:	a90e      	add	r1, sp, #56	; 0x38
 800b35c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b360:	e757      	b.n	800b212 <__kernel_rem_pio2+0x1c2>
 800b362:	bf00      	nop
 800b364:	f3af 8000 	nop.w
	...
 800b374:	3ff00000 	.word	0x3ff00000
 800b378:	0800c4d8 	.word	0x0800c4d8
 800b37c:	40200000 	.word	0x40200000
 800b380:	3ff00000 	.word	0x3ff00000
 800b384:	3e700000 	.word	0x3e700000
 800b388:	41700000 	.word	0x41700000
 800b38c:	3fe00000 	.word	0x3fe00000
 800b390:	0800c498 	.word	0x0800c498
 800b394:	1e62      	subs	r2, r4, #1
 800b396:	ab0e      	add	r3, sp, #56	; 0x38
 800b398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b39c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b3a0:	e7db      	b.n	800b35a <__kernel_rem_pio2+0x30a>
 800b3a2:	a90e      	add	r1, sp, #56	; 0x38
 800b3a4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b3a8:	3b01      	subs	r3, #1
 800b3aa:	430a      	orrs	r2, r1
 800b3ac:	e78b      	b.n	800b2c6 <__kernel_rem_pio2+0x276>
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b3b4:	2900      	cmp	r1, #0
 800b3b6:	d0fa      	beq.n	800b3ae <__kernel_rem_pio2+0x35e>
 800b3b8:	9a08      	ldr	r2, [sp, #32]
 800b3ba:	4422      	add	r2, r4
 800b3bc:	00d2      	lsls	r2, r2, #3
 800b3be:	a922      	add	r1, sp, #136	; 0x88
 800b3c0:	18e3      	adds	r3, r4, r3
 800b3c2:	9206      	str	r2, [sp, #24]
 800b3c4:	440a      	add	r2, r1
 800b3c6:	9302      	str	r3, [sp, #8]
 800b3c8:	f10b 0108 	add.w	r1, fp, #8
 800b3cc:	f102 0308 	add.w	r3, r2, #8
 800b3d0:	1c66      	adds	r6, r4, #1
 800b3d2:	910a      	str	r1, [sp, #40]	; 0x28
 800b3d4:	2500      	movs	r5, #0
 800b3d6:	930d      	str	r3, [sp, #52]	; 0x34
 800b3d8:	9b02      	ldr	r3, [sp, #8]
 800b3da:	42b3      	cmp	r3, r6
 800b3dc:	da04      	bge.n	800b3e8 <__kernel_rem_pio2+0x398>
 800b3de:	461c      	mov	r4, r3
 800b3e0:	e6a6      	b.n	800b130 <__kernel_rem_pio2+0xe0>
 800b3e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	e7e3      	b.n	800b3b0 <__kernel_rem_pio2+0x360>
 800b3e8:	9b06      	ldr	r3, [sp, #24]
 800b3ea:	18ef      	adds	r7, r5, r3
 800b3ec:	ab22      	add	r3, sp, #136	; 0x88
 800b3ee:	441f      	add	r7, r3
 800b3f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3f2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b3f6:	f7f5 f8a5 	bl	8000544 <__aeabi_i2d>
 800b3fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3fc:	461c      	mov	r4, r3
 800b3fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b400:	e9c7 0100 	strd	r0, r1, [r7]
 800b404:	eb03 0b05 	add.w	fp, r3, r5
 800b408:	2700      	movs	r7, #0
 800b40a:	f04f 0800 	mov.w	r8, #0
 800b40e:	f04f 0900 	mov.w	r9, #0
 800b412:	9b07      	ldr	r3, [sp, #28]
 800b414:	429f      	cmp	r7, r3
 800b416:	dd08      	ble.n	800b42a <__kernel_rem_pio2+0x3da>
 800b418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b41a:	aa72      	add	r2, sp, #456	; 0x1c8
 800b41c:	18eb      	adds	r3, r5, r3
 800b41e:	4413      	add	r3, r2
 800b420:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800b424:	3601      	adds	r6, #1
 800b426:	3508      	adds	r5, #8
 800b428:	e7d6      	b.n	800b3d8 <__kernel_rem_pio2+0x388>
 800b42a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b42e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b432:	f7f5 f8f1 	bl	8000618 <__aeabi_dmul>
 800b436:	4602      	mov	r2, r0
 800b438:	460b      	mov	r3, r1
 800b43a:	4640      	mov	r0, r8
 800b43c:	4649      	mov	r1, r9
 800b43e:	f7f4 ff35 	bl	80002ac <__adddf3>
 800b442:	3701      	adds	r7, #1
 800b444:	4680      	mov	r8, r0
 800b446:	4689      	mov	r9, r1
 800b448:	e7e3      	b.n	800b412 <__kernel_rem_pio2+0x3c2>
 800b44a:	3d01      	subs	r5, #1
 800b44c:	e741      	b.n	800b2d2 <__kernel_rem_pio2+0x282>
 800b44e:	f1ca 0000 	rsb	r0, sl, #0
 800b452:	ec47 6b10 	vmov	d0, r6, r7
 800b456:	f000 fc33 	bl	800bcc0 <scalbn>
 800b45a:	ec57 6b10 	vmov	r6, r7, d0
 800b45e:	2200      	movs	r2, #0
 800b460:	4b99      	ldr	r3, [pc, #612]	; (800b6c8 <__kernel_rem_pio2+0x678>)
 800b462:	ee10 0a10 	vmov	r0, s0
 800b466:	4639      	mov	r1, r7
 800b468:	f7f5 fb5c 	bl	8000b24 <__aeabi_dcmpge>
 800b46c:	b1f8      	cbz	r0, 800b4ae <__kernel_rem_pio2+0x45e>
 800b46e:	2200      	movs	r2, #0
 800b470:	4b96      	ldr	r3, [pc, #600]	; (800b6cc <__kernel_rem_pio2+0x67c>)
 800b472:	4630      	mov	r0, r6
 800b474:	4639      	mov	r1, r7
 800b476:	f7f5 f8cf 	bl	8000618 <__aeabi_dmul>
 800b47a:	f7f5 fb7d 	bl	8000b78 <__aeabi_d2iz>
 800b47e:	4680      	mov	r8, r0
 800b480:	f7f5 f860 	bl	8000544 <__aeabi_i2d>
 800b484:	2200      	movs	r2, #0
 800b486:	4b90      	ldr	r3, [pc, #576]	; (800b6c8 <__kernel_rem_pio2+0x678>)
 800b488:	f7f5 f8c6 	bl	8000618 <__aeabi_dmul>
 800b48c:	460b      	mov	r3, r1
 800b48e:	4602      	mov	r2, r0
 800b490:	4639      	mov	r1, r7
 800b492:	4630      	mov	r0, r6
 800b494:	f7f4 ff08 	bl	80002a8 <__aeabi_dsub>
 800b498:	f7f5 fb6e 	bl	8000b78 <__aeabi_d2iz>
 800b49c:	1c65      	adds	r5, r4, #1
 800b49e:	ab0e      	add	r3, sp, #56	; 0x38
 800b4a0:	f10a 0a18 	add.w	sl, sl, #24
 800b4a4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b4a8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b4ac:	e719      	b.n	800b2e2 <__kernel_rem_pio2+0x292>
 800b4ae:	4630      	mov	r0, r6
 800b4b0:	4639      	mov	r1, r7
 800b4b2:	f7f5 fb61 	bl	8000b78 <__aeabi_d2iz>
 800b4b6:	ab0e      	add	r3, sp, #56	; 0x38
 800b4b8:	4625      	mov	r5, r4
 800b4ba:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b4be:	e710      	b.n	800b2e2 <__kernel_rem_pio2+0x292>
 800b4c0:	ab0e      	add	r3, sp, #56	; 0x38
 800b4c2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b4c6:	f7f5 f83d 	bl	8000544 <__aeabi_i2d>
 800b4ca:	4642      	mov	r2, r8
 800b4cc:	464b      	mov	r3, r9
 800b4ce:	f7f5 f8a3 	bl	8000618 <__aeabi_dmul>
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800b4d8:	4b7c      	ldr	r3, [pc, #496]	; (800b6cc <__kernel_rem_pio2+0x67c>)
 800b4da:	4640      	mov	r0, r8
 800b4dc:	4649      	mov	r1, r9
 800b4de:	f7f5 f89b 	bl	8000618 <__aeabi_dmul>
 800b4e2:	3f01      	subs	r7, #1
 800b4e4:	4680      	mov	r8, r0
 800b4e6:	4689      	mov	r9, r1
 800b4e8:	e708      	b.n	800b2fc <__kernel_rem_pio2+0x2ac>
 800b4ea:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800b4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800b4f6:	f7f5 f88f 	bl	8000618 <__aeabi_dmul>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	4640      	mov	r0, r8
 800b500:	4649      	mov	r1, r9
 800b502:	f7f4 fed3 	bl	80002ac <__adddf3>
 800b506:	3701      	adds	r7, #1
 800b508:	4680      	mov	r8, r0
 800b50a:	4689      	mov	r9, r1
 800b50c:	9b04      	ldr	r3, [sp, #16]
 800b50e:	429f      	cmp	r7, r3
 800b510:	dc01      	bgt.n	800b516 <__kernel_rem_pio2+0x4c6>
 800b512:	45ba      	cmp	sl, r7
 800b514:	dae9      	bge.n	800b4ea <__kernel_rem_pio2+0x49a>
 800b516:	ab4a      	add	r3, sp, #296	; 0x128
 800b518:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b51c:	e9c3 8900 	strd	r8, r9, [r3]
 800b520:	f10a 0a01 	add.w	sl, sl, #1
 800b524:	3e08      	subs	r6, #8
 800b526:	e6f0      	b.n	800b30a <__kernel_rem_pio2+0x2ba>
 800b528:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b52a:	2b03      	cmp	r3, #3
 800b52c:	d85b      	bhi.n	800b5e6 <__kernel_rem_pio2+0x596>
 800b52e:	e8df f003 	tbb	[pc, r3]
 800b532:	264a      	.short	0x264a
 800b534:	0226      	.short	0x0226
 800b536:	ab9a      	add	r3, sp, #616	; 0x268
 800b538:	441c      	add	r4, r3
 800b53a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b53e:	46a2      	mov	sl, r4
 800b540:	46ab      	mov	fp, r5
 800b542:	f1bb 0f00 	cmp.w	fp, #0
 800b546:	dc6c      	bgt.n	800b622 <__kernel_rem_pio2+0x5d2>
 800b548:	46a2      	mov	sl, r4
 800b54a:	46ab      	mov	fp, r5
 800b54c:	f1bb 0f01 	cmp.w	fp, #1
 800b550:	f300 8086 	bgt.w	800b660 <__kernel_rem_pio2+0x610>
 800b554:	2000      	movs	r0, #0
 800b556:	2100      	movs	r1, #0
 800b558:	2d01      	cmp	r5, #1
 800b55a:	f300 80a0 	bgt.w	800b69e <__kernel_rem_pio2+0x64e>
 800b55e:	9b02      	ldr	r3, [sp, #8]
 800b560:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800b564:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800b568:	2b00      	cmp	r3, #0
 800b56a:	f040 809e 	bne.w	800b6aa <__kernel_rem_pio2+0x65a>
 800b56e:	9b01      	ldr	r3, [sp, #4]
 800b570:	e9c3 7800 	strd	r7, r8, [r3]
 800b574:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b578:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b57c:	e033      	b.n	800b5e6 <__kernel_rem_pio2+0x596>
 800b57e:	3408      	adds	r4, #8
 800b580:	ab4a      	add	r3, sp, #296	; 0x128
 800b582:	441c      	add	r4, r3
 800b584:	462e      	mov	r6, r5
 800b586:	2000      	movs	r0, #0
 800b588:	2100      	movs	r1, #0
 800b58a:	2e00      	cmp	r6, #0
 800b58c:	da3a      	bge.n	800b604 <__kernel_rem_pio2+0x5b4>
 800b58e:	9b02      	ldr	r3, [sp, #8]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d03d      	beq.n	800b610 <__kernel_rem_pio2+0x5c0>
 800b594:	4602      	mov	r2, r0
 800b596:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b59a:	9c01      	ldr	r4, [sp, #4]
 800b59c:	e9c4 2300 	strd	r2, r3, [r4]
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	460b      	mov	r3, r1
 800b5a4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b5a8:	f7f4 fe7e 	bl	80002a8 <__aeabi_dsub>
 800b5ac:	ae4c      	add	r6, sp, #304	; 0x130
 800b5ae:	2401      	movs	r4, #1
 800b5b0:	42a5      	cmp	r5, r4
 800b5b2:	da30      	bge.n	800b616 <__kernel_rem_pio2+0x5c6>
 800b5b4:	9b02      	ldr	r3, [sp, #8]
 800b5b6:	b113      	cbz	r3, 800b5be <__kernel_rem_pio2+0x56e>
 800b5b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b5bc:	4619      	mov	r1, r3
 800b5be:	9b01      	ldr	r3, [sp, #4]
 800b5c0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b5c4:	e00f      	b.n	800b5e6 <__kernel_rem_pio2+0x596>
 800b5c6:	ab9a      	add	r3, sp, #616	; 0x268
 800b5c8:	441c      	add	r4, r3
 800b5ca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b5ce:	2000      	movs	r0, #0
 800b5d0:	2100      	movs	r1, #0
 800b5d2:	2d00      	cmp	r5, #0
 800b5d4:	da10      	bge.n	800b5f8 <__kernel_rem_pio2+0x5a8>
 800b5d6:	9b02      	ldr	r3, [sp, #8]
 800b5d8:	b113      	cbz	r3, 800b5e0 <__kernel_rem_pio2+0x590>
 800b5da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b5de:	4619      	mov	r1, r3
 800b5e0:	9b01      	ldr	r3, [sp, #4]
 800b5e2:	e9c3 0100 	strd	r0, r1, [r3]
 800b5e6:	9b06      	ldr	r3, [sp, #24]
 800b5e8:	f003 0007 	and.w	r0, r3, #7
 800b5ec:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b5f0:	ecbd 8b02 	vpop	{d8}
 800b5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5f8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b5fc:	f7f4 fe56 	bl	80002ac <__adddf3>
 800b600:	3d01      	subs	r5, #1
 800b602:	e7e6      	b.n	800b5d2 <__kernel_rem_pio2+0x582>
 800b604:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b608:	f7f4 fe50 	bl	80002ac <__adddf3>
 800b60c:	3e01      	subs	r6, #1
 800b60e:	e7bc      	b.n	800b58a <__kernel_rem_pio2+0x53a>
 800b610:	4602      	mov	r2, r0
 800b612:	460b      	mov	r3, r1
 800b614:	e7c1      	b.n	800b59a <__kernel_rem_pio2+0x54a>
 800b616:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b61a:	f7f4 fe47 	bl	80002ac <__adddf3>
 800b61e:	3401      	adds	r4, #1
 800b620:	e7c6      	b.n	800b5b0 <__kernel_rem_pio2+0x560>
 800b622:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800b626:	ed3a 7b02 	vldmdb	sl!, {d7}
 800b62a:	4640      	mov	r0, r8
 800b62c:	ec53 2b17 	vmov	r2, r3, d7
 800b630:	4649      	mov	r1, r9
 800b632:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b636:	f7f4 fe39 	bl	80002ac <__adddf3>
 800b63a:	4602      	mov	r2, r0
 800b63c:	460b      	mov	r3, r1
 800b63e:	4606      	mov	r6, r0
 800b640:	460f      	mov	r7, r1
 800b642:	4640      	mov	r0, r8
 800b644:	4649      	mov	r1, r9
 800b646:	f7f4 fe2f 	bl	80002a8 <__aeabi_dsub>
 800b64a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b64e:	f7f4 fe2d 	bl	80002ac <__adddf3>
 800b652:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b656:	e9ca 0100 	strd	r0, r1, [sl]
 800b65a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800b65e:	e770      	b.n	800b542 <__kernel_rem_pio2+0x4f2>
 800b660:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800b664:	ed3a 7b02 	vldmdb	sl!, {d7}
 800b668:	4630      	mov	r0, r6
 800b66a:	ec53 2b17 	vmov	r2, r3, d7
 800b66e:	4639      	mov	r1, r7
 800b670:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b674:	f7f4 fe1a 	bl	80002ac <__adddf3>
 800b678:	4602      	mov	r2, r0
 800b67a:	460b      	mov	r3, r1
 800b67c:	4680      	mov	r8, r0
 800b67e:	4689      	mov	r9, r1
 800b680:	4630      	mov	r0, r6
 800b682:	4639      	mov	r1, r7
 800b684:	f7f4 fe10 	bl	80002a8 <__aeabi_dsub>
 800b688:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b68c:	f7f4 fe0e 	bl	80002ac <__adddf3>
 800b690:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b694:	e9ca 0100 	strd	r0, r1, [sl]
 800b698:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800b69c:	e756      	b.n	800b54c <__kernel_rem_pio2+0x4fc>
 800b69e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b6a2:	f7f4 fe03 	bl	80002ac <__adddf3>
 800b6a6:	3d01      	subs	r5, #1
 800b6a8:	e756      	b.n	800b558 <__kernel_rem_pio2+0x508>
 800b6aa:	9b01      	ldr	r3, [sp, #4]
 800b6ac:	9a01      	ldr	r2, [sp, #4]
 800b6ae:	601f      	str	r7, [r3, #0]
 800b6b0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800b6b4:	605c      	str	r4, [r3, #4]
 800b6b6:	609d      	str	r5, [r3, #8]
 800b6b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b6bc:	60d3      	str	r3, [r2, #12]
 800b6be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b6c2:	6110      	str	r0, [r2, #16]
 800b6c4:	6153      	str	r3, [r2, #20]
 800b6c6:	e78e      	b.n	800b5e6 <__kernel_rem_pio2+0x596>
 800b6c8:	41700000 	.word	0x41700000
 800b6cc:	3e700000 	.word	0x3e700000

0800b6d0 <__kernel_sin>:
 800b6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d4:	ec55 4b10 	vmov	r4, r5, d0
 800b6d8:	b085      	sub	sp, #20
 800b6da:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b6de:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b6e2:	ed8d 1b00 	vstr	d1, [sp]
 800b6e6:	9002      	str	r0, [sp, #8]
 800b6e8:	da06      	bge.n	800b6f8 <__kernel_sin+0x28>
 800b6ea:	ee10 0a10 	vmov	r0, s0
 800b6ee:	4629      	mov	r1, r5
 800b6f0:	f7f5 fa42 	bl	8000b78 <__aeabi_d2iz>
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	d051      	beq.n	800b79c <__kernel_sin+0xcc>
 800b6f8:	4622      	mov	r2, r4
 800b6fa:	462b      	mov	r3, r5
 800b6fc:	4620      	mov	r0, r4
 800b6fe:	4629      	mov	r1, r5
 800b700:	f7f4 ff8a 	bl	8000618 <__aeabi_dmul>
 800b704:	4682      	mov	sl, r0
 800b706:	468b      	mov	fp, r1
 800b708:	4602      	mov	r2, r0
 800b70a:	460b      	mov	r3, r1
 800b70c:	4620      	mov	r0, r4
 800b70e:	4629      	mov	r1, r5
 800b710:	f7f4 ff82 	bl	8000618 <__aeabi_dmul>
 800b714:	a341      	add	r3, pc, #260	; (adr r3, 800b81c <__kernel_sin+0x14c>)
 800b716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71a:	4680      	mov	r8, r0
 800b71c:	4689      	mov	r9, r1
 800b71e:	4650      	mov	r0, sl
 800b720:	4659      	mov	r1, fp
 800b722:	f7f4 ff79 	bl	8000618 <__aeabi_dmul>
 800b726:	a33f      	add	r3, pc, #252	; (adr r3, 800b824 <__kernel_sin+0x154>)
 800b728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72c:	f7f4 fdbc 	bl	80002a8 <__aeabi_dsub>
 800b730:	4652      	mov	r2, sl
 800b732:	465b      	mov	r3, fp
 800b734:	f7f4 ff70 	bl	8000618 <__aeabi_dmul>
 800b738:	a33c      	add	r3, pc, #240	; (adr r3, 800b82c <__kernel_sin+0x15c>)
 800b73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73e:	f7f4 fdb5 	bl	80002ac <__adddf3>
 800b742:	4652      	mov	r2, sl
 800b744:	465b      	mov	r3, fp
 800b746:	f7f4 ff67 	bl	8000618 <__aeabi_dmul>
 800b74a:	a33a      	add	r3, pc, #232	; (adr r3, 800b834 <__kernel_sin+0x164>)
 800b74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b750:	f7f4 fdaa 	bl	80002a8 <__aeabi_dsub>
 800b754:	4652      	mov	r2, sl
 800b756:	465b      	mov	r3, fp
 800b758:	f7f4 ff5e 	bl	8000618 <__aeabi_dmul>
 800b75c:	a337      	add	r3, pc, #220	; (adr r3, 800b83c <__kernel_sin+0x16c>)
 800b75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b762:	f7f4 fda3 	bl	80002ac <__adddf3>
 800b766:	9b02      	ldr	r3, [sp, #8]
 800b768:	4606      	mov	r6, r0
 800b76a:	460f      	mov	r7, r1
 800b76c:	b9db      	cbnz	r3, 800b7a6 <__kernel_sin+0xd6>
 800b76e:	4602      	mov	r2, r0
 800b770:	460b      	mov	r3, r1
 800b772:	4650      	mov	r0, sl
 800b774:	4659      	mov	r1, fp
 800b776:	f7f4 ff4f 	bl	8000618 <__aeabi_dmul>
 800b77a:	a325      	add	r3, pc, #148	; (adr r3, 800b810 <__kernel_sin+0x140>)
 800b77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b780:	f7f4 fd92 	bl	80002a8 <__aeabi_dsub>
 800b784:	4642      	mov	r2, r8
 800b786:	464b      	mov	r3, r9
 800b788:	f7f4 ff46 	bl	8000618 <__aeabi_dmul>
 800b78c:	4602      	mov	r2, r0
 800b78e:	460b      	mov	r3, r1
 800b790:	4620      	mov	r0, r4
 800b792:	4629      	mov	r1, r5
 800b794:	f7f4 fd8a 	bl	80002ac <__adddf3>
 800b798:	4604      	mov	r4, r0
 800b79a:	460d      	mov	r5, r1
 800b79c:	ec45 4b10 	vmov	d0, r4, r5
 800b7a0:	b005      	add	sp, #20
 800b7a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	4b1b      	ldr	r3, [pc, #108]	; (800b818 <__kernel_sin+0x148>)
 800b7aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7ae:	f7f4 ff33 	bl	8000618 <__aeabi_dmul>
 800b7b2:	4632      	mov	r2, r6
 800b7b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7b8:	463b      	mov	r3, r7
 800b7ba:	4640      	mov	r0, r8
 800b7bc:	4649      	mov	r1, r9
 800b7be:	f7f4 ff2b 	bl	8000618 <__aeabi_dmul>
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	460b      	mov	r3, r1
 800b7c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7ca:	f7f4 fd6d 	bl	80002a8 <__aeabi_dsub>
 800b7ce:	4652      	mov	r2, sl
 800b7d0:	465b      	mov	r3, fp
 800b7d2:	f7f4 ff21 	bl	8000618 <__aeabi_dmul>
 800b7d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7da:	f7f4 fd65 	bl	80002a8 <__aeabi_dsub>
 800b7de:	a30c      	add	r3, pc, #48	; (adr r3, 800b810 <__kernel_sin+0x140>)
 800b7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e4:	4606      	mov	r6, r0
 800b7e6:	460f      	mov	r7, r1
 800b7e8:	4640      	mov	r0, r8
 800b7ea:	4649      	mov	r1, r9
 800b7ec:	f7f4 ff14 	bl	8000618 <__aeabi_dmul>
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	4630      	mov	r0, r6
 800b7f6:	4639      	mov	r1, r7
 800b7f8:	f7f4 fd58 	bl	80002ac <__adddf3>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	460b      	mov	r3, r1
 800b800:	4620      	mov	r0, r4
 800b802:	4629      	mov	r1, r5
 800b804:	f7f4 fd50 	bl	80002a8 <__aeabi_dsub>
 800b808:	e7c6      	b.n	800b798 <__kernel_sin+0xc8>
 800b80a:	bf00      	nop
 800b80c:	f3af 8000 	nop.w
 800b810:	55555549 	.word	0x55555549
 800b814:	3fc55555 	.word	0x3fc55555
 800b818:	3fe00000 	.word	0x3fe00000
 800b81c:	5acfd57c 	.word	0x5acfd57c
 800b820:	3de5d93a 	.word	0x3de5d93a
 800b824:	8a2b9ceb 	.word	0x8a2b9ceb
 800b828:	3e5ae5e6 	.word	0x3e5ae5e6
 800b82c:	57b1fe7d 	.word	0x57b1fe7d
 800b830:	3ec71de3 	.word	0x3ec71de3
 800b834:	19c161d5 	.word	0x19c161d5
 800b838:	3f2a01a0 	.word	0x3f2a01a0
 800b83c:	1110f8a6 	.word	0x1110f8a6
 800b840:	3f811111 	.word	0x3f811111
 800b844:	00000000 	.word	0x00000000

0800b848 <atan>:
 800b848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b84c:	ec55 4b10 	vmov	r4, r5, d0
 800b850:	4bc3      	ldr	r3, [pc, #780]	; (800bb60 <atan+0x318>)
 800b852:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b856:	429e      	cmp	r6, r3
 800b858:	46ab      	mov	fp, r5
 800b85a:	dd18      	ble.n	800b88e <atan+0x46>
 800b85c:	4bc1      	ldr	r3, [pc, #772]	; (800bb64 <atan+0x31c>)
 800b85e:	429e      	cmp	r6, r3
 800b860:	dc01      	bgt.n	800b866 <atan+0x1e>
 800b862:	d109      	bne.n	800b878 <atan+0x30>
 800b864:	b144      	cbz	r4, 800b878 <atan+0x30>
 800b866:	4622      	mov	r2, r4
 800b868:	462b      	mov	r3, r5
 800b86a:	4620      	mov	r0, r4
 800b86c:	4629      	mov	r1, r5
 800b86e:	f7f4 fd1d 	bl	80002ac <__adddf3>
 800b872:	4604      	mov	r4, r0
 800b874:	460d      	mov	r5, r1
 800b876:	e006      	b.n	800b886 <atan+0x3e>
 800b878:	f1bb 0f00 	cmp.w	fp, #0
 800b87c:	f340 8131 	ble.w	800bae2 <atan+0x29a>
 800b880:	a59b      	add	r5, pc, #620	; (adr r5, 800baf0 <atan+0x2a8>)
 800b882:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b886:	ec45 4b10 	vmov	d0, r4, r5
 800b88a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b88e:	4bb6      	ldr	r3, [pc, #728]	; (800bb68 <atan+0x320>)
 800b890:	429e      	cmp	r6, r3
 800b892:	dc14      	bgt.n	800b8be <atan+0x76>
 800b894:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b898:	429e      	cmp	r6, r3
 800b89a:	dc0d      	bgt.n	800b8b8 <atan+0x70>
 800b89c:	a396      	add	r3, pc, #600	; (adr r3, 800baf8 <atan+0x2b0>)
 800b89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a2:	ee10 0a10 	vmov	r0, s0
 800b8a6:	4629      	mov	r1, r5
 800b8a8:	f7f4 fd00 	bl	80002ac <__adddf3>
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	4baf      	ldr	r3, [pc, #700]	; (800bb6c <atan+0x324>)
 800b8b0:	f7f5 f942 	bl	8000b38 <__aeabi_dcmpgt>
 800b8b4:	2800      	cmp	r0, #0
 800b8b6:	d1e6      	bne.n	800b886 <atan+0x3e>
 800b8b8:	f04f 3aff 	mov.w	sl, #4294967295
 800b8bc:	e02b      	b.n	800b916 <atan+0xce>
 800b8be:	f000 f963 	bl	800bb88 <fabs>
 800b8c2:	4bab      	ldr	r3, [pc, #684]	; (800bb70 <atan+0x328>)
 800b8c4:	429e      	cmp	r6, r3
 800b8c6:	ec55 4b10 	vmov	r4, r5, d0
 800b8ca:	f300 80bf 	bgt.w	800ba4c <atan+0x204>
 800b8ce:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b8d2:	429e      	cmp	r6, r3
 800b8d4:	f300 80a0 	bgt.w	800ba18 <atan+0x1d0>
 800b8d8:	ee10 2a10 	vmov	r2, s0
 800b8dc:	ee10 0a10 	vmov	r0, s0
 800b8e0:	462b      	mov	r3, r5
 800b8e2:	4629      	mov	r1, r5
 800b8e4:	f7f4 fce2 	bl	80002ac <__adddf3>
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	4ba0      	ldr	r3, [pc, #640]	; (800bb6c <atan+0x324>)
 800b8ec:	f7f4 fcdc 	bl	80002a8 <__aeabi_dsub>
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	4606      	mov	r6, r0
 800b8f4:	460f      	mov	r7, r1
 800b8f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	4629      	mov	r1, r5
 800b8fe:	f7f4 fcd5 	bl	80002ac <__adddf3>
 800b902:	4602      	mov	r2, r0
 800b904:	460b      	mov	r3, r1
 800b906:	4630      	mov	r0, r6
 800b908:	4639      	mov	r1, r7
 800b90a:	f7f4 ffaf 	bl	800086c <__aeabi_ddiv>
 800b90e:	f04f 0a00 	mov.w	sl, #0
 800b912:	4604      	mov	r4, r0
 800b914:	460d      	mov	r5, r1
 800b916:	4622      	mov	r2, r4
 800b918:	462b      	mov	r3, r5
 800b91a:	4620      	mov	r0, r4
 800b91c:	4629      	mov	r1, r5
 800b91e:	f7f4 fe7b 	bl	8000618 <__aeabi_dmul>
 800b922:	4602      	mov	r2, r0
 800b924:	460b      	mov	r3, r1
 800b926:	4680      	mov	r8, r0
 800b928:	4689      	mov	r9, r1
 800b92a:	f7f4 fe75 	bl	8000618 <__aeabi_dmul>
 800b92e:	a374      	add	r3, pc, #464	; (adr r3, 800bb00 <atan+0x2b8>)
 800b930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b934:	4606      	mov	r6, r0
 800b936:	460f      	mov	r7, r1
 800b938:	f7f4 fe6e 	bl	8000618 <__aeabi_dmul>
 800b93c:	a372      	add	r3, pc, #456	; (adr r3, 800bb08 <atan+0x2c0>)
 800b93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b942:	f7f4 fcb3 	bl	80002ac <__adddf3>
 800b946:	4632      	mov	r2, r6
 800b948:	463b      	mov	r3, r7
 800b94a:	f7f4 fe65 	bl	8000618 <__aeabi_dmul>
 800b94e:	a370      	add	r3, pc, #448	; (adr r3, 800bb10 <atan+0x2c8>)
 800b950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b954:	f7f4 fcaa 	bl	80002ac <__adddf3>
 800b958:	4632      	mov	r2, r6
 800b95a:	463b      	mov	r3, r7
 800b95c:	f7f4 fe5c 	bl	8000618 <__aeabi_dmul>
 800b960:	a36d      	add	r3, pc, #436	; (adr r3, 800bb18 <atan+0x2d0>)
 800b962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b966:	f7f4 fca1 	bl	80002ac <__adddf3>
 800b96a:	4632      	mov	r2, r6
 800b96c:	463b      	mov	r3, r7
 800b96e:	f7f4 fe53 	bl	8000618 <__aeabi_dmul>
 800b972:	a36b      	add	r3, pc, #428	; (adr r3, 800bb20 <atan+0x2d8>)
 800b974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b978:	f7f4 fc98 	bl	80002ac <__adddf3>
 800b97c:	4632      	mov	r2, r6
 800b97e:	463b      	mov	r3, r7
 800b980:	f7f4 fe4a 	bl	8000618 <__aeabi_dmul>
 800b984:	a368      	add	r3, pc, #416	; (adr r3, 800bb28 <atan+0x2e0>)
 800b986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98a:	f7f4 fc8f 	bl	80002ac <__adddf3>
 800b98e:	4642      	mov	r2, r8
 800b990:	464b      	mov	r3, r9
 800b992:	f7f4 fe41 	bl	8000618 <__aeabi_dmul>
 800b996:	a366      	add	r3, pc, #408	; (adr r3, 800bb30 <atan+0x2e8>)
 800b998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99c:	4680      	mov	r8, r0
 800b99e:	4689      	mov	r9, r1
 800b9a0:	4630      	mov	r0, r6
 800b9a2:	4639      	mov	r1, r7
 800b9a4:	f7f4 fe38 	bl	8000618 <__aeabi_dmul>
 800b9a8:	a363      	add	r3, pc, #396	; (adr r3, 800bb38 <atan+0x2f0>)
 800b9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ae:	f7f4 fc7b 	bl	80002a8 <__aeabi_dsub>
 800b9b2:	4632      	mov	r2, r6
 800b9b4:	463b      	mov	r3, r7
 800b9b6:	f7f4 fe2f 	bl	8000618 <__aeabi_dmul>
 800b9ba:	a361      	add	r3, pc, #388	; (adr r3, 800bb40 <atan+0x2f8>)
 800b9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c0:	f7f4 fc72 	bl	80002a8 <__aeabi_dsub>
 800b9c4:	4632      	mov	r2, r6
 800b9c6:	463b      	mov	r3, r7
 800b9c8:	f7f4 fe26 	bl	8000618 <__aeabi_dmul>
 800b9cc:	a35e      	add	r3, pc, #376	; (adr r3, 800bb48 <atan+0x300>)
 800b9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d2:	f7f4 fc69 	bl	80002a8 <__aeabi_dsub>
 800b9d6:	4632      	mov	r2, r6
 800b9d8:	463b      	mov	r3, r7
 800b9da:	f7f4 fe1d 	bl	8000618 <__aeabi_dmul>
 800b9de:	a35c      	add	r3, pc, #368	; (adr r3, 800bb50 <atan+0x308>)
 800b9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e4:	f7f4 fc60 	bl	80002a8 <__aeabi_dsub>
 800b9e8:	4632      	mov	r2, r6
 800b9ea:	463b      	mov	r3, r7
 800b9ec:	f7f4 fe14 	bl	8000618 <__aeabi_dmul>
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	460b      	mov	r3, r1
 800b9f4:	4640      	mov	r0, r8
 800b9f6:	4649      	mov	r1, r9
 800b9f8:	f7f4 fc58 	bl	80002ac <__adddf3>
 800b9fc:	4622      	mov	r2, r4
 800b9fe:	462b      	mov	r3, r5
 800ba00:	f7f4 fe0a 	bl	8000618 <__aeabi_dmul>
 800ba04:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ba08:	4602      	mov	r2, r0
 800ba0a:	460b      	mov	r3, r1
 800ba0c:	d14b      	bne.n	800baa6 <atan+0x25e>
 800ba0e:	4620      	mov	r0, r4
 800ba10:	4629      	mov	r1, r5
 800ba12:	f7f4 fc49 	bl	80002a8 <__aeabi_dsub>
 800ba16:	e72c      	b.n	800b872 <atan+0x2a>
 800ba18:	ee10 0a10 	vmov	r0, s0
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	4b53      	ldr	r3, [pc, #332]	; (800bb6c <atan+0x324>)
 800ba20:	4629      	mov	r1, r5
 800ba22:	f7f4 fc41 	bl	80002a8 <__aeabi_dsub>
 800ba26:	2200      	movs	r2, #0
 800ba28:	4606      	mov	r6, r0
 800ba2a:	460f      	mov	r7, r1
 800ba2c:	4b4f      	ldr	r3, [pc, #316]	; (800bb6c <atan+0x324>)
 800ba2e:	4620      	mov	r0, r4
 800ba30:	4629      	mov	r1, r5
 800ba32:	f7f4 fc3b 	bl	80002ac <__adddf3>
 800ba36:	4602      	mov	r2, r0
 800ba38:	460b      	mov	r3, r1
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	4639      	mov	r1, r7
 800ba3e:	f7f4 ff15 	bl	800086c <__aeabi_ddiv>
 800ba42:	f04f 0a01 	mov.w	sl, #1
 800ba46:	4604      	mov	r4, r0
 800ba48:	460d      	mov	r5, r1
 800ba4a:	e764      	b.n	800b916 <atan+0xce>
 800ba4c:	4b49      	ldr	r3, [pc, #292]	; (800bb74 <atan+0x32c>)
 800ba4e:	429e      	cmp	r6, r3
 800ba50:	dc1d      	bgt.n	800ba8e <atan+0x246>
 800ba52:	ee10 0a10 	vmov	r0, s0
 800ba56:	2200      	movs	r2, #0
 800ba58:	4b47      	ldr	r3, [pc, #284]	; (800bb78 <atan+0x330>)
 800ba5a:	4629      	mov	r1, r5
 800ba5c:	f7f4 fc24 	bl	80002a8 <__aeabi_dsub>
 800ba60:	2200      	movs	r2, #0
 800ba62:	4606      	mov	r6, r0
 800ba64:	460f      	mov	r7, r1
 800ba66:	4b44      	ldr	r3, [pc, #272]	; (800bb78 <atan+0x330>)
 800ba68:	4620      	mov	r0, r4
 800ba6a:	4629      	mov	r1, r5
 800ba6c:	f7f4 fdd4 	bl	8000618 <__aeabi_dmul>
 800ba70:	2200      	movs	r2, #0
 800ba72:	4b3e      	ldr	r3, [pc, #248]	; (800bb6c <atan+0x324>)
 800ba74:	f7f4 fc1a 	bl	80002ac <__adddf3>
 800ba78:	4602      	mov	r2, r0
 800ba7a:	460b      	mov	r3, r1
 800ba7c:	4630      	mov	r0, r6
 800ba7e:	4639      	mov	r1, r7
 800ba80:	f7f4 fef4 	bl	800086c <__aeabi_ddiv>
 800ba84:	f04f 0a02 	mov.w	sl, #2
 800ba88:	4604      	mov	r4, r0
 800ba8a:	460d      	mov	r5, r1
 800ba8c:	e743      	b.n	800b916 <atan+0xce>
 800ba8e:	462b      	mov	r3, r5
 800ba90:	ee10 2a10 	vmov	r2, s0
 800ba94:	2000      	movs	r0, #0
 800ba96:	4939      	ldr	r1, [pc, #228]	; (800bb7c <atan+0x334>)
 800ba98:	f7f4 fee8 	bl	800086c <__aeabi_ddiv>
 800ba9c:	f04f 0a03 	mov.w	sl, #3
 800baa0:	4604      	mov	r4, r0
 800baa2:	460d      	mov	r5, r1
 800baa4:	e737      	b.n	800b916 <atan+0xce>
 800baa6:	4b36      	ldr	r3, [pc, #216]	; (800bb80 <atan+0x338>)
 800baa8:	4e36      	ldr	r6, [pc, #216]	; (800bb84 <atan+0x33c>)
 800baaa:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800baae:	4456      	add	r6, sl
 800bab0:	449a      	add	sl, r3
 800bab2:	e9da 2300 	ldrd	r2, r3, [sl]
 800bab6:	f7f4 fbf7 	bl	80002a8 <__aeabi_dsub>
 800baba:	4622      	mov	r2, r4
 800babc:	462b      	mov	r3, r5
 800babe:	f7f4 fbf3 	bl	80002a8 <__aeabi_dsub>
 800bac2:	4602      	mov	r2, r0
 800bac4:	460b      	mov	r3, r1
 800bac6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800baca:	f7f4 fbed 	bl	80002a8 <__aeabi_dsub>
 800bace:	f1bb 0f00 	cmp.w	fp, #0
 800bad2:	4604      	mov	r4, r0
 800bad4:	460d      	mov	r5, r1
 800bad6:	f6bf aed6 	bge.w	800b886 <atan+0x3e>
 800bada:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bade:	461d      	mov	r5, r3
 800bae0:	e6d1      	b.n	800b886 <atan+0x3e>
 800bae2:	a51d      	add	r5, pc, #116	; (adr r5, 800bb58 <atan+0x310>)
 800bae4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bae8:	e6cd      	b.n	800b886 <atan+0x3e>
 800baea:	bf00      	nop
 800baec:	f3af 8000 	nop.w
 800baf0:	54442d18 	.word	0x54442d18
 800baf4:	3ff921fb 	.word	0x3ff921fb
 800baf8:	8800759c 	.word	0x8800759c
 800bafc:	7e37e43c 	.word	0x7e37e43c
 800bb00:	e322da11 	.word	0xe322da11
 800bb04:	3f90ad3a 	.word	0x3f90ad3a
 800bb08:	24760deb 	.word	0x24760deb
 800bb0c:	3fa97b4b 	.word	0x3fa97b4b
 800bb10:	a0d03d51 	.word	0xa0d03d51
 800bb14:	3fb10d66 	.word	0x3fb10d66
 800bb18:	c54c206e 	.word	0xc54c206e
 800bb1c:	3fb745cd 	.word	0x3fb745cd
 800bb20:	920083ff 	.word	0x920083ff
 800bb24:	3fc24924 	.word	0x3fc24924
 800bb28:	5555550d 	.word	0x5555550d
 800bb2c:	3fd55555 	.word	0x3fd55555
 800bb30:	2c6a6c2f 	.word	0x2c6a6c2f
 800bb34:	bfa2b444 	.word	0xbfa2b444
 800bb38:	52defd9a 	.word	0x52defd9a
 800bb3c:	3fadde2d 	.word	0x3fadde2d
 800bb40:	af749a6d 	.word	0xaf749a6d
 800bb44:	3fb3b0f2 	.word	0x3fb3b0f2
 800bb48:	fe231671 	.word	0xfe231671
 800bb4c:	3fbc71c6 	.word	0x3fbc71c6
 800bb50:	9998ebc4 	.word	0x9998ebc4
 800bb54:	3fc99999 	.word	0x3fc99999
 800bb58:	54442d18 	.word	0x54442d18
 800bb5c:	bff921fb 	.word	0xbff921fb
 800bb60:	440fffff 	.word	0x440fffff
 800bb64:	7ff00000 	.word	0x7ff00000
 800bb68:	3fdbffff 	.word	0x3fdbffff
 800bb6c:	3ff00000 	.word	0x3ff00000
 800bb70:	3ff2ffff 	.word	0x3ff2ffff
 800bb74:	40037fff 	.word	0x40037fff
 800bb78:	3ff80000 	.word	0x3ff80000
 800bb7c:	bff00000 	.word	0xbff00000
 800bb80:	0800c508 	.word	0x0800c508
 800bb84:	0800c4e8 	.word	0x0800c4e8

0800bb88 <fabs>:
 800bb88:	ec51 0b10 	vmov	r0, r1, d0
 800bb8c:	ee10 2a10 	vmov	r2, s0
 800bb90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bb94:	ec43 2b10 	vmov	d0, r2, r3
 800bb98:	4770      	bx	lr
 800bb9a:	0000      	movs	r0, r0
 800bb9c:	0000      	movs	r0, r0
	...

0800bba0 <floor>:
 800bba0:	ec51 0b10 	vmov	r0, r1, d0
 800bba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bba8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800bbac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800bbb0:	2e13      	cmp	r6, #19
 800bbb2:	460c      	mov	r4, r1
 800bbb4:	ee10 5a10 	vmov	r5, s0
 800bbb8:	4680      	mov	r8, r0
 800bbba:	dc34      	bgt.n	800bc26 <floor+0x86>
 800bbbc:	2e00      	cmp	r6, #0
 800bbbe:	da16      	bge.n	800bbee <floor+0x4e>
 800bbc0:	a335      	add	r3, pc, #212	; (adr r3, 800bc98 <floor+0xf8>)
 800bbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc6:	f7f4 fb71 	bl	80002ac <__adddf3>
 800bbca:	2200      	movs	r2, #0
 800bbcc:	2300      	movs	r3, #0
 800bbce:	f7f4 ffb3 	bl	8000b38 <__aeabi_dcmpgt>
 800bbd2:	b148      	cbz	r0, 800bbe8 <floor+0x48>
 800bbd4:	2c00      	cmp	r4, #0
 800bbd6:	da59      	bge.n	800bc8c <floor+0xec>
 800bbd8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bbdc:	4a30      	ldr	r2, [pc, #192]	; (800bca0 <floor+0x100>)
 800bbde:	432b      	orrs	r3, r5
 800bbe0:	2500      	movs	r5, #0
 800bbe2:	42ab      	cmp	r3, r5
 800bbe4:	bf18      	it	ne
 800bbe6:	4614      	movne	r4, r2
 800bbe8:	4621      	mov	r1, r4
 800bbea:	4628      	mov	r0, r5
 800bbec:	e025      	b.n	800bc3a <floor+0x9a>
 800bbee:	4f2d      	ldr	r7, [pc, #180]	; (800bca4 <floor+0x104>)
 800bbf0:	4137      	asrs	r7, r6
 800bbf2:	ea01 0307 	and.w	r3, r1, r7
 800bbf6:	4303      	orrs	r3, r0
 800bbf8:	d01f      	beq.n	800bc3a <floor+0x9a>
 800bbfa:	a327      	add	r3, pc, #156	; (adr r3, 800bc98 <floor+0xf8>)
 800bbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc00:	f7f4 fb54 	bl	80002ac <__adddf3>
 800bc04:	2200      	movs	r2, #0
 800bc06:	2300      	movs	r3, #0
 800bc08:	f7f4 ff96 	bl	8000b38 <__aeabi_dcmpgt>
 800bc0c:	2800      	cmp	r0, #0
 800bc0e:	d0eb      	beq.n	800bbe8 <floor+0x48>
 800bc10:	2c00      	cmp	r4, #0
 800bc12:	bfbe      	ittt	lt
 800bc14:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bc18:	fa43 f606 	asrlt.w	r6, r3, r6
 800bc1c:	19a4      	addlt	r4, r4, r6
 800bc1e:	ea24 0407 	bic.w	r4, r4, r7
 800bc22:	2500      	movs	r5, #0
 800bc24:	e7e0      	b.n	800bbe8 <floor+0x48>
 800bc26:	2e33      	cmp	r6, #51	; 0x33
 800bc28:	dd0b      	ble.n	800bc42 <floor+0xa2>
 800bc2a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bc2e:	d104      	bne.n	800bc3a <floor+0x9a>
 800bc30:	ee10 2a10 	vmov	r2, s0
 800bc34:	460b      	mov	r3, r1
 800bc36:	f7f4 fb39 	bl	80002ac <__adddf3>
 800bc3a:	ec41 0b10 	vmov	d0, r0, r1
 800bc3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc42:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800bc46:	f04f 33ff 	mov.w	r3, #4294967295
 800bc4a:	fa23 f707 	lsr.w	r7, r3, r7
 800bc4e:	4207      	tst	r7, r0
 800bc50:	d0f3      	beq.n	800bc3a <floor+0x9a>
 800bc52:	a311      	add	r3, pc, #68	; (adr r3, 800bc98 <floor+0xf8>)
 800bc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc58:	f7f4 fb28 	bl	80002ac <__adddf3>
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	2300      	movs	r3, #0
 800bc60:	f7f4 ff6a 	bl	8000b38 <__aeabi_dcmpgt>
 800bc64:	2800      	cmp	r0, #0
 800bc66:	d0bf      	beq.n	800bbe8 <floor+0x48>
 800bc68:	2c00      	cmp	r4, #0
 800bc6a:	da02      	bge.n	800bc72 <floor+0xd2>
 800bc6c:	2e14      	cmp	r6, #20
 800bc6e:	d103      	bne.n	800bc78 <floor+0xd8>
 800bc70:	3401      	adds	r4, #1
 800bc72:	ea25 0507 	bic.w	r5, r5, r7
 800bc76:	e7b7      	b.n	800bbe8 <floor+0x48>
 800bc78:	2301      	movs	r3, #1
 800bc7a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bc7e:	fa03 f606 	lsl.w	r6, r3, r6
 800bc82:	4435      	add	r5, r6
 800bc84:	4545      	cmp	r5, r8
 800bc86:	bf38      	it	cc
 800bc88:	18e4      	addcc	r4, r4, r3
 800bc8a:	e7f2      	b.n	800bc72 <floor+0xd2>
 800bc8c:	2500      	movs	r5, #0
 800bc8e:	462c      	mov	r4, r5
 800bc90:	e7aa      	b.n	800bbe8 <floor+0x48>
 800bc92:	bf00      	nop
 800bc94:	f3af 8000 	nop.w
 800bc98:	8800759c 	.word	0x8800759c
 800bc9c:	7e37e43c 	.word	0x7e37e43c
 800bca0:	bff00000 	.word	0xbff00000
 800bca4:	000fffff 	.word	0x000fffff

0800bca8 <matherr>:
 800bca8:	2000      	movs	r0, #0
 800bcaa:	4770      	bx	lr
 800bcac:	0000      	movs	r0, r0
	...

0800bcb0 <nan>:
 800bcb0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bcb8 <nan+0x8>
 800bcb4:	4770      	bx	lr
 800bcb6:	bf00      	nop
 800bcb8:	00000000 	.word	0x00000000
 800bcbc:	7ff80000 	.word	0x7ff80000

0800bcc0 <scalbn>:
 800bcc0:	b570      	push	{r4, r5, r6, lr}
 800bcc2:	ec55 4b10 	vmov	r4, r5, d0
 800bcc6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800bcca:	4606      	mov	r6, r0
 800bccc:	462b      	mov	r3, r5
 800bcce:	b9aa      	cbnz	r2, 800bcfc <scalbn+0x3c>
 800bcd0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bcd4:	4323      	orrs	r3, r4
 800bcd6:	d03b      	beq.n	800bd50 <scalbn+0x90>
 800bcd8:	4b31      	ldr	r3, [pc, #196]	; (800bda0 <scalbn+0xe0>)
 800bcda:	4629      	mov	r1, r5
 800bcdc:	2200      	movs	r2, #0
 800bcde:	ee10 0a10 	vmov	r0, s0
 800bce2:	f7f4 fc99 	bl	8000618 <__aeabi_dmul>
 800bce6:	4b2f      	ldr	r3, [pc, #188]	; (800bda4 <scalbn+0xe4>)
 800bce8:	429e      	cmp	r6, r3
 800bcea:	4604      	mov	r4, r0
 800bcec:	460d      	mov	r5, r1
 800bcee:	da12      	bge.n	800bd16 <scalbn+0x56>
 800bcf0:	a327      	add	r3, pc, #156	; (adr r3, 800bd90 <scalbn+0xd0>)
 800bcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf6:	f7f4 fc8f 	bl	8000618 <__aeabi_dmul>
 800bcfa:	e009      	b.n	800bd10 <scalbn+0x50>
 800bcfc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bd00:	428a      	cmp	r2, r1
 800bd02:	d10c      	bne.n	800bd1e <scalbn+0x5e>
 800bd04:	ee10 2a10 	vmov	r2, s0
 800bd08:	4620      	mov	r0, r4
 800bd0a:	4629      	mov	r1, r5
 800bd0c:	f7f4 face 	bl	80002ac <__adddf3>
 800bd10:	4604      	mov	r4, r0
 800bd12:	460d      	mov	r5, r1
 800bd14:	e01c      	b.n	800bd50 <scalbn+0x90>
 800bd16:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bd1a:	460b      	mov	r3, r1
 800bd1c:	3a36      	subs	r2, #54	; 0x36
 800bd1e:	4432      	add	r2, r6
 800bd20:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bd24:	428a      	cmp	r2, r1
 800bd26:	dd0b      	ble.n	800bd40 <scalbn+0x80>
 800bd28:	ec45 4b11 	vmov	d1, r4, r5
 800bd2c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800bd98 <scalbn+0xd8>
 800bd30:	f000 f83c 	bl	800bdac <copysign>
 800bd34:	a318      	add	r3, pc, #96	; (adr r3, 800bd98 <scalbn+0xd8>)
 800bd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd3a:	ec51 0b10 	vmov	r0, r1, d0
 800bd3e:	e7da      	b.n	800bcf6 <scalbn+0x36>
 800bd40:	2a00      	cmp	r2, #0
 800bd42:	dd08      	ble.n	800bd56 <scalbn+0x96>
 800bd44:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bd48:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bd4c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bd50:	ec45 4b10 	vmov	d0, r4, r5
 800bd54:	bd70      	pop	{r4, r5, r6, pc}
 800bd56:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bd5a:	da0d      	bge.n	800bd78 <scalbn+0xb8>
 800bd5c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bd60:	429e      	cmp	r6, r3
 800bd62:	ec45 4b11 	vmov	d1, r4, r5
 800bd66:	dce1      	bgt.n	800bd2c <scalbn+0x6c>
 800bd68:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800bd90 <scalbn+0xd0>
 800bd6c:	f000 f81e 	bl	800bdac <copysign>
 800bd70:	a307      	add	r3, pc, #28	; (adr r3, 800bd90 <scalbn+0xd0>)
 800bd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd76:	e7e0      	b.n	800bd3a <scalbn+0x7a>
 800bd78:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bd7c:	3236      	adds	r2, #54	; 0x36
 800bd7e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bd82:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bd86:	4620      	mov	r0, r4
 800bd88:	4629      	mov	r1, r5
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	4b06      	ldr	r3, [pc, #24]	; (800bda8 <scalbn+0xe8>)
 800bd8e:	e7b2      	b.n	800bcf6 <scalbn+0x36>
 800bd90:	c2f8f359 	.word	0xc2f8f359
 800bd94:	01a56e1f 	.word	0x01a56e1f
 800bd98:	8800759c 	.word	0x8800759c
 800bd9c:	7e37e43c 	.word	0x7e37e43c
 800bda0:	43500000 	.word	0x43500000
 800bda4:	ffff3cb0 	.word	0xffff3cb0
 800bda8:	3c900000 	.word	0x3c900000

0800bdac <copysign>:
 800bdac:	ec51 0b10 	vmov	r0, r1, d0
 800bdb0:	ee11 0a90 	vmov	r0, s3
 800bdb4:	ee10 2a10 	vmov	r2, s0
 800bdb8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bdbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800bdc0:	ea41 0300 	orr.w	r3, r1, r0
 800bdc4:	ec43 2b10 	vmov	d0, r2, r3
 800bdc8:	4770      	bx	lr
	...

0800bdcc <_init>:
 800bdcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdce:	bf00      	nop
 800bdd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdd2:	bc08      	pop	{r3}
 800bdd4:	469e      	mov	lr, r3
 800bdd6:	4770      	bx	lr

0800bdd8 <_fini>:
 800bdd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdda:	bf00      	nop
 800bddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdde:	bc08      	pop	{r3}
 800bde0:	469e      	mov	lr, r3
 800bde2:	4770      	bx	lr
