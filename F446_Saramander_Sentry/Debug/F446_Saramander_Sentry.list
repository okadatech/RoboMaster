
F446_Saramander_Sentry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000958c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08009758  08009758  00019758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a10  08009a10  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009a10  08009a10  00019a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a18  08009a18  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a18  08009a18  00019a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a1c  08009a1c  00019a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d4  200001dc  08009bfc  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007b0  08009bfc  000207b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013943  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d88  00000000  00000000  00033b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001008  00000000  00000000  000368d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e80  00000000  00000000  000378e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002442b  00000000  00000000  00038760  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e1fc  00000000  00000000  0005cb8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3ad8  00000000  00000000  0006ad87  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013e85f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e38  00000000  00000000  0013e8dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001dc 	.word	0x200001dc
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800973c 	.word	0x0800973c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001e0 	.word	0x200001e0
 8000204:	0800973c 	.word	0x0800973c

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b972 	b.w	8000edc <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9e08      	ldr	r6, [sp, #32]
 8000c16:	4604      	mov	r4, r0
 8000c18:	4688      	mov	r8, r1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d14b      	bne.n	8000cb6 <__udivmoddi4+0xa6>
 8000c1e:	428a      	cmp	r2, r1
 8000c20:	4615      	mov	r5, r2
 8000c22:	d967      	bls.n	8000cf4 <__udivmoddi4+0xe4>
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	b14a      	cbz	r2, 8000c3e <__udivmoddi4+0x2e>
 8000c2a:	f1c2 0720 	rsb	r7, r2, #32
 8000c2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c32:	fa20 f707 	lsr.w	r7, r0, r7
 8000c36:	4095      	lsls	r5, r2
 8000c38:	ea47 0803 	orr.w	r8, r7, r3
 8000c3c:	4094      	lsls	r4, r2
 8000c3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c42:	0c23      	lsrs	r3, r4, #16
 8000c44:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c48:	fa1f fc85 	uxth.w	ip, r5
 8000c4c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c50:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c54:	fb07 f10c 	mul.w	r1, r7, ip
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	d909      	bls.n	8000c70 <__udivmoddi4+0x60>
 8000c5c:	18eb      	adds	r3, r5, r3
 8000c5e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c62:	f080 811b 	bcs.w	8000e9c <__udivmoddi4+0x28c>
 8000c66:	4299      	cmp	r1, r3
 8000c68:	f240 8118 	bls.w	8000e9c <__udivmoddi4+0x28c>
 8000c6c:	3f02      	subs	r7, #2
 8000c6e:	442b      	add	r3, r5
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c80:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c84:	45a4      	cmp	ip, r4
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x8c>
 8000c88:	192c      	adds	r4, r5, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	f080 8107 	bcs.w	8000ea0 <__udivmoddi4+0x290>
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	f240 8104 	bls.w	8000ea0 <__udivmoddi4+0x290>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	442c      	add	r4, r5
 8000c9c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca0:	eba4 040c 	sub.w	r4, r4, ip
 8000ca4:	2700      	movs	r7, #0
 8000ca6:	b11e      	cbz	r6, 8000cb0 <__udivmoddi4+0xa0>
 8000ca8:	40d4      	lsrs	r4, r2
 8000caa:	2300      	movs	r3, #0
 8000cac:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d909      	bls.n	8000cce <__udivmoddi4+0xbe>
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	f000 80eb 	beq.w	8000e96 <__udivmoddi4+0x286>
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	e9c6 0100 	strd	r0, r1, [r6]
 8000cc6:	4638      	mov	r0, r7
 8000cc8:	4639      	mov	r1, r7
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	fab3 f783 	clz	r7, r3
 8000cd2:	2f00      	cmp	r7, #0
 8000cd4:	d147      	bne.n	8000d66 <__udivmoddi4+0x156>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xd0>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 80fa 	bhi.w	8000ed4 <__udivmoddi4+0x2c4>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4698      	mov	r8, r3
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d0e0      	beq.n	8000cb0 <__udivmoddi4+0xa0>
 8000cee:	e9c6 4800 	strd	r4, r8, [r6]
 8000cf2:	e7dd      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000cf4:	b902      	cbnz	r2, 8000cf8 <__udivmoddi4+0xe8>
 8000cf6:	deff      	udf	#255	; 0xff
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	2a00      	cmp	r2, #0
 8000cfe:	f040 808f 	bne.w	8000e20 <__udivmoddi4+0x210>
 8000d02:	1b49      	subs	r1, r1, r5
 8000d04:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d08:	fa1f f885 	uxth.w	r8, r5
 8000d0c:	2701      	movs	r7, #1
 8000d0e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d12:	0c23      	lsrs	r3, r4, #16
 8000d14:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb08 f10c 	mul.w	r1, r8, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x124>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x122>
 8000d2c:	4299      	cmp	r1, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2bc>
 8000d32:	4684      	mov	ip, r0
 8000d34:	1a59      	subs	r1, r3, r1
 8000d36:	b2a3      	uxth	r3, r4
 8000d38:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d3c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d40:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d44:	fb08 f800 	mul.w	r8, r8, r0
 8000d48:	45a0      	cmp	r8, r4
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x14c>
 8000d4c:	192c      	adds	r4, r5, r4
 8000d4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x14a>
 8000d54:	45a0      	cmp	r8, r4
 8000d56:	f200 80b6 	bhi.w	8000ec6 <__udivmoddi4+0x2b6>
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	eba4 0408 	sub.w	r4, r4, r8
 8000d60:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d64:	e79f      	b.n	8000ca6 <__udivmoddi4+0x96>
 8000d66:	f1c7 0c20 	rsb	ip, r7, #32
 8000d6a:	40bb      	lsls	r3, r7
 8000d6c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d70:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d74:	fa01 f407 	lsl.w	r4, r1, r7
 8000d78:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d7c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d80:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d84:	4325      	orrs	r5, r4
 8000d86:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d8a:	0c2c      	lsrs	r4, r5, #16
 8000d8c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d90:	fa1f fa8e 	uxth.w	sl, lr
 8000d94:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d98:	fb09 f40a 	mul.w	r4, r9, sl
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	fa02 f207 	lsl.w	r2, r2, r7
 8000da2:	fa00 f107 	lsl.w	r1, r0, r7
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b0>
 8000da8:	eb1e 0303 	adds.w	r3, lr, r3
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db0:	f080 8087 	bcs.w	8000ec2 <__udivmoddi4+0x2b2>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f240 8084 	bls.w	8000ec2 <__udivmoddi4+0x2b2>
 8000dba:	f1a9 0902 	sub.w	r9, r9, #2
 8000dbe:	4473      	add	r3, lr
 8000dc0:	1b1b      	subs	r3, r3, r4
 8000dc2:	b2ad      	uxth	r5, r5
 8000dc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000dcc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dd4:	45a2      	cmp	sl, r4
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1da>
 8000dd8:	eb1e 0404 	adds.w	r4, lr, r4
 8000ddc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de0:	d26b      	bcs.n	8000eba <__udivmoddi4+0x2aa>
 8000de2:	45a2      	cmp	sl, r4
 8000de4:	d969      	bls.n	8000eba <__udivmoddi4+0x2aa>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4474      	add	r4, lr
 8000dea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	eba4 040a 	sub.w	r4, r4, sl
 8000df6:	454c      	cmp	r4, r9
 8000df8:	46c2      	mov	sl, r8
 8000dfa:	464b      	mov	r3, r9
 8000dfc:	d354      	bcc.n	8000ea8 <__udivmoddi4+0x298>
 8000dfe:	d051      	beq.n	8000ea4 <__udivmoddi4+0x294>
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d069      	beq.n	8000ed8 <__udivmoddi4+0x2c8>
 8000e04:	ebb1 050a 	subs.w	r5, r1, sl
 8000e08:	eb64 0403 	sbc.w	r4, r4, r3
 8000e0c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e10:	40fd      	lsrs	r5, r7
 8000e12:	40fc      	lsrs	r4, r7
 8000e14:	ea4c 0505 	orr.w	r5, ip, r5
 8000e18:	e9c6 5400 	strd	r5, r4, [r6]
 8000e1c:	2700      	movs	r7, #0
 8000e1e:	e747      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e20:	f1c2 0320 	rsb	r3, r2, #32
 8000e24:	fa20 f703 	lsr.w	r7, r0, r3
 8000e28:	4095      	lsls	r5, r2
 8000e2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2e:	fa21 f303 	lsr.w	r3, r1, r3
 8000e32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e36:	4338      	orrs	r0, r7
 8000e38:	0c01      	lsrs	r1, r0, #16
 8000e3a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e3e:	fa1f f885 	uxth.w	r8, r5
 8000e42:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4a:	fb07 f308 	mul.w	r3, r7, r8
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x256>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e5c:	d22f      	bcs.n	8000ebe <__udivmoddi4+0x2ae>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d92d      	bls.n	8000ebe <__udivmoddi4+0x2ae>
 8000e62:	3f02      	subs	r7, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1acb      	subs	r3, r1, r3
 8000e68:	b281      	uxth	r1, r0
 8000e6a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e76:	fb00 f308 	mul.w	r3, r0, r8
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x27e>
 8000e7e:	1869      	adds	r1, r5, r1
 8000e80:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e84:	d217      	bcs.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d915      	bls.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	4429      	add	r1, r5
 8000e8e:	1ac9      	subs	r1, r1, r3
 8000e90:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e94:	e73b      	b.n	8000d0e <__udivmoddi4+0xfe>
 8000e96:	4637      	mov	r7, r6
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e709      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e9c:	4607      	mov	r7, r0
 8000e9e:	e6e7      	b.n	8000c70 <__udivmoddi4+0x60>
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	e6fb      	b.n	8000c9c <__udivmoddi4+0x8c>
 8000ea4:	4541      	cmp	r1, r8
 8000ea6:	d2ab      	bcs.n	8000e00 <__udivmoddi4+0x1f0>
 8000ea8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eac:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb0:	3801      	subs	r0, #1
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	e7a4      	b.n	8000e00 <__udivmoddi4+0x1f0>
 8000eb6:	4660      	mov	r0, ip
 8000eb8:	e7e9      	b.n	8000e8e <__udivmoddi4+0x27e>
 8000eba:	4618      	mov	r0, r3
 8000ebc:	e795      	b.n	8000dea <__udivmoddi4+0x1da>
 8000ebe:	4667      	mov	r7, ip
 8000ec0:	e7d1      	b.n	8000e66 <__udivmoddi4+0x256>
 8000ec2:	4681      	mov	r9, r0
 8000ec4:	e77c      	b.n	8000dc0 <__udivmoddi4+0x1b0>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	442c      	add	r4, r5
 8000eca:	e747      	b.n	8000d5c <__udivmoddi4+0x14c>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	442b      	add	r3, r5
 8000ed2:	e72f      	b.n	8000d34 <__udivmoddi4+0x124>
 8000ed4:	4638      	mov	r0, r7
 8000ed6:	e708      	b.n	8000cea <__udivmoddi4+0xda>
 8000ed8:	4637      	mov	r7, r6
 8000eda:	e6e9      	b.n	8000cb0 <__udivmoddi4+0xa0>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <Synchronize>:
const uint8_t SUB_ST_COMMND= 0x01;
const uint8_t SUB_SP_COMMND= 0x02;


int Synchronize(uint8_t *txBuff, size_t txLength, uint8_t *rxBuff, size_t rxLength)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
 8000eec:	603b      	str	r3, [r7, #0]
  int size=0; //受信したbyte数
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_11,1);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ef8:	4818      	ldr	r0, [pc, #96]	; (8000f5c <Synchronize+0x7c>)
 8000efa:	f003 ff39 	bl	8004d70 <HAL_GPIO_WritePin>
  HAL_UART_Transmit(&huart5,(uint8_t*)txBuff, txLength,20);
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	2314      	movs	r3, #20
 8000f04:	68f9      	ldr	r1, [r7, #12]
 8000f06:	4816      	ldr	r0, [pc, #88]	; (8000f60 <Synchronize+0x80>)
 8000f08:	f005 fb97 	bl	800663a <HAL_UART_Transmit>
  while(HAL_UART_GetState(&huart5)==HAL_UART_STATE_BUSY_TX){}
 8000f0c:	bf00      	nop
 8000f0e:	4814      	ldr	r0, [pc, #80]	; (8000f60 <Synchronize+0x80>)
 8000f10:	f005 fd66 	bl	80069e0 <HAL_UART_GetState>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b21      	cmp	r3, #33	; 0x21
 8000f18:	d0f9      	beq.n	8000f0e <Synchronize+0x2e>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_11,0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f20:	480e      	ldr	r0, [pc, #56]	; (8000f5c <Synchronize+0x7c>)
 8000f22:	f003 ff25 	bl	8004d70 <HAL_GPIO_WritePin>
  size= HAL_UART_Receive(&huart5,(uint8_t*)rxBuff, rxLength,20);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	2314      	movs	r3, #20
 8000f2c:	6879      	ldr	r1, [r7, #4]
 8000f2e:	480c      	ldr	r0, [pc, #48]	; (8000f60 <Synchronize+0x80>)
 8000f30:	f005 fc1c 	bl	800676c <HAL_UART_Receive>
 8000f34:	4603      	mov	r3, r0
 8000f36:	617b      	str	r3, [r7, #20]
  while(HAL_UART_GetState(&huart5)==HAL_UART_STATE_BUSY_RX){}
 8000f38:	bf00      	nop
 8000f3a:	4809      	ldr	r0, [pc, #36]	; (8000f60 <Synchronize+0x80>)
 8000f3c:	f005 fd50 	bl	80069e0 <HAL_UART_GetState>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b22      	cmp	r3, #34	; 0x22
 8000f44:	d0f9      	beq.n	8000f3a <Synchronize+0x5a>
  if (size != HAL_OK) //指定した受信数かどうか確認
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <Synchronize+0x70>
  {
    return 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	e000      	b.n	8000f52 <Synchronize+0x72>
  }
  return 1;
 8000f50:	2301      	movs	r3, #1
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40020800 	.word	0x40020800
 8000f60:	200006a8 	.word	0x200006a8

08000f64 <ics_set_pos>:

int ics_set_pos(uint8_t id,unsigned short pos)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	460a      	mov	r2, r1
 8000f6e:	71fb      	strb	r3, [r7, #7]
 8000f70:	4613      	mov	r3, r2
 8000f72:	80bb      	strh	r3, [r7, #4]
  uint8_t tx_data[3];
  uint8_t rx_data[3];
  int flag;
  int rAngle;   //受信した角度データ
  /// 送信コマンドを作成
  tx_data[0] = ICS_POS_CMD + id;
 8000f74:	2280      	movs	r2, #128	; 0x80
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	4413      	add	r3, r2
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	733b      	strb	r3, [r7, #12]
  tx_data[1] = (uint8_t)((pos & 0x3F80) >> 7);
 8000f7e:	88bb      	ldrh	r3, [r7, #4]
 8000f80:	11db      	asrs	r3, r3, #7
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	737b      	strb	r3, [r7, #13]
  tx_data[2] = (uint8_t)(pos & 0x007F);
 8000f8c:	88bb      	ldrh	r3, [r7, #4]
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	73bb      	strb	r3, [r7, #14]

  //送受信を行う
  flag = Synchronize(tx_data,3,rx_data,3);
 8000f98:	f107 0208 	add.w	r2, r7, #8
 8000f9c:	f107 000c 	add.w	r0, r7, #12
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	2103      	movs	r1, #3
 8000fa4:	f7ff ff9c 	bl	8000ee0 <Synchronize>
 8000fa8:	6178      	str	r0, [r7, #20]

  if(flag == 0) //失敗した場合は-1を返す
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d102      	bne.n	8000fb6 <ics_set_pos+0x52>
  {
    return -1;
 8000fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb4:	e009      	b.n	8000fca <ics_set_pos+0x66>
  }

  rAngle = ((rx_data[1] << 7) & 0x3F80) + (rx_data[2] & 0x007F);
 8000fb6:	7a7b      	ldrb	r3, [r7, #9]
 8000fb8:	01db      	lsls	r3, r3, #7
 8000fba:	f403 527e 	and.w	r2, r3, #16256	; 0x3f80
 8000fbe:	7abb      	ldrb	r3, [r7, #10]
 8000fc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]

  return rAngle;
 8000fc8:	693b      	ldr	r3, [r7, #16]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <MX_CAN1_Init+0x64>)
 8000fda:	4a18      	ldr	r2, [pc, #96]	; (800103c <MX_CAN1_Init+0x68>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 8000fde:	4b16      	ldr	r3, [pc, #88]	; (8001038 <MX_CAN1_Init+0x64>)
 8000fe0:	2207      	movs	r2, #7
 8000fe2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <MX_CAN1_Init+0x64>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <MX_CAN1_Init+0x64>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_CAN1_Init+0x64>)
 8000ff2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ff6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <MX_CAN1_Init+0x64>)
 8000ffa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ffe:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001000:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <MX_CAN1_Init+0x64>)
 8001002:	2200      	movs	r2, #0
 8001004:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_CAN1_Init+0x64>)
 8001008:	2200      	movs	r2, #0
 800100a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <MX_CAN1_Init+0x64>)
 800100e:	2200      	movs	r2, #0
 8001010:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_CAN1_Init+0x64>)
 8001014:	2200      	movs	r2, #0
 8001016:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001018:	4b07      	ldr	r3, [pc, #28]	; (8001038 <MX_CAN1_Init+0x64>)
 800101a:	2200      	movs	r2, #0
 800101c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_CAN1_Init+0x64>)
 8001020:	2200      	movs	r2, #0
 8001022:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001024:	4804      	ldr	r0, [pc, #16]	; (8001038 <MX_CAN1_Init+0x64>)
 8001026:	f002 fa1d 	bl	8003464 <HAL_CAN_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001030:	f001 f8d4 	bl	80021dc <Error_Handler>
  }

}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000494 	.word	0x20000494
 800103c:	40006400 	.word	0x40006400

08001040 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <MX_CAN2_Init+0x64>)
 8001046:	4a18      	ldr	r2, [pc, #96]	; (80010a8 <MX_CAN2_Init+0x68>)
 8001048:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 7;
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <MX_CAN2_Init+0x64>)
 800104c:	2207      	movs	r2, #7
 800104e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_CAN2_Init+0x64>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <MX_CAN2_Init+0x64>)
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_CAN2_Init+0x64>)
 800105e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001062:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_CAN2_Init+0x64>)
 8001066:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800106a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800106c:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <MX_CAN2_Init+0x64>)
 800106e:	2200      	movs	r2, #0
 8001070:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_CAN2_Init+0x64>)
 8001074:	2200      	movs	r2, #0
 8001076:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <MX_CAN2_Init+0x64>)
 800107a:	2200      	movs	r2, #0
 800107c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_CAN2_Init+0x64>)
 8001080:	2200      	movs	r2, #0
 8001082:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <MX_CAN2_Init+0x64>)
 8001086:	2200      	movs	r2, #0
 8001088:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <MX_CAN2_Init+0x64>)
 800108c:	2200      	movs	r2, #0
 800108e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001090:	4804      	ldr	r0, [pc, #16]	; (80010a4 <MX_CAN2_Init+0x64>)
 8001092:	f002 f9e7 	bl	8003464 <HAL_CAN_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 800109c:	f001 f89e 	bl	80021dc <Error_Handler>
  }

}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	2000046c 	.word	0x2000046c
 80010a8:	40006800 	.word	0x40006800

080010ac <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08c      	sub	sp, #48	; 0x30
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a53      	ldr	r2, [pc, #332]	; (8001218 <HAL_CAN_MspInit+0x16c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d146      	bne.n	800115c <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80010ce:	4b53      	ldr	r3, [pc, #332]	; (800121c <HAL_CAN_MspInit+0x170>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	3301      	adds	r3, #1
 80010d4:	4a51      	ldr	r2, [pc, #324]	; (800121c <HAL_CAN_MspInit+0x170>)
 80010d6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80010d8:	4b50      	ldr	r3, [pc, #320]	; (800121c <HAL_CAN_MspInit+0x170>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d10d      	bne.n	80010fc <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80010e0:	2300      	movs	r3, #0
 80010e2:	61bb      	str	r3, [r7, #24]
 80010e4:	4b4e      	ldr	r3, [pc, #312]	; (8001220 <HAL_CAN_MspInit+0x174>)
 80010e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e8:	4a4d      	ldr	r2, [pc, #308]	; (8001220 <HAL_CAN_MspInit+0x174>)
 80010ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010ee:	6413      	str	r3, [r2, #64]	; 0x40
 80010f0:	4b4b      	ldr	r3, [pc, #300]	; (8001220 <HAL_CAN_MspInit+0x174>)
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010f8:	61bb      	str	r3, [r7, #24]
 80010fa:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	4b47      	ldr	r3, [pc, #284]	; (8001220 <HAL_CAN_MspInit+0x174>)
 8001102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001104:	4a46      	ldr	r2, [pc, #280]	; (8001220 <HAL_CAN_MspInit+0x174>)
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	6313      	str	r3, [r2, #48]	; 0x30
 800110c:	4b44      	ldr	r3, [pc, #272]	; (8001220 <HAL_CAN_MspInit+0x174>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001118:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800111c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001126:	2303      	movs	r3, #3
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800112a:	2309      	movs	r3, #9
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	4619      	mov	r1, r3
 8001134:	483b      	ldr	r0, [pc, #236]	; (8001224 <HAL_CAN_MspInit+0x178>)
 8001136:	f003 fc71 	bl	8004a1c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2101      	movs	r1, #1
 800113e:	2014      	movs	r0, #20
 8001140:	f003 f8c7 	bl	80042d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001144:	2014      	movs	r0, #20
 8001146:	f003 f8e0 	bl	800430a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 2, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2102      	movs	r1, #2
 800114e:	2015      	movs	r0, #21
 8001150:	f003 f8bf 	bl	80042d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001154:	2015      	movs	r0, #21
 8001156:	f003 f8d8 	bl	800430a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800115a:	e058      	b.n	800120e <HAL_CAN_MspInit+0x162>
  else if(canHandle->Instance==CAN2)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a31      	ldr	r2, [pc, #196]	; (8001228 <HAL_CAN_MspInit+0x17c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d153      	bne.n	800120e <HAL_CAN_MspInit+0x162>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <HAL_CAN_MspInit+0x174>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	4a2c      	ldr	r2, [pc, #176]	; (8001220 <HAL_CAN_MspInit+0x174>)
 8001170:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001174:	6413      	str	r3, [r2, #64]	; 0x40
 8001176:	4b2a      	ldr	r3, [pc, #168]	; (8001220 <HAL_CAN_MspInit+0x174>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001182:	4b26      	ldr	r3, [pc, #152]	; (800121c <HAL_CAN_MspInit+0x170>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	3301      	adds	r3, #1
 8001188:	4a24      	ldr	r2, [pc, #144]	; (800121c <HAL_CAN_MspInit+0x170>)
 800118a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800118c:	4b23      	ldr	r3, [pc, #140]	; (800121c <HAL_CAN_MspInit+0x170>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d10d      	bne.n	80011b0 <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	4b21      	ldr	r3, [pc, #132]	; (8001220 <HAL_CAN_MspInit+0x174>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	4a20      	ldr	r2, [pc, #128]	; (8001220 <HAL_CAN_MspInit+0x174>)
 800119e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011a2:	6413      	str	r3, [r2, #64]	; 0x40
 80011a4:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <HAL_CAN_MspInit+0x174>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b0:	2300      	movs	r3, #0
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <HAL_CAN_MspInit+0x174>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b8:	4a19      	ldr	r2, [pc, #100]	; (8001220 <HAL_CAN_MspInit+0x174>)
 80011ba:	f043 0302 	orr.w	r3, r3, #2
 80011be:	6313      	str	r3, [r2, #48]	; 0x30
 80011c0:	4b17      	ldr	r3, [pc, #92]	; (8001220 <HAL_CAN_MspInit+0x174>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80011cc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011da:	2303      	movs	r3, #3
 80011dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80011de:	2309      	movs	r3, #9
 80011e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	4619      	mov	r1, r3
 80011e8:	4810      	ldr	r0, [pc, #64]	; (800122c <HAL_CAN_MspInit+0x180>)
 80011ea:	f003 fc17 	bl	8004a1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 3, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2103      	movs	r1, #3
 80011f2:	2040      	movs	r0, #64	; 0x40
 80011f4:	f003 f86d 	bl	80042d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80011f8:	2040      	movs	r0, #64	; 0x40
 80011fa:	f003 f886 	bl	800430a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 4, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2104      	movs	r1, #4
 8001202:	2041      	movs	r0, #65	; 0x41
 8001204:	f003 f865 	bl	80042d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001208:	2041      	movs	r0, #65	; 0x41
 800120a:	f003 f87e 	bl	800430a <HAL_NVIC_EnableIRQ>
}
 800120e:	bf00      	nop
 8001210:	3730      	adds	r7, #48	; 0x30
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40006400 	.word	0x40006400
 800121c:	200001f8 	.word	0x200001f8
 8001220:	40023800 	.word	0x40023800
 8001224:	40020000 	.word	0x40020000
 8001228:	40006800 	.word	0x40006800
 800122c:	40020400 	.word	0x40020400

08001230 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <MX_DMA_Init+0x3c>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a0b      	ldr	r2, [pc, #44]	; (800126c <MX_DMA_Init+0x3c>)
 8001240:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_DMA_Init+0x3c>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2105      	movs	r1, #5
 8001256:	200c      	movs	r0, #12
 8001258:	f003 f83b 	bl	80042d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800125c:	200c      	movs	r0, #12
 800125e:	f003 f854 	bl	800430a <HAL_NVIC_EnableIRQ>

}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800

08001270 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	; 0x28
 8001274:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	4b57      	ldr	r3, [pc, #348]	; (80013e8 <MX_GPIO_Init+0x178>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a56      	ldr	r2, [pc, #344]	; (80013e8 <MX_GPIO_Init+0x178>)
 8001290:	f043 0304 	orr.w	r3, r3, #4
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b54      	ldr	r3, [pc, #336]	; (80013e8 <MX_GPIO_Init+0x178>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	4b50      	ldr	r3, [pc, #320]	; (80013e8 <MX_GPIO_Init+0x178>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a4f      	ldr	r2, [pc, #316]	; (80013e8 <MX_GPIO_Init+0x178>)
 80012ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b4d      	ldr	r3, [pc, #308]	; (80013e8 <MX_GPIO_Init+0x178>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	4b49      	ldr	r3, [pc, #292]	; (80013e8 <MX_GPIO_Init+0x178>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a48      	ldr	r2, [pc, #288]	; (80013e8 <MX_GPIO_Init+0x178>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b46      	ldr	r3, [pc, #280]	; (80013e8 <MX_GPIO_Init+0x178>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	4b42      	ldr	r3, [pc, #264]	; (80013e8 <MX_GPIO_Init+0x178>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a41      	ldr	r2, [pc, #260]	; (80013e8 <MX_GPIO_Init+0x178>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b3f      	ldr	r3, [pc, #252]	; (80013e8 <MX_GPIO_Init+0x178>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	603b      	str	r3, [r7, #0]
 80012fa:	4b3b      	ldr	r3, [pc, #236]	; (80013e8 <MX_GPIO_Init+0x178>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a3a      	ldr	r2, [pc, #232]	; (80013e8 <MX_GPIO_Init+0x178>)
 8001300:	f043 0308 	orr.w	r3, r3, #8
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b38      	ldr	r3, [pc, #224]	; (80013e8 <MX_GPIO_Init+0x178>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	f248 0120 	movw	r1, #32800	; 0x8020
 8001318:	4834      	ldr	r0, [pc, #208]	; (80013ec <MX_GPIO_Init+0x17c>)
 800131a:	f003 fd29 	bl	8004d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001324:	4832      	ldr	r0, [pc, #200]	; (80013f0 <MX_GPIO_Init+0x180>)
 8001326:	f003 fd23 	bl	8004d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001330:	4830      	ldr	r0, [pc, #192]	; (80013f4 <MX_GPIO_Init+0x184>)
 8001332:	f003 fd1d 	bl	8004d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0 
                           PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8001336:	f24e 0303 	movw	r3, #57347	; 0xe003
 800133a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133c:	2300      	movs	r3, #0
 800133e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	4619      	mov	r1, r3
 800134a:	482a      	ldr	r0, [pc, #168]	; (80013f4 <MX_GPIO_Init+0x184>)
 800134c:	f003 fb66 	bl	8004a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 8001350:	f248 0320 	movw	r3, #32800	; 0x8020
 8001354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	2301      	movs	r3, #1
 8001358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	4820      	ldr	r0, [pc, #128]	; (80013ec <MX_GPIO_Init+0x17c>)
 800136a:	f003 fb57 	bl	8004a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800136e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001374:	2301      	movs	r3, #1
 8001376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4619      	mov	r1, r3
 8001386:	481a      	ldr	r0, [pc, #104]	; (80013f0 <MX_GPIO_Init+0x180>)
 8001388:	f003 fb48 	bl	8004a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800138c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001392:	2300      	movs	r3, #0
 8001394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	4812      	ldr	r0, [pc, #72]	; (80013ec <MX_GPIO_Init+0x17c>)
 80013a2:	f003 fb3b 	bl	8004a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013a6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	480d      	ldr	r0, [pc, #52]	; (80013f4 <MX_GPIO_Init+0x184>)
 80013c0:	f003 fb2c 	bl	8004a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 80013c4:	f44f 734c 	mov.w	r3, #816	; 0x330
 80013c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	4619      	mov	r1, r3
 80013d8:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_GPIO_Init+0x180>)
 80013da:	f003 fb1f 	bl	8004a1c <HAL_GPIO_Init>

}
 80013de:	bf00      	nop
 80013e0:	3728      	adds	r7, #40	; 0x28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020000 	.word	0x40020000
 80013f0:	40020400 	.word	0x40020400
 80013f4:	40020800 	.word	0x40020800

080013f8 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
HAL_UART_Transmit(&huart1, &ch, 1, 1);
 8001402:	1df9      	adds	r1, r7, #7
 8001404:	2301      	movs	r3, #1
 8001406:	2201      	movs	r2, #1
 8001408:	4803      	ldr	r0, [pc, #12]	; (8001418 <__io_putchar+0x20>)
 800140a:	f005 f916 	bl	800663a <HAL_UART_Transmit>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200006e8 	.word	0x200006e8

0800141c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800141c:	b598      	push	{r3, r4, r7, lr}
 800141e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001420:	f001 ff8c 	bl	800333c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001424:	f000 f928 	bl	8001678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001428:	f7ff ff22 	bl	8001270 <MX_GPIO_Init>
  MX_DMA_Init();
 800142c:	f7ff ff00 	bl	8001230 <MX_DMA_Init>
  MX_CAN1_Init();
 8001430:	f7ff fdd0 	bl	8000fd4 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001434:	f7ff fe04 	bl	8001040 <MX_CAN2_Init>
  MX_TIM1_Init();
 8001438:	f001 f9c4 	bl	80027c4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800143c:	f001 fa18 	bl	8002870 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001440:	f001 fa68 	bl	8002914 <MX_TIM3_Init>
  MX_TIM7_Init();
 8001444:	f001 fad4 	bl	80029f0 <MX_TIM7_Init>
  MX_TIM8_Init();
 8001448:	f001 fb04 	bl	8002a54 <MX_TIM8_Init>
  MX_UART5_Init();
 800144c:	f001 fce4 	bl	8002e18 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8001450:	f001 fd0e 	bl	8002e70 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001454:	f001 fd36 	bl	8002ec4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001458:	f001 fd5e 	bl	8002f18 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800145c:	f001 fd86 	bl	8002f6c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  setbuf(stdout, NULL);
 8001460:	4b71      	ldr	r3, [pc, #452]	; (8001628 <main+0x20c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f006 fb3d 	bl	8007ae8 <setbuf>
  sConfigOC.Pulse = 1500;
 800146e:	4b6f      	ldr	r3, [pc, #444]	; (800162c <main+0x210>)
 8001470:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001474:	605a      	str	r2, [r3, #4]
  HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3);
 8001476:	2208      	movs	r2, #8
 8001478:	496c      	ldr	r1, [pc, #432]	; (800162c <main+0x210>)
 800147a:	486d      	ldr	r0, [pc, #436]	; (8001630 <main+0x214>)
 800147c:	f004 fc4a 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001480:	2108      	movs	r1, #8
 8001482:	486b      	ldr	r0, [pc, #428]	; (8001630 <main+0x214>)
 8001484:	f004 fa36 	bl	80058f4 <HAL_TIM_PWM_Start>
  sConfigOC.Pulse = 1500;
 8001488:	4b68      	ldr	r3, [pc, #416]	; (800162c <main+0x210>)
 800148a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800148e:	605a      	str	r2, [r3, #4]
  HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4);
 8001490:	220c      	movs	r2, #12
 8001492:	4966      	ldr	r1, [pc, #408]	; (800162c <main+0x210>)
 8001494:	4866      	ldr	r0, [pc, #408]	; (8001630 <main+0x214>)
 8001496:	f004 fc3d 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 800149a:	210c      	movs	r1, #12
 800149c:	4864      	ldr	r0, [pc, #400]	; (8001630 <main+0x214>)
 800149e:	f004 fa29 	bl	80058f4 <HAL_TIM_PWM_Start>
  sConfigOC.Pulse = 1500;
 80014a2:	4b62      	ldr	r3, [pc, #392]	; (800162c <main+0x210>)
 80014a4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80014a8:	605a      	str	r2, [r3, #4]
  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 80014aa:	2200      	movs	r2, #0
 80014ac:	495f      	ldr	r1, [pc, #380]	; (800162c <main+0x210>)
 80014ae:	4861      	ldr	r0, [pc, #388]	; (8001634 <main+0x218>)
 80014b0:	f004 fc30 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80014b4:	2100      	movs	r1, #0
 80014b6:	485f      	ldr	r0, [pc, #380]	; (8001634 <main+0x218>)
 80014b8:	f004 fa1c 	bl	80058f4 <HAL_TIM_PWM_Start>
  sConfigOC.Pulse = 1500;
 80014bc:	4b5b      	ldr	r3, [pc, #364]	; (800162c <main+0x210>)
 80014be:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80014c2:	605a      	str	r2, [r3, #4]
  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 80014c4:	2204      	movs	r2, #4
 80014c6:	4959      	ldr	r1, [pc, #356]	; (800162c <main+0x210>)
 80014c8:	485a      	ldr	r0, [pc, #360]	; (8001634 <main+0x218>)
 80014ca:	f004 fc23 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80014ce:	2104      	movs	r1, #4
 80014d0:	4858      	ldr	r0, [pc, #352]	; (8001634 <main+0x218>)
 80014d2:	f004 fa0f 	bl	80058f4 <HAL_TIM_PWM_Start>
  sConfigOC.Pulse = 1500;
 80014d6:	4b55      	ldr	r3, [pc, #340]	; (800162c <main+0x210>)
 80014d8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80014dc:	605a      	str	r2, [r3, #4]
  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3);
 80014de:	2208      	movs	r2, #8
 80014e0:	4952      	ldr	r1, [pc, #328]	; (800162c <main+0x210>)
 80014e2:	4854      	ldr	r0, [pc, #336]	; (8001634 <main+0x218>)
 80014e4:	f004 fc16 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80014e8:	2108      	movs	r1, #8
 80014ea:	4852      	ldr	r0, [pc, #328]	; (8001634 <main+0x218>)
 80014ec:	f004 fa02 	bl	80058f4 <HAL_TIM_PWM_Start>
  sConfigOC.Pulse = 1500;
 80014f0:	4b4e      	ldr	r3, [pc, #312]	; (800162c <main+0x210>)
 80014f2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80014f6:	605a      	str	r2, [r3, #4]
  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4);
 80014f8:	220c      	movs	r2, #12
 80014fa:	494c      	ldr	r1, [pc, #304]	; (800162c <main+0x210>)
 80014fc:	484d      	ldr	r0, [pc, #308]	; (8001634 <main+0x218>)
 80014fe:	f004 fc09 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001502:	210c      	movs	r1, #12
 8001504:	484b      	ldr	r0, [pc, #300]	; (8001634 <main+0x218>)
 8001506:	f004 f9f5 	bl	80058f4 <HAL_TIM_PWM_Start>
  if(HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK){Error_Handler();}
 800150a:	494b      	ldr	r1, [pc, #300]	; (8001638 <main+0x21c>)
 800150c:	484b      	ldr	r0, [pc, #300]	; (800163c <main+0x220>)
 800150e:	f004 fa2f 	bl	8005970 <HAL_TIM_Encoder_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <main+0x100>
 8001518:	f000 fe60 	bl	80021dc <Error_Handler>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800151c:	213c      	movs	r1, #60	; 0x3c
 800151e:	4847      	ldr	r0, [pc, #284]	; (800163c <main+0x220>)
 8001520:	f004 fab8 	bl	8005a94 <HAL_TIM_Encoder_Start>
  TIM1->CNT=15000;
 8001524:	4b46      	ldr	r3, [pc, #280]	; (8001640 <main+0x224>)
 8001526:	f643 2298 	movw	r2, #15000	; 0x3a98
 800152a:	625a      	str	r2, [r3, #36]	; 0x24
  if(HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK){Error_Handler();}
 800152c:	4942      	ldr	r1, [pc, #264]	; (8001638 <main+0x21c>)
 800152e:	4845      	ldr	r0, [pc, #276]	; (8001644 <main+0x228>)
 8001530:	f004 fa1e 	bl	8005970 <HAL_TIM_Encoder_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <main+0x122>
 800153a:	f000 fe4f 	bl	80021dc <Error_Handler>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800153e:	213c      	movs	r1, #60	; 0x3c
 8001540:	4840      	ldr	r0, [pc, #256]	; (8001644 <main+0x228>)
 8001542:	f004 faa7 	bl	8005a94 <HAL_TIM_Encoder_Start>
  TIM2->CNT=15000;
 8001546:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800154a:	f643 2298 	movw	r2, #15000	; 0x3a98
 800154e:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_CAN_Start(&hcan1);
 8001550:	483d      	ldr	r0, [pc, #244]	; (8001648 <main+0x22c>)
 8001552:	f002 f963 	bl	800381c <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){Error_Handler();}
 8001556:	2102      	movs	r1, #2
 8001558:	483b      	ldr	r0, [pc, #236]	; (8001648 <main+0x22c>)
 800155a:	f002 fb90 	bl	8003c7e <HAL_CAN_ActivateNotification>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <main+0x14c>
 8001564:	f000 fe3a 	bl	80021dc <Error_Handler>
  HAL_CAN_Start(&hcan2);
 8001568:	4838      	ldr	r0, [pc, #224]	; (800164c <main+0x230>)
 800156a:	f002 f957 	bl	800381c <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){Error_Handler();}
 800156e:	2102      	movs	r1, #2
 8001570:	4836      	ldr	r0, [pc, #216]	; (800164c <main+0x230>)
 8001572:	f002 fb84 	bl	8003c7e <HAL_CAN_ActivateNotification>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <main+0x164>
 800157c:	f000 fe2e 	bl	80021dc <Error_Handler>
  initPID();
 8001580:	f000 fd58 	bl	8002034 <initPID>
  initLoadPID();
 8001584:	f000 fdb4 	bl	80020f0 <initLoadPID>
  initCanFilter();
 8001588:	f000 fdde 	bl	8002148 <initCanFilter>
  HAL_UART_Receive_DMA(&huart3,(uint8_t*) Rxbuf_jetson, 7);
 800158c:	2207      	movs	r2, #7
 800158e:	4930      	ldr	r1, [pc, #192]	; (8001650 <main+0x234>)
 8001590:	4830      	ldr	r0, [pc, #192]	; (8001654 <main+0x238>)
 8001592:	f005 f991 	bl	80068b8 <HAL_UART_Receive_DMA>
  initFriction();
 8001596:	f000 fcf5 	bl	8001f84 <initFriction>
  fire=0;
 800159a:	4b2f      	ldr	r3, [pc, #188]	; (8001658 <main+0x23c>)
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim7);
 80015a0:	482e      	ldr	r0, [pc, #184]	; (800165c <main+0x240>)
 80015a2:	f004 f958 	bl	8005856 <HAL_TIM_Base_Start_IT>
  program_No=!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)+!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)*2+
 80015a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015aa:	482d      	ldr	r0, [pc, #180]	; (8001660 <main+0x244>)
 80015ac:	f003 fbc8 	bl	8004d40 <HAL_GPIO_ReadPin>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	bf0c      	ite	eq
 80015b6:	2301      	moveq	r3, #1
 80015b8:	2300      	movne	r3, #0
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	461c      	mov	r4, r3
 80015be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015c2:	4827      	ldr	r0, [pc, #156]	; (8001660 <main+0x244>)
 80015c4:	f003 fbbc 	bl	8004d40 <HAL_GPIO_ReadPin>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <main+0x1b6>
 80015ce:	2302      	movs	r3, #2
 80015d0:	e000      	b.n	80015d4 <main+0x1b8>
 80015d2:	2300      	movs	r3, #0
 80015d4:	4423      	add	r3, r4
 80015d6:	b2dc      	uxtb	r4, r3
 				!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)*4+!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14)*8;
 80015d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015dc:	4821      	ldr	r0, [pc, #132]	; (8001664 <main+0x248>)
 80015de:	f003 fbaf 	bl	8004d40 <HAL_GPIO_ReadPin>
 80015e2:	4603      	mov	r3, r0
  program_No=!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)+!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)*2+
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <main+0x1d0>
 80015e8:	2304      	movs	r3, #4
 80015ea:	e000      	b.n	80015ee <main+0x1d2>
 80015ec:	2300      	movs	r3, #0
 80015ee:	4423      	add	r3, r4
 80015f0:	b2dc      	uxtb	r4, r3
 				!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)*4+!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14)*8;
 80015f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015f6:	481b      	ldr	r0, [pc, #108]	; (8001664 <main+0x248>)
 80015f8:	f003 fba2 	bl	8004d40 <HAL_GPIO_ReadPin>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <main+0x1ea>
 8001602:	2308      	movs	r3, #8
 8001604:	e000      	b.n	8001608 <main+0x1ec>
 8001606:	2300      	movs	r3, #0
 8001608:	4423      	add	r3, r4
 800160a:	b2da      	uxtb	r2, r3
  program_No=!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)+!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)*2+
 800160c:	4b16      	ldr	r3, [pc, #88]	; (8001668 <main+0x24c>)
 800160e:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,start_sw);
 8001610:	4b16      	ldr	r3, [pc, #88]	; (800166c <main+0x250>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800161a:	4815      	ldr	r0, [pc, #84]	; (8001670 <main+0x254>)
 800161c:	f003 fba8 	bl	8004d70 <HAL_GPIO_WritePin>
	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
	  printf("mofumofu\r\n");
 8001620:	4814      	ldr	r0, [pc, #80]	; (8001674 <main+0x258>)
 8001622:	f006 fa59 	bl	8007ad8 <puts>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,start_sw);
 8001626:	e7f3      	b.n	8001610 <main+0x1f4>
 8001628:	2000000c 	.word	0x2000000c
 800162c:	20000398 	.word	0x20000398
 8001630:	200004c8 	.word	0x200004c8
 8001634:	20000508 	.word	0x20000508
 8001638:	2000040c 	.word	0x2000040c
 800163c:	20000548 	.word	0x20000548
 8001640:	40010000 	.word	0x40010000
 8001644:	20000588 	.word	0x20000588
 8001648:	20000494 	.word	0x20000494
 800164c:	2000046c 	.word	0x2000046c
 8001650:	20000404 	.word	0x20000404
 8001654:	20000668 	.word	0x20000668
 8001658:	20000468 	.word	0x20000468
 800165c:	200005c8 	.word	0x200005c8
 8001660:	40020400 	.word	0x40020400
 8001664:	40020800 	.word	0x40020800
 8001668:	200004c6 	.word	0x200004c6
 800166c:	200004c4 	.word	0x200004c4
 8001670:	40020000 	.word	0x40020000
 8001674:	08009758 	.word	0x08009758

08001678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b094      	sub	sp, #80	; 0x50
 800167c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167e:	f107 031c 	add.w	r3, r7, #28
 8001682:	2234      	movs	r2, #52	; 0x34
 8001684:	2100      	movs	r1, #0
 8001686:	4618      	mov	r0, r3
 8001688:	f005 fe78 	bl	800737c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800168c:	f107 0308 	add.w	r3, r7, #8
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800169c:	2300      	movs	r3, #0
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	4b29      	ldr	r3, [pc, #164]	; (8001748 <SystemClock_Config+0xd0>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	4a28      	ldr	r2, [pc, #160]	; (8001748 <SystemClock_Config+0xd0>)
 80016a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016aa:	6413      	str	r3, [r2, #64]	; 0x40
 80016ac:	4b26      	ldr	r3, [pc, #152]	; (8001748 <SystemClock_Config+0xd0>)
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016b8:	2300      	movs	r3, #0
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	4b23      	ldr	r3, [pc, #140]	; (800174c <SystemClock_Config+0xd4>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a22      	ldr	r2, [pc, #136]	; (800174c <SystemClock_Config+0xd4>)
 80016c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	4b20      	ldr	r3, [pc, #128]	; (800174c <SystemClock_Config+0xd4>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016d0:	603b      	str	r3, [r7, #0]
 80016d2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016d4:	2301      	movs	r3, #1
 80016d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016de:	2302      	movs	r3, #2
 80016e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016e8:	2304      	movs	r3, #4
 80016ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016ec:	23a8      	movs	r3, #168	; 0xa8
 80016ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016f0:	2302      	movs	r3, #2
 80016f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80016f4:	2302      	movs	r3, #2
 80016f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016f8:	2302      	movs	r3, #2
 80016fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016fc:	f107 031c 	add.w	r3, r7, #28
 8001700:	4618      	mov	r0, r3
 8001702:	f003 fe23 	bl	800534c <HAL_RCC_OscConfig>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800170c:	f000 fd66 	bl	80021dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001710:	230f      	movs	r3, #15
 8001712:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001714:	2302      	movs	r3, #2
 8001716:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001718:	2300      	movs	r3, #0
 800171a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800171c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001720:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001726:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001728:	f107 0308 	add.w	r3, r7, #8
 800172c:	2105      	movs	r1, #5
 800172e:	4618      	mov	r0, r3
 8001730:	f003 fb52 	bl	8004dd8 <HAL_RCC_ClockConfig>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800173a:	f000 fd4f 	bl	80021dc <Error_Handler>
  }
}
 800173e:	bf00      	nop
 8001740:	3750      	adds	r7, #80	; 0x50
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800
 800174c:	40007000 	.word	0x40007000

08001750 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim7.Instance) {
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d145      	bne.n	80017f0 <HAL_TIM_PeriodElapsedCallback+0xa0>
		//1kHz
		if(cnt_tim_task>1){
 8001764:	4b25      	ldr	r3, [pc, #148]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d904      	bls.n	8001776 <HAL_TIM_PeriodElapsedCallback+0x26>
		//500Hz
		timerTask();
 800176c:	f000 f9b6 	bl	8001adc <timerTask>
		cnt_tim_task=0;
 8001770:	4b22      	ldr	r3, [pc, #136]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
		}
		cnt_tim_task++;
 8001776:	4b21      	ldr	r3, [pc, #132]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	3301      	adds	r3, #1
 800177c:	b2da      	uxtb	r2, r3
 800177e:	4b1f      	ldr	r3, [pc, #124]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001780:	701a      	strb	r2, [r3, #0]
		if(cnt_tim>100){
 8001782:	4b1f      	ldr	r3, [pc, #124]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b64      	cmp	r3, #100	; 0x64
 8001788:	d92c      	bls.n	80017e4 <HAL_TIM_PeriodElapsedCallback+0x94>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800178a:	2120      	movs	r1, #32
 800178c:	481d      	ldr	r0, [pc, #116]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800178e:	f003 fb08 	bl	8004da2 <HAL_GPIO_TogglePin>
			cnt_tim=0;
 8001792:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
			if(temp_data_Jetson!=data_Jetson[5]){
 8001798:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800179a:	795a      	ldrb	r2, [r3, #5]
 800179c:	4b1b      	ldr	r3, [pc, #108]	; (800180c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d006      	beq.n	80017b2 <HAL_TIM_PeriodElapsedCallback+0x62>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,1);
 80017a4:	2201      	movs	r2, #1
 80017a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017aa:	4819      	ldr	r0, [pc, #100]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80017ac:	f003 fae0 	bl	8004d70 <HAL_GPIO_WritePin>
 80017b0:	e014      	b.n	80017dc <HAL_TIM_PeriodElapsedCallback+0x8c>
			}
			else{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017b8:	4815      	ldr	r0, [pc, #84]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80017ba:	f003 fad9 	bl	8004d70 <HAL_GPIO_WritePin>
				data_Jetson[0]=0;
 80017be:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	701a      	strb	r2, [r3, #0]
				data_Jetson[1]=0;
 80017c4:	4b10      	ldr	r3, [pc, #64]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	705a      	strb	r2, [r3, #1]
				data_Jetson[2]=0;
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	709a      	strb	r2, [r3, #2]
				data_Jetson[3]=0;
 80017d0:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	70da      	strb	r2, [r3, #3]
				data_Jetson[4]=0;
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80017d8:	2200      	movs	r2, #0
 80017da:	711a      	strb	r2, [r3, #4]
			}
			temp_data_Jetson=data_Jetson[5];
 80017dc:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80017de:	795a      	ldrb	r2, [r3, #5]
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80017e2:	701a      	strb	r2, [r3, #0]
		}
		cnt_tim++;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	3301      	adds	r3, #1
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80017ee:	701a      	strb	r2, [r3, #0]
	}
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	200005c8 	.word	0x200005c8
 80017fc:	200004bd 	.word	0x200004bd
 8001800:	200004c2 	.word	0x200004c2
 8001804:	40020000 	.word	0x40020000
 8001808:	200003f0 	.word	0x200003f0
 800180c:	2000024c 	.word	0x2000024c
 8001810:	40020400 	.word	0x40020400
 8001814:	00000000 	.word	0x00000000

08001818 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001818:	b590      	push	{r4, r7, lr}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	/* Get RX message */
	if (hcan->Instance == hcan2.Instance) {// can2 bus receive interrupt
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b7e      	ldr	r3, [pc, #504]	; (8001a20 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d17f      	bne.n	800192c <HAL_CAN_RxFifo0MsgPendingCallback+0x114>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, canRxData);
 800182c:	4b7d      	ldr	r3, [pc, #500]	; (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 800182e:	4a7e      	ldr	r2, [pc, #504]	; (8001a28 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8001830:	2100      	movs	r1, #0
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f002 f911 	bl	8003a5a <HAL_CAN_GetRxMessage>
		//check ESC identifier
		int id = canRxHeader.StdId - 513;
 8001838:	4b7b      	ldr	r3, [pc, #492]	; (8001a28 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8001840:	60bb      	str	r3, [r7, #8]

		wheelFdb[id].angle = canRxData[0] * 256 + canRxData[1];
 8001842:	4b78      	ldr	r3, [pc, #480]	; (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	b29b      	uxth	r3, r3
 8001848:	021b      	lsls	r3, r3, #8
 800184a:	b29a      	uxth	r2, r3
 800184c:	4b75      	ldr	r3, [pc, #468]	; (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 800184e:	785b      	ldrb	r3, [r3, #1]
 8001850:	b29b      	uxth	r3, r3
 8001852:	4413      	add	r3, r2
 8001854:	b29b      	uxth	r3, r3
 8001856:	b218      	sxth	r0, r3
 8001858:	4974      	ldr	r1, [pc, #464]	; (8001a2c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	4613      	mov	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4413      	add	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	440b      	add	r3, r1
 8001866:	4602      	mov	r2, r0
 8001868:	801a      	strh	r2, [r3, #0]
		wheelFdb[id].rpm = canRxData[2] * 256 + canRxData[3];
 800186a:	4b6e      	ldr	r3, [pc, #440]	; (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 800186c:	789b      	ldrb	r3, [r3, #2]
 800186e:	b29b      	uxth	r3, r3
 8001870:	021b      	lsls	r3, r3, #8
 8001872:	b29a      	uxth	r2, r3
 8001874:	4b6b      	ldr	r3, [pc, #428]	; (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8001876:	78db      	ldrb	r3, [r3, #3]
 8001878:	b29b      	uxth	r3, r3
 800187a:	4413      	add	r3, r2
 800187c:	b29b      	uxth	r3, r3
 800187e:	b218      	sxth	r0, r3
 8001880:	496a      	ldr	r1, [pc, #424]	; (8001a2c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	4613      	mov	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	4413      	add	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	3302      	adds	r3, #2
 8001890:	4602      	mov	r2, r0
 8001892:	801a      	strh	r2, [r3, #0]
		wheelFdb[id].torque = canRxData[4] * 256 + canRxData[5];
 8001894:	4b63      	ldr	r3, [pc, #396]	; (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8001896:	791b      	ldrb	r3, [r3, #4]
 8001898:	b29b      	uxth	r3, r3
 800189a:	021b      	lsls	r3, r3, #8
 800189c:	b29a      	uxth	r2, r3
 800189e:	4b61      	ldr	r3, [pc, #388]	; (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80018a0:	795b      	ldrb	r3, [r3, #5]
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	4413      	add	r3, r2
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	b218      	sxth	r0, r3
 80018aa:	4960      	ldr	r1, [pc, #384]	; (8001a2c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	4613      	mov	r3, r2
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	4413      	add	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	3304      	adds	r3, #4
 80018ba:	4602      	mov	r2, r0
 80018bc:	801a      	strh	r2, [r3, #0]
		wheelFdb[id].temp = canRxData[6];
 80018be:	4b59      	ldr	r3, [pc, #356]	; (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80018c0:	799b      	ldrb	r3, [r3, #6]
 80018c2:	b218      	sxth	r0, r3
 80018c4:	4959      	ldr	r1, [pc, #356]	; (8001a2c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	4613      	mov	r3, r2
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	4413      	add	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	3306      	adds	r3, #6
 80018d4:	4602      	mov	r2, r0
 80018d6:	801a      	strh	r2, [r3, #0]
		wheelFdb[id].omg = 6.28318530718 * (wheelFdb[id].rpm) / 1140.0;
 80018d8:	4954      	ldr	r1, [pc, #336]	; (8001a2c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	4613      	mov	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4413      	add	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	3302      	adds	r3, #2
 80018e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe fde5 	bl	80004bc <__aeabi_i2d>
 80018f2:	a347      	add	r3, pc, #284	; (adr r3, 8001a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80018f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f8:	f7fe fe4a 	bl	8000590 <__aeabi_dmul>
 80018fc:	4603      	mov	r3, r0
 80018fe:	460c      	mov	r4, r1
 8001900:	4618      	mov	r0, r3
 8001902:	4621      	mov	r1, r4
 8001904:	a344      	add	r3, pc, #272	; (adr r3, 8001a18 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8001906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190a:	f7fe ff6b 	bl	80007e4 <__aeabi_ddiv>
 800190e:	4603      	mov	r3, r0
 8001910:	460c      	mov	r4, r1
 8001912:	4618      	mov	r0, r3
 8001914:	4621      	mov	r1, r4
 8001916:	f7ff f913 	bl	8000b40 <__aeabi_d2f>
 800191a:	4944      	ldr	r1, [pc, #272]	; (8001a2c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800191c:	68ba      	ldr	r2, [r7, #8]
 800191e:	4613      	mov	r3, r2
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	4413      	add	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	440b      	add	r3, r1
 8001928:	3308      	adds	r3, #8
 800192a:	6018      	str	r0, [r3, #0]
	}
	if (hcan->Instance == hcan1.Instance) {// can1 bus receive interrupt
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4b3f      	ldr	r3, [pc, #252]	; (8001a30 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d167      	bne.n	8001a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, canRxData);
 8001938:	4b3a      	ldr	r3, [pc, #232]	; (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 800193a:	4a3b      	ldr	r2, [pc, #236]	; (8001a28 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800193c:	2100      	movs	r1, #0
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f002 f88b 	bl	8003a5a <HAL_CAN_GetRxMessage>
		motor_fdb *fdb = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
		switch (canRxHeader.StdId) {
 8001948:	4b37      	ldr	r3, [pc, #220]	; (8001a28 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f240 2206 	movw	r2, #518	; 0x206
 8001950:	4293      	cmp	r3, r2
 8001952:	d00a      	beq.n	800196a <HAL_CAN_RxFifo0MsgPendingCallback+0x152>
 8001954:	f240 2207 	movw	r2, #519	; 0x207
 8001958:	4293      	cmp	r3, r2
 800195a:	d009      	beq.n	8001970 <HAL_CAN_RxFifo0MsgPendingCallback+0x158>
 800195c:	f240 2205 	movw	r2, #517	; 0x205
 8001960:	4293      	cmp	r3, r2
 8001962:	d108      	bne.n	8001976 <HAL_CAN_RxFifo0MsgPendingCallback+0x15e>
		case 0x205:
			fdb = &gimbalYawFdb;
 8001964:	4b33      	ldr	r3, [pc, #204]	; (8001a34 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8001966:	60fb      	str	r3, [r7, #12]
			break;
 8001968:	e005      	b.n	8001976 <HAL_CAN_RxFifo0MsgPendingCallback+0x15e>
		case 0x206:
			fdb = &gimbalPitchFdb;
 800196a:	4b33      	ldr	r3, [pc, #204]	; (8001a38 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800196c:	60fb      	str	r3, [r7, #12]
			break;
 800196e:	e002      	b.n	8001976 <HAL_CAN_RxFifo0MsgPendingCallback+0x15e>
		case 0x207:
			fdb = &loadMotorFdb;
 8001970:	4b32      	ldr	r3, [pc, #200]	; (8001a3c <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8001972:	60fb      	str	r3, [r7, #12]
			break;
 8001974:	bf00      	nop
		}
		fdb->angle = canRxData[0] * 256 + canRxData[1];
 8001976:	4b2b      	ldr	r3, [pc, #172]	; (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	b29b      	uxth	r3, r3
 800197c:	021b      	lsls	r3, r3, #8
 800197e:	b29a      	uxth	r2, r3
 8001980:	4b28      	ldr	r3, [pc, #160]	; (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8001982:	785b      	ldrb	r3, [r3, #1]
 8001984:	b29b      	uxth	r3, r3
 8001986:	4413      	add	r3, r2
 8001988:	b29b      	uxth	r3, r3
 800198a:	b21a      	sxth	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	801a      	strh	r2, [r3, #0]
		fdb->rpm = canRxData[2] * 256 + canRxData[3];
 8001990:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8001992:	789b      	ldrb	r3, [r3, #2]
 8001994:	b29b      	uxth	r3, r3
 8001996:	021b      	lsls	r3, r3, #8
 8001998:	b29a      	uxth	r2, r3
 800199a:	4b22      	ldr	r3, [pc, #136]	; (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 800199c:	78db      	ldrb	r3, [r3, #3]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	4413      	add	r3, r2
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	b21a      	sxth	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	805a      	strh	r2, [r3, #2]
		fdb->torque = canRxData[4] * 256 + canRxData[5];
 80019aa:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80019ac:	791b      	ldrb	r3, [r3, #4]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	021b      	lsls	r3, r3, #8
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80019b6:	795b      	ldrb	r3, [r3, #5]
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	4413      	add	r3, r2
 80019bc:	b29b      	uxth	r3, r3
 80019be:	b21a      	sxth	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	809a      	strh	r2, [r3, #4]
		fdb->temp = canRxData[6];
 80019c4:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80019c6:	799b      	ldrb	r3, [r3, #6]
 80019c8:	b21a      	sxth	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	80da      	strh	r2, [r3, #6]
		fdb->omg = 6.28318530718 * (fdb->rpm) / 1140.0;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fd71 	bl	80004bc <__aeabi_i2d>
 80019da:	a30d      	add	r3, pc, #52	; (adr r3, 8001a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80019dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e0:	f7fe fdd6 	bl	8000590 <__aeabi_dmul>
 80019e4:	4603      	mov	r3, r0
 80019e6:	460c      	mov	r4, r1
 80019e8:	4618      	mov	r0, r3
 80019ea:	4621      	mov	r1, r4
 80019ec:	a30a      	add	r3, pc, #40	; (adr r3, 8001a18 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80019ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f2:	f7fe fef7 	bl	80007e4 <__aeabi_ddiv>
 80019f6:	4603      	mov	r3, r0
 80019f8:	460c      	mov	r4, r1
 80019fa:	4618      	mov	r0, r3
 80019fc:	4621      	mov	r1, r4
 80019fe:	f7ff f89f 	bl	8000b40 <__aeabi_d2f>
 8001a02:	4602      	mov	r2, r0
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	609a      	str	r2, [r3, #8]
	}
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd90      	pop	{r4, r7, pc}
 8001a10:	54442eea 	.word	0x54442eea
 8001a14:	401921fb 	.word	0x401921fb
 8001a18:	00000000 	.word	0x00000000
 8001a1c:	4091d000 	.word	0x4091d000
 8001a20:	2000046c 	.word	0x2000046c
 8001a24:	20000380 	.word	0x20000380
 8001a28:	200003b4 	.word	0x200003b4
 8001a2c:	20000214 	.word	0x20000214
 8001a30:	20000494 	.word	0x20000494
 8001a34:	20000208 	.word	0x20000208
 8001a38:	20000430 	.word	0x20000430
 8001a3c:	200003f8 	.word	0x200003f8

08001a40 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	uint8_t j = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	73fb      	strb	r3, [r7, #15]
	while (Rxbuf_jetson[j] != 253 &&  j<sizeof(Rxbuf_jetson)) {
 8001a4c:	e002      	b.n	8001a54 <HAL_UART_RxCpltCallback+0x14>
		j++;
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
 8001a50:	3301      	adds	r3, #1
 8001a52:	73fb      	strb	r3, [r7, #15]
	while (Rxbuf_jetson[j] != 253 &&  j<sizeof(Rxbuf_jetson)) {
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	4a1f      	ldr	r2, [pc, #124]	; (8001ad4 <HAL_UART_RxCpltCallback+0x94>)
 8001a58:	5cd3      	ldrb	r3, [r2, r3]
 8001a5a:	2bfd      	cmp	r3, #253	; 0xfd
 8001a5c:	d002      	beq.n	8001a64 <HAL_UART_RxCpltCallback+0x24>
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	2b06      	cmp	r3, #6
 8001a62:	d9f4      	bls.n	8001a4e <HAL_UART_RxCpltCallback+0xe>
	}
	if(j>=sizeof(Rxbuf_jetson)){
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	2b06      	cmp	r3, #6
 8001a68:	d90d      	bls.n	8001a86 <HAL_UART_RxCpltCallback+0x46>
		for(uint8_t k=0;k<(sizeof(data_Jetson));k++){
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	73bb      	strb	r3, [r7, #14]
 8001a6e:	e006      	b.n	8001a7e <HAL_UART_RxCpltCallback+0x3e>
			data_Jetson[k]=0;
 8001a70:	7bbb      	ldrb	r3, [r7, #14]
 8001a72:	4a19      	ldr	r2, [pc, #100]	; (8001ad8 <HAL_UART_RxCpltCallback+0x98>)
 8001a74:	2100      	movs	r1, #0
 8001a76:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0;k<(sizeof(data_Jetson));k++){
 8001a78:	7bbb      	ldrb	r3, [r7, #14]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	73bb      	strb	r3, [r7, #14]
 8001a7e:	7bbb      	ldrb	r3, [r7, #14]
 8001a80:	2b05      	cmp	r3, #5
 8001a82:	d9f5      	bls.n	8001a70 <HAL_UART_RxCpltCallback+0x30>
			else {
				data_Jetson[k] = Rxbuf_jetson[j + k + 1];
			}
		}
	}
}
 8001a84:	e020      	b.n	8001ac8 <HAL_UART_RxCpltCallback+0x88>
		for (uint8_t k = 0; k < sizeof(data_Jetson); k++) {
 8001a86:	2300      	movs	r3, #0
 8001a88:	737b      	strb	r3, [r7, #13]
 8001a8a:	e01a      	b.n	8001ac2 <HAL_UART_RxCpltCallback+0x82>
			if ((j + k) >= sizeof(data_Jetson)) {
 8001a8c:	7bfa      	ldrb	r2, [r7, #15]
 8001a8e:	7b7b      	ldrb	r3, [r7, #13]
 8001a90:	4413      	add	r3, r2
 8001a92:	2b05      	cmp	r3, #5
 8001a94:	d909      	bls.n	8001aaa <HAL_UART_RxCpltCallback+0x6a>
				data_Jetson[k] = Rxbuf_jetson[k - (sizeof(data_Jetson) - j)];
 8001a96:	7b7a      	ldrb	r2, [r7, #13]
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	1f9a      	subs	r2, r3, #6
 8001a9e:	7b7b      	ldrb	r3, [r7, #13]
 8001aa0:	490c      	ldr	r1, [pc, #48]	; (8001ad4 <HAL_UART_RxCpltCallback+0x94>)
 8001aa2:	5c89      	ldrb	r1, [r1, r2]
 8001aa4:	4a0c      	ldr	r2, [pc, #48]	; (8001ad8 <HAL_UART_RxCpltCallback+0x98>)
 8001aa6:	54d1      	strb	r1, [r2, r3]
 8001aa8:	e008      	b.n	8001abc <HAL_UART_RxCpltCallback+0x7c>
				data_Jetson[k] = Rxbuf_jetson[j + k + 1];
 8001aaa:	7bfa      	ldrb	r2, [r7, #15]
 8001aac:	7b7b      	ldrb	r3, [r7, #13]
 8001aae:	4413      	add	r3, r2
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	7b7b      	ldrb	r3, [r7, #13]
 8001ab4:	4907      	ldr	r1, [pc, #28]	; (8001ad4 <HAL_UART_RxCpltCallback+0x94>)
 8001ab6:	5c89      	ldrb	r1, [r1, r2]
 8001ab8:	4a07      	ldr	r2, [pc, #28]	; (8001ad8 <HAL_UART_RxCpltCallback+0x98>)
 8001aba:	54d1      	strb	r1, [r2, r3]
		for (uint8_t k = 0; k < sizeof(data_Jetson); k++) {
 8001abc:	7b7b      	ldrb	r3, [r7, #13]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	737b      	strb	r3, [r7, #13]
 8001ac2:	7b7b      	ldrb	r3, [r7, #13]
 8001ac4:	2b05      	cmp	r3, #5
 8001ac6:	d9e1      	bls.n	8001a8c <HAL_UART_RxCpltCallback+0x4c>
}
 8001ac8:	bf00      	nop
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	20000404 	.word	0x20000404
 8001ad8:	200003f0 	.word	0x200003f0

08001adc <timerTask>:


void timerTask() { //call 500Hz
 8001adc:	b598      	push	{r3, r4, r7, lr}
 8001ade:	af00      	add	r7, sp, #0
	driveWheelTask();
 8001ae0:	f000 f882 	bl	8001be8 <driveWheelTask>
	Gimbal_Task();
 8001ae4:	f000 f95e 	bl	8001da4 <Gimbal_Task>
	fire_Task();
 8001ae8:	f000 f9ba 	bl	8001e60 <fire_Task>
	limit_sw1=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15);
 8001aec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001af0:	4833      	ldr	r0, [pc, #204]	; (8001bc0 <timerTask+0xe4>)
 8001af2:	f003 f925 	bl	8004d40 <HAL_GPIO_ReadPin>
 8001af6:	4603      	mov	r3, r0
 8001af8:	461a      	mov	r2, r3
 8001afa:	4b32      	ldr	r3, [pc, #200]	; (8001bc4 <timerTask+0xe8>)
 8001afc:	701a      	strb	r2, [r3, #0]
	limit_sw2=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8001afe:	2101      	movs	r1, #1
 8001b00:	482f      	ldr	r0, [pc, #188]	; (8001bc0 <timerTask+0xe4>)
 8001b02:	f003 f91d 	bl	8004d40 <HAL_GPIO_ReadPin>
 8001b06:	4603      	mov	r3, r0
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4b2f      	ldr	r3, [pc, #188]	; (8001bc8 <timerTask+0xec>)
 8001b0c:	701a      	strb	r2, [r3, #0]
	start_sw=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 8001b0e:	2102      	movs	r1, #2
 8001b10:	482b      	ldr	r0, [pc, #172]	; (8001bc0 <timerTask+0xe4>)
 8001b12:	f003 f915 	bl	8004d40 <HAL_GPIO_ReadPin>
 8001b16:	4603      	mov	r3, r0
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b2c      	ldr	r3, [pc, #176]	; (8001bcc <timerTask+0xf0>)
 8001b1c:	701a      	strb	r2, [r3, #0]
	move_fire=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001b1e:	2120      	movs	r1, #32
 8001b20:	482b      	ldr	r0, [pc, #172]	; (8001bd0 <timerTask+0xf4>)
 8001b22:	f003 f90d 	bl	8004d40 <HAL_GPIO_ReadPin>
 8001b26:	4603      	mov	r3, r0
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4b2a      	ldr	r3, [pc, #168]	; (8001bd4 <timerTask+0xf8>)
 8001b2c:	701a      	strb	r2, [r3, #0]
	sw1=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8001b2e:	2110      	movs	r1, #16
 8001b30:	4827      	ldr	r0, [pc, #156]	; (8001bd0 <timerTask+0xf4>)
 8001b32:	f003 f905 	bl	8004d40 <HAL_GPIO_ReadPin>
 8001b36:	4603      	mov	r3, r0
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4b27      	ldr	r3, [pc, #156]	; (8001bd8 <timerTask+0xfc>)
 8001b3c:	701a      	strb	r2, [r3, #0]
	sw2=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8001b3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b42:	4826      	ldr	r0, [pc, #152]	; (8001bdc <timerTask+0x100>)
 8001b44:	f003 f8fc 	bl	8004d40 <HAL_GPIO_ReadPin>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	4b24      	ldr	r3, [pc, #144]	; (8001be0 <timerTask+0x104>)
 8001b4e:	701a      	strb	r2, [r3, #0]
	program_No=!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)+!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)*2+
 8001b50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b54:	481e      	ldr	r0, [pc, #120]	; (8001bd0 <timerTask+0xf4>)
 8001b56:	f003 f8f3 	bl	8004d40 <HAL_GPIO_ReadPin>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	bf0c      	ite	eq
 8001b60:	2301      	moveq	r3, #1
 8001b62:	2300      	movne	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	461c      	mov	r4, r3
 8001b68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b6c:	4818      	ldr	r0, [pc, #96]	; (8001bd0 <timerTask+0xf4>)
 8001b6e:	f003 f8e7 	bl	8004d40 <HAL_GPIO_ReadPin>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <timerTask+0xa0>
 8001b78:	2302      	movs	r3, #2
 8001b7a:	e000      	b.n	8001b7e <timerTask+0xa2>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	4423      	add	r3, r4
 8001b80:	b2dc      	uxtb	r4, r3
	 				!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)*4+!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14)*8;
 8001b82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b86:	480e      	ldr	r0, [pc, #56]	; (8001bc0 <timerTask+0xe4>)
 8001b88:	f003 f8da 	bl	8004d40 <HAL_GPIO_ReadPin>
 8001b8c:	4603      	mov	r3, r0
	program_No=!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)+!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)*2+
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <timerTask+0xba>
 8001b92:	2304      	movs	r3, #4
 8001b94:	e000      	b.n	8001b98 <timerTask+0xbc>
 8001b96:	2300      	movs	r3, #0
 8001b98:	4423      	add	r3, r4
 8001b9a:	b2dc      	uxtb	r4, r3
	 				!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)*4+!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14)*8;
 8001b9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ba0:	4807      	ldr	r0, [pc, #28]	; (8001bc0 <timerTask+0xe4>)
 8001ba2:	f003 f8cd 	bl	8004d40 <HAL_GPIO_ReadPin>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <timerTask+0xd4>
 8001bac:	2308      	movs	r3, #8
 8001bae:	e000      	b.n	8001bb2 <timerTask+0xd6>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	4423      	add	r3, r4
 8001bb4:	b2da      	uxtb	r2, r3
	program_No=!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)+!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)*2+
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <timerTask+0x108>)
 8001bb8:	701a      	strb	r2, [r3, #0]
}
 8001bba:	bf00      	nop
 8001bbc:	bd98      	pop	{r3, r4, r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40020800 	.word	0x40020800
 8001bc4:	200004c1 	.word	0x200004c1
 8001bc8:	200004c0 	.word	0x200004c0
 8001bcc:	200004c4 	.word	0x200004c4
 8001bd0:	40020400 	.word	0x40020400
 8001bd4:	200004bc 	.word	0x200004bc
 8001bd8:	200004c5 	.word	0x200004c5
 8001bdc:	40020000 	.word	0x40020000
 8001be0:	200004c7 	.word	0x200004c7
 8001be4:	200004c6 	.word	0x200004c6

08001be8 <driveWheelTask>:

void driveWheelTask() {
 8001be8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bec:	b086      	sub	sp, #24
 8001bee:	af00      	add	r7, sp, #0
	int16_t u[4];
	if(start_sw==0){
 8001bf0:	4b64      	ldr	r3, [pc, #400]	; (8001d84 <driveWheelTask+0x19c>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d106      	bne.n	8001c06 <driveWheelTask+0x1e>
		mecanum.wheel_rpm[0]=2000.0;
 8001bf8:	4b63      	ldr	r3, [pc, #396]	; (8001d88 <driveWheelTask+0x1a0>)
 8001bfa:	4a64      	ldr	r2, [pc, #400]	; (8001d8c <driveWheelTask+0x1a4>)
 8001bfc:	601a      	str	r2, [r3, #0]
		mecanum.wheel_rpm[1]=2000.0;
 8001bfe:	4b62      	ldr	r3, [pc, #392]	; (8001d88 <driveWheelTask+0x1a0>)
 8001c00:	4a62      	ldr	r2, [pc, #392]	; (8001d8c <driveWheelTask+0x1a4>)
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	e005      	b.n	8001c12 <driveWheelTask+0x2a>
	}
	else{
		mecanum.wheel_rpm[0]=-2000.0;
 8001c06:	4b60      	ldr	r3, [pc, #384]	; (8001d88 <driveWheelTask+0x1a0>)
 8001c08:	4a61      	ldr	r2, [pc, #388]	; (8001d90 <driveWheelTask+0x1a8>)
 8001c0a:	601a      	str	r2, [r3, #0]
		mecanum.wheel_rpm[1]=-2000.0;
 8001c0c:	4b5e      	ldr	r3, [pc, #376]	; (8001d88 <driveWheelTask+0x1a0>)
 8001c0e:	4a60      	ldr	r2, [pc, #384]	; (8001d90 <driveWheelTask+0x1a8>)
 8001c10:	605a      	str	r2, [r3, #4]
	}
	float torque_sum=0.0;
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
	    torque_sum = fabs((float)wheelFdb[0].torque/16384.0*20.0)+fabs((float)wheelFdb[1].torque/16384.0*20.0);
 8001c18:	4b5e      	ldr	r3, [pc, #376]	; (8001d94 <driveWheelTask+0x1ac>)
 8001c1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c1e:	ee07 3a90 	vmov	s15, r3
 8001c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c26:	ee17 0a90 	vmov	r0, s15
 8001c2a:	f7fe fc59 	bl	80004e0 <__aeabi_f2d>
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	4b59      	ldr	r3, [pc, #356]	; (8001d98 <driveWheelTask+0x1b0>)
 8001c34:	f7fe fdd6 	bl	80007e4 <__aeabi_ddiv>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	4619      	mov	r1, r3
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	4b55      	ldr	r3, [pc, #340]	; (8001d9c <driveWheelTask+0x1b4>)
 8001c46:	f7fe fca3 	bl	8000590 <__aeabi_dmul>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4614      	mov	r4, r2
 8001c50:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001c54:	4b4f      	ldr	r3, [pc, #316]	; (8001d94 <driveWheelTask+0x1ac>)
 8001c56:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001c5a:	ee07 3a90 	vmov	s15, r3
 8001c5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c62:	ee17 0a90 	vmov	r0, s15
 8001c66:	f7fe fc3b 	bl	80004e0 <__aeabi_f2d>
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	4b4a      	ldr	r3, [pc, #296]	; (8001d98 <driveWheelTask+0x1b0>)
 8001c70:	f7fe fdb8 	bl	80007e4 <__aeabi_ddiv>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4610      	mov	r0, r2
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	4b46      	ldr	r3, [pc, #280]	; (8001d9c <driveWheelTask+0x1b4>)
 8001c82:	f7fe fc85 	bl	8000590 <__aeabi_dmul>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4690      	mov	r8, r2
 8001c8c:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001c90:	4642      	mov	r2, r8
 8001c92:	464b      	mov	r3, r9
 8001c94:	4620      	mov	r0, r4
 8001c96:	4629      	mov	r1, r5
 8001c98:	f7fe fac4 	bl	8000224 <__adddf3>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	460c      	mov	r4, r1
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	4621      	mov	r1, r4
 8001ca4:	f7fe ff4c 	bl	8000b40 <__aeabi_d2f>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 2; i++) {
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	e05c      	b.n	8001d6c <driveWheelTask+0x184>
		int error = mecanum.wheel_rpm[i] - wheelFdb[i].rpm;
 8001cb2:	4a35      	ldr	r2, [pc, #212]	; (8001d88 <driveWheelTask+0x1a0>)
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	ed93 7a00 	vldr	s14, [r3]
 8001cbe:	4935      	ldr	r1, [pc, #212]	; (8001d94 <driveWheelTask+0x1ac>)
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4413      	add	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	440b      	add	r3, r1
 8001ccc:	3302      	adds	r3, #2
 8001cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd2:	ee07 3a90 	vmov	s15, r3
 8001cd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ce2:	ee17 3a90 	vmov	r3, s15
 8001ce6:	60bb      	str	r3, [r7, #8]
		wheelPID[i].error = error;
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	ee07 3a90 	vmov	s15, r3
 8001cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf2:	4a2b      	ldr	r2, [pc, #172]	; (8001da0 <driveWheelTask+0x1b8>)
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	212c      	movs	r1, #44	; 0x2c
 8001cf8:	fb01 f303 	mul.w	r3, r1, r3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3328      	adds	r3, #40	; 0x28
 8001d00:	edc3 7a00 	vstr	s15, [r3]
		u[i] = (int16_t) pidExecute(&(wheelPID[i]));
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	222c      	movs	r2, #44	; 0x2c
 8001d08:	fb02 f303 	mul.w	r3, r2, r3
 8001d0c:	4a24      	ldr	r2, [pc, #144]	; (8001da0 <driveWheelTask+0x1b8>)
 8001d0e:	4413      	add	r3, r2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 fb5f 	bl	80023d4 <pidExecute>
 8001d16:	eef0 7a40 	vmov.f32	s15, s0
 8001d1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d1e:	ee17 3a90 	vmov	r3, s15
 8001d22:	b21a      	sxth	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	f107 0118 	add.w	r1, r7, #24
 8001d2c:	440b      	add	r3, r1
 8001d2e:	f823 2c18 	strh.w	r2, [r3, #-24]

		if(torque_sum>5.0){
 8001d32:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d36:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001d3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d42:	dd10      	ble.n	8001d66 <driveWheelTask+0x17e>
			for (int i = 0; i < 4; i++) {
 8001d44:	2300      	movs	r3, #0
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	e00a      	b.n	8001d60 <driveWheelTask+0x178>
				u[i] = 0;
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	f107 0218 	add.w	r2, r7, #24
 8001d52:	4413      	add	r3, r2
 8001d54:	2200      	movs	r2, #0
 8001d56:	f823 2c18 	strh.w	r2, [r3, #-24]
			for (int i = 0; i < 4; i++) {
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	ddf1      	ble.n	8001d4a <driveWheelTask+0x162>
	for (int i = 0; i < 2; i++) {
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	dd9f      	ble.n	8001cb2 <driveWheelTask+0xca>
			}
		}
	}
	driveWheel(u);
 8001d72:	463b      	mov	r3, r7
 8001d74:	4618      	mov	r0, r3
 8001d76:	f000 fa39 	bl	80021ec <driveWheel>
}
 8001d7a:	bf00      	nop
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d84:	200004c4 	.word	0x200004c4
 8001d88:	20000388 	.word	0x20000388
 8001d8c:	44fa0000 	.word	0x44fa0000
 8001d90:	c4fa0000 	.word	0xc4fa0000
 8001d94:	20000214 	.word	0x20000214
 8001d98:	40d00000 	.word	0x40d00000
 8001d9c:	40340000 	.word	0x40340000
 8001da0:	200002d0 	.word	0x200002d0

08001da4 <Gimbal_Task>:
void Gimbal_Task(){
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af02      	add	r7, sp, #8
	if(cnt_task_servo>10){
 8001daa:	4b2b      	ldr	r3, [pc, #172]	; (8001e58 <Gimbal_Task+0xb4>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b0a      	cmp	r3, #10
 8001db0:	d948      	bls.n	8001e44 <Gimbal_Task+0xa0>

		if(start_sw==0){
 8001db2:	4b2a      	ldr	r3, [pc, #168]	; (8001e5c <Gimbal_Task+0xb8>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d120      	bne.n	8001dfc <Gimbal_Task+0x58>
			ics_set_pos(1,map(90,180,0,4833,10166));
 8001dba:	f242 73b6 	movw	r3, #10166	; 0x27b6
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	f241 23e1 	movw	r3, #4833	; 0x12e1
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	21b4      	movs	r1, #180	; 0xb4
 8001dc8:	205a      	movs	r0, #90	; 0x5a
 8001dca:	f000 f9eb 	bl	80021a4 <map>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	f7ff f8c5 	bl	8000f64 <ics_set_pos>
			ics_set_pos(2,map(90,180,0,4833,10166));
 8001dda:	f242 73b6 	movw	r3, #10166	; 0x27b6
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	f241 23e1 	movw	r3, #4833	; 0x12e1
 8001de4:	2200      	movs	r2, #0
 8001de6:	21b4      	movs	r1, #180	; 0xb4
 8001de8:	205a      	movs	r0, #90	; 0x5a
 8001dea:	f000 f9db 	bl	80021a4 <map>
 8001dee:	4603      	mov	r3, r0
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	4619      	mov	r1, r3
 8001df4:	2002      	movs	r0, #2
 8001df6:	f7ff f8b5 	bl	8000f64 <ics_set_pos>
 8001dfa:	e01f      	b.n	8001e3c <Gimbal_Task+0x98>
		}
		else{
			ics_set_pos(1,map(120,180,0,4833,10166));
 8001dfc:	f242 73b6 	movw	r3, #10166	; 0x27b6
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	f241 23e1 	movw	r3, #4833	; 0x12e1
 8001e06:	2200      	movs	r2, #0
 8001e08:	21b4      	movs	r1, #180	; 0xb4
 8001e0a:	2078      	movs	r0, #120	; 0x78
 8001e0c:	f000 f9ca 	bl	80021a4 <map>
 8001e10:	4603      	mov	r3, r0
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	4619      	mov	r1, r3
 8001e16:	2001      	movs	r0, #1
 8001e18:	f7ff f8a4 	bl	8000f64 <ics_set_pos>
			ics_set_pos(2,map(120,180,0,4833,10166));
 8001e1c:	f242 73b6 	movw	r3, #10166	; 0x27b6
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	f241 23e1 	movw	r3, #4833	; 0x12e1
 8001e26:	2200      	movs	r2, #0
 8001e28:	21b4      	movs	r1, #180	; 0xb4
 8001e2a:	2078      	movs	r0, #120	; 0x78
 8001e2c:	f000 f9ba 	bl	80021a4 <map>
 8001e30:	4603      	mov	r3, r0
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	4619      	mov	r1, r3
 8001e36:	2002      	movs	r0, #2
 8001e38:	f7ff f894 	bl	8000f64 <ics_set_pos>
		}


		cnt_task_servo=0;
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <Gimbal_Task+0xb4>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	701a      	strb	r2, [r3, #0]
	}
	else{
		cnt_task_servo++;
	}

}
 8001e42:	e005      	b.n	8001e50 <Gimbal_Task+0xac>
		cnt_task_servo++;
 8001e44:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <Gimbal_Task+0xb4>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	4b02      	ldr	r3, [pc, #8]	; (8001e58 <Gimbal_Task+0xb4>)
 8001e4e:	701a      	strb	r2, [r3, #0]
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	200004c3 	.word	0x200004c3
 8001e5c:	200004c4 	.word	0x200004c4

08001e60 <fire_Task>:


void fire_Task(){
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
	int16_t u[4];
	if(fire>1){
 8001e66:	4b3f      	ldr	r3, [pc, #252]	; (8001f64 <fire_Task+0x104>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d902      	bls.n	8001e74 <fire_Task+0x14>
		fire=0;
 8001e6e:	4b3d      	ldr	r3, [pc, #244]	; (8001f64 <fire_Task+0x104>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	701a      	strb	r2, [r3, #0]
	}
	DBUFF[1] = loadPID.error = -900.0f*fire*2 - loadMotorFdb.rpm;
 8001e74:	4b3b      	ldr	r3, [pc, #236]	; (8001f64 <fire_Task+0x104>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	ee07 3a90 	vmov	s15, r3
 8001e7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e80:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001f68 <fire_Task+0x108>
 8001e84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e88:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001e8c:	4b37      	ldr	r3, [pc, #220]	; (8001f6c <fire_Task+0x10c>)
 8001e8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e92:	ee07 3a90 	vmov	s15, r3
 8001e96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e9e:	4b34      	ldr	r3, [pc, #208]	; (8001f70 <fire_Task+0x110>)
 8001ea0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 8001ea4:	4b32      	ldr	r3, [pc, #200]	; (8001f70 <fire_Task+0x110>)
 8001ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea8:	4a32      	ldr	r2, [pc, #200]	; (8001f74 <fire_Task+0x114>)
 8001eaa:	6053      	str	r3, [r2, #4]
	DBUFF[3] = u[2] = pidExecute(&loadPID);
 8001eac:	4830      	ldr	r0, [pc, #192]	; (8001f70 <fire_Task+0x110>)
 8001eae:	f000 fa91 	bl	80023d4 <pidExecute>
 8001eb2:	eef0 7a40 	vmov.f32	s15, s0
 8001eb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eba:	ee17 3a90 	vmov	r3, s15
 8001ebe:	b21b      	sxth	r3, r3
 8001ec0:	80bb      	strh	r3, [r7, #4]
 8001ec2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ece:	4b29      	ldr	r3, [pc, #164]	; (8001f74 <fire_Task+0x114>)
 8001ed0:	edc3 7a03 	vstr	s15, [r3, #12]
	u[0]=0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	803b      	strh	r3, [r7, #0]
	u[1]=0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	807b      	strh	r3, [r7, #2]
	u[3]=0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	80fb      	strh	r3, [r7, #6]
	driveGimbalMotors(u);
 8001ee0:	463b      	mov	r3, r7
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 f9fa 	bl	80022dc <driveGimbalMotors>

	if(move_fire==0){
 8001ee8:	4b23      	ldr	r3, [pc, #140]	; (8001f78 <fire_Task+0x118>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d11a      	bne.n	8001f26 <fire_Task+0xc6>
		 sConfigOC.Pulse = 1800;
 8001ef0:	4b22      	ldr	r3, [pc, #136]	; (8001f7c <fire_Task+0x11c>)
 8001ef2:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8001ef6:	605a      	str	r2, [r3, #4]
		 HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3);
 8001ef8:	2208      	movs	r2, #8
 8001efa:	4920      	ldr	r1, [pc, #128]	; (8001f7c <fire_Task+0x11c>)
 8001efc:	4820      	ldr	r0, [pc, #128]	; (8001f80 <fire_Task+0x120>)
 8001efe:	f003 ff09 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
		 HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001f02:	2108      	movs	r1, #8
 8001f04:	481e      	ldr	r0, [pc, #120]	; (8001f80 <fire_Task+0x120>)
 8001f06:	f003 fcf5 	bl	80058f4 <HAL_TIM_PWM_Start>
		 sConfigOC.Pulse = 1800;
 8001f0a:	4b1c      	ldr	r3, [pc, #112]	; (8001f7c <fire_Task+0x11c>)
 8001f0c:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8001f10:	605a      	str	r2, [r3, #4]
		 HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4);
 8001f12:	220c      	movs	r2, #12
 8001f14:	4919      	ldr	r1, [pc, #100]	; (8001f7c <fire_Task+0x11c>)
 8001f16:	481a      	ldr	r0, [pc, #104]	; (8001f80 <fire_Task+0x120>)
 8001f18:	f003 fefc 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
		 HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001f1c:	210c      	movs	r1, #12
 8001f1e:	4818      	ldr	r0, [pc, #96]	; (8001f80 <fire_Task+0x120>)
 8001f20:	f003 fce8 	bl	80058f4 <HAL_TIM_PWM_Start>
		 HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
		 sConfigOC.Pulse = 1500;
		 HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4);
		 HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
	}
}
 8001f24:	e019      	b.n	8001f5a <fire_Task+0xfa>
		 sConfigOC.Pulse = 1500;
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <fire_Task+0x11c>)
 8001f28:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001f2c:	605a      	str	r2, [r3, #4]
		 HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3);
 8001f2e:	2208      	movs	r2, #8
 8001f30:	4912      	ldr	r1, [pc, #72]	; (8001f7c <fire_Task+0x11c>)
 8001f32:	4813      	ldr	r0, [pc, #76]	; (8001f80 <fire_Task+0x120>)
 8001f34:	f003 feee 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
		 HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001f38:	2108      	movs	r1, #8
 8001f3a:	4811      	ldr	r0, [pc, #68]	; (8001f80 <fire_Task+0x120>)
 8001f3c:	f003 fcda 	bl	80058f4 <HAL_TIM_PWM_Start>
		 sConfigOC.Pulse = 1500;
 8001f40:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <fire_Task+0x11c>)
 8001f42:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001f46:	605a      	str	r2, [r3, #4]
		 HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4);
 8001f48:	220c      	movs	r2, #12
 8001f4a:	490c      	ldr	r1, [pc, #48]	; (8001f7c <fire_Task+0x11c>)
 8001f4c:	480c      	ldr	r0, [pc, #48]	; (8001f80 <fire_Task+0x120>)
 8001f4e:	f003 fee1 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
		 HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001f52:	210c      	movs	r1, #12
 8001f54:	480a      	ldr	r0, [pc, #40]	; (8001f80 <fire_Task+0x120>)
 8001f56:	f003 fccd 	bl	80058f4 <HAL_TIM_PWM_Start>
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000468 	.word	0x20000468
 8001f68:	c4610000 	.word	0xc4610000
 8001f6c:	200003f8 	.word	0x200003f8
 8001f70:	2000043c 	.word	0x2000043c
 8001f74:	20000250 	.word	0x20000250
 8001f78:	200004bc 	.word	0x200004bc
 8001f7c:	20000398 	.word	0x20000398
 8001f80:	200004c8 	.word	0x200004c8

08001f84 <initFriction>:

void initFriction() {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
	for(int i=0;i<100;i++){
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	607b      	str	r3, [r7, #4]
 8001f8e:	e01f      	b.n	8001fd0 <initFriction+0x4c>
		HAL_Delay(20);
 8001f90:	2014      	movs	r0, #20
 8001f92:	f001 fa45 	bl	8003420 <HAL_Delay>
		  sConfigOC.Pulse = 2000;
 8001f96:	4b25      	ldr	r3, [pc, #148]	; (800202c <initFriction+0xa8>)
 8001f98:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001f9c:	605a      	str	r2, [r3, #4]
		  HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3);
 8001f9e:	2208      	movs	r2, #8
 8001fa0:	4922      	ldr	r1, [pc, #136]	; (800202c <initFriction+0xa8>)
 8001fa2:	4823      	ldr	r0, [pc, #140]	; (8002030 <initFriction+0xac>)
 8001fa4:	f003 feb6 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
		  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001fa8:	2108      	movs	r1, #8
 8001faa:	4821      	ldr	r0, [pc, #132]	; (8002030 <initFriction+0xac>)
 8001fac:	f003 fca2 	bl	80058f4 <HAL_TIM_PWM_Start>
		  sConfigOC.Pulse = 2000;
 8001fb0:	4b1e      	ldr	r3, [pc, #120]	; (800202c <initFriction+0xa8>)
 8001fb2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001fb6:	605a      	str	r2, [r3, #4]
		  HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4);
 8001fb8:	220c      	movs	r2, #12
 8001fba:	491c      	ldr	r1, [pc, #112]	; (800202c <initFriction+0xa8>)
 8001fbc:	481c      	ldr	r0, [pc, #112]	; (8002030 <initFriction+0xac>)
 8001fbe:	f003 fea9 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
		  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001fc2:	210c      	movs	r1, #12
 8001fc4:	481a      	ldr	r0, [pc, #104]	; (8002030 <initFriction+0xac>)
 8001fc6:	f003 fc95 	bl	80058f4 <HAL_TIM_PWM_Start>
	for(int i=0;i<100;i++){
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	607b      	str	r3, [r7, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b63      	cmp	r3, #99	; 0x63
 8001fd4:	dddc      	ble.n	8001f90 <initFriction+0xc>
	}
	for(int i=0;i<2000;i++){
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	603b      	str	r3, [r7, #0]
 8001fda:	e01f      	b.n	800201c <initFriction+0x98>
		HAL_Delay(1);
 8001fdc:	2001      	movs	r0, #1
 8001fde:	f001 fa1f 	bl	8003420 <HAL_Delay>
		  sConfigOC.Pulse = 1500;
 8001fe2:	4b12      	ldr	r3, [pc, #72]	; (800202c <initFriction+0xa8>)
 8001fe4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001fe8:	605a      	str	r2, [r3, #4]
		  HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3);
 8001fea:	2208      	movs	r2, #8
 8001fec:	490f      	ldr	r1, [pc, #60]	; (800202c <initFriction+0xa8>)
 8001fee:	4810      	ldr	r0, [pc, #64]	; (8002030 <initFriction+0xac>)
 8001ff0:	f003 fe90 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
		  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001ff4:	2108      	movs	r1, #8
 8001ff6:	480e      	ldr	r0, [pc, #56]	; (8002030 <initFriction+0xac>)
 8001ff8:	f003 fc7c 	bl	80058f4 <HAL_TIM_PWM_Start>
		  sConfigOC.Pulse = 1500;
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <initFriction+0xa8>)
 8001ffe:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002002:	605a      	str	r2, [r3, #4]
		  HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4);
 8002004:	220c      	movs	r2, #12
 8002006:	4909      	ldr	r1, [pc, #36]	; (800202c <initFriction+0xa8>)
 8002008:	4809      	ldr	r0, [pc, #36]	; (8002030 <initFriction+0xac>)
 800200a:	f003 fe83 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
		  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 800200e:	210c      	movs	r1, #12
 8002010:	4807      	ldr	r0, [pc, #28]	; (8002030 <initFriction+0xac>)
 8002012:	f003 fc6f 	bl	80058f4 <HAL_TIM_PWM_Start>
	for(int i=0;i<2000;i++){
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	3301      	adds	r3, #1
 800201a:	603b      	str	r3, [r7, #0]
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002022:	dbdb      	blt.n	8001fdc <initFriction+0x58>
	}

}
 8002024:	bf00      	nop
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20000398 	.word	0x20000398
 8002030:	200004c8 	.word	0x200004c8

08002034 <initPID>:
void initPID() {
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++) {
 800203a:	2300      	movs	r3, #0
 800203c:	607b      	str	r3, [r7, #4]
 800203e:	e042      	b.n	80020c6 <initPID+0x92>
		wheelPID[i].t = 2.0f;
 8002040:	4a25      	ldr	r2, [pc, #148]	; (80020d8 <initPID+0xa4>)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	212c      	movs	r1, #44	; 0x2c
 8002046:	fb01 f303 	mul.w	r3, r1, r3
 800204a:	4413      	add	r3, r2
 800204c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002050:	601a      	str	r2, [r3, #0]
		wheelPID[i].p = 3.0f;
 8002052:	4a21      	ldr	r2, [pc, #132]	; (80020d8 <initPID+0xa4>)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	212c      	movs	r1, #44	; 0x2c
 8002058:	fb01 f303 	mul.w	r3, r1, r3
 800205c:	4413      	add	r3, r2
 800205e:	3304      	adds	r3, #4
 8002060:	4a1e      	ldr	r2, [pc, #120]	; (80020dc <initPID+0xa8>)
 8002062:	601a      	str	r2, [r3, #0]
		wheelPID[i].i = 30.0f;
 8002064:	4a1c      	ldr	r2, [pc, #112]	; (80020d8 <initPID+0xa4>)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	212c      	movs	r1, #44	; 0x2c
 800206a:	fb01 f303 	mul.w	r3, r1, r3
 800206e:	4413      	add	r3, r2
 8002070:	3308      	adds	r3, #8
 8002072:	4a1b      	ldr	r2, [pc, #108]	; (80020e0 <initPID+0xac>)
 8002074:	601a      	str	r2, [r3, #0]
		wheelPID[i].d = 0.0f;
 8002076:	4a18      	ldr	r2, [pc, #96]	; (80020d8 <initPID+0xa4>)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	212c      	movs	r1, #44	; 0x2c
 800207c:	fb01 f303 	mul.w	r3, r1, r3
 8002080:	4413      	add	r3, r2
 8002082:	330c      	adds	r3, #12
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
		wheelPID[i].outLimit = 15000.0f;
 800208a:	4a13      	ldr	r2, [pc, #76]	; (80020d8 <initPID+0xa4>)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	212c      	movs	r1, #44	; 0x2c
 8002090:	fb01 f303 	mul.w	r3, r1, r3
 8002094:	4413      	add	r3, r2
 8002096:	3310      	adds	r3, #16
 8002098:	4a12      	ldr	r2, [pc, #72]	; (80020e4 <initPID+0xb0>)
 800209a:	601a      	str	r2, [r3, #0]
		wheelPID[i].integralOutLimit = 500.0f;
 800209c:	4a0e      	ldr	r2, [pc, #56]	; (80020d8 <initPID+0xa4>)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	212c      	movs	r1, #44	; 0x2c
 80020a2:	fb01 f303 	mul.w	r3, r1, r3
 80020a6:	4413      	add	r3, r2
 80020a8:	3314      	adds	r3, #20
 80020aa:	4a0f      	ldr	r2, [pc, #60]	; (80020e8 <initPID+0xb4>)
 80020ac:	601a      	str	r2, [r3, #0]
		wheelPID[i].differentialFilterRate = 0.9f;
 80020ae:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <initPID+0xa4>)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	212c      	movs	r1, #44	; 0x2c
 80020b4:	fb01 f303 	mul.w	r3, r1, r3
 80020b8:	4413      	add	r3, r2
 80020ba:	3318      	adds	r3, #24
 80020bc:	4a0b      	ldr	r2, [pc, #44]	; (80020ec <initPID+0xb8>)
 80020be:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3301      	adds	r3, #1
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b03      	cmp	r3, #3
 80020ca:	ddb9      	ble.n	8002040 <initPID+0xc>
	}
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	200002d0 	.word	0x200002d0
 80020dc:	40400000 	.word	0x40400000
 80020e0:	41f00000 	.word	0x41f00000
 80020e4:	466a6000 	.word	0x466a6000
 80020e8:	43fa0000 	.word	0x43fa0000
 80020ec:	3f666666 	.word	0x3f666666

080020f0 <initLoadPID>:

void initLoadPID() {
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
	loadPID.t = 2.0f;
 80020f4:	4b0d      	ldr	r3, [pc, #52]	; (800212c <initLoadPID+0x3c>)
 80020f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020fa:	601a      	str	r2, [r3, #0]
	loadPID.p = 10.0f;
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <initLoadPID+0x3c>)
 80020fe:	4a0c      	ldr	r2, [pc, #48]	; (8002130 <initLoadPID+0x40>)
 8002100:	605a      	str	r2, [r3, #4]
	loadPID.i = 0.1f*500;
 8002102:	4b0a      	ldr	r3, [pc, #40]	; (800212c <initLoadPID+0x3c>)
 8002104:	4a0b      	ldr	r2, [pc, #44]	; (8002134 <initLoadPID+0x44>)
 8002106:	609a      	str	r2, [r3, #8]
	loadPID.d = 0.07f;
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <initLoadPID+0x3c>)
 800210a:	4a0b      	ldr	r2, [pc, #44]	; (8002138 <initLoadPID+0x48>)
 800210c:	60da      	str	r2, [r3, #12]
	loadPID.outLimit = 30000.0f;
 800210e:	4b07      	ldr	r3, [pc, #28]	; (800212c <initLoadPID+0x3c>)
 8002110:	4a0a      	ldr	r2, [pc, #40]	; (800213c <initLoadPID+0x4c>)
 8002112:	611a      	str	r2, [r3, #16]
	loadPID.integralOutLimit = 10000.0f;
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <initLoadPID+0x3c>)
 8002116:	4a0a      	ldr	r2, [pc, #40]	; (8002140 <initLoadPID+0x50>)
 8002118:	615a      	str	r2, [r3, #20]
	loadPID.differentialFilterRate = 0.9f;
 800211a:	4b04      	ldr	r3, [pc, #16]	; (800212c <initLoadPID+0x3c>)
 800211c:	4a09      	ldr	r2, [pc, #36]	; (8002144 <initLoadPID+0x54>)
 800211e:	619a      	str	r2, [r3, #24]
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	2000043c 	.word	0x2000043c
 8002130:	41200000 	.word	0x41200000
 8002134:	42480000 	.word	0x42480000
 8002138:	3d8f5c29 	.word	0x3d8f5c29
 800213c:	46ea6000 	.word	0x46ea6000
 8002140:	461c4000 	.word	0x461c4000
 8002144:	3f666666 	.word	0x3f666666

08002148 <initCanFilter>:

void initCanFilter() {
 8002148:	b580      	push	{r7, lr}
 800214a:	b08a      	sub	sp, #40	; 0x28
 800214c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002152:	2300      	movs	r3, #0
 8002154:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002156:	2301      	movs	r3, #1
 8002158:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 800215a:	2300      	movs	r3, #0
 800215c:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 800215e:	2300      	movs	r3, #0
 8002160:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8002162:	2300      	movs	r3, #0
 8002164:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800216e:	2301      	movs	r3, #1
 8002170:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8002176:	463b      	mov	r3, r7
 8002178:	4619      	mov	r1, r3
 800217a:	4808      	ldr	r0, [pc, #32]	; (800219c <initCanFilter+0x54>)
 800217c:	f001 fa6e 	bl	800365c <HAL_CAN_ConfigFilter>

	sFilterConfig.SlaveStartFilterBank = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterBank = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]

	HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig);
 8002188:	463b      	mov	r3, r7
 800218a:	4619      	mov	r1, r3
 800218c:	4804      	ldr	r0, [pc, #16]	; (80021a0 <initCanFilter+0x58>)
 800218e:	f001 fa65 	bl	800365c <HAL_CAN_ConfigFilter>
}
 8002192:	bf00      	nop
 8002194:	3728      	adds	r7, #40	; 0x28
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000494 	.word	0x20000494
 80021a0:	2000046c 	.word	0x2000046c

080021a4 <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
 80021b0:	603b      	str	r3, [r7, #0]
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	69b9      	ldr	r1, [r7, #24]
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	1a8a      	subs	r2, r1, r2
 80021be:	fb02 f203 	mul.w	r2, r2, r3
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	1acb      	subs	r3, r1, r3
 80021c8:	fb92 f2f3 	sdiv	r2, r2, r3
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	4413      	add	r3, r2
	}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
	...

080021ec <driveWheel>:
 */
#include "motor.h"

const int CaseMotor_MaxSpeed = 30 * 256;

void driveWheel(int16_t *u) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08c      	sub	sp, #48	; 0x30
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef header;
	uint8_t TxData[8] = { 0 };
 80021f4:	f107 030c 	add.w	r3, r7, #12
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
	uint32_t TxMailbox;

	header.StdId = 0x200;
 80021fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002202:	617b      	str	r3, [r7, #20]
	header.RTR = CAN_RTR_DATA;
 8002204:	2300      	movs	r3, #0
 8002206:	623b      	str	r3, [r7, #32]
	header.IDE = CAN_ID_STD;
 8002208:	2300      	movs	r3, #0
 800220a:	61fb      	str	r3, [r7, #28]
	header.DLC = 8;
 800220c:	2308      	movs	r3, #8
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
	//header.TransmitGlobalTime = DISABLE;

	for (int i = 0; i < 2; i++) {
 8002210:	2300      	movs	r3, #0
 8002212:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002214:	e050      	b.n	80022b8 <driveWheel+0xcc>
		if (CaseMotor_MaxSpeed < u[i]) {
 8002216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	4413      	add	r3, r2
 800221e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002222:	461a      	mov	r2, r3
 8002224:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8002228:	429a      	cmp	r2, r3
 800222a:	dd0b      	ble.n	8002244 <driveWheel+0x58>
			u[i] = CaseMotor_MaxSpeed - 1;
 800222c:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8002230:	b29b      	uxth	r3, r3
 8002232:	3b01      	subs	r3, #1
 8002234:	b299      	uxth	r1, r3
 8002236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	4413      	add	r3, r2
 800223e:	b20a      	sxth	r2, r1
 8002240:	801a      	strh	r2, [r3, #0]
 8002242:	e017      	b.n	8002274 <driveWheel+0x88>
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 8002244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	4413      	add	r3, r2
 800224c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002250:	461a      	mov	r2, r3
 8002252:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8002256:	425b      	negs	r3, r3
 8002258:	429a      	cmp	r2, r3
 800225a:	da0b      	bge.n	8002274 <driveWheel+0x88>
			u[i] = -CaseMotor_MaxSpeed + 1;
 800225c:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8002260:	b29b      	uxth	r3, r3
 8002262:	f1c3 0301 	rsb	r3, r3, #1
 8002266:	b299      	uxth	r1, r3
 8002268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	4413      	add	r3, r2
 8002270:	b20a      	sxth	r2, r1
 8002272:	801a      	strh	r2, [r3, #0]
		}
		TxData[i * 2] = u[i] >> 8;
 8002274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	4413      	add	r3, r2
 800227c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002280:	121b      	asrs	r3, r3, #8
 8002282:	b21a      	sxth	r2, r3
 8002284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800228e:	440b      	add	r3, r1
 8002290:	f803 2c24 	strb.w	r2, [r3, #-36]
		TxData[i * 2 + 1] = u[i] & 0xFF;
 8002294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	4413      	add	r3, r2
 800229c:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	3301      	adds	r3, #1
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80022ac:	440b      	add	r3, r1
 80022ae:	f803 2c24 	strb.w	r2, [r3, #-36]
	for (int i = 0; i < 2; i++) {
 80022b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b4:	3301      	adds	r3, #1
 80022b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	ddab      	ble.n	8002216 <driveWheel+0x2a>
	}

	HAL_CAN_AddTxMessage(&hcan2, &header, TxData, &TxMailbox);
 80022be:	f107 0308 	add.w	r3, r7, #8
 80022c2:	f107 020c 	add.w	r2, r7, #12
 80022c6:	f107 0114 	add.w	r1, r7, #20
 80022ca:	4803      	ldr	r0, [pc, #12]	; (80022d8 <driveWheel+0xec>)
 80022cc:	f001 faea 	bl	80038a4 <HAL_CAN_AddTxMessage>

}
 80022d0:	bf00      	nop
 80022d2:	3730      	adds	r7, #48	; 0x30
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	2000046c 	.word	0x2000046c

080022dc <driveGimbalMotors>:

void driveGimbalMotors(int16_t *u) {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08c      	sub	sp, #48	; 0x30
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef header;
	uint8_t TxData[8] = { 0 };
 80022e4:	f107 030c 	add.w	r3, r7, #12
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
	uint32_t TxMailbox;

	header.StdId = 0x1ff;
 80022ee:	f240 13ff 	movw	r3, #511	; 0x1ff
 80022f2:	617b      	str	r3, [r7, #20]
	header.RTR = CAN_RTR_DATA;
 80022f4:	2300      	movs	r3, #0
 80022f6:	623b      	str	r3, [r7, #32]
	header.IDE = CAN_ID_STD;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61fb      	str	r3, [r7, #28]
	header.DLC = 8;
 80022fc:	2308      	movs	r3, #8
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
	//header.TransmitGlobalTime = DISABLE;

	for (int i = 0; i < 4; i++) {
 8002300:	2300      	movs	r3, #0
 8002302:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002304:	e053      	b.n	80023ae <driveGimbalMotors+0xd2>
		if(i==2){
 8002306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002308:	2b02      	cmp	r3, #2
 800230a:	d12e      	bne.n	800236a <driveGimbalMotors+0x8e>
		if (CaseMotor_MaxSpeed < u[i]) {
 800230c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	4413      	add	r3, r2
 8002314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002318:	461a      	mov	r2, r3
 800231a:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800231e:	429a      	cmp	r2, r3
 8002320:	dd0b      	ble.n	800233a <driveGimbalMotors+0x5e>
			u[i] = CaseMotor_MaxSpeed - 1;
 8002322:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8002326:	b29b      	uxth	r3, r3
 8002328:	3b01      	subs	r3, #1
 800232a:	b299      	uxth	r1, r3
 800232c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	4413      	add	r3, r2
 8002334:	b20a      	sxth	r2, r1
 8002336:	801a      	strh	r2, [r3, #0]
 8002338:	e017      	b.n	800236a <driveGimbalMotors+0x8e>
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 800233a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	4413      	add	r3, r2
 8002342:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002346:	461a      	mov	r2, r3
 8002348:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800234c:	425b      	negs	r3, r3
 800234e:	429a      	cmp	r2, r3
 8002350:	da0b      	bge.n	800236a <driveGimbalMotors+0x8e>
			u[i] = -CaseMotor_MaxSpeed + 1;
 8002352:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8002356:	b29b      	uxth	r3, r3
 8002358:	f1c3 0301 	rsb	r3, r3, #1
 800235c:	b299      	uxth	r1, r3
 800235e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	4413      	add	r3, r2
 8002366:	b20a      	sxth	r2, r1
 8002368:	801a      	strh	r2, [r3, #0]
		}
		}
		TxData[i * 2] = u[i] >> 8;
 800236a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	4413      	add	r3, r2
 8002372:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002376:	121b      	asrs	r3, r3, #8
 8002378:	b21a      	sxth	r2, r3
 800237a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002384:	440b      	add	r3, r1
 8002386:	f803 2c24 	strb.w	r2, [r3, #-36]
		TxData[i * 2 + 1] = u[i] & 0xFF;
 800238a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	3301      	adds	r3, #1
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80023a2:	440b      	add	r3, r1
 80023a4:	f803 2c24 	strb.w	r2, [r3, #-36]
	for (int i = 0; i < 4; i++) {
 80023a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023aa:	3301      	adds	r3, #1
 80023ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	dda8      	ble.n	8002306 <driveGimbalMotors+0x2a>
	}

	HAL_CAN_AddTxMessage(&hcan1, &header, TxData, &TxMailbox);
 80023b4:	f107 0308 	add.w	r3, r7, #8
 80023b8:	f107 020c 	add.w	r2, r7, #12
 80023bc:	f107 0114 	add.w	r1, r7, #20
 80023c0:	4803      	ldr	r0, [pc, #12]	; (80023d0 <driveGimbalMotors+0xf4>)
 80023c2:	f001 fa6f 	bl	80038a4 <HAL_CAN_AddTxMessage>
}
 80023c6:	bf00      	nop
 80023c8:	3730      	adds	r7, #48	; 0x30
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000494 	.word	0x20000494

080023d4 <pidExecute>:
 *  Created on: 2019/03/12
 *      Author: User
 */
#include "pid.h"

float pidExecute(_pid_t *pid) {
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
	float u = 0;
 80023dc:	f04f 0300 	mov.w	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
	pid->integralOut += pid->i * pid->error * (pid->t/1000.0f);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	ed93 7a07 	vldr	s14, [r3, #28]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	edd3 6a02 	vldr	s13, [r3, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80023f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	ed93 6a00 	vldr	s12, [r3]
 80023fe:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800253c <pidExecute+0x168>
 8002402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002406:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800240a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	edc3 7a07 	vstr	s15, [r3, #28]
	if (pid->integralOutLimit < pid->integralOut) pid->integralOut = pid->integralOutLimit;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	ed93 7a05 	vldr	s14, [r3, #20]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002420:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002428:	d504      	bpl.n	8002434 <pidExecute+0x60>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695a      	ldr	r2, [r3, #20]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	61da      	str	r2, [r3, #28]
 8002432:	e014      	b.n	800245e <pidExecute+0x8a>
	else if (pid->integralOut < -pid->integralOutLimit) pid->integralOut = -pid->integralOutLimit;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	ed93 7a07 	vldr	s14, [r3, #28]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002440:	eef1 7a67 	vneg.f32	s15, s15
 8002444:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244c:	d507      	bpl.n	800245e <pidExecute+0x8a>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	edd3 7a05 	vldr	s15, [r3, #20]
 8002454:	eef1 7a67 	vneg.f32	s15, s15
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	edc3 7a07 	vstr	s15, [r3, #28]
	pid->differentialFilter = pid->differentialFilter * pid->differentialFilterRate + (pid->d * (pid->error - pid->lastError)*(1000.0f/pid->t)) * (1 - pid->differentialFilterRate);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	edd3 7a06 	vldr	s15, [r3, #24]
 800246a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	edd3 6a03 	vldr	s13, [r3, #12]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002480:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002484:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	ed93 6a00 	vldr	s12, [r3]
 800248e:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800253c <pidExecute+0x168>
 8002492:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8002496:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	edd3 7a06 	vldr	s15, [r3, #24]
 80024a0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80024a4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80024a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	u = pid->p * pid->error + pid->integralOut + pid->differentialFilter;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	ed93 7a01 	vldr	s14, [r3, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80024c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	edd3 7a07 	vldr	s15, [r3, #28]
 80024cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80024d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024da:	edc7 7a03 	vstr	s15, [r7, #12]
	if (pid->outLimit < u) u = pid->outLimit;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80024e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80024e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f0:	dd03      	ble.n	80024fa <pidExecute+0x126>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	e012      	b.n	8002520 <pidExecute+0x14c>
	else if (u < -pid->outLimit)u = -pid->outLimit;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8002500:	eef1 7a67 	vneg.f32	s15, s15
 8002504:	ed97 7a03 	vldr	s14, [r7, #12]
 8002508:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800250c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002510:	d506      	bpl.n	8002520 <pidExecute+0x14c>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	edd3 7a04 	vldr	s15, [r3, #16]
 8002518:	eef1 7a67 	vneg.f32	s15, s15
 800251c:	edc7 7a03 	vstr	s15, [r7, #12]
	pid->lastError = pid->error;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	621a      	str	r2, [r3, #32]
	return u;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	ee07 3a90 	vmov	s15, r3
}
 800252e:	eeb0 0a67 	vmov.f32	s0, s15
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	447a0000 	.word	0x447a0000

08002540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	607b      	str	r3, [r7, #4]
 800254a:	4b10      	ldr	r3, [pc, #64]	; (800258c <HAL_MspInit+0x4c>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	4a0f      	ldr	r2, [pc, #60]	; (800258c <HAL_MspInit+0x4c>)
 8002550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002554:	6453      	str	r3, [r2, #68]	; 0x44
 8002556:	4b0d      	ldr	r3, [pc, #52]	; (800258c <HAL_MspInit+0x4c>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800255e:	607b      	str	r3, [r7, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	603b      	str	r3, [r7, #0]
 8002566:	4b09      	ldr	r3, [pc, #36]	; (800258c <HAL_MspInit+0x4c>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	4a08      	ldr	r2, [pc, #32]	; (800258c <HAL_MspInit+0x4c>)
 800256c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002570:	6413      	str	r3, [r2, #64]	; 0x40
 8002572:	4b06      	ldr	r3, [pc, #24]	; (800258c <HAL_MspInit+0x4c>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257a:	603b      	str	r3, [r7, #0]
 800257c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40023800 	.word	0x40023800

08002590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800259e:	b480      	push	{r7}
 80025a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025a2:	e7fe      	b.n	80025a2 <HardFault_Handler+0x4>

080025a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025a8:	e7fe      	b.n	80025a8 <MemManage_Handler+0x4>

080025aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025aa:	b480      	push	{r7}
 80025ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025ae:	e7fe      	b.n	80025ae <BusFault_Handler+0x4>

080025b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025b4:	e7fe      	b.n	80025b4 <UsageFault_Handler+0x4>

080025b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025b6:	b480      	push	{r7}
 80025b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025d2:	b480      	push	{r7}
 80025d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025e4:	f000 fefc 	bl	80033e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025e8:	bf00      	nop
 80025ea:	bd80      	pop	{r7, pc}

080025ec <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80025f0:	4802      	ldr	r0, [pc, #8]	; (80025fc <DMA1_Stream1_IRQHandler+0x10>)
 80025f2:	f001 ffab 	bl	800454c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000608 	.word	0x20000608

08002600 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002604:	4802      	ldr	r0, [pc, #8]	; (8002610 <CAN1_RX0_IRQHandler+0x10>)
 8002606:	f001 fb60 	bl	8003cca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20000494 	.word	0x20000494

08002614 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002618:	4802      	ldr	r0, [pc, #8]	; (8002624 <CAN1_RX1_IRQHandler+0x10>)
 800261a:	f001 fb56 	bl	8003cca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20000494 	.word	0x20000494

08002628 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800262c:	4802      	ldr	r0, [pc, #8]	; (8002638 <TIM7_IRQHandler+0x10>)
 800262e:	f003 fa68 	bl	8005b02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	200005c8 	.word	0x200005c8

0800263c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002640:	4802      	ldr	r0, [pc, #8]	; (800264c <CAN2_RX0_IRQHandler+0x10>)
 8002642:	f001 fb42 	bl	8003cca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	2000046c 	.word	0x2000046c

08002650 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002654:	4802      	ldr	r0, [pc, #8]	; (8002660 <CAN2_RX1_IRQHandler+0x10>)
 8002656:	f001 fb38 	bl	8003cca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	2000046c 	.word	0x2000046c

08002664 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	e00a      	b.n	800268c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002676:	f3af 8000 	nop.w
 800267a:	4601      	mov	r1, r0
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	60ba      	str	r2, [r7, #8]
 8002682:	b2ca      	uxtb	r2, r1
 8002684:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	3301      	adds	r3, #1
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	429a      	cmp	r2, r3
 8002692:	dbf0      	blt.n	8002676 <_read+0x12>
	}

return len;
 8002694:	687b      	ldr	r3, [r7, #4]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <_write>:

int _write(int file, char *ptr, int len)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b086      	sub	sp, #24
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	60f8      	str	r0, [r7, #12]
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	e009      	b.n	80026c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	60ba      	str	r2, [r7, #8]
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fe fe9d 	bl	80013f8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	3301      	adds	r3, #1
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	dbf1      	blt.n	80026b0 <_write+0x12>
	}
	return len;
 80026cc:	687b      	ldr	r3, [r7, #4]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <_close>:


int _close(int file)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
	return -1;
 80026de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
 80026f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026fe:	605a      	str	r2, [r3, #4]
	return 0;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <_isatty>:

int _isatty(int file)
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
	return 1;
 8002716:	2301      	movs	r3, #1
}
 8002718:	4618      	mov	r0, r3
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
	return 0;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
	...

08002740 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002748:	4b11      	ldr	r3, [pc, #68]	; (8002790 <_sbrk+0x50>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d102      	bne.n	8002756 <_sbrk+0x16>
		heap_end = &end;
 8002750:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <_sbrk+0x50>)
 8002752:	4a10      	ldr	r2, [pc, #64]	; (8002794 <_sbrk+0x54>)
 8002754:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002756:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <_sbrk+0x50>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800275c:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <_sbrk+0x50>)
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4413      	add	r3, r2
 8002764:	466a      	mov	r2, sp
 8002766:	4293      	cmp	r3, r2
 8002768:	d907      	bls.n	800277a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800276a:	f004 fddd 	bl	8007328 <__errno>
 800276e:	4602      	mov	r2, r0
 8002770:	230c      	movs	r3, #12
 8002772:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002774:	f04f 33ff 	mov.w	r3, #4294967295
 8002778:	e006      	b.n	8002788 <_sbrk+0x48>
	}

	heap_end += incr;
 800277a:	4b05      	ldr	r3, [pc, #20]	; (8002790 <_sbrk+0x50>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4413      	add	r3, r2
 8002782:	4a03      	ldr	r2, [pc, #12]	; (8002790 <_sbrk+0x50>)
 8002784:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002786:	68fb      	ldr	r3, [r7, #12]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	200001fc 	.word	0x200001fc
 8002794:	200007b0 	.word	0x200007b0

08002798 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800279c:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <SystemInit+0x28>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	4a07      	ldr	r2, [pc, #28]	; (80027c0 <SystemInit+0x28>)
 80027a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <SystemInit+0x28>)
 80027ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027b2:	609a      	str	r2, [r3, #8]
#endif
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0

  htim1.Instance = TIM1;
 80027c8:	4b25      	ldr	r3, [pc, #148]	; (8002860 <MX_TIM1_Init+0x9c>)
 80027ca:	4a26      	ldr	r2, [pc, #152]	; (8002864 <MX_TIM1_Init+0xa0>)
 80027cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80027ce:	4b24      	ldr	r3, [pc, #144]	; (8002860 <MX_TIM1_Init+0x9c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d4:	4b22      	ldr	r3, [pc, #136]	; (8002860 <MX_TIM1_Init+0x9c>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 30000;
 80027da:	4b21      	ldr	r3, [pc, #132]	; (8002860 <MX_TIM1_Init+0x9c>)
 80027dc:	f247 5230 	movw	r2, #30000	; 0x7530
 80027e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027e2:	4b1f      	ldr	r3, [pc, #124]	; (8002860 <MX_TIM1_Init+0x9c>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027e8:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <MX_TIM1_Init+0x9c>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ee:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <MX_TIM1_Init+0x9c>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80027f4:	4b1c      	ldr	r3, [pc, #112]	; (8002868 <MX_TIM1_Init+0xa4>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80027fa:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <MX_TIM1_Init+0xa4>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002800:	4b19      	ldr	r3, [pc, #100]	; (8002868 <MX_TIM1_Init+0xa4>)
 8002802:	2201      	movs	r2, #1
 8002804:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002806:	4b18      	ldr	r3, [pc, #96]	; (8002868 <MX_TIM1_Init+0xa4>)
 8002808:	2200      	movs	r2, #0
 800280a:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 800280c:	4b16      	ldr	r3, [pc, #88]	; (8002868 <MX_TIM1_Init+0xa4>)
 800280e:	2200      	movs	r2, #0
 8002810:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002812:	4b15      	ldr	r3, [pc, #84]	; (8002868 <MX_TIM1_Init+0xa4>)
 8002814:	2200      	movs	r2, #0
 8002816:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002818:	4b13      	ldr	r3, [pc, #76]	; (8002868 <MX_TIM1_Init+0xa4>)
 800281a:	2201      	movs	r2, #1
 800281c:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800281e:	4b12      	ldr	r3, [pc, #72]	; (8002868 <MX_TIM1_Init+0xa4>)
 8002820:	2200      	movs	r2, #0
 8002822:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8002824:	4b10      	ldr	r3, [pc, #64]	; (8002868 <MX_TIM1_Init+0xa4>)
 8002826:	2200      	movs	r2, #0
 8002828:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800282a:	490f      	ldr	r1, [pc, #60]	; (8002868 <MX_TIM1_Init+0xa4>)
 800282c:	480c      	ldr	r0, [pc, #48]	; (8002860 <MX_TIM1_Init+0x9c>)
 800282e:	f003 f89f 	bl	8005970 <HAL_TIM_Encoder_Init>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002838:	f7ff fcd0 	bl	80021dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <MX_TIM1_Init+0xa8>)
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002842:	4b0a      	ldr	r3, [pc, #40]	; (800286c <MX_TIM1_Init+0xa8>)
 8002844:	2200      	movs	r2, #0
 8002846:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002848:	4908      	ldr	r1, [pc, #32]	; (800286c <MX_TIM1_Init+0xa8>)
 800284a:	4805      	ldr	r0, [pc, #20]	; (8002860 <MX_TIM1_Init+0x9c>)
 800284c:	f003 fdc6 	bl	80063dc <HAL_TIMEx_MasterConfigSynchronization>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002856:	f7ff fcc1 	bl	80021dc <Error_Handler>
  }

}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20000548 	.word	0x20000548
 8002864:	40010000 	.word	0x40010000
 8002868:	2000040c 	.word	0x2000040c
 800286c:	20000244 	.word	0x20000244

08002870 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0

  htim2.Instance = TIM2;
 8002874:	4b24      	ldr	r3, [pc, #144]	; (8002908 <MX_TIM2_Init+0x98>)
 8002876:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800287a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800287c:	4b22      	ldr	r3, [pc, #136]	; (8002908 <MX_TIM2_Init+0x98>)
 800287e:	2200      	movs	r2, #0
 8002880:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002882:	4b21      	ldr	r3, [pc, #132]	; (8002908 <MX_TIM2_Init+0x98>)
 8002884:	2200      	movs	r2, #0
 8002886:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 30000;
 8002888:	4b1f      	ldr	r3, [pc, #124]	; (8002908 <MX_TIM2_Init+0x98>)
 800288a:	f247 5230 	movw	r2, #30000	; 0x7530
 800288e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002890:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <MX_TIM2_Init+0x98>)
 8002892:	2200      	movs	r2, #0
 8002894:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002896:	4b1c      	ldr	r3, [pc, #112]	; (8002908 <MX_TIM2_Init+0x98>)
 8002898:	2200      	movs	r2, #0
 800289a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800289c:	4b1b      	ldr	r3, [pc, #108]	; (800290c <MX_TIM2_Init+0x9c>)
 800289e:	2201      	movs	r2, #1
 80028a0:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80028a2:	4b1a      	ldr	r3, [pc, #104]	; (800290c <MX_TIM2_Init+0x9c>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80028a8:	4b18      	ldr	r3, [pc, #96]	; (800290c <MX_TIM2_Init+0x9c>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80028ae:	4b17      	ldr	r3, [pc, #92]	; (800290c <MX_TIM2_Init+0x9c>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80028b4:	4b15      	ldr	r3, [pc, #84]	; (800290c <MX_TIM2_Init+0x9c>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80028ba:	4b14      	ldr	r3, [pc, #80]	; (800290c <MX_TIM2_Init+0x9c>)
 80028bc:	2200      	movs	r2, #0
 80028be:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80028c0:	4b12      	ldr	r3, [pc, #72]	; (800290c <MX_TIM2_Init+0x9c>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80028c6:	4b11      	ldr	r3, [pc, #68]	; (800290c <MX_TIM2_Init+0x9c>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80028cc:	4b0f      	ldr	r3, [pc, #60]	; (800290c <MX_TIM2_Init+0x9c>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80028d2:	490e      	ldr	r1, [pc, #56]	; (800290c <MX_TIM2_Init+0x9c>)
 80028d4:	480c      	ldr	r0, [pc, #48]	; (8002908 <MX_TIM2_Init+0x98>)
 80028d6:	f003 f84b 	bl	8005970 <HAL_TIM_Encoder_Init>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80028e0:	f7ff fc7c 	bl	80021dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028e4:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <MX_TIM2_Init+0xa0>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ea:	4b09      	ldr	r3, [pc, #36]	; (8002910 <MX_TIM2_Init+0xa0>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028f0:	4907      	ldr	r1, [pc, #28]	; (8002910 <MX_TIM2_Init+0xa0>)
 80028f2:	4805      	ldr	r0, [pc, #20]	; (8002908 <MX_TIM2_Init+0x98>)
 80028f4:	f003 fd72 	bl	80063dc <HAL_TIMEx_MasterConfigSynchronization>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80028fe:	f7ff fc6d 	bl	80021dc <Error_Handler>
  }

}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000588 	.word	0x20000588
 800290c:	2000040c 	.word	0x2000040c
 8002910:	20000244 	.word	0x20000244

08002914 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0

  htim3.Instance = TIM3;
 8002918:	4b31      	ldr	r3, [pc, #196]	; (80029e0 <MX_TIM3_Init+0xcc>)
 800291a:	4a32      	ldr	r2, [pc, #200]	; (80029e4 <MX_TIM3_Init+0xd0>)
 800291c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42;
 800291e:	4b30      	ldr	r3, [pc, #192]	; (80029e0 <MX_TIM3_Init+0xcc>)
 8002920:	222a      	movs	r2, #42	; 0x2a
 8002922:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002924:	4b2e      	ldr	r3, [pc, #184]	; (80029e0 <MX_TIM3_Init+0xcc>)
 8002926:	2200      	movs	r2, #0
 8002928:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800292a:	4b2d      	ldr	r3, [pc, #180]	; (80029e0 <MX_TIM3_Init+0xcc>)
 800292c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002930:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002932:	4b2b      	ldr	r3, [pc, #172]	; (80029e0 <MX_TIM3_Init+0xcc>)
 8002934:	2200      	movs	r2, #0
 8002936:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002938:	4b29      	ldr	r3, [pc, #164]	; (80029e0 <MX_TIM3_Init+0xcc>)
 800293a:	2200      	movs	r2, #0
 800293c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800293e:	4828      	ldr	r0, [pc, #160]	; (80029e0 <MX_TIM3_Init+0xcc>)
 8002940:	f002 ffad 	bl	800589e <HAL_TIM_PWM_Init>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <MX_TIM3_Init+0x3a>
  {
    Error_Handler();
 800294a:	f7ff fc47 	bl	80021dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800294e:	4b26      	ldr	r3, [pc, #152]	; (80029e8 <MX_TIM3_Init+0xd4>)
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002954:	4b24      	ldr	r3, [pc, #144]	; (80029e8 <MX_TIM3_Init+0xd4>)
 8002956:	2200      	movs	r2, #0
 8002958:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800295a:	4923      	ldr	r1, [pc, #140]	; (80029e8 <MX_TIM3_Init+0xd4>)
 800295c:	4820      	ldr	r0, [pc, #128]	; (80029e0 <MX_TIM3_Init+0xcc>)
 800295e:	f003 fd3d 	bl	80063dc <HAL_TIMEx_MasterConfigSynchronization>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002968:	f7ff fc38 	bl	80021dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800296c:	4b1f      	ldr	r3, [pc, #124]	; (80029ec <MX_TIM3_Init+0xd8>)
 800296e:	2260      	movs	r2, #96	; 0x60
 8002970:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002972:	4b1e      	ldr	r3, [pc, #120]	; (80029ec <MX_TIM3_Init+0xd8>)
 8002974:	2200      	movs	r2, #0
 8002976:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002978:	4b1c      	ldr	r3, [pc, #112]	; (80029ec <MX_TIM3_Init+0xd8>)
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800297e:	4b1b      	ldr	r3, [pc, #108]	; (80029ec <MX_TIM3_Init+0xd8>)
 8002980:	2200      	movs	r2, #0
 8002982:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002984:	2200      	movs	r2, #0
 8002986:	4919      	ldr	r1, [pc, #100]	; (80029ec <MX_TIM3_Init+0xd8>)
 8002988:	4815      	ldr	r0, [pc, #84]	; (80029e0 <MX_TIM3_Init+0xcc>)
 800298a:	f003 f9c3 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002994:	f7ff fc22 	bl	80021dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002998:	2204      	movs	r2, #4
 800299a:	4914      	ldr	r1, [pc, #80]	; (80029ec <MX_TIM3_Init+0xd8>)
 800299c:	4810      	ldr	r0, [pc, #64]	; (80029e0 <MX_TIM3_Init+0xcc>)
 800299e:	f003 f9b9 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80029a8:	f7ff fc18 	bl	80021dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80029ac:	2208      	movs	r2, #8
 80029ae:	490f      	ldr	r1, [pc, #60]	; (80029ec <MX_TIM3_Init+0xd8>)
 80029b0:	480b      	ldr	r0, [pc, #44]	; (80029e0 <MX_TIM3_Init+0xcc>)
 80029b2:	f003 f9af 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 80029bc:	f7ff fc0e 	bl	80021dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80029c0:	220c      	movs	r2, #12
 80029c2:	490a      	ldr	r1, [pc, #40]	; (80029ec <MX_TIM3_Init+0xd8>)
 80029c4:	4806      	ldr	r0, [pc, #24]	; (80029e0 <MX_TIM3_Init+0xcc>)
 80029c6:	f003 f9a5 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 80029d0:	f7ff fc04 	bl	80021dc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80029d4:	4802      	ldr	r0, [pc, #8]	; (80029e0 <MX_TIM3_Init+0xcc>)
 80029d6:	f000 f99d 	bl	8002d14 <HAL_TIM_MspPostInit>

}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000508 	.word	0x20000508
 80029e4:	40000400 	.word	0x40000400
 80029e8:	20000244 	.word	0x20000244
 80029ec:	20000398 	.word	0x20000398

080029f0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0

  htim7.Instance = TIM7;
 80029f4:	4b14      	ldr	r3, [pc, #80]	; (8002a48 <MX_TIM7_Init+0x58>)
 80029f6:	4a15      	ldr	r2, [pc, #84]	; (8002a4c <MX_TIM7_Init+0x5c>)
 80029f8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 5-1;
 80029fa:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <MX_TIM7_Init+0x58>)
 80029fc:	2204      	movs	r2, #4
 80029fe:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a00:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <MX_TIM7_Init+0x58>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 16800;
 8002a06:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <MX_TIM7_Init+0x58>)
 8002a08:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8002a0c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a0e:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <MX_TIM7_Init+0x58>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002a14:	480c      	ldr	r0, [pc, #48]	; (8002a48 <MX_TIM7_Init+0x58>)
 8002a16:	f002 fef3 	bl	8005800 <HAL_TIM_Base_Init>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <MX_TIM7_Init+0x34>
  {
    Error_Handler();
 8002a20:	f7ff fbdc 	bl	80021dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a24:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <MX_TIM7_Init+0x60>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a2a:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <MX_TIM7_Init+0x60>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002a30:	4907      	ldr	r1, [pc, #28]	; (8002a50 <MX_TIM7_Init+0x60>)
 8002a32:	4805      	ldr	r0, [pc, #20]	; (8002a48 <MX_TIM7_Init+0x58>)
 8002a34:	f003 fcd2 	bl	80063dc <HAL_TIMEx_MasterConfigSynchronization>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_TIM7_Init+0x52>
  {
    Error_Handler();
 8002a3e:	f7ff fbcd 	bl	80021dc <Error_Handler>
  }

}
 8002a42:	bf00      	nop
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	200005c8 	.word	0x200005c8
 8002a4c:	40001400 	.word	0x40001400
 8002a50:	20000244 	.word	0x20000244

08002a54 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  htim8.Instance = TIM8;
 8002a58:	4b3c      	ldr	r3, [pc, #240]	; (8002b4c <MX_TIM8_Init+0xf8>)
 8002a5a:	4a3d      	ldr	r2, [pc, #244]	; (8002b50 <MX_TIM8_Init+0xfc>)
 8002a5c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 48;
 8002a5e:	4b3b      	ldr	r3, [pc, #236]	; (8002b4c <MX_TIM8_Init+0xf8>)
 8002a60:	2230      	movs	r2, #48	; 0x30
 8002a62:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a64:	4b39      	ldr	r3, [pc, #228]	; (8002b4c <MX_TIM8_Init+0xf8>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 20000-1;
 8002a6a:	4b38      	ldr	r3, [pc, #224]	; (8002b4c <MX_TIM8_Init+0xf8>)
 8002a6c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002a70:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a72:	4b36      	ldr	r3, [pc, #216]	; (8002b4c <MX_TIM8_Init+0xf8>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002a78:	4b34      	ldr	r3, [pc, #208]	; (8002b4c <MX_TIM8_Init+0xf8>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a7e:	4b33      	ldr	r3, [pc, #204]	; (8002b4c <MX_TIM8_Init+0xf8>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002a84:	4831      	ldr	r0, [pc, #196]	; (8002b4c <MX_TIM8_Init+0xf8>)
 8002a86:	f002 ff0a 	bl	800589e <HAL_TIM_PWM_Init>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <MX_TIM8_Init+0x40>
  {
    Error_Handler();
 8002a90:	f7ff fba4 	bl	80021dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a94:	4b2f      	ldr	r3, [pc, #188]	; (8002b54 <MX_TIM8_Init+0x100>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a9a:	4b2e      	ldr	r3, [pc, #184]	; (8002b54 <MX_TIM8_Init+0x100>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002aa0:	492c      	ldr	r1, [pc, #176]	; (8002b54 <MX_TIM8_Init+0x100>)
 8002aa2:	482a      	ldr	r0, [pc, #168]	; (8002b4c <MX_TIM8_Init+0xf8>)
 8002aa4:	f003 fc9a 	bl	80063dc <HAL_TIMEx_MasterConfigSynchronization>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <MX_TIM8_Init+0x5e>
  {
    Error_Handler();
 8002aae:	f7ff fb95 	bl	80021dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ab2:	4b29      	ldr	r3, [pc, #164]	; (8002b58 <MX_TIM8_Init+0x104>)
 8002ab4:	2260      	movs	r2, #96	; 0x60
 8002ab6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002ab8:	4b27      	ldr	r3, [pc, #156]	; (8002b58 <MX_TIM8_Init+0x104>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002abe:	4b26      	ldr	r3, [pc, #152]	; (8002b58 <MX_TIM8_Init+0x104>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ac4:	4b24      	ldr	r3, [pc, #144]	; (8002b58 <MX_TIM8_Init+0x104>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aca:	4b23      	ldr	r3, [pc, #140]	; (8002b58 <MX_TIM8_Init+0x104>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ad0:	4b21      	ldr	r3, [pc, #132]	; (8002b58 <MX_TIM8_Init+0x104>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ad6:	4b20      	ldr	r3, [pc, #128]	; (8002b58 <MX_TIM8_Init+0x104>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002adc:	2208      	movs	r2, #8
 8002ade:	491e      	ldr	r1, [pc, #120]	; (8002b58 <MX_TIM8_Init+0x104>)
 8002ae0:	481a      	ldr	r0, [pc, #104]	; (8002b4c <MX_TIM8_Init+0xf8>)
 8002ae2:	f003 f917 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <MX_TIM8_Init+0x9c>
  {
    Error_Handler();
 8002aec:	f7ff fb76 	bl	80021dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002af0:	220c      	movs	r2, #12
 8002af2:	4919      	ldr	r1, [pc, #100]	; (8002b58 <MX_TIM8_Init+0x104>)
 8002af4:	4815      	ldr	r0, [pc, #84]	; (8002b4c <MX_TIM8_Init+0xf8>)
 8002af6:	f003 f90d 	bl	8005d14 <HAL_TIM_PWM_ConfigChannel>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 8002b00:	f7ff fb6c 	bl	80021dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b04:	4b15      	ldr	r3, [pc, #84]	; (8002b5c <MX_TIM8_Init+0x108>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b0a:	4b14      	ldr	r3, [pc, #80]	; (8002b5c <MX_TIM8_Init+0x108>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b10:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <MX_TIM8_Init+0x108>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b16:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <MX_TIM8_Init+0x108>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b1c:	4b0f      	ldr	r3, [pc, #60]	; (8002b5c <MX_TIM8_Init+0x108>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b22:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <MX_TIM8_Init+0x108>)
 8002b24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b28:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b2a:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <MX_TIM8_Init+0x108>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002b30:	490a      	ldr	r1, [pc, #40]	; (8002b5c <MX_TIM8_Init+0x108>)
 8002b32:	4806      	ldr	r0, [pc, #24]	; (8002b4c <MX_TIM8_Init+0xf8>)
 8002b34:	f003 fcce 	bl	80064d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8002b3e:	f7ff fb4d 	bl	80021dc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8002b42:	4802      	ldr	r0, [pc, #8]	; (8002b4c <MX_TIM8_Init+0xf8>)
 8002b44:	f000 f8e6 	bl	8002d14 <HAL_TIM_MspPostInit>

}
 8002b48:	bf00      	nop
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	200004c8 	.word	0x200004c8
 8002b50:	40010400 	.word	0x40010400
 8002b54:	20000244 	.word	0x20000244
 8002b58:	20000398 	.word	0x20000398
 8002b5c:	200003d0 	.word	0x200003d0

08002b60 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08c      	sub	sp, #48	; 0x30
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b68:	f107 031c 	add.w	r3, r7, #28
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	605a      	str	r2, [r3, #4]
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	60da      	str	r2, [r3, #12]
 8002b76:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a32      	ldr	r2, [pc, #200]	; (8002c48 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d12d      	bne.n	8002bde <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	61bb      	str	r3, [r7, #24]
 8002b86:	4b31      	ldr	r3, [pc, #196]	; (8002c4c <HAL_TIM_Encoder_MspInit+0xec>)
 8002b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8a:	4a30      	ldr	r2, [pc, #192]	; (8002c4c <HAL_TIM_Encoder_MspInit+0xec>)
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	6453      	str	r3, [r2, #68]	; 0x44
 8002b92:	4b2e      	ldr	r3, [pc, #184]	; (8002c4c <HAL_TIM_Encoder_MspInit+0xec>)
 8002b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	61bb      	str	r3, [r7, #24]
 8002b9c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	4b2a      	ldr	r3, [pc, #168]	; (8002c4c <HAL_TIM_Encoder_MspInit+0xec>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	4a29      	ldr	r2, [pc, #164]	; (8002c4c <HAL_TIM_Encoder_MspInit+0xec>)
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	6313      	str	r3, [r2, #48]	; 0x30
 8002bae:	4b27      	ldr	r3, [pc, #156]	; (8002c4c <HAL_TIM_Encoder_MspInit+0xec>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002bba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd0:	f107 031c 	add.w	r3, r7, #28
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	481e      	ldr	r0, [pc, #120]	; (8002c50 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002bd8:	f001 ff20 	bl	8004a1c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002bdc:	e030      	b.n	8002c40 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM2)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be6:	d12b      	bne.n	8002c40 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002be8:	2300      	movs	r3, #0
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	4b17      	ldr	r3, [pc, #92]	; (8002c4c <HAL_TIM_Encoder_MspInit+0xec>)
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	4a16      	ldr	r2, [pc, #88]	; (8002c4c <HAL_TIM_Encoder_MspInit+0xec>)
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf8:	4b14      	ldr	r3, [pc, #80]	; (8002c4c <HAL_TIM_Encoder_MspInit+0xec>)
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c04:	2300      	movs	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	4b10      	ldr	r3, [pc, #64]	; (8002c4c <HAL_TIM_Encoder_MspInit+0xec>)
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0c:	4a0f      	ldr	r2, [pc, #60]	; (8002c4c <HAL_TIM_Encoder_MspInit+0xec>)
 8002c0e:	f043 0301 	orr.w	r3, r3, #1
 8002c12:	6313      	str	r3, [r2, #48]	; 0x30
 8002c14:	4b0d      	ldr	r3, [pc, #52]	; (8002c4c <HAL_TIM_Encoder_MspInit+0xec>)
 8002c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c20:	2303      	movs	r3, #3
 8002c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c24:	2302      	movs	r3, #2
 8002c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c30:	2301      	movs	r3, #1
 8002c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c34:	f107 031c 	add.w	r3, r7, #28
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4805      	ldr	r0, [pc, #20]	; (8002c50 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002c3c:	f001 feee 	bl	8004a1c <HAL_GPIO_Init>
}
 8002c40:	bf00      	nop
 8002c42:	3730      	adds	r7, #48	; 0x30
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40010000 	.word	0x40010000
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40020000 	.word	0x40020000

08002c54 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a15      	ldr	r2, [pc, #84]	; (8002cb8 <HAL_TIM_PWM_MspInit+0x64>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d10e      	bne.n	8002c84 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	4b14      	ldr	r3, [pc, #80]	; (8002cbc <HAL_TIM_PWM_MspInit+0x68>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	4a13      	ldr	r2, [pc, #76]	; (8002cbc <HAL_TIM_PWM_MspInit+0x68>)
 8002c70:	f043 0302 	orr.w	r3, r3, #2
 8002c74:	6413      	str	r3, [r2, #64]	; 0x40
 8002c76:	4b11      	ldr	r3, [pc, #68]	; (8002cbc <HAL_TIM_PWM_MspInit+0x68>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002c82:	e012      	b.n	8002caa <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM8)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a0d      	ldr	r2, [pc, #52]	; (8002cc0 <HAL_TIM_PWM_MspInit+0x6c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d10d      	bne.n	8002caa <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60bb      	str	r3, [r7, #8]
 8002c92:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <HAL_TIM_PWM_MspInit+0x68>)
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c96:	4a09      	ldr	r2, [pc, #36]	; (8002cbc <HAL_TIM_PWM_MspInit+0x68>)
 8002c98:	f043 0302 	orr.w	r3, r3, #2
 8002c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c9e:	4b07      	ldr	r3, [pc, #28]	; (8002cbc <HAL_TIM_PWM_MspInit+0x68>)
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	60bb      	str	r3, [r7, #8]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
}
 8002caa:	bf00      	nop
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40000400 	.word	0x40000400
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	40010400 	.word	0x40010400

08002cc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a0e      	ldr	r2, [pc, #56]	; (8002d0c <HAL_TIM_Base_MspInit+0x48>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d115      	bne.n	8002d02 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <HAL_TIM_Base_MspInit+0x4c>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	4a0c      	ldr	r2, [pc, #48]	; (8002d10 <HAL_TIM_Base_MspInit+0x4c>)
 8002ce0:	f043 0320 	orr.w	r3, r3, #32
 8002ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <HAL_TIM_Base_MspInit+0x4c>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f003 0320 	and.w	r3, r3, #32
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 6, 0);
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2106      	movs	r1, #6
 8002cf6:	2037      	movs	r0, #55	; 0x37
 8002cf8:	f001 faeb 	bl	80042d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002cfc:	2037      	movs	r0, #55	; 0x37
 8002cfe:	f001 fb04 	bl	800430a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002d02:	bf00      	nop
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40001400 	.word	0x40001400
 8002d10:	40023800 	.word	0x40023800

08002d14 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08a      	sub	sp, #40	; 0x28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d1c:	f107 0314 	add.w	r3, r7, #20
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	60da      	str	r2, [r3, #12]
 8002d2a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a33      	ldr	r2, [pc, #204]	; (8002e00 <HAL_TIM_MspPostInit+0xec>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d13c      	bne.n	8002db0 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	4b32      	ldr	r3, [pc, #200]	; (8002e04 <HAL_TIM_MspPostInit+0xf0>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	4a31      	ldr	r2, [pc, #196]	; (8002e04 <HAL_TIM_MspPostInit+0xf0>)
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	6313      	str	r3, [r2, #48]	; 0x30
 8002d46:	4b2f      	ldr	r3, [pc, #188]	; (8002e04 <HAL_TIM_MspPostInit+0xf0>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	613b      	str	r3, [r7, #16]
 8002d50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	4b2b      	ldr	r3, [pc, #172]	; (8002e04 <HAL_TIM_MspPostInit+0xf0>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	4a2a      	ldr	r2, [pc, #168]	; (8002e04 <HAL_TIM_MspPostInit+0xf0>)
 8002d5c:	f043 0302 	orr.w	r3, r3, #2
 8002d60:	6313      	str	r3, [r2, #48]	; 0x30
 8002d62:	4b28      	ldr	r3, [pc, #160]	; (8002e04 <HAL_TIM_MspPostInit+0xf0>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d6e:	23c0      	movs	r3, #192	; 0xc0
 8002d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d72:	2302      	movs	r3, #2
 8002d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d82:	f107 0314 	add.w	r3, r7, #20
 8002d86:	4619      	mov	r1, r3
 8002d88:	481f      	ldr	r0, [pc, #124]	; (8002e08 <HAL_TIM_MspPostInit+0xf4>)
 8002d8a:	f001 fe47 	bl	8004a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d92:	2302      	movs	r3, #2
 8002d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da2:	f107 0314 	add.w	r3, r7, #20
 8002da6:	4619      	mov	r1, r3
 8002da8:	4818      	ldr	r0, [pc, #96]	; (8002e0c <HAL_TIM_MspPostInit+0xf8>)
 8002daa:	f001 fe37 	bl	8004a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002dae:	e023      	b.n	8002df8 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM8)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a16      	ldr	r2, [pc, #88]	; (8002e10 <HAL_TIM_MspPostInit+0xfc>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d11e      	bne.n	8002df8 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <HAL_TIM_MspPostInit+0xf0>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	4a10      	ldr	r2, [pc, #64]	; (8002e04 <HAL_TIM_MspPostInit+0xf0>)
 8002dc4:	f043 0304 	orr.w	r3, r3, #4
 8002dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dca:	4b0e      	ldr	r3, [pc, #56]	; (8002e04 <HAL_TIM_MspPostInit+0xf0>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	60bb      	str	r3, [r7, #8]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002dd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de4:	2300      	movs	r3, #0
 8002de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002de8:	2303      	movs	r3, #3
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dec:	f107 0314 	add.w	r3, r7, #20
 8002df0:	4619      	mov	r1, r3
 8002df2:	4808      	ldr	r0, [pc, #32]	; (8002e14 <HAL_TIM_MspPostInit+0x100>)
 8002df4:	f001 fe12 	bl	8004a1c <HAL_GPIO_Init>
}
 8002df8:	bf00      	nop
 8002dfa:	3728      	adds	r7, #40	; 0x28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40000400 	.word	0x40000400
 8002e04:	40023800 	.word	0x40023800
 8002e08:	40020000 	.word	0x40020000
 8002e0c:	40020400 	.word	0x40020400
 8002e10:	40010400 	.word	0x40010400
 8002e14:	40020800 	.word	0x40020800

08002e18 <MX_UART5_Init>:
UART_HandleTypeDef huart6;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8002e1c:	4b12      	ldr	r3, [pc, #72]	; (8002e68 <MX_UART5_Init+0x50>)
 8002e1e:	4a13      	ldr	r2, [pc, #76]	; (8002e6c <MX_UART5_Init+0x54>)
 8002e20:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002e22:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <MX_UART5_Init+0x50>)
 8002e24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e28:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 8002e2a:	4b0f      	ldr	r3, [pc, #60]	; (8002e68 <MX_UART5_Init+0x50>)
 8002e2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e30:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002e32:	4b0d      	ldr	r3, [pc, #52]	; (8002e68 <MX_UART5_Init+0x50>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 8002e38:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <MX_UART5_Init+0x50>)
 8002e3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e3e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002e40:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <MX_UART5_Init+0x50>)
 8002e42:	220c      	movs	r2, #12
 8002e44:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e46:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <MX_UART5_Init+0x50>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <MX_UART5_Init+0x50>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002e52:	4805      	ldr	r0, [pc, #20]	; (8002e68 <MX_UART5_Init+0x50>)
 8002e54:	f003 fba4 	bl	80065a0 <HAL_UART_Init>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <MX_UART5_Init+0x4a>
  {
    Error_Handler();
 8002e5e:	f7ff f9bd 	bl	80021dc <Error_Handler>
  }

}
 8002e62:	bf00      	nop
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	200006a8 	.word	0x200006a8
 8002e6c:	40005000 	.word	0x40005000

08002e70 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002e74:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <MX_USART1_UART_Init+0x4c>)
 8002e76:	4a12      	ldr	r2, [pc, #72]	; (8002ec0 <MX_USART1_UART_Init+0x50>)
 8002e78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e7a:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <MX_USART1_UART_Init+0x4c>)
 8002e7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e82:	4b0e      	ldr	r3, [pc, #56]	; (8002ebc <MX_USART1_UART_Init+0x4c>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e88:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <MX_USART1_UART_Init+0x4c>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e8e:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <MX_USART1_UART_Init+0x4c>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e94:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <MX_USART1_UART_Init+0x4c>)
 8002e96:	220c      	movs	r2, #12
 8002e98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e9a:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <MX_USART1_UART_Init+0x4c>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ea0:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <MX_USART1_UART_Init+0x4c>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ea6:	4805      	ldr	r0, [pc, #20]	; (8002ebc <MX_USART1_UART_Init+0x4c>)
 8002ea8:	f003 fb7a 	bl	80065a0 <HAL_UART_Init>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002eb2:	f7ff f993 	bl	80021dc <Error_Handler>
  }

}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	200006e8 	.word	0x200006e8
 8002ec0:	40011000 	.word	0x40011000

08002ec4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002ec8:	4b11      	ldr	r3, [pc, #68]	; (8002f10 <MX_USART2_UART_Init+0x4c>)
 8002eca:	4a12      	ldr	r2, [pc, #72]	; (8002f14 <MX_USART2_UART_Init+0x50>)
 8002ecc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ece:	4b10      	ldr	r3, [pc, #64]	; (8002f10 <MX_USART2_UART_Init+0x4c>)
 8002ed0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ed4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ed6:	4b0e      	ldr	r3, [pc, #56]	; (8002f10 <MX_USART2_UART_Init+0x4c>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002edc:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <MX_USART2_UART_Init+0x4c>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ee2:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <MX_USART2_UART_Init+0x4c>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ee8:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <MX_USART2_UART_Init+0x4c>)
 8002eea:	220c      	movs	r2, #12
 8002eec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eee:	4b08      	ldr	r3, [pc, #32]	; (8002f10 <MX_USART2_UART_Init+0x4c>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ef4:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <MX_USART2_UART_Init+0x4c>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002efa:	4805      	ldr	r0, [pc, #20]	; (8002f10 <MX_USART2_UART_Init+0x4c>)
 8002efc:	f003 fb50 	bl	80065a0 <HAL_UART_Init>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f06:	f7ff f969 	bl	80021dc <Error_Handler>
  }

}
 8002f0a:	bf00      	nop
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000768 	.word	0x20000768
 8002f14:	40004400 	.word	0x40004400

08002f18 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002f1c:	4b11      	ldr	r3, [pc, #68]	; (8002f64 <MX_USART3_UART_Init+0x4c>)
 8002f1e:	4a12      	ldr	r2, [pc, #72]	; (8002f68 <MX_USART3_UART_Init+0x50>)
 8002f20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002f22:	4b10      	ldr	r3, [pc, #64]	; (8002f64 <MX_USART3_UART_Init+0x4c>)
 8002f24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f2a:	4b0e      	ldr	r3, [pc, #56]	; (8002f64 <MX_USART3_UART_Init+0x4c>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f30:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <MX_USART3_UART_Init+0x4c>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f36:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <MX_USART3_UART_Init+0x4c>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f3c:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <MX_USART3_UART_Init+0x4c>)
 8002f3e:	220c      	movs	r2, #12
 8002f40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f42:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <MX_USART3_UART_Init+0x4c>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f48:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <MX_USART3_UART_Init+0x4c>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f4e:	4805      	ldr	r0, [pc, #20]	; (8002f64 <MX_USART3_UART_Init+0x4c>)
 8002f50:	f003 fb26 	bl	80065a0 <HAL_UART_Init>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002f5a:	f7ff f93f 	bl	80021dc <Error_Handler>
  }

}
 8002f5e:	bf00      	nop
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000668 	.word	0x20000668
 8002f68:	40004800 	.word	0x40004800

08002f6c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8002f70:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <MX_USART6_UART_Init+0x4c>)
 8002f72:	4a12      	ldr	r2, [pc, #72]	; (8002fbc <MX_USART6_UART_Init+0x50>)
 8002f74:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002f76:	4b10      	ldr	r3, [pc, #64]	; (8002fb8 <MX_USART6_UART_Init+0x4c>)
 8002f78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f7c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002f7e:	4b0e      	ldr	r3, [pc, #56]	; (8002fb8 <MX_USART6_UART_Init+0x4c>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002f84:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <MX_USART6_UART_Init+0x4c>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <MX_USART6_UART_Init+0x4c>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002f90:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <MX_USART6_UART_Init+0x4c>)
 8002f92:	220c      	movs	r2, #12
 8002f94:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f96:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <MX_USART6_UART_Init+0x4c>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f9c:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <MX_USART6_UART_Init+0x4c>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002fa2:	4805      	ldr	r0, [pc, #20]	; (8002fb8 <MX_USART6_UART_Init+0x4c>)
 8002fa4:	f003 fafc 	bl	80065a0 <HAL_UART_Init>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002fae:	f7ff f915 	bl	80021dc <Error_Handler>
  }

}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20000728 	.word	0x20000728
 8002fbc:	40011400 	.word	0x40011400

08002fc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b094      	sub	sp, #80	; 0x50
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	605a      	str	r2, [r3, #4]
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	60da      	str	r2, [r3, #12]
 8002fd6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a99      	ldr	r2, [pc, #612]	; (8003244 <HAL_UART_MspInit+0x284>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d14b      	bne.n	800307a <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fe6:	4b98      	ldr	r3, [pc, #608]	; (8003248 <HAL_UART_MspInit+0x288>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	4a97      	ldr	r2, [pc, #604]	; (8003248 <HAL_UART_MspInit+0x288>)
 8002fec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff2:	4b95      	ldr	r3, [pc, #596]	; (8003248 <HAL_UART_MspInit+0x288>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ffa:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	637b      	str	r3, [r7, #52]	; 0x34
 8003002:	4b91      	ldr	r3, [pc, #580]	; (8003248 <HAL_UART_MspInit+0x288>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	4a90      	ldr	r2, [pc, #576]	; (8003248 <HAL_UART_MspInit+0x288>)
 8003008:	f043 0304 	orr.w	r3, r3, #4
 800300c:	6313      	str	r3, [r2, #48]	; 0x30
 800300e:	4b8e      	ldr	r3, [pc, #568]	; (8003248 <HAL_UART_MspInit+0x288>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	637b      	str	r3, [r7, #52]	; 0x34
 8003018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	633b      	str	r3, [r7, #48]	; 0x30
 800301e:	4b8a      	ldr	r3, [pc, #552]	; (8003248 <HAL_UART_MspInit+0x288>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	4a89      	ldr	r2, [pc, #548]	; (8003248 <HAL_UART_MspInit+0x288>)
 8003024:	f043 0308 	orr.w	r3, r3, #8
 8003028:	6313      	str	r3, [r2, #48]	; 0x30
 800302a:	4b87      	ldr	r3, [pc, #540]	; (8003248 <HAL_UART_MspInit+0x288>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	633b      	str	r3, [r7, #48]	; 0x30
 8003034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003036:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800303a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303c:	2302      	movs	r3, #2
 800303e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003040:	2301      	movs	r3, #1
 8003042:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003044:	2303      	movs	r3, #3
 8003046:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003048:	2308      	movs	r3, #8
 800304a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800304c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003050:	4619      	mov	r1, r3
 8003052:	487e      	ldr	r0, [pc, #504]	; (800324c <HAL_UART_MspInit+0x28c>)
 8003054:	f001 fce2 	bl	8004a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003058:	2304      	movs	r3, #4
 800305a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305c:	2302      	movs	r3, #2
 800305e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003060:	2301      	movs	r3, #1
 8003062:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003064:	2303      	movs	r3, #3
 8003066:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003068:	2308      	movs	r3, #8
 800306a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800306c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003070:	4619      	mov	r1, r3
 8003072:	4877      	ldr	r0, [pc, #476]	; (8003250 <HAL_UART_MspInit+0x290>)
 8003074:	f001 fcd2 	bl	8004a1c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003078:	e12b      	b.n	80032d2 <HAL_UART_MspInit+0x312>
  else if(uartHandle->Instance==USART1)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a75      	ldr	r2, [pc, #468]	; (8003254 <HAL_UART_MspInit+0x294>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d12c      	bne.n	80030de <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003084:	2300      	movs	r3, #0
 8003086:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003088:	4b6f      	ldr	r3, [pc, #444]	; (8003248 <HAL_UART_MspInit+0x288>)
 800308a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308c:	4a6e      	ldr	r2, [pc, #440]	; (8003248 <HAL_UART_MspInit+0x288>)
 800308e:	f043 0310 	orr.w	r3, r3, #16
 8003092:	6453      	str	r3, [r2, #68]	; 0x44
 8003094:	4b6c      	ldr	r3, [pc, #432]	; (8003248 <HAL_UART_MspInit+0x288>)
 8003096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003098:	f003 0310 	and.w	r3, r3, #16
 800309c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800309e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030a0:	2300      	movs	r3, #0
 80030a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80030a4:	4b68      	ldr	r3, [pc, #416]	; (8003248 <HAL_UART_MspInit+0x288>)
 80030a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a8:	4a67      	ldr	r2, [pc, #412]	; (8003248 <HAL_UART_MspInit+0x288>)
 80030aa:	f043 0302 	orr.w	r3, r3, #2
 80030ae:	6313      	str	r3, [r2, #48]	; 0x30
 80030b0:	4b65      	ldr	r3, [pc, #404]	; (8003248 <HAL_UART_MspInit+0x288>)
 80030b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030bc:	23c0      	movs	r3, #192	; 0xc0
 80030be:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c0:	2302      	movs	r3, #2
 80030c2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030c8:	2303      	movs	r3, #3
 80030ca:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030cc:	2307      	movs	r3, #7
 80030ce:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030d4:	4619      	mov	r1, r3
 80030d6:	4860      	ldr	r0, [pc, #384]	; (8003258 <HAL_UART_MspInit+0x298>)
 80030d8:	f001 fca0 	bl	8004a1c <HAL_GPIO_Init>
}
 80030dc:	e0f9      	b.n	80032d2 <HAL_UART_MspInit+0x312>
  else if(uartHandle->Instance==USART2)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a5e      	ldr	r2, [pc, #376]	; (800325c <HAL_UART_MspInit+0x29c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d12c      	bne.n	8003142 <HAL_UART_MspInit+0x182>
    __HAL_RCC_USART2_CLK_ENABLE();
 80030e8:	2300      	movs	r3, #0
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
 80030ec:	4b56      	ldr	r3, [pc, #344]	; (8003248 <HAL_UART_MspInit+0x288>)
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	4a55      	ldr	r2, [pc, #340]	; (8003248 <HAL_UART_MspInit+0x288>)
 80030f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030f6:	6413      	str	r3, [r2, #64]	; 0x40
 80030f8:	4b53      	ldr	r3, [pc, #332]	; (8003248 <HAL_UART_MspInit+0x288>)
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003104:	2300      	movs	r3, #0
 8003106:	623b      	str	r3, [r7, #32]
 8003108:	4b4f      	ldr	r3, [pc, #316]	; (8003248 <HAL_UART_MspInit+0x288>)
 800310a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310c:	4a4e      	ldr	r2, [pc, #312]	; (8003248 <HAL_UART_MspInit+0x288>)
 800310e:	f043 0301 	orr.w	r3, r3, #1
 8003112:	6313      	str	r3, [r2, #48]	; 0x30
 8003114:	4b4c      	ldr	r3, [pc, #304]	; (8003248 <HAL_UART_MspInit+0x288>)
 8003116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	623b      	str	r3, [r7, #32]
 800311e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003120:	230c      	movs	r3, #12
 8003122:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003124:	2302      	movs	r3, #2
 8003126:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003128:	2300      	movs	r3, #0
 800312a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800312c:	2303      	movs	r3, #3
 800312e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003130:	2307      	movs	r3, #7
 8003132:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003134:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003138:	4619      	mov	r1, r3
 800313a:	4849      	ldr	r0, [pc, #292]	; (8003260 <HAL_UART_MspInit+0x2a0>)
 800313c:	f001 fc6e 	bl	8004a1c <HAL_GPIO_Init>
}
 8003140:	e0c7      	b.n	80032d2 <HAL_UART_MspInit+0x312>
  else if(uartHandle->Instance==USART3)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a47      	ldr	r2, [pc, #284]	; (8003264 <HAL_UART_MspInit+0x2a4>)
 8003148:	4293      	cmp	r3, r2
 800314a:	f040 8091 	bne.w	8003270 <HAL_UART_MspInit+0x2b0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	61fb      	str	r3, [r7, #28]
 8003152:	4b3d      	ldr	r3, [pc, #244]	; (8003248 <HAL_UART_MspInit+0x288>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	4a3c      	ldr	r2, [pc, #240]	; (8003248 <HAL_UART_MspInit+0x288>)
 8003158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800315c:	6413      	str	r3, [r2, #64]	; 0x40
 800315e:	4b3a      	ldr	r3, [pc, #232]	; (8003248 <HAL_UART_MspInit+0x288>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003166:	61fb      	str	r3, [r7, #28]
 8003168:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800316a:	2300      	movs	r3, #0
 800316c:	61bb      	str	r3, [r7, #24]
 800316e:	4b36      	ldr	r3, [pc, #216]	; (8003248 <HAL_UART_MspInit+0x288>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	4a35      	ldr	r2, [pc, #212]	; (8003248 <HAL_UART_MspInit+0x288>)
 8003174:	f043 0304 	orr.w	r3, r3, #4
 8003178:	6313      	str	r3, [r2, #48]	; 0x30
 800317a:	4b33      	ldr	r3, [pc, #204]	; (8003248 <HAL_UART_MspInit+0x288>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	61bb      	str	r3, [r7, #24]
 8003184:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	4b2f      	ldr	r3, [pc, #188]	; (8003248 <HAL_UART_MspInit+0x288>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	4a2e      	ldr	r2, [pc, #184]	; (8003248 <HAL_UART_MspInit+0x288>)
 8003190:	f043 0302 	orr.w	r3, r3, #2
 8003194:	6313      	str	r3, [r2, #48]	; 0x30
 8003196:	4b2c      	ldr	r3, [pc, #176]	; (8003248 <HAL_UART_MspInit+0x288>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	617b      	str	r3, [r7, #20]
 80031a0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80031a2:	2320      	movs	r3, #32
 80031a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a6:	2302      	movs	r3, #2
 80031a8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ae:	2303      	movs	r3, #3
 80031b0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80031b2:	2307      	movs	r3, #7
 80031b4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80031ba:	4619      	mov	r1, r3
 80031bc:	4823      	ldr	r0, [pc, #140]	; (800324c <HAL_UART_MspInit+0x28c>)
 80031be:	f001 fc2d 	bl	8004a1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80031c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c8:	2302      	movs	r3, #2
 80031ca:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d0:	2303      	movs	r3, #3
 80031d2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80031d4:	2307      	movs	r3, #7
 80031d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80031dc:	4619      	mov	r1, r3
 80031de:	481e      	ldr	r0, [pc, #120]	; (8003258 <HAL_UART_MspInit+0x298>)
 80031e0:	f001 fc1c 	bl	8004a1c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80031e4:	4b20      	ldr	r3, [pc, #128]	; (8003268 <HAL_UART_MspInit+0x2a8>)
 80031e6:	4a21      	ldr	r2, [pc, #132]	; (800326c <HAL_UART_MspInit+0x2ac>)
 80031e8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80031ea:	4b1f      	ldr	r3, [pc, #124]	; (8003268 <HAL_UART_MspInit+0x2a8>)
 80031ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031f0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031f2:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <HAL_UART_MspInit+0x2a8>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031f8:	4b1b      	ldr	r3, [pc, #108]	; (8003268 <HAL_UART_MspInit+0x2a8>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031fe:	4b1a      	ldr	r3, [pc, #104]	; (8003268 <HAL_UART_MspInit+0x2a8>)
 8003200:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003204:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003206:	4b18      	ldr	r3, [pc, #96]	; (8003268 <HAL_UART_MspInit+0x2a8>)
 8003208:	2200      	movs	r2, #0
 800320a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800320c:	4b16      	ldr	r3, [pc, #88]	; (8003268 <HAL_UART_MspInit+0x2a8>)
 800320e:	2200      	movs	r2, #0
 8003210:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003212:	4b15      	ldr	r3, [pc, #84]	; (8003268 <HAL_UART_MspInit+0x2a8>)
 8003214:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003218:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800321a:	4b13      	ldr	r3, [pc, #76]	; (8003268 <HAL_UART_MspInit+0x2a8>)
 800321c:	2200      	movs	r2, #0
 800321e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003220:	4b11      	ldr	r3, [pc, #68]	; (8003268 <HAL_UART_MspInit+0x2a8>)
 8003222:	2200      	movs	r2, #0
 8003224:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003226:	4810      	ldr	r0, [pc, #64]	; (8003268 <HAL_UART_MspInit+0x2a8>)
 8003228:	f001 f88a 	bl	8004340 <HAL_DMA_Init>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_UART_MspInit+0x276>
      Error_Handler();
 8003232:	f7fe ffd3 	bl	80021dc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a0b      	ldr	r2, [pc, #44]	; (8003268 <HAL_UART_MspInit+0x2a8>)
 800323a:	635a      	str	r2, [r3, #52]	; 0x34
 800323c:	4a0a      	ldr	r2, [pc, #40]	; (8003268 <HAL_UART_MspInit+0x2a8>)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003242:	e046      	b.n	80032d2 <HAL_UART_MspInit+0x312>
 8003244:	40005000 	.word	0x40005000
 8003248:	40023800 	.word	0x40023800
 800324c:	40020800 	.word	0x40020800
 8003250:	40020c00 	.word	0x40020c00
 8003254:	40011000 	.word	0x40011000
 8003258:	40020400 	.word	0x40020400
 800325c:	40004400 	.word	0x40004400
 8003260:	40020000 	.word	0x40020000
 8003264:	40004800 	.word	0x40004800
 8003268:	20000608 	.word	0x20000608
 800326c:	40026028 	.word	0x40026028
  else if(uartHandle->Instance==USART6)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a19      	ldr	r2, [pc, #100]	; (80032dc <HAL_UART_MspInit+0x31c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d12b      	bne.n	80032d2 <HAL_UART_MspInit+0x312>
    __HAL_RCC_USART6_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	4b18      	ldr	r3, [pc, #96]	; (80032e0 <HAL_UART_MspInit+0x320>)
 8003280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003282:	4a17      	ldr	r2, [pc, #92]	; (80032e0 <HAL_UART_MspInit+0x320>)
 8003284:	f043 0320 	orr.w	r3, r3, #32
 8003288:	6453      	str	r3, [r2, #68]	; 0x44
 800328a:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <HAL_UART_MspInit+0x320>)
 800328c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	613b      	str	r3, [r7, #16]
 8003294:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003296:	2300      	movs	r3, #0
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <HAL_UART_MspInit+0x320>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	4a10      	ldr	r2, [pc, #64]	; (80032e0 <HAL_UART_MspInit+0x320>)
 80032a0:	f043 0304 	orr.w	r3, r3, #4
 80032a4:	6313      	str	r3, [r2, #48]	; 0x30
 80032a6:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <HAL_UART_MspInit+0x320>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	f003 0304 	and.w	r3, r3, #4
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032b2:	23c0      	movs	r3, #192	; 0xc0
 80032b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b6:	2302      	movs	r3, #2
 80032b8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032be:	2303      	movs	r3, #3
 80032c0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80032c2:	2308      	movs	r3, #8
 80032c4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80032ca:	4619      	mov	r1, r3
 80032cc:	4805      	ldr	r0, [pc, #20]	; (80032e4 <HAL_UART_MspInit+0x324>)
 80032ce:	f001 fba5 	bl	8004a1c <HAL_GPIO_Init>
}
 80032d2:	bf00      	nop
 80032d4:	3750      	adds	r7, #80	; 0x50
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40011400 	.word	0x40011400
 80032e0:	40023800 	.word	0x40023800
 80032e4:	40020800 	.word	0x40020800

080032e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80032e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003320 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80032ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80032ee:	e003      	b.n	80032f8 <LoopCopyDataInit>

080032f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80032f0:	4b0c      	ldr	r3, [pc, #48]	; (8003324 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80032f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80032f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80032f6:	3104      	adds	r1, #4

080032f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80032f8:	480b      	ldr	r0, [pc, #44]	; (8003328 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80032fa:	4b0c      	ldr	r3, [pc, #48]	; (800332c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80032fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80032fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003300:	d3f6      	bcc.n	80032f0 <CopyDataInit>
  ldr  r2, =_sbss
 8003302:	4a0b      	ldr	r2, [pc, #44]	; (8003330 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003304:	e002      	b.n	800330c <LoopFillZerobss>

08003306 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003306:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003308:	f842 3b04 	str.w	r3, [r2], #4

0800330c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800330c:	4b09      	ldr	r3, [pc, #36]	; (8003334 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800330e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003310:	d3f9      	bcc.n	8003306 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003312:	f7ff fa41 	bl	8002798 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003316:	f004 f80d 	bl	8007334 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800331a:	f7fe f87f 	bl	800141c <main>
  bx  lr    
 800331e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003320:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003324:	08009a20 	.word	0x08009a20
  ldr  r0, =_sdata
 8003328:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800332c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8003330:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8003334:	200007b0 	.word	0x200007b0

08003338 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003338:	e7fe      	b.n	8003338 <ADC_IRQHandler>
	...

0800333c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003340:	4b0e      	ldr	r3, [pc, #56]	; (800337c <HAL_Init+0x40>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a0d      	ldr	r2, [pc, #52]	; (800337c <HAL_Init+0x40>)
 8003346:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800334a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800334c:	4b0b      	ldr	r3, [pc, #44]	; (800337c <HAL_Init+0x40>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a0a      	ldr	r2, [pc, #40]	; (800337c <HAL_Init+0x40>)
 8003352:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003356:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003358:	4b08      	ldr	r3, [pc, #32]	; (800337c <HAL_Init+0x40>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a07      	ldr	r2, [pc, #28]	; (800337c <HAL_Init+0x40>)
 800335e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003362:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003364:	2003      	movs	r0, #3
 8003366:	f000 ffa9 	bl	80042bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800336a:	2000      	movs	r0, #0
 800336c:	f000 f808 	bl	8003380 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003370:	f7ff f8e6 	bl	8002540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40023c00 	.word	0x40023c00

08003380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003388:	4b12      	ldr	r3, [pc, #72]	; (80033d4 <HAL_InitTick+0x54>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	4b12      	ldr	r3, [pc, #72]	; (80033d8 <HAL_InitTick+0x58>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	4619      	mov	r1, r3
 8003392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003396:	fbb3 f3f1 	udiv	r3, r3, r1
 800339a:	fbb2 f3f3 	udiv	r3, r2, r3
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 ffc1 	bl	8004326 <HAL_SYSTICK_Config>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e00e      	b.n	80033cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b0f      	cmp	r3, #15
 80033b2:	d80a      	bhi.n	80033ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033b4:	2200      	movs	r2, #0
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	f04f 30ff 	mov.w	r0, #4294967295
 80033bc:	f000 ff89 	bl	80042d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033c0:	4a06      	ldr	r2, [pc, #24]	; (80033dc <HAL_InitTick+0x5c>)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
 80033c8:	e000      	b.n	80033cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	20000000 	.word	0x20000000
 80033d8:	20000008 	.word	0x20000008
 80033dc:	20000004 	.word	0x20000004

080033e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033e4:	4b06      	ldr	r3, [pc, #24]	; (8003400 <HAL_IncTick+0x20>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	461a      	mov	r2, r3
 80033ea:	4b06      	ldr	r3, [pc, #24]	; (8003404 <HAL_IncTick+0x24>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4413      	add	r3, r2
 80033f0:	4a04      	ldr	r2, [pc, #16]	; (8003404 <HAL_IncTick+0x24>)
 80033f2:	6013      	str	r3, [r2, #0]
}
 80033f4:	bf00      	nop
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	20000008 	.word	0x20000008
 8003404:	200007a8 	.word	0x200007a8

08003408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  return uwTick;
 800340c:	4b03      	ldr	r3, [pc, #12]	; (800341c <HAL_GetTick+0x14>)
 800340e:	681b      	ldr	r3, [r3, #0]
}
 8003410:	4618      	mov	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	200007a8 	.word	0x200007a8

08003420 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003428:	f7ff ffee 	bl	8003408 <HAL_GetTick>
 800342c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003438:	d005      	beq.n	8003446 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800343a:	4b09      	ldr	r3, [pc, #36]	; (8003460 <HAL_Delay+0x40>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	461a      	mov	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4413      	add	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003446:	bf00      	nop
 8003448:	f7ff ffde 	bl	8003408 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	429a      	cmp	r2, r3
 8003456:	d8f7      	bhi.n	8003448 <HAL_Delay+0x28>
  {
  }
}
 8003458:	bf00      	nop
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	20000008 	.word	0x20000008

08003464 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e0ed      	b.n	8003652 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 3020 	ldrb.w	r3, [r3, #32]
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d102      	bne.n	8003488 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7fd fe12 	bl	80010ac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0202 	bic.w	r2, r2, #2
 8003496:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003498:	f7ff ffb6 	bl	8003408 <HAL_GetTick>
 800349c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800349e:	e012      	b.n	80034c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034a0:	f7ff ffb2 	bl	8003408 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b0a      	cmp	r3, #10
 80034ac:	d90b      	bls.n	80034c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2205      	movs	r2, #5
 80034be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e0c5      	b.n	8003652 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1e5      	bne.n	80034a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0201 	orr.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034e4:	f7ff ff90 	bl	8003408 <HAL_GetTick>
 80034e8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80034ea:	e012      	b.n	8003512 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034ec:	f7ff ff8c 	bl	8003408 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b0a      	cmp	r3, #10
 80034f8:	d90b      	bls.n	8003512 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2205      	movs	r2, #5
 800350a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e09f      	b.n	8003652 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0e5      	beq.n	80034ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	7e1b      	ldrb	r3, [r3, #24]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d108      	bne.n	800353a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	e007      	b.n	800354a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003548:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	7e5b      	ldrb	r3, [r3, #25]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d108      	bne.n	8003564 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	e007      	b.n	8003574 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003572:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	7e9b      	ldrb	r3, [r3, #26]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d108      	bne.n	800358e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0220 	orr.w	r2, r2, #32
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	e007      	b.n	800359e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0220 	bic.w	r2, r2, #32
 800359c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	7edb      	ldrb	r3, [r3, #27]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d108      	bne.n	80035b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0210 	bic.w	r2, r2, #16
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	e007      	b.n	80035c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0210 	orr.w	r2, r2, #16
 80035c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	7f1b      	ldrb	r3, [r3, #28]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d108      	bne.n	80035e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0208 	orr.w	r2, r2, #8
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	e007      	b.n	80035f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0208 	bic.w	r2, r2, #8
 80035f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	7f5b      	ldrb	r3, [r3, #29]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d108      	bne.n	800360c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f042 0204 	orr.w	r2, r2, #4
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	e007      	b.n	800361c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0204 	bic.w	r2, r2, #4
 800361a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	ea42 0103 	orr.w	r1, r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	1e5a      	subs	r2, r3, #1
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800365c:	b480      	push	{r7}
 800365e:	b087      	sub	sp, #28
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003672:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003674:	7cfb      	ldrb	r3, [r7, #19]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d003      	beq.n	8003682 <HAL_CAN_ConfigFilter+0x26>
 800367a:	7cfb      	ldrb	r3, [r7, #19]
 800367c:	2b02      	cmp	r3, #2
 800367e:	f040 80be 	bne.w	80037fe <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003682:	4b65      	ldr	r3, [pc, #404]	; (8003818 <HAL_CAN_ConfigFilter+0x1bc>)
 8003684:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800368c:	f043 0201 	orr.w	r2, r3, #1
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800369c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	021b      	lsls	r3, r3, #8
 80036b2:	431a      	orrs	r2, r3
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	f003 031f 	and.w	r3, r3, #31
 80036c2:	2201      	movs	r2, #1
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	43db      	mvns	r3, r3
 80036d4:	401a      	ands	r2, r3
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d123      	bne.n	800372c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	43db      	mvns	r3, r3
 80036ee:	401a      	ands	r2, r3
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003706:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	3248      	adds	r2, #72	; 0x48
 800370c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003720:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003722:	6979      	ldr	r1, [r7, #20]
 8003724:	3348      	adds	r3, #72	; 0x48
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	440b      	add	r3, r1
 800372a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d122      	bne.n	800377a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	431a      	orrs	r2, r3
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003754:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	3248      	adds	r2, #72	; 0x48
 800375a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800376e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003770:	6979      	ldr	r1, [r7, #20]
 8003772:	3348      	adds	r3, #72	; 0x48
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	440b      	add	r3, r1
 8003778:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d109      	bne.n	8003796 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	43db      	mvns	r3, r3
 800378c:	401a      	ands	r2, r3
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003794:	e007      	b.n	80037a6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	431a      	orrs	r2, r3
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d109      	bne.n	80037c2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	43db      	mvns	r3, r3
 80037b8:	401a      	ands	r2, r3
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80037c0:	e007      	b.n	80037d2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	431a      	orrs	r2, r3
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d107      	bne.n	80037ea <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	431a      	orrs	r2, r3
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80037f0:	f023 0201 	bic.w	r2, r3, #1
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	e006      	b.n	800380c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
  }
}
 800380c:	4618      	mov	r0, r3
 800380e:	371c      	adds	r7, #28
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	40006400 	.word	0x40006400

0800381c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3020 	ldrb.w	r3, [r3, #32]
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b01      	cmp	r3, #1
 800382e:	d12e      	bne.n	800388e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0201 	bic.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003848:	f7ff fdde 	bl	8003408 <HAL_GetTick>
 800384c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800384e:	e012      	b.n	8003876 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003850:	f7ff fdda 	bl	8003408 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b0a      	cmp	r3, #10
 800385c:	d90b      	bls.n	8003876 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2205      	movs	r2, #5
 800386e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e012      	b.n	800389c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1e5      	bne.n	8003850 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	e006      	b.n	800389c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
  }
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b089      	sub	sp, #36	; 0x24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038b8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80038c2:	7ffb      	ldrb	r3, [r7, #31]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d003      	beq.n	80038d0 <HAL_CAN_AddTxMessage+0x2c>
 80038c8:	7ffb      	ldrb	r3, [r7, #31]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	f040 80b8 	bne.w	8003a40 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10a      	bne.n	80038f0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d105      	bne.n	80038f0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 80a0 	beq.w	8003a30 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	0e1b      	lsrs	r3, r3, #24
 80038f4:	f003 0303 	and.w	r3, r3, #3
 80038f8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d907      	bls.n	8003910 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e09e      	b.n	8003a4e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003910:	2201      	movs	r2, #1
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	409a      	lsls	r2, r3
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10d      	bne.n	800393e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800392c:	68f9      	ldr	r1, [r7, #12]
 800392e:	6809      	ldr	r1, [r1, #0]
 8003930:	431a      	orrs	r2, r3
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	3318      	adds	r3, #24
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	440b      	add	r3, r1
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	e00f      	b.n	800395e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003948:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800394e:	68f9      	ldr	r1, [r7, #12]
 8003950:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003952:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	3318      	adds	r3, #24
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	440b      	add	r3, r1
 800395c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6819      	ldr	r1, [r3, #0]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	691a      	ldr	r2, [r3, #16]
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	3318      	adds	r3, #24
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	440b      	add	r3, r1
 800396e:	3304      	adds	r3, #4
 8003970:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	7d1b      	ldrb	r3, [r3, #20]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d111      	bne.n	800399e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	3318      	adds	r3, #24
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	4413      	add	r3, r2
 8003986:	3304      	adds	r3, #4
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	6811      	ldr	r1, [r2, #0]
 800398e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	3318      	adds	r3, #24
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	440b      	add	r3, r1
 800399a:	3304      	adds	r3, #4
 800399c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3307      	adds	r3, #7
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	061a      	lsls	r2, r3, #24
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3306      	adds	r3, #6
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	041b      	lsls	r3, r3, #16
 80039ae:	431a      	orrs	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	3305      	adds	r3, #5
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	021b      	lsls	r3, r3, #8
 80039b8:	4313      	orrs	r3, r2
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	3204      	adds	r2, #4
 80039be:	7812      	ldrb	r2, [r2, #0]
 80039c0:	4610      	mov	r0, r2
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	6811      	ldr	r1, [r2, #0]
 80039c6:	ea43 0200 	orr.w	r2, r3, r0
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	440b      	add	r3, r1
 80039d0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80039d4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	3303      	adds	r3, #3
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	061a      	lsls	r2, r3, #24
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3302      	adds	r3, #2
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	041b      	lsls	r3, r3, #16
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3301      	adds	r3, #1
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	021b      	lsls	r3, r3, #8
 80039f0:	4313      	orrs	r3, r2
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	7812      	ldrb	r2, [r2, #0]
 80039f6:	4610      	mov	r0, r2
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	6811      	ldr	r1, [r2, #0]
 80039fc:	ea43 0200 	orr.w	r2, r3, r0
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	440b      	add	r3, r1
 8003a06:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003a0a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	3318      	adds	r3, #24
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	4413      	add	r3, r2
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	6811      	ldr	r1, [r2, #0]
 8003a1e:	f043 0201 	orr.w	r2, r3, #1
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	3318      	adds	r3, #24
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	440b      	add	r3, r1
 8003a2a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	e00e      	b.n	8003a4e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e006      	b.n	8003a4e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
  }
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3724      	adds	r7, #36	; 0x24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b087      	sub	sp, #28
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	607a      	str	r2, [r7, #4]
 8003a66:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a6e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003a70:	7dfb      	ldrb	r3, [r7, #23]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d003      	beq.n	8003a7e <HAL_CAN_GetRxMessage+0x24>
 8003a76:	7dfb      	ldrb	r3, [r7, #23]
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	f040 80f3 	bne.w	8003c64 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10e      	bne.n	8003aa2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d116      	bne.n	8003ac0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e0e7      	b.n	8003c72 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	f003 0303 	and.w	r3, r3, #3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d107      	bne.n	8003ac0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0d8      	b.n	8003c72 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	331b      	adds	r3, #27
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	4413      	add	r3, r2
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0204 	and.w	r2, r3, #4
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10c      	bne.n	8003af8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	331b      	adds	r3, #27
 8003ae6:	011b      	lsls	r3, r3, #4
 8003ae8:	4413      	add	r3, r2
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	0d5b      	lsrs	r3, r3, #21
 8003aee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	e00b      	b.n	8003b10 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	331b      	adds	r3, #27
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	4413      	add	r3, r2
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	08db      	lsrs	r3, r3, #3
 8003b08:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	331b      	adds	r3, #27
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	4413      	add	r3, r2
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0202 	and.w	r2, r3, #2
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	331b      	adds	r3, #27
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	4413      	add	r3, r2
 8003b32:	3304      	adds	r3, #4
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 020f 	and.w	r2, r3, #15
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	331b      	adds	r3, #27
 8003b46:	011b      	lsls	r3, r3, #4
 8003b48:	4413      	add	r3, r2
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	0a1b      	lsrs	r3, r3, #8
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	331b      	adds	r3, #27
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	4413      	add	r3, r2
 8003b62:	3304      	adds	r3, #4
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	0c1b      	lsrs	r3, r3, #16
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	4413      	add	r3, r2
 8003b78:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	0a1a      	lsrs	r2, r3, #8
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	0c1a      	lsrs	r2, r3, #16
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	3302      	adds	r3, #2
 8003bb4:	b2d2      	uxtb	r2, r2
 8003bb6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	0e1a      	lsrs	r2, r3, #24
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	3303      	adds	r3, #3
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	3304      	adds	r3, #4
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	0a1a      	lsrs	r2, r3, #8
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	3305      	adds	r3, #5
 8003c00:	b2d2      	uxtb	r2, r2
 8003c02:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	0c1a      	lsrs	r2, r3, #16
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	3306      	adds	r3, #6
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	0e1a      	lsrs	r2, r3, #24
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	3307      	adds	r3, #7
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d108      	bne.n	8003c50 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68da      	ldr	r2, [r3, #12]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f042 0220 	orr.w	r2, r2, #32
 8003c4c:	60da      	str	r2, [r3, #12]
 8003c4e:	e007      	b.n	8003c60 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	691a      	ldr	r2, [r3, #16]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0220 	orr.w	r2, r2, #32
 8003c5e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	e006      	b.n	8003c72 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
  }
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b085      	sub	sp, #20
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c8e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c90:	7bfb      	ldrb	r3, [r7, #15]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d002      	beq.n	8003c9c <HAL_CAN_ActivateNotification+0x1e>
 8003c96:	7bfb      	ldrb	r3, [r7, #15]
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d109      	bne.n	8003cb0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6959      	ldr	r1, [r3, #20]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	e006      	b.n	8003cbe <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
  }
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b08a      	sub	sp, #40	; 0x28
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d07c      	beq.n	8003e0a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d023      	beq.n	8003d62 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d003      	beq.n	8003d34 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f97d 	bl	800402c <HAL_CAN_TxMailbox0CompleteCallback>
 8003d32:	e016      	b.n	8003d62 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	f003 0304 	and.w	r3, r3, #4
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d004      	beq.n	8003d48 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d44:	627b      	str	r3, [r7, #36]	; 0x24
 8003d46:	e00c      	b.n	8003d62 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d004      	beq.n	8003d5c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24
 8003d5a:	e002      	b.n	8003d62 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f983 	bl	8004068 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d024      	beq.n	8003db6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d74:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f95d 	bl	8004040 <HAL_CAN_TxMailbox1CompleteCallback>
 8003d86:	e016      	b.n	8003db6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d004      	beq.n	8003d9c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
 8003d9a:	e00c      	b.n	8003db6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d004      	beq.n	8003db0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dac:	627b      	str	r3, [r7, #36]	; 0x24
 8003dae:	e002      	b.n	8003db6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f963 	bl	800407c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d024      	beq.n	8003e0a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003dc8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d003      	beq.n	8003ddc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f93d 	bl	8004054 <HAL_CAN_TxMailbox2CompleteCallback>
 8003dda:	e016      	b.n	8003e0a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d004      	beq.n	8003df0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
 8003dee:	e00c      	b.n	8003e0a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d004      	beq.n	8003e04 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e00:	627b      	str	r3, [r7, #36]	; 0x24
 8003e02:	e002      	b.n	8003e0a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f943 	bl	8004090 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	f003 0308 	and.w	r3, r3, #8
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00c      	beq.n	8003e2e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f003 0310 	and.w	r3, r3, #16
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d007      	beq.n	8003e2e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e24:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2210      	movs	r2, #16
 8003e2c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00b      	beq.n	8003e50 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d006      	beq.n	8003e50 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2208      	movs	r2, #8
 8003e48:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f92a 	bl	80040a4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d009      	beq.n	8003e6e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	f003 0303 	and.w	r3, r3, #3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7fd fcd5 	bl	8001818 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00c      	beq.n	8003e92 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	f003 0310 	and.w	r3, r3, #16
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d007      	beq.n	8003e92 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e88:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2210      	movs	r2, #16
 8003e90:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	f003 0320 	and.w	r3, r3, #32
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00b      	beq.n	8003eb4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d006      	beq.n	8003eb4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2208      	movs	r2, #8
 8003eac:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f90c 	bl	80040cc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
 8003eb6:	f003 0310 	and.w	r3, r3, #16
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d009      	beq.n	8003ed2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	f003 0303 	and.w	r3, r3, #3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f8f3 	bl	80040b8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00b      	beq.n	8003ef4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f003 0310 	and.w	r3, r3, #16
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d006      	beq.n	8003ef4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2210      	movs	r2, #16
 8003eec:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f8f6 	bl	80040e0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00b      	beq.n	8003f16 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	f003 0308 	and.w	r3, r3, #8
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d006      	beq.n	8003f16 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2208      	movs	r2, #8
 8003f0e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f8ef 	bl	80040f4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d075      	beq.n	800400c <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f003 0304 	and.w	r3, r3, #4
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d06c      	beq.n	8004004 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d008      	beq.n	8003f46 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	f043 0301 	orr.w	r3, r3, #1
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003f46:	6a3b      	ldr	r3, [r7, #32]
 8003f48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d008      	beq.n	8003f62 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	f043 0302 	orr.w	r3, r3, #2
 8003f60:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d008      	beq.n	8003f7e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	f043 0304 	orr.w	r3, r3, #4
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003f7e:	6a3b      	ldr	r3, [r7, #32]
 8003f80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d03d      	beq.n	8004004 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d038      	beq.n	8004004 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f98:	2b30      	cmp	r3, #48	; 0x30
 8003f9a:	d017      	beq.n	8003fcc <HAL_CAN_IRQHandler+0x302>
 8003f9c:	2b30      	cmp	r3, #48	; 0x30
 8003f9e:	d804      	bhi.n	8003faa <HAL_CAN_IRQHandler+0x2e0>
 8003fa0:	2b10      	cmp	r3, #16
 8003fa2:	d009      	beq.n	8003fb8 <HAL_CAN_IRQHandler+0x2ee>
 8003fa4:	2b20      	cmp	r3, #32
 8003fa6:	d00c      	beq.n	8003fc2 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003fa8:	e024      	b.n	8003ff4 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8003faa:	2b50      	cmp	r3, #80	; 0x50
 8003fac:	d018      	beq.n	8003fe0 <HAL_CAN_IRQHandler+0x316>
 8003fae:	2b60      	cmp	r3, #96	; 0x60
 8003fb0:	d01b      	beq.n	8003fea <HAL_CAN_IRQHandler+0x320>
 8003fb2:	2b40      	cmp	r3, #64	; 0x40
 8003fb4:	d00f      	beq.n	8003fd6 <HAL_CAN_IRQHandler+0x30c>
            break;
 8003fb6:	e01d      	b.n	8003ff4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	f043 0308 	orr.w	r3, r3, #8
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003fc0:	e018      	b.n	8003ff4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	f043 0310 	orr.w	r3, r3, #16
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003fca:	e013      	b.n	8003ff4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fce:	f043 0320 	orr.w	r3, r3, #32
 8003fd2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003fd4:	e00e      	b.n	8003ff4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fdc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003fde:	e009      	b.n	8003ff4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fe6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003fe8:	e004      	b.n	8003ff4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ff2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699a      	ldr	r2, [r3, #24]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004002:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2204      	movs	r2, #4
 800400a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	2b00      	cmp	r3, #0
 8004010:	d008      	beq.n	8004024 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	431a      	orrs	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f872 	bl	8004108 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004024:	bf00      	nop
 8004026:	3728      	adds	r7, #40	; 0x28
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f003 0307 	and.w	r3, r3, #7
 800412a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800412c:	4b0c      	ldr	r3, [pc, #48]	; (8004160 <__NVIC_SetPriorityGrouping+0x44>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004138:	4013      	ands	r3, r2
 800413a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004144:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800414c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800414e:	4a04      	ldr	r2, [pc, #16]	; (8004160 <__NVIC_SetPriorityGrouping+0x44>)
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	60d3      	str	r3, [r2, #12]
}
 8004154:	bf00      	nop
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	e000ed00 	.word	0xe000ed00

08004164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004168:	4b04      	ldr	r3, [pc, #16]	; (800417c <__NVIC_GetPriorityGrouping+0x18>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	0a1b      	lsrs	r3, r3, #8
 800416e:	f003 0307 	and.w	r3, r3, #7
}
 8004172:	4618      	mov	r0, r3
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	e000ed00 	.word	0xe000ed00

08004180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	4603      	mov	r3, r0
 8004188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800418a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418e:	2b00      	cmp	r3, #0
 8004190:	db0b      	blt.n	80041aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004192:	79fb      	ldrb	r3, [r7, #7]
 8004194:	f003 021f 	and.w	r2, r3, #31
 8004198:	4907      	ldr	r1, [pc, #28]	; (80041b8 <__NVIC_EnableIRQ+0x38>)
 800419a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419e:	095b      	lsrs	r3, r3, #5
 80041a0:	2001      	movs	r0, #1
 80041a2:	fa00 f202 	lsl.w	r2, r0, r2
 80041a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	e000e100 	.word	0xe000e100

080041bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	4603      	mov	r3, r0
 80041c4:	6039      	str	r1, [r7, #0]
 80041c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	db0a      	blt.n	80041e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	490c      	ldr	r1, [pc, #48]	; (8004208 <__NVIC_SetPriority+0x4c>)
 80041d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041da:	0112      	lsls	r2, r2, #4
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	440b      	add	r3, r1
 80041e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041e4:	e00a      	b.n	80041fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	4908      	ldr	r1, [pc, #32]	; (800420c <__NVIC_SetPriority+0x50>)
 80041ec:	79fb      	ldrb	r3, [r7, #7]
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	3b04      	subs	r3, #4
 80041f4:	0112      	lsls	r2, r2, #4
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	440b      	add	r3, r1
 80041fa:	761a      	strb	r2, [r3, #24]
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	e000e100 	.word	0xe000e100
 800420c:	e000ed00 	.word	0xe000ed00

08004210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004210:	b480      	push	{r7}
 8004212:	b089      	sub	sp, #36	; 0x24
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	f1c3 0307 	rsb	r3, r3, #7
 800422a:	2b04      	cmp	r3, #4
 800422c:	bf28      	it	cs
 800422e:	2304      	movcs	r3, #4
 8004230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	3304      	adds	r3, #4
 8004236:	2b06      	cmp	r3, #6
 8004238:	d902      	bls.n	8004240 <NVIC_EncodePriority+0x30>
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	3b03      	subs	r3, #3
 800423e:	e000      	b.n	8004242 <NVIC_EncodePriority+0x32>
 8004240:	2300      	movs	r3, #0
 8004242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004244:	f04f 32ff 	mov.w	r2, #4294967295
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	43da      	mvns	r2, r3
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	401a      	ands	r2, r3
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004258:	f04f 31ff 	mov.w	r1, #4294967295
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	fa01 f303 	lsl.w	r3, r1, r3
 8004262:	43d9      	mvns	r1, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004268:	4313      	orrs	r3, r2
         );
}
 800426a:	4618      	mov	r0, r3
 800426c:	3724      	adds	r7, #36	; 0x24
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
	...

08004278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3b01      	subs	r3, #1
 8004284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004288:	d301      	bcc.n	800428e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800428a:	2301      	movs	r3, #1
 800428c:	e00f      	b.n	80042ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800428e:	4a0a      	ldr	r2, [pc, #40]	; (80042b8 <SysTick_Config+0x40>)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3b01      	subs	r3, #1
 8004294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004296:	210f      	movs	r1, #15
 8004298:	f04f 30ff 	mov.w	r0, #4294967295
 800429c:	f7ff ff8e 	bl	80041bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042a0:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <SysTick_Config+0x40>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042a6:	4b04      	ldr	r3, [pc, #16]	; (80042b8 <SysTick_Config+0x40>)
 80042a8:	2207      	movs	r2, #7
 80042aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	e000e010 	.word	0xe000e010

080042bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f7ff ff29 	bl	800411c <__NVIC_SetPriorityGrouping>
}
 80042ca:	bf00      	nop
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b086      	sub	sp, #24
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	4603      	mov	r3, r0
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	607a      	str	r2, [r7, #4]
 80042de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042e4:	f7ff ff3e 	bl	8004164 <__NVIC_GetPriorityGrouping>
 80042e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	68b9      	ldr	r1, [r7, #8]
 80042ee:	6978      	ldr	r0, [r7, #20]
 80042f0:	f7ff ff8e 	bl	8004210 <NVIC_EncodePriority>
 80042f4:	4602      	mov	r2, r0
 80042f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042fa:	4611      	mov	r1, r2
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff ff5d 	bl	80041bc <__NVIC_SetPriority>
}
 8004302:	bf00      	nop
 8004304:	3718      	adds	r7, #24
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b082      	sub	sp, #8
 800430e:	af00      	add	r7, sp, #0
 8004310:	4603      	mov	r3, r0
 8004312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff ff31 	bl	8004180 <__NVIC_EnableIRQ>
}
 800431e:	bf00      	nop
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b082      	sub	sp, #8
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7ff ffa2 	bl	8004278 <SysTick_Config>
 8004334:	4603      	mov	r3, r0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
	...

08004340 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004348:	2300      	movs	r3, #0
 800434a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800434c:	f7ff f85c 	bl	8003408 <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d101      	bne.n	800435c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e099      	b.n	8004490 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2202      	movs	r2, #2
 8004368:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f022 0201 	bic.w	r2, r2, #1
 800437a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800437c:	e00f      	b.n	800439e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800437e:	f7ff f843 	bl	8003408 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b05      	cmp	r3, #5
 800438a:	d908      	bls.n	800439e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2220      	movs	r2, #32
 8004390:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2203      	movs	r2, #3
 8004396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e078      	b.n	8004490 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1e8      	bne.n	800437e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	4b38      	ldr	r3, [pc, #224]	; (8004498 <HAL_DMA_Init+0x158>)
 80043b8:	4013      	ands	r3, r2
 80043ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	2b04      	cmp	r3, #4
 80043f6:	d107      	bne.n	8004408 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004400:	4313      	orrs	r3, r2
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	4313      	orrs	r3, r2
 8004406:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f023 0307 	bic.w	r3, r3, #7
 800441e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	4313      	orrs	r3, r2
 8004428:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	2b04      	cmp	r3, #4
 8004430:	d117      	bne.n	8004462 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	4313      	orrs	r3, r2
 800443a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00e      	beq.n	8004462 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 fa6f 	bl	8004928 <DMA_CheckFifoParam>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2240      	movs	r2, #64	; 0x40
 8004454:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800445e:	2301      	movs	r3, #1
 8004460:	e016      	b.n	8004490 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fa26 	bl	80048bc <DMA_CalcBaseAndBitshift>
 8004470:	4603      	mov	r3, r0
 8004472:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004478:	223f      	movs	r2, #63	; 0x3f
 800447a:	409a      	lsls	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3718      	adds	r7, #24
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	f010803f 	.word	0xf010803f

0800449c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d101      	bne.n	80044c2 <HAL_DMA_Start_IT+0x26>
 80044be:	2302      	movs	r3, #2
 80044c0:	e040      	b.n	8004544 <HAL_DMA_Start_IT+0xa8>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d12f      	bne.n	8004536 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2202      	movs	r2, #2
 80044da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	68b9      	ldr	r1, [r7, #8]
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 f9b8 	bl	8004860 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f4:	223f      	movs	r2, #63	; 0x3f
 80044f6:	409a      	lsls	r2, r3
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0216 	orr.w	r2, r2, #22
 800450a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004510:	2b00      	cmp	r3, #0
 8004512:	d007      	beq.n	8004524 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0208 	orr.w	r2, r2, #8
 8004522:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0201 	orr.w	r2, r2, #1
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	e005      	b.n	8004542 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800453e:	2302      	movs	r3, #2
 8004540:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004542:	7dfb      	ldrb	r3, [r7, #23]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004558:	4b92      	ldr	r3, [pc, #584]	; (80047a4 <HAL_DMA_IRQHandler+0x258>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a92      	ldr	r2, [pc, #584]	; (80047a8 <HAL_DMA_IRQHandler+0x25c>)
 800455e:	fba2 2303 	umull	r2, r3, r2, r3
 8004562:	0a9b      	lsrs	r3, r3, #10
 8004564:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004576:	2208      	movs	r2, #8
 8004578:	409a      	lsls	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	4013      	ands	r3, r2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d01a      	beq.n	80045b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b00      	cmp	r3, #0
 800458e:	d013      	beq.n	80045b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0204 	bic.w	r2, r2, #4
 800459e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a4:	2208      	movs	r2, #8
 80045a6:	409a      	lsls	r2, r3
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b0:	f043 0201 	orr.w	r2, r3, #1
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045bc:	2201      	movs	r2, #1
 80045be:	409a      	lsls	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4013      	ands	r3, r2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d012      	beq.n	80045ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00b      	beq.n	80045ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045da:	2201      	movs	r2, #1
 80045dc:	409a      	lsls	r2, r3
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e6:	f043 0202 	orr.w	r2, r3, #2
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f2:	2204      	movs	r2, #4
 80045f4:	409a      	lsls	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	4013      	ands	r3, r2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d012      	beq.n	8004624 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00b      	beq.n	8004624 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004610:	2204      	movs	r2, #4
 8004612:	409a      	lsls	r2, r3
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461c:	f043 0204 	orr.w	r2, r3, #4
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004628:	2210      	movs	r2, #16
 800462a:	409a      	lsls	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4013      	ands	r3, r2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d043      	beq.n	80046bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0308 	and.w	r3, r3, #8
 800463e:	2b00      	cmp	r3, #0
 8004640:	d03c      	beq.n	80046bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004646:	2210      	movs	r2, #16
 8004648:	409a      	lsls	r2, r3
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d018      	beq.n	800468e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d108      	bne.n	800467c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	2b00      	cmp	r3, #0
 8004670:	d024      	beq.n	80046bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	4798      	blx	r3
 800467a:	e01f      	b.n	80046bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004680:	2b00      	cmp	r3, #0
 8004682:	d01b      	beq.n	80046bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	4798      	blx	r3
 800468c:	e016      	b.n	80046bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004698:	2b00      	cmp	r3, #0
 800469a:	d107      	bne.n	80046ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0208 	bic.w	r2, r2, #8
 80046aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c0:	2220      	movs	r2, #32
 80046c2:	409a      	lsls	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4013      	ands	r3, r2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 808e 	beq.w	80047ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 8086 	beq.w	80047ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e2:	2220      	movs	r2, #32
 80046e4:	409a      	lsls	r2, r3
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b05      	cmp	r3, #5
 80046f4:	d136      	bne.n	8004764 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0216 	bic.w	r2, r2, #22
 8004704:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	695a      	ldr	r2, [r3, #20]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004714:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	2b00      	cmp	r3, #0
 800471c:	d103      	bne.n	8004726 <HAL_DMA_IRQHandler+0x1da>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004722:	2b00      	cmp	r3, #0
 8004724:	d007      	beq.n	8004736 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0208 	bic.w	r2, r2, #8
 8004734:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800473a:	223f      	movs	r2, #63	; 0x3f
 800473c:	409a      	lsls	r2, r3
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004756:	2b00      	cmp	r3, #0
 8004758:	d07d      	beq.n	8004856 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	4798      	blx	r3
        }
        return;
 8004762:	e078      	b.n	8004856 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d01c      	beq.n	80047ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d108      	bne.n	8004792 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004784:	2b00      	cmp	r3, #0
 8004786:	d030      	beq.n	80047ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	4798      	blx	r3
 8004790:	e02b      	b.n	80047ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004796:	2b00      	cmp	r3, #0
 8004798:	d027      	beq.n	80047ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	4798      	blx	r3
 80047a2:	e022      	b.n	80047ea <HAL_DMA_IRQHandler+0x29e>
 80047a4:	20000000 	.word	0x20000000
 80047a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10f      	bne.n	80047da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0210 	bic.w	r2, r2, #16
 80047c8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d032      	beq.n	8004858 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d022      	beq.n	8004844 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2205      	movs	r2, #5
 8004802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0201 	bic.w	r2, r2, #1
 8004814:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	3301      	adds	r3, #1
 800481a:	60bb      	str	r3, [r7, #8]
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	429a      	cmp	r2, r3
 8004820:	d307      	bcc.n	8004832 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1f2      	bne.n	8004816 <HAL_DMA_IRQHandler+0x2ca>
 8004830:	e000      	b.n	8004834 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004832:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004848:	2b00      	cmp	r3, #0
 800484a:	d005      	beq.n	8004858 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	4798      	blx	r3
 8004854:	e000      	b.n	8004858 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004856:	bf00      	nop
    }
  }
}
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop

08004860 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
 800486c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800487c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	2b40      	cmp	r3, #64	; 0x40
 800488c:	d108      	bne.n	80048a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800489e:	e007      	b.n	80048b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	60da      	str	r2, [r3, #12]
}
 80048b0:	bf00      	nop
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	3b10      	subs	r3, #16
 80048cc:	4a14      	ldr	r2, [pc, #80]	; (8004920 <DMA_CalcBaseAndBitshift+0x64>)
 80048ce:	fba2 2303 	umull	r2, r3, r2, r3
 80048d2:	091b      	lsrs	r3, r3, #4
 80048d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80048d6:	4a13      	ldr	r2, [pc, #76]	; (8004924 <DMA_CalcBaseAndBitshift+0x68>)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4413      	add	r3, r2
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	461a      	mov	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2b03      	cmp	r3, #3
 80048e8:	d909      	bls.n	80048fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80048f2:	f023 0303 	bic.w	r3, r3, #3
 80048f6:	1d1a      	adds	r2, r3, #4
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	659a      	str	r2, [r3, #88]	; 0x58
 80048fc:	e007      	b.n	800490e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004906:	f023 0303 	bic.w	r3, r3, #3
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004912:	4618      	mov	r0, r3
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	aaaaaaab 	.word	0xaaaaaaab
 8004924:	0800977c 	.word	0x0800977c

08004928 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004930:	2300      	movs	r3, #0
 8004932:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004938:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d11f      	bne.n	8004982 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2b03      	cmp	r3, #3
 8004946:	d855      	bhi.n	80049f4 <DMA_CheckFifoParam+0xcc>
 8004948:	a201      	add	r2, pc, #4	; (adr r2, 8004950 <DMA_CheckFifoParam+0x28>)
 800494a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494e:	bf00      	nop
 8004950:	08004961 	.word	0x08004961
 8004954:	08004973 	.word	0x08004973
 8004958:	08004961 	.word	0x08004961
 800495c:	080049f5 	.word	0x080049f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004964:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d045      	beq.n	80049f8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004970:	e042      	b.n	80049f8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004976:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800497a:	d13f      	bne.n	80049fc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004980:	e03c      	b.n	80049fc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800498a:	d121      	bne.n	80049d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	2b03      	cmp	r3, #3
 8004990:	d836      	bhi.n	8004a00 <DMA_CheckFifoParam+0xd8>
 8004992:	a201      	add	r2, pc, #4	; (adr r2, 8004998 <DMA_CheckFifoParam+0x70>)
 8004994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004998:	080049a9 	.word	0x080049a9
 800499c:	080049af 	.word	0x080049af
 80049a0:	080049a9 	.word	0x080049a9
 80049a4:	080049c1 	.word	0x080049c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	73fb      	strb	r3, [r7, #15]
      break;
 80049ac:	e02f      	b.n	8004a0e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d024      	beq.n	8004a04 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049be:	e021      	b.n	8004a04 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049c8:	d11e      	bne.n	8004a08 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80049ce:	e01b      	b.n	8004a08 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d902      	bls.n	80049dc <DMA_CheckFifoParam+0xb4>
 80049d6:	2b03      	cmp	r3, #3
 80049d8:	d003      	beq.n	80049e2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80049da:	e018      	b.n	8004a0e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	73fb      	strb	r3, [r7, #15]
      break;
 80049e0:	e015      	b.n	8004a0e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00e      	beq.n	8004a0c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	73fb      	strb	r3, [r7, #15]
      break;
 80049f2:	e00b      	b.n	8004a0c <DMA_CheckFifoParam+0xe4>
      break;
 80049f4:	bf00      	nop
 80049f6:	e00a      	b.n	8004a0e <DMA_CheckFifoParam+0xe6>
      break;
 80049f8:	bf00      	nop
 80049fa:	e008      	b.n	8004a0e <DMA_CheckFifoParam+0xe6>
      break;
 80049fc:	bf00      	nop
 80049fe:	e006      	b.n	8004a0e <DMA_CheckFifoParam+0xe6>
      break;
 8004a00:	bf00      	nop
 8004a02:	e004      	b.n	8004a0e <DMA_CheckFifoParam+0xe6>
      break;
 8004a04:	bf00      	nop
 8004a06:	e002      	b.n	8004a0e <DMA_CheckFifoParam+0xe6>
      break;   
 8004a08:	bf00      	nop
 8004a0a:	e000      	b.n	8004a0e <DMA_CheckFifoParam+0xe6>
      break;
 8004a0c:	bf00      	nop
    }
  } 
  
  return status; 
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b089      	sub	sp, #36	; 0x24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a32:	2300      	movs	r3, #0
 8004a34:	61fb      	str	r3, [r7, #28]
 8004a36:	e165      	b.n	8004d04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a38:	2201      	movs	r2, #1
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	f040 8154 	bne.w	8004cfe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d00b      	beq.n	8004a76 <HAL_GPIO_Init+0x5a>
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d007      	beq.n	8004a76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a6a:	2b11      	cmp	r3, #17
 8004a6c:	d003      	beq.n	8004a76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2b12      	cmp	r3, #18
 8004a74:	d130      	bne.n	8004ad8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	2203      	movs	r2, #3
 8004a82:	fa02 f303 	lsl.w	r3, r2, r3
 8004a86:	43db      	mvns	r3, r3
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	68da      	ldr	r2, [r3, #12]
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004aac:	2201      	movs	r2, #1
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	43db      	mvns	r3, r3
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	091b      	lsrs	r3, r3, #4
 8004ac2:	f003 0201 	and.w	r2, r3, #1
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	2203      	movs	r2, #3
 8004ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae8:	43db      	mvns	r3, r3
 8004aea:	69ba      	ldr	r2, [r7, #24]
 8004aec:	4013      	ands	r3, r2
 8004aee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	fa02 f303 	lsl.w	r3, r2, r3
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d003      	beq.n	8004b18 <HAL_GPIO_Init+0xfc>
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	2b12      	cmp	r3, #18
 8004b16:	d123      	bne.n	8004b60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	08da      	lsrs	r2, r3, #3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3208      	adds	r2, #8
 8004b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	220f      	movs	r2, #15
 8004b30:	fa02 f303 	lsl.w	r3, r2, r3
 8004b34:	43db      	mvns	r3, r3
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	691a      	ldr	r2, [r3, #16]
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f003 0307 	and.w	r3, r3, #7
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	08da      	lsrs	r2, r3, #3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	3208      	adds	r2, #8
 8004b5a:	69b9      	ldr	r1, [r7, #24]
 8004b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	2203      	movs	r2, #3
 8004b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b70:	43db      	mvns	r3, r3
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	4013      	ands	r3, r2
 8004b76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f003 0203 	and.w	r2, r3, #3
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	fa02 f303 	lsl.w	r3, r2, r3
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 80ae 	beq.w	8004cfe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60fb      	str	r3, [r7, #12]
 8004ba6:	4b5c      	ldr	r3, [pc, #368]	; (8004d18 <HAL_GPIO_Init+0x2fc>)
 8004ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004baa:	4a5b      	ldr	r2, [pc, #364]	; (8004d18 <HAL_GPIO_Init+0x2fc>)
 8004bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8004bb2:	4b59      	ldr	r3, [pc, #356]	; (8004d18 <HAL_GPIO_Init+0x2fc>)
 8004bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bba:	60fb      	str	r3, [r7, #12]
 8004bbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004bbe:	4a57      	ldr	r2, [pc, #348]	; (8004d1c <HAL_GPIO_Init+0x300>)
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	089b      	lsrs	r3, r3, #2
 8004bc4:	3302      	adds	r3, #2
 8004bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	220f      	movs	r2, #15
 8004bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bda:	43db      	mvns	r3, r3
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	4013      	ands	r3, r2
 8004be0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a4e      	ldr	r2, [pc, #312]	; (8004d20 <HAL_GPIO_Init+0x304>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d025      	beq.n	8004c36 <HAL_GPIO_Init+0x21a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a4d      	ldr	r2, [pc, #308]	; (8004d24 <HAL_GPIO_Init+0x308>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d01f      	beq.n	8004c32 <HAL_GPIO_Init+0x216>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a4c      	ldr	r2, [pc, #304]	; (8004d28 <HAL_GPIO_Init+0x30c>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d019      	beq.n	8004c2e <HAL_GPIO_Init+0x212>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a4b      	ldr	r2, [pc, #300]	; (8004d2c <HAL_GPIO_Init+0x310>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d013      	beq.n	8004c2a <HAL_GPIO_Init+0x20e>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a4a      	ldr	r2, [pc, #296]	; (8004d30 <HAL_GPIO_Init+0x314>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d00d      	beq.n	8004c26 <HAL_GPIO_Init+0x20a>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a49      	ldr	r2, [pc, #292]	; (8004d34 <HAL_GPIO_Init+0x318>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d007      	beq.n	8004c22 <HAL_GPIO_Init+0x206>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a48      	ldr	r2, [pc, #288]	; (8004d38 <HAL_GPIO_Init+0x31c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d101      	bne.n	8004c1e <HAL_GPIO_Init+0x202>
 8004c1a:	2306      	movs	r3, #6
 8004c1c:	e00c      	b.n	8004c38 <HAL_GPIO_Init+0x21c>
 8004c1e:	2307      	movs	r3, #7
 8004c20:	e00a      	b.n	8004c38 <HAL_GPIO_Init+0x21c>
 8004c22:	2305      	movs	r3, #5
 8004c24:	e008      	b.n	8004c38 <HAL_GPIO_Init+0x21c>
 8004c26:	2304      	movs	r3, #4
 8004c28:	e006      	b.n	8004c38 <HAL_GPIO_Init+0x21c>
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e004      	b.n	8004c38 <HAL_GPIO_Init+0x21c>
 8004c2e:	2302      	movs	r3, #2
 8004c30:	e002      	b.n	8004c38 <HAL_GPIO_Init+0x21c>
 8004c32:	2301      	movs	r3, #1
 8004c34:	e000      	b.n	8004c38 <HAL_GPIO_Init+0x21c>
 8004c36:	2300      	movs	r3, #0
 8004c38:	69fa      	ldr	r2, [r7, #28]
 8004c3a:	f002 0203 	and.w	r2, r2, #3
 8004c3e:	0092      	lsls	r2, r2, #2
 8004c40:	4093      	lsls	r3, r2
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c48:	4934      	ldr	r1, [pc, #208]	; (8004d1c <HAL_GPIO_Init+0x300>)
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	089b      	lsrs	r3, r3, #2
 8004c4e:	3302      	adds	r3, #2
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c56:	4b39      	ldr	r3, [pc, #228]	; (8004d3c <HAL_GPIO_Init+0x320>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	43db      	mvns	r3, r3
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	4013      	ands	r3, r2
 8004c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c7a:	4a30      	ldr	r2, [pc, #192]	; (8004d3c <HAL_GPIO_Init+0x320>)
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004c80:	4b2e      	ldr	r3, [pc, #184]	; (8004d3c <HAL_GPIO_Init+0x320>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	43db      	mvns	r3, r3
 8004c8a:	69ba      	ldr	r2, [r7, #24]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ca4:	4a25      	ldr	r2, [pc, #148]	; (8004d3c <HAL_GPIO_Init+0x320>)
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004caa:	4b24      	ldr	r3, [pc, #144]	; (8004d3c <HAL_GPIO_Init+0x320>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	43db      	mvns	r3, r3
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004cce:	4a1b      	ldr	r2, [pc, #108]	; (8004d3c <HAL_GPIO_Init+0x320>)
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004cd4:	4b19      	ldr	r3, [pc, #100]	; (8004d3c <HAL_GPIO_Init+0x320>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004cf8:	4a10      	ldr	r2, [pc, #64]	; (8004d3c <HAL_GPIO_Init+0x320>)
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	3301      	adds	r3, #1
 8004d02:	61fb      	str	r3, [r7, #28]
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	2b0f      	cmp	r3, #15
 8004d08:	f67f ae96 	bls.w	8004a38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d0c:	bf00      	nop
 8004d0e:	3724      	adds	r7, #36	; 0x24
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	40013800 	.word	0x40013800
 8004d20:	40020000 	.word	0x40020000
 8004d24:	40020400 	.word	0x40020400
 8004d28:	40020800 	.word	0x40020800
 8004d2c:	40020c00 	.word	0x40020c00
 8004d30:	40021000 	.word	0x40021000
 8004d34:	40021400 	.word	0x40021400
 8004d38:	40021800 	.word	0x40021800
 8004d3c:	40013c00 	.word	0x40013c00

08004d40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	460b      	mov	r3, r1
 8004d4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691a      	ldr	r2, [r3, #16]
 8004d50:	887b      	ldrh	r3, [r7, #2]
 8004d52:	4013      	ands	r3, r2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	73fb      	strb	r3, [r7, #15]
 8004d5c:	e001      	b.n	8004d62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	807b      	strh	r3, [r7, #2]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d80:	787b      	ldrb	r3, [r7, #1]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d003      	beq.n	8004d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d86:	887a      	ldrh	r2, [r7, #2]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d8c:	e003      	b.n	8004d96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d8e:	887b      	ldrh	r3, [r7, #2]
 8004d90:	041a      	lsls	r2, r3, #16
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	619a      	str	r2, [r3, #24]
}
 8004d96:	bf00      	nop
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
 8004daa:	460b      	mov	r3, r1
 8004dac:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	695a      	ldr	r2, [r3, #20]
 8004db2:	887b      	ldrh	r3, [r7, #2]
 8004db4:	401a      	ands	r2, r3
 8004db6:	887b      	ldrh	r3, [r7, #2]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d104      	bne.n	8004dc6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004dbc:	887b      	ldrh	r3, [r7, #2]
 8004dbe:	041a      	lsls	r2, r3, #16
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004dc4:	e002      	b.n	8004dcc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004dc6:	887a      	ldrh	r2, [r7, #2]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	619a      	str	r2, [r3, #24]
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e0cc      	b.n	8004f86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004dec:	4b68      	ldr	r3, [pc, #416]	; (8004f90 <HAL_RCC_ClockConfig+0x1b8>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 030f 	and.w	r3, r3, #15
 8004df4:	683a      	ldr	r2, [r7, #0]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d90c      	bls.n	8004e14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dfa:	4b65      	ldr	r3, [pc, #404]	; (8004f90 <HAL_RCC_ClockConfig+0x1b8>)
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e02:	4b63      	ldr	r3, [pc, #396]	; (8004f90 <HAL_RCC_ClockConfig+0x1b8>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 030f 	and.w	r3, r3, #15
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d001      	beq.n	8004e14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e0b8      	b.n	8004f86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d020      	beq.n	8004e62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d005      	beq.n	8004e38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e2c:	4b59      	ldr	r3, [pc, #356]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	4a58      	ldr	r2, [pc, #352]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004e32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0308 	and.w	r3, r3, #8
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d005      	beq.n	8004e50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e44:	4b53      	ldr	r3, [pc, #332]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	4a52      	ldr	r2, [pc, #328]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e50:	4b50      	ldr	r3, [pc, #320]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	494d      	ldr	r1, [pc, #308]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d044      	beq.n	8004ef8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d107      	bne.n	8004e86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e76:	4b47      	ldr	r3, [pc, #284]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d119      	bne.n	8004eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e07f      	b.n	8004f86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d003      	beq.n	8004e96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d107      	bne.n	8004ea6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e96:	4b3f      	ldr	r3, [pc, #252]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d109      	bne.n	8004eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e06f      	b.n	8004f86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ea6:	4b3b      	ldr	r3, [pc, #236]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e067      	b.n	8004f86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eb6:	4b37      	ldr	r3, [pc, #220]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f023 0203 	bic.w	r2, r3, #3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	4934      	ldr	r1, [pc, #208]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ec8:	f7fe fa9e 	bl	8003408 <HAL_GetTick>
 8004ecc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ece:	e00a      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ed0:	f7fe fa9a 	bl	8003408 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e04f      	b.n	8004f86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ee6:	4b2b      	ldr	r3, [pc, #172]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f003 020c 	and.w	r2, r3, #12
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d1eb      	bne.n	8004ed0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ef8:	4b25      	ldr	r3, [pc, #148]	; (8004f90 <HAL_RCC_ClockConfig+0x1b8>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 030f 	and.w	r3, r3, #15
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d20c      	bcs.n	8004f20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f06:	4b22      	ldr	r3, [pc, #136]	; (8004f90 <HAL_RCC_ClockConfig+0x1b8>)
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	b2d2      	uxtb	r2, r2
 8004f0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f0e:	4b20      	ldr	r3, [pc, #128]	; (8004f90 <HAL_RCC_ClockConfig+0x1b8>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d001      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e032      	b.n	8004f86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0304 	and.w	r3, r3, #4
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d008      	beq.n	8004f3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f2c:	4b19      	ldr	r3, [pc, #100]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	4916      	ldr	r1, [pc, #88]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0308 	and.w	r3, r3, #8
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d009      	beq.n	8004f5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f4a:	4b12      	ldr	r3, [pc, #72]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	490e      	ldr	r1, [pc, #56]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f5e:	f000 f855 	bl	800500c <HAL_RCC_GetSysClockFreq>
 8004f62:	4601      	mov	r1, r0
 8004f64:	4b0b      	ldr	r3, [pc, #44]	; (8004f94 <HAL_RCC_ClockConfig+0x1bc>)
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	091b      	lsrs	r3, r3, #4
 8004f6a:	f003 030f 	and.w	r3, r3, #15
 8004f6e:	4a0a      	ldr	r2, [pc, #40]	; (8004f98 <HAL_RCC_ClockConfig+0x1c0>)
 8004f70:	5cd3      	ldrb	r3, [r2, r3]
 8004f72:	fa21 f303 	lsr.w	r3, r1, r3
 8004f76:	4a09      	ldr	r2, [pc, #36]	; (8004f9c <HAL_RCC_ClockConfig+0x1c4>)
 8004f78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f7a:	4b09      	ldr	r3, [pc, #36]	; (8004fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fe f9fe 	bl	8003380 <HAL_InitTick>

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	40023c00 	.word	0x40023c00
 8004f94:	40023800 	.word	0x40023800
 8004f98:	08009764 	.word	0x08009764
 8004f9c:	20000000 	.word	0x20000000
 8004fa0:	20000004 	.word	0x20000004

08004fa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fa8:	4b03      	ldr	r3, [pc, #12]	; (8004fb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004faa:	681b      	ldr	r3, [r3, #0]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	20000000 	.word	0x20000000

08004fbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fc0:	f7ff fff0 	bl	8004fa4 <HAL_RCC_GetHCLKFreq>
 8004fc4:	4601      	mov	r1, r0
 8004fc6:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	0a9b      	lsrs	r3, r3, #10
 8004fcc:	f003 0307 	and.w	r3, r3, #7
 8004fd0:	4a03      	ldr	r2, [pc, #12]	; (8004fe0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fd2:	5cd3      	ldrb	r3, [r2, r3]
 8004fd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	40023800 	.word	0x40023800
 8004fe0:	08009774 	.word	0x08009774

08004fe4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004fe8:	f7ff ffdc 	bl	8004fa4 <HAL_RCC_GetHCLKFreq>
 8004fec:	4601      	mov	r1, r0
 8004fee:	4b05      	ldr	r3, [pc, #20]	; (8005004 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	0b5b      	lsrs	r3, r3, #13
 8004ff4:	f003 0307 	and.w	r3, r3, #7
 8004ff8:	4a03      	ldr	r2, [pc, #12]	; (8005008 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ffa:	5cd3      	ldrb	r3, [r2, r3]
 8004ffc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005000:	4618      	mov	r0, r3
 8005002:	bd80      	pop	{r7, pc}
 8005004:	40023800 	.word	0x40023800
 8005008:	08009774 	.word	0x08009774

0800500c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800500c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800500e:	b087      	sub	sp, #28
 8005010:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005012:	2300      	movs	r3, #0
 8005014:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8005016:	2300      	movs	r3, #0
 8005018:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800501e:	2300      	movs	r3, #0
 8005020:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005022:	2300      	movs	r3, #0
 8005024:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005026:	4bc6      	ldr	r3, [pc, #792]	; (8005340 <HAL_RCC_GetSysClockFreq+0x334>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 030c 	and.w	r3, r3, #12
 800502e:	2b0c      	cmp	r3, #12
 8005030:	f200 817e 	bhi.w	8005330 <HAL_RCC_GetSysClockFreq+0x324>
 8005034:	a201      	add	r2, pc, #4	; (adr r2, 800503c <HAL_RCC_GetSysClockFreq+0x30>)
 8005036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503a:	bf00      	nop
 800503c:	08005071 	.word	0x08005071
 8005040:	08005331 	.word	0x08005331
 8005044:	08005331 	.word	0x08005331
 8005048:	08005331 	.word	0x08005331
 800504c:	08005077 	.word	0x08005077
 8005050:	08005331 	.word	0x08005331
 8005054:	08005331 	.word	0x08005331
 8005058:	08005331 	.word	0x08005331
 800505c:	0800507d 	.word	0x0800507d
 8005060:	08005331 	.word	0x08005331
 8005064:	08005331 	.word	0x08005331
 8005068:	08005331 	.word	0x08005331
 800506c:	080051d9 	.word	0x080051d9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005070:	4bb4      	ldr	r3, [pc, #720]	; (8005344 <HAL_RCC_GetSysClockFreq+0x338>)
 8005072:	613b      	str	r3, [r7, #16]
       break;
 8005074:	e15f      	b.n	8005336 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005076:	4bb4      	ldr	r3, [pc, #720]	; (8005348 <HAL_RCC_GetSysClockFreq+0x33c>)
 8005078:	613b      	str	r3, [r7, #16]
      break;
 800507a:	e15c      	b.n	8005336 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800507c:	4bb0      	ldr	r3, [pc, #704]	; (8005340 <HAL_RCC_GetSysClockFreq+0x334>)
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005084:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005086:	4bae      	ldr	r3, [pc, #696]	; (8005340 <HAL_RCC_GetSysClockFreq+0x334>)
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d04a      	beq.n	8005128 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005092:	4bab      	ldr	r3, [pc, #684]	; (8005340 <HAL_RCC_GetSysClockFreq+0x334>)
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	099b      	lsrs	r3, r3, #6
 8005098:	f04f 0400 	mov.w	r4, #0
 800509c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80050a0:	f04f 0200 	mov.w	r2, #0
 80050a4:	ea03 0501 	and.w	r5, r3, r1
 80050a8:	ea04 0602 	and.w	r6, r4, r2
 80050ac:	4629      	mov	r1, r5
 80050ae:	4632      	mov	r2, r6
 80050b0:	f04f 0300 	mov.w	r3, #0
 80050b4:	f04f 0400 	mov.w	r4, #0
 80050b8:	0154      	lsls	r4, r2, #5
 80050ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80050be:	014b      	lsls	r3, r1, #5
 80050c0:	4619      	mov	r1, r3
 80050c2:	4622      	mov	r2, r4
 80050c4:	1b49      	subs	r1, r1, r5
 80050c6:	eb62 0206 	sbc.w	r2, r2, r6
 80050ca:	f04f 0300 	mov.w	r3, #0
 80050ce:	f04f 0400 	mov.w	r4, #0
 80050d2:	0194      	lsls	r4, r2, #6
 80050d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80050d8:	018b      	lsls	r3, r1, #6
 80050da:	1a5b      	subs	r3, r3, r1
 80050dc:	eb64 0402 	sbc.w	r4, r4, r2
 80050e0:	f04f 0100 	mov.w	r1, #0
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	00e2      	lsls	r2, r4, #3
 80050ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80050ee:	00d9      	lsls	r1, r3, #3
 80050f0:	460b      	mov	r3, r1
 80050f2:	4614      	mov	r4, r2
 80050f4:	195b      	adds	r3, r3, r5
 80050f6:	eb44 0406 	adc.w	r4, r4, r6
 80050fa:	f04f 0100 	mov.w	r1, #0
 80050fe:	f04f 0200 	mov.w	r2, #0
 8005102:	0262      	lsls	r2, r4, #9
 8005104:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005108:	0259      	lsls	r1, r3, #9
 800510a:	460b      	mov	r3, r1
 800510c:	4614      	mov	r4, r2
 800510e:	4618      	mov	r0, r3
 8005110:	4621      	mov	r1, r4
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f04f 0400 	mov.w	r4, #0
 8005118:	461a      	mov	r2, r3
 800511a:	4623      	mov	r3, r4
 800511c:	f7fb fd60 	bl	8000be0 <__aeabi_uldivmod>
 8005120:	4603      	mov	r3, r0
 8005122:	460c      	mov	r4, r1
 8005124:	617b      	str	r3, [r7, #20]
 8005126:	e049      	b.n	80051bc <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005128:	4b85      	ldr	r3, [pc, #532]	; (8005340 <HAL_RCC_GetSysClockFreq+0x334>)
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	099b      	lsrs	r3, r3, #6
 800512e:	f04f 0400 	mov.w	r4, #0
 8005132:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005136:	f04f 0200 	mov.w	r2, #0
 800513a:	ea03 0501 	and.w	r5, r3, r1
 800513e:	ea04 0602 	and.w	r6, r4, r2
 8005142:	4629      	mov	r1, r5
 8005144:	4632      	mov	r2, r6
 8005146:	f04f 0300 	mov.w	r3, #0
 800514a:	f04f 0400 	mov.w	r4, #0
 800514e:	0154      	lsls	r4, r2, #5
 8005150:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005154:	014b      	lsls	r3, r1, #5
 8005156:	4619      	mov	r1, r3
 8005158:	4622      	mov	r2, r4
 800515a:	1b49      	subs	r1, r1, r5
 800515c:	eb62 0206 	sbc.w	r2, r2, r6
 8005160:	f04f 0300 	mov.w	r3, #0
 8005164:	f04f 0400 	mov.w	r4, #0
 8005168:	0194      	lsls	r4, r2, #6
 800516a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800516e:	018b      	lsls	r3, r1, #6
 8005170:	1a5b      	subs	r3, r3, r1
 8005172:	eb64 0402 	sbc.w	r4, r4, r2
 8005176:	f04f 0100 	mov.w	r1, #0
 800517a:	f04f 0200 	mov.w	r2, #0
 800517e:	00e2      	lsls	r2, r4, #3
 8005180:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005184:	00d9      	lsls	r1, r3, #3
 8005186:	460b      	mov	r3, r1
 8005188:	4614      	mov	r4, r2
 800518a:	195b      	adds	r3, r3, r5
 800518c:	eb44 0406 	adc.w	r4, r4, r6
 8005190:	f04f 0100 	mov.w	r1, #0
 8005194:	f04f 0200 	mov.w	r2, #0
 8005198:	02a2      	lsls	r2, r4, #10
 800519a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800519e:	0299      	lsls	r1, r3, #10
 80051a0:	460b      	mov	r3, r1
 80051a2:	4614      	mov	r4, r2
 80051a4:	4618      	mov	r0, r3
 80051a6:	4621      	mov	r1, r4
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f04f 0400 	mov.w	r4, #0
 80051ae:	461a      	mov	r2, r3
 80051b0:	4623      	mov	r3, r4
 80051b2:	f7fb fd15 	bl	8000be0 <__aeabi_uldivmod>
 80051b6:	4603      	mov	r3, r0
 80051b8:	460c      	mov	r4, r1
 80051ba:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051bc:	4b60      	ldr	r3, [pc, #384]	; (8005340 <HAL_RCC_GetSysClockFreq+0x334>)
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	0c1b      	lsrs	r3, r3, #16
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	3301      	adds	r3, #1
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d4:	613b      	str	r3, [r7, #16]
      break;
 80051d6:	e0ae      	b.n	8005336 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051d8:	4b59      	ldr	r3, [pc, #356]	; (8005340 <HAL_RCC_GetSysClockFreq+0x334>)
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051e0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051e2:	4b57      	ldr	r3, [pc, #348]	; (8005340 <HAL_RCC_GetSysClockFreq+0x334>)
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d04a      	beq.n	8005284 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051ee:	4b54      	ldr	r3, [pc, #336]	; (8005340 <HAL_RCC_GetSysClockFreq+0x334>)
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	099b      	lsrs	r3, r3, #6
 80051f4:	f04f 0400 	mov.w	r4, #0
 80051f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80051fc:	f04f 0200 	mov.w	r2, #0
 8005200:	ea03 0501 	and.w	r5, r3, r1
 8005204:	ea04 0602 	and.w	r6, r4, r2
 8005208:	4629      	mov	r1, r5
 800520a:	4632      	mov	r2, r6
 800520c:	f04f 0300 	mov.w	r3, #0
 8005210:	f04f 0400 	mov.w	r4, #0
 8005214:	0154      	lsls	r4, r2, #5
 8005216:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800521a:	014b      	lsls	r3, r1, #5
 800521c:	4619      	mov	r1, r3
 800521e:	4622      	mov	r2, r4
 8005220:	1b49      	subs	r1, r1, r5
 8005222:	eb62 0206 	sbc.w	r2, r2, r6
 8005226:	f04f 0300 	mov.w	r3, #0
 800522a:	f04f 0400 	mov.w	r4, #0
 800522e:	0194      	lsls	r4, r2, #6
 8005230:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005234:	018b      	lsls	r3, r1, #6
 8005236:	1a5b      	subs	r3, r3, r1
 8005238:	eb64 0402 	sbc.w	r4, r4, r2
 800523c:	f04f 0100 	mov.w	r1, #0
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	00e2      	lsls	r2, r4, #3
 8005246:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800524a:	00d9      	lsls	r1, r3, #3
 800524c:	460b      	mov	r3, r1
 800524e:	4614      	mov	r4, r2
 8005250:	195b      	adds	r3, r3, r5
 8005252:	eb44 0406 	adc.w	r4, r4, r6
 8005256:	f04f 0100 	mov.w	r1, #0
 800525a:	f04f 0200 	mov.w	r2, #0
 800525e:	0262      	lsls	r2, r4, #9
 8005260:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005264:	0259      	lsls	r1, r3, #9
 8005266:	460b      	mov	r3, r1
 8005268:	4614      	mov	r4, r2
 800526a:	4618      	mov	r0, r3
 800526c:	4621      	mov	r1, r4
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f04f 0400 	mov.w	r4, #0
 8005274:	461a      	mov	r2, r3
 8005276:	4623      	mov	r3, r4
 8005278:	f7fb fcb2 	bl	8000be0 <__aeabi_uldivmod>
 800527c:	4603      	mov	r3, r0
 800527e:	460c      	mov	r4, r1
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	e049      	b.n	8005318 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005284:	4b2e      	ldr	r3, [pc, #184]	; (8005340 <HAL_RCC_GetSysClockFreq+0x334>)
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	099b      	lsrs	r3, r3, #6
 800528a:	f04f 0400 	mov.w	r4, #0
 800528e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005292:	f04f 0200 	mov.w	r2, #0
 8005296:	ea03 0501 	and.w	r5, r3, r1
 800529a:	ea04 0602 	and.w	r6, r4, r2
 800529e:	4629      	mov	r1, r5
 80052a0:	4632      	mov	r2, r6
 80052a2:	f04f 0300 	mov.w	r3, #0
 80052a6:	f04f 0400 	mov.w	r4, #0
 80052aa:	0154      	lsls	r4, r2, #5
 80052ac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80052b0:	014b      	lsls	r3, r1, #5
 80052b2:	4619      	mov	r1, r3
 80052b4:	4622      	mov	r2, r4
 80052b6:	1b49      	subs	r1, r1, r5
 80052b8:	eb62 0206 	sbc.w	r2, r2, r6
 80052bc:	f04f 0300 	mov.w	r3, #0
 80052c0:	f04f 0400 	mov.w	r4, #0
 80052c4:	0194      	lsls	r4, r2, #6
 80052c6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80052ca:	018b      	lsls	r3, r1, #6
 80052cc:	1a5b      	subs	r3, r3, r1
 80052ce:	eb64 0402 	sbc.w	r4, r4, r2
 80052d2:	f04f 0100 	mov.w	r1, #0
 80052d6:	f04f 0200 	mov.w	r2, #0
 80052da:	00e2      	lsls	r2, r4, #3
 80052dc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80052e0:	00d9      	lsls	r1, r3, #3
 80052e2:	460b      	mov	r3, r1
 80052e4:	4614      	mov	r4, r2
 80052e6:	195b      	adds	r3, r3, r5
 80052e8:	eb44 0406 	adc.w	r4, r4, r6
 80052ec:	f04f 0100 	mov.w	r1, #0
 80052f0:	f04f 0200 	mov.w	r2, #0
 80052f4:	02a2      	lsls	r2, r4, #10
 80052f6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80052fa:	0299      	lsls	r1, r3, #10
 80052fc:	460b      	mov	r3, r1
 80052fe:	4614      	mov	r4, r2
 8005300:	4618      	mov	r0, r3
 8005302:	4621      	mov	r1, r4
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f04f 0400 	mov.w	r4, #0
 800530a:	461a      	mov	r2, r3
 800530c:	4623      	mov	r3, r4
 800530e:	f7fb fc67 	bl	8000be0 <__aeabi_uldivmod>
 8005312:	4603      	mov	r3, r0
 8005314:	460c      	mov	r4, r1
 8005316:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005318:	4b09      	ldr	r3, [pc, #36]	; (8005340 <HAL_RCC_GetSysClockFreq+0x334>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	0f1b      	lsrs	r3, r3, #28
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	fbb2 f3f3 	udiv	r3, r2, r3
 800532c:	613b      	str	r3, [r7, #16]
      break;
 800532e:	e002      	b.n	8005336 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005330:	4b04      	ldr	r3, [pc, #16]	; (8005344 <HAL_RCC_GetSysClockFreq+0x338>)
 8005332:	613b      	str	r3, [r7, #16]
      break;
 8005334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005336:	693b      	ldr	r3, [r7, #16]
}
 8005338:	4618      	mov	r0, r3
 800533a:	371c      	adds	r7, #28
 800533c:	46bd      	mov	sp, r7
 800533e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005340:	40023800 	.word	0x40023800
 8005344:	00f42400 	.word	0x00f42400
 8005348:	007a1200 	.word	0x007a1200

0800534c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 8083 	beq.w	800546c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005366:	4b95      	ldr	r3, [pc, #596]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 030c 	and.w	r3, r3, #12
 800536e:	2b04      	cmp	r3, #4
 8005370:	d019      	beq.n	80053a6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005372:	4b92      	ldr	r3, [pc, #584]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800537a:	2b08      	cmp	r3, #8
 800537c:	d106      	bne.n	800538c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800537e:	4b8f      	ldr	r3, [pc, #572]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005386:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800538a:	d00c      	beq.n	80053a6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800538c:	4b8b      	ldr	r3, [pc, #556]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005394:	2b0c      	cmp	r3, #12
 8005396:	d112      	bne.n	80053be <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005398:	4b88      	ldr	r3, [pc, #544]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053a4:	d10b      	bne.n	80053be <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053a6:	4b85      	ldr	r3, [pc, #532]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d05b      	beq.n	800546a <HAL_RCC_OscConfig+0x11e>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d157      	bne.n	800546a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e216      	b.n	80057ec <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053c6:	d106      	bne.n	80053d6 <HAL_RCC_OscConfig+0x8a>
 80053c8:	4b7c      	ldr	r3, [pc, #496]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a7b      	ldr	r2, [pc, #492]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 80053ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053d2:	6013      	str	r3, [r2, #0]
 80053d4:	e01d      	b.n	8005412 <HAL_RCC_OscConfig+0xc6>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053de:	d10c      	bne.n	80053fa <HAL_RCC_OscConfig+0xae>
 80053e0:	4b76      	ldr	r3, [pc, #472]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a75      	ldr	r2, [pc, #468]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 80053e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053ea:	6013      	str	r3, [r2, #0]
 80053ec:	4b73      	ldr	r3, [pc, #460]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a72      	ldr	r2, [pc, #456]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 80053f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053f6:	6013      	str	r3, [r2, #0]
 80053f8:	e00b      	b.n	8005412 <HAL_RCC_OscConfig+0xc6>
 80053fa:	4b70      	ldr	r3, [pc, #448]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a6f      	ldr	r2, [pc, #444]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 8005400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	4b6d      	ldr	r3, [pc, #436]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a6c      	ldr	r2, [pc, #432]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 800540c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005410:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d013      	beq.n	8005442 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800541a:	f7fd fff5 	bl	8003408 <HAL_GetTick>
 800541e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005420:	e008      	b.n	8005434 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005422:	f7fd fff1 	bl	8003408 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b64      	cmp	r3, #100	; 0x64
 800542e:	d901      	bls.n	8005434 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e1db      	b.n	80057ec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005434:	4b61      	ldr	r3, [pc, #388]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0f0      	beq.n	8005422 <HAL_RCC_OscConfig+0xd6>
 8005440:	e014      	b.n	800546c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005442:	f7fd ffe1 	bl	8003408 <HAL_GetTick>
 8005446:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005448:	e008      	b.n	800545c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800544a:	f7fd ffdd 	bl	8003408 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	2b64      	cmp	r3, #100	; 0x64
 8005456:	d901      	bls.n	800545c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e1c7      	b.n	80057ec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800545c:	4b57      	ldr	r3, [pc, #348]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1f0      	bne.n	800544a <HAL_RCC_OscConfig+0xfe>
 8005468:	e000      	b.n	800546c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800546a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d06f      	beq.n	8005558 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005478:	4b50      	ldr	r3, [pc, #320]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f003 030c 	and.w	r3, r3, #12
 8005480:	2b00      	cmp	r3, #0
 8005482:	d017      	beq.n	80054b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005484:	4b4d      	ldr	r3, [pc, #308]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800548c:	2b08      	cmp	r3, #8
 800548e:	d105      	bne.n	800549c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005490:	4b4a      	ldr	r3, [pc, #296]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00b      	beq.n	80054b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800549c:	4b47      	ldr	r3, [pc, #284]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80054a4:	2b0c      	cmp	r3, #12
 80054a6:	d11c      	bne.n	80054e2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054a8:	4b44      	ldr	r3, [pc, #272]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d116      	bne.n	80054e2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054b4:	4b41      	ldr	r3, [pc, #260]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d005      	beq.n	80054cc <HAL_RCC_OscConfig+0x180>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d001      	beq.n	80054cc <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e18f      	b.n	80057ec <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054cc:	4b3b      	ldr	r3, [pc, #236]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	4938      	ldr	r1, [pc, #224]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054e0:	e03a      	b.n	8005558 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d020      	beq.n	800552c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054ea:	4b35      	ldr	r3, [pc, #212]	; (80055c0 <HAL_RCC_OscConfig+0x274>)
 80054ec:	2201      	movs	r2, #1
 80054ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f0:	f7fd ff8a 	bl	8003408 <HAL_GetTick>
 80054f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054f6:	e008      	b.n	800550a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054f8:	f7fd ff86 	bl	8003408 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b02      	cmp	r3, #2
 8005504:	d901      	bls.n	800550a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e170      	b.n	80057ec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800550a:	4b2c      	ldr	r3, [pc, #176]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d0f0      	beq.n	80054f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005516:	4b29      	ldr	r3, [pc, #164]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	4925      	ldr	r1, [pc, #148]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 8005526:	4313      	orrs	r3, r2
 8005528:	600b      	str	r3, [r1, #0]
 800552a:	e015      	b.n	8005558 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800552c:	4b24      	ldr	r3, [pc, #144]	; (80055c0 <HAL_RCC_OscConfig+0x274>)
 800552e:	2200      	movs	r2, #0
 8005530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005532:	f7fd ff69 	bl	8003408 <HAL_GetTick>
 8005536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005538:	e008      	b.n	800554c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800553a:	f7fd ff65 	bl	8003408 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	2b02      	cmp	r3, #2
 8005546:	d901      	bls.n	800554c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e14f      	b.n	80057ec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800554c:	4b1b      	ldr	r3, [pc, #108]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1f0      	bne.n	800553a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0308 	and.w	r3, r3, #8
 8005560:	2b00      	cmp	r3, #0
 8005562:	d037      	beq.n	80055d4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	695b      	ldr	r3, [r3, #20]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d016      	beq.n	800559a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800556c:	4b15      	ldr	r3, [pc, #84]	; (80055c4 <HAL_RCC_OscConfig+0x278>)
 800556e:	2201      	movs	r2, #1
 8005570:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005572:	f7fd ff49 	bl	8003408 <HAL_GetTick>
 8005576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005578:	e008      	b.n	800558c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800557a:	f7fd ff45 	bl	8003408 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	2b02      	cmp	r3, #2
 8005586:	d901      	bls.n	800558c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e12f      	b.n	80057ec <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800558c:	4b0b      	ldr	r3, [pc, #44]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 800558e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d0f0      	beq.n	800557a <HAL_RCC_OscConfig+0x22e>
 8005598:	e01c      	b.n	80055d4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800559a:	4b0a      	ldr	r3, [pc, #40]	; (80055c4 <HAL_RCC_OscConfig+0x278>)
 800559c:	2200      	movs	r2, #0
 800559e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055a0:	f7fd ff32 	bl	8003408 <HAL_GetTick>
 80055a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055a6:	e00f      	b.n	80055c8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055a8:	f7fd ff2e 	bl	8003408 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d908      	bls.n	80055c8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e118      	b.n	80057ec <HAL_RCC_OscConfig+0x4a0>
 80055ba:	bf00      	nop
 80055bc:	40023800 	.word	0x40023800
 80055c0:	42470000 	.word	0x42470000
 80055c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055c8:	4b8a      	ldr	r3, [pc, #552]	; (80057f4 <HAL_RCC_OscConfig+0x4a8>)
 80055ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055cc:	f003 0302 	and.w	r3, r3, #2
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1e9      	bne.n	80055a8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 8097 	beq.w	8005710 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055e2:	2300      	movs	r3, #0
 80055e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055e6:	4b83      	ldr	r3, [pc, #524]	; (80057f4 <HAL_RCC_OscConfig+0x4a8>)
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10f      	bne.n	8005612 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055f2:	2300      	movs	r3, #0
 80055f4:	60fb      	str	r3, [r7, #12]
 80055f6:	4b7f      	ldr	r3, [pc, #508]	; (80057f4 <HAL_RCC_OscConfig+0x4a8>)
 80055f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fa:	4a7e      	ldr	r2, [pc, #504]	; (80057f4 <HAL_RCC_OscConfig+0x4a8>)
 80055fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005600:	6413      	str	r3, [r2, #64]	; 0x40
 8005602:	4b7c      	ldr	r3, [pc, #496]	; (80057f4 <HAL_RCC_OscConfig+0x4a8>)
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800560a:	60fb      	str	r3, [r7, #12]
 800560c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800560e:	2301      	movs	r3, #1
 8005610:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005612:	4b79      	ldr	r3, [pc, #484]	; (80057f8 <HAL_RCC_OscConfig+0x4ac>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561a:	2b00      	cmp	r3, #0
 800561c:	d118      	bne.n	8005650 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800561e:	4b76      	ldr	r3, [pc, #472]	; (80057f8 <HAL_RCC_OscConfig+0x4ac>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a75      	ldr	r2, [pc, #468]	; (80057f8 <HAL_RCC_OscConfig+0x4ac>)
 8005624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800562a:	f7fd feed 	bl	8003408 <HAL_GetTick>
 800562e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005630:	e008      	b.n	8005644 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005632:	f7fd fee9 	bl	8003408 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	2b02      	cmp	r3, #2
 800563e:	d901      	bls.n	8005644 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e0d3      	b.n	80057ec <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005644:	4b6c      	ldr	r3, [pc, #432]	; (80057f8 <HAL_RCC_OscConfig+0x4ac>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800564c:	2b00      	cmp	r3, #0
 800564e:	d0f0      	beq.n	8005632 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d106      	bne.n	8005666 <HAL_RCC_OscConfig+0x31a>
 8005658:	4b66      	ldr	r3, [pc, #408]	; (80057f4 <HAL_RCC_OscConfig+0x4a8>)
 800565a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565c:	4a65      	ldr	r2, [pc, #404]	; (80057f4 <HAL_RCC_OscConfig+0x4a8>)
 800565e:	f043 0301 	orr.w	r3, r3, #1
 8005662:	6713      	str	r3, [r2, #112]	; 0x70
 8005664:	e01c      	b.n	80056a0 <HAL_RCC_OscConfig+0x354>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	2b05      	cmp	r3, #5
 800566c:	d10c      	bne.n	8005688 <HAL_RCC_OscConfig+0x33c>
 800566e:	4b61      	ldr	r3, [pc, #388]	; (80057f4 <HAL_RCC_OscConfig+0x4a8>)
 8005670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005672:	4a60      	ldr	r2, [pc, #384]	; (80057f4 <HAL_RCC_OscConfig+0x4a8>)
 8005674:	f043 0304 	orr.w	r3, r3, #4
 8005678:	6713      	str	r3, [r2, #112]	; 0x70
 800567a:	4b5e      	ldr	r3, [pc, #376]	; (80057f4 <HAL_RCC_OscConfig+0x4a8>)
 800567c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567e:	4a5d      	ldr	r2, [pc, #372]	; (80057f4 <HAL_RCC_OscConfig+0x4a8>)
 8005680:	f043 0301 	orr.w	r3, r3, #1
 8005684:	6713      	str	r3, [r2, #112]	; 0x70
 8005686:	e00b      	b.n	80056a0 <HAL_RCC_OscConfig+0x354>
 8005688:	4b5a      	ldr	r3, [pc, #360]	; (80057f4 <HAL_RCC_OscConfig+0x4a8>)
 800568a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568c:	4a59      	ldr	r2, [pc, #356]	; (80057f4 <HAL_RCC_OscConfig+0x4a8>)
 800568e:	f023 0301 	bic.w	r3, r3, #1
 8005692:	6713      	str	r3, [r2, #112]	; 0x70
 8005694:	4b57      	ldr	r3, [pc, #348]	; (80057f4 <HAL_RCC_OscConfig+0x4a8>)
 8005696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005698:	4a56      	ldr	r2, [pc, #344]	; (80057f4 <HAL_RCC_OscConfig+0x4a8>)
 800569a:	f023 0304 	bic.w	r3, r3, #4
 800569e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d015      	beq.n	80056d4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a8:	f7fd feae 	bl	8003408 <HAL_GetTick>
 80056ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ae:	e00a      	b.n	80056c6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056b0:	f7fd feaa 	bl	8003408 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80056be:	4293      	cmp	r3, r2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e092      	b.n	80057ec <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056c6:	4b4b      	ldr	r3, [pc, #300]	; (80057f4 <HAL_RCC_OscConfig+0x4a8>)
 80056c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d0ee      	beq.n	80056b0 <HAL_RCC_OscConfig+0x364>
 80056d2:	e014      	b.n	80056fe <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d4:	f7fd fe98 	bl	8003408 <HAL_GetTick>
 80056d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056da:	e00a      	b.n	80056f2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056dc:	f7fd fe94 	bl	8003408 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e07c      	b.n	80057ec <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056f2:	4b40      	ldr	r3, [pc, #256]	; (80057f4 <HAL_RCC_OscConfig+0x4a8>)
 80056f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1ee      	bne.n	80056dc <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056fe:	7dfb      	ldrb	r3, [r7, #23]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d105      	bne.n	8005710 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005704:	4b3b      	ldr	r3, [pc, #236]	; (80057f4 <HAL_RCC_OscConfig+0x4a8>)
 8005706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005708:	4a3a      	ldr	r2, [pc, #232]	; (80057f4 <HAL_RCC_OscConfig+0x4a8>)
 800570a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800570e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d068      	beq.n	80057ea <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005718:	4b36      	ldr	r3, [pc, #216]	; (80057f4 <HAL_RCC_OscConfig+0x4a8>)
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f003 030c 	and.w	r3, r3, #12
 8005720:	2b08      	cmp	r3, #8
 8005722:	d060      	beq.n	80057e6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	2b02      	cmp	r3, #2
 800572a:	d145      	bne.n	80057b8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800572c:	4b33      	ldr	r3, [pc, #204]	; (80057fc <HAL_RCC_OscConfig+0x4b0>)
 800572e:	2200      	movs	r2, #0
 8005730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005732:	f7fd fe69 	bl	8003408 <HAL_GetTick>
 8005736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005738:	e008      	b.n	800574c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800573a:	f7fd fe65 	bl	8003408 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	2b02      	cmp	r3, #2
 8005746:	d901      	bls.n	800574c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e04f      	b.n	80057ec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800574c:	4b29      	ldr	r3, [pc, #164]	; (80057f4 <HAL_RCC_OscConfig+0x4a8>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1f0      	bne.n	800573a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	69da      	ldr	r2, [r3, #28]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	431a      	orrs	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005766:	019b      	lsls	r3, r3, #6
 8005768:	431a      	orrs	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576e:	085b      	lsrs	r3, r3, #1
 8005770:	3b01      	subs	r3, #1
 8005772:	041b      	lsls	r3, r3, #16
 8005774:	431a      	orrs	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577a:	061b      	lsls	r3, r3, #24
 800577c:	431a      	orrs	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005782:	071b      	lsls	r3, r3, #28
 8005784:	491b      	ldr	r1, [pc, #108]	; (80057f4 <HAL_RCC_OscConfig+0x4a8>)
 8005786:	4313      	orrs	r3, r2
 8005788:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800578a:	4b1c      	ldr	r3, [pc, #112]	; (80057fc <HAL_RCC_OscConfig+0x4b0>)
 800578c:	2201      	movs	r2, #1
 800578e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005790:	f7fd fe3a 	bl	8003408 <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005796:	e008      	b.n	80057aa <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005798:	f7fd fe36 	bl	8003408 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e020      	b.n	80057ec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057aa:	4b12      	ldr	r3, [pc, #72]	; (80057f4 <HAL_RCC_OscConfig+0x4a8>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d0f0      	beq.n	8005798 <HAL_RCC_OscConfig+0x44c>
 80057b6:	e018      	b.n	80057ea <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057b8:	4b10      	ldr	r3, [pc, #64]	; (80057fc <HAL_RCC_OscConfig+0x4b0>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057be:	f7fd fe23 	bl	8003408 <HAL_GetTick>
 80057c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057c4:	e008      	b.n	80057d8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057c6:	f7fd fe1f 	bl	8003408 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d901      	bls.n	80057d8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e009      	b.n	80057ec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057d8:	4b06      	ldr	r3, [pc, #24]	; (80057f4 <HAL_RCC_OscConfig+0x4a8>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1f0      	bne.n	80057c6 <HAL_RCC_OscConfig+0x47a>
 80057e4:	e001      	b.n	80057ea <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e000      	b.n	80057ec <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3718      	adds	r7, #24
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	40023800 	.word	0x40023800
 80057f8:	40007000 	.word	0x40007000
 80057fc:	42470060 	.word	0x42470060

08005800 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e01d      	b.n	800584e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d106      	bne.n	800582c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7fd fa4c 	bl	8002cc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3304      	adds	r3, #4
 800583c:	4619      	mov	r1, r3
 800583e:	4610      	mov	r0, r2
 8005840:	f000 fb56 	bl	8005ef0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005856:	b480      	push	{r7}
 8005858:	b085      	sub	sp, #20
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68da      	ldr	r2, [r3, #12]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f042 0201 	orr.w	r2, r2, #1
 800586c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f003 0307 	and.w	r3, r3, #7
 8005878:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2b06      	cmp	r3, #6
 800587e:	d007      	beq.n	8005890 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f042 0201 	orr.w	r2, r2, #1
 800588e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b082      	sub	sp, #8
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e01d      	b.n	80058ec <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d106      	bne.n	80058ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f7fd f9c5 	bl	8002c54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2202      	movs	r2, #2
 80058ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	3304      	adds	r3, #4
 80058da:	4619      	mov	r1, r3
 80058dc:	4610      	mov	r0, r2
 80058de:	f000 fb07 	bl	8005ef0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3708      	adds	r7, #8
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2201      	movs	r2, #1
 8005904:	6839      	ldr	r1, [r7, #0]
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fd42 	bl	8006390 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a15      	ldr	r2, [pc, #84]	; (8005968 <HAL_TIM_PWM_Start+0x74>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d004      	beq.n	8005920 <HAL_TIM_PWM_Start+0x2c>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a14      	ldr	r2, [pc, #80]	; (800596c <HAL_TIM_PWM_Start+0x78>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d101      	bne.n	8005924 <HAL_TIM_PWM_Start+0x30>
 8005920:	2301      	movs	r3, #1
 8005922:	e000      	b.n	8005926 <HAL_TIM_PWM_Start+0x32>
 8005924:	2300      	movs	r3, #0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d007      	beq.n	800593a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005938:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2b06      	cmp	r3, #6
 800594a:	d007      	beq.n	800595c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f042 0201 	orr.w	r2, r2, #1
 800595a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	40010000 	.word	0x40010000
 800596c:	40010400 	.word	0x40010400

08005970 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e083      	b.n	8005a8c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d106      	bne.n	800599e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f7fd f8e1 	bl	8002b60 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2202      	movs	r2, #2
 80059a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	6812      	ldr	r2, [r2, #0]
 80059b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059b4:	f023 0307 	bic.w	r3, r3, #7
 80059b8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	3304      	adds	r3, #4
 80059c2:	4619      	mov	r1, r3
 80059c4:	4610      	mov	r0, r2
 80059c6:	f000 fa93 	bl	8005ef0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059f2:	f023 0303 	bic.w	r3, r3, #3
 80059f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	021b      	lsls	r3, r3, #8
 8005a02:	4313      	orrs	r3, r2
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005a10:	f023 030c 	bic.w	r3, r3, #12
 8005a14:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68da      	ldr	r2, [r3, #12]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	021b      	lsls	r3, r3, #8
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	011a      	lsls	r2, r3, #4
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	031b      	lsls	r3, r3, #12
 8005a40:	4313      	orrs	r3, r2
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005a4e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005a56:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	011b      	lsls	r3, r3, #4
 8005a62:	4313      	orrs	r3, r2
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3718      	adds	r7, #24
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d002      	beq.n	8005aaa <HAL_TIM_Encoder_Start+0x16>
 8005aa4:	2b04      	cmp	r3, #4
 8005aa6:	d008      	beq.n	8005aba <HAL_TIM_Encoder_Start+0x26>
 8005aa8:	e00f      	b.n	8005aca <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 fc6c 	bl	8006390 <TIM_CCxChannelCmd>
      break;
 8005ab8:	e016      	b.n	8005ae8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	2104      	movs	r1, #4
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 fc64 	bl	8006390 <TIM_CCxChannelCmd>
      break;
 8005ac8:	e00e      	b.n	8005ae8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 fc5c 	bl	8006390 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2201      	movs	r2, #1
 8005ade:	2104      	movs	r1, #4
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 fc55 	bl	8006390 <TIM_CCxChannelCmd>
      break;
 8005ae6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0201 	orr.w	r2, r2, #1
 8005af6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3708      	adds	r7, #8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b082      	sub	sp, #8
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	f003 0302 	and.w	r3, r3, #2
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d122      	bne.n	8005b5e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d11b      	bne.n	8005b5e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f06f 0202 	mvn.w	r2, #2
 8005b2e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	f003 0303 	and.w	r3, r3, #3
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d003      	beq.n	8005b4c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f9b5 	bl	8005eb4 <HAL_TIM_IC_CaptureCallback>
 8005b4a:	e005      	b.n	8005b58 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 f9a7 	bl	8005ea0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f9b8 	bl	8005ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	f003 0304 	and.w	r3, r3, #4
 8005b68:	2b04      	cmp	r3, #4
 8005b6a:	d122      	bne.n	8005bb2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	f003 0304 	and.w	r3, r3, #4
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d11b      	bne.n	8005bb2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f06f 0204 	mvn.w	r2, #4
 8005b82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2202      	movs	r2, #2
 8005b88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d003      	beq.n	8005ba0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 f98b 	bl	8005eb4 <HAL_TIM_IC_CaptureCallback>
 8005b9e:	e005      	b.n	8005bac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 f97d 	bl	8005ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f98e 	bl	8005ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	f003 0308 	and.w	r3, r3, #8
 8005bbc:	2b08      	cmp	r3, #8
 8005bbe:	d122      	bne.n	8005c06 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	f003 0308 	and.w	r3, r3, #8
 8005bca:	2b08      	cmp	r3, #8
 8005bcc:	d11b      	bne.n	8005c06 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f06f 0208 	mvn.w	r2, #8
 8005bd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2204      	movs	r2, #4
 8005bdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	69db      	ldr	r3, [r3, #28]
 8005be4:	f003 0303 	and.w	r3, r3, #3
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d003      	beq.n	8005bf4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f961 	bl	8005eb4 <HAL_TIM_IC_CaptureCallback>
 8005bf2:	e005      	b.n	8005c00 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 f953 	bl	8005ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f964 	bl	8005ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	f003 0310 	and.w	r3, r3, #16
 8005c10:	2b10      	cmp	r3, #16
 8005c12:	d122      	bne.n	8005c5a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	f003 0310 	and.w	r3, r3, #16
 8005c1e:	2b10      	cmp	r3, #16
 8005c20:	d11b      	bne.n	8005c5a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f06f 0210 	mvn.w	r2, #16
 8005c2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2208      	movs	r2, #8
 8005c30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d003      	beq.n	8005c48 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 f937 	bl	8005eb4 <HAL_TIM_IC_CaptureCallback>
 8005c46:	e005      	b.n	8005c54 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 f929 	bl	8005ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f93a 	bl	8005ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d10e      	bne.n	8005c86 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d107      	bne.n	8005c86 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f06f 0201 	mvn.w	r2, #1
 8005c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f7fb fd65 	bl	8001750 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c90:	2b80      	cmp	r3, #128	; 0x80
 8005c92:	d10e      	bne.n	8005cb2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c9e:	2b80      	cmp	r3, #128	; 0x80
 8005ca0:	d107      	bne.n	8005cb2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 fc6d 	bl	800658c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cbc:	2b40      	cmp	r3, #64	; 0x40
 8005cbe:	d10e      	bne.n	8005cde <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cca:	2b40      	cmp	r3, #64	; 0x40
 8005ccc:	d107      	bne.n	8005cde <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 f8ff 	bl	8005edc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	f003 0320 	and.w	r3, r3, #32
 8005ce8:	2b20      	cmp	r3, #32
 8005cea:	d10e      	bne.n	8005d0a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	f003 0320 	and.w	r3, r3, #32
 8005cf6:	2b20      	cmp	r3, #32
 8005cf8:	d107      	bne.n	8005d0a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f06f 0220 	mvn.w	r2, #32
 8005d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 fc37 	bl	8006578 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d0a:	bf00      	nop
 8005d0c:	3708      	adds	r7, #8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
	...

08005d14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d101      	bne.n	8005d2e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	e0b4      	b.n	8005e98 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2202      	movs	r2, #2
 8005d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2b0c      	cmp	r3, #12
 8005d42:	f200 809f 	bhi.w	8005e84 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005d46:	a201      	add	r2, pc, #4	; (adr r2, 8005d4c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4c:	08005d81 	.word	0x08005d81
 8005d50:	08005e85 	.word	0x08005e85
 8005d54:	08005e85 	.word	0x08005e85
 8005d58:	08005e85 	.word	0x08005e85
 8005d5c:	08005dc1 	.word	0x08005dc1
 8005d60:	08005e85 	.word	0x08005e85
 8005d64:	08005e85 	.word	0x08005e85
 8005d68:	08005e85 	.word	0x08005e85
 8005d6c:	08005e03 	.word	0x08005e03
 8005d70:	08005e85 	.word	0x08005e85
 8005d74:	08005e85 	.word	0x08005e85
 8005d78:	08005e85 	.word	0x08005e85
 8005d7c:	08005e43 	.word	0x08005e43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68b9      	ldr	r1, [r7, #8]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 f952 	bl	8006030 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699a      	ldr	r2, [r3, #24]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f042 0208 	orr.w	r2, r2, #8
 8005d9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	699a      	ldr	r2, [r3, #24]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f022 0204 	bic.w	r2, r2, #4
 8005daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6999      	ldr	r1, [r3, #24]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	691a      	ldr	r2, [r3, #16]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	619a      	str	r2, [r3, #24]
      break;
 8005dbe:	e062      	b.n	8005e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68b9      	ldr	r1, [r7, #8]
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 f9a2 	bl	8006110 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	699a      	ldr	r2, [r3, #24]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699a      	ldr	r2, [r3, #24]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6999      	ldr	r1, [r3, #24]
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	021a      	lsls	r2, r3, #8
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	619a      	str	r2, [r3, #24]
      break;
 8005e00:	e041      	b.n	8005e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68b9      	ldr	r1, [r7, #8]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f000 f9f7 	bl	80061fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	69da      	ldr	r2, [r3, #28]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f042 0208 	orr.w	r2, r2, #8
 8005e1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	69da      	ldr	r2, [r3, #28]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f022 0204 	bic.w	r2, r2, #4
 8005e2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	69d9      	ldr	r1, [r3, #28]
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	691a      	ldr	r2, [r3, #16]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	61da      	str	r2, [r3, #28]
      break;
 8005e40:	e021      	b.n	8005e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68b9      	ldr	r1, [r7, #8]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 fa4b 	bl	80062e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	69da      	ldr	r2, [r3, #28]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	69da      	ldr	r2, [r3, #28]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	69d9      	ldr	r1, [r3, #28]
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	021a      	lsls	r2, r3, #8
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	61da      	str	r2, [r3, #28]
      break;
 8005e82:	e000      	b.n	8005e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005e84:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a40      	ldr	r2, [pc, #256]	; (8006004 <TIM_Base_SetConfig+0x114>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d013      	beq.n	8005f30 <TIM_Base_SetConfig+0x40>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f0e:	d00f      	beq.n	8005f30 <TIM_Base_SetConfig+0x40>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a3d      	ldr	r2, [pc, #244]	; (8006008 <TIM_Base_SetConfig+0x118>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d00b      	beq.n	8005f30 <TIM_Base_SetConfig+0x40>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a3c      	ldr	r2, [pc, #240]	; (800600c <TIM_Base_SetConfig+0x11c>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d007      	beq.n	8005f30 <TIM_Base_SetConfig+0x40>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a3b      	ldr	r2, [pc, #236]	; (8006010 <TIM_Base_SetConfig+0x120>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d003      	beq.n	8005f30 <TIM_Base_SetConfig+0x40>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a3a      	ldr	r2, [pc, #232]	; (8006014 <TIM_Base_SetConfig+0x124>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d108      	bne.n	8005f42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a2f      	ldr	r2, [pc, #188]	; (8006004 <TIM_Base_SetConfig+0x114>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d02b      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f50:	d027      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a2c      	ldr	r2, [pc, #176]	; (8006008 <TIM_Base_SetConfig+0x118>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d023      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a2b      	ldr	r2, [pc, #172]	; (800600c <TIM_Base_SetConfig+0x11c>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d01f      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a2a      	ldr	r2, [pc, #168]	; (8006010 <TIM_Base_SetConfig+0x120>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d01b      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a29      	ldr	r2, [pc, #164]	; (8006014 <TIM_Base_SetConfig+0x124>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d017      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a28      	ldr	r2, [pc, #160]	; (8006018 <TIM_Base_SetConfig+0x128>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d013      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a27      	ldr	r2, [pc, #156]	; (800601c <TIM_Base_SetConfig+0x12c>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d00f      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a26      	ldr	r2, [pc, #152]	; (8006020 <TIM_Base_SetConfig+0x130>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d00b      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a25      	ldr	r2, [pc, #148]	; (8006024 <TIM_Base_SetConfig+0x134>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d007      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a24      	ldr	r2, [pc, #144]	; (8006028 <TIM_Base_SetConfig+0x138>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d003      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a23      	ldr	r2, [pc, #140]	; (800602c <TIM_Base_SetConfig+0x13c>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d108      	bne.n	8005fb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a0a      	ldr	r2, [pc, #40]	; (8006004 <TIM_Base_SetConfig+0x114>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d003      	beq.n	8005fe8 <TIM_Base_SetConfig+0xf8>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a0c      	ldr	r2, [pc, #48]	; (8006014 <TIM_Base_SetConfig+0x124>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d103      	bne.n	8005ff0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	691a      	ldr	r2, [r3, #16]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	615a      	str	r2, [r3, #20]
}
 8005ff6:	bf00      	nop
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	40010000 	.word	0x40010000
 8006008:	40000400 	.word	0x40000400
 800600c:	40000800 	.word	0x40000800
 8006010:	40000c00 	.word	0x40000c00
 8006014:	40010400 	.word	0x40010400
 8006018:	40014000 	.word	0x40014000
 800601c:	40014400 	.word	0x40014400
 8006020:	40014800 	.word	0x40014800
 8006024:	40001800 	.word	0x40001800
 8006028:	40001c00 	.word	0x40001c00
 800602c:	40002000 	.word	0x40002000

08006030 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006030:	b480      	push	{r7}
 8006032:	b087      	sub	sp, #28
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	f023 0201 	bic.w	r2, r3, #1
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800605e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f023 0303 	bic.w	r3, r3, #3
 8006066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	4313      	orrs	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f023 0302 	bic.w	r3, r3, #2
 8006078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	4313      	orrs	r3, r2
 8006082:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a20      	ldr	r2, [pc, #128]	; (8006108 <TIM_OC1_SetConfig+0xd8>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d003      	beq.n	8006094 <TIM_OC1_SetConfig+0x64>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a1f      	ldr	r2, [pc, #124]	; (800610c <TIM_OC1_SetConfig+0xdc>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d10c      	bne.n	80060ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	f023 0308 	bic.w	r3, r3, #8
 800609a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	f023 0304 	bic.w	r3, r3, #4
 80060ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a15      	ldr	r2, [pc, #84]	; (8006108 <TIM_OC1_SetConfig+0xd8>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d003      	beq.n	80060be <TIM_OC1_SetConfig+0x8e>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a14      	ldr	r2, [pc, #80]	; (800610c <TIM_OC1_SetConfig+0xdc>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d111      	bne.n	80060e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	4313      	orrs	r3, r2
 80060e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	621a      	str	r2, [r3, #32]
}
 80060fc:	bf00      	nop
 80060fe:	371c      	adds	r7, #28
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr
 8006108:	40010000 	.word	0x40010000
 800610c:	40010400 	.word	0x40010400

08006110 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006110:	b480      	push	{r7}
 8006112:	b087      	sub	sp, #28
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	f023 0210 	bic.w	r2, r3, #16
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800613e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006146:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	021b      	lsls	r3, r3, #8
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	4313      	orrs	r3, r2
 8006152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f023 0320 	bic.w	r3, r3, #32
 800615a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	011b      	lsls	r3, r3, #4
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	4313      	orrs	r3, r2
 8006166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a22      	ldr	r2, [pc, #136]	; (80061f4 <TIM_OC2_SetConfig+0xe4>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d003      	beq.n	8006178 <TIM_OC2_SetConfig+0x68>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a21      	ldr	r2, [pc, #132]	; (80061f8 <TIM_OC2_SetConfig+0xe8>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d10d      	bne.n	8006194 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800617e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	011b      	lsls	r3, r3, #4
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	4313      	orrs	r3, r2
 800618a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006192:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a17      	ldr	r2, [pc, #92]	; (80061f4 <TIM_OC2_SetConfig+0xe4>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d003      	beq.n	80061a4 <TIM_OC2_SetConfig+0x94>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a16      	ldr	r2, [pc, #88]	; (80061f8 <TIM_OC2_SetConfig+0xe8>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d113      	bne.n	80061cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	4313      	orrs	r3, r2
 80061be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	685a      	ldr	r2, [r3, #4]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	621a      	str	r2, [r3, #32]
}
 80061e6:	bf00      	nop
 80061e8:	371c      	adds	r7, #28
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	40010000 	.word	0x40010000
 80061f8:	40010400 	.word	0x40010400

080061fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b087      	sub	sp, #28
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800622a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f023 0303 	bic.w	r3, r3, #3
 8006232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	4313      	orrs	r3, r2
 800623c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	021b      	lsls	r3, r3, #8
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	4313      	orrs	r3, r2
 8006250:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a21      	ldr	r2, [pc, #132]	; (80062dc <TIM_OC3_SetConfig+0xe0>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d003      	beq.n	8006262 <TIM_OC3_SetConfig+0x66>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a20      	ldr	r2, [pc, #128]	; (80062e0 <TIM_OC3_SetConfig+0xe4>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d10d      	bne.n	800627e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006268:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	021b      	lsls	r3, r3, #8
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	4313      	orrs	r3, r2
 8006274:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800627c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a16      	ldr	r2, [pc, #88]	; (80062dc <TIM_OC3_SetConfig+0xe0>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d003      	beq.n	800628e <TIM_OC3_SetConfig+0x92>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a15      	ldr	r2, [pc, #84]	; (80062e0 <TIM_OC3_SetConfig+0xe4>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d113      	bne.n	80062b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800629c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	011b      	lsls	r3, r3, #4
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	011b      	lsls	r3, r3, #4
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	685a      	ldr	r2, [r3, #4]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	621a      	str	r2, [r3, #32]
}
 80062d0:	bf00      	nop
 80062d2:	371c      	adds	r7, #28
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	40010000 	.word	0x40010000
 80062e0:	40010400 	.word	0x40010400

080062e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b087      	sub	sp, #28
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800631a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	021b      	lsls	r3, r3, #8
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	4313      	orrs	r3, r2
 8006326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800632e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	031b      	lsls	r3, r3, #12
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	4313      	orrs	r3, r2
 800633a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a12      	ldr	r2, [pc, #72]	; (8006388 <TIM_OC4_SetConfig+0xa4>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d003      	beq.n	800634c <TIM_OC4_SetConfig+0x68>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a11      	ldr	r2, [pc, #68]	; (800638c <TIM_OC4_SetConfig+0xa8>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d109      	bne.n	8006360 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006352:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	695b      	ldr	r3, [r3, #20]
 8006358:	019b      	lsls	r3, r3, #6
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	4313      	orrs	r3, r2
 800635e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	685a      	ldr	r2, [r3, #4]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	621a      	str	r2, [r3, #32]
}
 800637a:	bf00      	nop
 800637c:	371c      	adds	r7, #28
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	40010000 	.word	0x40010000
 800638c:	40010400 	.word	0x40010400

08006390 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006390:	b480      	push	{r7}
 8006392:	b087      	sub	sp, #28
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	f003 031f 	and.w	r3, r3, #31
 80063a2:	2201      	movs	r2, #1
 80063a4:	fa02 f303 	lsl.w	r3, r2, r3
 80063a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6a1a      	ldr	r2, [r3, #32]
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	43db      	mvns	r3, r3
 80063b2:	401a      	ands	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6a1a      	ldr	r2, [r3, #32]
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	f003 031f 	and.w	r3, r3, #31
 80063c2:	6879      	ldr	r1, [r7, #4]
 80063c4:	fa01 f303 	lsl.w	r3, r1, r3
 80063c8:	431a      	orrs	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	621a      	str	r2, [r3, #32]
}
 80063ce:	bf00      	nop
 80063d0:	371c      	adds	r7, #28
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
	...

080063dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d101      	bne.n	80063f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063f0:	2302      	movs	r3, #2
 80063f2:	e05a      	b.n	80064aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800641a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	4313      	orrs	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a21      	ldr	r2, [pc, #132]	; (80064b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d022      	beq.n	800647e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006440:	d01d      	beq.n	800647e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a1d      	ldr	r2, [pc, #116]	; (80064bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d018      	beq.n	800647e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a1b      	ldr	r2, [pc, #108]	; (80064c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d013      	beq.n	800647e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a1a      	ldr	r2, [pc, #104]	; (80064c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d00e      	beq.n	800647e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a18      	ldr	r2, [pc, #96]	; (80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d009      	beq.n	800647e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a17      	ldr	r2, [pc, #92]	; (80064cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d004      	beq.n	800647e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a15      	ldr	r2, [pc, #84]	; (80064d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d10c      	bne.n	8006498 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006484:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	4313      	orrs	r3, r2
 800648e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	40010000 	.word	0x40010000
 80064bc:	40000400 	.word	0x40000400
 80064c0:	40000800 	.word	0x40000800
 80064c4:	40000c00 	.word	0x40000c00
 80064c8:	40010400 	.word	0x40010400
 80064cc:	40014000 	.word	0x40014000
 80064d0:	40001800 	.word	0x40001800

080064d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80064de:	2300      	movs	r3, #0
 80064e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d101      	bne.n	80064f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80064ec:	2302      	movs	r3, #2
 80064ee:	e03d      	b.n	800656c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	4313      	orrs	r3, r2
 8006504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	4313      	orrs	r3, r2
 8006512:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	4313      	orrs	r3, r2
 8006520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4313      	orrs	r3, r2
 800652e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	4313      	orrs	r3, r2
 800653c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	4313      	orrs	r3, r2
 800654a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	4313      	orrs	r3, r2
 8006558:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3714      	adds	r7, #20
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d101      	bne.n	80065b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e03f      	b.n	8006632 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d106      	bne.n	80065cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7fc fcfa 	bl	8002fc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2224      	movs	r2, #36	; 0x24
 80065d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 fb23 	bl	8006c30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	691a      	ldr	r2, [r3, #16]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	695a      	ldr	r2, [r3, #20]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006608:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68da      	ldr	r2, [r3, #12]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006618:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2220      	movs	r2, #32
 8006624:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2220      	movs	r2, #32
 800662c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3708      	adds	r7, #8
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b088      	sub	sp, #32
 800663e:	af02      	add	r7, sp, #8
 8006640:	60f8      	str	r0, [r7, #12]
 8006642:	60b9      	str	r1, [r7, #8]
 8006644:	603b      	str	r3, [r7, #0]
 8006646:	4613      	mov	r3, r2
 8006648:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800664a:	2300      	movs	r3, #0
 800664c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b20      	cmp	r3, #32
 8006658:	f040 8083 	bne.w	8006762 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d002      	beq.n	8006668 <HAL_UART_Transmit+0x2e>
 8006662:	88fb      	ldrh	r3, [r7, #6]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e07b      	b.n	8006764 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006672:	2b01      	cmp	r3, #1
 8006674:	d101      	bne.n	800667a <HAL_UART_Transmit+0x40>
 8006676:	2302      	movs	r3, #2
 8006678:	e074      	b.n	8006764 <HAL_UART_Transmit+0x12a>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2221      	movs	r2, #33	; 0x21
 800668c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006690:	f7fc feba 	bl	8003408 <HAL_GetTick>
 8006694:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	88fa      	ldrh	r2, [r7, #6]
 800669a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	88fa      	ldrh	r2, [r7, #6]
 80066a0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80066aa:	e042      	b.n	8006732 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	3b01      	subs	r3, #1
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066c2:	d122      	bne.n	800670a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	2200      	movs	r2, #0
 80066cc:	2180      	movs	r1, #128	; 0x80
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f000 fa30 	bl	8006b34 <UART_WaitOnFlagUntilTimeout>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e042      	b.n	8006764 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	881b      	ldrh	r3, [r3, #0]
 80066e6:	461a      	mov	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066f0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d103      	bne.n	8006702 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	3302      	adds	r3, #2
 80066fe:	60bb      	str	r3, [r7, #8]
 8006700:	e017      	b.n	8006732 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	3301      	adds	r3, #1
 8006706:	60bb      	str	r3, [r7, #8]
 8006708:	e013      	b.n	8006732 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2200      	movs	r2, #0
 8006712:	2180      	movs	r1, #128	; 0x80
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f000 fa0d 	bl	8006b34 <UART_WaitOnFlagUntilTimeout>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d001      	beq.n	8006724 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e01f      	b.n	8006764 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	1c5a      	adds	r2, r3, #1
 8006728:	60ba      	str	r2, [r7, #8]
 800672a:	781a      	ldrb	r2, [r3, #0]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006736:	b29b      	uxth	r3, r3
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1b7      	bne.n	80066ac <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	2200      	movs	r2, #0
 8006744:	2140      	movs	r1, #64	; 0x40
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f000 f9f4 	bl	8006b34 <UART_WaitOnFlagUntilTimeout>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d001      	beq.n	8006756 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e006      	b.n	8006764 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2220      	movs	r2, #32
 800675a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	e000      	b.n	8006764 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006762:	2302      	movs	r3, #2
  }
}
 8006764:	4618      	mov	r0, r3
 8006766:	3718      	adds	r7, #24
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b088      	sub	sp, #32
 8006770:	af02      	add	r7, sp, #8
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	603b      	str	r3, [r7, #0]
 8006778:	4613      	mov	r3, r2
 800677a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800677c:	2300      	movs	r3, #0
 800677e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b20      	cmp	r3, #32
 800678a:	f040 8090 	bne.w	80068ae <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d002      	beq.n	800679a <HAL_UART_Receive+0x2e>
 8006794:	88fb      	ldrh	r3, [r7, #6]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e088      	b.n	80068b0 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d101      	bne.n	80067ac <HAL_UART_Receive+0x40>
 80067a8:	2302      	movs	r3, #2
 80067aa:	e081      	b.n	80068b0 <HAL_UART_Receive+0x144>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2222      	movs	r2, #34	; 0x22
 80067be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80067c2:	f7fc fe21 	bl	8003408 <HAL_GetTick>
 80067c6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	88fa      	ldrh	r2, [r7, #6]
 80067cc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	88fa      	ldrh	r2, [r7, #6]
 80067d2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80067dc:	e05c      	b.n	8006898 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	3b01      	subs	r3, #1
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067f4:	d12b      	bne.n	800684e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	2200      	movs	r2, #0
 80067fe:	2120      	movs	r1, #32
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f000 f997 	bl	8006b34 <UART_WaitOnFlagUntilTimeout>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d001      	beq.n	8006810 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e04f      	b.n	80068b0 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10c      	bne.n	8006836 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	b29b      	uxth	r3, r3
 8006824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006828:	b29a      	uxth	r2, r3
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	3302      	adds	r3, #2
 8006832:	60bb      	str	r3, [r7, #8]
 8006834:	e030      	b.n	8006898 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	b29b      	uxth	r3, r3
 800683e:	b2db      	uxtb	r3, r3
 8006840:	b29a      	uxth	r2, r3
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	3301      	adds	r3, #1
 800684a:	60bb      	str	r3, [r7, #8]
 800684c:	e024      	b.n	8006898 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	2200      	movs	r2, #0
 8006856:	2120      	movs	r1, #32
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f000 f96b 	bl	8006b34 <UART_WaitOnFlagUntilTimeout>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d001      	beq.n	8006868 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e023      	b.n	80068b0 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d108      	bne.n	8006882 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6859      	ldr	r1, [r3, #4]
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	1c5a      	adds	r2, r3, #1
 800687a:	60ba      	str	r2, [r7, #8]
 800687c:	b2ca      	uxtb	r2, r1
 800687e:	701a      	strb	r2, [r3, #0]
 8006880:	e00a      	b.n	8006898 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	b2da      	uxtb	r2, r3
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	1c59      	adds	r1, r3, #1
 800688e:	60b9      	str	r1, [r7, #8]
 8006890:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006894:	b2d2      	uxtb	r2, r2
 8006896:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800689c:	b29b      	uxth	r3, r3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d19d      	bne.n	80067de <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2220      	movs	r2, #32
 80068a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80068aa:	2300      	movs	r3, #0
 80068ac:	e000      	b.n	80068b0 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80068ae:	2302      	movs	r3, #2
  }
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3718      	adds	r7, #24
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	4613      	mov	r3, r2
 80068c4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b20      	cmp	r3, #32
 80068d0:	d166      	bne.n	80069a0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d002      	beq.n	80068de <HAL_UART_Receive_DMA+0x26>
 80068d8:	88fb      	ldrh	r3, [r7, #6]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d101      	bne.n	80068e2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e05f      	b.n	80069a2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d101      	bne.n	80068f0 <HAL_UART_Receive_DMA+0x38>
 80068ec:	2302      	movs	r3, #2
 80068ee:	e058      	b.n	80069a2 <HAL_UART_Receive_DMA+0xea>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	88fa      	ldrh	r2, [r7, #6]
 8006902:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2222      	movs	r2, #34	; 0x22
 800690e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006916:	4a25      	ldr	r2, [pc, #148]	; (80069ac <HAL_UART_Receive_DMA+0xf4>)
 8006918:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800691e:	4a24      	ldr	r2, [pc, #144]	; (80069b0 <HAL_UART_Receive_DMA+0xf8>)
 8006920:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006926:	4a23      	ldr	r2, [pc, #140]	; (80069b4 <HAL_UART_Receive_DMA+0xfc>)
 8006928:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800692e:	2200      	movs	r2, #0
 8006930:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8006932:	f107 0308 	add.w	r3, r7, #8
 8006936:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	3304      	adds	r3, #4
 8006942:	4619      	mov	r1, r3
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	88fb      	ldrh	r3, [r7, #6]
 800694a:	f7fd fda7 	bl	800449c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800694e:	2300      	movs	r3, #0
 8006950:	613b      	str	r3, [r7, #16]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	613b      	str	r3, [r7, #16]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	613b      	str	r3, [r7, #16]
 8006962:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68da      	ldr	r2, [r3, #12]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800697a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	695a      	ldr	r2, [r3, #20]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f042 0201 	orr.w	r2, r2, #1
 800698a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	695a      	ldr	r2, [r3, #20]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800699a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800699c:	2300      	movs	r3, #0
 800699e:	e000      	b.n	80069a2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80069a0:	2302      	movs	r3, #2
  }
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3718      	adds	r7, #24
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	08006a1d 	.word	0x08006a1d
 80069b0:	08006a85 	.word	0x08006a85
 80069b4:	08006aa1 	.word	0x08006aa1

080069b8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 80069e8:	2300      	movs	r3, #0
 80069ea:	60fb      	str	r3, [r7, #12]
 80069ec:	2300      	movs	r3, #0
 80069ee:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	b2da      	uxtb	r2, r3
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	b2db      	uxtb	r3, r3
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3714      	adds	r7, #20
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a28:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d11e      	bne.n	8006a76 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68da      	ldr	r2, [r3, #12]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a4c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	695a      	ldr	r2, [r3, #20]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f022 0201 	bic.w	r2, r2, #1
 8006a5c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	695a      	ldr	r2, [r3, #20]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a6c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2220      	movs	r2, #32
 8006a72:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f7fa ffe2 	bl	8001a40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a7c:	bf00      	nop
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a90:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f7ff ff90 	bl	80069b8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a98:	bf00      	nop
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	695b      	ldr	r3, [r3, #20]
 8006ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006abc:	2b80      	cmp	r3, #128	; 0x80
 8006abe:	bf0c      	ite	eq
 8006ac0:	2301      	moveq	r3, #1
 8006ac2:	2300      	movne	r3, #0
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	2b21      	cmp	r3, #33	; 0x21
 8006ad2:	d108      	bne.n	8006ae6 <UART_DMAError+0x46>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d005      	beq.n	8006ae6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	2200      	movs	r2, #0
 8006ade:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006ae0:	68b8      	ldr	r0, [r7, #8]
 8006ae2:	f000 f871 	bl	8006bc8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	695b      	ldr	r3, [r3, #20]
 8006aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af0:	2b40      	cmp	r3, #64	; 0x40
 8006af2:	bf0c      	ite	eq
 8006af4:	2301      	moveq	r3, #1
 8006af6:	2300      	movne	r3, #0
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	2b22      	cmp	r3, #34	; 0x22
 8006b06:	d108      	bne.n	8006b1a <UART_DMAError+0x7a>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d005      	beq.n	8006b1a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	2200      	movs	r2, #0
 8006b12:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006b14:	68b8      	ldr	r0, [r7, #8]
 8006b16:	f000 f86d 	bl	8006bf4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b1e:	f043 0210 	orr.w	r2, r3, #16
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b26:	68b8      	ldr	r0, [r7, #8]
 8006b28:	f7ff ff50 	bl	80069cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b2c:	bf00      	nop
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	603b      	str	r3, [r7, #0]
 8006b40:	4613      	mov	r3, r2
 8006b42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b44:	e02c      	b.n	8006ba0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b4c:	d028      	beq.n	8006ba0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d007      	beq.n	8006b64 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b54:	f7fc fc58 	bl	8003408 <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	69ba      	ldr	r2, [r7, #24]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d21d      	bcs.n	8006ba0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68da      	ldr	r2, [r3, #12]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b72:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	695a      	ldr	r2, [r3, #20]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 0201 	bic.w	r2, r2, #1
 8006b82:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2220      	movs	r2, #32
 8006b88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e00f      	b.n	8006bc0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	4013      	ands	r3, r2
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	bf0c      	ite	eq
 8006bb0:	2301      	moveq	r3, #1
 8006bb2:	2300      	movne	r3, #0
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	79fb      	ldrb	r3, [r7, #7]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d0c3      	beq.n	8006b46 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68da      	ldr	r2, [r3, #12]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006bde:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2220      	movs	r2, #32
 8006be4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68da      	ldr	r2, [r3, #12]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006c0a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	695a      	ldr	r2, [r3, #20]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f022 0201 	bic.w	r2, r2, #1
 8006c1a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2220      	movs	r2, #32
 8006c20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006c24:	bf00      	nop
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c34:	b085      	sub	sp, #20
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	68da      	ldr	r2, [r3, #12]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	689a      	ldr	r2, [r3, #8]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	431a      	orrs	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	431a      	orrs	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006c72:	f023 030c 	bic.w	r3, r3, #12
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	6812      	ldr	r2, [r2, #0]
 8006c7a:	68f9      	ldr	r1, [r7, #12]
 8006c7c:	430b      	orrs	r3, r1
 8006c7e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	699a      	ldr	r2, [r3, #24]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	430a      	orrs	r2, r1
 8006c94:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	69db      	ldr	r3, [r3, #28]
 8006c9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c9e:	f040 818b 	bne.w	8006fb8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4ac1      	ldr	r2, [pc, #772]	; (8006fac <UART_SetConfig+0x37c>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d005      	beq.n	8006cb8 <UART_SetConfig+0x88>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4abf      	ldr	r2, [pc, #764]	; (8006fb0 <UART_SetConfig+0x380>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	f040 80bd 	bne.w	8006e32 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006cb8:	f7fe f994 	bl	8004fe4 <HAL_RCC_GetPCLK2Freq>
 8006cbc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	461d      	mov	r5, r3
 8006cc2:	f04f 0600 	mov.w	r6, #0
 8006cc6:	46a8      	mov	r8, r5
 8006cc8:	46b1      	mov	r9, r6
 8006cca:	eb18 0308 	adds.w	r3, r8, r8
 8006cce:	eb49 0409 	adc.w	r4, r9, r9
 8006cd2:	4698      	mov	r8, r3
 8006cd4:	46a1      	mov	r9, r4
 8006cd6:	eb18 0805 	adds.w	r8, r8, r5
 8006cda:	eb49 0906 	adc.w	r9, r9, r6
 8006cde:	f04f 0100 	mov.w	r1, #0
 8006ce2:	f04f 0200 	mov.w	r2, #0
 8006ce6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006cea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006cee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006cf2:	4688      	mov	r8, r1
 8006cf4:	4691      	mov	r9, r2
 8006cf6:	eb18 0005 	adds.w	r0, r8, r5
 8006cfa:	eb49 0106 	adc.w	r1, r9, r6
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	461d      	mov	r5, r3
 8006d04:	f04f 0600 	mov.w	r6, #0
 8006d08:	196b      	adds	r3, r5, r5
 8006d0a:	eb46 0406 	adc.w	r4, r6, r6
 8006d0e:	461a      	mov	r2, r3
 8006d10:	4623      	mov	r3, r4
 8006d12:	f7f9 ff65 	bl	8000be0 <__aeabi_uldivmod>
 8006d16:	4603      	mov	r3, r0
 8006d18:	460c      	mov	r4, r1
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	4ba5      	ldr	r3, [pc, #660]	; (8006fb4 <UART_SetConfig+0x384>)
 8006d1e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d22:	095b      	lsrs	r3, r3, #5
 8006d24:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	461d      	mov	r5, r3
 8006d2c:	f04f 0600 	mov.w	r6, #0
 8006d30:	46a9      	mov	r9, r5
 8006d32:	46b2      	mov	sl, r6
 8006d34:	eb19 0309 	adds.w	r3, r9, r9
 8006d38:	eb4a 040a 	adc.w	r4, sl, sl
 8006d3c:	4699      	mov	r9, r3
 8006d3e:	46a2      	mov	sl, r4
 8006d40:	eb19 0905 	adds.w	r9, r9, r5
 8006d44:	eb4a 0a06 	adc.w	sl, sl, r6
 8006d48:	f04f 0100 	mov.w	r1, #0
 8006d4c:	f04f 0200 	mov.w	r2, #0
 8006d50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d5c:	4689      	mov	r9, r1
 8006d5e:	4692      	mov	sl, r2
 8006d60:	eb19 0005 	adds.w	r0, r9, r5
 8006d64:	eb4a 0106 	adc.w	r1, sl, r6
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	461d      	mov	r5, r3
 8006d6e:	f04f 0600 	mov.w	r6, #0
 8006d72:	196b      	adds	r3, r5, r5
 8006d74:	eb46 0406 	adc.w	r4, r6, r6
 8006d78:	461a      	mov	r2, r3
 8006d7a:	4623      	mov	r3, r4
 8006d7c:	f7f9 ff30 	bl	8000be0 <__aeabi_uldivmod>
 8006d80:	4603      	mov	r3, r0
 8006d82:	460c      	mov	r4, r1
 8006d84:	461a      	mov	r2, r3
 8006d86:	4b8b      	ldr	r3, [pc, #556]	; (8006fb4 <UART_SetConfig+0x384>)
 8006d88:	fba3 1302 	umull	r1, r3, r3, r2
 8006d8c:	095b      	lsrs	r3, r3, #5
 8006d8e:	2164      	movs	r1, #100	; 0x64
 8006d90:	fb01 f303 	mul.w	r3, r1, r3
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	00db      	lsls	r3, r3, #3
 8006d98:	3332      	adds	r3, #50	; 0x32
 8006d9a:	4a86      	ldr	r2, [pc, #536]	; (8006fb4 <UART_SetConfig+0x384>)
 8006d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006da0:	095b      	lsrs	r3, r3, #5
 8006da2:	005b      	lsls	r3, r3, #1
 8006da4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006da8:	4498      	add	r8, r3
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	461d      	mov	r5, r3
 8006dae:	f04f 0600 	mov.w	r6, #0
 8006db2:	46a9      	mov	r9, r5
 8006db4:	46b2      	mov	sl, r6
 8006db6:	eb19 0309 	adds.w	r3, r9, r9
 8006dba:	eb4a 040a 	adc.w	r4, sl, sl
 8006dbe:	4699      	mov	r9, r3
 8006dc0:	46a2      	mov	sl, r4
 8006dc2:	eb19 0905 	adds.w	r9, r9, r5
 8006dc6:	eb4a 0a06 	adc.w	sl, sl, r6
 8006dca:	f04f 0100 	mov.w	r1, #0
 8006dce:	f04f 0200 	mov.w	r2, #0
 8006dd2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006dd6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006dda:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006dde:	4689      	mov	r9, r1
 8006de0:	4692      	mov	sl, r2
 8006de2:	eb19 0005 	adds.w	r0, r9, r5
 8006de6:	eb4a 0106 	adc.w	r1, sl, r6
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	461d      	mov	r5, r3
 8006df0:	f04f 0600 	mov.w	r6, #0
 8006df4:	196b      	adds	r3, r5, r5
 8006df6:	eb46 0406 	adc.w	r4, r6, r6
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	4623      	mov	r3, r4
 8006dfe:	f7f9 feef 	bl	8000be0 <__aeabi_uldivmod>
 8006e02:	4603      	mov	r3, r0
 8006e04:	460c      	mov	r4, r1
 8006e06:	461a      	mov	r2, r3
 8006e08:	4b6a      	ldr	r3, [pc, #424]	; (8006fb4 <UART_SetConfig+0x384>)
 8006e0a:	fba3 1302 	umull	r1, r3, r3, r2
 8006e0e:	095b      	lsrs	r3, r3, #5
 8006e10:	2164      	movs	r1, #100	; 0x64
 8006e12:	fb01 f303 	mul.w	r3, r1, r3
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	00db      	lsls	r3, r3, #3
 8006e1a:	3332      	adds	r3, #50	; 0x32
 8006e1c:	4a65      	ldr	r2, [pc, #404]	; (8006fb4 <UART_SetConfig+0x384>)
 8006e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e22:	095b      	lsrs	r3, r3, #5
 8006e24:	f003 0207 	and.w	r2, r3, #7
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4442      	add	r2, r8
 8006e2e:	609a      	str	r2, [r3, #8]
 8006e30:	e26f      	b.n	8007312 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e32:	f7fe f8c3 	bl	8004fbc <HAL_RCC_GetPCLK1Freq>
 8006e36:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	461d      	mov	r5, r3
 8006e3c:	f04f 0600 	mov.w	r6, #0
 8006e40:	46a8      	mov	r8, r5
 8006e42:	46b1      	mov	r9, r6
 8006e44:	eb18 0308 	adds.w	r3, r8, r8
 8006e48:	eb49 0409 	adc.w	r4, r9, r9
 8006e4c:	4698      	mov	r8, r3
 8006e4e:	46a1      	mov	r9, r4
 8006e50:	eb18 0805 	adds.w	r8, r8, r5
 8006e54:	eb49 0906 	adc.w	r9, r9, r6
 8006e58:	f04f 0100 	mov.w	r1, #0
 8006e5c:	f04f 0200 	mov.w	r2, #0
 8006e60:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006e64:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006e68:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006e6c:	4688      	mov	r8, r1
 8006e6e:	4691      	mov	r9, r2
 8006e70:	eb18 0005 	adds.w	r0, r8, r5
 8006e74:	eb49 0106 	adc.w	r1, r9, r6
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	461d      	mov	r5, r3
 8006e7e:	f04f 0600 	mov.w	r6, #0
 8006e82:	196b      	adds	r3, r5, r5
 8006e84:	eb46 0406 	adc.w	r4, r6, r6
 8006e88:	461a      	mov	r2, r3
 8006e8a:	4623      	mov	r3, r4
 8006e8c:	f7f9 fea8 	bl	8000be0 <__aeabi_uldivmod>
 8006e90:	4603      	mov	r3, r0
 8006e92:	460c      	mov	r4, r1
 8006e94:	461a      	mov	r2, r3
 8006e96:	4b47      	ldr	r3, [pc, #284]	; (8006fb4 <UART_SetConfig+0x384>)
 8006e98:	fba3 2302 	umull	r2, r3, r3, r2
 8006e9c:	095b      	lsrs	r3, r3, #5
 8006e9e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	461d      	mov	r5, r3
 8006ea6:	f04f 0600 	mov.w	r6, #0
 8006eaa:	46a9      	mov	r9, r5
 8006eac:	46b2      	mov	sl, r6
 8006eae:	eb19 0309 	adds.w	r3, r9, r9
 8006eb2:	eb4a 040a 	adc.w	r4, sl, sl
 8006eb6:	4699      	mov	r9, r3
 8006eb8:	46a2      	mov	sl, r4
 8006eba:	eb19 0905 	adds.w	r9, r9, r5
 8006ebe:	eb4a 0a06 	adc.w	sl, sl, r6
 8006ec2:	f04f 0100 	mov.w	r1, #0
 8006ec6:	f04f 0200 	mov.w	r2, #0
 8006eca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ece:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ed2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ed6:	4689      	mov	r9, r1
 8006ed8:	4692      	mov	sl, r2
 8006eda:	eb19 0005 	adds.w	r0, r9, r5
 8006ede:	eb4a 0106 	adc.w	r1, sl, r6
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	461d      	mov	r5, r3
 8006ee8:	f04f 0600 	mov.w	r6, #0
 8006eec:	196b      	adds	r3, r5, r5
 8006eee:	eb46 0406 	adc.w	r4, r6, r6
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	4623      	mov	r3, r4
 8006ef6:	f7f9 fe73 	bl	8000be0 <__aeabi_uldivmod>
 8006efa:	4603      	mov	r3, r0
 8006efc:	460c      	mov	r4, r1
 8006efe:	461a      	mov	r2, r3
 8006f00:	4b2c      	ldr	r3, [pc, #176]	; (8006fb4 <UART_SetConfig+0x384>)
 8006f02:	fba3 1302 	umull	r1, r3, r3, r2
 8006f06:	095b      	lsrs	r3, r3, #5
 8006f08:	2164      	movs	r1, #100	; 0x64
 8006f0a:	fb01 f303 	mul.w	r3, r1, r3
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	00db      	lsls	r3, r3, #3
 8006f12:	3332      	adds	r3, #50	; 0x32
 8006f14:	4a27      	ldr	r2, [pc, #156]	; (8006fb4 <UART_SetConfig+0x384>)
 8006f16:	fba2 2303 	umull	r2, r3, r2, r3
 8006f1a:	095b      	lsrs	r3, r3, #5
 8006f1c:	005b      	lsls	r3, r3, #1
 8006f1e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f22:	4498      	add	r8, r3
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	461d      	mov	r5, r3
 8006f28:	f04f 0600 	mov.w	r6, #0
 8006f2c:	46a9      	mov	r9, r5
 8006f2e:	46b2      	mov	sl, r6
 8006f30:	eb19 0309 	adds.w	r3, r9, r9
 8006f34:	eb4a 040a 	adc.w	r4, sl, sl
 8006f38:	4699      	mov	r9, r3
 8006f3a:	46a2      	mov	sl, r4
 8006f3c:	eb19 0905 	adds.w	r9, r9, r5
 8006f40:	eb4a 0a06 	adc.w	sl, sl, r6
 8006f44:	f04f 0100 	mov.w	r1, #0
 8006f48:	f04f 0200 	mov.w	r2, #0
 8006f4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f58:	4689      	mov	r9, r1
 8006f5a:	4692      	mov	sl, r2
 8006f5c:	eb19 0005 	adds.w	r0, r9, r5
 8006f60:	eb4a 0106 	adc.w	r1, sl, r6
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	461d      	mov	r5, r3
 8006f6a:	f04f 0600 	mov.w	r6, #0
 8006f6e:	196b      	adds	r3, r5, r5
 8006f70:	eb46 0406 	adc.w	r4, r6, r6
 8006f74:	461a      	mov	r2, r3
 8006f76:	4623      	mov	r3, r4
 8006f78:	f7f9 fe32 	bl	8000be0 <__aeabi_uldivmod>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	460c      	mov	r4, r1
 8006f80:	461a      	mov	r2, r3
 8006f82:	4b0c      	ldr	r3, [pc, #48]	; (8006fb4 <UART_SetConfig+0x384>)
 8006f84:	fba3 1302 	umull	r1, r3, r3, r2
 8006f88:	095b      	lsrs	r3, r3, #5
 8006f8a:	2164      	movs	r1, #100	; 0x64
 8006f8c:	fb01 f303 	mul.w	r3, r1, r3
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	00db      	lsls	r3, r3, #3
 8006f94:	3332      	adds	r3, #50	; 0x32
 8006f96:	4a07      	ldr	r2, [pc, #28]	; (8006fb4 <UART_SetConfig+0x384>)
 8006f98:	fba2 2303 	umull	r2, r3, r2, r3
 8006f9c:	095b      	lsrs	r3, r3, #5
 8006f9e:	f003 0207 	and.w	r2, r3, #7
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4442      	add	r2, r8
 8006fa8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006faa:	e1b2      	b.n	8007312 <UART_SetConfig+0x6e2>
 8006fac:	40011000 	.word	0x40011000
 8006fb0:	40011400 	.word	0x40011400
 8006fb4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4ad7      	ldr	r2, [pc, #860]	; (800731c <UART_SetConfig+0x6ec>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d005      	beq.n	8006fce <UART_SetConfig+0x39e>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4ad6      	ldr	r2, [pc, #856]	; (8007320 <UART_SetConfig+0x6f0>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	f040 80d1 	bne.w	8007170 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006fce:	f7fe f809 	bl	8004fe4 <HAL_RCC_GetPCLK2Freq>
 8006fd2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	469a      	mov	sl, r3
 8006fd8:	f04f 0b00 	mov.w	fp, #0
 8006fdc:	46d0      	mov	r8, sl
 8006fde:	46d9      	mov	r9, fp
 8006fe0:	eb18 0308 	adds.w	r3, r8, r8
 8006fe4:	eb49 0409 	adc.w	r4, r9, r9
 8006fe8:	4698      	mov	r8, r3
 8006fea:	46a1      	mov	r9, r4
 8006fec:	eb18 080a 	adds.w	r8, r8, sl
 8006ff0:	eb49 090b 	adc.w	r9, r9, fp
 8006ff4:	f04f 0100 	mov.w	r1, #0
 8006ff8:	f04f 0200 	mov.w	r2, #0
 8006ffc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007000:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007004:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007008:	4688      	mov	r8, r1
 800700a:	4691      	mov	r9, r2
 800700c:	eb1a 0508 	adds.w	r5, sl, r8
 8007010:	eb4b 0609 	adc.w	r6, fp, r9
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	4619      	mov	r1, r3
 800701a:	f04f 0200 	mov.w	r2, #0
 800701e:	f04f 0300 	mov.w	r3, #0
 8007022:	f04f 0400 	mov.w	r4, #0
 8007026:	0094      	lsls	r4, r2, #2
 8007028:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800702c:	008b      	lsls	r3, r1, #2
 800702e:	461a      	mov	r2, r3
 8007030:	4623      	mov	r3, r4
 8007032:	4628      	mov	r0, r5
 8007034:	4631      	mov	r1, r6
 8007036:	f7f9 fdd3 	bl	8000be0 <__aeabi_uldivmod>
 800703a:	4603      	mov	r3, r0
 800703c:	460c      	mov	r4, r1
 800703e:	461a      	mov	r2, r3
 8007040:	4bb8      	ldr	r3, [pc, #736]	; (8007324 <UART_SetConfig+0x6f4>)
 8007042:	fba3 2302 	umull	r2, r3, r3, r2
 8007046:	095b      	lsrs	r3, r3, #5
 8007048:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	469b      	mov	fp, r3
 8007050:	f04f 0c00 	mov.w	ip, #0
 8007054:	46d9      	mov	r9, fp
 8007056:	46e2      	mov	sl, ip
 8007058:	eb19 0309 	adds.w	r3, r9, r9
 800705c:	eb4a 040a 	adc.w	r4, sl, sl
 8007060:	4699      	mov	r9, r3
 8007062:	46a2      	mov	sl, r4
 8007064:	eb19 090b 	adds.w	r9, r9, fp
 8007068:	eb4a 0a0c 	adc.w	sl, sl, ip
 800706c:	f04f 0100 	mov.w	r1, #0
 8007070:	f04f 0200 	mov.w	r2, #0
 8007074:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007078:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800707c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007080:	4689      	mov	r9, r1
 8007082:	4692      	mov	sl, r2
 8007084:	eb1b 0509 	adds.w	r5, fp, r9
 8007088:	eb4c 060a 	adc.w	r6, ip, sl
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	4619      	mov	r1, r3
 8007092:	f04f 0200 	mov.w	r2, #0
 8007096:	f04f 0300 	mov.w	r3, #0
 800709a:	f04f 0400 	mov.w	r4, #0
 800709e:	0094      	lsls	r4, r2, #2
 80070a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80070a4:	008b      	lsls	r3, r1, #2
 80070a6:	461a      	mov	r2, r3
 80070a8:	4623      	mov	r3, r4
 80070aa:	4628      	mov	r0, r5
 80070ac:	4631      	mov	r1, r6
 80070ae:	f7f9 fd97 	bl	8000be0 <__aeabi_uldivmod>
 80070b2:	4603      	mov	r3, r0
 80070b4:	460c      	mov	r4, r1
 80070b6:	461a      	mov	r2, r3
 80070b8:	4b9a      	ldr	r3, [pc, #616]	; (8007324 <UART_SetConfig+0x6f4>)
 80070ba:	fba3 1302 	umull	r1, r3, r3, r2
 80070be:	095b      	lsrs	r3, r3, #5
 80070c0:	2164      	movs	r1, #100	; 0x64
 80070c2:	fb01 f303 	mul.w	r3, r1, r3
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	011b      	lsls	r3, r3, #4
 80070ca:	3332      	adds	r3, #50	; 0x32
 80070cc:	4a95      	ldr	r2, [pc, #596]	; (8007324 <UART_SetConfig+0x6f4>)
 80070ce:	fba2 2303 	umull	r2, r3, r2, r3
 80070d2:	095b      	lsrs	r3, r3, #5
 80070d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070d8:	4498      	add	r8, r3
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	469b      	mov	fp, r3
 80070de:	f04f 0c00 	mov.w	ip, #0
 80070e2:	46d9      	mov	r9, fp
 80070e4:	46e2      	mov	sl, ip
 80070e6:	eb19 0309 	adds.w	r3, r9, r9
 80070ea:	eb4a 040a 	adc.w	r4, sl, sl
 80070ee:	4699      	mov	r9, r3
 80070f0:	46a2      	mov	sl, r4
 80070f2:	eb19 090b 	adds.w	r9, r9, fp
 80070f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80070fa:	f04f 0100 	mov.w	r1, #0
 80070fe:	f04f 0200 	mov.w	r2, #0
 8007102:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007106:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800710a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800710e:	4689      	mov	r9, r1
 8007110:	4692      	mov	sl, r2
 8007112:	eb1b 0509 	adds.w	r5, fp, r9
 8007116:	eb4c 060a 	adc.w	r6, ip, sl
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	4619      	mov	r1, r3
 8007120:	f04f 0200 	mov.w	r2, #0
 8007124:	f04f 0300 	mov.w	r3, #0
 8007128:	f04f 0400 	mov.w	r4, #0
 800712c:	0094      	lsls	r4, r2, #2
 800712e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007132:	008b      	lsls	r3, r1, #2
 8007134:	461a      	mov	r2, r3
 8007136:	4623      	mov	r3, r4
 8007138:	4628      	mov	r0, r5
 800713a:	4631      	mov	r1, r6
 800713c:	f7f9 fd50 	bl	8000be0 <__aeabi_uldivmod>
 8007140:	4603      	mov	r3, r0
 8007142:	460c      	mov	r4, r1
 8007144:	461a      	mov	r2, r3
 8007146:	4b77      	ldr	r3, [pc, #476]	; (8007324 <UART_SetConfig+0x6f4>)
 8007148:	fba3 1302 	umull	r1, r3, r3, r2
 800714c:	095b      	lsrs	r3, r3, #5
 800714e:	2164      	movs	r1, #100	; 0x64
 8007150:	fb01 f303 	mul.w	r3, r1, r3
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	011b      	lsls	r3, r3, #4
 8007158:	3332      	adds	r3, #50	; 0x32
 800715a:	4a72      	ldr	r2, [pc, #456]	; (8007324 <UART_SetConfig+0x6f4>)
 800715c:	fba2 2303 	umull	r2, r3, r2, r3
 8007160:	095b      	lsrs	r3, r3, #5
 8007162:	f003 020f 	and.w	r2, r3, #15
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4442      	add	r2, r8
 800716c:	609a      	str	r2, [r3, #8]
 800716e:	e0d0      	b.n	8007312 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007170:	f7fd ff24 	bl	8004fbc <HAL_RCC_GetPCLK1Freq>
 8007174:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	469a      	mov	sl, r3
 800717a:	f04f 0b00 	mov.w	fp, #0
 800717e:	46d0      	mov	r8, sl
 8007180:	46d9      	mov	r9, fp
 8007182:	eb18 0308 	adds.w	r3, r8, r8
 8007186:	eb49 0409 	adc.w	r4, r9, r9
 800718a:	4698      	mov	r8, r3
 800718c:	46a1      	mov	r9, r4
 800718e:	eb18 080a 	adds.w	r8, r8, sl
 8007192:	eb49 090b 	adc.w	r9, r9, fp
 8007196:	f04f 0100 	mov.w	r1, #0
 800719a:	f04f 0200 	mov.w	r2, #0
 800719e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80071a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80071a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80071aa:	4688      	mov	r8, r1
 80071ac:	4691      	mov	r9, r2
 80071ae:	eb1a 0508 	adds.w	r5, sl, r8
 80071b2:	eb4b 0609 	adc.w	r6, fp, r9
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	4619      	mov	r1, r3
 80071bc:	f04f 0200 	mov.w	r2, #0
 80071c0:	f04f 0300 	mov.w	r3, #0
 80071c4:	f04f 0400 	mov.w	r4, #0
 80071c8:	0094      	lsls	r4, r2, #2
 80071ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80071ce:	008b      	lsls	r3, r1, #2
 80071d0:	461a      	mov	r2, r3
 80071d2:	4623      	mov	r3, r4
 80071d4:	4628      	mov	r0, r5
 80071d6:	4631      	mov	r1, r6
 80071d8:	f7f9 fd02 	bl	8000be0 <__aeabi_uldivmod>
 80071dc:	4603      	mov	r3, r0
 80071de:	460c      	mov	r4, r1
 80071e0:	461a      	mov	r2, r3
 80071e2:	4b50      	ldr	r3, [pc, #320]	; (8007324 <UART_SetConfig+0x6f4>)
 80071e4:	fba3 2302 	umull	r2, r3, r3, r2
 80071e8:	095b      	lsrs	r3, r3, #5
 80071ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	469b      	mov	fp, r3
 80071f2:	f04f 0c00 	mov.w	ip, #0
 80071f6:	46d9      	mov	r9, fp
 80071f8:	46e2      	mov	sl, ip
 80071fa:	eb19 0309 	adds.w	r3, r9, r9
 80071fe:	eb4a 040a 	adc.w	r4, sl, sl
 8007202:	4699      	mov	r9, r3
 8007204:	46a2      	mov	sl, r4
 8007206:	eb19 090b 	adds.w	r9, r9, fp
 800720a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800720e:	f04f 0100 	mov.w	r1, #0
 8007212:	f04f 0200 	mov.w	r2, #0
 8007216:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800721a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800721e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007222:	4689      	mov	r9, r1
 8007224:	4692      	mov	sl, r2
 8007226:	eb1b 0509 	adds.w	r5, fp, r9
 800722a:	eb4c 060a 	adc.w	r6, ip, sl
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	4619      	mov	r1, r3
 8007234:	f04f 0200 	mov.w	r2, #0
 8007238:	f04f 0300 	mov.w	r3, #0
 800723c:	f04f 0400 	mov.w	r4, #0
 8007240:	0094      	lsls	r4, r2, #2
 8007242:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007246:	008b      	lsls	r3, r1, #2
 8007248:	461a      	mov	r2, r3
 800724a:	4623      	mov	r3, r4
 800724c:	4628      	mov	r0, r5
 800724e:	4631      	mov	r1, r6
 8007250:	f7f9 fcc6 	bl	8000be0 <__aeabi_uldivmod>
 8007254:	4603      	mov	r3, r0
 8007256:	460c      	mov	r4, r1
 8007258:	461a      	mov	r2, r3
 800725a:	4b32      	ldr	r3, [pc, #200]	; (8007324 <UART_SetConfig+0x6f4>)
 800725c:	fba3 1302 	umull	r1, r3, r3, r2
 8007260:	095b      	lsrs	r3, r3, #5
 8007262:	2164      	movs	r1, #100	; 0x64
 8007264:	fb01 f303 	mul.w	r3, r1, r3
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	011b      	lsls	r3, r3, #4
 800726c:	3332      	adds	r3, #50	; 0x32
 800726e:	4a2d      	ldr	r2, [pc, #180]	; (8007324 <UART_SetConfig+0x6f4>)
 8007270:	fba2 2303 	umull	r2, r3, r2, r3
 8007274:	095b      	lsrs	r3, r3, #5
 8007276:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800727a:	4498      	add	r8, r3
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	469b      	mov	fp, r3
 8007280:	f04f 0c00 	mov.w	ip, #0
 8007284:	46d9      	mov	r9, fp
 8007286:	46e2      	mov	sl, ip
 8007288:	eb19 0309 	adds.w	r3, r9, r9
 800728c:	eb4a 040a 	adc.w	r4, sl, sl
 8007290:	4699      	mov	r9, r3
 8007292:	46a2      	mov	sl, r4
 8007294:	eb19 090b 	adds.w	r9, r9, fp
 8007298:	eb4a 0a0c 	adc.w	sl, sl, ip
 800729c:	f04f 0100 	mov.w	r1, #0
 80072a0:	f04f 0200 	mov.w	r2, #0
 80072a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80072ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80072b0:	4689      	mov	r9, r1
 80072b2:	4692      	mov	sl, r2
 80072b4:	eb1b 0509 	adds.w	r5, fp, r9
 80072b8:	eb4c 060a 	adc.w	r6, ip, sl
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	4619      	mov	r1, r3
 80072c2:	f04f 0200 	mov.w	r2, #0
 80072c6:	f04f 0300 	mov.w	r3, #0
 80072ca:	f04f 0400 	mov.w	r4, #0
 80072ce:	0094      	lsls	r4, r2, #2
 80072d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80072d4:	008b      	lsls	r3, r1, #2
 80072d6:	461a      	mov	r2, r3
 80072d8:	4623      	mov	r3, r4
 80072da:	4628      	mov	r0, r5
 80072dc:	4631      	mov	r1, r6
 80072de:	f7f9 fc7f 	bl	8000be0 <__aeabi_uldivmod>
 80072e2:	4603      	mov	r3, r0
 80072e4:	460c      	mov	r4, r1
 80072e6:	461a      	mov	r2, r3
 80072e8:	4b0e      	ldr	r3, [pc, #56]	; (8007324 <UART_SetConfig+0x6f4>)
 80072ea:	fba3 1302 	umull	r1, r3, r3, r2
 80072ee:	095b      	lsrs	r3, r3, #5
 80072f0:	2164      	movs	r1, #100	; 0x64
 80072f2:	fb01 f303 	mul.w	r3, r1, r3
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	011b      	lsls	r3, r3, #4
 80072fa:	3332      	adds	r3, #50	; 0x32
 80072fc:	4a09      	ldr	r2, [pc, #36]	; (8007324 <UART_SetConfig+0x6f4>)
 80072fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007302:	095b      	lsrs	r3, r3, #5
 8007304:	f003 020f 	and.w	r2, r3, #15
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4442      	add	r2, r8
 800730e:	609a      	str	r2, [r3, #8]
}
 8007310:	e7ff      	b.n	8007312 <UART_SetConfig+0x6e2>
 8007312:	bf00      	nop
 8007314:	3714      	adds	r7, #20
 8007316:	46bd      	mov	sp, r7
 8007318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800731c:	40011000 	.word	0x40011000
 8007320:	40011400 	.word	0x40011400
 8007324:	51eb851f 	.word	0x51eb851f

08007328 <__errno>:
 8007328:	4b01      	ldr	r3, [pc, #4]	; (8007330 <__errno+0x8>)
 800732a:	6818      	ldr	r0, [r3, #0]
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	2000000c 	.word	0x2000000c

08007334 <__libc_init_array>:
 8007334:	b570      	push	{r4, r5, r6, lr}
 8007336:	4e0d      	ldr	r6, [pc, #52]	; (800736c <__libc_init_array+0x38>)
 8007338:	4c0d      	ldr	r4, [pc, #52]	; (8007370 <__libc_init_array+0x3c>)
 800733a:	1ba4      	subs	r4, r4, r6
 800733c:	10a4      	asrs	r4, r4, #2
 800733e:	2500      	movs	r5, #0
 8007340:	42a5      	cmp	r5, r4
 8007342:	d109      	bne.n	8007358 <__libc_init_array+0x24>
 8007344:	4e0b      	ldr	r6, [pc, #44]	; (8007374 <__libc_init_array+0x40>)
 8007346:	4c0c      	ldr	r4, [pc, #48]	; (8007378 <__libc_init_array+0x44>)
 8007348:	f002 f9f8 	bl	800973c <_init>
 800734c:	1ba4      	subs	r4, r4, r6
 800734e:	10a4      	asrs	r4, r4, #2
 8007350:	2500      	movs	r5, #0
 8007352:	42a5      	cmp	r5, r4
 8007354:	d105      	bne.n	8007362 <__libc_init_array+0x2e>
 8007356:	bd70      	pop	{r4, r5, r6, pc}
 8007358:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800735c:	4798      	blx	r3
 800735e:	3501      	adds	r5, #1
 8007360:	e7ee      	b.n	8007340 <__libc_init_array+0xc>
 8007362:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007366:	4798      	blx	r3
 8007368:	3501      	adds	r5, #1
 800736a:	e7f2      	b.n	8007352 <__libc_init_array+0x1e>
 800736c:	08009a18 	.word	0x08009a18
 8007370:	08009a18 	.word	0x08009a18
 8007374:	08009a18 	.word	0x08009a18
 8007378:	08009a1c 	.word	0x08009a1c

0800737c <memset>:
 800737c:	4402      	add	r2, r0
 800737e:	4603      	mov	r3, r0
 8007380:	4293      	cmp	r3, r2
 8007382:	d100      	bne.n	8007386 <memset+0xa>
 8007384:	4770      	bx	lr
 8007386:	f803 1b01 	strb.w	r1, [r3], #1
 800738a:	e7f9      	b.n	8007380 <memset+0x4>

0800738c <__cvt>:
 800738c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007390:	ec55 4b10 	vmov	r4, r5, d0
 8007394:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007396:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800739a:	2d00      	cmp	r5, #0
 800739c:	460e      	mov	r6, r1
 800739e:	4691      	mov	r9, r2
 80073a0:	4619      	mov	r1, r3
 80073a2:	bfb8      	it	lt
 80073a4:	4622      	movlt	r2, r4
 80073a6:	462b      	mov	r3, r5
 80073a8:	f027 0720 	bic.w	r7, r7, #32
 80073ac:	bfbb      	ittet	lt
 80073ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80073b2:	461d      	movlt	r5, r3
 80073b4:	2300      	movge	r3, #0
 80073b6:	232d      	movlt	r3, #45	; 0x2d
 80073b8:	bfb8      	it	lt
 80073ba:	4614      	movlt	r4, r2
 80073bc:	2f46      	cmp	r7, #70	; 0x46
 80073be:	700b      	strb	r3, [r1, #0]
 80073c0:	d004      	beq.n	80073cc <__cvt+0x40>
 80073c2:	2f45      	cmp	r7, #69	; 0x45
 80073c4:	d100      	bne.n	80073c8 <__cvt+0x3c>
 80073c6:	3601      	adds	r6, #1
 80073c8:	2102      	movs	r1, #2
 80073ca:	e000      	b.n	80073ce <__cvt+0x42>
 80073cc:	2103      	movs	r1, #3
 80073ce:	ab03      	add	r3, sp, #12
 80073d0:	9301      	str	r3, [sp, #4]
 80073d2:	ab02      	add	r3, sp, #8
 80073d4:	9300      	str	r3, [sp, #0]
 80073d6:	4632      	mov	r2, r6
 80073d8:	4653      	mov	r3, sl
 80073da:	ec45 4b10 	vmov	d0, r4, r5
 80073de:	f000 fd87 	bl	8007ef0 <_dtoa_r>
 80073e2:	2f47      	cmp	r7, #71	; 0x47
 80073e4:	4680      	mov	r8, r0
 80073e6:	d102      	bne.n	80073ee <__cvt+0x62>
 80073e8:	f019 0f01 	tst.w	r9, #1
 80073ec:	d026      	beq.n	800743c <__cvt+0xb0>
 80073ee:	2f46      	cmp	r7, #70	; 0x46
 80073f0:	eb08 0906 	add.w	r9, r8, r6
 80073f4:	d111      	bne.n	800741a <__cvt+0x8e>
 80073f6:	f898 3000 	ldrb.w	r3, [r8]
 80073fa:	2b30      	cmp	r3, #48	; 0x30
 80073fc:	d10a      	bne.n	8007414 <__cvt+0x88>
 80073fe:	2200      	movs	r2, #0
 8007400:	2300      	movs	r3, #0
 8007402:	4620      	mov	r0, r4
 8007404:	4629      	mov	r1, r5
 8007406:	f7f9 fb2b 	bl	8000a60 <__aeabi_dcmpeq>
 800740a:	b918      	cbnz	r0, 8007414 <__cvt+0x88>
 800740c:	f1c6 0601 	rsb	r6, r6, #1
 8007410:	f8ca 6000 	str.w	r6, [sl]
 8007414:	f8da 3000 	ldr.w	r3, [sl]
 8007418:	4499      	add	r9, r3
 800741a:	2200      	movs	r2, #0
 800741c:	2300      	movs	r3, #0
 800741e:	4620      	mov	r0, r4
 8007420:	4629      	mov	r1, r5
 8007422:	f7f9 fb1d 	bl	8000a60 <__aeabi_dcmpeq>
 8007426:	b938      	cbnz	r0, 8007438 <__cvt+0xac>
 8007428:	2230      	movs	r2, #48	; 0x30
 800742a:	9b03      	ldr	r3, [sp, #12]
 800742c:	454b      	cmp	r3, r9
 800742e:	d205      	bcs.n	800743c <__cvt+0xb0>
 8007430:	1c59      	adds	r1, r3, #1
 8007432:	9103      	str	r1, [sp, #12]
 8007434:	701a      	strb	r2, [r3, #0]
 8007436:	e7f8      	b.n	800742a <__cvt+0x9e>
 8007438:	f8cd 900c 	str.w	r9, [sp, #12]
 800743c:	9b03      	ldr	r3, [sp, #12]
 800743e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007440:	eba3 0308 	sub.w	r3, r3, r8
 8007444:	4640      	mov	r0, r8
 8007446:	6013      	str	r3, [r2, #0]
 8007448:	b004      	add	sp, #16
 800744a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800744e <__exponent>:
 800744e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007450:	2900      	cmp	r1, #0
 8007452:	4604      	mov	r4, r0
 8007454:	bfba      	itte	lt
 8007456:	4249      	neglt	r1, r1
 8007458:	232d      	movlt	r3, #45	; 0x2d
 800745a:	232b      	movge	r3, #43	; 0x2b
 800745c:	2909      	cmp	r1, #9
 800745e:	f804 2b02 	strb.w	r2, [r4], #2
 8007462:	7043      	strb	r3, [r0, #1]
 8007464:	dd20      	ble.n	80074a8 <__exponent+0x5a>
 8007466:	f10d 0307 	add.w	r3, sp, #7
 800746a:	461f      	mov	r7, r3
 800746c:	260a      	movs	r6, #10
 800746e:	fb91 f5f6 	sdiv	r5, r1, r6
 8007472:	fb06 1115 	mls	r1, r6, r5, r1
 8007476:	3130      	adds	r1, #48	; 0x30
 8007478:	2d09      	cmp	r5, #9
 800747a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800747e:	f103 32ff 	add.w	r2, r3, #4294967295
 8007482:	4629      	mov	r1, r5
 8007484:	dc09      	bgt.n	800749a <__exponent+0x4c>
 8007486:	3130      	adds	r1, #48	; 0x30
 8007488:	3b02      	subs	r3, #2
 800748a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800748e:	42bb      	cmp	r3, r7
 8007490:	4622      	mov	r2, r4
 8007492:	d304      	bcc.n	800749e <__exponent+0x50>
 8007494:	1a10      	subs	r0, r2, r0
 8007496:	b003      	add	sp, #12
 8007498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800749a:	4613      	mov	r3, r2
 800749c:	e7e7      	b.n	800746e <__exponent+0x20>
 800749e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074a2:	f804 2b01 	strb.w	r2, [r4], #1
 80074a6:	e7f2      	b.n	800748e <__exponent+0x40>
 80074a8:	2330      	movs	r3, #48	; 0x30
 80074aa:	4419      	add	r1, r3
 80074ac:	7083      	strb	r3, [r0, #2]
 80074ae:	1d02      	adds	r2, r0, #4
 80074b0:	70c1      	strb	r1, [r0, #3]
 80074b2:	e7ef      	b.n	8007494 <__exponent+0x46>

080074b4 <_printf_float>:
 80074b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b8:	b08d      	sub	sp, #52	; 0x34
 80074ba:	460c      	mov	r4, r1
 80074bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80074c0:	4616      	mov	r6, r2
 80074c2:	461f      	mov	r7, r3
 80074c4:	4605      	mov	r5, r0
 80074c6:	f001 fc45 	bl	8008d54 <_localeconv_r>
 80074ca:	6803      	ldr	r3, [r0, #0]
 80074cc:	9304      	str	r3, [sp, #16]
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7f8 fe9a 	bl	8000208 <strlen>
 80074d4:	2300      	movs	r3, #0
 80074d6:	930a      	str	r3, [sp, #40]	; 0x28
 80074d8:	f8d8 3000 	ldr.w	r3, [r8]
 80074dc:	9005      	str	r0, [sp, #20]
 80074de:	3307      	adds	r3, #7
 80074e0:	f023 0307 	bic.w	r3, r3, #7
 80074e4:	f103 0208 	add.w	r2, r3, #8
 80074e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80074ec:	f8d4 b000 	ldr.w	fp, [r4]
 80074f0:	f8c8 2000 	str.w	r2, [r8]
 80074f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80074fc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007500:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007504:	9307      	str	r3, [sp, #28]
 8007506:	f8cd 8018 	str.w	r8, [sp, #24]
 800750a:	f04f 32ff 	mov.w	r2, #4294967295
 800750e:	4ba7      	ldr	r3, [pc, #668]	; (80077ac <_printf_float+0x2f8>)
 8007510:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007514:	f7f9 fad6 	bl	8000ac4 <__aeabi_dcmpun>
 8007518:	bb70      	cbnz	r0, 8007578 <_printf_float+0xc4>
 800751a:	f04f 32ff 	mov.w	r2, #4294967295
 800751e:	4ba3      	ldr	r3, [pc, #652]	; (80077ac <_printf_float+0x2f8>)
 8007520:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007524:	f7f9 fab0 	bl	8000a88 <__aeabi_dcmple>
 8007528:	bb30      	cbnz	r0, 8007578 <_printf_float+0xc4>
 800752a:	2200      	movs	r2, #0
 800752c:	2300      	movs	r3, #0
 800752e:	4640      	mov	r0, r8
 8007530:	4649      	mov	r1, r9
 8007532:	f7f9 fa9f 	bl	8000a74 <__aeabi_dcmplt>
 8007536:	b110      	cbz	r0, 800753e <_printf_float+0x8a>
 8007538:	232d      	movs	r3, #45	; 0x2d
 800753a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800753e:	4a9c      	ldr	r2, [pc, #624]	; (80077b0 <_printf_float+0x2fc>)
 8007540:	4b9c      	ldr	r3, [pc, #624]	; (80077b4 <_printf_float+0x300>)
 8007542:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007546:	bf8c      	ite	hi
 8007548:	4690      	movhi	r8, r2
 800754a:	4698      	movls	r8, r3
 800754c:	2303      	movs	r3, #3
 800754e:	f02b 0204 	bic.w	r2, fp, #4
 8007552:	6123      	str	r3, [r4, #16]
 8007554:	6022      	str	r2, [r4, #0]
 8007556:	f04f 0900 	mov.w	r9, #0
 800755a:	9700      	str	r7, [sp, #0]
 800755c:	4633      	mov	r3, r6
 800755e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007560:	4621      	mov	r1, r4
 8007562:	4628      	mov	r0, r5
 8007564:	f000 f9e6 	bl	8007934 <_printf_common>
 8007568:	3001      	adds	r0, #1
 800756a:	f040 808d 	bne.w	8007688 <_printf_float+0x1d4>
 800756e:	f04f 30ff 	mov.w	r0, #4294967295
 8007572:	b00d      	add	sp, #52	; 0x34
 8007574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007578:	4642      	mov	r2, r8
 800757a:	464b      	mov	r3, r9
 800757c:	4640      	mov	r0, r8
 800757e:	4649      	mov	r1, r9
 8007580:	f7f9 faa0 	bl	8000ac4 <__aeabi_dcmpun>
 8007584:	b110      	cbz	r0, 800758c <_printf_float+0xd8>
 8007586:	4a8c      	ldr	r2, [pc, #560]	; (80077b8 <_printf_float+0x304>)
 8007588:	4b8c      	ldr	r3, [pc, #560]	; (80077bc <_printf_float+0x308>)
 800758a:	e7da      	b.n	8007542 <_printf_float+0x8e>
 800758c:	6861      	ldr	r1, [r4, #4]
 800758e:	1c4b      	adds	r3, r1, #1
 8007590:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007594:	a80a      	add	r0, sp, #40	; 0x28
 8007596:	d13e      	bne.n	8007616 <_printf_float+0x162>
 8007598:	2306      	movs	r3, #6
 800759a:	6063      	str	r3, [r4, #4]
 800759c:	2300      	movs	r3, #0
 800759e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80075a2:	ab09      	add	r3, sp, #36	; 0x24
 80075a4:	9300      	str	r3, [sp, #0]
 80075a6:	ec49 8b10 	vmov	d0, r8, r9
 80075aa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80075ae:	6022      	str	r2, [r4, #0]
 80075b0:	f8cd a004 	str.w	sl, [sp, #4]
 80075b4:	6861      	ldr	r1, [r4, #4]
 80075b6:	4628      	mov	r0, r5
 80075b8:	f7ff fee8 	bl	800738c <__cvt>
 80075bc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80075c0:	2b47      	cmp	r3, #71	; 0x47
 80075c2:	4680      	mov	r8, r0
 80075c4:	d109      	bne.n	80075da <_printf_float+0x126>
 80075c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075c8:	1cd8      	adds	r0, r3, #3
 80075ca:	db02      	blt.n	80075d2 <_printf_float+0x11e>
 80075cc:	6862      	ldr	r2, [r4, #4]
 80075ce:	4293      	cmp	r3, r2
 80075d0:	dd47      	ble.n	8007662 <_printf_float+0x1ae>
 80075d2:	f1aa 0a02 	sub.w	sl, sl, #2
 80075d6:	fa5f fa8a 	uxtb.w	sl, sl
 80075da:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80075de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075e0:	d824      	bhi.n	800762c <_printf_float+0x178>
 80075e2:	3901      	subs	r1, #1
 80075e4:	4652      	mov	r2, sl
 80075e6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80075ea:	9109      	str	r1, [sp, #36]	; 0x24
 80075ec:	f7ff ff2f 	bl	800744e <__exponent>
 80075f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075f2:	1813      	adds	r3, r2, r0
 80075f4:	2a01      	cmp	r2, #1
 80075f6:	4681      	mov	r9, r0
 80075f8:	6123      	str	r3, [r4, #16]
 80075fa:	dc02      	bgt.n	8007602 <_printf_float+0x14e>
 80075fc:	6822      	ldr	r2, [r4, #0]
 80075fe:	07d1      	lsls	r1, r2, #31
 8007600:	d501      	bpl.n	8007606 <_printf_float+0x152>
 8007602:	3301      	adds	r3, #1
 8007604:	6123      	str	r3, [r4, #16]
 8007606:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800760a:	2b00      	cmp	r3, #0
 800760c:	d0a5      	beq.n	800755a <_printf_float+0xa6>
 800760e:	232d      	movs	r3, #45	; 0x2d
 8007610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007614:	e7a1      	b.n	800755a <_printf_float+0xa6>
 8007616:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800761a:	f000 8177 	beq.w	800790c <_printf_float+0x458>
 800761e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007622:	d1bb      	bne.n	800759c <_printf_float+0xe8>
 8007624:	2900      	cmp	r1, #0
 8007626:	d1b9      	bne.n	800759c <_printf_float+0xe8>
 8007628:	2301      	movs	r3, #1
 800762a:	e7b6      	b.n	800759a <_printf_float+0xe6>
 800762c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007630:	d119      	bne.n	8007666 <_printf_float+0x1b2>
 8007632:	2900      	cmp	r1, #0
 8007634:	6863      	ldr	r3, [r4, #4]
 8007636:	dd0c      	ble.n	8007652 <_printf_float+0x19e>
 8007638:	6121      	str	r1, [r4, #16]
 800763a:	b913      	cbnz	r3, 8007642 <_printf_float+0x18e>
 800763c:	6822      	ldr	r2, [r4, #0]
 800763e:	07d2      	lsls	r2, r2, #31
 8007640:	d502      	bpl.n	8007648 <_printf_float+0x194>
 8007642:	3301      	adds	r3, #1
 8007644:	440b      	add	r3, r1
 8007646:	6123      	str	r3, [r4, #16]
 8007648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800764a:	65a3      	str	r3, [r4, #88]	; 0x58
 800764c:	f04f 0900 	mov.w	r9, #0
 8007650:	e7d9      	b.n	8007606 <_printf_float+0x152>
 8007652:	b913      	cbnz	r3, 800765a <_printf_float+0x1a6>
 8007654:	6822      	ldr	r2, [r4, #0]
 8007656:	07d0      	lsls	r0, r2, #31
 8007658:	d501      	bpl.n	800765e <_printf_float+0x1aa>
 800765a:	3302      	adds	r3, #2
 800765c:	e7f3      	b.n	8007646 <_printf_float+0x192>
 800765e:	2301      	movs	r3, #1
 8007660:	e7f1      	b.n	8007646 <_printf_float+0x192>
 8007662:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007666:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800766a:	4293      	cmp	r3, r2
 800766c:	db05      	blt.n	800767a <_printf_float+0x1c6>
 800766e:	6822      	ldr	r2, [r4, #0]
 8007670:	6123      	str	r3, [r4, #16]
 8007672:	07d1      	lsls	r1, r2, #31
 8007674:	d5e8      	bpl.n	8007648 <_printf_float+0x194>
 8007676:	3301      	adds	r3, #1
 8007678:	e7e5      	b.n	8007646 <_printf_float+0x192>
 800767a:	2b00      	cmp	r3, #0
 800767c:	bfd4      	ite	le
 800767e:	f1c3 0302 	rsble	r3, r3, #2
 8007682:	2301      	movgt	r3, #1
 8007684:	4413      	add	r3, r2
 8007686:	e7de      	b.n	8007646 <_printf_float+0x192>
 8007688:	6823      	ldr	r3, [r4, #0]
 800768a:	055a      	lsls	r2, r3, #21
 800768c:	d407      	bmi.n	800769e <_printf_float+0x1ea>
 800768e:	6923      	ldr	r3, [r4, #16]
 8007690:	4642      	mov	r2, r8
 8007692:	4631      	mov	r1, r6
 8007694:	4628      	mov	r0, r5
 8007696:	47b8      	blx	r7
 8007698:	3001      	adds	r0, #1
 800769a:	d12b      	bne.n	80076f4 <_printf_float+0x240>
 800769c:	e767      	b.n	800756e <_printf_float+0xba>
 800769e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80076a2:	f240 80dc 	bls.w	800785e <_printf_float+0x3aa>
 80076a6:	2200      	movs	r2, #0
 80076a8:	2300      	movs	r3, #0
 80076aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076ae:	f7f9 f9d7 	bl	8000a60 <__aeabi_dcmpeq>
 80076b2:	2800      	cmp	r0, #0
 80076b4:	d033      	beq.n	800771e <_printf_float+0x26a>
 80076b6:	2301      	movs	r3, #1
 80076b8:	4a41      	ldr	r2, [pc, #260]	; (80077c0 <_printf_float+0x30c>)
 80076ba:	4631      	mov	r1, r6
 80076bc:	4628      	mov	r0, r5
 80076be:	47b8      	blx	r7
 80076c0:	3001      	adds	r0, #1
 80076c2:	f43f af54 	beq.w	800756e <_printf_float+0xba>
 80076c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076ca:	429a      	cmp	r2, r3
 80076cc:	db02      	blt.n	80076d4 <_printf_float+0x220>
 80076ce:	6823      	ldr	r3, [r4, #0]
 80076d0:	07d8      	lsls	r0, r3, #31
 80076d2:	d50f      	bpl.n	80076f4 <_printf_float+0x240>
 80076d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076d8:	4631      	mov	r1, r6
 80076da:	4628      	mov	r0, r5
 80076dc:	47b8      	blx	r7
 80076de:	3001      	adds	r0, #1
 80076e0:	f43f af45 	beq.w	800756e <_printf_float+0xba>
 80076e4:	f04f 0800 	mov.w	r8, #0
 80076e8:	f104 091a 	add.w	r9, r4, #26
 80076ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ee:	3b01      	subs	r3, #1
 80076f0:	4543      	cmp	r3, r8
 80076f2:	dc09      	bgt.n	8007708 <_printf_float+0x254>
 80076f4:	6823      	ldr	r3, [r4, #0]
 80076f6:	079b      	lsls	r3, r3, #30
 80076f8:	f100 8103 	bmi.w	8007902 <_printf_float+0x44e>
 80076fc:	68e0      	ldr	r0, [r4, #12]
 80076fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007700:	4298      	cmp	r0, r3
 8007702:	bfb8      	it	lt
 8007704:	4618      	movlt	r0, r3
 8007706:	e734      	b.n	8007572 <_printf_float+0xbe>
 8007708:	2301      	movs	r3, #1
 800770a:	464a      	mov	r2, r9
 800770c:	4631      	mov	r1, r6
 800770e:	4628      	mov	r0, r5
 8007710:	47b8      	blx	r7
 8007712:	3001      	adds	r0, #1
 8007714:	f43f af2b 	beq.w	800756e <_printf_float+0xba>
 8007718:	f108 0801 	add.w	r8, r8, #1
 800771c:	e7e6      	b.n	80076ec <_printf_float+0x238>
 800771e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007720:	2b00      	cmp	r3, #0
 8007722:	dc2b      	bgt.n	800777c <_printf_float+0x2c8>
 8007724:	2301      	movs	r3, #1
 8007726:	4a26      	ldr	r2, [pc, #152]	; (80077c0 <_printf_float+0x30c>)
 8007728:	4631      	mov	r1, r6
 800772a:	4628      	mov	r0, r5
 800772c:	47b8      	blx	r7
 800772e:	3001      	adds	r0, #1
 8007730:	f43f af1d 	beq.w	800756e <_printf_float+0xba>
 8007734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007736:	b923      	cbnz	r3, 8007742 <_printf_float+0x28e>
 8007738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800773a:	b913      	cbnz	r3, 8007742 <_printf_float+0x28e>
 800773c:	6823      	ldr	r3, [r4, #0]
 800773e:	07d9      	lsls	r1, r3, #31
 8007740:	d5d8      	bpl.n	80076f4 <_printf_float+0x240>
 8007742:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007746:	4631      	mov	r1, r6
 8007748:	4628      	mov	r0, r5
 800774a:	47b8      	blx	r7
 800774c:	3001      	adds	r0, #1
 800774e:	f43f af0e 	beq.w	800756e <_printf_float+0xba>
 8007752:	f04f 0900 	mov.w	r9, #0
 8007756:	f104 0a1a 	add.w	sl, r4, #26
 800775a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800775c:	425b      	negs	r3, r3
 800775e:	454b      	cmp	r3, r9
 8007760:	dc01      	bgt.n	8007766 <_printf_float+0x2b2>
 8007762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007764:	e794      	b.n	8007690 <_printf_float+0x1dc>
 8007766:	2301      	movs	r3, #1
 8007768:	4652      	mov	r2, sl
 800776a:	4631      	mov	r1, r6
 800776c:	4628      	mov	r0, r5
 800776e:	47b8      	blx	r7
 8007770:	3001      	adds	r0, #1
 8007772:	f43f aefc 	beq.w	800756e <_printf_float+0xba>
 8007776:	f109 0901 	add.w	r9, r9, #1
 800777a:	e7ee      	b.n	800775a <_printf_float+0x2a6>
 800777c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800777e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007780:	429a      	cmp	r2, r3
 8007782:	bfa8      	it	ge
 8007784:	461a      	movge	r2, r3
 8007786:	2a00      	cmp	r2, #0
 8007788:	4691      	mov	r9, r2
 800778a:	dd07      	ble.n	800779c <_printf_float+0x2e8>
 800778c:	4613      	mov	r3, r2
 800778e:	4631      	mov	r1, r6
 8007790:	4642      	mov	r2, r8
 8007792:	4628      	mov	r0, r5
 8007794:	47b8      	blx	r7
 8007796:	3001      	adds	r0, #1
 8007798:	f43f aee9 	beq.w	800756e <_printf_float+0xba>
 800779c:	f104 031a 	add.w	r3, r4, #26
 80077a0:	f04f 0b00 	mov.w	fp, #0
 80077a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077a8:	9306      	str	r3, [sp, #24]
 80077aa:	e015      	b.n	80077d8 <_printf_float+0x324>
 80077ac:	7fefffff 	.word	0x7fefffff
 80077b0:	0800978c 	.word	0x0800978c
 80077b4:	08009788 	.word	0x08009788
 80077b8:	08009794 	.word	0x08009794
 80077bc:	08009790 	.word	0x08009790
 80077c0:	08009798 	.word	0x08009798
 80077c4:	2301      	movs	r3, #1
 80077c6:	9a06      	ldr	r2, [sp, #24]
 80077c8:	4631      	mov	r1, r6
 80077ca:	4628      	mov	r0, r5
 80077cc:	47b8      	blx	r7
 80077ce:	3001      	adds	r0, #1
 80077d0:	f43f aecd 	beq.w	800756e <_printf_float+0xba>
 80077d4:	f10b 0b01 	add.w	fp, fp, #1
 80077d8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80077dc:	ebaa 0309 	sub.w	r3, sl, r9
 80077e0:	455b      	cmp	r3, fp
 80077e2:	dcef      	bgt.n	80077c4 <_printf_float+0x310>
 80077e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077e8:	429a      	cmp	r2, r3
 80077ea:	44d0      	add	r8, sl
 80077ec:	db15      	blt.n	800781a <_printf_float+0x366>
 80077ee:	6823      	ldr	r3, [r4, #0]
 80077f0:	07da      	lsls	r2, r3, #31
 80077f2:	d412      	bmi.n	800781a <_printf_float+0x366>
 80077f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077f8:	eba3 020a 	sub.w	r2, r3, sl
 80077fc:	eba3 0a01 	sub.w	sl, r3, r1
 8007800:	4592      	cmp	sl, r2
 8007802:	bfa8      	it	ge
 8007804:	4692      	movge	sl, r2
 8007806:	f1ba 0f00 	cmp.w	sl, #0
 800780a:	dc0e      	bgt.n	800782a <_printf_float+0x376>
 800780c:	f04f 0800 	mov.w	r8, #0
 8007810:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007814:	f104 091a 	add.w	r9, r4, #26
 8007818:	e019      	b.n	800784e <_printf_float+0x39a>
 800781a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800781e:	4631      	mov	r1, r6
 8007820:	4628      	mov	r0, r5
 8007822:	47b8      	blx	r7
 8007824:	3001      	adds	r0, #1
 8007826:	d1e5      	bne.n	80077f4 <_printf_float+0x340>
 8007828:	e6a1      	b.n	800756e <_printf_float+0xba>
 800782a:	4653      	mov	r3, sl
 800782c:	4642      	mov	r2, r8
 800782e:	4631      	mov	r1, r6
 8007830:	4628      	mov	r0, r5
 8007832:	47b8      	blx	r7
 8007834:	3001      	adds	r0, #1
 8007836:	d1e9      	bne.n	800780c <_printf_float+0x358>
 8007838:	e699      	b.n	800756e <_printf_float+0xba>
 800783a:	2301      	movs	r3, #1
 800783c:	464a      	mov	r2, r9
 800783e:	4631      	mov	r1, r6
 8007840:	4628      	mov	r0, r5
 8007842:	47b8      	blx	r7
 8007844:	3001      	adds	r0, #1
 8007846:	f43f ae92 	beq.w	800756e <_printf_float+0xba>
 800784a:	f108 0801 	add.w	r8, r8, #1
 800784e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007852:	1a9b      	subs	r3, r3, r2
 8007854:	eba3 030a 	sub.w	r3, r3, sl
 8007858:	4543      	cmp	r3, r8
 800785a:	dcee      	bgt.n	800783a <_printf_float+0x386>
 800785c:	e74a      	b.n	80076f4 <_printf_float+0x240>
 800785e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007860:	2a01      	cmp	r2, #1
 8007862:	dc01      	bgt.n	8007868 <_printf_float+0x3b4>
 8007864:	07db      	lsls	r3, r3, #31
 8007866:	d53a      	bpl.n	80078de <_printf_float+0x42a>
 8007868:	2301      	movs	r3, #1
 800786a:	4642      	mov	r2, r8
 800786c:	4631      	mov	r1, r6
 800786e:	4628      	mov	r0, r5
 8007870:	47b8      	blx	r7
 8007872:	3001      	adds	r0, #1
 8007874:	f43f ae7b 	beq.w	800756e <_printf_float+0xba>
 8007878:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800787c:	4631      	mov	r1, r6
 800787e:	4628      	mov	r0, r5
 8007880:	47b8      	blx	r7
 8007882:	3001      	adds	r0, #1
 8007884:	f108 0801 	add.w	r8, r8, #1
 8007888:	f43f ae71 	beq.w	800756e <_printf_float+0xba>
 800788c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800788e:	2200      	movs	r2, #0
 8007890:	f103 3aff 	add.w	sl, r3, #4294967295
 8007894:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007898:	2300      	movs	r3, #0
 800789a:	f7f9 f8e1 	bl	8000a60 <__aeabi_dcmpeq>
 800789e:	b9c8      	cbnz	r0, 80078d4 <_printf_float+0x420>
 80078a0:	4653      	mov	r3, sl
 80078a2:	4642      	mov	r2, r8
 80078a4:	4631      	mov	r1, r6
 80078a6:	4628      	mov	r0, r5
 80078a8:	47b8      	blx	r7
 80078aa:	3001      	adds	r0, #1
 80078ac:	d10e      	bne.n	80078cc <_printf_float+0x418>
 80078ae:	e65e      	b.n	800756e <_printf_float+0xba>
 80078b0:	2301      	movs	r3, #1
 80078b2:	4652      	mov	r2, sl
 80078b4:	4631      	mov	r1, r6
 80078b6:	4628      	mov	r0, r5
 80078b8:	47b8      	blx	r7
 80078ba:	3001      	adds	r0, #1
 80078bc:	f43f ae57 	beq.w	800756e <_printf_float+0xba>
 80078c0:	f108 0801 	add.w	r8, r8, #1
 80078c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078c6:	3b01      	subs	r3, #1
 80078c8:	4543      	cmp	r3, r8
 80078ca:	dcf1      	bgt.n	80078b0 <_printf_float+0x3fc>
 80078cc:	464b      	mov	r3, r9
 80078ce:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80078d2:	e6de      	b.n	8007692 <_printf_float+0x1de>
 80078d4:	f04f 0800 	mov.w	r8, #0
 80078d8:	f104 0a1a 	add.w	sl, r4, #26
 80078dc:	e7f2      	b.n	80078c4 <_printf_float+0x410>
 80078de:	2301      	movs	r3, #1
 80078e0:	e7df      	b.n	80078a2 <_printf_float+0x3ee>
 80078e2:	2301      	movs	r3, #1
 80078e4:	464a      	mov	r2, r9
 80078e6:	4631      	mov	r1, r6
 80078e8:	4628      	mov	r0, r5
 80078ea:	47b8      	blx	r7
 80078ec:	3001      	adds	r0, #1
 80078ee:	f43f ae3e 	beq.w	800756e <_printf_float+0xba>
 80078f2:	f108 0801 	add.w	r8, r8, #1
 80078f6:	68e3      	ldr	r3, [r4, #12]
 80078f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078fa:	1a9b      	subs	r3, r3, r2
 80078fc:	4543      	cmp	r3, r8
 80078fe:	dcf0      	bgt.n	80078e2 <_printf_float+0x42e>
 8007900:	e6fc      	b.n	80076fc <_printf_float+0x248>
 8007902:	f04f 0800 	mov.w	r8, #0
 8007906:	f104 0919 	add.w	r9, r4, #25
 800790a:	e7f4      	b.n	80078f6 <_printf_float+0x442>
 800790c:	2900      	cmp	r1, #0
 800790e:	f43f ae8b 	beq.w	8007628 <_printf_float+0x174>
 8007912:	2300      	movs	r3, #0
 8007914:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007918:	ab09      	add	r3, sp, #36	; 0x24
 800791a:	9300      	str	r3, [sp, #0]
 800791c:	ec49 8b10 	vmov	d0, r8, r9
 8007920:	6022      	str	r2, [r4, #0]
 8007922:	f8cd a004 	str.w	sl, [sp, #4]
 8007926:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800792a:	4628      	mov	r0, r5
 800792c:	f7ff fd2e 	bl	800738c <__cvt>
 8007930:	4680      	mov	r8, r0
 8007932:	e648      	b.n	80075c6 <_printf_float+0x112>

08007934 <_printf_common>:
 8007934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007938:	4691      	mov	r9, r2
 800793a:	461f      	mov	r7, r3
 800793c:	688a      	ldr	r2, [r1, #8]
 800793e:	690b      	ldr	r3, [r1, #16]
 8007940:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007944:	4293      	cmp	r3, r2
 8007946:	bfb8      	it	lt
 8007948:	4613      	movlt	r3, r2
 800794a:	f8c9 3000 	str.w	r3, [r9]
 800794e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007952:	4606      	mov	r6, r0
 8007954:	460c      	mov	r4, r1
 8007956:	b112      	cbz	r2, 800795e <_printf_common+0x2a>
 8007958:	3301      	adds	r3, #1
 800795a:	f8c9 3000 	str.w	r3, [r9]
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	0699      	lsls	r1, r3, #26
 8007962:	bf42      	ittt	mi
 8007964:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007968:	3302      	addmi	r3, #2
 800796a:	f8c9 3000 	strmi.w	r3, [r9]
 800796e:	6825      	ldr	r5, [r4, #0]
 8007970:	f015 0506 	ands.w	r5, r5, #6
 8007974:	d107      	bne.n	8007986 <_printf_common+0x52>
 8007976:	f104 0a19 	add.w	sl, r4, #25
 800797a:	68e3      	ldr	r3, [r4, #12]
 800797c:	f8d9 2000 	ldr.w	r2, [r9]
 8007980:	1a9b      	subs	r3, r3, r2
 8007982:	42ab      	cmp	r3, r5
 8007984:	dc28      	bgt.n	80079d8 <_printf_common+0xa4>
 8007986:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800798a:	6822      	ldr	r2, [r4, #0]
 800798c:	3300      	adds	r3, #0
 800798e:	bf18      	it	ne
 8007990:	2301      	movne	r3, #1
 8007992:	0692      	lsls	r2, r2, #26
 8007994:	d42d      	bmi.n	80079f2 <_printf_common+0xbe>
 8007996:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800799a:	4639      	mov	r1, r7
 800799c:	4630      	mov	r0, r6
 800799e:	47c0      	blx	r8
 80079a0:	3001      	adds	r0, #1
 80079a2:	d020      	beq.n	80079e6 <_printf_common+0xb2>
 80079a4:	6823      	ldr	r3, [r4, #0]
 80079a6:	68e5      	ldr	r5, [r4, #12]
 80079a8:	f8d9 2000 	ldr.w	r2, [r9]
 80079ac:	f003 0306 	and.w	r3, r3, #6
 80079b0:	2b04      	cmp	r3, #4
 80079b2:	bf08      	it	eq
 80079b4:	1aad      	subeq	r5, r5, r2
 80079b6:	68a3      	ldr	r3, [r4, #8]
 80079b8:	6922      	ldr	r2, [r4, #16]
 80079ba:	bf0c      	ite	eq
 80079bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079c0:	2500      	movne	r5, #0
 80079c2:	4293      	cmp	r3, r2
 80079c4:	bfc4      	itt	gt
 80079c6:	1a9b      	subgt	r3, r3, r2
 80079c8:	18ed      	addgt	r5, r5, r3
 80079ca:	f04f 0900 	mov.w	r9, #0
 80079ce:	341a      	adds	r4, #26
 80079d0:	454d      	cmp	r5, r9
 80079d2:	d11a      	bne.n	8007a0a <_printf_common+0xd6>
 80079d4:	2000      	movs	r0, #0
 80079d6:	e008      	b.n	80079ea <_printf_common+0xb6>
 80079d8:	2301      	movs	r3, #1
 80079da:	4652      	mov	r2, sl
 80079dc:	4639      	mov	r1, r7
 80079de:	4630      	mov	r0, r6
 80079e0:	47c0      	blx	r8
 80079e2:	3001      	adds	r0, #1
 80079e4:	d103      	bne.n	80079ee <_printf_common+0xba>
 80079e6:	f04f 30ff 	mov.w	r0, #4294967295
 80079ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ee:	3501      	adds	r5, #1
 80079f0:	e7c3      	b.n	800797a <_printf_common+0x46>
 80079f2:	18e1      	adds	r1, r4, r3
 80079f4:	1c5a      	adds	r2, r3, #1
 80079f6:	2030      	movs	r0, #48	; 0x30
 80079f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079fc:	4422      	add	r2, r4
 80079fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a06:	3302      	adds	r3, #2
 8007a08:	e7c5      	b.n	8007996 <_printf_common+0x62>
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	4622      	mov	r2, r4
 8007a0e:	4639      	mov	r1, r7
 8007a10:	4630      	mov	r0, r6
 8007a12:	47c0      	blx	r8
 8007a14:	3001      	adds	r0, #1
 8007a16:	d0e6      	beq.n	80079e6 <_printf_common+0xb2>
 8007a18:	f109 0901 	add.w	r9, r9, #1
 8007a1c:	e7d8      	b.n	80079d0 <_printf_common+0x9c>
	...

08007a20 <_puts_r>:
 8007a20:	b570      	push	{r4, r5, r6, lr}
 8007a22:	460e      	mov	r6, r1
 8007a24:	4605      	mov	r5, r0
 8007a26:	b118      	cbz	r0, 8007a30 <_puts_r+0x10>
 8007a28:	6983      	ldr	r3, [r0, #24]
 8007a2a:	b90b      	cbnz	r3, 8007a30 <_puts_r+0x10>
 8007a2c:	f001 f908 	bl	8008c40 <__sinit>
 8007a30:	69ab      	ldr	r3, [r5, #24]
 8007a32:	68ac      	ldr	r4, [r5, #8]
 8007a34:	b913      	cbnz	r3, 8007a3c <_puts_r+0x1c>
 8007a36:	4628      	mov	r0, r5
 8007a38:	f001 f902 	bl	8008c40 <__sinit>
 8007a3c:	4b23      	ldr	r3, [pc, #140]	; (8007acc <_puts_r+0xac>)
 8007a3e:	429c      	cmp	r4, r3
 8007a40:	d117      	bne.n	8007a72 <_puts_r+0x52>
 8007a42:	686c      	ldr	r4, [r5, #4]
 8007a44:	89a3      	ldrh	r3, [r4, #12]
 8007a46:	071b      	lsls	r3, r3, #28
 8007a48:	d51d      	bpl.n	8007a86 <_puts_r+0x66>
 8007a4a:	6923      	ldr	r3, [r4, #16]
 8007a4c:	b1db      	cbz	r3, 8007a86 <_puts_r+0x66>
 8007a4e:	3e01      	subs	r6, #1
 8007a50:	68a3      	ldr	r3, [r4, #8]
 8007a52:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a56:	3b01      	subs	r3, #1
 8007a58:	60a3      	str	r3, [r4, #8]
 8007a5a:	b9e9      	cbnz	r1, 8007a98 <_puts_r+0x78>
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	da2e      	bge.n	8007abe <_puts_r+0x9e>
 8007a60:	4622      	mov	r2, r4
 8007a62:	210a      	movs	r1, #10
 8007a64:	4628      	mov	r0, r5
 8007a66:	f000 f8f5 	bl	8007c54 <__swbuf_r>
 8007a6a:	3001      	adds	r0, #1
 8007a6c:	d011      	beq.n	8007a92 <_puts_r+0x72>
 8007a6e:	200a      	movs	r0, #10
 8007a70:	e011      	b.n	8007a96 <_puts_r+0x76>
 8007a72:	4b17      	ldr	r3, [pc, #92]	; (8007ad0 <_puts_r+0xb0>)
 8007a74:	429c      	cmp	r4, r3
 8007a76:	d101      	bne.n	8007a7c <_puts_r+0x5c>
 8007a78:	68ac      	ldr	r4, [r5, #8]
 8007a7a:	e7e3      	b.n	8007a44 <_puts_r+0x24>
 8007a7c:	4b15      	ldr	r3, [pc, #84]	; (8007ad4 <_puts_r+0xb4>)
 8007a7e:	429c      	cmp	r4, r3
 8007a80:	bf08      	it	eq
 8007a82:	68ec      	ldreq	r4, [r5, #12]
 8007a84:	e7de      	b.n	8007a44 <_puts_r+0x24>
 8007a86:	4621      	mov	r1, r4
 8007a88:	4628      	mov	r0, r5
 8007a8a:	f000 f935 	bl	8007cf8 <__swsetup_r>
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	d0dd      	beq.n	8007a4e <_puts_r+0x2e>
 8007a92:	f04f 30ff 	mov.w	r0, #4294967295
 8007a96:	bd70      	pop	{r4, r5, r6, pc}
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	da04      	bge.n	8007aa6 <_puts_r+0x86>
 8007a9c:	69a2      	ldr	r2, [r4, #24]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	dc06      	bgt.n	8007ab0 <_puts_r+0x90>
 8007aa2:	290a      	cmp	r1, #10
 8007aa4:	d004      	beq.n	8007ab0 <_puts_r+0x90>
 8007aa6:	6823      	ldr	r3, [r4, #0]
 8007aa8:	1c5a      	adds	r2, r3, #1
 8007aaa:	6022      	str	r2, [r4, #0]
 8007aac:	7019      	strb	r1, [r3, #0]
 8007aae:	e7cf      	b.n	8007a50 <_puts_r+0x30>
 8007ab0:	4622      	mov	r2, r4
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	f000 f8ce 	bl	8007c54 <__swbuf_r>
 8007ab8:	3001      	adds	r0, #1
 8007aba:	d1c9      	bne.n	8007a50 <_puts_r+0x30>
 8007abc:	e7e9      	b.n	8007a92 <_puts_r+0x72>
 8007abe:	6823      	ldr	r3, [r4, #0]
 8007ac0:	200a      	movs	r0, #10
 8007ac2:	1c5a      	adds	r2, r3, #1
 8007ac4:	6022      	str	r2, [r4, #0]
 8007ac6:	7018      	strb	r0, [r3, #0]
 8007ac8:	e7e5      	b.n	8007a96 <_puts_r+0x76>
 8007aca:	bf00      	nop
 8007acc:	080097c8 	.word	0x080097c8
 8007ad0:	080097e8 	.word	0x080097e8
 8007ad4:	080097a8 	.word	0x080097a8

08007ad8 <puts>:
 8007ad8:	4b02      	ldr	r3, [pc, #8]	; (8007ae4 <puts+0xc>)
 8007ada:	4601      	mov	r1, r0
 8007adc:	6818      	ldr	r0, [r3, #0]
 8007ade:	f7ff bf9f 	b.w	8007a20 <_puts_r>
 8007ae2:	bf00      	nop
 8007ae4:	2000000c 	.word	0x2000000c

08007ae8 <setbuf>:
 8007ae8:	2900      	cmp	r1, #0
 8007aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007aee:	bf0c      	ite	eq
 8007af0:	2202      	moveq	r2, #2
 8007af2:	2200      	movne	r2, #0
 8007af4:	f000 b800 	b.w	8007af8 <setvbuf>

08007af8 <setvbuf>:
 8007af8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007afc:	461d      	mov	r5, r3
 8007afe:	4b51      	ldr	r3, [pc, #324]	; (8007c44 <setvbuf+0x14c>)
 8007b00:	681e      	ldr	r6, [r3, #0]
 8007b02:	4604      	mov	r4, r0
 8007b04:	460f      	mov	r7, r1
 8007b06:	4690      	mov	r8, r2
 8007b08:	b126      	cbz	r6, 8007b14 <setvbuf+0x1c>
 8007b0a:	69b3      	ldr	r3, [r6, #24]
 8007b0c:	b913      	cbnz	r3, 8007b14 <setvbuf+0x1c>
 8007b0e:	4630      	mov	r0, r6
 8007b10:	f001 f896 	bl	8008c40 <__sinit>
 8007b14:	4b4c      	ldr	r3, [pc, #304]	; (8007c48 <setvbuf+0x150>)
 8007b16:	429c      	cmp	r4, r3
 8007b18:	d152      	bne.n	8007bc0 <setvbuf+0xc8>
 8007b1a:	6874      	ldr	r4, [r6, #4]
 8007b1c:	f1b8 0f02 	cmp.w	r8, #2
 8007b20:	d006      	beq.n	8007b30 <setvbuf+0x38>
 8007b22:	f1b8 0f01 	cmp.w	r8, #1
 8007b26:	f200 8089 	bhi.w	8007c3c <setvbuf+0x144>
 8007b2a:	2d00      	cmp	r5, #0
 8007b2c:	f2c0 8086 	blt.w	8007c3c <setvbuf+0x144>
 8007b30:	4621      	mov	r1, r4
 8007b32:	4630      	mov	r0, r6
 8007b34:	f001 f81a 	bl	8008b6c <_fflush_r>
 8007b38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b3a:	b141      	cbz	r1, 8007b4e <setvbuf+0x56>
 8007b3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b40:	4299      	cmp	r1, r3
 8007b42:	d002      	beq.n	8007b4a <setvbuf+0x52>
 8007b44:	4630      	mov	r0, r6
 8007b46:	f001 fc73 	bl	8009430 <_free_r>
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	6363      	str	r3, [r4, #52]	; 0x34
 8007b4e:	2300      	movs	r3, #0
 8007b50:	61a3      	str	r3, [r4, #24]
 8007b52:	6063      	str	r3, [r4, #4]
 8007b54:	89a3      	ldrh	r3, [r4, #12]
 8007b56:	061b      	lsls	r3, r3, #24
 8007b58:	d503      	bpl.n	8007b62 <setvbuf+0x6a>
 8007b5a:	6921      	ldr	r1, [r4, #16]
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	f001 fc67 	bl	8009430 <_free_r>
 8007b62:	89a3      	ldrh	r3, [r4, #12]
 8007b64:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007b68:	f023 0303 	bic.w	r3, r3, #3
 8007b6c:	f1b8 0f02 	cmp.w	r8, #2
 8007b70:	81a3      	strh	r3, [r4, #12]
 8007b72:	d05d      	beq.n	8007c30 <setvbuf+0x138>
 8007b74:	ab01      	add	r3, sp, #4
 8007b76:	466a      	mov	r2, sp
 8007b78:	4621      	mov	r1, r4
 8007b7a:	4630      	mov	r0, r6
 8007b7c:	f001 f8f8 	bl	8008d70 <__swhatbuf_r>
 8007b80:	89a3      	ldrh	r3, [r4, #12]
 8007b82:	4318      	orrs	r0, r3
 8007b84:	81a0      	strh	r0, [r4, #12]
 8007b86:	bb2d      	cbnz	r5, 8007bd4 <setvbuf+0xdc>
 8007b88:	9d00      	ldr	r5, [sp, #0]
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	f001 f954 	bl	8008e38 <malloc>
 8007b90:	4607      	mov	r7, r0
 8007b92:	2800      	cmp	r0, #0
 8007b94:	d14e      	bne.n	8007c34 <setvbuf+0x13c>
 8007b96:	f8dd 9000 	ldr.w	r9, [sp]
 8007b9a:	45a9      	cmp	r9, r5
 8007b9c:	d13c      	bne.n	8007c18 <setvbuf+0x120>
 8007b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba2:	89a3      	ldrh	r3, [r4, #12]
 8007ba4:	f043 0302 	orr.w	r3, r3, #2
 8007ba8:	81a3      	strh	r3, [r4, #12]
 8007baa:	2300      	movs	r3, #0
 8007bac:	60a3      	str	r3, [r4, #8]
 8007bae:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007bb2:	6023      	str	r3, [r4, #0]
 8007bb4:	6123      	str	r3, [r4, #16]
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	6163      	str	r3, [r4, #20]
 8007bba:	b003      	add	sp, #12
 8007bbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bc0:	4b22      	ldr	r3, [pc, #136]	; (8007c4c <setvbuf+0x154>)
 8007bc2:	429c      	cmp	r4, r3
 8007bc4:	d101      	bne.n	8007bca <setvbuf+0xd2>
 8007bc6:	68b4      	ldr	r4, [r6, #8]
 8007bc8:	e7a8      	b.n	8007b1c <setvbuf+0x24>
 8007bca:	4b21      	ldr	r3, [pc, #132]	; (8007c50 <setvbuf+0x158>)
 8007bcc:	429c      	cmp	r4, r3
 8007bce:	bf08      	it	eq
 8007bd0:	68f4      	ldreq	r4, [r6, #12]
 8007bd2:	e7a3      	b.n	8007b1c <setvbuf+0x24>
 8007bd4:	2f00      	cmp	r7, #0
 8007bd6:	d0d8      	beq.n	8007b8a <setvbuf+0x92>
 8007bd8:	69b3      	ldr	r3, [r6, #24]
 8007bda:	b913      	cbnz	r3, 8007be2 <setvbuf+0xea>
 8007bdc:	4630      	mov	r0, r6
 8007bde:	f001 f82f 	bl	8008c40 <__sinit>
 8007be2:	f1b8 0f01 	cmp.w	r8, #1
 8007be6:	bf08      	it	eq
 8007be8:	89a3      	ldrheq	r3, [r4, #12]
 8007bea:	6027      	str	r7, [r4, #0]
 8007bec:	bf04      	itt	eq
 8007bee:	f043 0301 	orreq.w	r3, r3, #1
 8007bf2:	81a3      	strheq	r3, [r4, #12]
 8007bf4:	89a3      	ldrh	r3, [r4, #12]
 8007bf6:	f013 0008 	ands.w	r0, r3, #8
 8007bfa:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8007bfe:	d01b      	beq.n	8007c38 <setvbuf+0x140>
 8007c00:	f013 0001 	ands.w	r0, r3, #1
 8007c04:	bf18      	it	ne
 8007c06:	426d      	negne	r5, r5
 8007c08:	f04f 0300 	mov.w	r3, #0
 8007c0c:	bf1d      	ittte	ne
 8007c0e:	60a3      	strne	r3, [r4, #8]
 8007c10:	61a5      	strne	r5, [r4, #24]
 8007c12:	4618      	movne	r0, r3
 8007c14:	60a5      	streq	r5, [r4, #8]
 8007c16:	e7d0      	b.n	8007bba <setvbuf+0xc2>
 8007c18:	4648      	mov	r0, r9
 8007c1a:	f001 f90d 	bl	8008e38 <malloc>
 8007c1e:	4607      	mov	r7, r0
 8007c20:	2800      	cmp	r0, #0
 8007c22:	d0bc      	beq.n	8007b9e <setvbuf+0xa6>
 8007c24:	89a3      	ldrh	r3, [r4, #12]
 8007c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c2a:	81a3      	strh	r3, [r4, #12]
 8007c2c:	464d      	mov	r5, r9
 8007c2e:	e7d3      	b.n	8007bd8 <setvbuf+0xe0>
 8007c30:	2000      	movs	r0, #0
 8007c32:	e7b6      	b.n	8007ba2 <setvbuf+0xaa>
 8007c34:	46a9      	mov	r9, r5
 8007c36:	e7f5      	b.n	8007c24 <setvbuf+0x12c>
 8007c38:	60a0      	str	r0, [r4, #8]
 8007c3a:	e7be      	b.n	8007bba <setvbuf+0xc2>
 8007c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c40:	e7bb      	b.n	8007bba <setvbuf+0xc2>
 8007c42:	bf00      	nop
 8007c44:	2000000c 	.word	0x2000000c
 8007c48:	080097c8 	.word	0x080097c8
 8007c4c:	080097e8 	.word	0x080097e8
 8007c50:	080097a8 	.word	0x080097a8

08007c54 <__swbuf_r>:
 8007c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c56:	460e      	mov	r6, r1
 8007c58:	4614      	mov	r4, r2
 8007c5a:	4605      	mov	r5, r0
 8007c5c:	b118      	cbz	r0, 8007c66 <__swbuf_r+0x12>
 8007c5e:	6983      	ldr	r3, [r0, #24]
 8007c60:	b90b      	cbnz	r3, 8007c66 <__swbuf_r+0x12>
 8007c62:	f000 ffed 	bl	8008c40 <__sinit>
 8007c66:	4b21      	ldr	r3, [pc, #132]	; (8007cec <__swbuf_r+0x98>)
 8007c68:	429c      	cmp	r4, r3
 8007c6a:	d12a      	bne.n	8007cc2 <__swbuf_r+0x6e>
 8007c6c:	686c      	ldr	r4, [r5, #4]
 8007c6e:	69a3      	ldr	r3, [r4, #24]
 8007c70:	60a3      	str	r3, [r4, #8]
 8007c72:	89a3      	ldrh	r3, [r4, #12]
 8007c74:	071a      	lsls	r2, r3, #28
 8007c76:	d52e      	bpl.n	8007cd6 <__swbuf_r+0x82>
 8007c78:	6923      	ldr	r3, [r4, #16]
 8007c7a:	b363      	cbz	r3, 8007cd6 <__swbuf_r+0x82>
 8007c7c:	6923      	ldr	r3, [r4, #16]
 8007c7e:	6820      	ldr	r0, [r4, #0]
 8007c80:	1ac0      	subs	r0, r0, r3
 8007c82:	6963      	ldr	r3, [r4, #20]
 8007c84:	b2f6      	uxtb	r6, r6
 8007c86:	4283      	cmp	r3, r0
 8007c88:	4637      	mov	r7, r6
 8007c8a:	dc04      	bgt.n	8007c96 <__swbuf_r+0x42>
 8007c8c:	4621      	mov	r1, r4
 8007c8e:	4628      	mov	r0, r5
 8007c90:	f000 ff6c 	bl	8008b6c <_fflush_r>
 8007c94:	bb28      	cbnz	r0, 8007ce2 <__swbuf_r+0x8e>
 8007c96:	68a3      	ldr	r3, [r4, #8]
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	60a3      	str	r3, [r4, #8]
 8007c9c:	6823      	ldr	r3, [r4, #0]
 8007c9e:	1c5a      	adds	r2, r3, #1
 8007ca0:	6022      	str	r2, [r4, #0]
 8007ca2:	701e      	strb	r6, [r3, #0]
 8007ca4:	6963      	ldr	r3, [r4, #20]
 8007ca6:	3001      	adds	r0, #1
 8007ca8:	4283      	cmp	r3, r0
 8007caa:	d004      	beq.n	8007cb6 <__swbuf_r+0x62>
 8007cac:	89a3      	ldrh	r3, [r4, #12]
 8007cae:	07db      	lsls	r3, r3, #31
 8007cb0:	d519      	bpl.n	8007ce6 <__swbuf_r+0x92>
 8007cb2:	2e0a      	cmp	r6, #10
 8007cb4:	d117      	bne.n	8007ce6 <__swbuf_r+0x92>
 8007cb6:	4621      	mov	r1, r4
 8007cb8:	4628      	mov	r0, r5
 8007cba:	f000 ff57 	bl	8008b6c <_fflush_r>
 8007cbe:	b190      	cbz	r0, 8007ce6 <__swbuf_r+0x92>
 8007cc0:	e00f      	b.n	8007ce2 <__swbuf_r+0x8e>
 8007cc2:	4b0b      	ldr	r3, [pc, #44]	; (8007cf0 <__swbuf_r+0x9c>)
 8007cc4:	429c      	cmp	r4, r3
 8007cc6:	d101      	bne.n	8007ccc <__swbuf_r+0x78>
 8007cc8:	68ac      	ldr	r4, [r5, #8]
 8007cca:	e7d0      	b.n	8007c6e <__swbuf_r+0x1a>
 8007ccc:	4b09      	ldr	r3, [pc, #36]	; (8007cf4 <__swbuf_r+0xa0>)
 8007cce:	429c      	cmp	r4, r3
 8007cd0:	bf08      	it	eq
 8007cd2:	68ec      	ldreq	r4, [r5, #12]
 8007cd4:	e7cb      	b.n	8007c6e <__swbuf_r+0x1a>
 8007cd6:	4621      	mov	r1, r4
 8007cd8:	4628      	mov	r0, r5
 8007cda:	f000 f80d 	bl	8007cf8 <__swsetup_r>
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	d0cc      	beq.n	8007c7c <__swbuf_r+0x28>
 8007ce2:	f04f 37ff 	mov.w	r7, #4294967295
 8007ce6:	4638      	mov	r0, r7
 8007ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cea:	bf00      	nop
 8007cec:	080097c8 	.word	0x080097c8
 8007cf0:	080097e8 	.word	0x080097e8
 8007cf4:	080097a8 	.word	0x080097a8

08007cf8 <__swsetup_r>:
 8007cf8:	4b32      	ldr	r3, [pc, #200]	; (8007dc4 <__swsetup_r+0xcc>)
 8007cfa:	b570      	push	{r4, r5, r6, lr}
 8007cfc:	681d      	ldr	r5, [r3, #0]
 8007cfe:	4606      	mov	r6, r0
 8007d00:	460c      	mov	r4, r1
 8007d02:	b125      	cbz	r5, 8007d0e <__swsetup_r+0x16>
 8007d04:	69ab      	ldr	r3, [r5, #24]
 8007d06:	b913      	cbnz	r3, 8007d0e <__swsetup_r+0x16>
 8007d08:	4628      	mov	r0, r5
 8007d0a:	f000 ff99 	bl	8008c40 <__sinit>
 8007d0e:	4b2e      	ldr	r3, [pc, #184]	; (8007dc8 <__swsetup_r+0xd0>)
 8007d10:	429c      	cmp	r4, r3
 8007d12:	d10f      	bne.n	8007d34 <__swsetup_r+0x3c>
 8007d14:	686c      	ldr	r4, [r5, #4]
 8007d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	0715      	lsls	r5, r2, #28
 8007d1e:	d42c      	bmi.n	8007d7a <__swsetup_r+0x82>
 8007d20:	06d0      	lsls	r0, r2, #27
 8007d22:	d411      	bmi.n	8007d48 <__swsetup_r+0x50>
 8007d24:	2209      	movs	r2, #9
 8007d26:	6032      	str	r2, [r6, #0]
 8007d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d2c:	81a3      	strh	r3, [r4, #12]
 8007d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d32:	e03e      	b.n	8007db2 <__swsetup_r+0xba>
 8007d34:	4b25      	ldr	r3, [pc, #148]	; (8007dcc <__swsetup_r+0xd4>)
 8007d36:	429c      	cmp	r4, r3
 8007d38:	d101      	bne.n	8007d3e <__swsetup_r+0x46>
 8007d3a:	68ac      	ldr	r4, [r5, #8]
 8007d3c:	e7eb      	b.n	8007d16 <__swsetup_r+0x1e>
 8007d3e:	4b24      	ldr	r3, [pc, #144]	; (8007dd0 <__swsetup_r+0xd8>)
 8007d40:	429c      	cmp	r4, r3
 8007d42:	bf08      	it	eq
 8007d44:	68ec      	ldreq	r4, [r5, #12]
 8007d46:	e7e6      	b.n	8007d16 <__swsetup_r+0x1e>
 8007d48:	0751      	lsls	r1, r2, #29
 8007d4a:	d512      	bpl.n	8007d72 <__swsetup_r+0x7a>
 8007d4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d4e:	b141      	cbz	r1, 8007d62 <__swsetup_r+0x6a>
 8007d50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d54:	4299      	cmp	r1, r3
 8007d56:	d002      	beq.n	8007d5e <__swsetup_r+0x66>
 8007d58:	4630      	mov	r0, r6
 8007d5a:	f001 fb69 	bl	8009430 <_free_r>
 8007d5e:	2300      	movs	r3, #0
 8007d60:	6363      	str	r3, [r4, #52]	; 0x34
 8007d62:	89a3      	ldrh	r3, [r4, #12]
 8007d64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d68:	81a3      	strh	r3, [r4, #12]
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	6063      	str	r3, [r4, #4]
 8007d6e:	6923      	ldr	r3, [r4, #16]
 8007d70:	6023      	str	r3, [r4, #0]
 8007d72:	89a3      	ldrh	r3, [r4, #12]
 8007d74:	f043 0308 	orr.w	r3, r3, #8
 8007d78:	81a3      	strh	r3, [r4, #12]
 8007d7a:	6923      	ldr	r3, [r4, #16]
 8007d7c:	b94b      	cbnz	r3, 8007d92 <__swsetup_r+0x9a>
 8007d7e:	89a3      	ldrh	r3, [r4, #12]
 8007d80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d88:	d003      	beq.n	8007d92 <__swsetup_r+0x9a>
 8007d8a:	4621      	mov	r1, r4
 8007d8c:	4630      	mov	r0, r6
 8007d8e:	f001 f813 	bl	8008db8 <__smakebuf_r>
 8007d92:	89a2      	ldrh	r2, [r4, #12]
 8007d94:	f012 0301 	ands.w	r3, r2, #1
 8007d98:	d00c      	beq.n	8007db4 <__swsetup_r+0xbc>
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	60a3      	str	r3, [r4, #8]
 8007d9e:	6963      	ldr	r3, [r4, #20]
 8007da0:	425b      	negs	r3, r3
 8007da2:	61a3      	str	r3, [r4, #24]
 8007da4:	6923      	ldr	r3, [r4, #16]
 8007da6:	b953      	cbnz	r3, 8007dbe <__swsetup_r+0xc6>
 8007da8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007db0:	d1ba      	bne.n	8007d28 <__swsetup_r+0x30>
 8007db2:	bd70      	pop	{r4, r5, r6, pc}
 8007db4:	0792      	lsls	r2, r2, #30
 8007db6:	bf58      	it	pl
 8007db8:	6963      	ldrpl	r3, [r4, #20]
 8007dba:	60a3      	str	r3, [r4, #8]
 8007dbc:	e7f2      	b.n	8007da4 <__swsetup_r+0xac>
 8007dbe:	2000      	movs	r0, #0
 8007dc0:	e7f7      	b.n	8007db2 <__swsetup_r+0xba>
 8007dc2:	bf00      	nop
 8007dc4:	2000000c 	.word	0x2000000c
 8007dc8:	080097c8 	.word	0x080097c8
 8007dcc:	080097e8 	.word	0x080097e8
 8007dd0:	080097a8 	.word	0x080097a8

08007dd4 <quorem>:
 8007dd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd8:	6903      	ldr	r3, [r0, #16]
 8007dda:	690c      	ldr	r4, [r1, #16]
 8007ddc:	42a3      	cmp	r3, r4
 8007dde:	4680      	mov	r8, r0
 8007de0:	f2c0 8082 	blt.w	8007ee8 <quorem+0x114>
 8007de4:	3c01      	subs	r4, #1
 8007de6:	f101 0714 	add.w	r7, r1, #20
 8007dea:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007dee:	f100 0614 	add.w	r6, r0, #20
 8007df2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007df6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007dfa:	eb06 030c 	add.w	r3, r6, ip
 8007dfe:	3501      	adds	r5, #1
 8007e00:	eb07 090c 	add.w	r9, r7, ip
 8007e04:	9301      	str	r3, [sp, #4]
 8007e06:	fbb0 f5f5 	udiv	r5, r0, r5
 8007e0a:	b395      	cbz	r5, 8007e72 <quorem+0x9e>
 8007e0c:	f04f 0a00 	mov.w	sl, #0
 8007e10:	4638      	mov	r0, r7
 8007e12:	46b6      	mov	lr, r6
 8007e14:	46d3      	mov	fp, sl
 8007e16:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e1a:	b293      	uxth	r3, r2
 8007e1c:	fb05 a303 	mla	r3, r5, r3, sl
 8007e20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	ebab 0303 	sub.w	r3, fp, r3
 8007e2a:	0c12      	lsrs	r2, r2, #16
 8007e2c:	f8de b000 	ldr.w	fp, [lr]
 8007e30:	fb05 a202 	mla	r2, r5, r2, sl
 8007e34:	fa13 f38b 	uxtah	r3, r3, fp
 8007e38:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007e3c:	fa1f fb82 	uxth.w	fp, r2
 8007e40:	f8de 2000 	ldr.w	r2, [lr]
 8007e44:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007e48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e52:	4581      	cmp	r9, r0
 8007e54:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007e58:	f84e 3b04 	str.w	r3, [lr], #4
 8007e5c:	d2db      	bcs.n	8007e16 <quorem+0x42>
 8007e5e:	f856 300c 	ldr.w	r3, [r6, ip]
 8007e62:	b933      	cbnz	r3, 8007e72 <quorem+0x9e>
 8007e64:	9b01      	ldr	r3, [sp, #4]
 8007e66:	3b04      	subs	r3, #4
 8007e68:	429e      	cmp	r6, r3
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	d330      	bcc.n	8007ed0 <quorem+0xfc>
 8007e6e:	f8c8 4010 	str.w	r4, [r8, #16]
 8007e72:	4640      	mov	r0, r8
 8007e74:	f001 fa08 	bl	8009288 <__mcmp>
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	db25      	blt.n	8007ec8 <quorem+0xf4>
 8007e7c:	3501      	adds	r5, #1
 8007e7e:	4630      	mov	r0, r6
 8007e80:	f04f 0c00 	mov.w	ip, #0
 8007e84:	f857 2b04 	ldr.w	r2, [r7], #4
 8007e88:	f8d0 e000 	ldr.w	lr, [r0]
 8007e8c:	b293      	uxth	r3, r2
 8007e8e:	ebac 0303 	sub.w	r3, ip, r3
 8007e92:	0c12      	lsrs	r2, r2, #16
 8007e94:	fa13 f38e 	uxtah	r3, r3, lr
 8007e98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007e9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ea6:	45b9      	cmp	r9, r7
 8007ea8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007eac:	f840 3b04 	str.w	r3, [r0], #4
 8007eb0:	d2e8      	bcs.n	8007e84 <quorem+0xb0>
 8007eb2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007eb6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007eba:	b92a      	cbnz	r2, 8007ec8 <quorem+0xf4>
 8007ebc:	3b04      	subs	r3, #4
 8007ebe:	429e      	cmp	r6, r3
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	d30b      	bcc.n	8007edc <quorem+0x108>
 8007ec4:	f8c8 4010 	str.w	r4, [r8, #16]
 8007ec8:	4628      	mov	r0, r5
 8007eca:	b003      	add	sp, #12
 8007ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed0:	6812      	ldr	r2, [r2, #0]
 8007ed2:	3b04      	subs	r3, #4
 8007ed4:	2a00      	cmp	r2, #0
 8007ed6:	d1ca      	bne.n	8007e6e <quorem+0x9a>
 8007ed8:	3c01      	subs	r4, #1
 8007eda:	e7c5      	b.n	8007e68 <quorem+0x94>
 8007edc:	6812      	ldr	r2, [r2, #0]
 8007ede:	3b04      	subs	r3, #4
 8007ee0:	2a00      	cmp	r2, #0
 8007ee2:	d1ef      	bne.n	8007ec4 <quorem+0xf0>
 8007ee4:	3c01      	subs	r4, #1
 8007ee6:	e7ea      	b.n	8007ebe <quorem+0xea>
 8007ee8:	2000      	movs	r0, #0
 8007eea:	e7ee      	b.n	8007eca <quorem+0xf6>
 8007eec:	0000      	movs	r0, r0
	...

08007ef0 <_dtoa_r>:
 8007ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef4:	ec57 6b10 	vmov	r6, r7, d0
 8007ef8:	b097      	sub	sp, #92	; 0x5c
 8007efa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007efc:	9106      	str	r1, [sp, #24]
 8007efe:	4604      	mov	r4, r0
 8007f00:	920b      	str	r2, [sp, #44]	; 0x2c
 8007f02:	9312      	str	r3, [sp, #72]	; 0x48
 8007f04:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f08:	e9cd 6700 	strd	r6, r7, [sp]
 8007f0c:	b93d      	cbnz	r5, 8007f1e <_dtoa_r+0x2e>
 8007f0e:	2010      	movs	r0, #16
 8007f10:	f000 ff92 	bl	8008e38 <malloc>
 8007f14:	6260      	str	r0, [r4, #36]	; 0x24
 8007f16:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f1a:	6005      	str	r5, [r0, #0]
 8007f1c:	60c5      	str	r5, [r0, #12]
 8007f1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f20:	6819      	ldr	r1, [r3, #0]
 8007f22:	b151      	cbz	r1, 8007f3a <_dtoa_r+0x4a>
 8007f24:	685a      	ldr	r2, [r3, #4]
 8007f26:	604a      	str	r2, [r1, #4]
 8007f28:	2301      	movs	r3, #1
 8007f2a:	4093      	lsls	r3, r2
 8007f2c:	608b      	str	r3, [r1, #8]
 8007f2e:	4620      	mov	r0, r4
 8007f30:	f000 ffc9 	bl	8008ec6 <_Bfree>
 8007f34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f36:	2200      	movs	r2, #0
 8007f38:	601a      	str	r2, [r3, #0]
 8007f3a:	1e3b      	subs	r3, r7, #0
 8007f3c:	bfbb      	ittet	lt
 8007f3e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007f42:	9301      	strlt	r3, [sp, #4]
 8007f44:	2300      	movge	r3, #0
 8007f46:	2201      	movlt	r2, #1
 8007f48:	bfac      	ite	ge
 8007f4a:	f8c8 3000 	strge.w	r3, [r8]
 8007f4e:	f8c8 2000 	strlt.w	r2, [r8]
 8007f52:	4baf      	ldr	r3, [pc, #700]	; (8008210 <_dtoa_r+0x320>)
 8007f54:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007f58:	ea33 0308 	bics.w	r3, r3, r8
 8007f5c:	d114      	bne.n	8007f88 <_dtoa_r+0x98>
 8007f5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007f60:	f242 730f 	movw	r3, #9999	; 0x270f
 8007f64:	6013      	str	r3, [r2, #0]
 8007f66:	9b00      	ldr	r3, [sp, #0]
 8007f68:	b923      	cbnz	r3, 8007f74 <_dtoa_r+0x84>
 8007f6a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	f000 8542 	beq.w	80089f8 <_dtoa_r+0xb08>
 8007f74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f76:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008224 <_dtoa_r+0x334>
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f000 8544 	beq.w	8008a08 <_dtoa_r+0xb18>
 8007f80:	f10b 0303 	add.w	r3, fp, #3
 8007f84:	f000 bd3e 	b.w	8008a04 <_dtoa_r+0xb14>
 8007f88:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	2300      	movs	r3, #0
 8007f90:	4630      	mov	r0, r6
 8007f92:	4639      	mov	r1, r7
 8007f94:	f7f8 fd64 	bl	8000a60 <__aeabi_dcmpeq>
 8007f98:	4681      	mov	r9, r0
 8007f9a:	b168      	cbz	r0, 8007fb8 <_dtoa_r+0xc8>
 8007f9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	6013      	str	r3, [r2, #0]
 8007fa2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f000 8524 	beq.w	80089f2 <_dtoa_r+0xb02>
 8007faa:	4b9a      	ldr	r3, [pc, #616]	; (8008214 <_dtoa_r+0x324>)
 8007fac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007fae:	f103 3bff 	add.w	fp, r3, #4294967295
 8007fb2:	6013      	str	r3, [r2, #0]
 8007fb4:	f000 bd28 	b.w	8008a08 <_dtoa_r+0xb18>
 8007fb8:	aa14      	add	r2, sp, #80	; 0x50
 8007fba:	a915      	add	r1, sp, #84	; 0x54
 8007fbc:	ec47 6b10 	vmov	d0, r6, r7
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	f001 f9d8 	bl	8009376 <__d2b>
 8007fc6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007fca:	9004      	str	r0, [sp, #16]
 8007fcc:	2d00      	cmp	r5, #0
 8007fce:	d07c      	beq.n	80080ca <_dtoa_r+0x1da>
 8007fd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007fd4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007fd8:	46b2      	mov	sl, r6
 8007fda:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007fde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007fe2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	4b8b      	ldr	r3, [pc, #556]	; (8008218 <_dtoa_r+0x328>)
 8007fea:	4650      	mov	r0, sl
 8007fec:	4659      	mov	r1, fp
 8007fee:	f7f8 f917 	bl	8000220 <__aeabi_dsub>
 8007ff2:	a381      	add	r3, pc, #516	; (adr r3, 80081f8 <_dtoa_r+0x308>)
 8007ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff8:	f7f8 faca 	bl	8000590 <__aeabi_dmul>
 8007ffc:	a380      	add	r3, pc, #512	; (adr r3, 8008200 <_dtoa_r+0x310>)
 8007ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008002:	f7f8 f90f 	bl	8000224 <__adddf3>
 8008006:	4606      	mov	r6, r0
 8008008:	4628      	mov	r0, r5
 800800a:	460f      	mov	r7, r1
 800800c:	f7f8 fa56 	bl	80004bc <__aeabi_i2d>
 8008010:	a37d      	add	r3, pc, #500	; (adr r3, 8008208 <_dtoa_r+0x318>)
 8008012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008016:	f7f8 fabb 	bl	8000590 <__aeabi_dmul>
 800801a:	4602      	mov	r2, r0
 800801c:	460b      	mov	r3, r1
 800801e:	4630      	mov	r0, r6
 8008020:	4639      	mov	r1, r7
 8008022:	f7f8 f8ff 	bl	8000224 <__adddf3>
 8008026:	4606      	mov	r6, r0
 8008028:	460f      	mov	r7, r1
 800802a:	f7f8 fd61 	bl	8000af0 <__aeabi_d2iz>
 800802e:	2200      	movs	r2, #0
 8008030:	4682      	mov	sl, r0
 8008032:	2300      	movs	r3, #0
 8008034:	4630      	mov	r0, r6
 8008036:	4639      	mov	r1, r7
 8008038:	f7f8 fd1c 	bl	8000a74 <__aeabi_dcmplt>
 800803c:	b148      	cbz	r0, 8008052 <_dtoa_r+0x162>
 800803e:	4650      	mov	r0, sl
 8008040:	f7f8 fa3c 	bl	80004bc <__aeabi_i2d>
 8008044:	4632      	mov	r2, r6
 8008046:	463b      	mov	r3, r7
 8008048:	f7f8 fd0a 	bl	8000a60 <__aeabi_dcmpeq>
 800804c:	b908      	cbnz	r0, 8008052 <_dtoa_r+0x162>
 800804e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008052:	f1ba 0f16 	cmp.w	sl, #22
 8008056:	d859      	bhi.n	800810c <_dtoa_r+0x21c>
 8008058:	4970      	ldr	r1, [pc, #448]	; (800821c <_dtoa_r+0x32c>)
 800805a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800805e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008062:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008066:	f7f8 fd23 	bl	8000ab0 <__aeabi_dcmpgt>
 800806a:	2800      	cmp	r0, #0
 800806c:	d050      	beq.n	8008110 <_dtoa_r+0x220>
 800806e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008072:	2300      	movs	r3, #0
 8008074:	930f      	str	r3, [sp, #60]	; 0x3c
 8008076:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008078:	1b5d      	subs	r5, r3, r5
 800807a:	f1b5 0801 	subs.w	r8, r5, #1
 800807e:	bf49      	itett	mi
 8008080:	f1c5 0301 	rsbmi	r3, r5, #1
 8008084:	2300      	movpl	r3, #0
 8008086:	9305      	strmi	r3, [sp, #20]
 8008088:	f04f 0800 	movmi.w	r8, #0
 800808c:	bf58      	it	pl
 800808e:	9305      	strpl	r3, [sp, #20]
 8008090:	f1ba 0f00 	cmp.w	sl, #0
 8008094:	db3e      	blt.n	8008114 <_dtoa_r+0x224>
 8008096:	2300      	movs	r3, #0
 8008098:	44d0      	add	r8, sl
 800809a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800809e:	9307      	str	r3, [sp, #28]
 80080a0:	9b06      	ldr	r3, [sp, #24]
 80080a2:	2b09      	cmp	r3, #9
 80080a4:	f200 8090 	bhi.w	80081c8 <_dtoa_r+0x2d8>
 80080a8:	2b05      	cmp	r3, #5
 80080aa:	bfc4      	itt	gt
 80080ac:	3b04      	subgt	r3, #4
 80080ae:	9306      	strgt	r3, [sp, #24]
 80080b0:	9b06      	ldr	r3, [sp, #24]
 80080b2:	f1a3 0302 	sub.w	r3, r3, #2
 80080b6:	bfcc      	ite	gt
 80080b8:	2500      	movgt	r5, #0
 80080ba:	2501      	movle	r5, #1
 80080bc:	2b03      	cmp	r3, #3
 80080be:	f200 808f 	bhi.w	80081e0 <_dtoa_r+0x2f0>
 80080c2:	e8df f003 	tbb	[pc, r3]
 80080c6:	7f7d      	.short	0x7f7d
 80080c8:	7131      	.short	0x7131
 80080ca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80080ce:	441d      	add	r5, r3
 80080d0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80080d4:	2820      	cmp	r0, #32
 80080d6:	dd13      	ble.n	8008100 <_dtoa_r+0x210>
 80080d8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80080dc:	9b00      	ldr	r3, [sp, #0]
 80080de:	fa08 f800 	lsl.w	r8, r8, r0
 80080e2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80080e6:	fa23 f000 	lsr.w	r0, r3, r0
 80080ea:	ea48 0000 	orr.w	r0, r8, r0
 80080ee:	f7f8 f9d5 	bl	800049c <__aeabi_ui2d>
 80080f2:	2301      	movs	r3, #1
 80080f4:	4682      	mov	sl, r0
 80080f6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80080fa:	3d01      	subs	r5, #1
 80080fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80080fe:	e772      	b.n	8007fe6 <_dtoa_r+0xf6>
 8008100:	9b00      	ldr	r3, [sp, #0]
 8008102:	f1c0 0020 	rsb	r0, r0, #32
 8008106:	fa03 f000 	lsl.w	r0, r3, r0
 800810a:	e7f0      	b.n	80080ee <_dtoa_r+0x1fe>
 800810c:	2301      	movs	r3, #1
 800810e:	e7b1      	b.n	8008074 <_dtoa_r+0x184>
 8008110:	900f      	str	r0, [sp, #60]	; 0x3c
 8008112:	e7b0      	b.n	8008076 <_dtoa_r+0x186>
 8008114:	9b05      	ldr	r3, [sp, #20]
 8008116:	eba3 030a 	sub.w	r3, r3, sl
 800811a:	9305      	str	r3, [sp, #20]
 800811c:	f1ca 0300 	rsb	r3, sl, #0
 8008120:	9307      	str	r3, [sp, #28]
 8008122:	2300      	movs	r3, #0
 8008124:	930e      	str	r3, [sp, #56]	; 0x38
 8008126:	e7bb      	b.n	80080a0 <_dtoa_r+0x1b0>
 8008128:	2301      	movs	r3, #1
 800812a:	930a      	str	r3, [sp, #40]	; 0x28
 800812c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800812e:	2b00      	cmp	r3, #0
 8008130:	dd59      	ble.n	80081e6 <_dtoa_r+0x2f6>
 8008132:	9302      	str	r3, [sp, #8]
 8008134:	4699      	mov	r9, r3
 8008136:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008138:	2200      	movs	r2, #0
 800813a:	6072      	str	r2, [r6, #4]
 800813c:	2204      	movs	r2, #4
 800813e:	f102 0014 	add.w	r0, r2, #20
 8008142:	4298      	cmp	r0, r3
 8008144:	6871      	ldr	r1, [r6, #4]
 8008146:	d953      	bls.n	80081f0 <_dtoa_r+0x300>
 8008148:	4620      	mov	r0, r4
 800814a:	f000 fe88 	bl	8008e5e <_Balloc>
 800814e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008150:	6030      	str	r0, [r6, #0]
 8008152:	f1b9 0f0e 	cmp.w	r9, #14
 8008156:	f8d3 b000 	ldr.w	fp, [r3]
 800815a:	f200 80e6 	bhi.w	800832a <_dtoa_r+0x43a>
 800815e:	2d00      	cmp	r5, #0
 8008160:	f000 80e3 	beq.w	800832a <_dtoa_r+0x43a>
 8008164:	ed9d 7b00 	vldr	d7, [sp]
 8008168:	f1ba 0f00 	cmp.w	sl, #0
 800816c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008170:	dd74      	ble.n	800825c <_dtoa_r+0x36c>
 8008172:	4a2a      	ldr	r2, [pc, #168]	; (800821c <_dtoa_r+0x32c>)
 8008174:	f00a 030f 	and.w	r3, sl, #15
 8008178:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800817c:	ed93 7b00 	vldr	d7, [r3]
 8008180:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008184:	06f0      	lsls	r0, r6, #27
 8008186:	ed8d 7b08 	vstr	d7, [sp, #32]
 800818a:	d565      	bpl.n	8008258 <_dtoa_r+0x368>
 800818c:	4b24      	ldr	r3, [pc, #144]	; (8008220 <_dtoa_r+0x330>)
 800818e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008192:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008196:	f7f8 fb25 	bl	80007e4 <__aeabi_ddiv>
 800819a:	e9cd 0100 	strd	r0, r1, [sp]
 800819e:	f006 060f 	and.w	r6, r6, #15
 80081a2:	2503      	movs	r5, #3
 80081a4:	4f1e      	ldr	r7, [pc, #120]	; (8008220 <_dtoa_r+0x330>)
 80081a6:	e04c      	b.n	8008242 <_dtoa_r+0x352>
 80081a8:	2301      	movs	r3, #1
 80081aa:	930a      	str	r3, [sp, #40]	; 0x28
 80081ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081ae:	4453      	add	r3, sl
 80081b0:	f103 0901 	add.w	r9, r3, #1
 80081b4:	9302      	str	r3, [sp, #8]
 80081b6:	464b      	mov	r3, r9
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	bfb8      	it	lt
 80081bc:	2301      	movlt	r3, #1
 80081be:	e7ba      	b.n	8008136 <_dtoa_r+0x246>
 80081c0:	2300      	movs	r3, #0
 80081c2:	e7b2      	b.n	800812a <_dtoa_r+0x23a>
 80081c4:	2300      	movs	r3, #0
 80081c6:	e7f0      	b.n	80081aa <_dtoa_r+0x2ba>
 80081c8:	2501      	movs	r5, #1
 80081ca:	2300      	movs	r3, #0
 80081cc:	9306      	str	r3, [sp, #24]
 80081ce:	950a      	str	r5, [sp, #40]	; 0x28
 80081d0:	f04f 33ff 	mov.w	r3, #4294967295
 80081d4:	9302      	str	r3, [sp, #8]
 80081d6:	4699      	mov	r9, r3
 80081d8:	2200      	movs	r2, #0
 80081da:	2312      	movs	r3, #18
 80081dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80081de:	e7aa      	b.n	8008136 <_dtoa_r+0x246>
 80081e0:	2301      	movs	r3, #1
 80081e2:	930a      	str	r3, [sp, #40]	; 0x28
 80081e4:	e7f4      	b.n	80081d0 <_dtoa_r+0x2e0>
 80081e6:	2301      	movs	r3, #1
 80081e8:	9302      	str	r3, [sp, #8]
 80081ea:	4699      	mov	r9, r3
 80081ec:	461a      	mov	r2, r3
 80081ee:	e7f5      	b.n	80081dc <_dtoa_r+0x2ec>
 80081f0:	3101      	adds	r1, #1
 80081f2:	6071      	str	r1, [r6, #4]
 80081f4:	0052      	lsls	r2, r2, #1
 80081f6:	e7a2      	b.n	800813e <_dtoa_r+0x24e>
 80081f8:	636f4361 	.word	0x636f4361
 80081fc:	3fd287a7 	.word	0x3fd287a7
 8008200:	8b60c8b3 	.word	0x8b60c8b3
 8008204:	3fc68a28 	.word	0x3fc68a28
 8008208:	509f79fb 	.word	0x509f79fb
 800820c:	3fd34413 	.word	0x3fd34413
 8008210:	7ff00000 	.word	0x7ff00000
 8008214:	08009799 	.word	0x08009799
 8008218:	3ff80000 	.word	0x3ff80000
 800821c:	08009830 	.word	0x08009830
 8008220:	08009808 	.word	0x08009808
 8008224:	080097a3 	.word	0x080097a3
 8008228:	07f1      	lsls	r1, r6, #31
 800822a:	d508      	bpl.n	800823e <_dtoa_r+0x34e>
 800822c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008230:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008234:	f7f8 f9ac 	bl	8000590 <__aeabi_dmul>
 8008238:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800823c:	3501      	adds	r5, #1
 800823e:	1076      	asrs	r6, r6, #1
 8008240:	3708      	adds	r7, #8
 8008242:	2e00      	cmp	r6, #0
 8008244:	d1f0      	bne.n	8008228 <_dtoa_r+0x338>
 8008246:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800824a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800824e:	f7f8 fac9 	bl	80007e4 <__aeabi_ddiv>
 8008252:	e9cd 0100 	strd	r0, r1, [sp]
 8008256:	e01a      	b.n	800828e <_dtoa_r+0x39e>
 8008258:	2502      	movs	r5, #2
 800825a:	e7a3      	b.n	80081a4 <_dtoa_r+0x2b4>
 800825c:	f000 80a0 	beq.w	80083a0 <_dtoa_r+0x4b0>
 8008260:	f1ca 0600 	rsb	r6, sl, #0
 8008264:	4b9f      	ldr	r3, [pc, #636]	; (80084e4 <_dtoa_r+0x5f4>)
 8008266:	4fa0      	ldr	r7, [pc, #640]	; (80084e8 <_dtoa_r+0x5f8>)
 8008268:	f006 020f 	and.w	r2, r6, #15
 800826c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008274:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008278:	f7f8 f98a 	bl	8000590 <__aeabi_dmul>
 800827c:	e9cd 0100 	strd	r0, r1, [sp]
 8008280:	1136      	asrs	r6, r6, #4
 8008282:	2300      	movs	r3, #0
 8008284:	2502      	movs	r5, #2
 8008286:	2e00      	cmp	r6, #0
 8008288:	d17f      	bne.n	800838a <_dtoa_r+0x49a>
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1e1      	bne.n	8008252 <_dtoa_r+0x362>
 800828e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008290:	2b00      	cmp	r3, #0
 8008292:	f000 8087 	beq.w	80083a4 <_dtoa_r+0x4b4>
 8008296:	e9dd 6700 	ldrd	r6, r7, [sp]
 800829a:	2200      	movs	r2, #0
 800829c:	4b93      	ldr	r3, [pc, #588]	; (80084ec <_dtoa_r+0x5fc>)
 800829e:	4630      	mov	r0, r6
 80082a0:	4639      	mov	r1, r7
 80082a2:	f7f8 fbe7 	bl	8000a74 <__aeabi_dcmplt>
 80082a6:	2800      	cmp	r0, #0
 80082a8:	d07c      	beq.n	80083a4 <_dtoa_r+0x4b4>
 80082aa:	f1b9 0f00 	cmp.w	r9, #0
 80082ae:	d079      	beq.n	80083a4 <_dtoa_r+0x4b4>
 80082b0:	9b02      	ldr	r3, [sp, #8]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	dd35      	ble.n	8008322 <_dtoa_r+0x432>
 80082b6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80082ba:	9308      	str	r3, [sp, #32]
 80082bc:	4639      	mov	r1, r7
 80082be:	2200      	movs	r2, #0
 80082c0:	4b8b      	ldr	r3, [pc, #556]	; (80084f0 <_dtoa_r+0x600>)
 80082c2:	4630      	mov	r0, r6
 80082c4:	f7f8 f964 	bl	8000590 <__aeabi_dmul>
 80082c8:	e9cd 0100 	strd	r0, r1, [sp]
 80082cc:	9f02      	ldr	r7, [sp, #8]
 80082ce:	3501      	adds	r5, #1
 80082d0:	4628      	mov	r0, r5
 80082d2:	f7f8 f8f3 	bl	80004bc <__aeabi_i2d>
 80082d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082da:	f7f8 f959 	bl	8000590 <__aeabi_dmul>
 80082de:	2200      	movs	r2, #0
 80082e0:	4b84      	ldr	r3, [pc, #528]	; (80084f4 <_dtoa_r+0x604>)
 80082e2:	f7f7 ff9f 	bl	8000224 <__adddf3>
 80082e6:	4605      	mov	r5, r0
 80082e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80082ec:	2f00      	cmp	r7, #0
 80082ee:	d15d      	bne.n	80083ac <_dtoa_r+0x4bc>
 80082f0:	2200      	movs	r2, #0
 80082f2:	4b81      	ldr	r3, [pc, #516]	; (80084f8 <_dtoa_r+0x608>)
 80082f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082f8:	f7f7 ff92 	bl	8000220 <__aeabi_dsub>
 80082fc:	462a      	mov	r2, r5
 80082fe:	4633      	mov	r3, r6
 8008300:	e9cd 0100 	strd	r0, r1, [sp]
 8008304:	f7f8 fbd4 	bl	8000ab0 <__aeabi_dcmpgt>
 8008308:	2800      	cmp	r0, #0
 800830a:	f040 8288 	bne.w	800881e <_dtoa_r+0x92e>
 800830e:	462a      	mov	r2, r5
 8008310:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008314:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008318:	f7f8 fbac 	bl	8000a74 <__aeabi_dcmplt>
 800831c:	2800      	cmp	r0, #0
 800831e:	f040 827c 	bne.w	800881a <_dtoa_r+0x92a>
 8008322:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008326:	e9cd 2300 	strd	r2, r3, [sp]
 800832a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800832c:	2b00      	cmp	r3, #0
 800832e:	f2c0 8150 	blt.w	80085d2 <_dtoa_r+0x6e2>
 8008332:	f1ba 0f0e 	cmp.w	sl, #14
 8008336:	f300 814c 	bgt.w	80085d2 <_dtoa_r+0x6e2>
 800833a:	4b6a      	ldr	r3, [pc, #424]	; (80084e4 <_dtoa_r+0x5f4>)
 800833c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008340:	ed93 7b00 	vldr	d7, [r3]
 8008344:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008346:	2b00      	cmp	r3, #0
 8008348:	ed8d 7b02 	vstr	d7, [sp, #8]
 800834c:	f280 80d8 	bge.w	8008500 <_dtoa_r+0x610>
 8008350:	f1b9 0f00 	cmp.w	r9, #0
 8008354:	f300 80d4 	bgt.w	8008500 <_dtoa_r+0x610>
 8008358:	f040 825e 	bne.w	8008818 <_dtoa_r+0x928>
 800835c:	2200      	movs	r2, #0
 800835e:	4b66      	ldr	r3, [pc, #408]	; (80084f8 <_dtoa_r+0x608>)
 8008360:	ec51 0b17 	vmov	r0, r1, d7
 8008364:	f7f8 f914 	bl	8000590 <__aeabi_dmul>
 8008368:	e9dd 2300 	ldrd	r2, r3, [sp]
 800836c:	f7f8 fb96 	bl	8000a9c <__aeabi_dcmpge>
 8008370:	464f      	mov	r7, r9
 8008372:	464e      	mov	r6, r9
 8008374:	2800      	cmp	r0, #0
 8008376:	f040 8234 	bne.w	80087e2 <_dtoa_r+0x8f2>
 800837a:	2331      	movs	r3, #49	; 0x31
 800837c:	f10b 0501 	add.w	r5, fp, #1
 8008380:	f88b 3000 	strb.w	r3, [fp]
 8008384:	f10a 0a01 	add.w	sl, sl, #1
 8008388:	e22f      	b.n	80087ea <_dtoa_r+0x8fa>
 800838a:	07f2      	lsls	r2, r6, #31
 800838c:	d505      	bpl.n	800839a <_dtoa_r+0x4aa>
 800838e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008392:	f7f8 f8fd 	bl	8000590 <__aeabi_dmul>
 8008396:	3501      	adds	r5, #1
 8008398:	2301      	movs	r3, #1
 800839a:	1076      	asrs	r6, r6, #1
 800839c:	3708      	adds	r7, #8
 800839e:	e772      	b.n	8008286 <_dtoa_r+0x396>
 80083a0:	2502      	movs	r5, #2
 80083a2:	e774      	b.n	800828e <_dtoa_r+0x39e>
 80083a4:	f8cd a020 	str.w	sl, [sp, #32]
 80083a8:	464f      	mov	r7, r9
 80083aa:	e791      	b.n	80082d0 <_dtoa_r+0x3e0>
 80083ac:	4b4d      	ldr	r3, [pc, #308]	; (80084e4 <_dtoa_r+0x5f4>)
 80083ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80083b2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80083b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d047      	beq.n	800844c <_dtoa_r+0x55c>
 80083bc:	4602      	mov	r2, r0
 80083be:	460b      	mov	r3, r1
 80083c0:	2000      	movs	r0, #0
 80083c2:	494e      	ldr	r1, [pc, #312]	; (80084fc <_dtoa_r+0x60c>)
 80083c4:	f7f8 fa0e 	bl	80007e4 <__aeabi_ddiv>
 80083c8:	462a      	mov	r2, r5
 80083ca:	4633      	mov	r3, r6
 80083cc:	f7f7 ff28 	bl	8000220 <__aeabi_dsub>
 80083d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80083d4:	465d      	mov	r5, fp
 80083d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083da:	f7f8 fb89 	bl	8000af0 <__aeabi_d2iz>
 80083de:	4606      	mov	r6, r0
 80083e0:	f7f8 f86c 	bl	80004bc <__aeabi_i2d>
 80083e4:	4602      	mov	r2, r0
 80083e6:	460b      	mov	r3, r1
 80083e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083ec:	f7f7 ff18 	bl	8000220 <__aeabi_dsub>
 80083f0:	3630      	adds	r6, #48	; 0x30
 80083f2:	f805 6b01 	strb.w	r6, [r5], #1
 80083f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80083fa:	e9cd 0100 	strd	r0, r1, [sp]
 80083fe:	f7f8 fb39 	bl	8000a74 <__aeabi_dcmplt>
 8008402:	2800      	cmp	r0, #0
 8008404:	d163      	bne.n	80084ce <_dtoa_r+0x5de>
 8008406:	e9dd 2300 	ldrd	r2, r3, [sp]
 800840a:	2000      	movs	r0, #0
 800840c:	4937      	ldr	r1, [pc, #220]	; (80084ec <_dtoa_r+0x5fc>)
 800840e:	f7f7 ff07 	bl	8000220 <__aeabi_dsub>
 8008412:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008416:	f7f8 fb2d 	bl	8000a74 <__aeabi_dcmplt>
 800841a:	2800      	cmp	r0, #0
 800841c:	f040 80b7 	bne.w	800858e <_dtoa_r+0x69e>
 8008420:	eba5 030b 	sub.w	r3, r5, fp
 8008424:	429f      	cmp	r7, r3
 8008426:	f77f af7c 	ble.w	8008322 <_dtoa_r+0x432>
 800842a:	2200      	movs	r2, #0
 800842c:	4b30      	ldr	r3, [pc, #192]	; (80084f0 <_dtoa_r+0x600>)
 800842e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008432:	f7f8 f8ad 	bl	8000590 <__aeabi_dmul>
 8008436:	2200      	movs	r2, #0
 8008438:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800843c:	4b2c      	ldr	r3, [pc, #176]	; (80084f0 <_dtoa_r+0x600>)
 800843e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008442:	f7f8 f8a5 	bl	8000590 <__aeabi_dmul>
 8008446:	e9cd 0100 	strd	r0, r1, [sp]
 800844a:	e7c4      	b.n	80083d6 <_dtoa_r+0x4e6>
 800844c:	462a      	mov	r2, r5
 800844e:	4633      	mov	r3, r6
 8008450:	f7f8 f89e 	bl	8000590 <__aeabi_dmul>
 8008454:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008458:	eb0b 0507 	add.w	r5, fp, r7
 800845c:	465e      	mov	r6, fp
 800845e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008462:	f7f8 fb45 	bl	8000af0 <__aeabi_d2iz>
 8008466:	4607      	mov	r7, r0
 8008468:	f7f8 f828 	bl	80004bc <__aeabi_i2d>
 800846c:	3730      	adds	r7, #48	; 0x30
 800846e:	4602      	mov	r2, r0
 8008470:	460b      	mov	r3, r1
 8008472:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008476:	f7f7 fed3 	bl	8000220 <__aeabi_dsub>
 800847a:	f806 7b01 	strb.w	r7, [r6], #1
 800847e:	42ae      	cmp	r6, r5
 8008480:	e9cd 0100 	strd	r0, r1, [sp]
 8008484:	f04f 0200 	mov.w	r2, #0
 8008488:	d126      	bne.n	80084d8 <_dtoa_r+0x5e8>
 800848a:	4b1c      	ldr	r3, [pc, #112]	; (80084fc <_dtoa_r+0x60c>)
 800848c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008490:	f7f7 fec8 	bl	8000224 <__adddf3>
 8008494:	4602      	mov	r2, r0
 8008496:	460b      	mov	r3, r1
 8008498:	e9dd 0100 	ldrd	r0, r1, [sp]
 800849c:	f7f8 fb08 	bl	8000ab0 <__aeabi_dcmpgt>
 80084a0:	2800      	cmp	r0, #0
 80084a2:	d174      	bne.n	800858e <_dtoa_r+0x69e>
 80084a4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80084a8:	2000      	movs	r0, #0
 80084aa:	4914      	ldr	r1, [pc, #80]	; (80084fc <_dtoa_r+0x60c>)
 80084ac:	f7f7 feb8 	bl	8000220 <__aeabi_dsub>
 80084b0:	4602      	mov	r2, r0
 80084b2:	460b      	mov	r3, r1
 80084b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084b8:	f7f8 fadc 	bl	8000a74 <__aeabi_dcmplt>
 80084bc:	2800      	cmp	r0, #0
 80084be:	f43f af30 	beq.w	8008322 <_dtoa_r+0x432>
 80084c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80084c6:	2b30      	cmp	r3, #48	; 0x30
 80084c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80084cc:	d002      	beq.n	80084d4 <_dtoa_r+0x5e4>
 80084ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 80084d2:	e04a      	b.n	800856a <_dtoa_r+0x67a>
 80084d4:	4615      	mov	r5, r2
 80084d6:	e7f4      	b.n	80084c2 <_dtoa_r+0x5d2>
 80084d8:	4b05      	ldr	r3, [pc, #20]	; (80084f0 <_dtoa_r+0x600>)
 80084da:	f7f8 f859 	bl	8000590 <__aeabi_dmul>
 80084de:	e9cd 0100 	strd	r0, r1, [sp]
 80084e2:	e7bc      	b.n	800845e <_dtoa_r+0x56e>
 80084e4:	08009830 	.word	0x08009830
 80084e8:	08009808 	.word	0x08009808
 80084ec:	3ff00000 	.word	0x3ff00000
 80084f0:	40240000 	.word	0x40240000
 80084f4:	401c0000 	.word	0x401c0000
 80084f8:	40140000 	.word	0x40140000
 80084fc:	3fe00000 	.word	0x3fe00000
 8008500:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008504:	465d      	mov	r5, fp
 8008506:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800850a:	4630      	mov	r0, r6
 800850c:	4639      	mov	r1, r7
 800850e:	f7f8 f969 	bl	80007e4 <__aeabi_ddiv>
 8008512:	f7f8 faed 	bl	8000af0 <__aeabi_d2iz>
 8008516:	4680      	mov	r8, r0
 8008518:	f7f7 ffd0 	bl	80004bc <__aeabi_i2d>
 800851c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008520:	f7f8 f836 	bl	8000590 <__aeabi_dmul>
 8008524:	4602      	mov	r2, r0
 8008526:	460b      	mov	r3, r1
 8008528:	4630      	mov	r0, r6
 800852a:	4639      	mov	r1, r7
 800852c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008530:	f7f7 fe76 	bl	8000220 <__aeabi_dsub>
 8008534:	f805 6b01 	strb.w	r6, [r5], #1
 8008538:	eba5 060b 	sub.w	r6, r5, fp
 800853c:	45b1      	cmp	r9, r6
 800853e:	4602      	mov	r2, r0
 8008540:	460b      	mov	r3, r1
 8008542:	d139      	bne.n	80085b8 <_dtoa_r+0x6c8>
 8008544:	f7f7 fe6e 	bl	8000224 <__adddf3>
 8008548:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800854c:	4606      	mov	r6, r0
 800854e:	460f      	mov	r7, r1
 8008550:	f7f8 faae 	bl	8000ab0 <__aeabi_dcmpgt>
 8008554:	b9c8      	cbnz	r0, 800858a <_dtoa_r+0x69a>
 8008556:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800855a:	4630      	mov	r0, r6
 800855c:	4639      	mov	r1, r7
 800855e:	f7f8 fa7f 	bl	8000a60 <__aeabi_dcmpeq>
 8008562:	b110      	cbz	r0, 800856a <_dtoa_r+0x67a>
 8008564:	f018 0f01 	tst.w	r8, #1
 8008568:	d10f      	bne.n	800858a <_dtoa_r+0x69a>
 800856a:	9904      	ldr	r1, [sp, #16]
 800856c:	4620      	mov	r0, r4
 800856e:	f000 fcaa 	bl	8008ec6 <_Bfree>
 8008572:	2300      	movs	r3, #0
 8008574:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008576:	702b      	strb	r3, [r5, #0]
 8008578:	f10a 0301 	add.w	r3, sl, #1
 800857c:	6013      	str	r3, [r2, #0]
 800857e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008580:	2b00      	cmp	r3, #0
 8008582:	f000 8241 	beq.w	8008a08 <_dtoa_r+0xb18>
 8008586:	601d      	str	r5, [r3, #0]
 8008588:	e23e      	b.n	8008a08 <_dtoa_r+0xb18>
 800858a:	f8cd a020 	str.w	sl, [sp, #32]
 800858e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008592:	2a39      	cmp	r2, #57	; 0x39
 8008594:	f105 33ff 	add.w	r3, r5, #4294967295
 8008598:	d108      	bne.n	80085ac <_dtoa_r+0x6bc>
 800859a:	459b      	cmp	fp, r3
 800859c:	d10a      	bne.n	80085b4 <_dtoa_r+0x6c4>
 800859e:	9b08      	ldr	r3, [sp, #32]
 80085a0:	3301      	adds	r3, #1
 80085a2:	9308      	str	r3, [sp, #32]
 80085a4:	2330      	movs	r3, #48	; 0x30
 80085a6:	f88b 3000 	strb.w	r3, [fp]
 80085aa:	465b      	mov	r3, fp
 80085ac:	781a      	ldrb	r2, [r3, #0]
 80085ae:	3201      	adds	r2, #1
 80085b0:	701a      	strb	r2, [r3, #0]
 80085b2:	e78c      	b.n	80084ce <_dtoa_r+0x5de>
 80085b4:	461d      	mov	r5, r3
 80085b6:	e7ea      	b.n	800858e <_dtoa_r+0x69e>
 80085b8:	2200      	movs	r2, #0
 80085ba:	4b9b      	ldr	r3, [pc, #620]	; (8008828 <_dtoa_r+0x938>)
 80085bc:	f7f7 ffe8 	bl	8000590 <__aeabi_dmul>
 80085c0:	2200      	movs	r2, #0
 80085c2:	2300      	movs	r3, #0
 80085c4:	4606      	mov	r6, r0
 80085c6:	460f      	mov	r7, r1
 80085c8:	f7f8 fa4a 	bl	8000a60 <__aeabi_dcmpeq>
 80085cc:	2800      	cmp	r0, #0
 80085ce:	d09a      	beq.n	8008506 <_dtoa_r+0x616>
 80085d0:	e7cb      	b.n	800856a <_dtoa_r+0x67a>
 80085d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085d4:	2a00      	cmp	r2, #0
 80085d6:	f000 808b 	beq.w	80086f0 <_dtoa_r+0x800>
 80085da:	9a06      	ldr	r2, [sp, #24]
 80085dc:	2a01      	cmp	r2, #1
 80085de:	dc6e      	bgt.n	80086be <_dtoa_r+0x7ce>
 80085e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80085e2:	2a00      	cmp	r2, #0
 80085e4:	d067      	beq.n	80086b6 <_dtoa_r+0x7c6>
 80085e6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80085ea:	9f07      	ldr	r7, [sp, #28]
 80085ec:	9d05      	ldr	r5, [sp, #20]
 80085ee:	9a05      	ldr	r2, [sp, #20]
 80085f0:	2101      	movs	r1, #1
 80085f2:	441a      	add	r2, r3
 80085f4:	4620      	mov	r0, r4
 80085f6:	9205      	str	r2, [sp, #20]
 80085f8:	4498      	add	r8, r3
 80085fa:	f000 fd04 	bl	8009006 <__i2b>
 80085fe:	4606      	mov	r6, r0
 8008600:	2d00      	cmp	r5, #0
 8008602:	dd0c      	ble.n	800861e <_dtoa_r+0x72e>
 8008604:	f1b8 0f00 	cmp.w	r8, #0
 8008608:	dd09      	ble.n	800861e <_dtoa_r+0x72e>
 800860a:	4545      	cmp	r5, r8
 800860c:	9a05      	ldr	r2, [sp, #20]
 800860e:	462b      	mov	r3, r5
 8008610:	bfa8      	it	ge
 8008612:	4643      	movge	r3, r8
 8008614:	1ad2      	subs	r2, r2, r3
 8008616:	9205      	str	r2, [sp, #20]
 8008618:	1aed      	subs	r5, r5, r3
 800861a:	eba8 0803 	sub.w	r8, r8, r3
 800861e:	9b07      	ldr	r3, [sp, #28]
 8008620:	b1eb      	cbz	r3, 800865e <_dtoa_r+0x76e>
 8008622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008624:	2b00      	cmp	r3, #0
 8008626:	d067      	beq.n	80086f8 <_dtoa_r+0x808>
 8008628:	b18f      	cbz	r7, 800864e <_dtoa_r+0x75e>
 800862a:	4631      	mov	r1, r6
 800862c:	463a      	mov	r2, r7
 800862e:	4620      	mov	r0, r4
 8008630:	f000 fd88 	bl	8009144 <__pow5mult>
 8008634:	9a04      	ldr	r2, [sp, #16]
 8008636:	4601      	mov	r1, r0
 8008638:	4606      	mov	r6, r0
 800863a:	4620      	mov	r0, r4
 800863c:	f000 fcec 	bl	8009018 <__multiply>
 8008640:	9904      	ldr	r1, [sp, #16]
 8008642:	9008      	str	r0, [sp, #32]
 8008644:	4620      	mov	r0, r4
 8008646:	f000 fc3e 	bl	8008ec6 <_Bfree>
 800864a:	9b08      	ldr	r3, [sp, #32]
 800864c:	9304      	str	r3, [sp, #16]
 800864e:	9b07      	ldr	r3, [sp, #28]
 8008650:	1bda      	subs	r2, r3, r7
 8008652:	d004      	beq.n	800865e <_dtoa_r+0x76e>
 8008654:	9904      	ldr	r1, [sp, #16]
 8008656:	4620      	mov	r0, r4
 8008658:	f000 fd74 	bl	8009144 <__pow5mult>
 800865c:	9004      	str	r0, [sp, #16]
 800865e:	2101      	movs	r1, #1
 8008660:	4620      	mov	r0, r4
 8008662:	f000 fcd0 	bl	8009006 <__i2b>
 8008666:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008668:	4607      	mov	r7, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	f000 81d0 	beq.w	8008a10 <_dtoa_r+0xb20>
 8008670:	461a      	mov	r2, r3
 8008672:	4601      	mov	r1, r0
 8008674:	4620      	mov	r0, r4
 8008676:	f000 fd65 	bl	8009144 <__pow5mult>
 800867a:	9b06      	ldr	r3, [sp, #24]
 800867c:	2b01      	cmp	r3, #1
 800867e:	4607      	mov	r7, r0
 8008680:	dc40      	bgt.n	8008704 <_dtoa_r+0x814>
 8008682:	9b00      	ldr	r3, [sp, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d139      	bne.n	80086fc <_dtoa_r+0x80c>
 8008688:	9b01      	ldr	r3, [sp, #4]
 800868a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800868e:	2b00      	cmp	r3, #0
 8008690:	d136      	bne.n	8008700 <_dtoa_r+0x810>
 8008692:	9b01      	ldr	r3, [sp, #4]
 8008694:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008698:	0d1b      	lsrs	r3, r3, #20
 800869a:	051b      	lsls	r3, r3, #20
 800869c:	b12b      	cbz	r3, 80086aa <_dtoa_r+0x7ba>
 800869e:	9b05      	ldr	r3, [sp, #20]
 80086a0:	3301      	adds	r3, #1
 80086a2:	9305      	str	r3, [sp, #20]
 80086a4:	f108 0801 	add.w	r8, r8, #1
 80086a8:	2301      	movs	r3, #1
 80086aa:	9307      	str	r3, [sp, #28]
 80086ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d12a      	bne.n	8008708 <_dtoa_r+0x818>
 80086b2:	2001      	movs	r0, #1
 80086b4:	e030      	b.n	8008718 <_dtoa_r+0x828>
 80086b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80086b8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80086bc:	e795      	b.n	80085ea <_dtoa_r+0x6fa>
 80086be:	9b07      	ldr	r3, [sp, #28]
 80086c0:	f109 37ff 	add.w	r7, r9, #4294967295
 80086c4:	42bb      	cmp	r3, r7
 80086c6:	bfbf      	itttt	lt
 80086c8:	9b07      	ldrlt	r3, [sp, #28]
 80086ca:	9707      	strlt	r7, [sp, #28]
 80086cc:	1afa      	sublt	r2, r7, r3
 80086ce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80086d0:	bfbb      	ittet	lt
 80086d2:	189b      	addlt	r3, r3, r2
 80086d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80086d6:	1bdf      	subge	r7, r3, r7
 80086d8:	2700      	movlt	r7, #0
 80086da:	f1b9 0f00 	cmp.w	r9, #0
 80086de:	bfb5      	itete	lt
 80086e0:	9b05      	ldrlt	r3, [sp, #20]
 80086e2:	9d05      	ldrge	r5, [sp, #20]
 80086e4:	eba3 0509 	sublt.w	r5, r3, r9
 80086e8:	464b      	movge	r3, r9
 80086ea:	bfb8      	it	lt
 80086ec:	2300      	movlt	r3, #0
 80086ee:	e77e      	b.n	80085ee <_dtoa_r+0x6fe>
 80086f0:	9f07      	ldr	r7, [sp, #28]
 80086f2:	9d05      	ldr	r5, [sp, #20]
 80086f4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80086f6:	e783      	b.n	8008600 <_dtoa_r+0x710>
 80086f8:	9a07      	ldr	r2, [sp, #28]
 80086fa:	e7ab      	b.n	8008654 <_dtoa_r+0x764>
 80086fc:	2300      	movs	r3, #0
 80086fe:	e7d4      	b.n	80086aa <_dtoa_r+0x7ba>
 8008700:	9b00      	ldr	r3, [sp, #0]
 8008702:	e7d2      	b.n	80086aa <_dtoa_r+0x7ba>
 8008704:	2300      	movs	r3, #0
 8008706:	9307      	str	r3, [sp, #28]
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800870e:	6918      	ldr	r0, [r3, #16]
 8008710:	f000 fc2b 	bl	8008f6a <__hi0bits>
 8008714:	f1c0 0020 	rsb	r0, r0, #32
 8008718:	4440      	add	r0, r8
 800871a:	f010 001f 	ands.w	r0, r0, #31
 800871e:	d047      	beq.n	80087b0 <_dtoa_r+0x8c0>
 8008720:	f1c0 0320 	rsb	r3, r0, #32
 8008724:	2b04      	cmp	r3, #4
 8008726:	dd3b      	ble.n	80087a0 <_dtoa_r+0x8b0>
 8008728:	9b05      	ldr	r3, [sp, #20]
 800872a:	f1c0 001c 	rsb	r0, r0, #28
 800872e:	4403      	add	r3, r0
 8008730:	9305      	str	r3, [sp, #20]
 8008732:	4405      	add	r5, r0
 8008734:	4480      	add	r8, r0
 8008736:	9b05      	ldr	r3, [sp, #20]
 8008738:	2b00      	cmp	r3, #0
 800873a:	dd05      	ble.n	8008748 <_dtoa_r+0x858>
 800873c:	461a      	mov	r2, r3
 800873e:	9904      	ldr	r1, [sp, #16]
 8008740:	4620      	mov	r0, r4
 8008742:	f000 fd4d 	bl	80091e0 <__lshift>
 8008746:	9004      	str	r0, [sp, #16]
 8008748:	f1b8 0f00 	cmp.w	r8, #0
 800874c:	dd05      	ble.n	800875a <_dtoa_r+0x86a>
 800874e:	4639      	mov	r1, r7
 8008750:	4642      	mov	r2, r8
 8008752:	4620      	mov	r0, r4
 8008754:	f000 fd44 	bl	80091e0 <__lshift>
 8008758:	4607      	mov	r7, r0
 800875a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800875c:	b353      	cbz	r3, 80087b4 <_dtoa_r+0x8c4>
 800875e:	4639      	mov	r1, r7
 8008760:	9804      	ldr	r0, [sp, #16]
 8008762:	f000 fd91 	bl	8009288 <__mcmp>
 8008766:	2800      	cmp	r0, #0
 8008768:	da24      	bge.n	80087b4 <_dtoa_r+0x8c4>
 800876a:	2300      	movs	r3, #0
 800876c:	220a      	movs	r2, #10
 800876e:	9904      	ldr	r1, [sp, #16]
 8008770:	4620      	mov	r0, r4
 8008772:	f000 fbbf 	bl	8008ef4 <__multadd>
 8008776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008778:	9004      	str	r0, [sp, #16]
 800877a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800877e:	2b00      	cmp	r3, #0
 8008780:	f000 814d 	beq.w	8008a1e <_dtoa_r+0xb2e>
 8008784:	2300      	movs	r3, #0
 8008786:	4631      	mov	r1, r6
 8008788:	220a      	movs	r2, #10
 800878a:	4620      	mov	r0, r4
 800878c:	f000 fbb2 	bl	8008ef4 <__multadd>
 8008790:	9b02      	ldr	r3, [sp, #8]
 8008792:	2b00      	cmp	r3, #0
 8008794:	4606      	mov	r6, r0
 8008796:	dc4f      	bgt.n	8008838 <_dtoa_r+0x948>
 8008798:	9b06      	ldr	r3, [sp, #24]
 800879a:	2b02      	cmp	r3, #2
 800879c:	dd4c      	ble.n	8008838 <_dtoa_r+0x948>
 800879e:	e011      	b.n	80087c4 <_dtoa_r+0x8d4>
 80087a0:	d0c9      	beq.n	8008736 <_dtoa_r+0x846>
 80087a2:	9a05      	ldr	r2, [sp, #20]
 80087a4:	331c      	adds	r3, #28
 80087a6:	441a      	add	r2, r3
 80087a8:	9205      	str	r2, [sp, #20]
 80087aa:	441d      	add	r5, r3
 80087ac:	4498      	add	r8, r3
 80087ae:	e7c2      	b.n	8008736 <_dtoa_r+0x846>
 80087b0:	4603      	mov	r3, r0
 80087b2:	e7f6      	b.n	80087a2 <_dtoa_r+0x8b2>
 80087b4:	f1b9 0f00 	cmp.w	r9, #0
 80087b8:	dc38      	bgt.n	800882c <_dtoa_r+0x93c>
 80087ba:	9b06      	ldr	r3, [sp, #24]
 80087bc:	2b02      	cmp	r3, #2
 80087be:	dd35      	ble.n	800882c <_dtoa_r+0x93c>
 80087c0:	f8cd 9008 	str.w	r9, [sp, #8]
 80087c4:	9b02      	ldr	r3, [sp, #8]
 80087c6:	b963      	cbnz	r3, 80087e2 <_dtoa_r+0x8f2>
 80087c8:	4639      	mov	r1, r7
 80087ca:	2205      	movs	r2, #5
 80087cc:	4620      	mov	r0, r4
 80087ce:	f000 fb91 	bl	8008ef4 <__multadd>
 80087d2:	4601      	mov	r1, r0
 80087d4:	4607      	mov	r7, r0
 80087d6:	9804      	ldr	r0, [sp, #16]
 80087d8:	f000 fd56 	bl	8009288 <__mcmp>
 80087dc:	2800      	cmp	r0, #0
 80087de:	f73f adcc 	bgt.w	800837a <_dtoa_r+0x48a>
 80087e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087e4:	465d      	mov	r5, fp
 80087e6:	ea6f 0a03 	mvn.w	sl, r3
 80087ea:	f04f 0900 	mov.w	r9, #0
 80087ee:	4639      	mov	r1, r7
 80087f0:	4620      	mov	r0, r4
 80087f2:	f000 fb68 	bl	8008ec6 <_Bfree>
 80087f6:	2e00      	cmp	r6, #0
 80087f8:	f43f aeb7 	beq.w	800856a <_dtoa_r+0x67a>
 80087fc:	f1b9 0f00 	cmp.w	r9, #0
 8008800:	d005      	beq.n	800880e <_dtoa_r+0x91e>
 8008802:	45b1      	cmp	r9, r6
 8008804:	d003      	beq.n	800880e <_dtoa_r+0x91e>
 8008806:	4649      	mov	r1, r9
 8008808:	4620      	mov	r0, r4
 800880a:	f000 fb5c 	bl	8008ec6 <_Bfree>
 800880e:	4631      	mov	r1, r6
 8008810:	4620      	mov	r0, r4
 8008812:	f000 fb58 	bl	8008ec6 <_Bfree>
 8008816:	e6a8      	b.n	800856a <_dtoa_r+0x67a>
 8008818:	2700      	movs	r7, #0
 800881a:	463e      	mov	r6, r7
 800881c:	e7e1      	b.n	80087e2 <_dtoa_r+0x8f2>
 800881e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008822:	463e      	mov	r6, r7
 8008824:	e5a9      	b.n	800837a <_dtoa_r+0x48a>
 8008826:	bf00      	nop
 8008828:	40240000 	.word	0x40240000
 800882c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800882e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008832:	2b00      	cmp	r3, #0
 8008834:	f000 80fa 	beq.w	8008a2c <_dtoa_r+0xb3c>
 8008838:	2d00      	cmp	r5, #0
 800883a:	dd05      	ble.n	8008848 <_dtoa_r+0x958>
 800883c:	4631      	mov	r1, r6
 800883e:	462a      	mov	r2, r5
 8008840:	4620      	mov	r0, r4
 8008842:	f000 fccd 	bl	80091e0 <__lshift>
 8008846:	4606      	mov	r6, r0
 8008848:	9b07      	ldr	r3, [sp, #28]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d04c      	beq.n	80088e8 <_dtoa_r+0x9f8>
 800884e:	6871      	ldr	r1, [r6, #4]
 8008850:	4620      	mov	r0, r4
 8008852:	f000 fb04 	bl	8008e5e <_Balloc>
 8008856:	6932      	ldr	r2, [r6, #16]
 8008858:	3202      	adds	r2, #2
 800885a:	4605      	mov	r5, r0
 800885c:	0092      	lsls	r2, r2, #2
 800885e:	f106 010c 	add.w	r1, r6, #12
 8008862:	300c      	adds	r0, #12
 8008864:	f000 faf0 	bl	8008e48 <memcpy>
 8008868:	2201      	movs	r2, #1
 800886a:	4629      	mov	r1, r5
 800886c:	4620      	mov	r0, r4
 800886e:	f000 fcb7 	bl	80091e0 <__lshift>
 8008872:	9b00      	ldr	r3, [sp, #0]
 8008874:	f8cd b014 	str.w	fp, [sp, #20]
 8008878:	f003 0301 	and.w	r3, r3, #1
 800887c:	46b1      	mov	r9, r6
 800887e:	9307      	str	r3, [sp, #28]
 8008880:	4606      	mov	r6, r0
 8008882:	4639      	mov	r1, r7
 8008884:	9804      	ldr	r0, [sp, #16]
 8008886:	f7ff faa5 	bl	8007dd4 <quorem>
 800888a:	4649      	mov	r1, r9
 800888c:	4605      	mov	r5, r0
 800888e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008892:	9804      	ldr	r0, [sp, #16]
 8008894:	f000 fcf8 	bl	8009288 <__mcmp>
 8008898:	4632      	mov	r2, r6
 800889a:	9000      	str	r0, [sp, #0]
 800889c:	4639      	mov	r1, r7
 800889e:	4620      	mov	r0, r4
 80088a0:	f000 fd0c 	bl	80092bc <__mdiff>
 80088a4:	68c3      	ldr	r3, [r0, #12]
 80088a6:	4602      	mov	r2, r0
 80088a8:	bb03      	cbnz	r3, 80088ec <_dtoa_r+0x9fc>
 80088aa:	4601      	mov	r1, r0
 80088ac:	9008      	str	r0, [sp, #32]
 80088ae:	9804      	ldr	r0, [sp, #16]
 80088b0:	f000 fcea 	bl	8009288 <__mcmp>
 80088b4:	9a08      	ldr	r2, [sp, #32]
 80088b6:	4603      	mov	r3, r0
 80088b8:	4611      	mov	r1, r2
 80088ba:	4620      	mov	r0, r4
 80088bc:	9308      	str	r3, [sp, #32]
 80088be:	f000 fb02 	bl	8008ec6 <_Bfree>
 80088c2:	9b08      	ldr	r3, [sp, #32]
 80088c4:	b9a3      	cbnz	r3, 80088f0 <_dtoa_r+0xa00>
 80088c6:	9a06      	ldr	r2, [sp, #24]
 80088c8:	b992      	cbnz	r2, 80088f0 <_dtoa_r+0xa00>
 80088ca:	9a07      	ldr	r2, [sp, #28]
 80088cc:	b982      	cbnz	r2, 80088f0 <_dtoa_r+0xa00>
 80088ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80088d2:	d029      	beq.n	8008928 <_dtoa_r+0xa38>
 80088d4:	9b00      	ldr	r3, [sp, #0]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	dd01      	ble.n	80088de <_dtoa_r+0x9ee>
 80088da:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80088de:	9b05      	ldr	r3, [sp, #20]
 80088e0:	1c5d      	adds	r5, r3, #1
 80088e2:	f883 8000 	strb.w	r8, [r3]
 80088e6:	e782      	b.n	80087ee <_dtoa_r+0x8fe>
 80088e8:	4630      	mov	r0, r6
 80088ea:	e7c2      	b.n	8008872 <_dtoa_r+0x982>
 80088ec:	2301      	movs	r3, #1
 80088ee:	e7e3      	b.n	80088b8 <_dtoa_r+0x9c8>
 80088f0:	9a00      	ldr	r2, [sp, #0]
 80088f2:	2a00      	cmp	r2, #0
 80088f4:	db04      	blt.n	8008900 <_dtoa_r+0xa10>
 80088f6:	d125      	bne.n	8008944 <_dtoa_r+0xa54>
 80088f8:	9a06      	ldr	r2, [sp, #24]
 80088fa:	bb1a      	cbnz	r2, 8008944 <_dtoa_r+0xa54>
 80088fc:	9a07      	ldr	r2, [sp, #28]
 80088fe:	bb0a      	cbnz	r2, 8008944 <_dtoa_r+0xa54>
 8008900:	2b00      	cmp	r3, #0
 8008902:	ddec      	ble.n	80088de <_dtoa_r+0x9ee>
 8008904:	2201      	movs	r2, #1
 8008906:	9904      	ldr	r1, [sp, #16]
 8008908:	4620      	mov	r0, r4
 800890a:	f000 fc69 	bl	80091e0 <__lshift>
 800890e:	4639      	mov	r1, r7
 8008910:	9004      	str	r0, [sp, #16]
 8008912:	f000 fcb9 	bl	8009288 <__mcmp>
 8008916:	2800      	cmp	r0, #0
 8008918:	dc03      	bgt.n	8008922 <_dtoa_r+0xa32>
 800891a:	d1e0      	bne.n	80088de <_dtoa_r+0x9ee>
 800891c:	f018 0f01 	tst.w	r8, #1
 8008920:	d0dd      	beq.n	80088de <_dtoa_r+0x9ee>
 8008922:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008926:	d1d8      	bne.n	80088da <_dtoa_r+0x9ea>
 8008928:	9b05      	ldr	r3, [sp, #20]
 800892a:	9a05      	ldr	r2, [sp, #20]
 800892c:	1c5d      	adds	r5, r3, #1
 800892e:	2339      	movs	r3, #57	; 0x39
 8008930:	7013      	strb	r3, [r2, #0]
 8008932:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008936:	2b39      	cmp	r3, #57	; 0x39
 8008938:	f105 32ff 	add.w	r2, r5, #4294967295
 800893c:	d04f      	beq.n	80089de <_dtoa_r+0xaee>
 800893e:	3301      	adds	r3, #1
 8008940:	7013      	strb	r3, [r2, #0]
 8008942:	e754      	b.n	80087ee <_dtoa_r+0x8fe>
 8008944:	9a05      	ldr	r2, [sp, #20]
 8008946:	2b00      	cmp	r3, #0
 8008948:	f102 0501 	add.w	r5, r2, #1
 800894c:	dd06      	ble.n	800895c <_dtoa_r+0xa6c>
 800894e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008952:	d0e9      	beq.n	8008928 <_dtoa_r+0xa38>
 8008954:	f108 0801 	add.w	r8, r8, #1
 8008958:	9b05      	ldr	r3, [sp, #20]
 800895a:	e7c2      	b.n	80088e2 <_dtoa_r+0x9f2>
 800895c:	9a02      	ldr	r2, [sp, #8]
 800895e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008962:	eba5 030b 	sub.w	r3, r5, fp
 8008966:	4293      	cmp	r3, r2
 8008968:	d021      	beq.n	80089ae <_dtoa_r+0xabe>
 800896a:	2300      	movs	r3, #0
 800896c:	220a      	movs	r2, #10
 800896e:	9904      	ldr	r1, [sp, #16]
 8008970:	4620      	mov	r0, r4
 8008972:	f000 fabf 	bl	8008ef4 <__multadd>
 8008976:	45b1      	cmp	r9, r6
 8008978:	9004      	str	r0, [sp, #16]
 800897a:	f04f 0300 	mov.w	r3, #0
 800897e:	f04f 020a 	mov.w	r2, #10
 8008982:	4649      	mov	r1, r9
 8008984:	4620      	mov	r0, r4
 8008986:	d105      	bne.n	8008994 <_dtoa_r+0xaa4>
 8008988:	f000 fab4 	bl	8008ef4 <__multadd>
 800898c:	4681      	mov	r9, r0
 800898e:	4606      	mov	r6, r0
 8008990:	9505      	str	r5, [sp, #20]
 8008992:	e776      	b.n	8008882 <_dtoa_r+0x992>
 8008994:	f000 faae 	bl	8008ef4 <__multadd>
 8008998:	4631      	mov	r1, r6
 800899a:	4681      	mov	r9, r0
 800899c:	2300      	movs	r3, #0
 800899e:	220a      	movs	r2, #10
 80089a0:	4620      	mov	r0, r4
 80089a2:	f000 faa7 	bl	8008ef4 <__multadd>
 80089a6:	4606      	mov	r6, r0
 80089a8:	e7f2      	b.n	8008990 <_dtoa_r+0xaa0>
 80089aa:	f04f 0900 	mov.w	r9, #0
 80089ae:	2201      	movs	r2, #1
 80089b0:	9904      	ldr	r1, [sp, #16]
 80089b2:	4620      	mov	r0, r4
 80089b4:	f000 fc14 	bl	80091e0 <__lshift>
 80089b8:	4639      	mov	r1, r7
 80089ba:	9004      	str	r0, [sp, #16]
 80089bc:	f000 fc64 	bl	8009288 <__mcmp>
 80089c0:	2800      	cmp	r0, #0
 80089c2:	dcb6      	bgt.n	8008932 <_dtoa_r+0xa42>
 80089c4:	d102      	bne.n	80089cc <_dtoa_r+0xadc>
 80089c6:	f018 0f01 	tst.w	r8, #1
 80089ca:	d1b2      	bne.n	8008932 <_dtoa_r+0xa42>
 80089cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80089d0:	2b30      	cmp	r3, #48	; 0x30
 80089d2:	f105 32ff 	add.w	r2, r5, #4294967295
 80089d6:	f47f af0a 	bne.w	80087ee <_dtoa_r+0x8fe>
 80089da:	4615      	mov	r5, r2
 80089dc:	e7f6      	b.n	80089cc <_dtoa_r+0xadc>
 80089de:	4593      	cmp	fp, r2
 80089e0:	d105      	bne.n	80089ee <_dtoa_r+0xafe>
 80089e2:	2331      	movs	r3, #49	; 0x31
 80089e4:	f10a 0a01 	add.w	sl, sl, #1
 80089e8:	f88b 3000 	strb.w	r3, [fp]
 80089ec:	e6ff      	b.n	80087ee <_dtoa_r+0x8fe>
 80089ee:	4615      	mov	r5, r2
 80089f0:	e79f      	b.n	8008932 <_dtoa_r+0xa42>
 80089f2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008a58 <_dtoa_r+0xb68>
 80089f6:	e007      	b.n	8008a08 <_dtoa_r+0xb18>
 80089f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089fa:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008a5c <_dtoa_r+0xb6c>
 80089fe:	b11b      	cbz	r3, 8008a08 <_dtoa_r+0xb18>
 8008a00:	f10b 0308 	add.w	r3, fp, #8
 8008a04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a06:	6013      	str	r3, [r2, #0]
 8008a08:	4658      	mov	r0, fp
 8008a0a:	b017      	add	sp, #92	; 0x5c
 8008a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a10:	9b06      	ldr	r3, [sp, #24]
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	f77f ae35 	ble.w	8008682 <_dtoa_r+0x792>
 8008a18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a1a:	9307      	str	r3, [sp, #28]
 8008a1c:	e649      	b.n	80086b2 <_dtoa_r+0x7c2>
 8008a1e:	9b02      	ldr	r3, [sp, #8]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	dc03      	bgt.n	8008a2c <_dtoa_r+0xb3c>
 8008a24:	9b06      	ldr	r3, [sp, #24]
 8008a26:	2b02      	cmp	r3, #2
 8008a28:	f73f aecc 	bgt.w	80087c4 <_dtoa_r+0x8d4>
 8008a2c:	465d      	mov	r5, fp
 8008a2e:	4639      	mov	r1, r7
 8008a30:	9804      	ldr	r0, [sp, #16]
 8008a32:	f7ff f9cf 	bl	8007dd4 <quorem>
 8008a36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008a3a:	f805 8b01 	strb.w	r8, [r5], #1
 8008a3e:	9a02      	ldr	r2, [sp, #8]
 8008a40:	eba5 030b 	sub.w	r3, r5, fp
 8008a44:	429a      	cmp	r2, r3
 8008a46:	ddb0      	ble.n	80089aa <_dtoa_r+0xaba>
 8008a48:	2300      	movs	r3, #0
 8008a4a:	220a      	movs	r2, #10
 8008a4c:	9904      	ldr	r1, [sp, #16]
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f000 fa50 	bl	8008ef4 <__multadd>
 8008a54:	9004      	str	r0, [sp, #16]
 8008a56:	e7ea      	b.n	8008a2e <_dtoa_r+0xb3e>
 8008a58:	08009798 	.word	0x08009798
 8008a5c:	0800979a 	.word	0x0800979a

08008a60 <__sflush_r>:
 8008a60:	898a      	ldrh	r2, [r1, #12]
 8008a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a66:	4605      	mov	r5, r0
 8008a68:	0710      	lsls	r0, r2, #28
 8008a6a:	460c      	mov	r4, r1
 8008a6c:	d458      	bmi.n	8008b20 <__sflush_r+0xc0>
 8008a6e:	684b      	ldr	r3, [r1, #4]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	dc05      	bgt.n	8008a80 <__sflush_r+0x20>
 8008a74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	dc02      	bgt.n	8008a80 <__sflush_r+0x20>
 8008a7a:	2000      	movs	r0, #0
 8008a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a82:	2e00      	cmp	r6, #0
 8008a84:	d0f9      	beq.n	8008a7a <__sflush_r+0x1a>
 8008a86:	2300      	movs	r3, #0
 8008a88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a8c:	682f      	ldr	r7, [r5, #0]
 8008a8e:	6a21      	ldr	r1, [r4, #32]
 8008a90:	602b      	str	r3, [r5, #0]
 8008a92:	d032      	beq.n	8008afa <__sflush_r+0x9a>
 8008a94:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a96:	89a3      	ldrh	r3, [r4, #12]
 8008a98:	075a      	lsls	r2, r3, #29
 8008a9a:	d505      	bpl.n	8008aa8 <__sflush_r+0x48>
 8008a9c:	6863      	ldr	r3, [r4, #4]
 8008a9e:	1ac0      	subs	r0, r0, r3
 8008aa0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008aa2:	b10b      	cbz	r3, 8008aa8 <__sflush_r+0x48>
 8008aa4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008aa6:	1ac0      	subs	r0, r0, r3
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	4602      	mov	r2, r0
 8008aac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008aae:	6a21      	ldr	r1, [r4, #32]
 8008ab0:	4628      	mov	r0, r5
 8008ab2:	47b0      	blx	r6
 8008ab4:	1c43      	adds	r3, r0, #1
 8008ab6:	89a3      	ldrh	r3, [r4, #12]
 8008ab8:	d106      	bne.n	8008ac8 <__sflush_r+0x68>
 8008aba:	6829      	ldr	r1, [r5, #0]
 8008abc:	291d      	cmp	r1, #29
 8008abe:	d848      	bhi.n	8008b52 <__sflush_r+0xf2>
 8008ac0:	4a29      	ldr	r2, [pc, #164]	; (8008b68 <__sflush_r+0x108>)
 8008ac2:	40ca      	lsrs	r2, r1
 8008ac4:	07d6      	lsls	r6, r2, #31
 8008ac6:	d544      	bpl.n	8008b52 <__sflush_r+0xf2>
 8008ac8:	2200      	movs	r2, #0
 8008aca:	6062      	str	r2, [r4, #4]
 8008acc:	04d9      	lsls	r1, r3, #19
 8008ace:	6922      	ldr	r2, [r4, #16]
 8008ad0:	6022      	str	r2, [r4, #0]
 8008ad2:	d504      	bpl.n	8008ade <__sflush_r+0x7e>
 8008ad4:	1c42      	adds	r2, r0, #1
 8008ad6:	d101      	bne.n	8008adc <__sflush_r+0x7c>
 8008ad8:	682b      	ldr	r3, [r5, #0]
 8008ada:	b903      	cbnz	r3, 8008ade <__sflush_r+0x7e>
 8008adc:	6560      	str	r0, [r4, #84]	; 0x54
 8008ade:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ae0:	602f      	str	r7, [r5, #0]
 8008ae2:	2900      	cmp	r1, #0
 8008ae4:	d0c9      	beq.n	8008a7a <__sflush_r+0x1a>
 8008ae6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008aea:	4299      	cmp	r1, r3
 8008aec:	d002      	beq.n	8008af4 <__sflush_r+0x94>
 8008aee:	4628      	mov	r0, r5
 8008af0:	f000 fc9e 	bl	8009430 <_free_r>
 8008af4:	2000      	movs	r0, #0
 8008af6:	6360      	str	r0, [r4, #52]	; 0x34
 8008af8:	e7c0      	b.n	8008a7c <__sflush_r+0x1c>
 8008afa:	2301      	movs	r3, #1
 8008afc:	4628      	mov	r0, r5
 8008afe:	47b0      	blx	r6
 8008b00:	1c41      	adds	r1, r0, #1
 8008b02:	d1c8      	bne.n	8008a96 <__sflush_r+0x36>
 8008b04:	682b      	ldr	r3, [r5, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d0c5      	beq.n	8008a96 <__sflush_r+0x36>
 8008b0a:	2b1d      	cmp	r3, #29
 8008b0c:	d001      	beq.n	8008b12 <__sflush_r+0xb2>
 8008b0e:	2b16      	cmp	r3, #22
 8008b10:	d101      	bne.n	8008b16 <__sflush_r+0xb6>
 8008b12:	602f      	str	r7, [r5, #0]
 8008b14:	e7b1      	b.n	8008a7a <__sflush_r+0x1a>
 8008b16:	89a3      	ldrh	r3, [r4, #12]
 8008b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b1c:	81a3      	strh	r3, [r4, #12]
 8008b1e:	e7ad      	b.n	8008a7c <__sflush_r+0x1c>
 8008b20:	690f      	ldr	r7, [r1, #16]
 8008b22:	2f00      	cmp	r7, #0
 8008b24:	d0a9      	beq.n	8008a7a <__sflush_r+0x1a>
 8008b26:	0793      	lsls	r3, r2, #30
 8008b28:	680e      	ldr	r6, [r1, #0]
 8008b2a:	bf08      	it	eq
 8008b2c:	694b      	ldreq	r3, [r1, #20]
 8008b2e:	600f      	str	r7, [r1, #0]
 8008b30:	bf18      	it	ne
 8008b32:	2300      	movne	r3, #0
 8008b34:	eba6 0807 	sub.w	r8, r6, r7
 8008b38:	608b      	str	r3, [r1, #8]
 8008b3a:	f1b8 0f00 	cmp.w	r8, #0
 8008b3e:	dd9c      	ble.n	8008a7a <__sflush_r+0x1a>
 8008b40:	4643      	mov	r3, r8
 8008b42:	463a      	mov	r2, r7
 8008b44:	6a21      	ldr	r1, [r4, #32]
 8008b46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b48:	4628      	mov	r0, r5
 8008b4a:	47b0      	blx	r6
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	dc06      	bgt.n	8008b5e <__sflush_r+0xfe>
 8008b50:	89a3      	ldrh	r3, [r4, #12]
 8008b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b56:	81a3      	strh	r3, [r4, #12]
 8008b58:	f04f 30ff 	mov.w	r0, #4294967295
 8008b5c:	e78e      	b.n	8008a7c <__sflush_r+0x1c>
 8008b5e:	4407      	add	r7, r0
 8008b60:	eba8 0800 	sub.w	r8, r8, r0
 8008b64:	e7e9      	b.n	8008b3a <__sflush_r+0xda>
 8008b66:	bf00      	nop
 8008b68:	20400001 	.word	0x20400001

08008b6c <_fflush_r>:
 8008b6c:	b538      	push	{r3, r4, r5, lr}
 8008b6e:	690b      	ldr	r3, [r1, #16]
 8008b70:	4605      	mov	r5, r0
 8008b72:	460c      	mov	r4, r1
 8008b74:	b1db      	cbz	r3, 8008bae <_fflush_r+0x42>
 8008b76:	b118      	cbz	r0, 8008b80 <_fflush_r+0x14>
 8008b78:	6983      	ldr	r3, [r0, #24]
 8008b7a:	b90b      	cbnz	r3, 8008b80 <_fflush_r+0x14>
 8008b7c:	f000 f860 	bl	8008c40 <__sinit>
 8008b80:	4b0c      	ldr	r3, [pc, #48]	; (8008bb4 <_fflush_r+0x48>)
 8008b82:	429c      	cmp	r4, r3
 8008b84:	d109      	bne.n	8008b9a <_fflush_r+0x2e>
 8008b86:	686c      	ldr	r4, [r5, #4]
 8008b88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b8c:	b17b      	cbz	r3, 8008bae <_fflush_r+0x42>
 8008b8e:	4621      	mov	r1, r4
 8008b90:	4628      	mov	r0, r5
 8008b92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b96:	f7ff bf63 	b.w	8008a60 <__sflush_r>
 8008b9a:	4b07      	ldr	r3, [pc, #28]	; (8008bb8 <_fflush_r+0x4c>)
 8008b9c:	429c      	cmp	r4, r3
 8008b9e:	d101      	bne.n	8008ba4 <_fflush_r+0x38>
 8008ba0:	68ac      	ldr	r4, [r5, #8]
 8008ba2:	e7f1      	b.n	8008b88 <_fflush_r+0x1c>
 8008ba4:	4b05      	ldr	r3, [pc, #20]	; (8008bbc <_fflush_r+0x50>)
 8008ba6:	429c      	cmp	r4, r3
 8008ba8:	bf08      	it	eq
 8008baa:	68ec      	ldreq	r4, [r5, #12]
 8008bac:	e7ec      	b.n	8008b88 <_fflush_r+0x1c>
 8008bae:	2000      	movs	r0, #0
 8008bb0:	bd38      	pop	{r3, r4, r5, pc}
 8008bb2:	bf00      	nop
 8008bb4:	080097c8 	.word	0x080097c8
 8008bb8:	080097e8 	.word	0x080097e8
 8008bbc:	080097a8 	.word	0x080097a8

08008bc0 <std>:
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	b510      	push	{r4, lr}
 8008bc4:	4604      	mov	r4, r0
 8008bc6:	e9c0 3300 	strd	r3, r3, [r0]
 8008bca:	6083      	str	r3, [r0, #8]
 8008bcc:	8181      	strh	r1, [r0, #12]
 8008bce:	6643      	str	r3, [r0, #100]	; 0x64
 8008bd0:	81c2      	strh	r2, [r0, #14]
 8008bd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008bd6:	6183      	str	r3, [r0, #24]
 8008bd8:	4619      	mov	r1, r3
 8008bda:	2208      	movs	r2, #8
 8008bdc:	305c      	adds	r0, #92	; 0x5c
 8008bde:	f7fe fbcd 	bl	800737c <memset>
 8008be2:	4b05      	ldr	r3, [pc, #20]	; (8008bf8 <std+0x38>)
 8008be4:	6263      	str	r3, [r4, #36]	; 0x24
 8008be6:	4b05      	ldr	r3, [pc, #20]	; (8008bfc <std+0x3c>)
 8008be8:	62a3      	str	r3, [r4, #40]	; 0x28
 8008bea:	4b05      	ldr	r3, [pc, #20]	; (8008c00 <std+0x40>)
 8008bec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008bee:	4b05      	ldr	r3, [pc, #20]	; (8008c04 <std+0x44>)
 8008bf0:	6224      	str	r4, [r4, #32]
 8008bf2:	6323      	str	r3, [r4, #48]	; 0x30
 8008bf4:	bd10      	pop	{r4, pc}
 8008bf6:	bf00      	nop
 8008bf8:	080095a1 	.word	0x080095a1
 8008bfc:	080095c3 	.word	0x080095c3
 8008c00:	080095fb 	.word	0x080095fb
 8008c04:	0800961f 	.word	0x0800961f

08008c08 <_cleanup_r>:
 8008c08:	4901      	ldr	r1, [pc, #4]	; (8008c10 <_cleanup_r+0x8>)
 8008c0a:	f000 b885 	b.w	8008d18 <_fwalk_reent>
 8008c0e:	bf00      	nop
 8008c10:	08008b6d 	.word	0x08008b6d

08008c14 <__sfmoreglue>:
 8008c14:	b570      	push	{r4, r5, r6, lr}
 8008c16:	1e4a      	subs	r2, r1, #1
 8008c18:	2568      	movs	r5, #104	; 0x68
 8008c1a:	4355      	muls	r5, r2
 8008c1c:	460e      	mov	r6, r1
 8008c1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008c22:	f000 fc53 	bl	80094cc <_malloc_r>
 8008c26:	4604      	mov	r4, r0
 8008c28:	b140      	cbz	r0, 8008c3c <__sfmoreglue+0x28>
 8008c2a:	2100      	movs	r1, #0
 8008c2c:	e9c0 1600 	strd	r1, r6, [r0]
 8008c30:	300c      	adds	r0, #12
 8008c32:	60a0      	str	r0, [r4, #8]
 8008c34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008c38:	f7fe fba0 	bl	800737c <memset>
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	bd70      	pop	{r4, r5, r6, pc}

08008c40 <__sinit>:
 8008c40:	6983      	ldr	r3, [r0, #24]
 8008c42:	b510      	push	{r4, lr}
 8008c44:	4604      	mov	r4, r0
 8008c46:	bb33      	cbnz	r3, 8008c96 <__sinit+0x56>
 8008c48:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008c4c:	6503      	str	r3, [r0, #80]	; 0x50
 8008c4e:	4b12      	ldr	r3, [pc, #72]	; (8008c98 <__sinit+0x58>)
 8008c50:	4a12      	ldr	r2, [pc, #72]	; (8008c9c <__sinit+0x5c>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	6282      	str	r2, [r0, #40]	; 0x28
 8008c56:	4298      	cmp	r0, r3
 8008c58:	bf04      	itt	eq
 8008c5a:	2301      	moveq	r3, #1
 8008c5c:	6183      	streq	r3, [r0, #24]
 8008c5e:	f000 f81f 	bl	8008ca0 <__sfp>
 8008c62:	6060      	str	r0, [r4, #4]
 8008c64:	4620      	mov	r0, r4
 8008c66:	f000 f81b 	bl	8008ca0 <__sfp>
 8008c6a:	60a0      	str	r0, [r4, #8]
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	f000 f817 	bl	8008ca0 <__sfp>
 8008c72:	2200      	movs	r2, #0
 8008c74:	60e0      	str	r0, [r4, #12]
 8008c76:	2104      	movs	r1, #4
 8008c78:	6860      	ldr	r0, [r4, #4]
 8008c7a:	f7ff ffa1 	bl	8008bc0 <std>
 8008c7e:	2201      	movs	r2, #1
 8008c80:	2109      	movs	r1, #9
 8008c82:	68a0      	ldr	r0, [r4, #8]
 8008c84:	f7ff ff9c 	bl	8008bc0 <std>
 8008c88:	2202      	movs	r2, #2
 8008c8a:	2112      	movs	r1, #18
 8008c8c:	68e0      	ldr	r0, [r4, #12]
 8008c8e:	f7ff ff97 	bl	8008bc0 <std>
 8008c92:	2301      	movs	r3, #1
 8008c94:	61a3      	str	r3, [r4, #24]
 8008c96:	bd10      	pop	{r4, pc}
 8008c98:	08009784 	.word	0x08009784
 8008c9c:	08008c09 	.word	0x08008c09

08008ca0 <__sfp>:
 8008ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca2:	4b1b      	ldr	r3, [pc, #108]	; (8008d10 <__sfp+0x70>)
 8008ca4:	681e      	ldr	r6, [r3, #0]
 8008ca6:	69b3      	ldr	r3, [r6, #24]
 8008ca8:	4607      	mov	r7, r0
 8008caa:	b913      	cbnz	r3, 8008cb2 <__sfp+0x12>
 8008cac:	4630      	mov	r0, r6
 8008cae:	f7ff ffc7 	bl	8008c40 <__sinit>
 8008cb2:	3648      	adds	r6, #72	; 0x48
 8008cb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008cb8:	3b01      	subs	r3, #1
 8008cba:	d503      	bpl.n	8008cc4 <__sfp+0x24>
 8008cbc:	6833      	ldr	r3, [r6, #0]
 8008cbe:	b133      	cbz	r3, 8008cce <__sfp+0x2e>
 8008cc0:	6836      	ldr	r6, [r6, #0]
 8008cc2:	e7f7      	b.n	8008cb4 <__sfp+0x14>
 8008cc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008cc8:	b16d      	cbz	r5, 8008ce6 <__sfp+0x46>
 8008cca:	3468      	adds	r4, #104	; 0x68
 8008ccc:	e7f4      	b.n	8008cb8 <__sfp+0x18>
 8008cce:	2104      	movs	r1, #4
 8008cd0:	4638      	mov	r0, r7
 8008cd2:	f7ff ff9f 	bl	8008c14 <__sfmoreglue>
 8008cd6:	6030      	str	r0, [r6, #0]
 8008cd8:	2800      	cmp	r0, #0
 8008cda:	d1f1      	bne.n	8008cc0 <__sfp+0x20>
 8008cdc:	230c      	movs	r3, #12
 8008cde:	603b      	str	r3, [r7, #0]
 8008ce0:	4604      	mov	r4, r0
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ce6:	4b0b      	ldr	r3, [pc, #44]	; (8008d14 <__sfp+0x74>)
 8008ce8:	6665      	str	r5, [r4, #100]	; 0x64
 8008cea:	e9c4 5500 	strd	r5, r5, [r4]
 8008cee:	60a5      	str	r5, [r4, #8]
 8008cf0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008cf4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008cf8:	2208      	movs	r2, #8
 8008cfa:	4629      	mov	r1, r5
 8008cfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008d00:	f7fe fb3c 	bl	800737c <memset>
 8008d04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008d08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008d0c:	e7e9      	b.n	8008ce2 <__sfp+0x42>
 8008d0e:	bf00      	nop
 8008d10:	08009784 	.word	0x08009784
 8008d14:	ffff0001 	.word	0xffff0001

08008d18 <_fwalk_reent>:
 8008d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d1c:	4680      	mov	r8, r0
 8008d1e:	4689      	mov	r9, r1
 8008d20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008d24:	2600      	movs	r6, #0
 8008d26:	b914      	cbnz	r4, 8008d2e <_fwalk_reent+0x16>
 8008d28:	4630      	mov	r0, r6
 8008d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d2e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008d32:	3f01      	subs	r7, #1
 8008d34:	d501      	bpl.n	8008d3a <_fwalk_reent+0x22>
 8008d36:	6824      	ldr	r4, [r4, #0]
 8008d38:	e7f5      	b.n	8008d26 <_fwalk_reent+0xe>
 8008d3a:	89ab      	ldrh	r3, [r5, #12]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d907      	bls.n	8008d50 <_fwalk_reent+0x38>
 8008d40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d44:	3301      	adds	r3, #1
 8008d46:	d003      	beq.n	8008d50 <_fwalk_reent+0x38>
 8008d48:	4629      	mov	r1, r5
 8008d4a:	4640      	mov	r0, r8
 8008d4c:	47c8      	blx	r9
 8008d4e:	4306      	orrs	r6, r0
 8008d50:	3568      	adds	r5, #104	; 0x68
 8008d52:	e7ee      	b.n	8008d32 <_fwalk_reent+0x1a>

08008d54 <_localeconv_r>:
 8008d54:	4b04      	ldr	r3, [pc, #16]	; (8008d68 <_localeconv_r+0x14>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	6a18      	ldr	r0, [r3, #32]
 8008d5a:	4b04      	ldr	r3, [pc, #16]	; (8008d6c <_localeconv_r+0x18>)
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	bf08      	it	eq
 8008d60:	4618      	moveq	r0, r3
 8008d62:	30f0      	adds	r0, #240	; 0xf0
 8008d64:	4770      	bx	lr
 8008d66:	bf00      	nop
 8008d68:	2000000c 	.word	0x2000000c
 8008d6c:	20000070 	.word	0x20000070

08008d70 <__swhatbuf_r>:
 8008d70:	b570      	push	{r4, r5, r6, lr}
 8008d72:	460e      	mov	r6, r1
 8008d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d78:	2900      	cmp	r1, #0
 8008d7a:	b096      	sub	sp, #88	; 0x58
 8008d7c:	4614      	mov	r4, r2
 8008d7e:	461d      	mov	r5, r3
 8008d80:	da07      	bge.n	8008d92 <__swhatbuf_r+0x22>
 8008d82:	2300      	movs	r3, #0
 8008d84:	602b      	str	r3, [r5, #0]
 8008d86:	89b3      	ldrh	r3, [r6, #12]
 8008d88:	061a      	lsls	r2, r3, #24
 8008d8a:	d410      	bmi.n	8008dae <__swhatbuf_r+0x3e>
 8008d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d90:	e00e      	b.n	8008db0 <__swhatbuf_r+0x40>
 8008d92:	466a      	mov	r2, sp
 8008d94:	f000 fc6a 	bl	800966c <_fstat_r>
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	dbf2      	blt.n	8008d82 <__swhatbuf_r+0x12>
 8008d9c:	9a01      	ldr	r2, [sp, #4]
 8008d9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008da2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008da6:	425a      	negs	r2, r3
 8008da8:	415a      	adcs	r2, r3
 8008daa:	602a      	str	r2, [r5, #0]
 8008dac:	e7ee      	b.n	8008d8c <__swhatbuf_r+0x1c>
 8008dae:	2340      	movs	r3, #64	; 0x40
 8008db0:	2000      	movs	r0, #0
 8008db2:	6023      	str	r3, [r4, #0]
 8008db4:	b016      	add	sp, #88	; 0x58
 8008db6:	bd70      	pop	{r4, r5, r6, pc}

08008db8 <__smakebuf_r>:
 8008db8:	898b      	ldrh	r3, [r1, #12]
 8008dba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008dbc:	079d      	lsls	r5, r3, #30
 8008dbe:	4606      	mov	r6, r0
 8008dc0:	460c      	mov	r4, r1
 8008dc2:	d507      	bpl.n	8008dd4 <__smakebuf_r+0x1c>
 8008dc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008dc8:	6023      	str	r3, [r4, #0]
 8008dca:	6123      	str	r3, [r4, #16]
 8008dcc:	2301      	movs	r3, #1
 8008dce:	6163      	str	r3, [r4, #20]
 8008dd0:	b002      	add	sp, #8
 8008dd2:	bd70      	pop	{r4, r5, r6, pc}
 8008dd4:	ab01      	add	r3, sp, #4
 8008dd6:	466a      	mov	r2, sp
 8008dd8:	f7ff ffca 	bl	8008d70 <__swhatbuf_r>
 8008ddc:	9900      	ldr	r1, [sp, #0]
 8008dde:	4605      	mov	r5, r0
 8008de0:	4630      	mov	r0, r6
 8008de2:	f000 fb73 	bl	80094cc <_malloc_r>
 8008de6:	b948      	cbnz	r0, 8008dfc <__smakebuf_r+0x44>
 8008de8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dec:	059a      	lsls	r2, r3, #22
 8008dee:	d4ef      	bmi.n	8008dd0 <__smakebuf_r+0x18>
 8008df0:	f023 0303 	bic.w	r3, r3, #3
 8008df4:	f043 0302 	orr.w	r3, r3, #2
 8008df8:	81a3      	strh	r3, [r4, #12]
 8008dfa:	e7e3      	b.n	8008dc4 <__smakebuf_r+0xc>
 8008dfc:	4b0d      	ldr	r3, [pc, #52]	; (8008e34 <__smakebuf_r+0x7c>)
 8008dfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8008e00:	89a3      	ldrh	r3, [r4, #12]
 8008e02:	6020      	str	r0, [r4, #0]
 8008e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e08:	81a3      	strh	r3, [r4, #12]
 8008e0a:	9b00      	ldr	r3, [sp, #0]
 8008e0c:	6163      	str	r3, [r4, #20]
 8008e0e:	9b01      	ldr	r3, [sp, #4]
 8008e10:	6120      	str	r0, [r4, #16]
 8008e12:	b15b      	cbz	r3, 8008e2c <__smakebuf_r+0x74>
 8008e14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e18:	4630      	mov	r0, r6
 8008e1a:	f000 fc39 	bl	8009690 <_isatty_r>
 8008e1e:	b128      	cbz	r0, 8008e2c <__smakebuf_r+0x74>
 8008e20:	89a3      	ldrh	r3, [r4, #12]
 8008e22:	f023 0303 	bic.w	r3, r3, #3
 8008e26:	f043 0301 	orr.w	r3, r3, #1
 8008e2a:	81a3      	strh	r3, [r4, #12]
 8008e2c:	89a3      	ldrh	r3, [r4, #12]
 8008e2e:	431d      	orrs	r5, r3
 8008e30:	81a5      	strh	r5, [r4, #12]
 8008e32:	e7cd      	b.n	8008dd0 <__smakebuf_r+0x18>
 8008e34:	08008c09 	.word	0x08008c09

08008e38 <malloc>:
 8008e38:	4b02      	ldr	r3, [pc, #8]	; (8008e44 <malloc+0xc>)
 8008e3a:	4601      	mov	r1, r0
 8008e3c:	6818      	ldr	r0, [r3, #0]
 8008e3e:	f000 bb45 	b.w	80094cc <_malloc_r>
 8008e42:	bf00      	nop
 8008e44:	2000000c 	.word	0x2000000c

08008e48 <memcpy>:
 8008e48:	b510      	push	{r4, lr}
 8008e4a:	1e43      	subs	r3, r0, #1
 8008e4c:	440a      	add	r2, r1
 8008e4e:	4291      	cmp	r1, r2
 8008e50:	d100      	bne.n	8008e54 <memcpy+0xc>
 8008e52:	bd10      	pop	{r4, pc}
 8008e54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e5c:	e7f7      	b.n	8008e4e <memcpy+0x6>

08008e5e <_Balloc>:
 8008e5e:	b570      	push	{r4, r5, r6, lr}
 8008e60:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008e62:	4604      	mov	r4, r0
 8008e64:	460e      	mov	r6, r1
 8008e66:	b93d      	cbnz	r5, 8008e78 <_Balloc+0x1a>
 8008e68:	2010      	movs	r0, #16
 8008e6a:	f7ff ffe5 	bl	8008e38 <malloc>
 8008e6e:	6260      	str	r0, [r4, #36]	; 0x24
 8008e70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008e74:	6005      	str	r5, [r0, #0]
 8008e76:	60c5      	str	r5, [r0, #12]
 8008e78:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008e7a:	68eb      	ldr	r3, [r5, #12]
 8008e7c:	b183      	cbz	r3, 8008ea0 <_Balloc+0x42>
 8008e7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008e86:	b9b8      	cbnz	r0, 8008eb8 <_Balloc+0x5a>
 8008e88:	2101      	movs	r1, #1
 8008e8a:	fa01 f506 	lsl.w	r5, r1, r6
 8008e8e:	1d6a      	adds	r2, r5, #5
 8008e90:	0092      	lsls	r2, r2, #2
 8008e92:	4620      	mov	r0, r4
 8008e94:	f000 fabe 	bl	8009414 <_calloc_r>
 8008e98:	b160      	cbz	r0, 8008eb4 <_Balloc+0x56>
 8008e9a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008e9e:	e00e      	b.n	8008ebe <_Balloc+0x60>
 8008ea0:	2221      	movs	r2, #33	; 0x21
 8008ea2:	2104      	movs	r1, #4
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	f000 fab5 	bl	8009414 <_calloc_r>
 8008eaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008eac:	60e8      	str	r0, [r5, #12]
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d1e4      	bne.n	8008e7e <_Balloc+0x20>
 8008eb4:	2000      	movs	r0, #0
 8008eb6:	bd70      	pop	{r4, r5, r6, pc}
 8008eb8:	6802      	ldr	r2, [r0, #0]
 8008eba:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ec4:	e7f7      	b.n	8008eb6 <_Balloc+0x58>

08008ec6 <_Bfree>:
 8008ec6:	b570      	push	{r4, r5, r6, lr}
 8008ec8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008eca:	4606      	mov	r6, r0
 8008ecc:	460d      	mov	r5, r1
 8008ece:	b93c      	cbnz	r4, 8008ee0 <_Bfree+0x1a>
 8008ed0:	2010      	movs	r0, #16
 8008ed2:	f7ff ffb1 	bl	8008e38 <malloc>
 8008ed6:	6270      	str	r0, [r6, #36]	; 0x24
 8008ed8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008edc:	6004      	str	r4, [r0, #0]
 8008ede:	60c4      	str	r4, [r0, #12]
 8008ee0:	b13d      	cbz	r5, 8008ef2 <_Bfree+0x2c>
 8008ee2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008ee4:	686a      	ldr	r2, [r5, #4]
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008eec:	6029      	str	r1, [r5, #0]
 8008eee:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008ef2:	bd70      	pop	{r4, r5, r6, pc}

08008ef4 <__multadd>:
 8008ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef8:	690d      	ldr	r5, [r1, #16]
 8008efa:	461f      	mov	r7, r3
 8008efc:	4606      	mov	r6, r0
 8008efe:	460c      	mov	r4, r1
 8008f00:	f101 0c14 	add.w	ip, r1, #20
 8008f04:	2300      	movs	r3, #0
 8008f06:	f8dc 0000 	ldr.w	r0, [ip]
 8008f0a:	b281      	uxth	r1, r0
 8008f0c:	fb02 7101 	mla	r1, r2, r1, r7
 8008f10:	0c0f      	lsrs	r7, r1, #16
 8008f12:	0c00      	lsrs	r0, r0, #16
 8008f14:	fb02 7000 	mla	r0, r2, r0, r7
 8008f18:	b289      	uxth	r1, r1
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008f20:	429d      	cmp	r5, r3
 8008f22:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008f26:	f84c 1b04 	str.w	r1, [ip], #4
 8008f2a:	dcec      	bgt.n	8008f06 <__multadd+0x12>
 8008f2c:	b1d7      	cbz	r7, 8008f64 <__multadd+0x70>
 8008f2e:	68a3      	ldr	r3, [r4, #8]
 8008f30:	42ab      	cmp	r3, r5
 8008f32:	dc12      	bgt.n	8008f5a <__multadd+0x66>
 8008f34:	6861      	ldr	r1, [r4, #4]
 8008f36:	4630      	mov	r0, r6
 8008f38:	3101      	adds	r1, #1
 8008f3a:	f7ff ff90 	bl	8008e5e <_Balloc>
 8008f3e:	6922      	ldr	r2, [r4, #16]
 8008f40:	3202      	adds	r2, #2
 8008f42:	f104 010c 	add.w	r1, r4, #12
 8008f46:	4680      	mov	r8, r0
 8008f48:	0092      	lsls	r2, r2, #2
 8008f4a:	300c      	adds	r0, #12
 8008f4c:	f7ff ff7c 	bl	8008e48 <memcpy>
 8008f50:	4621      	mov	r1, r4
 8008f52:	4630      	mov	r0, r6
 8008f54:	f7ff ffb7 	bl	8008ec6 <_Bfree>
 8008f58:	4644      	mov	r4, r8
 8008f5a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f5e:	3501      	adds	r5, #1
 8008f60:	615f      	str	r7, [r3, #20]
 8008f62:	6125      	str	r5, [r4, #16]
 8008f64:	4620      	mov	r0, r4
 8008f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008f6a <__hi0bits>:
 8008f6a:	0c02      	lsrs	r2, r0, #16
 8008f6c:	0412      	lsls	r2, r2, #16
 8008f6e:	4603      	mov	r3, r0
 8008f70:	b9b2      	cbnz	r2, 8008fa0 <__hi0bits+0x36>
 8008f72:	0403      	lsls	r3, r0, #16
 8008f74:	2010      	movs	r0, #16
 8008f76:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008f7a:	bf04      	itt	eq
 8008f7c:	021b      	lsleq	r3, r3, #8
 8008f7e:	3008      	addeq	r0, #8
 8008f80:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008f84:	bf04      	itt	eq
 8008f86:	011b      	lsleq	r3, r3, #4
 8008f88:	3004      	addeq	r0, #4
 8008f8a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008f8e:	bf04      	itt	eq
 8008f90:	009b      	lsleq	r3, r3, #2
 8008f92:	3002      	addeq	r0, #2
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	db06      	blt.n	8008fa6 <__hi0bits+0x3c>
 8008f98:	005b      	lsls	r3, r3, #1
 8008f9a:	d503      	bpl.n	8008fa4 <__hi0bits+0x3a>
 8008f9c:	3001      	adds	r0, #1
 8008f9e:	4770      	bx	lr
 8008fa0:	2000      	movs	r0, #0
 8008fa2:	e7e8      	b.n	8008f76 <__hi0bits+0xc>
 8008fa4:	2020      	movs	r0, #32
 8008fa6:	4770      	bx	lr

08008fa8 <__lo0bits>:
 8008fa8:	6803      	ldr	r3, [r0, #0]
 8008faa:	f013 0207 	ands.w	r2, r3, #7
 8008fae:	4601      	mov	r1, r0
 8008fb0:	d00b      	beq.n	8008fca <__lo0bits+0x22>
 8008fb2:	07da      	lsls	r2, r3, #31
 8008fb4:	d423      	bmi.n	8008ffe <__lo0bits+0x56>
 8008fb6:	0798      	lsls	r0, r3, #30
 8008fb8:	bf49      	itett	mi
 8008fba:	085b      	lsrmi	r3, r3, #1
 8008fbc:	089b      	lsrpl	r3, r3, #2
 8008fbe:	2001      	movmi	r0, #1
 8008fc0:	600b      	strmi	r3, [r1, #0]
 8008fc2:	bf5c      	itt	pl
 8008fc4:	600b      	strpl	r3, [r1, #0]
 8008fc6:	2002      	movpl	r0, #2
 8008fc8:	4770      	bx	lr
 8008fca:	b298      	uxth	r0, r3
 8008fcc:	b9a8      	cbnz	r0, 8008ffa <__lo0bits+0x52>
 8008fce:	0c1b      	lsrs	r3, r3, #16
 8008fd0:	2010      	movs	r0, #16
 8008fd2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008fd6:	bf04      	itt	eq
 8008fd8:	0a1b      	lsreq	r3, r3, #8
 8008fda:	3008      	addeq	r0, #8
 8008fdc:	071a      	lsls	r2, r3, #28
 8008fde:	bf04      	itt	eq
 8008fe0:	091b      	lsreq	r3, r3, #4
 8008fe2:	3004      	addeq	r0, #4
 8008fe4:	079a      	lsls	r2, r3, #30
 8008fe6:	bf04      	itt	eq
 8008fe8:	089b      	lsreq	r3, r3, #2
 8008fea:	3002      	addeq	r0, #2
 8008fec:	07da      	lsls	r2, r3, #31
 8008fee:	d402      	bmi.n	8008ff6 <__lo0bits+0x4e>
 8008ff0:	085b      	lsrs	r3, r3, #1
 8008ff2:	d006      	beq.n	8009002 <__lo0bits+0x5a>
 8008ff4:	3001      	adds	r0, #1
 8008ff6:	600b      	str	r3, [r1, #0]
 8008ff8:	4770      	bx	lr
 8008ffa:	4610      	mov	r0, r2
 8008ffc:	e7e9      	b.n	8008fd2 <__lo0bits+0x2a>
 8008ffe:	2000      	movs	r0, #0
 8009000:	4770      	bx	lr
 8009002:	2020      	movs	r0, #32
 8009004:	4770      	bx	lr

08009006 <__i2b>:
 8009006:	b510      	push	{r4, lr}
 8009008:	460c      	mov	r4, r1
 800900a:	2101      	movs	r1, #1
 800900c:	f7ff ff27 	bl	8008e5e <_Balloc>
 8009010:	2201      	movs	r2, #1
 8009012:	6144      	str	r4, [r0, #20]
 8009014:	6102      	str	r2, [r0, #16]
 8009016:	bd10      	pop	{r4, pc}

08009018 <__multiply>:
 8009018:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800901c:	4614      	mov	r4, r2
 800901e:	690a      	ldr	r2, [r1, #16]
 8009020:	6923      	ldr	r3, [r4, #16]
 8009022:	429a      	cmp	r2, r3
 8009024:	bfb8      	it	lt
 8009026:	460b      	movlt	r3, r1
 8009028:	4688      	mov	r8, r1
 800902a:	bfbc      	itt	lt
 800902c:	46a0      	movlt	r8, r4
 800902e:	461c      	movlt	r4, r3
 8009030:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009034:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009038:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800903c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009040:	eb07 0609 	add.w	r6, r7, r9
 8009044:	42b3      	cmp	r3, r6
 8009046:	bfb8      	it	lt
 8009048:	3101      	addlt	r1, #1
 800904a:	f7ff ff08 	bl	8008e5e <_Balloc>
 800904e:	f100 0514 	add.w	r5, r0, #20
 8009052:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009056:	462b      	mov	r3, r5
 8009058:	2200      	movs	r2, #0
 800905a:	4573      	cmp	r3, lr
 800905c:	d316      	bcc.n	800908c <__multiply+0x74>
 800905e:	f104 0214 	add.w	r2, r4, #20
 8009062:	f108 0114 	add.w	r1, r8, #20
 8009066:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800906a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800906e:	9300      	str	r3, [sp, #0]
 8009070:	9b00      	ldr	r3, [sp, #0]
 8009072:	9201      	str	r2, [sp, #4]
 8009074:	4293      	cmp	r3, r2
 8009076:	d80c      	bhi.n	8009092 <__multiply+0x7a>
 8009078:	2e00      	cmp	r6, #0
 800907a:	dd03      	ble.n	8009084 <__multiply+0x6c>
 800907c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009080:	2b00      	cmp	r3, #0
 8009082:	d05d      	beq.n	8009140 <__multiply+0x128>
 8009084:	6106      	str	r6, [r0, #16]
 8009086:	b003      	add	sp, #12
 8009088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800908c:	f843 2b04 	str.w	r2, [r3], #4
 8009090:	e7e3      	b.n	800905a <__multiply+0x42>
 8009092:	f8b2 b000 	ldrh.w	fp, [r2]
 8009096:	f1bb 0f00 	cmp.w	fp, #0
 800909a:	d023      	beq.n	80090e4 <__multiply+0xcc>
 800909c:	4689      	mov	r9, r1
 800909e:	46ac      	mov	ip, r5
 80090a0:	f04f 0800 	mov.w	r8, #0
 80090a4:	f859 4b04 	ldr.w	r4, [r9], #4
 80090a8:	f8dc a000 	ldr.w	sl, [ip]
 80090ac:	b2a3      	uxth	r3, r4
 80090ae:	fa1f fa8a 	uxth.w	sl, sl
 80090b2:	fb0b a303 	mla	r3, fp, r3, sl
 80090b6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80090ba:	f8dc 4000 	ldr.w	r4, [ip]
 80090be:	4443      	add	r3, r8
 80090c0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80090c4:	fb0b 840a 	mla	r4, fp, sl, r8
 80090c8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80090cc:	46e2      	mov	sl, ip
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80090d4:	454f      	cmp	r7, r9
 80090d6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80090da:	f84a 3b04 	str.w	r3, [sl], #4
 80090de:	d82b      	bhi.n	8009138 <__multiply+0x120>
 80090e0:	f8cc 8004 	str.w	r8, [ip, #4]
 80090e4:	9b01      	ldr	r3, [sp, #4]
 80090e6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80090ea:	3204      	adds	r2, #4
 80090ec:	f1ba 0f00 	cmp.w	sl, #0
 80090f0:	d020      	beq.n	8009134 <__multiply+0x11c>
 80090f2:	682b      	ldr	r3, [r5, #0]
 80090f4:	4689      	mov	r9, r1
 80090f6:	46a8      	mov	r8, r5
 80090f8:	f04f 0b00 	mov.w	fp, #0
 80090fc:	f8b9 c000 	ldrh.w	ip, [r9]
 8009100:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009104:	fb0a 440c 	mla	r4, sl, ip, r4
 8009108:	445c      	add	r4, fp
 800910a:	46c4      	mov	ip, r8
 800910c:	b29b      	uxth	r3, r3
 800910e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009112:	f84c 3b04 	str.w	r3, [ip], #4
 8009116:	f859 3b04 	ldr.w	r3, [r9], #4
 800911a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800911e:	0c1b      	lsrs	r3, r3, #16
 8009120:	fb0a b303 	mla	r3, sl, r3, fp
 8009124:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009128:	454f      	cmp	r7, r9
 800912a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800912e:	d805      	bhi.n	800913c <__multiply+0x124>
 8009130:	f8c8 3004 	str.w	r3, [r8, #4]
 8009134:	3504      	adds	r5, #4
 8009136:	e79b      	b.n	8009070 <__multiply+0x58>
 8009138:	46d4      	mov	ip, sl
 800913a:	e7b3      	b.n	80090a4 <__multiply+0x8c>
 800913c:	46e0      	mov	r8, ip
 800913e:	e7dd      	b.n	80090fc <__multiply+0xe4>
 8009140:	3e01      	subs	r6, #1
 8009142:	e799      	b.n	8009078 <__multiply+0x60>

08009144 <__pow5mult>:
 8009144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009148:	4615      	mov	r5, r2
 800914a:	f012 0203 	ands.w	r2, r2, #3
 800914e:	4606      	mov	r6, r0
 8009150:	460f      	mov	r7, r1
 8009152:	d007      	beq.n	8009164 <__pow5mult+0x20>
 8009154:	3a01      	subs	r2, #1
 8009156:	4c21      	ldr	r4, [pc, #132]	; (80091dc <__pow5mult+0x98>)
 8009158:	2300      	movs	r3, #0
 800915a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800915e:	f7ff fec9 	bl	8008ef4 <__multadd>
 8009162:	4607      	mov	r7, r0
 8009164:	10ad      	asrs	r5, r5, #2
 8009166:	d035      	beq.n	80091d4 <__pow5mult+0x90>
 8009168:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800916a:	b93c      	cbnz	r4, 800917c <__pow5mult+0x38>
 800916c:	2010      	movs	r0, #16
 800916e:	f7ff fe63 	bl	8008e38 <malloc>
 8009172:	6270      	str	r0, [r6, #36]	; 0x24
 8009174:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009178:	6004      	str	r4, [r0, #0]
 800917a:	60c4      	str	r4, [r0, #12]
 800917c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009180:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009184:	b94c      	cbnz	r4, 800919a <__pow5mult+0x56>
 8009186:	f240 2171 	movw	r1, #625	; 0x271
 800918a:	4630      	mov	r0, r6
 800918c:	f7ff ff3b 	bl	8009006 <__i2b>
 8009190:	2300      	movs	r3, #0
 8009192:	f8c8 0008 	str.w	r0, [r8, #8]
 8009196:	4604      	mov	r4, r0
 8009198:	6003      	str	r3, [r0, #0]
 800919a:	f04f 0800 	mov.w	r8, #0
 800919e:	07eb      	lsls	r3, r5, #31
 80091a0:	d50a      	bpl.n	80091b8 <__pow5mult+0x74>
 80091a2:	4639      	mov	r1, r7
 80091a4:	4622      	mov	r2, r4
 80091a6:	4630      	mov	r0, r6
 80091a8:	f7ff ff36 	bl	8009018 <__multiply>
 80091ac:	4639      	mov	r1, r7
 80091ae:	4681      	mov	r9, r0
 80091b0:	4630      	mov	r0, r6
 80091b2:	f7ff fe88 	bl	8008ec6 <_Bfree>
 80091b6:	464f      	mov	r7, r9
 80091b8:	106d      	asrs	r5, r5, #1
 80091ba:	d00b      	beq.n	80091d4 <__pow5mult+0x90>
 80091bc:	6820      	ldr	r0, [r4, #0]
 80091be:	b938      	cbnz	r0, 80091d0 <__pow5mult+0x8c>
 80091c0:	4622      	mov	r2, r4
 80091c2:	4621      	mov	r1, r4
 80091c4:	4630      	mov	r0, r6
 80091c6:	f7ff ff27 	bl	8009018 <__multiply>
 80091ca:	6020      	str	r0, [r4, #0]
 80091cc:	f8c0 8000 	str.w	r8, [r0]
 80091d0:	4604      	mov	r4, r0
 80091d2:	e7e4      	b.n	800919e <__pow5mult+0x5a>
 80091d4:	4638      	mov	r0, r7
 80091d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091da:	bf00      	nop
 80091dc:	080098f8 	.word	0x080098f8

080091e0 <__lshift>:
 80091e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091e4:	460c      	mov	r4, r1
 80091e6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80091ea:	6923      	ldr	r3, [r4, #16]
 80091ec:	6849      	ldr	r1, [r1, #4]
 80091ee:	eb0a 0903 	add.w	r9, sl, r3
 80091f2:	68a3      	ldr	r3, [r4, #8]
 80091f4:	4607      	mov	r7, r0
 80091f6:	4616      	mov	r6, r2
 80091f8:	f109 0501 	add.w	r5, r9, #1
 80091fc:	42ab      	cmp	r3, r5
 80091fe:	db32      	blt.n	8009266 <__lshift+0x86>
 8009200:	4638      	mov	r0, r7
 8009202:	f7ff fe2c 	bl	8008e5e <_Balloc>
 8009206:	2300      	movs	r3, #0
 8009208:	4680      	mov	r8, r0
 800920a:	f100 0114 	add.w	r1, r0, #20
 800920e:	461a      	mov	r2, r3
 8009210:	4553      	cmp	r3, sl
 8009212:	db2b      	blt.n	800926c <__lshift+0x8c>
 8009214:	6920      	ldr	r0, [r4, #16]
 8009216:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800921a:	f104 0314 	add.w	r3, r4, #20
 800921e:	f016 021f 	ands.w	r2, r6, #31
 8009222:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009226:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800922a:	d025      	beq.n	8009278 <__lshift+0x98>
 800922c:	f1c2 0e20 	rsb	lr, r2, #32
 8009230:	2000      	movs	r0, #0
 8009232:	681e      	ldr	r6, [r3, #0]
 8009234:	468a      	mov	sl, r1
 8009236:	4096      	lsls	r6, r2
 8009238:	4330      	orrs	r0, r6
 800923a:	f84a 0b04 	str.w	r0, [sl], #4
 800923e:	f853 0b04 	ldr.w	r0, [r3], #4
 8009242:	459c      	cmp	ip, r3
 8009244:	fa20 f00e 	lsr.w	r0, r0, lr
 8009248:	d814      	bhi.n	8009274 <__lshift+0x94>
 800924a:	6048      	str	r0, [r1, #4]
 800924c:	b108      	cbz	r0, 8009252 <__lshift+0x72>
 800924e:	f109 0502 	add.w	r5, r9, #2
 8009252:	3d01      	subs	r5, #1
 8009254:	4638      	mov	r0, r7
 8009256:	f8c8 5010 	str.w	r5, [r8, #16]
 800925a:	4621      	mov	r1, r4
 800925c:	f7ff fe33 	bl	8008ec6 <_Bfree>
 8009260:	4640      	mov	r0, r8
 8009262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009266:	3101      	adds	r1, #1
 8009268:	005b      	lsls	r3, r3, #1
 800926a:	e7c7      	b.n	80091fc <__lshift+0x1c>
 800926c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009270:	3301      	adds	r3, #1
 8009272:	e7cd      	b.n	8009210 <__lshift+0x30>
 8009274:	4651      	mov	r1, sl
 8009276:	e7dc      	b.n	8009232 <__lshift+0x52>
 8009278:	3904      	subs	r1, #4
 800927a:	f853 2b04 	ldr.w	r2, [r3], #4
 800927e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009282:	459c      	cmp	ip, r3
 8009284:	d8f9      	bhi.n	800927a <__lshift+0x9a>
 8009286:	e7e4      	b.n	8009252 <__lshift+0x72>

08009288 <__mcmp>:
 8009288:	6903      	ldr	r3, [r0, #16]
 800928a:	690a      	ldr	r2, [r1, #16]
 800928c:	1a9b      	subs	r3, r3, r2
 800928e:	b530      	push	{r4, r5, lr}
 8009290:	d10c      	bne.n	80092ac <__mcmp+0x24>
 8009292:	0092      	lsls	r2, r2, #2
 8009294:	3014      	adds	r0, #20
 8009296:	3114      	adds	r1, #20
 8009298:	1884      	adds	r4, r0, r2
 800929a:	4411      	add	r1, r2
 800929c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80092a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80092a4:	4295      	cmp	r5, r2
 80092a6:	d003      	beq.n	80092b0 <__mcmp+0x28>
 80092a8:	d305      	bcc.n	80092b6 <__mcmp+0x2e>
 80092aa:	2301      	movs	r3, #1
 80092ac:	4618      	mov	r0, r3
 80092ae:	bd30      	pop	{r4, r5, pc}
 80092b0:	42a0      	cmp	r0, r4
 80092b2:	d3f3      	bcc.n	800929c <__mcmp+0x14>
 80092b4:	e7fa      	b.n	80092ac <__mcmp+0x24>
 80092b6:	f04f 33ff 	mov.w	r3, #4294967295
 80092ba:	e7f7      	b.n	80092ac <__mcmp+0x24>

080092bc <__mdiff>:
 80092bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092c0:	460d      	mov	r5, r1
 80092c2:	4607      	mov	r7, r0
 80092c4:	4611      	mov	r1, r2
 80092c6:	4628      	mov	r0, r5
 80092c8:	4614      	mov	r4, r2
 80092ca:	f7ff ffdd 	bl	8009288 <__mcmp>
 80092ce:	1e06      	subs	r6, r0, #0
 80092d0:	d108      	bne.n	80092e4 <__mdiff+0x28>
 80092d2:	4631      	mov	r1, r6
 80092d4:	4638      	mov	r0, r7
 80092d6:	f7ff fdc2 	bl	8008e5e <_Balloc>
 80092da:	2301      	movs	r3, #1
 80092dc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80092e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092e4:	bfa4      	itt	ge
 80092e6:	4623      	movge	r3, r4
 80092e8:	462c      	movge	r4, r5
 80092ea:	4638      	mov	r0, r7
 80092ec:	6861      	ldr	r1, [r4, #4]
 80092ee:	bfa6      	itte	ge
 80092f0:	461d      	movge	r5, r3
 80092f2:	2600      	movge	r6, #0
 80092f4:	2601      	movlt	r6, #1
 80092f6:	f7ff fdb2 	bl	8008e5e <_Balloc>
 80092fa:	692b      	ldr	r3, [r5, #16]
 80092fc:	60c6      	str	r6, [r0, #12]
 80092fe:	6926      	ldr	r6, [r4, #16]
 8009300:	f105 0914 	add.w	r9, r5, #20
 8009304:	f104 0214 	add.w	r2, r4, #20
 8009308:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800930c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009310:	f100 0514 	add.w	r5, r0, #20
 8009314:	f04f 0e00 	mov.w	lr, #0
 8009318:	f852 ab04 	ldr.w	sl, [r2], #4
 800931c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009320:	fa1e f18a 	uxtah	r1, lr, sl
 8009324:	b2a3      	uxth	r3, r4
 8009326:	1ac9      	subs	r1, r1, r3
 8009328:	0c23      	lsrs	r3, r4, #16
 800932a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800932e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009332:	b289      	uxth	r1, r1
 8009334:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009338:	45c8      	cmp	r8, r9
 800933a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800933e:	4694      	mov	ip, r2
 8009340:	f845 3b04 	str.w	r3, [r5], #4
 8009344:	d8e8      	bhi.n	8009318 <__mdiff+0x5c>
 8009346:	45bc      	cmp	ip, r7
 8009348:	d304      	bcc.n	8009354 <__mdiff+0x98>
 800934a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800934e:	b183      	cbz	r3, 8009372 <__mdiff+0xb6>
 8009350:	6106      	str	r6, [r0, #16]
 8009352:	e7c5      	b.n	80092e0 <__mdiff+0x24>
 8009354:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009358:	fa1e f381 	uxtah	r3, lr, r1
 800935c:	141a      	asrs	r2, r3, #16
 800935e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009362:	b29b      	uxth	r3, r3
 8009364:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009368:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800936c:	f845 3b04 	str.w	r3, [r5], #4
 8009370:	e7e9      	b.n	8009346 <__mdiff+0x8a>
 8009372:	3e01      	subs	r6, #1
 8009374:	e7e9      	b.n	800934a <__mdiff+0x8e>

08009376 <__d2b>:
 8009376:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800937a:	460e      	mov	r6, r1
 800937c:	2101      	movs	r1, #1
 800937e:	ec59 8b10 	vmov	r8, r9, d0
 8009382:	4615      	mov	r5, r2
 8009384:	f7ff fd6b 	bl	8008e5e <_Balloc>
 8009388:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800938c:	4607      	mov	r7, r0
 800938e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009392:	bb34      	cbnz	r4, 80093e2 <__d2b+0x6c>
 8009394:	9301      	str	r3, [sp, #4]
 8009396:	f1b8 0300 	subs.w	r3, r8, #0
 800939a:	d027      	beq.n	80093ec <__d2b+0x76>
 800939c:	a802      	add	r0, sp, #8
 800939e:	f840 3d08 	str.w	r3, [r0, #-8]!
 80093a2:	f7ff fe01 	bl	8008fa8 <__lo0bits>
 80093a6:	9900      	ldr	r1, [sp, #0]
 80093a8:	b1f0      	cbz	r0, 80093e8 <__d2b+0x72>
 80093aa:	9a01      	ldr	r2, [sp, #4]
 80093ac:	f1c0 0320 	rsb	r3, r0, #32
 80093b0:	fa02 f303 	lsl.w	r3, r2, r3
 80093b4:	430b      	orrs	r3, r1
 80093b6:	40c2      	lsrs	r2, r0
 80093b8:	617b      	str	r3, [r7, #20]
 80093ba:	9201      	str	r2, [sp, #4]
 80093bc:	9b01      	ldr	r3, [sp, #4]
 80093be:	61bb      	str	r3, [r7, #24]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	bf14      	ite	ne
 80093c4:	2102      	movne	r1, #2
 80093c6:	2101      	moveq	r1, #1
 80093c8:	6139      	str	r1, [r7, #16]
 80093ca:	b1c4      	cbz	r4, 80093fe <__d2b+0x88>
 80093cc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80093d0:	4404      	add	r4, r0
 80093d2:	6034      	str	r4, [r6, #0]
 80093d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80093d8:	6028      	str	r0, [r5, #0]
 80093da:	4638      	mov	r0, r7
 80093dc:	b003      	add	sp, #12
 80093de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093e6:	e7d5      	b.n	8009394 <__d2b+0x1e>
 80093e8:	6179      	str	r1, [r7, #20]
 80093ea:	e7e7      	b.n	80093bc <__d2b+0x46>
 80093ec:	a801      	add	r0, sp, #4
 80093ee:	f7ff fddb 	bl	8008fa8 <__lo0bits>
 80093f2:	9b01      	ldr	r3, [sp, #4]
 80093f4:	617b      	str	r3, [r7, #20]
 80093f6:	2101      	movs	r1, #1
 80093f8:	6139      	str	r1, [r7, #16]
 80093fa:	3020      	adds	r0, #32
 80093fc:	e7e5      	b.n	80093ca <__d2b+0x54>
 80093fe:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009402:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009406:	6030      	str	r0, [r6, #0]
 8009408:	6918      	ldr	r0, [r3, #16]
 800940a:	f7ff fdae 	bl	8008f6a <__hi0bits>
 800940e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009412:	e7e1      	b.n	80093d8 <__d2b+0x62>

08009414 <_calloc_r>:
 8009414:	b538      	push	{r3, r4, r5, lr}
 8009416:	fb02 f401 	mul.w	r4, r2, r1
 800941a:	4621      	mov	r1, r4
 800941c:	f000 f856 	bl	80094cc <_malloc_r>
 8009420:	4605      	mov	r5, r0
 8009422:	b118      	cbz	r0, 800942c <_calloc_r+0x18>
 8009424:	4622      	mov	r2, r4
 8009426:	2100      	movs	r1, #0
 8009428:	f7fd ffa8 	bl	800737c <memset>
 800942c:	4628      	mov	r0, r5
 800942e:	bd38      	pop	{r3, r4, r5, pc}

08009430 <_free_r>:
 8009430:	b538      	push	{r3, r4, r5, lr}
 8009432:	4605      	mov	r5, r0
 8009434:	2900      	cmp	r1, #0
 8009436:	d045      	beq.n	80094c4 <_free_r+0x94>
 8009438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800943c:	1f0c      	subs	r4, r1, #4
 800943e:	2b00      	cmp	r3, #0
 8009440:	bfb8      	it	lt
 8009442:	18e4      	addlt	r4, r4, r3
 8009444:	f000 f958 	bl	80096f8 <__malloc_lock>
 8009448:	4a1f      	ldr	r2, [pc, #124]	; (80094c8 <_free_r+0x98>)
 800944a:	6813      	ldr	r3, [r2, #0]
 800944c:	4610      	mov	r0, r2
 800944e:	b933      	cbnz	r3, 800945e <_free_r+0x2e>
 8009450:	6063      	str	r3, [r4, #4]
 8009452:	6014      	str	r4, [r2, #0]
 8009454:	4628      	mov	r0, r5
 8009456:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800945a:	f000 b94e 	b.w	80096fa <__malloc_unlock>
 800945e:	42a3      	cmp	r3, r4
 8009460:	d90c      	bls.n	800947c <_free_r+0x4c>
 8009462:	6821      	ldr	r1, [r4, #0]
 8009464:	1862      	adds	r2, r4, r1
 8009466:	4293      	cmp	r3, r2
 8009468:	bf04      	itt	eq
 800946a:	681a      	ldreq	r2, [r3, #0]
 800946c:	685b      	ldreq	r3, [r3, #4]
 800946e:	6063      	str	r3, [r4, #4]
 8009470:	bf04      	itt	eq
 8009472:	1852      	addeq	r2, r2, r1
 8009474:	6022      	streq	r2, [r4, #0]
 8009476:	6004      	str	r4, [r0, #0]
 8009478:	e7ec      	b.n	8009454 <_free_r+0x24>
 800947a:	4613      	mov	r3, r2
 800947c:	685a      	ldr	r2, [r3, #4]
 800947e:	b10a      	cbz	r2, 8009484 <_free_r+0x54>
 8009480:	42a2      	cmp	r2, r4
 8009482:	d9fa      	bls.n	800947a <_free_r+0x4a>
 8009484:	6819      	ldr	r1, [r3, #0]
 8009486:	1858      	adds	r0, r3, r1
 8009488:	42a0      	cmp	r0, r4
 800948a:	d10b      	bne.n	80094a4 <_free_r+0x74>
 800948c:	6820      	ldr	r0, [r4, #0]
 800948e:	4401      	add	r1, r0
 8009490:	1858      	adds	r0, r3, r1
 8009492:	4282      	cmp	r2, r0
 8009494:	6019      	str	r1, [r3, #0]
 8009496:	d1dd      	bne.n	8009454 <_free_r+0x24>
 8009498:	6810      	ldr	r0, [r2, #0]
 800949a:	6852      	ldr	r2, [r2, #4]
 800949c:	605a      	str	r2, [r3, #4]
 800949e:	4401      	add	r1, r0
 80094a0:	6019      	str	r1, [r3, #0]
 80094a2:	e7d7      	b.n	8009454 <_free_r+0x24>
 80094a4:	d902      	bls.n	80094ac <_free_r+0x7c>
 80094a6:	230c      	movs	r3, #12
 80094a8:	602b      	str	r3, [r5, #0]
 80094aa:	e7d3      	b.n	8009454 <_free_r+0x24>
 80094ac:	6820      	ldr	r0, [r4, #0]
 80094ae:	1821      	adds	r1, r4, r0
 80094b0:	428a      	cmp	r2, r1
 80094b2:	bf04      	itt	eq
 80094b4:	6811      	ldreq	r1, [r2, #0]
 80094b6:	6852      	ldreq	r2, [r2, #4]
 80094b8:	6062      	str	r2, [r4, #4]
 80094ba:	bf04      	itt	eq
 80094bc:	1809      	addeq	r1, r1, r0
 80094be:	6021      	streq	r1, [r4, #0]
 80094c0:	605c      	str	r4, [r3, #4]
 80094c2:	e7c7      	b.n	8009454 <_free_r+0x24>
 80094c4:	bd38      	pop	{r3, r4, r5, pc}
 80094c6:	bf00      	nop
 80094c8:	20000200 	.word	0x20000200

080094cc <_malloc_r>:
 80094cc:	b570      	push	{r4, r5, r6, lr}
 80094ce:	1ccd      	adds	r5, r1, #3
 80094d0:	f025 0503 	bic.w	r5, r5, #3
 80094d4:	3508      	adds	r5, #8
 80094d6:	2d0c      	cmp	r5, #12
 80094d8:	bf38      	it	cc
 80094da:	250c      	movcc	r5, #12
 80094dc:	2d00      	cmp	r5, #0
 80094de:	4606      	mov	r6, r0
 80094e0:	db01      	blt.n	80094e6 <_malloc_r+0x1a>
 80094e2:	42a9      	cmp	r1, r5
 80094e4:	d903      	bls.n	80094ee <_malloc_r+0x22>
 80094e6:	230c      	movs	r3, #12
 80094e8:	6033      	str	r3, [r6, #0]
 80094ea:	2000      	movs	r0, #0
 80094ec:	bd70      	pop	{r4, r5, r6, pc}
 80094ee:	f000 f903 	bl	80096f8 <__malloc_lock>
 80094f2:	4a21      	ldr	r2, [pc, #132]	; (8009578 <_malloc_r+0xac>)
 80094f4:	6814      	ldr	r4, [r2, #0]
 80094f6:	4621      	mov	r1, r4
 80094f8:	b991      	cbnz	r1, 8009520 <_malloc_r+0x54>
 80094fa:	4c20      	ldr	r4, [pc, #128]	; (800957c <_malloc_r+0xb0>)
 80094fc:	6823      	ldr	r3, [r4, #0]
 80094fe:	b91b      	cbnz	r3, 8009508 <_malloc_r+0x3c>
 8009500:	4630      	mov	r0, r6
 8009502:	f000 f83d 	bl	8009580 <_sbrk_r>
 8009506:	6020      	str	r0, [r4, #0]
 8009508:	4629      	mov	r1, r5
 800950a:	4630      	mov	r0, r6
 800950c:	f000 f838 	bl	8009580 <_sbrk_r>
 8009510:	1c43      	adds	r3, r0, #1
 8009512:	d124      	bne.n	800955e <_malloc_r+0x92>
 8009514:	230c      	movs	r3, #12
 8009516:	6033      	str	r3, [r6, #0]
 8009518:	4630      	mov	r0, r6
 800951a:	f000 f8ee 	bl	80096fa <__malloc_unlock>
 800951e:	e7e4      	b.n	80094ea <_malloc_r+0x1e>
 8009520:	680b      	ldr	r3, [r1, #0]
 8009522:	1b5b      	subs	r3, r3, r5
 8009524:	d418      	bmi.n	8009558 <_malloc_r+0x8c>
 8009526:	2b0b      	cmp	r3, #11
 8009528:	d90f      	bls.n	800954a <_malloc_r+0x7e>
 800952a:	600b      	str	r3, [r1, #0]
 800952c:	50cd      	str	r5, [r1, r3]
 800952e:	18cc      	adds	r4, r1, r3
 8009530:	4630      	mov	r0, r6
 8009532:	f000 f8e2 	bl	80096fa <__malloc_unlock>
 8009536:	f104 000b 	add.w	r0, r4, #11
 800953a:	1d23      	adds	r3, r4, #4
 800953c:	f020 0007 	bic.w	r0, r0, #7
 8009540:	1ac3      	subs	r3, r0, r3
 8009542:	d0d3      	beq.n	80094ec <_malloc_r+0x20>
 8009544:	425a      	negs	r2, r3
 8009546:	50e2      	str	r2, [r4, r3]
 8009548:	e7d0      	b.n	80094ec <_malloc_r+0x20>
 800954a:	428c      	cmp	r4, r1
 800954c:	684b      	ldr	r3, [r1, #4]
 800954e:	bf16      	itet	ne
 8009550:	6063      	strne	r3, [r4, #4]
 8009552:	6013      	streq	r3, [r2, #0]
 8009554:	460c      	movne	r4, r1
 8009556:	e7eb      	b.n	8009530 <_malloc_r+0x64>
 8009558:	460c      	mov	r4, r1
 800955a:	6849      	ldr	r1, [r1, #4]
 800955c:	e7cc      	b.n	80094f8 <_malloc_r+0x2c>
 800955e:	1cc4      	adds	r4, r0, #3
 8009560:	f024 0403 	bic.w	r4, r4, #3
 8009564:	42a0      	cmp	r0, r4
 8009566:	d005      	beq.n	8009574 <_malloc_r+0xa8>
 8009568:	1a21      	subs	r1, r4, r0
 800956a:	4630      	mov	r0, r6
 800956c:	f000 f808 	bl	8009580 <_sbrk_r>
 8009570:	3001      	adds	r0, #1
 8009572:	d0cf      	beq.n	8009514 <_malloc_r+0x48>
 8009574:	6025      	str	r5, [r4, #0]
 8009576:	e7db      	b.n	8009530 <_malloc_r+0x64>
 8009578:	20000200 	.word	0x20000200
 800957c:	20000204 	.word	0x20000204

08009580 <_sbrk_r>:
 8009580:	b538      	push	{r3, r4, r5, lr}
 8009582:	4c06      	ldr	r4, [pc, #24]	; (800959c <_sbrk_r+0x1c>)
 8009584:	2300      	movs	r3, #0
 8009586:	4605      	mov	r5, r0
 8009588:	4608      	mov	r0, r1
 800958a:	6023      	str	r3, [r4, #0]
 800958c:	f7f9 f8d8 	bl	8002740 <_sbrk>
 8009590:	1c43      	adds	r3, r0, #1
 8009592:	d102      	bne.n	800959a <_sbrk_r+0x1a>
 8009594:	6823      	ldr	r3, [r4, #0]
 8009596:	b103      	cbz	r3, 800959a <_sbrk_r+0x1a>
 8009598:	602b      	str	r3, [r5, #0]
 800959a:	bd38      	pop	{r3, r4, r5, pc}
 800959c:	200007ac 	.word	0x200007ac

080095a0 <__sread>:
 80095a0:	b510      	push	{r4, lr}
 80095a2:	460c      	mov	r4, r1
 80095a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095a8:	f000 f8a8 	bl	80096fc <_read_r>
 80095ac:	2800      	cmp	r0, #0
 80095ae:	bfab      	itete	ge
 80095b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80095b2:	89a3      	ldrhlt	r3, [r4, #12]
 80095b4:	181b      	addge	r3, r3, r0
 80095b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80095ba:	bfac      	ite	ge
 80095bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80095be:	81a3      	strhlt	r3, [r4, #12]
 80095c0:	bd10      	pop	{r4, pc}

080095c2 <__swrite>:
 80095c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095c6:	461f      	mov	r7, r3
 80095c8:	898b      	ldrh	r3, [r1, #12]
 80095ca:	05db      	lsls	r3, r3, #23
 80095cc:	4605      	mov	r5, r0
 80095ce:	460c      	mov	r4, r1
 80095d0:	4616      	mov	r6, r2
 80095d2:	d505      	bpl.n	80095e0 <__swrite+0x1e>
 80095d4:	2302      	movs	r3, #2
 80095d6:	2200      	movs	r2, #0
 80095d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095dc:	f000 f868 	bl	80096b0 <_lseek_r>
 80095e0:	89a3      	ldrh	r3, [r4, #12]
 80095e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095ea:	81a3      	strh	r3, [r4, #12]
 80095ec:	4632      	mov	r2, r6
 80095ee:	463b      	mov	r3, r7
 80095f0:	4628      	mov	r0, r5
 80095f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095f6:	f000 b817 	b.w	8009628 <_write_r>

080095fa <__sseek>:
 80095fa:	b510      	push	{r4, lr}
 80095fc:	460c      	mov	r4, r1
 80095fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009602:	f000 f855 	bl	80096b0 <_lseek_r>
 8009606:	1c43      	adds	r3, r0, #1
 8009608:	89a3      	ldrh	r3, [r4, #12]
 800960a:	bf15      	itete	ne
 800960c:	6560      	strne	r0, [r4, #84]	; 0x54
 800960e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009612:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009616:	81a3      	strheq	r3, [r4, #12]
 8009618:	bf18      	it	ne
 800961a:	81a3      	strhne	r3, [r4, #12]
 800961c:	bd10      	pop	{r4, pc}

0800961e <__sclose>:
 800961e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009622:	f000 b813 	b.w	800964c <_close_r>
	...

08009628 <_write_r>:
 8009628:	b538      	push	{r3, r4, r5, lr}
 800962a:	4c07      	ldr	r4, [pc, #28]	; (8009648 <_write_r+0x20>)
 800962c:	4605      	mov	r5, r0
 800962e:	4608      	mov	r0, r1
 8009630:	4611      	mov	r1, r2
 8009632:	2200      	movs	r2, #0
 8009634:	6022      	str	r2, [r4, #0]
 8009636:	461a      	mov	r2, r3
 8009638:	f7f9 f831 	bl	800269e <_write>
 800963c:	1c43      	adds	r3, r0, #1
 800963e:	d102      	bne.n	8009646 <_write_r+0x1e>
 8009640:	6823      	ldr	r3, [r4, #0]
 8009642:	b103      	cbz	r3, 8009646 <_write_r+0x1e>
 8009644:	602b      	str	r3, [r5, #0]
 8009646:	bd38      	pop	{r3, r4, r5, pc}
 8009648:	200007ac 	.word	0x200007ac

0800964c <_close_r>:
 800964c:	b538      	push	{r3, r4, r5, lr}
 800964e:	4c06      	ldr	r4, [pc, #24]	; (8009668 <_close_r+0x1c>)
 8009650:	2300      	movs	r3, #0
 8009652:	4605      	mov	r5, r0
 8009654:	4608      	mov	r0, r1
 8009656:	6023      	str	r3, [r4, #0]
 8009658:	f7f9 f83d 	bl	80026d6 <_close>
 800965c:	1c43      	adds	r3, r0, #1
 800965e:	d102      	bne.n	8009666 <_close_r+0x1a>
 8009660:	6823      	ldr	r3, [r4, #0]
 8009662:	b103      	cbz	r3, 8009666 <_close_r+0x1a>
 8009664:	602b      	str	r3, [r5, #0]
 8009666:	bd38      	pop	{r3, r4, r5, pc}
 8009668:	200007ac 	.word	0x200007ac

0800966c <_fstat_r>:
 800966c:	b538      	push	{r3, r4, r5, lr}
 800966e:	4c07      	ldr	r4, [pc, #28]	; (800968c <_fstat_r+0x20>)
 8009670:	2300      	movs	r3, #0
 8009672:	4605      	mov	r5, r0
 8009674:	4608      	mov	r0, r1
 8009676:	4611      	mov	r1, r2
 8009678:	6023      	str	r3, [r4, #0]
 800967a:	f7f9 f838 	bl	80026ee <_fstat>
 800967e:	1c43      	adds	r3, r0, #1
 8009680:	d102      	bne.n	8009688 <_fstat_r+0x1c>
 8009682:	6823      	ldr	r3, [r4, #0]
 8009684:	b103      	cbz	r3, 8009688 <_fstat_r+0x1c>
 8009686:	602b      	str	r3, [r5, #0]
 8009688:	bd38      	pop	{r3, r4, r5, pc}
 800968a:	bf00      	nop
 800968c:	200007ac 	.word	0x200007ac

08009690 <_isatty_r>:
 8009690:	b538      	push	{r3, r4, r5, lr}
 8009692:	4c06      	ldr	r4, [pc, #24]	; (80096ac <_isatty_r+0x1c>)
 8009694:	2300      	movs	r3, #0
 8009696:	4605      	mov	r5, r0
 8009698:	4608      	mov	r0, r1
 800969a:	6023      	str	r3, [r4, #0]
 800969c:	f7f9 f837 	bl	800270e <_isatty>
 80096a0:	1c43      	adds	r3, r0, #1
 80096a2:	d102      	bne.n	80096aa <_isatty_r+0x1a>
 80096a4:	6823      	ldr	r3, [r4, #0]
 80096a6:	b103      	cbz	r3, 80096aa <_isatty_r+0x1a>
 80096a8:	602b      	str	r3, [r5, #0]
 80096aa:	bd38      	pop	{r3, r4, r5, pc}
 80096ac:	200007ac 	.word	0x200007ac

080096b0 <_lseek_r>:
 80096b0:	b538      	push	{r3, r4, r5, lr}
 80096b2:	4c07      	ldr	r4, [pc, #28]	; (80096d0 <_lseek_r+0x20>)
 80096b4:	4605      	mov	r5, r0
 80096b6:	4608      	mov	r0, r1
 80096b8:	4611      	mov	r1, r2
 80096ba:	2200      	movs	r2, #0
 80096bc:	6022      	str	r2, [r4, #0]
 80096be:	461a      	mov	r2, r3
 80096c0:	f7f9 f830 	bl	8002724 <_lseek>
 80096c4:	1c43      	adds	r3, r0, #1
 80096c6:	d102      	bne.n	80096ce <_lseek_r+0x1e>
 80096c8:	6823      	ldr	r3, [r4, #0]
 80096ca:	b103      	cbz	r3, 80096ce <_lseek_r+0x1e>
 80096cc:	602b      	str	r3, [r5, #0]
 80096ce:	bd38      	pop	{r3, r4, r5, pc}
 80096d0:	200007ac 	.word	0x200007ac

080096d4 <__ascii_mbtowc>:
 80096d4:	b082      	sub	sp, #8
 80096d6:	b901      	cbnz	r1, 80096da <__ascii_mbtowc+0x6>
 80096d8:	a901      	add	r1, sp, #4
 80096da:	b142      	cbz	r2, 80096ee <__ascii_mbtowc+0x1a>
 80096dc:	b14b      	cbz	r3, 80096f2 <__ascii_mbtowc+0x1e>
 80096de:	7813      	ldrb	r3, [r2, #0]
 80096e0:	600b      	str	r3, [r1, #0]
 80096e2:	7812      	ldrb	r2, [r2, #0]
 80096e4:	1c10      	adds	r0, r2, #0
 80096e6:	bf18      	it	ne
 80096e8:	2001      	movne	r0, #1
 80096ea:	b002      	add	sp, #8
 80096ec:	4770      	bx	lr
 80096ee:	4610      	mov	r0, r2
 80096f0:	e7fb      	b.n	80096ea <__ascii_mbtowc+0x16>
 80096f2:	f06f 0001 	mvn.w	r0, #1
 80096f6:	e7f8      	b.n	80096ea <__ascii_mbtowc+0x16>

080096f8 <__malloc_lock>:
 80096f8:	4770      	bx	lr

080096fa <__malloc_unlock>:
 80096fa:	4770      	bx	lr

080096fc <_read_r>:
 80096fc:	b538      	push	{r3, r4, r5, lr}
 80096fe:	4c07      	ldr	r4, [pc, #28]	; (800971c <_read_r+0x20>)
 8009700:	4605      	mov	r5, r0
 8009702:	4608      	mov	r0, r1
 8009704:	4611      	mov	r1, r2
 8009706:	2200      	movs	r2, #0
 8009708:	6022      	str	r2, [r4, #0]
 800970a:	461a      	mov	r2, r3
 800970c:	f7f8 ffaa 	bl	8002664 <_read>
 8009710:	1c43      	adds	r3, r0, #1
 8009712:	d102      	bne.n	800971a <_read_r+0x1e>
 8009714:	6823      	ldr	r3, [r4, #0]
 8009716:	b103      	cbz	r3, 800971a <_read_r+0x1e>
 8009718:	602b      	str	r3, [r5, #0]
 800971a:	bd38      	pop	{r3, r4, r5, pc}
 800971c:	200007ac 	.word	0x200007ac

08009720 <__ascii_wctomb>:
 8009720:	b149      	cbz	r1, 8009736 <__ascii_wctomb+0x16>
 8009722:	2aff      	cmp	r2, #255	; 0xff
 8009724:	bf85      	ittet	hi
 8009726:	238a      	movhi	r3, #138	; 0x8a
 8009728:	6003      	strhi	r3, [r0, #0]
 800972a:	700a      	strbls	r2, [r1, #0]
 800972c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009730:	bf98      	it	ls
 8009732:	2001      	movls	r0, #1
 8009734:	4770      	bx	lr
 8009736:	4608      	mov	r0, r1
 8009738:	4770      	bx	lr
	...

0800973c <_init>:
 800973c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800973e:	bf00      	nop
 8009740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009742:	bc08      	pop	{r3}
 8009744:	469e      	mov	lr, r3
 8009746:	4770      	bx	lr

08009748 <_fini>:
 8009748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800974a:	bf00      	nop
 800974c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800974e:	bc08      	pop	{r3}
 8009750:	469e      	mov	lr, r3
 8009752:	4770      	bx	lr
