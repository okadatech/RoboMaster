
F446_Saramander_Sentry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094bc  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08009688  08009688  00019688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009940  08009940  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009940  08009940  00019940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009948  08009948  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009948  08009948  00019948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800994c  0800994c  0001994c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d0  200001dc  08009b2c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007ac  08009b2c  000207ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013930  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d88  00000000  00000000  00033b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001008  00000000  00000000  000368c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e80  00000000  00000000  000378d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002442b  00000000  00000000  00038750  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e1e5  00000000  00000000  0005cb7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3ad8  00000000  00000000  0006ad60  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013e838  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e38  00000000  00000000  0013e8b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001dc 	.word	0x200001dc
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800966c 	.word	0x0800966c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001e0 	.word	0x200001e0
 8000204:	0800966c 	.word	0x0800966c

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b972 	b.w	8000edc <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9e08      	ldr	r6, [sp, #32]
 8000c16:	4604      	mov	r4, r0
 8000c18:	4688      	mov	r8, r1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d14b      	bne.n	8000cb6 <__udivmoddi4+0xa6>
 8000c1e:	428a      	cmp	r2, r1
 8000c20:	4615      	mov	r5, r2
 8000c22:	d967      	bls.n	8000cf4 <__udivmoddi4+0xe4>
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	b14a      	cbz	r2, 8000c3e <__udivmoddi4+0x2e>
 8000c2a:	f1c2 0720 	rsb	r7, r2, #32
 8000c2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c32:	fa20 f707 	lsr.w	r7, r0, r7
 8000c36:	4095      	lsls	r5, r2
 8000c38:	ea47 0803 	orr.w	r8, r7, r3
 8000c3c:	4094      	lsls	r4, r2
 8000c3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c42:	0c23      	lsrs	r3, r4, #16
 8000c44:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c48:	fa1f fc85 	uxth.w	ip, r5
 8000c4c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c50:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c54:	fb07 f10c 	mul.w	r1, r7, ip
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	d909      	bls.n	8000c70 <__udivmoddi4+0x60>
 8000c5c:	18eb      	adds	r3, r5, r3
 8000c5e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c62:	f080 811b 	bcs.w	8000e9c <__udivmoddi4+0x28c>
 8000c66:	4299      	cmp	r1, r3
 8000c68:	f240 8118 	bls.w	8000e9c <__udivmoddi4+0x28c>
 8000c6c:	3f02      	subs	r7, #2
 8000c6e:	442b      	add	r3, r5
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c80:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c84:	45a4      	cmp	ip, r4
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x8c>
 8000c88:	192c      	adds	r4, r5, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	f080 8107 	bcs.w	8000ea0 <__udivmoddi4+0x290>
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	f240 8104 	bls.w	8000ea0 <__udivmoddi4+0x290>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	442c      	add	r4, r5
 8000c9c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca0:	eba4 040c 	sub.w	r4, r4, ip
 8000ca4:	2700      	movs	r7, #0
 8000ca6:	b11e      	cbz	r6, 8000cb0 <__udivmoddi4+0xa0>
 8000ca8:	40d4      	lsrs	r4, r2
 8000caa:	2300      	movs	r3, #0
 8000cac:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d909      	bls.n	8000cce <__udivmoddi4+0xbe>
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	f000 80eb 	beq.w	8000e96 <__udivmoddi4+0x286>
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	e9c6 0100 	strd	r0, r1, [r6]
 8000cc6:	4638      	mov	r0, r7
 8000cc8:	4639      	mov	r1, r7
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	fab3 f783 	clz	r7, r3
 8000cd2:	2f00      	cmp	r7, #0
 8000cd4:	d147      	bne.n	8000d66 <__udivmoddi4+0x156>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xd0>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 80fa 	bhi.w	8000ed4 <__udivmoddi4+0x2c4>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4698      	mov	r8, r3
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d0e0      	beq.n	8000cb0 <__udivmoddi4+0xa0>
 8000cee:	e9c6 4800 	strd	r4, r8, [r6]
 8000cf2:	e7dd      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000cf4:	b902      	cbnz	r2, 8000cf8 <__udivmoddi4+0xe8>
 8000cf6:	deff      	udf	#255	; 0xff
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	2a00      	cmp	r2, #0
 8000cfe:	f040 808f 	bne.w	8000e20 <__udivmoddi4+0x210>
 8000d02:	1b49      	subs	r1, r1, r5
 8000d04:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d08:	fa1f f885 	uxth.w	r8, r5
 8000d0c:	2701      	movs	r7, #1
 8000d0e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d12:	0c23      	lsrs	r3, r4, #16
 8000d14:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb08 f10c 	mul.w	r1, r8, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x124>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x122>
 8000d2c:	4299      	cmp	r1, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2bc>
 8000d32:	4684      	mov	ip, r0
 8000d34:	1a59      	subs	r1, r3, r1
 8000d36:	b2a3      	uxth	r3, r4
 8000d38:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d3c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d40:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d44:	fb08 f800 	mul.w	r8, r8, r0
 8000d48:	45a0      	cmp	r8, r4
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x14c>
 8000d4c:	192c      	adds	r4, r5, r4
 8000d4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x14a>
 8000d54:	45a0      	cmp	r8, r4
 8000d56:	f200 80b6 	bhi.w	8000ec6 <__udivmoddi4+0x2b6>
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	eba4 0408 	sub.w	r4, r4, r8
 8000d60:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d64:	e79f      	b.n	8000ca6 <__udivmoddi4+0x96>
 8000d66:	f1c7 0c20 	rsb	ip, r7, #32
 8000d6a:	40bb      	lsls	r3, r7
 8000d6c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d70:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d74:	fa01 f407 	lsl.w	r4, r1, r7
 8000d78:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d7c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d80:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d84:	4325      	orrs	r5, r4
 8000d86:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d8a:	0c2c      	lsrs	r4, r5, #16
 8000d8c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d90:	fa1f fa8e 	uxth.w	sl, lr
 8000d94:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d98:	fb09 f40a 	mul.w	r4, r9, sl
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	fa02 f207 	lsl.w	r2, r2, r7
 8000da2:	fa00 f107 	lsl.w	r1, r0, r7
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b0>
 8000da8:	eb1e 0303 	adds.w	r3, lr, r3
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db0:	f080 8087 	bcs.w	8000ec2 <__udivmoddi4+0x2b2>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f240 8084 	bls.w	8000ec2 <__udivmoddi4+0x2b2>
 8000dba:	f1a9 0902 	sub.w	r9, r9, #2
 8000dbe:	4473      	add	r3, lr
 8000dc0:	1b1b      	subs	r3, r3, r4
 8000dc2:	b2ad      	uxth	r5, r5
 8000dc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000dcc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dd4:	45a2      	cmp	sl, r4
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1da>
 8000dd8:	eb1e 0404 	adds.w	r4, lr, r4
 8000ddc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de0:	d26b      	bcs.n	8000eba <__udivmoddi4+0x2aa>
 8000de2:	45a2      	cmp	sl, r4
 8000de4:	d969      	bls.n	8000eba <__udivmoddi4+0x2aa>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4474      	add	r4, lr
 8000dea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	eba4 040a 	sub.w	r4, r4, sl
 8000df6:	454c      	cmp	r4, r9
 8000df8:	46c2      	mov	sl, r8
 8000dfa:	464b      	mov	r3, r9
 8000dfc:	d354      	bcc.n	8000ea8 <__udivmoddi4+0x298>
 8000dfe:	d051      	beq.n	8000ea4 <__udivmoddi4+0x294>
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d069      	beq.n	8000ed8 <__udivmoddi4+0x2c8>
 8000e04:	ebb1 050a 	subs.w	r5, r1, sl
 8000e08:	eb64 0403 	sbc.w	r4, r4, r3
 8000e0c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e10:	40fd      	lsrs	r5, r7
 8000e12:	40fc      	lsrs	r4, r7
 8000e14:	ea4c 0505 	orr.w	r5, ip, r5
 8000e18:	e9c6 5400 	strd	r5, r4, [r6]
 8000e1c:	2700      	movs	r7, #0
 8000e1e:	e747      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e20:	f1c2 0320 	rsb	r3, r2, #32
 8000e24:	fa20 f703 	lsr.w	r7, r0, r3
 8000e28:	4095      	lsls	r5, r2
 8000e2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2e:	fa21 f303 	lsr.w	r3, r1, r3
 8000e32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e36:	4338      	orrs	r0, r7
 8000e38:	0c01      	lsrs	r1, r0, #16
 8000e3a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e3e:	fa1f f885 	uxth.w	r8, r5
 8000e42:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4a:	fb07 f308 	mul.w	r3, r7, r8
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x256>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e5c:	d22f      	bcs.n	8000ebe <__udivmoddi4+0x2ae>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d92d      	bls.n	8000ebe <__udivmoddi4+0x2ae>
 8000e62:	3f02      	subs	r7, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1acb      	subs	r3, r1, r3
 8000e68:	b281      	uxth	r1, r0
 8000e6a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e76:	fb00 f308 	mul.w	r3, r0, r8
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x27e>
 8000e7e:	1869      	adds	r1, r5, r1
 8000e80:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e84:	d217      	bcs.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d915      	bls.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	4429      	add	r1, r5
 8000e8e:	1ac9      	subs	r1, r1, r3
 8000e90:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e94:	e73b      	b.n	8000d0e <__udivmoddi4+0xfe>
 8000e96:	4637      	mov	r7, r6
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e709      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e9c:	4607      	mov	r7, r0
 8000e9e:	e6e7      	b.n	8000c70 <__udivmoddi4+0x60>
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	e6fb      	b.n	8000c9c <__udivmoddi4+0x8c>
 8000ea4:	4541      	cmp	r1, r8
 8000ea6:	d2ab      	bcs.n	8000e00 <__udivmoddi4+0x1f0>
 8000ea8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eac:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb0:	3801      	subs	r0, #1
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	e7a4      	b.n	8000e00 <__udivmoddi4+0x1f0>
 8000eb6:	4660      	mov	r0, ip
 8000eb8:	e7e9      	b.n	8000e8e <__udivmoddi4+0x27e>
 8000eba:	4618      	mov	r0, r3
 8000ebc:	e795      	b.n	8000dea <__udivmoddi4+0x1da>
 8000ebe:	4667      	mov	r7, ip
 8000ec0:	e7d1      	b.n	8000e66 <__udivmoddi4+0x256>
 8000ec2:	4681      	mov	r9, r0
 8000ec4:	e77c      	b.n	8000dc0 <__udivmoddi4+0x1b0>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	442c      	add	r4, r5
 8000eca:	e747      	b.n	8000d5c <__udivmoddi4+0x14c>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	442b      	add	r3, r5
 8000ed2:	e72f      	b.n	8000d34 <__udivmoddi4+0x124>
 8000ed4:	4638      	mov	r0, r7
 8000ed6:	e708      	b.n	8000cea <__udivmoddi4+0xda>
 8000ed8:	4637      	mov	r7, r6
 8000eda:	e6e9      	b.n	8000cb0 <__udivmoddi4+0xa0>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <Synchronize>:
const uint8_t SUB_ST_COMMND= 0x01;
const uint8_t SUB_SP_COMMND= 0x02;


int Synchronize(uint8_t *txBuff, size_t txLength, uint8_t *rxBuff, size_t rxLength)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
 8000eec:	603b      	str	r3, [r7, #0]
  int size=0; //受信したbyte数
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_11,1);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ef8:	4818      	ldr	r0, [pc, #96]	; (8000f5c <Synchronize+0x7c>)
 8000efa:	f003 fed3 	bl	8004ca4 <HAL_GPIO_WritePin>
  HAL_UART_Transmit(&huart5,(uint8_t*)txBuff, txLength,20);
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	2314      	movs	r3, #20
 8000f04:	68f9      	ldr	r1, [r7, #12]
 8000f06:	4816      	ldr	r0, [pc, #88]	; (8000f60 <Synchronize+0x80>)
 8000f08:	f005 fb31 	bl	800656e <HAL_UART_Transmit>
  while(HAL_UART_GetState(&huart5)==HAL_UART_STATE_BUSY_TX){}
 8000f0c:	bf00      	nop
 8000f0e:	4814      	ldr	r0, [pc, #80]	; (8000f60 <Synchronize+0x80>)
 8000f10:	f005 fd00 	bl	8006914 <HAL_UART_GetState>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b21      	cmp	r3, #33	; 0x21
 8000f18:	d0f9      	beq.n	8000f0e <Synchronize+0x2e>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_11,0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f20:	480e      	ldr	r0, [pc, #56]	; (8000f5c <Synchronize+0x7c>)
 8000f22:	f003 febf 	bl	8004ca4 <HAL_GPIO_WritePin>
  size= HAL_UART_Receive(&huart5,(uint8_t*)rxBuff, rxLength,20);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	2314      	movs	r3, #20
 8000f2c:	6879      	ldr	r1, [r7, #4]
 8000f2e:	480c      	ldr	r0, [pc, #48]	; (8000f60 <Synchronize+0x80>)
 8000f30:	f005 fbb6 	bl	80066a0 <HAL_UART_Receive>
 8000f34:	4603      	mov	r3, r0
 8000f36:	617b      	str	r3, [r7, #20]
  while(HAL_UART_GetState(&huart5)==HAL_UART_STATE_BUSY_RX){}
 8000f38:	bf00      	nop
 8000f3a:	4809      	ldr	r0, [pc, #36]	; (8000f60 <Synchronize+0x80>)
 8000f3c:	f005 fcea 	bl	8006914 <HAL_UART_GetState>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b22      	cmp	r3, #34	; 0x22
 8000f44:	d0f9      	beq.n	8000f3a <Synchronize+0x5a>
  if (size != HAL_OK) //指定した受信数かどうか確認
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <Synchronize+0x70>
  {
    return 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	e000      	b.n	8000f52 <Synchronize+0x72>
  }
  return 1;
 8000f50:	2301      	movs	r3, #1
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40020800 	.word	0x40020800
 8000f60:	200006a4 	.word	0x200006a4

08000f64 <ics_set_pos>:

int ics_set_pos(uint8_t id,unsigned short pos)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	460a      	mov	r2, r1
 8000f6e:	71fb      	strb	r3, [r7, #7]
 8000f70:	4613      	mov	r3, r2
 8000f72:	80bb      	strh	r3, [r7, #4]
  uint8_t tx_data[3];
  uint8_t rx_data[3];
  int flag;
  int rAngle;   //受信した角度データ
  /// 送信コマンドを作成
  tx_data[0] = ICS_POS_CMD + id;
 8000f74:	2280      	movs	r2, #128	; 0x80
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	4413      	add	r3, r2
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	733b      	strb	r3, [r7, #12]
  tx_data[1] = (uint8_t)((pos & 0x3F80) >> 7);
 8000f7e:	88bb      	ldrh	r3, [r7, #4]
 8000f80:	11db      	asrs	r3, r3, #7
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	737b      	strb	r3, [r7, #13]
  tx_data[2] = (uint8_t)(pos & 0x007F);
 8000f8c:	88bb      	ldrh	r3, [r7, #4]
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	73bb      	strb	r3, [r7, #14]

  //送受信を行う
  flag = Synchronize(tx_data,3,rx_data,3);
 8000f98:	f107 0208 	add.w	r2, r7, #8
 8000f9c:	f107 000c 	add.w	r0, r7, #12
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	2103      	movs	r1, #3
 8000fa4:	f7ff ff9c 	bl	8000ee0 <Synchronize>
 8000fa8:	6178      	str	r0, [r7, #20]

  if(flag == 0) //失敗した場合は-1を返す
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d102      	bne.n	8000fb6 <ics_set_pos+0x52>
  {
    return -1;
 8000fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb4:	e009      	b.n	8000fca <ics_set_pos+0x66>
  }

  rAngle = ((rx_data[1] << 7) & 0x3F80) + (rx_data[2] & 0x007F);
 8000fb6:	7a7b      	ldrb	r3, [r7, #9]
 8000fb8:	01db      	lsls	r3, r3, #7
 8000fba:	f403 527e 	and.w	r2, r3, #16256	; 0x3f80
 8000fbe:	7abb      	ldrb	r3, [r7, #10]
 8000fc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]

  return rAngle;
 8000fc8:	693b      	ldr	r3, [r7, #16]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <MX_CAN1_Init+0x64>)
 8000fda:	4a18      	ldr	r2, [pc, #96]	; (800103c <MX_CAN1_Init+0x68>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 8000fde:	4b16      	ldr	r3, [pc, #88]	; (8001038 <MX_CAN1_Init+0x64>)
 8000fe0:	2207      	movs	r2, #7
 8000fe2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <MX_CAN1_Init+0x64>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <MX_CAN1_Init+0x64>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_CAN1_Init+0x64>)
 8000ff2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ff6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <MX_CAN1_Init+0x64>)
 8000ffa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ffe:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001000:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <MX_CAN1_Init+0x64>)
 8001002:	2200      	movs	r2, #0
 8001004:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_CAN1_Init+0x64>)
 8001008:	2200      	movs	r2, #0
 800100a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <MX_CAN1_Init+0x64>)
 800100e:	2200      	movs	r2, #0
 8001010:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_CAN1_Init+0x64>)
 8001014:	2200      	movs	r2, #0
 8001016:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001018:	4b07      	ldr	r3, [pc, #28]	; (8001038 <MX_CAN1_Init+0x64>)
 800101a:	2200      	movs	r2, #0
 800101c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_CAN1_Init+0x64>)
 8001020:	2200      	movs	r2, #0
 8001022:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001024:	4804      	ldr	r0, [pc, #16]	; (8001038 <MX_CAN1_Init+0x64>)
 8001026:	f002 f9b7 	bl	8003398 <HAL_CAN_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001030:	f001 f86e 	bl	8002110 <Error_Handler>
  }

}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000490 	.word	0x20000490
 800103c:	40006400 	.word	0x40006400

08001040 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <MX_CAN2_Init+0x64>)
 8001046:	4a18      	ldr	r2, [pc, #96]	; (80010a8 <MX_CAN2_Init+0x68>)
 8001048:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 7;
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <MX_CAN2_Init+0x64>)
 800104c:	2207      	movs	r2, #7
 800104e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_CAN2_Init+0x64>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <MX_CAN2_Init+0x64>)
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_CAN2_Init+0x64>)
 800105e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001062:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_CAN2_Init+0x64>)
 8001066:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800106a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800106c:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <MX_CAN2_Init+0x64>)
 800106e:	2200      	movs	r2, #0
 8001070:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_CAN2_Init+0x64>)
 8001074:	2200      	movs	r2, #0
 8001076:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <MX_CAN2_Init+0x64>)
 800107a:	2200      	movs	r2, #0
 800107c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_CAN2_Init+0x64>)
 8001080:	2200      	movs	r2, #0
 8001082:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <MX_CAN2_Init+0x64>)
 8001086:	2200      	movs	r2, #0
 8001088:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <MX_CAN2_Init+0x64>)
 800108c:	2200      	movs	r2, #0
 800108e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001090:	4804      	ldr	r0, [pc, #16]	; (80010a4 <MX_CAN2_Init+0x64>)
 8001092:	f002 f981 	bl	8003398 <HAL_CAN_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 800109c:	f001 f838 	bl	8002110 <Error_Handler>
  }

}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000468 	.word	0x20000468
 80010a8:	40006800 	.word	0x40006800

080010ac <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08c      	sub	sp, #48	; 0x30
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a53      	ldr	r2, [pc, #332]	; (8001218 <HAL_CAN_MspInit+0x16c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d146      	bne.n	800115c <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80010ce:	4b53      	ldr	r3, [pc, #332]	; (800121c <HAL_CAN_MspInit+0x170>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	3301      	adds	r3, #1
 80010d4:	4a51      	ldr	r2, [pc, #324]	; (800121c <HAL_CAN_MspInit+0x170>)
 80010d6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80010d8:	4b50      	ldr	r3, [pc, #320]	; (800121c <HAL_CAN_MspInit+0x170>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d10d      	bne.n	80010fc <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80010e0:	2300      	movs	r3, #0
 80010e2:	61bb      	str	r3, [r7, #24]
 80010e4:	4b4e      	ldr	r3, [pc, #312]	; (8001220 <HAL_CAN_MspInit+0x174>)
 80010e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e8:	4a4d      	ldr	r2, [pc, #308]	; (8001220 <HAL_CAN_MspInit+0x174>)
 80010ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010ee:	6413      	str	r3, [r2, #64]	; 0x40
 80010f0:	4b4b      	ldr	r3, [pc, #300]	; (8001220 <HAL_CAN_MspInit+0x174>)
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010f8:	61bb      	str	r3, [r7, #24]
 80010fa:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	4b47      	ldr	r3, [pc, #284]	; (8001220 <HAL_CAN_MspInit+0x174>)
 8001102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001104:	4a46      	ldr	r2, [pc, #280]	; (8001220 <HAL_CAN_MspInit+0x174>)
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	6313      	str	r3, [r2, #48]	; 0x30
 800110c:	4b44      	ldr	r3, [pc, #272]	; (8001220 <HAL_CAN_MspInit+0x174>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001118:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800111c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001126:	2303      	movs	r3, #3
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800112a:	2309      	movs	r3, #9
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	4619      	mov	r1, r3
 8001134:	483b      	ldr	r0, [pc, #236]	; (8001224 <HAL_CAN_MspInit+0x178>)
 8001136:	f003 fc0b 	bl	8004950 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2101      	movs	r1, #1
 800113e:	2014      	movs	r0, #20
 8001140:	f003 f861 	bl	8004206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001144:	2014      	movs	r0, #20
 8001146:	f003 f87a 	bl	800423e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 2, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2102      	movs	r1, #2
 800114e:	2015      	movs	r0, #21
 8001150:	f003 f859 	bl	8004206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001154:	2015      	movs	r0, #21
 8001156:	f003 f872 	bl	800423e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800115a:	e058      	b.n	800120e <HAL_CAN_MspInit+0x162>
  else if(canHandle->Instance==CAN2)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a31      	ldr	r2, [pc, #196]	; (8001228 <HAL_CAN_MspInit+0x17c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d153      	bne.n	800120e <HAL_CAN_MspInit+0x162>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <HAL_CAN_MspInit+0x174>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	4a2c      	ldr	r2, [pc, #176]	; (8001220 <HAL_CAN_MspInit+0x174>)
 8001170:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001174:	6413      	str	r3, [r2, #64]	; 0x40
 8001176:	4b2a      	ldr	r3, [pc, #168]	; (8001220 <HAL_CAN_MspInit+0x174>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001182:	4b26      	ldr	r3, [pc, #152]	; (800121c <HAL_CAN_MspInit+0x170>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	3301      	adds	r3, #1
 8001188:	4a24      	ldr	r2, [pc, #144]	; (800121c <HAL_CAN_MspInit+0x170>)
 800118a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800118c:	4b23      	ldr	r3, [pc, #140]	; (800121c <HAL_CAN_MspInit+0x170>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d10d      	bne.n	80011b0 <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	4b21      	ldr	r3, [pc, #132]	; (8001220 <HAL_CAN_MspInit+0x174>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	4a20      	ldr	r2, [pc, #128]	; (8001220 <HAL_CAN_MspInit+0x174>)
 800119e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011a2:	6413      	str	r3, [r2, #64]	; 0x40
 80011a4:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <HAL_CAN_MspInit+0x174>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b0:	2300      	movs	r3, #0
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <HAL_CAN_MspInit+0x174>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b8:	4a19      	ldr	r2, [pc, #100]	; (8001220 <HAL_CAN_MspInit+0x174>)
 80011ba:	f043 0302 	orr.w	r3, r3, #2
 80011be:	6313      	str	r3, [r2, #48]	; 0x30
 80011c0:	4b17      	ldr	r3, [pc, #92]	; (8001220 <HAL_CAN_MspInit+0x174>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80011cc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011da:	2303      	movs	r3, #3
 80011dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80011de:	2309      	movs	r3, #9
 80011e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	4619      	mov	r1, r3
 80011e8:	4810      	ldr	r0, [pc, #64]	; (800122c <HAL_CAN_MspInit+0x180>)
 80011ea:	f003 fbb1 	bl	8004950 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 3, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2103      	movs	r1, #3
 80011f2:	2040      	movs	r0, #64	; 0x40
 80011f4:	f003 f807 	bl	8004206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80011f8:	2040      	movs	r0, #64	; 0x40
 80011fa:	f003 f820 	bl	800423e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 4, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2104      	movs	r1, #4
 8001202:	2041      	movs	r0, #65	; 0x41
 8001204:	f002 ffff 	bl	8004206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001208:	2041      	movs	r0, #65	; 0x41
 800120a:	f003 f818 	bl	800423e <HAL_NVIC_EnableIRQ>
}
 800120e:	bf00      	nop
 8001210:	3730      	adds	r7, #48	; 0x30
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40006400 	.word	0x40006400
 800121c:	200001f8 	.word	0x200001f8
 8001220:	40023800 	.word	0x40023800
 8001224:	40020000 	.word	0x40020000
 8001228:	40006800 	.word	0x40006800
 800122c:	40020400 	.word	0x40020400

08001230 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <MX_DMA_Init+0x3c>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a0b      	ldr	r2, [pc, #44]	; (800126c <MX_DMA_Init+0x3c>)
 8001240:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_DMA_Init+0x3c>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2105      	movs	r1, #5
 8001256:	200c      	movs	r0, #12
 8001258:	f002 ffd5 	bl	8004206 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800125c:	200c      	movs	r0, #12
 800125e:	f002 ffee 	bl	800423e <HAL_NVIC_EnableIRQ>

}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800

08001270 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	; 0x28
 8001274:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	4b57      	ldr	r3, [pc, #348]	; (80013e8 <MX_GPIO_Init+0x178>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a56      	ldr	r2, [pc, #344]	; (80013e8 <MX_GPIO_Init+0x178>)
 8001290:	f043 0304 	orr.w	r3, r3, #4
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b54      	ldr	r3, [pc, #336]	; (80013e8 <MX_GPIO_Init+0x178>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	4b50      	ldr	r3, [pc, #320]	; (80013e8 <MX_GPIO_Init+0x178>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a4f      	ldr	r2, [pc, #316]	; (80013e8 <MX_GPIO_Init+0x178>)
 80012ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b4d      	ldr	r3, [pc, #308]	; (80013e8 <MX_GPIO_Init+0x178>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	4b49      	ldr	r3, [pc, #292]	; (80013e8 <MX_GPIO_Init+0x178>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a48      	ldr	r2, [pc, #288]	; (80013e8 <MX_GPIO_Init+0x178>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b46      	ldr	r3, [pc, #280]	; (80013e8 <MX_GPIO_Init+0x178>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	4b42      	ldr	r3, [pc, #264]	; (80013e8 <MX_GPIO_Init+0x178>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a41      	ldr	r2, [pc, #260]	; (80013e8 <MX_GPIO_Init+0x178>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b3f      	ldr	r3, [pc, #252]	; (80013e8 <MX_GPIO_Init+0x178>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	603b      	str	r3, [r7, #0]
 80012fa:	4b3b      	ldr	r3, [pc, #236]	; (80013e8 <MX_GPIO_Init+0x178>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a3a      	ldr	r2, [pc, #232]	; (80013e8 <MX_GPIO_Init+0x178>)
 8001300:	f043 0308 	orr.w	r3, r3, #8
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b38      	ldr	r3, [pc, #224]	; (80013e8 <MX_GPIO_Init+0x178>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	f248 0120 	movw	r1, #32800	; 0x8020
 8001318:	4834      	ldr	r0, [pc, #208]	; (80013ec <MX_GPIO_Init+0x17c>)
 800131a:	f003 fcc3 	bl	8004ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001324:	4832      	ldr	r0, [pc, #200]	; (80013f0 <MX_GPIO_Init+0x180>)
 8001326:	f003 fcbd 	bl	8004ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001330:	4830      	ldr	r0, [pc, #192]	; (80013f4 <MX_GPIO_Init+0x184>)
 8001332:	f003 fcb7 	bl	8004ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0 
                           PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8001336:	f24e 0303 	movw	r3, #57347	; 0xe003
 800133a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133c:	2300      	movs	r3, #0
 800133e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	4619      	mov	r1, r3
 800134a:	482a      	ldr	r0, [pc, #168]	; (80013f4 <MX_GPIO_Init+0x184>)
 800134c:	f003 fb00 	bl	8004950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 8001350:	f248 0320 	movw	r3, #32800	; 0x8020
 8001354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	2301      	movs	r3, #1
 8001358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	4820      	ldr	r0, [pc, #128]	; (80013ec <MX_GPIO_Init+0x17c>)
 800136a:	f003 faf1 	bl	8004950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800136e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001374:	2301      	movs	r3, #1
 8001376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4619      	mov	r1, r3
 8001386:	481a      	ldr	r0, [pc, #104]	; (80013f0 <MX_GPIO_Init+0x180>)
 8001388:	f003 fae2 	bl	8004950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800138c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001392:	2300      	movs	r3, #0
 8001394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	4812      	ldr	r0, [pc, #72]	; (80013ec <MX_GPIO_Init+0x17c>)
 80013a2:	f003 fad5 	bl	8004950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013a6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	480d      	ldr	r0, [pc, #52]	; (80013f4 <MX_GPIO_Init+0x184>)
 80013c0:	f003 fac6 	bl	8004950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 80013c4:	f44f 734c 	mov.w	r3, #816	; 0x330
 80013c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	4619      	mov	r1, r3
 80013d8:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_GPIO_Init+0x180>)
 80013da:	f003 fab9 	bl	8004950 <HAL_GPIO_Init>

}
 80013de:	bf00      	nop
 80013e0:	3728      	adds	r7, #40	; 0x28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020000 	.word	0x40020000
 80013f0:	40020400 	.word	0x40020400
 80013f4:	40020800 	.word	0x40020800

080013f8 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
HAL_UART_Transmit(&huart1, &ch, 1, 1);
 8001402:	1df9      	adds	r1, r7, #7
 8001404:	2301      	movs	r3, #1
 8001406:	2201      	movs	r2, #1
 8001408:	4803      	ldr	r0, [pc, #12]	; (8001418 <__io_putchar+0x20>)
 800140a:	f005 f8b0 	bl	800656e <HAL_UART_Transmit>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200006e4 	.word	0x200006e4

0800141c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800141c:	b598      	push	{r3, r4, r7, lr}
 800141e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001420:	f001 ff26 	bl	8003270 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001424:	f000 f924 	bl	8001670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001428:	f7ff ff22 	bl	8001270 <MX_GPIO_Init>
  MX_DMA_Init();
 800142c:	f7ff ff00 	bl	8001230 <MX_DMA_Init>
  MX_CAN1_Init();
 8001430:	f7ff fdd0 	bl	8000fd4 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001434:	f7ff fe04 	bl	8001040 <MX_CAN2_Init>
  MX_TIM1_Init();
 8001438:	f001 f95e 	bl	80026f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800143c:	f001 f9b2 	bl	80027a4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001440:	f001 fa02 	bl	8002848 <MX_TIM3_Init>
  MX_TIM7_Init();
 8001444:	f001 fa6e 	bl	8002924 <MX_TIM7_Init>
  MX_TIM8_Init();
 8001448:	f001 fa9e 	bl	8002988 <MX_TIM8_Init>
  MX_UART5_Init();
 800144c:	f001 fc7e 	bl	8002d4c <MX_UART5_Init>
  MX_USART1_UART_Init();
 8001450:	f001 fca8 	bl	8002da4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001454:	f001 fcd0 	bl	8002df8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001458:	f001 fcf8 	bl	8002e4c <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800145c:	f001 fd20 	bl	8002ea0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  setbuf(stdout, NULL);
 8001460:	4b70      	ldr	r3, [pc, #448]	; (8001624 <main+0x208>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f006 fad7 	bl	8007a1c <setbuf>
  sConfigOC.Pulse = 1500;
 800146e:	4b6e      	ldr	r3, [pc, #440]	; (8001628 <main+0x20c>)
 8001470:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001474:	605a      	str	r2, [r3, #4]
  HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3);
 8001476:	2208      	movs	r2, #8
 8001478:	496b      	ldr	r1, [pc, #428]	; (8001628 <main+0x20c>)
 800147a:	486c      	ldr	r0, [pc, #432]	; (800162c <main+0x210>)
 800147c:	f004 fbe4 	bl	8005c48 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001480:	2108      	movs	r1, #8
 8001482:	486a      	ldr	r0, [pc, #424]	; (800162c <main+0x210>)
 8001484:	f004 f9d0 	bl	8005828 <HAL_TIM_PWM_Start>
  sConfigOC.Pulse = 1500;
 8001488:	4b67      	ldr	r3, [pc, #412]	; (8001628 <main+0x20c>)
 800148a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800148e:	605a      	str	r2, [r3, #4]
  HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4);
 8001490:	220c      	movs	r2, #12
 8001492:	4965      	ldr	r1, [pc, #404]	; (8001628 <main+0x20c>)
 8001494:	4865      	ldr	r0, [pc, #404]	; (800162c <main+0x210>)
 8001496:	f004 fbd7 	bl	8005c48 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 800149a:	210c      	movs	r1, #12
 800149c:	4863      	ldr	r0, [pc, #396]	; (800162c <main+0x210>)
 800149e:	f004 f9c3 	bl	8005828 <HAL_TIM_PWM_Start>
  sConfigOC.Pulse = 1500;
 80014a2:	4b61      	ldr	r3, [pc, #388]	; (8001628 <main+0x20c>)
 80014a4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80014a8:	605a      	str	r2, [r3, #4]
  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 80014aa:	2200      	movs	r2, #0
 80014ac:	495e      	ldr	r1, [pc, #376]	; (8001628 <main+0x20c>)
 80014ae:	4860      	ldr	r0, [pc, #384]	; (8001630 <main+0x214>)
 80014b0:	f004 fbca 	bl	8005c48 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80014b4:	2100      	movs	r1, #0
 80014b6:	485e      	ldr	r0, [pc, #376]	; (8001630 <main+0x214>)
 80014b8:	f004 f9b6 	bl	8005828 <HAL_TIM_PWM_Start>
  sConfigOC.Pulse = 1500;
 80014bc:	4b5a      	ldr	r3, [pc, #360]	; (8001628 <main+0x20c>)
 80014be:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80014c2:	605a      	str	r2, [r3, #4]
  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 80014c4:	2204      	movs	r2, #4
 80014c6:	4958      	ldr	r1, [pc, #352]	; (8001628 <main+0x20c>)
 80014c8:	4859      	ldr	r0, [pc, #356]	; (8001630 <main+0x214>)
 80014ca:	f004 fbbd 	bl	8005c48 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80014ce:	2104      	movs	r1, #4
 80014d0:	4857      	ldr	r0, [pc, #348]	; (8001630 <main+0x214>)
 80014d2:	f004 f9a9 	bl	8005828 <HAL_TIM_PWM_Start>
  sConfigOC.Pulse = 1500;
 80014d6:	4b54      	ldr	r3, [pc, #336]	; (8001628 <main+0x20c>)
 80014d8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80014dc:	605a      	str	r2, [r3, #4]
  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3);
 80014de:	2208      	movs	r2, #8
 80014e0:	4951      	ldr	r1, [pc, #324]	; (8001628 <main+0x20c>)
 80014e2:	4853      	ldr	r0, [pc, #332]	; (8001630 <main+0x214>)
 80014e4:	f004 fbb0 	bl	8005c48 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80014e8:	2108      	movs	r1, #8
 80014ea:	4851      	ldr	r0, [pc, #324]	; (8001630 <main+0x214>)
 80014ec:	f004 f99c 	bl	8005828 <HAL_TIM_PWM_Start>
  sConfigOC.Pulse = 1500;
 80014f0:	4b4d      	ldr	r3, [pc, #308]	; (8001628 <main+0x20c>)
 80014f2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80014f6:	605a      	str	r2, [r3, #4]
  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4);
 80014f8:	220c      	movs	r2, #12
 80014fa:	494b      	ldr	r1, [pc, #300]	; (8001628 <main+0x20c>)
 80014fc:	484c      	ldr	r0, [pc, #304]	; (8001630 <main+0x214>)
 80014fe:	f004 fba3 	bl	8005c48 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001502:	210c      	movs	r1, #12
 8001504:	484a      	ldr	r0, [pc, #296]	; (8001630 <main+0x214>)
 8001506:	f004 f98f 	bl	8005828 <HAL_TIM_PWM_Start>
  if(HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK){Error_Handler();}
 800150a:	494a      	ldr	r1, [pc, #296]	; (8001634 <main+0x218>)
 800150c:	484a      	ldr	r0, [pc, #296]	; (8001638 <main+0x21c>)
 800150e:	f004 f9c9 	bl	80058a4 <HAL_TIM_Encoder_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <main+0x100>
 8001518:	f000 fdfa 	bl	8002110 <Error_Handler>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800151c:	213c      	movs	r1, #60	; 0x3c
 800151e:	4846      	ldr	r0, [pc, #280]	; (8001638 <main+0x21c>)
 8001520:	f004 fa52 	bl	80059c8 <HAL_TIM_Encoder_Start>
  TIM1->CNT=15000;
 8001524:	4b45      	ldr	r3, [pc, #276]	; (800163c <main+0x220>)
 8001526:	f643 2298 	movw	r2, #15000	; 0x3a98
 800152a:	625a      	str	r2, [r3, #36]	; 0x24
  if(HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK){Error_Handler();}
 800152c:	4941      	ldr	r1, [pc, #260]	; (8001634 <main+0x218>)
 800152e:	4844      	ldr	r0, [pc, #272]	; (8001640 <main+0x224>)
 8001530:	f004 f9b8 	bl	80058a4 <HAL_TIM_Encoder_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <main+0x122>
 800153a:	f000 fde9 	bl	8002110 <Error_Handler>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800153e:	213c      	movs	r1, #60	; 0x3c
 8001540:	483f      	ldr	r0, [pc, #252]	; (8001640 <main+0x224>)
 8001542:	f004 fa41 	bl	80059c8 <HAL_TIM_Encoder_Start>
  TIM2->CNT=15000;
 8001546:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800154a:	f643 2298 	movw	r2, #15000	; 0x3a98
 800154e:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_CAN_Start(&hcan1);
 8001550:	483c      	ldr	r0, [pc, #240]	; (8001644 <main+0x228>)
 8001552:	f002 f8fd 	bl	8003750 <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){Error_Handler();}
 8001556:	2102      	movs	r1, #2
 8001558:	483a      	ldr	r0, [pc, #232]	; (8001644 <main+0x228>)
 800155a:	f002 fb2a 	bl	8003bb2 <HAL_CAN_ActivateNotification>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <main+0x14c>
 8001564:	f000 fdd4 	bl	8002110 <Error_Handler>
  HAL_CAN_Start(&hcan2);
 8001568:	4837      	ldr	r0, [pc, #220]	; (8001648 <main+0x22c>)
 800156a:	f002 f8f1 	bl	8003750 <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){Error_Handler();}
 800156e:	2102      	movs	r1, #2
 8001570:	4835      	ldr	r0, [pc, #212]	; (8001648 <main+0x22c>)
 8001572:	f002 fb1e 	bl	8003bb2 <HAL_CAN_ActivateNotification>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <main+0x164>
 800157c:	f000 fdc8 	bl	8002110 <Error_Handler>
  initPID();
 8001580:	f000 fbde 	bl	8001d40 <initPID>
  initLoadPID();
 8001584:	f000 fc3a 	bl	8001dfc <initLoadPID>
  initCanFilter();
 8001588:	f000 fd78 	bl	800207c <initCanFilter>
  HAL_UART_Receive_DMA(&huart3,(uint8_t*) Rxbuf_jetson, 7);
 800158c:	2207      	movs	r2, #7
 800158e:	492f      	ldr	r1, [pc, #188]	; (800164c <main+0x230>)
 8001590:	482f      	ldr	r0, [pc, #188]	; (8001650 <main+0x234>)
 8001592:	f005 f92b 	bl	80067ec <HAL_UART_Receive_DMA>
  initFriction();
 8001596:	f000 fb7b 	bl	8001c90 <initFriction>

  HAL_TIM_Base_Start_IT(&htim7);
 800159a:	482e      	ldr	r0, [pc, #184]	; (8001654 <main+0x238>)
 800159c:	f004 f8f5 	bl	800578a <HAL_TIM_Base_Start_IT>
  program_No=!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)+!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)*2+
 80015a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015a4:	482c      	ldr	r0, [pc, #176]	; (8001658 <main+0x23c>)
 80015a6:	f003 fb65 	bl	8004c74 <HAL_GPIO_ReadPin>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	bf0c      	ite	eq
 80015b0:	2301      	moveq	r3, #1
 80015b2:	2300      	movne	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	461c      	mov	r4, r3
 80015b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015bc:	4826      	ldr	r0, [pc, #152]	; (8001658 <main+0x23c>)
 80015be:	f003 fb59 	bl	8004c74 <HAL_GPIO_ReadPin>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <main+0x1b0>
 80015c8:	2302      	movs	r3, #2
 80015ca:	e000      	b.n	80015ce <main+0x1b2>
 80015cc:	2300      	movs	r3, #0
 80015ce:	4423      	add	r3, r4
 80015d0:	b2dc      	uxtb	r4, r3
 				!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)*4+!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14)*8;
 80015d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015d6:	4821      	ldr	r0, [pc, #132]	; (800165c <main+0x240>)
 80015d8:	f003 fb4c 	bl	8004c74 <HAL_GPIO_ReadPin>
 80015dc:	4603      	mov	r3, r0
  program_No=!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)+!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)*2+
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <main+0x1ca>
 80015e2:	2304      	movs	r3, #4
 80015e4:	e000      	b.n	80015e8 <main+0x1cc>
 80015e6:	2300      	movs	r3, #0
 80015e8:	4423      	add	r3, r4
 80015ea:	b2dc      	uxtb	r4, r3
 				!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)*4+!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14)*8;
 80015ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015f0:	481a      	ldr	r0, [pc, #104]	; (800165c <main+0x240>)
 80015f2:	f003 fb3f 	bl	8004c74 <HAL_GPIO_ReadPin>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <main+0x1e4>
 80015fc:	2308      	movs	r3, #8
 80015fe:	e000      	b.n	8001602 <main+0x1e6>
 8001600:	2300      	movs	r3, #0
 8001602:	4423      	add	r3, r4
 8001604:	b2da      	uxtb	r2, r3
  program_No=!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)+!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)*2+
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <main+0x244>)
 8001608:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,start_sw);
 800160a:	4b16      	ldr	r3, [pc, #88]	; (8001664 <main+0x248>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001614:	4814      	ldr	r0, [pc, #80]	; (8001668 <main+0x24c>)
 8001616:	f003 fb45 	bl	8004ca4 <HAL_GPIO_WritePin>
	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
	  printf("mofumofu\r\n");
 800161a:	4814      	ldr	r0, [pc, #80]	; (800166c <main+0x250>)
 800161c:	f006 f9f6 	bl	8007a0c <puts>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,start_sw);
 8001620:	e7f3      	b.n	800160a <main+0x1ee>
 8001622:	bf00      	nop
 8001624:	2000000c 	.word	0x2000000c
 8001628:	20000398 	.word	0x20000398
 800162c:	200004c4 	.word	0x200004c4
 8001630:	20000504 	.word	0x20000504
 8001634:	2000040c 	.word	0x2000040c
 8001638:	20000544 	.word	0x20000544
 800163c:	40010000 	.word	0x40010000
 8001640:	20000584 	.word	0x20000584
 8001644:	20000490 	.word	0x20000490
 8001648:	20000468 	.word	0x20000468
 800164c:	20000404 	.word	0x20000404
 8001650:	20000664 	.word	0x20000664
 8001654:	200005c4 	.word	0x200005c4
 8001658:	40020400 	.word	0x40020400
 800165c:	40020800 	.word	0x40020800
 8001660:	200004c2 	.word	0x200004c2
 8001664:	200004c0 	.word	0x200004c0
 8001668:	40020000 	.word	0x40020000
 800166c:	08009688 	.word	0x08009688

08001670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b094      	sub	sp, #80	; 0x50
 8001674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001676:	f107 031c 	add.w	r3, r7, #28
 800167a:	2234      	movs	r2, #52	; 0x34
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f005 fe16 	bl	80072b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001684:	f107 0308 	add.w	r3, r7, #8
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001694:	2300      	movs	r3, #0
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	4b29      	ldr	r3, [pc, #164]	; (8001740 <SystemClock_Config+0xd0>)
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	4a28      	ldr	r2, [pc, #160]	; (8001740 <SystemClock_Config+0xd0>)
 800169e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a2:	6413      	str	r3, [r2, #64]	; 0x40
 80016a4:	4b26      	ldr	r3, [pc, #152]	; (8001740 <SystemClock_Config+0xd0>)
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016b0:	2300      	movs	r3, #0
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	4b23      	ldr	r3, [pc, #140]	; (8001744 <SystemClock_Config+0xd4>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a22      	ldr	r2, [pc, #136]	; (8001744 <SystemClock_Config+0xd4>)
 80016ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b20      	ldr	r3, [pc, #128]	; (8001744 <SystemClock_Config+0xd4>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016c8:	603b      	str	r3, [r7, #0]
 80016ca:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016cc:	2301      	movs	r3, #1
 80016ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d6:	2302      	movs	r3, #2
 80016d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016e0:	2304      	movs	r3, #4
 80016e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016e4:	23a8      	movs	r3, #168	; 0xa8
 80016e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016e8:	2302      	movs	r3, #2
 80016ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80016ec:	2302      	movs	r3, #2
 80016ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016f0:	2302      	movs	r3, #2
 80016f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f4:	f107 031c 	add.w	r3, r7, #28
 80016f8:	4618      	mov	r0, r3
 80016fa:	f003 fdc1 	bl	8005280 <HAL_RCC_OscConfig>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001704:	f000 fd04 	bl	8002110 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001708:	230f      	movs	r3, #15
 800170a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800170c:	2302      	movs	r3, #2
 800170e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001710:	2300      	movs	r3, #0
 8001712:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001714:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001718:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800171a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001720:	f107 0308 	add.w	r3, r7, #8
 8001724:	2105      	movs	r1, #5
 8001726:	4618      	mov	r0, r3
 8001728:	f003 faf0 	bl	8004d0c <HAL_RCC_ClockConfig>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001732:	f000 fced 	bl	8002110 <Error_Handler>
  }
}
 8001736:	bf00      	nop
 8001738:	3750      	adds	r7, #80	; 0x50
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800
 8001744:	40007000 	.word	0x40007000

08001748 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim7.Instance) {
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d145      	bne.n	80017e8 <HAL_TIM_PeriodElapsedCallback+0xa0>
		//1kHz
		if(cnt_tim_task>1){
 800175c:	4b25      	ldr	r3, [pc, #148]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d904      	bls.n	800176e <HAL_TIM_PeriodElapsedCallback+0x26>
		//500Hz
		timerTask();
 8001764:	f000 fb76 	bl	8001e54 <timerTask>
		cnt_tim_task=0;
 8001768:	4b22      	ldr	r3, [pc, #136]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]
		}
		cnt_tim_task++;
 800176e:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	3301      	adds	r3, #1
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001778:	701a      	strb	r2, [r3, #0]
		if(cnt_tim>100){
 800177a:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b64      	cmp	r3, #100	; 0x64
 8001780:	d92c      	bls.n	80017dc <HAL_TIM_PeriodElapsedCallback+0x94>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001782:	2120      	movs	r1, #32
 8001784:	481d      	ldr	r0, [pc, #116]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001786:	f003 faa6 	bl	8004cd6 <HAL_GPIO_TogglePin>
			cnt_tim=0;
 800178a:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800178c:	2200      	movs	r2, #0
 800178e:	701a      	strb	r2, [r3, #0]
			if(temp_data_Jetson!=data_Jetson[5]){
 8001790:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001792:	795a      	ldrb	r2, [r3, #5]
 8001794:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	429a      	cmp	r2, r3
 800179a:	d006      	beq.n	80017aa <HAL_TIM_PeriodElapsedCallback+0x62>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,1);
 800179c:	2201      	movs	r2, #1
 800179e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017a2:	4819      	ldr	r0, [pc, #100]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80017a4:	f003 fa7e 	bl	8004ca4 <HAL_GPIO_WritePin>
 80017a8:	e014      	b.n	80017d4 <HAL_TIM_PeriodElapsedCallback+0x8c>
			}
			else{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017b0:	4815      	ldr	r0, [pc, #84]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80017b2:	f003 fa77 	bl	8004ca4 <HAL_GPIO_WritePin>
				data_Jetson[0]=0;
 80017b6:	4b12      	ldr	r3, [pc, #72]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
				data_Jetson[1]=0;
 80017bc:	4b10      	ldr	r3, [pc, #64]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80017be:	2200      	movs	r2, #0
 80017c0:	705a      	strb	r2, [r3, #1]
				data_Jetson[2]=0;
 80017c2:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	709a      	strb	r2, [r3, #2]
				data_Jetson[3]=0;
 80017c8:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	70da      	strb	r2, [r3, #3]
				data_Jetson[4]=0;
 80017ce:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	711a      	strb	r2, [r3, #4]
			}
			temp_data_Jetson=data_Jetson[5];
 80017d4:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80017d6:	795a      	ldrb	r2, [r3, #5]
 80017d8:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80017da:	701a      	strb	r2, [r3, #0]
		}
		cnt_tim++;
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	3301      	adds	r3, #1
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80017e6:	701a      	strb	r2, [r3, #0]
	}
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	200005c4 	.word	0x200005c4
 80017f4:	200004b8 	.word	0x200004b8
 80017f8:	200004be 	.word	0x200004be
 80017fc:	40020000 	.word	0x40020000
 8001800:	200003f0 	.word	0x200003f0
 8001804:	2000024c 	.word	0x2000024c
 8001808:	40020400 	.word	0x40020400
 800180c:	00000000 	.word	0x00000000

08001810 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	/* Get RX message */
	if (hcan->Instance == hcan2.Instance) {// can2 bus receive interrupt
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b7e      	ldr	r3, [pc, #504]	; (8001a18 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	429a      	cmp	r2, r3
 8001822:	d17f      	bne.n	8001924 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, canRxData);
 8001824:	4b7d      	ldr	r3, [pc, #500]	; (8001a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8001826:	4a7e      	ldr	r2, [pc, #504]	; (8001a20 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8001828:	2100      	movs	r1, #0
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f002 f8af 	bl	800398e <HAL_CAN_GetRxMessage>
		//check ESC identifier
		int id = canRxHeader.StdId - 513;
 8001830:	4b7b      	ldr	r3, [pc, #492]	; (8001a20 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8001838:	60bb      	str	r3, [r7, #8]

		wheelFdb[id].angle = canRxData[0] * 256 + canRxData[1];
 800183a:	4b78      	ldr	r3, [pc, #480]	; (8001a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	b29b      	uxth	r3, r3
 8001840:	021b      	lsls	r3, r3, #8
 8001842:	b29a      	uxth	r2, r3
 8001844:	4b75      	ldr	r3, [pc, #468]	; (8001a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8001846:	785b      	ldrb	r3, [r3, #1]
 8001848:	b29b      	uxth	r3, r3
 800184a:	4413      	add	r3, r2
 800184c:	b29b      	uxth	r3, r3
 800184e:	b218      	sxth	r0, r3
 8001850:	4974      	ldr	r1, [pc, #464]	; (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	4613      	mov	r3, r2
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4413      	add	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	440b      	add	r3, r1
 800185e:	4602      	mov	r2, r0
 8001860:	801a      	strh	r2, [r3, #0]
		wheelFdb[id].rpm = canRxData[2] * 256 + canRxData[3];
 8001862:	4b6e      	ldr	r3, [pc, #440]	; (8001a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8001864:	789b      	ldrb	r3, [r3, #2]
 8001866:	b29b      	uxth	r3, r3
 8001868:	021b      	lsls	r3, r3, #8
 800186a:	b29a      	uxth	r2, r3
 800186c:	4b6b      	ldr	r3, [pc, #428]	; (8001a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 800186e:	78db      	ldrb	r3, [r3, #3]
 8001870:	b29b      	uxth	r3, r3
 8001872:	4413      	add	r3, r2
 8001874:	b29b      	uxth	r3, r3
 8001876:	b218      	sxth	r0, r3
 8001878:	496a      	ldr	r1, [pc, #424]	; (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	4613      	mov	r3, r2
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	4413      	add	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	3302      	adds	r3, #2
 8001888:	4602      	mov	r2, r0
 800188a:	801a      	strh	r2, [r3, #0]
		wheelFdb[id].torque = canRxData[4] * 256 + canRxData[5];
 800188c:	4b63      	ldr	r3, [pc, #396]	; (8001a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 800188e:	791b      	ldrb	r3, [r3, #4]
 8001890:	b29b      	uxth	r3, r3
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	b29a      	uxth	r2, r3
 8001896:	4b61      	ldr	r3, [pc, #388]	; (8001a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8001898:	795b      	ldrb	r3, [r3, #5]
 800189a:	b29b      	uxth	r3, r3
 800189c:	4413      	add	r3, r2
 800189e:	b29b      	uxth	r3, r3
 80018a0:	b218      	sxth	r0, r3
 80018a2:	4960      	ldr	r1, [pc, #384]	; (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80018a4:	68ba      	ldr	r2, [r7, #8]
 80018a6:	4613      	mov	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	440b      	add	r3, r1
 80018b0:	3304      	adds	r3, #4
 80018b2:	4602      	mov	r2, r0
 80018b4:	801a      	strh	r2, [r3, #0]
		wheelFdb[id].temp = canRxData[6];
 80018b6:	4b59      	ldr	r3, [pc, #356]	; (8001a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80018b8:	799b      	ldrb	r3, [r3, #6]
 80018ba:	b218      	sxth	r0, r3
 80018bc:	4959      	ldr	r1, [pc, #356]	; (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	4613      	mov	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4413      	add	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	3306      	adds	r3, #6
 80018cc:	4602      	mov	r2, r0
 80018ce:	801a      	strh	r2, [r3, #0]
		wheelFdb[id].omg = 6.28318530718 * (wheelFdb[id].rpm) / 1140.0;
 80018d0:	4954      	ldr	r1, [pc, #336]	; (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	4613      	mov	r3, r2
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4413      	add	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	3302      	adds	r3, #2
 80018e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7fe fde9 	bl	80004bc <__aeabi_i2d>
 80018ea:	a347      	add	r3, pc, #284	; (adr r3, 8001a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80018ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f0:	f7fe fe4e 	bl	8000590 <__aeabi_dmul>
 80018f4:	4603      	mov	r3, r0
 80018f6:	460c      	mov	r4, r1
 80018f8:	4618      	mov	r0, r3
 80018fa:	4621      	mov	r1, r4
 80018fc:	a344      	add	r3, pc, #272	; (adr r3, 8001a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80018fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001902:	f7fe ff6f 	bl	80007e4 <__aeabi_ddiv>
 8001906:	4603      	mov	r3, r0
 8001908:	460c      	mov	r4, r1
 800190a:	4618      	mov	r0, r3
 800190c:	4621      	mov	r1, r4
 800190e:	f7ff f917 	bl	8000b40 <__aeabi_d2f>
 8001912:	4944      	ldr	r1, [pc, #272]	; (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001914:	68ba      	ldr	r2, [r7, #8]
 8001916:	4613      	mov	r3, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	4413      	add	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	440b      	add	r3, r1
 8001920:	3308      	adds	r3, #8
 8001922:	6018      	str	r0, [r3, #0]
	}
	if (hcan->Instance == hcan1.Instance) {// can1 bus receive interrupt
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b3f      	ldr	r3, [pc, #252]	; (8001a28 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	429a      	cmp	r2, r3
 800192e:	d167      	bne.n	8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, canRxData);
 8001930:	4b3a      	ldr	r3, [pc, #232]	; (8001a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8001932:	4a3b      	ldr	r2, [pc, #236]	; (8001a20 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8001934:	2100      	movs	r1, #0
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f002 f829 	bl	800398e <HAL_CAN_GetRxMessage>
		motor_fdb *fdb = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
		switch (canRxHeader.StdId) {
 8001940:	4b37      	ldr	r3, [pc, #220]	; (8001a20 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f240 2206 	movw	r2, #518	; 0x206
 8001948:	4293      	cmp	r3, r2
 800194a:	d00a      	beq.n	8001962 <HAL_CAN_RxFifo0MsgPendingCallback+0x152>
 800194c:	f240 2207 	movw	r2, #519	; 0x207
 8001950:	4293      	cmp	r3, r2
 8001952:	d009      	beq.n	8001968 <HAL_CAN_RxFifo0MsgPendingCallback+0x158>
 8001954:	f240 2205 	movw	r2, #517	; 0x205
 8001958:	4293      	cmp	r3, r2
 800195a:	d108      	bne.n	800196e <HAL_CAN_RxFifo0MsgPendingCallback+0x15e>
		case 0x205:
			fdb = &gimbalYawFdb;
 800195c:	4b33      	ldr	r3, [pc, #204]	; (8001a2c <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 800195e:	60fb      	str	r3, [r7, #12]
			break;
 8001960:	e005      	b.n	800196e <HAL_CAN_RxFifo0MsgPendingCallback+0x15e>
		case 0x206:
			fdb = &gimbalPitchFdb;
 8001962:	4b33      	ldr	r3, [pc, #204]	; (8001a30 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8001964:	60fb      	str	r3, [r7, #12]
			break;
 8001966:	e002      	b.n	800196e <HAL_CAN_RxFifo0MsgPendingCallback+0x15e>
		case 0x207:
			fdb = &loadMotorFdb;
 8001968:	4b32      	ldr	r3, [pc, #200]	; (8001a34 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 800196a:	60fb      	str	r3, [r7, #12]
			break;
 800196c:	bf00      	nop
		}
		fdb->angle = canRxData[0] * 256 + canRxData[1];
 800196e:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	b29b      	uxth	r3, r3
 8001974:	021b      	lsls	r3, r3, #8
 8001976:	b29a      	uxth	r2, r3
 8001978:	4b28      	ldr	r3, [pc, #160]	; (8001a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 800197a:	785b      	ldrb	r3, [r3, #1]
 800197c:	b29b      	uxth	r3, r3
 800197e:	4413      	add	r3, r2
 8001980:	b29b      	uxth	r3, r3
 8001982:	b21a      	sxth	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	801a      	strh	r2, [r3, #0]
		fdb->rpm = canRxData[2] * 256 + canRxData[3];
 8001988:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 800198a:	789b      	ldrb	r3, [r3, #2]
 800198c:	b29b      	uxth	r3, r3
 800198e:	021b      	lsls	r3, r3, #8
 8001990:	b29a      	uxth	r2, r3
 8001992:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8001994:	78db      	ldrb	r3, [r3, #3]
 8001996:	b29b      	uxth	r3, r3
 8001998:	4413      	add	r3, r2
 800199a:	b29b      	uxth	r3, r3
 800199c:	b21a      	sxth	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	805a      	strh	r2, [r3, #2]
		fdb->torque = canRxData[4] * 256 + canRxData[5];
 80019a2:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80019a4:	791b      	ldrb	r3, [r3, #4]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	021b      	lsls	r3, r3, #8
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80019ae:	795b      	ldrb	r3, [r3, #5]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	4413      	add	r3, r2
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	b21a      	sxth	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	809a      	strh	r2, [r3, #4]
		fdb->temp = canRxData[6];
 80019bc:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80019be:	799b      	ldrb	r3, [r3, #6]
 80019c0:	b21a      	sxth	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	80da      	strh	r2, [r3, #6]
		fdb->omg = 6.28318530718 * (fdb->rpm) / 1140.0;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7fe fd75 	bl	80004bc <__aeabi_i2d>
 80019d2:	a30d      	add	r3, pc, #52	; (adr r3, 8001a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80019d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d8:	f7fe fdda 	bl	8000590 <__aeabi_dmul>
 80019dc:	4603      	mov	r3, r0
 80019de:	460c      	mov	r4, r1
 80019e0:	4618      	mov	r0, r3
 80019e2:	4621      	mov	r1, r4
 80019e4:	a30a      	add	r3, pc, #40	; (adr r3, 8001a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80019e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ea:	f7fe fefb 	bl	80007e4 <__aeabi_ddiv>
 80019ee:	4603      	mov	r3, r0
 80019f0:	460c      	mov	r4, r1
 80019f2:	4618      	mov	r0, r3
 80019f4:	4621      	mov	r1, r4
 80019f6:	f7ff f8a3 	bl	8000b40 <__aeabi_d2f>
 80019fa:	4602      	mov	r2, r0
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	609a      	str	r2, [r3, #8]
	}
}
 8001a00:	bf00      	nop
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd90      	pop	{r4, r7, pc}
 8001a08:	54442eea 	.word	0x54442eea
 8001a0c:	401921fb 	.word	0x401921fb
 8001a10:	00000000 	.word	0x00000000
 8001a14:	4091d000 	.word	0x4091d000
 8001a18:	20000468 	.word	0x20000468
 8001a1c:	20000380 	.word	0x20000380
 8001a20:	200003b4 	.word	0x200003b4
 8001a24:	20000214 	.word	0x20000214
 8001a28:	20000490 	.word	0x20000490
 8001a2c:	20000208 	.word	0x20000208
 8001a30:	20000430 	.word	0x20000430
 8001a34:	200003f8 	.word	0x200003f8

08001a38 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	uint8_t j = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	73fb      	strb	r3, [r7, #15]
	while (Rxbuf_jetson[j] != 253 &&  j<sizeof(Rxbuf_jetson)) {
 8001a44:	e002      	b.n	8001a4c <HAL_UART_RxCpltCallback+0x14>
		j++;
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	73fb      	strb	r3, [r7, #15]
	while (Rxbuf_jetson[j] != 253 &&  j<sizeof(Rxbuf_jetson)) {
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	4a1f      	ldr	r2, [pc, #124]	; (8001acc <HAL_UART_RxCpltCallback+0x94>)
 8001a50:	5cd3      	ldrb	r3, [r2, r3]
 8001a52:	2bfd      	cmp	r3, #253	; 0xfd
 8001a54:	d002      	beq.n	8001a5c <HAL_UART_RxCpltCallback+0x24>
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	2b06      	cmp	r3, #6
 8001a5a:	d9f4      	bls.n	8001a46 <HAL_UART_RxCpltCallback+0xe>
	}
	if(j>=sizeof(Rxbuf_jetson)){
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	2b06      	cmp	r3, #6
 8001a60:	d90d      	bls.n	8001a7e <HAL_UART_RxCpltCallback+0x46>
		for(uint8_t k=0;k<(sizeof(data_Jetson));k++){
 8001a62:	2300      	movs	r3, #0
 8001a64:	73bb      	strb	r3, [r7, #14]
 8001a66:	e006      	b.n	8001a76 <HAL_UART_RxCpltCallback+0x3e>
			data_Jetson[k]=0;
 8001a68:	7bbb      	ldrb	r3, [r7, #14]
 8001a6a:	4a19      	ldr	r2, [pc, #100]	; (8001ad0 <HAL_UART_RxCpltCallback+0x98>)
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0;k<(sizeof(data_Jetson));k++){
 8001a70:	7bbb      	ldrb	r3, [r7, #14]
 8001a72:	3301      	adds	r3, #1
 8001a74:	73bb      	strb	r3, [r7, #14]
 8001a76:	7bbb      	ldrb	r3, [r7, #14]
 8001a78:	2b05      	cmp	r3, #5
 8001a7a:	d9f5      	bls.n	8001a68 <HAL_UART_RxCpltCallback+0x30>
			else {
				data_Jetson[k] = Rxbuf_jetson[j + k + 1];
			}
		}
	}
}
 8001a7c:	e020      	b.n	8001ac0 <HAL_UART_RxCpltCallback+0x88>
		for (uint8_t k = 0; k < sizeof(data_Jetson); k++) {
 8001a7e:	2300      	movs	r3, #0
 8001a80:	737b      	strb	r3, [r7, #13]
 8001a82:	e01a      	b.n	8001aba <HAL_UART_RxCpltCallback+0x82>
			if ((j + k) >= sizeof(data_Jetson)) {
 8001a84:	7bfa      	ldrb	r2, [r7, #15]
 8001a86:	7b7b      	ldrb	r3, [r7, #13]
 8001a88:	4413      	add	r3, r2
 8001a8a:	2b05      	cmp	r3, #5
 8001a8c:	d909      	bls.n	8001aa2 <HAL_UART_RxCpltCallback+0x6a>
				data_Jetson[k] = Rxbuf_jetson[k - (sizeof(data_Jetson) - j)];
 8001a8e:	7b7a      	ldrb	r2, [r7, #13]
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	4413      	add	r3, r2
 8001a94:	1f9a      	subs	r2, r3, #6
 8001a96:	7b7b      	ldrb	r3, [r7, #13]
 8001a98:	490c      	ldr	r1, [pc, #48]	; (8001acc <HAL_UART_RxCpltCallback+0x94>)
 8001a9a:	5c89      	ldrb	r1, [r1, r2]
 8001a9c:	4a0c      	ldr	r2, [pc, #48]	; (8001ad0 <HAL_UART_RxCpltCallback+0x98>)
 8001a9e:	54d1      	strb	r1, [r2, r3]
 8001aa0:	e008      	b.n	8001ab4 <HAL_UART_RxCpltCallback+0x7c>
				data_Jetson[k] = Rxbuf_jetson[j + k + 1];
 8001aa2:	7bfa      	ldrb	r2, [r7, #15]
 8001aa4:	7b7b      	ldrb	r3, [r7, #13]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	1c5a      	adds	r2, r3, #1
 8001aaa:	7b7b      	ldrb	r3, [r7, #13]
 8001aac:	4907      	ldr	r1, [pc, #28]	; (8001acc <HAL_UART_RxCpltCallback+0x94>)
 8001aae:	5c89      	ldrb	r1, [r1, r2]
 8001ab0:	4a07      	ldr	r2, [pc, #28]	; (8001ad0 <HAL_UART_RxCpltCallback+0x98>)
 8001ab2:	54d1      	strb	r1, [r2, r3]
		for (uint8_t k = 0; k < sizeof(data_Jetson); k++) {
 8001ab4:	7b7b      	ldrb	r3, [r7, #13]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	737b      	strb	r3, [r7, #13]
 8001aba:	7b7b      	ldrb	r3, [r7, #13]
 8001abc:	2b05      	cmp	r3, #5
 8001abe:	d9e1      	bls.n	8001a84 <HAL_UART_RxCpltCallback+0x4c>
}
 8001ac0:	bf00      	nop
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	20000404 	.word	0x20000404
 8001ad0:	200003f0 	.word	0x200003f0

08001ad4 <driveWheelTask>:

void driveWheelTask() {
 8001ad4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ad8:	b086      	sub	sp, #24
 8001ada:	af00      	add	r7, sp, #0
	int16_t u[4];
	if(start_sw==0){
 8001adc:	4b64      	ldr	r3, [pc, #400]	; (8001c70 <driveWheelTask+0x19c>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d106      	bne.n	8001af2 <driveWheelTask+0x1e>
		mecanum.wheel_rpm[0]=2000.0;
 8001ae4:	4b63      	ldr	r3, [pc, #396]	; (8001c74 <driveWheelTask+0x1a0>)
 8001ae6:	4a64      	ldr	r2, [pc, #400]	; (8001c78 <driveWheelTask+0x1a4>)
 8001ae8:	601a      	str	r2, [r3, #0]
		mecanum.wheel_rpm[1]=2000.0;
 8001aea:	4b62      	ldr	r3, [pc, #392]	; (8001c74 <driveWheelTask+0x1a0>)
 8001aec:	4a62      	ldr	r2, [pc, #392]	; (8001c78 <driveWheelTask+0x1a4>)
 8001aee:	605a      	str	r2, [r3, #4]
 8001af0:	e005      	b.n	8001afe <driveWheelTask+0x2a>
	}
	else{
		mecanum.wheel_rpm[0]=-2000.0;
 8001af2:	4b60      	ldr	r3, [pc, #384]	; (8001c74 <driveWheelTask+0x1a0>)
 8001af4:	4a61      	ldr	r2, [pc, #388]	; (8001c7c <driveWheelTask+0x1a8>)
 8001af6:	601a      	str	r2, [r3, #0]
		mecanum.wheel_rpm[1]=-2000.0;
 8001af8:	4b5e      	ldr	r3, [pc, #376]	; (8001c74 <driveWheelTask+0x1a0>)
 8001afa:	4a60      	ldr	r2, [pc, #384]	; (8001c7c <driveWheelTask+0x1a8>)
 8001afc:	605a      	str	r2, [r3, #4]
	}
	float torque_sum=0.0;
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]
	    torque_sum = fabs((float)wheelFdb[0].torque/16384.0*20.0)+fabs((float)wheelFdb[1].torque/16384.0*20.0);
 8001b04:	4b5e      	ldr	r3, [pc, #376]	; (8001c80 <driveWheelTask+0x1ac>)
 8001b06:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b0a:	ee07 3a90 	vmov	s15, r3
 8001b0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b12:	ee17 0a90 	vmov	r0, s15
 8001b16:	f7fe fce3 	bl	80004e0 <__aeabi_f2d>
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	4b59      	ldr	r3, [pc, #356]	; (8001c84 <driveWheelTask+0x1b0>)
 8001b20:	f7fe fe60 	bl	80007e4 <__aeabi_ddiv>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	4b55      	ldr	r3, [pc, #340]	; (8001c88 <driveWheelTask+0x1b4>)
 8001b32:	f7fe fd2d 	bl	8000590 <__aeabi_dmul>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4614      	mov	r4, r2
 8001b3c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001b40:	4b4f      	ldr	r3, [pc, #316]	; (8001c80 <driveWheelTask+0x1ac>)
 8001b42:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001b46:	ee07 3a90 	vmov	s15, r3
 8001b4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b4e:	ee17 0a90 	vmov	r0, s15
 8001b52:	f7fe fcc5 	bl	80004e0 <__aeabi_f2d>
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	4b4a      	ldr	r3, [pc, #296]	; (8001c84 <driveWheelTask+0x1b0>)
 8001b5c:	f7fe fe42 	bl	80007e4 <__aeabi_ddiv>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	4b46      	ldr	r3, [pc, #280]	; (8001c88 <driveWheelTask+0x1b4>)
 8001b6e:	f7fe fd0f 	bl	8000590 <__aeabi_dmul>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4690      	mov	r8, r2
 8001b78:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001b7c:	4642      	mov	r2, r8
 8001b7e:	464b      	mov	r3, r9
 8001b80:	4620      	mov	r0, r4
 8001b82:	4629      	mov	r1, r5
 8001b84:	f7fe fb4e 	bl	8000224 <__adddf3>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	460c      	mov	r4, r1
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	4621      	mov	r1, r4
 8001b90:	f7fe ffd6 	bl	8000b40 <__aeabi_d2f>
 8001b94:	4603      	mov	r3, r0
 8001b96:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 2; i++) {
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	e05c      	b.n	8001c58 <driveWheelTask+0x184>
		int error = mecanum.wheel_rpm[i] - wheelFdb[i].rpm;
 8001b9e:	4a35      	ldr	r2, [pc, #212]	; (8001c74 <driveWheelTask+0x1a0>)
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	ed93 7a00 	vldr	s14, [r3]
 8001baa:	4935      	ldr	r1, [pc, #212]	; (8001c80 <driveWheelTask+0x1ac>)
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	3302      	adds	r3, #2
 8001bba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bbe:	ee07 3a90 	vmov	s15, r3
 8001bc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bce:	ee17 3a90 	vmov	r3, s15
 8001bd2:	60bb      	str	r3, [r7, #8]
		wheelPID[i].error = error;
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	ee07 3a90 	vmov	s15, r3
 8001bda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bde:	4a2b      	ldr	r2, [pc, #172]	; (8001c8c <driveWheelTask+0x1b8>)
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	212c      	movs	r1, #44	; 0x2c
 8001be4:	fb01 f303 	mul.w	r3, r1, r3
 8001be8:	4413      	add	r3, r2
 8001bea:	3328      	adds	r3, #40	; 0x28
 8001bec:	edc3 7a00 	vstr	s15, [r3]
		u[i] = (int16_t) pidExecute(&(wheelPID[i]));
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	222c      	movs	r2, #44	; 0x2c
 8001bf4:	fb02 f303 	mul.w	r3, r2, r3
 8001bf8:	4a24      	ldr	r2, [pc, #144]	; (8001c8c <driveWheelTask+0x1b8>)
 8001bfa:	4413      	add	r3, r2
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f000 fb83 	bl	8002308 <pidExecute>
 8001c02:	eef0 7a40 	vmov.f32	s15, s0
 8001c06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c0a:	ee17 3a90 	vmov	r3, s15
 8001c0e:	b21a      	sxth	r2, r3
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	f107 0118 	add.w	r1, r7, #24
 8001c18:	440b      	add	r3, r1
 8001c1a:	f823 2c18 	strh.w	r2, [r3, #-24]

		if(torque_sum>5.0){
 8001c1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c22:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001c26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2e:	dd10      	ble.n	8001c52 <driveWheelTask+0x17e>
			for (int i = 0; i < 4; i++) {
 8001c30:	2300      	movs	r3, #0
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	e00a      	b.n	8001c4c <driveWheelTask+0x178>
				u[i] = 0;
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	f107 0218 	add.w	r2, r7, #24
 8001c3e:	4413      	add	r3, r2
 8001c40:	2200      	movs	r2, #0
 8001c42:	f823 2c18 	strh.w	r2, [r3, #-24]
			for (int i = 0; i < 4; i++) {
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	ddf1      	ble.n	8001c36 <driveWheelTask+0x162>
	for (int i = 0; i < 2; i++) {
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	3301      	adds	r3, #1
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	dd9f      	ble.n	8001b9e <driveWheelTask+0xca>
			}
		}
	}
	driveWheel(u);
 8001c5e:	463b      	mov	r3, r7
 8001c60:	4618      	mov	r0, r3
 8001c62:	f000 fa5d 	bl	8002120 <driveWheel>
}
 8001c66:	bf00      	nop
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c70:	200004c0 	.word	0x200004c0
 8001c74:	20000388 	.word	0x20000388
 8001c78:	44fa0000 	.word	0x44fa0000
 8001c7c:	c4fa0000 	.word	0xc4fa0000
 8001c80:	20000214 	.word	0x20000214
 8001c84:	40d00000 	.word	0x40d00000
 8001c88:	40340000 	.word	0x40340000
 8001c8c:	200002d0 	.word	0x200002d0

08001c90 <initFriction>:
void initFriction() {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
	for(int i=0;i<100;i++){
 8001c96:	2300      	movs	r3, #0
 8001c98:	607b      	str	r3, [r7, #4]
 8001c9a:	e01f      	b.n	8001cdc <initFriction+0x4c>
		HAL_Delay(20);
 8001c9c:	2014      	movs	r0, #20
 8001c9e:	f001 fb59 	bl	8003354 <HAL_Delay>
		  sConfigOC.Pulse = 2000;
 8001ca2:	4b25      	ldr	r3, [pc, #148]	; (8001d38 <initFriction+0xa8>)
 8001ca4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001ca8:	605a      	str	r2, [r3, #4]
		  HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3);
 8001caa:	2208      	movs	r2, #8
 8001cac:	4922      	ldr	r1, [pc, #136]	; (8001d38 <initFriction+0xa8>)
 8001cae:	4823      	ldr	r0, [pc, #140]	; (8001d3c <initFriction+0xac>)
 8001cb0:	f003 ffca 	bl	8005c48 <HAL_TIM_PWM_ConfigChannel>
		  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001cb4:	2108      	movs	r1, #8
 8001cb6:	4821      	ldr	r0, [pc, #132]	; (8001d3c <initFriction+0xac>)
 8001cb8:	f003 fdb6 	bl	8005828 <HAL_TIM_PWM_Start>
		  sConfigOC.Pulse = 2000;
 8001cbc:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <initFriction+0xa8>)
 8001cbe:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001cc2:	605a      	str	r2, [r3, #4]
		  HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4);
 8001cc4:	220c      	movs	r2, #12
 8001cc6:	491c      	ldr	r1, [pc, #112]	; (8001d38 <initFriction+0xa8>)
 8001cc8:	481c      	ldr	r0, [pc, #112]	; (8001d3c <initFriction+0xac>)
 8001cca:	f003 ffbd 	bl	8005c48 <HAL_TIM_PWM_ConfigChannel>
		  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001cce:	210c      	movs	r1, #12
 8001cd0:	481a      	ldr	r0, [pc, #104]	; (8001d3c <initFriction+0xac>)
 8001cd2:	f003 fda9 	bl	8005828 <HAL_TIM_PWM_Start>
	for(int i=0;i<100;i++){
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b63      	cmp	r3, #99	; 0x63
 8001ce0:	dddc      	ble.n	8001c9c <initFriction+0xc>
	}
	for(int i=0;i<2000;i++){
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	603b      	str	r3, [r7, #0]
 8001ce6:	e01f      	b.n	8001d28 <initFriction+0x98>
		HAL_Delay(1);
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f001 fb33 	bl	8003354 <HAL_Delay>
		  sConfigOC.Pulse = 1500;
 8001cee:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <initFriction+0xa8>)
 8001cf0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001cf4:	605a      	str	r2, [r3, #4]
		  HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3);
 8001cf6:	2208      	movs	r2, #8
 8001cf8:	490f      	ldr	r1, [pc, #60]	; (8001d38 <initFriction+0xa8>)
 8001cfa:	4810      	ldr	r0, [pc, #64]	; (8001d3c <initFriction+0xac>)
 8001cfc:	f003 ffa4 	bl	8005c48 <HAL_TIM_PWM_ConfigChannel>
		  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001d00:	2108      	movs	r1, #8
 8001d02:	480e      	ldr	r0, [pc, #56]	; (8001d3c <initFriction+0xac>)
 8001d04:	f003 fd90 	bl	8005828 <HAL_TIM_PWM_Start>
		  sConfigOC.Pulse = 1500;
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <initFriction+0xa8>)
 8001d0a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001d0e:	605a      	str	r2, [r3, #4]
		  HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4);
 8001d10:	220c      	movs	r2, #12
 8001d12:	4909      	ldr	r1, [pc, #36]	; (8001d38 <initFriction+0xa8>)
 8001d14:	4809      	ldr	r0, [pc, #36]	; (8001d3c <initFriction+0xac>)
 8001d16:	f003 ff97 	bl	8005c48 <HAL_TIM_PWM_ConfigChannel>
		  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001d1a:	210c      	movs	r1, #12
 8001d1c:	4807      	ldr	r0, [pc, #28]	; (8001d3c <initFriction+0xac>)
 8001d1e:	f003 fd83 	bl	8005828 <HAL_TIM_PWM_Start>
	for(int i=0;i<2000;i++){
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	3301      	adds	r3, #1
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001d2e:	dbdb      	blt.n	8001ce8 <initFriction+0x58>
	}

}
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000398 	.word	0x20000398
 8001d3c:	200004c4 	.word	0x200004c4

08001d40 <initPID>:

void initPID() {
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++) {
 8001d46:	2300      	movs	r3, #0
 8001d48:	607b      	str	r3, [r7, #4]
 8001d4a:	e042      	b.n	8001dd2 <initPID+0x92>
		wheelPID[i].t = 2.0f;
 8001d4c:	4a25      	ldr	r2, [pc, #148]	; (8001de4 <initPID+0xa4>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	212c      	movs	r1, #44	; 0x2c
 8001d52:	fb01 f303 	mul.w	r3, r1, r3
 8001d56:	4413      	add	r3, r2
 8001d58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d5c:	601a      	str	r2, [r3, #0]
		wheelPID[i].p = 3.0f;
 8001d5e:	4a21      	ldr	r2, [pc, #132]	; (8001de4 <initPID+0xa4>)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	212c      	movs	r1, #44	; 0x2c
 8001d64:	fb01 f303 	mul.w	r3, r1, r3
 8001d68:	4413      	add	r3, r2
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	4a1e      	ldr	r2, [pc, #120]	; (8001de8 <initPID+0xa8>)
 8001d6e:	601a      	str	r2, [r3, #0]
		wheelPID[i].i = 30.0f;
 8001d70:	4a1c      	ldr	r2, [pc, #112]	; (8001de4 <initPID+0xa4>)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	212c      	movs	r1, #44	; 0x2c
 8001d76:	fb01 f303 	mul.w	r3, r1, r3
 8001d7a:	4413      	add	r3, r2
 8001d7c:	3308      	adds	r3, #8
 8001d7e:	4a1b      	ldr	r2, [pc, #108]	; (8001dec <initPID+0xac>)
 8001d80:	601a      	str	r2, [r3, #0]
		wheelPID[i].d = 0.0f;
 8001d82:	4a18      	ldr	r2, [pc, #96]	; (8001de4 <initPID+0xa4>)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	212c      	movs	r1, #44	; 0x2c
 8001d88:	fb01 f303 	mul.w	r3, r1, r3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	330c      	adds	r3, #12
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
		wheelPID[i].outLimit = 15000.0f;
 8001d96:	4a13      	ldr	r2, [pc, #76]	; (8001de4 <initPID+0xa4>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	212c      	movs	r1, #44	; 0x2c
 8001d9c:	fb01 f303 	mul.w	r3, r1, r3
 8001da0:	4413      	add	r3, r2
 8001da2:	3310      	adds	r3, #16
 8001da4:	4a12      	ldr	r2, [pc, #72]	; (8001df0 <initPID+0xb0>)
 8001da6:	601a      	str	r2, [r3, #0]
		wheelPID[i].integralOutLimit = 500.0f;
 8001da8:	4a0e      	ldr	r2, [pc, #56]	; (8001de4 <initPID+0xa4>)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	212c      	movs	r1, #44	; 0x2c
 8001dae:	fb01 f303 	mul.w	r3, r1, r3
 8001db2:	4413      	add	r3, r2
 8001db4:	3314      	adds	r3, #20
 8001db6:	4a0f      	ldr	r2, [pc, #60]	; (8001df4 <initPID+0xb4>)
 8001db8:	601a      	str	r2, [r3, #0]
		wheelPID[i].differentialFilterRate = 0.9f;
 8001dba:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <initPID+0xa4>)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	212c      	movs	r1, #44	; 0x2c
 8001dc0:	fb01 f303 	mul.w	r3, r1, r3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3318      	adds	r3, #24
 8001dc8:	4a0b      	ldr	r2, [pc, #44]	; (8001df8 <initPID+0xb8>)
 8001dca:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	607b      	str	r3, [r7, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	ddb9      	ble.n	8001d4c <initPID+0xc>
	}
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	200002d0 	.word	0x200002d0
 8001de8:	40400000 	.word	0x40400000
 8001dec:	41f00000 	.word	0x41f00000
 8001df0:	466a6000 	.word	0x466a6000
 8001df4:	43fa0000 	.word	0x43fa0000
 8001df8:	3f666666 	.word	0x3f666666

08001dfc <initLoadPID>:

void initLoadPID() {
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
	loadPID.t = 2.0f;
 8001e00:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <initLoadPID+0x3c>)
 8001e02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e06:	601a      	str	r2, [r3, #0]
	loadPID.p = 10.0f;
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <initLoadPID+0x3c>)
 8001e0a:	4a0c      	ldr	r2, [pc, #48]	; (8001e3c <initLoadPID+0x40>)
 8001e0c:	605a      	str	r2, [r3, #4]
	loadPID.i = 0.1f*500;
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <initLoadPID+0x3c>)
 8001e10:	4a0b      	ldr	r2, [pc, #44]	; (8001e40 <initLoadPID+0x44>)
 8001e12:	609a      	str	r2, [r3, #8]
	loadPID.d = 0.07f;
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <initLoadPID+0x3c>)
 8001e16:	4a0b      	ldr	r2, [pc, #44]	; (8001e44 <initLoadPID+0x48>)
 8001e18:	60da      	str	r2, [r3, #12]
	loadPID.outLimit = 30000.0f;
 8001e1a:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <initLoadPID+0x3c>)
 8001e1c:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <initLoadPID+0x4c>)
 8001e1e:	611a      	str	r2, [r3, #16]
	loadPID.integralOutLimit = 10000.0f;
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <initLoadPID+0x3c>)
 8001e22:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <initLoadPID+0x50>)
 8001e24:	615a      	str	r2, [r3, #20]
	loadPID.differentialFilterRate = 0.9f;
 8001e26:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <initLoadPID+0x3c>)
 8001e28:	4a09      	ldr	r2, [pc, #36]	; (8001e50 <initLoadPID+0x54>)
 8001e2a:	619a      	str	r2, [r3, #24]
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	2000043c 	.word	0x2000043c
 8001e3c:	41200000 	.word	0x41200000
 8001e40:	42480000 	.word	0x42480000
 8001e44:	3d8f5c29 	.word	0x3d8f5c29
 8001e48:	46ea6000 	.word	0x46ea6000
 8001e4c:	461c4000 	.word	0x461c4000
 8001e50:	3f666666 	.word	0x3f666666

08001e54 <timerTask>:

void timerTask() { //call 500Hz
 8001e54:	b598      	push	{r3, r4, r7, lr}
 8001e56:	af00      	add	r7, sp, #0
	driveWheelTask();
 8001e58:	f7ff fe3c 	bl	8001ad4 <driveWheelTask>
	Gimbal_Task();
 8001e5c:	f000 f880 	bl	8001f60 <Gimbal_Task>
	fire_Task();
 8001e60:	f000 f904 	bl	800206c <fire_Task>
	limit_sw1=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15);
 8001e64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e68:	4833      	ldr	r0, [pc, #204]	; (8001f38 <timerTask+0xe4>)
 8001e6a:	f002 ff03 	bl	8004c74 <HAL_GPIO_ReadPin>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	461a      	mov	r2, r3
 8001e72:	4b32      	ldr	r3, [pc, #200]	; (8001f3c <timerTask+0xe8>)
 8001e74:	701a      	strb	r2, [r3, #0]
	limit_sw2=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8001e76:	2101      	movs	r1, #1
 8001e78:	482f      	ldr	r0, [pc, #188]	; (8001f38 <timerTask+0xe4>)
 8001e7a:	f002 fefb 	bl	8004c74 <HAL_GPIO_ReadPin>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b2f      	ldr	r3, [pc, #188]	; (8001f40 <timerTask+0xec>)
 8001e84:	701a      	strb	r2, [r3, #0]
	start_sw=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 8001e86:	2102      	movs	r1, #2
 8001e88:	482b      	ldr	r0, [pc, #172]	; (8001f38 <timerTask+0xe4>)
 8001e8a:	f002 fef3 	bl	8004c74 <HAL_GPIO_ReadPin>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b2c      	ldr	r3, [pc, #176]	; (8001f44 <timerTask+0xf0>)
 8001e94:	701a      	strb	r2, [r3, #0]
	select_sw=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001e96:	2120      	movs	r1, #32
 8001e98:	482b      	ldr	r0, [pc, #172]	; (8001f48 <timerTask+0xf4>)
 8001e9a:	f002 feeb 	bl	8004c74 <HAL_GPIO_ReadPin>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b2a      	ldr	r3, [pc, #168]	; (8001f4c <timerTask+0xf8>)
 8001ea4:	701a      	strb	r2, [r3, #0]
	sw1=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8001ea6:	2110      	movs	r1, #16
 8001ea8:	4827      	ldr	r0, [pc, #156]	; (8001f48 <timerTask+0xf4>)
 8001eaa:	f002 fee3 	bl	8004c74 <HAL_GPIO_ReadPin>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4b27      	ldr	r3, [pc, #156]	; (8001f50 <timerTask+0xfc>)
 8001eb4:	701a      	strb	r2, [r3, #0]
	sw2=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8001eb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eba:	4826      	ldr	r0, [pc, #152]	; (8001f54 <timerTask+0x100>)
 8001ebc:	f002 feda 	bl	8004c74 <HAL_GPIO_ReadPin>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4b24      	ldr	r3, [pc, #144]	; (8001f58 <timerTask+0x104>)
 8001ec6:	701a      	strb	r2, [r3, #0]
	program_No=!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)+!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)*2+
 8001ec8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ecc:	481e      	ldr	r0, [pc, #120]	; (8001f48 <timerTask+0xf4>)
 8001ece:	f002 fed1 	bl	8004c74 <HAL_GPIO_ReadPin>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	bf0c      	ite	eq
 8001ed8:	2301      	moveq	r3, #1
 8001eda:	2300      	movne	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	461c      	mov	r4, r3
 8001ee0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ee4:	4818      	ldr	r0, [pc, #96]	; (8001f48 <timerTask+0xf4>)
 8001ee6:	f002 fec5 	bl	8004c74 <HAL_GPIO_ReadPin>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <timerTask+0xa0>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e000      	b.n	8001ef6 <timerTask+0xa2>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	4423      	add	r3, r4
 8001ef8:	b2dc      	uxtb	r4, r3
	 				!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)*4+!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14)*8;
 8001efa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001efe:	480e      	ldr	r0, [pc, #56]	; (8001f38 <timerTask+0xe4>)
 8001f00:	f002 feb8 	bl	8004c74 <HAL_GPIO_ReadPin>
 8001f04:	4603      	mov	r3, r0
	program_No=!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)+!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)*2+
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <timerTask+0xba>
 8001f0a:	2304      	movs	r3, #4
 8001f0c:	e000      	b.n	8001f10 <timerTask+0xbc>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	4423      	add	r3, r4
 8001f12:	b2dc      	uxtb	r4, r3
	 				!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)*4+!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14)*8;
 8001f14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f18:	4807      	ldr	r0, [pc, #28]	; (8001f38 <timerTask+0xe4>)
 8001f1a:	f002 feab 	bl	8004c74 <HAL_GPIO_ReadPin>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <timerTask+0xd4>
 8001f24:	2308      	movs	r3, #8
 8001f26:	e000      	b.n	8001f2a <timerTask+0xd6>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	4423      	add	r3, r4
 8001f2c:	b2da      	uxtb	r2, r3
	program_No=!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)+!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)*2+
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <timerTask+0x108>)
 8001f30:	701a      	strb	r2, [r3, #0]
}
 8001f32:	bf00      	nop
 8001f34:	bd98      	pop	{r3, r4, r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40020800 	.word	0x40020800
 8001f3c:	200004bd 	.word	0x200004bd
 8001f40:	200004bc 	.word	0x200004bc
 8001f44:	200004c0 	.word	0x200004c0
 8001f48:	40020400 	.word	0x40020400
 8001f4c:	200004ba 	.word	0x200004ba
 8001f50:	200004c1 	.word	0x200004c1
 8001f54:	40020000 	.word	0x40020000
 8001f58:	200004c3 	.word	0x200004c3
 8001f5c:	200004c2 	.word	0x200004c2

08001f60 <Gimbal_Task>:

void Gimbal_Task(){
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af02      	add	r7, sp, #8
	int fire = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
	int16_t u[4];

	fire = 1;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	60fb      	str	r3, [r7, #12]
	DBUFF[1] = loadPID.error = -900.0f*fire*3 - loadMotorFdb.rpm;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	ee07 3a90 	vmov	s15, r3
 8001f74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f78:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002054 <Gimbal_Task+0xf4>
 8001f7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f80:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001f84:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f88:	4b33      	ldr	r3, [pc, #204]	; (8002058 <Gimbal_Task+0xf8>)
 8001f8a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f8e:	ee07 3a90 	vmov	s15, r3
 8001f92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f9a:	4b30      	ldr	r3, [pc, #192]	; (800205c <Gimbal_Task+0xfc>)
 8001f9c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 8001fa0:	4b2e      	ldr	r3, [pc, #184]	; (800205c <Gimbal_Task+0xfc>)
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa4:	4a2e      	ldr	r2, [pc, #184]	; (8002060 <Gimbal_Task+0x100>)
 8001fa6:	6053      	str	r3, [r2, #4]
	DBUFF[3] = u[2] = pidExecute(&loadPID);
 8001fa8:	482c      	ldr	r0, [pc, #176]	; (800205c <Gimbal_Task+0xfc>)
 8001faa:	f000 f9ad 	bl	8002308 <pidExecute>
 8001fae:	eef0 7a40 	vmov.f32	s15, s0
 8001fb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fb6:	ee17 3a90 	vmov	r3, s15
 8001fba:	b21b      	sxth	r3, r3
 8001fbc:	813b      	strh	r3, [r7, #8]
 8001fbe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001fc2:	ee07 3a90 	vmov	s15, r3
 8001fc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fca:	4b25      	ldr	r3, [pc, #148]	; (8002060 <Gimbal_Task+0x100>)
 8001fcc:	edc3 7a03 	vstr	s15, [r3, #12]

	if(cnt_task_servo>10){
 8001fd0:	4b24      	ldr	r3, [pc, #144]	; (8002064 <Gimbal_Task+0x104>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2b0a      	cmp	r3, #10
 8001fd6:	d928      	bls.n	800202a <Gimbal_Task+0xca>
	if(start_sw==0){
 8001fd8:	4b23      	ldr	r3, [pc, #140]	; (8002068 <Gimbal_Task+0x108>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d110      	bne.n	8002002 <Gimbal_Task+0xa2>
		ics_set_pos(2,map(90,180,0,4833,10166));
 8001fe0:	f242 73b6 	movw	r3, #10166	; 0x27b6
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	f241 23e1 	movw	r3, #4833	; 0x12e1
 8001fea:	2200      	movs	r2, #0
 8001fec:	21b4      	movs	r1, #180	; 0xb4
 8001fee:	205a      	movs	r0, #90	; 0x5a
 8001ff0:	f000 f872 	bl	80020d8 <map>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	2002      	movs	r0, #2
 8001ffc:	f7fe ffb2 	bl	8000f64 <ics_set_pos>
 8002000:	e00f      	b.n	8002022 <Gimbal_Task+0xc2>
	}
	else{
		ics_set_pos(2,map(120,180,0,4833,10166));
 8002002:	f242 73b6 	movw	r3, #10166	; 0x27b6
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	f241 23e1 	movw	r3, #4833	; 0x12e1
 800200c:	2200      	movs	r2, #0
 800200e:	21b4      	movs	r1, #180	; 0xb4
 8002010:	2078      	movs	r0, #120	; 0x78
 8002012:	f000 f861 	bl	80020d8 <map>
 8002016:	4603      	mov	r3, r0
 8002018:	b29b      	uxth	r3, r3
 800201a:	4619      	mov	r1, r3
 800201c:	2002      	movs	r0, #2
 800201e:	f7fe ffa1 	bl	8000f64 <ics_set_pos>
	}
		cnt_task_servo=0;
 8002022:	4b10      	ldr	r3, [pc, #64]	; (8002064 <Gimbal_Task+0x104>)
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]
 8002028:	e005      	b.n	8002036 <Gimbal_Task+0xd6>
	}
	else{
		cnt_task_servo++;
 800202a:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <Gimbal_Task+0x104>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	3301      	adds	r3, #1
 8002030:	b2da      	uxtb	r2, r3
 8002032:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <Gimbal_Task+0x104>)
 8002034:	701a      	strb	r2, [r3, #0]
	}
	u[0]=0;
 8002036:	2300      	movs	r3, #0
 8002038:	80bb      	strh	r3, [r7, #4]
	u[1]=0;
 800203a:	2300      	movs	r3, #0
 800203c:	80fb      	strh	r3, [r7, #6]
	u[3]=0;
 800203e:	2300      	movs	r3, #0
 8002040:	817b      	strh	r3, [r7, #10]
	driveGimbalMotors(u);
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	4618      	mov	r0, r3
 8002046:	f000 f8e3 	bl	8002210 <driveGimbalMotors>
}
 800204a:	bf00      	nop
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	c4610000 	.word	0xc4610000
 8002058:	200003f8 	.word	0x200003f8
 800205c:	2000043c 	.word	0x2000043c
 8002060:	20000250 	.word	0x20000250
 8002064:	200004bf 	.word	0x200004bf
 8002068:	200004c0 	.word	0x200004c0

0800206c <fire_Task>:


void fire_Task(){
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
	...

0800207c <initCanFilter>:

void initCanFilter() {
 800207c:	b580      	push	{r7, lr}
 800207e:	b08a      	sub	sp, #40	; 0x28
 8002080:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002086:	2300      	movs	r3, #0
 8002088:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800208a:	2301      	movs	r3, #1
 800208c:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 800208e:	2300      	movs	r3, #0
 8002090:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8002096:	2300      	movs	r3, #0
 8002098:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80020a2:	2301      	movs	r3, #1
 80020a4:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80020aa:	463b      	mov	r3, r7
 80020ac:	4619      	mov	r1, r3
 80020ae:	4808      	ldr	r0, [pc, #32]	; (80020d0 <initCanFilter+0x54>)
 80020b0:	f001 fa6e 	bl	8003590 <HAL_CAN_ConfigFilter>

	sFilterConfig.SlaveStartFilterBank = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterBank = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]

	HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig);
 80020bc:	463b      	mov	r3, r7
 80020be:	4619      	mov	r1, r3
 80020c0:	4804      	ldr	r0, [pc, #16]	; (80020d4 <initCanFilter+0x58>)
 80020c2:	f001 fa65 	bl	8003590 <HAL_CAN_ConfigFilter>
}
 80020c6:	bf00      	nop
 80020c8:	3728      	adds	r7, #40	; 0x28
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000490 	.word	0x20000490
 80020d4:	20000468 	.word	0x20000468

080020d8 <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
 80020e4:	603b      	str	r3, [r7, #0]
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	69b9      	ldr	r1, [r7, #24]
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	1a8a      	subs	r2, r1, r2
 80020f2:	fb02 f203 	mul.w	r2, r2, r3
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	1acb      	subs	r3, r1, r3
 80020fc:	fb92 f2f3 	sdiv	r2, r2, r3
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	4413      	add	r3, r2
	}
 8002104:	4618      	mov	r0, r3
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
	...

08002120 <driveWheel>:
 */
#include "motor.h"

const int CaseMotor_MaxSpeed = 30 * 256;

void driveWheel(int16_t *u) {
 8002120:	b580      	push	{r7, lr}
 8002122:	b08c      	sub	sp, #48	; 0x30
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef header;
	uint8_t TxData[8] = { 0 };
 8002128:	f107 030c 	add.w	r3, r7, #12
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
	uint32_t TxMailbox;

	header.StdId = 0x200;
 8002132:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002136:	617b      	str	r3, [r7, #20]
	header.RTR = CAN_RTR_DATA;
 8002138:	2300      	movs	r3, #0
 800213a:	623b      	str	r3, [r7, #32]
	header.IDE = CAN_ID_STD;
 800213c:	2300      	movs	r3, #0
 800213e:	61fb      	str	r3, [r7, #28]
	header.DLC = 8;
 8002140:	2308      	movs	r3, #8
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
	//header.TransmitGlobalTime = DISABLE;

	for (int i = 0; i < 2; i++) {
 8002144:	2300      	movs	r3, #0
 8002146:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002148:	e050      	b.n	80021ec <driveWheel+0xcc>
		if (CaseMotor_MaxSpeed < u[i]) {
 800214a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	4413      	add	r3, r2
 8002152:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002156:	461a      	mov	r2, r3
 8002158:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800215c:	429a      	cmp	r2, r3
 800215e:	dd0b      	ble.n	8002178 <driveWheel+0x58>
			u[i] = CaseMotor_MaxSpeed - 1;
 8002160:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8002164:	b29b      	uxth	r3, r3
 8002166:	3b01      	subs	r3, #1
 8002168:	b299      	uxth	r1, r3
 800216a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	4413      	add	r3, r2
 8002172:	b20a      	sxth	r2, r1
 8002174:	801a      	strh	r2, [r3, #0]
 8002176:	e017      	b.n	80021a8 <driveWheel+0x88>
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 8002178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	4413      	add	r3, r2
 8002180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002184:	461a      	mov	r2, r3
 8002186:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800218a:	425b      	negs	r3, r3
 800218c:	429a      	cmp	r2, r3
 800218e:	da0b      	bge.n	80021a8 <driveWheel+0x88>
			u[i] = -CaseMotor_MaxSpeed + 1;
 8002190:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8002194:	b29b      	uxth	r3, r3
 8002196:	f1c3 0301 	rsb	r3, r3, #1
 800219a:	b299      	uxth	r1, r3
 800219c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	4413      	add	r3, r2
 80021a4:	b20a      	sxth	r2, r1
 80021a6:	801a      	strh	r2, [r3, #0]
		}
		TxData[i * 2] = u[i] >> 8;
 80021a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	4413      	add	r3, r2
 80021b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021b4:	121b      	asrs	r3, r3, #8
 80021b6:	b21a      	sxth	r2, r3
 80021b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80021c2:	440b      	add	r3, r1
 80021c4:	f803 2c24 	strb.w	r2, [r3, #-36]
		TxData[i * 2 + 1] = u[i] & 0xFF;
 80021c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	4413      	add	r3, r2
 80021d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80021d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	3301      	adds	r3, #1
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80021e0:	440b      	add	r3, r1
 80021e2:	f803 2c24 	strb.w	r2, [r3, #-36]
	for (int i = 0; i < 2; i++) {
 80021e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e8:	3301      	adds	r3, #1
 80021ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	ddab      	ble.n	800214a <driveWheel+0x2a>
	}

	HAL_CAN_AddTxMessage(&hcan2, &header, TxData, &TxMailbox);
 80021f2:	f107 0308 	add.w	r3, r7, #8
 80021f6:	f107 020c 	add.w	r2, r7, #12
 80021fa:	f107 0114 	add.w	r1, r7, #20
 80021fe:	4803      	ldr	r0, [pc, #12]	; (800220c <driveWheel+0xec>)
 8002200:	f001 faea 	bl	80037d8 <HAL_CAN_AddTxMessage>

}
 8002204:	bf00      	nop
 8002206:	3730      	adds	r7, #48	; 0x30
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20000468 	.word	0x20000468

08002210 <driveGimbalMotors>:

void driveGimbalMotors(int16_t *u) {
 8002210:	b580      	push	{r7, lr}
 8002212:	b08c      	sub	sp, #48	; 0x30
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef header;
	uint8_t TxData[8] = { 0 };
 8002218:	f107 030c 	add.w	r3, r7, #12
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
	uint32_t TxMailbox;

	header.StdId = 0x1ff;
 8002222:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002226:	617b      	str	r3, [r7, #20]
	header.RTR = CAN_RTR_DATA;
 8002228:	2300      	movs	r3, #0
 800222a:	623b      	str	r3, [r7, #32]
	header.IDE = CAN_ID_STD;
 800222c:	2300      	movs	r3, #0
 800222e:	61fb      	str	r3, [r7, #28]
	header.DLC = 8;
 8002230:	2308      	movs	r3, #8
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
	//header.TransmitGlobalTime = DISABLE;

	for (int i = 0; i < 4; i++) {
 8002234:	2300      	movs	r3, #0
 8002236:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002238:	e053      	b.n	80022e2 <driveGimbalMotors+0xd2>
		if(i==2){
 800223a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800223c:	2b02      	cmp	r3, #2
 800223e:	d12e      	bne.n	800229e <driveGimbalMotors+0x8e>
		if (CaseMotor_MaxSpeed < u[i]) {
 8002240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	4413      	add	r3, r2
 8002248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800224c:	461a      	mov	r2, r3
 800224e:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8002252:	429a      	cmp	r2, r3
 8002254:	dd0b      	ble.n	800226e <driveGimbalMotors+0x5e>
			u[i] = CaseMotor_MaxSpeed - 1;
 8002256:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800225a:	b29b      	uxth	r3, r3
 800225c:	3b01      	subs	r3, #1
 800225e:	b299      	uxth	r1, r3
 8002260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	4413      	add	r3, r2
 8002268:	b20a      	sxth	r2, r1
 800226a:	801a      	strh	r2, [r3, #0]
 800226c:	e017      	b.n	800229e <driveGimbalMotors+0x8e>
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 800226e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	f9b3 3000 	ldrsh.w	r3, [r3]
 800227a:	461a      	mov	r2, r3
 800227c:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8002280:	425b      	negs	r3, r3
 8002282:	429a      	cmp	r2, r3
 8002284:	da0b      	bge.n	800229e <driveGimbalMotors+0x8e>
			u[i] = -CaseMotor_MaxSpeed + 1;
 8002286:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800228a:	b29b      	uxth	r3, r3
 800228c:	f1c3 0301 	rsb	r3, r3, #1
 8002290:	b299      	uxth	r1, r3
 8002292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	4413      	add	r3, r2
 800229a:	b20a      	sxth	r2, r1
 800229c:	801a      	strh	r2, [r3, #0]
		}
		}
		TxData[i * 2] = u[i] >> 8;
 800229e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022aa:	121b      	asrs	r3, r3, #8
 80022ac:	b21a      	sxth	r2, r3
 80022ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80022b8:	440b      	add	r3, r1
 80022ba:	f803 2c24 	strb.w	r2, [r3, #-36]
		TxData[i * 2 + 1] = u[i] & 0xFF;
 80022be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	3301      	adds	r3, #1
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80022d6:	440b      	add	r3, r1
 80022d8:	f803 2c24 	strb.w	r2, [r3, #-36]
	for (int i = 0; i < 4; i++) {
 80022dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022de:	3301      	adds	r3, #1
 80022e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	dda8      	ble.n	800223a <driveGimbalMotors+0x2a>
	}

	HAL_CAN_AddTxMessage(&hcan1, &header, TxData, &TxMailbox);
 80022e8:	f107 0308 	add.w	r3, r7, #8
 80022ec:	f107 020c 	add.w	r2, r7, #12
 80022f0:	f107 0114 	add.w	r1, r7, #20
 80022f4:	4803      	ldr	r0, [pc, #12]	; (8002304 <driveGimbalMotors+0xf4>)
 80022f6:	f001 fa6f 	bl	80037d8 <HAL_CAN_AddTxMessage>
}
 80022fa:	bf00      	nop
 80022fc:	3730      	adds	r7, #48	; 0x30
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000490 	.word	0x20000490

08002308 <pidExecute>:
 *  Created on: 2019/03/12
 *      Author: User
 */
#include "pid.h"

float pidExecute(_pid_t *pid) {
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
	float u = 0;
 8002310:	f04f 0300 	mov.w	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
	pid->integralOut += pid->i * pid->error * (pid->t/1000.0f);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	ed93 7a07 	vldr	s14, [r3, #28]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002328:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	ed93 6a00 	vldr	s12, [r3]
 8002332:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002470 <pidExecute+0x168>
 8002336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800233a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800233e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	edc3 7a07 	vstr	s15, [r3, #28]
	if (pid->integralOutLimit < pid->integralOut) pid->integralOut = pid->integralOutLimit;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	ed93 7a05 	vldr	s14, [r3, #20]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	edd3 7a07 	vldr	s15, [r3, #28]
 8002354:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800235c:	d504      	bpl.n	8002368 <pidExecute+0x60>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	695a      	ldr	r2, [r3, #20]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	61da      	str	r2, [r3, #28]
 8002366:	e014      	b.n	8002392 <pidExecute+0x8a>
	else if (pid->integralOut < -pid->integralOutLimit) pid->integralOut = -pid->integralOutLimit;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	ed93 7a07 	vldr	s14, [r3, #28]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	edd3 7a05 	vldr	s15, [r3, #20]
 8002374:	eef1 7a67 	vneg.f32	s15, s15
 8002378:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800237c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002380:	d507      	bpl.n	8002392 <pidExecute+0x8a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	edd3 7a05 	vldr	s15, [r3, #20]
 8002388:	eef1 7a67 	vneg.f32	s15, s15
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	edc3 7a07 	vstr	s15, [r3, #28]
	pid->differentialFilter = pid->differentialFilter * pid->differentialFilterRate + (pid->d * (pid->error - pid->lastError)*(1000.0f/pid->t)) * (1 - pid->differentialFilterRate);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	edd3 7a06 	vldr	s15, [r3, #24]
 800239e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	edd3 6a03 	vldr	s13, [r3, #12]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	edd3 7a08 	vldr	s15, [r3, #32]
 80023b4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80023b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	ed93 6a00 	vldr	s12, [r3]
 80023c2:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8002470 <pidExecute+0x168>
 80023c6:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80023ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	edd3 7a06 	vldr	s15, [r3, #24]
 80023d4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80023d8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80023dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	u = pid->p * pid->error + pid->integralOut + pid->differentialFilter;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80023f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	edd3 7a07 	vldr	s15, [r3, #28]
 8002400:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800240a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800240e:	edc7 7a03 	vstr	s15, [r7, #12]
	if (pid->outLimit < u) u = pid->outLimit;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	edd3 7a04 	vldr	s15, [r3, #16]
 8002418:	ed97 7a03 	vldr	s14, [r7, #12]
 800241c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002424:	dd03      	ble.n	800242e <pidExecute+0x126>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	e012      	b.n	8002454 <pidExecute+0x14c>
	else if (u < -pid->outLimit)u = -pid->outLimit;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	edd3 7a04 	vldr	s15, [r3, #16]
 8002434:	eef1 7a67 	vneg.f32	s15, s15
 8002438:	ed97 7a03 	vldr	s14, [r7, #12]
 800243c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002444:	d506      	bpl.n	8002454 <pidExecute+0x14c>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	edd3 7a04 	vldr	s15, [r3, #16]
 800244c:	eef1 7a67 	vneg.f32	s15, s15
 8002450:	edc7 7a03 	vstr	s15, [r7, #12]
	pid->lastError = pid->error;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	621a      	str	r2, [r3, #32]
	return u;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	ee07 3a90 	vmov	s15, r3
}
 8002462:	eeb0 0a67 	vmov.f32	s0, s15
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	447a0000 	.word	0x447a0000

08002474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	607b      	str	r3, [r7, #4]
 800247e:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <HAL_MspInit+0x4c>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	4a0f      	ldr	r2, [pc, #60]	; (80024c0 <HAL_MspInit+0x4c>)
 8002484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002488:	6453      	str	r3, [r2, #68]	; 0x44
 800248a:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <HAL_MspInit+0x4c>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002492:	607b      	str	r3, [r7, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	603b      	str	r3, [r7, #0]
 800249a:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <HAL_MspInit+0x4c>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	4a08      	ldr	r2, [pc, #32]	; (80024c0 <HAL_MspInit+0x4c>)
 80024a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a4:	6413      	str	r3, [r2, #64]	; 0x40
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_MspInit+0x4c>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	603b      	str	r3, [r7, #0]
 80024b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40023800 	.word	0x40023800

080024c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024d6:	e7fe      	b.n	80024d6 <HardFault_Handler+0x4>

080024d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024dc:	e7fe      	b.n	80024dc <MemManage_Handler+0x4>

080024de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024de:	b480      	push	{r7}
 80024e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024e2:	e7fe      	b.n	80024e2 <BusFault_Handler+0x4>

080024e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024e8:	e7fe      	b.n	80024e8 <UsageFault_Handler+0x4>

080024ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024ea:	b480      	push	{r7}
 80024ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002506:	b480      	push	{r7}
 8002508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002518:	f000 fefc 	bl	8003314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800251c:	bf00      	nop
 800251e:	bd80      	pop	{r7, pc}

08002520 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002524:	4802      	ldr	r0, [pc, #8]	; (8002530 <DMA1_Stream1_IRQHandler+0x10>)
 8002526:	f001 ffab 	bl	8004480 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000604 	.word	0x20000604

08002534 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002538:	4802      	ldr	r0, [pc, #8]	; (8002544 <CAN1_RX0_IRQHandler+0x10>)
 800253a:	f001 fb60 	bl	8003bfe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000490 	.word	0x20000490

08002548 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800254c:	4802      	ldr	r0, [pc, #8]	; (8002558 <CAN1_RX1_IRQHandler+0x10>)
 800254e:	f001 fb56 	bl	8003bfe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000490 	.word	0x20000490

0800255c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002560:	4802      	ldr	r0, [pc, #8]	; (800256c <TIM7_IRQHandler+0x10>)
 8002562:	f003 fa68 	bl	8005a36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	200005c4 	.word	0x200005c4

08002570 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002574:	4802      	ldr	r0, [pc, #8]	; (8002580 <CAN2_RX0_IRQHandler+0x10>)
 8002576:	f001 fb42 	bl	8003bfe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000468 	.word	0x20000468

08002584 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002588:	4802      	ldr	r0, [pc, #8]	; (8002594 <CAN2_RX1_IRQHandler+0x10>)
 800258a:	f001 fb38 	bl	8003bfe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000468 	.word	0x20000468

08002598 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
 80025a8:	e00a      	b.n	80025c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025aa:	f3af 8000 	nop.w
 80025ae:	4601      	mov	r1, r0
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	60ba      	str	r2, [r7, #8]
 80025b6:	b2ca      	uxtb	r2, r1
 80025b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	3301      	adds	r3, #1
 80025be:	617b      	str	r3, [r7, #20]
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	dbf0      	blt.n	80025aa <_read+0x12>
	}

return len;
 80025c8:	687b      	ldr	r3, [r7, #4]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <_write>:

int _write(int file, char *ptr, int len)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b086      	sub	sp, #24
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	60f8      	str	r0, [r7, #12]
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]
 80025e2:	e009      	b.n	80025f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	60ba      	str	r2, [r7, #8]
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fe ff03 	bl	80013f8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	3301      	adds	r3, #1
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	dbf1      	blt.n	80025e4 <_write+0x12>
	}
	return len;
 8002600:	687b      	ldr	r3, [r7, #4]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <_close>:


int _close(int file)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
	return -1;
 8002612:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002616:	4618      	mov	r0, r3
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002632:	605a      	str	r2, [r3, #4]
	return 0;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <_isatty>:

int _isatty(int file)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
	return 1;
 800264a:	2301      	movs	r3, #1
}
 800264c:	4618      	mov	r0, r3
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
	return 0;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
	...

08002674 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800267c:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <_sbrk+0x50>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d102      	bne.n	800268a <_sbrk+0x16>
		heap_end = &end;
 8002684:	4b0f      	ldr	r3, [pc, #60]	; (80026c4 <_sbrk+0x50>)
 8002686:	4a10      	ldr	r2, [pc, #64]	; (80026c8 <_sbrk+0x54>)
 8002688:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800268a:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <_sbrk+0x50>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <_sbrk+0x50>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4413      	add	r3, r2
 8002698:	466a      	mov	r2, sp
 800269a:	4293      	cmp	r3, r2
 800269c:	d907      	bls.n	80026ae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800269e:	f004 fddd 	bl	800725c <__errno>
 80026a2:	4602      	mov	r2, r0
 80026a4:	230c      	movs	r3, #12
 80026a6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80026a8:	f04f 33ff 	mov.w	r3, #4294967295
 80026ac:	e006      	b.n	80026bc <_sbrk+0x48>
	}

	heap_end += incr;
 80026ae:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <_sbrk+0x50>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4413      	add	r3, r2
 80026b6:	4a03      	ldr	r2, [pc, #12]	; (80026c4 <_sbrk+0x50>)
 80026b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80026ba:	68fb      	ldr	r3, [r7, #12]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	200001fc 	.word	0x200001fc
 80026c8:	200007b0 	.word	0x200007b0

080026cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026d0:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <SystemInit+0x28>)
 80026d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d6:	4a07      	ldr	r2, [pc, #28]	; (80026f4 <SystemInit+0x28>)
 80026d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026e0:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <SystemInit+0x28>)
 80026e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026e6:	609a      	str	r2, [r3, #8]
#endif
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0

  htim1.Instance = TIM1;
 80026fc:	4b25      	ldr	r3, [pc, #148]	; (8002794 <MX_TIM1_Init+0x9c>)
 80026fe:	4a26      	ldr	r2, [pc, #152]	; (8002798 <MX_TIM1_Init+0xa0>)
 8002700:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002702:	4b24      	ldr	r3, [pc, #144]	; (8002794 <MX_TIM1_Init+0x9c>)
 8002704:	2200      	movs	r2, #0
 8002706:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002708:	4b22      	ldr	r3, [pc, #136]	; (8002794 <MX_TIM1_Init+0x9c>)
 800270a:	2200      	movs	r2, #0
 800270c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 30000;
 800270e:	4b21      	ldr	r3, [pc, #132]	; (8002794 <MX_TIM1_Init+0x9c>)
 8002710:	f247 5230 	movw	r2, #30000	; 0x7530
 8002714:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002716:	4b1f      	ldr	r3, [pc, #124]	; (8002794 <MX_TIM1_Init+0x9c>)
 8002718:	2200      	movs	r2, #0
 800271a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800271c:	4b1d      	ldr	r3, [pc, #116]	; (8002794 <MX_TIM1_Init+0x9c>)
 800271e:	2200      	movs	r2, #0
 8002720:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002722:	4b1c      	ldr	r3, [pc, #112]	; (8002794 <MX_TIM1_Init+0x9c>)
 8002724:	2200      	movs	r2, #0
 8002726:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002728:	4b1c      	ldr	r3, [pc, #112]	; (800279c <MX_TIM1_Init+0xa4>)
 800272a:	2201      	movs	r2, #1
 800272c:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800272e:	4b1b      	ldr	r3, [pc, #108]	; (800279c <MX_TIM1_Init+0xa4>)
 8002730:	2200      	movs	r2, #0
 8002732:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002734:	4b19      	ldr	r3, [pc, #100]	; (800279c <MX_TIM1_Init+0xa4>)
 8002736:	2201      	movs	r2, #1
 8002738:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800273a:	4b18      	ldr	r3, [pc, #96]	; (800279c <MX_TIM1_Init+0xa4>)
 800273c:	2200      	movs	r2, #0
 800273e:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8002740:	4b16      	ldr	r3, [pc, #88]	; (800279c <MX_TIM1_Init+0xa4>)
 8002742:	2200      	movs	r2, #0
 8002744:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002746:	4b15      	ldr	r3, [pc, #84]	; (800279c <MX_TIM1_Init+0xa4>)
 8002748:	2200      	movs	r2, #0
 800274a:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800274c:	4b13      	ldr	r3, [pc, #76]	; (800279c <MX_TIM1_Init+0xa4>)
 800274e:	2201      	movs	r2, #1
 8002750:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002752:	4b12      	ldr	r3, [pc, #72]	; (800279c <MX_TIM1_Init+0xa4>)
 8002754:	2200      	movs	r2, #0
 8002756:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8002758:	4b10      	ldr	r3, [pc, #64]	; (800279c <MX_TIM1_Init+0xa4>)
 800275a:	2200      	movs	r2, #0
 800275c:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800275e:	490f      	ldr	r1, [pc, #60]	; (800279c <MX_TIM1_Init+0xa4>)
 8002760:	480c      	ldr	r0, [pc, #48]	; (8002794 <MX_TIM1_Init+0x9c>)
 8002762:	f003 f89f 	bl	80058a4 <HAL_TIM_Encoder_Init>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800276c:	f7ff fcd0 	bl	8002110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002770:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <MX_TIM1_Init+0xa8>)
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002776:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <MX_TIM1_Init+0xa8>)
 8002778:	2200      	movs	r2, #0
 800277a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800277c:	4908      	ldr	r1, [pc, #32]	; (80027a0 <MX_TIM1_Init+0xa8>)
 800277e:	4805      	ldr	r0, [pc, #20]	; (8002794 <MX_TIM1_Init+0x9c>)
 8002780:	f003 fdc6 	bl	8006310 <HAL_TIMEx_MasterConfigSynchronization>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800278a:	f7ff fcc1 	bl	8002110 <Error_Handler>
  }

}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000544 	.word	0x20000544
 8002798:	40010000 	.word	0x40010000
 800279c:	2000040c 	.word	0x2000040c
 80027a0:	20000244 	.word	0x20000244

080027a4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0

  htim2.Instance = TIM2;
 80027a8:	4b24      	ldr	r3, [pc, #144]	; (800283c <MX_TIM2_Init+0x98>)
 80027aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80027b0:	4b22      	ldr	r3, [pc, #136]	; (800283c <MX_TIM2_Init+0x98>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b6:	4b21      	ldr	r3, [pc, #132]	; (800283c <MX_TIM2_Init+0x98>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 30000;
 80027bc:	4b1f      	ldr	r3, [pc, #124]	; (800283c <MX_TIM2_Init+0x98>)
 80027be:	f247 5230 	movw	r2, #30000	; 0x7530
 80027c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c4:	4b1d      	ldr	r3, [pc, #116]	; (800283c <MX_TIM2_Init+0x98>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ca:	4b1c      	ldr	r3, [pc, #112]	; (800283c <MX_TIM2_Init+0x98>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80027d0:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <MX_TIM2_Init+0x9c>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80027d6:	4b1a      	ldr	r3, [pc, #104]	; (8002840 <MX_TIM2_Init+0x9c>)
 80027d8:	2200      	movs	r2, #0
 80027da:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80027dc:	4b18      	ldr	r3, [pc, #96]	; (8002840 <MX_TIM2_Init+0x9c>)
 80027de:	2201      	movs	r2, #1
 80027e0:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80027e2:	4b17      	ldr	r3, [pc, #92]	; (8002840 <MX_TIM2_Init+0x9c>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80027e8:	4b15      	ldr	r3, [pc, #84]	; (8002840 <MX_TIM2_Init+0x9c>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80027ee:	4b14      	ldr	r3, [pc, #80]	; (8002840 <MX_TIM2_Init+0x9c>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80027f4:	4b12      	ldr	r3, [pc, #72]	; (8002840 <MX_TIM2_Init+0x9c>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80027fa:	4b11      	ldr	r3, [pc, #68]	; (8002840 <MX_TIM2_Init+0x9c>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8002800:	4b0f      	ldr	r3, [pc, #60]	; (8002840 <MX_TIM2_Init+0x9c>)
 8002802:	2200      	movs	r2, #0
 8002804:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002806:	490e      	ldr	r1, [pc, #56]	; (8002840 <MX_TIM2_Init+0x9c>)
 8002808:	480c      	ldr	r0, [pc, #48]	; (800283c <MX_TIM2_Init+0x98>)
 800280a:	f003 f84b 	bl	80058a4 <HAL_TIM_Encoder_Init>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002814:	f7ff fc7c 	bl	8002110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002818:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <MX_TIM2_Init+0xa0>)
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800281e:	4b09      	ldr	r3, [pc, #36]	; (8002844 <MX_TIM2_Init+0xa0>)
 8002820:	2200      	movs	r2, #0
 8002822:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002824:	4907      	ldr	r1, [pc, #28]	; (8002844 <MX_TIM2_Init+0xa0>)
 8002826:	4805      	ldr	r0, [pc, #20]	; (800283c <MX_TIM2_Init+0x98>)
 8002828:	f003 fd72 	bl	8006310 <HAL_TIMEx_MasterConfigSynchronization>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002832:	f7ff fc6d 	bl	8002110 <Error_Handler>
  }

}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20000584 	.word	0x20000584
 8002840:	2000040c 	.word	0x2000040c
 8002844:	20000244 	.word	0x20000244

08002848 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0

  htim3.Instance = TIM3;
 800284c:	4b31      	ldr	r3, [pc, #196]	; (8002914 <MX_TIM3_Init+0xcc>)
 800284e:	4a32      	ldr	r2, [pc, #200]	; (8002918 <MX_TIM3_Init+0xd0>)
 8002850:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42;
 8002852:	4b30      	ldr	r3, [pc, #192]	; (8002914 <MX_TIM3_Init+0xcc>)
 8002854:	222a      	movs	r2, #42	; 0x2a
 8002856:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002858:	4b2e      	ldr	r3, [pc, #184]	; (8002914 <MX_TIM3_Init+0xcc>)
 800285a:	2200      	movs	r2, #0
 800285c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800285e:	4b2d      	ldr	r3, [pc, #180]	; (8002914 <MX_TIM3_Init+0xcc>)
 8002860:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002864:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002866:	4b2b      	ldr	r3, [pc, #172]	; (8002914 <MX_TIM3_Init+0xcc>)
 8002868:	2200      	movs	r2, #0
 800286a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800286c:	4b29      	ldr	r3, [pc, #164]	; (8002914 <MX_TIM3_Init+0xcc>)
 800286e:	2200      	movs	r2, #0
 8002870:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002872:	4828      	ldr	r0, [pc, #160]	; (8002914 <MX_TIM3_Init+0xcc>)
 8002874:	f002 ffad 	bl	80057d2 <HAL_TIM_PWM_Init>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_TIM3_Init+0x3a>
  {
    Error_Handler();
 800287e:	f7ff fc47 	bl	8002110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002882:	4b26      	ldr	r3, [pc, #152]	; (800291c <MX_TIM3_Init+0xd4>)
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002888:	4b24      	ldr	r3, [pc, #144]	; (800291c <MX_TIM3_Init+0xd4>)
 800288a:	2200      	movs	r2, #0
 800288c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800288e:	4923      	ldr	r1, [pc, #140]	; (800291c <MX_TIM3_Init+0xd4>)
 8002890:	4820      	ldr	r0, [pc, #128]	; (8002914 <MX_TIM3_Init+0xcc>)
 8002892:	f003 fd3d 	bl	8006310 <HAL_TIMEx_MasterConfigSynchronization>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800289c:	f7ff fc38 	bl	8002110 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028a0:	4b1f      	ldr	r3, [pc, #124]	; (8002920 <MX_TIM3_Init+0xd8>)
 80028a2:	2260      	movs	r2, #96	; 0x60
 80028a4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80028a6:	4b1e      	ldr	r3, [pc, #120]	; (8002920 <MX_TIM3_Init+0xd8>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028ac:	4b1c      	ldr	r3, [pc, #112]	; (8002920 <MX_TIM3_Init+0xd8>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028b2:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <MX_TIM3_Init+0xd8>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028b8:	2200      	movs	r2, #0
 80028ba:	4919      	ldr	r1, [pc, #100]	; (8002920 <MX_TIM3_Init+0xd8>)
 80028bc:	4815      	ldr	r0, [pc, #84]	; (8002914 <MX_TIM3_Init+0xcc>)
 80028be:	f003 f9c3 	bl	8005c48 <HAL_TIM_PWM_ConfigChannel>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80028c8:	f7ff fc22 	bl	8002110 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028cc:	2204      	movs	r2, #4
 80028ce:	4914      	ldr	r1, [pc, #80]	; (8002920 <MX_TIM3_Init+0xd8>)
 80028d0:	4810      	ldr	r0, [pc, #64]	; (8002914 <MX_TIM3_Init+0xcc>)
 80028d2:	f003 f9b9 	bl	8005c48 <HAL_TIM_PWM_ConfigChannel>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80028dc:	f7ff fc18 	bl	8002110 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028e0:	2208      	movs	r2, #8
 80028e2:	490f      	ldr	r1, [pc, #60]	; (8002920 <MX_TIM3_Init+0xd8>)
 80028e4:	480b      	ldr	r0, [pc, #44]	; (8002914 <MX_TIM3_Init+0xcc>)
 80028e6:	f003 f9af 	bl	8005c48 <HAL_TIM_PWM_ConfigChannel>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 80028f0:	f7ff fc0e 	bl	8002110 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80028f4:	220c      	movs	r2, #12
 80028f6:	490a      	ldr	r1, [pc, #40]	; (8002920 <MX_TIM3_Init+0xd8>)
 80028f8:	4806      	ldr	r0, [pc, #24]	; (8002914 <MX_TIM3_Init+0xcc>)
 80028fa:	f003 f9a5 	bl	8005c48 <HAL_TIM_PWM_ConfigChannel>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8002904:	f7ff fc04 	bl	8002110 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8002908:	4802      	ldr	r0, [pc, #8]	; (8002914 <MX_TIM3_Init+0xcc>)
 800290a:	f000 f99d 	bl	8002c48 <HAL_TIM_MspPostInit>

}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20000504 	.word	0x20000504
 8002918:	40000400 	.word	0x40000400
 800291c:	20000244 	.word	0x20000244
 8002920:	20000398 	.word	0x20000398

08002924 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0

  htim7.Instance = TIM7;
 8002928:	4b14      	ldr	r3, [pc, #80]	; (800297c <MX_TIM7_Init+0x58>)
 800292a:	4a15      	ldr	r2, [pc, #84]	; (8002980 <MX_TIM7_Init+0x5c>)
 800292c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 5-1;
 800292e:	4b13      	ldr	r3, [pc, #76]	; (800297c <MX_TIM7_Init+0x58>)
 8002930:	2204      	movs	r2, #4
 8002932:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002934:	4b11      	ldr	r3, [pc, #68]	; (800297c <MX_TIM7_Init+0x58>)
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 16800;
 800293a:	4b10      	ldr	r3, [pc, #64]	; (800297c <MX_TIM7_Init+0x58>)
 800293c:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8002940:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002942:	4b0e      	ldr	r3, [pc, #56]	; (800297c <MX_TIM7_Init+0x58>)
 8002944:	2200      	movs	r2, #0
 8002946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002948:	480c      	ldr	r0, [pc, #48]	; (800297c <MX_TIM7_Init+0x58>)
 800294a:	f002 fef3 	bl	8005734 <HAL_TIM_Base_Init>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <MX_TIM7_Init+0x34>
  {
    Error_Handler();
 8002954:	f7ff fbdc 	bl	8002110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002958:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <MX_TIM7_Init+0x60>)
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800295e:	4b09      	ldr	r3, [pc, #36]	; (8002984 <MX_TIM7_Init+0x60>)
 8002960:	2200      	movs	r2, #0
 8002962:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002964:	4907      	ldr	r1, [pc, #28]	; (8002984 <MX_TIM7_Init+0x60>)
 8002966:	4805      	ldr	r0, [pc, #20]	; (800297c <MX_TIM7_Init+0x58>)
 8002968:	f003 fcd2 	bl	8006310 <HAL_TIMEx_MasterConfigSynchronization>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <MX_TIM7_Init+0x52>
  {
    Error_Handler();
 8002972:	f7ff fbcd 	bl	8002110 <Error_Handler>
  }

}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	200005c4 	.word	0x200005c4
 8002980:	40001400 	.word	0x40001400
 8002984:	20000244 	.word	0x20000244

08002988 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  htim8.Instance = TIM8;
 800298c:	4b3c      	ldr	r3, [pc, #240]	; (8002a80 <MX_TIM8_Init+0xf8>)
 800298e:	4a3d      	ldr	r2, [pc, #244]	; (8002a84 <MX_TIM8_Init+0xfc>)
 8002990:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 48;
 8002992:	4b3b      	ldr	r3, [pc, #236]	; (8002a80 <MX_TIM8_Init+0xf8>)
 8002994:	2230      	movs	r2, #48	; 0x30
 8002996:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002998:	4b39      	ldr	r3, [pc, #228]	; (8002a80 <MX_TIM8_Init+0xf8>)
 800299a:	2200      	movs	r2, #0
 800299c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 20000-1;
 800299e:	4b38      	ldr	r3, [pc, #224]	; (8002a80 <MX_TIM8_Init+0xf8>)
 80029a0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80029a4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029a6:	4b36      	ldr	r3, [pc, #216]	; (8002a80 <MX_TIM8_Init+0xf8>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80029ac:	4b34      	ldr	r3, [pc, #208]	; (8002a80 <MX_TIM8_Init+0xf8>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029b2:	4b33      	ldr	r3, [pc, #204]	; (8002a80 <MX_TIM8_Init+0xf8>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80029b8:	4831      	ldr	r0, [pc, #196]	; (8002a80 <MX_TIM8_Init+0xf8>)
 80029ba:	f002 ff0a 	bl	80057d2 <HAL_TIM_PWM_Init>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <MX_TIM8_Init+0x40>
  {
    Error_Handler();
 80029c4:	f7ff fba4 	bl	8002110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029c8:	4b2f      	ldr	r3, [pc, #188]	; (8002a88 <MX_TIM8_Init+0x100>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029ce:	4b2e      	ldr	r3, [pc, #184]	; (8002a88 <MX_TIM8_Init+0x100>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80029d4:	492c      	ldr	r1, [pc, #176]	; (8002a88 <MX_TIM8_Init+0x100>)
 80029d6:	482a      	ldr	r0, [pc, #168]	; (8002a80 <MX_TIM8_Init+0xf8>)
 80029d8:	f003 fc9a 	bl	8006310 <HAL_TIMEx_MasterConfigSynchronization>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_TIM8_Init+0x5e>
  {
    Error_Handler();
 80029e2:	f7ff fb95 	bl	8002110 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029e6:	4b29      	ldr	r3, [pc, #164]	; (8002a8c <MX_TIM8_Init+0x104>)
 80029e8:	2260      	movs	r2, #96	; 0x60
 80029ea:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80029ec:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <MX_TIM8_Init+0x104>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029f2:	4b26      	ldr	r3, [pc, #152]	; (8002a8c <MX_TIM8_Init+0x104>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80029f8:	4b24      	ldr	r3, [pc, #144]	; (8002a8c <MX_TIM8_Init+0x104>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029fe:	4b23      	ldr	r3, [pc, #140]	; (8002a8c <MX_TIM8_Init+0x104>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a04:	4b21      	ldr	r3, [pc, #132]	; (8002a8c <MX_TIM8_Init+0x104>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a0a:	4b20      	ldr	r3, [pc, #128]	; (8002a8c <MX_TIM8_Init+0x104>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a10:	2208      	movs	r2, #8
 8002a12:	491e      	ldr	r1, [pc, #120]	; (8002a8c <MX_TIM8_Init+0x104>)
 8002a14:	481a      	ldr	r0, [pc, #104]	; (8002a80 <MX_TIM8_Init+0xf8>)
 8002a16:	f003 f917 	bl	8005c48 <HAL_TIM_PWM_ConfigChannel>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <MX_TIM8_Init+0x9c>
  {
    Error_Handler();
 8002a20:	f7ff fb76 	bl	8002110 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a24:	220c      	movs	r2, #12
 8002a26:	4919      	ldr	r1, [pc, #100]	; (8002a8c <MX_TIM8_Init+0x104>)
 8002a28:	4815      	ldr	r0, [pc, #84]	; (8002a80 <MX_TIM8_Init+0xf8>)
 8002a2a:	f003 f90d 	bl	8005c48 <HAL_TIM_PWM_ConfigChannel>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 8002a34:	f7ff fb6c 	bl	8002110 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a38:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <MX_TIM8_Init+0x108>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a3e:	4b14      	ldr	r3, [pc, #80]	; (8002a90 <MX_TIM8_Init+0x108>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a44:	4b12      	ldr	r3, [pc, #72]	; (8002a90 <MX_TIM8_Init+0x108>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a4a:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <MX_TIM8_Init+0x108>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a50:	4b0f      	ldr	r3, [pc, #60]	; (8002a90 <MX_TIM8_Init+0x108>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a56:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <MX_TIM8_Init+0x108>)
 8002a58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a5c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a5e:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <MX_TIM8_Init+0x108>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002a64:	490a      	ldr	r1, [pc, #40]	; (8002a90 <MX_TIM8_Init+0x108>)
 8002a66:	4806      	ldr	r0, [pc, #24]	; (8002a80 <MX_TIM8_Init+0xf8>)
 8002a68:	f003 fcce 	bl	8006408 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8002a72:	f7ff fb4d 	bl	8002110 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8002a76:	4802      	ldr	r0, [pc, #8]	; (8002a80 <MX_TIM8_Init+0xf8>)
 8002a78:	f000 f8e6 	bl	8002c48 <HAL_TIM_MspPostInit>

}
 8002a7c:	bf00      	nop
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	200004c4 	.word	0x200004c4
 8002a84:	40010400 	.word	0x40010400
 8002a88:	20000244 	.word	0x20000244
 8002a8c:	20000398 	.word	0x20000398
 8002a90:	200003d0 	.word	0x200003d0

08002a94 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08c      	sub	sp, #48	; 0x30
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a9c:	f107 031c 	add.w	r3, r7, #28
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	60da      	str	r2, [r3, #12]
 8002aaa:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a32      	ldr	r2, [pc, #200]	; (8002b7c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d12d      	bne.n	8002b12 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61bb      	str	r3, [r7, #24]
 8002aba:	4b31      	ldr	r3, [pc, #196]	; (8002b80 <HAL_TIM_Encoder_MspInit+0xec>)
 8002abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abe:	4a30      	ldr	r2, [pc, #192]	; (8002b80 <HAL_TIM_Encoder_MspInit+0xec>)
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ac6:	4b2e      	ldr	r3, [pc, #184]	; (8002b80 <HAL_TIM_Encoder_MspInit+0xec>)
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	61bb      	str	r3, [r7, #24]
 8002ad0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	4b2a      	ldr	r3, [pc, #168]	; (8002b80 <HAL_TIM_Encoder_MspInit+0xec>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	4a29      	ldr	r2, [pc, #164]	; (8002b80 <HAL_TIM_Encoder_MspInit+0xec>)
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae2:	4b27      	ldr	r3, [pc, #156]	; (8002b80 <HAL_TIM_Encoder_MspInit+0xec>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002aee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af4:	2302      	movs	r3, #2
 8002af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afc:	2300      	movs	r3, #0
 8002afe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b00:	2301      	movs	r3, #1
 8002b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b04:	f107 031c 	add.w	r3, r7, #28
 8002b08:	4619      	mov	r1, r3
 8002b0a:	481e      	ldr	r0, [pc, #120]	; (8002b84 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002b0c:	f001 ff20 	bl	8004950 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002b10:	e030      	b.n	8002b74 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM2)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1a:	d12b      	bne.n	8002b74 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	4b17      	ldr	r3, [pc, #92]	; (8002b80 <HAL_TIM_Encoder_MspInit+0xec>)
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	4a16      	ldr	r2, [pc, #88]	; (8002b80 <HAL_TIM_Encoder_MspInit+0xec>)
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b2c:	4b14      	ldr	r3, [pc, #80]	; (8002b80 <HAL_TIM_Encoder_MspInit+0xec>)
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	4b10      	ldr	r3, [pc, #64]	; (8002b80 <HAL_TIM_Encoder_MspInit+0xec>)
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b40:	4a0f      	ldr	r2, [pc, #60]	; (8002b80 <HAL_TIM_Encoder_MspInit+0xec>)
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	6313      	str	r3, [r2, #48]	; 0x30
 8002b48:	4b0d      	ldr	r3, [pc, #52]	; (8002b80 <HAL_TIM_Encoder_MspInit+0xec>)
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b54:	2303      	movs	r3, #3
 8002b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b58:	2302      	movs	r3, #2
 8002b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b60:	2300      	movs	r3, #0
 8002b62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b64:	2301      	movs	r3, #1
 8002b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b68:	f107 031c 	add.w	r3, r7, #28
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4805      	ldr	r0, [pc, #20]	; (8002b84 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002b70:	f001 feee 	bl	8004950 <HAL_GPIO_Init>
}
 8002b74:	bf00      	nop
 8002b76:	3730      	adds	r7, #48	; 0x30
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40010000 	.word	0x40010000
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40020000 	.word	0x40020000

08002b88 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a15      	ldr	r2, [pc, #84]	; (8002bec <HAL_TIM_PWM_MspInit+0x64>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d10e      	bne.n	8002bb8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	4b14      	ldr	r3, [pc, #80]	; (8002bf0 <HAL_TIM_PWM_MspInit+0x68>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	4a13      	ldr	r2, [pc, #76]	; (8002bf0 <HAL_TIM_PWM_MspInit+0x68>)
 8002ba4:	f043 0302 	orr.w	r3, r3, #2
 8002ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8002baa:	4b11      	ldr	r3, [pc, #68]	; (8002bf0 <HAL_TIM_PWM_MspInit+0x68>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002bb6:	e012      	b.n	8002bde <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM8)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a0d      	ldr	r2, [pc, #52]	; (8002bf4 <HAL_TIM_PWM_MspInit+0x6c>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d10d      	bne.n	8002bde <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	4b0a      	ldr	r3, [pc, #40]	; (8002bf0 <HAL_TIM_PWM_MspInit+0x68>)
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bca:	4a09      	ldr	r2, [pc, #36]	; (8002bf0 <HAL_TIM_PWM_MspInit+0x68>)
 8002bcc:	f043 0302 	orr.w	r3, r3, #2
 8002bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bd2:	4b07      	ldr	r3, [pc, #28]	; (8002bf0 <HAL_TIM_PWM_MspInit+0x68>)
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	60bb      	str	r3, [r7, #8]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
}
 8002bde:	bf00      	nop
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40000400 	.word	0x40000400
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	40010400 	.word	0x40010400

08002bf8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a0e      	ldr	r2, [pc, #56]	; (8002c40 <HAL_TIM_Base_MspInit+0x48>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d115      	bne.n	8002c36 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	4b0d      	ldr	r3, [pc, #52]	; (8002c44 <HAL_TIM_Base_MspInit+0x4c>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	4a0c      	ldr	r2, [pc, #48]	; (8002c44 <HAL_TIM_Base_MspInit+0x4c>)
 8002c14:	f043 0320 	orr.w	r3, r3, #32
 8002c18:	6413      	str	r3, [r2, #64]	; 0x40
 8002c1a:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <HAL_TIM_Base_MspInit+0x4c>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	f003 0320 	and.w	r3, r3, #32
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 6, 0);
 8002c26:	2200      	movs	r2, #0
 8002c28:	2106      	movs	r1, #6
 8002c2a:	2037      	movs	r0, #55	; 0x37
 8002c2c:	f001 faeb 	bl	8004206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002c30:	2037      	movs	r0, #55	; 0x37
 8002c32:	f001 fb04 	bl	800423e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002c36:	bf00      	nop
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40001400 	.word	0x40001400
 8002c44:	40023800 	.word	0x40023800

08002c48 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08a      	sub	sp, #40	; 0x28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c50:	f107 0314 	add.w	r3, r7, #20
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
 8002c5e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a33      	ldr	r2, [pc, #204]	; (8002d34 <HAL_TIM_MspPostInit+0xec>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d13c      	bne.n	8002ce4 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	4b32      	ldr	r3, [pc, #200]	; (8002d38 <HAL_TIM_MspPostInit+0xf0>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	4a31      	ldr	r2, [pc, #196]	; (8002d38 <HAL_TIM_MspPostInit+0xf0>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	6313      	str	r3, [r2, #48]	; 0x30
 8002c7a:	4b2f      	ldr	r3, [pc, #188]	; (8002d38 <HAL_TIM_MspPostInit+0xf0>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	4b2b      	ldr	r3, [pc, #172]	; (8002d38 <HAL_TIM_MspPostInit+0xf0>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	4a2a      	ldr	r2, [pc, #168]	; (8002d38 <HAL_TIM_MspPostInit+0xf0>)
 8002c90:	f043 0302 	orr.w	r3, r3, #2
 8002c94:	6313      	str	r3, [r2, #48]	; 0x30
 8002c96:	4b28      	ldr	r3, [pc, #160]	; (8002d38 <HAL_TIM_MspPostInit+0xf0>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ca2:	23c0      	movs	r3, #192	; 0xc0
 8002ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb6:	f107 0314 	add.w	r3, r7, #20
 8002cba:	4619      	mov	r1, r3
 8002cbc:	481f      	ldr	r0, [pc, #124]	; (8002d3c <HAL_TIM_MspPostInit+0xf4>)
 8002cbe:	f001 fe47 	bl	8004950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd6:	f107 0314 	add.w	r3, r7, #20
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4818      	ldr	r0, [pc, #96]	; (8002d40 <HAL_TIM_MspPostInit+0xf8>)
 8002cde:	f001 fe37 	bl	8004950 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002ce2:	e023      	b.n	8002d2c <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM8)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a16      	ldr	r2, [pc, #88]	; (8002d44 <HAL_TIM_MspPostInit+0xfc>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d11e      	bne.n	8002d2c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	4b11      	ldr	r3, [pc, #68]	; (8002d38 <HAL_TIM_MspPostInit+0xf0>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	4a10      	ldr	r2, [pc, #64]	; (8002d38 <HAL_TIM_MspPostInit+0xf0>)
 8002cf8:	f043 0304 	orr.w	r3, r3, #4
 8002cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfe:	4b0e      	ldr	r3, [pc, #56]	; (8002d38 <HAL_TIM_MspPostInit+0xf0>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	60bb      	str	r3, [r7, #8]
 8002d08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d10:	2302      	movs	r3, #2
 8002d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d20:	f107 0314 	add.w	r3, r7, #20
 8002d24:	4619      	mov	r1, r3
 8002d26:	4808      	ldr	r0, [pc, #32]	; (8002d48 <HAL_TIM_MspPostInit+0x100>)
 8002d28:	f001 fe12 	bl	8004950 <HAL_GPIO_Init>
}
 8002d2c:	bf00      	nop
 8002d2e:	3728      	adds	r7, #40	; 0x28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40000400 	.word	0x40000400
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	40020000 	.word	0x40020000
 8002d40:	40020400 	.word	0x40020400
 8002d44:	40010400 	.word	0x40010400
 8002d48:	40020800 	.word	0x40020800

08002d4c <MX_UART5_Init>:
UART_HandleTypeDef huart6;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8002d50:	4b12      	ldr	r3, [pc, #72]	; (8002d9c <MX_UART5_Init+0x50>)
 8002d52:	4a13      	ldr	r2, [pc, #76]	; (8002da0 <MX_UART5_Init+0x54>)
 8002d54:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002d56:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <MX_UART5_Init+0x50>)
 8002d58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d5c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 8002d5e:	4b0f      	ldr	r3, [pc, #60]	; (8002d9c <MX_UART5_Init+0x50>)
 8002d60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d64:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002d66:	4b0d      	ldr	r3, [pc, #52]	; (8002d9c <MX_UART5_Init+0x50>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <MX_UART5_Init+0x50>)
 8002d6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d72:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002d74:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <MX_UART5_Init+0x50>)
 8002d76:	220c      	movs	r2, #12
 8002d78:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d7a:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <MX_UART5_Init+0x50>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d80:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <MX_UART5_Init+0x50>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002d86:	4805      	ldr	r0, [pc, #20]	; (8002d9c <MX_UART5_Init+0x50>)
 8002d88:	f003 fba4 	bl	80064d4 <HAL_UART_Init>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <MX_UART5_Init+0x4a>
  {
    Error_Handler();
 8002d92:	f7ff f9bd 	bl	8002110 <Error_Handler>
  }

}
 8002d96:	bf00      	nop
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	200006a4 	.word	0x200006a4
 8002da0:	40005000 	.word	0x40005000

08002da4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002da8:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <MX_USART1_UART_Init+0x4c>)
 8002daa:	4a12      	ldr	r2, [pc, #72]	; (8002df4 <MX_USART1_UART_Init+0x50>)
 8002dac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002dae:	4b10      	ldr	r3, [pc, #64]	; (8002df0 <MX_USART1_UART_Init+0x4c>)
 8002db0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002db4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002db6:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <MX_USART1_UART_Init+0x4c>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002dbc:	4b0c      	ldr	r3, [pc, #48]	; (8002df0 <MX_USART1_UART_Init+0x4c>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002dc2:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <MX_USART1_UART_Init+0x4c>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002dc8:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <MX_USART1_UART_Init+0x4c>)
 8002dca:	220c      	movs	r2, #12
 8002dcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dce:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <MX_USART1_UART_Init+0x4c>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dd4:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <MX_USART1_UART_Init+0x4c>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002dda:	4805      	ldr	r0, [pc, #20]	; (8002df0 <MX_USART1_UART_Init+0x4c>)
 8002ddc:	f003 fb7a 	bl	80064d4 <HAL_UART_Init>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002de6:	f7ff f993 	bl	8002110 <Error_Handler>
  }

}
 8002dea:	bf00      	nop
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	200006e4 	.word	0x200006e4
 8002df4:	40011000 	.word	0x40011000

08002df8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002dfc:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <MX_USART2_UART_Init+0x4c>)
 8002dfe:	4a12      	ldr	r2, [pc, #72]	; (8002e48 <MX_USART2_UART_Init+0x50>)
 8002e00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e02:	4b10      	ldr	r3, [pc, #64]	; (8002e44 <MX_USART2_UART_Init+0x4c>)
 8002e04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e0a:	4b0e      	ldr	r3, [pc, #56]	; (8002e44 <MX_USART2_UART_Init+0x4c>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e10:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <MX_USART2_UART_Init+0x4c>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e16:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <MX_USART2_UART_Init+0x4c>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e1c:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <MX_USART2_UART_Init+0x4c>)
 8002e1e:	220c      	movs	r2, #12
 8002e20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e22:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <MX_USART2_UART_Init+0x4c>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e28:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <MX_USART2_UART_Init+0x4c>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e2e:	4805      	ldr	r0, [pc, #20]	; (8002e44 <MX_USART2_UART_Init+0x4c>)
 8002e30:	f003 fb50 	bl	80064d4 <HAL_UART_Init>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002e3a:	f7ff f969 	bl	8002110 <Error_Handler>
  }

}
 8002e3e:	bf00      	nop
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000764 	.word	0x20000764
 8002e48:	40004400 	.word	0x40004400

08002e4c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002e50:	4b11      	ldr	r3, [pc, #68]	; (8002e98 <MX_USART3_UART_Init+0x4c>)
 8002e52:	4a12      	ldr	r2, [pc, #72]	; (8002e9c <MX_USART3_UART_Init+0x50>)
 8002e54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002e56:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <MX_USART3_UART_Init+0x4c>)
 8002e58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e5e:	4b0e      	ldr	r3, [pc, #56]	; (8002e98 <MX_USART3_UART_Init+0x4c>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e64:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <MX_USART3_UART_Init+0x4c>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e6a:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <MX_USART3_UART_Init+0x4c>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e70:	4b09      	ldr	r3, [pc, #36]	; (8002e98 <MX_USART3_UART_Init+0x4c>)
 8002e72:	220c      	movs	r2, #12
 8002e74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e76:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <MX_USART3_UART_Init+0x4c>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e7c:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <MX_USART3_UART_Init+0x4c>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e82:	4805      	ldr	r0, [pc, #20]	; (8002e98 <MX_USART3_UART_Init+0x4c>)
 8002e84:	f003 fb26 	bl	80064d4 <HAL_UART_Init>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002e8e:	f7ff f93f 	bl	8002110 <Error_Handler>
  }

}
 8002e92:	bf00      	nop
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	20000664 	.word	0x20000664
 8002e9c:	40004800 	.word	0x40004800

08002ea0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8002ea4:	4b11      	ldr	r3, [pc, #68]	; (8002eec <MX_USART6_UART_Init+0x4c>)
 8002ea6:	4a12      	ldr	r2, [pc, #72]	; (8002ef0 <MX_USART6_UART_Init+0x50>)
 8002ea8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002eaa:	4b10      	ldr	r3, [pc, #64]	; (8002eec <MX_USART6_UART_Init+0x4c>)
 8002eac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002eb0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002eb2:	4b0e      	ldr	r3, [pc, #56]	; (8002eec <MX_USART6_UART_Init+0x4c>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <MX_USART6_UART_Init+0x4c>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002ebe:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <MX_USART6_UART_Init+0x4c>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002ec4:	4b09      	ldr	r3, [pc, #36]	; (8002eec <MX_USART6_UART_Init+0x4c>)
 8002ec6:	220c      	movs	r2, #12
 8002ec8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eca:	4b08      	ldr	r3, [pc, #32]	; (8002eec <MX_USART6_UART_Init+0x4c>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ed0:	4b06      	ldr	r3, [pc, #24]	; (8002eec <MX_USART6_UART_Init+0x4c>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002ed6:	4805      	ldr	r0, [pc, #20]	; (8002eec <MX_USART6_UART_Init+0x4c>)
 8002ed8:	f003 fafc 	bl	80064d4 <HAL_UART_Init>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002ee2:	f7ff f915 	bl	8002110 <Error_Handler>
  }

}
 8002ee6:	bf00      	nop
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	20000724 	.word	0x20000724
 8002ef0:	40011400 	.word	0x40011400

08002ef4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b094      	sub	sp, #80	; 0x50
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002efc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	605a      	str	r2, [r3, #4]
 8002f06:	609a      	str	r2, [r3, #8]
 8002f08:	60da      	str	r2, [r3, #12]
 8002f0a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a99      	ldr	r2, [pc, #612]	; (8003178 <HAL_UART_MspInit+0x284>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d14b      	bne.n	8002fae <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f1a:	4b98      	ldr	r3, [pc, #608]	; (800317c <HAL_UART_MspInit+0x288>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	4a97      	ldr	r2, [pc, #604]	; (800317c <HAL_UART_MspInit+0x288>)
 8002f20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f24:	6413      	str	r3, [r2, #64]	; 0x40
 8002f26:	4b95      	ldr	r3, [pc, #596]	; (800317c <HAL_UART_MspInit+0x288>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	637b      	str	r3, [r7, #52]	; 0x34
 8002f36:	4b91      	ldr	r3, [pc, #580]	; (800317c <HAL_UART_MspInit+0x288>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	4a90      	ldr	r2, [pc, #576]	; (800317c <HAL_UART_MspInit+0x288>)
 8002f3c:	f043 0304 	orr.w	r3, r3, #4
 8002f40:	6313      	str	r3, [r2, #48]	; 0x30
 8002f42:	4b8e      	ldr	r3, [pc, #568]	; (800317c <HAL_UART_MspInit+0x288>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	633b      	str	r3, [r7, #48]	; 0x30
 8002f52:	4b8a      	ldr	r3, [pc, #552]	; (800317c <HAL_UART_MspInit+0x288>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	4a89      	ldr	r2, [pc, #548]	; (800317c <HAL_UART_MspInit+0x288>)
 8002f58:	f043 0308 	orr.w	r3, r3, #8
 8002f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5e:	4b87      	ldr	r3, [pc, #540]	; (800317c <HAL_UART_MspInit+0x288>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	633b      	str	r3, [r7, #48]	; 0x30
 8002f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f70:	2302      	movs	r3, #2
 8002f72:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f74:	2301      	movs	r3, #1
 8002f76:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002f7c:	2308      	movs	r3, #8
 8002f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f84:	4619      	mov	r1, r3
 8002f86:	487e      	ldr	r0, [pc, #504]	; (8003180 <HAL_UART_MspInit+0x28c>)
 8002f88:	f001 fce2 	bl	8004950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f8c:	2304      	movs	r3, #4
 8002f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f90:	2302      	movs	r3, #2
 8002f92:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f94:	2301      	movs	r3, #1
 8002f96:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002f9c:	2308      	movs	r3, #8
 8002f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fa0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4877      	ldr	r0, [pc, #476]	; (8003184 <HAL_UART_MspInit+0x290>)
 8002fa8:	f001 fcd2 	bl	8004950 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002fac:	e12b      	b.n	8003206 <HAL_UART_MspInit+0x312>
  else if(uartHandle->Instance==USART1)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a75      	ldr	r2, [pc, #468]	; (8003188 <HAL_UART_MspInit+0x294>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d12c      	bne.n	8003012 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fb8:	2300      	movs	r3, #0
 8002fba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fbc:	4b6f      	ldr	r3, [pc, #444]	; (800317c <HAL_UART_MspInit+0x288>)
 8002fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc0:	4a6e      	ldr	r2, [pc, #440]	; (800317c <HAL_UART_MspInit+0x288>)
 8002fc2:	f043 0310 	orr.w	r3, r3, #16
 8002fc6:	6453      	str	r3, [r2, #68]	; 0x44
 8002fc8:	4b6c      	ldr	r3, [pc, #432]	; (800317c <HAL_UART_MspInit+0x288>)
 8002fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fcc:	f003 0310 	and.w	r3, r3, #16
 8002fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fd8:	4b68      	ldr	r3, [pc, #416]	; (800317c <HAL_UART_MspInit+0x288>)
 8002fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fdc:	4a67      	ldr	r2, [pc, #412]	; (800317c <HAL_UART_MspInit+0x288>)
 8002fde:	f043 0302 	orr.w	r3, r3, #2
 8002fe2:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe4:	4b65      	ldr	r3, [pc, #404]	; (800317c <HAL_UART_MspInit+0x288>)
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ff0:	23c0      	movs	r3, #192	; 0xc0
 8002ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003000:	2307      	movs	r3, #7
 8003002:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003004:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003008:	4619      	mov	r1, r3
 800300a:	4860      	ldr	r0, [pc, #384]	; (800318c <HAL_UART_MspInit+0x298>)
 800300c:	f001 fca0 	bl	8004950 <HAL_GPIO_Init>
}
 8003010:	e0f9      	b.n	8003206 <HAL_UART_MspInit+0x312>
  else if(uartHandle->Instance==USART2)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a5e      	ldr	r2, [pc, #376]	; (8003190 <HAL_UART_MspInit+0x29c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d12c      	bne.n	8003076 <HAL_UART_MspInit+0x182>
    __HAL_RCC_USART2_CLK_ENABLE();
 800301c:	2300      	movs	r3, #0
 800301e:	627b      	str	r3, [r7, #36]	; 0x24
 8003020:	4b56      	ldr	r3, [pc, #344]	; (800317c <HAL_UART_MspInit+0x288>)
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	4a55      	ldr	r2, [pc, #340]	; (800317c <HAL_UART_MspInit+0x288>)
 8003026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800302a:	6413      	str	r3, [r2, #64]	; 0x40
 800302c:	4b53      	ldr	r3, [pc, #332]	; (800317c <HAL_UART_MspInit+0x288>)
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003038:	2300      	movs	r3, #0
 800303a:	623b      	str	r3, [r7, #32]
 800303c:	4b4f      	ldr	r3, [pc, #316]	; (800317c <HAL_UART_MspInit+0x288>)
 800303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003040:	4a4e      	ldr	r2, [pc, #312]	; (800317c <HAL_UART_MspInit+0x288>)
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	6313      	str	r3, [r2, #48]	; 0x30
 8003048:	4b4c      	ldr	r3, [pc, #304]	; (800317c <HAL_UART_MspInit+0x288>)
 800304a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	623b      	str	r3, [r7, #32]
 8003052:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003054:	230c      	movs	r3, #12
 8003056:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003058:	2302      	movs	r3, #2
 800305a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305c:	2300      	movs	r3, #0
 800305e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003060:	2303      	movs	r3, #3
 8003062:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003064:	2307      	movs	r3, #7
 8003066:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003068:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800306c:	4619      	mov	r1, r3
 800306e:	4849      	ldr	r0, [pc, #292]	; (8003194 <HAL_UART_MspInit+0x2a0>)
 8003070:	f001 fc6e 	bl	8004950 <HAL_GPIO_Init>
}
 8003074:	e0c7      	b.n	8003206 <HAL_UART_MspInit+0x312>
  else if(uartHandle->Instance==USART3)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a47      	ldr	r2, [pc, #284]	; (8003198 <HAL_UART_MspInit+0x2a4>)
 800307c:	4293      	cmp	r3, r2
 800307e:	f040 8091 	bne.w	80031a4 <HAL_UART_MspInit+0x2b0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	4b3d      	ldr	r3, [pc, #244]	; (800317c <HAL_UART_MspInit+0x288>)
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	4a3c      	ldr	r2, [pc, #240]	; (800317c <HAL_UART_MspInit+0x288>)
 800308c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003090:	6413      	str	r3, [r2, #64]	; 0x40
 8003092:	4b3a      	ldr	r3, [pc, #232]	; (800317c <HAL_UART_MspInit+0x288>)
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800309a:	61fb      	str	r3, [r7, #28]
 800309c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800309e:	2300      	movs	r3, #0
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	4b36      	ldr	r3, [pc, #216]	; (800317c <HAL_UART_MspInit+0x288>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	4a35      	ldr	r2, [pc, #212]	; (800317c <HAL_UART_MspInit+0x288>)
 80030a8:	f043 0304 	orr.w	r3, r3, #4
 80030ac:	6313      	str	r3, [r2, #48]	; 0x30
 80030ae:	4b33      	ldr	r3, [pc, #204]	; (800317c <HAL_UART_MspInit+0x288>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	f003 0304 	and.w	r3, r3, #4
 80030b6:	61bb      	str	r3, [r7, #24]
 80030b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ba:	2300      	movs	r3, #0
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	4b2f      	ldr	r3, [pc, #188]	; (800317c <HAL_UART_MspInit+0x288>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	4a2e      	ldr	r2, [pc, #184]	; (800317c <HAL_UART_MspInit+0x288>)
 80030c4:	f043 0302 	orr.w	r3, r3, #2
 80030c8:	6313      	str	r3, [r2, #48]	; 0x30
 80030ca:	4b2c      	ldr	r3, [pc, #176]	; (800317c <HAL_UART_MspInit+0x288>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80030d6:	2320      	movs	r3, #32
 80030d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030da:	2302      	movs	r3, #2
 80030dc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e2:	2303      	movs	r3, #3
 80030e4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030e6:	2307      	movs	r3, #7
 80030e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030ee:	4619      	mov	r1, r3
 80030f0:	4823      	ldr	r0, [pc, #140]	; (8003180 <HAL_UART_MspInit+0x28c>)
 80030f2:	f001 fc2d 	bl	8004950 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80030f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fc:	2302      	movs	r3, #2
 80030fe:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003100:	2300      	movs	r3, #0
 8003102:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003104:	2303      	movs	r3, #3
 8003106:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003108:	2307      	movs	r3, #7
 800310a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800310c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003110:	4619      	mov	r1, r3
 8003112:	481e      	ldr	r0, [pc, #120]	; (800318c <HAL_UART_MspInit+0x298>)
 8003114:	f001 fc1c 	bl	8004950 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003118:	4b20      	ldr	r3, [pc, #128]	; (800319c <HAL_UART_MspInit+0x2a8>)
 800311a:	4a21      	ldr	r2, [pc, #132]	; (80031a0 <HAL_UART_MspInit+0x2ac>)
 800311c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800311e:	4b1f      	ldr	r3, [pc, #124]	; (800319c <HAL_UART_MspInit+0x2a8>)
 8003120:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003124:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003126:	4b1d      	ldr	r3, [pc, #116]	; (800319c <HAL_UART_MspInit+0x2a8>)
 8003128:	2200      	movs	r2, #0
 800312a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800312c:	4b1b      	ldr	r3, [pc, #108]	; (800319c <HAL_UART_MspInit+0x2a8>)
 800312e:	2200      	movs	r2, #0
 8003130:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003132:	4b1a      	ldr	r3, [pc, #104]	; (800319c <HAL_UART_MspInit+0x2a8>)
 8003134:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003138:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800313a:	4b18      	ldr	r3, [pc, #96]	; (800319c <HAL_UART_MspInit+0x2a8>)
 800313c:	2200      	movs	r2, #0
 800313e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003140:	4b16      	ldr	r3, [pc, #88]	; (800319c <HAL_UART_MspInit+0x2a8>)
 8003142:	2200      	movs	r2, #0
 8003144:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003146:	4b15      	ldr	r3, [pc, #84]	; (800319c <HAL_UART_MspInit+0x2a8>)
 8003148:	f44f 7280 	mov.w	r2, #256	; 0x100
 800314c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800314e:	4b13      	ldr	r3, [pc, #76]	; (800319c <HAL_UART_MspInit+0x2a8>)
 8003150:	2200      	movs	r2, #0
 8003152:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003154:	4b11      	ldr	r3, [pc, #68]	; (800319c <HAL_UART_MspInit+0x2a8>)
 8003156:	2200      	movs	r2, #0
 8003158:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800315a:	4810      	ldr	r0, [pc, #64]	; (800319c <HAL_UART_MspInit+0x2a8>)
 800315c:	f001 f88a 	bl	8004274 <HAL_DMA_Init>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_UART_MspInit+0x276>
      Error_Handler();
 8003166:	f7fe ffd3 	bl	8002110 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a0b      	ldr	r2, [pc, #44]	; (800319c <HAL_UART_MspInit+0x2a8>)
 800316e:	635a      	str	r2, [r3, #52]	; 0x34
 8003170:	4a0a      	ldr	r2, [pc, #40]	; (800319c <HAL_UART_MspInit+0x2a8>)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003176:	e046      	b.n	8003206 <HAL_UART_MspInit+0x312>
 8003178:	40005000 	.word	0x40005000
 800317c:	40023800 	.word	0x40023800
 8003180:	40020800 	.word	0x40020800
 8003184:	40020c00 	.word	0x40020c00
 8003188:	40011000 	.word	0x40011000
 800318c:	40020400 	.word	0x40020400
 8003190:	40004400 	.word	0x40004400
 8003194:	40020000 	.word	0x40020000
 8003198:	40004800 	.word	0x40004800
 800319c:	20000604 	.word	0x20000604
 80031a0:	40026028 	.word	0x40026028
  else if(uartHandle->Instance==USART6)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a19      	ldr	r2, [pc, #100]	; (8003210 <HAL_UART_MspInit+0x31c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d12b      	bne.n	8003206 <HAL_UART_MspInit+0x312>
    __HAL_RCC_USART6_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	4b18      	ldr	r3, [pc, #96]	; (8003214 <HAL_UART_MspInit+0x320>)
 80031b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b6:	4a17      	ldr	r2, [pc, #92]	; (8003214 <HAL_UART_MspInit+0x320>)
 80031b8:	f043 0320 	orr.w	r3, r3, #32
 80031bc:	6453      	str	r3, [r2, #68]	; 0x44
 80031be:	4b15      	ldr	r3, [pc, #84]	; (8003214 <HAL_UART_MspInit+0x320>)
 80031c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c2:	f003 0320 	and.w	r3, r3, #32
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	4b11      	ldr	r3, [pc, #68]	; (8003214 <HAL_UART_MspInit+0x320>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	4a10      	ldr	r2, [pc, #64]	; (8003214 <HAL_UART_MspInit+0x320>)
 80031d4:	f043 0304 	orr.w	r3, r3, #4
 80031d8:	6313      	str	r3, [r2, #48]	; 0x30
 80031da:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <HAL_UART_MspInit+0x320>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031e6:	23c0      	movs	r3, #192	; 0xc0
 80031e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ea:	2302      	movs	r3, #2
 80031ec:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f2:	2303      	movs	r3, #3
 80031f4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80031f6:	2308      	movs	r3, #8
 80031f8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80031fe:	4619      	mov	r1, r3
 8003200:	4805      	ldr	r0, [pc, #20]	; (8003218 <HAL_UART_MspInit+0x324>)
 8003202:	f001 fba5 	bl	8004950 <HAL_GPIO_Init>
}
 8003206:	bf00      	nop
 8003208:	3750      	adds	r7, #80	; 0x50
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40011400 	.word	0x40011400
 8003214:	40023800 	.word	0x40023800
 8003218:	40020800 	.word	0x40020800

0800321c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800321c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003254 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003220:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003222:	e003      	b.n	800322c <LoopCopyDataInit>

08003224 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003224:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003226:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003228:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800322a:	3104      	adds	r1, #4

0800322c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800322c:	480b      	ldr	r0, [pc, #44]	; (800325c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800322e:	4b0c      	ldr	r3, [pc, #48]	; (8003260 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003230:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003232:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003234:	d3f6      	bcc.n	8003224 <CopyDataInit>
  ldr  r2, =_sbss
 8003236:	4a0b      	ldr	r2, [pc, #44]	; (8003264 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003238:	e002      	b.n	8003240 <LoopFillZerobss>

0800323a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800323a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800323c:	f842 3b04 	str.w	r3, [r2], #4

08003240 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003240:	4b09      	ldr	r3, [pc, #36]	; (8003268 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003242:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003244:	d3f9      	bcc.n	800323a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003246:	f7ff fa41 	bl	80026cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800324a:	f004 f80d 	bl	8007268 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800324e:	f7fe f8e5 	bl	800141c <main>
  bx  lr    
 8003252:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003254:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003258:	08009950 	.word	0x08009950
  ldr  r0, =_sdata
 800325c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003260:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8003264:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8003268:	200007ac 	.word	0x200007ac

0800326c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800326c:	e7fe      	b.n	800326c <ADC_IRQHandler>
	...

08003270 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003274:	4b0e      	ldr	r3, [pc, #56]	; (80032b0 <HAL_Init+0x40>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a0d      	ldr	r2, [pc, #52]	; (80032b0 <HAL_Init+0x40>)
 800327a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800327e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003280:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <HAL_Init+0x40>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a0a      	ldr	r2, [pc, #40]	; (80032b0 <HAL_Init+0x40>)
 8003286:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800328a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800328c:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <HAL_Init+0x40>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a07      	ldr	r2, [pc, #28]	; (80032b0 <HAL_Init+0x40>)
 8003292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003296:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003298:	2003      	movs	r0, #3
 800329a:	f000 ffa9 	bl	80041f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800329e:	2000      	movs	r0, #0
 80032a0:	f000 f808 	bl	80032b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032a4:	f7ff f8e6 	bl	8002474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40023c00 	.word	0x40023c00

080032b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032bc:	4b12      	ldr	r3, [pc, #72]	; (8003308 <HAL_InitTick+0x54>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	4b12      	ldr	r3, [pc, #72]	; (800330c <HAL_InitTick+0x58>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	4619      	mov	r1, r3
 80032c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80032ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 ffc1 	bl	800425a <HAL_SYSTICK_Config>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e00e      	b.n	8003300 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b0f      	cmp	r3, #15
 80032e6:	d80a      	bhi.n	80032fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032e8:	2200      	movs	r2, #0
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	f04f 30ff 	mov.w	r0, #4294967295
 80032f0:	f000 ff89 	bl	8004206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032f4:	4a06      	ldr	r2, [pc, #24]	; (8003310 <HAL_InitTick+0x5c>)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
 80032fc:	e000      	b.n	8003300 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	20000000 	.word	0x20000000
 800330c:	20000008 	.word	0x20000008
 8003310:	20000004 	.word	0x20000004

08003314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003318:	4b06      	ldr	r3, [pc, #24]	; (8003334 <HAL_IncTick+0x20>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	461a      	mov	r2, r3
 800331e:	4b06      	ldr	r3, [pc, #24]	; (8003338 <HAL_IncTick+0x24>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4413      	add	r3, r2
 8003324:	4a04      	ldr	r2, [pc, #16]	; (8003338 <HAL_IncTick+0x24>)
 8003326:	6013      	str	r3, [r2, #0]
}
 8003328:	bf00      	nop
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	20000008 	.word	0x20000008
 8003338:	200007a4 	.word	0x200007a4

0800333c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  return uwTick;
 8003340:	4b03      	ldr	r3, [pc, #12]	; (8003350 <HAL_GetTick+0x14>)
 8003342:	681b      	ldr	r3, [r3, #0]
}
 8003344:	4618      	mov	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	200007a4 	.word	0x200007a4

08003354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800335c:	f7ff ffee 	bl	800333c <HAL_GetTick>
 8003360:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336c:	d005      	beq.n	800337a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800336e:	4b09      	ldr	r3, [pc, #36]	; (8003394 <HAL_Delay+0x40>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4413      	add	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800337a:	bf00      	nop
 800337c:	f7ff ffde 	bl	800333c <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	429a      	cmp	r2, r3
 800338a:	d8f7      	bhi.n	800337c <HAL_Delay+0x28>
  {
  }
}
 800338c:	bf00      	nop
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	20000008 	.word	0x20000008

08003398 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e0ed      	b.n	8003586 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d102      	bne.n	80033bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7fd fe78 	bl	80010ac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0202 	bic.w	r2, r2, #2
 80033ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033cc:	f7ff ffb6 	bl	800333c <HAL_GetTick>
 80033d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80033d2:	e012      	b.n	80033fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80033d4:	f7ff ffb2 	bl	800333c <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b0a      	cmp	r3, #10
 80033e0:	d90b      	bls.n	80033fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2205      	movs	r2, #5
 80033f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e0c5      	b.n	8003586 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1e5      	bne.n	80033d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003418:	f7ff ff90 	bl	800333c <HAL_GetTick>
 800341c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800341e:	e012      	b.n	8003446 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003420:	f7ff ff8c 	bl	800333c <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b0a      	cmp	r3, #10
 800342c:	d90b      	bls.n	8003446 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2205      	movs	r2, #5
 800343e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e09f      	b.n	8003586 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0e5      	beq.n	8003420 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	7e1b      	ldrb	r3, [r3, #24]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d108      	bne.n	800346e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	e007      	b.n	800347e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800347c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	7e5b      	ldrb	r3, [r3, #25]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d108      	bne.n	8003498 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	e007      	b.n	80034a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	7e9b      	ldrb	r3, [r3, #26]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d108      	bne.n	80034c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0220 	orr.w	r2, r2, #32
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	e007      	b.n	80034d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0220 	bic.w	r2, r2, #32
 80034d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	7edb      	ldrb	r3, [r3, #27]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d108      	bne.n	80034ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0210 	bic.w	r2, r2, #16
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	e007      	b.n	80034fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0210 	orr.w	r2, r2, #16
 80034fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	7f1b      	ldrb	r3, [r3, #28]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d108      	bne.n	8003516 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0208 	orr.w	r2, r2, #8
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	e007      	b.n	8003526 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0208 	bic.w	r2, r2, #8
 8003524:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	7f5b      	ldrb	r3, [r3, #29]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d108      	bne.n	8003540 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f042 0204 	orr.w	r2, r2, #4
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	e007      	b.n	8003550 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0204 	bic.w	r2, r2, #4
 800354e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	431a      	orrs	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	ea42 0103 	orr.w	r1, r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	1e5a      	subs	r2, r3, #1
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003590:	b480      	push	{r7}
 8003592:	b087      	sub	sp, #28
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035a6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80035a8:	7cfb      	ldrb	r3, [r7, #19]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d003      	beq.n	80035b6 <HAL_CAN_ConfigFilter+0x26>
 80035ae:	7cfb      	ldrb	r3, [r7, #19]
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	f040 80be 	bne.w	8003732 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80035b6:	4b65      	ldr	r3, [pc, #404]	; (800374c <HAL_CAN_ConfigFilter+0x1bc>)
 80035b8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80035c0:	f043 0201 	orr.w	r2, r3, #1
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80035d0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	021b      	lsls	r3, r3, #8
 80035e6:	431a      	orrs	r2, r3
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	f003 031f 	and.w	r3, r3, #31
 80035f6:	2201      	movs	r2, #1
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	43db      	mvns	r3, r3
 8003608:	401a      	ands	r2, r3
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d123      	bne.n	8003660 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	43db      	mvns	r3, r3
 8003622:	401a      	ands	r2, r3
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800363a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	3248      	adds	r2, #72	; 0x48
 8003640:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003654:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003656:	6979      	ldr	r1, [r7, #20]
 8003658:	3348      	adds	r3, #72	; 0x48
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	440b      	add	r3, r1
 800365e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d122      	bne.n	80036ae <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	431a      	orrs	r2, r3
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003688:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	3248      	adds	r2, #72	; 0x48
 800368e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80036a2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80036a4:	6979      	ldr	r1, [r7, #20]
 80036a6:	3348      	adds	r3, #72	; 0x48
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	440b      	add	r3, r1
 80036ac:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d109      	bne.n	80036ca <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	43db      	mvns	r3, r3
 80036c0:	401a      	ands	r2, r3
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80036c8:	e007      	b.n	80036da <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	431a      	orrs	r2, r3
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d109      	bne.n	80036f6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	43db      	mvns	r3, r3
 80036ec:	401a      	ands	r2, r3
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80036f4:	e007      	b.n	8003706 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	431a      	orrs	r2, r3
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d107      	bne.n	800371e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	431a      	orrs	r2, r3
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003724:	f023 0201 	bic.w	r2, r3, #1
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	e006      	b.n	8003740 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
  }
}
 8003740:	4618      	mov	r0, r3
 8003742:	371c      	adds	r7, #28
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	40006400 	.word	0x40006400

08003750 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b01      	cmp	r3, #1
 8003762:	d12e      	bne.n	80037c2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0201 	bic.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800377c:	f7ff fdde 	bl	800333c <HAL_GetTick>
 8003780:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003782:	e012      	b.n	80037aa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003784:	f7ff fdda 	bl	800333c <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b0a      	cmp	r3, #10
 8003790:	d90b      	bls.n	80037aa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2205      	movs	r2, #5
 80037a2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e012      	b.n	80037d0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1e5      	bne.n	8003784 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	e006      	b.n	80037d0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
  }
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80037d8:	b480      	push	{r7}
 80037da:	b089      	sub	sp, #36	; 0x24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
 80037e4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037ec:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80037f6:	7ffb      	ldrb	r3, [r7, #31]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d003      	beq.n	8003804 <HAL_CAN_AddTxMessage+0x2c>
 80037fc:	7ffb      	ldrb	r3, [r7, #31]
 80037fe:	2b02      	cmp	r3, #2
 8003800:	f040 80b8 	bne.w	8003974 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10a      	bne.n	8003824 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003814:	2b00      	cmp	r3, #0
 8003816:	d105      	bne.n	8003824 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 80a0 	beq.w	8003964 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	0e1b      	lsrs	r3, r3, #24
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2b02      	cmp	r3, #2
 8003832:	d907      	bls.n	8003844 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e09e      	b.n	8003982 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003844:	2201      	movs	r2, #1
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	409a      	lsls	r2, r3
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10d      	bne.n	8003872 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003860:	68f9      	ldr	r1, [r7, #12]
 8003862:	6809      	ldr	r1, [r1, #0]
 8003864:	431a      	orrs	r2, r3
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	3318      	adds	r3, #24
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	440b      	add	r3, r1
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	e00f      	b.n	8003892 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800387c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003882:	68f9      	ldr	r1, [r7, #12]
 8003884:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003886:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	3318      	adds	r3, #24
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	440b      	add	r3, r1
 8003890:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6819      	ldr	r1, [r3, #0]
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	691a      	ldr	r2, [r3, #16]
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	3318      	adds	r3, #24
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	440b      	add	r3, r1
 80038a2:	3304      	adds	r3, #4
 80038a4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	7d1b      	ldrb	r3, [r3, #20]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d111      	bne.n	80038d2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	3318      	adds	r3, #24
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	4413      	add	r3, r2
 80038ba:	3304      	adds	r3, #4
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	6811      	ldr	r1, [r2, #0]
 80038c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	3318      	adds	r3, #24
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	440b      	add	r3, r1
 80038ce:	3304      	adds	r3, #4
 80038d0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3307      	adds	r3, #7
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	061a      	lsls	r2, r3, #24
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3306      	adds	r3, #6
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	041b      	lsls	r3, r3, #16
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3305      	adds	r3, #5
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	021b      	lsls	r3, r3, #8
 80038ec:	4313      	orrs	r3, r2
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	3204      	adds	r2, #4
 80038f2:	7812      	ldrb	r2, [r2, #0]
 80038f4:	4610      	mov	r0, r2
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	6811      	ldr	r1, [r2, #0]
 80038fa:	ea43 0200 	orr.w	r2, r3, r0
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	011b      	lsls	r3, r3, #4
 8003902:	440b      	add	r3, r1
 8003904:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003908:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	3303      	adds	r3, #3
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	061a      	lsls	r2, r3, #24
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	3302      	adds	r3, #2
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	041b      	lsls	r3, r3, #16
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3301      	adds	r3, #1
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	021b      	lsls	r3, r3, #8
 8003924:	4313      	orrs	r3, r2
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	7812      	ldrb	r2, [r2, #0]
 800392a:	4610      	mov	r0, r2
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	6811      	ldr	r1, [r2, #0]
 8003930:	ea43 0200 	orr.w	r2, r3, r0
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	440b      	add	r3, r1
 800393a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800393e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	3318      	adds	r3, #24
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	4413      	add	r3, r2
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	6811      	ldr	r1, [r2, #0]
 8003952:	f043 0201 	orr.w	r2, r3, #1
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	3318      	adds	r3, #24
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	440b      	add	r3, r1
 800395e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003960:	2300      	movs	r3, #0
 8003962:	e00e      	b.n	8003982 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e006      	b.n	8003982 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
  }
}
 8003982:	4618      	mov	r0, r3
 8003984:	3724      	adds	r7, #36	; 0x24
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800398e:	b480      	push	{r7}
 8003990:	b087      	sub	sp, #28
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	607a      	str	r2, [r7, #4]
 800399a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039a2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80039a4:	7dfb      	ldrb	r3, [r7, #23]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d003      	beq.n	80039b2 <HAL_CAN_GetRxMessage+0x24>
 80039aa:	7dfb      	ldrb	r3, [r7, #23]
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	f040 80f3 	bne.w	8003b98 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10e      	bne.n	80039d6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d116      	bne.n	80039f4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e0e7      	b.n	8003ba6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d107      	bne.n	80039f4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e0d8      	b.n	8003ba6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	331b      	adds	r3, #27
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	4413      	add	r3, r2
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0204 	and.w	r2, r3, #4
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10c      	bne.n	8003a2c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	331b      	adds	r3, #27
 8003a1a:	011b      	lsls	r3, r3, #4
 8003a1c:	4413      	add	r3, r2
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	0d5b      	lsrs	r3, r3, #21
 8003a22:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	e00b      	b.n	8003a44 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	331b      	adds	r3, #27
 8003a34:	011b      	lsls	r3, r3, #4
 8003a36:	4413      	add	r3, r2
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	08db      	lsrs	r3, r3, #3
 8003a3c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	331b      	adds	r3, #27
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	4413      	add	r3, r2
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0202 	and.w	r2, r3, #2
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	331b      	adds	r3, #27
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	4413      	add	r3, r2
 8003a66:	3304      	adds	r3, #4
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 020f 	and.w	r2, r3, #15
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	331b      	adds	r3, #27
 8003a7a:	011b      	lsls	r3, r3, #4
 8003a7c:	4413      	add	r3, r2
 8003a7e:	3304      	adds	r3, #4
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	0a1b      	lsrs	r3, r3, #8
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	331b      	adds	r3, #27
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	4413      	add	r3, r2
 8003a96:	3304      	adds	r3, #4
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	0c1b      	lsrs	r3, r3, #16
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	0a1a      	lsrs	r2, r3, #8
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	3301      	adds	r3, #1
 8003ace:	b2d2      	uxtb	r2, r2
 8003ad0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	4413      	add	r3, r2
 8003adc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	0c1a      	lsrs	r2, r3, #16
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	3302      	adds	r3, #2
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	4413      	add	r3, r2
 8003af6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	0e1a      	lsrs	r2, r3, #24
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	3303      	adds	r3, #3
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	3304      	adds	r3, #4
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	0a1a      	lsrs	r2, r3, #8
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	3305      	adds	r3, #5
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	4413      	add	r3, r2
 8003b42:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	0c1a      	lsrs	r2, r3, #16
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	3306      	adds	r3, #6
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	0e1a      	lsrs	r2, r3, #24
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	3307      	adds	r3, #7
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d108      	bne.n	8003b84 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68da      	ldr	r2, [r3, #12]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f042 0220 	orr.w	r2, r2, #32
 8003b80:	60da      	str	r2, [r3, #12]
 8003b82:	e007      	b.n	8003b94 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691a      	ldr	r2, [r3, #16]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0220 	orr.w	r2, r2, #32
 8003b92:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003b94:	2300      	movs	r3, #0
 8003b96:	e006      	b.n	8003ba6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
  }
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	371c      	adds	r7, #28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b085      	sub	sp, #20
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
 8003bba:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bc2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d002      	beq.n	8003bd0 <HAL_CAN_ActivateNotification+0x1e>
 8003bca:	7bfb      	ldrb	r3, [r7, #15]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d109      	bne.n	8003be4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6959      	ldr	r1, [r3, #20]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003be0:	2300      	movs	r3, #0
 8003be2:	e006      	b.n	8003bf2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
  }
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b08a      	sub	sp, #40	; 0x28
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003c06:	2300      	movs	r3, #0
 8003c08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d07c      	beq.n	8003d3e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d023      	beq.n	8003c96 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2201      	movs	r2, #1
 8003c54:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f97d 	bl	8003f60 <HAL_CAN_TxMailbox0CompleteCallback>
 8003c66:	e016      	b.n	8003c96 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	f003 0304 	and.w	r3, r3, #4
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d004      	beq.n	8003c7c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c78:	627b      	str	r3, [r7, #36]	; 0x24
 8003c7a:	e00c      	b.n	8003c96 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	f003 0308 	and.w	r3, r3, #8
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d004      	beq.n	8003c90 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8e:	e002      	b.n	8003c96 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f983 	bl	8003f9c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d024      	beq.n	8003cea <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ca8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f95d 	bl	8003f74 <HAL_CAN_TxMailbox1CompleteCallback>
 8003cba:	e016      	b.n	8003cea <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d004      	beq.n	8003cd0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cce:	e00c      	b.n	8003cea <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d004      	beq.n	8003ce4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce2:	e002      	b.n	8003cea <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f963 	bl	8003fb0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d024      	beq.n	8003d3e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003cfc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f93d 	bl	8003f88 <HAL_CAN_TxMailbox2CompleteCallback>
 8003d0e:	e016      	b.n	8003d3e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d004      	beq.n	8003d24 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d20:	627b      	str	r3, [r7, #36]	; 0x24
 8003d22:	e00c      	b.n	8003d3e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d004      	beq.n	8003d38 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d34:	627b      	str	r3, [r7, #36]	; 0x24
 8003d36:	e002      	b.n	8003d3e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 f943 	bl	8003fc4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003d3e:	6a3b      	ldr	r3, [r7, #32]
 8003d40:	f003 0308 	and.w	r3, r3, #8
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00c      	beq.n	8003d62 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f003 0310 	and.w	r3, r3, #16
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d007      	beq.n	8003d62 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2210      	movs	r2, #16
 8003d60:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00b      	beq.n	8003d84 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f003 0308 	and.w	r3, r3, #8
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d006      	beq.n	8003d84 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2208      	movs	r2, #8
 8003d7c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f92a 	bl	8003fd8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d009      	beq.n	8003da2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f003 0303 	and.w	r3, r3, #3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f7fd fd37 	bl	8001810 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00c      	beq.n	8003dc6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	f003 0310 	and.w	r3, r3, #16
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d007      	beq.n	8003dc6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2210      	movs	r2, #16
 8003dc4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	f003 0320 	and.w	r3, r3, #32
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00b      	beq.n	8003de8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	f003 0308 	and.w	r3, r3, #8
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d006      	beq.n	8003de8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2208      	movs	r2, #8
 8003de0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f90c 	bl	8004000 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d009      	beq.n	8003e06 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	f003 0303 	and.w	r3, r3, #3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f8f3 	bl	8003fec <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00b      	beq.n	8003e28 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	f003 0310 	and.w	r3, r3, #16
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d006      	beq.n	8003e28 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2210      	movs	r2, #16
 8003e20:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f8f6 	bl	8004014 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00b      	beq.n	8003e4a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	f003 0308 	and.w	r3, r3, #8
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d006      	beq.n	8003e4a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2208      	movs	r2, #8
 8003e42:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f8ef 	bl	8004028 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d075      	beq.n	8003f40 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	f003 0304 	and.w	r3, r3, #4
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d06c      	beq.n	8003f38 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d008      	beq.n	8003e7a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	f043 0301 	orr.w	r3, r3, #1
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e7a:	6a3b      	ldr	r3, [r7, #32]
 8003e7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d008      	beq.n	8003e96 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	f043 0302 	orr.w	r3, r3, #2
 8003e94:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d008      	beq.n	8003eb2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	f043 0304 	orr.w	r3, r3, #4
 8003eb0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d03d      	beq.n	8003f38 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d038      	beq.n	8003f38 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ecc:	2b30      	cmp	r3, #48	; 0x30
 8003ece:	d017      	beq.n	8003f00 <HAL_CAN_IRQHandler+0x302>
 8003ed0:	2b30      	cmp	r3, #48	; 0x30
 8003ed2:	d804      	bhi.n	8003ede <HAL_CAN_IRQHandler+0x2e0>
 8003ed4:	2b10      	cmp	r3, #16
 8003ed6:	d009      	beq.n	8003eec <HAL_CAN_IRQHandler+0x2ee>
 8003ed8:	2b20      	cmp	r3, #32
 8003eda:	d00c      	beq.n	8003ef6 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003edc:	e024      	b.n	8003f28 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8003ede:	2b50      	cmp	r3, #80	; 0x50
 8003ee0:	d018      	beq.n	8003f14 <HAL_CAN_IRQHandler+0x316>
 8003ee2:	2b60      	cmp	r3, #96	; 0x60
 8003ee4:	d01b      	beq.n	8003f1e <HAL_CAN_IRQHandler+0x320>
 8003ee6:	2b40      	cmp	r3, #64	; 0x40
 8003ee8:	d00f      	beq.n	8003f0a <HAL_CAN_IRQHandler+0x30c>
            break;
 8003eea:	e01d      	b.n	8003f28 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	f043 0308 	orr.w	r3, r3, #8
 8003ef2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ef4:	e018      	b.n	8003f28 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	f043 0310 	orr.w	r3, r3, #16
 8003efc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003efe:	e013      	b.n	8003f28 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	f043 0320 	orr.w	r3, r3, #32
 8003f06:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f08:	e00e      	b.n	8003f28 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f12:	e009      	b.n	8003f28 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f1a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f1c:	e004      	b.n	8003f28 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f26:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699a      	ldr	r2, [r3, #24]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003f36:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2204      	movs	r2, #4
 8003f3e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d008      	beq.n	8003f58 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f872 	bl	800403c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003f58:	bf00      	nop
 8003f5a:	3728      	adds	r7, #40	; 0x28
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004060:	4b0c      	ldr	r3, [pc, #48]	; (8004094 <__NVIC_SetPriorityGrouping+0x44>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800406c:	4013      	ands	r3, r2
 800406e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800407c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004082:	4a04      	ldr	r2, [pc, #16]	; (8004094 <__NVIC_SetPriorityGrouping+0x44>)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	60d3      	str	r3, [r2, #12]
}
 8004088:	bf00      	nop
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	e000ed00 	.word	0xe000ed00

08004098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800409c:	4b04      	ldr	r3, [pc, #16]	; (80040b0 <__NVIC_GetPriorityGrouping+0x18>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	0a1b      	lsrs	r3, r3, #8
 80040a2:	f003 0307 	and.w	r3, r3, #7
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	e000ed00 	.word	0xe000ed00

080040b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	4603      	mov	r3, r0
 80040bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	db0b      	blt.n	80040de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040c6:	79fb      	ldrb	r3, [r7, #7]
 80040c8:	f003 021f 	and.w	r2, r3, #31
 80040cc:	4907      	ldr	r1, [pc, #28]	; (80040ec <__NVIC_EnableIRQ+0x38>)
 80040ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	2001      	movs	r0, #1
 80040d6:	fa00 f202 	lsl.w	r2, r0, r2
 80040da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	e000e100 	.word	0xe000e100

080040f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	4603      	mov	r3, r0
 80040f8:	6039      	str	r1, [r7, #0]
 80040fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004100:	2b00      	cmp	r3, #0
 8004102:	db0a      	blt.n	800411a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	b2da      	uxtb	r2, r3
 8004108:	490c      	ldr	r1, [pc, #48]	; (800413c <__NVIC_SetPriority+0x4c>)
 800410a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800410e:	0112      	lsls	r2, r2, #4
 8004110:	b2d2      	uxtb	r2, r2
 8004112:	440b      	add	r3, r1
 8004114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004118:	e00a      	b.n	8004130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	b2da      	uxtb	r2, r3
 800411e:	4908      	ldr	r1, [pc, #32]	; (8004140 <__NVIC_SetPriority+0x50>)
 8004120:	79fb      	ldrb	r3, [r7, #7]
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	3b04      	subs	r3, #4
 8004128:	0112      	lsls	r2, r2, #4
 800412a:	b2d2      	uxtb	r2, r2
 800412c:	440b      	add	r3, r1
 800412e:	761a      	strb	r2, [r3, #24]
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	e000e100 	.word	0xe000e100
 8004140:	e000ed00 	.word	0xe000ed00

08004144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004144:	b480      	push	{r7}
 8004146:	b089      	sub	sp, #36	; 0x24
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	f1c3 0307 	rsb	r3, r3, #7
 800415e:	2b04      	cmp	r3, #4
 8004160:	bf28      	it	cs
 8004162:	2304      	movcs	r3, #4
 8004164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	3304      	adds	r3, #4
 800416a:	2b06      	cmp	r3, #6
 800416c:	d902      	bls.n	8004174 <NVIC_EncodePriority+0x30>
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	3b03      	subs	r3, #3
 8004172:	e000      	b.n	8004176 <NVIC_EncodePriority+0x32>
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004178:	f04f 32ff 	mov.w	r2, #4294967295
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	43da      	mvns	r2, r3
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	401a      	ands	r2, r3
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800418c:	f04f 31ff 	mov.w	r1, #4294967295
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	fa01 f303 	lsl.w	r3, r1, r3
 8004196:	43d9      	mvns	r1, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800419c:	4313      	orrs	r3, r2
         );
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3724      	adds	r7, #36	; 0x24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
	...

080041ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041bc:	d301      	bcc.n	80041c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041be:	2301      	movs	r3, #1
 80041c0:	e00f      	b.n	80041e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041c2:	4a0a      	ldr	r2, [pc, #40]	; (80041ec <SysTick_Config+0x40>)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3b01      	subs	r3, #1
 80041c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041ca:	210f      	movs	r1, #15
 80041cc:	f04f 30ff 	mov.w	r0, #4294967295
 80041d0:	f7ff ff8e 	bl	80040f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041d4:	4b05      	ldr	r3, [pc, #20]	; (80041ec <SysTick_Config+0x40>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041da:	4b04      	ldr	r3, [pc, #16]	; (80041ec <SysTick_Config+0x40>)
 80041dc:	2207      	movs	r2, #7
 80041de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	e000e010 	.word	0xe000e010

080041f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f7ff ff29 	bl	8004050 <__NVIC_SetPriorityGrouping>
}
 80041fe:	bf00      	nop
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004206:	b580      	push	{r7, lr}
 8004208:	b086      	sub	sp, #24
 800420a:	af00      	add	r7, sp, #0
 800420c:	4603      	mov	r3, r0
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	607a      	str	r2, [r7, #4]
 8004212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004214:	2300      	movs	r3, #0
 8004216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004218:	f7ff ff3e 	bl	8004098 <__NVIC_GetPriorityGrouping>
 800421c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	68b9      	ldr	r1, [r7, #8]
 8004222:	6978      	ldr	r0, [r7, #20]
 8004224:	f7ff ff8e 	bl	8004144 <NVIC_EncodePriority>
 8004228:	4602      	mov	r2, r0
 800422a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800422e:	4611      	mov	r1, r2
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff ff5d 	bl	80040f0 <__NVIC_SetPriority>
}
 8004236:	bf00      	nop
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b082      	sub	sp, #8
 8004242:	af00      	add	r7, sp, #0
 8004244:	4603      	mov	r3, r0
 8004246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff ff31 	bl	80040b4 <__NVIC_EnableIRQ>
}
 8004252:	bf00      	nop
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b082      	sub	sp, #8
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7ff ffa2 	bl	80041ac <SysTick_Config>
 8004268:	4603      	mov	r3, r0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
	...

08004274 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004280:	f7ff f85c 	bl	800333c <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e099      	b.n	80043c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0201 	bic.w	r2, r2, #1
 80042ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042b0:	e00f      	b.n	80042d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042b2:	f7ff f843 	bl	800333c <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b05      	cmp	r3, #5
 80042be:	d908      	bls.n	80042d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2220      	movs	r2, #32
 80042c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2203      	movs	r2, #3
 80042ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e078      	b.n	80043c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1e8      	bne.n	80042b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	4b38      	ldr	r3, [pc, #224]	; (80043cc <HAL_DMA_Init+0x158>)
 80042ec:	4013      	ands	r3, r2
 80042ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800430a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004316:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	4313      	orrs	r3, r2
 8004322:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	2b04      	cmp	r3, #4
 800432a:	d107      	bne.n	800433c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004334:	4313      	orrs	r3, r2
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	4313      	orrs	r3, r2
 800433a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f023 0307 	bic.w	r3, r3, #7
 8004352:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	4313      	orrs	r3, r2
 800435c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	2b04      	cmp	r3, #4
 8004364:	d117      	bne.n	8004396 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	4313      	orrs	r3, r2
 800436e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00e      	beq.n	8004396 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 fa6f 	bl	800485c <DMA_CheckFifoParam>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d008      	beq.n	8004396 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2240      	movs	r2, #64	; 0x40
 8004388:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004392:	2301      	movs	r3, #1
 8004394:	e016      	b.n	80043c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 fa26 	bl	80047f0 <DMA_CalcBaseAndBitshift>
 80043a4:	4603      	mov	r3, r0
 80043a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ac:	223f      	movs	r2, #63	; 0x3f
 80043ae:	409a      	lsls	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	f010803f 	.word	0xf010803f

080043d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
 80043dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d101      	bne.n	80043f6 <HAL_DMA_Start_IT+0x26>
 80043f2:	2302      	movs	r3, #2
 80043f4:	e040      	b.n	8004478 <HAL_DMA_Start_IT+0xa8>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b01      	cmp	r3, #1
 8004408:	d12f      	bne.n	800446a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2202      	movs	r2, #2
 800440e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	68b9      	ldr	r1, [r7, #8]
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 f9b8 	bl	8004794 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004428:	223f      	movs	r2, #63	; 0x3f
 800442a:	409a      	lsls	r2, r3
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0216 	orr.w	r2, r2, #22
 800443e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004444:	2b00      	cmp	r3, #0
 8004446:	d007      	beq.n	8004458 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f042 0208 	orr.w	r2, r2, #8
 8004456:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0201 	orr.w	r2, r2, #1
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	e005      	b.n	8004476 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004472:	2302      	movs	r3, #2
 8004474:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004476:	7dfb      	ldrb	r3, [r7, #23]
}
 8004478:	4618      	mov	r0, r3
 800447a:	3718      	adds	r7, #24
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800448c:	4b92      	ldr	r3, [pc, #584]	; (80046d8 <HAL_DMA_IRQHandler+0x258>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a92      	ldr	r2, [pc, #584]	; (80046dc <HAL_DMA_IRQHandler+0x25c>)
 8004492:	fba2 2303 	umull	r2, r3, r2, r3
 8004496:	0a9b      	lsrs	r3, r3, #10
 8004498:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044aa:	2208      	movs	r2, #8
 80044ac:	409a      	lsls	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	4013      	ands	r3, r2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d01a      	beq.n	80044ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d013      	beq.n	80044ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0204 	bic.w	r2, r2, #4
 80044d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d8:	2208      	movs	r2, #8
 80044da:	409a      	lsls	r2, r3
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e4:	f043 0201 	orr.w	r2, r3, #1
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f0:	2201      	movs	r2, #1
 80044f2:	409a      	lsls	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4013      	ands	r3, r2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d012      	beq.n	8004522 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00b      	beq.n	8004522 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800450e:	2201      	movs	r2, #1
 8004510:	409a      	lsls	r2, r3
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451a:	f043 0202 	orr.w	r2, r3, #2
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004526:	2204      	movs	r2, #4
 8004528:	409a      	lsls	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	4013      	ands	r3, r2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d012      	beq.n	8004558 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00b      	beq.n	8004558 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004544:	2204      	movs	r2, #4
 8004546:	409a      	lsls	r2, r3
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004550:	f043 0204 	orr.w	r2, r3, #4
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800455c:	2210      	movs	r2, #16
 800455e:	409a      	lsls	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4013      	ands	r3, r2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d043      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	2b00      	cmp	r3, #0
 8004574:	d03c      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800457a:	2210      	movs	r2, #16
 800457c:	409a      	lsls	r2, r3
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d018      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d108      	bne.n	80045b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d024      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	4798      	blx	r3
 80045ae:	e01f      	b.n	80045f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d01b      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	4798      	blx	r3
 80045c0:	e016      	b.n	80045f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d107      	bne.n	80045e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0208 	bic.w	r2, r2, #8
 80045de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f4:	2220      	movs	r2, #32
 80045f6:	409a      	lsls	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4013      	ands	r3, r2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 808e 	beq.w	800471e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0310 	and.w	r3, r3, #16
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 8086 	beq.w	800471e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004616:	2220      	movs	r2, #32
 8004618:	409a      	lsls	r2, r3
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b05      	cmp	r3, #5
 8004628:	d136      	bne.n	8004698 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 0216 	bic.w	r2, r2, #22
 8004638:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695a      	ldr	r2, [r3, #20]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004648:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	2b00      	cmp	r3, #0
 8004650:	d103      	bne.n	800465a <HAL_DMA_IRQHandler+0x1da>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004656:	2b00      	cmp	r3, #0
 8004658:	d007      	beq.n	800466a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 0208 	bic.w	r2, r2, #8
 8004668:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466e:	223f      	movs	r2, #63	; 0x3f
 8004670:	409a      	lsls	r2, r3
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468a:	2b00      	cmp	r3, #0
 800468c:	d07d      	beq.n	800478a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	4798      	blx	r3
        }
        return;
 8004696:	e078      	b.n	800478a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d01c      	beq.n	80046e0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d108      	bne.n	80046c6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d030      	beq.n	800471e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	4798      	blx	r3
 80046c4:	e02b      	b.n	800471e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d027      	beq.n	800471e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	4798      	blx	r3
 80046d6:	e022      	b.n	800471e <HAL_DMA_IRQHandler+0x29e>
 80046d8:	20000000 	.word	0x20000000
 80046dc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10f      	bne.n	800470e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 0210 	bic.w	r2, r2, #16
 80046fc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004722:	2b00      	cmp	r3, #0
 8004724:	d032      	beq.n	800478c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d022      	beq.n	8004778 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2205      	movs	r2, #5
 8004736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0201 	bic.w	r2, r2, #1
 8004748:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	3301      	adds	r3, #1
 800474e:	60bb      	str	r3, [r7, #8]
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	429a      	cmp	r2, r3
 8004754:	d307      	bcc.n	8004766 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1f2      	bne.n	800474a <HAL_DMA_IRQHandler+0x2ca>
 8004764:	e000      	b.n	8004768 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004766:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800477c:	2b00      	cmp	r3, #0
 800477e:	d005      	beq.n	800478c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	4798      	blx	r3
 8004788:	e000      	b.n	800478c <HAL_DMA_IRQHandler+0x30c>
        return;
 800478a:	bf00      	nop
    }
  }
}
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop

08004794 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
 80047a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	2b40      	cmp	r3, #64	; 0x40
 80047c0:	d108      	bne.n	80047d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80047d2:	e007      	b.n	80047e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	60da      	str	r2, [r3, #12]
}
 80047e4:	bf00      	nop
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	3b10      	subs	r3, #16
 8004800:	4a14      	ldr	r2, [pc, #80]	; (8004854 <DMA_CalcBaseAndBitshift+0x64>)
 8004802:	fba2 2303 	umull	r2, r3, r2, r3
 8004806:	091b      	lsrs	r3, r3, #4
 8004808:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800480a:	4a13      	ldr	r2, [pc, #76]	; (8004858 <DMA_CalcBaseAndBitshift+0x68>)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4413      	add	r3, r2
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	461a      	mov	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2b03      	cmp	r3, #3
 800481c:	d909      	bls.n	8004832 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004826:	f023 0303 	bic.w	r3, r3, #3
 800482a:	1d1a      	adds	r2, r3, #4
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	659a      	str	r2, [r3, #88]	; 0x58
 8004830:	e007      	b.n	8004842 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800483a:	f023 0303 	bic.w	r3, r3, #3
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004846:	4618      	mov	r0, r3
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	aaaaaaab 	.word	0xaaaaaaab
 8004858:	080096ac 	.word	0x080096ac

0800485c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004864:	2300      	movs	r3, #0
 8004866:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d11f      	bne.n	80048b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	2b03      	cmp	r3, #3
 800487a:	d855      	bhi.n	8004928 <DMA_CheckFifoParam+0xcc>
 800487c:	a201      	add	r2, pc, #4	; (adr r2, 8004884 <DMA_CheckFifoParam+0x28>)
 800487e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004882:	bf00      	nop
 8004884:	08004895 	.word	0x08004895
 8004888:	080048a7 	.word	0x080048a7
 800488c:	08004895 	.word	0x08004895
 8004890:	08004929 	.word	0x08004929
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004898:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d045      	beq.n	800492c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048a4:	e042      	b.n	800492c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048ae:	d13f      	bne.n	8004930 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048b4:	e03c      	b.n	8004930 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048be:	d121      	bne.n	8004904 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2b03      	cmp	r3, #3
 80048c4:	d836      	bhi.n	8004934 <DMA_CheckFifoParam+0xd8>
 80048c6:	a201      	add	r2, pc, #4	; (adr r2, 80048cc <DMA_CheckFifoParam+0x70>)
 80048c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048cc:	080048dd 	.word	0x080048dd
 80048d0:	080048e3 	.word	0x080048e3
 80048d4:	080048dd 	.word	0x080048dd
 80048d8:	080048f5 	.word	0x080048f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	73fb      	strb	r3, [r7, #15]
      break;
 80048e0:	e02f      	b.n	8004942 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d024      	beq.n	8004938 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048f2:	e021      	b.n	8004938 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048fc:	d11e      	bne.n	800493c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004902:	e01b      	b.n	800493c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2b02      	cmp	r3, #2
 8004908:	d902      	bls.n	8004910 <DMA_CheckFifoParam+0xb4>
 800490a:	2b03      	cmp	r3, #3
 800490c:	d003      	beq.n	8004916 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800490e:	e018      	b.n	8004942 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	73fb      	strb	r3, [r7, #15]
      break;
 8004914:	e015      	b.n	8004942 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00e      	beq.n	8004940 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	73fb      	strb	r3, [r7, #15]
      break;
 8004926:	e00b      	b.n	8004940 <DMA_CheckFifoParam+0xe4>
      break;
 8004928:	bf00      	nop
 800492a:	e00a      	b.n	8004942 <DMA_CheckFifoParam+0xe6>
      break;
 800492c:	bf00      	nop
 800492e:	e008      	b.n	8004942 <DMA_CheckFifoParam+0xe6>
      break;
 8004930:	bf00      	nop
 8004932:	e006      	b.n	8004942 <DMA_CheckFifoParam+0xe6>
      break;
 8004934:	bf00      	nop
 8004936:	e004      	b.n	8004942 <DMA_CheckFifoParam+0xe6>
      break;
 8004938:	bf00      	nop
 800493a:	e002      	b.n	8004942 <DMA_CheckFifoParam+0xe6>
      break;   
 800493c:	bf00      	nop
 800493e:	e000      	b.n	8004942 <DMA_CheckFifoParam+0xe6>
      break;
 8004940:	bf00      	nop
    }
  } 
  
  return status; 
 8004942:	7bfb      	ldrb	r3, [r7, #15]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004950:	b480      	push	{r7}
 8004952:	b089      	sub	sp, #36	; 0x24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800495a:	2300      	movs	r3, #0
 800495c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800495e:	2300      	movs	r3, #0
 8004960:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004962:	2300      	movs	r3, #0
 8004964:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004966:	2300      	movs	r3, #0
 8004968:	61fb      	str	r3, [r7, #28]
 800496a:	e165      	b.n	8004c38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800496c:	2201      	movs	r2, #1
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	fa02 f303 	lsl.w	r3, r2, r3
 8004974:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	4013      	ands	r3, r2
 800497e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	429a      	cmp	r2, r3
 8004986:	f040 8154 	bne.w	8004c32 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d00b      	beq.n	80049aa <HAL_GPIO_Init+0x5a>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2b02      	cmp	r3, #2
 8004998:	d007      	beq.n	80049aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800499e:	2b11      	cmp	r3, #17
 80049a0:	d003      	beq.n	80049aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b12      	cmp	r3, #18
 80049a8:	d130      	bne.n	8004a0c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	2203      	movs	r2, #3
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	43db      	mvns	r3, r3
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	4013      	ands	r3, r2
 80049c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	68da      	ldr	r2, [r3, #12]
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049e0:	2201      	movs	r2, #1
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	fa02 f303 	lsl.w	r3, r2, r3
 80049e8:	43db      	mvns	r3, r3
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	4013      	ands	r3, r2
 80049ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	091b      	lsrs	r3, r3, #4
 80049f6:	f003 0201 	and.w	r2, r3, #1
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	2203      	movs	r2, #3
 8004a18:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1c:	43db      	mvns	r3, r3
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	4013      	ands	r3, r2
 8004a22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	005b      	lsls	r3, r3, #1
 8004a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d003      	beq.n	8004a4c <HAL_GPIO_Init+0xfc>
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	2b12      	cmp	r3, #18
 8004a4a:	d123      	bne.n	8004a94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	08da      	lsrs	r2, r3, #3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3208      	adds	r2, #8
 8004a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	220f      	movs	r2, #15
 8004a64:	fa02 f303 	lsl.w	r3, r2, r3
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	691a      	ldr	r2, [r3, #16]
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	08da      	lsrs	r2, r3, #3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	3208      	adds	r2, #8
 8004a8e:	69b9      	ldr	r1, [r7, #24]
 8004a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	2203      	movs	r2, #3
 8004aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa4:	43db      	mvns	r3, r3
 8004aa6:	69ba      	ldr	r2, [r7, #24]
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f003 0203 	and.w	r2, r3, #3
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 80ae 	beq.w	8004c32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60fb      	str	r3, [r7, #12]
 8004ada:	4b5c      	ldr	r3, [pc, #368]	; (8004c4c <HAL_GPIO_Init+0x2fc>)
 8004adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ade:	4a5b      	ldr	r2, [pc, #364]	; (8004c4c <HAL_GPIO_Init+0x2fc>)
 8004ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ae6:	4b59      	ldr	r3, [pc, #356]	; (8004c4c <HAL_GPIO_Init+0x2fc>)
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004af2:	4a57      	ldr	r2, [pc, #348]	; (8004c50 <HAL_GPIO_Init+0x300>)
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	089b      	lsrs	r3, r3, #2
 8004af8:	3302      	adds	r3, #2
 8004afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	220f      	movs	r2, #15
 8004b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0e:	43db      	mvns	r3, r3
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	4013      	ands	r3, r2
 8004b14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a4e      	ldr	r2, [pc, #312]	; (8004c54 <HAL_GPIO_Init+0x304>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d025      	beq.n	8004b6a <HAL_GPIO_Init+0x21a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a4d      	ldr	r2, [pc, #308]	; (8004c58 <HAL_GPIO_Init+0x308>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d01f      	beq.n	8004b66 <HAL_GPIO_Init+0x216>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a4c      	ldr	r2, [pc, #304]	; (8004c5c <HAL_GPIO_Init+0x30c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d019      	beq.n	8004b62 <HAL_GPIO_Init+0x212>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a4b      	ldr	r2, [pc, #300]	; (8004c60 <HAL_GPIO_Init+0x310>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d013      	beq.n	8004b5e <HAL_GPIO_Init+0x20e>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a4a      	ldr	r2, [pc, #296]	; (8004c64 <HAL_GPIO_Init+0x314>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d00d      	beq.n	8004b5a <HAL_GPIO_Init+0x20a>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a49      	ldr	r2, [pc, #292]	; (8004c68 <HAL_GPIO_Init+0x318>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d007      	beq.n	8004b56 <HAL_GPIO_Init+0x206>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a48      	ldr	r2, [pc, #288]	; (8004c6c <HAL_GPIO_Init+0x31c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d101      	bne.n	8004b52 <HAL_GPIO_Init+0x202>
 8004b4e:	2306      	movs	r3, #6
 8004b50:	e00c      	b.n	8004b6c <HAL_GPIO_Init+0x21c>
 8004b52:	2307      	movs	r3, #7
 8004b54:	e00a      	b.n	8004b6c <HAL_GPIO_Init+0x21c>
 8004b56:	2305      	movs	r3, #5
 8004b58:	e008      	b.n	8004b6c <HAL_GPIO_Init+0x21c>
 8004b5a:	2304      	movs	r3, #4
 8004b5c:	e006      	b.n	8004b6c <HAL_GPIO_Init+0x21c>
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e004      	b.n	8004b6c <HAL_GPIO_Init+0x21c>
 8004b62:	2302      	movs	r3, #2
 8004b64:	e002      	b.n	8004b6c <HAL_GPIO_Init+0x21c>
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <HAL_GPIO_Init+0x21c>
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	69fa      	ldr	r2, [r7, #28]
 8004b6e:	f002 0203 	and.w	r2, r2, #3
 8004b72:	0092      	lsls	r2, r2, #2
 8004b74:	4093      	lsls	r3, r2
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b7c:	4934      	ldr	r1, [pc, #208]	; (8004c50 <HAL_GPIO_Init+0x300>)
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	089b      	lsrs	r3, r3, #2
 8004b82:	3302      	adds	r3, #2
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b8a:	4b39      	ldr	r3, [pc, #228]	; (8004c70 <HAL_GPIO_Init+0x320>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	43db      	mvns	r3, r3
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	4013      	ands	r3, r2
 8004b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004bae:	4a30      	ldr	r2, [pc, #192]	; (8004c70 <HAL_GPIO_Init+0x320>)
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004bb4:	4b2e      	ldr	r3, [pc, #184]	; (8004c70 <HAL_GPIO_Init+0x320>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	43db      	mvns	r3, r3
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bd8:	4a25      	ldr	r2, [pc, #148]	; (8004c70 <HAL_GPIO_Init+0x320>)
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bde:	4b24      	ldr	r3, [pc, #144]	; (8004c70 <HAL_GPIO_Init+0x320>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	43db      	mvns	r3, r3
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	4013      	ands	r3, r2
 8004bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004bfa:	69ba      	ldr	r2, [r7, #24]
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c02:	4a1b      	ldr	r2, [pc, #108]	; (8004c70 <HAL_GPIO_Init+0x320>)
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c08:	4b19      	ldr	r3, [pc, #100]	; (8004c70 <HAL_GPIO_Init+0x320>)
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	43db      	mvns	r3, r3
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	4013      	ands	r3, r2
 8004c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c2c:	4a10      	ldr	r2, [pc, #64]	; (8004c70 <HAL_GPIO_Init+0x320>)
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	3301      	adds	r3, #1
 8004c36:	61fb      	str	r3, [r7, #28]
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	2b0f      	cmp	r3, #15
 8004c3c:	f67f ae96 	bls.w	800496c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c40:	bf00      	nop
 8004c42:	3724      	adds	r7, #36	; 0x24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	40013800 	.word	0x40013800
 8004c54:	40020000 	.word	0x40020000
 8004c58:	40020400 	.word	0x40020400
 8004c5c:	40020800 	.word	0x40020800
 8004c60:	40020c00 	.word	0x40020c00
 8004c64:	40021000 	.word	0x40021000
 8004c68:	40021400 	.word	0x40021400
 8004c6c:	40021800 	.word	0x40021800
 8004c70:	40013c00 	.word	0x40013c00

08004c74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691a      	ldr	r2, [r3, #16]
 8004c84:	887b      	ldrh	r3, [r7, #2]
 8004c86:	4013      	ands	r3, r2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d002      	beq.n	8004c92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	73fb      	strb	r3, [r7, #15]
 8004c90:	e001      	b.n	8004c96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c92:	2300      	movs	r3, #0
 8004c94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	807b      	strh	r3, [r7, #2]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cb4:	787b      	ldrb	r3, [r7, #1]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cba:	887a      	ldrh	r2, [r7, #2]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004cc0:	e003      	b.n	8004cca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004cc2:	887b      	ldrh	r3, [r7, #2]
 8004cc4:	041a      	lsls	r2, r3, #16
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	619a      	str	r2, [r3, #24]
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b083      	sub	sp, #12
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
 8004cde:	460b      	mov	r3, r1
 8004ce0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695a      	ldr	r2, [r3, #20]
 8004ce6:	887b      	ldrh	r3, [r7, #2]
 8004ce8:	401a      	ands	r2, r3
 8004cea:	887b      	ldrh	r3, [r7, #2]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d104      	bne.n	8004cfa <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004cf0:	887b      	ldrh	r3, [r7, #2]
 8004cf2:	041a      	lsls	r2, r3, #16
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004cf8:	e002      	b.n	8004d00 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004cfa:	887a      	ldrh	r2, [r7, #2]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	619a      	str	r2, [r3, #24]
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e0cc      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d20:	4b68      	ldr	r3, [pc, #416]	; (8004ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 030f 	and.w	r3, r3, #15
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d90c      	bls.n	8004d48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d2e:	4b65      	ldr	r3, [pc, #404]	; (8004ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d36:	4b63      	ldr	r3, [pc, #396]	; (8004ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d001      	beq.n	8004d48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e0b8      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d020      	beq.n	8004d96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d005      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d60:	4b59      	ldr	r3, [pc, #356]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	4a58      	ldr	r2, [pc, #352]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0308 	and.w	r3, r3, #8
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d005      	beq.n	8004d84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d78:	4b53      	ldr	r3, [pc, #332]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	4a52      	ldr	r2, [pc, #328]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d84:	4b50      	ldr	r3, [pc, #320]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	494d      	ldr	r1, [pc, #308]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d044      	beq.n	8004e2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d107      	bne.n	8004dba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004daa:	4b47      	ldr	r3, [pc, #284]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d119      	bne.n	8004dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e07f      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d003      	beq.n	8004dca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dc6:	2b03      	cmp	r3, #3
 8004dc8:	d107      	bne.n	8004dda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dca:	4b3f      	ldr	r3, [pc, #252]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d109      	bne.n	8004dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e06f      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dda:	4b3b      	ldr	r3, [pc, #236]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e067      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dea:	4b37      	ldr	r3, [pc, #220]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f023 0203 	bic.w	r2, r3, #3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	4934      	ldr	r1, [pc, #208]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dfc:	f7fe fa9e 	bl	800333c <HAL_GetTick>
 8004e00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e02:	e00a      	b.n	8004e1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e04:	f7fe fa9a 	bl	800333c <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e04f      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e1a:	4b2b      	ldr	r3, [pc, #172]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f003 020c 	and.w	r2, r3, #12
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d1eb      	bne.n	8004e04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e2c:	4b25      	ldr	r3, [pc, #148]	; (8004ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 030f 	and.w	r3, r3, #15
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d20c      	bcs.n	8004e54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e3a:	4b22      	ldr	r3, [pc, #136]	; (8004ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e42:	4b20      	ldr	r3, [pc, #128]	; (8004ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 030f 	and.w	r3, r3, #15
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d001      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e032      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d008      	beq.n	8004e72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e60:	4b19      	ldr	r3, [pc, #100]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	4916      	ldr	r1, [pc, #88]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0308 	and.w	r3, r3, #8
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d009      	beq.n	8004e92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e7e:	4b12      	ldr	r3, [pc, #72]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	490e      	ldr	r1, [pc, #56]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e92:	f000 f855 	bl	8004f40 <HAL_RCC_GetSysClockFreq>
 8004e96:	4601      	mov	r1, r0
 8004e98:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	091b      	lsrs	r3, r3, #4
 8004e9e:	f003 030f 	and.w	r3, r3, #15
 8004ea2:	4a0a      	ldr	r2, [pc, #40]	; (8004ecc <HAL_RCC_ClockConfig+0x1c0>)
 8004ea4:	5cd3      	ldrb	r3, [r2, r3]
 8004ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8004eaa:	4a09      	ldr	r2, [pc, #36]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8004eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004eae:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fe f9fe 	bl	80032b4 <HAL_InitTick>

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40023c00 	.word	0x40023c00
 8004ec8:	40023800 	.word	0x40023800
 8004ecc:	08009694 	.word	0x08009694
 8004ed0:	20000000 	.word	0x20000000
 8004ed4:	20000004 	.word	0x20000004

08004ed8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004edc:	4b03      	ldr	r3, [pc, #12]	; (8004eec <HAL_RCC_GetHCLKFreq+0x14>)
 8004ede:	681b      	ldr	r3, [r3, #0]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	20000000 	.word	0x20000000

08004ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ef4:	f7ff fff0 	bl	8004ed8 <HAL_RCC_GetHCLKFreq>
 8004ef8:	4601      	mov	r1, r0
 8004efa:	4b05      	ldr	r3, [pc, #20]	; (8004f10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	0a9b      	lsrs	r3, r3, #10
 8004f00:	f003 0307 	and.w	r3, r3, #7
 8004f04:	4a03      	ldr	r2, [pc, #12]	; (8004f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f06:	5cd3      	ldrb	r3, [r2, r3]
 8004f08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40023800 	.word	0x40023800
 8004f14:	080096a4 	.word	0x080096a4

08004f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f1c:	f7ff ffdc 	bl	8004ed8 <HAL_RCC_GetHCLKFreq>
 8004f20:	4601      	mov	r1, r0
 8004f22:	4b05      	ldr	r3, [pc, #20]	; (8004f38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	0b5b      	lsrs	r3, r3, #13
 8004f28:	f003 0307 	and.w	r3, r3, #7
 8004f2c:	4a03      	ldr	r2, [pc, #12]	; (8004f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f2e:	5cd3      	ldrb	r3, [r2, r3]
 8004f30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40023800 	.word	0x40023800
 8004f3c:	080096a4 	.word	0x080096a4

08004f40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004f56:	2300      	movs	r3, #0
 8004f58:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f5a:	4bc6      	ldr	r3, [pc, #792]	; (8005274 <HAL_RCC_GetSysClockFreq+0x334>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 030c 	and.w	r3, r3, #12
 8004f62:	2b0c      	cmp	r3, #12
 8004f64:	f200 817e 	bhi.w	8005264 <HAL_RCC_GetSysClockFreq+0x324>
 8004f68:	a201      	add	r2, pc, #4	; (adr r2, 8004f70 <HAL_RCC_GetSysClockFreq+0x30>)
 8004f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6e:	bf00      	nop
 8004f70:	08004fa5 	.word	0x08004fa5
 8004f74:	08005265 	.word	0x08005265
 8004f78:	08005265 	.word	0x08005265
 8004f7c:	08005265 	.word	0x08005265
 8004f80:	08004fab 	.word	0x08004fab
 8004f84:	08005265 	.word	0x08005265
 8004f88:	08005265 	.word	0x08005265
 8004f8c:	08005265 	.word	0x08005265
 8004f90:	08004fb1 	.word	0x08004fb1
 8004f94:	08005265 	.word	0x08005265
 8004f98:	08005265 	.word	0x08005265
 8004f9c:	08005265 	.word	0x08005265
 8004fa0:	0800510d 	.word	0x0800510d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fa4:	4bb4      	ldr	r3, [pc, #720]	; (8005278 <HAL_RCC_GetSysClockFreq+0x338>)
 8004fa6:	613b      	str	r3, [r7, #16]
       break;
 8004fa8:	e15f      	b.n	800526a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004faa:	4bb4      	ldr	r3, [pc, #720]	; (800527c <HAL_RCC_GetSysClockFreq+0x33c>)
 8004fac:	613b      	str	r3, [r7, #16]
      break;
 8004fae:	e15c      	b.n	800526a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fb0:	4bb0      	ldr	r3, [pc, #704]	; (8005274 <HAL_RCC_GetSysClockFreq+0x334>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fb8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fba:	4bae      	ldr	r3, [pc, #696]	; (8005274 <HAL_RCC_GetSysClockFreq+0x334>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d04a      	beq.n	800505c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fc6:	4bab      	ldr	r3, [pc, #684]	; (8005274 <HAL_RCC_GetSysClockFreq+0x334>)
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	099b      	lsrs	r3, r3, #6
 8004fcc:	f04f 0400 	mov.w	r4, #0
 8004fd0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004fd4:	f04f 0200 	mov.w	r2, #0
 8004fd8:	ea03 0501 	and.w	r5, r3, r1
 8004fdc:	ea04 0602 	and.w	r6, r4, r2
 8004fe0:	4629      	mov	r1, r5
 8004fe2:	4632      	mov	r2, r6
 8004fe4:	f04f 0300 	mov.w	r3, #0
 8004fe8:	f04f 0400 	mov.w	r4, #0
 8004fec:	0154      	lsls	r4, r2, #5
 8004fee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004ff2:	014b      	lsls	r3, r1, #5
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4622      	mov	r2, r4
 8004ff8:	1b49      	subs	r1, r1, r5
 8004ffa:	eb62 0206 	sbc.w	r2, r2, r6
 8004ffe:	f04f 0300 	mov.w	r3, #0
 8005002:	f04f 0400 	mov.w	r4, #0
 8005006:	0194      	lsls	r4, r2, #6
 8005008:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800500c:	018b      	lsls	r3, r1, #6
 800500e:	1a5b      	subs	r3, r3, r1
 8005010:	eb64 0402 	sbc.w	r4, r4, r2
 8005014:	f04f 0100 	mov.w	r1, #0
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	00e2      	lsls	r2, r4, #3
 800501e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005022:	00d9      	lsls	r1, r3, #3
 8005024:	460b      	mov	r3, r1
 8005026:	4614      	mov	r4, r2
 8005028:	195b      	adds	r3, r3, r5
 800502a:	eb44 0406 	adc.w	r4, r4, r6
 800502e:	f04f 0100 	mov.w	r1, #0
 8005032:	f04f 0200 	mov.w	r2, #0
 8005036:	0262      	lsls	r2, r4, #9
 8005038:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800503c:	0259      	lsls	r1, r3, #9
 800503e:	460b      	mov	r3, r1
 8005040:	4614      	mov	r4, r2
 8005042:	4618      	mov	r0, r3
 8005044:	4621      	mov	r1, r4
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f04f 0400 	mov.w	r4, #0
 800504c:	461a      	mov	r2, r3
 800504e:	4623      	mov	r3, r4
 8005050:	f7fb fdc6 	bl	8000be0 <__aeabi_uldivmod>
 8005054:	4603      	mov	r3, r0
 8005056:	460c      	mov	r4, r1
 8005058:	617b      	str	r3, [r7, #20]
 800505a:	e049      	b.n	80050f0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800505c:	4b85      	ldr	r3, [pc, #532]	; (8005274 <HAL_RCC_GetSysClockFreq+0x334>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	099b      	lsrs	r3, r3, #6
 8005062:	f04f 0400 	mov.w	r4, #0
 8005066:	f240 11ff 	movw	r1, #511	; 0x1ff
 800506a:	f04f 0200 	mov.w	r2, #0
 800506e:	ea03 0501 	and.w	r5, r3, r1
 8005072:	ea04 0602 	and.w	r6, r4, r2
 8005076:	4629      	mov	r1, r5
 8005078:	4632      	mov	r2, r6
 800507a:	f04f 0300 	mov.w	r3, #0
 800507e:	f04f 0400 	mov.w	r4, #0
 8005082:	0154      	lsls	r4, r2, #5
 8005084:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005088:	014b      	lsls	r3, r1, #5
 800508a:	4619      	mov	r1, r3
 800508c:	4622      	mov	r2, r4
 800508e:	1b49      	subs	r1, r1, r5
 8005090:	eb62 0206 	sbc.w	r2, r2, r6
 8005094:	f04f 0300 	mov.w	r3, #0
 8005098:	f04f 0400 	mov.w	r4, #0
 800509c:	0194      	lsls	r4, r2, #6
 800509e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80050a2:	018b      	lsls	r3, r1, #6
 80050a4:	1a5b      	subs	r3, r3, r1
 80050a6:	eb64 0402 	sbc.w	r4, r4, r2
 80050aa:	f04f 0100 	mov.w	r1, #0
 80050ae:	f04f 0200 	mov.w	r2, #0
 80050b2:	00e2      	lsls	r2, r4, #3
 80050b4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80050b8:	00d9      	lsls	r1, r3, #3
 80050ba:	460b      	mov	r3, r1
 80050bc:	4614      	mov	r4, r2
 80050be:	195b      	adds	r3, r3, r5
 80050c0:	eb44 0406 	adc.w	r4, r4, r6
 80050c4:	f04f 0100 	mov.w	r1, #0
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	02a2      	lsls	r2, r4, #10
 80050ce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80050d2:	0299      	lsls	r1, r3, #10
 80050d4:	460b      	mov	r3, r1
 80050d6:	4614      	mov	r4, r2
 80050d8:	4618      	mov	r0, r3
 80050da:	4621      	mov	r1, r4
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f04f 0400 	mov.w	r4, #0
 80050e2:	461a      	mov	r2, r3
 80050e4:	4623      	mov	r3, r4
 80050e6:	f7fb fd7b 	bl	8000be0 <__aeabi_uldivmod>
 80050ea:	4603      	mov	r3, r0
 80050ec:	460c      	mov	r4, r1
 80050ee:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050f0:	4b60      	ldr	r3, [pc, #384]	; (8005274 <HAL_RCC_GetSysClockFreq+0x334>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	0c1b      	lsrs	r3, r3, #16
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	3301      	adds	r3, #1
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	fbb2 f3f3 	udiv	r3, r2, r3
 8005108:	613b      	str	r3, [r7, #16]
      break;
 800510a:	e0ae      	b.n	800526a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800510c:	4b59      	ldr	r3, [pc, #356]	; (8005274 <HAL_RCC_GetSysClockFreq+0x334>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005114:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005116:	4b57      	ldr	r3, [pc, #348]	; (8005274 <HAL_RCC_GetSysClockFreq+0x334>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d04a      	beq.n	80051b8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005122:	4b54      	ldr	r3, [pc, #336]	; (8005274 <HAL_RCC_GetSysClockFreq+0x334>)
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	099b      	lsrs	r3, r3, #6
 8005128:	f04f 0400 	mov.w	r4, #0
 800512c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005130:	f04f 0200 	mov.w	r2, #0
 8005134:	ea03 0501 	and.w	r5, r3, r1
 8005138:	ea04 0602 	and.w	r6, r4, r2
 800513c:	4629      	mov	r1, r5
 800513e:	4632      	mov	r2, r6
 8005140:	f04f 0300 	mov.w	r3, #0
 8005144:	f04f 0400 	mov.w	r4, #0
 8005148:	0154      	lsls	r4, r2, #5
 800514a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800514e:	014b      	lsls	r3, r1, #5
 8005150:	4619      	mov	r1, r3
 8005152:	4622      	mov	r2, r4
 8005154:	1b49      	subs	r1, r1, r5
 8005156:	eb62 0206 	sbc.w	r2, r2, r6
 800515a:	f04f 0300 	mov.w	r3, #0
 800515e:	f04f 0400 	mov.w	r4, #0
 8005162:	0194      	lsls	r4, r2, #6
 8005164:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005168:	018b      	lsls	r3, r1, #6
 800516a:	1a5b      	subs	r3, r3, r1
 800516c:	eb64 0402 	sbc.w	r4, r4, r2
 8005170:	f04f 0100 	mov.w	r1, #0
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	00e2      	lsls	r2, r4, #3
 800517a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800517e:	00d9      	lsls	r1, r3, #3
 8005180:	460b      	mov	r3, r1
 8005182:	4614      	mov	r4, r2
 8005184:	195b      	adds	r3, r3, r5
 8005186:	eb44 0406 	adc.w	r4, r4, r6
 800518a:	f04f 0100 	mov.w	r1, #0
 800518e:	f04f 0200 	mov.w	r2, #0
 8005192:	0262      	lsls	r2, r4, #9
 8005194:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005198:	0259      	lsls	r1, r3, #9
 800519a:	460b      	mov	r3, r1
 800519c:	4614      	mov	r4, r2
 800519e:	4618      	mov	r0, r3
 80051a0:	4621      	mov	r1, r4
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f04f 0400 	mov.w	r4, #0
 80051a8:	461a      	mov	r2, r3
 80051aa:	4623      	mov	r3, r4
 80051ac:	f7fb fd18 	bl	8000be0 <__aeabi_uldivmod>
 80051b0:	4603      	mov	r3, r0
 80051b2:	460c      	mov	r4, r1
 80051b4:	617b      	str	r3, [r7, #20]
 80051b6:	e049      	b.n	800524c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051b8:	4b2e      	ldr	r3, [pc, #184]	; (8005274 <HAL_RCC_GetSysClockFreq+0x334>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	099b      	lsrs	r3, r3, #6
 80051be:	f04f 0400 	mov.w	r4, #0
 80051c2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80051c6:	f04f 0200 	mov.w	r2, #0
 80051ca:	ea03 0501 	and.w	r5, r3, r1
 80051ce:	ea04 0602 	and.w	r6, r4, r2
 80051d2:	4629      	mov	r1, r5
 80051d4:	4632      	mov	r2, r6
 80051d6:	f04f 0300 	mov.w	r3, #0
 80051da:	f04f 0400 	mov.w	r4, #0
 80051de:	0154      	lsls	r4, r2, #5
 80051e0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80051e4:	014b      	lsls	r3, r1, #5
 80051e6:	4619      	mov	r1, r3
 80051e8:	4622      	mov	r2, r4
 80051ea:	1b49      	subs	r1, r1, r5
 80051ec:	eb62 0206 	sbc.w	r2, r2, r6
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	f04f 0400 	mov.w	r4, #0
 80051f8:	0194      	lsls	r4, r2, #6
 80051fa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80051fe:	018b      	lsls	r3, r1, #6
 8005200:	1a5b      	subs	r3, r3, r1
 8005202:	eb64 0402 	sbc.w	r4, r4, r2
 8005206:	f04f 0100 	mov.w	r1, #0
 800520a:	f04f 0200 	mov.w	r2, #0
 800520e:	00e2      	lsls	r2, r4, #3
 8005210:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005214:	00d9      	lsls	r1, r3, #3
 8005216:	460b      	mov	r3, r1
 8005218:	4614      	mov	r4, r2
 800521a:	195b      	adds	r3, r3, r5
 800521c:	eb44 0406 	adc.w	r4, r4, r6
 8005220:	f04f 0100 	mov.w	r1, #0
 8005224:	f04f 0200 	mov.w	r2, #0
 8005228:	02a2      	lsls	r2, r4, #10
 800522a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800522e:	0299      	lsls	r1, r3, #10
 8005230:	460b      	mov	r3, r1
 8005232:	4614      	mov	r4, r2
 8005234:	4618      	mov	r0, r3
 8005236:	4621      	mov	r1, r4
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f04f 0400 	mov.w	r4, #0
 800523e:	461a      	mov	r2, r3
 8005240:	4623      	mov	r3, r4
 8005242:	f7fb fccd 	bl	8000be0 <__aeabi_uldivmod>
 8005246:	4603      	mov	r3, r0
 8005248:	460c      	mov	r4, r1
 800524a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800524c:	4b09      	ldr	r3, [pc, #36]	; (8005274 <HAL_RCC_GetSysClockFreq+0x334>)
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	0f1b      	lsrs	r3, r3, #28
 8005252:	f003 0307 	and.w	r3, r3, #7
 8005256:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005260:	613b      	str	r3, [r7, #16]
      break;
 8005262:	e002      	b.n	800526a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005264:	4b04      	ldr	r3, [pc, #16]	; (8005278 <HAL_RCC_GetSysClockFreq+0x338>)
 8005266:	613b      	str	r3, [r7, #16]
      break;
 8005268:	bf00      	nop
    }
  }
  return sysclockfreq;
 800526a:	693b      	ldr	r3, [r7, #16]
}
 800526c:	4618      	mov	r0, r3
 800526e:	371c      	adds	r7, #28
 8005270:	46bd      	mov	sp, r7
 8005272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005274:	40023800 	.word	0x40023800
 8005278:	00f42400 	.word	0x00f42400
 800527c:	007a1200 	.word	0x007a1200

08005280 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005288:	2300      	movs	r3, #0
 800528a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 8083 	beq.w	80053a0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800529a:	4b95      	ldr	r3, [pc, #596]	; (80054f0 <HAL_RCC_OscConfig+0x270>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 030c 	and.w	r3, r3, #12
 80052a2:	2b04      	cmp	r3, #4
 80052a4:	d019      	beq.n	80052da <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80052a6:	4b92      	ldr	r3, [pc, #584]	; (80054f0 <HAL_RCC_OscConfig+0x270>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80052ae:	2b08      	cmp	r3, #8
 80052b0:	d106      	bne.n	80052c0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80052b2:	4b8f      	ldr	r3, [pc, #572]	; (80054f0 <HAL_RCC_OscConfig+0x270>)
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052be:	d00c      	beq.n	80052da <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052c0:	4b8b      	ldr	r3, [pc, #556]	; (80054f0 <HAL_RCC_OscConfig+0x270>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80052c8:	2b0c      	cmp	r3, #12
 80052ca:	d112      	bne.n	80052f2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052cc:	4b88      	ldr	r3, [pc, #544]	; (80054f0 <HAL_RCC_OscConfig+0x270>)
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052d8:	d10b      	bne.n	80052f2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052da:	4b85      	ldr	r3, [pc, #532]	; (80054f0 <HAL_RCC_OscConfig+0x270>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d05b      	beq.n	800539e <HAL_RCC_OscConfig+0x11e>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d157      	bne.n	800539e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e216      	b.n	8005720 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052fa:	d106      	bne.n	800530a <HAL_RCC_OscConfig+0x8a>
 80052fc:	4b7c      	ldr	r3, [pc, #496]	; (80054f0 <HAL_RCC_OscConfig+0x270>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a7b      	ldr	r2, [pc, #492]	; (80054f0 <HAL_RCC_OscConfig+0x270>)
 8005302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005306:	6013      	str	r3, [r2, #0]
 8005308:	e01d      	b.n	8005346 <HAL_RCC_OscConfig+0xc6>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005312:	d10c      	bne.n	800532e <HAL_RCC_OscConfig+0xae>
 8005314:	4b76      	ldr	r3, [pc, #472]	; (80054f0 <HAL_RCC_OscConfig+0x270>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a75      	ldr	r2, [pc, #468]	; (80054f0 <HAL_RCC_OscConfig+0x270>)
 800531a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800531e:	6013      	str	r3, [r2, #0]
 8005320:	4b73      	ldr	r3, [pc, #460]	; (80054f0 <HAL_RCC_OscConfig+0x270>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a72      	ldr	r2, [pc, #456]	; (80054f0 <HAL_RCC_OscConfig+0x270>)
 8005326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800532a:	6013      	str	r3, [r2, #0]
 800532c:	e00b      	b.n	8005346 <HAL_RCC_OscConfig+0xc6>
 800532e:	4b70      	ldr	r3, [pc, #448]	; (80054f0 <HAL_RCC_OscConfig+0x270>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a6f      	ldr	r2, [pc, #444]	; (80054f0 <HAL_RCC_OscConfig+0x270>)
 8005334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	4b6d      	ldr	r3, [pc, #436]	; (80054f0 <HAL_RCC_OscConfig+0x270>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a6c      	ldr	r2, [pc, #432]	; (80054f0 <HAL_RCC_OscConfig+0x270>)
 8005340:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005344:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d013      	beq.n	8005376 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800534e:	f7fd fff5 	bl	800333c <HAL_GetTick>
 8005352:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005354:	e008      	b.n	8005368 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005356:	f7fd fff1 	bl	800333c <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b64      	cmp	r3, #100	; 0x64
 8005362:	d901      	bls.n	8005368 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e1db      	b.n	8005720 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005368:	4b61      	ldr	r3, [pc, #388]	; (80054f0 <HAL_RCC_OscConfig+0x270>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0f0      	beq.n	8005356 <HAL_RCC_OscConfig+0xd6>
 8005374:	e014      	b.n	80053a0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005376:	f7fd ffe1 	bl	800333c <HAL_GetTick>
 800537a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800537c:	e008      	b.n	8005390 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800537e:	f7fd ffdd 	bl	800333c <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	2b64      	cmp	r3, #100	; 0x64
 800538a:	d901      	bls.n	8005390 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e1c7      	b.n	8005720 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005390:	4b57      	ldr	r3, [pc, #348]	; (80054f0 <HAL_RCC_OscConfig+0x270>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1f0      	bne.n	800537e <HAL_RCC_OscConfig+0xfe>
 800539c:	e000      	b.n	80053a0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800539e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d06f      	beq.n	800548c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80053ac:	4b50      	ldr	r3, [pc, #320]	; (80054f0 <HAL_RCC_OscConfig+0x270>)
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f003 030c 	and.w	r3, r3, #12
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d017      	beq.n	80053e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80053b8:	4b4d      	ldr	r3, [pc, #308]	; (80054f0 <HAL_RCC_OscConfig+0x270>)
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d105      	bne.n	80053d0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80053c4:	4b4a      	ldr	r3, [pc, #296]	; (80054f0 <HAL_RCC_OscConfig+0x270>)
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00b      	beq.n	80053e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053d0:	4b47      	ldr	r3, [pc, #284]	; (80054f0 <HAL_RCC_OscConfig+0x270>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80053d8:	2b0c      	cmp	r3, #12
 80053da:	d11c      	bne.n	8005416 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053dc:	4b44      	ldr	r3, [pc, #272]	; (80054f0 <HAL_RCC_OscConfig+0x270>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d116      	bne.n	8005416 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053e8:	4b41      	ldr	r3, [pc, #260]	; (80054f0 <HAL_RCC_OscConfig+0x270>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d005      	beq.n	8005400 <HAL_RCC_OscConfig+0x180>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d001      	beq.n	8005400 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e18f      	b.n	8005720 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005400:	4b3b      	ldr	r3, [pc, #236]	; (80054f0 <HAL_RCC_OscConfig+0x270>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	4938      	ldr	r1, [pc, #224]	; (80054f0 <HAL_RCC_OscConfig+0x270>)
 8005410:	4313      	orrs	r3, r2
 8005412:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005414:	e03a      	b.n	800548c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d020      	beq.n	8005460 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800541e:	4b35      	ldr	r3, [pc, #212]	; (80054f4 <HAL_RCC_OscConfig+0x274>)
 8005420:	2201      	movs	r2, #1
 8005422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005424:	f7fd ff8a 	bl	800333c <HAL_GetTick>
 8005428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800542a:	e008      	b.n	800543e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800542c:	f7fd ff86 	bl	800333c <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e170      	b.n	8005720 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800543e:	4b2c      	ldr	r3, [pc, #176]	; (80054f0 <HAL_RCC_OscConfig+0x270>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d0f0      	beq.n	800542c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800544a:	4b29      	ldr	r3, [pc, #164]	; (80054f0 <HAL_RCC_OscConfig+0x270>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	4925      	ldr	r1, [pc, #148]	; (80054f0 <HAL_RCC_OscConfig+0x270>)
 800545a:	4313      	orrs	r3, r2
 800545c:	600b      	str	r3, [r1, #0]
 800545e:	e015      	b.n	800548c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005460:	4b24      	ldr	r3, [pc, #144]	; (80054f4 <HAL_RCC_OscConfig+0x274>)
 8005462:	2200      	movs	r2, #0
 8005464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005466:	f7fd ff69 	bl	800333c <HAL_GetTick>
 800546a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800546c:	e008      	b.n	8005480 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800546e:	f7fd ff65 	bl	800333c <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d901      	bls.n	8005480 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e14f      	b.n	8005720 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005480:	4b1b      	ldr	r3, [pc, #108]	; (80054f0 <HAL_RCC_OscConfig+0x270>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1f0      	bne.n	800546e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0308 	and.w	r3, r3, #8
 8005494:	2b00      	cmp	r3, #0
 8005496:	d037      	beq.n	8005508 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d016      	beq.n	80054ce <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054a0:	4b15      	ldr	r3, [pc, #84]	; (80054f8 <HAL_RCC_OscConfig+0x278>)
 80054a2:	2201      	movs	r2, #1
 80054a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054a6:	f7fd ff49 	bl	800333c <HAL_GetTick>
 80054aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ac:	e008      	b.n	80054c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054ae:	f7fd ff45 	bl	800333c <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d901      	bls.n	80054c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e12f      	b.n	8005720 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054c0:	4b0b      	ldr	r3, [pc, #44]	; (80054f0 <HAL_RCC_OscConfig+0x270>)
 80054c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d0f0      	beq.n	80054ae <HAL_RCC_OscConfig+0x22e>
 80054cc:	e01c      	b.n	8005508 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054ce:	4b0a      	ldr	r3, [pc, #40]	; (80054f8 <HAL_RCC_OscConfig+0x278>)
 80054d0:	2200      	movs	r2, #0
 80054d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d4:	f7fd ff32 	bl	800333c <HAL_GetTick>
 80054d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054da:	e00f      	b.n	80054fc <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054dc:	f7fd ff2e 	bl	800333c <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d908      	bls.n	80054fc <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e118      	b.n	8005720 <HAL_RCC_OscConfig+0x4a0>
 80054ee:	bf00      	nop
 80054f0:	40023800 	.word	0x40023800
 80054f4:	42470000 	.word	0x42470000
 80054f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054fc:	4b8a      	ldr	r3, [pc, #552]	; (8005728 <HAL_RCC_OscConfig+0x4a8>)
 80054fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1e9      	bne.n	80054dc <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0304 	and.w	r3, r3, #4
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 8097 	beq.w	8005644 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005516:	2300      	movs	r3, #0
 8005518:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800551a:	4b83      	ldr	r3, [pc, #524]	; (8005728 <HAL_RCC_OscConfig+0x4a8>)
 800551c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10f      	bne.n	8005546 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	4b7f      	ldr	r3, [pc, #508]	; (8005728 <HAL_RCC_OscConfig+0x4a8>)
 800552c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552e:	4a7e      	ldr	r2, [pc, #504]	; (8005728 <HAL_RCC_OscConfig+0x4a8>)
 8005530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005534:	6413      	str	r3, [r2, #64]	; 0x40
 8005536:	4b7c      	ldr	r3, [pc, #496]	; (8005728 <HAL_RCC_OscConfig+0x4a8>)
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005542:	2301      	movs	r3, #1
 8005544:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005546:	4b79      	ldr	r3, [pc, #484]	; (800572c <HAL_RCC_OscConfig+0x4ac>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800554e:	2b00      	cmp	r3, #0
 8005550:	d118      	bne.n	8005584 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005552:	4b76      	ldr	r3, [pc, #472]	; (800572c <HAL_RCC_OscConfig+0x4ac>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a75      	ldr	r2, [pc, #468]	; (800572c <HAL_RCC_OscConfig+0x4ac>)
 8005558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800555c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800555e:	f7fd feed 	bl	800333c <HAL_GetTick>
 8005562:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005564:	e008      	b.n	8005578 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005566:	f7fd fee9 	bl	800333c <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b02      	cmp	r3, #2
 8005572:	d901      	bls.n	8005578 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e0d3      	b.n	8005720 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005578:	4b6c      	ldr	r3, [pc, #432]	; (800572c <HAL_RCC_OscConfig+0x4ac>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0f0      	beq.n	8005566 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d106      	bne.n	800559a <HAL_RCC_OscConfig+0x31a>
 800558c:	4b66      	ldr	r3, [pc, #408]	; (8005728 <HAL_RCC_OscConfig+0x4a8>)
 800558e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005590:	4a65      	ldr	r2, [pc, #404]	; (8005728 <HAL_RCC_OscConfig+0x4a8>)
 8005592:	f043 0301 	orr.w	r3, r3, #1
 8005596:	6713      	str	r3, [r2, #112]	; 0x70
 8005598:	e01c      	b.n	80055d4 <HAL_RCC_OscConfig+0x354>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	2b05      	cmp	r3, #5
 80055a0:	d10c      	bne.n	80055bc <HAL_RCC_OscConfig+0x33c>
 80055a2:	4b61      	ldr	r3, [pc, #388]	; (8005728 <HAL_RCC_OscConfig+0x4a8>)
 80055a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a6:	4a60      	ldr	r2, [pc, #384]	; (8005728 <HAL_RCC_OscConfig+0x4a8>)
 80055a8:	f043 0304 	orr.w	r3, r3, #4
 80055ac:	6713      	str	r3, [r2, #112]	; 0x70
 80055ae:	4b5e      	ldr	r3, [pc, #376]	; (8005728 <HAL_RCC_OscConfig+0x4a8>)
 80055b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b2:	4a5d      	ldr	r2, [pc, #372]	; (8005728 <HAL_RCC_OscConfig+0x4a8>)
 80055b4:	f043 0301 	orr.w	r3, r3, #1
 80055b8:	6713      	str	r3, [r2, #112]	; 0x70
 80055ba:	e00b      	b.n	80055d4 <HAL_RCC_OscConfig+0x354>
 80055bc:	4b5a      	ldr	r3, [pc, #360]	; (8005728 <HAL_RCC_OscConfig+0x4a8>)
 80055be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c0:	4a59      	ldr	r2, [pc, #356]	; (8005728 <HAL_RCC_OscConfig+0x4a8>)
 80055c2:	f023 0301 	bic.w	r3, r3, #1
 80055c6:	6713      	str	r3, [r2, #112]	; 0x70
 80055c8:	4b57      	ldr	r3, [pc, #348]	; (8005728 <HAL_RCC_OscConfig+0x4a8>)
 80055ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055cc:	4a56      	ldr	r2, [pc, #344]	; (8005728 <HAL_RCC_OscConfig+0x4a8>)
 80055ce:	f023 0304 	bic.w	r3, r3, #4
 80055d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d015      	beq.n	8005608 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055dc:	f7fd feae 	bl	800333c <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055e2:	e00a      	b.n	80055fa <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055e4:	f7fd feaa 	bl	800333c <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e092      	b.n	8005720 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055fa:	4b4b      	ldr	r3, [pc, #300]	; (8005728 <HAL_RCC_OscConfig+0x4a8>)
 80055fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d0ee      	beq.n	80055e4 <HAL_RCC_OscConfig+0x364>
 8005606:	e014      	b.n	8005632 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005608:	f7fd fe98 	bl	800333c <HAL_GetTick>
 800560c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800560e:	e00a      	b.n	8005626 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005610:	f7fd fe94 	bl	800333c <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	f241 3288 	movw	r2, #5000	; 0x1388
 800561e:	4293      	cmp	r3, r2
 8005620:	d901      	bls.n	8005626 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e07c      	b.n	8005720 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005626:	4b40      	ldr	r3, [pc, #256]	; (8005728 <HAL_RCC_OscConfig+0x4a8>)
 8005628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1ee      	bne.n	8005610 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005632:	7dfb      	ldrb	r3, [r7, #23]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d105      	bne.n	8005644 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005638:	4b3b      	ldr	r3, [pc, #236]	; (8005728 <HAL_RCC_OscConfig+0x4a8>)
 800563a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563c:	4a3a      	ldr	r2, [pc, #232]	; (8005728 <HAL_RCC_OscConfig+0x4a8>)
 800563e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005642:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d068      	beq.n	800571e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800564c:	4b36      	ldr	r3, [pc, #216]	; (8005728 <HAL_RCC_OscConfig+0x4a8>)
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f003 030c 	and.w	r3, r3, #12
 8005654:	2b08      	cmp	r3, #8
 8005656:	d060      	beq.n	800571a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	2b02      	cmp	r3, #2
 800565e:	d145      	bne.n	80056ec <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005660:	4b33      	ldr	r3, [pc, #204]	; (8005730 <HAL_RCC_OscConfig+0x4b0>)
 8005662:	2200      	movs	r2, #0
 8005664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005666:	f7fd fe69 	bl	800333c <HAL_GetTick>
 800566a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800566c:	e008      	b.n	8005680 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800566e:	f7fd fe65 	bl	800333c <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	2b02      	cmp	r3, #2
 800567a:	d901      	bls.n	8005680 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e04f      	b.n	8005720 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005680:	4b29      	ldr	r3, [pc, #164]	; (8005728 <HAL_RCC_OscConfig+0x4a8>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1f0      	bne.n	800566e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	69da      	ldr	r2, [r3, #28]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	431a      	orrs	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	019b      	lsls	r3, r3, #6
 800569c:	431a      	orrs	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a2:	085b      	lsrs	r3, r3, #1
 80056a4:	3b01      	subs	r3, #1
 80056a6:	041b      	lsls	r3, r3, #16
 80056a8:	431a      	orrs	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ae:	061b      	lsls	r3, r3, #24
 80056b0:	431a      	orrs	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b6:	071b      	lsls	r3, r3, #28
 80056b8:	491b      	ldr	r1, [pc, #108]	; (8005728 <HAL_RCC_OscConfig+0x4a8>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056be:	4b1c      	ldr	r3, [pc, #112]	; (8005730 <HAL_RCC_OscConfig+0x4b0>)
 80056c0:	2201      	movs	r2, #1
 80056c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c4:	f7fd fe3a 	bl	800333c <HAL_GetTick>
 80056c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056cc:	f7fd fe36 	bl	800333c <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e020      	b.n	8005720 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056de:	4b12      	ldr	r3, [pc, #72]	; (8005728 <HAL_RCC_OscConfig+0x4a8>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d0f0      	beq.n	80056cc <HAL_RCC_OscConfig+0x44c>
 80056ea:	e018      	b.n	800571e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056ec:	4b10      	ldr	r3, [pc, #64]	; (8005730 <HAL_RCC_OscConfig+0x4b0>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f2:	f7fd fe23 	bl	800333c <HAL_GetTick>
 80056f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056f8:	e008      	b.n	800570c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056fa:	f7fd fe1f 	bl	800333c <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	2b02      	cmp	r3, #2
 8005706:	d901      	bls.n	800570c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e009      	b.n	8005720 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800570c:	4b06      	ldr	r3, [pc, #24]	; (8005728 <HAL_RCC_OscConfig+0x4a8>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1f0      	bne.n	80056fa <HAL_RCC_OscConfig+0x47a>
 8005718:	e001      	b.n	800571e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e000      	b.n	8005720 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3718      	adds	r7, #24
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40023800 	.word	0x40023800
 800572c:	40007000 	.word	0x40007000
 8005730:	42470060 	.word	0x42470060

08005734 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e01d      	b.n	8005782 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d106      	bne.n	8005760 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7fd fa4c 	bl	8002bf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	3304      	adds	r3, #4
 8005770:	4619      	mov	r1, r3
 8005772:	4610      	mov	r0, r2
 8005774:	f000 fb56 	bl	8005e24 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800578a:	b480      	push	{r7}
 800578c:	b085      	sub	sp, #20
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68da      	ldr	r2, [r3, #12]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f042 0201 	orr.w	r2, r2, #1
 80057a0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f003 0307 	and.w	r3, r3, #7
 80057ac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2b06      	cmp	r3, #6
 80057b2:	d007      	beq.n	80057c4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0201 	orr.w	r2, r2, #1
 80057c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b082      	sub	sp, #8
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d101      	bne.n	80057e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e01d      	b.n	8005820 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d106      	bne.n	80057fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f7fd f9c5 	bl	8002b88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2202      	movs	r2, #2
 8005802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	3304      	adds	r3, #4
 800580e:	4619      	mov	r1, r3
 8005810:	4610      	mov	r0, r2
 8005812:	f000 fb07 	bl	8005e24 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3708      	adds	r7, #8
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2201      	movs	r2, #1
 8005838:	6839      	ldr	r1, [r7, #0]
 800583a:	4618      	mov	r0, r3
 800583c:	f000 fd42 	bl	80062c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a15      	ldr	r2, [pc, #84]	; (800589c <HAL_TIM_PWM_Start+0x74>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d004      	beq.n	8005854 <HAL_TIM_PWM_Start+0x2c>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a14      	ldr	r2, [pc, #80]	; (80058a0 <HAL_TIM_PWM_Start+0x78>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d101      	bne.n	8005858 <HAL_TIM_PWM_Start+0x30>
 8005854:	2301      	movs	r3, #1
 8005856:	e000      	b.n	800585a <HAL_TIM_PWM_Start+0x32>
 8005858:	2300      	movs	r3, #0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d007      	beq.n	800586e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800586c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f003 0307 	and.w	r3, r3, #7
 8005878:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2b06      	cmp	r3, #6
 800587e:	d007      	beq.n	8005890 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f042 0201 	orr.w	r2, r2, #1
 800588e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	40010000 	.word	0x40010000
 80058a0:	40010400 	.word	0x40010400

080058a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b086      	sub	sp, #24
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d101      	bne.n	80058b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e083      	b.n	80059c0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d106      	bne.n	80058d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7fd f8e1 	bl	8002a94 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2202      	movs	r2, #2
 80058d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6812      	ldr	r2, [r2, #0]
 80058e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058e8:	f023 0307 	bic.w	r3, r3, #7
 80058ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	3304      	adds	r3, #4
 80058f6:	4619      	mov	r1, r3
 80058f8:	4610      	mov	r0, r2
 80058fa:	f000 fa93 	bl	8005e24 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	4313      	orrs	r3, r2
 800591e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005926:	f023 0303 	bic.w	r3, r3, #3
 800592a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	021b      	lsls	r3, r3, #8
 8005936:	4313      	orrs	r3, r2
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	4313      	orrs	r3, r2
 800593c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005944:	f023 030c 	bic.w	r3, r3, #12
 8005948:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005950:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005954:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	68da      	ldr	r2, [r3, #12]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	021b      	lsls	r3, r3, #8
 8005960:	4313      	orrs	r3, r2
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	4313      	orrs	r3, r2
 8005966:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	011a      	lsls	r2, r3, #4
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	031b      	lsls	r3, r3, #12
 8005974:	4313      	orrs	r3, r2
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	4313      	orrs	r3, r2
 800597a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005982:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800598a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	011b      	lsls	r3, r3, #4
 8005996:	4313      	orrs	r3, r2
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	4313      	orrs	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3718      	adds	r7, #24
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <HAL_TIM_Encoder_Start+0x16>
 80059d8:	2b04      	cmp	r3, #4
 80059da:	d008      	beq.n	80059ee <HAL_TIM_Encoder_Start+0x26>
 80059dc:	e00f      	b.n	80059fe <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2201      	movs	r2, #1
 80059e4:	2100      	movs	r1, #0
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 fc6c 	bl	80062c4 <TIM_CCxChannelCmd>
      break;
 80059ec:	e016      	b.n	8005a1c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2201      	movs	r2, #1
 80059f4:	2104      	movs	r1, #4
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 fc64 	bl	80062c4 <TIM_CCxChannelCmd>
      break;
 80059fc:	e00e      	b.n	8005a1c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2201      	movs	r2, #1
 8005a04:	2100      	movs	r1, #0
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 fc5c 	bl	80062c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2201      	movs	r2, #1
 8005a12:	2104      	movs	r1, #4
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 fc55 	bl	80062c4 <TIM_CCxChannelCmd>
      break;
 8005a1a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f042 0201 	orr.w	r2, r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b082      	sub	sp, #8
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d122      	bne.n	8005a92 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d11b      	bne.n	8005a92 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f06f 0202 	mvn.w	r2, #2
 8005a62:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	f003 0303 	and.w	r3, r3, #3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d003      	beq.n	8005a80 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f9b5 	bl	8005de8 <HAL_TIM_IC_CaptureCallback>
 8005a7e:	e005      	b.n	8005a8c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f9a7 	bl	8005dd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f9b8 	bl	8005dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	f003 0304 	and.w	r3, r3, #4
 8005a9c:	2b04      	cmp	r3, #4
 8005a9e:	d122      	bne.n	8005ae6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f003 0304 	and.w	r3, r3, #4
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	d11b      	bne.n	8005ae6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f06f 0204 	mvn.w	r2, #4
 8005ab6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2202      	movs	r2, #2
 8005abc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 f98b 	bl	8005de8 <HAL_TIM_IC_CaptureCallback>
 8005ad2:	e005      	b.n	8005ae0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f97d 	bl	8005dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f98e 	bl	8005dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	f003 0308 	and.w	r3, r3, #8
 8005af0:	2b08      	cmp	r3, #8
 8005af2:	d122      	bne.n	8005b3a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	f003 0308 	and.w	r3, r3, #8
 8005afe:	2b08      	cmp	r3, #8
 8005b00:	d11b      	bne.n	8005b3a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f06f 0208 	mvn.w	r2, #8
 8005b0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2204      	movs	r2, #4
 8005b10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	f003 0303 	and.w	r3, r3, #3
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f961 	bl	8005de8 <HAL_TIM_IC_CaptureCallback>
 8005b26:	e005      	b.n	8005b34 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f953 	bl	8005dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f964 	bl	8005dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	f003 0310 	and.w	r3, r3, #16
 8005b44:	2b10      	cmp	r3, #16
 8005b46:	d122      	bne.n	8005b8e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	f003 0310 	and.w	r3, r3, #16
 8005b52:	2b10      	cmp	r3, #16
 8005b54:	d11b      	bne.n	8005b8e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f06f 0210 	mvn.w	r2, #16
 8005b5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2208      	movs	r2, #8
 8005b64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f937 	bl	8005de8 <HAL_TIM_IC_CaptureCallback>
 8005b7a:	e005      	b.n	8005b88 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f929 	bl	8005dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f93a 	bl	8005dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d10e      	bne.n	8005bba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d107      	bne.n	8005bba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f06f 0201 	mvn.w	r2, #1
 8005bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f7fb fdc7 	bl	8001748 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc4:	2b80      	cmp	r3, #128	; 0x80
 8005bc6:	d10e      	bne.n	8005be6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd2:	2b80      	cmp	r3, #128	; 0x80
 8005bd4:	d107      	bne.n	8005be6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 fc6d 	bl	80064c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf0:	2b40      	cmp	r3, #64	; 0x40
 8005bf2:	d10e      	bne.n	8005c12 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfe:	2b40      	cmp	r3, #64	; 0x40
 8005c00:	d107      	bne.n	8005c12 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f8ff 	bl	8005e10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	f003 0320 	and.w	r3, r3, #32
 8005c1c:	2b20      	cmp	r3, #32
 8005c1e:	d10e      	bne.n	8005c3e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	f003 0320 	and.w	r3, r3, #32
 8005c2a:	2b20      	cmp	r3, #32
 8005c2c:	d107      	bne.n	8005c3e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f06f 0220 	mvn.w	r2, #32
 8005c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 fc37 	bl	80064ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c3e:	bf00      	nop
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d101      	bne.n	8005c62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005c5e:	2302      	movs	r3, #2
 8005c60:	e0b4      	b.n	8005dcc <HAL_TIM_PWM_ConfigChannel+0x184>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b0c      	cmp	r3, #12
 8005c76:	f200 809f 	bhi.w	8005db8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005c7a:	a201      	add	r2, pc, #4	; (adr r2, 8005c80 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c80:	08005cb5 	.word	0x08005cb5
 8005c84:	08005db9 	.word	0x08005db9
 8005c88:	08005db9 	.word	0x08005db9
 8005c8c:	08005db9 	.word	0x08005db9
 8005c90:	08005cf5 	.word	0x08005cf5
 8005c94:	08005db9 	.word	0x08005db9
 8005c98:	08005db9 	.word	0x08005db9
 8005c9c:	08005db9 	.word	0x08005db9
 8005ca0:	08005d37 	.word	0x08005d37
 8005ca4:	08005db9 	.word	0x08005db9
 8005ca8:	08005db9 	.word	0x08005db9
 8005cac:	08005db9 	.word	0x08005db9
 8005cb0:	08005d77 	.word	0x08005d77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68b9      	ldr	r1, [r7, #8]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f000 f952 	bl	8005f64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	699a      	ldr	r2, [r3, #24]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f042 0208 	orr.w	r2, r2, #8
 8005cce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	699a      	ldr	r2, [r3, #24]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0204 	bic.w	r2, r2, #4
 8005cde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6999      	ldr	r1, [r3, #24]
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	691a      	ldr	r2, [r3, #16]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	619a      	str	r2, [r3, #24]
      break;
 8005cf2:	e062      	b.n	8005dba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68b9      	ldr	r1, [r7, #8]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 f9a2 	bl	8006044 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	699a      	ldr	r2, [r3, #24]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	699a      	ldr	r2, [r3, #24]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6999      	ldr	r1, [r3, #24]
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	021a      	lsls	r2, r3, #8
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	430a      	orrs	r2, r1
 8005d32:	619a      	str	r2, [r3, #24]
      break;
 8005d34:	e041      	b.n	8005dba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68b9      	ldr	r1, [r7, #8]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f000 f9f7 	bl	8006130 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	69da      	ldr	r2, [r3, #28]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f042 0208 	orr.w	r2, r2, #8
 8005d50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	69da      	ldr	r2, [r3, #28]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f022 0204 	bic.w	r2, r2, #4
 8005d60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	69d9      	ldr	r1, [r3, #28]
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	691a      	ldr	r2, [r3, #16]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	430a      	orrs	r2, r1
 8005d72:	61da      	str	r2, [r3, #28]
      break;
 8005d74:	e021      	b.n	8005dba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68b9      	ldr	r1, [r7, #8]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 fa4b 	bl	8006218 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	69da      	ldr	r2, [r3, #28]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	69da      	ldr	r2, [r3, #28]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005da0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	69d9      	ldr	r1, [r3, #28]
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	021a      	lsls	r2, r3, #8
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	61da      	str	r2, [r3, #28]
      break;
 8005db6:	e000      	b.n	8005dba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005db8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a40      	ldr	r2, [pc, #256]	; (8005f38 <TIM_Base_SetConfig+0x114>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d013      	beq.n	8005e64 <TIM_Base_SetConfig+0x40>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e42:	d00f      	beq.n	8005e64 <TIM_Base_SetConfig+0x40>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a3d      	ldr	r2, [pc, #244]	; (8005f3c <TIM_Base_SetConfig+0x118>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d00b      	beq.n	8005e64 <TIM_Base_SetConfig+0x40>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a3c      	ldr	r2, [pc, #240]	; (8005f40 <TIM_Base_SetConfig+0x11c>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d007      	beq.n	8005e64 <TIM_Base_SetConfig+0x40>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a3b      	ldr	r2, [pc, #236]	; (8005f44 <TIM_Base_SetConfig+0x120>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d003      	beq.n	8005e64 <TIM_Base_SetConfig+0x40>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a3a      	ldr	r2, [pc, #232]	; (8005f48 <TIM_Base_SetConfig+0x124>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d108      	bne.n	8005e76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a2f      	ldr	r2, [pc, #188]	; (8005f38 <TIM_Base_SetConfig+0x114>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d02b      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb2>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e84:	d027      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a2c      	ldr	r2, [pc, #176]	; (8005f3c <TIM_Base_SetConfig+0x118>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d023      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb2>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a2b      	ldr	r2, [pc, #172]	; (8005f40 <TIM_Base_SetConfig+0x11c>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d01f      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb2>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a2a      	ldr	r2, [pc, #168]	; (8005f44 <TIM_Base_SetConfig+0x120>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d01b      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb2>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a29      	ldr	r2, [pc, #164]	; (8005f48 <TIM_Base_SetConfig+0x124>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d017      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb2>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a28      	ldr	r2, [pc, #160]	; (8005f4c <TIM_Base_SetConfig+0x128>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d013      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb2>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a27      	ldr	r2, [pc, #156]	; (8005f50 <TIM_Base_SetConfig+0x12c>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d00f      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb2>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a26      	ldr	r2, [pc, #152]	; (8005f54 <TIM_Base_SetConfig+0x130>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d00b      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb2>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a25      	ldr	r2, [pc, #148]	; (8005f58 <TIM_Base_SetConfig+0x134>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d007      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb2>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a24      	ldr	r2, [pc, #144]	; (8005f5c <TIM_Base_SetConfig+0x138>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d003      	beq.n	8005ed6 <TIM_Base_SetConfig+0xb2>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a23      	ldr	r2, [pc, #140]	; (8005f60 <TIM_Base_SetConfig+0x13c>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d108      	bne.n	8005ee8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005edc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a0a      	ldr	r2, [pc, #40]	; (8005f38 <TIM_Base_SetConfig+0x114>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d003      	beq.n	8005f1c <TIM_Base_SetConfig+0xf8>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a0c      	ldr	r2, [pc, #48]	; (8005f48 <TIM_Base_SetConfig+0x124>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d103      	bne.n	8005f24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	691a      	ldr	r2, [r3, #16]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	615a      	str	r2, [r3, #20]
}
 8005f2a:	bf00      	nop
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	40010000 	.word	0x40010000
 8005f3c:	40000400 	.word	0x40000400
 8005f40:	40000800 	.word	0x40000800
 8005f44:	40000c00 	.word	0x40000c00
 8005f48:	40010400 	.word	0x40010400
 8005f4c:	40014000 	.word	0x40014000
 8005f50:	40014400 	.word	0x40014400
 8005f54:	40014800 	.word	0x40014800
 8005f58:	40001800 	.word	0x40001800
 8005f5c:	40001c00 	.word	0x40001c00
 8005f60:	40002000 	.word	0x40002000

08005f64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	f023 0201 	bic.w	r2, r3, #1
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f023 0303 	bic.w	r3, r3, #3
 8005f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f023 0302 	bic.w	r3, r3, #2
 8005fac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a20      	ldr	r2, [pc, #128]	; (800603c <TIM_OC1_SetConfig+0xd8>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d003      	beq.n	8005fc8 <TIM_OC1_SetConfig+0x64>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a1f      	ldr	r2, [pc, #124]	; (8006040 <TIM_OC1_SetConfig+0xdc>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d10c      	bne.n	8005fe2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f023 0308 	bic.w	r3, r3, #8
 8005fce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	f023 0304 	bic.w	r3, r3, #4
 8005fe0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a15      	ldr	r2, [pc, #84]	; (800603c <TIM_OC1_SetConfig+0xd8>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d003      	beq.n	8005ff2 <TIM_OC1_SetConfig+0x8e>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a14      	ldr	r2, [pc, #80]	; (8006040 <TIM_OC1_SetConfig+0xdc>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d111      	bne.n	8006016 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	4313      	orrs	r3, r2
 800600a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	4313      	orrs	r3, r2
 8006014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	621a      	str	r2, [r3, #32]
}
 8006030:	bf00      	nop
 8006032:	371c      	adds	r7, #28
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	40010000 	.word	0x40010000
 8006040:	40010400 	.word	0x40010400

08006044 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006044:	b480      	push	{r7}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	f023 0210 	bic.w	r2, r3, #16
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800607a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	021b      	lsls	r3, r3, #8
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	4313      	orrs	r3, r2
 8006086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	f023 0320 	bic.w	r3, r3, #32
 800608e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	011b      	lsls	r3, r3, #4
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	4313      	orrs	r3, r2
 800609a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a22      	ldr	r2, [pc, #136]	; (8006128 <TIM_OC2_SetConfig+0xe4>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d003      	beq.n	80060ac <TIM_OC2_SetConfig+0x68>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a21      	ldr	r2, [pc, #132]	; (800612c <TIM_OC2_SetConfig+0xe8>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d10d      	bne.n	80060c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	011b      	lsls	r3, r3, #4
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	4313      	orrs	r3, r2
 80060be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a17      	ldr	r2, [pc, #92]	; (8006128 <TIM_OC2_SetConfig+0xe4>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d003      	beq.n	80060d8 <TIM_OC2_SetConfig+0x94>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a16      	ldr	r2, [pc, #88]	; (800612c <TIM_OC2_SetConfig+0xe8>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d113      	bne.n	8006100 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	693a      	ldr	r2, [r7, #16]
 8006104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685a      	ldr	r2, [r3, #4]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	621a      	str	r2, [r3, #32]
}
 800611a:	bf00      	nop
 800611c:	371c      	adds	r7, #28
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	40010000 	.word	0x40010000
 800612c:	40010400 	.word	0x40010400

08006130 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	69db      	ldr	r3, [r3, #28]
 8006156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f023 0303 	bic.w	r3, r3, #3
 8006166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	4313      	orrs	r3, r2
 8006170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	021b      	lsls	r3, r3, #8
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	4313      	orrs	r3, r2
 8006184:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a21      	ldr	r2, [pc, #132]	; (8006210 <TIM_OC3_SetConfig+0xe0>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d003      	beq.n	8006196 <TIM_OC3_SetConfig+0x66>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a20      	ldr	r2, [pc, #128]	; (8006214 <TIM_OC3_SetConfig+0xe4>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d10d      	bne.n	80061b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800619c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	021b      	lsls	r3, r3, #8
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a16      	ldr	r2, [pc, #88]	; (8006210 <TIM_OC3_SetConfig+0xe0>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d003      	beq.n	80061c2 <TIM_OC3_SetConfig+0x92>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a15      	ldr	r2, [pc, #84]	; (8006214 <TIM_OC3_SetConfig+0xe4>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d113      	bne.n	80061ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	011b      	lsls	r3, r3, #4
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	4313      	orrs	r3, r2
 80061dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	011b      	lsls	r3, r3, #4
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	685a      	ldr	r2, [r3, #4]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	621a      	str	r2, [r3, #32]
}
 8006204:	bf00      	nop
 8006206:	371c      	adds	r7, #28
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr
 8006210:	40010000 	.word	0x40010000
 8006214:	40010400 	.word	0x40010400

08006218 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800624e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	021b      	lsls	r3, r3, #8
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	4313      	orrs	r3, r2
 800625a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006262:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	031b      	lsls	r3, r3, #12
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	4313      	orrs	r3, r2
 800626e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a12      	ldr	r2, [pc, #72]	; (80062bc <TIM_OC4_SetConfig+0xa4>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d003      	beq.n	8006280 <TIM_OC4_SetConfig+0x68>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a11      	ldr	r2, [pc, #68]	; (80062c0 <TIM_OC4_SetConfig+0xa8>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d109      	bne.n	8006294 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006286:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	019b      	lsls	r3, r3, #6
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	4313      	orrs	r3, r2
 8006292:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	621a      	str	r2, [r3, #32]
}
 80062ae:	bf00      	nop
 80062b0:	371c      	adds	r7, #28
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	40010000 	.word	0x40010000
 80062c0:	40010400 	.word	0x40010400

080062c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	f003 031f 	and.w	r3, r3, #31
 80062d6:	2201      	movs	r2, #1
 80062d8:	fa02 f303 	lsl.w	r3, r2, r3
 80062dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6a1a      	ldr	r2, [r3, #32]
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	43db      	mvns	r3, r3
 80062e6:	401a      	ands	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6a1a      	ldr	r2, [r3, #32]
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	f003 031f 	and.w	r3, r3, #31
 80062f6:	6879      	ldr	r1, [r7, #4]
 80062f8:	fa01 f303 	lsl.w	r3, r1, r3
 80062fc:	431a      	orrs	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	621a      	str	r2, [r3, #32]
}
 8006302:	bf00      	nop
 8006304:	371c      	adds	r7, #28
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
	...

08006310 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006320:	2b01      	cmp	r3, #1
 8006322:	d101      	bne.n	8006328 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006324:	2302      	movs	r3, #2
 8006326:	e05a      	b.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2202      	movs	r2, #2
 8006334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800634e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	4313      	orrs	r3, r2
 8006358:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a21      	ldr	r2, [pc, #132]	; (80063ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d022      	beq.n	80063b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006374:	d01d      	beq.n	80063b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a1d      	ldr	r2, [pc, #116]	; (80063f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d018      	beq.n	80063b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a1b      	ldr	r2, [pc, #108]	; (80063f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d013      	beq.n	80063b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a1a      	ldr	r2, [pc, #104]	; (80063f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d00e      	beq.n	80063b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a18      	ldr	r2, [pc, #96]	; (80063fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d009      	beq.n	80063b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a17      	ldr	r2, [pc, #92]	; (8006400 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d004      	beq.n	80063b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a15      	ldr	r2, [pc, #84]	; (8006404 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d10c      	bne.n	80063cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	40010000 	.word	0x40010000
 80063f0:	40000400 	.word	0x40000400
 80063f4:	40000800 	.word	0x40000800
 80063f8:	40000c00 	.word	0x40000c00
 80063fc:	40010400 	.word	0x40010400
 8006400:	40014000 	.word	0x40014000
 8006404:	40001800 	.word	0x40001800

08006408 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006412:	2300      	movs	r3, #0
 8006414:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800641c:	2b01      	cmp	r3, #1
 800641e:	d101      	bne.n	8006424 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006420:	2302      	movs	r3, #2
 8006422:	e03d      	b.n	80064a0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	4313      	orrs	r3, r2
 8006438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	4313      	orrs	r3, r2
 8006446:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	4313      	orrs	r3, r2
 8006454:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4313      	orrs	r3, r2
 8006462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	4313      	orrs	r3, r2
 8006470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	695b      	ldr	r3, [r3, #20]
 800647c:	4313      	orrs	r3, r2
 800647e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	4313      	orrs	r3, r2
 800648c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e03f      	b.n	8006566 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d106      	bne.n	8006500 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7fc fcfa 	bl	8002ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2224      	movs	r2, #36	; 0x24
 8006504:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68da      	ldr	r2, [r3, #12]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006516:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 fb23 	bl	8006b64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	691a      	ldr	r2, [r3, #16]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800652c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	695a      	ldr	r2, [r3, #20]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800653c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68da      	ldr	r2, [r3, #12]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800654c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2220      	movs	r2, #32
 8006558:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2220      	movs	r2, #32
 8006560:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b088      	sub	sp, #32
 8006572:	af02      	add	r7, sp, #8
 8006574:	60f8      	str	r0, [r7, #12]
 8006576:	60b9      	str	r1, [r7, #8]
 8006578:	603b      	str	r3, [r7, #0]
 800657a:	4613      	mov	r3, r2
 800657c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800657e:	2300      	movs	r3, #0
 8006580:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b20      	cmp	r3, #32
 800658c:	f040 8083 	bne.w	8006696 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d002      	beq.n	800659c <HAL_UART_Transmit+0x2e>
 8006596:	88fb      	ldrh	r3, [r7, #6]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e07b      	b.n	8006698 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d101      	bne.n	80065ae <HAL_UART_Transmit+0x40>
 80065aa:	2302      	movs	r3, #2
 80065ac:	e074      	b.n	8006698 <HAL_UART_Transmit+0x12a>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2221      	movs	r2, #33	; 0x21
 80065c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80065c4:	f7fc feba 	bl	800333c <HAL_GetTick>
 80065c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	88fa      	ldrh	r2, [r7, #6]
 80065ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	88fa      	ldrh	r2, [r7, #6]
 80065d4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80065de:	e042      	b.n	8006666 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	3b01      	subs	r3, #1
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065f6:	d122      	bne.n	800663e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	2200      	movs	r2, #0
 8006600:	2180      	movs	r1, #128	; 0x80
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f000 fa30 	bl	8006a68 <UART_WaitOnFlagUntilTimeout>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e042      	b.n	8006698 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	881b      	ldrh	r3, [r3, #0]
 800661a:	461a      	mov	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006624:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d103      	bne.n	8006636 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	3302      	adds	r3, #2
 8006632:	60bb      	str	r3, [r7, #8]
 8006634:	e017      	b.n	8006666 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	3301      	adds	r3, #1
 800663a:	60bb      	str	r3, [r7, #8]
 800663c:	e013      	b.n	8006666 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	2200      	movs	r2, #0
 8006646:	2180      	movs	r1, #128	; 0x80
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f000 fa0d 	bl	8006a68 <UART_WaitOnFlagUntilTimeout>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d001      	beq.n	8006658 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e01f      	b.n	8006698 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	1c5a      	adds	r2, r3, #1
 800665c:	60ba      	str	r2, [r7, #8]
 800665e:	781a      	ldrb	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800666a:	b29b      	uxth	r3, r3
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1b7      	bne.n	80065e0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	2200      	movs	r2, #0
 8006678:	2140      	movs	r1, #64	; 0x40
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f000 f9f4 	bl	8006a68 <UART_WaitOnFlagUntilTimeout>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e006      	b.n	8006698 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2220      	movs	r2, #32
 800668e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006692:	2300      	movs	r3, #0
 8006694:	e000      	b.n	8006698 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006696:	2302      	movs	r3, #2
  }
}
 8006698:	4618      	mov	r0, r3
 800669a:	3718      	adds	r7, #24
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b088      	sub	sp, #32
 80066a4:	af02      	add	r7, sp, #8
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	603b      	str	r3, [r7, #0]
 80066ac:	4613      	mov	r3, r2
 80066ae:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80066b0:	2300      	movs	r3, #0
 80066b2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b20      	cmp	r3, #32
 80066be:	f040 8090 	bne.w	80067e2 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d002      	beq.n	80066ce <HAL_UART_Receive+0x2e>
 80066c8:	88fb      	ldrh	r3, [r7, #6]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e088      	b.n	80067e4 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d101      	bne.n	80066e0 <HAL_UART_Receive+0x40>
 80066dc:	2302      	movs	r3, #2
 80066de:	e081      	b.n	80067e4 <HAL_UART_Receive+0x144>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2222      	movs	r2, #34	; 0x22
 80066f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80066f6:	f7fc fe21 	bl	800333c <HAL_GetTick>
 80066fa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	88fa      	ldrh	r2, [r7, #6]
 8006700:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	88fa      	ldrh	r2, [r7, #6]
 8006706:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006710:	e05c      	b.n	80067cc <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006716:	b29b      	uxth	r3, r3
 8006718:	3b01      	subs	r3, #1
 800671a:	b29a      	uxth	r2, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006728:	d12b      	bne.n	8006782 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	2200      	movs	r2, #0
 8006732:	2120      	movs	r1, #32
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 f997 	bl	8006a68 <UART_WaitOnFlagUntilTimeout>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d001      	beq.n	8006744 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e04f      	b.n	80067e4 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10c      	bne.n	800676a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	b29b      	uxth	r3, r3
 8006758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800675c:	b29a      	uxth	r2, r3
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	3302      	adds	r3, #2
 8006766:	60bb      	str	r3, [r7, #8]
 8006768:	e030      	b.n	80067cc <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	b29b      	uxth	r3, r3
 8006772:	b2db      	uxtb	r3, r3
 8006774:	b29a      	uxth	r2, r3
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	3301      	adds	r3, #1
 800677e:	60bb      	str	r3, [r7, #8]
 8006780:	e024      	b.n	80067cc <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	9300      	str	r3, [sp, #0]
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	2200      	movs	r2, #0
 800678a:	2120      	movs	r1, #32
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f000 f96b 	bl	8006a68 <UART_WaitOnFlagUntilTimeout>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d001      	beq.n	800679c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e023      	b.n	80067e4 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d108      	bne.n	80067b6 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6859      	ldr	r1, [r3, #4]
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	1c5a      	adds	r2, r3, #1
 80067ae:	60ba      	str	r2, [r7, #8]
 80067b0:	b2ca      	uxtb	r2, r1
 80067b2:	701a      	strb	r2, [r3, #0]
 80067b4:	e00a      	b.n	80067cc <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	1c59      	adds	r1, r3, #1
 80067c2:	60b9      	str	r1, [r7, #8]
 80067c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80067c8:	b2d2      	uxtb	r2, r2
 80067ca:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d19d      	bne.n	8006712 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2220      	movs	r2, #32
 80067da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80067de:	2300      	movs	r3, #0
 80067e0:	e000      	b.n	80067e4 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80067e2:	2302      	movs	r3, #2
  }
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3718      	adds	r7, #24
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	4613      	mov	r3, r2
 80067f8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b20      	cmp	r3, #32
 8006804:	d166      	bne.n	80068d4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d002      	beq.n	8006812 <HAL_UART_Receive_DMA+0x26>
 800680c:	88fb      	ldrh	r3, [r7, #6]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e05f      	b.n	80068d6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800681c:	2b01      	cmp	r3, #1
 800681e:	d101      	bne.n	8006824 <HAL_UART_Receive_DMA+0x38>
 8006820:	2302      	movs	r3, #2
 8006822:	e058      	b.n	80068d6 <HAL_UART_Receive_DMA+0xea>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	88fa      	ldrh	r2, [r7, #6]
 8006836:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2200      	movs	r2, #0
 800683c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2222      	movs	r2, #34	; 0x22
 8006842:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800684a:	4a25      	ldr	r2, [pc, #148]	; (80068e0 <HAL_UART_Receive_DMA+0xf4>)
 800684c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006852:	4a24      	ldr	r2, [pc, #144]	; (80068e4 <HAL_UART_Receive_DMA+0xf8>)
 8006854:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800685a:	4a23      	ldr	r2, [pc, #140]	; (80068e8 <HAL_UART_Receive_DMA+0xfc>)
 800685c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006862:	2200      	movs	r2, #0
 8006864:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8006866:	f107 0308 	add.w	r3, r7, #8
 800686a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	3304      	adds	r3, #4
 8006876:	4619      	mov	r1, r3
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	88fb      	ldrh	r3, [r7, #6]
 800687e:	f7fd fda7 	bl	80043d0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8006882:	2300      	movs	r3, #0
 8006884:	613b      	str	r3, [r7, #16]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	613b      	str	r3, [r7, #16]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	613b      	str	r3, [r7, #16]
 8006896:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68da      	ldr	r2, [r3, #12]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068ae:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	695a      	ldr	r2, [r3, #20]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f042 0201 	orr.w	r2, r2, #1
 80068be:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	695a      	ldr	r2, [r3, #20]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068ce:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80068d0:	2300      	movs	r3, #0
 80068d2:	e000      	b.n	80068d6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80068d4:	2302      	movs	r3, #2
  }
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3718      	adds	r7, #24
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	08006951 	.word	0x08006951
 80068e4:	080069b9 	.word	0x080069b9
 80068e8:	080069d5 	.word	0x080069d5

080068ec <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800691c:	2300      	movs	r3, #0
 800691e:	60fb      	str	r3, [r7, #12]
 8006920:	2300      	movs	r3, #0
 8006922:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800692a:	b2db      	uxtb	r3, r3
 800692c:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006934:	b2db      	uxtb	r3, r3
 8006936:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	b2da      	uxtb	r2, r3
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	b2db      	uxtb	r3, r3
 8006940:	4313      	orrs	r3, r2
 8006942:	b2db      	uxtb	r3, r3
}
 8006944:	4618      	mov	r0, r3
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006968:	2b00      	cmp	r3, #0
 800696a:	d11e      	bne.n	80069aa <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68da      	ldr	r2, [r3, #12]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006980:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	695a      	ldr	r2, [r3, #20]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f022 0201 	bic.w	r2, r2, #1
 8006990:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	695a      	ldr	r2, [r3, #20]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069a0:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2220      	movs	r2, #32
 80069a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f7fb f844 	bl	8001a38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069b0:	bf00      	nop
 80069b2:	3710      	adds	r7, #16
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f7ff ff90 	bl	80068ec <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069cc:	bf00      	nop
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80069dc:	2300      	movs	r3, #0
 80069de:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	695b      	ldr	r3, [r3, #20]
 80069ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f0:	2b80      	cmp	r3, #128	; 0x80
 80069f2:	bf0c      	ite	eq
 80069f4:	2301      	moveq	r3, #1
 80069f6:	2300      	movne	r3, #0
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b21      	cmp	r3, #33	; 0x21
 8006a06:	d108      	bne.n	8006a1a <UART_DMAError+0x46>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d005      	beq.n	8006a1a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2200      	movs	r2, #0
 8006a12:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006a14:	68b8      	ldr	r0, [r7, #8]
 8006a16:	f000 f871 	bl	8006afc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	695b      	ldr	r3, [r3, #20]
 8006a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a24:	2b40      	cmp	r3, #64	; 0x40
 8006a26:	bf0c      	ite	eq
 8006a28:	2301      	moveq	r3, #1
 8006a2a:	2300      	movne	r3, #0
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b22      	cmp	r3, #34	; 0x22
 8006a3a:	d108      	bne.n	8006a4e <UART_DMAError+0x7a>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d005      	beq.n	8006a4e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	2200      	movs	r2, #0
 8006a46:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006a48:	68b8      	ldr	r0, [r7, #8]
 8006a4a:	f000 f86d 	bl	8006b28 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a52:	f043 0210 	orr.w	r2, r3, #16
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a5a:	68b8      	ldr	r0, [r7, #8]
 8006a5c:	f7ff ff50 	bl	8006900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a60:	bf00      	nop
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	603b      	str	r3, [r7, #0]
 8006a74:	4613      	mov	r3, r2
 8006a76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a78:	e02c      	b.n	8006ad4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a80:	d028      	beq.n	8006ad4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d007      	beq.n	8006a98 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a88:	f7fc fc58 	bl	800333c <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d21d      	bcs.n	8006ad4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006aa6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	695a      	ldr	r2, [r3, #20]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f022 0201 	bic.w	r2, r2, #1
 8006ab6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2220      	movs	r2, #32
 8006abc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e00f      	b.n	8006af4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	4013      	ands	r3, r2
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	bf0c      	ite	eq
 8006ae4:	2301      	moveq	r3, #1
 8006ae6:	2300      	movne	r3, #0
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	461a      	mov	r2, r3
 8006aec:	79fb      	ldrb	r3, [r7, #7]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d0c3      	beq.n	8006a7a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68da      	ldr	r2, [r3, #12]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006b12:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2220      	movs	r2, #32
 8006b18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68da      	ldr	r2, [r3, #12]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b3e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	695a      	ldr	r2, [r3, #20]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f022 0201 	bic.w	r2, r2, #1
 8006b4e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2220      	movs	r2, #32
 8006b54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b68:	b085      	sub	sp, #20
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	68da      	ldr	r2, [r3, #12]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	430a      	orrs	r2, r1
 8006b82:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	689a      	ldr	r2, [r3, #8]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	431a      	orrs	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	431a      	orrs	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006ba6:	f023 030c 	bic.w	r3, r3, #12
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	6812      	ldr	r2, [r2, #0]
 8006bae:	68f9      	ldr	r1, [r7, #12]
 8006bb0:	430b      	orrs	r3, r1
 8006bb2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	699a      	ldr	r2, [r3, #24]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	430a      	orrs	r2, r1
 8006bc8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bd2:	f040 818b 	bne.w	8006eec <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4ac1      	ldr	r2, [pc, #772]	; (8006ee0 <UART_SetConfig+0x37c>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d005      	beq.n	8006bec <UART_SetConfig+0x88>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4abf      	ldr	r2, [pc, #764]	; (8006ee4 <UART_SetConfig+0x380>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	f040 80bd 	bne.w	8006d66 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006bec:	f7fe f994 	bl	8004f18 <HAL_RCC_GetPCLK2Freq>
 8006bf0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	461d      	mov	r5, r3
 8006bf6:	f04f 0600 	mov.w	r6, #0
 8006bfa:	46a8      	mov	r8, r5
 8006bfc:	46b1      	mov	r9, r6
 8006bfe:	eb18 0308 	adds.w	r3, r8, r8
 8006c02:	eb49 0409 	adc.w	r4, r9, r9
 8006c06:	4698      	mov	r8, r3
 8006c08:	46a1      	mov	r9, r4
 8006c0a:	eb18 0805 	adds.w	r8, r8, r5
 8006c0e:	eb49 0906 	adc.w	r9, r9, r6
 8006c12:	f04f 0100 	mov.w	r1, #0
 8006c16:	f04f 0200 	mov.w	r2, #0
 8006c1a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006c1e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006c22:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006c26:	4688      	mov	r8, r1
 8006c28:	4691      	mov	r9, r2
 8006c2a:	eb18 0005 	adds.w	r0, r8, r5
 8006c2e:	eb49 0106 	adc.w	r1, r9, r6
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	461d      	mov	r5, r3
 8006c38:	f04f 0600 	mov.w	r6, #0
 8006c3c:	196b      	adds	r3, r5, r5
 8006c3e:	eb46 0406 	adc.w	r4, r6, r6
 8006c42:	461a      	mov	r2, r3
 8006c44:	4623      	mov	r3, r4
 8006c46:	f7f9 ffcb 	bl	8000be0 <__aeabi_uldivmod>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	460c      	mov	r4, r1
 8006c4e:	461a      	mov	r2, r3
 8006c50:	4ba5      	ldr	r3, [pc, #660]	; (8006ee8 <UART_SetConfig+0x384>)
 8006c52:	fba3 2302 	umull	r2, r3, r3, r2
 8006c56:	095b      	lsrs	r3, r3, #5
 8006c58:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	461d      	mov	r5, r3
 8006c60:	f04f 0600 	mov.w	r6, #0
 8006c64:	46a9      	mov	r9, r5
 8006c66:	46b2      	mov	sl, r6
 8006c68:	eb19 0309 	adds.w	r3, r9, r9
 8006c6c:	eb4a 040a 	adc.w	r4, sl, sl
 8006c70:	4699      	mov	r9, r3
 8006c72:	46a2      	mov	sl, r4
 8006c74:	eb19 0905 	adds.w	r9, r9, r5
 8006c78:	eb4a 0a06 	adc.w	sl, sl, r6
 8006c7c:	f04f 0100 	mov.w	r1, #0
 8006c80:	f04f 0200 	mov.w	r2, #0
 8006c84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c90:	4689      	mov	r9, r1
 8006c92:	4692      	mov	sl, r2
 8006c94:	eb19 0005 	adds.w	r0, r9, r5
 8006c98:	eb4a 0106 	adc.w	r1, sl, r6
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	461d      	mov	r5, r3
 8006ca2:	f04f 0600 	mov.w	r6, #0
 8006ca6:	196b      	adds	r3, r5, r5
 8006ca8:	eb46 0406 	adc.w	r4, r6, r6
 8006cac:	461a      	mov	r2, r3
 8006cae:	4623      	mov	r3, r4
 8006cb0:	f7f9 ff96 	bl	8000be0 <__aeabi_uldivmod>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	460c      	mov	r4, r1
 8006cb8:	461a      	mov	r2, r3
 8006cba:	4b8b      	ldr	r3, [pc, #556]	; (8006ee8 <UART_SetConfig+0x384>)
 8006cbc:	fba3 1302 	umull	r1, r3, r3, r2
 8006cc0:	095b      	lsrs	r3, r3, #5
 8006cc2:	2164      	movs	r1, #100	; 0x64
 8006cc4:	fb01 f303 	mul.w	r3, r1, r3
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	00db      	lsls	r3, r3, #3
 8006ccc:	3332      	adds	r3, #50	; 0x32
 8006cce:	4a86      	ldr	r2, [pc, #536]	; (8006ee8 <UART_SetConfig+0x384>)
 8006cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd4:	095b      	lsrs	r3, r3, #5
 8006cd6:	005b      	lsls	r3, r3, #1
 8006cd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006cdc:	4498      	add	r8, r3
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	461d      	mov	r5, r3
 8006ce2:	f04f 0600 	mov.w	r6, #0
 8006ce6:	46a9      	mov	r9, r5
 8006ce8:	46b2      	mov	sl, r6
 8006cea:	eb19 0309 	adds.w	r3, r9, r9
 8006cee:	eb4a 040a 	adc.w	r4, sl, sl
 8006cf2:	4699      	mov	r9, r3
 8006cf4:	46a2      	mov	sl, r4
 8006cf6:	eb19 0905 	adds.w	r9, r9, r5
 8006cfa:	eb4a 0a06 	adc.w	sl, sl, r6
 8006cfe:	f04f 0100 	mov.w	r1, #0
 8006d02:	f04f 0200 	mov.w	r2, #0
 8006d06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d12:	4689      	mov	r9, r1
 8006d14:	4692      	mov	sl, r2
 8006d16:	eb19 0005 	adds.w	r0, r9, r5
 8006d1a:	eb4a 0106 	adc.w	r1, sl, r6
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	461d      	mov	r5, r3
 8006d24:	f04f 0600 	mov.w	r6, #0
 8006d28:	196b      	adds	r3, r5, r5
 8006d2a:	eb46 0406 	adc.w	r4, r6, r6
 8006d2e:	461a      	mov	r2, r3
 8006d30:	4623      	mov	r3, r4
 8006d32:	f7f9 ff55 	bl	8000be0 <__aeabi_uldivmod>
 8006d36:	4603      	mov	r3, r0
 8006d38:	460c      	mov	r4, r1
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	4b6a      	ldr	r3, [pc, #424]	; (8006ee8 <UART_SetConfig+0x384>)
 8006d3e:	fba3 1302 	umull	r1, r3, r3, r2
 8006d42:	095b      	lsrs	r3, r3, #5
 8006d44:	2164      	movs	r1, #100	; 0x64
 8006d46:	fb01 f303 	mul.w	r3, r1, r3
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	00db      	lsls	r3, r3, #3
 8006d4e:	3332      	adds	r3, #50	; 0x32
 8006d50:	4a65      	ldr	r2, [pc, #404]	; (8006ee8 <UART_SetConfig+0x384>)
 8006d52:	fba2 2303 	umull	r2, r3, r2, r3
 8006d56:	095b      	lsrs	r3, r3, #5
 8006d58:	f003 0207 	and.w	r2, r3, #7
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4442      	add	r2, r8
 8006d62:	609a      	str	r2, [r3, #8]
 8006d64:	e26f      	b.n	8007246 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d66:	f7fe f8c3 	bl	8004ef0 <HAL_RCC_GetPCLK1Freq>
 8006d6a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	461d      	mov	r5, r3
 8006d70:	f04f 0600 	mov.w	r6, #0
 8006d74:	46a8      	mov	r8, r5
 8006d76:	46b1      	mov	r9, r6
 8006d78:	eb18 0308 	adds.w	r3, r8, r8
 8006d7c:	eb49 0409 	adc.w	r4, r9, r9
 8006d80:	4698      	mov	r8, r3
 8006d82:	46a1      	mov	r9, r4
 8006d84:	eb18 0805 	adds.w	r8, r8, r5
 8006d88:	eb49 0906 	adc.w	r9, r9, r6
 8006d8c:	f04f 0100 	mov.w	r1, #0
 8006d90:	f04f 0200 	mov.w	r2, #0
 8006d94:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006d98:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006d9c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006da0:	4688      	mov	r8, r1
 8006da2:	4691      	mov	r9, r2
 8006da4:	eb18 0005 	adds.w	r0, r8, r5
 8006da8:	eb49 0106 	adc.w	r1, r9, r6
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	461d      	mov	r5, r3
 8006db2:	f04f 0600 	mov.w	r6, #0
 8006db6:	196b      	adds	r3, r5, r5
 8006db8:	eb46 0406 	adc.w	r4, r6, r6
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	4623      	mov	r3, r4
 8006dc0:	f7f9 ff0e 	bl	8000be0 <__aeabi_uldivmod>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	460c      	mov	r4, r1
 8006dc8:	461a      	mov	r2, r3
 8006dca:	4b47      	ldr	r3, [pc, #284]	; (8006ee8 <UART_SetConfig+0x384>)
 8006dcc:	fba3 2302 	umull	r2, r3, r3, r2
 8006dd0:	095b      	lsrs	r3, r3, #5
 8006dd2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	461d      	mov	r5, r3
 8006dda:	f04f 0600 	mov.w	r6, #0
 8006dde:	46a9      	mov	r9, r5
 8006de0:	46b2      	mov	sl, r6
 8006de2:	eb19 0309 	adds.w	r3, r9, r9
 8006de6:	eb4a 040a 	adc.w	r4, sl, sl
 8006dea:	4699      	mov	r9, r3
 8006dec:	46a2      	mov	sl, r4
 8006dee:	eb19 0905 	adds.w	r9, r9, r5
 8006df2:	eb4a 0a06 	adc.w	sl, sl, r6
 8006df6:	f04f 0100 	mov.w	r1, #0
 8006dfa:	f04f 0200 	mov.w	r2, #0
 8006dfe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e0a:	4689      	mov	r9, r1
 8006e0c:	4692      	mov	sl, r2
 8006e0e:	eb19 0005 	adds.w	r0, r9, r5
 8006e12:	eb4a 0106 	adc.w	r1, sl, r6
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	461d      	mov	r5, r3
 8006e1c:	f04f 0600 	mov.w	r6, #0
 8006e20:	196b      	adds	r3, r5, r5
 8006e22:	eb46 0406 	adc.w	r4, r6, r6
 8006e26:	461a      	mov	r2, r3
 8006e28:	4623      	mov	r3, r4
 8006e2a:	f7f9 fed9 	bl	8000be0 <__aeabi_uldivmod>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	460c      	mov	r4, r1
 8006e32:	461a      	mov	r2, r3
 8006e34:	4b2c      	ldr	r3, [pc, #176]	; (8006ee8 <UART_SetConfig+0x384>)
 8006e36:	fba3 1302 	umull	r1, r3, r3, r2
 8006e3a:	095b      	lsrs	r3, r3, #5
 8006e3c:	2164      	movs	r1, #100	; 0x64
 8006e3e:	fb01 f303 	mul.w	r3, r1, r3
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	00db      	lsls	r3, r3, #3
 8006e46:	3332      	adds	r3, #50	; 0x32
 8006e48:	4a27      	ldr	r2, [pc, #156]	; (8006ee8 <UART_SetConfig+0x384>)
 8006e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e4e:	095b      	lsrs	r3, r3, #5
 8006e50:	005b      	lsls	r3, r3, #1
 8006e52:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e56:	4498      	add	r8, r3
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	461d      	mov	r5, r3
 8006e5c:	f04f 0600 	mov.w	r6, #0
 8006e60:	46a9      	mov	r9, r5
 8006e62:	46b2      	mov	sl, r6
 8006e64:	eb19 0309 	adds.w	r3, r9, r9
 8006e68:	eb4a 040a 	adc.w	r4, sl, sl
 8006e6c:	4699      	mov	r9, r3
 8006e6e:	46a2      	mov	sl, r4
 8006e70:	eb19 0905 	adds.w	r9, r9, r5
 8006e74:	eb4a 0a06 	adc.w	sl, sl, r6
 8006e78:	f04f 0100 	mov.w	r1, #0
 8006e7c:	f04f 0200 	mov.w	r2, #0
 8006e80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e8c:	4689      	mov	r9, r1
 8006e8e:	4692      	mov	sl, r2
 8006e90:	eb19 0005 	adds.w	r0, r9, r5
 8006e94:	eb4a 0106 	adc.w	r1, sl, r6
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	461d      	mov	r5, r3
 8006e9e:	f04f 0600 	mov.w	r6, #0
 8006ea2:	196b      	adds	r3, r5, r5
 8006ea4:	eb46 0406 	adc.w	r4, r6, r6
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	4623      	mov	r3, r4
 8006eac:	f7f9 fe98 	bl	8000be0 <__aeabi_uldivmod>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	460c      	mov	r4, r1
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	4b0c      	ldr	r3, [pc, #48]	; (8006ee8 <UART_SetConfig+0x384>)
 8006eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8006ebc:	095b      	lsrs	r3, r3, #5
 8006ebe:	2164      	movs	r1, #100	; 0x64
 8006ec0:	fb01 f303 	mul.w	r3, r1, r3
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	00db      	lsls	r3, r3, #3
 8006ec8:	3332      	adds	r3, #50	; 0x32
 8006eca:	4a07      	ldr	r2, [pc, #28]	; (8006ee8 <UART_SetConfig+0x384>)
 8006ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed0:	095b      	lsrs	r3, r3, #5
 8006ed2:	f003 0207 	and.w	r2, r3, #7
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4442      	add	r2, r8
 8006edc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006ede:	e1b2      	b.n	8007246 <UART_SetConfig+0x6e2>
 8006ee0:	40011000 	.word	0x40011000
 8006ee4:	40011400 	.word	0x40011400
 8006ee8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4ad7      	ldr	r2, [pc, #860]	; (8007250 <UART_SetConfig+0x6ec>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d005      	beq.n	8006f02 <UART_SetConfig+0x39e>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4ad6      	ldr	r2, [pc, #856]	; (8007254 <UART_SetConfig+0x6f0>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	f040 80d1 	bne.w	80070a4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f02:	f7fe f809 	bl	8004f18 <HAL_RCC_GetPCLK2Freq>
 8006f06:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	469a      	mov	sl, r3
 8006f0c:	f04f 0b00 	mov.w	fp, #0
 8006f10:	46d0      	mov	r8, sl
 8006f12:	46d9      	mov	r9, fp
 8006f14:	eb18 0308 	adds.w	r3, r8, r8
 8006f18:	eb49 0409 	adc.w	r4, r9, r9
 8006f1c:	4698      	mov	r8, r3
 8006f1e:	46a1      	mov	r9, r4
 8006f20:	eb18 080a 	adds.w	r8, r8, sl
 8006f24:	eb49 090b 	adc.w	r9, r9, fp
 8006f28:	f04f 0100 	mov.w	r1, #0
 8006f2c:	f04f 0200 	mov.w	r2, #0
 8006f30:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006f34:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006f38:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006f3c:	4688      	mov	r8, r1
 8006f3e:	4691      	mov	r9, r2
 8006f40:	eb1a 0508 	adds.w	r5, sl, r8
 8006f44:	eb4b 0609 	adc.w	r6, fp, r9
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	f04f 0200 	mov.w	r2, #0
 8006f52:	f04f 0300 	mov.w	r3, #0
 8006f56:	f04f 0400 	mov.w	r4, #0
 8006f5a:	0094      	lsls	r4, r2, #2
 8006f5c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f60:	008b      	lsls	r3, r1, #2
 8006f62:	461a      	mov	r2, r3
 8006f64:	4623      	mov	r3, r4
 8006f66:	4628      	mov	r0, r5
 8006f68:	4631      	mov	r1, r6
 8006f6a:	f7f9 fe39 	bl	8000be0 <__aeabi_uldivmod>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	460c      	mov	r4, r1
 8006f72:	461a      	mov	r2, r3
 8006f74:	4bb8      	ldr	r3, [pc, #736]	; (8007258 <UART_SetConfig+0x6f4>)
 8006f76:	fba3 2302 	umull	r2, r3, r3, r2
 8006f7a:	095b      	lsrs	r3, r3, #5
 8006f7c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	469b      	mov	fp, r3
 8006f84:	f04f 0c00 	mov.w	ip, #0
 8006f88:	46d9      	mov	r9, fp
 8006f8a:	46e2      	mov	sl, ip
 8006f8c:	eb19 0309 	adds.w	r3, r9, r9
 8006f90:	eb4a 040a 	adc.w	r4, sl, sl
 8006f94:	4699      	mov	r9, r3
 8006f96:	46a2      	mov	sl, r4
 8006f98:	eb19 090b 	adds.w	r9, r9, fp
 8006f9c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006fa0:	f04f 0100 	mov.w	r1, #0
 8006fa4:	f04f 0200 	mov.w	r2, #0
 8006fa8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006fb0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006fb4:	4689      	mov	r9, r1
 8006fb6:	4692      	mov	sl, r2
 8006fb8:	eb1b 0509 	adds.w	r5, fp, r9
 8006fbc:	eb4c 060a 	adc.w	r6, ip, sl
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	f04f 0200 	mov.w	r2, #0
 8006fca:	f04f 0300 	mov.w	r3, #0
 8006fce:	f04f 0400 	mov.w	r4, #0
 8006fd2:	0094      	lsls	r4, r2, #2
 8006fd4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006fd8:	008b      	lsls	r3, r1, #2
 8006fda:	461a      	mov	r2, r3
 8006fdc:	4623      	mov	r3, r4
 8006fde:	4628      	mov	r0, r5
 8006fe0:	4631      	mov	r1, r6
 8006fe2:	f7f9 fdfd 	bl	8000be0 <__aeabi_uldivmod>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	460c      	mov	r4, r1
 8006fea:	461a      	mov	r2, r3
 8006fec:	4b9a      	ldr	r3, [pc, #616]	; (8007258 <UART_SetConfig+0x6f4>)
 8006fee:	fba3 1302 	umull	r1, r3, r3, r2
 8006ff2:	095b      	lsrs	r3, r3, #5
 8006ff4:	2164      	movs	r1, #100	; 0x64
 8006ff6:	fb01 f303 	mul.w	r3, r1, r3
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	011b      	lsls	r3, r3, #4
 8006ffe:	3332      	adds	r3, #50	; 0x32
 8007000:	4a95      	ldr	r2, [pc, #596]	; (8007258 <UART_SetConfig+0x6f4>)
 8007002:	fba2 2303 	umull	r2, r3, r2, r3
 8007006:	095b      	lsrs	r3, r3, #5
 8007008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800700c:	4498      	add	r8, r3
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	469b      	mov	fp, r3
 8007012:	f04f 0c00 	mov.w	ip, #0
 8007016:	46d9      	mov	r9, fp
 8007018:	46e2      	mov	sl, ip
 800701a:	eb19 0309 	adds.w	r3, r9, r9
 800701e:	eb4a 040a 	adc.w	r4, sl, sl
 8007022:	4699      	mov	r9, r3
 8007024:	46a2      	mov	sl, r4
 8007026:	eb19 090b 	adds.w	r9, r9, fp
 800702a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800702e:	f04f 0100 	mov.w	r1, #0
 8007032:	f04f 0200 	mov.w	r2, #0
 8007036:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800703a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800703e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007042:	4689      	mov	r9, r1
 8007044:	4692      	mov	sl, r2
 8007046:	eb1b 0509 	adds.w	r5, fp, r9
 800704a:	eb4c 060a 	adc.w	r6, ip, sl
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	4619      	mov	r1, r3
 8007054:	f04f 0200 	mov.w	r2, #0
 8007058:	f04f 0300 	mov.w	r3, #0
 800705c:	f04f 0400 	mov.w	r4, #0
 8007060:	0094      	lsls	r4, r2, #2
 8007062:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007066:	008b      	lsls	r3, r1, #2
 8007068:	461a      	mov	r2, r3
 800706a:	4623      	mov	r3, r4
 800706c:	4628      	mov	r0, r5
 800706e:	4631      	mov	r1, r6
 8007070:	f7f9 fdb6 	bl	8000be0 <__aeabi_uldivmod>
 8007074:	4603      	mov	r3, r0
 8007076:	460c      	mov	r4, r1
 8007078:	461a      	mov	r2, r3
 800707a:	4b77      	ldr	r3, [pc, #476]	; (8007258 <UART_SetConfig+0x6f4>)
 800707c:	fba3 1302 	umull	r1, r3, r3, r2
 8007080:	095b      	lsrs	r3, r3, #5
 8007082:	2164      	movs	r1, #100	; 0x64
 8007084:	fb01 f303 	mul.w	r3, r1, r3
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	011b      	lsls	r3, r3, #4
 800708c:	3332      	adds	r3, #50	; 0x32
 800708e:	4a72      	ldr	r2, [pc, #456]	; (8007258 <UART_SetConfig+0x6f4>)
 8007090:	fba2 2303 	umull	r2, r3, r2, r3
 8007094:	095b      	lsrs	r3, r3, #5
 8007096:	f003 020f 	and.w	r2, r3, #15
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4442      	add	r2, r8
 80070a0:	609a      	str	r2, [r3, #8]
 80070a2:	e0d0      	b.n	8007246 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80070a4:	f7fd ff24 	bl	8004ef0 <HAL_RCC_GetPCLK1Freq>
 80070a8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	469a      	mov	sl, r3
 80070ae:	f04f 0b00 	mov.w	fp, #0
 80070b2:	46d0      	mov	r8, sl
 80070b4:	46d9      	mov	r9, fp
 80070b6:	eb18 0308 	adds.w	r3, r8, r8
 80070ba:	eb49 0409 	adc.w	r4, r9, r9
 80070be:	4698      	mov	r8, r3
 80070c0:	46a1      	mov	r9, r4
 80070c2:	eb18 080a 	adds.w	r8, r8, sl
 80070c6:	eb49 090b 	adc.w	r9, r9, fp
 80070ca:	f04f 0100 	mov.w	r1, #0
 80070ce:	f04f 0200 	mov.w	r2, #0
 80070d2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80070d6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80070da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80070de:	4688      	mov	r8, r1
 80070e0:	4691      	mov	r9, r2
 80070e2:	eb1a 0508 	adds.w	r5, sl, r8
 80070e6:	eb4b 0609 	adc.w	r6, fp, r9
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	4619      	mov	r1, r3
 80070f0:	f04f 0200 	mov.w	r2, #0
 80070f4:	f04f 0300 	mov.w	r3, #0
 80070f8:	f04f 0400 	mov.w	r4, #0
 80070fc:	0094      	lsls	r4, r2, #2
 80070fe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007102:	008b      	lsls	r3, r1, #2
 8007104:	461a      	mov	r2, r3
 8007106:	4623      	mov	r3, r4
 8007108:	4628      	mov	r0, r5
 800710a:	4631      	mov	r1, r6
 800710c:	f7f9 fd68 	bl	8000be0 <__aeabi_uldivmod>
 8007110:	4603      	mov	r3, r0
 8007112:	460c      	mov	r4, r1
 8007114:	461a      	mov	r2, r3
 8007116:	4b50      	ldr	r3, [pc, #320]	; (8007258 <UART_SetConfig+0x6f4>)
 8007118:	fba3 2302 	umull	r2, r3, r3, r2
 800711c:	095b      	lsrs	r3, r3, #5
 800711e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	469b      	mov	fp, r3
 8007126:	f04f 0c00 	mov.w	ip, #0
 800712a:	46d9      	mov	r9, fp
 800712c:	46e2      	mov	sl, ip
 800712e:	eb19 0309 	adds.w	r3, r9, r9
 8007132:	eb4a 040a 	adc.w	r4, sl, sl
 8007136:	4699      	mov	r9, r3
 8007138:	46a2      	mov	sl, r4
 800713a:	eb19 090b 	adds.w	r9, r9, fp
 800713e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007142:	f04f 0100 	mov.w	r1, #0
 8007146:	f04f 0200 	mov.w	r2, #0
 800714a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800714e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007152:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007156:	4689      	mov	r9, r1
 8007158:	4692      	mov	sl, r2
 800715a:	eb1b 0509 	adds.w	r5, fp, r9
 800715e:	eb4c 060a 	adc.w	r6, ip, sl
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	4619      	mov	r1, r3
 8007168:	f04f 0200 	mov.w	r2, #0
 800716c:	f04f 0300 	mov.w	r3, #0
 8007170:	f04f 0400 	mov.w	r4, #0
 8007174:	0094      	lsls	r4, r2, #2
 8007176:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800717a:	008b      	lsls	r3, r1, #2
 800717c:	461a      	mov	r2, r3
 800717e:	4623      	mov	r3, r4
 8007180:	4628      	mov	r0, r5
 8007182:	4631      	mov	r1, r6
 8007184:	f7f9 fd2c 	bl	8000be0 <__aeabi_uldivmod>
 8007188:	4603      	mov	r3, r0
 800718a:	460c      	mov	r4, r1
 800718c:	461a      	mov	r2, r3
 800718e:	4b32      	ldr	r3, [pc, #200]	; (8007258 <UART_SetConfig+0x6f4>)
 8007190:	fba3 1302 	umull	r1, r3, r3, r2
 8007194:	095b      	lsrs	r3, r3, #5
 8007196:	2164      	movs	r1, #100	; 0x64
 8007198:	fb01 f303 	mul.w	r3, r1, r3
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	011b      	lsls	r3, r3, #4
 80071a0:	3332      	adds	r3, #50	; 0x32
 80071a2:	4a2d      	ldr	r2, [pc, #180]	; (8007258 <UART_SetConfig+0x6f4>)
 80071a4:	fba2 2303 	umull	r2, r3, r2, r3
 80071a8:	095b      	lsrs	r3, r3, #5
 80071aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071ae:	4498      	add	r8, r3
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	469b      	mov	fp, r3
 80071b4:	f04f 0c00 	mov.w	ip, #0
 80071b8:	46d9      	mov	r9, fp
 80071ba:	46e2      	mov	sl, ip
 80071bc:	eb19 0309 	adds.w	r3, r9, r9
 80071c0:	eb4a 040a 	adc.w	r4, sl, sl
 80071c4:	4699      	mov	r9, r3
 80071c6:	46a2      	mov	sl, r4
 80071c8:	eb19 090b 	adds.w	r9, r9, fp
 80071cc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80071d0:	f04f 0100 	mov.w	r1, #0
 80071d4:	f04f 0200 	mov.w	r2, #0
 80071d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80071e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80071e4:	4689      	mov	r9, r1
 80071e6:	4692      	mov	sl, r2
 80071e8:	eb1b 0509 	adds.w	r5, fp, r9
 80071ec:	eb4c 060a 	adc.w	r6, ip, sl
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	4619      	mov	r1, r3
 80071f6:	f04f 0200 	mov.w	r2, #0
 80071fa:	f04f 0300 	mov.w	r3, #0
 80071fe:	f04f 0400 	mov.w	r4, #0
 8007202:	0094      	lsls	r4, r2, #2
 8007204:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007208:	008b      	lsls	r3, r1, #2
 800720a:	461a      	mov	r2, r3
 800720c:	4623      	mov	r3, r4
 800720e:	4628      	mov	r0, r5
 8007210:	4631      	mov	r1, r6
 8007212:	f7f9 fce5 	bl	8000be0 <__aeabi_uldivmod>
 8007216:	4603      	mov	r3, r0
 8007218:	460c      	mov	r4, r1
 800721a:	461a      	mov	r2, r3
 800721c:	4b0e      	ldr	r3, [pc, #56]	; (8007258 <UART_SetConfig+0x6f4>)
 800721e:	fba3 1302 	umull	r1, r3, r3, r2
 8007222:	095b      	lsrs	r3, r3, #5
 8007224:	2164      	movs	r1, #100	; 0x64
 8007226:	fb01 f303 	mul.w	r3, r1, r3
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	011b      	lsls	r3, r3, #4
 800722e:	3332      	adds	r3, #50	; 0x32
 8007230:	4a09      	ldr	r2, [pc, #36]	; (8007258 <UART_SetConfig+0x6f4>)
 8007232:	fba2 2303 	umull	r2, r3, r2, r3
 8007236:	095b      	lsrs	r3, r3, #5
 8007238:	f003 020f 	and.w	r2, r3, #15
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4442      	add	r2, r8
 8007242:	609a      	str	r2, [r3, #8]
}
 8007244:	e7ff      	b.n	8007246 <UART_SetConfig+0x6e2>
 8007246:	bf00      	nop
 8007248:	3714      	adds	r7, #20
 800724a:	46bd      	mov	sp, r7
 800724c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007250:	40011000 	.word	0x40011000
 8007254:	40011400 	.word	0x40011400
 8007258:	51eb851f 	.word	0x51eb851f

0800725c <__errno>:
 800725c:	4b01      	ldr	r3, [pc, #4]	; (8007264 <__errno+0x8>)
 800725e:	6818      	ldr	r0, [r3, #0]
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	2000000c 	.word	0x2000000c

08007268 <__libc_init_array>:
 8007268:	b570      	push	{r4, r5, r6, lr}
 800726a:	4e0d      	ldr	r6, [pc, #52]	; (80072a0 <__libc_init_array+0x38>)
 800726c:	4c0d      	ldr	r4, [pc, #52]	; (80072a4 <__libc_init_array+0x3c>)
 800726e:	1ba4      	subs	r4, r4, r6
 8007270:	10a4      	asrs	r4, r4, #2
 8007272:	2500      	movs	r5, #0
 8007274:	42a5      	cmp	r5, r4
 8007276:	d109      	bne.n	800728c <__libc_init_array+0x24>
 8007278:	4e0b      	ldr	r6, [pc, #44]	; (80072a8 <__libc_init_array+0x40>)
 800727a:	4c0c      	ldr	r4, [pc, #48]	; (80072ac <__libc_init_array+0x44>)
 800727c:	f002 f9f6 	bl	800966c <_init>
 8007280:	1ba4      	subs	r4, r4, r6
 8007282:	10a4      	asrs	r4, r4, #2
 8007284:	2500      	movs	r5, #0
 8007286:	42a5      	cmp	r5, r4
 8007288:	d105      	bne.n	8007296 <__libc_init_array+0x2e>
 800728a:	bd70      	pop	{r4, r5, r6, pc}
 800728c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007290:	4798      	blx	r3
 8007292:	3501      	adds	r5, #1
 8007294:	e7ee      	b.n	8007274 <__libc_init_array+0xc>
 8007296:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800729a:	4798      	blx	r3
 800729c:	3501      	adds	r5, #1
 800729e:	e7f2      	b.n	8007286 <__libc_init_array+0x1e>
 80072a0:	08009948 	.word	0x08009948
 80072a4:	08009948 	.word	0x08009948
 80072a8:	08009948 	.word	0x08009948
 80072ac:	0800994c 	.word	0x0800994c

080072b0 <memset>:
 80072b0:	4402      	add	r2, r0
 80072b2:	4603      	mov	r3, r0
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d100      	bne.n	80072ba <memset+0xa>
 80072b8:	4770      	bx	lr
 80072ba:	f803 1b01 	strb.w	r1, [r3], #1
 80072be:	e7f9      	b.n	80072b4 <memset+0x4>

080072c0 <__cvt>:
 80072c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072c4:	ec55 4b10 	vmov	r4, r5, d0
 80072c8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80072ca:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80072ce:	2d00      	cmp	r5, #0
 80072d0:	460e      	mov	r6, r1
 80072d2:	4691      	mov	r9, r2
 80072d4:	4619      	mov	r1, r3
 80072d6:	bfb8      	it	lt
 80072d8:	4622      	movlt	r2, r4
 80072da:	462b      	mov	r3, r5
 80072dc:	f027 0720 	bic.w	r7, r7, #32
 80072e0:	bfbb      	ittet	lt
 80072e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80072e6:	461d      	movlt	r5, r3
 80072e8:	2300      	movge	r3, #0
 80072ea:	232d      	movlt	r3, #45	; 0x2d
 80072ec:	bfb8      	it	lt
 80072ee:	4614      	movlt	r4, r2
 80072f0:	2f46      	cmp	r7, #70	; 0x46
 80072f2:	700b      	strb	r3, [r1, #0]
 80072f4:	d004      	beq.n	8007300 <__cvt+0x40>
 80072f6:	2f45      	cmp	r7, #69	; 0x45
 80072f8:	d100      	bne.n	80072fc <__cvt+0x3c>
 80072fa:	3601      	adds	r6, #1
 80072fc:	2102      	movs	r1, #2
 80072fe:	e000      	b.n	8007302 <__cvt+0x42>
 8007300:	2103      	movs	r1, #3
 8007302:	ab03      	add	r3, sp, #12
 8007304:	9301      	str	r3, [sp, #4]
 8007306:	ab02      	add	r3, sp, #8
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	4632      	mov	r2, r6
 800730c:	4653      	mov	r3, sl
 800730e:	ec45 4b10 	vmov	d0, r4, r5
 8007312:	f000 fd85 	bl	8007e20 <_dtoa_r>
 8007316:	2f47      	cmp	r7, #71	; 0x47
 8007318:	4680      	mov	r8, r0
 800731a:	d102      	bne.n	8007322 <__cvt+0x62>
 800731c:	f019 0f01 	tst.w	r9, #1
 8007320:	d026      	beq.n	8007370 <__cvt+0xb0>
 8007322:	2f46      	cmp	r7, #70	; 0x46
 8007324:	eb08 0906 	add.w	r9, r8, r6
 8007328:	d111      	bne.n	800734e <__cvt+0x8e>
 800732a:	f898 3000 	ldrb.w	r3, [r8]
 800732e:	2b30      	cmp	r3, #48	; 0x30
 8007330:	d10a      	bne.n	8007348 <__cvt+0x88>
 8007332:	2200      	movs	r2, #0
 8007334:	2300      	movs	r3, #0
 8007336:	4620      	mov	r0, r4
 8007338:	4629      	mov	r1, r5
 800733a:	f7f9 fb91 	bl	8000a60 <__aeabi_dcmpeq>
 800733e:	b918      	cbnz	r0, 8007348 <__cvt+0x88>
 8007340:	f1c6 0601 	rsb	r6, r6, #1
 8007344:	f8ca 6000 	str.w	r6, [sl]
 8007348:	f8da 3000 	ldr.w	r3, [sl]
 800734c:	4499      	add	r9, r3
 800734e:	2200      	movs	r2, #0
 8007350:	2300      	movs	r3, #0
 8007352:	4620      	mov	r0, r4
 8007354:	4629      	mov	r1, r5
 8007356:	f7f9 fb83 	bl	8000a60 <__aeabi_dcmpeq>
 800735a:	b938      	cbnz	r0, 800736c <__cvt+0xac>
 800735c:	2230      	movs	r2, #48	; 0x30
 800735e:	9b03      	ldr	r3, [sp, #12]
 8007360:	454b      	cmp	r3, r9
 8007362:	d205      	bcs.n	8007370 <__cvt+0xb0>
 8007364:	1c59      	adds	r1, r3, #1
 8007366:	9103      	str	r1, [sp, #12]
 8007368:	701a      	strb	r2, [r3, #0]
 800736a:	e7f8      	b.n	800735e <__cvt+0x9e>
 800736c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007370:	9b03      	ldr	r3, [sp, #12]
 8007372:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007374:	eba3 0308 	sub.w	r3, r3, r8
 8007378:	4640      	mov	r0, r8
 800737a:	6013      	str	r3, [r2, #0]
 800737c:	b004      	add	sp, #16
 800737e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007382 <__exponent>:
 8007382:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007384:	2900      	cmp	r1, #0
 8007386:	4604      	mov	r4, r0
 8007388:	bfba      	itte	lt
 800738a:	4249      	neglt	r1, r1
 800738c:	232d      	movlt	r3, #45	; 0x2d
 800738e:	232b      	movge	r3, #43	; 0x2b
 8007390:	2909      	cmp	r1, #9
 8007392:	f804 2b02 	strb.w	r2, [r4], #2
 8007396:	7043      	strb	r3, [r0, #1]
 8007398:	dd20      	ble.n	80073dc <__exponent+0x5a>
 800739a:	f10d 0307 	add.w	r3, sp, #7
 800739e:	461f      	mov	r7, r3
 80073a0:	260a      	movs	r6, #10
 80073a2:	fb91 f5f6 	sdiv	r5, r1, r6
 80073a6:	fb06 1115 	mls	r1, r6, r5, r1
 80073aa:	3130      	adds	r1, #48	; 0x30
 80073ac:	2d09      	cmp	r5, #9
 80073ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 80073b2:	f103 32ff 	add.w	r2, r3, #4294967295
 80073b6:	4629      	mov	r1, r5
 80073b8:	dc09      	bgt.n	80073ce <__exponent+0x4c>
 80073ba:	3130      	adds	r1, #48	; 0x30
 80073bc:	3b02      	subs	r3, #2
 80073be:	f802 1c01 	strb.w	r1, [r2, #-1]
 80073c2:	42bb      	cmp	r3, r7
 80073c4:	4622      	mov	r2, r4
 80073c6:	d304      	bcc.n	80073d2 <__exponent+0x50>
 80073c8:	1a10      	subs	r0, r2, r0
 80073ca:	b003      	add	sp, #12
 80073cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073ce:	4613      	mov	r3, r2
 80073d0:	e7e7      	b.n	80073a2 <__exponent+0x20>
 80073d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073d6:	f804 2b01 	strb.w	r2, [r4], #1
 80073da:	e7f2      	b.n	80073c2 <__exponent+0x40>
 80073dc:	2330      	movs	r3, #48	; 0x30
 80073de:	4419      	add	r1, r3
 80073e0:	7083      	strb	r3, [r0, #2]
 80073e2:	1d02      	adds	r2, r0, #4
 80073e4:	70c1      	strb	r1, [r0, #3]
 80073e6:	e7ef      	b.n	80073c8 <__exponent+0x46>

080073e8 <_printf_float>:
 80073e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ec:	b08d      	sub	sp, #52	; 0x34
 80073ee:	460c      	mov	r4, r1
 80073f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80073f4:	4616      	mov	r6, r2
 80073f6:	461f      	mov	r7, r3
 80073f8:	4605      	mov	r5, r0
 80073fa:	f001 fc43 	bl	8008c84 <_localeconv_r>
 80073fe:	6803      	ldr	r3, [r0, #0]
 8007400:	9304      	str	r3, [sp, #16]
 8007402:	4618      	mov	r0, r3
 8007404:	f7f8 ff00 	bl	8000208 <strlen>
 8007408:	2300      	movs	r3, #0
 800740a:	930a      	str	r3, [sp, #40]	; 0x28
 800740c:	f8d8 3000 	ldr.w	r3, [r8]
 8007410:	9005      	str	r0, [sp, #20]
 8007412:	3307      	adds	r3, #7
 8007414:	f023 0307 	bic.w	r3, r3, #7
 8007418:	f103 0208 	add.w	r2, r3, #8
 800741c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007420:	f8d4 b000 	ldr.w	fp, [r4]
 8007424:	f8c8 2000 	str.w	r2, [r8]
 8007428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007430:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007434:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007438:	9307      	str	r3, [sp, #28]
 800743a:	f8cd 8018 	str.w	r8, [sp, #24]
 800743e:	f04f 32ff 	mov.w	r2, #4294967295
 8007442:	4ba7      	ldr	r3, [pc, #668]	; (80076e0 <_printf_float+0x2f8>)
 8007444:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007448:	f7f9 fb3c 	bl	8000ac4 <__aeabi_dcmpun>
 800744c:	bb70      	cbnz	r0, 80074ac <_printf_float+0xc4>
 800744e:	f04f 32ff 	mov.w	r2, #4294967295
 8007452:	4ba3      	ldr	r3, [pc, #652]	; (80076e0 <_printf_float+0x2f8>)
 8007454:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007458:	f7f9 fb16 	bl	8000a88 <__aeabi_dcmple>
 800745c:	bb30      	cbnz	r0, 80074ac <_printf_float+0xc4>
 800745e:	2200      	movs	r2, #0
 8007460:	2300      	movs	r3, #0
 8007462:	4640      	mov	r0, r8
 8007464:	4649      	mov	r1, r9
 8007466:	f7f9 fb05 	bl	8000a74 <__aeabi_dcmplt>
 800746a:	b110      	cbz	r0, 8007472 <_printf_float+0x8a>
 800746c:	232d      	movs	r3, #45	; 0x2d
 800746e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007472:	4a9c      	ldr	r2, [pc, #624]	; (80076e4 <_printf_float+0x2fc>)
 8007474:	4b9c      	ldr	r3, [pc, #624]	; (80076e8 <_printf_float+0x300>)
 8007476:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800747a:	bf8c      	ite	hi
 800747c:	4690      	movhi	r8, r2
 800747e:	4698      	movls	r8, r3
 8007480:	2303      	movs	r3, #3
 8007482:	f02b 0204 	bic.w	r2, fp, #4
 8007486:	6123      	str	r3, [r4, #16]
 8007488:	6022      	str	r2, [r4, #0]
 800748a:	f04f 0900 	mov.w	r9, #0
 800748e:	9700      	str	r7, [sp, #0]
 8007490:	4633      	mov	r3, r6
 8007492:	aa0b      	add	r2, sp, #44	; 0x2c
 8007494:	4621      	mov	r1, r4
 8007496:	4628      	mov	r0, r5
 8007498:	f000 f9e6 	bl	8007868 <_printf_common>
 800749c:	3001      	adds	r0, #1
 800749e:	f040 808d 	bne.w	80075bc <_printf_float+0x1d4>
 80074a2:	f04f 30ff 	mov.w	r0, #4294967295
 80074a6:	b00d      	add	sp, #52	; 0x34
 80074a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ac:	4642      	mov	r2, r8
 80074ae:	464b      	mov	r3, r9
 80074b0:	4640      	mov	r0, r8
 80074b2:	4649      	mov	r1, r9
 80074b4:	f7f9 fb06 	bl	8000ac4 <__aeabi_dcmpun>
 80074b8:	b110      	cbz	r0, 80074c0 <_printf_float+0xd8>
 80074ba:	4a8c      	ldr	r2, [pc, #560]	; (80076ec <_printf_float+0x304>)
 80074bc:	4b8c      	ldr	r3, [pc, #560]	; (80076f0 <_printf_float+0x308>)
 80074be:	e7da      	b.n	8007476 <_printf_float+0x8e>
 80074c0:	6861      	ldr	r1, [r4, #4]
 80074c2:	1c4b      	adds	r3, r1, #1
 80074c4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80074c8:	a80a      	add	r0, sp, #40	; 0x28
 80074ca:	d13e      	bne.n	800754a <_printf_float+0x162>
 80074cc:	2306      	movs	r3, #6
 80074ce:	6063      	str	r3, [r4, #4]
 80074d0:	2300      	movs	r3, #0
 80074d2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80074d6:	ab09      	add	r3, sp, #36	; 0x24
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	ec49 8b10 	vmov	d0, r8, r9
 80074de:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80074e2:	6022      	str	r2, [r4, #0]
 80074e4:	f8cd a004 	str.w	sl, [sp, #4]
 80074e8:	6861      	ldr	r1, [r4, #4]
 80074ea:	4628      	mov	r0, r5
 80074ec:	f7ff fee8 	bl	80072c0 <__cvt>
 80074f0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80074f4:	2b47      	cmp	r3, #71	; 0x47
 80074f6:	4680      	mov	r8, r0
 80074f8:	d109      	bne.n	800750e <_printf_float+0x126>
 80074fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074fc:	1cd8      	adds	r0, r3, #3
 80074fe:	db02      	blt.n	8007506 <_printf_float+0x11e>
 8007500:	6862      	ldr	r2, [r4, #4]
 8007502:	4293      	cmp	r3, r2
 8007504:	dd47      	ble.n	8007596 <_printf_float+0x1ae>
 8007506:	f1aa 0a02 	sub.w	sl, sl, #2
 800750a:	fa5f fa8a 	uxtb.w	sl, sl
 800750e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007512:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007514:	d824      	bhi.n	8007560 <_printf_float+0x178>
 8007516:	3901      	subs	r1, #1
 8007518:	4652      	mov	r2, sl
 800751a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800751e:	9109      	str	r1, [sp, #36]	; 0x24
 8007520:	f7ff ff2f 	bl	8007382 <__exponent>
 8007524:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007526:	1813      	adds	r3, r2, r0
 8007528:	2a01      	cmp	r2, #1
 800752a:	4681      	mov	r9, r0
 800752c:	6123      	str	r3, [r4, #16]
 800752e:	dc02      	bgt.n	8007536 <_printf_float+0x14e>
 8007530:	6822      	ldr	r2, [r4, #0]
 8007532:	07d1      	lsls	r1, r2, #31
 8007534:	d501      	bpl.n	800753a <_printf_float+0x152>
 8007536:	3301      	adds	r3, #1
 8007538:	6123      	str	r3, [r4, #16]
 800753a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800753e:	2b00      	cmp	r3, #0
 8007540:	d0a5      	beq.n	800748e <_printf_float+0xa6>
 8007542:	232d      	movs	r3, #45	; 0x2d
 8007544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007548:	e7a1      	b.n	800748e <_printf_float+0xa6>
 800754a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800754e:	f000 8177 	beq.w	8007840 <_printf_float+0x458>
 8007552:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007556:	d1bb      	bne.n	80074d0 <_printf_float+0xe8>
 8007558:	2900      	cmp	r1, #0
 800755a:	d1b9      	bne.n	80074d0 <_printf_float+0xe8>
 800755c:	2301      	movs	r3, #1
 800755e:	e7b6      	b.n	80074ce <_printf_float+0xe6>
 8007560:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007564:	d119      	bne.n	800759a <_printf_float+0x1b2>
 8007566:	2900      	cmp	r1, #0
 8007568:	6863      	ldr	r3, [r4, #4]
 800756a:	dd0c      	ble.n	8007586 <_printf_float+0x19e>
 800756c:	6121      	str	r1, [r4, #16]
 800756e:	b913      	cbnz	r3, 8007576 <_printf_float+0x18e>
 8007570:	6822      	ldr	r2, [r4, #0]
 8007572:	07d2      	lsls	r2, r2, #31
 8007574:	d502      	bpl.n	800757c <_printf_float+0x194>
 8007576:	3301      	adds	r3, #1
 8007578:	440b      	add	r3, r1
 800757a:	6123      	str	r3, [r4, #16]
 800757c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800757e:	65a3      	str	r3, [r4, #88]	; 0x58
 8007580:	f04f 0900 	mov.w	r9, #0
 8007584:	e7d9      	b.n	800753a <_printf_float+0x152>
 8007586:	b913      	cbnz	r3, 800758e <_printf_float+0x1a6>
 8007588:	6822      	ldr	r2, [r4, #0]
 800758a:	07d0      	lsls	r0, r2, #31
 800758c:	d501      	bpl.n	8007592 <_printf_float+0x1aa>
 800758e:	3302      	adds	r3, #2
 8007590:	e7f3      	b.n	800757a <_printf_float+0x192>
 8007592:	2301      	movs	r3, #1
 8007594:	e7f1      	b.n	800757a <_printf_float+0x192>
 8007596:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800759a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800759e:	4293      	cmp	r3, r2
 80075a0:	db05      	blt.n	80075ae <_printf_float+0x1c6>
 80075a2:	6822      	ldr	r2, [r4, #0]
 80075a4:	6123      	str	r3, [r4, #16]
 80075a6:	07d1      	lsls	r1, r2, #31
 80075a8:	d5e8      	bpl.n	800757c <_printf_float+0x194>
 80075aa:	3301      	adds	r3, #1
 80075ac:	e7e5      	b.n	800757a <_printf_float+0x192>
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	bfd4      	ite	le
 80075b2:	f1c3 0302 	rsble	r3, r3, #2
 80075b6:	2301      	movgt	r3, #1
 80075b8:	4413      	add	r3, r2
 80075ba:	e7de      	b.n	800757a <_printf_float+0x192>
 80075bc:	6823      	ldr	r3, [r4, #0]
 80075be:	055a      	lsls	r2, r3, #21
 80075c0:	d407      	bmi.n	80075d2 <_printf_float+0x1ea>
 80075c2:	6923      	ldr	r3, [r4, #16]
 80075c4:	4642      	mov	r2, r8
 80075c6:	4631      	mov	r1, r6
 80075c8:	4628      	mov	r0, r5
 80075ca:	47b8      	blx	r7
 80075cc:	3001      	adds	r0, #1
 80075ce:	d12b      	bne.n	8007628 <_printf_float+0x240>
 80075d0:	e767      	b.n	80074a2 <_printf_float+0xba>
 80075d2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80075d6:	f240 80dc 	bls.w	8007792 <_printf_float+0x3aa>
 80075da:	2200      	movs	r2, #0
 80075dc:	2300      	movs	r3, #0
 80075de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075e2:	f7f9 fa3d 	bl	8000a60 <__aeabi_dcmpeq>
 80075e6:	2800      	cmp	r0, #0
 80075e8:	d033      	beq.n	8007652 <_printf_float+0x26a>
 80075ea:	2301      	movs	r3, #1
 80075ec:	4a41      	ldr	r2, [pc, #260]	; (80076f4 <_printf_float+0x30c>)
 80075ee:	4631      	mov	r1, r6
 80075f0:	4628      	mov	r0, r5
 80075f2:	47b8      	blx	r7
 80075f4:	3001      	adds	r0, #1
 80075f6:	f43f af54 	beq.w	80074a2 <_printf_float+0xba>
 80075fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075fe:	429a      	cmp	r2, r3
 8007600:	db02      	blt.n	8007608 <_printf_float+0x220>
 8007602:	6823      	ldr	r3, [r4, #0]
 8007604:	07d8      	lsls	r0, r3, #31
 8007606:	d50f      	bpl.n	8007628 <_printf_float+0x240>
 8007608:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800760c:	4631      	mov	r1, r6
 800760e:	4628      	mov	r0, r5
 8007610:	47b8      	blx	r7
 8007612:	3001      	adds	r0, #1
 8007614:	f43f af45 	beq.w	80074a2 <_printf_float+0xba>
 8007618:	f04f 0800 	mov.w	r8, #0
 800761c:	f104 091a 	add.w	r9, r4, #26
 8007620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007622:	3b01      	subs	r3, #1
 8007624:	4543      	cmp	r3, r8
 8007626:	dc09      	bgt.n	800763c <_printf_float+0x254>
 8007628:	6823      	ldr	r3, [r4, #0]
 800762a:	079b      	lsls	r3, r3, #30
 800762c:	f100 8103 	bmi.w	8007836 <_printf_float+0x44e>
 8007630:	68e0      	ldr	r0, [r4, #12]
 8007632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007634:	4298      	cmp	r0, r3
 8007636:	bfb8      	it	lt
 8007638:	4618      	movlt	r0, r3
 800763a:	e734      	b.n	80074a6 <_printf_float+0xbe>
 800763c:	2301      	movs	r3, #1
 800763e:	464a      	mov	r2, r9
 8007640:	4631      	mov	r1, r6
 8007642:	4628      	mov	r0, r5
 8007644:	47b8      	blx	r7
 8007646:	3001      	adds	r0, #1
 8007648:	f43f af2b 	beq.w	80074a2 <_printf_float+0xba>
 800764c:	f108 0801 	add.w	r8, r8, #1
 8007650:	e7e6      	b.n	8007620 <_printf_float+0x238>
 8007652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007654:	2b00      	cmp	r3, #0
 8007656:	dc2b      	bgt.n	80076b0 <_printf_float+0x2c8>
 8007658:	2301      	movs	r3, #1
 800765a:	4a26      	ldr	r2, [pc, #152]	; (80076f4 <_printf_float+0x30c>)
 800765c:	4631      	mov	r1, r6
 800765e:	4628      	mov	r0, r5
 8007660:	47b8      	blx	r7
 8007662:	3001      	adds	r0, #1
 8007664:	f43f af1d 	beq.w	80074a2 <_printf_float+0xba>
 8007668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800766a:	b923      	cbnz	r3, 8007676 <_printf_float+0x28e>
 800766c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800766e:	b913      	cbnz	r3, 8007676 <_printf_float+0x28e>
 8007670:	6823      	ldr	r3, [r4, #0]
 8007672:	07d9      	lsls	r1, r3, #31
 8007674:	d5d8      	bpl.n	8007628 <_printf_float+0x240>
 8007676:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800767a:	4631      	mov	r1, r6
 800767c:	4628      	mov	r0, r5
 800767e:	47b8      	blx	r7
 8007680:	3001      	adds	r0, #1
 8007682:	f43f af0e 	beq.w	80074a2 <_printf_float+0xba>
 8007686:	f04f 0900 	mov.w	r9, #0
 800768a:	f104 0a1a 	add.w	sl, r4, #26
 800768e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007690:	425b      	negs	r3, r3
 8007692:	454b      	cmp	r3, r9
 8007694:	dc01      	bgt.n	800769a <_printf_float+0x2b2>
 8007696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007698:	e794      	b.n	80075c4 <_printf_float+0x1dc>
 800769a:	2301      	movs	r3, #1
 800769c:	4652      	mov	r2, sl
 800769e:	4631      	mov	r1, r6
 80076a0:	4628      	mov	r0, r5
 80076a2:	47b8      	blx	r7
 80076a4:	3001      	adds	r0, #1
 80076a6:	f43f aefc 	beq.w	80074a2 <_printf_float+0xba>
 80076aa:	f109 0901 	add.w	r9, r9, #1
 80076ae:	e7ee      	b.n	800768e <_printf_float+0x2a6>
 80076b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076b4:	429a      	cmp	r2, r3
 80076b6:	bfa8      	it	ge
 80076b8:	461a      	movge	r2, r3
 80076ba:	2a00      	cmp	r2, #0
 80076bc:	4691      	mov	r9, r2
 80076be:	dd07      	ble.n	80076d0 <_printf_float+0x2e8>
 80076c0:	4613      	mov	r3, r2
 80076c2:	4631      	mov	r1, r6
 80076c4:	4642      	mov	r2, r8
 80076c6:	4628      	mov	r0, r5
 80076c8:	47b8      	blx	r7
 80076ca:	3001      	adds	r0, #1
 80076cc:	f43f aee9 	beq.w	80074a2 <_printf_float+0xba>
 80076d0:	f104 031a 	add.w	r3, r4, #26
 80076d4:	f04f 0b00 	mov.w	fp, #0
 80076d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076dc:	9306      	str	r3, [sp, #24]
 80076de:	e015      	b.n	800770c <_printf_float+0x324>
 80076e0:	7fefffff 	.word	0x7fefffff
 80076e4:	080096bc 	.word	0x080096bc
 80076e8:	080096b8 	.word	0x080096b8
 80076ec:	080096c4 	.word	0x080096c4
 80076f0:	080096c0 	.word	0x080096c0
 80076f4:	080096c8 	.word	0x080096c8
 80076f8:	2301      	movs	r3, #1
 80076fa:	9a06      	ldr	r2, [sp, #24]
 80076fc:	4631      	mov	r1, r6
 80076fe:	4628      	mov	r0, r5
 8007700:	47b8      	blx	r7
 8007702:	3001      	adds	r0, #1
 8007704:	f43f aecd 	beq.w	80074a2 <_printf_float+0xba>
 8007708:	f10b 0b01 	add.w	fp, fp, #1
 800770c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007710:	ebaa 0309 	sub.w	r3, sl, r9
 8007714:	455b      	cmp	r3, fp
 8007716:	dcef      	bgt.n	80076f8 <_printf_float+0x310>
 8007718:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800771c:	429a      	cmp	r2, r3
 800771e:	44d0      	add	r8, sl
 8007720:	db15      	blt.n	800774e <_printf_float+0x366>
 8007722:	6823      	ldr	r3, [r4, #0]
 8007724:	07da      	lsls	r2, r3, #31
 8007726:	d412      	bmi.n	800774e <_printf_float+0x366>
 8007728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800772a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800772c:	eba3 020a 	sub.w	r2, r3, sl
 8007730:	eba3 0a01 	sub.w	sl, r3, r1
 8007734:	4592      	cmp	sl, r2
 8007736:	bfa8      	it	ge
 8007738:	4692      	movge	sl, r2
 800773a:	f1ba 0f00 	cmp.w	sl, #0
 800773e:	dc0e      	bgt.n	800775e <_printf_float+0x376>
 8007740:	f04f 0800 	mov.w	r8, #0
 8007744:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007748:	f104 091a 	add.w	r9, r4, #26
 800774c:	e019      	b.n	8007782 <_printf_float+0x39a>
 800774e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007752:	4631      	mov	r1, r6
 8007754:	4628      	mov	r0, r5
 8007756:	47b8      	blx	r7
 8007758:	3001      	adds	r0, #1
 800775a:	d1e5      	bne.n	8007728 <_printf_float+0x340>
 800775c:	e6a1      	b.n	80074a2 <_printf_float+0xba>
 800775e:	4653      	mov	r3, sl
 8007760:	4642      	mov	r2, r8
 8007762:	4631      	mov	r1, r6
 8007764:	4628      	mov	r0, r5
 8007766:	47b8      	blx	r7
 8007768:	3001      	adds	r0, #1
 800776a:	d1e9      	bne.n	8007740 <_printf_float+0x358>
 800776c:	e699      	b.n	80074a2 <_printf_float+0xba>
 800776e:	2301      	movs	r3, #1
 8007770:	464a      	mov	r2, r9
 8007772:	4631      	mov	r1, r6
 8007774:	4628      	mov	r0, r5
 8007776:	47b8      	blx	r7
 8007778:	3001      	adds	r0, #1
 800777a:	f43f ae92 	beq.w	80074a2 <_printf_float+0xba>
 800777e:	f108 0801 	add.w	r8, r8, #1
 8007782:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007786:	1a9b      	subs	r3, r3, r2
 8007788:	eba3 030a 	sub.w	r3, r3, sl
 800778c:	4543      	cmp	r3, r8
 800778e:	dcee      	bgt.n	800776e <_printf_float+0x386>
 8007790:	e74a      	b.n	8007628 <_printf_float+0x240>
 8007792:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007794:	2a01      	cmp	r2, #1
 8007796:	dc01      	bgt.n	800779c <_printf_float+0x3b4>
 8007798:	07db      	lsls	r3, r3, #31
 800779a:	d53a      	bpl.n	8007812 <_printf_float+0x42a>
 800779c:	2301      	movs	r3, #1
 800779e:	4642      	mov	r2, r8
 80077a0:	4631      	mov	r1, r6
 80077a2:	4628      	mov	r0, r5
 80077a4:	47b8      	blx	r7
 80077a6:	3001      	adds	r0, #1
 80077a8:	f43f ae7b 	beq.w	80074a2 <_printf_float+0xba>
 80077ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077b0:	4631      	mov	r1, r6
 80077b2:	4628      	mov	r0, r5
 80077b4:	47b8      	blx	r7
 80077b6:	3001      	adds	r0, #1
 80077b8:	f108 0801 	add.w	r8, r8, #1
 80077bc:	f43f ae71 	beq.w	80074a2 <_printf_float+0xba>
 80077c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077c2:	2200      	movs	r2, #0
 80077c4:	f103 3aff 	add.w	sl, r3, #4294967295
 80077c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077cc:	2300      	movs	r3, #0
 80077ce:	f7f9 f947 	bl	8000a60 <__aeabi_dcmpeq>
 80077d2:	b9c8      	cbnz	r0, 8007808 <_printf_float+0x420>
 80077d4:	4653      	mov	r3, sl
 80077d6:	4642      	mov	r2, r8
 80077d8:	4631      	mov	r1, r6
 80077da:	4628      	mov	r0, r5
 80077dc:	47b8      	blx	r7
 80077de:	3001      	adds	r0, #1
 80077e0:	d10e      	bne.n	8007800 <_printf_float+0x418>
 80077e2:	e65e      	b.n	80074a2 <_printf_float+0xba>
 80077e4:	2301      	movs	r3, #1
 80077e6:	4652      	mov	r2, sl
 80077e8:	4631      	mov	r1, r6
 80077ea:	4628      	mov	r0, r5
 80077ec:	47b8      	blx	r7
 80077ee:	3001      	adds	r0, #1
 80077f0:	f43f ae57 	beq.w	80074a2 <_printf_float+0xba>
 80077f4:	f108 0801 	add.w	r8, r8, #1
 80077f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077fa:	3b01      	subs	r3, #1
 80077fc:	4543      	cmp	r3, r8
 80077fe:	dcf1      	bgt.n	80077e4 <_printf_float+0x3fc>
 8007800:	464b      	mov	r3, r9
 8007802:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007806:	e6de      	b.n	80075c6 <_printf_float+0x1de>
 8007808:	f04f 0800 	mov.w	r8, #0
 800780c:	f104 0a1a 	add.w	sl, r4, #26
 8007810:	e7f2      	b.n	80077f8 <_printf_float+0x410>
 8007812:	2301      	movs	r3, #1
 8007814:	e7df      	b.n	80077d6 <_printf_float+0x3ee>
 8007816:	2301      	movs	r3, #1
 8007818:	464a      	mov	r2, r9
 800781a:	4631      	mov	r1, r6
 800781c:	4628      	mov	r0, r5
 800781e:	47b8      	blx	r7
 8007820:	3001      	adds	r0, #1
 8007822:	f43f ae3e 	beq.w	80074a2 <_printf_float+0xba>
 8007826:	f108 0801 	add.w	r8, r8, #1
 800782a:	68e3      	ldr	r3, [r4, #12]
 800782c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800782e:	1a9b      	subs	r3, r3, r2
 8007830:	4543      	cmp	r3, r8
 8007832:	dcf0      	bgt.n	8007816 <_printf_float+0x42e>
 8007834:	e6fc      	b.n	8007630 <_printf_float+0x248>
 8007836:	f04f 0800 	mov.w	r8, #0
 800783a:	f104 0919 	add.w	r9, r4, #25
 800783e:	e7f4      	b.n	800782a <_printf_float+0x442>
 8007840:	2900      	cmp	r1, #0
 8007842:	f43f ae8b 	beq.w	800755c <_printf_float+0x174>
 8007846:	2300      	movs	r3, #0
 8007848:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800784c:	ab09      	add	r3, sp, #36	; 0x24
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	ec49 8b10 	vmov	d0, r8, r9
 8007854:	6022      	str	r2, [r4, #0]
 8007856:	f8cd a004 	str.w	sl, [sp, #4]
 800785a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800785e:	4628      	mov	r0, r5
 8007860:	f7ff fd2e 	bl	80072c0 <__cvt>
 8007864:	4680      	mov	r8, r0
 8007866:	e648      	b.n	80074fa <_printf_float+0x112>

08007868 <_printf_common>:
 8007868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800786c:	4691      	mov	r9, r2
 800786e:	461f      	mov	r7, r3
 8007870:	688a      	ldr	r2, [r1, #8]
 8007872:	690b      	ldr	r3, [r1, #16]
 8007874:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007878:	4293      	cmp	r3, r2
 800787a:	bfb8      	it	lt
 800787c:	4613      	movlt	r3, r2
 800787e:	f8c9 3000 	str.w	r3, [r9]
 8007882:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007886:	4606      	mov	r6, r0
 8007888:	460c      	mov	r4, r1
 800788a:	b112      	cbz	r2, 8007892 <_printf_common+0x2a>
 800788c:	3301      	adds	r3, #1
 800788e:	f8c9 3000 	str.w	r3, [r9]
 8007892:	6823      	ldr	r3, [r4, #0]
 8007894:	0699      	lsls	r1, r3, #26
 8007896:	bf42      	ittt	mi
 8007898:	f8d9 3000 	ldrmi.w	r3, [r9]
 800789c:	3302      	addmi	r3, #2
 800789e:	f8c9 3000 	strmi.w	r3, [r9]
 80078a2:	6825      	ldr	r5, [r4, #0]
 80078a4:	f015 0506 	ands.w	r5, r5, #6
 80078a8:	d107      	bne.n	80078ba <_printf_common+0x52>
 80078aa:	f104 0a19 	add.w	sl, r4, #25
 80078ae:	68e3      	ldr	r3, [r4, #12]
 80078b0:	f8d9 2000 	ldr.w	r2, [r9]
 80078b4:	1a9b      	subs	r3, r3, r2
 80078b6:	42ab      	cmp	r3, r5
 80078b8:	dc28      	bgt.n	800790c <_printf_common+0xa4>
 80078ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80078be:	6822      	ldr	r2, [r4, #0]
 80078c0:	3300      	adds	r3, #0
 80078c2:	bf18      	it	ne
 80078c4:	2301      	movne	r3, #1
 80078c6:	0692      	lsls	r2, r2, #26
 80078c8:	d42d      	bmi.n	8007926 <_printf_common+0xbe>
 80078ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078ce:	4639      	mov	r1, r7
 80078d0:	4630      	mov	r0, r6
 80078d2:	47c0      	blx	r8
 80078d4:	3001      	adds	r0, #1
 80078d6:	d020      	beq.n	800791a <_printf_common+0xb2>
 80078d8:	6823      	ldr	r3, [r4, #0]
 80078da:	68e5      	ldr	r5, [r4, #12]
 80078dc:	f8d9 2000 	ldr.w	r2, [r9]
 80078e0:	f003 0306 	and.w	r3, r3, #6
 80078e4:	2b04      	cmp	r3, #4
 80078e6:	bf08      	it	eq
 80078e8:	1aad      	subeq	r5, r5, r2
 80078ea:	68a3      	ldr	r3, [r4, #8]
 80078ec:	6922      	ldr	r2, [r4, #16]
 80078ee:	bf0c      	ite	eq
 80078f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078f4:	2500      	movne	r5, #0
 80078f6:	4293      	cmp	r3, r2
 80078f8:	bfc4      	itt	gt
 80078fa:	1a9b      	subgt	r3, r3, r2
 80078fc:	18ed      	addgt	r5, r5, r3
 80078fe:	f04f 0900 	mov.w	r9, #0
 8007902:	341a      	adds	r4, #26
 8007904:	454d      	cmp	r5, r9
 8007906:	d11a      	bne.n	800793e <_printf_common+0xd6>
 8007908:	2000      	movs	r0, #0
 800790a:	e008      	b.n	800791e <_printf_common+0xb6>
 800790c:	2301      	movs	r3, #1
 800790e:	4652      	mov	r2, sl
 8007910:	4639      	mov	r1, r7
 8007912:	4630      	mov	r0, r6
 8007914:	47c0      	blx	r8
 8007916:	3001      	adds	r0, #1
 8007918:	d103      	bne.n	8007922 <_printf_common+0xba>
 800791a:	f04f 30ff 	mov.w	r0, #4294967295
 800791e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007922:	3501      	adds	r5, #1
 8007924:	e7c3      	b.n	80078ae <_printf_common+0x46>
 8007926:	18e1      	adds	r1, r4, r3
 8007928:	1c5a      	adds	r2, r3, #1
 800792a:	2030      	movs	r0, #48	; 0x30
 800792c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007930:	4422      	add	r2, r4
 8007932:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007936:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800793a:	3302      	adds	r3, #2
 800793c:	e7c5      	b.n	80078ca <_printf_common+0x62>
 800793e:	2301      	movs	r3, #1
 8007940:	4622      	mov	r2, r4
 8007942:	4639      	mov	r1, r7
 8007944:	4630      	mov	r0, r6
 8007946:	47c0      	blx	r8
 8007948:	3001      	adds	r0, #1
 800794a:	d0e6      	beq.n	800791a <_printf_common+0xb2>
 800794c:	f109 0901 	add.w	r9, r9, #1
 8007950:	e7d8      	b.n	8007904 <_printf_common+0x9c>
	...

08007954 <_puts_r>:
 8007954:	b570      	push	{r4, r5, r6, lr}
 8007956:	460e      	mov	r6, r1
 8007958:	4605      	mov	r5, r0
 800795a:	b118      	cbz	r0, 8007964 <_puts_r+0x10>
 800795c:	6983      	ldr	r3, [r0, #24]
 800795e:	b90b      	cbnz	r3, 8007964 <_puts_r+0x10>
 8007960:	f001 f906 	bl	8008b70 <__sinit>
 8007964:	69ab      	ldr	r3, [r5, #24]
 8007966:	68ac      	ldr	r4, [r5, #8]
 8007968:	b913      	cbnz	r3, 8007970 <_puts_r+0x1c>
 800796a:	4628      	mov	r0, r5
 800796c:	f001 f900 	bl	8008b70 <__sinit>
 8007970:	4b23      	ldr	r3, [pc, #140]	; (8007a00 <_puts_r+0xac>)
 8007972:	429c      	cmp	r4, r3
 8007974:	d117      	bne.n	80079a6 <_puts_r+0x52>
 8007976:	686c      	ldr	r4, [r5, #4]
 8007978:	89a3      	ldrh	r3, [r4, #12]
 800797a:	071b      	lsls	r3, r3, #28
 800797c:	d51d      	bpl.n	80079ba <_puts_r+0x66>
 800797e:	6923      	ldr	r3, [r4, #16]
 8007980:	b1db      	cbz	r3, 80079ba <_puts_r+0x66>
 8007982:	3e01      	subs	r6, #1
 8007984:	68a3      	ldr	r3, [r4, #8]
 8007986:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800798a:	3b01      	subs	r3, #1
 800798c:	60a3      	str	r3, [r4, #8]
 800798e:	b9e9      	cbnz	r1, 80079cc <_puts_r+0x78>
 8007990:	2b00      	cmp	r3, #0
 8007992:	da2e      	bge.n	80079f2 <_puts_r+0x9e>
 8007994:	4622      	mov	r2, r4
 8007996:	210a      	movs	r1, #10
 8007998:	4628      	mov	r0, r5
 800799a:	f000 f8f5 	bl	8007b88 <__swbuf_r>
 800799e:	3001      	adds	r0, #1
 80079a0:	d011      	beq.n	80079c6 <_puts_r+0x72>
 80079a2:	200a      	movs	r0, #10
 80079a4:	e011      	b.n	80079ca <_puts_r+0x76>
 80079a6:	4b17      	ldr	r3, [pc, #92]	; (8007a04 <_puts_r+0xb0>)
 80079a8:	429c      	cmp	r4, r3
 80079aa:	d101      	bne.n	80079b0 <_puts_r+0x5c>
 80079ac:	68ac      	ldr	r4, [r5, #8]
 80079ae:	e7e3      	b.n	8007978 <_puts_r+0x24>
 80079b0:	4b15      	ldr	r3, [pc, #84]	; (8007a08 <_puts_r+0xb4>)
 80079b2:	429c      	cmp	r4, r3
 80079b4:	bf08      	it	eq
 80079b6:	68ec      	ldreq	r4, [r5, #12]
 80079b8:	e7de      	b.n	8007978 <_puts_r+0x24>
 80079ba:	4621      	mov	r1, r4
 80079bc:	4628      	mov	r0, r5
 80079be:	f000 f935 	bl	8007c2c <__swsetup_r>
 80079c2:	2800      	cmp	r0, #0
 80079c4:	d0dd      	beq.n	8007982 <_puts_r+0x2e>
 80079c6:	f04f 30ff 	mov.w	r0, #4294967295
 80079ca:	bd70      	pop	{r4, r5, r6, pc}
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	da04      	bge.n	80079da <_puts_r+0x86>
 80079d0:	69a2      	ldr	r2, [r4, #24]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	dc06      	bgt.n	80079e4 <_puts_r+0x90>
 80079d6:	290a      	cmp	r1, #10
 80079d8:	d004      	beq.n	80079e4 <_puts_r+0x90>
 80079da:	6823      	ldr	r3, [r4, #0]
 80079dc:	1c5a      	adds	r2, r3, #1
 80079de:	6022      	str	r2, [r4, #0]
 80079e0:	7019      	strb	r1, [r3, #0]
 80079e2:	e7cf      	b.n	8007984 <_puts_r+0x30>
 80079e4:	4622      	mov	r2, r4
 80079e6:	4628      	mov	r0, r5
 80079e8:	f000 f8ce 	bl	8007b88 <__swbuf_r>
 80079ec:	3001      	adds	r0, #1
 80079ee:	d1c9      	bne.n	8007984 <_puts_r+0x30>
 80079f0:	e7e9      	b.n	80079c6 <_puts_r+0x72>
 80079f2:	6823      	ldr	r3, [r4, #0]
 80079f4:	200a      	movs	r0, #10
 80079f6:	1c5a      	adds	r2, r3, #1
 80079f8:	6022      	str	r2, [r4, #0]
 80079fa:	7018      	strb	r0, [r3, #0]
 80079fc:	e7e5      	b.n	80079ca <_puts_r+0x76>
 80079fe:	bf00      	nop
 8007a00:	080096f8 	.word	0x080096f8
 8007a04:	08009718 	.word	0x08009718
 8007a08:	080096d8 	.word	0x080096d8

08007a0c <puts>:
 8007a0c:	4b02      	ldr	r3, [pc, #8]	; (8007a18 <puts+0xc>)
 8007a0e:	4601      	mov	r1, r0
 8007a10:	6818      	ldr	r0, [r3, #0]
 8007a12:	f7ff bf9f 	b.w	8007954 <_puts_r>
 8007a16:	bf00      	nop
 8007a18:	2000000c 	.word	0x2000000c

08007a1c <setbuf>:
 8007a1c:	2900      	cmp	r1, #0
 8007a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a22:	bf0c      	ite	eq
 8007a24:	2202      	moveq	r2, #2
 8007a26:	2200      	movne	r2, #0
 8007a28:	f000 b800 	b.w	8007a2c <setvbuf>

08007a2c <setvbuf>:
 8007a2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a30:	461d      	mov	r5, r3
 8007a32:	4b51      	ldr	r3, [pc, #324]	; (8007b78 <setvbuf+0x14c>)
 8007a34:	681e      	ldr	r6, [r3, #0]
 8007a36:	4604      	mov	r4, r0
 8007a38:	460f      	mov	r7, r1
 8007a3a:	4690      	mov	r8, r2
 8007a3c:	b126      	cbz	r6, 8007a48 <setvbuf+0x1c>
 8007a3e:	69b3      	ldr	r3, [r6, #24]
 8007a40:	b913      	cbnz	r3, 8007a48 <setvbuf+0x1c>
 8007a42:	4630      	mov	r0, r6
 8007a44:	f001 f894 	bl	8008b70 <__sinit>
 8007a48:	4b4c      	ldr	r3, [pc, #304]	; (8007b7c <setvbuf+0x150>)
 8007a4a:	429c      	cmp	r4, r3
 8007a4c:	d152      	bne.n	8007af4 <setvbuf+0xc8>
 8007a4e:	6874      	ldr	r4, [r6, #4]
 8007a50:	f1b8 0f02 	cmp.w	r8, #2
 8007a54:	d006      	beq.n	8007a64 <setvbuf+0x38>
 8007a56:	f1b8 0f01 	cmp.w	r8, #1
 8007a5a:	f200 8089 	bhi.w	8007b70 <setvbuf+0x144>
 8007a5e:	2d00      	cmp	r5, #0
 8007a60:	f2c0 8086 	blt.w	8007b70 <setvbuf+0x144>
 8007a64:	4621      	mov	r1, r4
 8007a66:	4630      	mov	r0, r6
 8007a68:	f001 f818 	bl	8008a9c <_fflush_r>
 8007a6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a6e:	b141      	cbz	r1, 8007a82 <setvbuf+0x56>
 8007a70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a74:	4299      	cmp	r1, r3
 8007a76:	d002      	beq.n	8007a7e <setvbuf+0x52>
 8007a78:	4630      	mov	r0, r6
 8007a7a:	f001 fc71 	bl	8009360 <_free_r>
 8007a7e:	2300      	movs	r3, #0
 8007a80:	6363      	str	r3, [r4, #52]	; 0x34
 8007a82:	2300      	movs	r3, #0
 8007a84:	61a3      	str	r3, [r4, #24]
 8007a86:	6063      	str	r3, [r4, #4]
 8007a88:	89a3      	ldrh	r3, [r4, #12]
 8007a8a:	061b      	lsls	r3, r3, #24
 8007a8c:	d503      	bpl.n	8007a96 <setvbuf+0x6a>
 8007a8e:	6921      	ldr	r1, [r4, #16]
 8007a90:	4630      	mov	r0, r6
 8007a92:	f001 fc65 	bl	8009360 <_free_r>
 8007a96:	89a3      	ldrh	r3, [r4, #12]
 8007a98:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007a9c:	f023 0303 	bic.w	r3, r3, #3
 8007aa0:	f1b8 0f02 	cmp.w	r8, #2
 8007aa4:	81a3      	strh	r3, [r4, #12]
 8007aa6:	d05d      	beq.n	8007b64 <setvbuf+0x138>
 8007aa8:	ab01      	add	r3, sp, #4
 8007aaa:	466a      	mov	r2, sp
 8007aac:	4621      	mov	r1, r4
 8007aae:	4630      	mov	r0, r6
 8007ab0:	f001 f8f6 	bl	8008ca0 <__swhatbuf_r>
 8007ab4:	89a3      	ldrh	r3, [r4, #12]
 8007ab6:	4318      	orrs	r0, r3
 8007ab8:	81a0      	strh	r0, [r4, #12]
 8007aba:	bb2d      	cbnz	r5, 8007b08 <setvbuf+0xdc>
 8007abc:	9d00      	ldr	r5, [sp, #0]
 8007abe:	4628      	mov	r0, r5
 8007ac0:	f001 f952 	bl	8008d68 <malloc>
 8007ac4:	4607      	mov	r7, r0
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	d14e      	bne.n	8007b68 <setvbuf+0x13c>
 8007aca:	f8dd 9000 	ldr.w	r9, [sp]
 8007ace:	45a9      	cmp	r9, r5
 8007ad0:	d13c      	bne.n	8007b4c <setvbuf+0x120>
 8007ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad6:	89a3      	ldrh	r3, [r4, #12]
 8007ad8:	f043 0302 	orr.w	r3, r3, #2
 8007adc:	81a3      	strh	r3, [r4, #12]
 8007ade:	2300      	movs	r3, #0
 8007ae0:	60a3      	str	r3, [r4, #8]
 8007ae2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ae6:	6023      	str	r3, [r4, #0]
 8007ae8:	6123      	str	r3, [r4, #16]
 8007aea:	2301      	movs	r3, #1
 8007aec:	6163      	str	r3, [r4, #20]
 8007aee:	b003      	add	sp, #12
 8007af0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007af4:	4b22      	ldr	r3, [pc, #136]	; (8007b80 <setvbuf+0x154>)
 8007af6:	429c      	cmp	r4, r3
 8007af8:	d101      	bne.n	8007afe <setvbuf+0xd2>
 8007afa:	68b4      	ldr	r4, [r6, #8]
 8007afc:	e7a8      	b.n	8007a50 <setvbuf+0x24>
 8007afe:	4b21      	ldr	r3, [pc, #132]	; (8007b84 <setvbuf+0x158>)
 8007b00:	429c      	cmp	r4, r3
 8007b02:	bf08      	it	eq
 8007b04:	68f4      	ldreq	r4, [r6, #12]
 8007b06:	e7a3      	b.n	8007a50 <setvbuf+0x24>
 8007b08:	2f00      	cmp	r7, #0
 8007b0a:	d0d8      	beq.n	8007abe <setvbuf+0x92>
 8007b0c:	69b3      	ldr	r3, [r6, #24]
 8007b0e:	b913      	cbnz	r3, 8007b16 <setvbuf+0xea>
 8007b10:	4630      	mov	r0, r6
 8007b12:	f001 f82d 	bl	8008b70 <__sinit>
 8007b16:	f1b8 0f01 	cmp.w	r8, #1
 8007b1a:	bf08      	it	eq
 8007b1c:	89a3      	ldrheq	r3, [r4, #12]
 8007b1e:	6027      	str	r7, [r4, #0]
 8007b20:	bf04      	itt	eq
 8007b22:	f043 0301 	orreq.w	r3, r3, #1
 8007b26:	81a3      	strheq	r3, [r4, #12]
 8007b28:	89a3      	ldrh	r3, [r4, #12]
 8007b2a:	f013 0008 	ands.w	r0, r3, #8
 8007b2e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8007b32:	d01b      	beq.n	8007b6c <setvbuf+0x140>
 8007b34:	f013 0001 	ands.w	r0, r3, #1
 8007b38:	bf18      	it	ne
 8007b3a:	426d      	negne	r5, r5
 8007b3c:	f04f 0300 	mov.w	r3, #0
 8007b40:	bf1d      	ittte	ne
 8007b42:	60a3      	strne	r3, [r4, #8]
 8007b44:	61a5      	strne	r5, [r4, #24]
 8007b46:	4618      	movne	r0, r3
 8007b48:	60a5      	streq	r5, [r4, #8]
 8007b4a:	e7d0      	b.n	8007aee <setvbuf+0xc2>
 8007b4c:	4648      	mov	r0, r9
 8007b4e:	f001 f90b 	bl	8008d68 <malloc>
 8007b52:	4607      	mov	r7, r0
 8007b54:	2800      	cmp	r0, #0
 8007b56:	d0bc      	beq.n	8007ad2 <setvbuf+0xa6>
 8007b58:	89a3      	ldrh	r3, [r4, #12]
 8007b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b5e:	81a3      	strh	r3, [r4, #12]
 8007b60:	464d      	mov	r5, r9
 8007b62:	e7d3      	b.n	8007b0c <setvbuf+0xe0>
 8007b64:	2000      	movs	r0, #0
 8007b66:	e7b6      	b.n	8007ad6 <setvbuf+0xaa>
 8007b68:	46a9      	mov	r9, r5
 8007b6a:	e7f5      	b.n	8007b58 <setvbuf+0x12c>
 8007b6c:	60a0      	str	r0, [r4, #8]
 8007b6e:	e7be      	b.n	8007aee <setvbuf+0xc2>
 8007b70:	f04f 30ff 	mov.w	r0, #4294967295
 8007b74:	e7bb      	b.n	8007aee <setvbuf+0xc2>
 8007b76:	bf00      	nop
 8007b78:	2000000c 	.word	0x2000000c
 8007b7c:	080096f8 	.word	0x080096f8
 8007b80:	08009718 	.word	0x08009718
 8007b84:	080096d8 	.word	0x080096d8

08007b88 <__swbuf_r>:
 8007b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8a:	460e      	mov	r6, r1
 8007b8c:	4614      	mov	r4, r2
 8007b8e:	4605      	mov	r5, r0
 8007b90:	b118      	cbz	r0, 8007b9a <__swbuf_r+0x12>
 8007b92:	6983      	ldr	r3, [r0, #24]
 8007b94:	b90b      	cbnz	r3, 8007b9a <__swbuf_r+0x12>
 8007b96:	f000 ffeb 	bl	8008b70 <__sinit>
 8007b9a:	4b21      	ldr	r3, [pc, #132]	; (8007c20 <__swbuf_r+0x98>)
 8007b9c:	429c      	cmp	r4, r3
 8007b9e:	d12a      	bne.n	8007bf6 <__swbuf_r+0x6e>
 8007ba0:	686c      	ldr	r4, [r5, #4]
 8007ba2:	69a3      	ldr	r3, [r4, #24]
 8007ba4:	60a3      	str	r3, [r4, #8]
 8007ba6:	89a3      	ldrh	r3, [r4, #12]
 8007ba8:	071a      	lsls	r2, r3, #28
 8007baa:	d52e      	bpl.n	8007c0a <__swbuf_r+0x82>
 8007bac:	6923      	ldr	r3, [r4, #16]
 8007bae:	b363      	cbz	r3, 8007c0a <__swbuf_r+0x82>
 8007bb0:	6923      	ldr	r3, [r4, #16]
 8007bb2:	6820      	ldr	r0, [r4, #0]
 8007bb4:	1ac0      	subs	r0, r0, r3
 8007bb6:	6963      	ldr	r3, [r4, #20]
 8007bb8:	b2f6      	uxtb	r6, r6
 8007bba:	4283      	cmp	r3, r0
 8007bbc:	4637      	mov	r7, r6
 8007bbe:	dc04      	bgt.n	8007bca <__swbuf_r+0x42>
 8007bc0:	4621      	mov	r1, r4
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	f000 ff6a 	bl	8008a9c <_fflush_r>
 8007bc8:	bb28      	cbnz	r0, 8007c16 <__swbuf_r+0x8e>
 8007bca:	68a3      	ldr	r3, [r4, #8]
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	60a3      	str	r3, [r4, #8]
 8007bd0:	6823      	ldr	r3, [r4, #0]
 8007bd2:	1c5a      	adds	r2, r3, #1
 8007bd4:	6022      	str	r2, [r4, #0]
 8007bd6:	701e      	strb	r6, [r3, #0]
 8007bd8:	6963      	ldr	r3, [r4, #20]
 8007bda:	3001      	adds	r0, #1
 8007bdc:	4283      	cmp	r3, r0
 8007bde:	d004      	beq.n	8007bea <__swbuf_r+0x62>
 8007be0:	89a3      	ldrh	r3, [r4, #12]
 8007be2:	07db      	lsls	r3, r3, #31
 8007be4:	d519      	bpl.n	8007c1a <__swbuf_r+0x92>
 8007be6:	2e0a      	cmp	r6, #10
 8007be8:	d117      	bne.n	8007c1a <__swbuf_r+0x92>
 8007bea:	4621      	mov	r1, r4
 8007bec:	4628      	mov	r0, r5
 8007bee:	f000 ff55 	bl	8008a9c <_fflush_r>
 8007bf2:	b190      	cbz	r0, 8007c1a <__swbuf_r+0x92>
 8007bf4:	e00f      	b.n	8007c16 <__swbuf_r+0x8e>
 8007bf6:	4b0b      	ldr	r3, [pc, #44]	; (8007c24 <__swbuf_r+0x9c>)
 8007bf8:	429c      	cmp	r4, r3
 8007bfa:	d101      	bne.n	8007c00 <__swbuf_r+0x78>
 8007bfc:	68ac      	ldr	r4, [r5, #8]
 8007bfe:	e7d0      	b.n	8007ba2 <__swbuf_r+0x1a>
 8007c00:	4b09      	ldr	r3, [pc, #36]	; (8007c28 <__swbuf_r+0xa0>)
 8007c02:	429c      	cmp	r4, r3
 8007c04:	bf08      	it	eq
 8007c06:	68ec      	ldreq	r4, [r5, #12]
 8007c08:	e7cb      	b.n	8007ba2 <__swbuf_r+0x1a>
 8007c0a:	4621      	mov	r1, r4
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	f000 f80d 	bl	8007c2c <__swsetup_r>
 8007c12:	2800      	cmp	r0, #0
 8007c14:	d0cc      	beq.n	8007bb0 <__swbuf_r+0x28>
 8007c16:	f04f 37ff 	mov.w	r7, #4294967295
 8007c1a:	4638      	mov	r0, r7
 8007c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	080096f8 	.word	0x080096f8
 8007c24:	08009718 	.word	0x08009718
 8007c28:	080096d8 	.word	0x080096d8

08007c2c <__swsetup_r>:
 8007c2c:	4b32      	ldr	r3, [pc, #200]	; (8007cf8 <__swsetup_r+0xcc>)
 8007c2e:	b570      	push	{r4, r5, r6, lr}
 8007c30:	681d      	ldr	r5, [r3, #0]
 8007c32:	4606      	mov	r6, r0
 8007c34:	460c      	mov	r4, r1
 8007c36:	b125      	cbz	r5, 8007c42 <__swsetup_r+0x16>
 8007c38:	69ab      	ldr	r3, [r5, #24]
 8007c3a:	b913      	cbnz	r3, 8007c42 <__swsetup_r+0x16>
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	f000 ff97 	bl	8008b70 <__sinit>
 8007c42:	4b2e      	ldr	r3, [pc, #184]	; (8007cfc <__swsetup_r+0xd0>)
 8007c44:	429c      	cmp	r4, r3
 8007c46:	d10f      	bne.n	8007c68 <__swsetup_r+0x3c>
 8007c48:	686c      	ldr	r4, [r5, #4]
 8007c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	0715      	lsls	r5, r2, #28
 8007c52:	d42c      	bmi.n	8007cae <__swsetup_r+0x82>
 8007c54:	06d0      	lsls	r0, r2, #27
 8007c56:	d411      	bmi.n	8007c7c <__swsetup_r+0x50>
 8007c58:	2209      	movs	r2, #9
 8007c5a:	6032      	str	r2, [r6, #0]
 8007c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c60:	81a3      	strh	r3, [r4, #12]
 8007c62:	f04f 30ff 	mov.w	r0, #4294967295
 8007c66:	e03e      	b.n	8007ce6 <__swsetup_r+0xba>
 8007c68:	4b25      	ldr	r3, [pc, #148]	; (8007d00 <__swsetup_r+0xd4>)
 8007c6a:	429c      	cmp	r4, r3
 8007c6c:	d101      	bne.n	8007c72 <__swsetup_r+0x46>
 8007c6e:	68ac      	ldr	r4, [r5, #8]
 8007c70:	e7eb      	b.n	8007c4a <__swsetup_r+0x1e>
 8007c72:	4b24      	ldr	r3, [pc, #144]	; (8007d04 <__swsetup_r+0xd8>)
 8007c74:	429c      	cmp	r4, r3
 8007c76:	bf08      	it	eq
 8007c78:	68ec      	ldreq	r4, [r5, #12]
 8007c7a:	e7e6      	b.n	8007c4a <__swsetup_r+0x1e>
 8007c7c:	0751      	lsls	r1, r2, #29
 8007c7e:	d512      	bpl.n	8007ca6 <__swsetup_r+0x7a>
 8007c80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c82:	b141      	cbz	r1, 8007c96 <__swsetup_r+0x6a>
 8007c84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c88:	4299      	cmp	r1, r3
 8007c8a:	d002      	beq.n	8007c92 <__swsetup_r+0x66>
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	f001 fb67 	bl	8009360 <_free_r>
 8007c92:	2300      	movs	r3, #0
 8007c94:	6363      	str	r3, [r4, #52]	; 0x34
 8007c96:	89a3      	ldrh	r3, [r4, #12]
 8007c98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c9c:	81a3      	strh	r3, [r4, #12]
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	6063      	str	r3, [r4, #4]
 8007ca2:	6923      	ldr	r3, [r4, #16]
 8007ca4:	6023      	str	r3, [r4, #0]
 8007ca6:	89a3      	ldrh	r3, [r4, #12]
 8007ca8:	f043 0308 	orr.w	r3, r3, #8
 8007cac:	81a3      	strh	r3, [r4, #12]
 8007cae:	6923      	ldr	r3, [r4, #16]
 8007cb0:	b94b      	cbnz	r3, 8007cc6 <__swsetup_r+0x9a>
 8007cb2:	89a3      	ldrh	r3, [r4, #12]
 8007cb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cbc:	d003      	beq.n	8007cc6 <__swsetup_r+0x9a>
 8007cbe:	4621      	mov	r1, r4
 8007cc0:	4630      	mov	r0, r6
 8007cc2:	f001 f811 	bl	8008ce8 <__smakebuf_r>
 8007cc6:	89a2      	ldrh	r2, [r4, #12]
 8007cc8:	f012 0301 	ands.w	r3, r2, #1
 8007ccc:	d00c      	beq.n	8007ce8 <__swsetup_r+0xbc>
 8007cce:	2300      	movs	r3, #0
 8007cd0:	60a3      	str	r3, [r4, #8]
 8007cd2:	6963      	ldr	r3, [r4, #20]
 8007cd4:	425b      	negs	r3, r3
 8007cd6:	61a3      	str	r3, [r4, #24]
 8007cd8:	6923      	ldr	r3, [r4, #16]
 8007cda:	b953      	cbnz	r3, 8007cf2 <__swsetup_r+0xc6>
 8007cdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ce0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007ce4:	d1ba      	bne.n	8007c5c <__swsetup_r+0x30>
 8007ce6:	bd70      	pop	{r4, r5, r6, pc}
 8007ce8:	0792      	lsls	r2, r2, #30
 8007cea:	bf58      	it	pl
 8007cec:	6963      	ldrpl	r3, [r4, #20]
 8007cee:	60a3      	str	r3, [r4, #8]
 8007cf0:	e7f2      	b.n	8007cd8 <__swsetup_r+0xac>
 8007cf2:	2000      	movs	r0, #0
 8007cf4:	e7f7      	b.n	8007ce6 <__swsetup_r+0xba>
 8007cf6:	bf00      	nop
 8007cf8:	2000000c 	.word	0x2000000c
 8007cfc:	080096f8 	.word	0x080096f8
 8007d00:	08009718 	.word	0x08009718
 8007d04:	080096d8 	.word	0x080096d8

08007d08 <quorem>:
 8007d08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d0c:	6903      	ldr	r3, [r0, #16]
 8007d0e:	690c      	ldr	r4, [r1, #16]
 8007d10:	42a3      	cmp	r3, r4
 8007d12:	4680      	mov	r8, r0
 8007d14:	f2c0 8082 	blt.w	8007e1c <quorem+0x114>
 8007d18:	3c01      	subs	r4, #1
 8007d1a:	f101 0714 	add.w	r7, r1, #20
 8007d1e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007d22:	f100 0614 	add.w	r6, r0, #20
 8007d26:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007d2a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007d2e:	eb06 030c 	add.w	r3, r6, ip
 8007d32:	3501      	adds	r5, #1
 8007d34:	eb07 090c 	add.w	r9, r7, ip
 8007d38:	9301      	str	r3, [sp, #4]
 8007d3a:	fbb0 f5f5 	udiv	r5, r0, r5
 8007d3e:	b395      	cbz	r5, 8007da6 <quorem+0x9e>
 8007d40:	f04f 0a00 	mov.w	sl, #0
 8007d44:	4638      	mov	r0, r7
 8007d46:	46b6      	mov	lr, r6
 8007d48:	46d3      	mov	fp, sl
 8007d4a:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d4e:	b293      	uxth	r3, r2
 8007d50:	fb05 a303 	mla	r3, r5, r3, sl
 8007d54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	ebab 0303 	sub.w	r3, fp, r3
 8007d5e:	0c12      	lsrs	r2, r2, #16
 8007d60:	f8de b000 	ldr.w	fp, [lr]
 8007d64:	fb05 a202 	mla	r2, r5, r2, sl
 8007d68:	fa13 f38b 	uxtah	r3, r3, fp
 8007d6c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007d70:	fa1f fb82 	uxth.w	fp, r2
 8007d74:	f8de 2000 	ldr.w	r2, [lr]
 8007d78:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007d7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d86:	4581      	cmp	r9, r0
 8007d88:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007d8c:	f84e 3b04 	str.w	r3, [lr], #4
 8007d90:	d2db      	bcs.n	8007d4a <quorem+0x42>
 8007d92:	f856 300c 	ldr.w	r3, [r6, ip]
 8007d96:	b933      	cbnz	r3, 8007da6 <quorem+0x9e>
 8007d98:	9b01      	ldr	r3, [sp, #4]
 8007d9a:	3b04      	subs	r3, #4
 8007d9c:	429e      	cmp	r6, r3
 8007d9e:	461a      	mov	r2, r3
 8007da0:	d330      	bcc.n	8007e04 <quorem+0xfc>
 8007da2:	f8c8 4010 	str.w	r4, [r8, #16]
 8007da6:	4640      	mov	r0, r8
 8007da8:	f001 fa06 	bl	80091b8 <__mcmp>
 8007dac:	2800      	cmp	r0, #0
 8007dae:	db25      	blt.n	8007dfc <quorem+0xf4>
 8007db0:	3501      	adds	r5, #1
 8007db2:	4630      	mov	r0, r6
 8007db4:	f04f 0c00 	mov.w	ip, #0
 8007db8:	f857 2b04 	ldr.w	r2, [r7], #4
 8007dbc:	f8d0 e000 	ldr.w	lr, [r0]
 8007dc0:	b293      	uxth	r3, r2
 8007dc2:	ebac 0303 	sub.w	r3, ip, r3
 8007dc6:	0c12      	lsrs	r2, r2, #16
 8007dc8:	fa13 f38e 	uxtah	r3, r3, lr
 8007dcc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007dd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dda:	45b9      	cmp	r9, r7
 8007ddc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007de0:	f840 3b04 	str.w	r3, [r0], #4
 8007de4:	d2e8      	bcs.n	8007db8 <quorem+0xb0>
 8007de6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007dea:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007dee:	b92a      	cbnz	r2, 8007dfc <quorem+0xf4>
 8007df0:	3b04      	subs	r3, #4
 8007df2:	429e      	cmp	r6, r3
 8007df4:	461a      	mov	r2, r3
 8007df6:	d30b      	bcc.n	8007e10 <quorem+0x108>
 8007df8:	f8c8 4010 	str.w	r4, [r8, #16]
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	b003      	add	sp, #12
 8007e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e04:	6812      	ldr	r2, [r2, #0]
 8007e06:	3b04      	subs	r3, #4
 8007e08:	2a00      	cmp	r2, #0
 8007e0a:	d1ca      	bne.n	8007da2 <quorem+0x9a>
 8007e0c:	3c01      	subs	r4, #1
 8007e0e:	e7c5      	b.n	8007d9c <quorem+0x94>
 8007e10:	6812      	ldr	r2, [r2, #0]
 8007e12:	3b04      	subs	r3, #4
 8007e14:	2a00      	cmp	r2, #0
 8007e16:	d1ef      	bne.n	8007df8 <quorem+0xf0>
 8007e18:	3c01      	subs	r4, #1
 8007e1a:	e7ea      	b.n	8007df2 <quorem+0xea>
 8007e1c:	2000      	movs	r0, #0
 8007e1e:	e7ee      	b.n	8007dfe <quorem+0xf6>

08007e20 <_dtoa_r>:
 8007e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e24:	ec57 6b10 	vmov	r6, r7, d0
 8007e28:	b097      	sub	sp, #92	; 0x5c
 8007e2a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e2c:	9106      	str	r1, [sp, #24]
 8007e2e:	4604      	mov	r4, r0
 8007e30:	920b      	str	r2, [sp, #44]	; 0x2c
 8007e32:	9312      	str	r3, [sp, #72]	; 0x48
 8007e34:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007e38:	e9cd 6700 	strd	r6, r7, [sp]
 8007e3c:	b93d      	cbnz	r5, 8007e4e <_dtoa_r+0x2e>
 8007e3e:	2010      	movs	r0, #16
 8007e40:	f000 ff92 	bl	8008d68 <malloc>
 8007e44:	6260      	str	r0, [r4, #36]	; 0x24
 8007e46:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e4a:	6005      	str	r5, [r0, #0]
 8007e4c:	60c5      	str	r5, [r0, #12]
 8007e4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e50:	6819      	ldr	r1, [r3, #0]
 8007e52:	b151      	cbz	r1, 8007e6a <_dtoa_r+0x4a>
 8007e54:	685a      	ldr	r2, [r3, #4]
 8007e56:	604a      	str	r2, [r1, #4]
 8007e58:	2301      	movs	r3, #1
 8007e5a:	4093      	lsls	r3, r2
 8007e5c:	608b      	str	r3, [r1, #8]
 8007e5e:	4620      	mov	r0, r4
 8007e60:	f000 ffc9 	bl	8008df6 <_Bfree>
 8007e64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e66:	2200      	movs	r2, #0
 8007e68:	601a      	str	r2, [r3, #0]
 8007e6a:	1e3b      	subs	r3, r7, #0
 8007e6c:	bfbb      	ittet	lt
 8007e6e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007e72:	9301      	strlt	r3, [sp, #4]
 8007e74:	2300      	movge	r3, #0
 8007e76:	2201      	movlt	r2, #1
 8007e78:	bfac      	ite	ge
 8007e7a:	f8c8 3000 	strge.w	r3, [r8]
 8007e7e:	f8c8 2000 	strlt.w	r2, [r8]
 8007e82:	4baf      	ldr	r3, [pc, #700]	; (8008140 <_dtoa_r+0x320>)
 8007e84:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007e88:	ea33 0308 	bics.w	r3, r3, r8
 8007e8c:	d114      	bne.n	8007eb8 <_dtoa_r+0x98>
 8007e8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e90:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e94:	6013      	str	r3, [r2, #0]
 8007e96:	9b00      	ldr	r3, [sp, #0]
 8007e98:	b923      	cbnz	r3, 8007ea4 <_dtoa_r+0x84>
 8007e9a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	f000 8542 	beq.w	8008928 <_dtoa_r+0xb08>
 8007ea4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ea6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008154 <_dtoa_r+0x334>
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f000 8544 	beq.w	8008938 <_dtoa_r+0xb18>
 8007eb0:	f10b 0303 	add.w	r3, fp, #3
 8007eb4:	f000 bd3e 	b.w	8008934 <_dtoa_r+0xb14>
 8007eb8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	4630      	mov	r0, r6
 8007ec2:	4639      	mov	r1, r7
 8007ec4:	f7f8 fdcc 	bl	8000a60 <__aeabi_dcmpeq>
 8007ec8:	4681      	mov	r9, r0
 8007eca:	b168      	cbz	r0, 8007ee8 <_dtoa_r+0xc8>
 8007ecc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007ece:	2301      	movs	r3, #1
 8007ed0:	6013      	str	r3, [r2, #0]
 8007ed2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f000 8524 	beq.w	8008922 <_dtoa_r+0xb02>
 8007eda:	4b9a      	ldr	r3, [pc, #616]	; (8008144 <_dtoa_r+0x324>)
 8007edc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ede:	f103 3bff 	add.w	fp, r3, #4294967295
 8007ee2:	6013      	str	r3, [r2, #0]
 8007ee4:	f000 bd28 	b.w	8008938 <_dtoa_r+0xb18>
 8007ee8:	aa14      	add	r2, sp, #80	; 0x50
 8007eea:	a915      	add	r1, sp, #84	; 0x54
 8007eec:	ec47 6b10 	vmov	d0, r6, r7
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	f001 f9d8 	bl	80092a6 <__d2b>
 8007ef6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007efa:	9004      	str	r0, [sp, #16]
 8007efc:	2d00      	cmp	r5, #0
 8007efe:	d07c      	beq.n	8007ffa <_dtoa_r+0x1da>
 8007f00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007f04:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007f08:	46b2      	mov	sl, r6
 8007f0a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007f0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007f12:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007f16:	2200      	movs	r2, #0
 8007f18:	4b8b      	ldr	r3, [pc, #556]	; (8008148 <_dtoa_r+0x328>)
 8007f1a:	4650      	mov	r0, sl
 8007f1c:	4659      	mov	r1, fp
 8007f1e:	f7f8 f97f 	bl	8000220 <__aeabi_dsub>
 8007f22:	a381      	add	r3, pc, #516	; (adr r3, 8008128 <_dtoa_r+0x308>)
 8007f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f28:	f7f8 fb32 	bl	8000590 <__aeabi_dmul>
 8007f2c:	a380      	add	r3, pc, #512	; (adr r3, 8008130 <_dtoa_r+0x310>)
 8007f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f32:	f7f8 f977 	bl	8000224 <__adddf3>
 8007f36:	4606      	mov	r6, r0
 8007f38:	4628      	mov	r0, r5
 8007f3a:	460f      	mov	r7, r1
 8007f3c:	f7f8 fabe 	bl	80004bc <__aeabi_i2d>
 8007f40:	a37d      	add	r3, pc, #500	; (adr r3, 8008138 <_dtoa_r+0x318>)
 8007f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f46:	f7f8 fb23 	bl	8000590 <__aeabi_dmul>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	4630      	mov	r0, r6
 8007f50:	4639      	mov	r1, r7
 8007f52:	f7f8 f967 	bl	8000224 <__adddf3>
 8007f56:	4606      	mov	r6, r0
 8007f58:	460f      	mov	r7, r1
 8007f5a:	f7f8 fdc9 	bl	8000af0 <__aeabi_d2iz>
 8007f5e:	2200      	movs	r2, #0
 8007f60:	4682      	mov	sl, r0
 8007f62:	2300      	movs	r3, #0
 8007f64:	4630      	mov	r0, r6
 8007f66:	4639      	mov	r1, r7
 8007f68:	f7f8 fd84 	bl	8000a74 <__aeabi_dcmplt>
 8007f6c:	b148      	cbz	r0, 8007f82 <_dtoa_r+0x162>
 8007f6e:	4650      	mov	r0, sl
 8007f70:	f7f8 faa4 	bl	80004bc <__aeabi_i2d>
 8007f74:	4632      	mov	r2, r6
 8007f76:	463b      	mov	r3, r7
 8007f78:	f7f8 fd72 	bl	8000a60 <__aeabi_dcmpeq>
 8007f7c:	b908      	cbnz	r0, 8007f82 <_dtoa_r+0x162>
 8007f7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f82:	f1ba 0f16 	cmp.w	sl, #22
 8007f86:	d859      	bhi.n	800803c <_dtoa_r+0x21c>
 8007f88:	4970      	ldr	r1, [pc, #448]	; (800814c <_dtoa_r+0x32c>)
 8007f8a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007f8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f96:	f7f8 fd8b 	bl	8000ab0 <__aeabi_dcmpgt>
 8007f9a:	2800      	cmp	r0, #0
 8007f9c:	d050      	beq.n	8008040 <_dtoa_r+0x220>
 8007f9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fa6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007fa8:	1b5d      	subs	r5, r3, r5
 8007faa:	f1b5 0801 	subs.w	r8, r5, #1
 8007fae:	bf49      	itett	mi
 8007fb0:	f1c5 0301 	rsbmi	r3, r5, #1
 8007fb4:	2300      	movpl	r3, #0
 8007fb6:	9305      	strmi	r3, [sp, #20]
 8007fb8:	f04f 0800 	movmi.w	r8, #0
 8007fbc:	bf58      	it	pl
 8007fbe:	9305      	strpl	r3, [sp, #20]
 8007fc0:	f1ba 0f00 	cmp.w	sl, #0
 8007fc4:	db3e      	blt.n	8008044 <_dtoa_r+0x224>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	44d0      	add	r8, sl
 8007fca:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007fce:	9307      	str	r3, [sp, #28]
 8007fd0:	9b06      	ldr	r3, [sp, #24]
 8007fd2:	2b09      	cmp	r3, #9
 8007fd4:	f200 8090 	bhi.w	80080f8 <_dtoa_r+0x2d8>
 8007fd8:	2b05      	cmp	r3, #5
 8007fda:	bfc4      	itt	gt
 8007fdc:	3b04      	subgt	r3, #4
 8007fde:	9306      	strgt	r3, [sp, #24]
 8007fe0:	9b06      	ldr	r3, [sp, #24]
 8007fe2:	f1a3 0302 	sub.w	r3, r3, #2
 8007fe6:	bfcc      	ite	gt
 8007fe8:	2500      	movgt	r5, #0
 8007fea:	2501      	movle	r5, #1
 8007fec:	2b03      	cmp	r3, #3
 8007fee:	f200 808f 	bhi.w	8008110 <_dtoa_r+0x2f0>
 8007ff2:	e8df f003 	tbb	[pc, r3]
 8007ff6:	7f7d      	.short	0x7f7d
 8007ff8:	7131      	.short	0x7131
 8007ffa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007ffe:	441d      	add	r5, r3
 8008000:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008004:	2820      	cmp	r0, #32
 8008006:	dd13      	ble.n	8008030 <_dtoa_r+0x210>
 8008008:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800800c:	9b00      	ldr	r3, [sp, #0]
 800800e:	fa08 f800 	lsl.w	r8, r8, r0
 8008012:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008016:	fa23 f000 	lsr.w	r0, r3, r0
 800801a:	ea48 0000 	orr.w	r0, r8, r0
 800801e:	f7f8 fa3d 	bl	800049c <__aeabi_ui2d>
 8008022:	2301      	movs	r3, #1
 8008024:	4682      	mov	sl, r0
 8008026:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800802a:	3d01      	subs	r5, #1
 800802c:	9313      	str	r3, [sp, #76]	; 0x4c
 800802e:	e772      	b.n	8007f16 <_dtoa_r+0xf6>
 8008030:	9b00      	ldr	r3, [sp, #0]
 8008032:	f1c0 0020 	rsb	r0, r0, #32
 8008036:	fa03 f000 	lsl.w	r0, r3, r0
 800803a:	e7f0      	b.n	800801e <_dtoa_r+0x1fe>
 800803c:	2301      	movs	r3, #1
 800803e:	e7b1      	b.n	8007fa4 <_dtoa_r+0x184>
 8008040:	900f      	str	r0, [sp, #60]	; 0x3c
 8008042:	e7b0      	b.n	8007fa6 <_dtoa_r+0x186>
 8008044:	9b05      	ldr	r3, [sp, #20]
 8008046:	eba3 030a 	sub.w	r3, r3, sl
 800804a:	9305      	str	r3, [sp, #20]
 800804c:	f1ca 0300 	rsb	r3, sl, #0
 8008050:	9307      	str	r3, [sp, #28]
 8008052:	2300      	movs	r3, #0
 8008054:	930e      	str	r3, [sp, #56]	; 0x38
 8008056:	e7bb      	b.n	8007fd0 <_dtoa_r+0x1b0>
 8008058:	2301      	movs	r3, #1
 800805a:	930a      	str	r3, [sp, #40]	; 0x28
 800805c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800805e:	2b00      	cmp	r3, #0
 8008060:	dd59      	ble.n	8008116 <_dtoa_r+0x2f6>
 8008062:	9302      	str	r3, [sp, #8]
 8008064:	4699      	mov	r9, r3
 8008066:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008068:	2200      	movs	r2, #0
 800806a:	6072      	str	r2, [r6, #4]
 800806c:	2204      	movs	r2, #4
 800806e:	f102 0014 	add.w	r0, r2, #20
 8008072:	4298      	cmp	r0, r3
 8008074:	6871      	ldr	r1, [r6, #4]
 8008076:	d953      	bls.n	8008120 <_dtoa_r+0x300>
 8008078:	4620      	mov	r0, r4
 800807a:	f000 fe88 	bl	8008d8e <_Balloc>
 800807e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008080:	6030      	str	r0, [r6, #0]
 8008082:	f1b9 0f0e 	cmp.w	r9, #14
 8008086:	f8d3 b000 	ldr.w	fp, [r3]
 800808a:	f200 80e6 	bhi.w	800825a <_dtoa_r+0x43a>
 800808e:	2d00      	cmp	r5, #0
 8008090:	f000 80e3 	beq.w	800825a <_dtoa_r+0x43a>
 8008094:	ed9d 7b00 	vldr	d7, [sp]
 8008098:	f1ba 0f00 	cmp.w	sl, #0
 800809c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80080a0:	dd74      	ble.n	800818c <_dtoa_r+0x36c>
 80080a2:	4a2a      	ldr	r2, [pc, #168]	; (800814c <_dtoa_r+0x32c>)
 80080a4:	f00a 030f 	and.w	r3, sl, #15
 80080a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80080ac:	ed93 7b00 	vldr	d7, [r3]
 80080b0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80080b4:	06f0      	lsls	r0, r6, #27
 80080b6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80080ba:	d565      	bpl.n	8008188 <_dtoa_r+0x368>
 80080bc:	4b24      	ldr	r3, [pc, #144]	; (8008150 <_dtoa_r+0x330>)
 80080be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80080c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80080c6:	f7f8 fb8d 	bl	80007e4 <__aeabi_ddiv>
 80080ca:	e9cd 0100 	strd	r0, r1, [sp]
 80080ce:	f006 060f 	and.w	r6, r6, #15
 80080d2:	2503      	movs	r5, #3
 80080d4:	4f1e      	ldr	r7, [pc, #120]	; (8008150 <_dtoa_r+0x330>)
 80080d6:	e04c      	b.n	8008172 <_dtoa_r+0x352>
 80080d8:	2301      	movs	r3, #1
 80080da:	930a      	str	r3, [sp, #40]	; 0x28
 80080dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080de:	4453      	add	r3, sl
 80080e0:	f103 0901 	add.w	r9, r3, #1
 80080e4:	9302      	str	r3, [sp, #8]
 80080e6:	464b      	mov	r3, r9
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	bfb8      	it	lt
 80080ec:	2301      	movlt	r3, #1
 80080ee:	e7ba      	b.n	8008066 <_dtoa_r+0x246>
 80080f0:	2300      	movs	r3, #0
 80080f2:	e7b2      	b.n	800805a <_dtoa_r+0x23a>
 80080f4:	2300      	movs	r3, #0
 80080f6:	e7f0      	b.n	80080da <_dtoa_r+0x2ba>
 80080f8:	2501      	movs	r5, #1
 80080fa:	2300      	movs	r3, #0
 80080fc:	9306      	str	r3, [sp, #24]
 80080fe:	950a      	str	r5, [sp, #40]	; 0x28
 8008100:	f04f 33ff 	mov.w	r3, #4294967295
 8008104:	9302      	str	r3, [sp, #8]
 8008106:	4699      	mov	r9, r3
 8008108:	2200      	movs	r2, #0
 800810a:	2312      	movs	r3, #18
 800810c:	920b      	str	r2, [sp, #44]	; 0x2c
 800810e:	e7aa      	b.n	8008066 <_dtoa_r+0x246>
 8008110:	2301      	movs	r3, #1
 8008112:	930a      	str	r3, [sp, #40]	; 0x28
 8008114:	e7f4      	b.n	8008100 <_dtoa_r+0x2e0>
 8008116:	2301      	movs	r3, #1
 8008118:	9302      	str	r3, [sp, #8]
 800811a:	4699      	mov	r9, r3
 800811c:	461a      	mov	r2, r3
 800811e:	e7f5      	b.n	800810c <_dtoa_r+0x2ec>
 8008120:	3101      	adds	r1, #1
 8008122:	6071      	str	r1, [r6, #4]
 8008124:	0052      	lsls	r2, r2, #1
 8008126:	e7a2      	b.n	800806e <_dtoa_r+0x24e>
 8008128:	636f4361 	.word	0x636f4361
 800812c:	3fd287a7 	.word	0x3fd287a7
 8008130:	8b60c8b3 	.word	0x8b60c8b3
 8008134:	3fc68a28 	.word	0x3fc68a28
 8008138:	509f79fb 	.word	0x509f79fb
 800813c:	3fd34413 	.word	0x3fd34413
 8008140:	7ff00000 	.word	0x7ff00000
 8008144:	080096c9 	.word	0x080096c9
 8008148:	3ff80000 	.word	0x3ff80000
 800814c:	08009760 	.word	0x08009760
 8008150:	08009738 	.word	0x08009738
 8008154:	080096d3 	.word	0x080096d3
 8008158:	07f1      	lsls	r1, r6, #31
 800815a:	d508      	bpl.n	800816e <_dtoa_r+0x34e>
 800815c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008160:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008164:	f7f8 fa14 	bl	8000590 <__aeabi_dmul>
 8008168:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800816c:	3501      	adds	r5, #1
 800816e:	1076      	asrs	r6, r6, #1
 8008170:	3708      	adds	r7, #8
 8008172:	2e00      	cmp	r6, #0
 8008174:	d1f0      	bne.n	8008158 <_dtoa_r+0x338>
 8008176:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800817a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800817e:	f7f8 fb31 	bl	80007e4 <__aeabi_ddiv>
 8008182:	e9cd 0100 	strd	r0, r1, [sp]
 8008186:	e01a      	b.n	80081be <_dtoa_r+0x39e>
 8008188:	2502      	movs	r5, #2
 800818a:	e7a3      	b.n	80080d4 <_dtoa_r+0x2b4>
 800818c:	f000 80a0 	beq.w	80082d0 <_dtoa_r+0x4b0>
 8008190:	f1ca 0600 	rsb	r6, sl, #0
 8008194:	4b9f      	ldr	r3, [pc, #636]	; (8008414 <_dtoa_r+0x5f4>)
 8008196:	4fa0      	ldr	r7, [pc, #640]	; (8008418 <_dtoa_r+0x5f8>)
 8008198:	f006 020f 	and.w	r2, r6, #15
 800819c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80081a8:	f7f8 f9f2 	bl	8000590 <__aeabi_dmul>
 80081ac:	e9cd 0100 	strd	r0, r1, [sp]
 80081b0:	1136      	asrs	r6, r6, #4
 80081b2:	2300      	movs	r3, #0
 80081b4:	2502      	movs	r5, #2
 80081b6:	2e00      	cmp	r6, #0
 80081b8:	d17f      	bne.n	80082ba <_dtoa_r+0x49a>
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d1e1      	bne.n	8008182 <_dtoa_r+0x362>
 80081be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f000 8087 	beq.w	80082d4 <_dtoa_r+0x4b4>
 80081c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80081ca:	2200      	movs	r2, #0
 80081cc:	4b93      	ldr	r3, [pc, #588]	; (800841c <_dtoa_r+0x5fc>)
 80081ce:	4630      	mov	r0, r6
 80081d0:	4639      	mov	r1, r7
 80081d2:	f7f8 fc4f 	bl	8000a74 <__aeabi_dcmplt>
 80081d6:	2800      	cmp	r0, #0
 80081d8:	d07c      	beq.n	80082d4 <_dtoa_r+0x4b4>
 80081da:	f1b9 0f00 	cmp.w	r9, #0
 80081de:	d079      	beq.n	80082d4 <_dtoa_r+0x4b4>
 80081e0:	9b02      	ldr	r3, [sp, #8]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	dd35      	ble.n	8008252 <_dtoa_r+0x432>
 80081e6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80081ea:	9308      	str	r3, [sp, #32]
 80081ec:	4639      	mov	r1, r7
 80081ee:	2200      	movs	r2, #0
 80081f0:	4b8b      	ldr	r3, [pc, #556]	; (8008420 <_dtoa_r+0x600>)
 80081f2:	4630      	mov	r0, r6
 80081f4:	f7f8 f9cc 	bl	8000590 <__aeabi_dmul>
 80081f8:	e9cd 0100 	strd	r0, r1, [sp]
 80081fc:	9f02      	ldr	r7, [sp, #8]
 80081fe:	3501      	adds	r5, #1
 8008200:	4628      	mov	r0, r5
 8008202:	f7f8 f95b 	bl	80004bc <__aeabi_i2d>
 8008206:	e9dd 2300 	ldrd	r2, r3, [sp]
 800820a:	f7f8 f9c1 	bl	8000590 <__aeabi_dmul>
 800820e:	2200      	movs	r2, #0
 8008210:	4b84      	ldr	r3, [pc, #528]	; (8008424 <_dtoa_r+0x604>)
 8008212:	f7f8 f807 	bl	8000224 <__adddf3>
 8008216:	4605      	mov	r5, r0
 8008218:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800821c:	2f00      	cmp	r7, #0
 800821e:	d15d      	bne.n	80082dc <_dtoa_r+0x4bc>
 8008220:	2200      	movs	r2, #0
 8008222:	4b81      	ldr	r3, [pc, #516]	; (8008428 <_dtoa_r+0x608>)
 8008224:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008228:	f7f7 fffa 	bl	8000220 <__aeabi_dsub>
 800822c:	462a      	mov	r2, r5
 800822e:	4633      	mov	r3, r6
 8008230:	e9cd 0100 	strd	r0, r1, [sp]
 8008234:	f7f8 fc3c 	bl	8000ab0 <__aeabi_dcmpgt>
 8008238:	2800      	cmp	r0, #0
 800823a:	f040 8288 	bne.w	800874e <_dtoa_r+0x92e>
 800823e:	462a      	mov	r2, r5
 8008240:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008244:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008248:	f7f8 fc14 	bl	8000a74 <__aeabi_dcmplt>
 800824c:	2800      	cmp	r0, #0
 800824e:	f040 827c 	bne.w	800874a <_dtoa_r+0x92a>
 8008252:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008256:	e9cd 2300 	strd	r2, r3, [sp]
 800825a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800825c:	2b00      	cmp	r3, #0
 800825e:	f2c0 8150 	blt.w	8008502 <_dtoa_r+0x6e2>
 8008262:	f1ba 0f0e 	cmp.w	sl, #14
 8008266:	f300 814c 	bgt.w	8008502 <_dtoa_r+0x6e2>
 800826a:	4b6a      	ldr	r3, [pc, #424]	; (8008414 <_dtoa_r+0x5f4>)
 800826c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008270:	ed93 7b00 	vldr	d7, [r3]
 8008274:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008276:	2b00      	cmp	r3, #0
 8008278:	ed8d 7b02 	vstr	d7, [sp, #8]
 800827c:	f280 80d8 	bge.w	8008430 <_dtoa_r+0x610>
 8008280:	f1b9 0f00 	cmp.w	r9, #0
 8008284:	f300 80d4 	bgt.w	8008430 <_dtoa_r+0x610>
 8008288:	f040 825e 	bne.w	8008748 <_dtoa_r+0x928>
 800828c:	2200      	movs	r2, #0
 800828e:	4b66      	ldr	r3, [pc, #408]	; (8008428 <_dtoa_r+0x608>)
 8008290:	ec51 0b17 	vmov	r0, r1, d7
 8008294:	f7f8 f97c 	bl	8000590 <__aeabi_dmul>
 8008298:	e9dd 2300 	ldrd	r2, r3, [sp]
 800829c:	f7f8 fbfe 	bl	8000a9c <__aeabi_dcmpge>
 80082a0:	464f      	mov	r7, r9
 80082a2:	464e      	mov	r6, r9
 80082a4:	2800      	cmp	r0, #0
 80082a6:	f040 8234 	bne.w	8008712 <_dtoa_r+0x8f2>
 80082aa:	2331      	movs	r3, #49	; 0x31
 80082ac:	f10b 0501 	add.w	r5, fp, #1
 80082b0:	f88b 3000 	strb.w	r3, [fp]
 80082b4:	f10a 0a01 	add.w	sl, sl, #1
 80082b8:	e22f      	b.n	800871a <_dtoa_r+0x8fa>
 80082ba:	07f2      	lsls	r2, r6, #31
 80082bc:	d505      	bpl.n	80082ca <_dtoa_r+0x4aa>
 80082be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082c2:	f7f8 f965 	bl	8000590 <__aeabi_dmul>
 80082c6:	3501      	adds	r5, #1
 80082c8:	2301      	movs	r3, #1
 80082ca:	1076      	asrs	r6, r6, #1
 80082cc:	3708      	adds	r7, #8
 80082ce:	e772      	b.n	80081b6 <_dtoa_r+0x396>
 80082d0:	2502      	movs	r5, #2
 80082d2:	e774      	b.n	80081be <_dtoa_r+0x39e>
 80082d4:	f8cd a020 	str.w	sl, [sp, #32]
 80082d8:	464f      	mov	r7, r9
 80082da:	e791      	b.n	8008200 <_dtoa_r+0x3e0>
 80082dc:	4b4d      	ldr	r3, [pc, #308]	; (8008414 <_dtoa_r+0x5f4>)
 80082de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80082e2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80082e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d047      	beq.n	800837c <_dtoa_r+0x55c>
 80082ec:	4602      	mov	r2, r0
 80082ee:	460b      	mov	r3, r1
 80082f0:	2000      	movs	r0, #0
 80082f2:	494e      	ldr	r1, [pc, #312]	; (800842c <_dtoa_r+0x60c>)
 80082f4:	f7f8 fa76 	bl	80007e4 <__aeabi_ddiv>
 80082f8:	462a      	mov	r2, r5
 80082fa:	4633      	mov	r3, r6
 80082fc:	f7f7 ff90 	bl	8000220 <__aeabi_dsub>
 8008300:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008304:	465d      	mov	r5, fp
 8008306:	e9dd 0100 	ldrd	r0, r1, [sp]
 800830a:	f7f8 fbf1 	bl	8000af0 <__aeabi_d2iz>
 800830e:	4606      	mov	r6, r0
 8008310:	f7f8 f8d4 	bl	80004bc <__aeabi_i2d>
 8008314:	4602      	mov	r2, r0
 8008316:	460b      	mov	r3, r1
 8008318:	e9dd 0100 	ldrd	r0, r1, [sp]
 800831c:	f7f7 ff80 	bl	8000220 <__aeabi_dsub>
 8008320:	3630      	adds	r6, #48	; 0x30
 8008322:	f805 6b01 	strb.w	r6, [r5], #1
 8008326:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800832a:	e9cd 0100 	strd	r0, r1, [sp]
 800832e:	f7f8 fba1 	bl	8000a74 <__aeabi_dcmplt>
 8008332:	2800      	cmp	r0, #0
 8008334:	d163      	bne.n	80083fe <_dtoa_r+0x5de>
 8008336:	e9dd 2300 	ldrd	r2, r3, [sp]
 800833a:	2000      	movs	r0, #0
 800833c:	4937      	ldr	r1, [pc, #220]	; (800841c <_dtoa_r+0x5fc>)
 800833e:	f7f7 ff6f 	bl	8000220 <__aeabi_dsub>
 8008342:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008346:	f7f8 fb95 	bl	8000a74 <__aeabi_dcmplt>
 800834a:	2800      	cmp	r0, #0
 800834c:	f040 80b7 	bne.w	80084be <_dtoa_r+0x69e>
 8008350:	eba5 030b 	sub.w	r3, r5, fp
 8008354:	429f      	cmp	r7, r3
 8008356:	f77f af7c 	ble.w	8008252 <_dtoa_r+0x432>
 800835a:	2200      	movs	r2, #0
 800835c:	4b30      	ldr	r3, [pc, #192]	; (8008420 <_dtoa_r+0x600>)
 800835e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008362:	f7f8 f915 	bl	8000590 <__aeabi_dmul>
 8008366:	2200      	movs	r2, #0
 8008368:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800836c:	4b2c      	ldr	r3, [pc, #176]	; (8008420 <_dtoa_r+0x600>)
 800836e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008372:	f7f8 f90d 	bl	8000590 <__aeabi_dmul>
 8008376:	e9cd 0100 	strd	r0, r1, [sp]
 800837a:	e7c4      	b.n	8008306 <_dtoa_r+0x4e6>
 800837c:	462a      	mov	r2, r5
 800837e:	4633      	mov	r3, r6
 8008380:	f7f8 f906 	bl	8000590 <__aeabi_dmul>
 8008384:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008388:	eb0b 0507 	add.w	r5, fp, r7
 800838c:	465e      	mov	r6, fp
 800838e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008392:	f7f8 fbad 	bl	8000af0 <__aeabi_d2iz>
 8008396:	4607      	mov	r7, r0
 8008398:	f7f8 f890 	bl	80004bc <__aeabi_i2d>
 800839c:	3730      	adds	r7, #48	; 0x30
 800839e:	4602      	mov	r2, r0
 80083a0:	460b      	mov	r3, r1
 80083a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083a6:	f7f7 ff3b 	bl	8000220 <__aeabi_dsub>
 80083aa:	f806 7b01 	strb.w	r7, [r6], #1
 80083ae:	42ae      	cmp	r6, r5
 80083b0:	e9cd 0100 	strd	r0, r1, [sp]
 80083b4:	f04f 0200 	mov.w	r2, #0
 80083b8:	d126      	bne.n	8008408 <_dtoa_r+0x5e8>
 80083ba:	4b1c      	ldr	r3, [pc, #112]	; (800842c <_dtoa_r+0x60c>)
 80083bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083c0:	f7f7 ff30 	bl	8000224 <__adddf3>
 80083c4:	4602      	mov	r2, r0
 80083c6:	460b      	mov	r3, r1
 80083c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083cc:	f7f8 fb70 	bl	8000ab0 <__aeabi_dcmpgt>
 80083d0:	2800      	cmp	r0, #0
 80083d2:	d174      	bne.n	80084be <_dtoa_r+0x69e>
 80083d4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80083d8:	2000      	movs	r0, #0
 80083da:	4914      	ldr	r1, [pc, #80]	; (800842c <_dtoa_r+0x60c>)
 80083dc:	f7f7 ff20 	bl	8000220 <__aeabi_dsub>
 80083e0:	4602      	mov	r2, r0
 80083e2:	460b      	mov	r3, r1
 80083e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083e8:	f7f8 fb44 	bl	8000a74 <__aeabi_dcmplt>
 80083ec:	2800      	cmp	r0, #0
 80083ee:	f43f af30 	beq.w	8008252 <_dtoa_r+0x432>
 80083f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80083f6:	2b30      	cmp	r3, #48	; 0x30
 80083f8:	f105 32ff 	add.w	r2, r5, #4294967295
 80083fc:	d002      	beq.n	8008404 <_dtoa_r+0x5e4>
 80083fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008402:	e04a      	b.n	800849a <_dtoa_r+0x67a>
 8008404:	4615      	mov	r5, r2
 8008406:	e7f4      	b.n	80083f2 <_dtoa_r+0x5d2>
 8008408:	4b05      	ldr	r3, [pc, #20]	; (8008420 <_dtoa_r+0x600>)
 800840a:	f7f8 f8c1 	bl	8000590 <__aeabi_dmul>
 800840e:	e9cd 0100 	strd	r0, r1, [sp]
 8008412:	e7bc      	b.n	800838e <_dtoa_r+0x56e>
 8008414:	08009760 	.word	0x08009760
 8008418:	08009738 	.word	0x08009738
 800841c:	3ff00000 	.word	0x3ff00000
 8008420:	40240000 	.word	0x40240000
 8008424:	401c0000 	.word	0x401c0000
 8008428:	40140000 	.word	0x40140000
 800842c:	3fe00000 	.word	0x3fe00000
 8008430:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008434:	465d      	mov	r5, fp
 8008436:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800843a:	4630      	mov	r0, r6
 800843c:	4639      	mov	r1, r7
 800843e:	f7f8 f9d1 	bl	80007e4 <__aeabi_ddiv>
 8008442:	f7f8 fb55 	bl	8000af0 <__aeabi_d2iz>
 8008446:	4680      	mov	r8, r0
 8008448:	f7f8 f838 	bl	80004bc <__aeabi_i2d>
 800844c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008450:	f7f8 f89e 	bl	8000590 <__aeabi_dmul>
 8008454:	4602      	mov	r2, r0
 8008456:	460b      	mov	r3, r1
 8008458:	4630      	mov	r0, r6
 800845a:	4639      	mov	r1, r7
 800845c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008460:	f7f7 fede 	bl	8000220 <__aeabi_dsub>
 8008464:	f805 6b01 	strb.w	r6, [r5], #1
 8008468:	eba5 060b 	sub.w	r6, r5, fp
 800846c:	45b1      	cmp	r9, r6
 800846e:	4602      	mov	r2, r0
 8008470:	460b      	mov	r3, r1
 8008472:	d139      	bne.n	80084e8 <_dtoa_r+0x6c8>
 8008474:	f7f7 fed6 	bl	8000224 <__adddf3>
 8008478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800847c:	4606      	mov	r6, r0
 800847e:	460f      	mov	r7, r1
 8008480:	f7f8 fb16 	bl	8000ab0 <__aeabi_dcmpgt>
 8008484:	b9c8      	cbnz	r0, 80084ba <_dtoa_r+0x69a>
 8008486:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800848a:	4630      	mov	r0, r6
 800848c:	4639      	mov	r1, r7
 800848e:	f7f8 fae7 	bl	8000a60 <__aeabi_dcmpeq>
 8008492:	b110      	cbz	r0, 800849a <_dtoa_r+0x67a>
 8008494:	f018 0f01 	tst.w	r8, #1
 8008498:	d10f      	bne.n	80084ba <_dtoa_r+0x69a>
 800849a:	9904      	ldr	r1, [sp, #16]
 800849c:	4620      	mov	r0, r4
 800849e:	f000 fcaa 	bl	8008df6 <_Bfree>
 80084a2:	2300      	movs	r3, #0
 80084a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80084a6:	702b      	strb	r3, [r5, #0]
 80084a8:	f10a 0301 	add.w	r3, sl, #1
 80084ac:	6013      	str	r3, [r2, #0]
 80084ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f000 8241 	beq.w	8008938 <_dtoa_r+0xb18>
 80084b6:	601d      	str	r5, [r3, #0]
 80084b8:	e23e      	b.n	8008938 <_dtoa_r+0xb18>
 80084ba:	f8cd a020 	str.w	sl, [sp, #32]
 80084be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80084c2:	2a39      	cmp	r2, #57	; 0x39
 80084c4:	f105 33ff 	add.w	r3, r5, #4294967295
 80084c8:	d108      	bne.n	80084dc <_dtoa_r+0x6bc>
 80084ca:	459b      	cmp	fp, r3
 80084cc:	d10a      	bne.n	80084e4 <_dtoa_r+0x6c4>
 80084ce:	9b08      	ldr	r3, [sp, #32]
 80084d0:	3301      	adds	r3, #1
 80084d2:	9308      	str	r3, [sp, #32]
 80084d4:	2330      	movs	r3, #48	; 0x30
 80084d6:	f88b 3000 	strb.w	r3, [fp]
 80084da:	465b      	mov	r3, fp
 80084dc:	781a      	ldrb	r2, [r3, #0]
 80084de:	3201      	adds	r2, #1
 80084e0:	701a      	strb	r2, [r3, #0]
 80084e2:	e78c      	b.n	80083fe <_dtoa_r+0x5de>
 80084e4:	461d      	mov	r5, r3
 80084e6:	e7ea      	b.n	80084be <_dtoa_r+0x69e>
 80084e8:	2200      	movs	r2, #0
 80084ea:	4b9b      	ldr	r3, [pc, #620]	; (8008758 <_dtoa_r+0x938>)
 80084ec:	f7f8 f850 	bl	8000590 <__aeabi_dmul>
 80084f0:	2200      	movs	r2, #0
 80084f2:	2300      	movs	r3, #0
 80084f4:	4606      	mov	r6, r0
 80084f6:	460f      	mov	r7, r1
 80084f8:	f7f8 fab2 	bl	8000a60 <__aeabi_dcmpeq>
 80084fc:	2800      	cmp	r0, #0
 80084fe:	d09a      	beq.n	8008436 <_dtoa_r+0x616>
 8008500:	e7cb      	b.n	800849a <_dtoa_r+0x67a>
 8008502:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008504:	2a00      	cmp	r2, #0
 8008506:	f000 808b 	beq.w	8008620 <_dtoa_r+0x800>
 800850a:	9a06      	ldr	r2, [sp, #24]
 800850c:	2a01      	cmp	r2, #1
 800850e:	dc6e      	bgt.n	80085ee <_dtoa_r+0x7ce>
 8008510:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008512:	2a00      	cmp	r2, #0
 8008514:	d067      	beq.n	80085e6 <_dtoa_r+0x7c6>
 8008516:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800851a:	9f07      	ldr	r7, [sp, #28]
 800851c:	9d05      	ldr	r5, [sp, #20]
 800851e:	9a05      	ldr	r2, [sp, #20]
 8008520:	2101      	movs	r1, #1
 8008522:	441a      	add	r2, r3
 8008524:	4620      	mov	r0, r4
 8008526:	9205      	str	r2, [sp, #20]
 8008528:	4498      	add	r8, r3
 800852a:	f000 fd04 	bl	8008f36 <__i2b>
 800852e:	4606      	mov	r6, r0
 8008530:	2d00      	cmp	r5, #0
 8008532:	dd0c      	ble.n	800854e <_dtoa_r+0x72e>
 8008534:	f1b8 0f00 	cmp.w	r8, #0
 8008538:	dd09      	ble.n	800854e <_dtoa_r+0x72e>
 800853a:	4545      	cmp	r5, r8
 800853c:	9a05      	ldr	r2, [sp, #20]
 800853e:	462b      	mov	r3, r5
 8008540:	bfa8      	it	ge
 8008542:	4643      	movge	r3, r8
 8008544:	1ad2      	subs	r2, r2, r3
 8008546:	9205      	str	r2, [sp, #20]
 8008548:	1aed      	subs	r5, r5, r3
 800854a:	eba8 0803 	sub.w	r8, r8, r3
 800854e:	9b07      	ldr	r3, [sp, #28]
 8008550:	b1eb      	cbz	r3, 800858e <_dtoa_r+0x76e>
 8008552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008554:	2b00      	cmp	r3, #0
 8008556:	d067      	beq.n	8008628 <_dtoa_r+0x808>
 8008558:	b18f      	cbz	r7, 800857e <_dtoa_r+0x75e>
 800855a:	4631      	mov	r1, r6
 800855c:	463a      	mov	r2, r7
 800855e:	4620      	mov	r0, r4
 8008560:	f000 fd88 	bl	8009074 <__pow5mult>
 8008564:	9a04      	ldr	r2, [sp, #16]
 8008566:	4601      	mov	r1, r0
 8008568:	4606      	mov	r6, r0
 800856a:	4620      	mov	r0, r4
 800856c:	f000 fcec 	bl	8008f48 <__multiply>
 8008570:	9904      	ldr	r1, [sp, #16]
 8008572:	9008      	str	r0, [sp, #32]
 8008574:	4620      	mov	r0, r4
 8008576:	f000 fc3e 	bl	8008df6 <_Bfree>
 800857a:	9b08      	ldr	r3, [sp, #32]
 800857c:	9304      	str	r3, [sp, #16]
 800857e:	9b07      	ldr	r3, [sp, #28]
 8008580:	1bda      	subs	r2, r3, r7
 8008582:	d004      	beq.n	800858e <_dtoa_r+0x76e>
 8008584:	9904      	ldr	r1, [sp, #16]
 8008586:	4620      	mov	r0, r4
 8008588:	f000 fd74 	bl	8009074 <__pow5mult>
 800858c:	9004      	str	r0, [sp, #16]
 800858e:	2101      	movs	r1, #1
 8008590:	4620      	mov	r0, r4
 8008592:	f000 fcd0 	bl	8008f36 <__i2b>
 8008596:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008598:	4607      	mov	r7, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	f000 81d0 	beq.w	8008940 <_dtoa_r+0xb20>
 80085a0:	461a      	mov	r2, r3
 80085a2:	4601      	mov	r1, r0
 80085a4:	4620      	mov	r0, r4
 80085a6:	f000 fd65 	bl	8009074 <__pow5mult>
 80085aa:	9b06      	ldr	r3, [sp, #24]
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	4607      	mov	r7, r0
 80085b0:	dc40      	bgt.n	8008634 <_dtoa_r+0x814>
 80085b2:	9b00      	ldr	r3, [sp, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d139      	bne.n	800862c <_dtoa_r+0x80c>
 80085b8:	9b01      	ldr	r3, [sp, #4]
 80085ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d136      	bne.n	8008630 <_dtoa_r+0x810>
 80085c2:	9b01      	ldr	r3, [sp, #4]
 80085c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085c8:	0d1b      	lsrs	r3, r3, #20
 80085ca:	051b      	lsls	r3, r3, #20
 80085cc:	b12b      	cbz	r3, 80085da <_dtoa_r+0x7ba>
 80085ce:	9b05      	ldr	r3, [sp, #20]
 80085d0:	3301      	adds	r3, #1
 80085d2:	9305      	str	r3, [sp, #20]
 80085d4:	f108 0801 	add.w	r8, r8, #1
 80085d8:	2301      	movs	r3, #1
 80085da:	9307      	str	r3, [sp, #28]
 80085dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d12a      	bne.n	8008638 <_dtoa_r+0x818>
 80085e2:	2001      	movs	r0, #1
 80085e4:	e030      	b.n	8008648 <_dtoa_r+0x828>
 80085e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80085e8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80085ec:	e795      	b.n	800851a <_dtoa_r+0x6fa>
 80085ee:	9b07      	ldr	r3, [sp, #28]
 80085f0:	f109 37ff 	add.w	r7, r9, #4294967295
 80085f4:	42bb      	cmp	r3, r7
 80085f6:	bfbf      	itttt	lt
 80085f8:	9b07      	ldrlt	r3, [sp, #28]
 80085fa:	9707      	strlt	r7, [sp, #28]
 80085fc:	1afa      	sublt	r2, r7, r3
 80085fe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008600:	bfbb      	ittet	lt
 8008602:	189b      	addlt	r3, r3, r2
 8008604:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008606:	1bdf      	subge	r7, r3, r7
 8008608:	2700      	movlt	r7, #0
 800860a:	f1b9 0f00 	cmp.w	r9, #0
 800860e:	bfb5      	itete	lt
 8008610:	9b05      	ldrlt	r3, [sp, #20]
 8008612:	9d05      	ldrge	r5, [sp, #20]
 8008614:	eba3 0509 	sublt.w	r5, r3, r9
 8008618:	464b      	movge	r3, r9
 800861a:	bfb8      	it	lt
 800861c:	2300      	movlt	r3, #0
 800861e:	e77e      	b.n	800851e <_dtoa_r+0x6fe>
 8008620:	9f07      	ldr	r7, [sp, #28]
 8008622:	9d05      	ldr	r5, [sp, #20]
 8008624:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008626:	e783      	b.n	8008530 <_dtoa_r+0x710>
 8008628:	9a07      	ldr	r2, [sp, #28]
 800862a:	e7ab      	b.n	8008584 <_dtoa_r+0x764>
 800862c:	2300      	movs	r3, #0
 800862e:	e7d4      	b.n	80085da <_dtoa_r+0x7ba>
 8008630:	9b00      	ldr	r3, [sp, #0]
 8008632:	e7d2      	b.n	80085da <_dtoa_r+0x7ba>
 8008634:	2300      	movs	r3, #0
 8008636:	9307      	str	r3, [sp, #28]
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800863e:	6918      	ldr	r0, [r3, #16]
 8008640:	f000 fc2b 	bl	8008e9a <__hi0bits>
 8008644:	f1c0 0020 	rsb	r0, r0, #32
 8008648:	4440      	add	r0, r8
 800864a:	f010 001f 	ands.w	r0, r0, #31
 800864e:	d047      	beq.n	80086e0 <_dtoa_r+0x8c0>
 8008650:	f1c0 0320 	rsb	r3, r0, #32
 8008654:	2b04      	cmp	r3, #4
 8008656:	dd3b      	ble.n	80086d0 <_dtoa_r+0x8b0>
 8008658:	9b05      	ldr	r3, [sp, #20]
 800865a:	f1c0 001c 	rsb	r0, r0, #28
 800865e:	4403      	add	r3, r0
 8008660:	9305      	str	r3, [sp, #20]
 8008662:	4405      	add	r5, r0
 8008664:	4480      	add	r8, r0
 8008666:	9b05      	ldr	r3, [sp, #20]
 8008668:	2b00      	cmp	r3, #0
 800866a:	dd05      	ble.n	8008678 <_dtoa_r+0x858>
 800866c:	461a      	mov	r2, r3
 800866e:	9904      	ldr	r1, [sp, #16]
 8008670:	4620      	mov	r0, r4
 8008672:	f000 fd4d 	bl	8009110 <__lshift>
 8008676:	9004      	str	r0, [sp, #16]
 8008678:	f1b8 0f00 	cmp.w	r8, #0
 800867c:	dd05      	ble.n	800868a <_dtoa_r+0x86a>
 800867e:	4639      	mov	r1, r7
 8008680:	4642      	mov	r2, r8
 8008682:	4620      	mov	r0, r4
 8008684:	f000 fd44 	bl	8009110 <__lshift>
 8008688:	4607      	mov	r7, r0
 800868a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800868c:	b353      	cbz	r3, 80086e4 <_dtoa_r+0x8c4>
 800868e:	4639      	mov	r1, r7
 8008690:	9804      	ldr	r0, [sp, #16]
 8008692:	f000 fd91 	bl	80091b8 <__mcmp>
 8008696:	2800      	cmp	r0, #0
 8008698:	da24      	bge.n	80086e4 <_dtoa_r+0x8c4>
 800869a:	2300      	movs	r3, #0
 800869c:	220a      	movs	r2, #10
 800869e:	9904      	ldr	r1, [sp, #16]
 80086a0:	4620      	mov	r0, r4
 80086a2:	f000 fbbf 	bl	8008e24 <__multadd>
 80086a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086a8:	9004      	str	r0, [sp, #16]
 80086aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	f000 814d 	beq.w	800894e <_dtoa_r+0xb2e>
 80086b4:	2300      	movs	r3, #0
 80086b6:	4631      	mov	r1, r6
 80086b8:	220a      	movs	r2, #10
 80086ba:	4620      	mov	r0, r4
 80086bc:	f000 fbb2 	bl	8008e24 <__multadd>
 80086c0:	9b02      	ldr	r3, [sp, #8]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	4606      	mov	r6, r0
 80086c6:	dc4f      	bgt.n	8008768 <_dtoa_r+0x948>
 80086c8:	9b06      	ldr	r3, [sp, #24]
 80086ca:	2b02      	cmp	r3, #2
 80086cc:	dd4c      	ble.n	8008768 <_dtoa_r+0x948>
 80086ce:	e011      	b.n	80086f4 <_dtoa_r+0x8d4>
 80086d0:	d0c9      	beq.n	8008666 <_dtoa_r+0x846>
 80086d2:	9a05      	ldr	r2, [sp, #20]
 80086d4:	331c      	adds	r3, #28
 80086d6:	441a      	add	r2, r3
 80086d8:	9205      	str	r2, [sp, #20]
 80086da:	441d      	add	r5, r3
 80086dc:	4498      	add	r8, r3
 80086de:	e7c2      	b.n	8008666 <_dtoa_r+0x846>
 80086e0:	4603      	mov	r3, r0
 80086e2:	e7f6      	b.n	80086d2 <_dtoa_r+0x8b2>
 80086e4:	f1b9 0f00 	cmp.w	r9, #0
 80086e8:	dc38      	bgt.n	800875c <_dtoa_r+0x93c>
 80086ea:	9b06      	ldr	r3, [sp, #24]
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	dd35      	ble.n	800875c <_dtoa_r+0x93c>
 80086f0:	f8cd 9008 	str.w	r9, [sp, #8]
 80086f4:	9b02      	ldr	r3, [sp, #8]
 80086f6:	b963      	cbnz	r3, 8008712 <_dtoa_r+0x8f2>
 80086f8:	4639      	mov	r1, r7
 80086fa:	2205      	movs	r2, #5
 80086fc:	4620      	mov	r0, r4
 80086fe:	f000 fb91 	bl	8008e24 <__multadd>
 8008702:	4601      	mov	r1, r0
 8008704:	4607      	mov	r7, r0
 8008706:	9804      	ldr	r0, [sp, #16]
 8008708:	f000 fd56 	bl	80091b8 <__mcmp>
 800870c:	2800      	cmp	r0, #0
 800870e:	f73f adcc 	bgt.w	80082aa <_dtoa_r+0x48a>
 8008712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008714:	465d      	mov	r5, fp
 8008716:	ea6f 0a03 	mvn.w	sl, r3
 800871a:	f04f 0900 	mov.w	r9, #0
 800871e:	4639      	mov	r1, r7
 8008720:	4620      	mov	r0, r4
 8008722:	f000 fb68 	bl	8008df6 <_Bfree>
 8008726:	2e00      	cmp	r6, #0
 8008728:	f43f aeb7 	beq.w	800849a <_dtoa_r+0x67a>
 800872c:	f1b9 0f00 	cmp.w	r9, #0
 8008730:	d005      	beq.n	800873e <_dtoa_r+0x91e>
 8008732:	45b1      	cmp	r9, r6
 8008734:	d003      	beq.n	800873e <_dtoa_r+0x91e>
 8008736:	4649      	mov	r1, r9
 8008738:	4620      	mov	r0, r4
 800873a:	f000 fb5c 	bl	8008df6 <_Bfree>
 800873e:	4631      	mov	r1, r6
 8008740:	4620      	mov	r0, r4
 8008742:	f000 fb58 	bl	8008df6 <_Bfree>
 8008746:	e6a8      	b.n	800849a <_dtoa_r+0x67a>
 8008748:	2700      	movs	r7, #0
 800874a:	463e      	mov	r6, r7
 800874c:	e7e1      	b.n	8008712 <_dtoa_r+0x8f2>
 800874e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008752:	463e      	mov	r6, r7
 8008754:	e5a9      	b.n	80082aa <_dtoa_r+0x48a>
 8008756:	bf00      	nop
 8008758:	40240000 	.word	0x40240000
 800875c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800875e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008762:	2b00      	cmp	r3, #0
 8008764:	f000 80fa 	beq.w	800895c <_dtoa_r+0xb3c>
 8008768:	2d00      	cmp	r5, #0
 800876a:	dd05      	ble.n	8008778 <_dtoa_r+0x958>
 800876c:	4631      	mov	r1, r6
 800876e:	462a      	mov	r2, r5
 8008770:	4620      	mov	r0, r4
 8008772:	f000 fccd 	bl	8009110 <__lshift>
 8008776:	4606      	mov	r6, r0
 8008778:	9b07      	ldr	r3, [sp, #28]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d04c      	beq.n	8008818 <_dtoa_r+0x9f8>
 800877e:	6871      	ldr	r1, [r6, #4]
 8008780:	4620      	mov	r0, r4
 8008782:	f000 fb04 	bl	8008d8e <_Balloc>
 8008786:	6932      	ldr	r2, [r6, #16]
 8008788:	3202      	adds	r2, #2
 800878a:	4605      	mov	r5, r0
 800878c:	0092      	lsls	r2, r2, #2
 800878e:	f106 010c 	add.w	r1, r6, #12
 8008792:	300c      	adds	r0, #12
 8008794:	f000 faf0 	bl	8008d78 <memcpy>
 8008798:	2201      	movs	r2, #1
 800879a:	4629      	mov	r1, r5
 800879c:	4620      	mov	r0, r4
 800879e:	f000 fcb7 	bl	8009110 <__lshift>
 80087a2:	9b00      	ldr	r3, [sp, #0]
 80087a4:	f8cd b014 	str.w	fp, [sp, #20]
 80087a8:	f003 0301 	and.w	r3, r3, #1
 80087ac:	46b1      	mov	r9, r6
 80087ae:	9307      	str	r3, [sp, #28]
 80087b0:	4606      	mov	r6, r0
 80087b2:	4639      	mov	r1, r7
 80087b4:	9804      	ldr	r0, [sp, #16]
 80087b6:	f7ff faa7 	bl	8007d08 <quorem>
 80087ba:	4649      	mov	r1, r9
 80087bc:	4605      	mov	r5, r0
 80087be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80087c2:	9804      	ldr	r0, [sp, #16]
 80087c4:	f000 fcf8 	bl	80091b8 <__mcmp>
 80087c8:	4632      	mov	r2, r6
 80087ca:	9000      	str	r0, [sp, #0]
 80087cc:	4639      	mov	r1, r7
 80087ce:	4620      	mov	r0, r4
 80087d0:	f000 fd0c 	bl	80091ec <__mdiff>
 80087d4:	68c3      	ldr	r3, [r0, #12]
 80087d6:	4602      	mov	r2, r0
 80087d8:	bb03      	cbnz	r3, 800881c <_dtoa_r+0x9fc>
 80087da:	4601      	mov	r1, r0
 80087dc:	9008      	str	r0, [sp, #32]
 80087de:	9804      	ldr	r0, [sp, #16]
 80087e0:	f000 fcea 	bl	80091b8 <__mcmp>
 80087e4:	9a08      	ldr	r2, [sp, #32]
 80087e6:	4603      	mov	r3, r0
 80087e8:	4611      	mov	r1, r2
 80087ea:	4620      	mov	r0, r4
 80087ec:	9308      	str	r3, [sp, #32]
 80087ee:	f000 fb02 	bl	8008df6 <_Bfree>
 80087f2:	9b08      	ldr	r3, [sp, #32]
 80087f4:	b9a3      	cbnz	r3, 8008820 <_dtoa_r+0xa00>
 80087f6:	9a06      	ldr	r2, [sp, #24]
 80087f8:	b992      	cbnz	r2, 8008820 <_dtoa_r+0xa00>
 80087fa:	9a07      	ldr	r2, [sp, #28]
 80087fc:	b982      	cbnz	r2, 8008820 <_dtoa_r+0xa00>
 80087fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008802:	d029      	beq.n	8008858 <_dtoa_r+0xa38>
 8008804:	9b00      	ldr	r3, [sp, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	dd01      	ble.n	800880e <_dtoa_r+0x9ee>
 800880a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800880e:	9b05      	ldr	r3, [sp, #20]
 8008810:	1c5d      	adds	r5, r3, #1
 8008812:	f883 8000 	strb.w	r8, [r3]
 8008816:	e782      	b.n	800871e <_dtoa_r+0x8fe>
 8008818:	4630      	mov	r0, r6
 800881a:	e7c2      	b.n	80087a2 <_dtoa_r+0x982>
 800881c:	2301      	movs	r3, #1
 800881e:	e7e3      	b.n	80087e8 <_dtoa_r+0x9c8>
 8008820:	9a00      	ldr	r2, [sp, #0]
 8008822:	2a00      	cmp	r2, #0
 8008824:	db04      	blt.n	8008830 <_dtoa_r+0xa10>
 8008826:	d125      	bne.n	8008874 <_dtoa_r+0xa54>
 8008828:	9a06      	ldr	r2, [sp, #24]
 800882a:	bb1a      	cbnz	r2, 8008874 <_dtoa_r+0xa54>
 800882c:	9a07      	ldr	r2, [sp, #28]
 800882e:	bb0a      	cbnz	r2, 8008874 <_dtoa_r+0xa54>
 8008830:	2b00      	cmp	r3, #0
 8008832:	ddec      	ble.n	800880e <_dtoa_r+0x9ee>
 8008834:	2201      	movs	r2, #1
 8008836:	9904      	ldr	r1, [sp, #16]
 8008838:	4620      	mov	r0, r4
 800883a:	f000 fc69 	bl	8009110 <__lshift>
 800883e:	4639      	mov	r1, r7
 8008840:	9004      	str	r0, [sp, #16]
 8008842:	f000 fcb9 	bl	80091b8 <__mcmp>
 8008846:	2800      	cmp	r0, #0
 8008848:	dc03      	bgt.n	8008852 <_dtoa_r+0xa32>
 800884a:	d1e0      	bne.n	800880e <_dtoa_r+0x9ee>
 800884c:	f018 0f01 	tst.w	r8, #1
 8008850:	d0dd      	beq.n	800880e <_dtoa_r+0x9ee>
 8008852:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008856:	d1d8      	bne.n	800880a <_dtoa_r+0x9ea>
 8008858:	9b05      	ldr	r3, [sp, #20]
 800885a:	9a05      	ldr	r2, [sp, #20]
 800885c:	1c5d      	adds	r5, r3, #1
 800885e:	2339      	movs	r3, #57	; 0x39
 8008860:	7013      	strb	r3, [r2, #0]
 8008862:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008866:	2b39      	cmp	r3, #57	; 0x39
 8008868:	f105 32ff 	add.w	r2, r5, #4294967295
 800886c:	d04f      	beq.n	800890e <_dtoa_r+0xaee>
 800886e:	3301      	adds	r3, #1
 8008870:	7013      	strb	r3, [r2, #0]
 8008872:	e754      	b.n	800871e <_dtoa_r+0x8fe>
 8008874:	9a05      	ldr	r2, [sp, #20]
 8008876:	2b00      	cmp	r3, #0
 8008878:	f102 0501 	add.w	r5, r2, #1
 800887c:	dd06      	ble.n	800888c <_dtoa_r+0xa6c>
 800887e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008882:	d0e9      	beq.n	8008858 <_dtoa_r+0xa38>
 8008884:	f108 0801 	add.w	r8, r8, #1
 8008888:	9b05      	ldr	r3, [sp, #20]
 800888a:	e7c2      	b.n	8008812 <_dtoa_r+0x9f2>
 800888c:	9a02      	ldr	r2, [sp, #8]
 800888e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008892:	eba5 030b 	sub.w	r3, r5, fp
 8008896:	4293      	cmp	r3, r2
 8008898:	d021      	beq.n	80088de <_dtoa_r+0xabe>
 800889a:	2300      	movs	r3, #0
 800889c:	220a      	movs	r2, #10
 800889e:	9904      	ldr	r1, [sp, #16]
 80088a0:	4620      	mov	r0, r4
 80088a2:	f000 fabf 	bl	8008e24 <__multadd>
 80088a6:	45b1      	cmp	r9, r6
 80088a8:	9004      	str	r0, [sp, #16]
 80088aa:	f04f 0300 	mov.w	r3, #0
 80088ae:	f04f 020a 	mov.w	r2, #10
 80088b2:	4649      	mov	r1, r9
 80088b4:	4620      	mov	r0, r4
 80088b6:	d105      	bne.n	80088c4 <_dtoa_r+0xaa4>
 80088b8:	f000 fab4 	bl	8008e24 <__multadd>
 80088bc:	4681      	mov	r9, r0
 80088be:	4606      	mov	r6, r0
 80088c0:	9505      	str	r5, [sp, #20]
 80088c2:	e776      	b.n	80087b2 <_dtoa_r+0x992>
 80088c4:	f000 faae 	bl	8008e24 <__multadd>
 80088c8:	4631      	mov	r1, r6
 80088ca:	4681      	mov	r9, r0
 80088cc:	2300      	movs	r3, #0
 80088ce:	220a      	movs	r2, #10
 80088d0:	4620      	mov	r0, r4
 80088d2:	f000 faa7 	bl	8008e24 <__multadd>
 80088d6:	4606      	mov	r6, r0
 80088d8:	e7f2      	b.n	80088c0 <_dtoa_r+0xaa0>
 80088da:	f04f 0900 	mov.w	r9, #0
 80088de:	2201      	movs	r2, #1
 80088e0:	9904      	ldr	r1, [sp, #16]
 80088e2:	4620      	mov	r0, r4
 80088e4:	f000 fc14 	bl	8009110 <__lshift>
 80088e8:	4639      	mov	r1, r7
 80088ea:	9004      	str	r0, [sp, #16]
 80088ec:	f000 fc64 	bl	80091b8 <__mcmp>
 80088f0:	2800      	cmp	r0, #0
 80088f2:	dcb6      	bgt.n	8008862 <_dtoa_r+0xa42>
 80088f4:	d102      	bne.n	80088fc <_dtoa_r+0xadc>
 80088f6:	f018 0f01 	tst.w	r8, #1
 80088fa:	d1b2      	bne.n	8008862 <_dtoa_r+0xa42>
 80088fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008900:	2b30      	cmp	r3, #48	; 0x30
 8008902:	f105 32ff 	add.w	r2, r5, #4294967295
 8008906:	f47f af0a 	bne.w	800871e <_dtoa_r+0x8fe>
 800890a:	4615      	mov	r5, r2
 800890c:	e7f6      	b.n	80088fc <_dtoa_r+0xadc>
 800890e:	4593      	cmp	fp, r2
 8008910:	d105      	bne.n	800891e <_dtoa_r+0xafe>
 8008912:	2331      	movs	r3, #49	; 0x31
 8008914:	f10a 0a01 	add.w	sl, sl, #1
 8008918:	f88b 3000 	strb.w	r3, [fp]
 800891c:	e6ff      	b.n	800871e <_dtoa_r+0x8fe>
 800891e:	4615      	mov	r5, r2
 8008920:	e79f      	b.n	8008862 <_dtoa_r+0xa42>
 8008922:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008988 <_dtoa_r+0xb68>
 8008926:	e007      	b.n	8008938 <_dtoa_r+0xb18>
 8008928:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800892a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800898c <_dtoa_r+0xb6c>
 800892e:	b11b      	cbz	r3, 8008938 <_dtoa_r+0xb18>
 8008930:	f10b 0308 	add.w	r3, fp, #8
 8008934:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008936:	6013      	str	r3, [r2, #0]
 8008938:	4658      	mov	r0, fp
 800893a:	b017      	add	sp, #92	; 0x5c
 800893c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008940:	9b06      	ldr	r3, [sp, #24]
 8008942:	2b01      	cmp	r3, #1
 8008944:	f77f ae35 	ble.w	80085b2 <_dtoa_r+0x792>
 8008948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800894a:	9307      	str	r3, [sp, #28]
 800894c:	e649      	b.n	80085e2 <_dtoa_r+0x7c2>
 800894e:	9b02      	ldr	r3, [sp, #8]
 8008950:	2b00      	cmp	r3, #0
 8008952:	dc03      	bgt.n	800895c <_dtoa_r+0xb3c>
 8008954:	9b06      	ldr	r3, [sp, #24]
 8008956:	2b02      	cmp	r3, #2
 8008958:	f73f aecc 	bgt.w	80086f4 <_dtoa_r+0x8d4>
 800895c:	465d      	mov	r5, fp
 800895e:	4639      	mov	r1, r7
 8008960:	9804      	ldr	r0, [sp, #16]
 8008962:	f7ff f9d1 	bl	8007d08 <quorem>
 8008966:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800896a:	f805 8b01 	strb.w	r8, [r5], #1
 800896e:	9a02      	ldr	r2, [sp, #8]
 8008970:	eba5 030b 	sub.w	r3, r5, fp
 8008974:	429a      	cmp	r2, r3
 8008976:	ddb0      	ble.n	80088da <_dtoa_r+0xaba>
 8008978:	2300      	movs	r3, #0
 800897a:	220a      	movs	r2, #10
 800897c:	9904      	ldr	r1, [sp, #16]
 800897e:	4620      	mov	r0, r4
 8008980:	f000 fa50 	bl	8008e24 <__multadd>
 8008984:	9004      	str	r0, [sp, #16]
 8008986:	e7ea      	b.n	800895e <_dtoa_r+0xb3e>
 8008988:	080096c8 	.word	0x080096c8
 800898c:	080096ca 	.word	0x080096ca

08008990 <__sflush_r>:
 8008990:	898a      	ldrh	r2, [r1, #12]
 8008992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008996:	4605      	mov	r5, r0
 8008998:	0710      	lsls	r0, r2, #28
 800899a:	460c      	mov	r4, r1
 800899c:	d458      	bmi.n	8008a50 <__sflush_r+0xc0>
 800899e:	684b      	ldr	r3, [r1, #4]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	dc05      	bgt.n	80089b0 <__sflush_r+0x20>
 80089a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	dc02      	bgt.n	80089b0 <__sflush_r+0x20>
 80089aa:	2000      	movs	r0, #0
 80089ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089b2:	2e00      	cmp	r6, #0
 80089b4:	d0f9      	beq.n	80089aa <__sflush_r+0x1a>
 80089b6:	2300      	movs	r3, #0
 80089b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80089bc:	682f      	ldr	r7, [r5, #0]
 80089be:	6a21      	ldr	r1, [r4, #32]
 80089c0:	602b      	str	r3, [r5, #0]
 80089c2:	d032      	beq.n	8008a2a <__sflush_r+0x9a>
 80089c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80089c6:	89a3      	ldrh	r3, [r4, #12]
 80089c8:	075a      	lsls	r2, r3, #29
 80089ca:	d505      	bpl.n	80089d8 <__sflush_r+0x48>
 80089cc:	6863      	ldr	r3, [r4, #4]
 80089ce:	1ac0      	subs	r0, r0, r3
 80089d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089d2:	b10b      	cbz	r3, 80089d8 <__sflush_r+0x48>
 80089d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089d6:	1ac0      	subs	r0, r0, r3
 80089d8:	2300      	movs	r3, #0
 80089da:	4602      	mov	r2, r0
 80089dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089de:	6a21      	ldr	r1, [r4, #32]
 80089e0:	4628      	mov	r0, r5
 80089e2:	47b0      	blx	r6
 80089e4:	1c43      	adds	r3, r0, #1
 80089e6:	89a3      	ldrh	r3, [r4, #12]
 80089e8:	d106      	bne.n	80089f8 <__sflush_r+0x68>
 80089ea:	6829      	ldr	r1, [r5, #0]
 80089ec:	291d      	cmp	r1, #29
 80089ee:	d848      	bhi.n	8008a82 <__sflush_r+0xf2>
 80089f0:	4a29      	ldr	r2, [pc, #164]	; (8008a98 <__sflush_r+0x108>)
 80089f2:	40ca      	lsrs	r2, r1
 80089f4:	07d6      	lsls	r6, r2, #31
 80089f6:	d544      	bpl.n	8008a82 <__sflush_r+0xf2>
 80089f8:	2200      	movs	r2, #0
 80089fa:	6062      	str	r2, [r4, #4]
 80089fc:	04d9      	lsls	r1, r3, #19
 80089fe:	6922      	ldr	r2, [r4, #16]
 8008a00:	6022      	str	r2, [r4, #0]
 8008a02:	d504      	bpl.n	8008a0e <__sflush_r+0x7e>
 8008a04:	1c42      	adds	r2, r0, #1
 8008a06:	d101      	bne.n	8008a0c <__sflush_r+0x7c>
 8008a08:	682b      	ldr	r3, [r5, #0]
 8008a0a:	b903      	cbnz	r3, 8008a0e <__sflush_r+0x7e>
 8008a0c:	6560      	str	r0, [r4, #84]	; 0x54
 8008a0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a10:	602f      	str	r7, [r5, #0]
 8008a12:	2900      	cmp	r1, #0
 8008a14:	d0c9      	beq.n	80089aa <__sflush_r+0x1a>
 8008a16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a1a:	4299      	cmp	r1, r3
 8008a1c:	d002      	beq.n	8008a24 <__sflush_r+0x94>
 8008a1e:	4628      	mov	r0, r5
 8008a20:	f000 fc9e 	bl	8009360 <_free_r>
 8008a24:	2000      	movs	r0, #0
 8008a26:	6360      	str	r0, [r4, #52]	; 0x34
 8008a28:	e7c0      	b.n	80089ac <__sflush_r+0x1c>
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	47b0      	blx	r6
 8008a30:	1c41      	adds	r1, r0, #1
 8008a32:	d1c8      	bne.n	80089c6 <__sflush_r+0x36>
 8008a34:	682b      	ldr	r3, [r5, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d0c5      	beq.n	80089c6 <__sflush_r+0x36>
 8008a3a:	2b1d      	cmp	r3, #29
 8008a3c:	d001      	beq.n	8008a42 <__sflush_r+0xb2>
 8008a3e:	2b16      	cmp	r3, #22
 8008a40:	d101      	bne.n	8008a46 <__sflush_r+0xb6>
 8008a42:	602f      	str	r7, [r5, #0]
 8008a44:	e7b1      	b.n	80089aa <__sflush_r+0x1a>
 8008a46:	89a3      	ldrh	r3, [r4, #12]
 8008a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a4c:	81a3      	strh	r3, [r4, #12]
 8008a4e:	e7ad      	b.n	80089ac <__sflush_r+0x1c>
 8008a50:	690f      	ldr	r7, [r1, #16]
 8008a52:	2f00      	cmp	r7, #0
 8008a54:	d0a9      	beq.n	80089aa <__sflush_r+0x1a>
 8008a56:	0793      	lsls	r3, r2, #30
 8008a58:	680e      	ldr	r6, [r1, #0]
 8008a5a:	bf08      	it	eq
 8008a5c:	694b      	ldreq	r3, [r1, #20]
 8008a5e:	600f      	str	r7, [r1, #0]
 8008a60:	bf18      	it	ne
 8008a62:	2300      	movne	r3, #0
 8008a64:	eba6 0807 	sub.w	r8, r6, r7
 8008a68:	608b      	str	r3, [r1, #8]
 8008a6a:	f1b8 0f00 	cmp.w	r8, #0
 8008a6e:	dd9c      	ble.n	80089aa <__sflush_r+0x1a>
 8008a70:	4643      	mov	r3, r8
 8008a72:	463a      	mov	r2, r7
 8008a74:	6a21      	ldr	r1, [r4, #32]
 8008a76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a78:	4628      	mov	r0, r5
 8008a7a:	47b0      	blx	r6
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	dc06      	bgt.n	8008a8e <__sflush_r+0xfe>
 8008a80:	89a3      	ldrh	r3, [r4, #12]
 8008a82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a86:	81a3      	strh	r3, [r4, #12]
 8008a88:	f04f 30ff 	mov.w	r0, #4294967295
 8008a8c:	e78e      	b.n	80089ac <__sflush_r+0x1c>
 8008a8e:	4407      	add	r7, r0
 8008a90:	eba8 0800 	sub.w	r8, r8, r0
 8008a94:	e7e9      	b.n	8008a6a <__sflush_r+0xda>
 8008a96:	bf00      	nop
 8008a98:	20400001 	.word	0x20400001

08008a9c <_fflush_r>:
 8008a9c:	b538      	push	{r3, r4, r5, lr}
 8008a9e:	690b      	ldr	r3, [r1, #16]
 8008aa0:	4605      	mov	r5, r0
 8008aa2:	460c      	mov	r4, r1
 8008aa4:	b1db      	cbz	r3, 8008ade <_fflush_r+0x42>
 8008aa6:	b118      	cbz	r0, 8008ab0 <_fflush_r+0x14>
 8008aa8:	6983      	ldr	r3, [r0, #24]
 8008aaa:	b90b      	cbnz	r3, 8008ab0 <_fflush_r+0x14>
 8008aac:	f000 f860 	bl	8008b70 <__sinit>
 8008ab0:	4b0c      	ldr	r3, [pc, #48]	; (8008ae4 <_fflush_r+0x48>)
 8008ab2:	429c      	cmp	r4, r3
 8008ab4:	d109      	bne.n	8008aca <_fflush_r+0x2e>
 8008ab6:	686c      	ldr	r4, [r5, #4]
 8008ab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008abc:	b17b      	cbz	r3, 8008ade <_fflush_r+0x42>
 8008abe:	4621      	mov	r1, r4
 8008ac0:	4628      	mov	r0, r5
 8008ac2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ac6:	f7ff bf63 	b.w	8008990 <__sflush_r>
 8008aca:	4b07      	ldr	r3, [pc, #28]	; (8008ae8 <_fflush_r+0x4c>)
 8008acc:	429c      	cmp	r4, r3
 8008ace:	d101      	bne.n	8008ad4 <_fflush_r+0x38>
 8008ad0:	68ac      	ldr	r4, [r5, #8]
 8008ad2:	e7f1      	b.n	8008ab8 <_fflush_r+0x1c>
 8008ad4:	4b05      	ldr	r3, [pc, #20]	; (8008aec <_fflush_r+0x50>)
 8008ad6:	429c      	cmp	r4, r3
 8008ad8:	bf08      	it	eq
 8008ada:	68ec      	ldreq	r4, [r5, #12]
 8008adc:	e7ec      	b.n	8008ab8 <_fflush_r+0x1c>
 8008ade:	2000      	movs	r0, #0
 8008ae0:	bd38      	pop	{r3, r4, r5, pc}
 8008ae2:	bf00      	nop
 8008ae4:	080096f8 	.word	0x080096f8
 8008ae8:	08009718 	.word	0x08009718
 8008aec:	080096d8 	.word	0x080096d8

08008af0 <std>:
 8008af0:	2300      	movs	r3, #0
 8008af2:	b510      	push	{r4, lr}
 8008af4:	4604      	mov	r4, r0
 8008af6:	e9c0 3300 	strd	r3, r3, [r0]
 8008afa:	6083      	str	r3, [r0, #8]
 8008afc:	8181      	strh	r1, [r0, #12]
 8008afe:	6643      	str	r3, [r0, #100]	; 0x64
 8008b00:	81c2      	strh	r2, [r0, #14]
 8008b02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b06:	6183      	str	r3, [r0, #24]
 8008b08:	4619      	mov	r1, r3
 8008b0a:	2208      	movs	r2, #8
 8008b0c:	305c      	adds	r0, #92	; 0x5c
 8008b0e:	f7fe fbcf 	bl	80072b0 <memset>
 8008b12:	4b05      	ldr	r3, [pc, #20]	; (8008b28 <std+0x38>)
 8008b14:	6263      	str	r3, [r4, #36]	; 0x24
 8008b16:	4b05      	ldr	r3, [pc, #20]	; (8008b2c <std+0x3c>)
 8008b18:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b1a:	4b05      	ldr	r3, [pc, #20]	; (8008b30 <std+0x40>)
 8008b1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b1e:	4b05      	ldr	r3, [pc, #20]	; (8008b34 <std+0x44>)
 8008b20:	6224      	str	r4, [r4, #32]
 8008b22:	6323      	str	r3, [r4, #48]	; 0x30
 8008b24:	bd10      	pop	{r4, pc}
 8008b26:	bf00      	nop
 8008b28:	080094d1 	.word	0x080094d1
 8008b2c:	080094f3 	.word	0x080094f3
 8008b30:	0800952b 	.word	0x0800952b
 8008b34:	0800954f 	.word	0x0800954f

08008b38 <_cleanup_r>:
 8008b38:	4901      	ldr	r1, [pc, #4]	; (8008b40 <_cleanup_r+0x8>)
 8008b3a:	f000 b885 	b.w	8008c48 <_fwalk_reent>
 8008b3e:	bf00      	nop
 8008b40:	08008a9d 	.word	0x08008a9d

08008b44 <__sfmoreglue>:
 8008b44:	b570      	push	{r4, r5, r6, lr}
 8008b46:	1e4a      	subs	r2, r1, #1
 8008b48:	2568      	movs	r5, #104	; 0x68
 8008b4a:	4355      	muls	r5, r2
 8008b4c:	460e      	mov	r6, r1
 8008b4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008b52:	f000 fc53 	bl	80093fc <_malloc_r>
 8008b56:	4604      	mov	r4, r0
 8008b58:	b140      	cbz	r0, 8008b6c <__sfmoreglue+0x28>
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	e9c0 1600 	strd	r1, r6, [r0]
 8008b60:	300c      	adds	r0, #12
 8008b62:	60a0      	str	r0, [r4, #8]
 8008b64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008b68:	f7fe fba2 	bl	80072b0 <memset>
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	bd70      	pop	{r4, r5, r6, pc}

08008b70 <__sinit>:
 8008b70:	6983      	ldr	r3, [r0, #24]
 8008b72:	b510      	push	{r4, lr}
 8008b74:	4604      	mov	r4, r0
 8008b76:	bb33      	cbnz	r3, 8008bc6 <__sinit+0x56>
 8008b78:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008b7c:	6503      	str	r3, [r0, #80]	; 0x50
 8008b7e:	4b12      	ldr	r3, [pc, #72]	; (8008bc8 <__sinit+0x58>)
 8008b80:	4a12      	ldr	r2, [pc, #72]	; (8008bcc <__sinit+0x5c>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	6282      	str	r2, [r0, #40]	; 0x28
 8008b86:	4298      	cmp	r0, r3
 8008b88:	bf04      	itt	eq
 8008b8a:	2301      	moveq	r3, #1
 8008b8c:	6183      	streq	r3, [r0, #24]
 8008b8e:	f000 f81f 	bl	8008bd0 <__sfp>
 8008b92:	6060      	str	r0, [r4, #4]
 8008b94:	4620      	mov	r0, r4
 8008b96:	f000 f81b 	bl	8008bd0 <__sfp>
 8008b9a:	60a0      	str	r0, [r4, #8]
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	f000 f817 	bl	8008bd0 <__sfp>
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	60e0      	str	r0, [r4, #12]
 8008ba6:	2104      	movs	r1, #4
 8008ba8:	6860      	ldr	r0, [r4, #4]
 8008baa:	f7ff ffa1 	bl	8008af0 <std>
 8008bae:	2201      	movs	r2, #1
 8008bb0:	2109      	movs	r1, #9
 8008bb2:	68a0      	ldr	r0, [r4, #8]
 8008bb4:	f7ff ff9c 	bl	8008af0 <std>
 8008bb8:	2202      	movs	r2, #2
 8008bba:	2112      	movs	r1, #18
 8008bbc:	68e0      	ldr	r0, [r4, #12]
 8008bbe:	f7ff ff97 	bl	8008af0 <std>
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	61a3      	str	r3, [r4, #24]
 8008bc6:	bd10      	pop	{r4, pc}
 8008bc8:	080096b4 	.word	0x080096b4
 8008bcc:	08008b39 	.word	0x08008b39

08008bd0 <__sfp>:
 8008bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd2:	4b1b      	ldr	r3, [pc, #108]	; (8008c40 <__sfp+0x70>)
 8008bd4:	681e      	ldr	r6, [r3, #0]
 8008bd6:	69b3      	ldr	r3, [r6, #24]
 8008bd8:	4607      	mov	r7, r0
 8008bda:	b913      	cbnz	r3, 8008be2 <__sfp+0x12>
 8008bdc:	4630      	mov	r0, r6
 8008bde:	f7ff ffc7 	bl	8008b70 <__sinit>
 8008be2:	3648      	adds	r6, #72	; 0x48
 8008be4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008be8:	3b01      	subs	r3, #1
 8008bea:	d503      	bpl.n	8008bf4 <__sfp+0x24>
 8008bec:	6833      	ldr	r3, [r6, #0]
 8008bee:	b133      	cbz	r3, 8008bfe <__sfp+0x2e>
 8008bf0:	6836      	ldr	r6, [r6, #0]
 8008bf2:	e7f7      	b.n	8008be4 <__sfp+0x14>
 8008bf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008bf8:	b16d      	cbz	r5, 8008c16 <__sfp+0x46>
 8008bfa:	3468      	adds	r4, #104	; 0x68
 8008bfc:	e7f4      	b.n	8008be8 <__sfp+0x18>
 8008bfe:	2104      	movs	r1, #4
 8008c00:	4638      	mov	r0, r7
 8008c02:	f7ff ff9f 	bl	8008b44 <__sfmoreglue>
 8008c06:	6030      	str	r0, [r6, #0]
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	d1f1      	bne.n	8008bf0 <__sfp+0x20>
 8008c0c:	230c      	movs	r3, #12
 8008c0e:	603b      	str	r3, [r7, #0]
 8008c10:	4604      	mov	r4, r0
 8008c12:	4620      	mov	r0, r4
 8008c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c16:	4b0b      	ldr	r3, [pc, #44]	; (8008c44 <__sfp+0x74>)
 8008c18:	6665      	str	r5, [r4, #100]	; 0x64
 8008c1a:	e9c4 5500 	strd	r5, r5, [r4]
 8008c1e:	60a5      	str	r5, [r4, #8]
 8008c20:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008c24:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008c28:	2208      	movs	r2, #8
 8008c2a:	4629      	mov	r1, r5
 8008c2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008c30:	f7fe fb3e 	bl	80072b0 <memset>
 8008c34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008c38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008c3c:	e7e9      	b.n	8008c12 <__sfp+0x42>
 8008c3e:	bf00      	nop
 8008c40:	080096b4 	.word	0x080096b4
 8008c44:	ffff0001 	.word	0xffff0001

08008c48 <_fwalk_reent>:
 8008c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c4c:	4680      	mov	r8, r0
 8008c4e:	4689      	mov	r9, r1
 8008c50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c54:	2600      	movs	r6, #0
 8008c56:	b914      	cbnz	r4, 8008c5e <_fwalk_reent+0x16>
 8008c58:	4630      	mov	r0, r6
 8008c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c5e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008c62:	3f01      	subs	r7, #1
 8008c64:	d501      	bpl.n	8008c6a <_fwalk_reent+0x22>
 8008c66:	6824      	ldr	r4, [r4, #0]
 8008c68:	e7f5      	b.n	8008c56 <_fwalk_reent+0xe>
 8008c6a:	89ab      	ldrh	r3, [r5, #12]
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d907      	bls.n	8008c80 <_fwalk_reent+0x38>
 8008c70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c74:	3301      	adds	r3, #1
 8008c76:	d003      	beq.n	8008c80 <_fwalk_reent+0x38>
 8008c78:	4629      	mov	r1, r5
 8008c7a:	4640      	mov	r0, r8
 8008c7c:	47c8      	blx	r9
 8008c7e:	4306      	orrs	r6, r0
 8008c80:	3568      	adds	r5, #104	; 0x68
 8008c82:	e7ee      	b.n	8008c62 <_fwalk_reent+0x1a>

08008c84 <_localeconv_r>:
 8008c84:	4b04      	ldr	r3, [pc, #16]	; (8008c98 <_localeconv_r+0x14>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	6a18      	ldr	r0, [r3, #32]
 8008c8a:	4b04      	ldr	r3, [pc, #16]	; (8008c9c <_localeconv_r+0x18>)
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	bf08      	it	eq
 8008c90:	4618      	moveq	r0, r3
 8008c92:	30f0      	adds	r0, #240	; 0xf0
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop
 8008c98:	2000000c 	.word	0x2000000c
 8008c9c:	20000070 	.word	0x20000070

08008ca0 <__swhatbuf_r>:
 8008ca0:	b570      	push	{r4, r5, r6, lr}
 8008ca2:	460e      	mov	r6, r1
 8008ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ca8:	2900      	cmp	r1, #0
 8008caa:	b096      	sub	sp, #88	; 0x58
 8008cac:	4614      	mov	r4, r2
 8008cae:	461d      	mov	r5, r3
 8008cb0:	da07      	bge.n	8008cc2 <__swhatbuf_r+0x22>
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	602b      	str	r3, [r5, #0]
 8008cb6:	89b3      	ldrh	r3, [r6, #12]
 8008cb8:	061a      	lsls	r2, r3, #24
 8008cba:	d410      	bmi.n	8008cde <__swhatbuf_r+0x3e>
 8008cbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cc0:	e00e      	b.n	8008ce0 <__swhatbuf_r+0x40>
 8008cc2:	466a      	mov	r2, sp
 8008cc4:	f000 fc6a 	bl	800959c <_fstat_r>
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	dbf2      	blt.n	8008cb2 <__swhatbuf_r+0x12>
 8008ccc:	9a01      	ldr	r2, [sp, #4]
 8008cce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008cd2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008cd6:	425a      	negs	r2, r3
 8008cd8:	415a      	adcs	r2, r3
 8008cda:	602a      	str	r2, [r5, #0]
 8008cdc:	e7ee      	b.n	8008cbc <__swhatbuf_r+0x1c>
 8008cde:	2340      	movs	r3, #64	; 0x40
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	6023      	str	r3, [r4, #0]
 8008ce4:	b016      	add	sp, #88	; 0x58
 8008ce6:	bd70      	pop	{r4, r5, r6, pc}

08008ce8 <__smakebuf_r>:
 8008ce8:	898b      	ldrh	r3, [r1, #12]
 8008cea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cec:	079d      	lsls	r5, r3, #30
 8008cee:	4606      	mov	r6, r0
 8008cf0:	460c      	mov	r4, r1
 8008cf2:	d507      	bpl.n	8008d04 <__smakebuf_r+0x1c>
 8008cf4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008cf8:	6023      	str	r3, [r4, #0]
 8008cfa:	6123      	str	r3, [r4, #16]
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	6163      	str	r3, [r4, #20]
 8008d00:	b002      	add	sp, #8
 8008d02:	bd70      	pop	{r4, r5, r6, pc}
 8008d04:	ab01      	add	r3, sp, #4
 8008d06:	466a      	mov	r2, sp
 8008d08:	f7ff ffca 	bl	8008ca0 <__swhatbuf_r>
 8008d0c:	9900      	ldr	r1, [sp, #0]
 8008d0e:	4605      	mov	r5, r0
 8008d10:	4630      	mov	r0, r6
 8008d12:	f000 fb73 	bl	80093fc <_malloc_r>
 8008d16:	b948      	cbnz	r0, 8008d2c <__smakebuf_r+0x44>
 8008d18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d1c:	059a      	lsls	r2, r3, #22
 8008d1e:	d4ef      	bmi.n	8008d00 <__smakebuf_r+0x18>
 8008d20:	f023 0303 	bic.w	r3, r3, #3
 8008d24:	f043 0302 	orr.w	r3, r3, #2
 8008d28:	81a3      	strh	r3, [r4, #12]
 8008d2a:	e7e3      	b.n	8008cf4 <__smakebuf_r+0xc>
 8008d2c:	4b0d      	ldr	r3, [pc, #52]	; (8008d64 <__smakebuf_r+0x7c>)
 8008d2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d30:	89a3      	ldrh	r3, [r4, #12]
 8008d32:	6020      	str	r0, [r4, #0]
 8008d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d38:	81a3      	strh	r3, [r4, #12]
 8008d3a:	9b00      	ldr	r3, [sp, #0]
 8008d3c:	6163      	str	r3, [r4, #20]
 8008d3e:	9b01      	ldr	r3, [sp, #4]
 8008d40:	6120      	str	r0, [r4, #16]
 8008d42:	b15b      	cbz	r3, 8008d5c <__smakebuf_r+0x74>
 8008d44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d48:	4630      	mov	r0, r6
 8008d4a:	f000 fc39 	bl	80095c0 <_isatty_r>
 8008d4e:	b128      	cbz	r0, 8008d5c <__smakebuf_r+0x74>
 8008d50:	89a3      	ldrh	r3, [r4, #12]
 8008d52:	f023 0303 	bic.w	r3, r3, #3
 8008d56:	f043 0301 	orr.w	r3, r3, #1
 8008d5a:	81a3      	strh	r3, [r4, #12]
 8008d5c:	89a3      	ldrh	r3, [r4, #12]
 8008d5e:	431d      	orrs	r5, r3
 8008d60:	81a5      	strh	r5, [r4, #12]
 8008d62:	e7cd      	b.n	8008d00 <__smakebuf_r+0x18>
 8008d64:	08008b39 	.word	0x08008b39

08008d68 <malloc>:
 8008d68:	4b02      	ldr	r3, [pc, #8]	; (8008d74 <malloc+0xc>)
 8008d6a:	4601      	mov	r1, r0
 8008d6c:	6818      	ldr	r0, [r3, #0]
 8008d6e:	f000 bb45 	b.w	80093fc <_malloc_r>
 8008d72:	bf00      	nop
 8008d74:	2000000c 	.word	0x2000000c

08008d78 <memcpy>:
 8008d78:	b510      	push	{r4, lr}
 8008d7a:	1e43      	subs	r3, r0, #1
 8008d7c:	440a      	add	r2, r1
 8008d7e:	4291      	cmp	r1, r2
 8008d80:	d100      	bne.n	8008d84 <memcpy+0xc>
 8008d82:	bd10      	pop	{r4, pc}
 8008d84:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d8c:	e7f7      	b.n	8008d7e <memcpy+0x6>

08008d8e <_Balloc>:
 8008d8e:	b570      	push	{r4, r5, r6, lr}
 8008d90:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008d92:	4604      	mov	r4, r0
 8008d94:	460e      	mov	r6, r1
 8008d96:	b93d      	cbnz	r5, 8008da8 <_Balloc+0x1a>
 8008d98:	2010      	movs	r0, #16
 8008d9a:	f7ff ffe5 	bl	8008d68 <malloc>
 8008d9e:	6260      	str	r0, [r4, #36]	; 0x24
 8008da0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008da4:	6005      	str	r5, [r0, #0]
 8008da6:	60c5      	str	r5, [r0, #12]
 8008da8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008daa:	68eb      	ldr	r3, [r5, #12]
 8008dac:	b183      	cbz	r3, 8008dd0 <_Balloc+0x42>
 8008dae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008db6:	b9b8      	cbnz	r0, 8008de8 <_Balloc+0x5a>
 8008db8:	2101      	movs	r1, #1
 8008dba:	fa01 f506 	lsl.w	r5, r1, r6
 8008dbe:	1d6a      	adds	r2, r5, #5
 8008dc0:	0092      	lsls	r2, r2, #2
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f000 fabe 	bl	8009344 <_calloc_r>
 8008dc8:	b160      	cbz	r0, 8008de4 <_Balloc+0x56>
 8008dca:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008dce:	e00e      	b.n	8008dee <_Balloc+0x60>
 8008dd0:	2221      	movs	r2, #33	; 0x21
 8008dd2:	2104      	movs	r1, #4
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	f000 fab5 	bl	8009344 <_calloc_r>
 8008dda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ddc:	60e8      	str	r0, [r5, #12]
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1e4      	bne.n	8008dae <_Balloc+0x20>
 8008de4:	2000      	movs	r0, #0
 8008de6:	bd70      	pop	{r4, r5, r6, pc}
 8008de8:	6802      	ldr	r2, [r0, #0]
 8008dea:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008dee:	2300      	movs	r3, #0
 8008df0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008df4:	e7f7      	b.n	8008de6 <_Balloc+0x58>

08008df6 <_Bfree>:
 8008df6:	b570      	push	{r4, r5, r6, lr}
 8008df8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008dfa:	4606      	mov	r6, r0
 8008dfc:	460d      	mov	r5, r1
 8008dfe:	b93c      	cbnz	r4, 8008e10 <_Bfree+0x1a>
 8008e00:	2010      	movs	r0, #16
 8008e02:	f7ff ffb1 	bl	8008d68 <malloc>
 8008e06:	6270      	str	r0, [r6, #36]	; 0x24
 8008e08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e0c:	6004      	str	r4, [r0, #0]
 8008e0e:	60c4      	str	r4, [r0, #12]
 8008e10:	b13d      	cbz	r5, 8008e22 <_Bfree+0x2c>
 8008e12:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008e14:	686a      	ldr	r2, [r5, #4]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e1c:	6029      	str	r1, [r5, #0]
 8008e1e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008e22:	bd70      	pop	{r4, r5, r6, pc}

08008e24 <__multadd>:
 8008e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e28:	690d      	ldr	r5, [r1, #16]
 8008e2a:	461f      	mov	r7, r3
 8008e2c:	4606      	mov	r6, r0
 8008e2e:	460c      	mov	r4, r1
 8008e30:	f101 0c14 	add.w	ip, r1, #20
 8008e34:	2300      	movs	r3, #0
 8008e36:	f8dc 0000 	ldr.w	r0, [ip]
 8008e3a:	b281      	uxth	r1, r0
 8008e3c:	fb02 7101 	mla	r1, r2, r1, r7
 8008e40:	0c0f      	lsrs	r7, r1, #16
 8008e42:	0c00      	lsrs	r0, r0, #16
 8008e44:	fb02 7000 	mla	r0, r2, r0, r7
 8008e48:	b289      	uxth	r1, r1
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008e50:	429d      	cmp	r5, r3
 8008e52:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008e56:	f84c 1b04 	str.w	r1, [ip], #4
 8008e5a:	dcec      	bgt.n	8008e36 <__multadd+0x12>
 8008e5c:	b1d7      	cbz	r7, 8008e94 <__multadd+0x70>
 8008e5e:	68a3      	ldr	r3, [r4, #8]
 8008e60:	42ab      	cmp	r3, r5
 8008e62:	dc12      	bgt.n	8008e8a <__multadd+0x66>
 8008e64:	6861      	ldr	r1, [r4, #4]
 8008e66:	4630      	mov	r0, r6
 8008e68:	3101      	adds	r1, #1
 8008e6a:	f7ff ff90 	bl	8008d8e <_Balloc>
 8008e6e:	6922      	ldr	r2, [r4, #16]
 8008e70:	3202      	adds	r2, #2
 8008e72:	f104 010c 	add.w	r1, r4, #12
 8008e76:	4680      	mov	r8, r0
 8008e78:	0092      	lsls	r2, r2, #2
 8008e7a:	300c      	adds	r0, #12
 8008e7c:	f7ff ff7c 	bl	8008d78 <memcpy>
 8008e80:	4621      	mov	r1, r4
 8008e82:	4630      	mov	r0, r6
 8008e84:	f7ff ffb7 	bl	8008df6 <_Bfree>
 8008e88:	4644      	mov	r4, r8
 8008e8a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e8e:	3501      	adds	r5, #1
 8008e90:	615f      	str	r7, [r3, #20]
 8008e92:	6125      	str	r5, [r4, #16]
 8008e94:	4620      	mov	r0, r4
 8008e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008e9a <__hi0bits>:
 8008e9a:	0c02      	lsrs	r2, r0, #16
 8008e9c:	0412      	lsls	r2, r2, #16
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	b9b2      	cbnz	r2, 8008ed0 <__hi0bits+0x36>
 8008ea2:	0403      	lsls	r3, r0, #16
 8008ea4:	2010      	movs	r0, #16
 8008ea6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008eaa:	bf04      	itt	eq
 8008eac:	021b      	lsleq	r3, r3, #8
 8008eae:	3008      	addeq	r0, #8
 8008eb0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008eb4:	bf04      	itt	eq
 8008eb6:	011b      	lsleq	r3, r3, #4
 8008eb8:	3004      	addeq	r0, #4
 8008eba:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008ebe:	bf04      	itt	eq
 8008ec0:	009b      	lsleq	r3, r3, #2
 8008ec2:	3002      	addeq	r0, #2
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	db06      	blt.n	8008ed6 <__hi0bits+0x3c>
 8008ec8:	005b      	lsls	r3, r3, #1
 8008eca:	d503      	bpl.n	8008ed4 <__hi0bits+0x3a>
 8008ecc:	3001      	adds	r0, #1
 8008ece:	4770      	bx	lr
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	e7e8      	b.n	8008ea6 <__hi0bits+0xc>
 8008ed4:	2020      	movs	r0, #32
 8008ed6:	4770      	bx	lr

08008ed8 <__lo0bits>:
 8008ed8:	6803      	ldr	r3, [r0, #0]
 8008eda:	f013 0207 	ands.w	r2, r3, #7
 8008ede:	4601      	mov	r1, r0
 8008ee0:	d00b      	beq.n	8008efa <__lo0bits+0x22>
 8008ee2:	07da      	lsls	r2, r3, #31
 8008ee4:	d423      	bmi.n	8008f2e <__lo0bits+0x56>
 8008ee6:	0798      	lsls	r0, r3, #30
 8008ee8:	bf49      	itett	mi
 8008eea:	085b      	lsrmi	r3, r3, #1
 8008eec:	089b      	lsrpl	r3, r3, #2
 8008eee:	2001      	movmi	r0, #1
 8008ef0:	600b      	strmi	r3, [r1, #0]
 8008ef2:	bf5c      	itt	pl
 8008ef4:	600b      	strpl	r3, [r1, #0]
 8008ef6:	2002      	movpl	r0, #2
 8008ef8:	4770      	bx	lr
 8008efa:	b298      	uxth	r0, r3
 8008efc:	b9a8      	cbnz	r0, 8008f2a <__lo0bits+0x52>
 8008efe:	0c1b      	lsrs	r3, r3, #16
 8008f00:	2010      	movs	r0, #16
 8008f02:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008f06:	bf04      	itt	eq
 8008f08:	0a1b      	lsreq	r3, r3, #8
 8008f0a:	3008      	addeq	r0, #8
 8008f0c:	071a      	lsls	r2, r3, #28
 8008f0e:	bf04      	itt	eq
 8008f10:	091b      	lsreq	r3, r3, #4
 8008f12:	3004      	addeq	r0, #4
 8008f14:	079a      	lsls	r2, r3, #30
 8008f16:	bf04      	itt	eq
 8008f18:	089b      	lsreq	r3, r3, #2
 8008f1a:	3002      	addeq	r0, #2
 8008f1c:	07da      	lsls	r2, r3, #31
 8008f1e:	d402      	bmi.n	8008f26 <__lo0bits+0x4e>
 8008f20:	085b      	lsrs	r3, r3, #1
 8008f22:	d006      	beq.n	8008f32 <__lo0bits+0x5a>
 8008f24:	3001      	adds	r0, #1
 8008f26:	600b      	str	r3, [r1, #0]
 8008f28:	4770      	bx	lr
 8008f2a:	4610      	mov	r0, r2
 8008f2c:	e7e9      	b.n	8008f02 <__lo0bits+0x2a>
 8008f2e:	2000      	movs	r0, #0
 8008f30:	4770      	bx	lr
 8008f32:	2020      	movs	r0, #32
 8008f34:	4770      	bx	lr

08008f36 <__i2b>:
 8008f36:	b510      	push	{r4, lr}
 8008f38:	460c      	mov	r4, r1
 8008f3a:	2101      	movs	r1, #1
 8008f3c:	f7ff ff27 	bl	8008d8e <_Balloc>
 8008f40:	2201      	movs	r2, #1
 8008f42:	6144      	str	r4, [r0, #20]
 8008f44:	6102      	str	r2, [r0, #16]
 8008f46:	bd10      	pop	{r4, pc}

08008f48 <__multiply>:
 8008f48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f4c:	4614      	mov	r4, r2
 8008f4e:	690a      	ldr	r2, [r1, #16]
 8008f50:	6923      	ldr	r3, [r4, #16]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	bfb8      	it	lt
 8008f56:	460b      	movlt	r3, r1
 8008f58:	4688      	mov	r8, r1
 8008f5a:	bfbc      	itt	lt
 8008f5c:	46a0      	movlt	r8, r4
 8008f5e:	461c      	movlt	r4, r3
 8008f60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008f64:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008f68:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008f70:	eb07 0609 	add.w	r6, r7, r9
 8008f74:	42b3      	cmp	r3, r6
 8008f76:	bfb8      	it	lt
 8008f78:	3101      	addlt	r1, #1
 8008f7a:	f7ff ff08 	bl	8008d8e <_Balloc>
 8008f7e:	f100 0514 	add.w	r5, r0, #20
 8008f82:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008f86:	462b      	mov	r3, r5
 8008f88:	2200      	movs	r2, #0
 8008f8a:	4573      	cmp	r3, lr
 8008f8c:	d316      	bcc.n	8008fbc <__multiply+0x74>
 8008f8e:	f104 0214 	add.w	r2, r4, #20
 8008f92:	f108 0114 	add.w	r1, r8, #20
 8008f96:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008f9a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008f9e:	9300      	str	r3, [sp, #0]
 8008fa0:	9b00      	ldr	r3, [sp, #0]
 8008fa2:	9201      	str	r2, [sp, #4]
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d80c      	bhi.n	8008fc2 <__multiply+0x7a>
 8008fa8:	2e00      	cmp	r6, #0
 8008faa:	dd03      	ble.n	8008fb4 <__multiply+0x6c>
 8008fac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d05d      	beq.n	8009070 <__multiply+0x128>
 8008fb4:	6106      	str	r6, [r0, #16]
 8008fb6:	b003      	add	sp, #12
 8008fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fbc:	f843 2b04 	str.w	r2, [r3], #4
 8008fc0:	e7e3      	b.n	8008f8a <__multiply+0x42>
 8008fc2:	f8b2 b000 	ldrh.w	fp, [r2]
 8008fc6:	f1bb 0f00 	cmp.w	fp, #0
 8008fca:	d023      	beq.n	8009014 <__multiply+0xcc>
 8008fcc:	4689      	mov	r9, r1
 8008fce:	46ac      	mov	ip, r5
 8008fd0:	f04f 0800 	mov.w	r8, #0
 8008fd4:	f859 4b04 	ldr.w	r4, [r9], #4
 8008fd8:	f8dc a000 	ldr.w	sl, [ip]
 8008fdc:	b2a3      	uxth	r3, r4
 8008fde:	fa1f fa8a 	uxth.w	sl, sl
 8008fe2:	fb0b a303 	mla	r3, fp, r3, sl
 8008fe6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008fea:	f8dc 4000 	ldr.w	r4, [ip]
 8008fee:	4443      	add	r3, r8
 8008ff0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008ff4:	fb0b 840a 	mla	r4, fp, sl, r8
 8008ff8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008ffc:	46e2      	mov	sl, ip
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009004:	454f      	cmp	r7, r9
 8009006:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800900a:	f84a 3b04 	str.w	r3, [sl], #4
 800900e:	d82b      	bhi.n	8009068 <__multiply+0x120>
 8009010:	f8cc 8004 	str.w	r8, [ip, #4]
 8009014:	9b01      	ldr	r3, [sp, #4]
 8009016:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800901a:	3204      	adds	r2, #4
 800901c:	f1ba 0f00 	cmp.w	sl, #0
 8009020:	d020      	beq.n	8009064 <__multiply+0x11c>
 8009022:	682b      	ldr	r3, [r5, #0]
 8009024:	4689      	mov	r9, r1
 8009026:	46a8      	mov	r8, r5
 8009028:	f04f 0b00 	mov.w	fp, #0
 800902c:	f8b9 c000 	ldrh.w	ip, [r9]
 8009030:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009034:	fb0a 440c 	mla	r4, sl, ip, r4
 8009038:	445c      	add	r4, fp
 800903a:	46c4      	mov	ip, r8
 800903c:	b29b      	uxth	r3, r3
 800903e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009042:	f84c 3b04 	str.w	r3, [ip], #4
 8009046:	f859 3b04 	ldr.w	r3, [r9], #4
 800904a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800904e:	0c1b      	lsrs	r3, r3, #16
 8009050:	fb0a b303 	mla	r3, sl, r3, fp
 8009054:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009058:	454f      	cmp	r7, r9
 800905a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800905e:	d805      	bhi.n	800906c <__multiply+0x124>
 8009060:	f8c8 3004 	str.w	r3, [r8, #4]
 8009064:	3504      	adds	r5, #4
 8009066:	e79b      	b.n	8008fa0 <__multiply+0x58>
 8009068:	46d4      	mov	ip, sl
 800906a:	e7b3      	b.n	8008fd4 <__multiply+0x8c>
 800906c:	46e0      	mov	r8, ip
 800906e:	e7dd      	b.n	800902c <__multiply+0xe4>
 8009070:	3e01      	subs	r6, #1
 8009072:	e799      	b.n	8008fa8 <__multiply+0x60>

08009074 <__pow5mult>:
 8009074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009078:	4615      	mov	r5, r2
 800907a:	f012 0203 	ands.w	r2, r2, #3
 800907e:	4606      	mov	r6, r0
 8009080:	460f      	mov	r7, r1
 8009082:	d007      	beq.n	8009094 <__pow5mult+0x20>
 8009084:	3a01      	subs	r2, #1
 8009086:	4c21      	ldr	r4, [pc, #132]	; (800910c <__pow5mult+0x98>)
 8009088:	2300      	movs	r3, #0
 800908a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800908e:	f7ff fec9 	bl	8008e24 <__multadd>
 8009092:	4607      	mov	r7, r0
 8009094:	10ad      	asrs	r5, r5, #2
 8009096:	d035      	beq.n	8009104 <__pow5mult+0x90>
 8009098:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800909a:	b93c      	cbnz	r4, 80090ac <__pow5mult+0x38>
 800909c:	2010      	movs	r0, #16
 800909e:	f7ff fe63 	bl	8008d68 <malloc>
 80090a2:	6270      	str	r0, [r6, #36]	; 0x24
 80090a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090a8:	6004      	str	r4, [r0, #0]
 80090aa:	60c4      	str	r4, [r0, #12]
 80090ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80090b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090b4:	b94c      	cbnz	r4, 80090ca <__pow5mult+0x56>
 80090b6:	f240 2171 	movw	r1, #625	; 0x271
 80090ba:	4630      	mov	r0, r6
 80090bc:	f7ff ff3b 	bl	8008f36 <__i2b>
 80090c0:	2300      	movs	r3, #0
 80090c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80090c6:	4604      	mov	r4, r0
 80090c8:	6003      	str	r3, [r0, #0]
 80090ca:	f04f 0800 	mov.w	r8, #0
 80090ce:	07eb      	lsls	r3, r5, #31
 80090d0:	d50a      	bpl.n	80090e8 <__pow5mult+0x74>
 80090d2:	4639      	mov	r1, r7
 80090d4:	4622      	mov	r2, r4
 80090d6:	4630      	mov	r0, r6
 80090d8:	f7ff ff36 	bl	8008f48 <__multiply>
 80090dc:	4639      	mov	r1, r7
 80090de:	4681      	mov	r9, r0
 80090e0:	4630      	mov	r0, r6
 80090e2:	f7ff fe88 	bl	8008df6 <_Bfree>
 80090e6:	464f      	mov	r7, r9
 80090e8:	106d      	asrs	r5, r5, #1
 80090ea:	d00b      	beq.n	8009104 <__pow5mult+0x90>
 80090ec:	6820      	ldr	r0, [r4, #0]
 80090ee:	b938      	cbnz	r0, 8009100 <__pow5mult+0x8c>
 80090f0:	4622      	mov	r2, r4
 80090f2:	4621      	mov	r1, r4
 80090f4:	4630      	mov	r0, r6
 80090f6:	f7ff ff27 	bl	8008f48 <__multiply>
 80090fa:	6020      	str	r0, [r4, #0]
 80090fc:	f8c0 8000 	str.w	r8, [r0]
 8009100:	4604      	mov	r4, r0
 8009102:	e7e4      	b.n	80090ce <__pow5mult+0x5a>
 8009104:	4638      	mov	r0, r7
 8009106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800910a:	bf00      	nop
 800910c:	08009828 	.word	0x08009828

08009110 <__lshift>:
 8009110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009114:	460c      	mov	r4, r1
 8009116:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800911a:	6923      	ldr	r3, [r4, #16]
 800911c:	6849      	ldr	r1, [r1, #4]
 800911e:	eb0a 0903 	add.w	r9, sl, r3
 8009122:	68a3      	ldr	r3, [r4, #8]
 8009124:	4607      	mov	r7, r0
 8009126:	4616      	mov	r6, r2
 8009128:	f109 0501 	add.w	r5, r9, #1
 800912c:	42ab      	cmp	r3, r5
 800912e:	db32      	blt.n	8009196 <__lshift+0x86>
 8009130:	4638      	mov	r0, r7
 8009132:	f7ff fe2c 	bl	8008d8e <_Balloc>
 8009136:	2300      	movs	r3, #0
 8009138:	4680      	mov	r8, r0
 800913a:	f100 0114 	add.w	r1, r0, #20
 800913e:	461a      	mov	r2, r3
 8009140:	4553      	cmp	r3, sl
 8009142:	db2b      	blt.n	800919c <__lshift+0x8c>
 8009144:	6920      	ldr	r0, [r4, #16]
 8009146:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800914a:	f104 0314 	add.w	r3, r4, #20
 800914e:	f016 021f 	ands.w	r2, r6, #31
 8009152:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009156:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800915a:	d025      	beq.n	80091a8 <__lshift+0x98>
 800915c:	f1c2 0e20 	rsb	lr, r2, #32
 8009160:	2000      	movs	r0, #0
 8009162:	681e      	ldr	r6, [r3, #0]
 8009164:	468a      	mov	sl, r1
 8009166:	4096      	lsls	r6, r2
 8009168:	4330      	orrs	r0, r6
 800916a:	f84a 0b04 	str.w	r0, [sl], #4
 800916e:	f853 0b04 	ldr.w	r0, [r3], #4
 8009172:	459c      	cmp	ip, r3
 8009174:	fa20 f00e 	lsr.w	r0, r0, lr
 8009178:	d814      	bhi.n	80091a4 <__lshift+0x94>
 800917a:	6048      	str	r0, [r1, #4]
 800917c:	b108      	cbz	r0, 8009182 <__lshift+0x72>
 800917e:	f109 0502 	add.w	r5, r9, #2
 8009182:	3d01      	subs	r5, #1
 8009184:	4638      	mov	r0, r7
 8009186:	f8c8 5010 	str.w	r5, [r8, #16]
 800918a:	4621      	mov	r1, r4
 800918c:	f7ff fe33 	bl	8008df6 <_Bfree>
 8009190:	4640      	mov	r0, r8
 8009192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009196:	3101      	adds	r1, #1
 8009198:	005b      	lsls	r3, r3, #1
 800919a:	e7c7      	b.n	800912c <__lshift+0x1c>
 800919c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80091a0:	3301      	adds	r3, #1
 80091a2:	e7cd      	b.n	8009140 <__lshift+0x30>
 80091a4:	4651      	mov	r1, sl
 80091a6:	e7dc      	b.n	8009162 <__lshift+0x52>
 80091a8:	3904      	subs	r1, #4
 80091aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80091ae:	f841 2f04 	str.w	r2, [r1, #4]!
 80091b2:	459c      	cmp	ip, r3
 80091b4:	d8f9      	bhi.n	80091aa <__lshift+0x9a>
 80091b6:	e7e4      	b.n	8009182 <__lshift+0x72>

080091b8 <__mcmp>:
 80091b8:	6903      	ldr	r3, [r0, #16]
 80091ba:	690a      	ldr	r2, [r1, #16]
 80091bc:	1a9b      	subs	r3, r3, r2
 80091be:	b530      	push	{r4, r5, lr}
 80091c0:	d10c      	bne.n	80091dc <__mcmp+0x24>
 80091c2:	0092      	lsls	r2, r2, #2
 80091c4:	3014      	adds	r0, #20
 80091c6:	3114      	adds	r1, #20
 80091c8:	1884      	adds	r4, r0, r2
 80091ca:	4411      	add	r1, r2
 80091cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80091d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80091d4:	4295      	cmp	r5, r2
 80091d6:	d003      	beq.n	80091e0 <__mcmp+0x28>
 80091d8:	d305      	bcc.n	80091e6 <__mcmp+0x2e>
 80091da:	2301      	movs	r3, #1
 80091dc:	4618      	mov	r0, r3
 80091de:	bd30      	pop	{r4, r5, pc}
 80091e0:	42a0      	cmp	r0, r4
 80091e2:	d3f3      	bcc.n	80091cc <__mcmp+0x14>
 80091e4:	e7fa      	b.n	80091dc <__mcmp+0x24>
 80091e6:	f04f 33ff 	mov.w	r3, #4294967295
 80091ea:	e7f7      	b.n	80091dc <__mcmp+0x24>

080091ec <__mdiff>:
 80091ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091f0:	460d      	mov	r5, r1
 80091f2:	4607      	mov	r7, r0
 80091f4:	4611      	mov	r1, r2
 80091f6:	4628      	mov	r0, r5
 80091f8:	4614      	mov	r4, r2
 80091fa:	f7ff ffdd 	bl	80091b8 <__mcmp>
 80091fe:	1e06      	subs	r6, r0, #0
 8009200:	d108      	bne.n	8009214 <__mdiff+0x28>
 8009202:	4631      	mov	r1, r6
 8009204:	4638      	mov	r0, r7
 8009206:	f7ff fdc2 	bl	8008d8e <_Balloc>
 800920a:	2301      	movs	r3, #1
 800920c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009214:	bfa4      	itt	ge
 8009216:	4623      	movge	r3, r4
 8009218:	462c      	movge	r4, r5
 800921a:	4638      	mov	r0, r7
 800921c:	6861      	ldr	r1, [r4, #4]
 800921e:	bfa6      	itte	ge
 8009220:	461d      	movge	r5, r3
 8009222:	2600      	movge	r6, #0
 8009224:	2601      	movlt	r6, #1
 8009226:	f7ff fdb2 	bl	8008d8e <_Balloc>
 800922a:	692b      	ldr	r3, [r5, #16]
 800922c:	60c6      	str	r6, [r0, #12]
 800922e:	6926      	ldr	r6, [r4, #16]
 8009230:	f105 0914 	add.w	r9, r5, #20
 8009234:	f104 0214 	add.w	r2, r4, #20
 8009238:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800923c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009240:	f100 0514 	add.w	r5, r0, #20
 8009244:	f04f 0e00 	mov.w	lr, #0
 8009248:	f852 ab04 	ldr.w	sl, [r2], #4
 800924c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009250:	fa1e f18a 	uxtah	r1, lr, sl
 8009254:	b2a3      	uxth	r3, r4
 8009256:	1ac9      	subs	r1, r1, r3
 8009258:	0c23      	lsrs	r3, r4, #16
 800925a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800925e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009262:	b289      	uxth	r1, r1
 8009264:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009268:	45c8      	cmp	r8, r9
 800926a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800926e:	4694      	mov	ip, r2
 8009270:	f845 3b04 	str.w	r3, [r5], #4
 8009274:	d8e8      	bhi.n	8009248 <__mdiff+0x5c>
 8009276:	45bc      	cmp	ip, r7
 8009278:	d304      	bcc.n	8009284 <__mdiff+0x98>
 800927a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800927e:	b183      	cbz	r3, 80092a2 <__mdiff+0xb6>
 8009280:	6106      	str	r6, [r0, #16]
 8009282:	e7c5      	b.n	8009210 <__mdiff+0x24>
 8009284:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009288:	fa1e f381 	uxtah	r3, lr, r1
 800928c:	141a      	asrs	r2, r3, #16
 800928e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009292:	b29b      	uxth	r3, r3
 8009294:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009298:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800929c:	f845 3b04 	str.w	r3, [r5], #4
 80092a0:	e7e9      	b.n	8009276 <__mdiff+0x8a>
 80092a2:	3e01      	subs	r6, #1
 80092a4:	e7e9      	b.n	800927a <__mdiff+0x8e>

080092a6 <__d2b>:
 80092a6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80092aa:	460e      	mov	r6, r1
 80092ac:	2101      	movs	r1, #1
 80092ae:	ec59 8b10 	vmov	r8, r9, d0
 80092b2:	4615      	mov	r5, r2
 80092b4:	f7ff fd6b 	bl	8008d8e <_Balloc>
 80092b8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80092bc:	4607      	mov	r7, r0
 80092be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092c2:	bb34      	cbnz	r4, 8009312 <__d2b+0x6c>
 80092c4:	9301      	str	r3, [sp, #4]
 80092c6:	f1b8 0300 	subs.w	r3, r8, #0
 80092ca:	d027      	beq.n	800931c <__d2b+0x76>
 80092cc:	a802      	add	r0, sp, #8
 80092ce:	f840 3d08 	str.w	r3, [r0, #-8]!
 80092d2:	f7ff fe01 	bl	8008ed8 <__lo0bits>
 80092d6:	9900      	ldr	r1, [sp, #0]
 80092d8:	b1f0      	cbz	r0, 8009318 <__d2b+0x72>
 80092da:	9a01      	ldr	r2, [sp, #4]
 80092dc:	f1c0 0320 	rsb	r3, r0, #32
 80092e0:	fa02 f303 	lsl.w	r3, r2, r3
 80092e4:	430b      	orrs	r3, r1
 80092e6:	40c2      	lsrs	r2, r0
 80092e8:	617b      	str	r3, [r7, #20]
 80092ea:	9201      	str	r2, [sp, #4]
 80092ec:	9b01      	ldr	r3, [sp, #4]
 80092ee:	61bb      	str	r3, [r7, #24]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	bf14      	ite	ne
 80092f4:	2102      	movne	r1, #2
 80092f6:	2101      	moveq	r1, #1
 80092f8:	6139      	str	r1, [r7, #16]
 80092fa:	b1c4      	cbz	r4, 800932e <__d2b+0x88>
 80092fc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009300:	4404      	add	r4, r0
 8009302:	6034      	str	r4, [r6, #0]
 8009304:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009308:	6028      	str	r0, [r5, #0]
 800930a:	4638      	mov	r0, r7
 800930c:	b003      	add	sp, #12
 800930e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009312:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009316:	e7d5      	b.n	80092c4 <__d2b+0x1e>
 8009318:	6179      	str	r1, [r7, #20]
 800931a:	e7e7      	b.n	80092ec <__d2b+0x46>
 800931c:	a801      	add	r0, sp, #4
 800931e:	f7ff fddb 	bl	8008ed8 <__lo0bits>
 8009322:	9b01      	ldr	r3, [sp, #4]
 8009324:	617b      	str	r3, [r7, #20]
 8009326:	2101      	movs	r1, #1
 8009328:	6139      	str	r1, [r7, #16]
 800932a:	3020      	adds	r0, #32
 800932c:	e7e5      	b.n	80092fa <__d2b+0x54>
 800932e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009332:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009336:	6030      	str	r0, [r6, #0]
 8009338:	6918      	ldr	r0, [r3, #16]
 800933a:	f7ff fdae 	bl	8008e9a <__hi0bits>
 800933e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009342:	e7e1      	b.n	8009308 <__d2b+0x62>

08009344 <_calloc_r>:
 8009344:	b538      	push	{r3, r4, r5, lr}
 8009346:	fb02 f401 	mul.w	r4, r2, r1
 800934a:	4621      	mov	r1, r4
 800934c:	f000 f856 	bl	80093fc <_malloc_r>
 8009350:	4605      	mov	r5, r0
 8009352:	b118      	cbz	r0, 800935c <_calloc_r+0x18>
 8009354:	4622      	mov	r2, r4
 8009356:	2100      	movs	r1, #0
 8009358:	f7fd ffaa 	bl	80072b0 <memset>
 800935c:	4628      	mov	r0, r5
 800935e:	bd38      	pop	{r3, r4, r5, pc}

08009360 <_free_r>:
 8009360:	b538      	push	{r3, r4, r5, lr}
 8009362:	4605      	mov	r5, r0
 8009364:	2900      	cmp	r1, #0
 8009366:	d045      	beq.n	80093f4 <_free_r+0x94>
 8009368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800936c:	1f0c      	subs	r4, r1, #4
 800936e:	2b00      	cmp	r3, #0
 8009370:	bfb8      	it	lt
 8009372:	18e4      	addlt	r4, r4, r3
 8009374:	f000 f958 	bl	8009628 <__malloc_lock>
 8009378:	4a1f      	ldr	r2, [pc, #124]	; (80093f8 <_free_r+0x98>)
 800937a:	6813      	ldr	r3, [r2, #0]
 800937c:	4610      	mov	r0, r2
 800937e:	b933      	cbnz	r3, 800938e <_free_r+0x2e>
 8009380:	6063      	str	r3, [r4, #4]
 8009382:	6014      	str	r4, [r2, #0]
 8009384:	4628      	mov	r0, r5
 8009386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800938a:	f000 b94e 	b.w	800962a <__malloc_unlock>
 800938e:	42a3      	cmp	r3, r4
 8009390:	d90c      	bls.n	80093ac <_free_r+0x4c>
 8009392:	6821      	ldr	r1, [r4, #0]
 8009394:	1862      	adds	r2, r4, r1
 8009396:	4293      	cmp	r3, r2
 8009398:	bf04      	itt	eq
 800939a:	681a      	ldreq	r2, [r3, #0]
 800939c:	685b      	ldreq	r3, [r3, #4]
 800939e:	6063      	str	r3, [r4, #4]
 80093a0:	bf04      	itt	eq
 80093a2:	1852      	addeq	r2, r2, r1
 80093a4:	6022      	streq	r2, [r4, #0]
 80093a6:	6004      	str	r4, [r0, #0]
 80093a8:	e7ec      	b.n	8009384 <_free_r+0x24>
 80093aa:	4613      	mov	r3, r2
 80093ac:	685a      	ldr	r2, [r3, #4]
 80093ae:	b10a      	cbz	r2, 80093b4 <_free_r+0x54>
 80093b0:	42a2      	cmp	r2, r4
 80093b2:	d9fa      	bls.n	80093aa <_free_r+0x4a>
 80093b4:	6819      	ldr	r1, [r3, #0]
 80093b6:	1858      	adds	r0, r3, r1
 80093b8:	42a0      	cmp	r0, r4
 80093ba:	d10b      	bne.n	80093d4 <_free_r+0x74>
 80093bc:	6820      	ldr	r0, [r4, #0]
 80093be:	4401      	add	r1, r0
 80093c0:	1858      	adds	r0, r3, r1
 80093c2:	4282      	cmp	r2, r0
 80093c4:	6019      	str	r1, [r3, #0]
 80093c6:	d1dd      	bne.n	8009384 <_free_r+0x24>
 80093c8:	6810      	ldr	r0, [r2, #0]
 80093ca:	6852      	ldr	r2, [r2, #4]
 80093cc:	605a      	str	r2, [r3, #4]
 80093ce:	4401      	add	r1, r0
 80093d0:	6019      	str	r1, [r3, #0]
 80093d2:	e7d7      	b.n	8009384 <_free_r+0x24>
 80093d4:	d902      	bls.n	80093dc <_free_r+0x7c>
 80093d6:	230c      	movs	r3, #12
 80093d8:	602b      	str	r3, [r5, #0]
 80093da:	e7d3      	b.n	8009384 <_free_r+0x24>
 80093dc:	6820      	ldr	r0, [r4, #0]
 80093de:	1821      	adds	r1, r4, r0
 80093e0:	428a      	cmp	r2, r1
 80093e2:	bf04      	itt	eq
 80093e4:	6811      	ldreq	r1, [r2, #0]
 80093e6:	6852      	ldreq	r2, [r2, #4]
 80093e8:	6062      	str	r2, [r4, #4]
 80093ea:	bf04      	itt	eq
 80093ec:	1809      	addeq	r1, r1, r0
 80093ee:	6021      	streq	r1, [r4, #0]
 80093f0:	605c      	str	r4, [r3, #4]
 80093f2:	e7c7      	b.n	8009384 <_free_r+0x24>
 80093f4:	bd38      	pop	{r3, r4, r5, pc}
 80093f6:	bf00      	nop
 80093f8:	20000200 	.word	0x20000200

080093fc <_malloc_r>:
 80093fc:	b570      	push	{r4, r5, r6, lr}
 80093fe:	1ccd      	adds	r5, r1, #3
 8009400:	f025 0503 	bic.w	r5, r5, #3
 8009404:	3508      	adds	r5, #8
 8009406:	2d0c      	cmp	r5, #12
 8009408:	bf38      	it	cc
 800940a:	250c      	movcc	r5, #12
 800940c:	2d00      	cmp	r5, #0
 800940e:	4606      	mov	r6, r0
 8009410:	db01      	blt.n	8009416 <_malloc_r+0x1a>
 8009412:	42a9      	cmp	r1, r5
 8009414:	d903      	bls.n	800941e <_malloc_r+0x22>
 8009416:	230c      	movs	r3, #12
 8009418:	6033      	str	r3, [r6, #0]
 800941a:	2000      	movs	r0, #0
 800941c:	bd70      	pop	{r4, r5, r6, pc}
 800941e:	f000 f903 	bl	8009628 <__malloc_lock>
 8009422:	4a21      	ldr	r2, [pc, #132]	; (80094a8 <_malloc_r+0xac>)
 8009424:	6814      	ldr	r4, [r2, #0]
 8009426:	4621      	mov	r1, r4
 8009428:	b991      	cbnz	r1, 8009450 <_malloc_r+0x54>
 800942a:	4c20      	ldr	r4, [pc, #128]	; (80094ac <_malloc_r+0xb0>)
 800942c:	6823      	ldr	r3, [r4, #0]
 800942e:	b91b      	cbnz	r3, 8009438 <_malloc_r+0x3c>
 8009430:	4630      	mov	r0, r6
 8009432:	f000 f83d 	bl	80094b0 <_sbrk_r>
 8009436:	6020      	str	r0, [r4, #0]
 8009438:	4629      	mov	r1, r5
 800943a:	4630      	mov	r0, r6
 800943c:	f000 f838 	bl	80094b0 <_sbrk_r>
 8009440:	1c43      	adds	r3, r0, #1
 8009442:	d124      	bne.n	800948e <_malloc_r+0x92>
 8009444:	230c      	movs	r3, #12
 8009446:	6033      	str	r3, [r6, #0]
 8009448:	4630      	mov	r0, r6
 800944a:	f000 f8ee 	bl	800962a <__malloc_unlock>
 800944e:	e7e4      	b.n	800941a <_malloc_r+0x1e>
 8009450:	680b      	ldr	r3, [r1, #0]
 8009452:	1b5b      	subs	r3, r3, r5
 8009454:	d418      	bmi.n	8009488 <_malloc_r+0x8c>
 8009456:	2b0b      	cmp	r3, #11
 8009458:	d90f      	bls.n	800947a <_malloc_r+0x7e>
 800945a:	600b      	str	r3, [r1, #0]
 800945c:	50cd      	str	r5, [r1, r3]
 800945e:	18cc      	adds	r4, r1, r3
 8009460:	4630      	mov	r0, r6
 8009462:	f000 f8e2 	bl	800962a <__malloc_unlock>
 8009466:	f104 000b 	add.w	r0, r4, #11
 800946a:	1d23      	adds	r3, r4, #4
 800946c:	f020 0007 	bic.w	r0, r0, #7
 8009470:	1ac3      	subs	r3, r0, r3
 8009472:	d0d3      	beq.n	800941c <_malloc_r+0x20>
 8009474:	425a      	negs	r2, r3
 8009476:	50e2      	str	r2, [r4, r3]
 8009478:	e7d0      	b.n	800941c <_malloc_r+0x20>
 800947a:	428c      	cmp	r4, r1
 800947c:	684b      	ldr	r3, [r1, #4]
 800947e:	bf16      	itet	ne
 8009480:	6063      	strne	r3, [r4, #4]
 8009482:	6013      	streq	r3, [r2, #0]
 8009484:	460c      	movne	r4, r1
 8009486:	e7eb      	b.n	8009460 <_malloc_r+0x64>
 8009488:	460c      	mov	r4, r1
 800948a:	6849      	ldr	r1, [r1, #4]
 800948c:	e7cc      	b.n	8009428 <_malloc_r+0x2c>
 800948e:	1cc4      	adds	r4, r0, #3
 8009490:	f024 0403 	bic.w	r4, r4, #3
 8009494:	42a0      	cmp	r0, r4
 8009496:	d005      	beq.n	80094a4 <_malloc_r+0xa8>
 8009498:	1a21      	subs	r1, r4, r0
 800949a:	4630      	mov	r0, r6
 800949c:	f000 f808 	bl	80094b0 <_sbrk_r>
 80094a0:	3001      	adds	r0, #1
 80094a2:	d0cf      	beq.n	8009444 <_malloc_r+0x48>
 80094a4:	6025      	str	r5, [r4, #0]
 80094a6:	e7db      	b.n	8009460 <_malloc_r+0x64>
 80094a8:	20000200 	.word	0x20000200
 80094ac:	20000204 	.word	0x20000204

080094b0 <_sbrk_r>:
 80094b0:	b538      	push	{r3, r4, r5, lr}
 80094b2:	4c06      	ldr	r4, [pc, #24]	; (80094cc <_sbrk_r+0x1c>)
 80094b4:	2300      	movs	r3, #0
 80094b6:	4605      	mov	r5, r0
 80094b8:	4608      	mov	r0, r1
 80094ba:	6023      	str	r3, [r4, #0]
 80094bc:	f7f9 f8da 	bl	8002674 <_sbrk>
 80094c0:	1c43      	adds	r3, r0, #1
 80094c2:	d102      	bne.n	80094ca <_sbrk_r+0x1a>
 80094c4:	6823      	ldr	r3, [r4, #0]
 80094c6:	b103      	cbz	r3, 80094ca <_sbrk_r+0x1a>
 80094c8:	602b      	str	r3, [r5, #0]
 80094ca:	bd38      	pop	{r3, r4, r5, pc}
 80094cc:	200007a8 	.word	0x200007a8

080094d0 <__sread>:
 80094d0:	b510      	push	{r4, lr}
 80094d2:	460c      	mov	r4, r1
 80094d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094d8:	f000 f8a8 	bl	800962c <_read_r>
 80094dc:	2800      	cmp	r0, #0
 80094de:	bfab      	itete	ge
 80094e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80094e2:	89a3      	ldrhlt	r3, [r4, #12]
 80094e4:	181b      	addge	r3, r3, r0
 80094e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80094ea:	bfac      	ite	ge
 80094ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80094ee:	81a3      	strhlt	r3, [r4, #12]
 80094f0:	bd10      	pop	{r4, pc}

080094f2 <__swrite>:
 80094f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094f6:	461f      	mov	r7, r3
 80094f8:	898b      	ldrh	r3, [r1, #12]
 80094fa:	05db      	lsls	r3, r3, #23
 80094fc:	4605      	mov	r5, r0
 80094fe:	460c      	mov	r4, r1
 8009500:	4616      	mov	r6, r2
 8009502:	d505      	bpl.n	8009510 <__swrite+0x1e>
 8009504:	2302      	movs	r3, #2
 8009506:	2200      	movs	r2, #0
 8009508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800950c:	f000 f868 	bl	80095e0 <_lseek_r>
 8009510:	89a3      	ldrh	r3, [r4, #12]
 8009512:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009516:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800951a:	81a3      	strh	r3, [r4, #12]
 800951c:	4632      	mov	r2, r6
 800951e:	463b      	mov	r3, r7
 8009520:	4628      	mov	r0, r5
 8009522:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009526:	f000 b817 	b.w	8009558 <_write_r>

0800952a <__sseek>:
 800952a:	b510      	push	{r4, lr}
 800952c:	460c      	mov	r4, r1
 800952e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009532:	f000 f855 	bl	80095e0 <_lseek_r>
 8009536:	1c43      	adds	r3, r0, #1
 8009538:	89a3      	ldrh	r3, [r4, #12]
 800953a:	bf15      	itete	ne
 800953c:	6560      	strne	r0, [r4, #84]	; 0x54
 800953e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009542:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009546:	81a3      	strheq	r3, [r4, #12]
 8009548:	bf18      	it	ne
 800954a:	81a3      	strhne	r3, [r4, #12]
 800954c:	bd10      	pop	{r4, pc}

0800954e <__sclose>:
 800954e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009552:	f000 b813 	b.w	800957c <_close_r>
	...

08009558 <_write_r>:
 8009558:	b538      	push	{r3, r4, r5, lr}
 800955a:	4c07      	ldr	r4, [pc, #28]	; (8009578 <_write_r+0x20>)
 800955c:	4605      	mov	r5, r0
 800955e:	4608      	mov	r0, r1
 8009560:	4611      	mov	r1, r2
 8009562:	2200      	movs	r2, #0
 8009564:	6022      	str	r2, [r4, #0]
 8009566:	461a      	mov	r2, r3
 8009568:	f7f9 f833 	bl	80025d2 <_write>
 800956c:	1c43      	adds	r3, r0, #1
 800956e:	d102      	bne.n	8009576 <_write_r+0x1e>
 8009570:	6823      	ldr	r3, [r4, #0]
 8009572:	b103      	cbz	r3, 8009576 <_write_r+0x1e>
 8009574:	602b      	str	r3, [r5, #0]
 8009576:	bd38      	pop	{r3, r4, r5, pc}
 8009578:	200007a8 	.word	0x200007a8

0800957c <_close_r>:
 800957c:	b538      	push	{r3, r4, r5, lr}
 800957e:	4c06      	ldr	r4, [pc, #24]	; (8009598 <_close_r+0x1c>)
 8009580:	2300      	movs	r3, #0
 8009582:	4605      	mov	r5, r0
 8009584:	4608      	mov	r0, r1
 8009586:	6023      	str	r3, [r4, #0]
 8009588:	f7f9 f83f 	bl	800260a <_close>
 800958c:	1c43      	adds	r3, r0, #1
 800958e:	d102      	bne.n	8009596 <_close_r+0x1a>
 8009590:	6823      	ldr	r3, [r4, #0]
 8009592:	b103      	cbz	r3, 8009596 <_close_r+0x1a>
 8009594:	602b      	str	r3, [r5, #0]
 8009596:	bd38      	pop	{r3, r4, r5, pc}
 8009598:	200007a8 	.word	0x200007a8

0800959c <_fstat_r>:
 800959c:	b538      	push	{r3, r4, r5, lr}
 800959e:	4c07      	ldr	r4, [pc, #28]	; (80095bc <_fstat_r+0x20>)
 80095a0:	2300      	movs	r3, #0
 80095a2:	4605      	mov	r5, r0
 80095a4:	4608      	mov	r0, r1
 80095a6:	4611      	mov	r1, r2
 80095a8:	6023      	str	r3, [r4, #0]
 80095aa:	f7f9 f83a 	bl	8002622 <_fstat>
 80095ae:	1c43      	adds	r3, r0, #1
 80095b0:	d102      	bne.n	80095b8 <_fstat_r+0x1c>
 80095b2:	6823      	ldr	r3, [r4, #0]
 80095b4:	b103      	cbz	r3, 80095b8 <_fstat_r+0x1c>
 80095b6:	602b      	str	r3, [r5, #0]
 80095b8:	bd38      	pop	{r3, r4, r5, pc}
 80095ba:	bf00      	nop
 80095bc:	200007a8 	.word	0x200007a8

080095c0 <_isatty_r>:
 80095c0:	b538      	push	{r3, r4, r5, lr}
 80095c2:	4c06      	ldr	r4, [pc, #24]	; (80095dc <_isatty_r+0x1c>)
 80095c4:	2300      	movs	r3, #0
 80095c6:	4605      	mov	r5, r0
 80095c8:	4608      	mov	r0, r1
 80095ca:	6023      	str	r3, [r4, #0]
 80095cc:	f7f9 f839 	bl	8002642 <_isatty>
 80095d0:	1c43      	adds	r3, r0, #1
 80095d2:	d102      	bne.n	80095da <_isatty_r+0x1a>
 80095d4:	6823      	ldr	r3, [r4, #0]
 80095d6:	b103      	cbz	r3, 80095da <_isatty_r+0x1a>
 80095d8:	602b      	str	r3, [r5, #0]
 80095da:	bd38      	pop	{r3, r4, r5, pc}
 80095dc:	200007a8 	.word	0x200007a8

080095e0 <_lseek_r>:
 80095e0:	b538      	push	{r3, r4, r5, lr}
 80095e2:	4c07      	ldr	r4, [pc, #28]	; (8009600 <_lseek_r+0x20>)
 80095e4:	4605      	mov	r5, r0
 80095e6:	4608      	mov	r0, r1
 80095e8:	4611      	mov	r1, r2
 80095ea:	2200      	movs	r2, #0
 80095ec:	6022      	str	r2, [r4, #0]
 80095ee:	461a      	mov	r2, r3
 80095f0:	f7f9 f832 	bl	8002658 <_lseek>
 80095f4:	1c43      	adds	r3, r0, #1
 80095f6:	d102      	bne.n	80095fe <_lseek_r+0x1e>
 80095f8:	6823      	ldr	r3, [r4, #0]
 80095fa:	b103      	cbz	r3, 80095fe <_lseek_r+0x1e>
 80095fc:	602b      	str	r3, [r5, #0]
 80095fe:	bd38      	pop	{r3, r4, r5, pc}
 8009600:	200007a8 	.word	0x200007a8

08009604 <__ascii_mbtowc>:
 8009604:	b082      	sub	sp, #8
 8009606:	b901      	cbnz	r1, 800960a <__ascii_mbtowc+0x6>
 8009608:	a901      	add	r1, sp, #4
 800960a:	b142      	cbz	r2, 800961e <__ascii_mbtowc+0x1a>
 800960c:	b14b      	cbz	r3, 8009622 <__ascii_mbtowc+0x1e>
 800960e:	7813      	ldrb	r3, [r2, #0]
 8009610:	600b      	str	r3, [r1, #0]
 8009612:	7812      	ldrb	r2, [r2, #0]
 8009614:	1c10      	adds	r0, r2, #0
 8009616:	bf18      	it	ne
 8009618:	2001      	movne	r0, #1
 800961a:	b002      	add	sp, #8
 800961c:	4770      	bx	lr
 800961e:	4610      	mov	r0, r2
 8009620:	e7fb      	b.n	800961a <__ascii_mbtowc+0x16>
 8009622:	f06f 0001 	mvn.w	r0, #1
 8009626:	e7f8      	b.n	800961a <__ascii_mbtowc+0x16>

08009628 <__malloc_lock>:
 8009628:	4770      	bx	lr

0800962a <__malloc_unlock>:
 800962a:	4770      	bx	lr

0800962c <_read_r>:
 800962c:	b538      	push	{r3, r4, r5, lr}
 800962e:	4c07      	ldr	r4, [pc, #28]	; (800964c <_read_r+0x20>)
 8009630:	4605      	mov	r5, r0
 8009632:	4608      	mov	r0, r1
 8009634:	4611      	mov	r1, r2
 8009636:	2200      	movs	r2, #0
 8009638:	6022      	str	r2, [r4, #0]
 800963a:	461a      	mov	r2, r3
 800963c:	f7f8 ffac 	bl	8002598 <_read>
 8009640:	1c43      	adds	r3, r0, #1
 8009642:	d102      	bne.n	800964a <_read_r+0x1e>
 8009644:	6823      	ldr	r3, [r4, #0]
 8009646:	b103      	cbz	r3, 800964a <_read_r+0x1e>
 8009648:	602b      	str	r3, [r5, #0]
 800964a:	bd38      	pop	{r3, r4, r5, pc}
 800964c:	200007a8 	.word	0x200007a8

08009650 <__ascii_wctomb>:
 8009650:	b149      	cbz	r1, 8009666 <__ascii_wctomb+0x16>
 8009652:	2aff      	cmp	r2, #255	; 0xff
 8009654:	bf85      	ittet	hi
 8009656:	238a      	movhi	r3, #138	; 0x8a
 8009658:	6003      	strhi	r3, [r0, #0]
 800965a:	700a      	strbls	r2, [r1, #0]
 800965c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009660:	bf98      	it	ls
 8009662:	2001      	movls	r0, #1
 8009664:	4770      	bx	lr
 8009666:	4608      	mov	r0, r1
 8009668:	4770      	bx	lr
	...

0800966c <_init>:
 800966c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800966e:	bf00      	nop
 8009670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009672:	bc08      	pop	{r3}
 8009674:	469e      	mov	lr, r3
 8009676:	4770      	bx	lr

08009678 <_fini>:
 8009678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800967a:	bf00      	nop
 800967c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800967e:	bc08      	pop	{r3}
 8009680:	469e      	mov	lr, r3
 8009682:	4770      	bx	lr
