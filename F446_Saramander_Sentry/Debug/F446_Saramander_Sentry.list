
F446_Saramander_Sentry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  0800a578  0800a578  0001a578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8b8  0800a8b8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8b8  0800a8b8  0001a8b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8c0  0800a8c0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8c0  0800a8c0  0001a8c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8c4  0800a8c4  0001a8c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a8c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000060c  200001dc  0800aaa4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007e8  0800aaa4  000207e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013af0  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d79  00000000  00000000  00033cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001008  00000000  00000000  00036a78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e80  00000000  00000000  00037a80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002442b  00000000  00000000  00038900  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e2ec  00000000  00000000  0005cd2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3b6a  00000000  00000000  0006b017  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013eb81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fb0  00000000  00000000  0013ebfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a55c 	.word	0x0800a55c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800a55c 	.word	0x0800a55c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <Synchronize>:
const uint8_t SUB_ST_COMMND= 0x01;
const uint8_t SUB_SP_COMMND= 0x02;


int Synchronize(uint8_t *txBuff, size_t txLength, uint8_t *rxBuff, size_t rxLength)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	603b      	str	r3, [r7, #0]
  int size=0; //受信したbyte数
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_11,1);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa0:	4818      	ldr	r0, [pc, #96]	; (8001004 <Synchronize+0x7c>)
 8000fa2:	f004 fb57 	bl	8005654 <HAL_GPIO_WritePin>
  HAL_UART_Transmit(&huart5,(uint8_t*)txBuff, txLength,20);
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	2314      	movs	r3, #20
 8000fac:	68f9      	ldr	r1, [r7, #12]
 8000fae:	4816      	ldr	r0, [pc, #88]	; (8001008 <Synchronize+0x80>)
 8000fb0:	f005 ffb5 	bl	8006f1e <HAL_UART_Transmit>
  while(HAL_UART_GetState(&huart5)==HAL_UART_STATE_BUSY_TX){}
 8000fb4:	bf00      	nop
 8000fb6:	4814      	ldr	r0, [pc, #80]	; (8001008 <Synchronize+0x80>)
 8000fb8:	f006 f984 	bl	80072c4 <HAL_UART_GetState>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b21      	cmp	r3, #33	; 0x21
 8000fc0:	d0f9      	beq.n	8000fb6 <Synchronize+0x2e>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_11,0);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fc8:	480e      	ldr	r0, [pc, #56]	; (8001004 <Synchronize+0x7c>)
 8000fca:	f004 fb43 	bl	8005654 <HAL_GPIO_WritePin>
  size= HAL_UART_Receive(&huart5,(uint8_t*)rxBuff, rxLength,20);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	2314      	movs	r3, #20
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	480c      	ldr	r0, [pc, #48]	; (8001008 <Synchronize+0x80>)
 8000fd8:	f006 f83a 	bl	8007050 <HAL_UART_Receive>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	617b      	str	r3, [r7, #20]
  while(HAL_UART_GetState(&huart5)==HAL_UART_STATE_BUSY_RX){}
 8000fe0:	bf00      	nop
 8000fe2:	4809      	ldr	r0, [pc, #36]	; (8001008 <Synchronize+0x80>)
 8000fe4:	f006 f96e 	bl	80072c4 <HAL_UART_GetState>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b22      	cmp	r3, #34	; 0x22
 8000fec:	d0f9      	beq.n	8000fe2 <Synchronize+0x5a>
  if (size != HAL_OK) //指定した受信数かどうか確認
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <Synchronize+0x70>
  {
    return 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	e000      	b.n	8000ffa <Synchronize+0x72>
  }
  return 1;
 8000ff8:	2301      	movs	r3, #1
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40020800 	.word	0x40020800
 8001008:	200006e0 	.word	0x200006e0

0800100c <ics_set_pos>:

int ics_set_pos(uint8_t id,unsigned short pos)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	460a      	mov	r2, r1
 8001016:	71fb      	strb	r3, [r7, #7]
 8001018:	4613      	mov	r3, r2
 800101a:	80bb      	strh	r3, [r7, #4]
  uint8_t tx_data[3];
  uint8_t rx_data[3];
  int flag;
  int rAngle;   //受信した角度データ
  /// 送信コマンドを作成
  tx_data[0] = ICS_POS_CMD + id;
 800101c:	2280      	movs	r2, #128	; 0x80
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	4413      	add	r3, r2
 8001022:	b2db      	uxtb	r3, r3
 8001024:	733b      	strb	r3, [r7, #12]
  tx_data[1] = (uint8_t)((pos & 0x3F80) >> 7);
 8001026:	88bb      	ldrh	r3, [r7, #4]
 8001028:	11db      	asrs	r3, r3, #7
 800102a:	b2db      	uxtb	r3, r3
 800102c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001030:	b2db      	uxtb	r3, r3
 8001032:	737b      	strb	r3, [r7, #13]
  tx_data[2] = (uint8_t)(pos & 0x007F);
 8001034:	88bb      	ldrh	r3, [r7, #4]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800103c:	b2db      	uxtb	r3, r3
 800103e:	73bb      	strb	r3, [r7, #14]

  //送受信を行う
  flag = Synchronize(tx_data,3,rx_data,3);
 8001040:	f107 0208 	add.w	r2, r7, #8
 8001044:	f107 000c 	add.w	r0, r7, #12
 8001048:	2303      	movs	r3, #3
 800104a:	2103      	movs	r1, #3
 800104c:	f7ff ff9c 	bl	8000f88 <Synchronize>
 8001050:	6178      	str	r0, [r7, #20]

  if(flag == 0) //失敗した場合は-1を返す
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d102      	bne.n	800105e <ics_set_pos+0x52>
  {
    return -1;
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
 800105c:	e009      	b.n	8001072 <ics_set_pos+0x66>
  }

  rAngle = ((rx_data[1] << 7) & 0x3F80) + (rx_data[2] & 0x007F);
 800105e:	7a7b      	ldrb	r3, [r7, #9]
 8001060:	01db      	lsls	r3, r3, #7
 8001062:	f403 527e 	and.w	r2, r3, #16256	; 0x3f80
 8001066:	7abb      	ldrb	r3, [r7, #10]
 8001068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]

  return rAngle;
 8001070:	693b      	ldr	r3, [r7, #16]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8001080:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <MX_CAN1_Init+0x64>)
 8001082:	4a18      	ldr	r2, [pc, #96]	; (80010e4 <MX_CAN1_Init+0x68>)
 8001084:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 8001086:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <MX_CAN1_Init+0x64>)
 8001088:	2207      	movs	r2, #7
 800108a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800108c:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <MX_CAN1_Init+0x64>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001092:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <MX_CAN1_Init+0x64>)
 8001094:	2200      	movs	r2, #0
 8001096:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_CAN1_Init+0x64>)
 800109a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800109e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <MX_CAN1_Init+0x64>)
 80010a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80010a6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80010a8:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <MX_CAN1_Init+0x64>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80010ae:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <MX_CAN1_Init+0x64>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <MX_CAN1_Init+0x64>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <MX_CAN1_Init+0x64>)
 80010bc:	2200      	movs	r2, #0
 80010be:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <MX_CAN1_Init+0x64>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <MX_CAN1_Init+0x64>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80010cc:	4804      	ldr	r0, [pc, #16]	; (80010e0 <MX_CAN1_Init+0x64>)
 80010ce:	f002 fe3b 	bl	8003d48 <HAL_CAN_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80010d8:	f001 fcf2 	bl	8002ac0 <Error_Handler>
  }

}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200004c4 	.word	0x200004c4
 80010e4:	40006400 	.word	0x40006400

080010e8 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <MX_CAN2_Init+0x64>)
 80010ee:	4a18      	ldr	r2, [pc, #96]	; (8001150 <MX_CAN2_Init+0x68>)
 80010f0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 7;
 80010f2:	4b16      	ldr	r3, [pc, #88]	; (800114c <MX_CAN2_Init+0x64>)
 80010f4:	2207      	movs	r2, #7
 80010f6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_CAN2_Init+0x64>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <MX_CAN2_Init+0x64>)
 8001100:	2200      	movs	r2, #0
 8001102:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_CAN2_Init+0x64>)
 8001106:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800110a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <MX_CAN2_Init+0x64>)
 800110e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001112:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001114:	4b0d      	ldr	r3, [pc, #52]	; (800114c <MX_CAN2_Init+0x64>)
 8001116:	2200      	movs	r2, #0
 8001118:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <MX_CAN2_Init+0x64>)
 800111c:	2200      	movs	r2, #0
 800111e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001120:	4b0a      	ldr	r3, [pc, #40]	; (800114c <MX_CAN2_Init+0x64>)
 8001122:	2200      	movs	r2, #0
 8001124:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <MX_CAN2_Init+0x64>)
 8001128:	2200      	movs	r2, #0
 800112a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <MX_CAN2_Init+0x64>)
 800112e:	2200      	movs	r2, #0
 8001130:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <MX_CAN2_Init+0x64>)
 8001134:	2200      	movs	r2, #0
 8001136:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001138:	4804      	ldr	r0, [pc, #16]	; (800114c <MX_CAN2_Init+0x64>)
 800113a:	f002 fe05 	bl	8003d48 <HAL_CAN_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001144:	f001 fcbc 	bl	8002ac0 <Error_Handler>
  }

}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2000049c 	.word	0x2000049c
 8001150:	40006800 	.word	0x40006800

08001154 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08c      	sub	sp, #48	; 0x30
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 031c 	add.w	r3, r7, #28
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a53      	ldr	r2, [pc, #332]	; (80012c0 <HAL_CAN_MspInit+0x16c>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d146      	bne.n	8001204 <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001176:	4b53      	ldr	r3, [pc, #332]	; (80012c4 <HAL_CAN_MspInit+0x170>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	3301      	adds	r3, #1
 800117c:	4a51      	ldr	r2, [pc, #324]	; (80012c4 <HAL_CAN_MspInit+0x170>)
 800117e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001180:	4b50      	ldr	r3, [pc, #320]	; (80012c4 <HAL_CAN_MspInit+0x170>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d10d      	bne.n	80011a4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001188:	2300      	movs	r3, #0
 800118a:	61bb      	str	r3, [r7, #24]
 800118c:	4b4e      	ldr	r3, [pc, #312]	; (80012c8 <HAL_CAN_MspInit+0x174>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	4a4d      	ldr	r2, [pc, #308]	; (80012c8 <HAL_CAN_MspInit+0x174>)
 8001192:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001196:	6413      	str	r3, [r2, #64]	; 0x40
 8001198:	4b4b      	ldr	r3, [pc, #300]	; (80012c8 <HAL_CAN_MspInit+0x174>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a0:	61bb      	str	r3, [r7, #24]
 80011a2:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
 80011a8:	4b47      	ldr	r3, [pc, #284]	; (80012c8 <HAL_CAN_MspInit+0x174>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ac:	4a46      	ldr	r2, [pc, #280]	; (80012c8 <HAL_CAN_MspInit+0x174>)
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	6313      	str	r3, [r2, #48]	; 0x30
 80011b4:	4b44      	ldr	r3, [pc, #272]	; (80012c8 <HAL_CAN_MspInit+0x174>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80011c0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ce:	2303      	movs	r3, #3
 80011d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80011d2:	2309      	movs	r3, #9
 80011d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	4619      	mov	r1, r3
 80011dc:	483b      	ldr	r0, [pc, #236]	; (80012cc <HAL_CAN_MspInit+0x178>)
 80011de:	f004 f88f 	bl	8005300 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2101      	movs	r1, #1
 80011e6:	2014      	movs	r0, #20
 80011e8:	f003 fce5 	bl	8004bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80011ec:	2014      	movs	r0, #20
 80011ee:	f003 fcfe 	bl	8004bee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 2, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2102      	movs	r1, #2
 80011f6:	2015      	movs	r0, #21
 80011f8:	f003 fcdd 	bl	8004bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80011fc:	2015      	movs	r0, #21
 80011fe:	f003 fcf6 	bl	8004bee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001202:	e058      	b.n	80012b6 <HAL_CAN_MspInit+0x162>
  else if(canHandle->Instance==CAN2)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a31      	ldr	r2, [pc, #196]	; (80012d0 <HAL_CAN_MspInit+0x17c>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d153      	bne.n	80012b6 <HAL_CAN_MspInit+0x162>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
 8001212:	4b2d      	ldr	r3, [pc, #180]	; (80012c8 <HAL_CAN_MspInit+0x174>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	4a2c      	ldr	r2, [pc, #176]	; (80012c8 <HAL_CAN_MspInit+0x174>)
 8001218:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800121c:	6413      	str	r3, [r2, #64]	; 0x40
 800121e:	4b2a      	ldr	r3, [pc, #168]	; (80012c8 <HAL_CAN_MspInit+0x174>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800122a:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <HAL_CAN_MspInit+0x170>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	3301      	adds	r3, #1
 8001230:	4a24      	ldr	r2, [pc, #144]	; (80012c4 <HAL_CAN_MspInit+0x170>)
 8001232:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001234:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <HAL_CAN_MspInit+0x170>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d10d      	bne.n	8001258 <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <HAL_CAN_MspInit+0x174>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	4a20      	ldr	r2, [pc, #128]	; (80012c8 <HAL_CAN_MspInit+0x174>)
 8001246:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800124a:	6413      	str	r3, [r2, #64]	; 0x40
 800124c:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <HAL_CAN_MspInit+0x174>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <HAL_CAN_MspInit+0x174>)
 800125e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001260:	4a19      	ldr	r2, [pc, #100]	; (80012c8 <HAL_CAN_MspInit+0x174>)
 8001262:	f043 0302 	orr.w	r3, r3, #2
 8001266:	6313      	str	r3, [r2, #48]	; 0x30
 8001268:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <HAL_CAN_MspInit+0x174>)
 800126a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001274:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001286:	2309      	movs	r3, #9
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	4619      	mov	r1, r3
 8001290:	4810      	ldr	r0, [pc, #64]	; (80012d4 <HAL_CAN_MspInit+0x180>)
 8001292:	f004 f835 	bl	8005300 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 3, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	2103      	movs	r1, #3
 800129a:	2040      	movs	r0, #64	; 0x40
 800129c:	f003 fc8b 	bl	8004bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80012a0:	2040      	movs	r0, #64	; 0x40
 80012a2:	f003 fca4 	bl	8004bee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 4, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2104      	movs	r1, #4
 80012aa:	2041      	movs	r0, #65	; 0x41
 80012ac:	f003 fc83 	bl	8004bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80012b0:	2041      	movs	r0, #65	; 0x41
 80012b2:	f003 fc9c 	bl	8004bee <HAL_NVIC_EnableIRQ>
}
 80012b6:	bf00      	nop
 80012b8:	3730      	adds	r7, #48	; 0x30
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40006400 	.word	0x40006400
 80012c4:	200001f8 	.word	0x200001f8
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40020000 	.word	0x40020000
 80012d0:	40006800 	.word	0x40006800
 80012d4:	40020400 	.word	0x40020400

080012d8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <MX_DMA_Init+0x3c>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <MX_DMA_Init+0x3c>)
 80012e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <MX_DMA_Init+0x3c>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2105      	movs	r1, #5
 80012fe:	200c      	movs	r0, #12
 8001300:	f003 fc59 	bl	8004bb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001304:	200c      	movs	r0, #12
 8001306:	f003 fc72 	bl	8004bee <HAL_NVIC_EnableIRQ>

}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800

08001318 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
 800132c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	4b57      	ldr	r3, [pc, #348]	; (8001490 <MX_GPIO_Init+0x178>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a56      	ldr	r2, [pc, #344]	; (8001490 <MX_GPIO_Init+0x178>)
 8001338:	f043 0304 	orr.w	r3, r3, #4
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b54      	ldr	r3, [pc, #336]	; (8001490 <MX_GPIO_Init+0x178>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0304 	and.w	r3, r3, #4
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	4b50      	ldr	r3, [pc, #320]	; (8001490 <MX_GPIO_Init+0x178>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a4f      	ldr	r2, [pc, #316]	; (8001490 <MX_GPIO_Init+0x178>)
 8001354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b4d      	ldr	r3, [pc, #308]	; (8001490 <MX_GPIO_Init+0x178>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	4b49      	ldr	r3, [pc, #292]	; (8001490 <MX_GPIO_Init+0x178>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a48      	ldr	r2, [pc, #288]	; (8001490 <MX_GPIO_Init+0x178>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b46      	ldr	r3, [pc, #280]	; (8001490 <MX_GPIO_Init+0x178>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	4b42      	ldr	r3, [pc, #264]	; (8001490 <MX_GPIO_Init+0x178>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a41      	ldr	r2, [pc, #260]	; (8001490 <MX_GPIO_Init+0x178>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b3f      	ldr	r3, [pc, #252]	; (8001490 <MX_GPIO_Init+0x178>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	603b      	str	r3, [r7, #0]
 80013a2:	4b3b      	ldr	r3, [pc, #236]	; (8001490 <MX_GPIO_Init+0x178>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a3a      	ldr	r2, [pc, #232]	; (8001490 <MX_GPIO_Init+0x178>)
 80013a8:	f043 0308 	orr.w	r3, r3, #8
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b38      	ldr	r3, [pc, #224]	; (8001490 <MX_GPIO_Init+0x178>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	f248 0120 	movw	r1, #32800	; 0x8020
 80013c0:	4834      	ldr	r0, [pc, #208]	; (8001494 <MX_GPIO_Init+0x17c>)
 80013c2:	f004 f947 	bl	8005654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80013cc:	4832      	ldr	r0, [pc, #200]	; (8001498 <MX_GPIO_Init+0x180>)
 80013ce:	f004 f941 	bl	8005654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80013d8:	4830      	ldr	r0, [pc, #192]	; (800149c <MX_GPIO_Init+0x184>)
 80013da:	f004 f93b 	bl	8005654 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0 
                           PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 80013de:	f24e 0303 	movw	r3, #57347	; 0xe003
 80013e2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	482a      	ldr	r0, [pc, #168]	; (800149c <MX_GPIO_Init+0x184>)
 80013f4:	f003 ff84 	bl	8005300 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 80013f8:	f248 0320 	movw	r3, #32800	; 0x8020
 80013fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fe:	2301      	movs	r3, #1
 8001400:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2300      	movs	r3, #0
 8001408:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4619      	mov	r1, r3
 8001410:	4820      	ldr	r0, [pc, #128]	; (8001494 <MX_GPIO_Init+0x17c>)
 8001412:	f003 ff75 	bl	8005300 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001416:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800141a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141c:	2301      	movs	r3, #1
 800141e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2300      	movs	r3, #0
 8001426:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	4619      	mov	r1, r3
 800142e:	481a      	ldr	r0, [pc, #104]	; (8001498 <MX_GPIO_Init+0x180>)
 8001430:	f003 ff66 	bl	8005300 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143a:	2300      	movs	r3, #0
 800143c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4619      	mov	r1, r3
 8001448:	4812      	ldr	r0, [pc, #72]	; (8001494 <MX_GPIO_Init+0x17c>)
 800144a:	f003 ff59 	bl	8005300 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800144e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	4619      	mov	r1, r3
 8001466:	480d      	ldr	r0, [pc, #52]	; (800149c <MX_GPIO_Init+0x184>)
 8001468:	f003 ff4a 	bl	8005300 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 800146c:	f44f 734c 	mov.w	r3, #816	; 0x330
 8001470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001472:	2300      	movs	r3, #0
 8001474:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_GPIO_Init+0x180>)
 8001482:	f003 ff3d 	bl	8005300 <HAL_GPIO_Init>

}
 8001486:	bf00      	nop
 8001488:	3728      	adds	r7, #40	; 0x28
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	40020000 	.word	0x40020000
 8001498:	40020400 	.word	0x40020400
 800149c:	40020800 	.word	0x40020800

080014a0 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
HAL_UART_Transmit(&huart1, &ch, 1, 1);
 80014aa:	1df9      	adds	r1, r7, #7
 80014ac:	2301      	movs	r3, #1
 80014ae:	2201      	movs	r2, #1
 80014b0:	4803      	ldr	r0, [pc, #12]	; (80014c0 <__io_putchar+0x20>)
 80014b2:	f005 fd34 	bl	8006f1e <HAL_UART_Transmit>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000720 	.word	0x20000720

080014c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c4:	b5b0      	push	{r4, r5, r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ca:	f002 fba9 	bl	8003c20 <HAL_Init>
  //No1:put center use Cam and shoot
  //No2:put random use Cam and shoot
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ce:	f000 f9e3 	bl	8001898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d2:	f7ff ff21 	bl	8001318 <MX_GPIO_Init>
  MX_DMA_Init();
 80014d6:	f7ff feff 	bl	80012d8 <MX_DMA_Init>
  MX_CAN1_Init();
 80014da:	f7ff fdcf 	bl	800107c <MX_CAN1_Init>
  MX_CAN2_Init();
 80014de:	f7ff fe03 	bl	80010e8 <MX_CAN2_Init>
  MX_TIM1_Init();
 80014e2:	f001 fde1 	bl	80030a8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80014e6:	f001 fe35 	bl	8003154 <MX_TIM2_Init>
  MX_TIM3_Init();
 80014ea:	f001 fe85 	bl	80031f8 <MX_TIM3_Init>
  MX_TIM7_Init();
 80014ee:	f001 fef1 	bl	80032d4 <MX_TIM7_Init>
  MX_TIM8_Init();
 80014f2:	f001 ff21 	bl	8003338 <MX_TIM8_Init>
  MX_UART5_Init();
 80014f6:	f002 f901 	bl	80036fc <MX_UART5_Init>
  MX_USART1_UART_Init();
 80014fa:	f002 f92b 	bl	8003754 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80014fe:	f002 f953 	bl	80037a8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001502:	f002 f97b 	bl	80037fc <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001506:	f002 f9a3 	bl	8003850 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  setbuf(stdout, NULL);
 800150a:	4b73      	ldr	r3, [pc, #460]	; (80016d8 <main+0x214>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f007 f8b8 	bl	8008688 <setbuf>
  sConfigOC.Pulse = 1500;
 8001518:	4b70      	ldr	r3, [pc, #448]	; (80016dc <main+0x218>)
 800151a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800151e:	605a      	str	r2, [r3, #4]
  HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3);
 8001520:	2208      	movs	r2, #8
 8001522:	496e      	ldr	r1, [pc, #440]	; (80016dc <main+0x218>)
 8001524:	486e      	ldr	r0, [pc, #440]	; (80016e0 <main+0x21c>)
 8001526:	f005 f867 	bl	80065f8 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800152a:	2108      	movs	r1, #8
 800152c:	486c      	ldr	r0, [pc, #432]	; (80016e0 <main+0x21c>)
 800152e:	f004 fe53 	bl	80061d8 <HAL_TIM_PWM_Start>
  sConfigOC.Pulse = 1500;
 8001532:	4b6a      	ldr	r3, [pc, #424]	; (80016dc <main+0x218>)
 8001534:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001538:	605a      	str	r2, [r3, #4]
  HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4);
 800153a:	220c      	movs	r2, #12
 800153c:	4967      	ldr	r1, [pc, #412]	; (80016dc <main+0x218>)
 800153e:	4868      	ldr	r0, [pc, #416]	; (80016e0 <main+0x21c>)
 8001540:	f005 f85a 	bl	80065f8 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001544:	210c      	movs	r1, #12
 8001546:	4866      	ldr	r0, [pc, #408]	; (80016e0 <main+0x21c>)
 8001548:	f004 fe46 	bl	80061d8 <HAL_TIM_PWM_Start>
  sConfigOC.Pulse = 1500;
 800154c:	4b63      	ldr	r3, [pc, #396]	; (80016dc <main+0x218>)
 800154e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001552:	605a      	str	r2, [r3, #4]
  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 8001554:	2200      	movs	r2, #0
 8001556:	4961      	ldr	r1, [pc, #388]	; (80016dc <main+0x218>)
 8001558:	4862      	ldr	r0, [pc, #392]	; (80016e4 <main+0x220>)
 800155a:	f005 f84d 	bl	80065f8 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800155e:	2100      	movs	r1, #0
 8001560:	4860      	ldr	r0, [pc, #384]	; (80016e4 <main+0x220>)
 8001562:	f004 fe39 	bl	80061d8 <HAL_TIM_PWM_Start>
  sConfigOC.Pulse = 1500;
 8001566:	4b5d      	ldr	r3, [pc, #372]	; (80016dc <main+0x218>)
 8001568:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800156c:	605a      	str	r2, [r3, #4]
  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 800156e:	2204      	movs	r2, #4
 8001570:	495a      	ldr	r1, [pc, #360]	; (80016dc <main+0x218>)
 8001572:	485c      	ldr	r0, [pc, #368]	; (80016e4 <main+0x220>)
 8001574:	f005 f840 	bl	80065f8 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001578:	2104      	movs	r1, #4
 800157a:	485a      	ldr	r0, [pc, #360]	; (80016e4 <main+0x220>)
 800157c:	f004 fe2c 	bl	80061d8 <HAL_TIM_PWM_Start>
  sConfigOC.Pulse = 1500;
 8001580:	4b56      	ldr	r3, [pc, #344]	; (80016dc <main+0x218>)
 8001582:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001586:	605a      	str	r2, [r3, #4]
  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3);
 8001588:	2208      	movs	r2, #8
 800158a:	4954      	ldr	r1, [pc, #336]	; (80016dc <main+0x218>)
 800158c:	4855      	ldr	r0, [pc, #340]	; (80016e4 <main+0x220>)
 800158e:	f005 f833 	bl	80065f8 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001592:	2108      	movs	r1, #8
 8001594:	4853      	ldr	r0, [pc, #332]	; (80016e4 <main+0x220>)
 8001596:	f004 fe1f 	bl	80061d8 <HAL_TIM_PWM_Start>
  sConfigOC.Pulse = 1500;
 800159a:	4b50      	ldr	r3, [pc, #320]	; (80016dc <main+0x218>)
 800159c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80015a0:	605a      	str	r2, [r3, #4]
  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4);
 80015a2:	220c      	movs	r2, #12
 80015a4:	494d      	ldr	r1, [pc, #308]	; (80016dc <main+0x218>)
 80015a6:	484f      	ldr	r0, [pc, #316]	; (80016e4 <main+0x220>)
 80015a8:	f005 f826 	bl	80065f8 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80015ac:	210c      	movs	r1, #12
 80015ae:	484d      	ldr	r0, [pc, #308]	; (80016e4 <main+0x220>)
 80015b0:	f004 fe12 	bl	80061d8 <HAL_TIM_PWM_Start>
  if(HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK){Error_Handler();}
 80015b4:	494c      	ldr	r1, [pc, #304]	; (80016e8 <main+0x224>)
 80015b6:	484d      	ldr	r0, [pc, #308]	; (80016ec <main+0x228>)
 80015b8:	f004 fe4c 	bl	8006254 <HAL_TIM_Encoder_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <main+0x102>
 80015c2:	f001 fa7d 	bl	8002ac0 <Error_Handler>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80015c6:	213c      	movs	r1, #60	; 0x3c
 80015c8:	4848      	ldr	r0, [pc, #288]	; (80016ec <main+0x228>)
 80015ca:	f004 fed5 	bl	8006378 <HAL_TIM_Encoder_Start>
  TIM1->CNT=15000;
 80015ce:	4b48      	ldr	r3, [pc, #288]	; (80016f0 <main+0x22c>)
 80015d0:	f643 2298 	movw	r2, #15000	; 0x3a98
 80015d4:	625a      	str	r2, [r3, #36]	; 0x24
  if(HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK){Error_Handler();}
 80015d6:	4944      	ldr	r1, [pc, #272]	; (80016e8 <main+0x224>)
 80015d8:	4846      	ldr	r0, [pc, #280]	; (80016f4 <main+0x230>)
 80015da:	f004 fe3b 	bl	8006254 <HAL_TIM_Encoder_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <main+0x124>
 80015e4:	f001 fa6c 	bl	8002ac0 <Error_Handler>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80015e8:	213c      	movs	r1, #60	; 0x3c
 80015ea:	4842      	ldr	r0, [pc, #264]	; (80016f4 <main+0x230>)
 80015ec:	f004 fec4 	bl	8006378 <HAL_TIM_Encoder_Start>
  TIM2->CNT=15000;
 80015f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015f4:	f643 2298 	movw	r2, #15000	; 0x3a98
 80015f8:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_CAN_Start(&hcan1);
 80015fa:	483f      	ldr	r0, [pc, #252]	; (80016f8 <main+0x234>)
 80015fc:	f002 fd80 	bl	8004100 <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){Error_Handler();}
 8001600:	2102      	movs	r1, #2
 8001602:	483d      	ldr	r0, [pc, #244]	; (80016f8 <main+0x234>)
 8001604:	f002 ffad 	bl	8004562 <HAL_CAN_ActivateNotification>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <main+0x14e>
 800160e:	f001 fa57 	bl	8002ac0 <Error_Handler>
  HAL_CAN_Start(&hcan2);
 8001612:	483a      	ldr	r0, [pc, #232]	; (80016fc <main+0x238>)
 8001614:	f002 fd74 	bl	8004100 <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){Error_Handler();}
 8001618:	2102      	movs	r1, #2
 800161a:	4838      	ldr	r0, [pc, #224]	; (80016fc <main+0x238>)
 800161c:	f002 ffa1 	bl	8004562 <HAL_CAN_ActivateNotification>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <main+0x166>
 8001626:	f001 fa4b 	bl	8002ac0 <Error_Handler>
  HAL_Delay(1000);
 800162a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800162e:	f002 fb69 	bl	8003d04 <HAL_Delay>
  initPID();
 8001632:	f001 f973 	bl	800291c <initPID>
  initLoadPID();
 8001636:	f001 f9cf 	bl	80029d8 <initLoadPID>
  initCanFilter();
 800163a:	f001 f9f7 	bl	8002a2c <initCanFilter>
  HAL_UART_Receive_DMA(&huart3,(uint8_t*) Rxbuf_jetson, 7);
 800163e:	2207      	movs	r2, #7
 8001640:	492f      	ldr	r1, [pc, #188]	; (8001700 <main+0x23c>)
 8001642:	4830      	ldr	r0, [pc, #192]	; (8001704 <main+0x240>)
 8001644:	f005 fdaa 	bl	800719c <HAL_UART_Receive_DMA>
  initFriction();
 8001648:	f001 f90e 	bl	8002868 <initFriction>
  fire=0.0;
 800164c:	4b2e      	ldr	r3, [pc, #184]	; (8001708 <main+0x244>)
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
  torque_sum=0.0;
 8001654:	4b2d      	ldr	r3, [pc, #180]	; (800170c <main+0x248>)
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
  target_pit=90;
 800165c:	4b2c      	ldr	r3, [pc, #176]	; (8001710 <main+0x24c>)
 800165e:	225a      	movs	r2, #90	; 0x5a
 8001660:	601a      	str	r2, [r3, #0]
  target_yaw=90;
 8001662:	4b2c      	ldr	r3, [pc, #176]	; (8001714 <main+0x250>)
 8001664:	225a      	movs	r2, #90	; 0x5a
 8001666:	601a      	str	r2, [r3, #0]
  target_place=2325;
 8001668:	4b2b      	ldr	r3, [pc, #172]	; (8001718 <main+0x254>)
 800166a:	f640 1215 	movw	r2, #2325	; 0x915
 800166e:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim7);
 8001670:	482a      	ldr	r0, [pc, #168]	; (800171c <main+0x258>)
 8001672:	f004 fd62 	bl	800613a <HAL_TIM_Base_Start_IT>
  program_No=!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)+!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)*2+
 8001676:	f44f 7100 	mov.w	r1, #512	; 0x200
 800167a:	4829      	ldr	r0, [pc, #164]	; (8001720 <main+0x25c>)
 800167c:	f003 ffd2 	bl	8005624 <HAL_GPIO_ReadPin>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	bf0c      	ite	eq
 8001686:	2301      	moveq	r3, #1
 8001688:	2300      	movne	r3, #0
 800168a:	b2db      	uxtb	r3, r3
 800168c:	461c      	mov	r4, r3
 800168e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001692:	4823      	ldr	r0, [pc, #140]	; (8001720 <main+0x25c>)
 8001694:	f003 ffc6 	bl	8005624 <HAL_GPIO_ReadPin>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <main+0x1de>
 800169e:	2302      	movs	r3, #2
 80016a0:	e000      	b.n	80016a4 <main+0x1e0>
 80016a2:	2300      	movs	r3, #0
 80016a4:	4423      	add	r3, r4
 80016a6:	b2dc      	uxtb	r4, r3
 				!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)*4+!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14)*8;
 80016a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ac:	481d      	ldr	r0, [pc, #116]	; (8001724 <main+0x260>)
 80016ae:	f003 ffb9 	bl	8005624 <HAL_GPIO_ReadPin>
 80016b2:	4603      	mov	r3, r0
  program_No=!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)+!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)*2+
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <main+0x1f8>
 80016b8:	2304      	movs	r3, #4
 80016ba:	e000      	b.n	80016be <main+0x1fa>
 80016bc:	2300      	movs	r3, #0
 80016be:	4423      	add	r3, r4
 80016c0:	b2dc      	uxtb	r4, r3
 				!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)*4+!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14)*8;
 80016c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016c6:	4817      	ldr	r0, [pc, #92]	; (8001724 <main+0x260>)
 80016c8:	f003 ffac 	bl	8005624 <HAL_GPIO_ReadPin>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d12a      	bne.n	8001728 <main+0x264>
 80016d2:	2308      	movs	r3, #8
 80016d4:	e029      	b.n	800172a <main+0x266>
 80016d6:	bf00      	nop
 80016d8:	2000000c 	.word	0x2000000c
 80016dc:	200003b4 	.word	0x200003b4
 80016e0:	20000500 	.word	0x20000500
 80016e4:	20000540 	.word	0x20000540
 80016e8:	20000428 	.word	0x20000428
 80016ec:	20000580 	.word	0x20000580
 80016f0:	40010000 	.word	0x40010000
 80016f4:	200005c0 	.word	0x200005c0
 80016f8:	200004c4 	.word	0x200004c4
 80016fc:	2000049c 	.word	0x2000049c
 8001700:	20000420 	.word	0x20000420
 8001704:	200006a0 	.word	0x200006a0
 8001708:	20000494 	.word	0x20000494
 800170c:	2000045c 	.word	0x2000045c
 8001710:	200003a0 	.word	0x200003a0
 8001714:	20000458 	.word	0x20000458
 8001718:	20000264 	.word	0x20000264
 800171c:	20000600 	.word	0x20000600
 8001720:	40020400 	.word	0x40020400
 8001724:	40020800 	.word	0x40020800
 8001728:	2300      	movs	r3, #0
 800172a:	4423      	add	r3, r4
 800172c:	b2da      	uxtb	r2, r3
  program_No=!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)+!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)*2+
 800172e:	4b45      	ldr	r3, [pc, #276]	; (8001844 <main+0x380>)
 8001730:	701a      	strb	r2, [r3, #0]


	target_pit=70;
 8001732:	4b45      	ldr	r3, [pc, #276]	; (8001848 <main+0x384>)
 8001734:	2246      	movs	r2, #70	; 0x46
 8001736:	601a      	str	r2, [r3, #0]
	target_yaw=90;
 8001738:	4b44      	ldr	r3, [pc, #272]	; (800184c <main+0x388>)
 800173a:	225a      	movs	r2, #90	; 0x5a
 800173c:	601a      	str	r2, [r3, #0]
	target_pit_temp=map(target_pit,180,0,4833,10166);
 800173e:	4b42      	ldr	r3, [pc, #264]	; (8001848 <main+0x384>)
 8001740:	6818      	ldr	r0, [r3, #0]
 8001742:	f242 73b6 	movw	r3, #10166	; 0x27b6
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	f241 23e1 	movw	r3, #4833	; 0x12e1
 800174c:	2200      	movs	r2, #0
 800174e:	21b4      	movs	r1, #180	; 0xb4
 8001750:	f001 f99a 	bl	8002a88 <map>
 8001754:	4602      	mov	r2, r0
 8001756:	4b3e      	ldr	r3, [pc, #248]	; (8001850 <main+0x38c>)
 8001758:	601a      	str	r2, [r3, #0]
	target_yaw_temp=map(target_yaw,180,0,4833,10166);
 800175a:	4b3c      	ldr	r3, [pc, #240]	; (800184c <main+0x388>)
 800175c:	6818      	ldr	r0, [r3, #0]
 800175e:	f242 73b6 	movw	r3, #10166	; 0x27b6
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	f241 23e1 	movw	r3, #4833	; 0x12e1
 8001768:	2200      	movs	r2, #0
 800176a:	21b4      	movs	r1, #180	; 0xb4
 800176c:	f001 f98c 	bl	8002a88 <map>
 8001770:	4602      	mov	r2, r0
 8001772:	4b38      	ldr	r3, [pc, #224]	; (8001854 <main+0x390>)
 8001774:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,start_sw);
 8001776:	4b38      	ldr	r3, [pc, #224]	; (8001858 <main+0x394>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001780:	4836      	ldr	r0, [pc, #216]	; (800185c <main+0x398>)
 8001782:	f003 ff67 	bl	8005654 <HAL_GPIO_WritePin>
	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
	  printf("start=%d ",start_sw);
 8001786:	4b34      	ldr	r3, [pc, #208]	; (8001858 <main+0x394>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	4619      	mov	r1, r3
 800178c:	4834      	ldr	r0, [pc, #208]	; (8001860 <main+0x39c>)
 800178e:	f006 fecb 	bl	8008528 <iprintf>
	  printf(" E1=%d",(int)TIM1->CNT);
 8001792:	4b34      	ldr	r3, [pc, #208]	; (8001864 <main+0x3a0>)
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	4619      	mov	r1, r3
 8001798:	4833      	ldr	r0, [pc, #204]	; (8001868 <main+0x3a4>)
 800179a:	f006 fec5 	bl	8008528 <iprintf>
	  printf(" X=%d Y=%d cnt=%d check=%d pit=%d yaw=%d",target_X,target_Y,cnt_tartget,data_Jetson[5],target_pit,target_yaw);
 800179e:	4b33      	ldr	r3, [pc, #204]	; (800186c <main+0x3a8>)
 80017a0:	6819      	ldr	r1, [r3, #0]
 80017a2:	4b33      	ldr	r3, [pc, #204]	; (8001870 <main+0x3ac>)
 80017a4:	6818      	ldr	r0, [r3, #0]
 80017a6:	4b33      	ldr	r3, [pc, #204]	; (8001874 <main+0x3b0>)
 80017a8:	681c      	ldr	r4, [r3, #0]
 80017aa:	4b33      	ldr	r3, [pc, #204]	; (8001878 <main+0x3b4>)
 80017ac:	795b      	ldrb	r3, [r3, #5]
 80017ae:	461d      	mov	r5, r3
 80017b0:	4b25      	ldr	r3, [pc, #148]	; (8001848 <main+0x384>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a25      	ldr	r2, [pc, #148]	; (800184c <main+0x388>)
 80017b6:	6812      	ldr	r2, [r2, #0]
 80017b8:	9202      	str	r2, [sp, #8]
 80017ba:	9301      	str	r3, [sp, #4]
 80017bc:	9500      	str	r5, [sp, #0]
 80017be:	4623      	mov	r3, r4
 80017c0:	4602      	mov	r2, r0
 80017c2:	482e      	ldr	r0, [pc, #184]	; (800187c <main+0x3b8>)
 80017c4:	f006 feb0 	bl	8008528 <iprintf>
	  printf(" torque_sum=%f cnt_tim1=%d",torque_sum,cnt_tim_servo);
 80017c8:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <main+0x3bc>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe fedb 	bl	8000588 <__aeabi_f2d>
 80017d2:	460a      	mov	r2, r1
 80017d4:	4601      	mov	r1, r0
 80017d6:	4b2b      	ldr	r3, [pc, #172]	; (8001884 <main+0x3c0>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	4613      	mov	r3, r2
 80017de:	460a      	mov	r2, r1
 80017e0:	4829      	ldr	r0, [pc, #164]	; (8001888 <main+0x3c4>)
 80017e2:	f006 fea1 	bl	8008528 <iprintf>
//	 / printf(" sw1=%d sw2=%d",limit_sw1,limit_sw2);
	  //printf(" =%d",ics_set_pos(1,7500));
	  //printf(" =%d",ics_set_pos(2,7500));
	  printf("\r\n");
 80017e6:	4829      	ldr	r0, [pc, #164]	; (800188c <main+0x3c8>)
 80017e8:	f006 ff12 	bl	8008610 <puts>
	  target_X=((data_Jetson[0]<<8) | data_Jetson[1])- 32767;
 80017ec:	4b22      	ldr	r3, [pc, #136]	; (8001878 <main+0x3b4>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	021b      	lsls	r3, r3, #8
 80017f2:	4a21      	ldr	r2, [pc, #132]	; (8001878 <main+0x3b4>)
 80017f4:	7852      	ldrb	r2, [r2, #1]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 80017fc:	3b7f      	subs	r3, #127	; 0x7f
 80017fe:	4a1b      	ldr	r2, [pc, #108]	; (800186c <main+0x3a8>)
 8001800:	6013      	str	r3, [r2, #0]
	  	target_Y=((data_Jetson[2]<<8) | data_Jetson[3])- 32767;
 8001802:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <main+0x3b4>)
 8001804:	789b      	ldrb	r3, [r3, #2]
 8001806:	021b      	lsls	r3, r3, #8
 8001808:	4a1b      	ldr	r2, [pc, #108]	; (8001878 <main+0x3b4>)
 800180a:	78d2      	ldrb	r2, [r2, #3]
 800180c:	4313      	orrs	r3, r2
 800180e:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8001812:	3b7f      	subs	r3, #127	; 0x7f
 8001814:	4a16      	ldr	r2, [pc, #88]	; (8001870 <main+0x3ac>)
 8001816:	6013      	str	r3, [r2, #0]
	  	cnt_tartget=data_Jetson[4];
 8001818:	4b17      	ldr	r3, [pc, #92]	; (8001878 <main+0x3b4>)
 800181a:	791b      	ldrb	r3, [r3, #4]
 800181c:	461a      	mov	r2, r3
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <main+0x3b0>)
 8001820:	601a      	str	r2, [r3, #0]

		if(limit_sw1==0){TIM1->CNT=15000;}
 8001822:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <main+0x3cc>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d103      	bne.n	8001832 <main+0x36e>
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <main+0x3a0>)
 800182c:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001830:	625a      	str	r2, [r3, #36]	; 0x24
		if(limit_sw2==0){TIM1->CNT=16800;}
 8001832:	4b18      	ldr	r3, [pc, #96]	; (8001894 <main+0x3d0>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d19d      	bne.n	8001776 <main+0x2b2>
 800183a:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <main+0x3a0>)
 800183c:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8001840:	625a      	str	r2, [r3, #36]	; 0x24
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,start_sw);
 8001842:	e798      	b.n	8001776 <main+0x2b2>
 8001844:	200004fc 	.word	0x200004fc
 8001848:	200003a0 	.word	0x200003a0
 800184c:	20000458 	.word	0x20000458
 8001850:	20000208 	.word	0x20000208
 8001854:	20000258 	.word	0x20000258
 8001858:	200004fa 	.word	0x200004fa
 800185c:	40020000 	.word	0x40020000
 8001860:	0800a578 	.word	0x0800a578
 8001864:	40010000 	.word	0x40010000
 8001868:	0800a584 	.word	0x0800a584
 800186c:	20000498 	.word	0x20000498
 8001870:	2000025c 	.word	0x2000025c
 8001874:	20000218 	.word	0x20000218
 8001878:	2000040c 	.word	0x2000040c
 800187c:	0800a58c 	.word	0x0800a58c
 8001880:	2000045c 	.word	0x2000045c
 8001884:	200004f6 	.word	0x200004f6
 8001888:	0800a5b8 	.word	0x0800a5b8
 800188c:	0800a5d4 	.word	0x0800a5d4
 8001890:	200004f7 	.word	0x200004f7
 8001894:	200004f5 	.word	0x200004f5

08001898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b094      	sub	sp, #80	; 0x50
 800189c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800189e:	f107 031c 	add.w	r3, r7, #28
 80018a2:	2234      	movs	r2, #52	; 0x34
 80018a4:	2100      	movs	r1, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f006 f9da 	bl	8007c60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018ac:	f107 0308 	add.w	r3, r7, #8
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018bc:	2300      	movs	r3, #0
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	4b29      	ldr	r3, [pc, #164]	; (8001968 <SystemClock_Config+0xd0>)
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	4a28      	ldr	r2, [pc, #160]	; (8001968 <SystemClock_Config+0xd0>)
 80018c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ca:	6413      	str	r3, [r2, #64]	; 0x40
 80018cc:	4b26      	ldr	r3, [pc, #152]	; (8001968 <SystemClock_Config+0xd0>)
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018d8:	2300      	movs	r3, #0
 80018da:	603b      	str	r3, [r7, #0]
 80018dc:	4b23      	ldr	r3, [pc, #140]	; (800196c <SystemClock_Config+0xd4>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a22      	ldr	r2, [pc, #136]	; (800196c <SystemClock_Config+0xd4>)
 80018e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	4b20      	ldr	r3, [pc, #128]	; (800196c <SystemClock_Config+0xd4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018f0:	603b      	str	r3, [r7, #0]
 80018f2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018f4:	2301      	movs	r3, #1
 80018f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018fe:	2302      	movs	r3, #2
 8001900:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001902:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001906:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001908:	2304      	movs	r3, #4
 800190a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800190c:	23a8      	movs	r3, #168	; 0xa8
 800190e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001910:	2302      	movs	r3, #2
 8001912:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001914:	2302      	movs	r3, #2
 8001916:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001918:	2302      	movs	r3, #2
 800191a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800191c:	f107 031c 	add.w	r3, r7, #28
 8001920:	4618      	mov	r0, r3
 8001922:	f004 f985 	bl	8005c30 <HAL_RCC_OscConfig>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800192c:	f001 f8c8 	bl	8002ac0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001930:	230f      	movs	r3, #15
 8001932:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001934:	2302      	movs	r3, #2
 8001936:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001938:	2300      	movs	r3, #0
 800193a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800193c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001940:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001946:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001948:	f107 0308 	add.w	r3, r7, #8
 800194c:	2105      	movs	r1, #5
 800194e:	4618      	mov	r0, r3
 8001950:	f003 feb4 	bl	80056bc <HAL_RCC_ClockConfig>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800195a:	f001 f8b1 	bl	8002ac0 <Error_Handler>
  }
}
 800195e:	bf00      	nop
 8001960:	3750      	adds	r7, #80	; 0x50
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40023800 	.word	0x40023800
 800196c:	40007000 	.word	0x40007000

08001970 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim7.Instance) {
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b29      	ldr	r3, [pc, #164]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d14b      	bne.n	8001a1c <HAL_TIM_PeriodElapsedCallback+0xac>
		//1kHz
		if(cnt_tim_task>1){
 8001984:	4b28      	ldr	r3, [pc, #160]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d904      	bls.n	8001996 <HAL_TIM_PeriodElapsedCallback+0x26>
		//500Hz
		timerTask();
 800198c:	f000 f9be 	bl	8001d0c <timerTask>
		cnt_tim_task=0;
 8001990:	4b25      	ldr	r3, [pc, #148]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
		}
		cnt_tim_task++;
 8001996:	4b24      	ldr	r3, [pc, #144]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	3301      	adds	r3, #1
 800199c:	b2da      	uxtb	r2, r3
 800199e:	4b22      	ldr	r3, [pc, #136]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80019a0:	701a      	strb	r2, [r3, #0]
		if(cnt_tim>100){
 80019a2:	4b22      	ldr	r3, [pc, #136]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b64      	cmp	r3, #100	; 0x64
 80019a8:	d932      	bls.n	8001a10 <HAL_TIM_PeriodElapsedCallback+0xa0>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80019aa:	2120      	movs	r1, #32
 80019ac:	4820      	ldr	r0, [pc, #128]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80019ae:	f003 fe6a 	bl	8005686 <HAL_GPIO_TogglePin>
			cnt_tim=0;
 80019b2:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
			if(temp_data_Jetson!=data_Jetson[5]){
 80019b8:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80019ba:	795a      	ldrb	r2, [r3, #5]
 80019bc:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d009      	beq.n	80019d8 <HAL_TIM_PeriodElapsedCallback+0x68>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,1);
 80019c4:	2201      	movs	r2, #1
 80019c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019ca:	481c      	ldr	r0, [pc, #112]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80019cc:	f003 fe42 	bl	8005654 <HAL_GPIO_WritePin>
				jetson_connect=1;
 80019d0:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	701a      	strb	r2, [r3, #0]
 80019d6:	e017      	b.n	8001a08 <HAL_TIM_PeriodElapsedCallback+0x98>
			}
			else{
				jetson_connect=0;
 80019d8:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,0);
 80019de:	2200      	movs	r2, #0
 80019e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019e4:	4815      	ldr	r0, [pc, #84]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80019e6:	f003 fe35 	bl	8005654 <HAL_GPIO_WritePin>
				data_Jetson[0]=0;
 80019ea:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
				data_Jetson[1]=0;
 80019f0:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	705a      	strb	r2, [r3, #1]
				data_Jetson[2]=0;
 80019f6:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	709a      	strb	r2, [r3, #2]
				data_Jetson[3]=0;
 80019fc:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	70da      	strb	r2, [r3, #3]
				data_Jetson[4]=0;
 8001a02:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	711a      	strb	r2, [r3, #4]
			}
			temp_data_Jetson=data_Jetson[5];
 8001a08:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001a0a:	795a      	ldrb	r2, [r3, #5]
 8001a0c:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001a0e:	701a      	strb	r2, [r3, #0]
		}

		cnt_tim++;
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	3301      	adds	r3, #1
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001a1a:	701a      	strb	r2, [r3, #0]
	}
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000600 	.word	0x20000600
 8001a28:	200004ed 	.word	0x200004ed
 8001a2c:	200004f8 	.word	0x200004f8
 8001a30:	40020000 	.word	0x40020000
 8001a34:	2000040c 	.word	0x2000040c
 8001a38:	20000254 	.word	0x20000254
 8001a3c:	40020400 	.word	0x40020400
 8001a40:	20000490 	.word	0x20000490
 8001a44:	00000000 	.word	0x00000000

08001a48 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001a48:	b590      	push	{r4, r7, lr}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	/* Get RX message */
	if (hcan->Instance == hcan2.Instance) {// can2 bus receive interrupt
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b7e      	ldr	r3, [pc, #504]	; (8001c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d17f      	bne.n	8001b5c <HAL_CAN_RxFifo0MsgPendingCallback+0x114>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, canRxData);
 8001a5c:	4b7d      	ldr	r3, [pc, #500]	; (8001c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8001a5e:	4a7e      	ldr	r2, [pc, #504]	; (8001c58 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8001a60:	2100      	movs	r1, #0
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f002 fc6b 	bl	800433e <HAL_CAN_GetRxMessage>
		//check ESC identifier
		int id = canRxHeader.StdId - 513;
 8001a68:	4b7b      	ldr	r3, [pc, #492]	; (8001c58 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8001a70:	60bb      	str	r3, [r7, #8]

		wheelFdb[id].angle = canRxData[0] * 256 + canRxData[1];
 8001a72:	4b78      	ldr	r3, [pc, #480]	; (8001c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	021b      	lsls	r3, r3, #8
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	4b75      	ldr	r3, [pc, #468]	; (8001c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8001a7e:	785b      	ldrb	r3, [r3, #1]
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	b218      	sxth	r0, r3
 8001a88:	4974      	ldr	r1, [pc, #464]	; (8001c5c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	4413      	add	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	4602      	mov	r2, r0
 8001a98:	801a      	strh	r2, [r3, #0]
		wheelFdb[id].rpm = canRxData[2] * 256 + canRxData[3];
 8001a9a:	4b6e      	ldr	r3, [pc, #440]	; (8001c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8001a9c:	789b      	ldrb	r3, [r3, #2]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	021b      	lsls	r3, r3, #8
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	4b6b      	ldr	r3, [pc, #428]	; (8001c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8001aa6:	78db      	ldrb	r3, [r3, #3]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	4413      	add	r3, r2
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	b218      	sxth	r0, r3
 8001ab0:	496a      	ldr	r1, [pc, #424]	; (8001c5c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	4413      	add	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	3302      	adds	r3, #2
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	801a      	strh	r2, [r3, #0]
		wheelFdb[id].torque = canRxData[4] * 256 + canRxData[5];
 8001ac4:	4b63      	ldr	r3, [pc, #396]	; (8001c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8001ac6:	791b      	ldrb	r3, [r3, #4]
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	021b      	lsls	r3, r3, #8
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	4b61      	ldr	r3, [pc, #388]	; (8001c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8001ad0:	795b      	ldrb	r3, [r3, #5]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	b218      	sxth	r0, r3
 8001ada:	4960      	ldr	r1, [pc, #384]	; (8001c5c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	3304      	adds	r3, #4
 8001aea:	4602      	mov	r2, r0
 8001aec:	801a      	strh	r2, [r3, #0]
		wheelFdb[id].temp = canRxData[6];
 8001aee:	4b59      	ldr	r3, [pc, #356]	; (8001c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8001af0:	799b      	ldrb	r3, [r3, #6]
 8001af2:	b218      	sxth	r0, r3
 8001af4:	4959      	ldr	r1, [pc, #356]	; (8001c5c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	4613      	mov	r3, r2
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	4413      	add	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	3306      	adds	r3, #6
 8001b04:	4602      	mov	r2, r0
 8001b06:	801a      	strh	r2, [r3, #0]
		wheelFdb[id].omg = 6.28318530718 * (wheelFdb[id].rpm) / 1140.0;
 8001b08:	4954      	ldr	r1, [pc, #336]	; (8001c5c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	4413      	add	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	3302      	adds	r3, #2
 8001b18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7fe fd21 	bl	8000564 <__aeabi_i2d>
 8001b22:	a347      	add	r3, pc, #284	; (adr r3, 8001c40 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8001b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b28:	f7fe fd86 	bl	8000638 <__aeabi_dmul>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	460c      	mov	r4, r1
 8001b30:	4618      	mov	r0, r3
 8001b32:	4621      	mov	r1, r4
 8001b34:	a344      	add	r3, pc, #272	; (adr r3, 8001c48 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8001b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3a:	f7fe fea7 	bl	800088c <__aeabi_ddiv>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	460c      	mov	r4, r1
 8001b42:	4618      	mov	r0, r3
 8001b44:	4621      	mov	r1, r4
 8001b46:	f7ff f84f 	bl	8000be8 <__aeabi_d2f>
 8001b4a:	4944      	ldr	r1, [pc, #272]	; (8001c5c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	4413      	add	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	440b      	add	r3, r1
 8001b58:	3308      	adds	r3, #8
 8001b5a:	6018      	str	r0, [r3, #0]
	}
	if (hcan->Instance == hcan1.Instance) {// can1 bus receive interrupt
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b3f      	ldr	r3, [pc, #252]	; (8001c60 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d167      	bne.n	8001c38 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, canRxData);
 8001b68:	4b3a      	ldr	r3, [pc, #232]	; (8001c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8001b6a:	4a3b      	ldr	r2, [pc, #236]	; (8001c58 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f002 fbe5 	bl	800433e <HAL_CAN_GetRxMessage>
		motor_fdb *fdb = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
		switch (canRxHeader.StdId) {
 8001b78:	4b37      	ldr	r3, [pc, #220]	; (8001c58 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f240 2206 	movw	r2, #518	; 0x206
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d00a      	beq.n	8001b9a <HAL_CAN_RxFifo0MsgPendingCallback+0x152>
 8001b84:	f240 2207 	movw	r2, #519	; 0x207
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d009      	beq.n	8001ba0 <HAL_CAN_RxFifo0MsgPendingCallback+0x158>
 8001b8c:	f240 2205 	movw	r2, #517	; 0x205
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d108      	bne.n	8001ba6 <HAL_CAN_RxFifo0MsgPendingCallback+0x15e>
		case 0x205:
			fdb = &gimbalYawFdb;
 8001b94:	4b33      	ldr	r3, [pc, #204]	; (8001c64 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8001b96:	60fb      	str	r3, [r7, #12]
			break;
 8001b98:	e005      	b.n	8001ba6 <HAL_CAN_RxFifo0MsgPendingCallback+0x15e>
		case 0x206:
			fdb = &gimbalPitchFdb;
 8001b9a:	4b33      	ldr	r3, [pc, #204]	; (8001c68 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8001b9c:	60fb      	str	r3, [r7, #12]
			break;
 8001b9e:	e002      	b.n	8001ba6 <HAL_CAN_RxFifo0MsgPendingCallback+0x15e>
		case 0x207:
			fdb = &loadMotorFdb;
 8001ba0:	4b32      	ldr	r3, [pc, #200]	; (8001c6c <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8001ba2:	60fb      	str	r3, [r7, #12]
			break;
 8001ba4:	bf00      	nop
		}
		fdb->angle = canRxData[0] * 256 + canRxData[1];
 8001ba6:	4b2b      	ldr	r3, [pc, #172]	; (8001c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	021b      	lsls	r3, r3, #8
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	4b28      	ldr	r3, [pc, #160]	; (8001c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8001bb2:	785b      	ldrb	r3, [r3, #1]
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	b21a      	sxth	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	801a      	strh	r2, [r3, #0]
		fdb->rpm = canRxData[2] * 256 + canRxData[3];
 8001bc0:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8001bc2:	789b      	ldrb	r3, [r3, #2]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	021b      	lsls	r3, r3, #8
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8001bcc:	78db      	ldrb	r3, [r3, #3]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	4413      	add	r3, r2
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	b21a      	sxth	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	805a      	strh	r2, [r3, #2]
		fdb->torque = canRxData[4] * 256 + canRxData[5];
 8001bda:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8001bdc:	791b      	ldrb	r3, [r3, #4]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	021b      	lsls	r3, r3, #8
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8001be6:	795b      	ldrb	r3, [r3, #5]
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	4413      	add	r3, r2
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	b21a      	sxth	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	809a      	strh	r2, [r3, #4]
		fdb->temp = canRxData[6];
 8001bf4:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8001bf6:	799b      	ldrb	r3, [r3, #6]
 8001bf8:	b21a      	sxth	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	80da      	strh	r2, [r3, #6]
		fdb->omg = 6.28318530718 * (fdb->rpm) / 1140.0;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7fe fcad 	bl	8000564 <__aeabi_i2d>
 8001c0a:	a30d      	add	r3, pc, #52	; (adr r3, 8001c40 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8001c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c10:	f7fe fd12 	bl	8000638 <__aeabi_dmul>
 8001c14:	4603      	mov	r3, r0
 8001c16:	460c      	mov	r4, r1
 8001c18:	4618      	mov	r0, r3
 8001c1a:	4621      	mov	r1, r4
 8001c1c:	a30a      	add	r3, pc, #40	; (adr r3, 8001c48 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8001c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c22:	f7fe fe33 	bl	800088c <__aeabi_ddiv>
 8001c26:	4603      	mov	r3, r0
 8001c28:	460c      	mov	r4, r1
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	4621      	mov	r1, r4
 8001c2e:	f7fe ffdb 	bl	8000be8 <__aeabi_d2f>
 8001c32:	4602      	mov	r2, r0
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	609a      	str	r2, [r3, #8]
	}
}
 8001c38:	bf00      	nop
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd90      	pop	{r4, r7, pc}
 8001c40:	54442eea 	.word	0x54442eea
 8001c44:	401921fb 	.word	0x401921fb
 8001c48:	00000000 	.word	0x00000000
 8001c4c:	4091d000 	.word	0x4091d000
 8001c50:	2000049c 	.word	0x2000049c
 8001c54:	20000398 	.word	0x20000398
 8001c58:	200003d0 	.word	0x200003d0
 8001c5c:	2000021c 	.word	0x2000021c
 8001c60:	200004c4 	.word	0x200004c4
 8001c64:	2000020c 	.word	0x2000020c
 8001c68:	2000044c 	.word	0x2000044c
 8001c6c:	20000414 	.word	0x20000414

08001c70 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	uint8_t j = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	73fb      	strb	r3, [r7, #15]
	while (Rxbuf_jetson[j] != 253 &&  j<sizeof(Rxbuf_jetson)) {
 8001c7c:	e002      	b.n	8001c84 <HAL_UART_RxCpltCallback+0x14>
		j++;
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	3301      	adds	r3, #1
 8001c82:	73fb      	strb	r3, [r7, #15]
	while (Rxbuf_jetson[j] != 253 &&  j<sizeof(Rxbuf_jetson)) {
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
 8001c86:	4a1f      	ldr	r2, [pc, #124]	; (8001d04 <HAL_UART_RxCpltCallback+0x94>)
 8001c88:	5cd3      	ldrb	r3, [r2, r3]
 8001c8a:	2bfd      	cmp	r3, #253	; 0xfd
 8001c8c:	d002      	beq.n	8001c94 <HAL_UART_RxCpltCallback+0x24>
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	2b06      	cmp	r3, #6
 8001c92:	d9f4      	bls.n	8001c7e <HAL_UART_RxCpltCallback+0xe>
	}
	if(j>=sizeof(Rxbuf_jetson)){
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	2b06      	cmp	r3, #6
 8001c98:	d90d      	bls.n	8001cb6 <HAL_UART_RxCpltCallback+0x46>
		for(uint8_t k=0;k<(sizeof(data_Jetson));k++){
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	73bb      	strb	r3, [r7, #14]
 8001c9e:	e006      	b.n	8001cae <HAL_UART_RxCpltCallback+0x3e>
			data_Jetson[k]=0;
 8001ca0:	7bbb      	ldrb	r3, [r7, #14]
 8001ca2:	4a19      	ldr	r2, [pc, #100]	; (8001d08 <HAL_UART_RxCpltCallback+0x98>)
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0;k<(sizeof(data_Jetson));k++){
 8001ca8:	7bbb      	ldrb	r3, [r7, #14]
 8001caa:	3301      	adds	r3, #1
 8001cac:	73bb      	strb	r3, [r7, #14]
 8001cae:	7bbb      	ldrb	r3, [r7, #14]
 8001cb0:	2b05      	cmp	r3, #5
 8001cb2:	d9f5      	bls.n	8001ca0 <HAL_UART_RxCpltCallback+0x30>
			}
		}
	}


}
 8001cb4:	e020      	b.n	8001cf8 <HAL_UART_RxCpltCallback+0x88>
		for (uint8_t k = 0; k < sizeof(data_Jetson); k++) {
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	737b      	strb	r3, [r7, #13]
 8001cba:	e01a      	b.n	8001cf2 <HAL_UART_RxCpltCallback+0x82>
			if ((j + k) >= sizeof(data_Jetson)) {
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	7b7b      	ldrb	r3, [r7, #13]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	2b05      	cmp	r3, #5
 8001cc4:	d909      	bls.n	8001cda <HAL_UART_RxCpltCallback+0x6a>
				data_Jetson[k] = Rxbuf_jetson[k - (sizeof(data_Jetson) - j)];
 8001cc6:	7b7a      	ldrb	r2, [r7, #13]
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	4413      	add	r3, r2
 8001ccc:	1f9a      	subs	r2, r3, #6
 8001cce:	7b7b      	ldrb	r3, [r7, #13]
 8001cd0:	490c      	ldr	r1, [pc, #48]	; (8001d04 <HAL_UART_RxCpltCallback+0x94>)
 8001cd2:	5c89      	ldrb	r1, [r1, r2]
 8001cd4:	4a0c      	ldr	r2, [pc, #48]	; (8001d08 <HAL_UART_RxCpltCallback+0x98>)
 8001cd6:	54d1      	strb	r1, [r2, r3]
 8001cd8:	e008      	b.n	8001cec <HAL_UART_RxCpltCallback+0x7c>
				data_Jetson[k] = Rxbuf_jetson[j + k + 1];
 8001cda:	7bfa      	ldrb	r2, [r7, #15]
 8001cdc:	7b7b      	ldrb	r3, [r7, #13]
 8001cde:	4413      	add	r3, r2
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	7b7b      	ldrb	r3, [r7, #13]
 8001ce4:	4907      	ldr	r1, [pc, #28]	; (8001d04 <HAL_UART_RxCpltCallback+0x94>)
 8001ce6:	5c89      	ldrb	r1, [r1, r2]
 8001ce8:	4a07      	ldr	r2, [pc, #28]	; (8001d08 <HAL_UART_RxCpltCallback+0x98>)
 8001cea:	54d1      	strb	r1, [r2, r3]
		for (uint8_t k = 0; k < sizeof(data_Jetson); k++) {
 8001cec:	7b7b      	ldrb	r3, [r7, #13]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	737b      	strb	r3, [r7, #13]
 8001cf2:	7b7b      	ldrb	r3, [r7, #13]
 8001cf4:	2b05      	cmp	r3, #5
 8001cf6:	d9e1      	bls.n	8001cbc <HAL_UART_RxCpltCallback+0x4c>
}
 8001cf8:	bf00      	nop
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	20000420 	.word	0x20000420
 8001d08:	2000040c 	.word	0x2000040c

08001d0c <timerTask>:


void timerTask() { //call 500Hz
 8001d0c:	b598      	push	{r3, r4, r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	driveWheelTask();
 8001d10:	f000 f882 	bl	8001e18 <driveWheelTask>
	Gimbal_Task();
 8001d14:	f000 faee 	bl	80022f4 <Gimbal_Task>
	fire_Task();
 8001d18:	f000 fcba 	bl	8002690 <fire_Task>
	limit_sw1=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15);
 8001d1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d20:	4833      	ldr	r0, [pc, #204]	; (8001df0 <timerTask+0xe4>)
 8001d22:	f003 fc7f 	bl	8005624 <HAL_GPIO_ReadPin>
 8001d26:	4603      	mov	r3, r0
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b32      	ldr	r3, [pc, #200]	; (8001df4 <timerTask+0xe8>)
 8001d2c:	701a      	strb	r2, [r3, #0]
	limit_sw2=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8001d2e:	2101      	movs	r1, #1
 8001d30:	482f      	ldr	r0, [pc, #188]	; (8001df0 <timerTask+0xe4>)
 8001d32:	f003 fc77 	bl	8005624 <HAL_GPIO_ReadPin>
 8001d36:	4603      	mov	r3, r0
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4b2f      	ldr	r3, [pc, #188]	; (8001df8 <timerTask+0xec>)
 8001d3c:	701a      	strb	r2, [r3, #0]
	start_sw=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 8001d3e:	2102      	movs	r1, #2
 8001d40:	482b      	ldr	r0, [pc, #172]	; (8001df0 <timerTask+0xe4>)
 8001d42:	f003 fc6f 	bl	8005624 <HAL_GPIO_ReadPin>
 8001d46:	4603      	mov	r3, r0
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b2c      	ldr	r3, [pc, #176]	; (8001dfc <timerTask+0xf0>)
 8001d4c:	701a      	strb	r2, [r3, #0]
	move_fire=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001d4e:	2120      	movs	r1, #32
 8001d50:	482b      	ldr	r0, [pc, #172]	; (8001e00 <timerTask+0xf4>)
 8001d52:	f003 fc67 	bl	8005624 <HAL_GPIO_ReadPin>
 8001d56:	4603      	mov	r3, r0
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4b2a      	ldr	r3, [pc, #168]	; (8001e04 <timerTask+0xf8>)
 8001d5c:	701a      	strb	r2, [r3, #0]
	sw1=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8001d5e:	2110      	movs	r1, #16
 8001d60:	4827      	ldr	r0, [pc, #156]	; (8001e00 <timerTask+0xf4>)
 8001d62:	f003 fc5f 	bl	8005624 <HAL_GPIO_ReadPin>
 8001d66:	4603      	mov	r3, r0
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <timerTask+0xfc>)
 8001d6c:	701a      	strb	r2, [r3, #0]
	sw2=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8001d6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d72:	4826      	ldr	r0, [pc, #152]	; (8001e0c <timerTask+0x100>)
 8001d74:	f003 fc56 	bl	8005624 <HAL_GPIO_ReadPin>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	4b24      	ldr	r3, [pc, #144]	; (8001e10 <timerTask+0x104>)
 8001d7e:	701a      	strb	r2, [r3, #0]
	program_No=!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)+!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)*2+
 8001d80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d84:	481e      	ldr	r0, [pc, #120]	; (8001e00 <timerTask+0xf4>)
 8001d86:	f003 fc4d 	bl	8005624 <HAL_GPIO_ReadPin>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	bf0c      	ite	eq
 8001d90:	2301      	moveq	r3, #1
 8001d92:	2300      	movne	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	461c      	mov	r4, r3
 8001d98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d9c:	4818      	ldr	r0, [pc, #96]	; (8001e00 <timerTask+0xf4>)
 8001d9e:	f003 fc41 	bl	8005624 <HAL_GPIO_ReadPin>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <timerTask+0xa0>
 8001da8:	2302      	movs	r3, #2
 8001daa:	e000      	b.n	8001dae <timerTask+0xa2>
 8001dac:	2300      	movs	r3, #0
 8001dae:	4423      	add	r3, r4
 8001db0:	b2dc      	uxtb	r4, r3
	 				!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)*4+!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14)*8;
 8001db2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001db6:	480e      	ldr	r0, [pc, #56]	; (8001df0 <timerTask+0xe4>)
 8001db8:	f003 fc34 	bl	8005624 <HAL_GPIO_ReadPin>
 8001dbc:	4603      	mov	r3, r0
	program_No=!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)+!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)*2+
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <timerTask+0xba>
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	e000      	b.n	8001dc8 <timerTask+0xbc>
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	4423      	add	r3, r4
 8001dca:	b2dc      	uxtb	r4, r3
	 				!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)*4+!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14)*8;
 8001dcc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dd0:	4807      	ldr	r0, [pc, #28]	; (8001df0 <timerTask+0xe4>)
 8001dd2:	f003 fc27 	bl	8005624 <HAL_GPIO_ReadPin>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <timerTask+0xd4>
 8001ddc:	2308      	movs	r3, #8
 8001dde:	e000      	b.n	8001de2 <timerTask+0xd6>
 8001de0:	2300      	movs	r3, #0
 8001de2:	4423      	add	r3, r4
 8001de4:	b2da      	uxtb	r2, r3
	program_No=!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)+!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)*2+
 8001de6:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <timerTask+0x108>)
 8001de8:	701a      	strb	r2, [r3, #0]
}
 8001dea:	bf00      	nop
 8001dec:	bd98      	pop	{r3, r4, r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40020800 	.word	0x40020800
 8001df4:	200004f7 	.word	0x200004f7
 8001df8:	200004f5 	.word	0x200004f5
 8001dfc:	200004fa 	.word	0x200004fa
 8001e00:	40020400 	.word	0x40020400
 8001e04:	200004ec 	.word	0x200004ec
 8001e08:	200004fb 	.word	0x200004fb
 8001e0c:	40020000 	.word	0x40020000
 8001e10:	200004fd 	.word	0x200004fd
 8001e14:	200004fc 	.word	0x200004fc

08001e18 <driveWheelTask>:

void driveWheelTask() {
 8001e18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e1c:	b088      	sub	sp, #32
 8001e1e:	af02      	add	r7, sp, #8
	int16_t u[4];
	cnt_tim1=15000-TIM1->CNT;
 8001e20:	4ba5      	ldr	r3, [pc, #660]	; (80020b8 <driveWheelTask+0x2a0>)
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	f5c3 536a 	rsb	r3, r3, #14976	; 0x3a80
 8001e28:	3318      	adds	r3, #24
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	4ba3      	ldr	r3, [pc, #652]	; (80020bc <driveWheelTask+0x2a4>)
 8001e2e:	601a      	str	r2, [r3, #0]
	if(start_sw==0){
 8001e30:	4ba3      	ldr	r3, [pc, #652]	; (80020c0 <driveWheelTask+0x2a8>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f040 8185 	bne.w	8002144 <driveWheelTask+0x32c>
		if(program_No==0){
 8001e3a:	4ba2      	ldr	r3, [pc, #648]	; (80020c4 <driveWheelTask+0x2ac>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d108      	bne.n	8001e54 <driveWheelTask+0x3c>
			//target_place=2325;
			target_place=15000-TIM1->CNT;
 8001e42:	4b9d      	ldr	r3, [pc, #628]	; (80020b8 <driveWheelTask+0x2a0>)
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e46:	f5c3 536a 	rsb	r3, r3, #14976	; 0x3a80
 8001e4a:	3318      	adds	r3, #24
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4b9e      	ldr	r3, [pc, #632]	; (80020c8 <driveWheelTask+0x2b0>)
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	e054      	b.n	8001efe <driveWheelTask+0xe6>
		}
		else if(program_No==1){
 8001e54:	4b9b      	ldr	r3, [pc, #620]	; (80020c4 <driveWheelTask+0x2ac>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d104      	bne.n	8001e66 <driveWheelTask+0x4e>
			target_place=900;
 8001e5c:	4b9a      	ldr	r3, [pc, #616]	; (80020c8 <driveWheelTask+0x2b0>)
 8001e5e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	e04b      	b.n	8001efe <driveWheelTask+0xe6>
		}
		else if(program_No==2){
 8001e66:	4b97      	ldr	r3, [pc, #604]	; (80020c4 <driveWheelTask+0x2ac>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d13f      	bne.n	8001eee <driveWheelTask+0xd6>
			if(abs((int)target_place-cnt_tim1)<10){target_place=(int)(rand()*(1300.0-500.0+1.0)/(1.0+RAND_MAX));}
 8001e6e:	4b96      	ldr	r3, [pc, #600]	; (80020c8 <driveWheelTask+0x2b0>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	4b92      	ldr	r3, [pc, #584]	; (80020bc <driveWheelTask+0x2a4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	f113 0f09 	cmn.w	r3, #9
 8001e7c:	db23      	blt.n	8001ec6 <driveWheelTask+0xae>
 8001e7e:	4b92      	ldr	r3, [pc, #584]	; (80020c8 <driveWheelTask+0x2b0>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	4b8e      	ldr	r3, [pc, #568]	; (80020bc <driveWheelTask+0x2a4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b09      	cmp	r3, #9
 8001e8a:	dc1c      	bgt.n	8001ec6 <driveWheelTask+0xae>
 8001e8c:	f006 fbc8 	bl	8008620 <rand>
 8001e90:	4603      	mov	r3, r0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe fb66 	bl	8000564 <__aeabi_i2d>
 8001e98:	a385      	add	r3, pc, #532	; (adr r3, 80020b0 <driveWheelTask+0x298>)
 8001e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9e:	f7fe fbcb 	bl	8000638 <__aeabi_dmul>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	4b87      	ldr	r3, [pc, #540]	; (80020cc <driveWheelTask+0x2b4>)
 8001eb0:	f7fe fcec 	bl	800088c <__aeabi_ddiv>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4610      	mov	r0, r2
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f7fe fe6c 	bl	8000b98 <__aeabi_d2iz>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	4b81      	ldr	r3, [pc, #516]	; (80020c8 <driveWheelTask+0x2b0>)
 8001ec4:	601a      	str	r2, [r3, #0]
			if(target_place>1300){target_place=1300;}
 8001ec6:	4b80      	ldr	r3, [pc, #512]	; (80020c8 <driveWheelTask+0x2b0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f240 5214 	movw	r2, #1300	; 0x514
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	dd03      	ble.n	8001eda <driveWheelTask+0xc2>
 8001ed2:	4b7d      	ldr	r3, [pc, #500]	; (80020c8 <driveWheelTask+0x2b0>)
 8001ed4:	f240 5214 	movw	r2, #1300	; 0x514
 8001ed8:	601a      	str	r2, [r3, #0]
			if(target_place<500){target_place=500;}
 8001eda:	4b7b      	ldr	r3, [pc, #492]	; (80020c8 <driveWheelTask+0x2b0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ee2:	da0c      	bge.n	8001efe <driveWheelTask+0xe6>
 8001ee4:	4b78      	ldr	r3, [pc, #480]	; (80020c8 <driveWheelTask+0x2b0>)
 8001ee6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	e007      	b.n	8001efe <driveWheelTask+0xe6>
		}
		else{target_place=15000-TIM1->CNT;}
 8001eee:	4b72      	ldr	r3, [pc, #456]	; (80020b8 <driveWheelTask+0x2a0>)
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	f5c3 536a 	rsb	r3, r3, #14976	; 0x3a80
 8001ef6:	3318      	adds	r3, #24
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b73      	ldr	r3, [pc, #460]	; (80020c8 <driveWheelTask+0x2b0>)
 8001efc:	601a      	str	r2, [r3, #0]

		if(limit_sw1==0){TIM1->CNT=15000;}
 8001efe:	4b74      	ldr	r3, [pc, #464]	; (80020d0 <driveWheelTask+0x2b8>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d103      	bne.n	8001f0e <driveWheelTask+0xf6>
 8001f06:	4b6c      	ldr	r3, [pc, #432]	; (80020b8 <driveWheelTask+0x2a0>)
 8001f08:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001f0c:	625a      	str	r2, [r3, #36]	; 0x24
		if(limit_sw2==0){TIM1->CNT=16800;}
 8001f0e:	4b71      	ldr	r3, [pc, #452]	; (80020d4 <driveWheelTask+0x2bc>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d103      	bne.n	8001f1e <driveWheelTask+0x106>
 8001f16:	4b68      	ldr	r3, [pc, #416]	; (80020b8 <driveWheelTask+0x2a0>)
 8001f18:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8001f1c:	625a      	str	r2, [r3, #36]	; 0x24

		if(abs((int)target_place-cnt_tim1)<10){
 8001f1e:	4b6a      	ldr	r3, [pc, #424]	; (80020c8 <driveWheelTask+0x2b0>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	4b66      	ldr	r3, [pc, #408]	; (80020bc <driveWheelTask+0x2a4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	f113 0f09 	cmn.w	r3, #9
 8001f2c:	db0f      	blt.n	8001f4e <driveWheelTask+0x136>
 8001f2e:	4b66      	ldr	r3, [pc, #408]	; (80020c8 <driveWheelTask+0x2b0>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	4b62      	ldr	r3, [pc, #392]	; (80020bc <driveWheelTask+0x2a4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b09      	cmp	r3, #9
 8001f3a:	dc08      	bgt.n	8001f4e <driveWheelTask+0x136>
			mecanum.wheel_rpm[0]=0.0;
 8001f3c:	4b66      	ldr	r3, [pc, #408]	; (80020d8 <driveWheelTask+0x2c0>)
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
			mecanum.wheel_rpm[1]=0.0;
 8001f44:	4b64      	ldr	r3, [pc, #400]	; (80020d8 <driveWheelTask+0x2c0>)
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	605a      	str	r2, [r3, #4]
 8001f4c:	e0d4      	b.n	80020f8 <driveWheelTask+0x2e0>
		}
		else if(((int)target_place-cnt_tim1)<0){
 8001f4e:	4b5e      	ldr	r3, [pc, #376]	; (80020c8 <driveWheelTask+0x2b0>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	4b5a      	ldr	r3, [pc, #360]	; (80020bc <driveWheelTask+0x2a4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	da4e      	bge.n	8001ffa <driveWheelTask+0x1e2>
			if((float)abs((int)cnt_tim1-target_place)>1500){
 8001f5c:	4b57      	ldr	r3, [pc, #348]	; (80020bc <driveWheelTask+0x2a4>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4b59      	ldr	r3, [pc, #356]	; (80020c8 <driveWheelTask+0x2b0>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	bfb8      	it	lt
 8001f6a:	425b      	neglt	r3, r3
 8001f6c:	ee07 3a90 	vmov	s15, r3
 8001f70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f74:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80020dc <driveWheelTask+0x2c4>
 8001f78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f80:	dd06      	ble.n	8001f90 <driveWheelTask+0x178>
				mecanum.wheel_rpm[0]=4000;
 8001f82:	4b55      	ldr	r3, [pc, #340]	; (80020d8 <driveWheelTask+0x2c0>)
 8001f84:	4a56      	ldr	r2, [pc, #344]	; (80020e0 <driveWheelTask+0x2c8>)
 8001f86:	601a      	str	r2, [r3, #0]
				mecanum.wheel_rpm[1]=4000;
 8001f88:	4b53      	ldr	r3, [pc, #332]	; (80020d8 <driveWheelTask+0x2c0>)
 8001f8a:	4a55      	ldr	r2, [pc, #340]	; (80020e0 <driveWheelTask+0x2c8>)
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	e0b3      	b.n	80020f8 <driveWheelTask+0x2e0>
			}
			else{
				mecanum.wheel_rpm[0]=(float)map(abs((int)cnt_tim1-target_place),0,1500,1000,4000);
 8001f90:	4b4a      	ldr	r3, [pc, #296]	; (80020bc <driveWheelTask+0x2a4>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4b4c      	ldr	r3, [pc, #304]	; (80020c8 <driveWheelTask+0x2b0>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 8001f9e:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8001fa2:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fac:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	f000 fd69 	bl	8002a88 <map>
 8001fb6:	ee07 0a90 	vmov	s15, r0
 8001fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fbe:	4b46      	ldr	r3, [pc, #280]	; (80020d8 <driveWheelTask+0x2c0>)
 8001fc0:	edc3 7a00 	vstr	s15, [r3]
				mecanum.wheel_rpm[1]=(float)map(abs((int)cnt_tim1-target_place),0,1500,1000,4000);
 8001fc4:	4b3d      	ldr	r3, [pc, #244]	; (80020bc <driveWheelTask+0x2a4>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b3f      	ldr	r3, [pc, #252]	; (80020c8 <driveWheelTask+0x2b0>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 8001fd2:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8001fd6:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fe0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	f000 fd4f 	bl	8002a88 <map>
 8001fea:	ee07 0a90 	vmov	s15, r0
 8001fee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff2:	4b39      	ldr	r3, [pc, #228]	; (80020d8 <driveWheelTask+0x2c0>)
 8001ff4:	edc3 7a01 	vstr	s15, [r3, #4]
 8001ff8:	e07e      	b.n	80020f8 <driveWheelTask+0x2e0>
			}
		}
		else if(((int)target_place-cnt_tim1)>0){
 8001ffa:	4b33      	ldr	r3, [pc, #204]	; (80020c8 <driveWheelTask+0x2b0>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	4b2f      	ldr	r3, [pc, #188]	; (80020bc <driveWheelTask+0x2a4>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	dd6f      	ble.n	80020e8 <driveWheelTask+0x2d0>
			if((float)abs((int)cnt_tim1-target_place)>1500){
 8002008:	4b2c      	ldr	r3, [pc, #176]	; (80020bc <driveWheelTask+0x2a4>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4b2e      	ldr	r3, [pc, #184]	; (80020c8 <driveWheelTask+0x2b0>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	bfb8      	it	lt
 8002016:	425b      	neglt	r3, r3
 8002018:	ee07 3a90 	vmov	s15, r3
 800201c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002020:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80020dc <driveWheelTask+0x2c4>
 8002024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800202c:	dd06      	ble.n	800203c <driveWheelTask+0x224>
				mecanum.wheel_rpm[0]=-4000;
 800202e:	4b2a      	ldr	r3, [pc, #168]	; (80020d8 <driveWheelTask+0x2c0>)
 8002030:	4a2c      	ldr	r2, [pc, #176]	; (80020e4 <driveWheelTask+0x2cc>)
 8002032:	601a      	str	r2, [r3, #0]
				mecanum.wheel_rpm[1]=-4000;
 8002034:	4b28      	ldr	r3, [pc, #160]	; (80020d8 <driveWheelTask+0x2c0>)
 8002036:	4a2b      	ldr	r2, [pc, #172]	; (80020e4 <driveWheelTask+0x2cc>)
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	e05d      	b.n	80020f8 <driveWheelTask+0x2e0>
			}
			else{
				mecanum.wheel_rpm[0]=(float)-1.0*map(abs((int)cnt_tim1-target_place),0,1500,1000,4000);
 800203c:	4b1f      	ldr	r3, [pc, #124]	; (80020bc <driveWheelTask+0x2a4>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4b21      	ldr	r3, [pc, #132]	; (80020c8 <driveWheelTask+0x2b0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 800204a:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 800204e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002058:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800205c:	2100      	movs	r1, #0
 800205e:	f000 fd13 	bl	8002a88 <map>
 8002062:	ee07 0a90 	vmov	s15, r0
 8002066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800206a:	eef1 7a67 	vneg.f32	s15, s15
 800206e:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <driveWheelTask+0x2c0>)
 8002070:	edc3 7a00 	vstr	s15, [r3]
				mecanum.wheel_rpm[1]=(float)-1.0*map(abs((int)cnt_tim1-target_place),0,1500,1000,4000);
 8002074:	4b11      	ldr	r3, [pc, #68]	; (80020bc <driveWheelTask+0x2a4>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <driveWheelTask+0x2b0>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 8002082:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8002086:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002090:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002094:	2100      	movs	r1, #0
 8002096:	f000 fcf7 	bl	8002a88 <map>
 800209a:	ee07 0a90 	vmov	s15, r0
 800209e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020a2:	eef1 7a67 	vneg.f32	s15, s15
 80020a6:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <driveWheelTask+0x2c0>)
 80020a8:	edc3 7a01 	vstr	s15, [r3, #4]
 80020ac:	e024      	b.n	80020f8 <driveWheelTask+0x2e0>
 80020ae:	bf00      	nop
 80020b0:	00000000 	.word	0x00000000
 80020b4:	40890800 	.word	0x40890800
 80020b8:	40010000 	.word	0x40010000
 80020bc:	200004f0 	.word	0x200004f0
 80020c0:	200004fa 	.word	0x200004fa
 80020c4:	200004fc 	.word	0x200004fc
 80020c8:	20000264 	.word	0x20000264
 80020cc:	41e00000 	.word	0x41e00000
 80020d0:	200004f7 	.word	0x200004f7
 80020d4:	200004f5 	.word	0x200004f5
 80020d8:	200003a4 	.word	0x200003a4
 80020dc:	44bb8000 	.word	0x44bb8000
 80020e0:	457a0000 	.word	0x457a0000
 80020e4:	c57a0000 	.word	0xc57a0000
			}
		}
		else{
			mecanum.wheel_rpm[0]=0.0;
 80020e8:	4b76      	ldr	r3, [pc, #472]	; (80022c4 <driveWheelTask+0x4ac>)
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
			mecanum.wheel_rpm[1]=0.0;
 80020f0:	4b74      	ldr	r3, [pc, #464]	; (80022c4 <driveWheelTask+0x4ac>)
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	605a      	str	r2, [r3, #4]
		}

		if(sw1==0){
 80020f8:	4b73      	ldr	r3, [pc, #460]	; (80022c8 <driveWheelTask+0x4b0>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10e      	bne.n	800211e <driveWheelTask+0x306>
			mecanum.wheel_rpm[0]=1200;
 8002100:	4b70      	ldr	r3, [pc, #448]	; (80022c4 <driveWheelTask+0x4ac>)
 8002102:	4a72      	ldr	r2, [pc, #456]	; (80022cc <driveWheelTask+0x4b4>)
 8002104:	601a      	str	r2, [r3, #0]
			mecanum.wheel_rpm[1]=1200;
 8002106:	4b6f      	ldr	r3, [pc, #444]	; (80022c4 <driveWheelTask+0x4ac>)
 8002108:	4a70      	ldr	r2, [pc, #448]	; (80022cc <driveWheelTask+0x4b4>)
 800210a:	605a      	str	r2, [r3, #4]
			target_place=15000-TIM1->CNT;
 800210c:	4b70      	ldr	r3, [pc, #448]	; (80022d0 <driveWheelTask+0x4b8>)
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	f5c3 536a 	rsb	r3, r3, #14976	; 0x3a80
 8002114:	3318      	adds	r3, #24
 8002116:	461a      	mov	r2, r3
 8002118:	4b6e      	ldr	r3, [pc, #440]	; (80022d4 <driveWheelTask+0x4bc>)
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	e01a      	b.n	8002154 <driveWheelTask+0x33c>
		}
		else if(sw2==0){
 800211e:	4b6e      	ldr	r3, [pc, #440]	; (80022d8 <driveWheelTask+0x4c0>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d116      	bne.n	8002154 <driveWheelTask+0x33c>
			mecanum.wheel_rpm[0]=-1200;
 8002126:	4b67      	ldr	r3, [pc, #412]	; (80022c4 <driveWheelTask+0x4ac>)
 8002128:	4a6c      	ldr	r2, [pc, #432]	; (80022dc <driveWheelTask+0x4c4>)
 800212a:	601a      	str	r2, [r3, #0]
			mecanum.wheel_rpm[1]=-1200;
 800212c:	4b65      	ldr	r3, [pc, #404]	; (80022c4 <driveWheelTask+0x4ac>)
 800212e:	4a6b      	ldr	r2, [pc, #428]	; (80022dc <driveWheelTask+0x4c4>)
 8002130:	605a      	str	r2, [r3, #4]
			target_place=15000-TIM1->CNT;
 8002132:	4b67      	ldr	r3, [pc, #412]	; (80022d0 <driveWheelTask+0x4b8>)
 8002134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002136:	f5c3 536a 	rsb	r3, r3, #14976	; 0x3a80
 800213a:	3318      	adds	r3, #24
 800213c:	461a      	mov	r2, r3
 800213e:	4b65      	ldr	r3, [pc, #404]	; (80022d4 <driveWheelTask+0x4bc>)
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	e007      	b.n	8002154 <driveWheelTask+0x33c>
		}

	}
	else{
		mecanum.wheel_rpm[0]=0.0;
 8002144:	4b5f      	ldr	r3, [pc, #380]	; (80022c4 <driveWheelTask+0x4ac>)
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
		mecanum.wheel_rpm[1]=0.0;
 800214c:	4b5d      	ldr	r3, [pc, #372]	; (80022c4 <driveWheelTask+0x4ac>)
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	605a      	str	r2, [r3, #4]
	}

	    torque_sum = fabs((float)wheelFdb[0].torque/16384.0*20.0)+fabs((float)wheelFdb[1].torque/16384.0*20.0);
 8002154:	4b62      	ldr	r3, [pc, #392]	; (80022e0 <driveWheelTask+0x4c8>)
 8002156:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800215a:	ee07 3a90 	vmov	s15, r3
 800215e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002162:	ee17 0a90 	vmov	r0, s15
 8002166:	f7fe fa0f 	bl	8000588 <__aeabi_f2d>
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	4b5d      	ldr	r3, [pc, #372]	; (80022e4 <driveWheelTask+0x4cc>)
 8002170:	f7fe fb8c 	bl	800088c <__aeabi_ddiv>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4610      	mov	r0, r2
 800217a:	4619      	mov	r1, r3
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	4b59      	ldr	r3, [pc, #356]	; (80022e8 <driveWheelTask+0x4d0>)
 8002182:	f7fe fa59 	bl	8000638 <__aeabi_dmul>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4614      	mov	r4, r2
 800218c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002190:	4b53      	ldr	r3, [pc, #332]	; (80022e0 <driveWheelTask+0x4c8>)
 8002192:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002196:	ee07 3a90 	vmov	s15, r3
 800219a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800219e:	ee17 0a90 	vmov	r0, s15
 80021a2:	f7fe f9f1 	bl	8000588 <__aeabi_f2d>
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	4b4e      	ldr	r3, [pc, #312]	; (80022e4 <driveWheelTask+0x4cc>)
 80021ac:	f7fe fb6e 	bl	800088c <__aeabi_ddiv>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	4610      	mov	r0, r2
 80021b6:	4619      	mov	r1, r3
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	4b4a      	ldr	r3, [pc, #296]	; (80022e8 <driveWheelTask+0x4d0>)
 80021be:	f7fe fa3b 	bl	8000638 <__aeabi_dmul>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4690      	mov	r8, r2
 80021c8:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80021cc:	4642      	mov	r2, r8
 80021ce:	464b      	mov	r3, r9
 80021d0:	4620      	mov	r0, r4
 80021d2:	4629      	mov	r1, r5
 80021d4:	f7fe f87a 	bl	80002cc <__adddf3>
 80021d8:	4603      	mov	r3, r0
 80021da:	460c      	mov	r4, r1
 80021dc:	4618      	mov	r0, r3
 80021de:	4621      	mov	r1, r4
 80021e0:	f7fe fd02 	bl	8000be8 <__aeabi_d2f>
 80021e4:	4602      	mov	r2, r0
 80021e6:	4b41      	ldr	r3, [pc, #260]	; (80022ec <driveWheelTask+0x4d4>)
 80021e8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 2; i++) {
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	e05d      	b.n	80022ac <driveWheelTask+0x494>
		int error = mecanum.wheel_rpm[i] - wheelFdb[i].rpm;
 80021f0:	4a34      	ldr	r2, [pc, #208]	; (80022c4 <driveWheelTask+0x4ac>)
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	ed93 7a00 	vldr	s14, [r3]
 80021fc:	4938      	ldr	r1, [pc, #224]	; (80022e0 <driveWheelTask+0x4c8>)
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	4613      	mov	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4413      	add	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	3302      	adds	r3, #2
 800220c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002210:	ee07 3a90 	vmov	s15, r3
 8002214:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800221c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002220:	ee17 3a90 	vmov	r3, s15
 8002224:	60fb      	str	r3, [r7, #12]
		wheelPID[i].error = error;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	ee07 3a90 	vmov	s15, r3
 800222c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002230:	4a2f      	ldr	r2, [pc, #188]	; (80022f0 <driveWheelTask+0x4d8>)
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	212c      	movs	r1, #44	; 0x2c
 8002236:	fb01 f303 	mul.w	r3, r1, r3
 800223a:	4413      	add	r3, r2
 800223c:	3328      	adds	r3, #40	; 0x28
 800223e:	edc3 7a00 	vstr	s15, [r3]
		u[i] = (int16_t) pidExecute(&(wheelPID[i]));
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	222c      	movs	r2, #44	; 0x2c
 8002246:	fb02 f303 	mul.w	r3, r2, r3
 800224a:	4a29      	ldr	r2, [pc, #164]	; (80022f0 <driveWheelTask+0x4d8>)
 800224c:	4413      	add	r3, r2
 800224e:	4618      	mov	r0, r3
 8002250:	f000 fd32 	bl	8002cb8 <pidExecute>
 8002254:	eef0 7a40 	vmov.f32	s15, s0
 8002258:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800225c:	ee17 3a90 	vmov	r3, s15
 8002260:	b21a      	sxth	r2, r3
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	f107 0118 	add.w	r1, r7, #24
 800226a:	440b      	add	r3, r1
 800226c:	f823 2c14 	strh.w	r2, [r3, #-20]

		if(torque_sum>2.5){
 8002270:	4b1e      	ldr	r3, [pc, #120]	; (80022ec <driveWheelTask+0x4d4>)
 8002272:	edd3 7a00 	vldr	s15, [r3]
 8002276:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800227a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800227e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002282:	dd10      	ble.n	80022a6 <driveWheelTask+0x48e>
			for (int i = 0; i < 2; i++) {
 8002284:	2300      	movs	r3, #0
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	e00a      	b.n	80022a0 <driveWheelTask+0x488>
				u[i] = 0;
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	f107 0218 	add.w	r2, r7, #24
 8002292:	4413      	add	r3, r2
 8002294:	2200      	movs	r2, #0
 8002296:	f823 2c14 	strh.w	r2, [r3, #-20]
			for (int i = 0; i < 2; i++) {
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	3301      	adds	r3, #1
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	ddf1      	ble.n	800228a <driveWheelTask+0x472>
	for (int i = 0; i < 2; i++) {
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	3301      	adds	r3, #1
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	dd9e      	ble.n	80021f0 <driveWheelTask+0x3d8>
			}
		}
	}
	driveWheel(u);
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 fc0b 	bl	8002ad0 <driveWheel>
}
 80022ba:	bf00      	nop
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022c4:	200003a4 	.word	0x200003a4
 80022c8:	200004fb 	.word	0x200004fb
 80022cc:	44960000 	.word	0x44960000
 80022d0:	40010000 	.word	0x40010000
 80022d4:	20000264 	.word	0x20000264
 80022d8:	200004fd 	.word	0x200004fd
 80022dc:	c4960000 	.word	0xc4960000
 80022e0:	2000021c 	.word	0x2000021c
 80022e4:	40d00000 	.word	0x40d00000
 80022e8:	40340000 	.word	0x40340000
 80022ec:	2000045c 	.word	0x2000045c
 80022f0:	200002e8 	.word	0x200002e8

080022f4 <Gimbal_Task>:
void Gimbal_Task(){
 80022f4:	b590      	push	{r4, r7, lr}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af02      	add	r7, sp, #8
	if(cnt_task_servo>30){
 80022fa:	4b9a      	ldr	r3, [pc, #616]	; (8002564 <Gimbal_Task+0x270>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b1e      	cmp	r3, #30
 8002300:	f240 81b1 	bls.w	8002666 <Gimbal_Task+0x372>
		if(start_sw==0){
 8002304:	4b98      	ldr	r3, [pc, #608]	; (8002568 <Gimbal_Task+0x274>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	f040 817b 	bne.w	8002604 <Gimbal_Task+0x310>
			if(program_No>0){
 800230e:	4b97      	ldr	r3, [pc, #604]	; (800256c <Gimbal_Task+0x278>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 80f4 	beq.w	8002500 <Gimbal_Task+0x20c>
				if(jetson_connect==1){
 8002318:	4b95      	ldr	r3, [pc, #596]	; (8002570 <Gimbal_Task+0x27c>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b01      	cmp	r3, #1
 800231e:	f040 819e 	bne.w	800265e <Gimbal_Task+0x36a>
					if(cnt_tartget>0){
 8002322:	4b94      	ldr	r3, [pc, #592]	; (8002574 <Gimbal_Task+0x280>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	f340 808d 	ble.w	8002446 <Gimbal_Task+0x152>
							target_yaw=target_yaw-map(target_X,480,-480,30,-30);
 800232c:	4b92      	ldr	r3, [pc, #584]	; (8002578 <Gimbal_Task+0x284>)
 800232e:	681c      	ldr	r4, [r3, #0]
 8002330:	4b92      	ldr	r3, [pc, #584]	; (800257c <Gimbal_Task+0x288>)
 8002332:	6818      	ldr	r0, [r3, #0]
 8002334:	f06f 031d 	mvn.w	r3, #29
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	231e      	movs	r3, #30
 800233c:	4a90      	ldr	r2, [pc, #576]	; (8002580 <Gimbal_Task+0x28c>)
 800233e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002342:	f000 fba1 	bl	8002a88 <map>
 8002346:	4603      	mov	r3, r0
 8002348:	1ae3      	subs	r3, r4, r3
 800234a:	4a8b      	ldr	r2, [pc, #556]	; (8002578 <Gimbal_Task+0x284>)
 800234c:	6013      	str	r3, [r2, #0]
							target_pit=target_pit-map(target_Y,360,-360,30,-30);
 800234e:	4b8d      	ldr	r3, [pc, #564]	; (8002584 <Gimbal_Task+0x290>)
 8002350:	681c      	ldr	r4, [r3, #0]
 8002352:	4b8d      	ldr	r3, [pc, #564]	; (8002588 <Gimbal_Task+0x294>)
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	f06f 031d 	mvn.w	r3, #29
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	231e      	movs	r3, #30
 800235e:	4a8b      	ldr	r2, [pc, #556]	; (800258c <Gimbal_Task+0x298>)
 8002360:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8002364:	f000 fb90 	bl	8002a88 <map>
 8002368:	4603      	mov	r3, r0
 800236a:	1ae3      	subs	r3, r4, r3
 800236c:	4a85      	ldr	r2, [pc, #532]	; (8002584 <Gimbal_Task+0x290>)
 800236e:	6013      	str	r3, [r2, #0]

							if(target_yaw>160){target_yaw=160;}
 8002370:	4b81      	ldr	r3, [pc, #516]	; (8002578 <Gimbal_Task+0x284>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2ba0      	cmp	r3, #160	; 0xa0
 8002376:	dd02      	ble.n	800237e <Gimbal_Task+0x8a>
 8002378:	4b7f      	ldr	r3, [pc, #508]	; (8002578 <Gimbal_Task+0x284>)
 800237a:	22a0      	movs	r2, #160	; 0xa0
 800237c:	601a      	str	r2, [r3, #0]
							if(target_yaw<20){target_yaw=20;}
 800237e:	4b7e      	ldr	r3, [pc, #504]	; (8002578 <Gimbal_Task+0x284>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2b13      	cmp	r3, #19
 8002384:	dc02      	bgt.n	800238c <Gimbal_Task+0x98>
 8002386:	4b7c      	ldr	r3, [pc, #496]	; (8002578 <Gimbal_Task+0x284>)
 8002388:	2214      	movs	r2, #20
 800238a:	601a      	str	r2, [r3, #0]
							if(target_pit>90){target_pit=90;}
 800238c:	4b7d      	ldr	r3, [pc, #500]	; (8002584 <Gimbal_Task+0x290>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b5a      	cmp	r3, #90	; 0x5a
 8002392:	dd02      	ble.n	800239a <Gimbal_Task+0xa6>
 8002394:	4b7b      	ldr	r3, [pc, #492]	; (8002584 <Gimbal_Task+0x290>)
 8002396:	225a      	movs	r2, #90	; 0x5a
 8002398:	601a      	str	r2, [r3, #0]
							if(target_pit<45){target_pit=45;}
 800239a:	4b7a      	ldr	r3, [pc, #488]	; (8002584 <Gimbal_Task+0x290>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2b2c      	cmp	r3, #44	; 0x2c
 80023a0:	dc02      	bgt.n	80023a8 <Gimbal_Task+0xb4>
 80023a2:	4b78      	ldr	r3, [pc, #480]	; (8002584 <Gimbal_Task+0x290>)
 80023a4:	222d      	movs	r2, #45	; 0x2d
 80023a6:	601a      	str	r2, [r3, #0]

							target_pit_temp=map(target_pit,180,0,4833,10166);
 80023a8:	4b76      	ldr	r3, [pc, #472]	; (8002584 <Gimbal_Task+0x290>)
 80023aa:	6818      	ldr	r0, [r3, #0]
 80023ac:	f242 73b6 	movw	r3, #10166	; 0x27b6
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	f241 23e1 	movw	r3, #4833	; 0x12e1
 80023b6:	2200      	movs	r2, #0
 80023b8:	21b4      	movs	r1, #180	; 0xb4
 80023ba:	f000 fb65 	bl	8002a88 <map>
 80023be:	4602      	mov	r2, r0
 80023c0:	4b73      	ldr	r3, [pc, #460]	; (8002590 <Gimbal_Task+0x29c>)
 80023c2:	601a      	str	r2, [r3, #0]
							target_yaw_temp=map(target_yaw,180,0,4833,10166);
 80023c4:	4b6c      	ldr	r3, [pc, #432]	; (8002578 <Gimbal_Task+0x284>)
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	f242 73b6 	movw	r3, #10166	; 0x27b6
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	f241 23e1 	movw	r3, #4833	; 0x12e1
 80023d2:	2200      	movs	r2, #0
 80023d4:	21b4      	movs	r1, #180	; 0xb4
 80023d6:	f000 fb57 	bl	8002a88 <map>
 80023da:	4602      	mov	r2, r0
 80023dc:	4b6d      	ldr	r3, [pc, #436]	; (8002594 <Gimbal_Task+0x2a0>)
 80023de:	601a      	str	r2, [r3, #0]
							now_pit=ics_set_pos(2,target_pit_temp);
 80023e0:	4b6b      	ldr	r3, [pc, #428]	; (8002590 <Gimbal_Task+0x29c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	4619      	mov	r1, r3
 80023e8:	2002      	movs	r0, #2
 80023ea:	f7fe fe0f 	bl	800100c <ics_set_pos>
 80023ee:	4602      	mov	r2, r0
 80023f0:	4b69      	ldr	r3, [pc, #420]	; (8002598 <Gimbal_Task+0x2a4>)
 80023f2:	601a      	str	r2, [r3, #0]
							now_yaw=ics_set_pos(1,target_yaw_temp);
 80023f4:	4b67      	ldr	r3, [pc, #412]	; (8002594 <Gimbal_Task+0x2a0>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	4619      	mov	r1, r3
 80023fc:	2001      	movs	r0, #1
 80023fe:	f7fe fe05 	bl	800100c <ics_set_pos>
 8002402:	4602      	mov	r2, r0
 8002404:	4b65      	ldr	r3, [pc, #404]	; (800259c <Gimbal_Task+0x2a8>)
 8002406:	601a      	str	r2, [r3, #0]

							if(abs(target_X)<20 && abs(target_X)<20){
 8002408:	4b5c      	ldr	r3, [pc, #368]	; (800257c <Gimbal_Task+0x288>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f113 0f13 	cmn.w	r3, #19
 8002410:	db11      	blt.n	8002436 <Gimbal_Task+0x142>
 8002412:	4b5a      	ldr	r3, [pc, #360]	; (800257c <Gimbal_Task+0x288>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b13      	cmp	r3, #19
 8002418:	dc0d      	bgt.n	8002436 <Gimbal_Task+0x142>
 800241a:	4b58      	ldr	r3, [pc, #352]	; (800257c <Gimbal_Task+0x288>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f113 0f13 	cmn.w	r3, #19
 8002422:	db08      	blt.n	8002436 <Gimbal_Task+0x142>
 8002424:	4b55      	ldr	r3, [pc, #340]	; (800257c <Gimbal_Task+0x288>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b13      	cmp	r3, #19
 800242a:	dc04      	bgt.n	8002436 <Gimbal_Task+0x142>
								fire=1.0;
 800242c:	4b5c      	ldr	r3, [pc, #368]	; (80025a0 <Gimbal_Task+0x2ac>)
 800242e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	e003      	b.n	800243e <Gimbal_Task+0x14a>
							}
							else{
								fire=0.0;
 8002436:	4b5a      	ldr	r3, [pc, #360]	; (80025a0 <Gimbal_Task+0x2ac>)
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
							}
							cnt_tim_servo=0;
 800243e:	4b59      	ldr	r3, [pc, #356]	; (80025a4 <Gimbal_Task+0x2b0>)
 8002440:	2200      	movs	r2, #0
 8002442:	701a      	strb	r2, [r3, #0]
 8002444:	e10b      	b.n	800265e <Gimbal_Task+0x36a>
					}
					else{
						if(cnt_tim_servo>20){
 8002446:	4b57      	ldr	r3, [pc, #348]	; (80025a4 <Gimbal_Task+0x2b0>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b14      	cmp	r3, #20
 800244c:	d939      	bls.n	80024c2 <Gimbal_Task+0x1ce>
							target_pit=70;
 800244e:	4b4d      	ldr	r3, [pc, #308]	; (8002584 <Gimbal_Task+0x290>)
 8002450:	2246      	movs	r2, #70	; 0x46
 8002452:	601a      	str	r2, [r3, #0]
							target_yaw=90;
 8002454:	4b48      	ldr	r3, [pc, #288]	; (8002578 <Gimbal_Task+0x284>)
 8002456:	225a      	movs	r2, #90	; 0x5a
 8002458:	601a      	str	r2, [r3, #0]
							target_pit_temp=map(target_pit,180,0,4833,10166);
 800245a:	4b4a      	ldr	r3, [pc, #296]	; (8002584 <Gimbal_Task+0x290>)
 800245c:	6818      	ldr	r0, [r3, #0]
 800245e:	f242 73b6 	movw	r3, #10166	; 0x27b6
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	f241 23e1 	movw	r3, #4833	; 0x12e1
 8002468:	2200      	movs	r2, #0
 800246a:	21b4      	movs	r1, #180	; 0xb4
 800246c:	f000 fb0c 	bl	8002a88 <map>
 8002470:	4602      	mov	r2, r0
 8002472:	4b47      	ldr	r3, [pc, #284]	; (8002590 <Gimbal_Task+0x29c>)
 8002474:	601a      	str	r2, [r3, #0]
							target_yaw_temp=map(target_yaw,180,0,4833,10166);
 8002476:	4b40      	ldr	r3, [pc, #256]	; (8002578 <Gimbal_Task+0x284>)
 8002478:	6818      	ldr	r0, [r3, #0]
 800247a:	f242 73b6 	movw	r3, #10166	; 0x27b6
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	f241 23e1 	movw	r3, #4833	; 0x12e1
 8002484:	2200      	movs	r2, #0
 8002486:	21b4      	movs	r1, #180	; 0xb4
 8002488:	f000 fafe 	bl	8002a88 <map>
 800248c:	4602      	mov	r2, r0
 800248e:	4b41      	ldr	r3, [pc, #260]	; (8002594 <Gimbal_Task+0x2a0>)
 8002490:	601a      	str	r2, [r3, #0]
							now_pit=ics_set_pos(2,target_pit_temp);
 8002492:	4b3f      	ldr	r3, [pc, #252]	; (8002590 <Gimbal_Task+0x29c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	b29b      	uxth	r3, r3
 8002498:	4619      	mov	r1, r3
 800249a:	2002      	movs	r0, #2
 800249c:	f7fe fdb6 	bl	800100c <ics_set_pos>
 80024a0:	4602      	mov	r2, r0
 80024a2:	4b3d      	ldr	r3, [pc, #244]	; (8002598 <Gimbal_Task+0x2a4>)
 80024a4:	601a      	str	r2, [r3, #0]
							now_yaw=ics_set_pos(1,target_yaw_temp);
 80024a6:	4b3b      	ldr	r3, [pc, #236]	; (8002594 <Gimbal_Task+0x2a0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	4619      	mov	r1, r3
 80024ae:	2001      	movs	r0, #1
 80024b0:	f7fe fdac 	bl	800100c <ics_set_pos>
 80024b4:	4602      	mov	r2, r0
 80024b6:	4b39      	ldr	r3, [pc, #228]	; (800259c <Gimbal_Task+0x2a8>)
 80024b8:	601a      	str	r2, [r3, #0]
							cnt_tim_servo=0;
 80024ba:	4b3a      	ldr	r3, [pc, #232]	; (80025a4 <Gimbal_Task+0x2b0>)
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]
 80024c0:	e0cd      	b.n	800265e <Gimbal_Task+0x36a>
						}
						else{
						now_pit=ics_set_pos(2,target_pit_temp);
 80024c2:	4b33      	ldr	r3, [pc, #204]	; (8002590 <Gimbal_Task+0x29c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	4619      	mov	r1, r3
 80024ca:	2002      	movs	r0, #2
 80024cc:	f7fe fd9e 	bl	800100c <ics_set_pos>
 80024d0:	4602      	mov	r2, r0
 80024d2:	4b31      	ldr	r3, [pc, #196]	; (8002598 <Gimbal_Task+0x2a4>)
 80024d4:	601a      	str	r2, [r3, #0]
						now_yaw=ics_set_pos(1,target_yaw_temp);
 80024d6:	4b2f      	ldr	r3, [pc, #188]	; (8002594 <Gimbal_Task+0x2a0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	b29b      	uxth	r3, r3
 80024dc:	4619      	mov	r1, r3
 80024de:	2001      	movs	r0, #1
 80024e0:	f7fe fd94 	bl	800100c <ics_set_pos>
 80024e4:	4602      	mov	r2, r0
 80024e6:	4b2d      	ldr	r3, [pc, #180]	; (800259c <Gimbal_Task+0x2a8>)
 80024e8:	601a      	str	r2, [r3, #0]
						fire=0.0;
 80024ea:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <Gimbal_Task+0x2ac>)
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
						cnt_tim_servo++;
 80024f2:	4b2c      	ldr	r3, [pc, #176]	; (80025a4 <Gimbal_Task+0x2b0>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	3301      	adds	r3, #1
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4b2a      	ldr	r3, [pc, #168]	; (80025a4 <Gimbal_Task+0x2b0>)
 80024fc:	701a      	strb	r2, [r3, #0]
 80024fe:	e0ae      	b.n	800265e <Gimbal_Task+0x36a>
						}
					}
				}
			}
			else if(start_sw==0){
 8002500:	4b19      	ldr	r3, [pc, #100]	; (8002568 <Gimbal_Task+0x274>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d14f      	bne.n	80025a8 <Gimbal_Task+0x2b4>
				cnt_tim_servo=0;
 8002508:	4b26      	ldr	r3, [pc, #152]	; (80025a4 <Gimbal_Task+0x2b0>)
 800250a:	2200      	movs	r2, #0
 800250c:	701a      	strb	r2, [r3, #0]
				ics_set_pos(2,map(80,180,0,4833,10166));
 800250e:	f242 73b6 	movw	r3, #10166	; 0x27b6
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	f241 23e1 	movw	r3, #4833	; 0x12e1
 8002518:	2200      	movs	r2, #0
 800251a:	21b4      	movs	r1, #180	; 0xb4
 800251c:	2050      	movs	r0, #80	; 0x50
 800251e:	f000 fab3 	bl	8002a88 <map>
 8002522:	4603      	mov	r3, r0
 8002524:	b29b      	uxth	r3, r3
 8002526:	4619      	mov	r1, r3
 8002528:	2002      	movs	r0, #2
 800252a:	f7fe fd6f 	bl	800100c <ics_set_pos>
				ics_set_pos(1,map(90,180,0,4833,10166));
 800252e:	f242 73b6 	movw	r3, #10166	; 0x27b6
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	f241 23e1 	movw	r3, #4833	; 0x12e1
 8002538:	2200      	movs	r2, #0
 800253a:	21b4      	movs	r1, #180	; 0xb4
 800253c:	205a      	movs	r0, #90	; 0x5a
 800253e:	f000 faa3 	bl	8002a88 <map>
 8002542:	4603      	mov	r3, r0
 8002544:	b29b      	uxth	r3, r3
 8002546:	4619      	mov	r1, r3
 8002548:	2001      	movs	r0, #1
 800254a:	f7fe fd5f 	bl	800100c <ics_set_pos>
				target_pit=90;
 800254e:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <Gimbal_Task+0x290>)
 8002550:	225a      	movs	r2, #90	; 0x5a
 8002552:	601a      	str	r2, [r3, #0]
				target_yaw=90;
 8002554:	4b08      	ldr	r3, [pc, #32]	; (8002578 <Gimbal_Task+0x284>)
 8002556:	225a      	movs	r2, #90	; 0x5a
 8002558:	601a      	str	r2, [r3, #0]
				fire=1.0;
 800255a:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <Gimbal_Task+0x2ac>)
 800255c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	e07c      	b.n	800265e <Gimbal_Task+0x36a>
 8002564:	200004f9 	.word	0x200004f9
 8002568:	200004fa 	.word	0x200004fa
 800256c:	200004fc 	.word	0x200004fc
 8002570:	20000490 	.word	0x20000490
 8002574:	20000218 	.word	0x20000218
 8002578:	20000458 	.word	0x20000458
 800257c:	20000498 	.word	0x20000498
 8002580:	fffffe20 	.word	0xfffffe20
 8002584:	200003a0 	.word	0x200003a0
 8002588:	2000025c 	.word	0x2000025c
 800258c:	fffffe98 	.word	0xfffffe98
 8002590:	20000208 	.word	0x20000208
 8002594:	20000258 	.word	0x20000258
 8002598:	20000260 	.word	0x20000260
 800259c:	20000460 	.word	0x20000460
 80025a0:	20000494 	.word	0x20000494
 80025a4:	200004f6 	.word	0x200004f6

			}
			else{
				cnt_tim_servo=0;
 80025a8:	4b34      	ldr	r3, [pc, #208]	; (800267c <Gimbal_Task+0x388>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	701a      	strb	r2, [r3, #0]
				ics_set_pos(2,map(90,180,0,4833,10166));
 80025ae:	f242 73b6 	movw	r3, #10166	; 0x27b6
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	f241 23e1 	movw	r3, #4833	; 0x12e1
 80025b8:	2200      	movs	r2, #0
 80025ba:	21b4      	movs	r1, #180	; 0xb4
 80025bc:	205a      	movs	r0, #90	; 0x5a
 80025be:	f000 fa63 	bl	8002a88 <map>
 80025c2:	4603      	mov	r3, r0
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	4619      	mov	r1, r3
 80025c8:	2002      	movs	r0, #2
 80025ca:	f7fe fd1f 	bl	800100c <ics_set_pos>
				ics_set_pos(1,map(90,180,0,4833,10166));
 80025ce:	f242 73b6 	movw	r3, #10166	; 0x27b6
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	f241 23e1 	movw	r3, #4833	; 0x12e1
 80025d8:	2200      	movs	r2, #0
 80025da:	21b4      	movs	r1, #180	; 0xb4
 80025dc:	205a      	movs	r0, #90	; 0x5a
 80025de:	f000 fa53 	bl	8002a88 <map>
 80025e2:	4603      	mov	r3, r0
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	4619      	mov	r1, r3
 80025e8:	2001      	movs	r0, #1
 80025ea:	f7fe fd0f 	bl	800100c <ics_set_pos>
				target_pit=90;
 80025ee:	4b24      	ldr	r3, [pc, #144]	; (8002680 <Gimbal_Task+0x38c>)
 80025f0:	225a      	movs	r2, #90	; 0x5a
 80025f2:	601a      	str	r2, [r3, #0]
				target_yaw=90;
 80025f4:	4b23      	ldr	r3, [pc, #140]	; (8002684 <Gimbal_Task+0x390>)
 80025f6:	225a      	movs	r2, #90	; 0x5a
 80025f8:	601a      	str	r2, [r3, #0]
				fire=0.0;
 80025fa:	4b23      	ldr	r3, [pc, #140]	; (8002688 <Gimbal_Task+0x394>)
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	e02c      	b.n	800265e <Gimbal_Task+0x36a>
			}
		}
		else{
			cnt_tim_servo=0;
 8002604:	4b1d      	ldr	r3, [pc, #116]	; (800267c <Gimbal_Task+0x388>)
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]
			ics_set_pos(2,map(90,180,0,4833,10166));
 800260a:	f242 73b6 	movw	r3, #10166	; 0x27b6
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	f241 23e1 	movw	r3, #4833	; 0x12e1
 8002614:	2200      	movs	r2, #0
 8002616:	21b4      	movs	r1, #180	; 0xb4
 8002618:	205a      	movs	r0, #90	; 0x5a
 800261a:	f000 fa35 	bl	8002a88 <map>
 800261e:	4603      	mov	r3, r0
 8002620:	b29b      	uxth	r3, r3
 8002622:	4619      	mov	r1, r3
 8002624:	2002      	movs	r0, #2
 8002626:	f7fe fcf1 	bl	800100c <ics_set_pos>
			ics_set_pos(1,map(90,180,0,4833,10166));
 800262a:	f242 73b6 	movw	r3, #10166	; 0x27b6
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	f241 23e1 	movw	r3, #4833	; 0x12e1
 8002634:	2200      	movs	r2, #0
 8002636:	21b4      	movs	r1, #180	; 0xb4
 8002638:	205a      	movs	r0, #90	; 0x5a
 800263a:	f000 fa25 	bl	8002a88 <map>
 800263e:	4603      	mov	r3, r0
 8002640:	b29b      	uxth	r3, r3
 8002642:	4619      	mov	r1, r3
 8002644:	2001      	movs	r0, #1
 8002646:	f7fe fce1 	bl	800100c <ics_set_pos>
			target_pit=90;
 800264a:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <Gimbal_Task+0x38c>)
 800264c:	225a      	movs	r2, #90	; 0x5a
 800264e:	601a      	str	r2, [r3, #0]
			target_yaw=90;
 8002650:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <Gimbal_Task+0x390>)
 8002652:	225a      	movs	r2, #90	; 0x5a
 8002654:	601a      	str	r2, [r3, #0]
			fire=0.0;
 8002656:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <Gimbal_Task+0x394>)
 8002658:	f04f 0200 	mov.w	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
		}


		cnt_task_servo=0;
 800265e:	4b0b      	ldr	r3, [pc, #44]	; (800268c <Gimbal_Task+0x398>)
 8002660:	2200      	movs	r2, #0
 8002662:	701a      	strb	r2, [r3, #0]
	}
	else{
		cnt_task_servo++;
	}

}
 8002664:	e005      	b.n	8002672 <Gimbal_Task+0x37e>
		cnt_task_servo++;
 8002666:	4b09      	ldr	r3, [pc, #36]	; (800268c <Gimbal_Task+0x398>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	3301      	adds	r3, #1
 800266c:	b2da      	uxtb	r2, r3
 800266e:	4b07      	ldr	r3, [pc, #28]	; (800268c <Gimbal_Task+0x398>)
 8002670:	701a      	strb	r2, [r3, #0]
}
 8002672:	bf00      	nop
 8002674:	3704      	adds	r7, #4
 8002676:	46bd      	mov	sp, r7
 8002678:	bd90      	pop	{r4, r7, pc}
 800267a:	bf00      	nop
 800267c:	200004f6 	.word	0x200004f6
 8002680:	200003a0 	.word	0x200003a0
 8002684:	20000458 	.word	0x20000458
 8002688:	20000494 	.word	0x20000494
 800268c:	200004f9 	.word	0x200004f9

08002690 <fire_Task>:


void fire_Task(){
 8002690:	b5b0      	push	{r4, r5, r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
	int16_t u[4];
	if(fire>1.0){
 8002696:	4b6b      	ldr	r3, [pc, #428]	; (8002844 <fire_Task+0x1b4>)
 8002698:	edd3 7a00 	vldr	s15, [r3]
 800269c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a8:	dd03      	ble.n	80026b2 <fire_Task+0x22>
		fire=0.0;
 80026aa:	4b66      	ldr	r3, [pc, #408]	; (8002844 <fire_Task+0x1b4>)
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
	}
	if(start_sw==1){
 80026b2:	4b65      	ldr	r3, [pc, #404]	; (8002848 <fire_Task+0x1b8>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d13d      	bne.n	8002736 <fire_Task+0xa6>
		DBUFF[1] = loadPID.error = 0.0 - loadMotorFdb.rpm;
 80026ba:	4b64      	ldr	r3, [pc, #400]	; (800284c <fire_Task+0x1bc>)
 80026bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fd ff4f 	bl	8000564 <__aeabi_i2d>
 80026c6:	4603      	mov	r3, r0
 80026c8:	460c      	mov	r4, r1
 80026ca:	461a      	mov	r2, r3
 80026cc:	4623      	mov	r3, r4
 80026ce:	f04f 0000 	mov.w	r0, #0
 80026d2:	f04f 0100 	mov.w	r1, #0
 80026d6:	f7fd fdf7 	bl	80002c8 <__aeabi_dsub>
 80026da:	4603      	mov	r3, r0
 80026dc:	460c      	mov	r4, r1
 80026de:	4618      	mov	r0, r3
 80026e0:	4621      	mov	r1, r4
 80026e2:	f7fe fa81 	bl	8000be8 <__aeabi_d2f>
 80026e6:	4602      	mov	r2, r0
 80026e8:	4b59      	ldr	r3, [pc, #356]	; (8002850 <fire_Task+0x1c0>)
 80026ea:	629a      	str	r2, [r3, #40]	; 0x28
 80026ec:	4b58      	ldr	r3, [pc, #352]	; (8002850 <fire_Task+0x1c0>)
 80026ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f0:	4a58      	ldr	r2, [pc, #352]	; (8002854 <fire_Task+0x1c4>)
 80026f2:	6053      	str	r3, [r2, #4]
		DBUFF[3] = u[2] = pidExecute(&loadPID);
 80026f4:	4856      	ldr	r0, [pc, #344]	; (8002850 <fire_Task+0x1c0>)
 80026f6:	f000 fadf 	bl	8002cb8 <pidExecute>
 80026fa:	eef0 7a40 	vmov.f32	s15, s0
 80026fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002702:	ee17 3a90 	vmov	r3, s15
 8002706:	b21b      	sxth	r3, r3
 8002708:	80bb      	strh	r3, [r7, #4]
 800270a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800270e:	ee07 3a90 	vmov	s15, r3
 8002712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002716:	4b4f      	ldr	r3, [pc, #316]	; (8002854 <fire_Task+0x1c4>)
 8002718:	edc3 7a03 	vstr	s15, [r3, #12]
		u[2]=0;
 800271c:	2300      	movs	r3, #0
 800271e:	80bb      	strh	r3, [r7, #4]
		u[0]=0;
 8002720:	2300      	movs	r3, #0
 8002722:	803b      	strh	r3, [r7, #0]
		u[1]=0;
 8002724:	2300      	movs	r3, #0
 8002726:	807b      	strh	r3, [r7, #2]
		u[3]=0;
 8002728:	2300      	movs	r3, #0
 800272a:	80fb      	strh	r3, [r7, #6]
		driveGimbalMotors(u);
 800272c:	463b      	mov	r3, r7
 800272e:	4618      	mov	r0, r3
 8002730:	f000 fa46 	bl	8002bc0 <driveGimbalMotors>
 8002734:	e049      	b.n	80027ca <fire_Task+0x13a>

	}
	else{
		DBUFF[1] = loadPID.error = -900.0f*fire*2.0 - loadMotorFdb.rpm;
 8002736:	4b43      	ldr	r3, [pc, #268]	; (8002844 <fire_Task+0x1b4>)
 8002738:	edd3 7a00 	vldr	s15, [r3]
 800273c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002858 <fire_Task+0x1c8>
 8002740:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002744:	ee17 0a90 	vmov	r0, s15
 8002748:	f7fd ff1e 	bl	8000588 <__aeabi_f2d>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	f7fd fdbc 	bl	80002cc <__adddf3>
 8002754:	4603      	mov	r3, r0
 8002756:	460c      	mov	r4, r1
 8002758:	4625      	mov	r5, r4
 800275a:	461c      	mov	r4, r3
 800275c:	4b3b      	ldr	r3, [pc, #236]	; (800284c <fire_Task+0x1bc>)
 800275e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002762:	4618      	mov	r0, r3
 8002764:	f7fd fefe 	bl	8000564 <__aeabi_i2d>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4620      	mov	r0, r4
 800276e:	4629      	mov	r1, r5
 8002770:	f7fd fdaa 	bl	80002c8 <__aeabi_dsub>
 8002774:	4603      	mov	r3, r0
 8002776:	460c      	mov	r4, r1
 8002778:	4618      	mov	r0, r3
 800277a:	4621      	mov	r1, r4
 800277c:	f7fe fa34 	bl	8000be8 <__aeabi_d2f>
 8002780:	4602      	mov	r2, r0
 8002782:	4b33      	ldr	r3, [pc, #204]	; (8002850 <fire_Task+0x1c0>)
 8002784:	629a      	str	r2, [r3, #40]	; 0x28
 8002786:	4b32      	ldr	r3, [pc, #200]	; (8002850 <fire_Task+0x1c0>)
 8002788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278a:	4a32      	ldr	r2, [pc, #200]	; (8002854 <fire_Task+0x1c4>)
 800278c:	6053      	str	r3, [r2, #4]
		DBUFF[3] = u[2] = pidExecute(&loadPID);
 800278e:	4830      	ldr	r0, [pc, #192]	; (8002850 <fire_Task+0x1c0>)
 8002790:	f000 fa92 	bl	8002cb8 <pidExecute>
 8002794:	eef0 7a40 	vmov.f32	s15, s0
 8002798:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800279c:	ee17 3a90 	vmov	r3, s15
 80027a0:	b21b      	sxth	r3, r3
 80027a2:	80bb      	strh	r3, [r7, #4]
 80027a4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80027a8:	ee07 3a90 	vmov	s15, r3
 80027ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027b0:	4b28      	ldr	r3, [pc, #160]	; (8002854 <fire_Task+0x1c4>)
 80027b2:	edc3 7a03 	vstr	s15, [r3, #12]
		u[0]=0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	803b      	strh	r3, [r7, #0]
		u[1]=0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	807b      	strh	r3, [r7, #2]
		u[3]=0;
 80027be:	2300      	movs	r3, #0
 80027c0:	80fb      	strh	r3, [r7, #6]
		driveGimbalMotors(u);
 80027c2:	463b      	mov	r3, r7
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 f9fb 	bl	8002bc0 <driveGimbalMotors>

	}


	if(move_fire==0){
 80027ca:	4b24      	ldr	r3, [pc, #144]	; (800285c <fire_Task+0x1cc>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d11a      	bne.n	8002808 <fire_Task+0x178>
		 sConfigOC.Pulse = 1650;
 80027d2:	4b23      	ldr	r3, [pc, #140]	; (8002860 <fire_Task+0x1d0>)
 80027d4:	f240 6272 	movw	r2, #1650	; 0x672
 80027d8:	605a      	str	r2, [r3, #4]
		 HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3);
 80027da:	2208      	movs	r2, #8
 80027dc:	4920      	ldr	r1, [pc, #128]	; (8002860 <fire_Task+0x1d0>)
 80027de:	4821      	ldr	r0, [pc, #132]	; (8002864 <fire_Task+0x1d4>)
 80027e0:	f003 ff0a 	bl	80065f8 <HAL_TIM_PWM_ConfigChannel>
		 HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80027e4:	2108      	movs	r1, #8
 80027e6:	481f      	ldr	r0, [pc, #124]	; (8002864 <fire_Task+0x1d4>)
 80027e8:	f003 fcf6 	bl	80061d8 <HAL_TIM_PWM_Start>
		 sConfigOC.Pulse = 1650;
 80027ec:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <fire_Task+0x1d0>)
 80027ee:	f240 6272 	movw	r2, #1650	; 0x672
 80027f2:	605a      	str	r2, [r3, #4]
		 HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4);
 80027f4:	220c      	movs	r2, #12
 80027f6:	491a      	ldr	r1, [pc, #104]	; (8002860 <fire_Task+0x1d0>)
 80027f8:	481a      	ldr	r0, [pc, #104]	; (8002864 <fire_Task+0x1d4>)
 80027fa:	f003 fefd 	bl	80065f8 <HAL_TIM_PWM_ConfigChannel>
		 HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80027fe:	210c      	movs	r1, #12
 8002800:	4818      	ldr	r0, [pc, #96]	; (8002864 <fire_Task+0x1d4>)
 8002802:	f003 fce9 	bl	80061d8 <HAL_TIM_PWM_Start>
		 HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
		 sConfigOC.Pulse = 1500;
		 HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4);
		 HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
	}
}
 8002806:	e019      	b.n	800283c <fire_Task+0x1ac>
		 sConfigOC.Pulse = 1500;
 8002808:	4b15      	ldr	r3, [pc, #84]	; (8002860 <fire_Task+0x1d0>)
 800280a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800280e:	605a      	str	r2, [r3, #4]
		 HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3);
 8002810:	2208      	movs	r2, #8
 8002812:	4913      	ldr	r1, [pc, #76]	; (8002860 <fire_Task+0x1d0>)
 8002814:	4813      	ldr	r0, [pc, #76]	; (8002864 <fire_Task+0x1d4>)
 8002816:	f003 feef 	bl	80065f8 <HAL_TIM_PWM_ConfigChannel>
		 HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800281a:	2108      	movs	r1, #8
 800281c:	4811      	ldr	r0, [pc, #68]	; (8002864 <fire_Task+0x1d4>)
 800281e:	f003 fcdb 	bl	80061d8 <HAL_TIM_PWM_Start>
		 sConfigOC.Pulse = 1500;
 8002822:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <fire_Task+0x1d0>)
 8002824:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002828:	605a      	str	r2, [r3, #4]
		 HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4);
 800282a:	220c      	movs	r2, #12
 800282c:	490c      	ldr	r1, [pc, #48]	; (8002860 <fire_Task+0x1d0>)
 800282e:	480d      	ldr	r0, [pc, #52]	; (8002864 <fire_Task+0x1d4>)
 8002830:	f003 fee2 	bl	80065f8 <HAL_TIM_PWM_ConfigChannel>
		 HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8002834:	210c      	movs	r1, #12
 8002836:	480b      	ldr	r0, [pc, #44]	; (8002864 <fire_Task+0x1d4>)
 8002838:	f003 fcce 	bl	80061d8 <HAL_TIM_PWM_Start>
}
 800283c:	bf00      	nop
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bdb0      	pop	{r4, r5, r7, pc}
 8002844:	20000494 	.word	0x20000494
 8002848:	200004fa 	.word	0x200004fa
 800284c:	20000414 	.word	0x20000414
 8002850:	20000464 	.word	0x20000464
 8002854:	20000268 	.word	0x20000268
 8002858:	c4610000 	.word	0xc4610000
 800285c:	200004ec 	.word	0x200004ec
 8002860:	200003b4 	.word	0x200003b4
 8002864:	20000500 	.word	0x20000500

08002868 <initFriction>:

void initFriction() {
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
	for(int i=0;i<2000;i++){
 800286e:	2300      	movs	r3, #0
 8002870:	607b      	str	r3, [r7, #4]
 8002872:	e01f      	b.n	80028b4 <initFriction+0x4c>
		HAL_Delay(1);
 8002874:	2001      	movs	r0, #1
 8002876:	f001 fa45 	bl	8003d04 <HAL_Delay>
		  sConfigOC.Pulse = 2000;
 800287a:	4b26      	ldr	r3, [pc, #152]	; (8002914 <initFriction+0xac>)
 800287c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002880:	605a      	str	r2, [r3, #4]
		  HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3);
 8002882:	2208      	movs	r2, #8
 8002884:	4923      	ldr	r1, [pc, #140]	; (8002914 <initFriction+0xac>)
 8002886:	4824      	ldr	r0, [pc, #144]	; (8002918 <initFriction+0xb0>)
 8002888:	f003 feb6 	bl	80065f8 <HAL_TIM_PWM_ConfigChannel>
		  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800288c:	2108      	movs	r1, #8
 800288e:	4822      	ldr	r0, [pc, #136]	; (8002918 <initFriction+0xb0>)
 8002890:	f003 fca2 	bl	80061d8 <HAL_TIM_PWM_Start>
		  sConfigOC.Pulse = 2000;
 8002894:	4b1f      	ldr	r3, [pc, #124]	; (8002914 <initFriction+0xac>)
 8002896:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800289a:	605a      	str	r2, [r3, #4]
		  HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4);
 800289c:	220c      	movs	r2, #12
 800289e:	491d      	ldr	r1, [pc, #116]	; (8002914 <initFriction+0xac>)
 80028a0:	481d      	ldr	r0, [pc, #116]	; (8002918 <initFriction+0xb0>)
 80028a2:	f003 fea9 	bl	80065f8 <HAL_TIM_PWM_ConfigChannel>
		  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80028a6:	210c      	movs	r1, #12
 80028a8:	481b      	ldr	r0, [pc, #108]	; (8002918 <initFriction+0xb0>)
 80028aa:	f003 fc95 	bl	80061d8 <HAL_TIM_PWM_Start>
	for(int i=0;i<2000;i++){
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3301      	adds	r3, #1
 80028b2:	607b      	str	r3, [r7, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80028ba:	dbdb      	blt.n	8002874 <initFriction+0xc>
	}
	for(int i=0;i<2300;i++){
 80028bc:	2300      	movs	r3, #0
 80028be:	603b      	str	r3, [r7, #0]
 80028c0:	e01f      	b.n	8002902 <initFriction+0x9a>
		HAL_Delay(1);
 80028c2:	2001      	movs	r0, #1
 80028c4:	f001 fa1e 	bl	8003d04 <HAL_Delay>
		  sConfigOC.Pulse = 1500;
 80028c8:	4b12      	ldr	r3, [pc, #72]	; (8002914 <initFriction+0xac>)
 80028ca:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80028ce:	605a      	str	r2, [r3, #4]
		  HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3);
 80028d0:	2208      	movs	r2, #8
 80028d2:	4910      	ldr	r1, [pc, #64]	; (8002914 <initFriction+0xac>)
 80028d4:	4810      	ldr	r0, [pc, #64]	; (8002918 <initFriction+0xb0>)
 80028d6:	f003 fe8f 	bl	80065f8 <HAL_TIM_PWM_ConfigChannel>
		  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80028da:	2108      	movs	r1, #8
 80028dc:	480e      	ldr	r0, [pc, #56]	; (8002918 <initFriction+0xb0>)
 80028de:	f003 fc7b 	bl	80061d8 <HAL_TIM_PWM_Start>
		  sConfigOC.Pulse = 1500;
 80028e2:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <initFriction+0xac>)
 80028e4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80028e8:	605a      	str	r2, [r3, #4]
		  HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4);
 80028ea:	220c      	movs	r2, #12
 80028ec:	4909      	ldr	r1, [pc, #36]	; (8002914 <initFriction+0xac>)
 80028ee:	480a      	ldr	r0, [pc, #40]	; (8002918 <initFriction+0xb0>)
 80028f0:	f003 fe82 	bl	80065f8 <HAL_TIM_PWM_ConfigChannel>
		  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80028f4:	210c      	movs	r1, #12
 80028f6:	4808      	ldr	r0, [pc, #32]	; (8002918 <initFriction+0xb0>)
 80028f8:	f003 fc6e 	bl	80061d8 <HAL_TIM_PWM_Start>
	for(int i=0;i<2300;i++){
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	3301      	adds	r3, #1
 8002900:	603b      	str	r3, [r7, #0]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	f640 02fb 	movw	r2, #2299	; 0x8fb
 8002908:	4293      	cmp	r3, r2
 800290a:	ddda      	ble.n	80028c2 <initFriction+0x5a>
	}

}
 800290c:	bf00      	nop
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	200003b4 	.word	0x200003b4
 8002918:	20000500 	.word	0x20000500

0800291c <initPID>:
void initPID() {
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++) {
 8002922:	2300      	movs	r3, #0
 8002924:	607b      	str	r3, [r7, #4]
 8002926:	e042      	b.n	80029ae <initPID+0x92>
		wheelPID[i].t = 2.0f;
 8002928:	4a25      	ldr	r2, [pc, #148]	; (80029c0 <initPID+0xa4>)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	212c      	movs	r1, #44	; 0x2c
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	4413      	add	r3, r2
 8002934:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002938:	601a      	str	r2, [r3, #0]
		wheelPID[i].p = 3.0f;
 800293a:	4a21      	ldr	r2, [pc, #132]	; (80029c0 <initPID+0xa4>)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	212c      	movs	r1, #44	; 0x2c
 8002940:	fb01 f303 	mul.w	r3, r1, r3
 8002944:	4413      	add	r3, r2
 8002946:	3304      	adds	r3, #4
 8002948:	4a1e      	ldr	r2, [pc, #120]	; (80029c4 <initPID+0xa8>)
 800294a:	601a      	str	r2, [r3, #0]
		wheelPID[i].i = 30.0f;
 800294c:	4a1c      	ldr	r2, [pc, #112]	; (80029c0 <initPID+0xa4>)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	212c      	movs	r1, #44	; 0x2c
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	4413      	add	r3, r2
 8002958:	3308      	adds	r3, #8
 800295a:	4a1b      	ldr	r2, [pc, #108]	; (80029c8 <initPID+0xac>)
 800295c:	601a      	str	r2, [r3, #0]
		wheelPID[i].d = 0.0f;
 800295e:	4a18      	ldr	r2, [pc, #96]	; (80029c0 <initPID+0xa4>)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	212c      	movs	r1, #44	; 0x2c
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	4413      	add	r3, r2
 800296a:	330c      	adds	r3, #12
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
		wheelPID[i].outLimit = 15000.0f;
 8002972:	4a13      	ldr	r2, [pc, #76]	; (80029c0 <initPID+0xa4>)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	212c      	movs	r1, #44	; 0x2c
 8002978:	fb01 f303 	mul.w	r3, r1, r3
 800297c:	4413      	add	r3, r2
 800297e:	3310      	adds	r3, #16
 8002980:	4a12      	ldr	r2, [pc, #72]	; (80029cc <initPID+0xb0>)
 8002982:	601a      	str	r2, [r3, #0]
		wheelPID[i].integralOutLimit = 500.0f;
 8002984:	4a0e      	ldr	r2, [pc, #56]	; (80029c0 <initPID+0xa4>)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	212c      	movs	r1, #44	; 0x2c
 800298a:	fb01 f303 	mul.w	r3, r1, r3
 800298e:	4413      	add	r3, r2
 8002990:	3314      	adds	r3, #20
 8002992:	4a0f      	ldr	r2, [pc, #60]	; (80029d0 <initPID+0xb4>)
 8002994:	601a      	str	r2, [r3, #0]
		wheelPID[i].differentialFilterRate = 0.9f;
 8002996:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <initPID+0xa4>)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	212c      	movs	r1, #44	; 0x2c
 800299c:	fb01 f303 	mul.w	r3, r1, r3
 80029a0:	4413      	add	r3, r2
 80029a2:	3318      	adds	r3, #24
 80029a4:	4a0b      	ldr	r2, [pc, #44]	; (80029d4 <initPID+0xb8>)
 80029a6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3301      	adds	r3, #1
 80029ac:	607b      	str	r3, [r7, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	ddb9      	ble.n	8002928 <initPID+0xc>
	}
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	200002e8 	.word	0x200002e8
 80029c4:	40400000 	.word	0x40400000
 80029c8:	41f00000 	.word	0x41f00000
 80029cc:	466a6000 	.word	0x466a6000
 80029d0:	43fa0000 	.word	0x43fa0000
 80029d4:	3f666666 	.word	0x3f666666

080029d8 <initLoadPID>:

void initLoadPID() {
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
	loadPID.t = 2.0f;
 80029dc:	4b0d      	ldr	r3, [pc, #52]	; (8002a14 <initLoadPID+0x3c>)
 80029de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029e2:	601a      	str	r2, [r3, #0]
	loadPID.p = 5.0f;
 80029e4:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <initLoadPID+0x3c>)
 80029e6:	4a0c      	ldr	r2, [pc, #48]	; (8002a18 <initLoadPID+0x40>)
 80029e8:	605a      	str	r2, [r3, #4]
	loadPID.i = 0.0;
 80029ea:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <initLoadPID+0x3c>)
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	609a      	str	r2, [r3, #8]
	loadPID.d = 0.07f;
 80029f2:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <initLoadPID+0x3c>)
 80029f4:	4a09      	ldr	r2, [pc, #36]	; (8002a1c <initLoadPID+0x44>)
 80029f6:	60da      	str	r2, [r3, #12]
	loadPID.outLimit = 30000.0f;
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <initLoadPID+0x3c>)
 80029fa:	4a09      	ldr	r2, [pc, #36]	; (8002a20 <initLoadPID+0x48>)
 80029fc:	611a      	str	r2, [r3, #16]
	loadPID.integralOutLimit = 10000.0f;
 80029fe:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <initLoadPID+0x3c>)
 8002a00:	4a08      	ldr	r2, [pc, #32]	; (8002a24 <initLoadPID+0x4c>)
 8002a02:	615a      	str	r2, [r3, #20]
	loadPID.differentialFilterRate = 0.9f;
 8002a04:	4b03      	ldr	r3, [pc, #12]	; (8002a14 <initLoadPID+0x3c>)
 8002a06:	4a08      	ldr	r2, [pc, #32]	; (8002a28 <initLoadPID+0x50>)
 8002a08:	619a      	str	r2, [r3, #24]
}
 8002a0a:	bf00      	nop
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	20000464 	.word	0x20000464
 8002a18:	40a00000 	.word	0x40a00000
 8002a1c:	3d8f5c29 	.word	0x3d8f5c29
 8002a20:	46ea6000 	.word	0x46ea6000
 8002a24:	461c4000 	.word	0x461c4000
 8002a28:	3f666666 	.word	0x3f666666

08002a2c <initCanFilter>:

void initCanFilter() {
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08a      	sub	sp, #40	; 0x28
 8002a30:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8002a42:	2300      	movs	r3, #0
 8002a44:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8002a46:	2300      	movs	r3, #0
 8002a48:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8002a52:	2301      	movs	r3, #1
 8002a54:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8002a5a:	463b      	mov	r3, r7
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4808      	ldr	r0, [pc, #32]	; (8002a80 <initCanFilter+0x54>)
 8002a60:	f001 fa6e 	bl	8003f40 <HAL_CAN_ConfigFilter>

	sFilterConfig.SlaveStartFilterBank = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterBank = 0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]

	HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig);
 8002a6c:	463b      	mov	r3, r7
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4804      	ldr	r0, [pc, #16]	; (8002a84 <initCanFilter+0x58>)
 8002a72:	f001 fa65 	bl	8003f40 <HAL_CAN_ConfigFilter>
}
 8002a76:	bf00      	nop
 8002a78:	3728      	adds	r7, #40	; 0x28
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	200004c4 	.word	0x200004c4
 8002a84:	2000049c 	.word	0x2000049c

08002a88 <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
 8002a94:	603b      	str	r3, [r7, #0]
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	69b9      	ldr	r1, [r7, #24]
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	1a8a      	subs	r2, r1, r2
 8002aa2:	fb02 f203 	mul.w	r2, r2, r3
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	1acb      	subs	r3, r1, r3
 8002aac:	fb92 f2f3 	sdiv	r2, r2, r3
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	4413      	add	r3, r2
	}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002ac4:	bf00      	nop
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
	...

08002ad0 <driveWheel>:
 */
#include "motor.h"

const int CaseMotor_MaxSpeed = 30 * 256;

void driveWheel(int16_t *u) {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08c      	sub	sp, #48	; 0x30
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef header;
	uint8_t TxData[8] = { 0 };
 8002ad8:	f107 030c 	add.w	r3, r7, #12
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	605a      	str	r2, [r3, #4]
	uint32_t TxMailbox;

	header.StdId = 0x200;
 8002ae2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ae6:	617b      	str	r3, [r7, #20]
	header.RTR = CAN_RTR_DATA;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	623b      	str	r3, [r7, #32]
	header.IDE = CAN_ID_STD;
 8002aec:	2300      	movs	r3, #0
 8002aee:	61fb      	str	r3, [r7, #28]
	header.DLC = 8;
 8002af0:	2308      	movs	r3, #8
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
	//header.TransmitGlobalTime = DISABLE;

	for (int i = 0; i < 2; i++) {
 8002af4:	2300      	movs	r3, #0
 8002af6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002af8:	e050      	b.n	8002b9c <driveWheel+0xcc>
		if (CaseMotor_MaxSpeed < u[i]) {
 8002afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	4413      	add	r3, r2
 8002b02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b06:	461a      	mov	r2, r3
 8002b08:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	dd0b      	ble.n	8002b28 <driveWheel+0x58>
			u[i] = CaseMotor_MaxSpeed - 1;
 8002b10:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	3b01      	subs	r3, #1
 8002b18:	b299      	uxth	r1, r3
 8002b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	4413      	add	r3, r2
 8002b22:	b20a      	sxth	r2, r1
 8002b24:	801a      	strh	r2, [r3, #0]
 8002b26:	e017      	b.n	8002b58 <driveWheel+0x88>
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 8002b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b34:	461a      	mov	r2, r3
 8002b36:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8002b3a:	425b      	negs	r3, r3
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	da0b      	bge.n	8002b58 <driveWheel+0x88>
			u[i] = -CaseMotor_MaxSpeed + 1;
 8002b40:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	f1c3 0301 	rsb	r3, r3, #1
 8002b4a:	b299      	uxth	r1, r3
 8002b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	4413      	add	r3, r2
 8002b54:	b20a      	sxth	r2, r1
 8002b56:	801a      	strh	r2, [r3, #0]
		}
		TxData[i * 2] = u[i] >> 8;
 8002b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	4413      	add	r3, r2
 8002b60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b64:	121b      	asrs	r3, r3, #8
 8002b66:	b21a      	sxth	r2, r3
 8002b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002b72:	440b      	add	r3, r1
 8002b74:	f803 2c24 	strb.w	r2, [r3, #-36]
		TxData[i * 2 + 1] = u[i] & 0xFF;
 8002b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	4413      	add	r3, r2
 8002b80:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	3301      	adds	r3, #1
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002b90:	440b      	add	r3, r1
 8002b92:	f803 2c24 	strb.w	r2, [r3, #-36]
	for (int i = 0; i < 2; i++) {
 8002b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b98:	3301      	adds	r3, #1
 8002b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	ddab      	ble.n	8002afa <driveWheel+0x2a>
	}

	HAL_CAN_AddTxMessage(&hcan2, &header, TxData, &TxMailbox);
 8002ba2:	f107 0308 	add.w	r3, r7, #8
 8002ba6:	f107 020c 	add.w	r2, r7, #12
 8002baa:	f107 0114 	add.w	r1, r7, #20
 8002bae:	4803      	ldr	r0, [pc, #12]	; (8002bbc <driveWheel+0xec>)
 8002bb0:	f001 faea 	bl	8004188 <HAL_CAN_AddTxMessage>

}
 8002bb4:	bf00      	nop
 8002bb6:	3730      	adds	r7, #48	; 0x30
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	2000049c 	.word	0x2000049c

08002bc0 <driveGimbalMotors>:

void driveGimbalMotors(int16_t *u) {
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08c      	sub	sp, #48	; 0x30
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef header;
	uint8_t TxData[8] = { 0 };
 8002bc8:	f107 030c 	add.w	r3, r7, #12
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	605a      	str	r2, [r3, #4]
	uint32_t TxMailbox;

	header.StdId = 0x1ff;
 8002bd2:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002bd6:	617b      	str	r3, [r7, #20]
	header.RTR = CAN_RTR_DATA;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	623b      	str	r3, [r7, #32]
	header.IDE = CAN_ID_STD;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	61fb      	str	r3, [r7, #28]
	header.DLC = 8;
 8002be0:	2308      	movs	r3, #8
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
	//header.TransmitGlobalTime = DISABLE;

	for (int i = 0; i < 4; i++) {
 8002be4:	2300      	movs	r3, #0
 8002be6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002be8:	e053      	b.n	8002c92 <driveGimbalMotors+0xd2>
		if(i==2){
 8002bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d12e      	bne.n	8002c4e <driveGimbalMotors+0x8e>
		if (CaseMotor_MaxSpeed < u[i]) {
 8002bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8002c02:	429a      	cmp	r2, r3
 8002c04:	dd0b      	ble.n	8002c1e <driveGimbalMotors+0x5e>
			u[i] = CaseMotor_MaxSpeed - 1;
 8002c06:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b299      	uxth	r1, r3
 8002c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	4413      	add	r3, r2
 8002c18:	b20a      	sxth	r2, r1
 8002c1a:	801a      	strh	r2, [r3, #0]
 8002c1c:	e017      	b.n	8002c4e <driveGimbalMotors+0x8e>
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 8002c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	4413      	add	r3, r2
 8002c26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8002c30:	425b      	negs	r3, r3
 8002c32:	429a      	cmp	r2, r3
 8002c34:	da0b      	bge.n	8002c4e <driveGimbalMotors+0x8e>
			u[i] = -CaseMotor_MaxSpeed + 1;
 8002c36:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	f1c3 0301 	rsb	r3, r3, #1
 8002c40:	b299      	uxth	r1, r3
 8002c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	4413      	add	r3, r2
 8002c4a:	b20a      	sxth	r2, r1
 8002c4c:	801a      	strh	r2, [r3, #0]
		}
		}
		TxData[i * 2] = u[i] >> 8;
 8002c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	4413      	add	r3, r2
 8002c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c5a:	121b      	asrs	r3, r3, #8
 8002c5c:	b21a      	sxth	r2, r3
 8002c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002c68:	440b      	add	r3, r1
 8002c6a:	f803 2c24 	strb.w	r2, [r3, #-36]
		TxData[i * 2 + 1] = u[i] & 0xFF;
 8002c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	4413      	add	r3, r2
 8002c76:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	3301      	adds	r3, #1
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002c86:	440b      	add	r3, r1
 8002c88:	f803 2c24 	strb.w	r2, [r3, #-36]
	for (int i = 0; i < 4; i++) {
 8002c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8e:	3301      	adds	r3, #1
 8002c90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c94:	2b03      	cmp	r3, #3
 8002c96:	dda8      	ble.n	8002bea <driveGimbalMotors+0x2a>
	}

	HAL_CAN_AddTxMessage(&hcan1, &header, TxData, &TxMailbox);
 8002c98:	f107 0308 	add.w	r3, r7, #8
 8002c9c:	f107 020c 	add.w	r2, r7, #12
 8002ca0:	f107 0114 	add.w	r1, r7, #20
 8002ca4:	4803      	ldr	r0, [pc, #12]	; (8002cb4 <driveGimbalMotors+0xf4>)
 8002ca6:	f001 fa6f 	bl	8004188 <HAL_CAN_AddTxMessage>
}
 8002caa:	bf00      	nop
 8002cac:	3730      	adds	r7, #48	; 0x30
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	200004c4 	.word	0x200004c4

08002cb8 <pidExecute>:
 *  Created on: 2019/03/12
 *      Author: User
 */
#include "pid.h"

float pidExecute(_pid_t *pid) {
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
	float u = 0;
 8002cc0:	f04f 0300 	mov.w	r3, #0
 8002cc4:	60fb      	str	r3, [r7, #12]
	pid->integralOut += pid->i * pid->error * (pid->t/1000.0f);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	ed93 7a07 	vldr	s14, [r3, #28]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	edd3 6a02 	vldr	s13, [r3, #8]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002cd8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	ed93 6a00 	vldr	s12, [r3]
 8002ce2:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002e20 <pidExecute+0x168>
 8002ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	edc3 7a07 	vstr	s15, [r3, #28]
	if (pid->integralOutLimit < pid->integralOut) pid->integralOut = pid->integralOutLimit;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	ed93 7a05 	vldr	s14, [r3, #20]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d0c:	d504      	bpl.n	8002d18 <pidExecute+0x60>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695a      	ldr	r2, [r3, #20]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	61da      	str	r2, [r3, #28]
 8002d16:	e014      	b.n	8002d42 <pidExecute+0x8a>
	else if (pid->integralOut < -pid->integralOutLimit) pid->integralOut = -pid->integralOutLimit;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	ed93 7a07 	vldr	s14, [r3, #28]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	edd3 7a05 	vldr	s15, [r3, #20]
 8002d24:	eef1 7a67 	vneg.f32	s15, s15
 8002d28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d30:	d507      	bpl.n	8002d42 <pidExecute+0x8a>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	edd3 7a05 	vldr	s15, [r3, #20]
 8002d38:	eef1 7a67 	vneg.f32	s15, s15
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	edc3 7a07 	vstr	s15, [r3, #28]
	pid->differentialFilter = pid->differentialFilter * pid->differentialFilterRate + (pid->d * (pid->error - pid->lastError)*(1000.0f/pid->t)) * (1 - pid->differentialFilterRate);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	edd3 7a06 	vldr	s15, [r3, #24]
 8002d4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	edd3 6a03 	vldr	s13, [r3, #12]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d64:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002d68:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	ed93 6a00 	vldr	s12, [r3]
 8002d72:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8002e20 <pidExecute+0x168>
 8002d76:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8002d7a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	edd3 7a06 	vldr	s15, [r3, #24]
 8002d84:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002d88:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002d8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	u = pid->p * pid->error + pid->integralOut + pid->differentialFilter;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002da6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	edd3 7a07 	vldr	s15, [r3, #28]
 8002db0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002dba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dbe:	edc7 7a03 	vstr	s15, [r7, #12]
	if (pid->outLimit < u) u = pid->outLimit;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	edd3 7a04 	vldr	s15, [r3, #16]
 8002dc8:	ed97 7a03 	vldr	s14, [r7, #12]
 8002dcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd4:	dd03      	ble.n	8002dde <pidExecute+0x126>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	e012      	b.n	8002e04 <pidExecute+0x14c>
	else if (u < -pid->outLimit)u = -pid->outLimit;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	edd3 7a04 	vldr	s15, [r3, #16]
 8002de4:	eef1 7a67 	vneg.f32	s15, s15
 8002de8:	ed97 7a03 	vldr	s14, [r7, #12]
 8002dec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df4:	d506      	bpl.n	8002e04 <pidExecute+0x14c>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	edd3 7a04 	vldr	s15, [r3, #16]
 8002dfc:	eef1 7a67 	vneg.f32	s15, s15
 8002e00:	edc7 7a03 	vstr	s15, [r7, #12]
	pid->lastError = pid->error;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	621a      	str	r2, [r3, #32]
	return u;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	ee07 3a90 	vmov	s15, r3
}
 8002e12:	eeb0 0a67 	vmov.f32	s0, s15
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	447a0000 	.word	0x447a0000

08002e24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	607b      	str	r3, [r7, #4]
 8002e2e:	4b10      	ldr	r3, [pc, #64]	; (8002e70 <HAL_MspInit+0x4c>)
 8002e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e32:	4a0f      	ldr	r2, [pc, #60]	; (8002e70 <HAL_MspInit+0x4c>)
 8002e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e38:	6453      	str	r3, [r2, #68]	; 0x44
 8002e3a:	4b0d      	ldr	r3, [pc, #52]	; (8002e70 <HAL_MspInit+0x4c>)
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e42:	607b      	str	r3, [r7, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	603b      	str	r3, [r7, #0]
 8002e4a:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <HAL_MspInit+0x4c>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	4a08      	ldr	r2, [pc, #32]	; (8002e70 <HAL_MspInit+0x4c>)
 8002e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e54:	6413      	str	r3, [r2, #64]	; 0x40
 8002e56:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <HAL_MspInit+0x4c>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	603b      	str	r3, [r7, #0]
 8002e60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40023800 	.word	0x40023800

08002e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e78:	bf00      	nop
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e82:	b480      	push	{r7}
 8002e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e86:	e7fe      	b.n	8002e86 <HardFault_Handler+0x4>

08002e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e8c:	e7fe      	b.n	8002e8c <MemManage_Handler+0x4>

08002e8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e92:	e7fe      	b.n	8002e92 <BusFault_Handler+0x4>

08002e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e98:	e7fe      	b.n	8002e98 <UsageFault_Handler+0x4>

08002e9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e9e:	bf00      	nop
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eac:	bf00      	nop
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002eba:	bf00      	nop
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ec8:	f000 fefc 	bl	8003cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ecc:	bf00      	nop
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002ed4:	4802      	ldr	r0, [pc, #8]	; (8002ee0 <DMA1_Stream1_IRQHandler+0x10>)
 8002ed6:	f001 ffab 	bl	8004e30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002eda:	bf00      	nop
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000640 	.word	0x20000640

08002ee4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002ee8:	4802      	ldr	r0, [pc, #8]	; (8002ef4 <CAN1_RX0_IRQHandler+0x10>)
 8002eea:	f001 fb60 	bl	80045ae <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002eee:	bf00      	nop
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	200004c4 	.word	0x200004c4

08002ef8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002efc:	4802      	ldr	r0, [pc, #8]	; (8002f08 <CAN1_RX1_IRQHandler+0x10>)
 8002efe:	f001 fb56 	bl	80045ae <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002f02:	bf00      	nop
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	200004c4 	.word	0x200004c4

08002f0c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002f10:	4802      	ldr	r0, [pc, #8]	; (8002f1c <TIM7_IRQHandler+0x10>)
 8002f12:	f003 fa68 	bl	80063e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20000600 	.word	0x20000600

08002f20 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002f24:	4802      	ldr	r0, [pc, #8]	; (8002f30 <CAN2_RX0_IRQHandler+0x10>)
 8002f26:	f001 fb42 	bl	80045ae <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	2000049c 	.word	0x2000049c

08002f34 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002f38:	4802      	ldr	r0, [pc, #8]	; (8002f44 <CAN2_RX1_IRQHandler+0x10>)
 8002f3a:	f001 fb38 	bl	80045ae <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8002f3e:	bf00      	nop
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	2000049c 	.word	0x2000049c

08002f48 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	e00a      	b.n	8002f70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f5a:	f3af 8000 	nop.w
 8002f5e:	4601      	mov	r1, r0
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	1c5a      	adds	r2, r3, #1
 8002f64:	60ba      	str	r2, [r7, #8]
 8002f66:	b2ca      	uxtb	r2, r1
 8002f68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	dbf0      	blt.n	8002f5a <_read+0x12>
	}

return len;
 8002f78:	687b      	ldr	r3, [r7, #4]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <_write>:

int _write(int file, char *ptr, int len)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b086      	sub	sp, #24
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	60f8      	str	r0, [r7, #12]
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
 8002f92:	e009      	b.n	8002fa8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	60ba      	str	r2, [r7, #8]
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7fe fa7f 	bl	80014a0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	dbf1      	blt.n	8002f94 <_write+0x12>
	}
	return len;
 8002fb0:	687b      	ldr	r3, [r7, #4]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <_close>:


int _close(int file)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
	return -1;
 8002fc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
 8002fda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fe2:	605a      	str	r2, [r3, #4]
	return 0;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <_isatty>:

int _isatty(int file)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
	return 1;
 8002ffa:	2301      	movs	r3, #1
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
	return 0;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
	...

08003024 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800302c:	4b11      	ldr	r3, [pc, #68]	; (8003074 <_sbrk+0x50>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d102      	bne.n	800303a <_sbrk+0x16>
		heap_end = &end;
 8003034:	4b0f      	ldr	r3, [pc, #60]	; (8003074 <_sbrk+0x50>)
 8003036:	4a10      	ldr	r2, [pc, #64]	; (8003078 <_sbrk+0x54>)
 8003038:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800303a:	4b0e      	ldr	r3, [pc, #56]	; (8003074 <_sbrk+0x50>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003040:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <_sbrk+0x50>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4413      	add	r3, r2
 8003048:	466a      	mov	r2, sp
 800304a:	4293      	cmp	r3, r2
 800304c:	d907      	bls.n	800305e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800304e:	f004 fddd 	bl	8007c0c <__errno>
 8003052:	4602      	mov	r2, r0
 8003054:	230c      	movs	r3, #12
 8003056:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003058:	f04f 33ff 	mov.w	r3, #4294967295
 800305c:	e006      	b.n	800306c <_sbrk+0x48>
	}

	heap_end += incr;
 800305e:	4b05      	ldr	r3, [pc, #20]	; (8003074 <_sbrk+0x50>)
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4413      	add	r3, r2
 8003066:	4a03      	ldr	r2, [pc, #12]	; (8003074 <_sbrk+0x50>)
 8003068:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800306a:	68fb      	ldr	r3, [r7, #12]
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	200001fc 	.word	0x200001fc
 8003078:	200007e8 	.word	0x200007e8

0800307c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003080:	4b08      	ldr	r3, [pc, #32]	; (80030a4 <SystemInit+0x28>)
 8003082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003086:	4a07      	ldr	r2, [pc, #28]	; (80030a4 <SystemInit+0x28>)
 8003088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800308c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003090:	4b04      	ldr	r3, [pc, #16]	; (80030a4 <SystemInit+0x28>)
 8003092:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003096:	609a      	str	r2, [r3, #8]
#endif
}
 8003098:	bf00      	nop
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	e000ed00 	.word	0xe000ed00

080030a8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0

  htim1.Instance = TIM1;
 80030ac:	4b25      	ldr	r3, [pc, #148]	; (8003144 <MX_TIM1_Init+0x9c>)
 80030ae:	4a26      	ldr	r2, [pc, #152]	; (8003148 <MX_TIM1_Init+0xa0>)
 80030b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80030b2:	4b24      	ldr	r3, [pc, #144]	; (8003144 <MX_TIM1_Init+0x9c>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030b8:	4b22      	ldr	r3, [pc, #136]	; (8003144 <MX_TIM1_Init+0x9c>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 30000;
 80030be:	4b21      	ldr	r3, [pc, #132]	; (8003144 <MX_TIM1_Init+0x9c>)
 80030c0:	f247 5230 	movw	r2, #30000	; 0x7530
 80030c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030c6:	4b1f      	ldr	r3, [pc, #124]	; (8003144 <MX_TIM1_Init+0x9c>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80030cc:	4b1d      	ldr	r3, [pc, #116]	; (8003144 <MX_TIM1_Init+0x9c>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030d2:	4b1c      	ldr	r3, [pc, #112]	; (8003144 <MX_TIM1_Init+0x9c>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80030d8:	4b1c      	ldr	r3, [pc, #112]	; (800314c <MX_TIM1_Init+0xa4>)
 80030da:	2201      	movs	r2, #1
 80030dc:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80030de:	4b1b      	ldr	r3, [pc, #108]	; (800314c <MX_TIM1_Init+0xa4>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80030e4:	4b19      	ldr	r3, [pc, #100]	; (800314c <MX_TIM1_Init+0xa4>)
 80030e6:	2201      	movs	r2, #1
 80030e8:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80030ea:	4b18      	ldr	r3, [pc, #96]	; (800314c <MX_TIM1_Init+0xa4>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80030f0:	4b16      	ldr	r3, [pc, #88]	; (800314c <MX_TIM1_Init+0xa4>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80030f6:	4b15      	ldr	r3, [pc, #84]	; (800314c <MX_TIM1_Init+0xa4>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80030fc:	4b13      	ldr	r3, [pc, #76]	; (800314c <MX_TIM1_Init+0xa4>)
 80030fe:	2201      	movs	r2, #1
 8003100:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003102:	4b12      	ldr	r3, [pc, #72]	; (800314c <MX_TIM1_Init+0xa4>)
 8003104:	2200      	movs	r2, #0
 8003106:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8003108:	4b10      	ldr	r3, [pc, #64]	; (800314c <MX_TIM1_Init+0xa4>)
 800310a:	2200      	movs	r2, #0
 800310c:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800310e:	490f      	ldr	r1, [pc, #60]	; (800314c <MX_TIM1_Init+0xa4>)
 8003110:	480c      	ldr	r0, [pc, #48]	; (8003144 <MX_TIM1_Init+0x9c>)
 8003112:	f003 f89f 	bl	8006254 <HAL_TIM_Encoder_Init>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800311c:	f7ff fcd0 	bl	8002ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003120:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <MX_TIM1_Init+0xa8>)
 8003122:	2200      	movs	r2, #0
 8003124:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003126:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <MX_TIM1_Init+0xa8>)
 8003128:	2200      	movs	r2, #0
 800312a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800312c:	4908      	ldr	r1, [pc, #32]	; (8003150 <MX_TIM1_Init+0xa8>)
 800312e:	4805      	ldr	r0, [pc, #20]	; (8003144 <MX_TIM1_Init+0x9c>)
 8003130:	f003 fdc6 	bl	8006cc0 <HAL_TIMEx_MasterConfigSynchronization>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800313a:	f7ff fcc1 	bl	8002ac0 <Error_Handler>
  }

}
 800313e:	bf00      	nop
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	20000580 	.word	0x20000580
 8003148:	40010000 	.word	0x40010000
 800314c:	20000428 	.word	0x20000428
 8003150:	2000024c 	.word	0x2000024c

08003154 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  htim2.Instance = TIM2;
 8003158:	4b24      	ldr	r3, [pc, #144]	; (80031ec <MX_TIM2_Init+0x98>)
 800315a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800315e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003160:	4b22      	ldr	r3, [pc, #136]	; (80031ec <MX_TIM2_Init+0x98>)
 8003162:	2200      	movs	r2, #0
 8003164:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003166:	4b21      	ldr	r3, [pc, #132]	; (80031ec <MX_TIM2_Init+0x98>)
 8003168:	2200      	movs	r2, #0
 800316a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 30000;
 800316c:	4b1f      	ldr	r3, [pc, #124]	; (80031ec <MX_TIM2_Init+0x98>)
 800316e:	f247 5230 	movw	r2, #30000	; 0x7530
 8003172:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003174:	4b1d      	ldr	r3, [pc, #116]	; (80031ec <MX_TIM2_Init+0x98>)
 8003176:	2200      	movs	r2, #0
 8003178:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800317a:	4b1c      	ldr	r3, [pc, #112]	; (80031ec <MX_TIM2_Init+0x98>)
 800317c:	2200      	movs	r2, #0
 800317e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003180:	4b1b      	ldr	r3, [pc, #108]	; (80031f0 <MX_TIM2_Init+0x9c>)
 8003182:	2201      	movs	r2, #1
 8003184:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003186:	4b1a      	ldr	r3, [pc, #104]	; (80031f0 <MX_TIM2_Init+0x9c>)
 8003188:	2200      	movs	r2, #0
 800318a:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800318c:	4b18      	ldr	r3, [pc, #96]	; (80031f0 <MX_TIM2_Init+0x9c>)
 800318e:	2201      	movs	r2, #1
 8003190:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003192:	4b17      	ldr	r3, [pc, #92]	; (80031f0 <MX_TIM2_Init+0x9c>)
 8003194:	2200      	movs	r2, #0
 8003196:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8003198:	4b15      	ldr	r3, [pc, #84]	; (80031f0 <MX_TIM2_Init+0x9c>)
 800319a:	2200      	movs	r2, #0
 800319c:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800319e:	4b14      	ldr	r3, [pc, #80]	; (80031f0 <MX_TIM2_Init+0x9c>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80031a4:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <MX_TIM2_Init+0x9c>)
 80031a6:	2201      	movs	r2, #1
 80031a8:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80031aa:	4b11      	ldr	r3, [pc, #68]	; (80031f0 <MX_TIM2_Init+0x9c>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80031b0:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <MX_TIM2_Init+0x9c>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80031b6:	490e      	ldr	r1, [pc, #56]	; (80031f0 <MX_TIM2_Init+0x9c>)
 80031b8:	480c      	ldr	r0, [pc, #48]	; (80031ec <MX_TIM2_Init+0x98>)
 80031ba:	f003 f84b 	bl	8006254 <HAL_TIM_Encoder_Init>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80031c4:	f7ff fc7c 	bl	8002ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031c8:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <MX_TIM2_Init+0xa0>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031ce:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <MX_TIM2_Init+0xa0>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80031d4:	4907      	ldr	r1, [pc, #28]	; (80031f4 <MX_TIM2_Init+0xa0>)
 80031d6:	4805      	ldr	r0, [pc, #20]	; (80031ec <MX_TIM2_Init+0x98>)
 80031d8:	f003 fd72 	bl	8006cc0 <HAL_TIMEx_MasterConfigSynchronization>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80031e2:	f7ff fc6d 	bl	8002ac0 <Error_Handler>
  }

}
 80031e6:	bf00      	nop
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	200005c0 	.word	0x200005c0
 80031f0:	20000428 	.word	0x20000428
 80031f4:	2000024c 	.word	0x2000024c

080031f8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0

  htim3.Instance = TIM3;
 80031fc:	4b31      	ldr	r3, [pc, #196]	; (80032c4 <MX_TIM3_Init+0xcc>)
 80031fe:	4a32      	ldr	r2, [pc, #200]	; (80032c8 <MX_TIM3_Init+0xd0>)
 8003200:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42;
 8003202:	4b30      	ldr	r3, [pc, #192]	; (80032c4 <MX_TIM3_Init+0xcc>)
 8003204:	222a      	movs	r2, #42	; 0x2a
 8003206:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003208:	4b2e      	ldr	r3, [pc, #184]	; (80032c4 <MX_TIM3_Init+0xcc>)
 800320a:	2200      	movs	r2, #0
 800320c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800320e:	4b2d      	ldr	r3, [pc, #180]	; (80032c4 <MX_TIM3_Init+0xcc>)
 8003210:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003214:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003216:	4b2b      	ldr	r3, [pc, #172]	; (80032c4 <MX_TIM3_Init+0xcc>)
 8003218:	2200      	movs	r2, #0
 800321a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800321c:	4b29      	ldr	r3, [pc, #164]	; (80032c4 <MX_TIM3_Init+0xcc>)
 800321e:	2200      	movs	r2, #0
 8003220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003222:	4828      	ldr	r0, [pc, #160]	; (80032c4 <MX_TIM3_Init+0xcc>)
 8003224:	f002 ffad 	bl	8006182 <HAL_TIM_PWM_Init>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <MX_TIM3_Init+0x3a>
  {
    Error_Handler();
 800322e:	f7ff fc47 	bl	8002ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003232:	4b26      	ldr	r3, [pc, #152]	; (80032cc <MX_TIM3_Init+0xd4>)
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003238:	4b24      	ldr	r3, [pc, #144]	; (80032cc <MX_TIM3_Init+0xd4>)
 800323a:	2200      	movs	r2, #0
 800323c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800323e:	4923      	ldr	r1, [pc, #140]	; (80032cc <MX_TIM3_Init+0xd4>)
 8003240:	4820      	ldr	r0, [pc, #128]	; (80032c4 <MX_TIM3_Init+0xcc>)
 8003242:	f003 fd3d 	bl	8006cc0 <HAL_TIMEx_MasterConfigSynchronization>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800324c:	f7ff fc38 	bl	8002ac0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003250:	4b1f      	ldr	r3, [pc, #124]	; (80032d0 <MX_TIM3_Init+0xd8>)
 8003252:	2260      	movs	r2, #96	; 0x60
 8003254:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003256:	4b1e      	ldr	r3, [pc, #120]	; (80032d0 <MX_TIM3_Init+0xd8>)
 8003258:	2200      	movs	r2, #0
 800325a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800325c:	4b1c      	ldr	r3, [pc, #112]	; (80032d0 <MX_TIM3_Init+0xd8>)
 800325e:	2200      	movs	r2, #0
 8003260:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003262:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <MX_TIM3_Init+0xd8>)
 8003264:	2200      	movs	r2, #0
 8003266:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003268:	2200      	movs	r2, #0
 800326a:	4919      	ldr	r1, [pc, #100]	; (80032d0 <MX_TIM3_Init+0xd8>)
 800326c:	4815      	ldr	r0, [pc, #84]	; (80032c4 <MX_TIM3_Init+0xcc>)
 800326e:	f003 f9c3 	bl	80065f8 <HAL_TIM_PWM_ConfigChannel>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003278:	f7ff fc22 	bl	8002ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800327c:	2204      	movs	r2, #4
 800327e:	4914      	ldr	r1, [pc, #80]	; (80032d0 <MX_TIM3_Init+0xd8>)
 8003280:	4810      	ldr	r0, [pc, #64]	; (80032c4 <MX_TIM3_Init+0xcc>)
 8003282:	f003 f9b9 	bl	80065f8 <HAL_TIM_PWM_ConfigChannel>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800328c:	f7ff fc18 	bl	8002ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003290:	2208      	movs	r2, #8
 8003292:	490f      	ldr	r1, [pc, #60]	; (80032d0 <MX_TIM3_Init+0xd8>)
 8003294:	480b      	ldr	r0, [pc, #44]	; (80032c4 <MX_TIM3_Init+0xcc>)
 8003296:	f003 f9af 	bl	80065f8 <HAL_TIM_PWM_ConfigChannel>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 80032a0:	f7ff fc0e 	bl	8002ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80032a4:	220c      	movs	r2, #12
 80032a6:	490a      	ldr	r1, [pc, #40]	; (80032d0 <MX_TIM3_Init+0xd8>)
 80032a8:	4806      	ldr	r0, [pc, #24]	; (80032c4 <MX_TIM3_Init+0xcc>)
 80032aa:	f003 f9a5 	bl	80065f8 <HAL_TIM_PWM_ConfigChannel>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 80032b4:	f7ff fc04 	bl	8002ac0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80032b8:	4802      	ldr	r0, [pc, #8]	; (80032c4 <MX_TIM3_Init+0xcc>)
 80032ba:	f000 f99d 	bl	80035f8 <HAL_TIM_MspPostInit>

}
 80032be:	bf00      	nop
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	20000540 	.word	0x20000540
 80032c8:	40000400 	.word	0x40000400
 80032cc:	2000024c 	.word	0x2000024c
 80032d0:	200003b4 	.word	0x200003b4

080032d4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  htim7.Instance = TIM7;
 80032d8:	4b14      	ldr	r3, [pc, #80]	; (800332c <MX_TIM7_Init+0x58>)
 80032da:	4a15      	ldr	r2, [pc, #84]	; (8003330 <MX_TIM7_Init+0x5c>)
 80032dc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 5-1;
 80032de:	4b13      	ldr	r3, [pc, #76]	; (800332c <MX_TIM7_Init+0x58>)
 80032e0:	2204      	movs	r2, #4
 80032e2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032e4:	4b11      	ldr	r3, [pc, #68]	; (800332c <MX_TIM7_Init+0x58>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 16800;
 80032ea:	4b10      	ldr	r3, [pc, #64]	; (800332c <MX_TIM7_Init+0x58>)
 80032ec:	f244 12a0 	movw	r2, #16800	; 0x41a0
 80032f0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032f2:	4b0e      	ldr	r3, [pc, #56]	; (800332c <MX_TIM7_Init+0x58>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80032f8:	480c      	ldr	r0, [pc, #48]	; (800332c <MX_TIM7_Init+0x58>)
 80032fa:	f002 fef3 	bl	80060e4 <HAL_TIM_Base_Init>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <MX_TIM7_Init+0x34>
  {
    Error_Handler();
 8003304:	f7ff fbdc 	bl	8002ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003308:	4b0a      	ldr	r3, [pc, #40]	; (8003334 <MX_TIM7_Init+0x60>)
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800330e:	4b09      	ldr	r3, [pc, #36]	; (8003334 <MX_TIM7_Init+0x60>)
 8003310:	2200      	movs	r2, #0
 8003312:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003314:	4907      	ldr	r1, [pc, #28]	; (8003334 <MX_TIM7_Init+0x60>)
 8003316:	4805      	ldr	r0, [pc, #20]	; (800332c <MX_TIM7_Init+0x58>)
 8003318:	f003 fcd2 	bl	8006cc0 <HAL_TIMEx_MasterConfigSynchronization>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <MX_TIM7_Init+0x52>
  {
    Error_Handler();
 8003322:	f7ff fbcd 	bl	8002ac0 <Error_Handler>
  }

}
 8003326:	bf00      	nop
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	20000600 	.word	0x20000600
 8003330:	40001400 	.word	0x40001400
 8003334:	2000024c 	.word	0x2000024c

08003338 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0

  htim8.Instance = TIM8;
 800333c:	4b3c      	ldr	r3, [pc, #240]	; (8003430 <MX_TIM8_Init+0xf8>)
 800333e:	4a3d      	ldr	r2, [pc, #244]	; (8003434 <MX_TIM8_Init+0xfc>)
 8003340:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 167;
 8003342:	4b3b      	ldr	r3, [pc, #236]	; (8003430 <MX_TIM8_Init+0xf8>)
 8003344:	22a7      	movs	r2, #167	; 0xa7
 8003346:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003348:	4b39      	ldr	r3, [pc, #228]	; (8003430 <MX_TIM8_Init+0xf8>)
 800334a:	2200      	movs	r2, #0
 800334c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 20000-1;
 800334e:	4b38      	ldr	r3, [pc, #224]	; (8003430 <MX_TIM8_Init+0xf8>)
 8003350:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003354:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003356:	4b36      	ldr	r3, [pc, #216]	; (8003430 <MX_TIM8_Init+0xf8>)
 8003358:	2200      	movs	r2, #0
 800335a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800335c:	4b34      	ldr	r3, [pc, #208]	; (8003430 <MX_TIM8_Init+0xf8>)
 800335e:	2200      	movs	r2, #0
 8003360:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003362:	4b33      	ldr	r3, [pc, #204]	; (8003430 <MX_TIM8_Init+0xf8>)
 8003364:	2200      	movs	r2, #0
 8003366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003368:	4831      	ldr	r0, [pc, #196]	; (8003430 <MX_TIM8_Init+0xf8>)
 800336a:	f002 ff0a 	bl	8006182 <HAL_TIM_PWM_Init>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <MX_TIM8_Init+0x40>
  {
    Error_Handler();
 8003374:	f7ff fba4 	bl	8002ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003378:	4b2f      	ldr	r3, [pc, #188]	; (8003438 <MX_TIM8_Init+0x100>)
 800337a:	2200      	movs	r2, #0
 800337c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800337e:	4b2e      	ldr	r3, [pc, #184]	; (8003438 <MX_TIM8_Init+0x100>)
 8003380:	2200      	movs	r2, #0
 8003382:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003384:	492c      	ldr	r1, [pc, #176]	; (8003438 <MX_TIM8_Init+0x100>)
 8003386:	482a      	ldr	r0, [pc, #168]	; (8003430 <MX_TIM8_Init+0xf8>)
 8003388:	f003 fc9a 	bl	8006cc0 <HAL_TIMEx_MasterConfigSynchronization>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <MX_TIM8_Init+0x5e>
  {
    Error_Handler();
 8003392:	f7ff fb95 	bl	8002ac0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003396:	4b29      	ldr	r3, [pc, #164]	; (800343c <MX_TIM8_Init+0x104>)
 8003398:	2260      	movs	r2, #96	; 0x60
 800339a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800339c:	4b27      	ldr	r3, [pc, #156]	; (800343c <MX_TIM8_Init+0x104>)
 800339e:	2200      	movs	r2, #0
 80033a0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033a2:	4b26      	ldr	r3, [pc, #152]	; (800343c <MX_TIM8_Init+0x104>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80033a8:	4b24      	ldr	r3, [pc, #144]	; (800343c <MX_TIM8_Init+0x104>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033ae:	4b23      	ldr	r3, [pc, #140]	; (800343c <MX_TIM8_Init+0x104>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80033b4:	4b21      	ldr	r3, [pc, #132]	; (800343c <MX_TIM8_Init+0x104>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80033ba:	4b20      	ldr	r3, [pc, #128]	; (800343c <MX_TIM8_Init+0x104>)
 80033bc:	2200      	movs	r2, #0
 80033be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80033c0:	2208      	movs	r2, #8
 80033c2:	491e      	ldr	r1, [pc, #120]	; (800343c <MX_TIM8_Init+0x104>)
 80033c4:	481a      	ldr	r0, [pc, #104]	; (8003430 <MX_TIM8_Init+0xf8>)
 80033c6:	f003 f917 	bl	80065f8 <HAL_TIM_PWM_ConfigChannel>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <MX_TIM8_Init+0x9c>
  {
    Error_Handler();
 80033d0:	f7ff fb76 	bl	8002ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80033d4:	220c      	movs	r2, #12
 80033d6:	4919      	ldr	r1, [pc, #100]	; (800343c <MX_TIM8_Init+0x104>)
 80033d8:	4815      	ldr	r0, [pc, #84]	; (8003430 <MX_TIM8_Init+0xf8>)
 80033da:	f003 f90d 	bl	80065f8 <HAL_TIM_PWM_ConfigChannel>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 80033e4:	f7ff fb6c 	bl	8002ac0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80033e8:	4b15      	ldr	r3, [pc, #84]	; (8003440 <MX_TIM8_Init+0x108>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80033ee:	4b14      	ldr	r3, [pc, #80]	; (8003440 <MX_TIM8_Init+0x108>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80033f4:	4b12      	ldr	r3, [pc, #72]	; (8003440 <MX_TIM8_Init+0x108>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80033fa:	4b11      	ldr	r3, [pc, #68]	; (8003440 <MX_TIM8_Init+0x108>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003400:	4b0f      	ldr	r3, [pc, #60]	; (8003440 <MX_TIM8_Init+0x108>)
 8003402:	2200      	movs	r2, #0
 8003404:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003406:	4b0e      	ldr	r3, [pc, #56]	; (8003440 <MX_TIM8_Init+0x108>)
 8003408:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800340c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800340e:	4b0c      	ldr	r3, [pc, #48]	; (8003440 <MX_TIM8_Init+0x108>)
 8003410:	2200      	movs	r2, #0
 8003412:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003414:	490a      	ldr	r1, [pc, #40]	; (8003440 <MX_TIM8_Init+0x108>)
 8003416:	4806      	ldr	r0, [pc, #24]	; (8003430 <MX_TIM8_Init+0xf8>)
 8003418:	f003 fcce 	bl	8006db8 <HAL_TIMEx_ConfigBreakDeadTime>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8003422:	f7ff fb4d 	bl	8002ac0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8003426:	4802      	ldr	r0, [pc, #8]	; (8003430 <MX_TIM8_Init+0xf8>)
 8003428:	f000 f8e6 	bl	80035f8 <HAL_TIM_MspPostInit>

}
 800342c:	bf00      	nop
 800342e:	bd80      	pop	{r7, pc}
 8003430:	20000500 	.word	0x20000500
 8003434:	40010400 	.word	0x40010400
 8003438:	2000024c 	.word	0x2000024c
 800343c:	200003b4 	.word	0x200003b4
 8003440:	200003ec 	.word	0x200003ec

08003444 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08c      	sub	sp, #48	; 0x30
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800344c:	f107 031c 	add.w	r3, r7, #28
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	605a      	str	r2, [r3, #4]
 8003456:	609a      	str	r2, [r3, #8]
 8003458:	60da      	str	r2, [r3, #12]
 800345a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a32      	ldr	r2, [pc, #200]	; (800352c <HAL_TIM_Encoder_MspInit+0xe8>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d12d      	bne.n	80034c2 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	61bb      	str	r3, [r7, #24]
 800346a:	4b31      	ldr	r3, [pc, #196]	; (8003530 <HAL_TIM_Encoder_MspInit+0xec>)
 800346c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346e:	4a30      	ldr	r2, [pc, #192]	; (8003530 <HAL_TIM_Encoder_MspInit+0xec>)
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	6453      	str	r3, [r2, #68]	; 0x44
 8003476:	4b2e      	ldr	r3, [pc, #184]	; (8003530 <HAL_TIM_Encoder_MspInit+0xec>)
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	61bb      	str	r3, [r7, #24]
 8003480:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	4b2a      	ldr	r3, [pc, #168]	; (8003530 <HAL_TIM_Encoder_MspInit+0xec>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	4a29      	ldr	r2, [pc, #164]	; (8003530 <HAL_TIM_Encoder_MspInit+0xec>)
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	6313      	str	r3, [r2, #48]	; 0x30
 8003492:	4b27      	ldr	r3, [pc, #156]	; (8003530 <HAL_TIM_Encoder_MspInit+0xec>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800349e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80034a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a4:	2302      	movs	r3, #2
 80034a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ac:	2300      	movs	r3, #0
 80034ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80034b0:	2301      	movs	r3, #1
 80034b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b4:	f107 031c 	add.w	r3, r7, #28
 80034b8:	4619      	mov	r1, r3
 80034ba:	481e      	ldr	r0, [pc, #120]	; (8003534 <HAL_TIM_Encoder_MspInit+0xf0>)
 80034bc:	f001 ff20 	bl	8005300 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80034c0:	e030      	b.n	8003524 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM2)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ca:	d12b      	bne.n	8003524 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034cc:	2300      	movs	r3, #0
 80034ce:	613b      	str	r3, [r7, #16]
 80034d0:	4b17      	ldr	r3, [pc, #92]	; (8003530 <HAL_TIM_Encoder_MspInit+0xec>)
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	4a16      	ldr	r2, [pc, #88]	; (8003530 <HAL_TIM_Encoder_MspInit+0xec>)
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	6413      	str	r3, [r2, #64]	; 0x40
 80034dc:	4b14      	ldr	r3, [pc, #80]	; (8003530 <HAL_TIM_Encoder_MspInit+0xec>)
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034e8:	2300      	movs	r3, #0
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	4b10      	ldr	r3, [pc, #64]	; (8003530 <HAL_TIM_Encoder_MspInit+0xec>)
 80034ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f0:	4a0f      	ldr	r2, [pc, #60]	; (8003530 <HAL_TIM_Encoder_MspInit+0xec>)
 80034f2:	f043 0301 	orr.w	r3, r3, #1
 80034f6:	6313      	str	r3, [r2, #48]	; 0x30
 80034f8:	4b0d      	ldr	r3, [pc, #52]	; (8003530 <HAL_TIM_Encoder_MspInit+0xec>)
 80034fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003504:	2303      	movs	r3, #3
 8003506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003508:	2302      	movs	r3, #2
 800350a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350c:	2300      	movs	r3, #0
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003510:	2300      	movs	r3, #0
 8003512:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003514:	2301      	movs	r3, #1
 8003516:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003518:	f107 031c 	add.w	r3, r7, #28
 800351c:	4619      	mov	r1, r3
 800351e:	4805      	ldr	r0, [pc, #20]	; (8003534 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003520:	f001 feee 	bl	8005300 <HAL_GPIO_Init>
}
 8003524:	bf00      	nop
 8003526:	3730      	adds	r7, #48	; 0x30
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40010000 	.word	0x40010000
 8003530:	40023800 	.word	0x40023800
 8003534:	40020000 	.word	0x40020000

08003538 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a15      	ldr	r2, [pc, #84]	; (800359c <HAL_TIM_PWM_MspInit+0x64>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d10e      	bne.n	8003568 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800354a:	2300      	movs	r3, #0
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	4b14      	ldr	r3, [pc, #80]	; (80035a0 <HAL_TIM_PWM_MspInit+0x68>)
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	4a13      	ldr	r2, [pc, #76]	; (80035a0 <HAL_TIM_PWM_MspInit+0x68>)
 8003554:	f043 0302 	orr.w	r3, r3, #2
 8003558:	6413      	str	r3, [r2, #64]	; 0x40
 800355a:	4b11      	ldr	r3, [pc, #68]	; (80035a0 <HAL_TIM_PWM_MspInit+0x68>)
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003566:	e012      	b.n	800358e <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM8)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a0d      	ldr	r2, [pc, #52]	; (80035a4 <HAL_TIM_PWM_MspInit+0x6c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d10d      	bne.n	800358e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	60bb      	str	r3, [r7, #8]
 8003576:	4b0a      	ldr	r3, [pc, #40]	; (80035a0 <HAL_TIM_PWM_MspInit+0x68>)
 8003578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357a:	4a09      	ldr	r2, [pc, #36]	; (80035a0 <HAL_TIM_PWM_MspInit+0x68>)
 800357c:	f043 0302 	orr.w	r3, r3, #2
 8003580:	6453      	str	r3, [r2, #68]	; 0x44
 8003582:	4b07      	ldr	r3, [pc, #28]	; (80035a0 <HAL_TIM_PWM_MspInit+0x68>)
 8003584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	60bb      	str	r3, [r7, #8]
 800358c:	68bb      	ldr	r3, [r7, #8]
}
 800358e:	bf00      	nop
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40000400 	.word	0x40000400
 80035a0:	40023800 	.word	0x40023800
 80035a4:	40010400 	.word	0x40010400

080035a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a0e      	ldr	r2, [pc, #56]	; (80035f0 <HAL_TIM_Base_MspInit+0x48>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d115      	bne.n	80035e6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	4b0d      	ldr	r3, [pc, #52]	; (80035f4 <HAL_TIM_Base_MspInit+0x4c>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	4a0c      	ldr	r2, [pc, #48]	; (80035f4 <HAL_TIM_Base_MspInit+0x4c>)
 80035c4:	f043 0320 	orr.w	r3, r3, #32
 80035c8:	6413      	str	r3, [r2, #64]	; 0x40
 80035ca:	4b0a      	ldr	r3, [pc, #40]	; (80035f4 <HAL_TIM_Base_MspInit+0x4c>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	f003 0320 	and.w	r3, r3, #32
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 6, 0);
 80035d6:	2200      	movs	r2, #0
 80035d8:	2106      	movs	r1, #6
 80035da:	2037      	movs	r0, #55	; 0x37
 80035dc:	f001 faeb 	bl	8004bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80035e0:	2037      	movs	r0, #55	; 0x37
 80035e2:	f001 fb04 	bl	8004bee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80035e6:	bf00      	nop
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40001400 	.word	0x40001400
 80035f4:	40023800 	.word	0x40023800

080035f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08a      	sub	sp, #40	; 0x28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003600:	f107 0314 	add.w	r3, r7, #20
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	605a      	str	r2, [r3, #4]
 800360a:	609a      	str	r2, [r3, #8]
 800360c:	60da      	str	r2, [r3, #12]
 800360e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a33      	ldr	r2, [pc, #204]	; (80036e4 <HAL_TIM_MspPostInit+0xec>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d13c      	bne.n	8003694 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800361a:	2300      	movs	r3, #0
 800361c:	613b      	str	r3, [r7, #16]
 800361e:	4b32      	ldr	r3, [pc, #200]	; (80036e8 <HAL_TIM_MspPostInit+0xf0>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	4a31      	ldr	r2, [pc, #196]	; (80036e8 <HAL_TIM_MspPostInit+0xf0>)
 8003624:	f043 0301 	orr.w	r3, r3, #1
 8003628:	6313      	str	r3, [r2, #48]	; 0x30
 800362a:	4b2f      	ldr	r3, [pc, #188]	; (80036e8 <HAL_TIM_MspPostInit+0xf0>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	4b2b      	ldr	r3, [pc, #172]	; (80036e8 <HAL_TIM_MspPostInit+0xf0>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	4a2a      	ldr	r2, [pc, #168]	; (80036e8 <HAL_TIM_MspPostInit+0xf0>)
 8003640:	f043 0302 	orr.w	r3, r3, #2
 8003644:	6313      	str	r3, [r2, #48]	; 0x30
 8003646:	4b28      	ldr	r3, [pc, #160]	; (80036e8 <HAL_TIM_MspPostInit+0xf0>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003652:	23c0      	movs	r3, #192	; 0xc0
 8003654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003656:	2302      	movs	r3, #2
 8003658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365a:	2300      	movs	r3, #0
 800365c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800365e:	2300      	movs	r3, #0
 8003660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003662:	2302      	movs	r3, #2
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003666:	f107 0314 	add.w	r3, r7, #20
 800366a:	4619      	mov	r1, r3
 800366c:	481f      	ldr	r0, [pc, #124]	; (80036ec <HAL_TIM_MspPostInit+0xf4>)
 800366e:	f001 fe47 	bl	8005300 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003672:	2303      	movs	r3, #3
 8003674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003676:	2302      	movs	r3, #2
 8003678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367a:	2300      	movs	r3, #0
 800367c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800367e:	2300      	movs	r3, #0
 8003680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003682:	2302      	movs	r3, #2
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003686:	f107 0314 	add.w	r3, r7, #20
 800368a:	4619      	mov	r1, r3
 800368c:	4818      	ldr	r0, [pc, #96]	; (80036f0 <HAL_TIM_MspPostInit+0xf8>)
 800368e:	f001 fe37 	bl	8005300 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003692:	e023      	b.n	80036dc <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM8)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a16      	ldr	r2, [pc, #88]	; (80036f4 <HAL_TIM_MspPostInit+0xfc>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d11e      	bne.n	80036dc <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800369e:	2300      	movs	r3, #0
 80036a0:	60bb      	str	r3, [r7, #8]
 80036a2:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <HAL_TIM_MspPostInit+0xf0>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	4a10      	ldr	r2, [pc, #64]	; (80036e8 <HAL_TIM_MspPostInit+0xf0>)
 80036a8:	f043 0304 	orr.w	r3, r3, #4
 80036ac:	6313      	str	r3, [r2, #48]	; 0x30
 80036ae:	4b0e      	ldr	r3, [pc, #56]	; (80036e8 <HAL_TIM_MspPostInit+0xf0>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	f003 0304 	and.w	r3, r3, #4
 80036b6:	60bb      	str	r3, [r7, #8]
 80036b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80036ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80036be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c0:	2302      	movs	r3, #2
 80036c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c4:	2300      	movs	r3, #0
 80036c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c8:	2300      	movs	r3, #0
 80036ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80036cc:	2303      	movs	r3, #3
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036d0:	f107 0314 	add.w	r3, r7, #20
 80036d4:	4619      	mov	r1, r3
 80036d6:	4808      	ldr	r0, [pc, #32]	; (80036f8 <HAL_TIM_MspPostInit+0x100>)
 80036d8:	f001 fe12 	bl	8005300 <HAL_GPIO_Init>
}
 80036dc:	bf00      	nop
 80036de:	3728      	adds	r7, #40	; 0x28
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40000400 	.word	0x40000400
 80036e8:	40023800 	.word	0x40023800
 80036ec:	40020000 	.word	0x40020000
 80036f0:	40020400 	.word	0x40020400
 80036f4:	40010400 	.word	0x40010400
 80036f8:	40020800 	.word	0x40020800

080036fc <MX_UART5_Init>:
UART_HandleTypeDef huart6;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8003700:	4b12      	ldr	r3, [pc, #72]	; (800374c <MX_UART5_Init+0x50>)
 8003702:	4a13      	ldr	r2, [pc, #76]	; (8003750 <MX_UART5_Init+0x54>)
 8003704:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003706:	4b11      	ldr	r3, [pc, #68]	; (800374c <MX_UART5_Init+0x50>)
 8003708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800370c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 800370e:	4b0f      	ldr	r3, [pc, #60]	; (800374c <MX_UART5_Init+0x50>)
 8003710:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003714:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003716:	4b0d      	ldr	r3, [pc, #52]	; (800374c <MX_UART5_Init+0x50>)
 8003718:	2200      	movs	r2, #0
 800371a:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 800371c:	4b0b      	ldr	r3, [pc, #44]	; (800374c <MX_UART5_Init+0x50>)
 800371e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003722:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003724:	4b09      	ldr	r3, [pc, #36]	; (800374c <MX_UART5_Init+0x50>)
 8003726:	220c      	movs	r2, #12
 8003728:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800372a:	4b08      	ldr	r3, [pc, #32]	; (800374c <MX_UART5_Init+0x50>)
 800372c:	2200      	movs	r2, #0
 800372e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003730:	4b06      	ldr	r3, [pc, #24]	; (800374c <MX_UART5_Init+0x50>)
 8003732:	2200      	movs	r2, #0
 8003734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003736:	4805      	ldr	r0, [pc, #20]	; (800374c <MX_UART5_Init+0x50>)
 8003738:	f003 fba4 	bl	8006e84 <HAL_UART_Init>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <MX_UART5_Init+0x4a>
  {
    Error_Handler();
 8003742:	f7ff f9bd 	bl	8002ac0 <Error_Handler>
  }

}
 8003746:	bf00      	nop
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	200006e0 	.word	0x200006e0
 8003750:	40005000 	.word	0x40005000

08003754 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003758:	4b11      	ldr	r3, [pc, #68]	; (80037a0 <MX_USART1_UART_Init+0x4c>)
 800375a:	4a12      	ldr	r2, [pc, #72]	; (80037a4 <MX_USART1_UART_Init+0x50>)
 800375c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800375e:	4b10      	ldr	r3, [pc, #64]	; (80037a0 <MX_USART1_UART_Init+0x4c>)
 8003760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003764:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003766:	4b0e      	ldr	r3, [pc, #56]	; (80037a0 <MX_USART1_UART_Init+0x4c>)
 8003768:	2200      	movs	r2, #0
 800376a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800376c:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <MX_USART1_UART_Init+0x4c>)
 800376e:	2200      	movs	r2, #0
 8003770:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003772:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <MX_USART1_UART_Init+0x4c>)
 8003774:	2200      	movs	r2, #0
 8003776:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003778:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <MX_USART1_UART_Init+0x4c>)
 800377a:	220c      	movs	r2, #12
 800377c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800377e:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <MX_USART1_UART_Init+0x4c>)
 8003780:	2200      	movs	r2, #0
 8003782:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003784:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <MX_USART1_UART_Init+0x4c>)
 8003786:	2200      	movs	r2, #0
 8003788:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800378a:	4805      	ldr	r0, [pc, #20]	; (80037a0 <MX_USART1_UART_Init+0x4c>)
 800378c:	f003 fb7a 	bl	8006e84 <HAL_UART_Init>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003796:	f7ff f993 	bl	8002ac0 <Error_Handler>
  }

}
 800379a:	bf00      	nop
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000720 	.word	0x20000720
 80037a4:	40011000 	.word	0x40011000

080037a8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80037ac:	4b11      	ldr	r3, [pc, #68]	; (80037f4 <MX_USART2_UART_Init+0x4c>)
 80037ae:	4a12      	ldr	r2, [pc, #72]	; (80037f8 <MX_USART2_UART_Init+0x50>)
 80037b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80037b2:	4b10      	ldr	r3, [pc, #64]	; (80037f4 <MX_USART2_UART_Init+0x4c>)
 80037b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80037ba:	4b0e      	ldr	r3, [pc, #56]	; (80037f4 <MX_USART2_UART_Init+0x4c>)
 80037bc:	2200      	movs	r2, #0
 80037be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80037c0:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <MX_USART2_UART_Init+0x4c>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80037c6:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <MX_USART2_UART_Init+0x4c>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80037cc:	4b09      	ldr	r3, [pc, #36]	; (80037f4 <MX_USART2_UART_Init+0x4c>)
 80037ce:	220c      	movs	r2, #12
 80037d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037d2:	4b08      	ldr	r3, [pc, #32]	; (80037f4 <MX_USART2_UART_Init+0x4c>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80037d8:	4b06      	ldr	r3, [pc, #24]	; (80037f4 <MX_USART2_UART_Init+0x4c>)
 80037da:	2200      	movs	r2, #0
 80037dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80037de:	4805      	ldr	r0, [pc, #20]	; (80037f4 <MX_USART2_UART_Init+0x4c>)
 80037e0:	f003 fb50 	bl	8006e84 <HAL_UART_Init>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80037ea:	f7ff f969 	bl	8002ac0 <Error_Handler>
  }

}
 80037ee:	bf00      	nop
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	200007a0 	.word	0x200007a0
 80037f8:	40004400 	.word	0x40004400

080037fc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003800:	4b11      	ldr	r3, [pc, #68]	; (8003848 <MX_USART3_UART_Init+0x4c>)
 8003802:	4a12      	ldr	r2, [pc, #72]	; (800384c <MX_USART3_UART_Init+0x50>)
 8003804:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003806:	4b10      	ldr	r3, [pc, #64]	; (8003848 <MX_USART3_UART_Init+0x4c>)
 8003808:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800380c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800380e:	4b0e      	ldr	r3, [pc, #56]	; (8003848 <MX_USART3_UART_Init+0x4c>)
 8003810:	2200      	movs	r2, #0
 8003812:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003814:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <MX_USART3_UART_Init+0x4c>)
 8003816:	2200      	movs	r2, #0
 8003818:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800381a:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <MX_USART3_UART_Init+0x4c>)
 800381c:	2200      	movs	r2, #0
 800381e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003820:	4b09      	ldr	r3, [pc, #36]	; (8003848 <MX_USART3_UART_Init+0x4c>)
 8003822:	220c      	movs	r2, #12
 8003824:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003826:	4b08      	ldr	r3, [pc, #32]	; (8003848 <MX_USART3_UART_Init+0x4c>)
 8003828:	2200      	movs	r2, #0
 800382a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800382c:	4b06      	ldr	r3, [pc, #24]	; (8003848 <MX_USART3_UART_Init+0x4c>)
 800382e:	2200      	movs	r2, #0
 8003830:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003832:	4805      	ldr	r0, [pc, #20]	; (8003848 <MX_USART3_UART_Init+0x4c>)
 8003834:	f003 fb26 	bl	8006e84 <HAL_UART_Init>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800383e:	f7ff f93f 	bl	8002ac0 <Error_Handler>
  }

}
 8003842:	bf00      	nop
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	200006a0 	.word	0x200006a0
 800384c:	40004800 	.word	0x40004800

08003850 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8003854:	4b11      	ldr	r3, [pc, #68]	; (800389c <MX_USART6_UART_Init+0x4c>)
 8003856:	4a12      	ldr	r2, [pc, #72]	; (80038a0 <MX_USART6_UART_Init+0x50>)
 8003858:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800385a:	4b10      	ldr	r3, [pc, #64]	; (800389c <MX_USART6_UART_Init+0x4c>)
 800385c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003860:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003862:	4b0e      	ldr	r3, [pc, #56]	; (800389c <MX_USART6_UART_Init+0x4c>)
 8003864:	2200      	movs	r2, #0
 8003866:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003868:	4b0c      	ldr	r3, [pc, #48]	; (800389c <MX_USART6_UART_Init+0x4c>)
 800386a:	2200      	movs	r2, #0
 800386c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800386e:	4b0b      	ldr	r3, [pc, #44]	; (800389c <MX_USART6_UART_Init+0x4c>)
 8003870:	2200      	movs	r2, #0
 8003872:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003874:	4b09      	ldr	r3, [pc, #36]	; (800389c <MX_USART6_UART_Init+0x4c>)
 8003876:	220c      	movs	r2, #12
 8003878:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800387a:	4b08      	ldr	r3, [pc, #32]	; (800389c <MX_USART6_UART_Init+0x4c>)
 800387c:	2200      	movs	r2, #0
 800387e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003880:	4b06      	ldr	r3, [pc, #24]	; (800389c <MX_USART6_UART_Init+0x4c>)
 8003882:	2200      	movs	r2, #0
 8003884:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003886:	4805      	ldr	r0, [pc, #20]	; (800389c <MX_USART6_UART_Init+0x4c>)
 8003888:	f003 fafc 	bl	8006e84 <HAL_UART_Init>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003892:	f7ff f915 	bl	8002ac0 <Error_Handler>
  }

}
 8003896:	bf00      	nop
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	20000760 	.word	0x20000760
 80038a0:	40011400 	.word	0x40011400

080038a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b094      	sub	sp, #80	; 0x50
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	605a      	str	r2, [r3, #4]
 80038b6:	609a      	str	r2, [r3, #8]
 80038b8:	60da      	str	r2, [r3, #12]
 80038ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a99      	ldr	r2, [pc, #612]	; (8003b28 <HAL_UART_MspInit+0x284>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d14b      	bne.n	800395e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80038c6:	2300      	movs	r3, #0
 80038c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80038ca:	4b98      	ldr	r3, [pc, #608]	; (8003b2c <HAL_UART_MspInit+0x288>)
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	4a97      	ldr	r2, [pc, #604]	; (8003b2c <HAL_UART_MspInit+0x288>)
 80038d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038d4:	6413      	str	r3, [r2, #64]	; 0x40
 80038d6:	4b95      	ldr	r3, [pc, #596]	; (8003b2c <HAL_UART_MspInit+0x288>)
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038de:	63bb      	str	r3, [r7, #56]	; 0x38
 80038e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038e2:	2300      	movs	r3, #0
 80038e4:	637b      	str	r3, [r7, #52]	; 0x34
 80038e6:	4b91      	ldr	r3, [pc, #580]	; (8003b2c <HAL_UART_MspInit+0x288>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	4a90      	ldr	r2, [pc, #576]	; (8003b2c <HAL_UART_MspInit+0x288>)
 80038ec:	f043 0304 	orr.w	r3, r3, #4
 80038f0:	6313      	str	r3, [r2, #48]	; 0x30
 80038f2:	4b8e      	ldr	r3, [pc, #568]	; (8003b2c <HAL_UART_MspInit+0x288>)
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	f003 0304 	and.w	r3, r3, #4
 80038fa:	637b      	str	r3, [r7, #52]	; 0x34
 80038fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038fe:	2300      	movs	r3, #0
 8003900:	633b      	str	r3, [r7, #48]	; 0x30
 8003902:	4b8a      	ldr	r3, [pc, #552]	; (8003b2c <HAL_UART_MspInit+0x288>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	4a89      	ldr	r2, [pc, #548]	; (8003b2c <HAL_UART_MspInit+0x288>)
 8003908:	f043 0308 	orr.w	r3, r3, #8
 800390c:	6313      	str	r3, [r2, #48]	; 0x30
 800390e:	4b87      	ldr	r3, [pc, #540]	; (8003b2c <HAL_UART_MspInit+0x288>)
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	633b      	str	r3, [r7, #48]	; 0x30
 8003918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800391a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800391e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003920:	2302      	movs	r3, #2
 8003922:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003924:	2301      	movs	r3, #1
 8003926:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003928:	2303      	movs	r3, #3
 800392a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800392c:	2308      	movs	r3, #8
 800392e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003930:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003934:	4619      	mov	r1, r3
 8003936:	487e      	ldr	r0, [pc, #504]	; (8003b30 <HAL_UART_MspInit+0x28c>)
 8003938:	f001 fce2 	bl	8005300 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800393c:	2304      	movs	r3, #4
 800393e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003940:	2302      	movs	r3, #2
 8003942:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003944:	2301      	movs	r3, #1
 8003946:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003948:	2303      	movs	r3, #3
 800394a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800394c:	2308      	movs	r3, #8
 800394e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003950:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003954:	4619      	mov	r1, r3
 8003956:	4877      	ldr	r0, [pc, #476]	; (8003b34 <HAL_UART_MspInit+0x290>)
 8003958:	f001 fcd2 	bl	8005300 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800395c:	e12b      	b.n	8003bb6 <HAL_UART_MspInit+0x312>
  else if(uartHandle->Instance==USART1)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a75      	ldr	r2, [pc, #468]	; (8003b38 <HAL_UART_MspInit+0x294>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d12c      	bne.n	80039c2 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003968:	2300      	movs	r3, #0
 800396a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800396c:	4b6f      	ldr	r3, [pc, #444]	; (8003b2c <HAL_UART_MspInit+0x288>)
 800396e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003970:	4a6e      	ldr	r2, [pc, #440]	; (8003b2c <HAL_UART_MspInit+0x288>)
 8003972:	f043 0310 	orr.w	r3, r3, #16
 8003976:	6453      	str	r3, [r2, #68]	; 0x44
 8003978:	4b6c      	ldr	r3, [pc, #432]	; (8003b2c <HAL_UART_MspInit+0x288>)
 800397a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397c:	f003 0310 	and.w	r3, r3, #16
 8003980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003984:	2300      	movs	r3, #0
 8003986:	62bb      	str	r3, [r7, #40]	; 0x28
 8003988:	4b68      	ldr	r3, [pc, #416]	; (8003b2c <HAL_UART_MspInit+0x288>)
 800398a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398c:	4a67      	ldr	r2, [pc, #412]	; (8003b2c <HAL_UART_MspInit+0x288>)
 800398e:	f043 0302 	orr.w	r3, r3, #2
 8003992:	6313      	str	r3, [r2, #48]	; 0x30
 8003994:	4b65      	ldr	r3, [pc, #404]	; (8003b2c <HAL_UART_MspInit+0x288>)
 8003996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	62bb      	str	r3, [r7, #40]	; 0x28
 800399e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80039a0:	23c0      	movs	r3, #192	; 0xc0
 80039a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a4:	2302      	movs	r3, #2
 80039a6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a8:	2300      	movs	r3, #0
 80039aa:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ac:	2303      	movs	r3, #3
 80039ae:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039b0:	2307      	movs	r3, #7
 80039b2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80039b8:	4619      	mov	r1, r3
 80039ba:	4860      	ldr	r0, [pc, #384]	; (8003b3c <HAL_UART_MspInit+0x298>)
 80039bc:	f001 fca0 	bl	8005300 <HAL_GPIO_Init>
}
 80039c0:	e0f9      	b.n	8003bb6 <HAL_UART_MspInit+0x312>
  else if(uartHandle->Instance==USART2)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a5e      	ldr	r2, [pc, #376]	; (8003b40 <HAL_UART_MspInit+0x29c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d12c      	bne.n	8003a26 <HAL_UART_MspInit+0x182>
    __HAL_RCC_USART2_CLK_ENABLE();
 80039cc:	2300      	movs	r3, #0
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24
 80039d0:	4b56      	ldr	r3, [pc, #344]	; (8003b2c <HAL_UART_MspInit+0x288>)
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	4a55      	ldr	r2, [pc, #340]	; (8003b2c <HAL_UART_MspInit+0x288>)
 80039d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039da:	6413      	str	r3, [r2, #64]	; 0x40
 80039dc:	4b53      	ldr	r3, [pc, #332]	; (8003b2c <HAL_UART_MspInit+0x288>)
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039e8:	2300      	movs	r3, #0
 80039ea:	623b      	str	r3, [r7, #32]
 80039ec:	4b4f      	ldr	r3, [pc, #316]	; (8003b2c <HAL_UART_MspInit+0x288>)
 80039ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f0:	4a4e      	ldr	r2, [pc, #312]	; (8003b2c <HAL_UART_MspInit+0x288>)
 80039f2:	f043 0301 	orr.w	r3, r3, #1
 80039f6:	6313      	str	r3, [r2, #48]	; 0x30
 80039f8:	4b4c      	ldr	r3, [pc, #304]	; (8003b2c <HAL_UART_MspInit+0x288>)
 80039fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	623b      	str	r3, [r7, #32]
 8003a02:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003a04:	230c      	movs	r3, #12
 8003a06:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a08:	2302      	movs	r3, #2
 8003a0a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a10:	2303      	movs	r3, #3
 8003a12:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a14:	2307      	movs	r3, #7
 8003a16:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a18:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4849      	ldr	r0, [pc, #292]	; (8003b44 <HAL_UART_MspInit+0x2a0>)
 8003a20:	f001 fc6e 	bl	8005300 <HAL_GPIO_Init>
}
 8003a24:	e0c7      	b.n	8003bb6 <HAL_UART_MspInit+0x312>
  else if(uartHandle->Instance==USART3)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a47      	ldr	r2, [pc, #284]	; (8003b48 <HAL_UART_MspInit+0x2a4>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	f040 8091 	bne.w	8003b54 <HAL_UART_MspInit+0x2b0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a32:	2300      	movs	r3, #0
 8003a34:	61fb      	str	r3, [r7, #28]
 8003a36:	4b3d      	ldr	r3, [pc, #244]	; (8003b2c <HAL_UART_MspInit+0x288>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	4a3c      	ldr	r2, [pc, #240]	; (8003b2c <HAL_UART_MspInit+0x288>)
 8003a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a40:	6413      	str	r3, [r2, #64]	; 0x40
 8003a42:	4b3a      	ldr	r3, [pc, #232]	; (8003b2c <HAL_UART_MspInit+0x288>)
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a4a:	61fb      	str	r3, [r7, #28]
 8003a4c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61bb      	str	r3, [r7, #24]
 8003a52:	4b36      	ldr	r3, [pc, #216]	; (8003b2c <HAL_UART_MspInit+0x288>)
 8003a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a56:	4a35      	ldr	r2, [pc, #212]	; (8003b2c <HAL_UART_MspInit+0x288>)
 8003a58:	f043 0304 	orr.w	r3, r3, #4
 8003a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a5e:	4b33      	ldr	r3, [pc, #204]	; (8003b2c <HAL_UART_MspInit+0x288>)
 8003a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	61bb      	str	r3, [r7, #24]
 8003a68:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]
 8003a6e:	4b2f      	ldr	r3, [pc, #188]	; (8003b2c <HAL_UART_MspInit+0x288>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	4a2e      	ldr	r2, [pc, #184]	; (8003b2c <HAL_UART_MspInit+0x288>)
 8003a74:	f043 0302 	orr.w	r3, r3, #2
 8003a78:	6313      	str	r3, [r2, #48]	; 0x30
 8003a7a:	4b2c      	ldr	r3, [pc, #176]	; (8003b2c <HAL_UART_MspInit+0x288>)
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	617b      	str	r3, [r7, #20]
 8003a84:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003a86:	2320      	movs	r3, #32
 8003a88:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a92:	2303      	movs	r3, #3
 8003a94:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a96:	2307      	movs	r3, #7
 8003a98:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a9a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	4823      	ldr	r0, [pc, #140]	; (8003b30 <HAL_UART_MspInit+0x28c>)
 8003aa2:	f001 fc2d 	bl	8005300 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003aa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aac:	2302      	movs	r3, #2
 8003aae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003ab8:	2307      	movs	r3, #7
 8003aba:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003abc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	481e      	ldr	r0, [pc, #120]	; (8003b3c <HAL_UART_MspInit+0x298>)
 8003ac4:	f001 fc1c 	bl	8005300 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003ac8:	4b20      	ldr	r3, [pc, #128]	; (8003b4c <HAL_UART_MspInit+0x2a8>)
 8003aca:	4a21      	ldr	r2, [pc, #132]	; (8003b50 <HAL_UART_MspInit+0x2ac>)
 8003acc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003ace:	4b1f      	ldr	r3, [pc, #124]	; (8003b4c <HAL_UART_MspInit+0x2a8>)
 8003ad0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ad4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ad6:	4b1d      	ldr	r3, [pc, #116]	; (8003b4c <HAL_UART_MspInit+0x2a8>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003adc:	4b1b      	ldr	r3, [pc, #108]	; (8003b4c <HAL_UART_MspInit+0x2a8>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ae2:	4b1a      	ldr	r3, [pc, #104]	; (8003b4c <HAL_UART_MspInit+0x2a8>)
 8003ae4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ae8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003aea:	4b18      	ldr	r3, [pc, #96]	; (8003b4c <HAL_UART_MspInit+0x2a8>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003af0:	4b16      	ldr	r3, [pc, #88]	; (8003b4c <HAL_UART_MspInit+0x2a8>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003af6:	4b15      	ldr	r3, [pc, #84]	; (8003b4c <HAL_UART_MspInit+0x2a8>)
 8003af8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003afc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003afe:	4b13      	ldr	r3, [pc, #76]	; (8003b4c <HAL_UART_MspInit+0x2a8>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b04:	4b11      	ldr	r3, [pc, #68]	; (8003b4c <HAL_UART_MspInit+0x2a8>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003b0a:	4810      	ldr	r0, [pc, #64]	; (8003b4c <HAL_UART_MspInit+0x2a8>)
 8003b0c:	f001 f88a 	bl	8004c24 <HAL_DMA_Init>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <HAL_UART_MspInit+0x276>
      Error_Handler();
 8003b16:	f7fe ffd3 	bl	8002ac0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a0b      	ldr	r2, [pc, #44]	; (8003b4c <HAL_UART_MspInit+0x2a8>)
 8003b1e:	635a      	str	r2, [r3, #52]	; 0x34
 8003b20:	4a0a      	ldr	r2, [pc, #40]	; (8003b4c <HAL_UART_MspInit+0x2a8>)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003b26:	e046      	b.n	8003bb6 <HAL_UART_MspInit+0x312>
 8003b28:	40005000 	.word	0x40005000
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	40020800 	.word	0x40020800
 8003b34:	40020c00 	.word	0x40020c00
 8003b38:	40011000 	.word	0x40011000
 8003b3c:	40020400 	.word	0x40020400
 8003b40:	40004400 	.word	0x40004400
 8003b44:	40020000 	.word	0x40020000
 8003b48:	40004800 	.word	0x40004800
 8003b4c:	20000640 	.word	0x20000640
 8003b50:	40026028 	.word	0x40026028
  else if(uartHandle->Instance==USART6)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a19      	ldr	r2, [pc, #100]	; (8003bc0 <HAL_UART_MspInit+0x31c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d12b      	bne.n	8003bb6 <HAL_UART_MspInit+0x312>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003b5e:	2300      	movs	r3, #0
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	4b18      	ldr	r3, [pc, #96]	; (8003bc4 <HAL_UART_MspInit+0x320>)
 8003b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b66:	4a17      	ldr	r2, [pc, #92]	; (8003bc4 <HAL_UART_MspInit+0x320>)
 8003b68:	f043 0320 	orr.w	r3, r3, #32
 8003b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b6e:	4b15      	ldr	r3, [pc, #84]	; (8003bc4 <HAL_UART_MspInit+0x320>)
 8003b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b72:	f003 0320 	and.w	r3, r3, #32
 8003b76:	613b      	str	r3, [r7, #16]
 8003b78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60fb      	str	r3, [r7, #12]
 8003b7e:	4b11      	ldr	r3, [pc, #68]	; (8003bc4 <HAL_UART_MspInit+0x320>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	4a10      	ldr	r2, [pc, #64]	; (8003bc4 <HAL_UART_MspInit+0x320>)
 8003b84:	f043 0304 	orr.w	r3, r3, #4
 8003b88:	6313      	str	r3, [r2, #48]	; 0x30
 8003b8a:	4b0e      	ldr	r3, [pc, #56]	; (8003bc4 <HAL_UART_MspInit+0x320>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b96:	23c0      	movs	r3, #192	; 0xc0
 8003b98:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003ba6:	2308      	movs	r3, #8
 8003ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003baa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003bae:	4619      	mov	r1, r3
 8003bb0:	4805      	ldr	r0, [pc, #20]	; (8003bc8 <HAL_UART_MspInit+0x324>)
 8003bb2:	f001 fba5 	bl	8005300 <HAL_GPIO_Init>
}
 8003bb6:	bf00      	nop
 8003bb8:	3750      	adds	r7, #80	; 0x50
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40011400 	.word	0x40011400
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	40020800 	.word	0x40020800

08003bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003bd0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003bd2:	e003      	b.n	8003bdc <LoopCopyDataInit>

08003bd4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003bd4:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003bd6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003bd8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003bda:	3104      	adds	r1, #4

08003bdc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003bdc:	480b      	ldr	r0, [pc, #44]	; (8003c0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003bde:	4b0c      	ldr	r3, [pc, #48]	; (8003c10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003be0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003be2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003be4:	d3f6      	bcc.n	8003bd4 <CopyDataInit>
  ldr  r2, =_sbss
 8003be6:	4a0b      	ldr	r2, [pc, #44]	; (8003c14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003be8:	e002      	b.n	8003bf0 <LoopFillZerobss>

08003bea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003bea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003bec:	f842 3b04 	str.w	r3, [r2], #4

08003bf0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003bf0:	4b09      	ldr	r3, [pc, #36]	; (8003c18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003bf2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003bf4:	d3f9      	bcc.n	8003bea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003bf6:	f7ff fa41 	bl	800307c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bfa:	f004 f80d 	bl	8007c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bfe:	f7fd fc61 	bl	80014c4 <main>
  bx  lr    
 8003c02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c04:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003c08:	0800a8c8 	.word	0x0800a8c8
  ldr  r0, =_sdata
 8003c0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003c10:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8003c14:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8003c18:	200007e8 	.word	0x200007e8

08003c1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c1c:	e7fe      	b.n	8003c1c <ADC_IRQHandler>
	...

08003c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c24:	4b0e      	ldr	r3, [pc, #56]	; (8003c60 <HAL_Init+0x40>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a0d      	ldr	r2, [pc, #52]	; (8003c60 <HAL_Init+0x40>)
 8003c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c30:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <HAL_Init+0x40>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a0a      	ldr	r2, [pc, #40]	; (8003c60 <HAL_Init+0x40>)
 8003c36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c3c:	4b08      	ldr	r3, [pc, #32]	; (8003c60 <HAL_Init+0x40>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a07      	ldr	r2, [pc, #28]	; (8003c60 <HAL_Init+0x40>)
 8003c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c48:	2003      	movs	r0, #3
 8003c4a:	f000 ffa9 	bl	8004ba0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c4e:	2000      	movs	r0, #0
 8003c50:	f000 f808 	bl	8003c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c54:	f7ff f8e6 	bl	8002e24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	40023c00 	.word	0x40023c00

08003c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c6c:	4b12      	ldr	r3, [pc, #72]	; (8003cb8 <HAL_InitTick+0x54>)
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	4b12      	ldr	r3, [pc, #72]	; (8003cbc <HAL_InitTick+0x58>)
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	4619      	mov	r1, r3
 8003c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 ffc1 	bl	8004c0a <HAL_SYSTICK_Config>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e00e      	b.n	8003cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b0f      	cmp	r3, #15
 8003c96:	d80a      	bhi.n	8003cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c98:	2200      	movs	r2, #0
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca0:	f000 ff89 	bl	8004bb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ca4:	4a06      	ldr	r2, [pc, #24]	; (8003cc0 <HAL_InitTick+0x5c>)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	e000      	b.n	8003cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	20000000 	.word	0x20000000
 8003cbc:	20000008 	.word	0x20000008
 8003cc0:	20000004 	.word	0x20000004

08003cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cc8:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <HAL_IncTick+0x20>)
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <HAL_IncTick+0x24>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	4a04      	ldr	r2, [pc, #16]	; (8003ce8 <HAL_IncTick+0x24>)
 8003cd6:	6013      	str	r3, [r2, #0]
}
 8003cd8:	bf00      	nop
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	20000008 	.word	0x20000008
 8003ce8:	200007e0 	.word	0x200007e0

08003cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  return uwTick;
 8003cf0:	4b03      	ldr	r3, [pc, #12]	; (8003d00 <HAL_GetTick+0x14>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	200007e0 	.word	0x200007e0

08003d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d0c:	f7ff ffee 	bl	8003cec <HAL_GetTick>
 8003d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1c:	d005      	beq.n	8003d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d1e:	4b09      	ldr	r3, [pc, #36]	; (8003d44 <HAL_Delay+0x40>)
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	461a      	mov	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	4413      	add	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d2a:	bf00      	nop
 8003d2c:	f7ff ffde 	bl	8003cec <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d8f7      	bhi.n	8003d2c <HAL_Delay+0x28>
  {
  }
}
 8003d3c:	bf00      	nop
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	20000008 	.word	0x20000008

08003d48 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e0ed      	b.n	8003f36 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d102      	bne.n	8003d6c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7fd f9f4 	bl	8001154 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0202 	bic.w	r2, r2, #2
 8003d7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d7c:	f7ff ffb6 	bl	8003cec <HAL_GetTick>
 8003d80:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003d82:	e012      	b.n	8003daa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d84:	f7ff ffb2 	bl	8003cec <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b0a      	cmp	r3, #10
 8003d90:	d90b      	bls.n	8003daa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2205      	movs	r2, #5
 8003da2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e0c5      	b.n	8003f36 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1e5      	bne.n	8003d84 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0201 	orr.w	r2, r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dc8:	f7ff ff90 	bl	8003cec <HAL_GetTick>
 8003dcc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003dce:	e012      	b.n	8003df6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003dd0:	f7ff ff8c 	bl	8003cec <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b0a      	cmp	r3, #10
 8003ddc:	d90b      	bls.n	8003df6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2205      	movs	r2, #5
 8003dee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e09f      	b.n	8003f36 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d0e5      	beq.n	8003dd0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	7e1b      	ldrb	r3, [r3, #24]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d108      	bne.n	8003e1e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	e007      	b.n	8003e2e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	7e5b      	ldrb	r3, [r3, #25]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d108      	bne.n	8003e48 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	e007      	b.n	8003e58 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e56:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	7e9b      	ldrb	r3, [r3, #26]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d108      	bne.n	8003e72 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0220 	orr.w	r2, r2, #32
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	e007      	b.n	8003e82 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0220 	bic.w	r2, r2, #32
 8003e80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	7edb      	ldrb	r3, [r3, #27]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d108      	bne.n	8003e9c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0210 	bic.w	r2, r2, #16
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	e007      	b.n	8003eac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0210 	orr.w	r2, r2, #16
 8003eaa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	7f1b      	ldrb	r3, [r3, #28]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d108      	bne.n	8003ec6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0208 	orr.w	r2, r2, #8
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	e007      	b.n	8003ed6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0208 	bic.w	r2, r2, #8
 8003ed4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	7f5b      	ldrb	r3, [r3, #29]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d108      	bne.n	8003ef0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0204 	orr.w	r2, r2, #4
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	e007      	b.n	8003f00 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0204 	bic.w	r2, r2, #4
 8003efe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	ea42 0103 	orr.w	r1, r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	1e5a      	subs	r2, r3, #1
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
	...

08003f40 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f56:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003f58:	7cfb      	ldrb	r3, [r7, #19]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d003      	beq.n	8003f66 <HAL_CAN_ConfigFilter+0x26>
 8003f5e:	7cfb      	ldrb	r3, [r7, #19]
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	f040 80be 	bne.w	80040e2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003f66:	4b65      	ldr	r3, [pc, #404]	; (80040fc <HAL_CAN_ConfigFilter+0x1bc>)
 8003f68:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f70:	f043 0201 	orr.w	r2, r3, #1
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f80:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	021b      	lsls	r3, r3, #8
 8003f96:	431a      	orrs	r2, r3
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	f003 031f 	and.w	r3, r3, #31
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	401a      	ands	r2, r3
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	69db      	ldr	r3, [r3, #28]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d123      	bne.n	8004010 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	43db      	mvns	r3, r3
 8003fd2:	401a      	ands	r2, r3
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003fea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	3248      	adds	r2, #72	; 0x48
 8003ff0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004004:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004006:	6979      	ldr	r1, [r7, #20]
 8004008:	3348      	adds	r3, #72	; 0x48
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	440b      	add	r3, r1
 800400e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d122      	bne.n	800405e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	431a      	orrs	r2, r3
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004038:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	3248      	adds	r2, #72	; 0x48
 800403e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004052:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004054:	6979      	ldr	r1, [r7, #20]
 8004056:	3348      	adds	r3, #72	; 0x48
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	440b      	add	r3, r1
 800405c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d109      	bne.n	800407a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	43db      	mvns	r3, r3
 8004070:	401a      	ands	r2, r3
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004078:	e007      	b.n	800408a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	431a      	orrs	r2, r3
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d109      	bne.n	80040a6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	43db      	mvns	r3, r3
 800409c:	401a      	ands	r2, r3
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80040a4:	e007      	b.n	80040b6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	431a      	orrs	r2, r3
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d107      	bne.n	80040ce <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80040d4:	f023 0201 	bic.w	r2, r3, #1
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	e006      	b.n	80040f0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
  }
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	371c      	adds	r7, #28
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	40006400 	.word	0x40006400

08004100 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b01      	cmp	r3, #1
 8004112:	d12e      	bne.n	8004172 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0201 	bic.w	r2, r2, #1
 800412a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800412c:	f7ff fdde 	bl	8003cec <HAL_GetTick>
 8004130:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004132:	e012      	b.n	800415a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004134:	f7ff fdda 	bl	8003cec <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b0a      	cmp	r3, #10
 8004140:	d90b      	bls.n	800415a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2205      	movs	r2, #5
 8004152:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e012      	b.n	8004180 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1e5      	bne.n	8004134 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	e006      	b.n	8004180 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
  }
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004188:	b480      	push	{r7}
 800418a:	b089      	sub	sp, #36	; 0x24
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
 8004194:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f893 3020 	ldrb.w	r3, [r3, #32]
 800419c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80041a6:	7ffb      	ldrb	r3, [r7, #31]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d003      	beq.n	80041b4 <HAL_CAN_AddTxMessage+0x2c>
 80041ac:	7ffb      	ldrb	r3, [r7, #31]
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	f040 80b8 	bne.w	8004324 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10a      	bne.n	80041d4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d105      	bne.n	80041d4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 80a0 	beq.w	8004314 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	0e1b      	lsrs	r3, r3, #24
 80041d8:	f003 0303 	and.w	r3, r3, #3
 80041dc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d907      	bls.n	80041f4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e09e      	b.n	8004332 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80041f4:	2201      	movs	r2, #1
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	409a      	lsls	r2, r3
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10d      	bne.n	8004222 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004210:	68f9      	ldr	r1, [r7, #12]
 8004212:	6809      	ldr	r1, [r1, #0]
 8004214:	431a      	orrs	r2, r3
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	3318      	adds	r3, #24
 800421a:	011b      	lsls	r3, r3, #4
 800421c:	440b      	add	r3, r1
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	e00f      	b.n	8004242 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800422c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004232:	68f9      	ldr	r1, [r7, #12]
 8004234:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004236:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	3318      	adds	r3, #24
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	440b      	add	r3, r1
 8004240:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6819      	ldr	r1, [r3, #0]
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	691a      	ldr	r2, [r3, #16]
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	3318      	adds	r3, #24
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	440b      	add	r3, r1
 8004252:	3304      	adds	r3, #4
 8004254:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	7d1b      	ldrb	r3, [r3, #20]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d111      	bne.n	8004282 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	3318      	adds	r3, #24
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	4413      	add	r3, r2
 800426a:	3304      	adds	r3, #4
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	6811      	ldr	r1, [r2, #0]
 8004272:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	3318      	adds	r3, #24
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	440b      	add	r3, r1
 800427e:	3304      	adds	r3, #4
 8004280:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3307      	adds	r3, #7
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	061a      	lsls	r2, r3, #24
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	3306      	adds	r3, #6
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	041b      	lsls	r3, r3, #16
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3305      	adds	r3, #5
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	021b      	lsls	r3, r3, #8
 800429c:	4313      	orrs	r3, r2
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	3204      	adds	r2, #4
 80042a2:	7812      	ldrb	r2, [r2, #0]
 80042a4:	4610      	mov	r0, r2
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	6811      	ldr	r1, [r2, #0]
 80042aa:	ea43 0200 	orr.w	r2, r3, r0
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	440b      	add	r3, r1
 80042b4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80042b8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	3303      	adds	r3, #3
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	061a      	lsls	r2, r3, #24
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	3302      	adds	r3, #2
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	041b      	lsls	r3, r3, #16
 80042ca:	431a      	orrs	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3301      	adds	r3, #1
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	021b      	lsls	r3, r3, #8
 80042d4:	4313      	orrs	r3, r2
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	7812      	ldrb	r2, [r2, #0]
 80042da:	4610      	mov	r0, r2
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	6811      	ldr	r1, [r2, #0]
 80042e0:	ea43 0200 	orr.w	r2, r3, r0
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	440b      	add	r3, r1
 80042ea:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80042ee:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	3318      	adds	r3, #24
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	4413      	add	r3, r2
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	6811      	ldr	r1, [r2, #0]
 8004302:	f043 0201 	orr.w	r2, r3, #1
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	3318      	adds	r3, #24
 800430a:	011b      	lsls	r3, r3, #4
 800430c:	440b      	add	r3, r1
 800430e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004310:	2300      	movs	r3, #0
 8004312:	e00e      	b.n	8004332 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e006      	b.n	8004332 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
  }
}
 8004332:	4618      	mov	r0, r3
 8004334:	3724      	adds	r7, #36	; 0x24
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800433e:	b480      	push	{r7}
 8004340:	b087      	sub	sp, #28
 8004342:	af00      	add	r7, sp, #0
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	60b9      	str	r1, [r7, #8]
 8004348:	607a      	str	r2, [r7, #4]
 800434a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004352:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004354:	7dfb      	ldrb	r3, [r7, #23]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d003      	beq.n	8004362 <HAL_CAN_GetRxMessage+0x24>
 800435a:	7dfb      	ldrb	r3, [r7, #23]
 800435c:	2b02      	cmp	r3, #2
 800435e:	f040 80f3 	bne.w	8004548 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10e      	bne.n	8004386 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f003 0303 	and.w	r3, r3, #3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d116      	bne.n	80043a4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e0e7      	b.n	8004556 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	f003 0303 	and.w	r3, r3, #3
 8004390:	2b00      	cmp	r3, #0
 8004392:	d107      	bne.n	80043a4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e0d8      	b.n	8004556 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	331b      	adds	r3, #27
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	4413      	add	r3, r2
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0204 	and.w	r2, r3, #4
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10c      	bne.n	80043dc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	331b      	adds	r3, #27
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	4413      	add	r3, r2
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	0d5b      	lsrs	r3, r3, #21
 80043d2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	e00b      	b.n	80043f4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	331b      	adds	r3, #27
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	4413      	add	r3, r2
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	08db      	lsrs	r3, r3, #3
 80043ec:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	331b      	adds	r3, #27
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	4413      	add	r3, r2
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0202 	and.w	r2, r3, #2
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	331b      	adds	r3, #27
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	4413      	add	r3, r2
 8004416:	3304      	adds	r3, #4
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 020f 	and.w	r2, r3, #15
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	331b      	adds	r3, #27
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	4413      	add	r3, r2
 800442e:	3304      	adds	r3, #4
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	0a1b      	lsrs	r3, r3, #8
 8004434:	b2da      	uxtb	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	331b      	adds	r3, #27
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	4413      	add	r3, r2
 8004446:	3304      	adds	r3, #4
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	0c1b      	lsrs	r3, r3, #16
 800444c:	b29a      	uxth	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	4413      	add	r3, r2
 800445c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	b2da      	uxtb	r2, r3
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	4413      	add	r3, r2
 8004472:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	0a1a      	lsrs	r2, r3, #8
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	3301      	adds	r3, #1
 800447e:	b2d2      	uxtb	r2, r2
 8004480:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	4413      	add	r3, r2
 800448c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	0c1a      	lsrs	r2, r3, #16
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	3302      	adds	r3, #2
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	0e1a      	lsrs	r2, r3, #24
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	3303      	adds	r3, #3
 80044b2:	b2d2      	uxtb	r2, r2
 80044b4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	4413      	add	r3, r2
 80044c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	3304      	adds	r3, #4
 80044ca:	b2d2      	uxtb	r2, r2
 80044cc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	011b      	lsls	r3, r3, #4
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	0a1a      	lsrs	r2, r3, #8
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	3305      	adds	r3, #5
 80044e4:	b2d2      	uxtb	r2, r2
 80044e6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	0c1a      	lsrs	r2, r3, #16
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	3306      	adds	r3, #6
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	011b      	lsls	r3, r3, #4
 800450a:	4413      	add	r3, r2
 800450c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	0e1a      	lsrs	r2, r3, #24
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	3307      	adds	r3, #7
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d108      	bne.n	8004534 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f042 0220 	orr.w	r2, r2, #32
 8004530:	60da      	str	r2, [r3, #12]
 8004532:	e007      	b.n	8004544 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	691a      	ldr	r2, [r3, #16]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0220 	orr.w	r2, r2, #32
 8004542:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004544:	2300      	movs	r3, #0
 8004546:	e006      	b.n	8004556 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
  }
}
 8004556:	4618      	mov	r0, r3
 8004558:	371c      	adds	r7, #28
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004562:	b480      	push	{r7}
 8004564:	b085      	sub	sp, #20
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
 800456a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004572:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004574:	7bfb      	ldrb	r3, [r7, #15]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d002      	beq.n	8004580 <HAL_CAN_ActivateNotification+0x1e>
 800457a:	7bfb      	ldrb	r3, [r7, #15]
 800457c:	2b02      	cmp	r3, #2
 800457e:	d109      	bne.n	8004594 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6959      	ldr	r1, [r3, #20]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004590:	2300      	movs	r3, #0
 8004592:	e006      	b.n	80045a2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
  }
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b08a      	sub	sp, #40	; 0x28
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80045b6:	2300      	movs	r3, #0
 80045b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d07c      	beq.n	80046ee <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d023      	beq.n	8004646 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2201      	movs	r2, #1
 8004604:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d003      	beq.n	8004618 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f97d 	bl	8004910 <HAL_CAN_TxMailbox0CompleteCallback>
 8004616:	e016      	b.n	8004646 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	f003 0304 	and.w	r3, r3, #4
 800461e:	2b00      	cmp	r3, #0
 8004620:	d004      	beq.n	800462c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
 800462a:	e00c      	b.n	8004646 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	2b00      	cmp	r3, #0
 8004634:	d004      	beq.n	8004640 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
 800463e:	e002      	b.n	8004646 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f983 	bl	800494c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464c:	2b00      	cmp	r3, #0
 800464e:	d024      	beq.n	800469a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004658:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f95d 	bl	8004924 <HAL_CAN_TxMailbox1CompleteCallback>
 800466a:	e016      	b.n	800469a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004672:	2b00      	cmp	r3, #0
 8004674:	d004      	beq.n	8004680 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800467c:	627b      	str	r3, [r7, #36]	; 0x24
 800467e:	e00c      	b.n	800469a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004686:	2b00      	cmp	r3, #0
 8004688:	d004      	beq.n	8004694 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004690:	627b      	str	r3, [r7, #36]	; 0x24
 8004692:	e002      	b.n	800469a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f963 	bl	8004960 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d024      	beq.n	80046ee <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80046ac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d003      	beq.n	80046c0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f93d 	bl	8004938 <HAL_CAN_TxMailbox2CompleteCallback>
 80046be:	e016      	b.n	80046ee <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d004      	beq.n	80046d4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24
 80046d2:	e00c      	b.n	80046ee <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d004      	beq.n	80046e8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e4:	627b      	str	r3, [r7, #36]	; 0x24
 80046e6:	e002      	b.n	80046ee <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f943 	bl	8004974 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	f003 0308 	and.w	r3, r3, #8
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00c      	beq.n	8004712 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f003 0310 	and.w	r3, r3, #16
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d007      	beq.n	8004712 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004708:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2210      	movs	r2, #16
 8004710:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004712:	6a3b      	ldr	r3, [r7, #32]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00b      	beq.n	8004734 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f003 0308 	and.w	r3, r3, #8
 8004722:	2b00      	cmp	r3, #0
 8004724:	d006      	beq.n	8004734 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2208      	movs	r2, #8
 800472c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f92a 	bl	8004988 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004734:	6a3b      	ldr	r3, [r7, #32]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d009      	beq.n	8004752 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f003 0303 	and.w	r3, r3, #3
 8004748:	2b00      	cmp	r3, #0
 800474a:	d002      	beq.n	8004752 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f7fd f97b 	bl	8001a48 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00c      	beq.n	8004776 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	f003 0310 	and.w	r3, r3, #16
 8004762:	2b00      	cmp	r3, #0
 8004764:	d007      	beq.n	8004776 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800476c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2210      	movs	r2, #16
 8004774:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004776:	6a3b      	ldr	r3, [r7, #32]
 8004778:	f003 0320 	and.w	r3, r3, #32
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00b      	beq.n	8004798 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	2b00      	cmp	r3, #0
 8004788:	d006      	beq.n	8004798 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2208      	movs	r2, #8
 8004790:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f90c 	bl	80049b0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	f003 0310 	and.w	r3, r3, #16
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d009      	beq.n	80047b6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	f003 0303 	and.w	r3, r3, #3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f8f3 	bl	800499c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00b      	beq.n	80047d8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	f003 0310 	and.w	r3, r3, #16
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d006      	beq.n	80047d8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2210      	movs	r2, #16
 80047d0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f8f6 	bl	80049c4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00b      	beq.n	80047fa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	f003 0308 	and.w	r3, r3, #8
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d006      	beq.n	80047fa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2208      	movs	r2, #8
 80047f2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f8ef 	bl	80049d8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d075      	beq.n	80048f0 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	f003 0304 	and.w	r3, r3, #4
 800480a:	2b00      	cmp	r3, #0
 800480c:	d06c      	beq.n	80048e8 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004814:	2b00      	cmp	r3, #0
 8004816:	d008      	beq.n	800482a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	f043 0301 	orr.w	r3, r3, #1
 8004828:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004830:	2b00      	cmp	r3, #0
 8004832:	d008      	beq.n	8004846 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004840:	f043 0302 	orr.w	r3, r3, #2
 8004844:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800484c:	2b00      	cmp	r3, #0
 800484e:	d008      	beq.n	8004862 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	f043 0304 	orr.w	r3, r3, #4
 8004860:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004868:	2b00      	cmp	r3, #0
 800486a:	d03d      	beq.n	80048e8 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004872:	2b00      	cmp	r3, #0
 8004874:	d038      	beq.n	80048e8 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800487c:	2b30      	cmp	r3, #48	; 0x30
 800487e:	d017      	beq.n	80048b0 <HAL_CAN_IRQHandler+0x302>
 8004880:	2b30      	cmp	r3, #48	; 0x30
 8004882:	d804      	bhi.n	800488e <HAL_CAN_IRQHandler+0x2e0>
 8004884:	2b10      	cmp	r3, #16
 8004886:	d009      	beq.n	800489c <HAL_CAN_IRQHandler+0x2ee>
 8004888:	2b20      	cmp	r3, #32
 800488a:	d00c      	beq.n	80048a6 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800488c:	e024      	b.n	80048d8 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800488e:	2b50      	cmp	r3, #80	; 0x50
 8004890:	d018      	beq.n	80048c4 <HAL_CAN_IRQHandler+0x316>
 8004892:	2b60      	cmp	r3, #96	; 0x60
 8004894:	d01b      	beq.n	80048ce <HAL_CAN_IRQHandler+0x320>
 8004896:	2b40      	cmp	r3, #64	; 0x40
 8004898:	d00f      	beq.n	80048ba <HAL_CAN_IRQHandler+0x30c>
            break;
 800489a:	e01d      	b.n	80048d8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	f043 0308 	orr.w	r3, r3, #8
 80048a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80048a4:	e018      	b.n	80048d8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	f043 0310 	orr.w	r3, r3, #16
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80048ae:	e013      	b.n	80048d8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	f043 0320 	orr.w	r3, r3, #32
 80048b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80048b8:	e00e      	b.n	80048d8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80048c2:	e009      	b.n	80048d8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80048cc:	e004      	b.n	80048d8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80048d6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699a      	ldr	r2, [r3, #24]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80048e6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2204      	movs	r2, #4
 80048ee:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d008      	beq.n	8004908 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	431a      	orrs	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f872 	bl	80049ec <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004908:	bf00      	nop
 800490a:	3728      	adds	r7, #40	; 0x28
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f003 0307 	and.w	r3, r3, #7
 8004a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a10:	4b0c      	ldr	r3, [pc, #48]	; (8004a44 <__NVIC_SetPriorityGrouping+0x44>)
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a32:	4a04      	ldr	r2, [pc, #16]	; (8004a44 <__NVIC_SetPriorityGrouping+0x44>)
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	60d3      	str	r3, [r2, #12]
}
 8004a38:	bf00      	nop
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	e000ed00 	.word	0xe000ed00

08004a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a4c:	4b04      	ldr	r3, [pc, #16]	; (8004a60 <__NVIC_GetPriorityGrouping+0x18>)
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	0a1b      	lsrs	r3, r3, #8
 8004a52:	f003 0307 	and.w	r3, r3, #7
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	e000ed00 	.word	0xe000ed00

08004a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	db0b      	blt.n	8004a8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a76:	79fb      	ldrb	r3, [r7, #7]
 8004a78:	f003 021f 	and.w	r2, r3, #31
 8004a7c:	4907      	ldr	r1, [pc, #28]	; (8004a9c <__NVIC_EnableIRQ+0x38>)
 8004a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a82:	095b      	lsrs	r3, r3, #5
 8004a84:	2001      	movs	r0, #1
 8004a86:	fa00 f202 	lsl.w	r2, r0, r2
 8004a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	e000e100 	.word	0xe000e100

08004aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	6039      	str	r1, [r7, #0]
 8004aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	db0a      	blt.n	8004aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	490c      	ldr	r1, [pc, #48]	; (8004aec <__NVIC_SetPriority+0x4c>)
 8004aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004abe:	0112      	lsls	r2, r2, #4
 8004ac0:	b2d2      	uxtb	r2, r2
 8004ac2:	440b      	add	r3, r1
 8004ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ac8:	e00a      	b.n	8004ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	4908      	ldr	r1, [pc, #32]	; (8004af0 <__NVIC_SetPriority+0x50>)
 8004ad0:	79fb      	ldrb	r3, [r7, #7]
 8004ad2:	f003 030f 	and.w	r3, r3, #15
 8004ad6:	3b04      	subs	r3, #4
 8004ad8:	0112      	lsls	r2, r2, #4
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	440b      	add	r3, r1
 8004ade:	761a      	strb	r2, [r3, #24]
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	e000e100 	.word	0xe000e100
 8004af0:	e000ed00 	.word	0xe000ed00

08004af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b089      	sub	sp, #36	; 0x24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	f1c3 0307 	rsb	r3, r3, #7
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	bf28      	it	cs
 8004b12:	2304      	movcs	r3, #4
 8004b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	3304      	adds	r3, #4
 8004b1a:	2b06      	cmp	r3, #6
 8004b1c:	d902      	bls.n	8004b24 <NVIC_EncodePriority+0x30>
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	3b03      	subs	r3, #3
 8004b22:	e000      	b.n	8004b26 <NVIC_EncodePriority+0x32>
 8004b24:	2300      	movs	r3, #0
 8004b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b28:	f04f 32ff 	mov.w	r2, #4294967295
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b32:	43da      	mvns	r2, r3
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	401a      	ands	r2, r3
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	fa01 f303 	lsl.w	r3, r1, r3
 8004b46:	43d9      	mvns	r1, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b4c:	4313      	orrs	r3, r2
         );
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3724      	adds	r7, #36	; 0x24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
	...

08004b5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b6c:	d301      	bcc.n	8004b72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e00f      	b.n	8004b92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b72:	4a0a      	ldr	r2, [pc, #40]	; (8004b9c <SysTick_Config+0x40>)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	3b01      	subs	r3, #1
 8004b78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b7a:	210f      	movs	r1, #15
 8004b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b80:	f7ff ff8e 	bl	8004aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b84:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <SysTick_Config+0x40>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b8a:	4b04      	ldr	r3, [pc, #16]	; (8004b9c <SysTick_Config+0x40>)
 8004b8c:	2207      	movs	r2, #7
 8004b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	e000e010 	.word	0xe000e010

08004ba0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7ff ff29 	bl	8004a00 <__NVIC_SetPriorityGrouping>
}
 8004bae:	bf00      	nop
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b086      	sub	sp, #24
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	60b9      	str	r1, [r7, #8]
 8004bc0:	607a      	str	r2, [r7, #4]
 8004bc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004bc8:	f7ff ff3e 	bl	8004a48 <__NVIC_GetPriorityGrouping>
 8004bcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	68b9      	ldr	r1, [r7, #8]
 8004bd2:	6978      	ldr	r0, [r7, #20]
 8004bd4:	f7ff ff8e 	bl	8004af4 <NVIC_EncodePriority>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bde:	4611      	mov	r1, r2
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7ff ff5d 	bl	8004aa0 <__NVIC_SetPriority>
}
 8004be6:	bf00      	nop
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b082      	sub	sp, #8
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff ff31 	bl	8004a64 <__NVIC_EnableIRQ>
}
 8004c02:	bf00      	nop
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b082      	sub	sp, #8
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7ff ffa2 	bl	8004b5c <SysTick_Config>
 8004c18:	4603      	mov	r3, r0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
	...

08004c24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004c30:	f7ff f85c 	bl	8003cec <HAL_GetTick>
 8004c34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e099      	b.n	8004d74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0201 	bic.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c60:	e00f      	b.n	8004c82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c62:	f7ff f843 	bl	8003cec <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b05      	cmp	r3, #5
 8004c6e:	d908      	bls.n	8004c82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2220      	movs	r2, #32
 8004c74:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2203      	movs	r2, #3
 8004c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e078      	b.n	8004d74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1e8      	bne.n	8004c62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	4b38      	ldr	r3, [pc, #224]	; (8004d7c <HAL_DMA_Init+0x158>)
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	2b04      	cmp	r3, #4
 8004cda:	d107      	bne.n	8004cec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f023 0307 	bic.w	r3, r3, #7
 8004d02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d117      	bne.n	8004d46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00e      	beq.n	8004d46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 fa6f 	bl	800520c <DMA_CheckFifoParam>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d008      	beq.n	8004d46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2240      	movs	r2, #64	; 0x40
 8004d38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004d42:	2301      	movs	r3, #1
 8004d44:	e016      	b.n	8004d74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 fa26 	bl	80051a0 <DMA_CalcBaseAndBitshift>
 8004d54:	4603      	mov	r3, r0
 8004d56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d5c:	223f      	movs	r2, #63	; 0x3f
 8004d5e:	409a      	lsls	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3718      	adds	r7, #24
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	f010803f 	.word	0xf010803f

08004d80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
 8004d8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d96:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d101      	bne.n	8004da6 <HAL_DMA_Start_IT+0x26>
 8004da2:	2302      	movs	r3, #2
 8004da4:	e040      	b.n	8004e28 <HAL_DMA_Start_IT+0xa8>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d12f      	bne.n	8004e1a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2202      	movs	r2, #2
 8004dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	68b9      	ldr	r1, [r7, #8]
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f000 f9b8 	bl	8005144 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd8:	223f      	movs	r2, #63	; 0x3f
 8004dda:	409a      	lsls	r2, r3
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0216 	orr.w	r2, r2, #22
 8004dee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d007      	beq.n	8004e08 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f042 0208 	orr.w	r2, r2, #8
 8004e06:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f042 0201 	orr.w	r2, r2, #1
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	e005      	b.n	8004e26 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004e22:	2302      	movs	r3, #2
 8004e24:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3718      	adds	r7, #24
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e3c:	4b92      	ldr	r3, [pc, #584]	; (8005088 <HAL_DMA_IRQHandler+0x258>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a92      	ldr	r2, [pc, #584]	; (800508c <HAL_DMA_IRQHandler+0x25c>)
 8004e42:	fba2 2303 	umull	r2, r3, r2, r3
 8004e46:	0a9b      	lsrs	r3, r3, #10
 8004e48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e5a:	2208      	movs	r2, #8
 8004e5c:	409a      	lsls	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4013      	ands	r3, r2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d01a      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0304 	and.w	r3, r3, #4
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d013      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f022 0204 	bic.w	r2, r2, #4
 8004e82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e88:	2208      	movs	r2, #8
 8004e8a:	409a      	lsls	r2, r3
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e94:	f043 0201 	orr.w	r2, r3, #1
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	409a      	lsls	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d012      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00b      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	409a      	lsls	r2, r3
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eca:	f043 0202 	orr.w	r2, r3, #2
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed6:	2204      	movs	r2, #4
 8004ed8:	409a      	lsls	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	4013      	ands	r3, r2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d012      	beq.n	8004f08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00b      	beq.n	8004f08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef4:	2204      	movs	r2, #4
 8004ef6:	409a      	lsls	r2, r3
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f00:	f043 0204 	orr.w	r2, r3, #4
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f0c:	2210      	movs	r2, #16
 8004f0e:	409a      	lsls	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4013      	ands	r3, r2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d043      	beq.n	8004fa0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0308 	and.w	r3, r3, #8
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d03c      	beq.n	8004fa0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f2a:	2210      	movs	r2, #16
 8004f2c:	409a      	lsls	r2, r3
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d018      	beq.n	8004f72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d108      	bne.n	8004f60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d024      	beq.n	8004fa0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	4798      	blx	r3
 8004f5e:	e01f      	b.n	8004fa0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d01b      	beq.n	8004fa0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	4798      	blx	r3
 8004f70:	e016      	b.n	8004fa0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d107      	bne.n	8004f90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0208 	bic.w	r2, r2, #8
 8004f8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d003      	beq.n	8004fa0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	409a      	lsls	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4013      	ands	r3, r2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 808e 	beq.w	80050ce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0310 	and.w	r3, r3, #16
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 8086 	beq.w	80050ce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	409a      	lsls	r2, r3
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b05      	cmp	r3, #5
 8004fd8:	d136      	bne.n	8005048 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 0216 	bic.w	r2, r2, #22
 8004fe8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	695a      	ldr	r2, [r3, #20]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ff8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d103      	bne.n	800500a <HAL_DMA_IRQHandler+0x1da>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005006:	2b00      	cmp	r3, #0
 8005008:	d007      	beq.n	800501a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f022 0208 	bic.w	r2, r2, #8
 8005018:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800501e:	223f      	movs	r2, #63	; 0x3f
 8005020:	409a      	lsls	r2, r3
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800503a:	2b00      	cmp	r3, #0
 800503c:	d07d      	beq.n	800513a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	4798      	blx	r3
        }
        return;
 8005046:	e078      	b.n	800513a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d01c      	beq.n	8005090 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d108      	bne.n	8005076 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005068:	2b00      	cmp	r3, #0
 800506a:	d030      	beq.n	80050ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	4798      	blx	r3
 8005074:	e02b      	b.n	80050ce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507a:	2b00      	cmp	r3, #0
 800507c:	d027      	beq.n	80050ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	4798      	blx	r3
 8005086:	e022      	b.n	80050ce <HAL_DMA_IRQHandler+0x29e>
 8005088:	20000000 	.word	0x20000000
 800508c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10f      	bne.n	80050be <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0210 	bic.w	r2, r2, #16
 80050ac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d032      	beq.n	800513c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d022      	beq.n	8005128 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2205      	movs	r2, #5
 80050e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 0201 	bic.w	r2, r2, #1
 80050f8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	3301      	adds	r3, #1
 80050fe:	60bb      	str	r3, [r7, #8]
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	429a      	cmp	r2, r3
 8005104:	d307      	bcc.n	8005116 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1f2      	bne.n	80050fa <HAL_DMA_IRQHandler+0x2ca>
 8005114:	e000      	b.n	8005118 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005116:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800512c:	2b00      	cmp	r3, #0
 800512e:	d005      	beq.n	800513c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	4798      	blx	r3
 8005138:	e000      	b.n	800513c <HAL_DMA_IRQHandler+0x30c>
        return;
 800513a:	bf00      	nop
    }
  }
}
 800513c:	3718      	adds	r7, #24
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop

08005144 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
 8005150:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005160:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	2b40      	cmp	r3, #64	; 0x40
 8005170:	d108      	bne.n	8005184 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005182:	e007      	b.n	8005194 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	60da      	str	r2, [r3, #12]
}
 8005194:	bf00      	nop
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	3b10      	subs	r3, #16
 80051b0:	4a14      	ldr	r2, [pc, #80]	; (8005204 <DMA_CalcBaseAndBitshift+0x64>)
 80051b2:	fba2 2303 	umull	r2, r3, r2, r3
 80051b6:	091b      	lsrs	r3, r3, #4
 80051b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80051ba:	4a13      	ldr	r2, [pc, #76]	; (8005208 <DMA_CalcBaseAndBitshift+0x68>)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4413      	add	r3, r2
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	461a      	mov	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2b03      	cmp	r3, #3
 80051cc:	d909      	bls.n	80051e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80051d6:	f023 0303 	bic.w	r3, r3, #3
 80051da:	1d1a      	adds	r2, r3, #4
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	659a      	str	r2, [r3, #88]	; 0x58
 80051e0:	e007      	b.n	80051f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80051ea:	f023 0303 	bic.w	r3, r3, #3
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	aaaaaaab 	.word	0xaaaaaaab
 8005208:	0800a5f0 	.word	0x0800a5f0

0800520c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005214:	2300      	movs	r3, #0
 8005216:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d11f      	bne.n	8005266 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	2b03      	cmp	r3, #3
 800522a:	d855      	bhi.n	80052d8 <DMA_CheckFifoParam+0xcc>
 800522c:	a201      	add	r2, pc, #4	; (adr r2, 8005234 <DMA_CheckFifoParam+0x28>)
 800522e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005232:	bf00      	nop
 8005234:	08005245 	.word	0x08005245
 8005238:	08005257 	.word	0x08005257
 800523c:	08005245 	.word	0x08005245
 8005240:	080052d9 	.word	0x080052d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005248:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d045      	beq.n	80052dc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005254:	e042      	b.n	80052dc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800525e:	d13f      	bne.n	80052e0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005264:	e03c      	b.n	80052e0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800526e:	d121      	bne.n	80052b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	2b03      	cmp	r3, #3
 8005274:	d836      	bhi.n	80052e4 <DMA_CheckFifoParam+0xd8>
 8005276:	a201      	add	r2, pc, #4	; (adr r2, 800527c <DMA_CheckFifoParam+0x70>)
 8005278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527c:	0800528d 	.word	0x0800528d
 8005280:	08005293 	.word	0x08005293
 8005284:	0800528d 	.word	0x0800528d
 8005288:	080052a5 	.word	0x080052a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	73fb      	strb	r3, [r7, #15]
      break;
 8005290:	e02f      	b.n	80052f2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005296:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d024      	beq.n	80052e8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052a2:	e021      	b.n	80052e8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80052ac:	d11e      	bne.n	80052ec <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80052b2:	e01b      	b.n	80052ec <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d902      	bls.n	80052c0 <DMA_CheckFifoParam+0xb4>
 80052ba:	2b03      	cmp	r3, #3
 80052bc:	d003      	beq.n	80052c6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80052be:	e018      	b.n	80052f2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	73fb      	strb	r3, [r7, #15]
      break;
 80052c4:	e015      	b.n	80052f2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00e      	beq.n	80052f0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	73fb      	strb	r3, [r7, #15]
      break;
 80052d6:	e00b      	b.n	80052f0 <DMA_CheckFifoParam+0xe4>
      break;
 80052d8:	bf00      	nop
 80052da:	e00a      	b.n	80052f2 <DMA_CheckFifoParam+0xe6>
      break;
 80052dc:	bf00      	nop
 80052de:	e008      	b.n	80052f2 <DMA_CheckFifoParam+0xe6>
      break;
 80052e0:	bf00      	nop
 80052e2:	e006      	b.n	80052f2 <DMA_CheckFifoParam+0xe6>
      break;
 80052e4:	bf00      	nop
 80052e6:	e004      	b.n	80052f2 <DMA_CheckFifoParam+0xe6>
      break;
 80052e8:	bf00      	nop
 80052ea:	e002      	b.n	80052f2 <DMA_CheckFifoParam+0xe6>
      break;   
 80052ec:	bf00      	nop
 80052ee:	e000      	b.n	80052f2 <DMA_CheckFifoParam+0xe6>
      break;
 80052f0:	bf00      	nop
    }
  } 
  
  return status; 
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005300:	b480      	push	{r7}
 8005302:	b089      	sub	sp, #36	; 0x24
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800530a:	2300      	movs	r3, #0
 800530c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800530e:	2300      	movs	r3, #0
 8005310:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005312:	2300      	movs	r3, #0
 8005314:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005316:	2300      	movs	r3, #0
 8005318:	61fb      	str	r3, [r7, #28]
 800531a:	e165      	b.n	80055e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800531c:	2201      	movs	r2, #1
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	fa02 f303 	lsl.w	r3, r2, r3
 8005324:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	4013      	ands	r3, r2
 800532e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	429a      	cmp	r2, r3
 8005336:	f040 8154 	bne.w	80055e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d00b      	beq.n	800535a <HAL_GPIO_Init+0x5a>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	2b02      	cmp	r3, #2
 8005348:	d007      	beq.n	800535a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800534e:	2b11      	cmp	r3, #17
 8005350:	d003      	beq.n	800535a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2b12      	cmp	r3, #18
 8005358:	d130      	bne.n	80053bc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	005b      	lsls	r3, r3, #1
 8005364:	2203      	movs	r2, #3
 8005366:	fa02 f303 	lsl.w	r3, r2, r3
 800536a:	43db      	mvns	r3, r3
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	4013      	ands	r3, r2
 8005370:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	68da      	ldr	r2, [r3, #12]
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	fa02 f303 	lsl.w	r3, r2, r3
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	4313      	orrs	r3, r2
 8005382:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	69ba      	ldr	r2, [r7, #24]
 8005388:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005390:	2201      	movs	r2, #1
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	fa02 f303 	lsl.w	r3, r2, r3
 8005398:	43db      	mvns	r3, r3
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	4013      	ands	r3, r2
 800539e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	091b      	lsrs	r3, r3, #4
 80053a6:	f003 0201 	and.w	r2, r3, #1
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	fa02 f303 	lsl.w	r3, r2, r3
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	005b      	lsls	r3, r3, #1
 80053c6:	2203      	movs	r2, #3
 80053c8:	fa02 f303 	lsl.w	r3, r2, r3
 80053cc:	43db      	mvns	r3, r3
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	4013      	ands	r3, r2
 80053d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	689a      	ldr	r2, [r3, #8]
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	005b      	lsls	r3, r3, #1
 80053dc:	fa02 f303 	lsl.w	r3, r2, r3
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d003      	beq.n	80053fc <HAL_GPIO_Init+0xfc>
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	2b12      	cmp	r3, #18
 80053fa:	d123      	bne.n	8005444 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	08da      	lsrs	r2, r3, #3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	3208      	adds	r2, #8
 8005404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005408:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	220f      	movs	r2, #15
 8005414:	fa02 f303 	lsl.w	r3, r2, r3
 8005418:	43db      	mvns	r3, r3
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	4013      	ands	r3, r2
 800541e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	691a      	ldr	r2, [r3, #16]
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	f003 0307 	and.w	r3, r3, #7
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	fa02 f303 	lsl.w	r3, r2, r3
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	4313      	orrs	r3, r2
 8005434:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	08da      	lsrs	r2, r3, #3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	3208      	adds	r2, #8
 800543e:	69b9      	ldr	r1, [r7, #24]
 8005440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	2203      	movs	r2, #3
 8005450:	fa02 f303 	lsl.w	r3, r2, r3
 8005454:	43db      	mvns	r3, r3
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	4013      	ands	r3, r2
 800545a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f003 0203 	and.w	r2, r3, #3
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	fa02 f303 	lsl.w	r3, r2, r3
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	4313      	orrs	r3, r2
 8005470:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 80ae 	beq.w	80055e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005486:	2300      	movs	r3, #0
 8005488:	60fb      	str	r3, [r7, #12]
 800548a:	4b5c      	ldr	r3, [pc, #368]	; (80055fc <HAL_GPIO_Init+0x2fc>)
 800548c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800548e:	4a5b      	ldr	r2, [pc, #364]	; (80055fc <HAL_GPIO_Init+0x2fc>)
 8005490:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005494:	6453      	str	r3, [r2, #68]	; 0x44
 8005496:	4b59      	ldr	r3, [pc, #356]	; (80055fc <HAL_GPIO_Init+0x2fc>)
 8005498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800549e:	60fb      	str	r3, [r7, #12]
 80054a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80054a2:	4a57      	ldr	r2, [pc, #348]	; (8005600 <HAL_GPIO_Init+0x300>)
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	089b      	lsrs	r3, r3, #2
 80054a8:	3302      	adds	r3, #2
 80054aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	f003 0303 	and.w	r3, r3, #3
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	220f      	movs	r2, #15
 80054ba:	fa02 f303 	lsl.w	r3, r2, r3
 80054be:	43db      	mvns	r3, r3
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	4013      	ands	r3, r2
 80054c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a4e      	ldr	r2, [pc, #312]	; (8005604 <HAL_GPIO_Init+0x304>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d025      	beq.n	800551a <HAL_GPIO_Init+0x21a>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a4d      	ldr	r2, [pc, #308]	; (8005608 <HAL_GPIO_Init+0x308>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d01f      	beq.n	8005516 <HAL_GPIO_Init+0x216>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a4c      	ldr	r2, [pc, #304]	; (800560c <HAL_GPIO_Init+0x30c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d019      	beq.n	8005512 <HAL_GPIO_Init+0x212>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a4b      	ldr	r2, [pc, #300]	; (8005610 <HAL_GPIO_Init+0x310>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d013      	beq.n	800550e <HAL_GPIO_Init+0x20e>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a4a      	ldr	r2, [pc, #296]	; (8005614 <HAL_GPIO_Init+0x314>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d00d      	beq.n	800550a <HAL_GPIO_Init+0x20a>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a49      	ldr	r2, [pc, #292]	; (8005618 <HAL_GPIO_Init+0x318>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d007      	beq.n	8005506 <HAL_GPIO_Init+0x206>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a48      	ldr	r2, [pc, #288]	; (800561c <HAL_GPIO_Init+0x31c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d101      	bne.n	8005502 <HAL_GPIO_Init+0x202>
 80054fe:	2306      	movs	r3, #6
 8005500:	e00c      	b.n	800551c <HAL_GPIO_Init+0x21c>
 8005502:	2307      	movs	r3, #7
 8005504:	e00a      	b.n	800551c <HAL_GPIO_Init+0x21c>
 8005506:	2305      	movs	r3, #5
 8005508:	e008      	b.n	800551c <HAL_GPIO_Init+0x21c>
 800550a:	2304      	movs	r3, #4
 800550c:	e006      	b.n	800551c <HAL_GPIO_Init+0x21c>
 800550e:	2303      	movs	r3, #3
 8005510:	e004      	b.n	800551c <HAL_GPIO_Init+0x21c>
 8005512:	2302      	movs	r3, #2
 8005514:	e002      	b.n	800551c <HAL_GPIO_Init+0x21c>
 8005516:	2301      	movs	r3, #1
 8005518:	e000      	b.n	800551c <HAL_GPIO_Init+0x21c>
 800551a:	2300      	movs	r3, #0
 800551c:	69fa      	ldr	r2, [r7, #28]
 800551e:	f002 0203 	and.w	r2, r2, #3
 8005522:	0092      	lsls	r2, r2, #2
 8005524:	4093      	lsls	r3, r2
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	4313      	orrs	r3, r2
 800552a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800552c:	4934      	ldr	r1, [pc, #208]	; (8005600 <HAL_GPIO_Init+0x300>)
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	089b      	lsrs	r3, r3, #2
 8005532:	3302      	adds	r3, #2
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800553a:	4b39      	ldr	r3, [pc, #228]	; (8005620 <HAL_GPIO_Init+0x320>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	43db      	mvns	r3, r3
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	4013      	ands	r3, r2
 8005548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	4313      	orrs	r3, r2
 800555c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800555e:	4a30      	ldr	r2, [pc, #192]	; (8005620 <HAL_GPIO_Init+0x320>)
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005564:	4b2e      	ldr	r3, [pc, #184]	; (8005620 <HAL_GPIO_Init+0x320>)
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	43db      	mvns	r3, r3
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	4013      	ands	r3, r2
 8005572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d003      	beq.n	8005588 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	4313      	orrs	r3, r2
 8005586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005588:	4a25      	ldr	r2, [pc, #148]	; (8005620 <HAL_GPIO_Init+0x320>)
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800558e:	4b24      	ldr	r3, [pc, #144]	; (8005620 <HAL_GPIO_Init+0x320>)
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	43db      	mvns	r3, r3
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	4013      	ands	r3, r2
 800559c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80055b2:	4a1b      	ldr	r2, [pc, #108]	; (8005620 <HAL_GPIO_Init+0x320>)
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80055b8:	4b19      	ldr	r3, [pc, #100]	; (8005620 <HAL_GPIO_Init+0x320>)
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	43db      	mvns	r3, r3
 80055c2:	69ba      	ldr	r2, [r7, #24]
 80055c4:	4013      	ands	r3, r2
 80055c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d003      	beq.n	80055dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	4313      	orrs	r3, r2
 80055da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80055dc:	4a10      	ldr	r2, [pc, #64]	; (8005620 <HAL_GPIO_Init+0x320>)
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	3301      	adds	r3, #1
 80055e6:	61fb      	str	r3, [r7, #28]
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	2b0f      	cmp	r3, #15
 80055ec:	f67f ae96 	bls.w	800531c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80055f0:	bf00      	nop
 80055f2:	3724      	adds	r7, #36	; 0x24
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	40023800 	.word	0x40023800
 8005600:	40013800 	.word	0x40013800
 8005604:	40020000 	.word	0x40020000
 8005608:	40020400 	.word	0x40020400
 800560c:	40020800 	.word	0x40020800
 8005610:	40020c00 	.word	0x40020c00
 8005614:	40021000 	.word	0x40021000
 8005618:	40021400 	.word	0x40021400
 800561c:	40021800 	.word	0x40021800
 8005620:	40013c00 	.word	0x40013c00

08005624 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	460b      	mov	r3, r1
 800562e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691a      	ldr	r2, [r3, #16]
 8005634:	887b      	ldrh	r3, [r7, #2]
 8005636:	4013      	ands	r3, r2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d002      	beq.n	8005642 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800563c:	2301      	movs	r3, #1
 800563e:	73fb      	strb	r3, [r7, #15]
 8005640:	e001      	b.n	8005646 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005642:	2300      	movs	r3, #0
 8005644:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005646:	7bfb      	ldrb	r3, [r7, #15]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	460b      	mov	r3, r1
 800565e:	807b      	strh	r3, [r7, #2]
 8005660:	4613      	mov	r3, r2
 8005662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005664:	787b      	ldrb	r3, [r7, #1]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800566a:	887a      	ldrh	r2, [r7, #2]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005670:	e003      	b.n	800567a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005672:	887b      	ldrh	r3, [r7, #2]
 8005674:	041a      	lsls	r2, r3, #16
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	619a      	str	r2, [r3, #24]
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005686:	b480      	push	{r7}
 8005688:	b083      	sub	sp, #12
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
 800568e:	460b      	mov	r3, r1
 8005690:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	695a      	ldr	r2, [r3, #20]
 8005696:	887b      	ldrh	r3, [r7, #2]
 8005698:	401a      	ands	r2, r3
 800569a:	887b      	ldrh	r3, [r7, #2]
 800569c:	429a      	cmp	r2, r3
 800569e:	d104      	bne.n	80056aa <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80056a0:	887b      	ldrh	r3, [r7, #2]
 80056a2:	041a      	lsls	r2, r3, #16
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80056a8:	e002      	b.n	80056b0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80056aa:	887a      	ldrh	r2, [r7, #2]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	619a      	str	r2, [r3, #24]
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d101      	bne.n	80056d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e0cc      	b.n	800586a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056d0:	4b68      	ldr	r3, [pc, #416]	; (8005874 <HAL_RCC_ClockConfig+0x1b8>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 030f 	and.w	r3, r3, #15
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d90c      	bls.n	80056f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056de:	4b65      	ldr	r3, [pc, #404]	; (8005874 <HAL_RCC_ClockConfig+0x1b8>)
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	b2d2      	uxtb	r2, r2
 80056e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056e6:	4b63      	ldr	r3, [pc, #396]	; (8005874 <HAL_RCC_ClockConfig+0x1b8>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 030f 	and.w	r3, r3, #15
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d001      	beq.n	80056f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e0b8      	b.n	800586a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d020      	beq.n	8005746 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0304 	and.w	r3, r3, #4
 800570c:	2b00      	cmp	r3, #0
 800570e:	d005      	beq.n	800571c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005710:	4b59      	ldr	r3, [pc, #356]	; (8005878 <HAL_RCC_ClockConfig+0x1bc>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	4a58      	ldr	r2, [pc, #352]	; (8005878 <HAL_RCC_ClockConfig+0x1bc>)
 8005716:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800571a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0308 	and.w	r3, r3, #8
 8005724:	2b00      	cmp	r3, #0
 8005726:	d005      	beq.n	8005734 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005728:	4b53      	ldr	r3, [pc, #332]	; (8005878 <HAL_RCC_ClockConfig+0x1bc>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	4a52      	ldr	r2, [pc, #328]	; (8005878 <HAL_RCC_ClockConfig+0x1bc>)
 800572e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005732:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005734:	4b50      	ldr	r3, [pc, #320]	; (8005878 <HAL_RCC_ClockConfig+0x1bc>)
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	494d      	ldr	r1, [pc, #308]	; (8005878 <HAL_RCC_ClockConfig+0x1bc>)
 8005742:	4313      	orrs	r3, r2
 8005744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b00      	cmp	r3, #0
 8005750:	d044      	beq.n	80057dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d107      	bne.n	800576a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800575a:	4b47      	ldr	r3, [pc, #284]	; (8005878 <HAL_RCC_ClockConfig+0x1bc>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d119      	bne.n	800579a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e07f      	b.n	800586a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	2b02      	cmp	r3, #2
 8005770:	d003      	beq.n	800577a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005776:	2b03      	cmp	r3, #3
 8005778:	d107      	bne.n	800578a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800577a:	4b3f      	ldr	r3, [pc, #252]	; (8005878 <HAL_RCC_ClockConfig+0x1bc>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d109      	bne.n	800579a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e06f      	b.n	800586a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800578a:	4b3b      	ldr	r3, [pc, #236]	; (8005878 <HAL_RCC_ClockConfig+0x1bc>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e067      	b.n	800586a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800579a:	4b37      	ldr	r3, [pc, #220]	; (8005878 <HAL_RCC_ClockConfig+0x1bc>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f023 0203 	bic.w	r2, r3, #3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	4934      	ldr	r1, [pc, #208]	; (8005878 <HAL_RCC_ClockConfig+0x1bc>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057ac:	f7fe fa9e 	bl	8003cec <HAL_GetTick>
 80057b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057b2:	e00a      	b.n	80057ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057b4:	f7fe fa9a 	bl	8003cec <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	f241 3288 	movw	r2, #5000	; 0x1388
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e04f      	b.n	800586a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ca:	4b2b      	ldr	r3, [pc, #172]	; (8005878 <HAL_RCC_ClockConfig+0x1bc>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f003 020c 	and.w	r2, r3, #12
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	429a      	cmp	r2, r3
 80057da:	d1eb      	bne.n	80057b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057dc:	4b25      	ldr	r3, [pc, #148]	; (8005874 <HAL_RCC_ClockConfig+0x1b8>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 030f 	and.w	r3, r3, #15
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d20c      	bcs.n	8005804 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ea:	4b22      	ldr	r3, [pc, #136]	; (8005874 <HAL_RCC_ClockConfig+0x1b8>)
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	b2d2      	uxtb	r2, r2
 80057f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057f2:	4b20      	ldr	r3, [pc, #128]	; (8005874 <HAL_RCC_ClockConfig+0x1b8>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 030f 	and.w	r3, r3, #15
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d001      	beq.n	8005804 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e032      	b.n	800586a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b00      	cmp	r3, #0
 800580e:	d008      	beq.n	8005822 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005810:	4b19      	ldr	r3, [pc, #100]	; (8005878 <HAL_RCC_ClockConfig+0x1bc>)
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	4916      	ldr	r1, [pc, #88]	; (8005878 <HAL_RCC_ClockConfig+0x1bc>)
 800581e:	4313      	orrs	r3, r2
 8005820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0308 	and.w	r3, r3, #8
 800582a:	2b00      	cmp	r3, #0
 800582c:	d009      	beq.n	8005842 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800582e:	4b12      	ldr	r3, [pc, #72]	; (8005878 <HAL_RCC_ClockConfig+0x1bc>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	490e      	ldr	r1, [pc, #56]	; (8005878 <HAL_RCC_ClockConfig+0x1bc>)
 800583e:	4313      	orrs	r3, r2
 8005840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005842:	f000 f855 	bl	80058f0 <HAL_RCC_GetSysClockFreq>
 8005846:	4601      	mov	r1, r0
 8005848:	4b0b      	ldr	r3, [pc, #44]	; (8005878 <HAL_RCC_ClockConfig+0x1bc>)
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	091b      	lsrs	r3, r3, #4
 800584e:	f003 030f 	and.w	r3, r3, #15
 8005852:	4a0a      	ldr	r2, [pc, #40]	; (800587c <HAL_RCC_ClockConfig+0x1c0>)
 8005854:	5cd3      	ldrb	r3, [r2, r3]
 8005856:	fa21 f303 	lsr.w	r3, r1, r3
 800585a:	4a09      	ldr	r2, [pc, #36]	; (8005880 <HAL_RCC_ClockConfig+0x1c4>)
 800585c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800585e:	4b09      	ldr	r3, [pc, #36]	; (8005884 <HAL_RCC_ClockConfig+0x1c8>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4618      	mov	r0, r3
 8005864:	f7fe f9fe 	bl	8003c64 <HAL_InitTick>

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	40023c00 	.word	0x40023c00
 8005878:	40023800 	.word	0x40023800
 800587c:	0800a5d8 	.word	0x0800a5d8
 8005880:	20000000 	.word	0x20000000
 8005884:	20000004 	.word	0x20000004

08005888 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005888:	b480      	push	{r7}
 800588a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800588c:	4b03      	ldr	r3, [pc, #12]	; (800589c <HAL_RCC_GetHCLKFreq+0x14>)
 800588e:	681b      	ldr	r3, [r3, #0]
}
 8005890:	4618      	mov	r0, r3
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	20000000 	.word	0x20000000

080058a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058a4:	f7ff fff0 	bl	8005888 <HAL_RCC_GetHCLKFreq>
 80058a8:	4601      	mov	r1, r0
 80058aa:	4b05      	ldr	r3, [pc, #20]	; (80058c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	0a9b      	lsrs	r3, r3, #10
 80058b0:	f003 0307 	and.w	r3, r3, #7
 80058b4:	4a03      	ldr	r2, [pc, #12]	; (80058c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058b6:	5cd3      	ldrb	r3, [r2, r3]
 80058b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80058bc:	4618      	mov	r0, r3
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	40023800 	.word	0x40023800
 80058c4:	0800a5e8 	.word	0x0800a5e8

080058c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058cc:	f7ff ffdc 	bl	8005888 <HAL_RCC_GetHCLKFreq>
 80058d0:	4601      	mov	r1, r0
 80058d2:	4b05      	ldr	r3, [pc, #20]	; (80058e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	0b5b      	lsrs	r3, r3, #13
 80058d8:	f003 0307 	and.w	r3, r3, #7
 80058dc:	4a03      	ldr	r2, [pc, #12]	; (80058ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80058de:	5cd3      	ldrb	r3, [r2, r3]
 80058e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	40023800 	.word	0x40023800
 80058ec:	0800a5e8 	.word	0x0800a5e8

080058f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058f2:	b087      	sub	sp, #28
 80058f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80058fa:	2300      	movs	r3, #0
 80058fc:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80058fe:	2300      	movs	r3, #0
 8005900:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8005902:	2300      	movs	r3, #0
 8005904:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005906:	2300      	movs	r3, #0
 8005908:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800590a:	4bc6      	ldr	r3, [pc, #792]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x334>)
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f003 030c 	and.w	r3, r3, #12
 8005912:	2b0c      	cmp	r3, #12
 8005914:	f200 817e 	bhi.w	8005c14 <HAL_RCC_GetSysClockFreq+0x324>
 8005918:	a201      	add	r2, pc, #4	; (adr r2, 8005920 <HAL_RCC_GetSysClockFreq+0x30>)
 800591a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591e:	bf00      	nop
 8005920:	08005955 	.word	0x08005955
 8005924:	08005c15 	.word	0x08005c15
 8005928:	08005c15 	.word	0x08005c15
 800592c:	08005c15 	.word	0x08005c15
 8005930:	0800595b 	.word	0x0800595b
 8005934:	08005c15 	.word	0x08005c15
 8005938:	08005c15 	.word	0x08005c15
 800593c:	08005c15 	.word	0x08005c15
 8005940:	08005961 	.word	0x08005961
 8005944:	08005c15 	.word	0x08005c15
 8005948:	08005c15 	.word	0x08005c15
 800594c:	08005c15 	.word	0x08005c15
 8005950:	08005abd 	.word	0x08005abd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005954:	4bb4      	ldr	r3, [pc, #720]	; (8005c28 <HAL_RCC_GetSysClockFreq+0x338>)
 8005956:	613b      	str	r3, [r7, #16]
       break;
 8005958:	e15f      	b.n	8005c1a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800595a:	4bb4      	ldr	r3, [pc, #720]	; (8005c2c <HAL_RCC_GetSysClockFreq+0x33c>)
 800595c:	613b      	str	r3, [r7, #16]
      break;
 800595e:	e15c      	b.n	8005c1a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005960:	4bb0      	ldr	r3, [pc, #704]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x334>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005968:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800596a:	4bae      	ldr	r3, [pc, #696]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x334>)
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d04a      	beq.n	8005a0c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005976:	4bab      	ldr	r3, [pc, #684]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x334>)
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	099b      	lsrs	r3, r3, #6
 800597c:	f04f 0400 	mov.w	r4, #0
 8005980:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005984:	f04f 0200 	mov.w	r2, #0
 8005988:	ea03 0501 	and.w	r5, r3, r1
 800598c:	ea04 0602 	and.w	r6, r4, r2
 8005990:	4629      	mov	r1, r5
 8005992:	4632      	mov	r2, r6
 8005994:	f04f 0300 	mov.w	r3, #0
 8005998:	f04f 0400 	mov.w	r4, #0
 800599c:	0154      	lsls	r4, r2, #5
 800599e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80059a2:	014b      	lsls	r3, r1, #5
 80059a4:	4619      	mov	r1, r3
 80059a6:	4622      	mov	r2, r4
 80059a8:	1b49      	subs	r1, r1, r5
 80059aa:	eb62 0206 	sbc.w	r2, r2, r6
 80059ae:	f04f 0300 	mov.w	r3, #0
 80059b2:	f04f 0400 	mov.w	r4, #0
 80059b6:	0194      	lsls	r4, r2, #6
 80059b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80059bc:	018b      	lsls	r3, r1, #6
 80059be:	1a5b      	subs	r3, r3, r1
 80059c0:	eb64 0402 	sbc.w	r4, r4, r2
 80059c4:	f04f 0100 	mov.w	r1, #0
 80059c8:	f04f 0200 	mov.w	r2, #0
 80059cc:	00e2      	lsls	r2, r4, #3
 80059ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80059d2:	00d9      	lsls	r1, r3, #3
 80059d4:	460b      	mov	r3, r1
 80059d6:	4614      	mov	r4, r2
 80059d8:	195b      	adds	r3, r3, r5
 80059da:	eb44 0406 	adc.w	r4, r4, r6
 80059de:	f04f 0100 	mov.w	r1, #0
 80059e2:	f04f 0200 	mov.w	r2, #0
 80059e6:	0262      	lsls	r2, r4, #9
 80059e8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80059ec:	0259      	lsls	r1, r3, #9
 80059ee:	460b      	mov	r3, r1
 80059f0:	4614      	mov	r4, r2
 80059f2:	4618      	mov	r0, r3
 80059f4:	4621      	mov	r1, r4
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f04f 0400 	mov.w	r4, #0
 80059fc:	461a      	mov	r2, r3
 80059fe:	4623      	mov	r3, r4
 8005a00:	f7fb f942 	bl	8000c88 <__aeabi_uldivmod>
 8005a04:	4603      	mov	r3, r0
 8005a06:	460c      	mov	r4, r1
 8005a08:	617b      	str	r3, [r7, #20]
 8005a0a:	e049      	b.n	8005aa0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a0c:	4b85      	ldr	r3, [pc, #532]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x334>)
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	099b      	lsrs	r3, r3, #6
 8005a12:	f04f 0400 	mov.w	r4, #0
 8005a16:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005a1a:	f04f 0200 	mov.w	r2, #0
 8005a1e:	ea03 0501 	and.w	r5, r3, r1
 8005a22:	ea04 0602 	and.w	r6, r4, r2
 8005a26:	4629      	mov	r1, r5
 8005a28:	4632      	mov	r2, r6
 8005a2a:	f04f 0300 	mov.w	r3, #0
 8005a2e:	f04f 0400 	mov.w	r4, #0
 8005a32:	0154      	lsls	r4, r2, #5
 8005a34:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005a38:	014b      	lsls	r3, r1, #5
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	4622      	mov	r2, r4
 8005a3e:	1b49      	subs	r1, r1, r5
 8005a40:	eb62 0206 	sbc.w	r2, r2, r6
 8005a44:	f04f 0300 	mov.w	r3, #0
 8005a48:	f04f 0400 	mov.w	r4, #0
 8005a4c:	0194      	lsls	r4, r2, #6
 8005a4e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005a52:	018b      	lsls	r3, r1, #6
 8005a54:	1a5b      	subs	r3, r3, r1
 8005a56:	eb64 0402 	sbc.w	r4, r4, r2
 8005a5a:	f04f 0100 	mov.w	r1, #0
 8005a5e:	f04f 0200 	mov.w	r2, #0
 8005a62:	00e2      	lsls	r2, r4, #3
 8005a64:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005a68:	00d9      	lsls	r1, r3, #3
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	4614      	mov	r4, r2
 8005a6e:	195b      	adds	r3, r3, r5
 8005a70:	eb44 0406 	adc.w	r4, r4, r6
 8005a74:	f04f 0100 	mov.w	r1, #0
 8005a78:	f04f 0200 	mov.w	r2, #0
 8005a7c:	02a2      	lsls	r2, r4, #10
 8005a7e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005a82:	0299      	lsls	r1, r3, #10
 8005a84:	460b      	mov	r3, r1
 8005a86:	4614      	mov	r4, r2
 8005a88:	4618      	mov	r0, r3
 8005a8a:	4621      	mov	r1, r4
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f04f 0400 	mov.w	r4, #0
 8005a92:	461a      	mov	r2, r3
 8005a94:	4623      	mov	r3, r4
 8005a96:	f7fb f8f7 	bl	8000c88 <__aeabi_uldivmod>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	460c      	mov	r4, r1
 8005a9e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005aa0:	4b60      	ldr	r3, [pc, #384]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x334>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	0c1b      	lsrs	r3, r3, #16
 8005aa6:	f003 0303 	and.w	r3, r3, #3
 8005aaa:	3301      	adds	r3, #1
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab8:	613b      	str	r3, [r7, #16]
      break;
 8005aba:	e0ae      	b.n	8005c1a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005abc:	4b59      	ldr	r3, [pc, #356]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x334>)
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ac4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ac6:	4b57      	ldr	r3, [pc, #348]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x334>)
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d04a      	beq.n	8005b68 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ad2:	4b54      	ldr	r3, [pc, #336]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x334>)
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	099b      	lsrs	r3, r3, #6
 8005ad8:	f04f 0400 	mov.w	r4, #0
 8005adc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005ae0:	f04f 0200 	mov.w	r2, #0
 8005ae4:	ea03 0501 	and.w	r5, r3, r1
 8005ae8:	ea04 0602 	and.w	r6, r4, r2
 8005aec:	4629      	mov	r1, r5
 8005aee:	4632      	mov	r2, r6
 8005af0:	f04f 0300 	mov.w	r3, #0
 8005af4:	f04f 0400 	mov.w	r4, #0
 8005af8:	0154      	lsls	r4, r2, #5
 8005afa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005afe:	014b      	lsls	r3, r1, #5
 8005b00:	4619      	mov	r1, r3
 8005b02:	4622      	mov	r2, r4
 8005b04:	1b49      	subs	r1, r1, r5
 8005b06:	eb62 0206 	sbc.w	r2, r2, r6
 8005b0a:	f04f 0300 	mov.w	r3, #0
 8005b0e:	f04f 0400 	mov.w	r4, #0
 8005b12:	0194      	lsls	r4, r2, #6
 8005b14:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005b18:	018b      	lsls	r3, r1, #6
 8005b1a:	1a5b      	subs	r3, r3, r1
 8005b1c:	eb64 0402 	sbc.w	r4, r4, r2
 8005b20:	f04f 0100 	mov.w	r1, #0
 8005b24:	f04f 0200 	mov.w	r2, #0
 8005b28:	00e2      	lsls	r2, r4, #3
 8005b2a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005b2e:	00d9      	lsls	r1, r3, #3
 8005b30:	460b      	mov	r3, r1
 8005b32:	4614      	mov	r4, r2
 8005b34:	195b      	adds	r3, r3, r5
 8005b36:	eb44 0406 	adc.w	r4, r4, r6
 8005b3a:	f04f 0100 	mov.w	r1, #0
 8005b3e:	f04f 0200 	mov.w	r2, #0
 8005b42:	0262      	lsls	r2, r4, #9
 8005b44:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005b48:	0259      	lsls	r1, r3, #9
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	4614      	mov	r4, r2
 8005b4e:	4618      	mov	r0, r3
 8005b50:	4621      	mov	r1, r4
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f04f 0400 	mov.w	r4, #0
 8005b58:	461a      	mov	r2, r3
 8005b5a:	4623      	mov	r3, r4
 8005b5c:	f7fb f894 	bl	8000c88 <__aeabi_uldivmod>
 8005b60:	4603      	mov	r3, r0
 8005b62:	460c      	mov	r4, r1
 8005b64:	617b      	str	r3, [r7, #20]
 8005b66:	e049      	b.n	8005bfc <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b68:	4b2e      	ldr	r3, [pc, #184]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x334>)
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	099b      	lsrs	r3, r3, #6
 8005b6e:	f04f 0400 	mov.w	r4, #0
 8005b72:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005b76:	f04f 0200 	mov.w	r2, #0
 8005b7a:	ea03 0501 	and.w	r5, r3, r1
 8005b7e:	ea04 0602 	and.w	r6, r4, r2
 8005b82:	4629      	mov	r1, r5
 8005b84:	4632      	mov	r2, r6
 8005b86:	f04f 0300 	mov.w	r3, #0
 8005b8a:	f04f 0400 	mov.w	r4, #0
 8005b8e:	0154      	lsls	r4, r2, #5
 8005b90:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005b94:	014b      	lsls	r3, r1, #5
 8005b96:	4619      	mov	r1, r3
 8005b98:	4622      	mov	r2, r4
 8005b9a:	1b49      	subs	r1, r1, r5
 8005b9c:	eb62 0206 	sbc.w	r2, r2, r6
 8005ba0:	f04f 0300 	mov.w	r3, #0
 8005ba4:	f04f 0400 	mov.w	r4, #0
 8005ba8:	0194      	lsls	r4, r2, #6
 8005baa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005bae:	018b      	lsls	r3, r1, #6
 8005bb0:	1a5b      	subs	r3, r3, r1
 8005bb2:	eb64 0402 	sbc.w	r4, r4, r2
 8005bb6:	f04f 0100 	mov.w	r1, #0
 8005bba:	f04f 0200 	mov.w	r2, #0
 8005bbe:	00e2      	lsls	r2, r4, #3
 8005bc0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005bc4:	00d9      	lsls	r1, r3, #3
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	4614      	mov	r4, r2
 8005bca:	195b      	adds	r3, r3, r5
 8005bcc:	eb44 0406 	adc.w	r4, r4, r6
 8005bd0:	f04f 0100 	mov.w	r1, #0
 8005bd4:	f04f 0200 	mov.w	r2, #0
 8005bd8:	02a2      	lsls	r2, r4, #10
 8005bda:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005bde:	0299      	lsls	r1, r3, #10
 8005be0:	460b      	mov	r3, r1
 8005be2:	4614      	mov	r4, r2
 8005be4:	4618      	mov	r0, r3
 8005be6:	4621      	mov	r1, r4
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f04f 0400 	mov.w	r4, #0
 8005bee:	461a      	mov	r2, r3
 8005bf0:	4623      	mov	r3, r4
 8005bf2:	f7fb f849 	bl	8000c88 <__aeabi_uldivmod>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	460c      	mov	r4, r1
 8005bfa:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005bfc:	4b09      	ldr	r3, [pc, #36]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x334>)
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	0f1b      	lsrs	r3, r3, #28
 8005c02:	f003 0307 	and.w	r3, r3, #7
 8005c06:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c10:	613b      	str	r3, [r7, #16]
      break;
 8005c12:	e002      	b.n	8005c1a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c14:	4b04      	ldr	r3, [pc, #16]	; (8005c28 <HAL_RCC_GetSysClockFreq+0x338>)
 8005c16:	613b      	str	r3, [r7, #16]
      break;
 8005c18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c1a:	693b      	ldr	r3, [r7, #16]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	371c      	adds	r7, #28
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c24:	40023800 	.word	0x40023800
 8005c28:	00f42400 	.word	0x00f42400
 8005c2c:	007a1200 	.word	0x007a1200

08005c30 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f000 8083 	beq.w	8005d50 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005c4a:	4b95      	ldr	r3, [pc, #596]	; (8005ea0 <HAL_RCC_OscConfig+0x270>)
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f003 030c 	and.w	r3, r3, #12
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	d019      	beq.n	8005c8a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005c56:	4b92      	ldr	r3, [pc, #584]	; (8005ea0 <HAL_RCC_OscConfig+0x270>)
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005c5e:	2b08      	cmp	r3, #8
 8005c60:	d106      	bne.n	8005c70 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005c62:	4b8f      	ldr	r3, [pc, #572]	; (8005ea0 <HAL_RCC_OscConfig+0x270>)
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c6e:	d00c      	beq.n	8005c8a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c70:	4b8b      	ldr	r3, [pc, #556]	; (8005ea0 <HAL_RCC_OscConfig+0x270>)
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005c78:	2b0c      	cmp	r3, #12
 8005c7a:	d112      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c7c:	4b88      	ldr	r3, [pc, #544]	; (8005ea0 <HAL_RCC_OscConfig+0x270>)
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c88:	d10b      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c8a:	4b85      	ldr	r3, [pc, #532]	; (8005ea0 <HAL_RCC_OscConfig+0x270>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d05b      	beq.n	8005d4e <HAL_RCC_OscConfig+0x11e>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d157      	bne.n	8005d4e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e216      	b.n	80060d0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005caa:	d106      	bne.n	8005cba <HAL_RCC_OscConfig+0x8a>
 8005cac:	4b7c      	ldr	r3, [pc, #496]	; (8005ea0 <HAL_RCC_OscConfig+0x270>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a7b      	ldr	r2, [pc, #492]	; (8005ea0 <HAL_RCC_OscConfig+0x270>)
 8005cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cb6:	6013      	str	r3, [r2, #0]
 8005cb8:	e01d      	b.n	8005cf6 <HAL_RCC_OscConfig+0xc6>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cc2:	d10c      	bne.n	8005cde <HAL_RCC_OscConfig+0xae>
 8005cc4:	4b76      	ldr	r3, [pc, #472]	; (8005ea0 <HAL_RCC_OscConfig+0x270>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a75      	ldr	r2, [pc, #468]	; (8005ea0 <HAL_RCC_OscConfig+0x270>)
 8005cca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cce:	6013      	str	r3, [r2, #0]
 8005cd0:	4b73      	ldr	r3, [pc, #460]	; (8005ea0 <HAL_RCC_OscConfig+0x270>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a72      	ldr	r2, [pc, #456]	; (8005ea0 <HAL_RCC_OscConfig+0x270>)
 8005cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cda:	6013      	str	r3, [r2, #0]
 8005cdc:	e00b      	b.n	8005cf6 <HAL_RCC_OscConfig+0xc6>
 8005cde:	4b70      	ldr	r3, [pc, #448]	; (8005ea0 <HAL_RCC_OscConfig+0x270>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a6f      	ldr	r2, [pc, #444]	; (8005ea0 <HAL_RCC_OscConfig+0x270>)
 8005ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ce8:	6013      	str	r3, [r2, #0]
 8005cea:	4b6d      	ldr	r3, [pc, #436]	; (8005ea0 <HAL_RCC_OscConfig+0x270>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a6c      	ldr	r2, [pc, #432]	; (8005ea0 <HAL_RCC_OscConfig+0x270>)
 8005cf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cf4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d013      	beq.n	8005d26 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cfe:	f7fd fff5 	bl	8003cec <HAL_GetTick>
 8005d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d04:	e008      	b.n	8005d18 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d06:	f7fd fff1 	bl	8003cec <HAL_GetTick>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	2b64      	cmp	r3, #100	; 0x64
 8005d12:	d901      	bls.n	8005d18 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e1db      	b.n	80060d0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d18:	4b61      	ldr	r3, [pc, #388]	; (8005ea0 <HAL_RCC_OscConfig+0x270>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d0f0      	beq.n	8005d06 <HAL_RCC_OscConfig+0xd6>
 8005d24:	e014      	b.n	8005d50 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d26:	f7fd ffe1 	bl	8003cec <HAL_GetTick>
 8005d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d2c:	e008      	b.n	8005d40 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d2e:	f7fd ffdd 	bl	8003cec <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	2b64      	cmp	r3, #100	; 0x64
 8005d3a:	d901      	bls.n	8005d40 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e1c7      	b.n	80060d0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d40:	4b57      	ldr	r3, [pc, #348]	; (8005ea0 <HAL_RCC_OscConfig+0x270>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1f0      	bne.n	8005d2e <HAL_RCC_OscConfig+0xfe>
 8005d4c:	e000      	b.n	8005d50 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d4e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0302 	and.w	r3, r3, #2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d06f      	beq.n	8005e3c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005d5c:	4b50      	ldr	r3, [pc, #320]	; (8005ea0 <HAL_RCC_OscConfig+0x270>)
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f003 030c 	and.w	r3, r3, #12
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d017      	beq.n	8005d98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005d68:	4b4d      	ldr	r3, [pc, #308]	; (8005ea0 <HAL_RCC_OscConfig+0x270>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005d70:	2b08      	cmp	r3, #8
 8005d72:	d105      	bne.n	8005d80 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005d74:	4b4a      	ldr	r3, [pc, #296]	; (8005ea0 <HAL_RCC_OscConfig+0x270>)
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00b      	beq.n	8005d98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d80:	4b47      	ldr	r3, [pc, #284]	; (8005ea0 <HAL_RCC_OscConfig+0x270>)
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005d88:	2b0c      	cmp	r3, #12
 8005d8a:	d11c      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d8c:	4b44      	ldr	r3, [pc, #272]	; (8005ea0 <HAL_RCC_OscConfig+0x270>)
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d116      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d98:	4b41      	ldr	r3, [pc, #260]	; (8005ea0 <HAL_RCC_OscConfig+0x270>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d005      	beq.n	8005db0 <HAL_RCC_OscConfig+0x180>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d001      	beq.n	8005db0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e18f      	b.n	80060d0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005db0:	4b3b      	ldr	r3, [pc, #236]	; (8005ea0 <HAL_RCC_OscConfig+0x270>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	00db      	lsls	r3, r3, #3
 8005dbe:	4938      	ldr	r1, [pc, #224]	; (8005ea0 <HAL_RCC_OscConfig+0x270>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dc4:	e03a      	b.n	8005e3c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d020      	beq.n	8005e10 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dce:	4b35      	ldr	r3, [pc, #212]	; (8005ea4 <HAL_RCC_OscConfig+0x274>)
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd4:	f7fd ff8a 	bl	8003cec <HAL_GetTick>
 8005dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dda:	e008      	b.n	8005dee <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ddc:	f7fd ff86 	bl	8003cec <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e170      	b.n	80060d0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dee:	4b2c      	ldr	r3, [pc, #176]	; (8005ea0 <HAL_RCC_OscConfig+0x270>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d0f0      	beq.n	8005ddc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dfa:	4b29      	ldr	r3, [pc, #164]	; (8005ea0 <HAL_RCC_OscConfig+0x270>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	00db      	lsls	r3, r3, #3
 8005e08:	4925      	ldr	r1, [pc, #148]	; (8005ea0 <HAL_RCC_OscConfig+0x270>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	600b      	str	r3, [r1, #0]
 8005e0e:	e015      	b.n	8005e3c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e10:	4b24      	ldr	r3, [pc, #144]	; (8005ea4 <HAL_RCC_OscConfig+0x274>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e16:	f7fd ff69 	bl	8003cec <HAL_GetTick>
 8005e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e1c:	e008      	b.n	8005e30 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e1e:	f7fd ff65 	bl	8003cec <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d901      	bls.n	8005e30 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e14f      	b.n	80060d0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e30:	4b1b      	ldr	r3, [pc, #108]	; (8005ea0 <HAL_RCC_OscConfig+0x270>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1f0      	bne.n	8005e1e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0308 	and.w	r3, r3, #8
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d037      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	695b      	ldr	r3, [r3, #20]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d016      	beq.n	8005e7e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e50:	4b15      	ldr	r3, [pc, #84]	; (8005ea8 <HAL_RCC_OscConfig+0x278>)
 8005e52:	2201      	movs	r2, #1
 8005e54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e56:	f7fd ff49 	bl	8003cec <HAL_GetTick>
 8005e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e5c:	e008      	b.n	8005e70 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e5e:	f7fd ff45 	bl	8003cec <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d901      	bls.n	8005e70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e12f      	b.n	80060d0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e70:	4b0b      	ldr	r3, [pc, #44]	; (8005ea0 <HAL_RCC_OscConfig+0x270>)
 8005e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e74:	f003 0302 	and.w	r3, r3, #2
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d0f0      	beq.n	8005e5e <HAL_RCC_OscConfig+0x22e>
 8005e7c:	e01c      	b.n	8005eb8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e7e:	4b0a      	ldr	r3, [pc, #40]	; (8005ea8 <HAL_RCC_OscConfig+0x278>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e84:	f7fd ff32 	bl	8003cec <HAL_GetTick>
 8005e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e8a:	e00f      	b.n	8005eac <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e8c:	f7fd ff2e 	bl	8003cec <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d908      	bls.n	8005eac <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e118      	b.n	80060d0 <HAL_RCC_OscConfig+0x4a0>
 8005e9e:	bf00      	nop
 8005ea0:	40023800 	.word	0x40023800
 8005ea4:	42470000 	.word	0x42470000
 8005ea8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005eac:	4b8a      	ldr	r3, [pc, #552]	; (80060d8 <HAL_RCC_OscConfig+0x4a8>)
 8005eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eb0:	f003 0302 	and.w	r3, r3, #2
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1e9      	bne.n	8005e8c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0304 	and.w	r3, r3, #4
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 8097 	beq.w	8005ff4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005eca:	4b83      	ldr	r3, [pc, #524]	; (80060d8 <HAL_RCC_OscConfig+0x4a8>)
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10f      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	60fb      	str	r3, [r7, #12]
 8005eda:	4b7f      	ldr	r3, [pc, #508]	; (80060d8 <HAL_RCC_OscConfig+0x4a8>)
 8005edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ede:	4a7e      	ldr	r2, [pc, #504]	; (80060d8 <HAL_RCC_OscConfig+0x4a8>)
 8005ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ee6:	4b7c      	ldr	r3, [pc, #496]	; (80060d8 <HAL_RCC_OscConfig+0x4a8>)
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eee:	60fb      	str	r3, [r7, #12]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ef6:	4b79      	ldr	r3, [pc, #484]	; (80060dc <HAL_RCC_OscConfig+0x4ac>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d118      	bne.n	8005f34 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f02:	4b76      	ldr	r3, [pc, #472]	; (80060dc <HAL_RCC_OscConfig+0x4ac>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a75      	ldr	r2, [pc, #468]	; (80060dc <HAL_RCC_OscConfig+0x4ac>)
 8005f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f0e:	f7fd feed 	bl	8003cec <HAL_GetTick>
 8005f12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f14:	e008      	b.n	8005f28 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f16:	f7fd fee9 	bl	8003cec <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d901      	bls.n	8005f28 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e0d3      	b.n	80060d0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f28:	4b6c      	ldr	r3, [pc, #432]	; (80060dc <HAL_RCC_OscConfig+0x4ac>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d0f0      	beq.n	8005f16 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d106      	bne.n	8005f4a <HAL_RCC_OscConfig+0x31a>
 8005f3c:	4b66      	ldr	r3, [pc, #408]	; (80060d8 <HAL_RCC_OscConfig+0x4a8>)
 8005f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f40:	4a65      	ldr	r2, [pc, #404]	; (80060d8 <HAL_RCC_OscConfig+0x4a8>)
 8005f42:	f043 0301 	orr.w	r3, r3, #1
 8005f46:	6713      	str	r3, [r2, #112]	; 0x70
 8005f48:	e01c      	b.n	8005f84 <HAL_RCC_OscConfig+0x354>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	2b05      	cmp	r3, #5
 8005f50:	d10c      	bne.n	8005f6c <HAL_RCC_OscConfig+0x33c>
 8005f52:	4b61      	ldr	r3, [pc, #388]	; (80060d8 <HAL_RCC_OscConfig+0x4a8>)
 8005f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f56:	4a60      	ldr	r2, [pc, #384]	; (80060d8 <HAL_RCC_OscConfig+0x4a8>)
 8005f58:	f043 0304 	orr.w	r3, r3, #4
 8005f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f5e:	4b5e      	ldr	r3, [pc, #376]	; (80060d8 <HAL_RCC_OscConfig+0x4a8>)
 8005f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f62:	4a5d      	ldr	r2, [pc, #372]	; (80060d8 <HAL_RCC_OscConfig+0x4a8>)
 8005f64:	f043 0301 	orr.w	r3, r3, #1
 8005f68:	6713      	str	r3, [r2, #112]	; 0x70
 8005f6a:	e00b      	b.n	8005f84 <HAL_RCC_OscConfig+0x354>
 8005f6c:	4b5a      	ldr	r3, [pc, #360]	; (80060d8 <HAL_RCC_OscConfig+0x4a8>)
 8005f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f70:	4a59      	ldr	r2, [pc, #356]	; (80060d8 <HAL_RCC_OscConfig+0x4a8>)
 8005f72:	f023 0301 	bic.w	r3, r3, #1
 8005f76:	6713      	str	r3, [r2, #112]	; 0x70
 8005f78:	4b57      	ldr	r3, [pc, #348]	; (80060d8 <HAL_RCC_OscConfig+0x4a8>)
 8005f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7c:	4a56      	ldr	r2, [pc, #344]	; (80060d8 <HAL_RCC_OscConfig+0x4a8>)
 8005f7e:	f023 0304 	bic.w	r3, r3, #4
 8005f82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d015      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f8c:	f7fd feae 	bl	8003cec <HAL_GetTick>
 8005f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f92:	e00a      	b.n	8005faa <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f94:	f7fd feaa 	bl	8003cec <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d901      	bls.n	8005faa <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e092      	b.n	80060d0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005faa:	4b4b      	ldr	r3, [pc, #300]	; (80060d8 <HAL_RCC_OscConfig+0x4a8>)
 8005fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d0ee      	beq.n	8005f94 <HAL_RCC_OscConfig+0x364>
 8005fb6:	e014      	b.n	8005fe2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fb8:	f7fd fe98 	bl	8003cec <HAL_GetTick>
 8005fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fbe:	e00a      	b.n	8005fd6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fc0:	f7fd fe94 	bl	8003cec <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d901      	bls.n	8005fd6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e07c      	b.n	80060d0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fd6:	4b40      	ldr	r3, [pc, #256]	; (80060d8 <HAL_RCC_OscConfig+0x4a8>)
 8005fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1ee      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fe2:	7dfb      	ldrb	r3, [r7, #23]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d105      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fe8:	4b3b      	ldr	r3, [pc, #236]	; (80060d8 <HAL_RCC_OscConfig+0x4a8>)
 8005fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fec:	4a3a      	ldr	r2, [pc, #232]	; (80060d8 <HAL_RCC_OscConfig+0x4a8>)
 8005fee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ff2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d068      	beq.n	80060ce <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ffc:	4b36      	ldr	r3, [pc, #216]	; (80060d8 <HAL_RCC_OscConfig+0x4a8>)
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f003 030c 	and.w	r3, r3, #12
 8006004:	2b08      	cmp	r3, #8
 8006006:	d060      	beq.n	80060ca <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	2b02      	cmp	r3, #2
 800600e:	d145      	bne.n	800609c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006010:	4b33      	ldr	r3, [pc, #204]	; (80060e0 <HAL_RCC_OscConfig+0x4b0>)
 8006012:	2200      	movs	r2, #0
 8006014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006016:	f7fd fe69 	bl	8003cec <HAL_GetTick>
 800601a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800601c:	e008      	b.n	8006030 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800601e:	f7fd fe65 	bl	8003cec <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	2b02      	cmp	r3, #2
 800602a:	d901      	bls.n	8006030 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e04f      	b.n	80060d0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006030:	4b29      	ldr	r3, [pc, #164]	; (80060d8 <HAL_RCC_OscConfig+0x4a8>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1f0      	bne.n	800601e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	69da      	ldr	r2, [r3, #28]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a1b      	ldr	r3, [r3, #32]
 8006044:	431a      	orrs	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604a:	019b      	lsls	r3, r3, #6
 800604c:	431a      	orrs	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006052:	085b      	lsrs	r3, r3, #1
 8006054:	3b01      	subs	r3, #1
 8006056:	041b      	lsls	r3, r3, #16
 8006058:	431a      	orrs	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605e:	061b      	lsls	r3, r3, #24
 8006060:	431a      	orrs	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006066:	071b      	lsls	r3, r3, #28
 8006068:	491b      	ldr	r1, [pc, #108]	; (80060d8 <HAL_RCC_OscConfig+0x4a8>)
 800606a:	4313      	orrs	r3, r2
 800606c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800606e:	4b1c      	ldr	r3, [pc, #112]	; (80060e0 <HAL_RCC_OscConfig+0x4b0>)
 8006070:	2201      	movs	r2, #1
 8006072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006074:	f7fd fe3a 	bl	8003cec <HAL_GetTick>
 8006078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800607a:	e008      	b.n	800608e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800607c:	f7fd fe36 	bl	8003cec <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	2b02      	cmp	r3, #2
 8006088:	d901      	bls.n	800608e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e020      	b.n	80060d0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800608e:	4b12      	ldr	r3, [pc, #72]	; (80060d8 <HAL_RCC_OscConfig+0x4a8>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d0f0      	beq.n	800607c <HAL_RCC_OscConfig+0x44c>
 800609a:	e018      	b.n	80060ce <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800609c:	4b10      	ldr	r3, [pc, #64]	; (80060e0 <HAL_RCC_OscConfig+0x4b0>)
 800609e:	2200      	movs	r2, #0
 80060a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a2:	f7fd fe23 	bl	8003cec <HAL_GetTick>
 80060a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060a8:	e008      	b.n	80060bc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060aa:	f7fd fe1f 	bl	8003cec <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d901      	bls.n	80060bc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e009      	b.n	80060d0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060bc:	4b06      	ldr	r3, [pc, #24]	; (80060d8 <HAL_RCC_OscConfig+0x4a8>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1f0      	bne.n	80060aa <HAL_RCC_OscConfig+0x47a>
 80060c8:	e001      	b.n	80060ce <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e000      	b.n	80060d0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3718      	adds	r7, #24
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	40023800 	.word	0x40023800
 80060dc:	40007000 	.word	0x40007000
 80060e0:	42470060 	.word	0x42470060

080060e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e01d      	b.n	8006132 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d106      	bne.n	8006110 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7fd fa4c 	bl	80035a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2202      	movs	r2, #2
 8006114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	3304      	adds	r3, #4
 8006120:	4619      	mov	r1, r3
 8006122:	4610      	mov	r0, r2
 8006124:	f000 fb56 	bl	80067d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800613a:	b480      	push	{r7}
 800613c:	b085      	sub	sp, #20
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68da      	ldr	r2, [r3, #12]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f042 0201 	orr.w	r2, r2, #1
 8006150:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f003 0307 	and.w	r3, r3, #7
 800615c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2b06      	cmp	r3, #6
 8006162:	d007      	beq.n	8006174 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f042 0201 	orr.w	r2, r2, #1
 8006172:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b082      	sub	sp, #8
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e01d      	b.n	80061d0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b00      	cmp	r3, #0
 800619e:	d106      	bne.n	80061ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f7fd f9c5 	bl	8003538 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2202      	movs	r2, #2
 80061b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	3304      	adds	r3, #4
 80061be:	4619      	mov	r1, r3
 80061c0:	4610      	mov	r0, r2
 80061c2:	f000 fb07 	bl	80067d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3708      	adds	r7, #8
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2201      	movs	r2, #1
 80061e8:	6839      	ldr	r1, [r7, #0]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 fd42 	bl	8006c74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a15      	ldr	r2, [pc, #84]	; (800624c <HAL_TIM_PWM_Start+0x74>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d004      	beq.n	8006204 <HAL_TIM_PWM_Start+0x2c>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a14      	ldr	r2, [pc, #80]	; (8006250 <HAL_TIM_PWM_Start+0x78>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d101      	bne.n	8006208 <HAL_TIM_PWM_Start+0x30>
 8006204:	2301      	movs	r3, #1
 8006206:	e000      	b.n	800620a <HAL_TIM_PWM_Start+0x32>
 8006208:	2300      	movs	r3, #0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d007      	beq.n	800621e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800621c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f003 0307 	and.w	r3, r3, #7
 8006228:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2b06      	cmp	r3, #6
 800622e:	d007      	beq.n	8006240 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0201 	orr.w	r2, r2, #1
 800623e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	40010000 	.word	0x40010000
 8006250:	40010400 	.word	0x40010400

08006254 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d101      	bne.n	8006268 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e083      	b.n	8006370 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b00      	cmp	r3, #0
 8006272:	d106      	bne.n	8006282 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f7fd f8e1 	bl	8003444 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2202      	movs	r2, #2
 8006286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	6812      	ldr	r2, [r2, #0]
 8006294:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006298:	f023 0307 	bic.w	r3, r3, #7
 800629c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	3304      	adds	r3, #4
 80062a6:	4619      	mov	r1, r3
 80062a8:	4610      	mov	r0, r2
 80062aa:	f000 fa93 	bl	80067d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	6a1b      	ldr	r3, [r3, #32]
 80062c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062d6:	f023 0303 	bic.w	r3, r3, #3
 80062da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	689a      	ldr	r2, [r3, #8]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	021b      	lsls	r3, r3, #8
 80062e6:	4313      	orrs	r3, r2
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80062f4:	f023 030c 	bic.w	r3, r3, #12
 80062f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006300:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006304:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	68da      	ldr	r2, [r3, #12]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	021b      	lsls	r3, r3, #8
 8006310:	4313      	orrs	r3, r2
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	4313      	orrs	r3, r2
 8006316:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	011a      	lsls	r2, r3, #4
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	031b      	lsls	r3, r3, #12
 8006324:	4313      	orrs	r3, r2
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	4313      	orrs	r3, r2
 800632a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006332:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800633a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	685a      	ldr	r2, [r3, #4]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	011b      	lsls	r3, r3, #4
 8006346:	4313      	orrs	r3, r2
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	4313      	orrs	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3718      	adds	r7, #24
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d002      	beq.n	800638e <HAL_TIM_Encoder_Start+0x16>
 8006388:	2b04      	cmp	r3, #4
 800638a:	d008      	beq.n	800639e <HAL_TIM_Encoder_Start+0x26>
 800638c:	e00f      	b.n	80063ae <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2201      	movs	r2, #1
 8006394:	2100      	movs	r1, #0
 8006396:	4618      	mov	r0, r3
 8006398:	f000 fc6c 	bl	8006c74 <TIM_CCxChannelCmd>
      break;
 800639c:	e016      	b.n	80063cc <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2201      	movs	r2, #1
 80063a4:	2104      	movs	r1, #4
 80063a6:	4618      	mov	r0, r3
 80063a8:	f000 fc64 	bl	8006c74 <TIM_CCxChannelCmd>
      break;
 80063ac:	e00e      	b.n	80063cc <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2201      	movs	r2, #1
 80063b4:	2100      	movs	r1, #0
 80063b6:	4618      	mov	r0, r3
 80063b8:	f000 fc5c 	bl	8006c74 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2201      	movs	r2, #1
 80063c2:	2104      	movs	r1, #4
 80063c4:	4618      	mov	r0, r3
 80063c6:	f000 fc55 	bl	8006c74 <TIM_CCxChannelCmd>
      break;
 80063ca:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f042 0201 	orr.w	r2, r2, #1
 80063da:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3708      	adds	r7, #8
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b082      	sub	sp, #8
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	f003 0302 	and.w	r3, r3, #2
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d122      	bne.n	8006442 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b02      	cmp	r3, #2
 8006408:	d11b      	bne.n	8006442 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f06f 0202 	mvn.w	r2, #2
 8006412:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	f003 0303 	and.w	r3, r3, #3
 8006424:	2b00      	cmp	r3, #0
 8006426:	d003      	beq.n	8006430 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 f9b5 	bl	8006798 <HAL_TIM_IC_CaptureCallback>
 800642e:	e005      	b.n	800643c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 f9a7 	bl	8006784 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f9b8 	bl	80067ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	f003 0304 	and.w	r3, r3, #4
 800644c:	2b04      	cmp	r3, #4
 800644e:	d122      	bne.n	8006496 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	f003 0304 	and.w	r3, r3, #4
 800645a:	2b04      	cmp	r3, #4
 800645c:	d11b      	bne.n	8006496 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f06f 0204 	mvn.w	r2, #4
 8006466:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2202      	movs	r2, #2
 800646c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006478:	2b00      	cmp	r3, #0
 800647a:	d003      	beq.n	8006484 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f98b 	bl	8006798 <HAL_TIM_IC_CaptureCallback>
 8006482:	e005      	b.n	8006490 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 f97d 	bl	8006784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f98e 	bl	80067ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	f003 0308 	and.w	r3, r3, #8
 80064a0:	2b08      	cmp	r3, #8
 80064a2:	d122      	bne.n	80064ea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	f003 0308 	and.w	r3, r3, #8
 80064ae:	2b08      	cmp	r3, #8
 80064b0:	d11b      	bne.n	80064ea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f06f 0208 	mvn.w	r2, #8
 80064ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2204      	movs	r2, #4
 80064c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	69db      	ldr	r3, [r3, #28]
 80064c8:	f003 0303 	and.w	r3, r3, #3
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d003      	beq.n	80064d8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 f961 	bl	8006798 <HAL_TIM_IC_CaptureCallback>
 80064d6:	e005      	b.n	80064e4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f953 	bl	8006784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f964 	bl	80067ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	f003 0310 	and.w	r3, r3, #16
 80064f4:	2b10      	cmp	r3, #16
 80064f6:	d122      	bne.n	800653e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	f003 0310 	and.w	r3, r3, #16
 8006502:	2b10      	cmp	r3, #16
 8006504:	d11b      	bne.n	800653e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f06f 0210 	mvn.w	r2, #16
 800650e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2208      	movs	r2, #8
 8006514:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	69db      	ldr	r3, [r3, #28]
 800651c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006520:	2b00      	cmp	r3, #0
 8006522:	d003      	beq.n	800652c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f937 	bl	8006798 <HAL_TIM_IC_CaptureCallback>
 800652a:	e005      	b.n	8006538 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f929 	bl	8006784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f93a 	bl	80067ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	2b01      	cmp	r3, #1
 800654a:	d10e      	bne.n	800656a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b01      	cmp	r3, #1
 8006558:	d107      	bne.n	800656a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f06f 0201 	mvn.w	r2, #1
 8006562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f7fb fa03 	bl	8001970 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006574:	2b80      	cmp	r3, #128	; 0x80
 8006576:	d10e      	bne.n	8006596 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006582:	2b80      	cmp	r3, #128	; 0x80
 8006584:	d107      	bne.n	8006596 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800658e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fc6d 	bl	8006e70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a0:	2b40      	cmp	r3, #64	; 0x40
 80065a2:	d10e      	bne.n	80065c2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ae:	2b40      	cmp	r3, #64	; 0x40
 80065b0:	d107      	bne.n	80065c2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 f8ff 	bl	80067c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	f003 0320 	and.w	r3, r3, #32
 80065cc:	2b20      	cmp	r3, #32
 80065ce:	d10e      	bne.n	80065ee <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	f003 0320 	and.w	r3, r3, #32
 80065da:	2b20      	cmp	r3, #32
 80065dc:	d107      	bne.n	80065ee <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f06f 0220 	mvn.w	r2, #32
 80065e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fc37 	bl	8006e5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065ee:	bf00      	nop
 80065f0:	3708      	adds	r7, #8
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
	...

080065f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800660a:	2b01      	cmp	r3, #1
 800660c:	d101      	bne.n	8006612 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800660e:	2302      	movs	r3, #2
 8006610:	e0b4      	b.n	800677c <HAL_TIM_PWM_ConfigChannel+0x184>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2202      	movs	r2, #2
 800661e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2b0c      	cmp	r3, #12
 8006626:	f200 809f 	bhi.w	8006768 <HAL_TIM_PWM_ConfigChannel+0x170>
 800662a:	a201      	add	r2, pc, #4	; (adr r2, 8006630 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800662c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006630:	08006665 	.word	0x08006665
 8006634:	08006769 	.word	0x08006769
 8006638:	08006769 	.word	0x08006769
 800663c:	08006769 	.word	0x08006769
 8006640:	080066a5 	.word	0x080066a5
 8006644:	08006769 	.word	0x08006769
 8006648:	08006769 	.word	0x08006769
 800664c:	08006769 	.word	0x08006769
 8006650:	080066e7 	.word	0x080066e7
 8006654:	08006769 	.word	0x08006769
 8006658:	08006769 	.word	0x08006769
 800665c:	08006769 	.word	0x08006769
 8006660:	08006727 	.word	0x08006727
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68b9      	ldr	r1, [r7, #8]
 800666a:	4618      	mov	r0, r3
 800666c:	f000 f952 	bl	8006914 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	699a      	ldr	r2, [r3, #24]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f042 0208 	orr.w	r2, r2, #8
 800667e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	699a      	ldr	r2, [r3, #24]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f022 0204 	bic.w	r2, r2, #4
 800668e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6999      	ldr	r1, [r3, #24]
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	691a      	ldr	r2, [r3, #16]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	619a      	str	r2, [r3, #24]
      break;
 80066a2:	e062      	b.n	800676a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68b9      	ldr	r1, [r7, #8]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 f9a2 	bl	80069f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	699a      	ldr	r2, [r3, #24]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	699a      	ldr	r2, [r3, #24]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6999      	ldr	r1, [r3, #24]
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	021a      	lsls	r2, r3, #8
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	430a      	orrs	r2, r1
 80066e2:	619a      	str	r2, [r3, #24]
      break;
 80066e4:	e041      	b.n	800676a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68b9      	ldr	r1, [r7, #8]
 80066ec:	4618      	mov	r0, r3
 80066ee:	f000 f9f7 	bl	8006ae0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	69da      	ldr	r2, [r3, #28]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f042 0208 	orr.w	r2, r2, #8
 8006700:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	69da      	ldr	r2, [r3, #28]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f022 0204 	bic.w	r2, r2, #4
 8006710:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	69d9      	ldr	r1, [r3, #28]
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	691a      	ldr	r2, [r3, #16]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	430a      	orrs	r2, r1
 8006722:	61da      	str	r2, [r3, #28]
      break;
 8006724:	e021      	b.n	800676a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68b9      	ldr	r1, [r7, #8]
 800672c:	4618      	mov	r0, r3
 800672e:	f000 fa4b 	bl	8006bc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	69da      	ldr	r2, [r3, #28]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006740:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	69da      	ldr	r2, [r3, #28]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	69d9      	ldr	r1, [r3, #28]
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	021a      	lsls	r2, r3, #8
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	430a      	orrs	r2, r1
 8006764:	61da      	str	r2, [r3, #28]
      break;
 8006766:	e000      	b.n	800676a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006768:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2201      	movs	r2, #1
 800676e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a40      	ldr	r2, [pc, #256]	; (80068e8 <TIM_Base_SetConfig+0x114>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d013      	beq.n	8006814 <TIM_Base_SetConfig+0x40>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f2:	d00f      	beq.n	8006814 <TIM_Base_SetConfig+0x40>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a3d      	ldr	r2, [pc, #244]	; (80068ec <TIM_Base_SetConfig+0x118>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d00b      	beq.n	8006814 <TIM_Base_SetConfig+0x40>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a3c      	ldr	r2, [pc, #240]	; (80068f0 <TIM_Base_SetConfig+0x11c>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d007      	beq.n	8006814 <TIM_Base_SetConfig+0x40>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a3b      	ldr	r2, [pc, #236]	; (80068f4 <TIM_Base_SetConfig+0x120>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d003      	beq.n	8006814 <TIM_Base_SetConfig+0x40>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a3a      	ldr	r2, [pc, #232]	; (80068f8 <TIM_Base_SetConfig+0x124>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d108      	bne.n	8006826 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800681a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	4313      	orrs	r3, r2
 8006824:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a2f      	ldr	r2, [pc, #188]	; (80068e8 <TIM_Base_SetConfig+0x114>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d02b      	beq.n	8006886 <TIM_Base_SetConfig+0xb2>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006834:	d027      	beq.n	8006886 <TIM_Base_SetConfig+0xb2>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a2c      	ldr	r2, [pc, #176]	; (80068ec <TIM_Base_SetConfig+0x118>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d023      	beq.n	8006886 <TIM_Base_SetConfig+0xb2>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a2b      	ldr	r2, [pc, #172]	; (80068f0 <TIM_Base_SetConfig+0x11c>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d01f      	beq.n	8006886 <TIM_Base_SetConfig+0xb2>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a2a      	ldr	r2, [pc, #168]	; (80068f4 <TIM_Base_SetConfig+0x120>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d01b      	beq.n	8006886 <TIM_Base_SetConfig+0xb2>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a29      	ldr	r2, [pc, #164]	; (80068f8 <TIM_Base_SetConfig+0x124>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d017      	beq.n	8006886 <TIM_Base_SetConfig+0xb2>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a28      	ldr	r2, [pc, #160]	; (80068fc <TIM_Base_SetConfig+0x128>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d013      	beq.n	8006886 <TIM_Base_SetConfig+0xb2>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a27      	ldr	r2, [pc, #156]	; (8006900 <TIM_Base_SetConfig+0x12c>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d00f      	beq.n	8006886 <TIM_Base_SetConfig+0xb2>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a26      	ldr	r2, [pc, #152]	; (8006904 <TIM_Base_SetConfig+0x130>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d00b      	beq.n	8006886 <TIM_Base_SetConfig+0xb2>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a25      	ldr	r2, [pc, #148]	; (8006908 <TIM_Base_SetConfig+0x134>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d007      	beq.n	8006886 <TIM_Base_SetConfig+0xb2>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a24      	ldr	r2, [pc, #144]	; (800690c <TIM_Base_SetConfig+0x138>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d003      	beq.n	8006886 <TIM_Base_SetConfig+0xb2>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a23      	ldr	r2, [pc, #140]	; (8006910 <TIM_Base_SetConfig+0x13c>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d108      	bne.n	8006898 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800688c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	4313      	orrs	r3, r2
 8006896:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	689a      	ldr	r2, [r3, #8]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a0a      	ldr	r2, [pc, #40]	; (80068e8 <TIM_Base_SetConfig+0x114>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d003      	beq.n	80068cc <TIM_Base_SetConfig+0xf8>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a0c      	ldr	r2, [pc, #48]	; (80068f8 <TIM_Base_SetConfig+0x124>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d103      	bne.n	80068d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	691a      	ldr	r2, [r3, #16]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	615a      	str	r2, [r3, #20]
}
 80068da:	bf00      	nop
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	40010000 	.word	0x40010000
 80068ec:	40000400 	.word	0x40000400
 80068f0:	40000800 	.word	0x40000800
 80068f4:	40000c00 	.word	0x40000c00
 80068f8:	40010400 	.word	0x40010400
 80068fc:	40014000 	.word	0x40014000
 8006900:	40014400 	.word	0x40014400
 8006904:	40014800 	.word	0x40014800
 8006908:	40001800 	.word	0x40001800
 800690c:	40001c00 	.word	0x40001c00
 8006910:	40002000 	.word	0x40002000

08006914 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006914:	b480      	push	{r7}
 8006916:	b087      	sub	sp, #28
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	f023 0201 	bic.w	r2, r3, #1
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f023 0303 	bic.w	r3, r3, #3
 800694a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	4313      	orrs	r3, r2
 8006954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	f023 0302 	bic.w	r3, r3, #2
 800695c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	4313      	orrs	r3, r2
 8006966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a20      	ldr	r2, [pc, #128]	; (80069ec <TIM_OC1_SetConfig+0xd8>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d003      	beq.n	8006978 <TIM_OC1_SetConfig+0x64>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a1f      	ldr	r2, [pc, #124]	; (80069f0 <TIM_OC1_SetConfig+0xdc>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d10c      	bne.n	8006992 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f023 0308 	bic.w	r3, r3, #8
 800697e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	4313      	orrs	r3, r2
 8006988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f023 0304 	bic.w	r3, r3, #4
 8006990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a15      	ldr	r2, [pc, #84]	; (80069ec <TIM_OC1_SetConfig+0xd8>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d003      	beq.n	80069a2 <TIM_OC1_SetConfig+0x8e>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a14      	ldr	r2, [pc, #80]	; (80069f0 <TIM_OC1_SetConfig+0xdc>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d111      	bne.n	80069c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	693a      	ldr	r2, [r7, #16]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	685a      	ldr	r2, [r3, #4]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	697a      	ldr	r2, [r7, #20]
 80069de:	621a      	str	r2, [r3, #32]
}
 80069e0:	bf00      	nop
 80069e2:	371c      	adds	r7, #28
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	40010000 	.word	0x40010000
 80069f0:	40010400 	.word	0x40010400

080069f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	f023 0210 	bic.w	r2, r3, #16
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	021b      	lsls	r3, r3, #8
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	f023 0320 	bic.w	r3, r3, #32
 8006a3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	011b      	lsls	r3, r3, #4
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a22      	ldr	r2, [pc, #136]	; (8006ad8 <TIM_OC2_SetConfig+0xe4>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d003      	beq.n	8006a5c <TIM_OC2_SetConfig+0x68>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a21      	ldr	r2, [pc, #132]	; (8006adc <TIM_OC2_SetConfig+0xe8>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d10d      	bne.n	8006a78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	011b      	lsls	r3, r3, #4
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a17      	ldr	r2, [pc, #92]	; (8006ad8 <TIM_OC2_SetConfig+0xe4>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d003      	beq.n	8006a88 <TIM_OC2_SetConfig+0x94>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a16      	ldr	r2, [pc, #88]	; (8006adc <TIM_OC2_SetConfig+0xe8>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d113      	bne.n	8006ab0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	685a      	ldr	r2, [r3, #4]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	621a      	str	r2, [r3, #32]
}
 8006aca:	bf00      	nop
 8006acc:	371c      	adds	r7, #28
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	40010000 	.word	0x40010000
 8006adc:	40010400 	.word	0x40010400

08006ae0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b087      	sub	sp, #28
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	69db      	ldr	r3, [r3, #28]
 8006b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f023 0303 	bic.w	r3, r3, #3
 8006b16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	021b      	lsls	r3, r3, #8
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a21      	ldr	r2, [pc, #132]	; (8006bc0 <TIM_OC3_SetConfig+0xe0>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d003      	beq.n	8006b46 <TIM_OC3_SetConfig+0x66>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a20      	ldr	r2, [pc, #128]	; (8006bc4 <TIM_OC3_SetConfig+0xe4>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d10d      	bne.n	8006b62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	021b      	lsls	r3, r3, #8
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a16      	ldr	r2, [pc, #88]	; (8006bc0 <TIM_OC3_SetConfig+0xe0>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d003      	beq.n	8006b72 <TIM_OC3_SetConfig+0x92>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a15      	ldr	r2, [pc, #84]	; (8006bc4 <TIM_OC3_SetConfig+0xe4>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d113      	bne.n	8006b9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	011b      	lsls	r3, r3, #4
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	011b      	lsls	r3, r3, #4
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	693a      	ldr	r2, [r7, #16]
 8006b9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	621a      	str	r2, [r3, #32]
}
 8006bb4:	bf00      	nop
 8006bb6:	371c      	adds	r7, #28
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	40010000 	.word	0x40010000
 8006bc4:	40010400 	.word	0x40010400

08006bc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b087      	sub	sp, #28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	021b      	lsls	r3, r3, #8
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	031b      	lsls	r3, r3, #12
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a12      	ldr	r2, [pc, #72]	; (8006c6c <TIM_OC4_SetConfig+0xa4>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d003      	beq.n	8006c30 <TIM_OC4_SetConfig+0x68>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a11      	ldr	r2, [pc, #68]	; (8006c70 <TIM_OC4_SetConfig+0xa8>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d109      	bne.n	8006c44 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	019b      	lsls	r3, r3, #6
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	693a      	ldr	r2, [r7, #16]
 8006c5c:	621a      	str	r2, [r3, #32]
}
 8006c5e:	bf00      	nop
 8006c60:	371c      	adds	r7, #28
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	40010000 	.word	0x40010000
 8006c70:	40010400 	.word	0x40010400

08006c74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b087      	sub	sp, #28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	f003 031f 	and.w	r3, r3, #31
 8006c86:	2201      	movs	r2, #1
 8006c88:	fa02 f303 	lsl.w	r3, r2, r3
 8006c8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6a1a      	ldr	r2, [r3, #32]
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	43db      	mvns	r3, r3
 8006c96:	401a      	ands	r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6a1a      	ldr	r2, [r3, #32]
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	f003 031f 	and.w	r3, r3, #31
 8006ca6:	6879      	ldr	r1, [r7, #4]
 8006ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8006cac:	431a      	orrs	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	621a      	str	r2, [r3, #32]
}
 8006cb2:	bf00      	nop
 8006cb4:	371c      	adds	r7, #28
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
	...

08006cc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d101      	bne.n	8006cd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	e05a      	b.n	8006d8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a21      	ldr	r2, [pc, #132]	; (8006d9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d022      	beq.n	8006d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d24:	d01d      	beq.n	8006d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a1d      	ldr	r2, [pc, #116]	; (8006da0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d018      	beq.n	8006d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a1b      	ldr	r2, [pc, #108]	; (8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d013      	beq.n	8006d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a1a      	ldr	r2, [pc, #104]	; (8006da8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d00e      	beq.n	8006d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a18      	ldr	r2, [pc, #96]	; (8006dac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d009      	beq.n	8006d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a17      	ldr	r2, [pc, #92]	; (8006db0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d004      	beq.n	8006d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a15      	ldr	r2, [pc, #84]	; (8006db4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d10c      	bne.n	8006d7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68ba      	ldr	r2, [r7, #8]
 8006d7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3714      	adds	r7, #20
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	40010000 	.word	0x40010000
 8006da0:	40000400 	.word	0x40000400
 8006da4:	40000800 	.word	0x40000800
 8006da8:	40000c00 	.word	0x40000c00
 8006dac:	40010400 	.word	0x40010400
 8006db0:	40014000 	.word	0x40014000
 8006db4:	40001800 	.word	0x40001800

08006db8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d101      	bne.n	8006dd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	e03d      	b.n	8006e50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	69db      	ldr	r3, [r3, #28]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e78:	bf00      	nop
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d101      	bne.n	8006e96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e03f      	b.n	8006f16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d106      	bne.n	8006eb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f7fc fcfa 	bl	80038a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2224      	movs	r2, #36	; 0x24
 8006eb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68da      	ldr	r2, [r3, #12]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ec6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fb23 	bl	8007514 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	691a      	ldr	r2, [r3, #16]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006edc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	695a      	ldr	r2, [r3, #20]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006eec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68da      	ldr	r2, [r3, #12]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006efc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2220      	movs	r2, #32
 8006f08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3708      	adds	r7, #8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b088      	sub	sp, #32
 8006f22:	af02      	add	r7, sp, #8
 8006f24:	60f8      	str	r0, [r7, #12]
 8006f26:	60b9      	str	r1, [r7, #8]
 8006f28:	603b      	str	r3, [r7, #0]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b20      	cmp	r3, #32
 8006f3c:	f040 8083 	bne.w	8007046 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d002      	beq.n	8006f4c <HAL_UART_Transmit+0x2e>
 8006f46:	88fb      	ldrh	r3, [r7, #6]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d101      	bne.n	8006f50 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e07b      	b.n	8007048 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d101      	bne.n	8006f5e <HAL_UART_Transmit+0x40>
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	e074      	b.n	8007048 <HAL_UART_Transmit+0x12a>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2221      	movs	r2, #33	; 0x21
 8006f70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006f74:	f7fc feba 	bl	8003cec <HAL_GetTick>
 8006f78:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	88fa      	ldrh	r2, [r7, #6]
 8006f7e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	88fa      	ldrh	r2, [r7, #6]
 8006f84:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006f8e:	e042      	b.n	8007016 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	3b01      	subs	r3, #1
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fa6:	d122      	bne.n	8006fee <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	9300      	str	r3, [sp, #0]
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	2180      	movs	r1, #128	; 0x80
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f000 fa30 	bl	8007418 <UART_WaitOnFlagUntilTimeout>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e042      	b.n	8007048 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	881b      	ldrh	r3, [r3, #0]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fd4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d103      	bne.n	8006fe6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	3302      	adds	r3, #2
 8006fe2:	60bb      	str	r3, [r7, #8]
 8006fe4:	e017      	b.n	8007016 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	60bb      	str	r3, [r7, #8]
 8006fec:	e013      	b.n	8007016 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	2180      	movs	r1, #128	; 0x80
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f000 fa0d 	bl	8007418 <UART_WaitOnFlagUntilTimeout>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d001      	beq.n	8007008 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8007004:	2303      	movs	r3, #3
 8007006:	e01f      	b.n	8007048 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	1c5a      	adds	r2, r3, #1
 800700c:	60ba      	str	r2, [r7, #8]
 800700e:	781a      	ldrb	r2, [r3, #0]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800701a:	b29b      	uxth	r3, r3
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1b7      	bne.n	8006f90 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	9300      	str	r3, [sp, #0]
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	2200      	movs	r2, #0
 8007028:	2140      	movs	r1, #64	; 0x40
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f000 f9f4 	bl	8007418 <UART_WaitOnFlagUntilTimeout>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d001      	beq.n	800703a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e006      	b.n	8007048 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2220      	movs	r2, #32
 800703e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007042:	2300      	movs	r3, #0
 8007044:	e000      	b.n	8007048 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007046:	2302      	movs	r3, #2
  }
}
 8007048:	4618      	mov	r0, r3
 800704a:	3718      	adds	r7, #24
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b088      	sub	sp, #32
 8007054:	af02      	add	r7, sp, #8
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	603b      	str	r3, [r7, #0]
 800705c:	4613      	mov	r3, r2
 800705e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007060:	2300      	movs	r3, #0
 8007062:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800706a:	b2db      	uxtb	r3, r3
 800706c:	2b20      	cmp	r3, #32
 800706e:	f040 8090 	bne.w	8007192 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <HAL_UART_Receive+0x2e>
 8007078:	88fb      	ldrh	r3, [r7, #6]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e088      	b.n	8007194 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007088:	2b01      	cmp	r3, #1
 800708a:	d101      	bne.n	8007090 <HAL_UART_Receive+0x40>
 800708c:	2302      	movs	r3, #2
 800708e:	e081      	b.n	8007194 <HAL_UART_Receive+0x144>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2222      	movs	r2, #34	; 0x22
 80070a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80070a6:	f7fc fe21 	bl	8003cec <HAL_GetTick>
 80070aa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	88fa      	ldrh	r2, [r7, #6]
 80070b0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	88fa      	ldrh	r2, [r7, #6]
 80070b6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80070c0:	e05c      	b.n	800717c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	3b01      	subs	r3, #1
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070d8:	d12b      	bne.n	8007132 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	2200      	movs	r2, #0
 80070e2:	2120      	movs	r1, #32
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f000 f997 	bl	8007418 <UART_WaitOnFlagUntilTimeout>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d001      	beq.n	80070f4 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e04f      	b.n	8007194 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10c      	bne.n	800711a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	b29b      	uxth	r3, r3
 8007108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800710c:	b29a      	uxth	r2, r3
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	3302      	adds	r3, #2
 8007116:	60bb      	str	r3, [r7, #8]
 8007118:	e030      	b.n	800717c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	b29b      	uxth	r3, r3
 8007122:	b2db      	uxtb	r3, r3
 8007124:	b29a      	uxth	r2, r3
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	3301      	adds	r3, #1
 800712e:	60bb      	str	r3, [r7, #8]
 8007130:	e024      	b.n	800717c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	9300      	str	r3, [sp, #0]
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	2200      	movs	r2, #0
 800713a:	2120      	movs	r1, #32
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f000 f96b 	bl	8007418 <UART_WaitOnFlagUntilTimeout>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d001      	beq.n	800714c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e023      	b.n	8007194 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d108      	bne.n	8007166 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	6859      	ldr	r1, [r3, #4]
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	1c5a      	adds	r2, r3, #1
 800715e:	60ba      	str	r2, [r7, #8]
 8007160:	b2ca      	uxtb	r2, r1
 8007162:	701a      	strb	r2, [r3, #0]
 8007164:	e00a      	b.n	800717c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	b2da      	uxtb	r2, r3
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	1c59      	adds	r1, r3, #1
 8007172:	60b9      	str	r1, [r7, #8]
 8007174:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007178:	b2d2      	uxtb	r2, r2
 800717a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007180:	b29b      	uxth	r3, r3
 8007182:	2b00      	cmp	r3, #0
 8007184:	d19d      	bne.n	80070c2 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2220      	movs	r2, #32
 800718a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	e000      	b.n	8007194 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007192:	2302      	movs	r3, #2
  }
}
 8007194:	4618      	mov	r0, r3
 8007196:	3718      	adds	r7, #24
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	4613      	mov	r3, r2
 80071a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	2b20      	cmp	r3, #32
 80071b4:	d166      	bne.n	8007284 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d002      	beq.n	80071c2 <HAL_UART_Receive_DMA+0x26>
 80071bc:	88fb      	ldrh	r3, [r7, #6]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d101      	bne.n	80071c6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e05f      	b.n	8007286 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d101      	bne.n	80071d4 <HAL_UART_Receive_DMA+0x38>
 80071d0:	2302      	movs	r3, #2
 80071d2:	e058      	b.n	8007286 <HAL_UART_Receive_DMA+0xea>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80071dc:	68ba      	ldr	r2, [r7, #8]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	88fa      	ldrh	r2, [r7, #6]
 80071e6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2222      	movs	r2, #34	; 0x22
 80071f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071fa:	4a25      	ldr	r2, [pc, #148]	; (8007290 <HAL_UART_Receive_DMA+0xf4>)
 80071fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007202:	4a24      	ldr	r2, [pc, #144]	; (8007294 <HAL_UART_Receive_DMA+0xf8>)
 8007204:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800720a:	4a23      	ldr	r2, [pc, #140]	; (8007298 <HAL_UART_Receive_DMA+0xfc>)
 800720c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007212:	2200      	movs	r2, #0
 8007214:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8007216:	f107 0308 	add.w	r3, r7, #8
 800721a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	3304      	adds	r3, #4
 8007226:	4619      	mov	r1, r3
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	88fb      	ldrh	r3, [r7, #6]
 800722e:	f7fd fda7 	bl	8004d80 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8007232:	2300      	movs	r3, #0
 8007234:	613b      	str	r3, [r7, #16]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	613b      	str	r3, [r7, #16]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	613b      	str	r3, [r7, #16]
 8007246:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68da      	ldr	r2, [r3, #12]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800725e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	695a      	ldr	r2, [r3, #20]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f042 0201 	orr.w	r2, r2, #1
 800726e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	695a      	ldr	r2, [r3, #20]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800727e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007280:	2300      	movs	r3, #0
 8007282:	e000      	b.n	8007286 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007284:	2302      	movs	r3, #2
  }
}
 8007286:	4618      	mov	r0, r3
 8007288:	3718      	adds	r7, #24
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	08007301 	.word	0x08007301
 8007294:	08007369 	.word	0x08007369
 8007298:	08007385 	.word	0x08007385

0800729c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80072a4:	bf00      	nop
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80072b8:	bf00      	nop
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 80072cc:	2300      	movs	r3, #0
 80072ce:	60fb      	str	r3, [r7, #12]
 80072d0:	2300      	movs	r3, #0
 80072d2:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	b2da      	uxtb	r2, r3
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	4313      	orrs	r3, r2
 80072f2:	b2db      	uxtb	r3, r3
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007318:	2b00      	cmp	r3, #0
 800731a:	d11e      	bne.n	800735a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68da      	ldr	r2, [r3, #12]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007330:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	695a      	ldr	r2, [r3, #20]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f022 0201 	bic.w	r2, r2, #1
 8007340:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	695a      	ldr	r2, [r3, #20]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007350:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2220      	movs	r2, #32
 8007356:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f7fa fc88 	bl	8001c70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007360:	bf00      	nop
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007374:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f7ff ff90 	bl	800729c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800737c:	bf00      	nop
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800738c:	2300      	movs	r3, #0
 800738e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007394:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	695b      	ldr	r3, [r3, #20]
 800739c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073a0:	2b80      	cmp	r3, #128	; 0x80
 80073a2:	bf0c      	ite	eq
 80073a4:	2301      	moveq	r3, #1
 80073a6:	2300      	movne	r3, #0
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	2b21      	cmp	r3, #33	; 0x21
 80073b6:	d108      	bne.n	80073ca <UART_DMAError+0x46>
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d005      	beq.n	80073ca <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	2200      	movs	r2, #0
 80073c2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80073c4:	68b8      	ldr	r0, [r7, #8]
 80073c6:	f000 f871 	bl	80074ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d4:	2b40      	cmp	r3, #64	; 0x40
 80073d6:	bf0c      	ite	eq
 80073d8:	2301      	moveq	r3, #1
 80073da:	2300      	movne	r3, #0
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	2b22      	cmp	r3, #34	; 0x22
 80073ea:	d108      	bne.n	80073fe <UART_DMAError+0x7a>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d005      	beq.n	80073fe <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	2200      	movs	r2, #0
 80073f6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80073f8:	68b8      	ldr	r0, [r7, #8]
 80073fa:	f000 f86d 	bl	80074d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007402:	f043 0210 	orr.w	r2, r3, #16
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800740a:	68b8      	ldr	r0, [r7, #8]
 800740c:	f7ff ff50 	bl	80072b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007410:	bf00      	nop
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	603b      	str	r3, [r7, #0]
 8007424:	4613      	mov	r3, r2
 8007426:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007428:	e02c      	b.n	8007484 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007430:	d028      	beq.n	8007484 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d007      	beq.n	8007448 <UART_WaitOnFlagUntilTimeout+0x30>
 8007438:	f7fc fc58 	bl	8003cec <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	69ba      	ldr	r2, [r7, #24]
 8007444:	429a      	cmp	r2, r3
 8007446:	d21d      	bcs.n	8007484 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68da      	ldr	r2, [r3, #12]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007456:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	695a      	ldr	r2, [r3, #20]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f022 0201 	bic.w	r2, r2, #1
 8007466:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2220      	movs	r2, #32
 800746c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2220      	movs	r2, #32
 8007474:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e00f      	b.n	80074a4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	4013      	ands	r3, r2
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	429a      	cmp	r2, r3
 8007492:	bf0c      	ite	eq
 8007494:	2301      	moveq	r3, #1
 8007496:	2300      	movne	r3, #0
 8007498:	b2db      	uxtb	r3, r3
 800749a:	461a      	mov	r2, r3
 800749c:	79fb      	ldrb	r3, [r7, #7]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d0c3      	beq.n	800742a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68da      	ldr	r2, [r3, #12]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80074c2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2220      	movs	r2, #32
 80074c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80074cc:	bf00      	nop
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68da      	ldr	r2, [r3, #12]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80074ee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	695a      	ldr	r2, [r3, #20]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f022 0201 	bic.w	r2, r2, #1
 80074fe:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2220      	movs	r2, #32
 8007504:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007518:	b085      	sub	sp, #20
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	68da      	ldr	r2, [r3, #12]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	430a      	orrs	r2, r1
 8007532:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	689a      	ldr	r2, [r3, #8]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	431a      	orrs	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	431a      	orrs	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	69db      	ldr	r3, [r3, #28]
 8007548:	4313      	orrs	r3, r2
 800754a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007556:	f023 030c 	bic.w	r3, r3, #12
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	6812      	ldr	r2, [r2, #0]
 800755e:	68f9      	ldr	r1, [r7, #12]
 8007560:	430b      	orrs	r3, r1
 8007562:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	699a      	ldr	r2, [r3, #24]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	430a      	orrs	r2, r1
 8007578:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007582:	f040 818b 	bne.w	800789c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4ac1      	ldr	r2, [pc, #772]	; (8007890 <UART_SetConfig+0x37c>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d005      	beq.n	800759c <UART_SetConfig+0x88>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4abf      	ldr	r2, [pc, #764]	; (8007894 <UART_SetConfig+0x380>)
 8007596:	4293      	cmp	r3, r2
 8007598:	f040 80bd 	bne.w	8007716 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800759c:	f7fe f994 	bl	80058c8 <HAL_RCC_GetPCLK2Freq>
 80075a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	461d      	mov	r5, r3
 80075a6:	f04f 0600 	mov.w	r6, #0
 80075aa:	46a8      	mov	r8, r5
 80075ac:	46b1      	mov	r9, r6
 80075ae:	eb18 0308 	adds.w	r3, r8, r8
 80075b2:	eb49 0409 	adc.w	r4, r9, r9
 80075b6:	4698      	mov	r8, r3
 80075b8:	46a1      	mov	r9, r4
 80075ba:	eb18 0805 	adds.w	r8, r8, r5
 80075be:	eb49 0906 	adc.w	r9, r9, r6
 80075c2:	f04f 0100 	mov.w	r1, #0
 80075c6:	f04f 0200 	mov.w	r2, #0
 80075ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80075ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80075d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80075d6:	4688      	mov	r8, r1
 80075d8:	4691      	mov	r9, r2
 80075da:	eb18 0005 	adds.w	r0, r8, r5
 80075de:	eb49 0106 	adc.w	r1, r9, r6
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	461d      	mov	r5, r3
 80075e8:	f04f 0600 	mov.w	r6, #0
 80075ec:	196b      	adds	r3, r5, r5
 80075ee:	eb46 0406 	adc.w	r4, r6, r6
 80075f2:	461a      	mov	r2, r3
 80075f4:	4623      	mov	r3, r4
 80075f6:	f7f9 fb47 	bl	8000c88 <__aeabi_uldivmod>
 80075fa:	4603      	mov	r3, r0
 80075fc:	460c      	mov	r4, r1
 80075fe:	461a      	mov	r2, r3
 8007600:	4ba5      	ldr	r3, [pc, #660]	; (8007898 <UART_SetConfig+0x384>)
 8007602:	fba3 2302 	umull	r2, r3, r3, r2
 8007606:	095b      	lsrs	r3, r3, #5
 8007608:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	461d      	mov	r5, r3
 8007610:	f04f 0600 	mov.w	r6, #0
 8007614:	46a9      	mov	r9, r5
 8007616:	46b2      	mov	sl, r6
 8007618:	eb19 0309 	adds.w	r3, r9, r9
 800761c:	eb4a 040a 	adc.w	r4, sl, sl
 8007620:	4699      	mov	r9, r3
 8007622:	46a2      	mov	sl, r4
 8007624:	eb19 0905 	adds.w	r9, r9, r5
 8007628:	eb4a 0a06 	adc.w	sl, sl, r6
 800762c:	f04f 0100 	mov.w	r1, #0
 8007630:	f04f 0200 	mov.w	r2, #0
 8007634:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007638:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800763c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007640:	4689      	mov	r9, r1
 8007642:	4692      	mov	sl, r2
 8007644:	eb19 0005 	adds.w	r0, r9, r5
 8007648:	eb4a 0106 	adc.w	r1, sl, r6
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	461d      	mov	r5, r3
 8007652:	f04f 0600 	mov.w	r6, #0
 8007656:	196b      	adds	r3, r5, r5
 8007658:	eb46 0406 	adc.w	r4, r6, r6
 800765c:	461a      	mov	r2, r3
 800765e:	4623      	mov	r3, r4
 8007660:	f7f9 fb12 	bl	8000c88 <__aeabi_uldivmod>
 8007664:	4603      	mov	r3, r0
 8007666:	460c      	mov	r4, r1
 8007668:	461a      	mov	r2, r3
 800766a:	4b8b      	ldr	r3, [pc, #556]	; (8007898 <UART_SetConfig+0x384>)
 800766c:	fba3 1302 	umull	r1, r3, r3, r2
 8007670:	095b      	lsrs	r3, r3, #5
 8007672:	2164      	movs	r1, #100	; 0x64
 8007674:	fb01 f303 	mul.w	r3, r1, r3
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	00db      	lsls	r3, r3, #3
 800767c:	3332      	adds	r3, #50	; 0x32
 800767e:	4a86      	ldr	r2, [pc, #536]	; (8007898 <UART_SetConfig+0x384>)
 8007680:	fba2 2303 	umull	r2, r3, r2, r3
 8007684:	095b      	lsrs	r3, r3, #5
 8007686:	005b      	lsls	r3, r3, #1
 8007688:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800768c:	4498      	add	r8, r3
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	461d      	mov	r5, r3
 8007692:	f04f 0600 	mov.w	r6, #0
 8007696:	46a9      	mov	r9, r5
 8007698:	46b2      	mov	sl, r6
 800769a:	eb19 0309 	adds.w	r3, r9, r9
 800769e:	eb4a 040a 	adc.w	r4, sl, sl
 80076a2:	4699      	mov	r9, r3
 80076a4:	46a2      	mov	sl, r4
 80076a6:	eb19 0905 	adds.w	r9, r9, r5
 80076aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80076ae:	f04f 0100 	mov.w	r1, #0
 80076b2:	f04f 0200 	mov.w	r2, #0
 80076b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80076be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80076c2:	4689      	mov	r9, r1
 80076c4:	4692      	mov	sl, r2
 80076c6:	eb19 0005 	adds.w	r0, r9, r5
 80076ca:	eb4a 0106 	adc.w	r1, sl, r6
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	461d      	mov	r5, r3
 80076d4:	f04f 0600 	mov.w	r6, #0
 80076d8:	196b      	adds	r3, r5, r5
 80076da:	eb46 0406 	adc.w	r4, r6, r6
 80076de:	461a      	mov	r2, r3
 80076e0:	4623      	mov	r3, r4
 80076e2:	f7f9 fad1 	bl	8000c88 <__aeabi_uldivmod>
 80076e6:	4603      	mov	r3, r0
 80076e8:	460c      	mov	r4, r1
 80076ea:	461a      	mov	r2, r3
 80076ec:	4b6a      	ldr	r3, [pc, #424]	; (8007898 <UART_SetConfig+0x384>)
 80076ee:	fba3 1302 	umull	r1, r3, r3, r2
 80076f2:	095b      	lsrs	r3, r3, #5
 80076f4:	2164      	movs	r1, #100	; 0x64
 80076f6:	fb01 f303 	mul.w	r3, r1, r3
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	00db      	lsls	r3, r3, #3
 80076fe:	3332      	adds	r3, #50	; 0x32
 8007700:	4a65      	ldr	r2, [pc, #404]	; (8007898 <UART_SetConfig+0x384>)
 8007702:	fba2 2303 	umull	r2, r3, r2, r3
 8007706:	095b      	lsrs	r3, r3, #5
 8007708:	f003 0207 	and.w	r2, r3, #7
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4442      	add	r2, r8
 8007712:	609a      	str	r2, [r3, #8]
 8007714:	e26f      	b.n	8007bf6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007716:	f7fe f8c3 	bl	80058a0 <HAL_RCC_GetPCLK1Freq>
 800771a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	461d      	mov	r5, r3
 8007720:	f04f 0600 	mov.w	r6, #0
 8007724:	46a8      	mov	r8, r5
 8007726:	46b1      	mov	r9, r6
 8007728:	eb18 0308 	adds.w	r3, r8, r8
 800772c:	eb49 0409 	adc.w	r4, r9, r9
 8007730:	4698      	mov	r8, r3
 8007732:	46a1      	mov	r9, r4
 8007734:	eb18 0805 	adds.w	r8, r8, r5
 8007738:	eb49 0906 	adc.w	r9, r9, r6
 800773c:	f04f 0100 	mov.w	r1, #0
 8007740:	f04f 0200 	mov.w	r2, #0
 8007744:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007748:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800774c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007750:	4688      	mov	r8, r1
 8007752:	4691      	mov	r9, r2
 8007754:	eb18 0005 	adds.w	r0, r8, r5
 8007758:	eb49 0106 	adc.w	r1, r9, r6
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	461d      	mov	r5, r3
 8007762:	f04f 0600 	mov.w	r6, #0
 8007766:	196b      	adds	r3, r5, r5
 8007768:	eb46 0406 	adc.w	r4, r6, r6
 800776c:	461a      	mov	r2, r3
 800776e:	4623      	mov	r3, r4
 8007770:	f7f9 fa8a 	bl	8000c88 <__aeabi_uldivmod>
 8007774:	4603      	mov	r3, r0
 8007776:	460c      	mov	r4, r1
 8007778:	461a      	mov	r2, r3
 800777a:	4b47      	ldr	r3, [pc, #284]	; (8007898 <UART_SetConfig+0x384>)
 800777c:	fba3 2302 	umull	r2, r3, r3, r2
 8007780:	095b      	lsrs	r3, r3, #5
 8007782:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	461d      	mov	r5, r3
 800778a:	f04f 0600 	mov.w	r6, #0
 800778e:	46a9      	mov	r9, r5
 8007790:	46b2      	mov	sl, r6
 8007792:	eb19 0309 	adds.w	r3, r9, r9
 8007796:	eb4a 040a 	adc.w	r4, sl, sl
 800779a:	4699      	mov	r9, r3
 800779c:	46a2      	mov	sl, r4
 800779e:	eb19 0905 	adds.w	r9, r9, r5
 80077a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80077a6:	f04f 0100 	mov.w	r1, #0
 80077aa:	f04f 0200 	mov.w	r2, #0
 80077ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80077b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80077ba:	4689      	mov	r9, r1
 80077bc:	4692      	mov	sl, r2
 80077be:	eb19 0005 	adds.w	r0, r9, r5
 80077c2:	eb4a 0106 	adc.w	r1, sl, r6
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	461d      	mov	r5, r3
 80077cc:	f04f 0600 	mov.w	r6, #0
 80077d0:	196b      	adds	r3, r5, r5
 80077d2:	eb46 0406 	adc.w	r4, r6, r6
 80077d6:	461a      	mov	r2, r3
 80077d8:	4623      	mov	r3, r4
 80077da:	f7f9 fa55 	bl	8000c88 <__aeabi_uldivmod>
 80077de:	4603      	mov	r3, r0
 80077e0:	460c      	mov	r4, r1
 80077e2:	461a      	mov	r2, r3
 80077e4:	4b2c      	ldr	r3, [pc, #176]	; (8007898 <UART_SetConfig+0x384>)
 80077e6:	fba3 1302 	umull	r1, r3, r3, r2
 80077ea:	095b      	lsrs	r3, r3, #5
 80077ec:	2164      	movs	r1, #100	; 0x64
 80077ee:	fb01 f303 	mul.w	r3, r1, r3
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	00db      	lsls	r3, r3, #3
 80077f6:	3332      	adds	r3, #50	; 0x32
 80077f8:	4a27      	ldr	r2, [pc, #156]	; (8007898 <UART_SetConfig+0x384>)
 80077fa:	fba2 2303 	umull	r2, r3, r2, r3
 80077fe:	095b      	lsrs	r3, r3, #5
 8007800:	005b      	lsls	r3, r3, #1
 8007802:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007806:	4498      	add	r8, r3
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	461d      	mov	r5, r3
 800780c:	f04f 0600 	mov.w	r6, #0
 8007810:	46a9      	mov	r9, r5
 8007812:	46b2      	mov	sl, r6
 8007814:	eb19 0309 	adds.w	r3, r9, r9
 8007818:	eb4a 040a 	adc.w	r4, sl, sl
 800781c:	4699      	mov	r9, r3
 800781e:	46a2      	mov	sl, r4
 8007820:	eb19 0905 	adds.w	r9, r9, r5
 8007824:	eb4a 0a06 	adc.w	sl, sl, r6
 8007828:	f04f 0100 	mov.w	r1, #0
 800782c:	f04f 0200 	mov.w	r2, #0
 8007830:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007834:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007838:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800783c:	4689      	mov	r9, r1
 800783e:	4692      	mov	sl, r2
 8007840:	eb19 0005 	adds.w	r0, r9, r5
 8007844:	eb4a 0106 	adc.w	r1, sl, r6
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	461d      	mov	r5, r3
 800784e:	f04f 0600 	mov.w	r6, #0
 8007852:	196b      	adds	r3, r5, r5
 8007854:	eb46 0406 	adc.w	r4, r6, r6
 8007858:	461a      	mov	r2, r3
 800785a:	4623      	mov	r3, r4
 800785c:	f7f9 fa14 	bl	8000c88 <__aeabi_uldivmod>
 8007860:	4603      	mov	r3, r0
 8007862:	460c      	mov	r4, r1
 8007864:	461a      	mov	r2, r3
 8007866:	4b0c      	ldr	r3, [pc, #48]	; (8007898 <UART_SetConfig+0x384>)
 8007868:	fba3 1302 	umull	r1, r3, r3, r2
 800786c:	095b      	lsrs	r3, r3, #5
 800786e:	2164      	movs	r1, #100	; 0x64
 8007870:	fb01 f303 	mul.w	r3, r1, r3
 8007874:	1ad3      	subs	r3, r2, r3
 8007876:	00db      	lsls	r3, r3, #3
 8007878:	3332      	adds	r3, #50	; 0x32
 800787a:	4a07      	ldr	r2, [pc, #28]	; (8007898 <UART_SetConfig+0x384>)
 800787c:	fba2 2303 	umull	r2, r3, r2, r3
 8007880:	095b      	lsrs	r3, r3, #5
 8007882:	f003 0207 	and.w	r2, r3, #7
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4442      	add	r2, r8
 800788c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800788e:	e1b2      	b.n	8007bf6 <UART_SetConfig+0x6e2>
 8007890:	40011000 	.word	0x40011000
 8007894:	40011400 	.word	0x40011400
 8007898:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4ad7      	ldr	r2, [pc, #860]	; (8007c00 <UART_SetConfig+0x6ec>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d005      	beq.n	80078b2 <UART_SetConfig+0x39e>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4ad6      	ldr	r2, [pc, #856]	; (8007c04 <UART_SetConfig+0x6f0>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	f040 80d1 	bne.w	8007a54 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80078b2:	f7fe f809 	bl	80058c8 <HAL_RCC_GetPCLK2Freq>
 80078b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	469a      	mov	sl, r3
 80078bc:	f04f 0b00 	mov.w	fp, #0
 80078c0:	46d0      	mov	r8, sl
 80078c2:	46d9      	mov	r9, fp
 80078c4:	eb18 0308 	adds.w	r3, r8, r8
 80078c8:	eb49 0409 	adc.w	r4, r9, r9
 80078cc:	4698      	mov	r8, r3
 80078ce:	46a1      	mov	r9, r4
 80078d0:	eb18 080a 	adds.w	r8, r8, sl
 80078d4:	eb49 090b 	adc.w	r9, r9, fp
 80078d8:	f04f 0100 	mov.w	r1, #0
 80078dc:	f04f 0200 	mov.w	r2, #0
 80078e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80078e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80078e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80078ec:	4688      	mov	r8, r1
 80078ee:	4691      	mov	r9, r2
 80078f0:	eb1a 0508 	adds.w	r5, sl, r8
 80078f4:	eb4b 0609 	adc.w	r6, fp, r9
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	4619      	mov	r1, r3
 80078fe:	f04f 0200 	mov.w	r2, #0
 8007902:	f04f 0300 	mov.w	r3, #0
 8007906:	f04f 0400 	mov.w	r4, #0
 800790a:	0094      	lsls	r4, r2, #2
 800790c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007910:	008b      	lsls	r3, r1, #2
 8007912:	461a      	mov	r2, r3
 8007914:	4623      	mov	r3, r4
 8007916:	4628      	mov	r0, r5
 8007918:	4631      	mov	r1, r6
 800791a:	f7f9 f9b5 	bl	8000c88 <__aeabi_uldivmod>
 800791e:	4603      	mov	r3, r0
 8007920:	460c      	mov	r4, r1
 8007922:	461a      	mov	r2, r3
 8007924:	4bb8      	ldr	r3, [pc, #736]	; (8007c08 <UART_SetConfig+0x6f4>)
 8007926:	fba3 2302 	umull	r2, r3, r3, r2
 800792a:	095b      	lsrs	r3, r3, #5
 800792c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	469b      	mov	fp, r3
 8007934:	f04f 0c00 	mov.w	ip, #0
 8007938:	46d9      	mov	r9, fp
 800793a:	46e2      	mov	sl, ip
 800793c:	eb19 0309 	adds.w	r3, r9, r9
 8007940:	eb4a 040a 	adc.w	r4, sl, sl
 8007944:	4699      	mov	r9, r3
 8007946:	46a2      	mov	sl, r4
 8007948:	eb19 090b 	adds.w	r9, r9, fp
 800794c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007950:	f04f 0100 	mov.w	r1, #0
 8007954:	f04f 0200 	mov.w	r2, #0
 8007958:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800795c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007960:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007964:	4689      	mov	r9, r1
 8007966:	4692      	mov	sl, r2
 8007968:	eb1b 0509 	adds.w	r5, fp, r9
 800796c:	eb4c 060a 	adc.w	r6, ip, sl
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	4619      	mov	r1, r3
 8007976:	f04f 0200 	mov.w	r2, #0
 800797a:	f04f 0300 	mov.w	r3, #0
 800797e:	f04f 0400 	mov.w	r4, #0
 8007982:	0094      	lsls	r4, r2, #2
 8007984:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007988:	008b      	lsls	r3, r1, #2
 800798a:	461a      	mov	r2, r3
 800798c:	4623      	mov	r3, r4
 800798e:	4628      	mov	r0, r5
 8007990:	4631      	mov	r1, r6
 8007992:	f7f9 f979 	bl	8000c88 <__aeabi_uldivmod>
 8007996:	4603      	mov	r3, r0
 8007998:	460c      	mov	r4, r1
 800799a:	461a      	mov	r2, r3
 800799c:	4b9a      	ldr	r3, [pc, #616]	; (8007c08 <UART_SetConfig+0x6f4>)
 800799e:	fba3 1302 	umull	r1, r3, r3, r2
 80079a2:	095b      	lsrs	r3, r3, #5
 80079a4:	2164      	movs	r1, #100	; 0x64
 80079a6:	fb01 f303 	mul.w	r3, r1, r3
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	011b      	lsls	r3, r3, #4
 80079ae:	3332      	adds	r3, #50	; 0x32
 80079b0:	4a95      	ldr	r2, [pc, #596]	; (8007c08 <UART_SetConfig+0x6f4>)
 80079b2:	fba2 2303 	umull	r2, r3, r2, r3
 80079b6:	095b      	lsrs	r3, r3, #5
 80079b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079bc:	4498      	add	r8, r3
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	469b      	mov	fp, r3
 80079c2:	f04f 0c00 	mov.w	ip, #0
 80079c6:	46d9      	mov	r9, fp
 80079c8:	46e2      	mov	sl, ip
 80079ca:	eb19 0309 	adds.w	r3, r9, r9
 80079ce:	eb4a 040a 	adc.w	r4, sl, sl
 80079d2:	4699      	mov	r9, r3
 80079d4:	46a2      	mov	sl, r4
 80079d6:	eb19 090b 	adds.w	r9, r9, fp
 80079da:	eb4a 0a0c 	adc.w	sl, sl, ip
 80079de:	f04f 0100 	mov.w	r1, #0
 80079e2:	f04f 0200 	mov.w	r2, #0
 80079e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80079ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80079f2:	4689      	mov	r9, r1
 80079f4:	4692      	mov	sl, r2
 80079f6:	eb1b 0509 	adds.w	r5, fp, r9
 80079fa:	eb4c 060a 	adc.w	r6, ip, sl
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	4619      	mov	r1, r3
 8007a04:	f04f 0200 	mov.w	r2, #0
 8007a08:	f04f 0300 	mov.w	r3, #0
 8007a0c:	f04f 0400 	mov.w	r4, #0
 8007a10:	0094      	lsls	r4, r2, #2
 8007a12:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007a16:	008b      	lsls	r3, r1, #2
 8007a18:	461a      	mov	r2, r3
 8007a1a:	4623      	mov	r3, r4
 8007a1c:	4628      	mov	r0, r5
 8007a1e:	4631      	mov	r1, r6
 8007a20:	f7f9 f932 	bl	8000c88 <__aeabi_uldivmod>
 8007a24:	4603      	mov	r3, r0
 8007a26:	460c      	mov	r4, r1
 8007a28:	461a      	mov	r2, r3
 8007a2a:	4b77      	ldr	r3, [pc, #476]	; (8007c08 <UART_SetConfig+0x6f4>)
 8007a2c:	fba3 1302 	umull	r1, r3, r3, r2
 8007a30:	095b      	lsrs	r3, r3, #5
 8007a32:	2164      	movs	r1, #100	; 0x64
 8007a34:	fb01 f303 	mul.w	r3, r1, r3
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	011b      	lsls	r3, r3, #4
 8007a3c:	3332      	adds	r3, #50	; 0x32
 8007a3e:	4a72      	ldr	r2, [pc, #456]	; (8007c08 <UART_SetConfig+0x6f4>)
 8007a40:	fba2 2303 	umull	r2, r3, r2, r3
 8007a44:	095b      	lsrs	r3, r3, #5
 8007a46:	f003 020f 	and.w	r2, r3, #15
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4442      	add	r2, r8
 8007a50:	609a      	str	r2, [r3, #8]
 8007a52:	e0d0      	b.n	8007bf6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a54:	f7fd ff24 	bl	80058a0 <HAL_RCC_GetPCLK1Freq>
 8007a58:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	469a      	mov	sl, r3
 8007a5e:	f04f 0b00 	mov.w	fp, #0
 8007a62:	46d0      	mov	r8, sl
 8007a64:	46d9      	mov	r9, fp
 8007a66:	eb18 0308 	adds.w	r3, r8, r8
 8007a6a:	eb49 0409 	adc.w	r4, r9, r9
 8007a6e:	4698      	mov	r8, r3
 8007a70:	46a1      	mov	r9, r4
 8007a72:	eb18 080a 	adds.w	r8, r8, sl
 8007a76:	eb49 090b 	adc.w	r9, r9, fp
 8007a7a:	f04f 0100 	mov.w	r1, #0
 8007a7e:	f04f 0200 	mov.w	r2, #0
 8007a82:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007a86:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007a8a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007a8e:	4688      	mov	r8, r1
 8007a90:	4691      	mov	r9, r2
 8007a92:	eb1a 0508 	adds.w	r5, sl, r8
 8007a96:	eb4b 0609 	adc.w	r6, fp, r9
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	f04f 0200 	mov.w	r2, #0
 8007aa4:	f04f 0300 	mov.w	r3, #0
 8007aa8:	f04f 0400 	mov.w	r4, #0
 8007aac:	0094      	lsls	r4, r2, #2
 8007aae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007ab2:	008b      	lsls	r3, r1, #2
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	4623      	mov	r3, r4
 8007ab8:	4628      	mov	r0, r5
 8007aba:	4631      	mov	r1, r6
 8007abc:	f7f9 f8e4 	bl	8000c88 <__aeabi_uldivmod>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	460c      	mov	r4, r1
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	4b50      	ldr	r3, [pc, #320]	; (8007c08 <UART_SetConfig+0x6f4>)
 8007ac8:	fba3 2302 	umull	r2, r3, r3, r2
 8007acc:	095b      	lsrs	r3, r3, #5
 8007ace:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	469b      	mov	fp, r3
 8007ad6:	f04f 0c00 	mov.w	ip, #0
 8007ada:	46d9      	mov	r9, fp
 8007adc:	46e2      	mov	sl, ip
 8007ade:	eb19 0309 	adds.w	r3, r9, r9
 8007ae2:	eb4a 040a 	adc.w	r4, sl, sl
 8007ae6:	4699      	mov	r9, r3
 8007ae8:	46a2      	mov	sl, r4
 8007aea:	eb19 090b 	adds.w	r9, r9, fp
 8007aee:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007af2:	f04f 0100 	mov.w	r1, #0
 8007af6:	f04f 0200 	mov.w	r2, #0
 8007afa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007afe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b06:	4689      	mov	r9, r1
 8007b08:	4692      	mov	sl, r2
 8007b0a:	eb1b 0509 	adds.w	r5, fp, r9
 8007b0e:	eb4c 060a 	adc.w	r6, ip, sl
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	4619      	mov	r1, r3
 8007b18:	f04f 0200 	mov.w	r2, #0
 8007b1c:	f04f 0300 	mov.w	r3, #0
 8007b20:	f04f 0400 	mov.w	r4, #0
 8007b24:	0094      	lsls	r4, r2, #2
 8007b26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007b2a:	008b      	lsls	r3, r1, #2
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	4623      	mov	r3, r4
 8007b30:	4628      	mov	r0, r5
 8007b32:	4631      	mov	r1, r6
 8007b34:	f7f9 f8a8 	bl	8000c88 <__aeabi_uldivmod>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	460c      	mov	r4, r1
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	4b32      	ldr	r3, [pc, #200]	; (8007c08 <UART_SetConfig+0x6f4>)
 8007b40:	fba3 1302 	umull	r1, r3, r3, r2
 8007b44:	095b      	lsrs	r3, r3, #5
 8007b46:	2164      	movs	r1, #100	; 0x64
 8007b48:	fb01 f303 	mul.w	r3, r1, r3
 8007b4c:	1ad3      	subs	r3, r2, r3
 8007b4e:	011b      	lsls	r3, r3, #4
 8007b50:	3332      	adds	r3, #50	; 0x32
 8007b52:	4a2d      	ldr	r2, [pc, #180]	; (8007c08 <UART_SetConfig+0x6f4>)
 8007b54:	fba2 2303 	umull	r2, r3, r2, r3
 8007b58:	095b      	lsrs	r3, r3, #5
 8007b5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b5e:	4498      	add	r8, r3
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	469b      	mov	fp, r3
 8007b64:	f04f 0c00 	mov.w	ip, #0
 8007b68:	46d9      	mov	r9, fp
 8007b6a:	46e2      	mov	sl, ip
 8007b6c:	eb19 0309 	adds.w	r3, r9, r9
 8007b70:	eb4a 040a 	adc.w	r4, sl, sl
 8007b74:	4699      	mov	r9, r3
 8007b76:	46a2      	mov	sl, r4
 8007b78:	eb19 090b 	adds.w	r9, r9, fp
 8007b7c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007b80:	f04f 0100 	mov.w	r1, #0
 8007b84:	f04f 0200 	mov.w	r2, #0
 8007b88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b94:	4689      	mov	r9, r1
 8007b96:	4692      	mov	sl, r2
 8007b98:	eb1b 0509 	adds.w	r5, fp, r9
 8007b9c:	eb4c 060a 	adc.w	r6, ip, sl
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	f04f 0200 	mov.w	r2, #0
 8007baa:	f04f 0300 	mov.w	r3, #0
 8007bae:	f04f 0400 	mov.w	r4, #0
 8007bb2:	0094      	lsls	r4, r2, #2
 8007bb4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007bb8:	008b      	lsls	r3, r1, #2
 8007bba:	461a      	mov	r2, r3
 8007bbc:	4623      	mov	r3, r4
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	4631      	mov	r1, r6
 8007bc2:	f7f9 f861 	bl	8000c88 <__aeabi_uldivmod>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	460c      	mov	r4, r1
 8007bca:	461a      	mov	r2, r3
 8007bcc:	4b0e      	ldr	r3, [pc, #56]	; (8007c08 <UART_SetConfig+0x6f4>)
 8007bce:	fba3 1302 	umull	r1, r3, r3, r2
 8007bd2:	095b      	lsrs	r3, r3, #5
 8007bd4:	2164      	movs	r1, #100	; 0x64
 8007bd6:	fb01 f303 	mul.w	r3, r1, r3
 8007bda:	1ad3      	subs	r3, r2, r3
 8007bdc:	011b      	lsls	r3, r3, #4
 8007bde:	3332      	adds	r3, #50	; 0x32
 8007be0:	4a09      	ldr	r2, [pc, #36]	; (8007c08 <UART_SetConfig+0x6f4>)
 8007be2:	fba2 2303 	umull	r2, r3, r2, r3
 8007be6:	095b      	lsrs	r3, r3, #5
 8007be8:	f003 020f 	and.w	r2, r3, #15
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4442      	add	r2, r8
 8007bf2:	609a      	str	r2, [r3, #8]
}
 8007bf4:	e7ff      	b.n	8007bf6 <UART_SetConfig+0x6e2>
 8007bf6:	bf00      	nop
 8007bf8:	3714      	adds	r7, #20
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c00:	40011000 	.word	0x40011000
 8007c04:	40011400 	.word	0x40011400
 8007c08:	51eb851f 	.word	0x51eb851f

08007c0c <__errno>:
 8007c0c:	4b01      	ldr	r3, [pc, #4]	; (8007c14 <__errno+0x8>)
 8007c0e:	6818      	ldr	r0, [r3, #0]
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	2000000c 	.word	0x2000000c

08007c18 <__libc_init_array>:
 8007c18:	b570      	push	{r4, r5, r6, lr}
 8007c1a:	4e0d      	ldr	r6, [pc, #52]	; (8007c50 <__libc_init_array+0x38>)
 8007c1c:	4c0d      	ldr	r4, [pc, #52]	; (8007c54 <__libc_init_array+0x3c>)
 8007c1e:	1ba4      	subs	r4, r4, r6
 8007c20:	10a4      	asrs	r4, r4, #2
 8007c22:	2500      	movs	r5, #0
 8007c24:	42a5      	cmp	r5, r4
 8007c26:	d109      	bne.n	8007c3c <__libc_init_array+0x24>
 8007c28:	4e0b      	ldr	r6, [pc, #44]	; (8007c58 <__libc_init_array+0x40>)
 8007c2a:	4c0c      	ldr	r4, [pc, #48]	; (8007c5c <__libc_init_array+0x44>)
 8007c2c:	f002 fc96 	bl	800a55c <_init>
 8007c30:	1ba4      	subs	r4, r4, r6
 8007c32:	10a4      	asrs	r4, r4, #2
 8007c34:	2500      	movs	r5, #0
 8007c36:	42a5      	cmp	r5, r4
 8007c38:	d105      	bne.n	8007c46 <__libc_init_array+0x2e>
 8007c3a:	bd70      	pop	{r4, r5, r6, pc}
 8007c3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c40:	4798      	blx	r3
 8007c42:	3501      	adds	r5, #1
 8007c44:	e7ee      	b.n	8007c24 <__libc_init_array+0xc>
 8007c46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c4a:	4798      	blx	r3
 8007c4c:	3501      	adds	r5, #1
 8007c4e:	e7f2      	b.n	8007c36 <__libc_init_array+0x1e>
 8007c50:	0800a8c0 	.word	0x0800a8c0
 8007c54:	0800a8c0 	.word	0x0800a8c0
 8007c58:	0800a8c0 	.word	0x0800a8c0
 8007c5c:	0800a8c4 	.word	0x0800a8c4

08007c60 <memset>:
 8007c60:	4402      	add	r2, r0
 8007c62:	4603      	mov	r3, r0
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d100      	bne.n	8007c6a <memset+0xa>
 8007c68:	4770      	bx	lr
 8007c6a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c6e:	e7f9      	b.n	8007c64 <memset+0x4>

08007c70 <__cvt>:
 8007c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c74:	ec55 4b10 	vmov	r4, r5, d0
 8007c78:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007c7a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007c7e:	2d00      	cmp	r5, #0
 8007c80:	460e      	mov	r6, r1
 8007c82:	4691      	mov	r9, r2
 8007c84:	4619      	mov	r1, r3
 8007c86:	bfb8      	it	lt
 8007c88:	4622      	movlt	r2, r4
 8007c8a:	462b      	mov	r3, r5
 8007c8c:	f027 0720 	bic.w	r7, r7, #32
 8007c90:	bfbb      	ittet	lt
 8007c92:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007c96:	461d      	movlt	r5, r3
 8007c98:	2300      	movge	r3, #0
 8007c9a:	232d      	movlt	r3, #45	; 0x2d
 8007c9c:	bfb8      	it	lt
 8007c9e:	4614      	movlt	r4, r2
 8007ca0:	2f46      	cmp	r7, #70	; 0x46
 8007ca2:	700b      	strb	r3, [r1, #0]
 8007ca4:	d004      	beq.n	8007cb0 <__cvt+0x40>
 8007ca6:	2f45      	cmp	r7, #69	; 0x45
 8007ca8:	d100      	bne.n	8007cac <__cvt+0x3c>
 8007caa:	3601      	adds	r6, #1
 8007cac:	2102      	movs	r1, #2
 8007cae:	e000      	b.n	8007cb2 <__cvt+0x42>
 8007cb0:	2103      	movs	r1, #3
 8007cb2:	ab03      	add	r3, sp, #12
 8007cb4:	9301      	str	r3, [sp, #4]
 8007cb6:	ab02      	add	r3, sp, #8
 8007cb8:	9300      	str	r3, [sp, #0]
 8007cba:	4632      	mov	r2, r6
 8007cbc:	4653      	mov	r3, sl
 8007cbe:	ec45 4b10 	vmov	d0, r4, r5
 8007cc2:	f000 fee5 	bl	8008a90 <_dtoa_r>
 8007cc6:	2f47      	cmp	r7, #71	; 0x47
 8007cc8:	4680      	mov	r8, r0
 8007cca:	d102      	bne.n	8007cd2 <__cvt+0x62>
 8007ccc:	f019 0f01 	tst.w	r9, #1
 8007cd0:	d026      	beq.n	8007d20 <__cvt+0xb0>
 8007cd2:	2f46      	cmp	r7, #70	; 0x46
 8007cd4:	eb08 0906 	add.w	r9, r8, r6
 8007cd8:	d111      	bne.n	8007cfe <__cvt+0x8e>
 8007cda:	f898 3000 	ldrb.w	r3, [r8]
 8007cde:	2b30      	cmp	r3, #48	; 0x30
 8007ce0:	d10a      	bne.n	8007cf8 <__cvt+0x88>
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	4629      	mov	r1, r5
 8007cea:	f7f8 ff0d 	bl	8000b08 <__aeabi_dcmpeq>
 8007cee:	b918      	cbnz	r0, 8007cf8 <__cvt+0x88>
 8007cf0:	f1c6 0601 	rsb	r6, r6, #1
 8007cf4:	f8ca 6000 	str.w	r6, [sl]
 8007cf8:	f8da 3000 	ldr.w	r3, [sl]
 8007cfc:	4499      	add	r9, r3
 8007cfe:	2200      	movs	r2, #0
 8007d00:	2300      	movs	r3, #0
 8007d02:	4620      	mov	r0, r4
 8007d04:	4629      	mov	r1, r5
 8007d06:	f7f8 feff 	bl	8000b08 <__aeabi_dcmpeq>
 8007d0a:	b938      	cbnz	r0, 8007d1c <__cvt+0xac>
 8007d0c:	2230      	movs	r2, #48	; 0x30
 8007d0e:	9b03      	ldr	r3, [sp, #12]
 8007d10:	454b      	cmp	r3, r9
 8007d12:	d205      	bcs.n	8007d20 <__cvt+0xb0>
 8007d14:	1c59      	adds	r1, r3, #1
 8007d16:	9103      	str	r1, [sp, #12]
 8007d18:	701a      	strb	r2, [r3, #0]
 8007d1a:	e7f8      	b.n	8007d0e <__cvt+0x9e>
 8007d1c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007d20:	9b03      	ldr	r3, [sp, #12]
 8007d22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d24:	eba3 0308 	sub.w	r3, r3, r8
 8007d28:	4640      	mov	r0, r8
 8007d2a:	6013      	str	r3, [r2, #0]
 8007d2c:	b004      	add	sp, #16
 8007d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007d32 <__exponent>:
 8007d32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d34:	2900      	cmp	r1, #0
 8007d36:	4604      	mov	r4, r0
 8007d38:	bfba      	itte	lt
 8007d3a:	4249      	neglt	r1, r1
 8007d3c:	232d      	movlt	r3, #45	; 0x2d
 8007d3e:	232b      	movge	r3, #43	; 0x2b
 8007d40:	2909      	cmp	r1, #9
 8007d42:	f804 2b02 	strb.w	r2, [r4], #2
 8007d46:	7043      	strb	r3, [r0, #1]
 8007d48:	dd20      	ble.n	8007d8c <__exponent+0x5a>
 8007d4a:	f10d 0307 	add.w	r3, sp, #7
 8007d4e:	461f      	mov	r7, r3
 8007d50:	260a      	movs	r6, #10
 8007d52:	fb91 f5f6 	sdiv	r5, r1, r6
 8007d56:	fb06 1115 	mls	r1, r6, r5, r1
 8007d5a:	3130      	adds	r1, #48	; 0x30
 8007d5c:	2d09      	cmp	r5, #9
 8007d5e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007d62:	f103 32ff 	add.w	r2, r3, #4294967295
 8007d66:	4629      	mov	r1, r5
 8007d68:	dc09      	bgt.n	8007d7e <__exponent+0x4c>
 8007d6a:	3130      	adds	r1, #48	; 0x30
 8007d6c:	3b02      	subs	r3, #2
 8007d6e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007d72:	42bb      	cmp	r3, r7
 8007d74:	4622      	mov	r2, r4
 8007d76:	d304      	bcc.n	8007d82 <__exponent+0x50>
 8007d78:	1a10      	subs	r0, r2, r0
 8007d7a:	b003      	add	sp, #12
 8007d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d7e:	4613      	mov	r3, r2
 8007d80:	e7e7      	b.n	8007d52 <__exponent+0x20>
 8007d82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d86:	f804 2b01 	strb.w	r2, [r4], #1
 8007d8a:	e7f2      	b.n	8007d72 <__exponent+0x40>
 8007d8c:	2330      	movs	r3, #48	; 0x30
 8007d8e:	4419      	add	r1, r3
 8007d90:	7083      	strb	r3, [r0, #2]
 8007d92:	1d02      	adds	r2, r0, #4
 8007d94:	70c1      	strb	r1, [r0, #3]
 8007d96:	e7ef      	b.n	8007d78 <__exponent+0x46>

08007d98 <_printf_float>:
 8007d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d9c:	b08d      	sub	sp, #52	; 0x34
 8007d9e:	460c      	mov	r4, r1
 8007da0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007da4:	4616      	mov	r6, r2
 8007da6:	461f      	mov	r7, r3
 8007da8:	4605      	mov	r5, r0
 8007daa:	f001 fda3 	bl	80098f4 <_localeconv_r>
 8007dae:	6803      	ldr	r3, [r0, #0]
 8007db0:	9304      	str	r3, [sp, #16]
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7f8 fa2c 	bl	8000210 <strlen>
 8007db8:	2300      	movs	r3, #0
 8007dba:	930a      	str	r3, [sp, #40]	; 0x28
 8007dbc:	f8d8 3000 	ldr.w	r3, [r8]
 8007dc0:	9005      	str	r0, [sp, #20]
 8007dc2:	3307      	adds	r3, #7
 8007dc4:	f023 0307 	bic.w	r3, r3, #7
 8007dc8:	f103 0208 	add.w	r2, r3, #8
 8007dcc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007dd0:	f8d4 b000 	ldr.w	fp, [r4]
 8007dd4:	f8c8 2000 	str.w	r2, [r8]
 8007dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ddc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007de0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007de4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007de8:	9307      	str	r3, [sp, #28]
 8007dea:	f8cd 8018 	str.w	r8, [sp, #24]
 8007dee:	f04f 32ff 	mov.w	r2, #4294967295
 8007df2:	4ba7      	ldr	r3, [pc, #668]	; (8008090 <_printf_float+0x2f8>)
 8007df4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007df8:	f7f8 feb8 	bl	8000b6c <__aeabi_dcmpun>
 8007dfc:	bb70      	cbnz	r0, 8007e5c <_printf_float+0xc4>
 8007dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8007e02:	4ba3      	ldr	r3, [pc, #652]	; (8008090 <_printf_float+0x2f8>)
 8007e04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e08:	f7f8 fe92 	bl	8000b30 <__aeabi_dcmple>
 8007e0c:	bb30      	cbnz	r0, 8007e5c <_printf_float+0xc4>
 8007e0e:	2200      	movs	r2, #0
 8007e10:	2300      	movs	r3, #0
 8007e12:	4640      	mov	r0, r8
 8007e14:	4649      	mov	r1, r9
 8007e16:	f7f8 fe81 	bl	8000b1c <__aeabi_dcmplt>
 8007e1a:	b110      	cbz	r0, 8007e22 <_printf_float+0x8a>
 8007e1c:	232d      	movs	r3, #45	; 0x2d
 8007e1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e22:	4a9c      	ldr	r2, [pc, #624]	; (8008094 <_printf_float+0x2fc>)
 8007e24:	4b9c      	ldr	r3, [pc, #624]	; (8008098 <_printf_float+0x300>)
 8007e26:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007e2a:	bf8c      	ite	hi
 8007e2c:	4690      	movhi	r8, r2
 8007e2e:	4698      	movls	r8, r3
 8007e30:	2303      	movs	r3, #3
 8007e32:	f02b 0204 	bic.w	r2, fp, #4
 8007e36:	6123      	str	r3, [r4, #16]
 8007e38:	6022      	str	r2, [r4, #0]
 8007e3a:	f04f 0900 	mov.w	r9, #0
 8007e3e:	9700      	str	r7, [sp, #0]
 8007e40:	4633      	mov	r3, r6
 8007e42:	aa0b      	add	r2, sp, #44	; 0x2c
 8007e44:	4621      	mov	r1, r4
 8007e46:	4628      	mov	r0, r5
 8007e48:	f000 f9e6 	bl	8008218 <_printf_common>
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	f040 808d 	bne.w	8007f6c <_printf_float+0x1d4>
 8007e52:	f04f 30ff 	mov.w	r0, #4294967295
 8007e56:	b00d      	add	sp, #52	; 0x34
 8007e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e5c:	4642      	mov	r2, r8
 8007e5e:	464b      	mov	r3, r9
 8007e60:	4640      	mov	r0, r8
 8007e62:	4649      	mov	r1, r9
 8007e64:	f7f8 fe82 	bl	8000b6c <__aeabi_dcmpun>
 8007e68:	b110      	cbz	r0, 8007e70 <_printf_float+0xd8>
 8007e6a:	4a8c      	ldr	r2, [pc, #560]	; (800809c <_printf_float+0x304>)
 8007e6c:	4b8c      	ldr	r3, [pc, #560]	; (80080a0 <_printf_float+0x308>)
 8007e6e:	e7da      	b.n	8007e26 <_printf_float+0x8e>
 8007e70:	6861      	ldr	r1, [r4, #4]
 8007e72:	1c4b      	adds	r3, r1, #1
 8007e74:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007e78:	a80a      	add	r0, sp, #40	; 0x28
 8007e7a:	d13e      	bne.n	8007efa <_printf_float+0x162>
 8007e7c:	2306      	movs	r3, #6
 8007e7e:	6063      	str	r3, [r4, #4]
 8007e80:	2300      	movs	r3, #0
 8007e82:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007e86:	ab09      	add	r3, sp, #36	; 0x24
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	ec49 8b10 	vmov	d0, r8, r9
 8007e8e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e92:	6022      	str	r2, [r4, #0]
 8007e94:	f8cd a004 	str.w	sl, [sp, #4]
 8007e98:	6861      	ldr	r1, [r4, #4]
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	f7ff fee8 	bl	8007c70 <__cvt>
 8007ea0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007ea4:	2b47      	cmp	r3, #71	; 0x47
 8007ea6:	4680      	mov	r8, r0
 8007ea8:	d109      	bne.n	8007ebe <_printf_float+0x126>
 8007eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eac:	1cd8      	adds	r0, r3, #3
 8007eae:	db02      	blt.n	8007eb6 <_printf_float+0x11e>
 8007eb0:	6862      	ldr	r2, [r4, #4]
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	dd47      	ble.n	8007f46 <_printf_float+0x1ae>
 8007eb6:	f1aa 0a02 	sub.w	sl, sl, #2
 8007eba:	fa5f fa8a 	uxtb.w	sl, sl
 8007ebe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007ec2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ec4:	d824      	bhi.n	8007f10 <_printf_float+0x178>
 8007ec6:	3901      	subs	r1, #1
 8007ec8:	4652      	mov	r2, sl
 8007eca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007ece:	9109      	str	r1, [sp, #36]	; 0x24
 8007ed0:	f7ff ff2f 	bl	8007d32 <__exponent>
 8007ed4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ed6:	1813      	adds	r3, r2, r0
 8007ed8:	2a01      	cmp	r2, #1
 8007eda:	4681      	mov	r9, r0
 8007edc:	6123      	str	r3, [r4, #16]
 8007ede:	dc02      	bgt.n	8007ee6 <_printf_float+0x14e>
 8007ee0:	6822      	ldr	r2, [r4, #0]
 8007ee2:	07d1      	lsls	r1, r2, #31
 8007ee4:	d501      	bpl.n	8007eea <_printf_float+0x152>
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	6123      	str	r3, [r4, #16]
 8007eea:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d0a5      	beq.n	8007e3e <_printf_float+0xa6>
 8007ef2:	232d      	movs	r3, #45	; 0x2d
 8007ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ef8:	e7a1      	b.n	8007e3e <_printf_float+0xa6>
 8007efa:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007efe:	f000 8177 	beq.w	80081f0 <_printf_float+0x458>
 8007f02:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007f06:	d1bb      	bne.n	8007e80 <_printf_float+0xe8>
 8007f08:	2900      	cmp	r1, #0
 8007f0a:	d1b9      	bne.n	8007e80 <_printf_float+0xe8>
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e7b6      	b.n	8007e7e <_printf_float+0xe6>
 8007f10:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007f14:	d119      	bne.n	8007f4a <_printf_float+0x1b2>
 8007f16:	2900      	cmp	r1, #0
 8007f18:	6863      	ldr	r3, [r4, #4]
 8007f1a:	dd0c      	ble.n	8007f36 <_printf_float+0x19e>
 8007f1c:	6121      	str	r1, [r4, #16]
 8007f1e:	b913      	cbnz	r3, 8007f26 <_printf_float+0x18e>
 8007f20:	6822      	ldr	r2, [r4, #0]
 8007f22:	07d2      	lsls	r2, r2, #31
 8007f24:	d502      	bpl.n	8007f2c <_printf_float+0x194>
 8007f26:	3301      	adds	r3, #1
 8007f28:	440b      	add	r3, r1
 8007f2a:	6123      	str	r3, [r4, #16]
 8007f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f2e:	65a3      	str	r3, [r4, #88]	; 0x58
 8007f30:	f04f 0900 	mov.w	r9, #0
 8007f34:	e7d9      	b.n	8007eea <_printf_float+0x152>
 8007f36:	b913      	cbnz	r3, 8007f3e <_printf_float+0x1a6>
 8007f38:	6822      	ldr	r2, [r4, #0]
 8007f3a:	07d0      	lsls	r0, r2, #31
 8007f3c:	d501      	bpl.n	8007f42 <_printf_float+0x1aa>
 8007f3e:	3302      	adds	r3, #2
 8007f40:	e7f3      	b.n	8007f2a <_printf_float+0x192>
 8007f42:	2301      	movs	r3, #1
 8007f44:	e7f1      	b.n	8007f2a <_printf_float+0x192>
 8007f46:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007f4a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	db05      	blt.n	8007f5e <_printf_float+0x1c6>
 8007f52:	6822      	ldr	r2, [r4, #0]
 8007f54:	6123      	str	r3, [r4, #16]
 8007f56:	07d1      	lsls	r1, r2, #31
 8007f58:	d5e8      	bpl.n	8007f2c <_printf_float+0x194>
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	e7e5      	b.n	8007f2a <_printf_float+0x192>
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	bfd4      	ite	le
 8007f62:	f1c3 0302 	rsble	r3, r3, #2
 8007f66:	2301      	movgt	r3, #1
 8007f68:	4413      	add	r3, r2
 8007f6a:	e7de      	b.n	8007f2a <_printf_float+0x192>
 8007f6c:	6823      	ldr	r3, [r4, #0]
 8007f6e:	055a      	lsls	r2, r3, #21
 8007f70:	d407      	bmi.n	8007f82 <_printf_float+0x1ea>
 8007f72:	6923      	ldr	r3, [r4, #16]
 8007f74:	4642      	mov	r2, r8
 8007f76:	4631      	mov	r1, r6
 8007f78:	4628      	mov	r0, r5
 8007f7a:	47b8      	blx	r7
 8007f7c:	3001      	adds	r0, #1
 8007f7e:	d12b      	bne.n	8007fd8 <_printf_float+0x240>
 8007f80:	e767      	b.n	8007e52 <_printf_float+0xba>
 8007f82:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007f86:	f240 80dc 	bls.w	8008142 <_printf_float+0x3aa>
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f92:	f7f8 fdb9 	bl	8000b08 <__aeabi_dcmpeq>
 8007f96:	2800      	cmp	r0, #0
 8007f98:	d033      	beq.n	8008002 <_printf_float+0x26a>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	4a41      	ldr	r2, [pc, #260]	; (80080a4 <_printf_float+0x30c>)
 8007f9e:	4631      	mov	r1, r6
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	47b8      	blx	r7
 8007fa4:	3001      	adds	r0, #1
 8007fa6:	f43f af54 	beq.w	8007e52 <_printf_float+0xba>
 8007faa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	db02      	blt.n	8007fb8 <_printf_float+0x220>
 8007fb2:	6823      	ldr	r3, [r4, #0]
 8007fb4:	07d8      	lsls	r0, r3, #31
 8007fb6:	d50f      	bpl.n	8007fd8 <_printf_float+0x240>
 8007fb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fbc:	4631      	mov	r1, r6
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	47b8      	blx	r7
 8007fc2:	3001      	adds	r0, #1
 8007fc4:	f43f af45 	beq.w	8007e52 <_printf_float+0xba>
 8007fc8:	f04f 0800 	mov.w	r8, #0
 8007fcc:	f104 091a 	add.w	r9, r4, #26
 8007fd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	4543      	cmp	r3, r8
 8007fd6:	dc09      	bgt.n	8007fec <_printf_float+0x254>
 8007fd8:	6823      	ldr	r3, [r4, #0]
 8007fda:	079b      	lsls	r3, r3, #30
 8007fdc:	f100 8103 	bmi.w	80081e6 <_printf_float+0x44e>
 8007fe0:	68e0      	ldr	r0, [r4, #12]
 8007fe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fe4:	4298      	cmp	r0, r3
 8007fe6:	bfb8      	it	lt
 8007fe8:	4618      	movlt	r0, r3
 8007fea:	e734      	b.n	8007e56 <_printf_float+0xbe>
 8007fec:	2301      	movs	r3, #1
 8007fee:	464a      	mov	r2, r9
 8007ff0:	4631      	mov	r1, r6
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	47b8      	blx	r7
 8007ff6:	3001      	adds	r0, #1
 8007ff8:	f43f af2b 	beq.w	8007e52 <_printf_float+0xba>
 8007ffc:	f108 0801 	add.w	r8, r8, #1
 8008000:	e7e6      	b.n	8007fd0 <_printf_float+0x238>
 8008002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008004:	2b00      	cmp	r3, #0
 8008006:	dc2b      	bgt.n	8008060 <_printf_float+0x2c8>
 8008008:	2301      	movs	r3, #1
 800800a:	4a26      	ldr	r2, [pc, #152]	; (80080a4 <_printf_float+0x30c>)
 800800c:	4631      	mov	r1, r6
 800800e:	4628      	mov	r0, r5
 8008010:	47b8      	blx	r7
 8008012:	3001      	adds	r0, #1
 8008014:	f43f af1d 	beq.w	8007e52 <_printf_float+0xba>
 8008018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800801a:	b923      	cbnz	r3, 8008026 <_printf_float+0x28e>
 800801c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800801e:	b913      	cbnz	r3, 8008026 <_printf_float+0x28e>
 8008020:	6823      	ldr	r3, [r4, #0]
 8008022:	07d9      	lsls	r1, r3, #31
 8008024:	d5d8      	bpl.n	8007fd8 <_printf_float+0x240>
 8008026:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800802a:	4631      	mov	r1, r6
 800802c:	4628      	mov	r0, r5
 800802e:	47b8      	blx	r7
 8008030:	3001      	adds	r0, #1
 8008032:	f43f af0e 	beq.w	8007e52 <_printf_float+0xba>
 8008036:	f04f 0900 	mov.w	r9, #0
 800803a:	f104 0a1a 	add.w	sl, r4, #26
 800803e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008040:	425b      	negs	r3, r3
 8008042:	454b      	cmp	r3, r9
 8008044:	dc01      	bgt.n	800804a <_printf_float+0x2b2>
 8008046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008048:	e794      	b.n	8007f74 <_printf_float+0x1dc>
 800804a:	2301      	movs	r3, #1
 800804c:	4652      	mov	r2, sl
 800804e:	4631      	mov	r1, r6
 8008050:	4628      	mov	r0, r5
 8008052:	47b8      	blx	r7
 8008054:	3001      	adds	r0, #1
 8008056:	f43f aefc 	beq.w	8007e52 <_printf_float+0xba>
 800805a:	f109 0901 	add.w	r9, r9, #1
 800805e:	e7ee      	b.n	800803e <_printf_float+0x2a6>
 8008060:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008062:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008064:	429a      	cmp	r2, r3
 8008066:	bfa8      	it	ge
 8008068:	461a      	movge	r2, r3
 800806a:	2a00      	cmp	r2, #0
 800806c:	4691      	mov	r9, r2
 800806e:	dd07      	ble.n	8008080 <_printf_float+0x2e8>
 8008070:	4613      	mov	r3, r2
 8008072:	4631      	mov	r1, r6
 8008074:	4642      	mov	r2, r8
 8008076:	4628      	mov	r0, r5
 8008078:	47b8      	blx	r7
 800807a:	3001      	adds	r0, #1
 800807c:	f43f aee9 	beq.w	8007e52 <_printf_float+0xba>
 8008080:	f104 031a 	add.w	r3, r4, #26
 8008084:	f04f 0b00 	mov.w	fp, #0
 8008088:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800808c:	9306      	str	r3, [sp, #24]
 800808e:	e015      	b.n	80080bc <_printf_float+0x324>
 8008090:	7fefffff 	.word	0x7fefffff
 8008094:	0800a600 	.word	0x0800a600
 8008098:	0800a5fc 	.word	0x0800a5fc
 800809c:	0800a608 	.word	0x0800a608
 80080a0:	0800a604 	.word	0x0800a604
 80080a4:	0800a60c 	.word	0x0800a60c
 80080a8:	2301      	movs	r3, #1
 80080aa:	9a06      	ldr	r2, [sp, #24]
 80080ac:	4631      	mov	r1, r6
 80080ae:	4628      	mov	r0, r5
 80080b0:	47b8      	blx	r7
 80080b2:	3001      	adds	r0, #1
 80080b4:	f43f aecd 	beq.w	8007e52 <_printf_float+0xba>
 80080b8:	f10b 0b01 	add.w	fp, fp, #1
 80080bc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80080c0:	ebaa 0309 	sub.w	r3, sl, r9
 80080c4:	455b      	cmp	r3, fp
 80080c6:	dcef      	bgt.n	80080a8 <_printf_float+0x310>
 80080c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080cc:	429a      	cmp	r2, r3
 80080ce:	44d0      	add	r8, sl
 80080d0:	db15      	blt.n	80080fe <_printf_float+0x366>
 80080d2:	6823      	ldr	r3, [r4, #0]
 80080d4:	07da      	lsls	r2, r3, #31
 80080d6:	d412      	bmi.n	80080fe <_printf_float+0x366>
 80080d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080dc:	eba3 020a 	sub.w	r2, r3, sl
 80080e0:	eba3 0a01 	sub.w	sl, r3, r1
 80080e4:	4592      	cmp	sl, r2
 80080e6:	bfa8      	it	ge
 80080e8:	4692      	movge	sl, r2
 80080ea:	f1ba 0f00 	cmp.w	sl, #0
 80080ee:	dc0e      	bgt.n	800810e <_printf_float+0x376>
 80080f0:	f04f 0800 	mov.w	r8, #0
 80080f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080f8:	f104 091a 	add.w	r9, r4, #26
 80080fc:	e019      	b.n	8008132 <_printf_float+0x39a>
 80080fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008102:	4631      	mov	r1, r6
 8008104:	4628      	mov	r0, r5
 8008106:	47b8      	blx	r7
 8008108:	3001      	adds	r0, #1
 800810a:	d1e5      	bne.n	80080d8 <_printf_float+0x340>
 800810c:	e6a1      	b.n	8007e52 <_printf_float+0xba>
 800810e:	4653      	mov	r3, sl
 8008110:	4642      	mov	r2, r8
 8008112:	4631      	mov	r1, r6
 8008114:	4628      	mov	r0, r5
 8008116:	47b8      	blx	r7
 8008118:	3001      	adds	r0, #1
 800811a:	d1e9      	bne.n	80080f0 <_printf_float+0x358>
 800811c:	e699      	b.n	8007e52 <_printf_float+0xba>
 800811e:	2301      	movs	r3, #1
 8008120:	464a      	mov	r2, r9
 8008122:	4631      	mov	r1, r6
 8008124:	4628      	mov	r0, r5
 8008126:	47b8      	blx	r7
 8008128:	3001      	adds	r0, #1
 800812a:	f43f ae92 	beq.w	8007e52 <_printf_float+0xba>
 800812e:	f108 0801 	add.w	r8, r8, #1
 8008132:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008136:	1a9b      	subs	r3, r3, r2
 8008138:	eba3 030a 	sub.w	r3, r3, sl
 800813c:	4543      	cmp	r3, r8
 800813e:	dcee      	bgt.n	800811e <_printf_float+0x386>
 8008140:	e74a      	b.n	8007fd8 <_printf_float+0x240>
 8008142:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008144:	2a01      	cmp	r2, #1
 8008146:	dc01      	bgt.n	800814c <_printf_float+0x3b4>
 8008148:	07db      	lsls	r3, r3, #31
 800814a:	d53a      	bpl.n	80081c2 <_printf_float+0x42a>
 800814c:	2301      	movs	r3, #1
 800814e:	4642      	mov	r2, r8
 8008150:	4631      	mov	r1, r6
 8008152:	4628      	mov	r0, r5
 8008154:	47b8      	blx	r7
 8008156:	3001      	adds	r0, #1
 8008158:	f43f ae7b 	beq.w	8007e52 <_printf_float+0xba>
 800815c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008160:	4631      	mov	r1, r6
 8008162:	4628      	mov	r0, r5
 8008164:	47b8      	blx	r7
 8008166:	3001      	adds	r0, #1
 8008168:	f108 0801 	add.w	r8, r8, #1
 800816c:	f43f ae71 	beq.w	8007e52 <_printf_float+0xba>
 8008170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008172:	2200      	movs	r2, #0
 8008174:	f103 3aff 	add.w	sl, r3, #4294967295
 8008178:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800817c:	2300      	movs	r3, #0
 800817e:	f7f8 fcc3 	bl	8000b08 <__aeabi_dcmpeq>
 8008182:	b9c8      	cbnz	r0, 80081b8 <_printf_float+0x420>
 8008184:	4653      	mov	r3, sl
 8008186:	4642      	mov	r2, r8
 8008188:	4631      	mov	r1, r6
 800818a:	4628      	mov	r0, r5
 800818c:	47b8      	blx	r7
 800818e:	3001      	adds	r0, #1
 8008190:	d10e      	bne.n	80081b0 <_printf_float+0x418>
 8008192:	e65e      	b.n	8007e52 <_printf_float+0xba>
 8008194:	2301      	movs	r3, #1
 8008196:	4652      	mov	r2, sl
 8008198:	4631      	mov	r1, r6
 800819a:	4628      	mov	r0, r5
 800819c:	47b8      	blx	r7
 800819e:	3001      	adds	r0, #1
 80081a0:	f43f ae57 	beq.w	8007e52 <_printf_float+0xba>
 80081a4:	f108 0801 	add.w	r8, r8, #1
 80081a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081aa:	3b01      	subs	r3, #1
 80081ac:	4543      	cmp	r3, r8
 80081ae:	dcf1      	bgt.n	8008194 <_printf_float+0x3fc>
 80081b0:	464b      	mov	r3, r9
 80081b2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80081b6:	e6de      	b.n	8007f76 <_printf_float+0x1de>
 80081b8:	f04f 0800 	mov.w	r8, #0
 80081bc:	f104 0a1a 	add.w	sl, r4, #26
 80081c0:	e7f2      	b.n	80081a8 <_printf_float+0x410>
 80081c2:	2301      	movs	r3, #1
 80081c4:	e7df      	b.n	8008186 <_printf_float+0x3ee>
 80081c6:	2301      	movs	r3, #1
 80081c8:	464a      	mov	r2, r9
 80081ca:	4631      	mov	r1, r6
 80081cc:	4628      	mov	r0, r5
 80081ce:	47b8      	blx	r7
 80081d0:	3001      	adds	r0, #1
 80081d2:	f43f ae3e 	beq.w	8007e52 <_printf_float+0xba>
 80081d6:	f108 0801 	add.w	r8, r8, #1
 80081da:	68e3      	ldr	r3, [r4, #12]
 80081dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80081de:	1a9b      	subs	r3, r3, r2
 80081e0:	4543      	cmp	r3, r8
 80081e2:	dcf0      	bgt.n	80081c6 <_printf_float+0x42e>
 80081e4:	e6fc      	b.n	8007fe0 <_printf_float+0x248>
 80081e6:	f04f 0800 	mov.w	r8, #0
 80081ea:	f104 0919 	add.w	r9, r4, #25
 80081ee:	e7f4      	b.n	80081da <_printf_float+0x442>
 80081f0:	2900      	cmp	r1, #0
 80081f2:	f43f ae8b 	beq.w	8007f0c <_printf_float+0x174>
 80081f6:	2300      	movs	r3, #0
 80081f8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80081fc:	ab09      	add	r3, sp, #36	; 0x24
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	ec49 8b10 	vmov	d0, r8, r9
 8008204:	6022      	str	r2, [r4, #0]
 8008206:	f8cd a004 	str.w	sl, [sp, #4]
 800820a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800820e:	4628      	mov	r0, r5
 8008210:	f7ff fd2e 	bl	8007c70 <__cvt>
 8008214:	4680      	mov	r8, r0
 8008216:	e648      	b.n	8007eaa <_printf_float+0x112>

08008218 <_printf_common>:
 8008218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800821c:	4691      	mov	r9, r2
 800821e:	461f      	mov	r7, r3
 8008220:	688a      	ldr	r2, [r1, #8]
 8008222:	690b      	ldr	r3, [r1, #16]
 8008224:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008228:	4293      	cmp	r3, r2
 800822a:	bfb8      	it	lt
 800822c:	4613      	movlt	r3, r2
 800822e:	f8c9 3000 	str.w	r3, [r9]
 8008232:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008236:	4606      	mov	r6, r0
 8008238:	460c      	mov	r4, r1
 800823a:	b112      	cbz	r2, 8008242 <_printf_common+0x2a>
 800823c:	3301      	adds	r3, #1
 800823e:	f8c9 3000 	str.w	r3, [r9]
 8008242:	6823      	ldr	r3, [r4, #0]
 8008244:	0699      	lsls	r1, r3, #26
 8008246:	bf42      	ittt	mi
 8008248:	f8d9 3000 	ldrmi.w	r3, [r9]
 800824c:	3302      	addmi	r3, #2
 800824e:	f8c9 3000 	strmi.w	r3, [r9]
 8008252:	6825      	ldr	r5, [r4, #0]
 8008254:	f015 0506 	ands.w	r5, r5, #6
 8008258:	d107      	bne.n	800826a <_printf_common+0x52>
 800825a:	f104 0a19 	add.w	sl, r4, #25
 800825e:	68e3      	ldr	r3, [r4, #12]
 8008260:	f8d9 2000 	ldr.w	r2, [r9]
 8008264:	1a9b      	subs	r3, r3, r2
 8008266:	42ab      	cmp	r3, r5
 8008268:	dc28      	bgt.n	80082bc <_printf_common+0xa4>
 800826a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800826e:	6822      	ldr	r2, [r4, #0]
 8008270:	3300      	adds	r3, #0
 8008272:	bf18      	it	ne
 8008274:	2301      	movne	r3, #1
 8008276:	0692      	lsls	r2, r2, #26
 8008278:	d42d      	bmi.n	80082d6 <_printf_common+0xbe>
 800827a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800827e:	4639      	mov	r1, r7
 8008280:	4630      	mov	r0, r6
 8008282:	47c0      	blx	r8
 8008284:	3001      	adds	r0, #1
 8008286:	d020      	beq.n	80082ca <_printf_common+0xb2>
 8008288:	6823      	ldr	r3, [r4, #0]
 800828a:	68e5      	ldr	r5, [r4, #12]
 800828c:	f8d9 2000 	ldr.w	r2, [r9]
 8008290:	f003 0306 	and.w	r3, r3, #6
 8008294:	2b04      	cmp	r3, #4
 8008296:	bf08      	it	eq
 8008298:	1aad      	subeq	r5, r5, r2
 800829a:	68a3      	ldr	r3, [r4, #8]
 800829c:	6922      	ldr	r2, [r4, #16]
 800829e:	bf0c      	ite	eq
 80082a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082a4:	2500      	movne	r5, #0
 80082a6:	4293      	cmp	r3, r2
 80082a8:	bfc4      	itt	gt
 80082aa:	1a9b      	subgt	r3, r3, r2
 80082ac:	18ed      	addgt	r5, r5, r3
 80082ae:	f04f 0900 	mov.w	r9, #0
 80082b2:	341a      	adds	r4, #26
 80082b4:	454d      	cmp	r5, r9
 80082b6:	d11a      	bne.n	80082ee <_printf_common+0xd6>
 80082b8:	2000      	movs	r0, #0
 80082ba:	e008      	b.n	80082ce <_printf_common+0xb6>
 80082bc:	2301      	movs	r3, #1
 80082be:	4652      	mov	r2, sl
 80082c0:	4639      	mov	r1, r7
 80082c2:	4630      	mov	r0, r6
 80082c4:	47c0      	blx	r8
 80082c6:	3001      	adds	r0, #1
 80082c8:	d103      	bne.n	80082d2 <_printf_common+0xba>
 80082ca:	f04f 30ff 	mov.w	r0, #4294967295
 80082ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082d2:	3501      	adds	r5, #1
 80082d4:	e7c3      	b.n	800825e <_printf_common+0x46>
 80082d6:	18e1      	adds	r1, r4, r3
 80082d8:	1c5a      	adds	r2, r3, #1
 80082da:	2030      	movs	r0, #48	; 0x30
 80082dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082e0:	4422      	add	r2, r4
 80082e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082ea:	3302      	adds	r3, #2
 80082ec:	e7c5      	b.n	800827a <_printf_common+0x62>
 80082ee:	2301      	movs	r3, #1
 80082f0:	4622      	mov	r2, r4
 80082f2:	4639      	mov	r1, r7
 80082f4:	4630      	mov	r0, r6
 80082f6:	47c0      	blx	r8
 80082f8:	3001      	adds	r0, #1
 80082fa:	d0e6      	beq.n	80082ca <_printf_common+0xb2>
 80082fc:	f109 0901 	add.w	r9, r9, #1
 8008300:	e7d8      	b.n	80082b4 <_printf_common+0x9c>
	...

08008304 <_printf_i>:
 8008304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008308:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800830c:	460c      	mov	r4, r1
 800830e:	7e09      	ldrb	r1, [r1, #24]
 8008310:	b085      	sub	sp, #20
 8008312:	296e      	cmp	r1, #110	; 0x6e
 8008314:	4617      	mov	r7, r2
 8008316:	4606      	mov	r6, r0
 8008318:	4698      	mov	r8, r3
 800831a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800831c:	f000 80b3 	beq.w	8008486 <_printf_i+0x182>
 8008320:	d822      	bhi.n	8008368 <_printf_i+0x64>
 8008322:	2963      	cmp	r1, #99	; 0x63
 8008324:	d036      	beq.n	8008394 <_printf_i+0x90>
 8008326:	d80a      	bhi.n	800833e <_printf_i+0x3a>
 8008328:	2900      	cmp	r1, #0
 800832a:	f000 80b9 	beq.w	80084a0 <_printf_i+0x19c>
 800832e:	2958      	cmp	r1, #88	; 0x58
 8008330:	f000 8083 	beq.w	800843a <_printf_i+0x136>
 8008334:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008338:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800833c:	e032      	b.n	80083a4 <_printf_i+0xa0>
 800833e:	2964      	cmp	r1, #100	; 0x64
 8008340:	d001      	beq.n	8008346 <_printf_i+0x42>
 8008342:	2969      	cmp	r1, #105	; 0x69
 8008344:	d1f6      	bne.n	8008334 <_printf_i+0x30>
 8008346:	6820      	ldr	r0, [r4, #0]
 8008348:	6813      	ldr	r3, [r2, #0]
 800834a:	0605      	lsls	r5, r0, #24
 800834c:	f103 0104 	add.w	r1, r3, #4
 8008350:	d52a      	bpl.n	80083a8 <_printf_i+0xa4>
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	6011      	str	r1, [r2, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	da03      	bge.n	8008362 <_printf_i+0x5e>
 800835a:	222d      	movs	r2, #45	; 0x2d
 800835c:	425b      	negs	r3, r3
 800835e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008362:	486f      	ldr	r0, [pc, #444]	; (8008520 <_printf_i+0x21c>)
 8008364:	220a      	movs	r2, #10
 8008366:	e039      	b.n	80083dc <_printf_i+0xd8>
 8008368:	2973      	cmp	r1, #115	; 0x73
 800836a:	f000 809d 	beq.w	80084a8 <_printf_i+0x1a4>
 800836e:	d808      	bhi.n	8008382 <_printf_i+0x7e>
 8008370:	296f      	cmp	r1, #111	; 0x6f
 8008372:	d020      	beq.n	80083b6 <_printf_i+0xb2>
 8008374:	2970      	cmp	r1, #112	; 0x70
 8008376:	d1dd      	bne.n	8008334 <_printf_i+0x30>
 8008378:	6823      	ldr	r3, [r4, #0]
 800837a:	f043 0320 	orr.w	r3, r3, #32
 800837e:	6023      	str	r3, [r4, #0]
 8008380:	e003      	b.n	800838a <_printf_i+0x86>
 8008382:	2975      	cmp	r1, #117	; 0x75
 8008384:	d017      	beq.n	80083b6 <_printf_i+0xb2>
 8008386:	2978      	cmp	r1, #120	; 0x78
 8008388:	d1d4      	bne.n	8008334 <_printf_i+0x30>
 800838a:	2378      	movs	r3, #120	; 0x78
 800838c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008390:	4864      	ldr	r0, [pc, #400]	; (8008524 <_printf_i+0x220>)
 8008392:	e055      	b.n	8008440 <_printf_i+0x13c>
 8008394:	6813      	ldr	r3, [r2, #0]
 8008396:	1d19      	adds	r1, r3, #4
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	6011      	str	r1, [r2, #0]
 800839c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083a4:	2301      	movs	r3, #1
 80083a6:	e08c      	b.n	80084c2 <_printf_i+0x1be>
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	6011      	str	r1, [r2, #0]
 80083ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80083b0:	bf18      	it	ne
 80083b2:	b21b      	sxthne	r3, r3
 80083b4:	e7cf      	b.n	8008356 <_printf_i+0x52>
 80083b6:	6813      	ldr	r3, [r2, #0]
 80083b8:	6825      	ldr	r5, [r4, #0]
 80083ba:	1d18      	adds	r0, r3, #4
 80083bc:	6010      	str	r0, [r2, #0]
 80083be:	0628      	lsls	r0, r5, #24
 80083c0:	d501      	bpl.n	80083c6 <_printf_i+0xc2>
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	e002      	b.n	80083cc <_printf_i+0xc8>
 80083c6:	0668      	lsls	r0, r5, #25
 80083c8:	d5fb      	bpl.n	80083c2 <_printf_i+0xbe>
 80083ca:	881b      	ldrh	r3, [r3, #0]
 80083cc:	4854      	ldr	r0, [pc, #336]	; (8008520 <_printf_i+0x21c>)
 80083ce:	296f      	cmp	r1, #111	; 0x6f
 80083d0:	bf14      	ite	ne
 80083d2:	220a      	movne	r2, #10
 80083d4:	2208      	moveq	r2, #8
 80083d6:	2100      	movs	r1, #0
 80083d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083dc:	6865      	ldr	r5, [r4, #4]
 80083de:	60a5      	str	r5, [r4, #8]
 80083e0:	2d00      	cmp	r5, #0
 80083e2:	f2c0 8095 	blt.w	8008510 <_printf_i+0x20c>
 80083e6:	6821      	ldr	r1, [r4, #0]
 80083e8:	f021 0104 	bic.w	r1, r1, #4
 80083ec:	6021      	str	r1, [r4, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d13d      	bne.n	800846e <_printf_i+0x16a>
 80083f2:	2d00      	cmp	r5, #0
 80083f4:	f040 808e 	bne.w	8008514 <_printf_i+0x210>
 80083f8:	4665      	mov	r5, ip
 80083fa:	2a08      	cmp	r2, #8
 80083fc:	d10b      	bne.n	8008416 <_printf_i+0x112>
 80083fe:	6823      	ldr	r3, [r4, #0]
 8008400:	07db      	lsls	r3, r3, #31
 8008402:	d508      	bpl.n	8008416 <_printf_i+0x112>
 8008404:	6923      	ldr	r3, [r4, #16]
 8008406:	6862      	ldr	r2, [r4, #4]
 8008408:	429a      	cmp	r2, r3
 800840a:	bfde      	ittt	le
 800840c:	2330      	movle	r3, #48	; 0x30
 800840e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008412:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008416:	ebac 0305 	sub.w	r3, ip, r5
 800841a:	6123      	str	r3, [r4, #16]
 800841c:	f8cd 8000 	str.w	r8, [sp]
 8008420:	463b      	mov	r3, r7
 8008422:	aa03      	add	r2, sp, #12
 8008424:	4621      	mov	r1, r4
 8008426:	4630      	mov	r0, r6
 8008428:	f7ff fef6 	bl	8008218 <_printf_common>
 800842c:	3001      	adds	r0, #1
 800842e:	d14d      	bne.n	80084cc <_printf_i+0x1c8>
 8008430:	f04f 30ff 	mov.w	r0, #4294967295
 8008434:	b005      	add	sp, #20
 8008436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800843a:	4839      	ldr	r0, [pc, #228]	; (8008520 <_printf_i+0x21c>)
 800843c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008440:	6813      	ldr	r3, [r2, #0]
 8008442:	6821      	ldr	r1, [r4, #0]
 8008444:	1d1d      	adds	r5, r3, #4
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	6015      	str	r5, [r2, #0]
 800844a:	060a      	lsls	r2, r1, #24
 800844c:	d50b      	bpl.n	8008466 <_printf_i+0x162>
 800844e:	07ca      	lsls	r2, r1, #31
 8008450:	bf44      	itt	mi
 8008452:	f041 0120 	orrmi.w	r1, r1, #32
 8008456:	6021      	strmi	r1, [r4, #0]
 8008458:	b91b      	cbnz	r3, 8008462 <_printf_i+0x15e>
 800845a:	6822      	ldr	r2, [r4, #0]
 800845c:	f022 0220 	bic.w	r2, r2, #32
 8008460:	6022      	str	r2, [r4, #0]
 8008462:	2210      	movs	r2, #16
 8008464:	e7b7      	b.n	80083d6 <_printf_i+0xd2>
 8008466:	064d      	lsls	r5, r1, #25
 8008468:	bf48      	it	mi
 800846a:	b29b      	uxthmi	r3, r3
 800846c:	e7ef      	b.n	800844e <_printf_i+0x14a>
 800846e:	4665      	mov	r5, ip
 8008470:	fbb3 f1f2 	udiv	r1, r3, r2
 8008474:	fb02 3311 	mls	r3, r2, r1, r3
 8008478:	5cc3      	ldrb	r3, [r0, r3]
 800847a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800847e:	460b      	mov	r3, r1
 8008480:	2900      	cmp	r1, #0
 8008482:	d1f5      	bne.n	8008470 <_printf_i+0x16c>
 8008484:	e7b9      	b.n	80083fa <_printf_i+0xf6>
 8008486:	6813      	ldr	r3, [r2, #0]
 8008488:	6825      	ldr	r5, [r4, #0]
 800848a:	6961      	ldr	r1, [r4, #20]
 800848c:	1d18      	adds	r0, r3, #4
 800848e:	6010      	str	r0, [r2, #0]
 8008490:	0628      	lsls	r0, r5, #24
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	d501      	bpl.n	800849a <_printf_i+0x196>
 8008496:	6019      	str	r1, [r3, #0]
 8008498:	e002      	b.n	80084a0 <_printf_i+0x19c>
 800849a:	066a      	lsls	r2, r5, #25
 800849c:	d5fb      	bpl.n	8008496 <_printf_i+0x192>
 800849e:	8019      	strh	r1, [r3, #0]
 80084a0:	2300      	movs	r3, #0
 80084a2:	6123      	str	r3, [r4, #16]
 80084a4:	4665      	mov	r5, ip
 80084a6:	e7b9      	b.n	800841c <_printf_i+0x118>
 80084a8:	6813      	ldr	r3, [r2, #0]
 80084aa:	1d19      	adds	r1, r3, #4
 80084ac:	6011      	str	r1, [r2, #0]
 80084ae:	681d      	ldr	r5, [r3, #0]
 80084b0:	6862      	ldr	r2, [r4, #4]
 80084b2:	2100      	movs	r1, #0
 80084b4:	4628      	mov	r0, r5
 80084b6:	f7f7 feb3 	bl	8000220 <memchr>
 80084ba:	b108      	cbz	r0, 80084c0 <_printf_i+0x1bc>
 80084bc:	1b40      	subs	r0, r0, r5
 80084be:	6060      	str	r0, [r4, #4]
 80084c0:	6863      	ldr	r3, [r4, #4]
 80084c2:	6123      	str	r3, [r4, #16]
 80084c4:	2300      	movs	r3, #0
 80084c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084ca:	e7a7      	b.n	800841c <_printf_i+0x118>
 80084cc:	6923      	ldr	r3, [r4, #16]
 80084ce:	462a      	mov	r2, r5
 80084d0:	4639      	mov	r1, r7
 80084d2:	4630      	mov	r0, r6
 80084d4:	47c0      	blx	r8
 80084d6:	3001      	adds	r0, #1
 80084d8:	d0aa      	beq.n	8008430 <_printf_i+0x12c>
 80084da:	6823      	ldr	r3, [r4, #0]
 80084dc:	079b      	lsls	r3, r3, #30
 80084de:	d413      	bmi.n	8008508 <_printf_i+0x204>
 80084e0:	68e0      	ldr	r0, [r4, #12]
 80084e2:	9b03      	ldr	r3, [sp, #12]
 80084e4:	4298      	cmp	r0, r3
 80084e6:	bfb8      	it	lt
 80084e8:	4618      	movlt	r0, r3
 80084ea:	e7a3      	b.n	8008434 <_printf_i+0x130>
 80084ec:	2301      	movs	r3, #1
 80084ee:	464a      	mov	r2, r9
 80084f0:	4639      	mov	r1, r7
 80084f2:	4630      	mov	r0, r6
 80084f4:	47c0      	blx	r8
 80084f6:	3001      	adds	r0, #1
 80084f8:	d09a      	beq.n	8008430 <_printf_i+0x12c>
 80084fa:	3501      	adds	r5, #1
 80084fc:	68e3      	ldr	r3, [r4, #12]
 80084fe:	9a03      	ldr	r2, [sp, #12]
 8008500:	1a9b      	subs	r3, r3, r2
 8008502:	42ab      	cmp	r3, r5
 8008504:	dcf2      	bgt.n	80084ec <_printf_i+0x1e8>
 8008506:	e7eb      	b.n	80084e0 <_printf_i+0x1dc>
 8008508:	2500      	movs	r5, #0
 800850a:	f104 0919 	add.w	r9, r4, #25
 800850e:	e7f5      	b.n	80084fc <_printf_i+0x1f8>
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1ac      	bne.n	800846e <_printf_i+0x16a>
 8008514:	7803      	ldrb	r3, [r0, #0]
 8008516:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800851a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800851e:	e76c      	b.n	80083fa <_printf_i+0xf6>
 8008520:	0800a60e 	.word	0x0800a60e
 8008524:	0800a61f 	.word	0x0800a61f

08008528 <iprintf>:
 8008528:	b40f      	push	{r0, r1, r2, r3}
 800852a:	4b0a      	ldr	r3, [pc, #40]	; (8008554 <iprintf+0x2c>)
 800852c:	b513      	push	{r0, r1, r4, lr}
 800852e:	681c      	ldr	r4, [r3, #0]
 8008530:	b124      	cbz	r4, 800853c <iprintf+0x14>
 8008532:	69a3      	ldr	r3, [r4, #24]
 8008534:	b913      	cbnz	r3, 800853c <iprintf+0x14>
 8008536:	4620      	mov	r0, r4
 8008538:	f001 f952 	bl	80097e0 <__sinit>
 800853c:	ab05      	add	r3, sp, #20
 800853e:	9a04      	ldr	r2, [sp, #16]
 8008540:	68a1      	ldr	r1, [r4, #8]
 8008542:	9301      	str	r3, [sp, #4]
 8008544:	4620      	mov	r0, r4
 8008546:	f001 fe15 	bl	800a174 <_vfiprintf_r>
 800854a:	b002      	add	sp, #8
 800854c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008550:	b004      	add	sp, #16
 8008552:	4770      	bx	lr
 8008554:	2000000c 	.word	0x2000000c

08008558 <_puts_r>:
 8008558:	b570      	push	{r4, r5, r6, lr}
 800855a:	460e      	mov	r6, r1
 800855c:	4605      	mov	r5, r0
 800855e:	b118      	cbz	r0, 8008568 <_puts_r+0x10>
 8008560:	6983      	ldr	r3, [r0, #24]
 8008562:	b90b      	cbnz	r3, 8008568 <_puts_r+0x10>
 8008564:	f001 f93c 	bl	80097e0 <__sinit>
 8008568:	69ab      	ldr	r3, [r5, #24]
 800856a:	68ac      	ldr	r4, [r5, #8]
 800856c:	b913      	cbnz	r3, 8008574 <_puts_r+0x1c>
 800856e:	4628      	mov	r0, r5
 8008570:	f001 f936 	bl	80097e0 <__sinit>
 8008574:	4b23      	ldr	r3, [pc, #140]	; (8008604 <_puts_r+0xac>)
 8008576:	429c      	cmp	r4, r3
 8008578:	d117      	bne.n	80085aa <_puts_r+0x52>
 800857a:	686c      	ldr	r4, [r5, #4]
 800857c:	89a3      	ldrh	r3, [r4, #12]
 800857e:	071b      	lsls	r3, r3, #28
 8008580:	d51d      	bpl.n	80085be <_puts_r+0x66>
 8008582:	6923      	ldr	r3, [r4, #16]
 8008584:	b1db      	cbz	r3, 80085be <_puts_r+0x66>
 8008586:	3e01      	subs	r6, #1
 8008588:	68a3      	ldr	r3, [r4, #8]
 800858a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800858e:	3b01      	subs	r3, #1
 8008590:	60a3      	str	r3, [r4, #8]
 8008592:	b9e9      	cbnz	r1, 80085d0 <_puts_r+0x78>
 8008594:	2b00      	cmp	r3, #0
 8008596:	da2e      	bge.n	80085f6 <_puts_r+0x9e>
 8008598:	4622      	mov	r2, r4
 800859a:	210a      	movs	r1, #10
 800859c:	4628      	mov	r0, r5
 800859e:	f000 f929 	bl	80087f4 <__swbuf_r>
 80085a2:	3001      	adds	r0, #1
 80085a4:	d011      	beq.n	80085ca <_puts_r+0x72>
 80085a6:	200a      	movs	r0, #10
 80085a8:	e011      	b.n	80085ce <_puts_r+0x76>
 80085aa:	4b17      	ldr	r3, [pc, #92]	; (8008608 <_puts_r+0xb0>)
 80085ac:	429c      	cmp	r4, r3
 80085ae:	d101      	bne.n	80085b4 <_puts_r+0x5c>
 80085b0:	68ac      	ldr	r4, [r5, #8]
 80085b2:	e7e3      	b.n	800857c <_puts_r+0x24>
 80085b4:	4b15      	ldr	r3, [pc, #84]	; (800860c <_puts_r+0xb4>)
 80085b6:	429c      	cmp	r4, r3
 80085b8:	bf08      	it	eq
 80085ba:	68ec      	ldreq	r4, [r5, #12]
 80085bc:	e7de      	b.n	800857c <_puts_r+0x24>
 80085be:	4621      	mov	r1, r4
 80085c0:	4628      	mov	r0, r5
 80085c2:	f000 f969 	bl	8008898 <__swsetup_r>
 80085c6:	2800      	cmp	r0, #0
 80085c8:	d0dd      	beq.n	8008586 <_puts_r+0x2e>
 80085ca:	f04f 30ff 	mov.w	r0, #4294967295
 80085ce:	bd70      	pop	{r4, r5, r6, pc}
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	da04      	bge.n	80085de <_puts_r+0x86>
 80085d4:	69a2      	ldr	r2, [r4, #24]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	dc06      	bgt.n	80085e8 <_puts_r+0x90>
 80085da:	290a      	cmp	r1, #10
 80085dc:	d004      	beq.n	80085e8 <_puts_r+0x90>
 80085de:	6823      	ldr	r3, [r4, #0]
 80085e0:	1c5a      	adds	r2, r3, #1
 80085e2:	6022      	str	r2, [r4, #0]
 80085e4:	7019      	strb	r1, [r3, #0]
 80085e6:	e7cf      	b.n	8008588 <_puts_r+0x30>
 80085e8:	4622      	mov	r2, r4
 80085ea:	4628      	mov	r0, r5
 80085ec:	f000 f902 	bl	80087f4 <__swbuf_r>
 80085f0:	3001      	adds	r0, #1
 80085f2:	d1c9      	bne.n	8008588 <_puts_r+0x30>
 80085f4:	e7e9      	b.n	80085ca <_puts_r+0x72>
 80085f6:	6823      	ldr	r3, [r4, #0]
 80085f8:	200a      	movs	r0, #10
 80085fa:	1c5a      	adds	r2, r3, #1
 80085fc:	6022      	str	r2, [r4, #0]
 80085fe:	7018      	strb	r0, [r3, #0]
 8008600:	e7e5      	b.n	80085ce <_puts_r+0x76>
 8008602:	bf00      	nop
 8008604:	0800a660 	.word	0x0800a660
 8008608:	0800a680 	.word	0x0800a680
 800860c:	0800a640 	.word	0x0800a640

08008610 <puts>:
 8008610:	4b02      	ldr	r3, [pc, #8]	; (800861c <puts+0xc>)
 8008612:	4601      	mov	r1, r0
 8008614:	6818      	ldr	r0, [r3, #0]
 8008616:	f7ff bf9f 	b.w	8008558 <_puts_r>
 800861a:	bf00      	nop
 800861c:	2000000c 	.word	0x2000000c

08008620 <rand>:
 8008620:	b538      	push	{r3, r4, r5, lr}
 8008622:	4b13      	ldr	r3, [pc, #76]	; (8008670 <rand+0x50>)
 8008624:	681c      	ldr	r4, [r3, #0]
 8008626:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008628:	b97b      	cbnz	r3, 800864a <rand+0x2a>
 800862a:	2018      	movs	r0, #24
 800862c:	f001 f9d4 	bl	80099d8 <malloc>
 8008630:	4a10      	ldr	r2, [pc, #64]	; (8008674 <rand+0x54>)
 8008632:	4b11      	ldr	r3, [pc, #68]	; (8008678 <rand+0x58>)
 8008634:	63a0      	str	r0, [r4, #56]	; 0x38
 8008636:	e9c0 2300 	strd	r2, r3, [r0]
 800863a:	4b10      	ldr	r3, [pc, #64]	; (800867c <rand+0x5c>)
 800863c:	6083      	str	r3, [r0, #8]
 800863e:	230b      	movs	r3, #11
 8008640:	8183      	strh	r3, [r0, #12]
 8008642:	2201      	movs	r2, #1
 8008644:	2300      	movs	r3, #0
 8008646:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800864a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800864c:	480c      	ldr	r0, [pc, #48]	; (8008680 <rand+0x60>)
 800864e:	690a      	ldr	r2, [r1, #16]
 8008650:	694b      	ldr	r3, [r1, #20]
 8008652:	4c0c      	ldr	r4, [pc, #48]	; (8008684 <rand+0x64>)
 8008654:	4350      	muls	r0, r2
 8008656:	fb04 0003 	mla	r0, r4, r3, r0
 800865a:	fba2 2304 	umull	r2, r3, r2, r4
 800865e:	4403      	add	r3, r0
 8008660:	1c54      	adds	r4, r2, #1
 8008662:	f143 0500 	adc.w	r5, r3, #0
 8008666:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800866a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800866e:	bd38      	pop	{r3, r4, r5, pc}
 8008670:	2000000c 	.word	0x2000000c
 8008674:	abcd330e 	.word	0xabcd330e
 8008678:	e66d1234 	.word	0xe66d1234
 800867c:	0005deec 	.word	0x0005deec
 8008680:	5851f42d 	.word	0x5851f42d
 8008684:	4c957f2d 	.word	0x4c957f2d

08008688 <setbuf>:
 8008688:	2900      	cmp	r1, #0
 800868a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800868e:	bf0c      	ite	eq
 8008690:	2202      	moveq	r2, #2
 8008692:	2200      	movne	r2, #0
 8008694:	f000 b800 	b.w	8008698 <setvbuf>

08008698 <setvbuf>:
 8008698:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800869c:	461d      	mov	r5, r3
 800869e:	4b51      	ldr	r3, [pc, #324]	; (80087e4 <setvbuf+0x14c>)
 80086a0:	681e      	ldr	r6, [r3, #0]
 80086a2:	4604      	mov	r4, r0
 80086a4:	460f      	mov	r7, r1
 80086a6:	4690      	mov	r8, r2
 80086a8:	b126      	cbz	r6, 80086b4 <setvbuf+0x1c>
 80086aa:	69b3      	ldr	r3, [r6, #24]
 80086ac:	b913      	cbnz	r3, 80086b4 <setvbuf+0x1c>
 80086ae:	4630      	mov	r0, r6
 80086b0:	f001 f896 	bl	80097e0 <__sinit>
 80086b4:	4b4c      	ldr	r3, [pc, #304]	; (80087e8 <setvbuf+0x150>)
 80086b6:	429c      	cmp	r4, r3
 80086b8:	d152      	bne.n	8008760 <setvbuf+0xc8>
 80086ba:	6874      	ldr	r4, [r6, #4]
 80086bc:	f1b8 0f02 	cmp.w	r8, #2
 80086c0:	d006      	beq.n	80086d0 <setvbuf+0x38>
 80086c2:	f1b8 0f01 	cmp.w	r8, #1
 80086c6:	f200 8089 	bhi.w	80087dc <setvbuf+0x144>
 80086ca:	2d00      	cmp	r5, #0
 80086cc:	f2c0 8086 	blt.w	80087dc <setvbuf+0x144>
 80086d0:	4621      	mov	r1, r4
 80086d2:	4630      	mov	r0, r6
 80086d4:	f001 f81a 	bl	800970c <_fflush_r>
 80086d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086da:	b141      	cbz	r1, 80086ee <setvbuf+0x56>
 80086dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086e0:	4299      	cmp	r1, r3
 80086e2:	d002      	beq.n	80086ea <setvbuf+0x52>
 80086e4:	4630      	mov	r0, r6
 80086e6:	f001 fc73 	bl	8009fd0 <_free_r>
 80086ea:	2300      	movs	r3, #0
 80086ec:	6363      	str	r3, [r4, #52]	; 0x34
 80086ee:	2300      	movs	r3, #0
 80086f0:	61a3      	str	r3, [r4, #24]
 80086f2:	6063      	str	r3, [r4, #4]
 80086f4:	89a3      	ldrh	r3, [r4, #12]
 80086f6:	061b      	lsls	r3, r3, #24
 80086f8:	d503      	bpl.n	8008702 <setvbuf+0x6a>
 80086fa:	6921      	ldr	r1, [r4, #16]
 80086fc:	4630      	mov	r0, r6
 80086fe:	f001 fc67 	bl	8009fd0 <_free_r>
 8008702:	89a3      	ldrh	r3, [r4, #12]
 8008704:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008708:	f023 0303 	bic.w	r3, r3, #3
 800870c:	f1b8 0f02 	cmp.w	r8, #2
 8008710:	81a3      	strh	r3, [r4, #12]
 8008712:	d05d      	beq.n	80087d0 <setvbuf+0x138>
 8008714:	ab01      	add	r3, sp, #4
 8008716:	466a      	mov	r2, sp
 8008718:	4621      	mov	r1, r4
 800871a:	4630      	mov	r0, r6
 800871c:	f001 f8f8 	bl	8009910 <__swhatbuf_r>
 8008720:	89a3      	ldrh	r3, [r4, #12]
 8008722:	4318      	orrs	r0, r3
 8008724:	81a0      	strh	r0, [r4, #12]
 8008726:	bb2d      	cbnz	r5, 8008774 <setvbuf+0xdc>
 8008728:	9d00      	ldr	r5, [sp, #0]
 800872a:	4628      	mov	r0, r5
 800872c:	f001 f954 	bl	80099d8 <malloc>
 8008730:	4607      	mov	r7, r0
 8008732:	2800      	cmp	r0, #0
 8008734:	d14e      	bne.n	80087d4 <setvbuf+0x13c>
 8008736:	f8dd 9000 	ldr.w	r9, [sp]
 800873a:	45a9      	cmp	r9, r5
 800873c:	d13c      	bne.n	80087b8 <setvbuf+0x120>
 800873e:	f04f 30ff 	mov.w	r0, #4294967295
 8008742:	89a3      	ldrh	r3, [r4, #12]
 8008744:	f043 0302 	orr.w	r3, r3, #2
 8008748:	81a3      	strh	r3, [r4, #12]
 800874a:	2300      	movs	r3, #0
 800874c:	60a3      	str	r3, [r4, #8]
 800874e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008752:	6023      	str	r3, [r4, #0]
 8008754:	6123      	str	r3, [r4, #16]
 8008756:	2301      	movs	r3, #1
 8008758:	6163      	str	r3, [r4, #20]
 800875a:	b003      	add	sp, #12
 800875c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008760:	4b22      	ldr	r3, [pc, #136]	; (80087ec <setvbuf+0x154>)
 8008762:	429c      	cmp	r4, r3
 8008764:	d101      	bne.n	800876a <setvbuf+0xd2>
 8008766:	68b4      	ldr	r4, [r6, #8]
 8008768:	e7a8      	b.n	80086bc <setvbuf+0x24>
 800876a:	4b21      	ldr	r3, [pc, #132]	; (80087f0 <setvbuf+0x158>)
 800876c:	429c      	cmp	r4, r3
 800876e:	bf08      	it	eq
 8008770:	68f4      	ldreq	r4, [r6, #12]
 8008772:	e7a3      	b.n	80086bc <setvbuf+0x24>
 8008774:	2f00      	cmp	r7, #0
 8008776:	d0d8      	beq.n	800872a <setvbuf+0x92>
 8008778:	69b3      	ldr	r3, [r6, #24]
 800877a:	b913      	cbnz	r3, 8008782 <setvbuf+0xea>
 800877c:	4630      	mov	r0, r6
 800877e:	f001 f82f 	bl	80097e0 <__sinit>
 8008782:	f1b8 0f01 	cmp.w	r8, #1
 8008786:	bf08      	it	eq
 8008788:	89a3      	ldrheq	r3, [r4, #12]
 800878a:	6027      	str	r7, [r4, #0]
 800878c:	bf04      	itt	eq
 800878e:	f043 0301 	orreq.w	r3, r3, #1
 8008792:	81a3      	strheq	r3, [r4, #12]
 8008794:	89a3      	ldrh	r3, [r4, #12]
 8008796:	f013 0008 	ands.w	r0, r3, #8
 800879a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800879e:	d01b      	beq.n	80087d8 <setvbuf+0x140>
 80087a0:	f013 0001 	ands.w	r0, r3, #1
 80087a4:	bf18      	it	ne
 80087a6:	426d      	negne	r5, r5
 80087a8:	f04f 0300 	mov.w	r3, #0
 80087ac:	bf1d      	ittte	ne
 80087ae:	60a3      	strne	r3, [r4, #8]
 80087b0:	61a5      	strne	r5, [r4, #24]
 80087b2:	4618      	movne	r0, r3
 80087b4:	60a5      	streq	r5, [r4, #8]
 80087b6:	e7d0      	b.n	800875a <setvbuf+0xc2>
 80087b8:	4648      	mov	r0, r9
 80087ba:	f001 f90d 	bl	80099d8 <malloc>
 80087be:	4607      	mov	r7, r0
 80087c0:	2800      	cmp	r0, #0
 80087c2:	d0bc      	beq.n	800873e <setvbuf+0xa6>
 80087c4:	89a3      	ldrh	r3, [r4, #12]
 80087c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087ca:	81a3      	strh	r3, [r4, #12]
 80087cc:	464d      	mov	r5, r9
 80087ce:	e7d3      	b.n	8008778 <setvbuf+0xe0>
 80087d0:	2000      	movs	r0, #0
 80087d2:	e7b6      	b.n	8008742 <setvbuf+0xaa>
 80087d4:	46a9      	mov	r9, r5
 80087d6:	e7f5      	b.n	80087c4 <setvbuf+0x12c>
 80087d8:	60a0      	str	r0, [r4, #8]
 80087da:	e7be      	b.n	800875a <setvbuf+0xc2>
 80087dc:	f04f 30ff 	mov.w	r0, #4294967295
 80087e0:	e7bb      	b.n	800875a <setvbuf+0xc2>
 80087e2:	bf00      	nop
 80087e4:	2000000c 	.word	0x2000000c
 80087e8:	0800a660 	.word	0x0800a660
 80087ec:	0800a680 	.word	0x0800a680
 80087f0:	0800a640 	.word	0x0800a640

080087f4 <__swbuf_r>:
 80087f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f6:	460e      	mov	r6, r1
 80087f8:	4614      	mov	r4, r2
 80087fa:	4605      	mov	r5, r0
 80087fc:	b118      	cbz	r0, 8008806 <__swbuf_r+0x12>
 80087fe:	6983      	ldr	r3, [r0, #24]
 8008800:	b90b      	cbnz	r3, 8008806 <__swbuf_r+0x12>
 8008802:	f000 ffed 	bl	80097e0 <__sinit>
 8008806:	4b21      	ldr	r3, [pc, #132]	; (800888c <__swbuf_r+0x98>)
 8008808:	429c      	cmp	r4, r3
 800880a:	d12a      	bne.n	8008862 <__swbuf_r+0x6e>
 800880c:	686c      	ldr	r4, [r5, #4]
 800880e:	69a3      	ldr	r3, [r4, #24]
 8008810:	60a3      	str	r3, [r4, #8]
 8008812:	89a3      	ldrh	r3, [r4, #12]
 8008814:	071a      	lsls	r2, r3, #28
 8008816:	d52e      	bpl.n	8008876 <__swbuf_r+0x82>
 8008818:	6923      	ldr	r3, [r4, #16]
 800881a:	b363      	cbz	r3, 8008876 <__swbuf_r+0x82>
 800881c:	6923      	ldr	r3, [r4, #16]
 800881e:	6820      	ldr	r0, [r4, #0]
 8008820:	1ac0      	subs	r0, r0, r3
 8008822:	6963      	ldr	r3, [r4, #20]
 8008824:	b2f6      	uxtb	r6, r6
 8008826:	4283      	cmp	r3, r0
 8008828:	4637      	mov	r7, r6
 800882a:	dc04      	bgt.n	8008836 <__swbuf_r+0x42>
 800882c:	4621      	mov	r1, r4
 800882e:	4628      	mov	r0, r5
 8008830:	f000 ff6c 	bl	800970c <_fflush_r>
 8008834:	bb28      	cbnz	r0, 8008882 <__swbuf_r+0x8e>
 8008836:	68a3      	ldr	r3, [r4, #8]
 8008838:	3b01      	subs	r3, #1
 800883a:	60a3      	str	r3, [r4, #8]
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	1c5a      	adds	r2, r3, #1
 8008840:	6022      	str	r2, [r4, #0]
 8008842:	701e      	strb	r6, [r3, #0]
 8008844:	6963      	ldr	r3, [r4, #20]
 8008846:	3001      	adds	r0, #1
 8008848:	4283      	cmp	r3, r0
 800884a:	d004      	beq.n	8008856 <__swbuf_r+0x62>
 800884c:	89a3      	ldrh	r3, [r4, #12]
 800884e:	07db      	lsls	r3, r3, #31
 8008850:	d519      	bpl.n	8008886 <__swbuf_r+0x92>
 8008852:	2e0a      	cmp	r6, #10
 8008854:	d117      	bne.n	8008886 <__swbuf_r+0x92>
 8008856:	4621      	mov	r1, r4
 8008858:	4628      	mov	r0, r5
 800885a:	f000 ff57 	bl	800970c <_fflush_r>
 800885e:	b190      	cbz	r0, 8008886 <__swbuf_r+0x92>
 8008860:	e00f      	b.n	8008882 <__swbuf_r+0x8e>
 8008862:	4b0b      	ldr	r3, [pc, #44]	; (8008890 <__swbuf_r+0x9c>)
 8008864:	429c      	cmp	r4, r3
 8008866:	d101      	bne.n	800886c <__swbuf_r+0x78>
 8008868:	68ac      	ldr	r4, [r5, #8]
 800886a:	e7d0      	b.n	800880e <__swbuf_r+0x1a>
 800886c:	4b09      	ldr	r3, [pc, #36]	; (8008894 <__swbuf_r+0xa0>)
 800886e:	429c      	cmp	r4, r3
 8008870:	bf08      	it	eq
 8008872:	68ec      	ldreq	r4, [r5, #12]
 8008874:	e7cb      	b.n	800880e <__swbuf_r+0x1a>
 8008876:	4621      	mov	r1, r4
 8008878:	4628      	mov	r0, r5
 800887a:	f000 f80d 	bl	8008898 <__swsetup_r>
 800887e:	2800      	cmp	r0, #0
 8008880:	d0cc      	beq.n	800881c <__swbuf_r+0x28>
 8008882:	f04f 37ff 	mov.w	r7, #4294967295
 8008886:	4638      	mov	r0, r7
 8008888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800888a:	bf00      	nop
 800888c:	0800a660 	.word	0x0800a660
 8008890:	0800a680 	.word	0x0800a680
 8008894:	0800a640 	.word	0x0800a640

08008898 <__swsetup_r>:
 8008898:	4b32      	ldr	r3, [pc, #200]	; (8008964 <__swsetup_r+0xcc>)
 800889a:	b570      	push	{r4, r5, r6, lr}
 800889c:	681d      	ldr	r5, [r3, #0]
 800889e:	4606      	mov	r6, r0
 80088a0:	460c      	mov	r4, r1
 80088a2:	b125      	cbz	r5, 80088ae <__swsetup_r+0x16>
 80088a4:	69ab      	ldr	r3, [r5, #24]
 80088a6:	b913      	cbnz	r3, 80088ae <__swsetup_r+0x16>
 80088a8:	4628      	mov	r0, r5
 80088aa:	f000 ff99 	bl	80097e0 <__sinit>
 80088ae:	4b2e      	ldr	r3, [pc, #184]	; (8008968 <__swsetup_r+0xd0>)
 80088b0:	429c      	cmp	r4, r3
 80088b2:	d10f      	bne.n	80088d4 <__swsetup_r+0x3c>
 80088b4:	686c      	ldr	r4, [r5, #4]
 80088b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ba:	b29a      	uxth	r2, r3
 80088bc:	0715      	lsls	r5, r2, #28
 80088be:	d42c      	bmi.n	800891a <__swsetup_r+0x82>
 80088c0:	06d0      	lsls	r0, r2, #27
 80088c2:	d411      	bmi.n	80088e8 <__swsetup_r+0x50>
 80088c4:	2209      	movs	r2, #9
 80088c6:	6032      	str	r2, [r6, #0]
 80088c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088cc:	81a3      	strh	r3, [r4, #12]
 80088ce:	f04f 30ff 	mov.w	r0, #4294967295
 80088d2:	e03e      	b.n	8008952 <__swsetup_r+0xba>
 80088d4:	4b25      	ldr	r3, [pc, #148]	; (800896c <__swsetup_r+0xd4>)
 80088d6:	429c      	cmp	r4, r3
 80088d8:	d101      	bne.n	80088de <__swsetup_r+0x46>
 80088da:	68ac      	ldr	r4, [r5, #8]
 80088dc:	e7eb      	b.n	80088b6 <__swsetup_r+0x1e>
 80088de:	4b24      	ldr	r3, [pc, #144]	; (8008970 <__swsetup_r+0xd8>)
 80088e0:	429c      	cmp	r4, r3
 80088e2:	bf08      	it	eq
 80088e4:	68ec      	ldreq	r4, [r5, #12]
 80088e6:	e7e6      	b.n	80088b6 <__swsetup_r+0x1e>
 80088e8:	0751      	lsls	r1, r2, #29
 80088ea:	d512      	bpl.n	8008912 <__swsetup_r+0x7a>
 80088ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088ee:	b141      	cbz	r1, 8008902 <__swsetup_r+0x6a>
 80088f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088f4:	4299      	cmp	r1, r3
 80088f6:	d002      	beq.n	80088fe <__swsetup_r+0x66>
 80088f8:	4630      	mov	r0, r6
 80088fa:	f001 fb69 	bl	8009fd0 <_free_r>
 80088fe:	2300      	movs	r3, #0
 8008900:	6363      	str	r3, [r4, #52]	; 0x34
 8008902:	89a3      	ldrh	r3, [r4, #12]
 8008904:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008908:	81a3      	strh	r3, [r4, #12]
 800890a:	2300      	movs	r3, #0
 800890c:	6063      	str	r3, [r4, #4]
 800890e:	6923      	ldr	r3, [r4, #16]
 8008910:	6023      	str	r3, [r4, #0]
 8008912:	89a3      	ldrh	r3, [r4, #12]
 8008914:	f043 0308 	orr.w	r3, r3, #8
 8008918:	81a3      	strh	r3, [r4, #12]
 800891a:	6923      	ldr	r3, [r4, #16]
 800891c:	b94b      	cbnz	r3, 8008932 <__swsetup_r+0x9a>
 800891e:	89a3      	ldrh	r3, [r4, #12]
 8008920:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008928:	d003      	beq.n	8008932 <__swsetup_r+0x9a>
 800892a:	4621      	mov	r1, r4
 800892c:	4630      	mov	r0, r6
 800892e:	f001 f813 	bl	8009958 <__smakebuf_r>
 8008932:	89a2      	ldrh	r2, [r4, #12]
 8008934:	f012 0301 	ands.w	r3, r2, #1
 8008938:	d00c      	beq.n	8008954 <__swsetup_r+0xbc>
 800893a:	2300      	movs	r3, #0
 800893c:	60a3      	str	r3, [r4, #8]
 800893e:	6963      	ldr	r3, [r4, #20]
 8008940:	425b      	negs	r3, r3
 8008942:	61a3      	str	r3, [r4, #24]
 8008944:	6923      	ldr	r3, [r4, #16]
 8008946:	b953      	cbnz	r3, 800895e <__swsetup_r+0xc6>
 8008948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800894c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008950:	d1ba      	bne.n	80088c8 <__swsetup_r+0x30>
 8008952:	bd70      	pop	{r4, r5, r6, pc}
 8008954:	0792      	lsls	r2, r2, #30
 8008956:	bf58      	it	pl
 8008958:	6963      	ldrpl	r3, [r4, #20]
 800895a:	60a3      	str	r3, [r4, #8]
 800895c:	e7f2      	b.n	8008944 <__swsetup_r+0xac>
 800895e:	2000      	movs	r0, #0
 8008960:	e7f7      	b.n	8008952 <__swsetup_r+0xba>
 8008962:	bf00      	nop
 8008964:	2000000c 	.word	0x2000000c
 8008968:	0800a660 	.word	0x0800a660
 800896c:	0800a680 	.word	0x0800a680
 8008970:	0800a640 	.word	0x0800a640

08008974 <quorem>:
 8008974:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008978:	6903      	ldr	r3, [r0, #16]
 800897a:	690c      	ldr	r4, [r1, #16]
 800897c:	42a3      	cmp	r3, r4
 800897e:	4680      	mov	r8, r0
 8008980:	f2c0 8082 	blt.w	8008a88 <quorem+0x114>
 8008984:	3c01      	subs	r4, #1
 8008986:	f101 0714 	add.w	r7, r1, #20
 800898a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800898e:	f100 0614 	add.w	r6, r0, #20
 8008992:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008996:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800899a:	eb06 030c 	add.w	r3, r6, ip
 800899e:	3501      	adds	r5, #1
 80089a0:	eb07 090c 	add.w	r9, r7, ip
 80089a4:	9301      	str	r3, [sp, #4]
 80089a6:	fbb0 f5f5 	udiv	r5, r0, r5
 80089aa:	b395      	cbz	r5, 8008a12 <quorem+0x9e>
 80089ac:	f04f 0a00 	mov.w	sl, #0
 80089b0:	4638      	mov	r0, r7
 80089b2:	46b6      	mov	lr, r6
 80089b4:	46d3      	mov	fp, sl
 80089b6:	f850 2b04 	ldr.w	r2, [r0], #4
 80089ba:	b293      	uxth	r3, r2
 80089bc:	fb05 a303 	mla	r3, r5, r3, sl
 80089c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	ebab 0303 	sub.w	r3, fp, r3
 80089ca:	0c12      	lsrs	r2, r2, #16
 80089cc:	f8de b000 	ldr.w	fp, [lr]
 80089d0:	fb05 a202 	mla	r2, r5, r2, sl
 80089d4:	fa13 f38b 	uxtah	r3, r3, fp
 80089d8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80089dc:	fa1f fb82 	uxth.w	fp, r2
 80089e0:	f8de 2000 	ldr.w	r2, [lr]
 80089e4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80089e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089f2:	4581      	cmp	r9, r0
 80089f4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80089f8:	f84e 3b04 	str.w	r3, [lr], #4
 80089fc:	d2db      	bcs.n	80089b6 <quorem+0x42>
 80089fe:	f856 300c 	ldr.w	r3, [r6, ip]
 8008a02:	b933      	cbnz	r3, 8008a12 <quorem+0x9e>
 8008a04:	9b01      	ldr	r3, [sp, #4]
 8008a06:	3b04      	subs	r3, #4
 8008a08:	429e      	cmp	r6, r3
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	d330      	bcc.n	8008a70 <quorem+0xfc>
 8008a0e:	f8c8 4010 	str.w	r4, [r8, #16]
 8008a12:	4640      	mov	r0, r8
 8008a14:	f001 fa08 	bl	8009e28 <__mcmp>
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	db25      	blt.n	8008a68 <quorem+0xf4>
 8008a1c:	3501      	adds	r5, #1
 8008a1e:	4630      	mov	r0, r6
 8008a20:	f04f 0c00 	mov.w	ip, #0
 8008a24:	f857 2b04 	ldr.w	r2, [r7], #4
 8008a28:	f8d0 e000 	ldr.w	lr, [r0]
 8008a2c:	b293      	uxth	r3, r2
 8008a2e:	ebac 0303 	sub.w	r3, ip, r3
 8008a32:	0c12      	lsrs	r2, r2, #16
 8008a34:	fa13 f38e 	uxtah	r3, r3, lr
 8008a38:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008a3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a46:	45b9      	cmp	r9, r7
 8008a48:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008a4c:	f840 3b04 	str.w	r3, [r0], #4
 8008a50:	d2e8      	bcs.n	8008a24 <quorem+0xb0>
 8008a52:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008a56:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008a5a:	b92a      	cbnz	r2, 8008a68 <quorem+0xf4>
 8008a5c:	3b04      	subs	r3, #4
 8008a5e:	429e      	cmp	r6, r3
 8008a60:	461a      	mov	r2, r3
 8008a62:	d30b      	bcc.n	8008a7c <quorem+0x108>
 8008a64:	f8c8 4010 	str.w	r4, [r8, #16]
 8008a68:	4628      	mov	r0, r5
 8008a6a:	b003      	add	sp, #12
 8008a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a70:	6812      	ldr	r2, [r2, #0]
 8008a72:	3b04      	subs	r3, #4
 8008a74:	2a00      	cmp	r2, #0
 8008a76:	d1ca      	bne.n	8008a0e <quorem+0x9a>
 8008a78:	3c01      	subs	r4, #1
 8008a7a:	e7c5      	b.n	8008a08 <quorem+0x94>
 8008a7c:	6812      	ldr	r2, [r2, #0]
 8008a7e:	3b04      	subs	r3, #4
 8008a80:	2a00      	cmp	r2, #0
 8008a82:	d1ef      	bne.n	8008a64 <quorem+0xf0>
 8008a84:	3c01      	subs	r4, #1
 8008a86:	e7ea      	b.n	8008a5e <quorem+0xea>
 8008a88:	2000      	movs	r0, #0
 8008a8a:	e7ee      	b.n	8008a6a <quorem+0xf6>
 8008a8c:	0000      	movs	r0, r0
	...

08008a90 <_dtoa_r>:
 8008a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a94:	ec57 6b10 	vmov	r6, r7, d0
 8008a98:	b097      	sub	sp, #92	; 0x5c
 8008a9a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008a9c:	9106      	str	r1, [sp, #24]
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	920b      	str	r2, [sp, #44]	; 0x2c
 8008aa2:	9312      	str	r3, [sp, #72]	; 0x48
 8008aa4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008aa8:	e9cd 6700 	strd	r6, r7, [sp]
 8008aac:	b93d      	cbnz	r5, 8008abe <_dtoa_r+0x2e>
 8008aae:	2010      	movs	r0, #16
 8008ab0:	f000 ff92 	bl	80099d8 <malloc>
 8008ab4:	6260      	str	r0, [r4, #36]	; 0x24
 8008ab6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008aba:	6005      	str	r5, [r0, #0]
 8008abc:	60c5      	str	r5, [r0, #12]
 8008abe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ac0:	6819      	ldr	r1, [r3, #0]
 8008ac2:	b151      	cbz	r1, 8008ada <_dtoa_r+0x4a>
 8008ac4:	685a      	ldr	r2, [r3, #4]
 8008ac6:	604a      	str	r2, [r1, #4]
 8008ac8:	2301      	movs	r3, #1
 8008aca:	4093      	lsls	r3, r2
 8008acc:	608b      	str	r3, [r1, #8]
 8008ace:	4620      	mov	r0, r4
 8008ad0:	f000 ffc9 	bl	8009a66 <_Bfree>
 8008ad4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	601a      	str	r2, [r3, #0]
 8008ada:	1e3b      	subs	r3, r7, #0
 8008adc:	bfbb      	ittet	lt
 8008ade:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008ae2:	9301      	strlt	r3, [sp, #4]
 8008ae4:	2300      	movge	r3, #0
 8008ae6:	2201      	movlt	r2, #1
 8008ae8:	bfac      	ite	ge
 8008aea:	f8c8 3000 	strge.w	r3, [r8]
 8008aee:	f8c8 2000 	strlt.w	r2, [r8]
 8008af2:	4baf      	ldr	r3, [pc, #700]	; (8008db0 <_dtoa_r+0x320>)
 8008af4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008af8:	ea33 0308 	bics.w	r3, r3, r8
 8008afc:	d114      	bne.n	8008b28 <_dtoa_r+0x98>
 8008afe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b00:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b04:	6013      	str	r3, [r2, #0]
 8008b06:	9b00      	ldr	r3, [sp, #0]
 8008b08:	b923      	cbnz	r3, 8008b14 <_dtoa_r+0x84>
 8008b0a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	f000 8542 	beq.w	8009598 <_dtoa_r+0xb08>
 8008b14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b16:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008dc4 <_dtoa_r+0x334>
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	f000 8544 	beq.w	80095a8 <_dtoa_r+0xb18>
 8008b20:	f10b 0303 	add.w	r3, fp, #3
 8008b24:	f000 bd3e 	b.w	80095a4 <_dtoa_r+0xb14>
 8008b28:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	2300      	movs	r3, #0
 8008b30:	4630      	mov	r0, r6
 8008b32:	4639      	mov	r1, r7
 8008b34:	f7f7 ffe8 	bl	8000b08 <__aeabi_dcmpeq>
 8008b38:	4681      	mov	r9, r0
 8008b3a:	b168      	cbz	r0, 8008b58 <_dtoa_r+0xc8>
 8008b3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b3e:	2301      	movs	r3, #1
 8008b40:	6013      	str	r3, [r2, #0]
 8008b42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	f000 8524 	beq.w	8009592 <_dtoa_r+0xb02>
 8008b4a:	4b9a      	ldr	r3, [pc, #616]	; (8008db4 <_dtoa_r+0x324>)
 8008b4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b4e:	f103 3bff 	add.w	fp, r3, #4294967295
 8008b52:	6013      	str	r3, [r2, #0]
 8008b54:	f000 bd28 	b.w	80095a8 <_dtoa_r+0xb18>
 8008b58:	aa14      	add	r2, sp, #80	; 0x50
 8008b5a:	a915      	add	r1, sp, #84	; 0x54
 8008b5c:	ec47 6b10 	vmov	d0, r6, r7
 8008b60:	4620      	mov	r0, r4
 8008b62:	f001 f9d8 	bl	8009f16 <__d2b>
 8008b66:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008b6a:	9004      	str	r0, [sp, #16]
 8008b6c:	2d00      	cmp	r5, #0
 8008b6e:	d07c      	beq.n	8008c6a <_dtoa_r+0x1da>
 8008b70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008b74:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008b78:	46b2      	mov	sl, r6
 8008b7a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008b7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008b82:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008b86:	2200      	movs	r2, #0
 8008b88:	4b8b      	ldr	r3, [pc, #556]	; (8008db8 <_dtoa_r+0x328>)
 8008b8a:	4650      	mov	r0, sl
 8008b8c:	4659      	mov	r1, fp
 8008b8e:	f7f7 fb9b 	bl	80002c8 <__aeabi_dsub>
 8008b92:	a381      	add	r3, pc, #516	; (adr r3, 8008d98 <_dtoa_r+0x308>)
 8008b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b98:	f7f7 fd4e 	bl	8000638 <__aeabi_dmul>
 8008b9c:	a380      	add	r3, pc, #512	; (adr r3, 8008da0 <_dtoa_r+0x310>)
 8008b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba2:	f7f7 fb93 	bl	80002cc <__adddf3>
 8008ba6:	4606      	mov	r6, r0
 8008ba8:	4628      	mov	r0, r5
 8008baa:	460f      	mov	r7, r1
 8008bac:	f7f7 fcda 	bl	8000564 <__aeabi_i2d>
 8008bb0:	a37d      	add	r3, pc, #500	; (adr r3, 8008da8 <_dtoa_r+0x318>)
 8008bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb6:	f7f7 fd3f 	bl	8000638 <__aeabi_dmul>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	4630      	mov	r0, r6
 8008bc0:	4639      	mov	r1, r7
 8008bc2:	f7f7 fb83 	bl	80002cc <__adddf3>
 8008bc6:	4606      	mov	r6, r0
 8008bc8:	460f      	mov	r7, r1
 8008bca:	f7f7 ffe5 	bl	8000b98 <__aeabi_d2iz>
 8008bce:	2200      	movs	r2, #0
 8008bd0:	4682      	mov	sl, r0
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	4630      	mov	r0, r6
 8008bd6:	4639      	mov	r1, r7
 8008bd8:	f7f7 ffa0 	bl	8000b1c <__aeabi_dcmplt>
 8008bdc:	b148      	cbz	r0, 8008bf2 <_dtoa_r+0x162>
 8008bde:	4650      	mov	r0, sl
 8008be0:	f7f7 fcc0 	bl	8000564 <__aeabi_i2d>
 8008be4:	4632      	mov	r2, r6
 8008be6:	463b      	mov	r3, r7
 8008be8:	f7f7 ff8e 	bl	8000b08 <__aeabi_dcmpeq>
 8008bec:	b908      	cbnz	r0, 8008bf2 <_dtoa_r+0x162>
 8008bee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008bf2:	f1ba 0f16 	cmp.w	sl, #22
 8008bf6:	d859      	bhi.n	8008cac <_dtoa_r+0x21c>
 8008bf8:	4970      	ldr	r1, [pc, #448]	; (8008dbc <_dtoa_r+0x32c>)
 8008bfa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008bfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c06:	f7f7 ffa7 	bl	8000b58 <__aeabi_dcmpgt>
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	d050      	beq.n	8008cb0 <_dtoa_r+0x220>
 8008c0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c12:	2300      	movs	r3, #0
 8008c14:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c18:	1b5d      	subs	r5, r3, r5
 8008c1a:	f1b5 0801 	subs.w	r8, r5, #1
 8008c1e:	bf49      	itett	mi
 8008c20:	f1c5 0301 	rsbmi	r3, r5, #1
 8008c24:	2300      	movpl	r3, #0
 8008c26:	9305      	strmi	r3, [sp, #20]
 8008c28:	f04f 0800 	movmi.w	r8, #0
 8008c2c:	bf58      	it	pl
 8008c2e:	9305      	strpl	r3, [sp, #20]
 8008c30:	f1ba 0f00 	cmp.w	sl, #0
 8008c34:	db3e      	blt.n	8008cb4 <_dtoa_r+0x224>
 8008c36:	2300      	movs	r3, #0
 8008c38:	44d0      	add	r8, sl
 8008c3a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008c3e:	9307      	str	r3, [sp, #28]
 8008c40:	9b06      	ldr	r3, [sp, #24]
 8008c42:	2b09      	cmp	r3, #9
 8008c44:	f200 8090 	bhi.w	8008d68 <_dtoa_r+0x2d8>
 8008c48:	2b05      	cmp	r3, #5
 8008c4a:	bfc4      	itt	gt
 8008c4c:	3b04      	subgt	r3, #4
 8008c4e:	9306      	strgt	r3, [sp, #24]
 8008c50:	9b06      	ldr	r3, [sp, #24]
 8008c52:	f1a3 0302 	sub.w	r3, r3, #2
 8008c56:	bfcc      	ite	gt
 8008c58:	2500      	movgt	r5, #0
 8008c5a:	2501      	movle	r5, #1
 8008c5c:	2b03      	cmp	r3, #3
 8008c5e:	f200 808f 	bhi.w	8008d80 <_dtoa_r+0x2f0>
 8008c62:	e8df f003 	tbb	[pc, r3]
 8008c66:	7f7d      	.short	0x7f7d
 8008c68:	7131      	.short	0x7131
 8008c6a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008c6e:	441d      	add	r5, r3
 8008c70:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008c74:	2820      	cmp	r0, #32
 8008c76:	dd13      	ble.n	8008ca0 <_dtoa_r+0x210>
 8008c78:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008c7c:	9b00      	ldr	r3, [sp, #0]
 8008c7e:	fa08 f800 	lsl.w	r8, r8, r0
 8008c82:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008c86:	fa23 f000 	lsr.w	r0, r3, r0
 8008c8a:	ea48 0000 	orr.w	r0, r8, r0
 8008c8e:	f7f7 fc59 	bl	8000544 <__aeabi_ui2d>
 8008c92:	2301      	movs	r3, #1
 8008c94:	4682      	mov	sl, r0
 8008c96:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008c9a:	3d01      	subs	r5, #1
 8008c9c:	9313      	str	r3, [sp, #76]	; 0x4c
 8008c9e:	e772      	b.n	8008b86 <_dtoa_r+0xf6>
 8008ca0:	9b00      	ldr	r3, [sp, #0]
 8008ca2:	f1c0 0020 	rsb	r0, r0, #32
 8008ca6:	fa03 f000 	lsl.w	r0, r3, r0
 8008caa:	e7f0      	b.n	8008c8e <_dtoa_r+0x1fe>
 8008cac:	2301      	movs	r3, #1
 8008cae:	e7b1      	b.n	8008c14 <_dtoa_r+0x184>
 8008cb0:	900f      	str	r0, [sp, #60]	; 0x3c
 8008cb2:	e7b0      	b.n	8008c16 <_dtoa_r+0x186>
 8008cb4:	9b05      	ldr	r3, [sp, #20]
 8008cb6:	eba3 030a 	sub.w	r3, r3, sl
 8008cba:	9305      	str	r3, [sp, #20]
 8008cbc:	f1ca 0300 	rsb	r3, sl, #0
 8008cc0:	9307      	str	r3, [sp, #28]
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	930e      	str	r3, [sp, #56]	; 0x38
 8008cc6:	e7bb      	b.n	8008c40 <_dtoa_r+0x1b0>
 8008cc8:	2301      	movs	r3, #1
 8008cca:	930a      	str	r3, [sp, #40]	; 0x28
 8008ccc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	dd59      	ble.n	8008d86 <_dtoa_r+0x2f6>
 8008cd2:	9302      	str	r3, [sp, #8]
 8008cd4:	4699      	mov	r9, r3
 8008cd6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008cd8:	2200      	movs	r2, #0
 8008cda:	6072      	str	r2, [r6, #4]
 8008cdc:	2204      	movs	r2, #4
 8008cde:	f102 0014 	add.w	r0, r2, #20
 8008ce2:	4298      	cmp	r0, r3
 8008ce4:	6871      	ldr	r1, [r6, #4]
 8008ce6:	d953      	bls.n	8008d90 <_dtoa_r+0x300>
 8008ce8:	4620      	mov	r0, r4
 8008cea:	f000 fe88 	bl	80099fe <_Balloc>
 8008cee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cf0:	6030      	str	r0, [r6, #0]
 8008cf2:	f1b9 0f0e 	cmp.w	r9, #14
 8008cf6:	f8d3 b000 	ldr.w	fp, [r3]
 8008cfa:	f200 80e6 	bhi.w	8008eca <_dtoa_r+0x43a>
 8008cfe:	2d00      	cmp	r5, #0
 8008d00:	f000 80e3 	beq.w	8008eca <_dtoa_r+0x43a>
 8008d04:	ed9d 7b00 	vldr	d7, [sp]
 8008d08:	f1ba 0f00 	cmp.w	sl, #0
 8008d0c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008d10:	dd74      	ble.n	8008dfc <_dtoa_r+0x36c>
 8008d12:	4a2a      	ldr	r2, [pc, #168]	; (8008dbc <_dtoa_r+0x32c>)
 8008d14:	f00a 030f 	and.w	r3, sl, #15
 8008d18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008d1c:	ed93 7b00 	vldr	d7, [r3]
 8008d20:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008d24:	06f0      	lsls	r0, r6, #27
 8008d26:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008d2a:	d565      	bpl.n	8008df8 <_dtoa_r+0x368>
 8008d2c:	4b24      	ldr	r3, [pc, #144]	; (8008dc0 <_dtoa_r+0x330>)
 8008d2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d32:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d36:	f7f7 fda9 	bl	800088c <__aeabi_ddiv>
 8008d3a:	e9cd 0100 	strd	r0, r1, [sp]
 8008d3e:	f006 060f 	and.w	r6, r6, #15
 8008d42:	2503      	movs	r5, #3
 8008d44:	4f1e      	ldr	r7, [pc, #120]	; (8008dc0 <_dtoa_r+0x330>)
 8008d46:	e04c      	b.n	8008de2 <_dtoa_r+0x352>
 8008d48:	2301      	movs	r3, #1
 8008d4a:	930a      	str	r3, [sp, #40]	; 0x28
 8008d4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d4e:	4453      	add	r3, sl
 8008d50:	f103 0901 	add.w	r9, r3, #1
 8008d54:	9302      	str	r3, [sp, #8]
 8008d56:	464b      	mov	r3, r9
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	bfb8      	it	lt
 8008d5c:	2301      	movlt	r3, #1
 8008d5e:	e7ba      	b.n	8008cd6 <_dtoa_r+0x246>
 8008d60:	2300      	movs	r3, #0
 8008d62:	e7b2      	b.n	8008cca <_dtoa_r+0x23a>
 8008d64:	2300      	movs	r3, #0
 8008d66:	e7f0      	b.n	8008d4a <_dtoa_r+0x2ba>
 8008d68:	2501      	movs	r5, #1
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	9306      	str	r3, [sp, #24]
 8008d6e:	950a      	str	r5, [sp, #40]	; 0x28
 8008d70:	f04f 33ff 	mov.w	r3, #4294967295
 8008d74:	9302      	str	r3, [sp, #8]
 8008d76:	4699      	mov	r9, r3
 8008d78:	2200      	movs	r2, #0
 8008d7a:	2312      	movs	r3, #18
 8008d7c:	920b      	str	r2, [sp, #44]	; 0x2c
 8008d7e:	e7aa      	b.n	8008cd6 <_dtoa_r+0x246>
 8008d80:	2301      	movs	r3, #1
 8008d82:	930a      	str	r3, [sp, #40]	; 0x28
 8008d84:	e7f4      	b.n	8008d70 <_dtoa_r+0x2e0>
 8008d86:	2301      	movs	r3, #1
 8008d88:	9302      	str	r3, [sp, #8]
 8008d8a:	4699      	mov	r9, r3
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	e7f5      	b.n	8008d7c <_dtoa_r+0x2ec>
 8008d90:	3101      	adds	r1, #1
 8008d92:	6071      	str	r1, [r6, #4]
 8008d94:	0052      	lsls	r2, r2, #1
 8008d96:	e7a2      	b.n	8008cde <_dtoa_r+0x24e>
 8008d98:	636f4361 	.word	0x636f4361
 8008d9c:	3fd287a7 	.word	0x3fd287a7
 8008da0:	8b60c8b3 	.word	0x8b60c8b3
 8008da4:	3fc68a28 	.word	0x3fc68a28
 8008da8:	509f79fb 	.word	0x509f79fb
 8008dac:	3fd34413 	.word	0x3fd34413
 8008db0:	7ff00000 	.word	0x7ff00000
 8008db4:	0800a60d 	.word	0x0800a60d
 8008db8:	3ff80000 	.word	0x3ff80000
 8008dbc:	0800a6c8 	.word	0x0800a6c8
 8008dc0:	0800a6a0 	.word	0x0800a6a0
 8008dc4:	0800a639 	.word	0x0800a639
 8008dc8:	07f1      	lsls	r1, r6, #31
 8008dca:	d508      	bpl.n	8008dde <_dtoa_r+0x34e>
 8008dcc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008dd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dd4:	f7f7 fc30 	bl	8000638 <__aeabi_dmul>
 8008dd8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008ddc:	3501      	adds	r5, #1
 8008dde:	1076      	asrs	r6, r6, #1
 8008de0:	3708      	adds	r7, #8
 8008de2:	2e00      	cmp	r6, #0
 8008de4:	d1f0      	bne.n	8008dc8 <_dtoa_r+0x338>
 8008de6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008dea:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008dee:	f7f7 fd4d 	bl	800088c <__aeabi_ddiv>
 8008df2:	e9cd 0100 	strd	r0, r1, [sp]
 8008df6:	e01a      	b.n	8008e2e <_dtoa_r+0x39e>
 8008df8:	2502      	movs	r5, #2
 8008dfa:	e7a3      	b.n	8008d44 <_dtoa_r+0x2b4>
 8008dfc:	f000 80a0 	beq.w	8008f40 <_dtoa_r+0x4b0>
 8008e00:	f1ca 0600 	rsb	r6, sl, #0
 8008e04:	4b9f      	ldr	r3, [pc, #636]	; (8009084 <_dtoa_r+0x5f4>)
 8008e06:	4fa0      	ldr	r7, [pc, #640]	; (8009088 <_dtoa_r+0x5f8>)
 8008e08:	f006 020f 	and.w	r2, r6, #15
 8008e0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008e18:	f7f7 fc0e 	bl	8000638 <__aeabi_dmul>
 8008e1c:	e9cd 0100 	strd	r0, r1, [sp]
 8008e20:	1136      	asrs	r6, r6, #4
 8008e22:	2300      	movs	r3, #0
 8008e24:	2502      	movs	r5, #2
 8008e26:	2e00      	cmp	r6, #0
 8008e28:	d17f      	bne.n	8008f2a <_dtoa_r+0x49a>
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d1e1      	bne.n	8008df2 <_dtoa_r+0x362>
 8008e2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f000 8087 	beq.w	8008f44 <_dtoa_r+0x4b4>
 8008e36:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	4b93      	ldr	r3, [pc, #588]	; (800908c <_dtoa_r+0x5fc>)
 8008e3e:	4630      	mov	r0, r6
 8008e40:	4639      	mov	r1, r7
 8008e42:	f7f7 fe6b 	bl	8000b1c <__aeabi_dcmplt>
 8008e46:	2800      	cmp	r0, #0
 8008e48:	d07c      	beq.n	8008f44 <_dtoa_r+0x4b4>
 8008e4a:	f1b9 0f00 	cmp.w	r9, #0
 8008e4e:	d079      	beq.n	8008f44 <_dtoa_r+0x4b4>
 8008e50:	9b02      	ldr	r3, [sp, #8]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	dd35      	ble.n	8008ec2 <_dtoa_r+0x432>
 8008e56:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008e5a:	9308      	str	r3, [sp, #32]
 8008e5c:	4639      	mov	r1, r7
 8008e5e:	2200      	movs	r2, #0
 8008e60:	4b8b      	ldr	r3, [pc, #556]	; (8009090 <_dtoa_r+0x600>)
 8008e62:	4630      	mov	r0, r6
 8008e64:	f7f7 fbe8 	bl	8000638 <__aeabi_dmul>
 8008e68:	e9cd 0100 	strd	r0, r1, [sp]
 8008e6c:	9f02      	ldr	r7, [sp, #8]
 8008e6e:	3501      	adds	r5, #1
 8008e70:	4628      	mov	r0, r5
 8008e72:	f7f7 fb77 	bl	8000564 <__aeabi_i2d>
 8008e76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e7a:	f7f7 fbdd 	bl	8000638 <__aeabi_dmul>
 8008e7e:	2200      	movs	r2, #0
 8008e80:	4b84      	ldr	r3, [pc, #528]	; (8009094 <_dtoa_r+0x604>)
 8008e82:	f7f7 fa23 	bl	80002cc <__adddf3>
 8008e86:	4605      	mov	r5, r0
 8008e88:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008e8c:	2f00      	cmp	r7, #0
 8008e8e:	d15d      	bne.n	8008f4c <_dtoa_r+0x4bc>
 8008e90:	2200      	movs	r2, #0
 8008e92:	4b81      	ldr	r3, [pc, #516]	; (8009098 <_dtoa_r+0x608>)
 8008e94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e98:	f7f7 fa16 	bl	80002c8 <__aeabi_dsub>
 8008e9c:	462a      	mov	r2, r5
 8008e9e:	4633      	mov	r3, r6
 8008ea0:	e9cd 0100 	strd	r0, r1, [sp]
 8008ea4:	f7f7 fe58 	bl	8000b58 <__aeabi_dcmpgt>
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	f040 8288 	bne.w	80093be <_dtoa_r+0x92e>
 8008eae:	462a      	mov	r2, r5
 8008eb0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008eb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008eb8:	f7f7 fe30 	bl	8000b1c <__aeabi_dcmplt>
 8008ebc:	2800      	cmp	r0, #0
 8008ebe:	f040 827c 	bne.w	80093ba <_dtoa_r+0x92a>
 8008ec2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008ec6:	e9cd 2300 	strd	r2, r3, [sp]
 8008eca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f2c0 8150 	blt.w	8009172 <_dtoa_r+0x6e2>
 8008ed2:	f1ba 0f0e 	cmp.w	sl, #14
 8008ed6:	f300 814c 	bgt.w	8009172 <_dtoa_r+0x6e2>
 8008eda:	4b6a      	ldr	r3, [pc, #424]	; (8009084 <_dtoa_r+0x5f4>)
 8008edc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008ee0:	ed93 7b00 	vldr	d7, [r3]
 8008ee4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008eec:	f280 80d8 	bge.w	80090a0 <_dtoa_r+0x610>
 8008ef0:	f1b9 0f00 	cmp.w	r9, #0
 8008ef4:	f300 80d4 	bgt.w	80090a0 <_dtoa_r+0x610>
 8008ef8:	f040 825e 	bne.w	80093b8 <_dtoa_r+0x928>
 8008efc:	2200      	movs	r2, #0
 8008efe:	4b66      	ldr	r3, [pc, #408]	; (8009098 <_dtoa_r+0x608>)
 8008f00:	ec51 0b17 	vmov	r0, r1, d7
 8008f04:	f7f7 fb98 	bl	8000638 <__aeabi_dmul>
 8008f08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f0c:	f7f7 fe1a 	bl	8000b44 <__aeabi_dcmpge>
 8008f10:	464f      	mov	r7, r9
 8008f12:	464e      	mov	r6, r9
 8008f14:	2800      	cmp	r0, #0
 8008f16:	f040 8234 	bne.w	8009382 <_dtoa_r+0x8f2>
 8008f1a:	2331      	movs	r3, #49	; 0x31
 8008f1c:	f10b 0501 	add.w	r5, fp, #1
 8008f20:	f88b 3000 	strb.w	r3, [fp]
 8008f24:	f10a 0a01 	add.w	sl, sl, #1
 8008f28:	e22f      	b.n	800938a <_dtoa_r+0x8fa>
 8008f2a:	07f2      	lsls	r2, r6, #31
 8008f2c:	d505      	bpl.n	8008f3a <_dtoa_r+0x4aa>
 8008f2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f32:	f7f7 fb81 	bl	8000638 <__aeabi_dmul>
 8008f36:	3501      	adds	r5, #1
 8008f38:	2301      	movs	r3, #1
 8008f3a:	1076      	asrs	r6, r6, #1
 8008f3c:	3708      	adds	r7, #8
 8008f3e:	e772      	b.n	8008e26 <_dtoa_r+0x396>
 8008f40:	2502      	movs	r5, #2
 8008f42:	e774      	b.n	8008e2e <_dtoa_r+0x39e>
 8008f44:	f8cd a020 	str.w	sl, [sp, #32]
 8008f48:	464f      	mov	r7, r9
 8008f4a:	e791      	b.n	8008e70 <_dtoa_r+0x3e0>
 8008f4c:	4b4d      	ldr	r3, [pc, #308]	; (8009084 <_dtoa_r+0x5f4>)
 8008f4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008f52:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008f56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d047      	beq.n	8008fec <_dtoa_r+0x55c>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	460b      	mov	r3, r1
 8008f60:	2000      	movs	r0, #0
 8008f62:	494e      	ldr	r1, [pc, #312]	; (800909c <_dtoa_r+0x60c>)
 8008f64:	f7f7 fc92 	bl	800088c <__aeabi_ddiv>
 8008f68:	462a      	mov	r2, r5
 8008f6a:	4633      	mov	r3, r6
 8008f6c:	f7f7 f9ac 	bl	80002c8 <__aeabi_dsub>
 8008f70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008f74:	465d      	mov	r5, fp
 8008f76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f7a:	f7f7 fe0d 	bl	8000b98 <__aeabi_d2iz>
 8008f7e:	4606      	mov	r6, r0
 8008f80:	f7f7 faf0 	bl	8000564 <__aeabi_i2d>
 8008f84:	4602      	mov	r2, r0
 8008f86:	460b      	mov	r3, r1
 8008f88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f8c:	f7f7 f99c 	bl	80002c8 <__aeabi_dsub>
 8008f90:	3630      	adds	r6, #48	; 0x30
 8008f92:	f805 6b01 	strb.w	r6, [r5], #1
 8008f96:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008f9a:	e9cd 0100 	strd	r0, r1, [sp]
 8008f9e:	f7f7 fdbd 	bl	8000b1c <__aeabi_dcmplt>
 8008fa2:	2800      	cmp	r0, #0
 8008fa4:	d163      	bne.n	800906e <_dtoa_r+0x5de>
 8008fa6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008faa:	2000      	movs	r0, #0
 8008fac:	4937      	ldr	r1, [pc, #220]	; (800908c <_dtoa_r+0x5fc>)
 8008fae:	f7f7 f98b 	bl	80002c8 <__aeabi_dsub>
 8008fb2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008fb6:	f7f7 fdb1 	bl	8000b1c <__aeabi_dcmplt>
 8008fba:	2800      	cmp	r0, #0
 8008fbc:	f040 80b7 	bne.w	800912e <_dtoa_r+0x69e>
 8008fc0:	eba5 030b 	sub.w	r3, r5, fp
 8008fc4:	429f      	cmp	r7, r3
 8008fc6:	f77f af7c 	ble.w	8008ec2 <_dtoa_r+0x432>
 8008fca:	2200      	movs	r2, #0
 8008fcc:	4b30      	ldr	r3, [pc, #192]	; (8009090 <_dtoa_r+0x600>)
 8008fce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008fd2:	f7f7 fb31 	bl	8000638 <__aeabi_dmul>
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008fdc:	4b2c      	ldr	r3, [pc, #176]	; (8009090 <_dtoa_r+0x600>)
 8008fde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fe2:	f7f7 fb29 	bl	8000638 <__aeabi_dmul>
 8008fe6:	e9cd 0100 	strd	r0, r1, [sp]
 8008fea:	e7c4      	b.n	8008f76 <_dtoa_r+0x4e6>
 8008fec:	462a      	mov	r2, r5
 8008fee:	4633      	mov	r3, r6
 8008ff0:	f7f7 fb22 	bl	8000638 <__aeabi_dmul>
 8008ff4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008ff8:	eb0b 0507 	add.w	r5, fp, r7
 8008ffc:	465e      	mov	r6, fp
 8008ffe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009002:	f7f7 fdc9 	bl	8000b98 <__aeabi_d2iz>
 8009006:	4607      	mov	r7, r0
 8009008:	f7f7 faac 	bl	8000564 <__aeabi_i2d>
 800900c:	3730      	adds	r7, #48	; 0x30
 800900e:	4602      	mov	r2, r0
 8009010:	460b      	mov	r3, r1
 8009012:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009016:	f7f7 f957 	bl	80002c8 <__aeabi_dsub>
 800901a:	f806 7b01 	strb.w	r7, [r6], #1
 800901e:	42ae      	cmp	r6, r5
 8009020:	e9cd 0100 	strd	r0, r1, [sp]
 8009024:	f04f 0200 	mov.w	r2, #0
 8009028:	d126      	bne.n	8009078 <_dtoa_r+0x5e8>
 800902a:	4b1c      	ldr	r3, [pc, #112]	; (800909c <_dtoa_r+0x60c>)
 800902c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009030:	f7f7 f94c 	bl	80002cc <__adddf3>
 8009034:	4602      	mov	r2, r0
 8009036:	460b      	mov	r3, r1
 8009038:	e9dd 0100 	ldrd	r0, r1, [sp]
 800903c:	f7f7 fd8c 	bl	8000b58 <__aeabi_dcmpgt>
 8009040:	2800      	cmp	r0, #0
 8009042:	d174      	bne.n	800912e <_dtoa_r+0x69e>
 8009044:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009048:	2000      	movs	r0, #0
 800904a:	4914      	ldr	r1, [pc, #80]	; (800909c <_dtoa_r+0x60c>)
 800904c:	f7f7 f93c 	bl	80002c8 <__aeabi_dsub>
 8009050:	4602      	mov	r2, r0
 8009052:	460b      	mov	r3, r1
 8009054:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009058:	f7f7 fd60 	bl	8000b1c <__aeabi_dcmplt>
 800905c:	2800      	cmp	r0, #0
 800905e:	f43f af30 	beq.w	8008ec2 <_dtoa_r+0x432>
 8009062:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009066:	2b30      	cmp	r3, #48	; 0x30
 8009068:	f105 32ff 	add.w	r2, r5, #4294967295
 800906c:	d002      	beq.n	8009074 <_dtoa_r+0x5e4>
 800906e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009072:	e04a      	b.n	800910a <_dtoa_r+0x67a>
 8009074:	4615      	mov	r5, r2
 8009076:	e7f4      	b.n	8009062 <_dtoa_r+0x5d2>
 8009078:	4b05      	ldr	r3, [pc, #20]	; (8009090 <_dtoa_r+0x600>)
 800907a:	f7f7 fadd 	bl	8000638 <__aeabi_dmul>
 800907e:	e9cd 0100 	strd	r0, r1, [sp]
 8009082:	e7bc      	b.n	8008ffe <_dtoa_r+0x56e>
 8009084:	0800a6c8 	.word	0x0800a6c8
 8009088:	0800a6a0 	.word	0x0800a6a0
 800908c:	3ff00000 	.word	0x3ff00000
 8009090:	40240000 	.word	0x40240000
 8009094:	401c0000 	.word	0x401c0000
 8009098:	40140000 	.word	0x40140000
 800909c:	3fe00000 	.word	0x3fe00000
 80090a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80090a4:	465d      	mov	r5, fp
 80090a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090aa:	4630      	mov	r0, r6
 80090ac:	4639      	mov	r1, r7
 80090ae:	f7f7 fbed 	bl	800088c <__aeabi_ddiv>
 80090b2:	f7f7 fd71 	bl	8000b98 <__aeabi_d2iz>
 80090b6:	4680      	mov	r8, r0
 80090b8:	f7f7 fa54 	bl	8000564 <__aeabi_i2d>
 80090bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090c0:	f7f7 faba 	bl	8000638 <__aeabi_dmul>
 80090c4:	4602      	mov	r2, r0
 80090c6:	460b      	mov	r3, r1
 80090c8:	4630      	mov	r0, r6
 80090ca:	4639      	mov	r1, r7
 80090cc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80090d0:	f7f7 f8fa 	bl	80002c8 <__aeabi_dsub>
 80090d4:	f805 6b01 	strb.w	r6, [r5], #1
 80090d8:	eba5 060b 	sub.w	r6, r5, fp
 80090dc:	45b1      	cmp	r9, r6
 80090de:	4602      	mov	r2, r0
 80090e0:	460b      	mov	r3, r1
 80090e2:	d139      	bne.n	8009158 <_dtoa_r+0x6c8>
 80090e4:	f7f7 f8f2 	bl	80002cc <__adddf3>
 80090e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090ec:	4606      	mov	r6, r0
 80090ee:	460f      	mov	r7, r1
 80090f0:	f7f7 fd32 	bl	8000b58 <__aeabi_dcmpgt>
 80090f4:	b9c8      	cbnz	r0, 800912a <_dtoa_r+0x69a>
 80090f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090fa:	4630      	mov	r0, r6
 80090fc:	4639      	mov	r1, r7
 80090fe:	f7f7 fd03 	bl	8000b08 <__aeabi_dcmpeq>
 8009102:	b110      	cbz	r0, 800910a <_dtoa_r+0x67a>
 8009104:	f018 0f01 	tst.w	r8, #1
 8009108:	d10f      	bne.n	800912a <_dtoa_r+0x69a>
 800910a:	9904      	ldr	r1, [sp, #16]
 800910c:	4620      	mov	r0, r4
 800910e:	f000 fcaa 	bl	8009a66 <_Bfree>
 8009112:	2300      	movs	r3, #0
 8009114:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009116:	702b      	strb	r3, [r5, #0]
 8009118:	f10a 0301 	add.w	r3, sl, #1
 800911c:	6013      	str	r3, [r2, #0]
 800911e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009120:	2b00      	cmp	r3, #0
 8009122:	f000 8241 	beq.w	80095a8 <_dtoa_r+0xb18>
 8009126:	601d      	str	r5, [r3, #0]
 8009128:	e23e      	b.n	80095a8 <_dtoa_r+0xb18>
 800912a:	f8cd a020 	str.w	sl, [sp, #32]
 800912e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009132:	2a39      	cmp	r2, #57	; 0x39
 8009134:	f105 33ff 	add.w	r3, r5, #4294967295
 8009138:	d108      	bne.n	800914c <_dtoa_r+0x6bc>
 800913a:	459b      	cmp	fp, r3
 800913c:	d10a      	bne.n	8009154 <_dtoa_r+0x6c4>
 800913e:	9b08      	ldr	r3, [sp, #32]
 8009140:	3301      	adds	r3, #1
 8009142:	9308      	str	r3, [sp, #32]
 8009144:	2330      	movs	r3, #48	; 0x30
 8009146:	f88b 3000 	strb.w	r3, [fp]
 800914a:	465b      	mov	r3, fp
 800914c:	781a      	ldrb	r2, [r3, #0]
 800914e:	3201      	adds	r2, #1
 8009150:	701a      	strb	r2, [r3, #0]
 8009152:	e78c      	b.n	800906e <_dtoa_r+0x5de>
 8009154:	461d      	mov	r5, r3
 8009156:	e7ea      	b.n	800912e <_dtoa_r+0x69e>
 8009158:	2200      	movs	r2, #0
 800915a:	4b9b      	ldr	r3, [pc, #620]	; (80093c8 <_dtoa_r+0x938>)
 800915c:	f7f7 fa6c 	bl	8000638 <__aeabi_dmul>
 8009160:	2200      	movs	r2, #0
 8009162:	2300      	movs	r3, #0
 8009164:	4606      	mov	r6, r0
 8009166:	460f      	mov	r7, r1
 8009168:	f7f7 fcce 	bl	8000b08 <__aeabi_dcmpeq>
 800916c:	2800      	cmp	r0, #0
 800916e:	d09a      	beq.n	80090a6 <_dtoa_r+0x616>
 8009170:	e7cb      	b.n	800910a <_dtoa_r+0x67a>
 8009172:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009174:	2a00      	cmp	r2, #0
 8009176:	f000 808b 	beq.w	8009290 <_dtoa_r+0x800>
 800917a:	9a06      	ldr	r2, [sp, #24]
 800917c:	2a01      	cmp	r2, #1
 800917e:	dc6e      	bgt.n	800925e <_dtoa_r+0x7ce>
 8009180:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009182:	2a00      	cmp	r2, #0
 8009184:	d067      	beq.n	8009256 <_dtoa_r+0x7c6>
 8009186:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800918a:	9f07      	ldr	r7, [sp, #28]
 800918c:	9d05      	ldr	r5, [sp, #20]
 800918e:	9a05      	ldr	r2, [sp, #20]
 8009190:	2101      	movs	r1, #1
 8009192:	441a      	add	r2, r3
 8009194:	4620      	mov	r0, r4
 8009196:	9205      	str	r2, [sp, #20]
 8009198:	4498      	add	r8, r3
 800919a:	f000 fd04 	bl	8009ba6 <__i2b>
 800919e:	4606      	mov	r6, r0
 80091a0:	2d00      	cmp	r5, #0
 80091a2:	dd0c      	ble.n	80091be <_dtoa_r+0x72e>
 80091a4:	f1b8 0f00 	cmp.w	r8, #0
 80091a8:	dd09      	ble.n	80091be <_dtoa_r+0x72e>
 80091aa:	4545      	cmp	r5, r8
 80091ac:	9a05      	ldr	r2, [sp, #20]
 80091ae:	462b      	mov	r3, r5
 80091b0:	bfa8      	it	ge
 80091b2:	4643      	movge	r3, r8
 80091b4:	1ad2      	subs	r2, r2, r3
 80091b6:	9205      	str	r2, [sp, #20]
 80091b8:	1aed      	subs	r5, r5, r3
 80091ba:	eba8 0803 	sub.w	r8, r8, r3
 80091be:	9b07      	ldr	r3, [sp, #28]
 80091c0:	b1eb      	cbz	r3, 80091fe <_dtoa_r+0x76e>
 80091c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d067      	beq.n	8009298 <_dtoa_r+0x808>
 80091c8:	b18f      	cbz	r7, 80091ee <_dtoa_r+0x75e>
 80091ca:	4631      	mov	r1, r6
 80091cc:	463a      	mov	r2, r7
 80091ce:	4620      	mov	r0, r4
 80091d0:	f000 fd88 	bl	8009ce4 <__pow5mult>
 80091d4:	9a04      	ldr	r2, [sp, #16]
 80091d6:	4601      	mov	r1, r0
 80091d8:	4606      	mov	r6, r0
 80091da:	4620      	mov	r0, r4
 80091dc:	f000 fcec 	bl	8009bb8 <__multiply>
 80091e0:	9904      	ldr	r1, [sp, #16]
 80091e2:	9008      	str	r0, [sp, #32]
 80091e4:	4620      	mov	r0, r4
 80091e6:	f000 fc3e 	bl	8009a66 <_Bfree>
 80091ea:	9b08      	ldr	r3, [sp, #32]
 80091ec:	9304      	str	r3, [sp, #16]
 80091ee:	9b07      	ldr	r3, [sp, #28]
 80091f0:	1bda      	subs	r2, r3, r7
 80091f2:	d004      	beq.n	80091fe <_dtoa_r+0x76e>
 80091f4:	9904      	ldr	r1, [sp, #16]
 80091f6:	4620      	mov	r0, r4
 80091f8:	f000 fd74 	bl	8009ce4 <__pow5mult>
 80091fc:	9004      	str	r0, [sp, #16]
 80091fe:	2101      	movs	r1, #1
 8009200:	4620      	mov	r0, r4
 8009202:	f000 fcd0 	bl	8009ba6 <__i2b>
 8009206:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009208:	4607      	mov	r7, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	f000 81d0 	beq.w	80095b0 <_dtoa_r+0xb20>
 8009210:	461a      	mov	r2, r3
 8009212:	4601      	mov	r1, r0
 8009214:	4620      	mov	r0, r4
 8009216:	f000 fd65 	bl	8009ce4 <__pow5mult>
 800921a:	9b06      	ldr	r3, [sp, #24]
 800921c:	2b01      	cmp	r3, #1
 800921e:	4607      	mov	r7, r0
 8009220:	dc40      	bgt.n	80092a4 <_dtoa_r+0x814>
 8009222:	9b00      	ldr	r3, [sp, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d139      	bne.n	800929c <_dtoa_r+0x80c>
 8009228:	9b01      	ldr	r3, [sp, #4]
 800922a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800922e:	2b00      	cmp	r3, #0
 8009230:	d136      	bne.n	80092a0 <_dtoa_r+0x810>
 8009232:	9b01      	ldr	r3, [sp, #4]
 8009234:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009238:	0d1b      	lsrs	r3, r3, #20
 800923a:	051b      	lsls	r3, r3, #20
 800923c:	b12b      	cbz	r3, 800924a <_dtoa_r+0x7ba>
 800923e:	9b05      	ldr	r3, [sp, #20]
 8009240:	3301      	adds	r3, #1
 8009242:	9305      	str	r3, [sp, #20]
 8009244:	f108 0801 	add.w	r8, r8, #1
 8009248:	2301      	movs	r3, #1
 800924a:	9307      	str	r3, [sp, #28]
 800924c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800924e:	2b00      	cmp	r3, #0
 8009250:	d12a      	bne.n	80092a8 <_dtoa_r+0x818>
 8009252:	2001      	movs	r0, #1
 8009254:	e030      	b.n	80092b8 <_dtoa_r+0x828>
 8009256:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009258:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800925c:	e795      	b.n	800918a <_dtoa_r+0x6fa>
 800925e:	9b07      	ldr	r3, [sp, #28]
 8009260:	f109 37ff 	add.w	r7, r9, #4294967295
 8009264:	42bb      	cmp	r3, r7
 8009266:	bfbf      	itttt	lt
 8009268:	9b07      	ldrlt	r3, [sp, #28]
 800926a:	9707      	strlt	r7, [sp, #28]
 800926c:	1afa      	sublt	r2, r7, r3
 800926e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009270:	bfbb      	ittet	lt
 8009272:	189b      	addlt	r3, r3, r2
 8009274:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009276:	1bdf      	subge	r7, r3, r7
 8009278:	2700      	movlt	r7, #0
 800927a:	f1b9 0f00 	cmp.w	r9, #0
 800927e:	bfb5      	itete	lt
 8009280:	9b05      	ldrlt	r3, [sp, #20]
 8009282:	9d05      	ldrge	r5, [sp, #20]
 8009284:	eba3 0509 	sublt.w	r5, r3, r9
 8009288:	464b      	movge	r3, r9
 800928a:	bfb8      	it	lt
 800928c:	2300      	movlt	r3, #0
 800928e:	e77e      	b.n	800918e <_dtoa_r+0x6fe>
 8009290:	9f07      	ldr	r7, [sp, #28]
 8009292:	9d05      	ldr	r5, [sp, #20]
 8009294:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009296:	e783      	b.n	80091a0 <_dtoa_r+0x710>
 8009298:	9a07      	ldr	r2, [sp, #28]
 800929a:	e7ab      	b.n	80091f4 <_dtoa_r+0x764>
 800929c:	2300      	movs	r3, #0
 800929e:	e7d4      	b.n	800924a <_dtoa_r+0x7ba>
 80092a0:	9b00      	ldr	r3, [sp, #0]
 80092a2:	e7d2      	b.n	800924a <_dtoa_r+0x7ba>
 80092a4:	2300      	movs	r3, #0
 80092a6:	9307      	str	r3, [sp, #28]
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80092ae:	6918      	ldr	r0, [r3, #16]
 80092b0:	f000 fc2b 	bl	8009b0a <__hi0bits>
 80092b4:	f1c0 0020 	rsb	r0, r0, #32
 80092b8:	4440      	add	r0, r8
 80092ba:	f010 001f 	ands.w	r0, r0, #31
 80092be:	d047      	beq.n	8009350 <_dtoa_r+0x8c0>
 80092c0:	f1c0 0320 	rsb	r3, r0, #32
 80092c4:	2b04      	cmp	r3, #4
 80092c6:	dd3b      	ble.n	8009340 <_dtoa_r+0x8b0>
 80092c8:	9b05      	ldr	r3, [sp, #20]
 80092ca:	f1c0 001c 	rsb	r0, r0, #28
 80092ce:	4403      	add	r3, r0
 80092d0:	9305      	str	r3, [sp, #20]
 80092d2:	4405      	add	r5, r0
 80092d4:	4480      	add	r8, r0
 80092d6:	9b05      	ldr	r3, [sp, #20]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	dd05      	ble.n	80092e8 <_dtoa_r+0x858>
 80092dc:	461a      	mov	r2, r3
 80092de:	9904      	ldr	r1, [sp, #16]
 80092e0:	4620      	mov	r0, r4
 80092e2:	f000 fd4d 	bl	8009d80 <__lshift>
 80092e6:	9004      	str	r0, [sp, #16]
 80092e8:	f1b8 0f00 	cmp.w	r8, #0
 80092ec:	dd05      	ble.n	80092fa <_dtoa_r+0x86a>
 80092ee:	4639      	mov	r1, r7
 80092f0:	4642      	mov	r2, r8
 80092f2:	4620      	mov	r0, r4
 80092f4:	f000 fd44 	bl	8009d80 <__lshift>
 80092f8:	4607      	mov	r7, r0
 80092fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092fc:	b353      	cbz	r3, 8009354 <_dtoa_r+0x8c4>
 80092fe:	4639      	mov	r1, r7
 8009300:	9804      	ldr	r0, [sp, #16]
 8009302:	f000 fd91 	bl	8009e28 <__mcmp>
 8009306:	2800      	cmp	r0, #0
 8009308:	da24      	bge.n	8009354 <_dtoa_r+0x8c4>
 800930a:	2300      	movs	r3, #0
 800930c:	220a      	movs	r2, #10
 800930e:	9904      	ldr	r1, [sp, #16]
 8009310:	4620      	mov	r0, r4
 8009312:	f000 fbbf 	bl	8009a94 <__multadd>
 8009316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009318:	9004      	str	r0, [sp, #16]
 800931a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800931e:	2b00      	cmp	r3, #0
 8009320:	f000 814d 	beq.w	80095be <_dtoa_r+0xb2e>
 8009324:	2300      	movs	r3, #0
 8009326:	4631      	mov	r1, r6
 8009328:	220a      	movs	r2, #10
 800932a:	4620      	mov	r0, r4
 800932c:	f000 fbb2 	bl	8009a94 <__multadd>
 8009330:	9b02      	ldr	r3, [sp, #8]
 8009332:	2b00      	cmp	r3, #0
 8009334:	4606      	mov	r6, r0
 8009336:	dc4f      	bgt.n	80093d8 <_dtoa_r+0x948>
 8009338:	9b06      	ldr	r3, [sp, #24]
 800933a:	2b02      	cmp	r3, #2
 800933c:	dd4c      	ble.n	80093d8 <_dtoa_r+0x948>
 800933e:	e011      	b.n	8009364 <_dtoa_r+0x8d4>
 8009340:	d0c9      	beq.n	80092d6 <_dtoa_r+0x846>
 8009342:	9a05      	ldr	r2, [sp, #20]
 8009344:	331c      	adds	r3, #28
 8009346:	441a      	add	r2, r3
 8009348:	9205      	str	r2, [sp, #20]
 800934a:	441d      	add	r5, r3
 800934c:	4498      	add	r8, r3
 800934e:	e7c2      	b.n	80092d6 <_dtoa_r+0x846>
 8009350:	4603      	mov	r3, r0
 8009352:	e7f6      	b.n	8009342 <_dtoa_r+0x8b2>
 8009354:	f1b9 0f00 	cmp.w	r9, #0
 8009358:	dc38      	bgt.n	80093cc <_dtoa_r+0x93c>
 800935a:	9b06      	ldr	r3, [sp, #24]
 800935c:	2b02      	cmp	r3, #2
 800935e:	dd35      	ble.n	80093cc <_dtoa_r+0x93c>
 8009360:	f8cd 9008 	str.w	r9, [sp, #8]
 8009364:	9b02      	ldr	r3, [sp, #8]
 8009366:	b963      	cbnz	r3, 8009382 <_dtoa_r+0x8f2>
 8009368:	4639      	mov	r1, r7
 800936a:	2205      	movs	r2, #5
 800936c:	4620      	mov	r0, r4
 800936e:	f000 fb91 	bl	8009a94 <__multadd>
 8009372:	4601      	mov	r1, r0
 8009374:	4607      	mov	r7, r0
 8009376:	9804      	ldr	r0, [sp, #16]
 8009378:	f000 fd56 	bl	8009e28 <__mcmp>
 800937c:	2800      	cmp	r0, #0
 800937e:	f73f adcc 	bgt.w	8008f1a <_dtoa_r+0x48a>
 8009382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009384:	465d      	mov	r5, fp
 8009386:	ea6f 0a03 	mvn.w	sl, r3
 800938a:	f04f 0900 	mov.w	r9, #0
 800938e:	4639      	mov	r1, r7
 8009390:	4620      	mov	r0, r4
 8009392:	f000 fb68 	bl	8009a66 <_Bfree>
 8009396:	2e00      	cmp	r6, #0
 8009398:	f43f aeb7 	beq.w	800910a <_dtoa_r+0x67a>
 800939c:	f1b9 0f00 	cmp.w	r9, #0
 80093a0:	d005      	beq.n	80093ae <_dtoa_r+0x91e>
 80093a2:	45b1      	cmp	r9, r6
 80093a4:	d003      	beq.n	80093ae <_dtoa_r+0x91e>
 80093a6:	4649      	mov	r1, r9
 80093a8:	4620      	mov	r0, r4
 80093aa:	f000 fb5c 	bl	8009a66 <_Bfree>
 80093ae:	4631      	mov	r1, r6
 80093b0:	4620      	mov	r0, r4
 80093b2:	f000 fb58 	bl	8009a66 <_Bfree>
 80093b6:	e6a8      	b.n	800910a <_dtoa_r+0x67a>
 80093b8:	2700      	movs	r7, #0
 80093ba:	463e      	mov	r6, r7
 80093bc:	e7e1      	b.n	8009382 <_dtoa_r+0x8f2>
 80093be:	f8dd a020 	ldr.w	sl, [sp, #32]
 80093c2:	463e      	mov	r6, r7
 80093c4:	e5a9      	b.n	8008f1a <_dtoa_r+0x48a>
 80093c6:	bf00      	nop
 80093c8:	40240000 	.word	0x40240000
 80093cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093ce:	f8cd 9008 	str.w	r9, [sp, #8]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f000 80fa 	beq.w	80095cc <_dtoa_r+0xb3c>
 80093d8:	2d00      	cmp	r5, #0
 80093da:	dd05      	ble.n	80093e8 <_dtoa_r+0x958>
 80093dc:	4631      	mov	r1, r6
 80093de:	462a      	mov	r2, r5
 80093e0:	4620      	mov	r0, r4
 80093e2:	f000 fccd 	bl	8009d80 <__lshift>
 80093e6:	4606      	mov	r6, r0
 80093e8:	9b07      	ldr	r3, [sp, #28]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d04c      	beq.n	8009488 <_dtoa_r+0x9f8>
 80093ee:	6871      	ldr	r1, [r6, #4]
 80093f0:	4620      	mov	r0, r4
 80093f2:	f000 fb04 	bl	80099fe <_Balloc>
 80093f6:	6932      	ldr	r2, [r6, #16]
 80093f8:	3202      	adds	r2, #2
 80093fa:	4605      	mov	r5, r0
 80093fc:	0092      	lsls	r2, r2, #2
 80093fe:	f106 010c 	add.w	r1, r6, #12
 8009402:	300c      	adds	r0, #12
 8009404:	f000 faf0 	bl	80099e8 <memcpy>
 8009408:	2201      	movs	r2, #1
 800940a:	4629      	mov	r1, r5
 800940c:	4620      	mov	r0, r4
 800940e:	f000 fcb7 	bl	8009d80 <__lshift>
 8009412:	9b00      	ldr	r3, [sp, #0]
 8009414:	f8cd b014 	str.w	fp, [sp, #20]
 8009418:	f003 0301 	and.w	r3, r3, #1
 800941c:	46b1      	mov	r9, r6
 800941e:	9307      	str	r3, [sp, #28]
 8009420:	4606      	mov	r6, r0
 8009422:	4639      	mov	r1, r7
 8009424:	9804      	ldr	r0, [sp, #16]
 8009426:	f7ff faa5 	bl	8008974 <quorem>
 800942a:	4649      	mov	r1, r9
 800942c:	4605      	mov	r5, r0
 800942e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009432:	9804      	ldr	r0, [sp, #16]
 8009434:	f000 fcf8 	bl	8009e28 <__mcmp>
 8009438:	4632      	mov	r2, r6
 800943a:	9000      	str	r0, [sp, #0]
 800943c:	4639      	mov	r1, r7
 800943e:	4620      	mov	r0, r4
 8009440:	f000 fd0c 	bl	8009e5c <__mdiff>
 8009444:	68c3      	ldr	r3, [r0, #12]
 8009446:	4602      	mov	r2, r0
 8009448:	bb03      	cbnz	r3, 800948c <_dtoa_r+0x9fc>
 800944a:	4601      	mov	r1, r0
 800944c:	9008      	str	r0, [sp, #32]
 800944e:	9804      	ldr	r0, [sp, #16]
 8009450:	f000 fcea 	bl	8009e28 <__mcmp>
 8009454:	9a08      	ldr	r2, [sp, #32]
 8009456:	4603      	mov	r3, r0
 8009458:	4611      	mov	r1, r2
 800945a:	4620      	mov	r0, r4
 800945c:	9308      	str	r3, [sp, #32]
 800945e:	f000 fb02 	bl	8009a66 <_Bfree>
 8009462:	9b08      	ldr	r3, [sp, #32]
 8009464:	b9a3      	cbnz	r3, 8009490 <_dtoa_r+0xa00>
 8009466:	9a06      	ldr	r2, [sp, #24]
 8009468:	b992      	cbnz	r2, 8009490 <_dtoa_r+0xa00>
 800946a:	9a07      	ldr	r2, [sp, #28]
 800946c:	b982      	cbnz	r2, 8009490 <_dtoa_r+0xa00>
 800946e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009472:	d029      	beq.n	80094c8 <_dtoa_r+0xa38>
 8009474:	9b00      	ldr	r3, [sp, #0]
 8009476:	2b00      	cmp	r3, #0
 8009478:	dd01      	ble.n	800947e <_dtoa_r+0x9ee>
 800947a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800947e:	9b05      	ldr	r3, [sp, #20]
 8009480:	1c5d      	adds	r5, r3, #1
 8009482:	f883 8000 	strb.w	r8, [r3]
 8009486:	e782      	b.n	800938e <_dtoa_r+0x8fe>
 8009488:	4630      	mov	r0, r6
 800948a:	e7c2      	b.n	8009412 <_dtoa_r+0x982>
 800948c:	2301      	movs	r3, #1
 800948e:	e7e3      	b.n	8009458 <_dtoa_r+0x9c8>
 8009490:	9a00      	ldr	r2, [sp, #0]
 8009492:	2a00      	cmp	r2, #0
 8009494:	db04      	blt.n	80094a0 <_dtoa_r+0xa10>
 8009496:	d125      	bne.n	80094e4 <_dtoa_r+0xa54>
 8009498:	9a06      	ldr	r2, [sp, #24]
 800949a:	bb1a      	cbnz	r2, 80094e4 <_dtoa_r+0xa54>
 800949c:	9a07      	ldr	r2, [sp, #28]
 800949e:	bb0a      	cbnz	r2, 80094e4 <_dtoa_r+0xa54>
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	ddec      	ble.n	800947e <_dtoa_r+0x9ee>
 80094a4:	2201      	movs	r2, #1
 80094a6:	9904      	ldr	r1, [sp, #16]
 80094a8:	4620      	mov	r0, r4
 80094aa:	f000 fc69 	bl	8009d80 <__lshift>
 80094ae:	4639      	mov	r1, r7
 80094b0:	9004      	str	r0, [sp, #16]
 80094b2:	f000 fcb9 	bl	8009e28 <__mcmp>
 80094b6:	2800      	cmp	r0, #0
 80094b8:	dc03      	bgt.n	80094c2 <_dtoa_r+0xa32>
 80094ba:	d1e0      	bne.n	800947e <_dtoa_r+0x9ee>
 80094bc:	f018 0f01 	tst.w	r8, #1
 80094c0:	d0dd      	beq.n	800947e <_dtoa_r+0x9ee>
 80094c2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80094c6:	d1d8      	bne.n	800947a <_dtoa_r+0x9ea>
 80094c8:	9b05      	ldr	r3, [sp, #20]
 80094ca:	9a05      	ldr	r2, [sp, #20]
 80094cc:	1c5d      	adds	r5, r3, #1
 80094ce:	2339      	movs	r3, #57	; 0x39
 80094d0:	7013      	strb	r3, [r2, #0]
 80094d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80094d6:	2b39      	cmp	r3, #57	; 0x39
 80094d8:	f105 32ff 	add.w	r2, r5, #4294967295
 80094dc:	d04f      	beq.n	800957e <_dtoa_r+0xaee>
 80094de:	3301      	adds	r3, #1
 80094e0:	7013      	strb	r3, [r2, #0]
 80094e2:	e754      	b.n	800938e <_dtoa_r+0x8fe>
 80094e4:	9a05      	ldr	r2, [sp, #20]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	f102 0501 	add.w	r5, r2, #1
 80094ec:	dd06      	ble.n	80094fc <_dtoa_r+0xa6c>
 80094ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80094f2:	d0e9      	beq.n	80094c8 <_dtoa_r+0xa38>
 80094f4:	f108 0801 	add.w	r8, r8, #1
 80094f8:	9b05      	ldr	r3, [sp, #20]
 80094fa:	e7c2      	b.n	8009482 <_dtoa_r+0x9f2>
 80094fc:	9a02      	ldr	r2, [sp, #8]
 80094fe:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009502:	eba5 030b 	sub.w	r3, r5, fp
 8009506:	4293      	cmp	r3, r2
 8009508:	d021      	beq.n	800954e <_dtoa_r+0xabe>
 800950a:	2300      	movs	r3, #0
 800950c:	220a      	movs	r2, #10
 800950e:	9904      	ldr	r1, [sp, #16]
 8009510:	4620      	mov	r0, r4
 8009512:	f000 fabf 	bl	8009a94 <__multadd>
 8009516:	45b1      	cmp	r9, r6
 8009518:	9004      	str	r0, [sp, #16]
 800951a:	f04f 0300 	mov.w	r3, #0
 800951e:	f04f 020a 	mov.w	r2, #10
 8009522:	4649      	mov	r1, r9
 8009524:	4620      	mov	r0, r4
 8009526:	d105      	bne.n	8009534 <_dtoa_r+0xaa4>
 8009528:	f000 fab4 	bl	8009a94 <__multadd>
 800952c:	4681      	mov	r9, r0
 800952e:	4606      	mov	r6, r0
 8009530:	9505      	str	r5, [sp, #20]
 8009532:	e776      	b.n	8009422 <_dtoa_r+0x992>
 8009534:	f000 faae 	bl	8009a94 <__multadd>
 8009538:	4631      	mov	r1, r6
 800953a:	4681      	mov	r9, r0
 800953c:	2300      	movs	r3, #0
 800953e:	220a      	movs	r2, #10
 8009540:	4620      	mov	r0, r4
 8009542:	f000 faa7 	bl	8009a94 <__multadd>
 8009546:	4606      	mov	r6, r0
 8009548:	e7f2      	b.n	8009530 <_dtoa_r+0xaa0>
 800954a:	f04f 0900 	mov.w	r9, #0
 800954e:	2201      	movs	r2, #1
 8009550:	9904      	ldr	r1, [sp, #16]
 8009552:	4620      	mov	r0, r4
 8009554:	f000 fc14 	bl	8009d80 <__lshift>
 8009558:	4639      	mov	r1, r7
 800955a:	9004      	str	r0, [sp, #16]
 800955c:	f000 fc64 	bl	8009e28 <__mcmp>
 8009560:	2800      	cmp	r0, #0
 8009562:	dcb6      	bgt.n	80094d2 <_dtoa_r+0xa42>
 8009564:	d102      	bne.n	800956c <_dtoa_r+0xadc>
 8009566:	f018 0f01 	tst.w	r8, #1
 800956a:	d1b2      	bne.n	80094d2 <_dtoa_r+0xa42>
 800956c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009570:	2b30      	cmp	r3, #48	; 0x30
 8009572:	f105 32ff 	add.w	r2, r5, #4294967295
 8009576:	f47f af0a 	bne.w	800938e <_dtoa_r+0x8fe>
 800957a:	4615      	mov	r5, r2
 800957c:	e7f6      	b.n	800956c <_dtoa_r+0xadc>
 800957e:	4593      	cmp	fp, r2
 8009580:	d105      	bne.n	800958e <_dtoa_r+0xafe>
 8009582:	2331      	movs	r3, #49	; 0x31
 8009584:	f10a 0a01 	add.w	sl, sl, #1
 8009588:	f88b 3000 	strb.w	r3, [fp]
 800958c:	e6ff      	b.n	800938e <_dtoa_r+0x8fe>
 800958e:	4615      	mov	r5, r2
 8009590:	e79f      	b.n	80094d2 <_dtoa_r+0xa42>
 8009592:	f8df b064 	ldr.w	fp, [pc, #100]	; 80095f8 <_dtoa_r+0xb68>
 8009596:	e007      	b.n	80095a8 <_dtoa_r+0xb18>
 8009598:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800959a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80095fc <_dtoa_r+0xb6c>
 800959e:	b11b      	cbz	r3, 80095a8 <_dtoa_r+0xb18>
 80095a0:	f10b 0308 	add.w	r3, fp, #8
 80095a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80095a6:	6013      	str	r3, [r2, #0]
 80095a8:	4658      	mov	r0, fp
 80095aa:	b017      	add	sp, #92	; 0x5c
 80095ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095b0:	9b06      	ldr	r3, [sp, #24]
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	f77f ae35 	ble.w	8009222 <_dtoa_r+0x792>
 80095b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095ba:	9307      	str	r3, [sp, #28]
 80095bc:	e649      	b.n	8009252 <_dtoa_r+0x7c2>
 80095be:	9b02      	ldr	r3, [sp, #8]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	dc03      	bgt.n	80095cc <_dtoa_r+0xb3c>
 80095c4:	9b06      	ldr	r3, [sp, #24]
 80095c6:	2b02      	cmp	r3, #2
 80095c8:	f73f aecc 	bgt.w	8009364 <_dtoa_r+0x8d4>
 80095cc:	465d      	mov	r5, fp
 80095ce:	4639      	mov	r1, r7
 80095d0:	9804      	ldr	r0, [sp, #16]
 80095d2:	f7ff f9cf 	bl	8008974 <quorem>
 80095d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80095da:	f805 8b01 	strb.w	r8, [r5], #1
 80095de:	9a02      	ldr	r2, [sp, #8]
 80095e0:	eba5 030b 	sub.w	r3, r5, fp
 80095e4:	429a      	cmp	r2, r3
 80095e6:	ddb0      	ble.n	800954a <_dtoa_r+0xaba>
 80095e8:	2300      	movs	r3, #0
 80095ea:	220a      	movs	r2, #10
 80095ec:	9904      	ldr	r1, [sp, #16]
 80095ee:	4620      	mov	r0, r4
 80095f0:	f000 fa50 	bl	8009a94 <__multadd>
 80095f4:	9004      	str	r0, [sp, #16]
 80095f6:	e7ea      	b.n	80095ce <_dtoa_r+0xb3e>
 80095f8:	0800a60c 	.word	0x0800a60c
 80095fc:	0800a630 	.word	0x0800a630

08009600 <__sflush_r>:
 8009600:	898a      	ldrh	r2, [r1, #12]
 8009602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009606:	4605      	mov	r5, r0
 8009608:	0710      	lsls	r0, r2, #28
 800960a:	460c      	mov	r4, r1
 800960c:	d458      	bmi.n	80096c0 <__sflush_r+0xc0>
 800960e:	684b      	ldr	r3, [r1, #4]
 8009610:	2b00      	cmp	r3, #0
 8009612:	dc05      	bgt.n	8009620 <__sflush_r+0x20>
 8009614:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009616:	2b00      	cmp	r3, #0
 8009618:	dc02      	bgt.n	8009620 <__sflush_r+0x20>
 800961a:	2000      	movs	r0, #0
 800961c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009620:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009622:	2e00      	cmp	r6, #0
 8009624:	d0f9      	beq.n	800961a <__sflush_r+0x1a>
 8009626:	2300      	movs	r3, #0
 8009628:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800962c:	682f      	ldr	r7, [r5, #0]
 800962e:	6a21      	ldr	r1, [r4, #32]
 8009630:	602b      	str	r3, [r5, #0]
 8009632:	d032      	beq.n	800969a <__sflush_r+0x9a>
 8009634:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009636:	89a3      	ldrh	r3, [r4, #12]
 8009638:	075a      	lsls	r2, r3, #29
 800963a:	d505      	bpl.n	8009648 <__sflush_r+0x48>
 800963c:	6863      	ldr	r3, [r4, #4]
 800963e:	1ac0      	subs	r0, r0, r3
 8009640:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009642:	b10b      	cbz	r3, 8009648 <__sflush_r+0x48>
 8009644:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009646:	1ac0      	subs	r0, r0, r3
 8009648:	2300      	movs	r3, #0
 800964a:	4602      	mov	r2, r0
 800964c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800964e:	6a21      	ldr	r1, [r4, #32]
 8009650:	4628      	mov	r0, r5
 8009652:	47b0      	blx	r6
 8009654:	1c43      	adds	r3, r0, #1
 8009656:	89a3      	ldrh	r3, [r4, #12]
 8009658:	d106      	bne.n	8009668 <__sflush_r+0x68>
 800965a:	6829      	ldr	r1, [r5, #0]
 800965c:	291d      	cmp	r1, #29
 800965e:	d848      	bhi.n	80096f2 <__sflush_r+0xf2>
 8009660:	4a29      	ldr	r2, [pc, #164]	; (8009708 <__sflush_r+0x108>)
 8009662:	40ca      	lsrs	r2, r1
 8009664:	07d6      	lsls	r6, r2, #31
 8009666:	d544      	bpl.n	80096f2 <__sflush_r+0xf2>
 8009668:	2200      	movs	r2, #0
 800966a:	6062      	str	r2, [r4, #4]
 800966c:	04d9      	lsls	r1, r3, #19
 800966e:	6922      	ldr	r2, [r4, #16]
 8009670:	6022      	str	r2, [r4, #0]
 8009672:	d504      	bpl.n	800967e <__sflush_r+0x7e>
 8009674:	1c42      	adds	r2, r0, #1
 8009676:	d101      	bne.n	800967c <__sflush_r+0x7c>
 8009678:	682b      	ldr	r3, [r5, #0]
 800967a:	b903      	cbnz	r3, 800967e <__sflush_r+0x7e>
 800967c:	6560      	str	r0, [r4, #84]	; 0x54
 800967e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009680:	602f      	str	r7, [r5, #0]
 8009682:	2900      	cmp	r1, #0
 8009684:	d0c9      	beq.n	800961a <__sflush_r+0x1a>
 8009686:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800968a:	4299      	cmp	r1, r3
 800968c:	d002      	beq.n	8009694 <__sflush_r+0x94>
 800968e:	4628      	mov	r0, r5
 8009690:	f000 fc9e 	bl	8009fd0 <_free_r>
 8009694:	2000      	movs	r0, #0
 8009696:	6360      	str	r0, [r4, #52]	; 0x34
 8009698:	e7c0      	b.n	800961c <__sflush_r+0x1c>
 800969a:	2301      	movs	r3, #1
 800969c:	4628      	mov	r0, r5
 800969e:	47b0      	blx	r6
 80096a0:	1c41      	adds	r1, r0, #1
 80096a2:	d1c8      	bne.n	8009636 <__sflush_r+0x36>
 80096a4:	682b      	ldr	r3, [r5, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d0c5      	beq.n	8009636 <__sflush_r+0x36>
 80096aa:	2b1d      	cmp	r3, #29
 80096ac:	d001      	beq.n	80096b2 <__sflush_r+0xb2>
 80096ae:	2b16      	cmp	r3, #22
 80096b0:	d101      	bne.n	80096b6 <__sflush_r+0xb6>
 80096b2:	602f      	str	r7, [r5, #0]
 80096b4:	e7b1      	b.n	800961a <__sflush_r+0x1a>
 80096b6:	89a3      	ldrh	r3, [r4, #12]
 80096b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096bc:	81a3      	strh	r3, [r4, #12]
 80096be:	e7ad      	b.n	800961c <__sflush_r+0x1c>
 80096c0:	690f      	ldr	r7, [r1, #16]
 80096c2:	2f00      	cmp	r7, #0
 80096c4:	d0a9      	beq.n	800961a <__sflush_r+0x1a>
 80096c6:	0793      	lsls	r3, r2, #30
 80096c8:	680e      	ldr	r6, [r1, #0]
 80096ca:	bf08      	it	eq
 80096cc:	694b      	ldreq	r3, [r1, #20]
 80096ce:	600f      	str	r7, [r1, #0]
 80096d0:	bf18      	it	ne
 80096d2:	2300      	movne	r3, #0
 80096d4:	eba6 0807 	sub.w	r8, r6, r7
 80096d8:	608b      	str	r3, [r1, #8]
 80096da:	f1b8 0f00 	cmp.w	r8, #0
 80096de:	dd9c      	ble.n	800961a <__sflush_r+0x1a>
 80096e0:	4643      	mov	r3, r8
 80096e2:	463a      	mov	r2, r7
 80096e4:	6a21      	ldr	r1, [r4, #32]
 80096e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80096e8:	4628      	mov	r0, r5
 80096ea:	47b0      	blx	r6
 80096ec:	2800      	cmp	r0, #0
 80096ee:	dc06      	bgt.n	80096fe <__sflush_r+0xfe>
 80096f0:	89a3      	ldrh	r3, [r4, #12]
 80096f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096f6:	81a3      	strh	r3, [r4, #12]
 80096f8:	f04f 30ff 	mov.w	r0, #4294967295
 80096fc:	e78e      	b.n	800961c <__sflush_r+0x1c>
 80096fe:	4407      	add	r7, r0
 8009700:	eba8 0800 	sub.w	r8, r8, r0
 8009704:	e7e9      	b.n	80096da <__sflush_r+0xda>
 8009706:	bf00      	nop
 8009708:	20400001 	.word	0x20400001

0800970c <_fflush_r>:
 800970c:	b538      	push	{r3, r4, r5, lr}
 800970e:	690b      	ldr	r3, [r1, #16]
 8009710:	4605      	mov	r5, r0
 8009712:	460c      	mov	r4, r1
 8009714:	b1db      	cbz	r3, 800974e <_fflush_r+0x42>
 8009716:	b118      	cbz	r0, 8009720 <_fflush_r+0x14>
 8009718:	6983      	ldr	r3, [r0, #24]
 800971a:	b90b      	cbnz	r3, 8009720 <_fflush_r+0x14>
 800971c:	f000 f860 	bl	80097e0 <__sinit>
 8009720:	4b0c      	ldr	r3, [pc, #48]	; (8009754 <_fflush_r+0x48>)
 8009722:	429c      	cmp	r4, r3
 8009724:	d109      	bne.n	800973a <_fflush_r+0x2e>
 8009726:	686c      	ldr	r4, [r5, #4]
 8009728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800972c:	b17b      	cbz	r3, 800974e <_fflush_r+0x42>
 800972e:	4621      	mov	r1, r4
 8009730:	4628      	mov	r0, r5
 8009732:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009736:	f7ff bf63 	b.w	8009600 <__sflush_r>
 800973a:	4b07      	ldr	r3, [pc, #28]	; (8009758 <_fflush_r+0x4c>)
 800973c:	429c      	cmp	r4, r3
 800973e:	d101      	bne.n	8009744 <_fflush_r+0x38>
 8009740:	68ac      	ldr	r4, [r5, #8]
 8009742:	e7f1      	b.n	8009728 <_fflush_r+0x1c>
 8009744:	4b05      	ldr	r3, [pc, #20]	; (800975c <_fflush_r+0x50>)
 8009746:	429c      	cmp	r4, r3
 8009748:	bf08      	it	eq
 800974a:	68ec      	ldreq	r4, [r5, #12]
 800974c:	e7ec      	b.n	8009728 <_fflush_r+0x1c>
 800974e:	2000      	movs	r0, #0
 8009750:	bd38      	pop	{r3, r4, r5, pc}
 8009752:	bf00      	nop
 8009754:	0800a660 	.word	0x0800a660
 8009758:	0800a680 	.word	0x0800a680
 800975c:	0800a640 	.word	0x0800a640

08009760 <std>:
 8009760:	2300      	movs	r3, #0
 8009762:	b510      	push	{r4, lr}
 8009764:	4604      	mov	r4, r0
 8009766:	e9c0 3300 	strd	r3, r3, [r0]
 800976a:	6083      	str	r3, [r0, #8]
 800976c:	8181      	strh	r1, [r0, #12]
 800976e:	6643      	str	r3, [r0, #100]	; 0x64
 8009770:	81c2      	strh	r2, [r0, #14]
 8009772:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009776:	6183      	str	r3, [r0, #24]
 8009778:	4619      	mov	r1, r3
 800977a:	2208      	movs	r2, #8
 800977c:	305c      	adds	r0, #92	; 0x5c
 800977e:	f7fe fa6f 	bl	8007c60 <memset>
 8009782:	4b05      	ldr	r3, [pc, #20]	; (8009798 <std+0x38>)
 8009784:	6263      	str	r3, [r4, #36]	; 0x24
 8009786:	4b05      	ldr	r3, [pc, #20]	; (800979c <std+0x3c>)
 8009788:	62a3      	str	r3, [r4, #40]	; 0x28
 800978a:	4b05      	ldr	r3, [pc, #20]	; (80097a0 <std+0x40>)
 800978c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800978e:	4b05      	ldr	r3, [pc, #20]	; (80097a4 <std+0x44>)
 8009790:	6224      	str	r4, [r4, #32]
 8009792:	6323      	str	r3, [r4, #48]	; 0x30
 8009794:	bd10      	pop	{r4, pc}
 8009796:	bf00      	nop
 8009798:	0800a3c1 	.word	0x0800a3c1
 800979c:	0800a3e3 	.word	0x0800a3e3
 80097a0:	0800a41b 	.word	0x0800a41b
 80097a4:	0800a43f 	.word	0x0800a43f

080097a8 <_cleanup_r>:
 80097a8:	4901      	ldr	r1, [pc, #4]	; (80097b0 <_cleanup_r+0x8>)
 80097aa:	f000 b885 	b.w	80098b8 <_fwalk_reent>
 80097ae:	bf00      	nop
 80097b0:	0800970d 	.word	0x0800970d

080097b4 <__sfmoreglue>:
 80097b4:	b570      	push	{r4, r5, r6, lr}
 80097b6:	1e4a      	subs	r2, r1, #1
 80097b8:	2568      	movs	r5, #104	; 0x68
 80097ba:	4355      	muls	r5, r2
 80097bc:	460e      	mov	r6, r1
 80097be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80097c2:	f000 fc53 	bl	800a06c <_malloc_r>
 80097c6:	4604      	mov	r4, r0
 80097c8:	b140      	cbz	r0, 80097dc <__sfmoreglue+0x28>
 80097ca:	2100      	movs	r1, #0
 80097cc:	e9c0 1600 	strd	r1, r6, [r0]
 80097d0:	300c      	adds	r0, #12
 80097d2:	60a0      	str	r0, [r4, #8]
 80097d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80097d8:	f7fe fa42 	bl	8007c60 <memset>
 80097dc:	4620      	mov	r0, r4
 80097de:	bd70      	pop	{r4, r5, r6, pc}

080097e0 <__sinit>:
 80097e0:	6983      	ldr	r3, [r0, #24]
 80097e2:	b510      	push	{r4, lr}
 80097e4:	4604      	mov	r4, r0
 80097e6:	bb33      	cbnz	r3, 8009836 <__sinit+0x56>
 80097e8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80097ec:	6503      	str	r3, [r0, #80]	; 0x50
 80097ee:	4b12      	ldr	r3, [pc, #72]	; (8009838 <__sinit+0x58>)
 80097f0:	4a12      	ldr	r2, [pc, #72]	; (800983c <__sinit+0x5c>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	6282      	str	r2, [r0, #40]	; 0x28
 80097f6:	4298      	cmp	r0, r3
 80097f8:	bf04      	itt	eq
 80097fa:	2301      	moveq	r3, #1
 80097fc:	6183      	streq	r3, [r0, #24]
 80097fe:	f000 f81f 	bl	8009840 <__sfp>
 8009802:	6060      	str	r0, [r4, #4]
 8009804:	4620      	mov	r0, r4
 8009806:	f000 f81b 	bl	8009840 <__sfp>
 800980a:	60a0      	str	r0, [r4, #8]
 800980c:	4620      	mov	r0, r4
 800980e:	f000 f817 	bl	8009840 <__sfp>
 8009812:	2200      	movs	r2, #0
 8009814:	60e0      	str	r0, [r4, #12]
 8009816:	2104      	movs	r1, #4
 8009818:	6860      	ldr	r0, [r4, #4]
 800981a:	f7ff ffa1 	bl	8009760 <std>
 800981e:	2201      	movs	r2, #1
 8009820:	2109      	movs	r1, #9
 8009822:	68a0      	ldr	r0, [r4, #8]
 8009824:	f7ff ff9c 	bl	8009760 <std>
 8009828:	2202      	movs	r2, #2
 800982a:	2112      	movs	r1, #18
 800982c:	68e0      	ldr	r0, [r4, #12]
 800982e:	f7ff ff97 	bl	8009760 <std>
 8009832:	2301      	movs	r3, #1
 8009834:	61a3      	str	r3, [r4, #24]
 8009836:	bd10      	pop	{r4, pc}
 8009838:	0800a5f8 	.word	0x0800a5f8
 800983c:	080097a9 	.word	0x080097a9

08009840 <__sfp>:
 8009840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009842:	4b1b      	ldr	r3, [pc, #108]	; (80098b0 <__sfp+0x70>)
 8009844:	681e      	ldr	r6, [r3, #0]
 8009846:	69b3      	ldr	r3, [r6, #24]
 8009848:	4607      	mov	r7, r0
 800984a:	b913      	cbnz	r3, 8009852 <__sfp+0x12>
 800984c:	4630      	mov	r0, r6
 800984e:	f7ff ffc7 	bl	80097e0 <__sinit>
 8009852:	3648      	adds	r6, #72	; 0x48
 8009854:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009858:	3b01      	subs	r3, #1
 800985a:	d503      	bpl.n	8009864 <__sfp+0x24>
 800985c:	6833      	ldr	r3, [r6, #0]
 800985e:	b133      	cbz	r3, 800986e <__sfp+0x2e>
 8009860:	6836      	ldr	r6, [r6, #0]
 8009862:	e7f7      	b.n	8009854 <__sfp+0x14>
 8009864:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009868:	b16d      	cbz	r5, 8009886 <__sfp+0x46>
 800986a:	3468      	adds	r4, #104	; 0x68
 800986c:	e7f4      	b.n	8009858 <__sfp+0x18>
 800986e:	2104      	movs	r1, #4
 8009870:	4638      	mov	r0, r7
 8009872:	f7ff ff9f 	bl	80097b4 <__sfmoreglue>
 8009876:	6030      	str	r0, [r6, #0]
 8009878:	2800      	cmp	r0, #0
 800987a:	d1f1      	bne.n	8009860 <__sfp+0x20>
 800987c:	230c      	movs	r3, #12
 800987e:	603b      	str	r3, [r7, #0]
 8009880:	4604      	mov	r4, r0
 8009882:	4620      	mov	r0, r4
 8009884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009886:	4b0b      	ldr	r3, [pc, #44]	; (80098b4 <__sfp+0x74>)
 8009888:	6665      	str	r5, [r4, #100]	; 0x64
 800988a:	e9c4 5500 	strd	r5, r5, [r4]
 800988e:	60a5      	str	r5, [r4, #8]
 8009890:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009894:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009898:	2208      	movs	r2, #8
 800989a:	4629      	mov	r1, r5
 800989c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80098a0:	f7fe f9de 	bl	8007c60 <memset>
 80098a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80098a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80098ac:	e7e9      	b.n	8009882 <__sfp+0x42>
 80098ae:	bf00      	nop
 80098b0:	0800a5f8 	.word	0x0800a5f8
 80098b4:	ffff0001 	.word	0xffff0001

080098b8 <_fwalk_reent>:
 80098b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098bc:	4680      	mov	r8, r0
 80098be:	4689      	mov	r9, r1
 80098c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80098c4:	2600      	movs	r6, #0
 80098c6:	b914      	cbnz	r4, 80098ce <_fwalk_reent+0x16>
 80098c8:	4630      	mov	r0, r6
 80098ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098ce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80098d2:	3f01      	subs	r7, #1
 80098d4:	d501      	bpl.n	80098da <_fwalk_reent+0x22>
 80098d6:	6824      	ldr	r4, [r4, #0]
 80098d8:	e7f5      	b.n	80098c6 <_fwalk_reent+0xe>
 80098da:	89ab      	ldrh	r3, [r5, #12]
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d907      	bls.n	80098f0 <_fwalk_reent+0x38>
 80098e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80098e4:	3301      	adds	r3, #1
 80098e6:	d003      	beq.n	80098f0 <_fwalk_reent+0x38>
 80098e8:	4629      	mov	r1, r5
 80098ea:	4640      	mov	r0, r8
 80098ec:	47c8      	blx	r9
 80098ee:	4306      	orrs	r6, r0
 80098f0:	3568      	adds	r5, #104	; 0x68
 80098f2:	e7ee      	b.n	80098d2 <_fwalk_reent+0x1a>

080098f4 <_localeconv_r>:
 80098f4:	4b04      	ldr	r3, [pc, #16]	; (8009908 <_localeconv_r+0x14>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	6a18      	ldr	r0, [r3, #32]
 80098fa:	4b04      	ldr	r3, [pc, #16]	; (800990c <_localeconv_r+0x18>)
 80098fc:	2800      	cmp	r0, #0
 80098fe:	bf08      	it	eq
 8009900:	4618      	moveq	r0, r3
 8009902:	30f0      	adds	r0, #240	; 0xf0
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop
 8009908:	2000000c 	.word	0x2000000c
 800990c:	20000070 	.word	0x20000070

08009910 <__swhatbuf_r>:
 8009910:	b570      	push	{r4, r5, r6, lr}
 8009912:	460e      	mov	r6, r1
 8009914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009918:	2900      	cmp	r1, #0
 800991a:	b096      	sub	sp, #88	; 0x58
 800991c:	4614      	mov	r4, r2
 800991e:	461d      	mov	r5, r3
 8009920:	da07      	bge.n	8009932 <__swhatbuf_r+0x22>
 8009922:	2300      	movs	r3, #0
 8009924:	602b      	str	r3, [r5, #0]
 8009926:	89b3      	ldrh	r3, [r6, #12]
 8009928:	061a      	lsls	r2, r3, #24
 800992a:	d410      	bmi.n	800994e <__swhatbuf_r+0x3e>
 800992c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009930:	e00e      	b.n	8009950 <__swhatbuf_r+0x40>
 8009932:	466a      	mov	r2, sp
 8009934:	f000 fdaa 	bl	800a48c <_fstat_r>
 8009938:	2800      	cmp	r0, #0
 800993a:	dbf2      	blt.n	8009922 <__swhatbuf_r+0x12>
 800993c:	9a01      	ldr	r2, [sp, #4]
 800993e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009942:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009946:	425a      	negs	r2, r3
 8009948:	415a      	adcs	r2, r3
 800994a:	602a      	str	r2, [r5, #0]
 800994c:	e7ee      	b.n	800992c <__swhatbuf_r+0x1c>
 800994e:	2340      	movs	r3, #64	; 0x40
 8009950:	2000      	movs	r0, #0
 8009952:	6023      	str	r3, [r4, #0]
 8009954:	b016      	add	sp, #88	; 0x58
 8009956:	bd70      	pop	{r4, r5, r6, pc}

08009958 <__smakebuf_r>:
 8009958:	898b      	ldrh	r3, [r1, #12]
 800995a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800995c:	079d      	lsls	r5, r3, #30
 800995e:	4606      	mov	r6, r0
 8009960:	460c      	mov	r4, r1
 8009962:	d507      	bpl.n	8009974 <__smakebuf_r+0x1c>
 8009964:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009968:	6023      	str	r3, [r4, #0]
 800996a:	6123      	str	r3, [r4, #16]
 800996c:	2301      	movs	r3, #1
 800996e:	6163      	str	r3, [r4, #20]
 8009970:	b002      	add	sp, #8
 8009972:	bd70      	pop	{r4, r5, r6, pc}
 8009974:	ab01      	add	r3, sp, #4
 8009976:	466a      	mov	r2, sp
 8009978:	f7ff ffca 	bl	8009910 <__swhatbuf_r>
 800997c:	9900      	ldr	r1, [sp, #0]
 800997e:	4605      	mov	r5, r0
 8009980:	4630      	mov	r0, r6
 8009982:	f000 fb73 	bl	800a06c <_malloc_r>
 8009986:	b948      	cbnz	r0, 800999c <__smakebuf_r+0x44>
 8009988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800998c:	059a      	lsls	r2, r3, #22
 800998e:	d4ef      	bmi.n	8009970 <__smakebuf_r+0x18>
 8009990:	f023 0303 	bic.w	r3, r3, #3
 8009994:	f043 0302 	orr.w	r3, r3, #2
 8009998:	81a3      	strh	r3, [r4, #12]
 800999a:	e7e3      	b.n	8009964 <__smakebuf_r+0xc>
 800999c:	4b0d      	ldr	r3, [pc, #52]	; (80099d4 <__smakebuf_r+0x7c>)
 800999e:	62b3      	str	r3, [r6, #40]	; 0x28
 80099a0:	89a3      	ldrh	r3, [r4, #12]
 80099a2:	6020      	str	r0, [r4, #0]
 80099a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099a8:	81a3      	strh	r3, [r4, #12]
 80099aa:	9b00      	ldr	r3, [sp, #0]
 80099ac:	6163      	str	r3, [r4, #20]
 80099ae:	9b01      	ldr	r3, [sp, #4]
 80099b0:	6120      	str	r0, [r4, #16]
 80099b2:	b15b      	cbz	r3, 80099cc <__smakebuf_r+0x74>
 80099b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099b8:	4630      	mov	r0, r6
 80099ba:	f000 fd79 	bl	800a4b0 <_isatty_r>
 80099be:	b128      	cbz	r0, 80099cc <__smakebuf_r+0x74>
 80099c0:	89a3      	ldrh	r3, [r4, #12]
 80099c2:	f023 0303 	bic.w	r3, r3, #3
 80099c6:	f043 0301 	orr.w	r3, r3, #1
 80099ca:	81a3      	strh	r3, [r4, #12]
 80099cc:	89a3      	ldrh	r3, [r4, #12]
 80099ce:	431d      	orrs	r5, r3
 80099d0:	81a5      	strh	r5, [r4, #12]
 80099d2:	e7cd      	b.n	8009970 <__smakebuf_r+0x18>
 80099d4:	080097a9 	.word	0x080097a9

080099d8 <malloc>:
 80099d8:	4b02      	ldr	r3, [pc, #8]	; (80099e4 <malloc+0xc>)
 80099da:	4601      	mov	r1, r0
 80099dc:	6818      	ldr	r0, [r3, #0]
 80099de:	f000 bb45 	b.w	800a06c <_malloc_r>
 80099e2:	bf00      	nop
 80099e4:	2000000c 	.word	0x2000000c

080099e8 <memcpy>:
 80099e8:	b510      	push	{r4, lr}
 80099ea:	1e43      	subs	r3, r0, #1
 80099ec:	440a      	add	r2, r1
 80099ee:	4291      	cmp	r1, r2
 80099f0:	d100      	bne.n	80099f4 <memcpy+0xc>
 80099f2:	bd10      	pop	{r4, pc}
 80099f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099fc:	e7f7      	b.n	80099ee <memcpy+0x6>

080099fe <_Balloc>:
 80099fe:	b570      	push	{r4, r5, r6, lr}
 8009a00:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009a02:	4604      	mov	r4, r0
 8009a04:	460e      	mov	r6, r1
 8009a06:	b93d      	cbnz	r5, 8009a18 <_Balloc+0x1a>
 8009a08:	2010      	movs	r0, #16
 8009a0a:	f7ff ffe5 	bl	80099d8 <malloc>
 8009a0e:	6260      	str	r0, [r4, #36]	; 0x24
 8009a10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009a14:	6005      	str	r5, [r0, #0]
 8009a16:	60c5      	str	r5, [r0, #12]
 8009a18:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009a1a:	68eb      	ldr	r3, [r5, #12]
 8009a1c:	b183      	cbz	r3, 8009a40 <_Balloc+0x42>
 8009a1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009a26:	b9b8      	cbnz	r0, 8009a58 <_Balloc+0x5a>
 8009a28:	2101      	movs	r1, #1
 8009a2a:	fa01 f506 	lsl.w	r5, r1, r6
 8009a2e:	1d6a      	adds	r2, r5, #5
 8009a30:	0092      	lsls	r2, r2, #2
 8009a32:	4620      	mov	r0, r4
 8009a34:	f000 fabe 	bl	8009fb4 <_calloc_r>
 8009a38:	b160      	cbz	r0, 8009a54 <_Balloc+0x56>
 8009a3a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009a3e:	e00e      	b.n	8009a5e <_Balloc+0x60>
 8009a40:	2221      	movs	r2, #33	; 0x21
 8009a42:	2104      	movs	r1, #4
 8009a44:	4620      	mov	r0, r4
 8009a46:	f000 fab5 	bl	8009fb4 <_calloc_r>
 8009a4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a4c:	60e8      	str	r0, [r5, #12]
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d1e4      	bne.n	8009a1e <_Balloc+0x20>
 8009a54:	2000      	movs	r0, #0
 8009a56:	bd70      	pop	{r4, r5, r6, pc}
 8009a58:	6802      	ldr	r2, [r0, #0]
 8009a5a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009a5e:	2300      	movs	r3, #0
 8009a60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a64:	e7f7      	b.n	8009a56 <_Balloc+0x58>

08009a66 <_Bfree>:
 8009a66:	b570      	push	{r4, r5, r6, lr}
 8009a68:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009a6a:	4606      	mov	r6, r0
 8009a6c:	460d      	mov	r5, r1
 8009a6e:	b93c      	cbnz	r4, 8009a80 <_Bfree+0x1a>
 8009a70:	2010      	movs	r0, #16
 8009a72:	f7ff ffb1 	bl	80099d8 <malloc>
 8009a76:	6270      	str	r0, [r6, #36]	; 0x24
 8009a78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a7c:	6004      	str	r4, [r0, #0]
 8009a7e:	60c4      	str	r4, [r0, #12]
 8009a80:	b13d      	cbz	r5, 8009a92 <_Bfree+0x2c>
 8009a82:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009a84:	686a      	ldr	r2, [r5, #4]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a8c:	6029      	str	r1, [r5, #0]
 8009a8e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009a92:	bd70      	pop	{r4, r5, r6, pc}

08009a94 <__multadd>:
 8009a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a98:	690d      	ldr	r5, [r1, #16]
 8009a9a:	461f      	mov	r7, r3
 8009a9c:	4606      	mov	r6, r0
 8009a9e:	460c      	mov	r4, r1
 8009aa0:	f101 0c14 	add.w	ip, r1, #20
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	f8dc 0000 	ldr.w	r0, [ip]
 8009aaa:	b281      	uxth	r1, r0
 8009aac:	fb02 7101 	mla	r1, r2, r1, r7
 8009ab0:	0c0f      	lsrs	r7, r1, #16
 8009ab2:	0c00      	lsrs	r0, r0, #16
 8009ab4:	fb02 7000 	mla	r0, r2, r0, r7
 8009ab8:	b289      	uxth	r1, r1
 8009aba:	3301      	adds	r3, #1
 8009abc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009ac0:	429d      	cmp	r5, r3
 8009ac2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009ac6:	f84c 1b04 	str.w	r1, [ip], #4
 8009aca:	dcec      	bgt.n	8009aa6 <__multadd+0x12>
 8009acc:	b1d7      	cbz	r7, 8009b04 <__multadd+0x70>
 8009ace:	68a3      	ldr	r3, [r4, #8]
 8009ad0:	42ab      	cmp	r3, r5
 8009ad2:	dc12      	bgt.n	8009afa <__multadd+0x66>
 8009ad4:	6861      	ldr	r1, [r4, #4]
 8009ad6:	4630      	mov	r0, r6
 8009ad8:	3101      	adds	r1, #1
 8009ada:	f7ff ff90 	bl	80099fe <_Balloc>
 8009ade:	6922      	ldr	r2, [r4, #16]
 8009ae0:	3202      	adds	r2, #2
 8009ae2:	f104 010c 	add.w	r1, r4, #12
 8009ae6:	4680      	mov	r8, r0
 8009ae8:	0092      	lsls	r2, r2, #2
 8009aea:	300c      	adds	r0, #12
 8009aec:	f7ff ff7c 	bl	80099e8 <memcpy>
 8009af0:	4621      	mov	r1, r4
 8009af2:	4630      	mov	r0, r6
 8009af4:	f7ff ffb7 	bl	8009a66 <_Bfree>
 8009af8:	4644      	mov	r4, r8
 8009afa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009afe:	3501      	adds	r5, #1
 8009b00:	615f      	str	r7, [r3, #20]
 8009b02:	6125      	str	r5, [r4, #16]
 8009b04:	4620      	mov	r0, r4
 8009b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009b0a <__hi0bits>:
 8009b0a:	0c02      	lsrs	r2, r0, #16
 8009b0c:	0412      	lsls	r2, r2, #16
 8009b0e:	4603      	mov	r3, r0
 8009b10:	b9b2      	cbnz	r2, 8009b40 <__hi0bits+0x36>
 8009b12:	0403      	lsls	r3, r0, #16
 8009b14:	2010      	movs	r0, #16
 8009b16:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009b1a:	bf04      	itt	eq
 8009b1c:	021b      	lsleq	r3, r3, #8
 8009b1e:	3008      	addeq	r0, #8
 8009b20:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009b24:	bf04      	itt	eq
 8009b26:	011b      	lsleq	r3, r3, #4
 8009b28:	3004      	addeq	r0, #4
 8009b2a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009b2e:	bf04      	itt	eq
 8009b30:	009b      	lsleq	r3, r3, #2
 8009b32:	3002      	addeq	r0, #2
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	db06      	blt.n	8009b46 <__hi0bits+0x3c>
 8009b38:	005b      	lsls	r3, r3, #1
 8009b3a:	d503      	bpl.n	8009b44 <__hi0bits+0x3a>
 8009b3c:	3001      	adds	r0, #1
 8009b3e:	4770      	bx	lr
 8009b40:	2000      	movs	r0, #0
 8009b42:	e7e8      	b.n	8009b16 <__hi0bits+0xc>
 8009b44:	2020      	movs	r0, #32
 8009b46:	4770      	bx	lr

08009b48 <__lo0bits>:
 8009b48:	6803      	ldr	r3, [r0, #0]
 8009b4a:	f013 0207 	ands.w	r2, r3, #7
 8009b4e:	4601      	mov	r1, r0
 8009b50:	d00b      	beq.n	8009b6a <__lo0bits+0x22>
 8009b52:	07da      	lsls	r2, r3, #31
 8009b54:	d423      	bmi.n	8009b9e <__lo0bits+0x56>
 8009b56:	0798      	lsls	r0, r3, #30
 8009b58:	bf49      	itett	mi
 8009b5a:	085b      	lsrmi	r3, r3, #1
 8009b5c:	089b      	lsrpl	r3, r3, #2
 8009b5e:	2001      	movmi	r0, #1
 8009b60:	600b      	strmi	r3, [r1, #0]
 8009b62:	bf5c      	itt	pl
 8009b64:	600b      	strpl	r3, [r1, #0]
 8009b66:	2002      	movpl	r0, #2
 8009b68:	4770      	bx	lr
 8009b6a:	b298      	uxth	r0, r3
 8009b6c:	b9a8      	cbnz	r0, 8009b9a <__lo0bits+0x52>
 8009b6e:	0c1b      	lsrs	r3, r3, #16
 8009b70:	2010      	movs	r0, #16
 8009b72:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009b76:	bf04      	itt	eq
 8009b78:	0a1b      	lsreq	r3, r3, #8
 8009b7a:	3008      	addeq	r0, #8
 8009b7c:	071a      	lsls	r2, r3, #28
 8009b7e:	bf04      	itt	eq
 8009b80:	091b      	lsreq	r3, r3, #4
 8009b82:	3004      	addeq	r0, #4
 8009b84:	079a      	lsls	r2, r3, #30
 8009b86:	bf04      	itt	eq
 8009b88:	089b      	lsreq	r3, r3, #2
 8009b8a:	3002      	addeq	r0, #2
 8009b8c:	07da      	lsls	r2, r3, #31
 8009b8e:	d402      	bmi.n	8009b96 <__lo0bits+0x4e>
 8009b90:	085b      	lsrs	r3, r3, #1
 8009b92:	d006      	beq.n	8009ba2 <__lo0bits+0x5a>
 8009b94:	3001      	adds	r0, #1
 8009b96:	600b      	str	r3, [r1, #0]
 8009b98:	4770      	bx	lr
 8009b9a:	4610      	mov	r0, r2
 8009b9c:	e7e9      	b.n	8009b72 <__lo0bits+0x2a>
 8009b9e:	2000      	movs	r0, #0
 8009ba0:	4770      	bx	lr
 8009ba2:	2020      	movs	r0, #32
 8009ba4:	4770      	bx	lr

08009ba6 <__i2b>:
 8009ba6:	b510      	push	{r4, lr}
 8009ba8:	460c      	mov	r4, r1
 8009baa:	2101      	movs	r1, #1
 8009bac:	f7ff ff27 	bl	80099fe <_Balloc>
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	6144      	str	r4, [r0, #20]
 8009bb4:	6102      	str	r2, [r0, #16]
 8009bb6:	bd10      	pop	{r4, pc}

08009bb8 <__multiply>:
 8009bb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bbc:	4614      	mov	r4, r2
 8009bbe:	690a      	ldr	r2, [r1, #16]
 8009bc0:	6923      	ldr	r3, [r4, #16]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	bfb8      	it	lt
 8009bc6:	460b      	movlt	r3, r1
 8009bc8:	4688      	mov	r8, r1
 8009bca:	bfbc      	itt	lt
 8009bcc:	46a0      	movlt	r8, r4
 8009bce:	461c      	movlt	r4, r3
 8009bd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009bd4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009bd8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009bdc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009be0:	eb07 0609 	add.w	r6, r7, r9
 8009be4:	42b3      	cmp	r3, r6
 8009be6:	bfb8      	it	lt
 8009be8:	3101      	addlt	r1, #1
 8009bea:	f7ff ff08 	bl	80099fe <_Balloc>
 8009bee:	f100 0514 	add.w	r5, r0, #20
 8009bf2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009bf6:	462b      	mov	r3, r5
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	4573      	cmp	r3, lr
 8009bfc:	d316      	bcc.n	8009c2c <__multiply+0x74>
 8009bfe:	f104 0214 	add.w	r2, r4, #20
 8009c02:	f108 0114 	add.w	r1, r8, #20
 8009c06:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009c0a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009c0e:	9300      	str	r3, [sp, #0]
 8009c10:	9b00      	ldr	r3, [sp, #0]
 8009c12:	9201      	str	r2, [sp, #4]
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d80c      	bhi.n	8009c32 <__multiply+0x7a>
 8009c18:	2e00      	cmp	r6, #0
 8009c1a:	dd03      	ble.n	8009c24 <__multiply+0x6c>
 8009c1c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d05d      	beq.n	8009ce0 <__multiply+0x128>
 8009c24:	6106      	str	r6, [r0, #16]
 8009c26:	b003      	add	sp, #12
 8009c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c2c:	f843 2b04 	str.w	r2, [r3], #4
 8009c30:	e7e3      	b.n	8009bfa <__multiply+0x42>
 8009c32:	f8b2 b000 	ldrh.w	fp, [r2]
 8009c36:	f1bb 0f00 	cmp.w	fp, #0
 8009c3a:	d023      	beq.n	8009c84 <__multiply+0xcc>
 8009c3c:	4689      	mov	r9, r1
 8009c3e:	46ac      	mov	ip, r5
 8009c40:	f04f 0800 	mov.w	r8, #0
 8009c44:	f859 4b04 	ldr.w	r4, [r9], #4
 8009c48:	f8dc a000 	ldr.w	sl, [ip]
 8009c4c:	b2a3      	uxth	r3, r4
 8009c4e:	fa1f fa8a 	uxth.w	sl, sl
 8009c52:	fb0b a303 	mla	r3, fp, r3, sl
 8009c56:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009c5a:	f8dc 4000 	ldr.w	r4, [ip]
 8009c5e:	4443      	add	r3, r8
 8009c60:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009c64:	fb0b 840a 	mla	r4, fp, sl, r8
 8009c68:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009c6c:	46e2      	mov	sl, ip
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009c74:	454f      	cmp	r7, r9
 8009c76:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009c7a:	f84a 3b04 	str.w	r3, [sl], #4
 8009c7e:	d82b      	bhi.n	8009cd8 <__multiply+0x120>
 8009c80:	f8cc 8004 	str.w	r8, [ip, #4]
 8009c84:	9b01      	ldr	r3, [sp, #4]
 8009c86:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009c8a:	3204      	adds	r2, #4
 8009c8c:	f1ba 0f00 	cmp.w	sl, #0
 8009c90:	d020      	beq.n	8009cd4 <__multiply+0x11c>
 8009c92:	682b      	ldr	r3, [r5, #0]
 8009c94:	4689      	mov	r9, r1
 8009c96:	46a8      	mov	r8, r5
 8009c98:	f04f 0b00 	mov.w	fp, #0
 8009c9c:	f8b9 c000 	ldrh.w	ip, [r9]
 8009ca0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009ca4:	fb0a 440c 	mla	r4, sl, ip, r4
 8009ca8:	445c      	add	r4, fp
 8009caa:	46c4      	mov	ip, r8
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009cb2:	f84c 3b04 	str.w	r3, [ip], #4
 8009cb6:	f859 3b04 	ldr.w	r3, [r9], #4
 8009cba:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009cbe:	0c1b      	lsrs	r3, r3, #16
 8009cc0:	fb0a b303 	mla	r3, sl, r3, fp
 8009cc4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009cc8:	454f      	cmp	r7, r9
 8009cca:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009cce:	d805      	bhi.n	8009cdc <__multiply+0x124>
 8009cd0:	f8c8 3004 	str.w	r3, [r8, #4]
 8009cd4:	3504      	adds	r5, #4
 8009cd6:	e79b      	b.n	8009c10 <__multiply+0x58>
 8009cd8:	46d4      	mov	ip, sl
 8009cda:	e7b3      	b.n	8009c44 <__multiply+0x8c>
 8009cdc:	46e0      	mov	r8, ip
 8009cde:	e7dd      	b.n	8009c9c <__multiply+0xe4>
 8009ce0:	3e01      	subs	r6, #1
 8009ce2:	e799      	b.n	8009c18 <__multiply+0x60>

08009ce4 <__pow5mult>:
 8009ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ce8:	4615      	mov	r5, r2
 8009cea:	f012 0203 	ands.w	r2, r2, #3
 8009cee:	4606      	mov	r6, r0
 8009cf0:	460f      	mov	r7, r1
 8009cf2:	d007      	beq.n	8009d04 <__pow5mult+0x20>
 8009cf4:	3a01      	subs	r2, #1
 8009cf6:	4c21      	ldr	r4, [pc, #132]	; (8009d7c <__pow5mult+0x98>)
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009cfe:	f7ff fec9 	bl	8009a94 <__multadd>
 8009d02:	4607      	mov	r7, r0
 8009d04:	10ad      	asrs	r5, r5, #2
 8009d06:	d035      	beq.n	8009d74 <__pow5mult+0x90>
 8009d08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d0a:	b93c      	cbnz	r4, 8009d1c <__pow5mult+0x38>
 8009d0c:	2010      	movs	r0, #16
 8009d0e:	f7ff fe63 	bl	80099d8 <malloc>
 8009d12:	6270      	str	r0, [r6, #36]	; 0x24
 8009d14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d18:	6004      	str	r4, [r0, #0]
 8009d1a:	60c4      	str	r4, [r0, #12]
 8009d1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d24:	b94c      	cbnz	r4, 8009d3a <__pow5mult+0x56>
 8009d26:	f240 2171 	movw	r1, #625	; 0x271
 8009d2a:	4630      	mov	r0, r6
 8009d2c:	f7ff ff3b 	bl	8009ba6 <__i2b>
 8009d30:	2300      	movs	r3, #0
 8009d32:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d36:	4604      	mov	r4, r0
 8009d38:	6003      	str	r3, [r0, #0]
 8009d3a:	f04f 0800 	mov.w	r8, #0
 8009d3e:	07eb      	lsls	r3, r5, #31
 8009d40:	d50a      	bpl.n	8009d58 <__pow5mult+0x74>
 8009d42:	4639      	mov	r1, r7
 8009d44:	4622      	mov	r2, r4
 8009d46:	4630      	mov	r0, r6
 8009d48:	f7ff ff36 	bl	8009bb8 <__multiply>
 8009d4c:	4639      	mov	r1, r7
 8009d4e:	4681      	mov	r9, r0
 8009d50:	4630      	mov	r0, r6
 8009d52:	f7ff fe88 	bl	8009a66 <_Bfree>
 8009d56:	464f      	mov	r7, r9
 8009d58:	106d      	asrs	r5, r5, #1
 8009d5a:	d00b      	beq.n	8009d74 <__pow5mult+0x90>
 8009d5c:	6820      	ldr	r0, [r4, #0]
 8009d5e:	b938      	cbnz	r0, 8009d70 <__pow5mult+0x8c>
 8009d60:	4622      	mov	r2, r4
 8009d62:	4621      	mov	r1, r4
 8009d64:	4630      	mov	r0, r6
 8009d66:	f7ff ff27 	bl	8009bb8 <__multiply>
 8009d6a:	6020      	str	r0, [r4, #0]
 8009d6c:	f8c0 8000 	str.w	r8, [r0]
 8009d70:	4604      	mov	r4, r0
 8009d72:	e7e4      	b.n	8009d3e <__pow5mult+0x5a>
 8009d74:	4638      	mov	r0, r7
 8009d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d7a:	bf00      	nop
 8009d7c:	0800a790 	.word	0x0800a790

08009d80 <__lshift>:
 8009d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d84:	460c      	mov	r4, r1
 8009d86:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d8a:	6923      	ldr	r3, [r4, #16]
 8009d8c:	6849      	ldr	r1, [r1, #4]
 8009d8e:	eb0a 0903 	add.w	r9, sl, r3
 8009d92:	68a3      	ldr	r3, [r4, #8]
 8009d94:	4607      	mov	r7, r0
 8009d96:	4616      	mov	r6, r2
 8009d98:	f109 0501 	add.w	r5, r9, #1
 8009d9c:	42ab      	cmp	r3, r5
 8009d9e:	db32      	blt.n	8009e06 <__lshift+0x86>
 8009da0:	4638      	mov	r0, r7
 8009da2:	f7ff fe2c 	bl	80099fe <_Balloc>
 8009da6:	2300      	movs	r3, #0
 8009da8:	4680      	mov	r8, r0
 8009daa:	f100 0114 	add.w	r1, r0, #20
 8009dae:	461a      	mov	r2, r3
 8009db0:	4553      	cmp	r3, sl
 8009db2:	db2b      	blt.n	8009e0c <__lshift+0x8c>
 8009db4:	6920      	ldr	r0, [r4, #16]
 8009db6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009dba:	f104 0314 	add.w	r3, r4, #20
 8009dbe:	f016 021f 	ands.w	r2, r6, #31
 8009dc2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009dc6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009dca:	d025      	beq.n	8009e18 <__lshift+0x98>
 8009dcc:	f1c2 0e20 	rsb	lr, r2, #32
 8009dd0:	2000      	movs	r0, #0
 8009dd2:	681e      	ldr	r6, [r3, #0]
 8009dd4:	468a      	mov	sl, r1
 8009dd6:	4096      	lsls	r6, r2
 8009dd8:	4330      	orrs	r0, r6
 8009dda:	f84a 0b04 	str.w	r0, [sl], #4
 8009dde:	f853 0b04 	ldr.w	r0, [r3], #4
 8009de2:	459c      	cmp	ip, r3
 8009de4:	fa20 f00e 	lsr.w	r0, r0, lr
 8009de8:	d814      	bhi.n	8009e14 <__lshift+0x94>
 8009dea:	6048      	str	r0, [r1, #4]
 8009dec:	b108      	cbz	r0, 8009df2 <__lshift+0x72>
 8009dee:	f109 0502 	add.w	r5, r9, #2
 8009df2:	3d01      	subs	r5, #1
 8009df4:	4638      	mov	r0, r7
 8009df6:	f8c8 5010 	str.w	r5, [r8, #16]
 8009dfa:	4621      	mov	r1, r4
 8009dfc:	f7ff fe33 	bl	8009a66 <_Bfree>
 8009e00:	4640      	mov	r0, r8
 8009e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e06:	3101      	adds	r1, #1
 8009e08:	005b      	lsls	r3, r3, #1
 8009e0a:	e7c7      	b.n	8009d9c <__lshift+0x1c>
 8009e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009e10:	3301      	adds	r3, #1
 8009e12:	e7cd      	b.n	8009db0 <__lshift+0x30>
 8009e14:	4651      	mov	r1, sl
 8009e16:	e7dc      	b.n	8009dd2 <__lshift+0x52>
 8009e18:	3904      	subs	r1, #4
 8009e1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e1e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e22:	459c      	cmp	ip, r3
 8009e24:	d8f9      	bhi.n	8009e1a <__lshift+0x9a>
 8009e26:	e7e4      	b.n	8009df2 <__lshift+0x72>

08009e28 <__mcmp>:
 8009e28:	6903      	ldr	r3, [r0, #16]
 8009e2a:	690a      	ldr	r2, [r1, #16]
 8009e2c:	1a9b      	subs	r3, r3, r2
 8009e2e:	b530      	push	{r4, r5, lr}
 8009e30:	d10c      	bne.n	8009e4c <__mcmp+0x24>
 8009e32:	0092      	lsls	r2, r2, #2
 8009e34:	3014      	adds	r0, #20
 8009e36:	3114      	adds	r1, #20
 8009e38:	1884      	adds	r4, r0, r2
 8009e3a:	4411      	add	r1, r2
 8009e3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009e40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009e44:	4295      	cmp	r5, r2
 8009e46:	d003      	beq.n	8009e50 <__mcmp+0x28>
 8009e48:	d305      	bcc.n	8009e56 <__mcmp+0x2e>
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	bd30      	pop	{r4, r5, pc}
 8009e50:	42a0      	cmp	r0, r4
 8009e52:	d3f3      	bcc.n	8009e3c <__mcmp+0x14>
 8009e54:	e7fa      	b.n	8009e4c <__mcmp+0x24>
 8009e56:	f04f 33ff 	mov.w	r3, #4294967295
 8009e5a:	e7f7      	b.n	8009e4c <__mcmp+0x24>

08009e5c <__mdiff>:
 8009e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e60:	460d      	mov	r5, r1
 8009e62:	4607      	mov	r7, r0
 8009e64:	4611      	mov	r1, r2
 8009e66:	4628      	mov	r0, r5
 8009e68:	4614      	mov	r4, r2
 8009e6a:	f7ff ffdd 	bl	8009e28 <__mcmp>
 8009e6e:	1e06      	subs	r6, r0, #0
 8009e70:	d108      	bne.n	8009e84 <__mdiff+0x28>
 8009e72:	4631      	mov	r1, r6
 8009e74:	4638      	mov	r0, r7
 8009e76:	f7ff fdc2 	bl	80099fe <_Balloc>
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e84:	bfa4      	itt	ge
 8009e86:	4623      	movge	r3, r4
 8009e88:	462c      	movge	r4, r5
 8009e8a:	4638      	mov	r0, r7
 8009e8c:	6861      	ldr	r1, [r4, #4]
 8009e8e:	bfa6      	itte	ge
 8009e90:	461d      	movge	r5, r3
 8009e92:	2600      	movge	r6, #0
 8009e94:	2601      	movlt	r6, #1
 8009e96:	f7ff fdb2 	bl	80099fe <_Balloc>
 8009e9a:	692b      	ldr	r3, [r5, #16]
 8009e9c:	60c6      	str	r6, [r0, #12]
 8009e9e:	6926      	ldr	r6, [r4, #16]
 8009ea0:	f105 0914 	add.w	r9, r5, #20
 8009ea4:	f104 0214 	add.w	r2, r4, #20
 8009ea8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009eac:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009eb0:	f100 0514 	add.w	r5, r0, #20
 8009eb4:	f04f 0e00 	mov.w	lr, #0
 8009eb8:	f852 ab04 	ldr.w	sl, [r2], #4
 8009ebc:	f859 4b04 	ldr.w	r4, [r9], #4
 8009ec0:	fa1e f18a 	uxtah	r1, lr, sl
 8009ec4:	b2a3      	uxth	r3, r4
 8009ec6:	1ac9      	subs	r1, r1, r3
 8009ec8:	0c23      	lsrs	r3, r4, #16
 8009eca:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009ece:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009ed2:	b289      	uxth	r1, r1
 8009ed4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009ed8:	45c8      	cmp	r8, r9
 8009eda:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009ede:	4694      	mov	ip, r2
 8009ee0:	f845 3b04 	str.w	r3, [r5], #4
 8009ee4:	d8e8      	bhi.n	8009eb8 <__mdiff+0x5c>
 8009ee6:	45bc      	cmp	ip, r7
 8009ee8:	d304      	bcc.n	8009ef4 <__mdiff+0x98>
 8009eea:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009eee:	b183      	cbz	r3, 8009f12 <__mdiff+0xb6>
 8009ef0:	6106      	str	r6, [r0, #16]
 8009ef2:	e7c5      	b.n	8009e80 <__mdiff+0x24>
 8009ef4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009ef8:	fa1e f381 	uxtah	r3, lr, r1
 8009efc:	141a      	asrs	r2, r3, #16
 8009efe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f08:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009f0c:	f845 3b04 	str.w	r3, [r5], #4
 8009f10:	e7e9      	b.n	8009ee6 <__mdiff+0x8a>
 8009f12:	3e01      	subs	r6, #1
 8009f14:	e7e9      	b.n	8009eea <__mdiff+0x8e>

08009f16 <__d2b>:
 8009f16:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f1a:	460e      	mov	r6, r1
 8009f1c:	2101      	movs	r1, #1
 8009f1e:	ec59 8b10 	vmov	r8, r9, d0
 8009f22:	4615      	mov	r5, r2
 8009f24:	f7ff fd6b 	bl	80099fe <_Balloc>
 8009f28:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009f2c:	4607      	mov	r7, r0
 8009f2e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f32:	bb34      	cbnz	r4, 8009f82 <__d2b+0x6c>
 8009f34:	9301      	str	r3, [sp, #4]
 8009f36:	f1b8 0300 	subs.w	r3, r8, #0
 8009f3a:	d027      	beq.n	8009f8c <__d2b+0x76>
 8009f3c:	a802      	add	r0, sp, #8
 8009f3e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009f42:	f7ff fe01 	bl	8009b48 <__lo0bits>
 8009f46:	9900      	ldr	r1, [sp, #0]
 8009f48:	b1f0      	cbz	r0, 8009f88 <__d2b+0x72>
 8009f4a:	9a01      	ldr	r2, [sp, #4]
 8009f4c:	f1c0 0320 	rsb	r3, r0, #32
 8009f50:	fa02 f303 	lsl.w	r3, r2, r3
 8009f54:	430b      	orrs	r3, r1
 8009f56:	40c2      	lsrs	r2, r0
 8009f58:	617b      	str	r3, [r7, #20]
 8009f5a:	9201      	str	r2, [sp, #4]
 8009f5c:	9b01      	ldr	r3, [sp, #4]
 8009f5e:	61bb      	str	r3, [r7, #24]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	bf14      	ite	ne
 8009f64:	2102      	movne	r1, #2
 8009f66:	2101      	moveq	r1, #1
 8009f68:	6139      	str	r1, [r7, #16]
 8009f6a:	b1c4      	cbz	r4, 8009f9e <__d2b+0x88>
 8009f6c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009f70:	4404      	add	r4, r0
 8009f72:	6034      	str	r4, [r6, #0]
 8009f74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f78:	6028      	str	r0, [r5, #0]
 8009f7a:	4638      	mov	r0, r7
 8009f7c:	b003      	add	sp, #12
 8009f7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f86:	e7d5      	b.n	8009f34 <__d2b+0x1e>
 8009f88:	6179      	str	r1, [r7, #20]
 8009f8a:	e7e7      	b.n	8009f5c <__d2b+0x46>
 8009f8c:	a801      	add	r0, sp, #4
 8009f8e:	f7ff fddb 	bl	8009b48 <__lo0bits>
 8009f92:	9b01      	ldr	r3, [sp, #4]
 8009f94:	617b      	str	r3, [r7, #20]
 8009f96:	2101      	movs	r1, #1
 8009f98:	6139      	str	r1, [r7, #16]
 8009f9a:	3020      	adds	r0, #32
 8009f9c:	e7e5      	b.n	8009f6a <__d2b+0x54>
 8009f9e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009fa2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009fa6:	6030      	str	r0, [r6, #0]
 8009fa8:	6918      	ldr	r0, [r3, #16]
 8009faa:	f7ff fdae 	bl	8009b0a <__hi0bits>
 8009fae:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009fb2:	e7e1      	b.n	8009f78 <__d2b+0x62>

08009fb4 <_calloc_r>:
 8009fb4:	b538      	push	{r3, r4, r5, lr}
 8009fb6:	fb02 f401 	mul.w	r4, r2, r1
 8009fba:	4621      	mov	r1, r4
 8009fbc:	f000 f856 	bl	800a06c <_malloc_r>
 8009fc0:	4605      	mov	r5, r0
 8009fc2:	b118      	cbz	r0, 8009fcc <_calloc_r+0x18>
 8009fc4:	4622      	mov	r2, r4
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	f7fd fe4a 	bl	8007c60 <memset>
 8009fcc:	4628      	mov	r0, r5
 8009fce:	bd38      	pop	{r3, r4, r5, pc}

08009fd0 <_free_r>:
 8009fd0:	b538      	push	{r3, r4, r5, lr}
 8009fd2:	4605      	mov	r5, r0
 8009fd4:	2900      	cmp	r1, #0
 8009fd6:	d045      	beq.n	800a064 <_free_r+0x94>
 8009fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fdc:	1f0c      	subs	r4, r1, #4
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	bfb8      	it	lt
 8009fe2:	18e4      	addlt	r4, r4, r3
 8009fe4:	f000 fa98 	bl	800a518 <__malloc_lock>
 8009fe8:	4a1f      	ldr	r2, [pc, #124]	; (800a068 <_free_r+0x98>)
 8009fea:	6813      	ldr	r3, [r2, #0]
 8009fec:	4610      	mov	r0, r2
 8009fee:	b933      	cbnz	r3, 8009ffe <_free_r+0x2e>
 8009ff0:	6063      	str	r3, [r4, #4]
 8009ff2:	6014      	str	r4, [r2, #0]
 8009ff4:	4628      	mov	r0, r5
 8009ff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ffa:	f000 ba8e 	b.w	800a51a <__malloc_unlock>
 8009ffe:	42a3      	cmp	r3, r4
 800a000:	d90c      	bls.n	800a01c <_free_r+0x4c>
 800a002:	6821      	ldr	r1, [r4, #0]
 800a004:	1862      	adds	r2, r4, r1
 800a006:	4293      	cmp	r3, r2
 800a008:	bf04      	itt	eq
 800a00a:	681a      	ldreq	r2, [r3, #0]
 800a00c:	685b      	ldreq	r3, [r3, #4]
 800a00e:	6063      	str	r3, [r4, #4]
 800a010:	bf04      	itt	eq
 800a012:	1852      	addeq	r2, r2, r1
 800a014:	6022      	streq	r2, [r4, #0]
 800a016:	6004      	str	r4, [r0, #0]
 800a018:	e7ec      	b.n	8009ff4 <_free_r+0x24>
 800a01a:	4613      	mov	r3, r2
 800a01c:	685a      	ldr	r2, [r3, #4]
 800a01e:	b10a      	cbz	r2, 800a024 <_free_r+0x54>
 800a020:	42a2      	cmp	r2, r4
 800a022:	d9fa      	bls.n	800a01a <_free_r+0x4a>
 800a024:	6819      	ldr	r1, [r3, #0]
 800a026:	1858      	adds	r0, r3, r1
 800a028:	42a0      	cmp	r0, r4
 800a02a:	d10b      	bne.n	800a044 <_free_r+0x74>
 800a02c:	6820      	ldr	r0, [r4, #0]
 800a02e:	4401      	add	r1, r0
 800a030:	1858      	adds	r0, r3, r1
 800a032:	4282      	cmp	r2, r0
 800a034:	6019      	str	r1, [r3, #0]
 800a036:	d1dd      	bne.n	8009ff4 <_free_r+0x24>
 800a038:	6810      	ldr	r0, [r2, #0]
 800a03a:	6852      	ldr	r2, [r2, #4]
 800a03c:	605a      	str	r2, [r3, #4]
 800a03e:	4401      	add	r1, r0
 800a040:	6019      	str	r1, [r3, #0]
 800a042:	e7d7      	b.n	8009ff4 <_free_r+0x24>
 800a044:	d902      	bls.n	800a04c <_free_r+0x7c>
 800a046:	230c      	movs	r3, #12
 800a048:	602b      	str	r3, [r5, #0]
 800a04a:	e7d3      	b.n	8009ff4 <_free_r+0x24>
 800a04c:	6820      	ldr	r0, [r4, #0]
 800a04e:	1821      	adds	r1, r4, r0
 800a050:	428a      	cmp	r2, r1
 800a052:	bf04      	itt	eq
 800a054:	6811      	ldreq	r1, [r2, #0]
 800a056:	6852      	ldreq	r2, [r2, #4]
 800a058:	6062      	str	r2, [r4, #4]
 800a05a:	bf04      	itt	eq
 800a05c:	1809      	addeq	r1, r1, r0
 800a05e:	6021      	streq	r1, [r4, #0]
 800a060:	605c      	str	r4, [r3, #4]
 800a062:	e7c7      	b.n	8009ff4 <_free_r+0x24>
 800a064:	bd38      	pop	{r3, r4, r5, pc}
 800a066:	bf00      	nop
 800a068:	20000200 	.word	0x20000200

0800a06c <_malloc_r>:
 800a06c:	b570      	push	{r4, r5, r6, lr}
 800a06e:	1ccd      	adds	r5, r1, #3
 800a070:	f025 0503 	bic.w	r5, r5, #3
 800a074:	3508      	adds	r5, #8
 800a076:	2d0c      	cmp	r5, #12
 800a078:	bf38      	it	cc
 800a07a:	250c      	movcc	r5, #12
 800a07c:	2d00      	cmp	r5, #0
 800a07e:	4606      	mov	r6, r0
 800a080:	db01      	blt.n	800a086 <_malloc_r+0x1a>
 800a082:	42a9      	cmp	r1, r5
 800a084:	d903      	bls.n	800a08e <_malloc_r+0x22>
 800a086:	230c      	movs	r3, #12
 800a088:	6033      	str	r3, [r6, #0]
 800a08a:	2000      	movs	r0, #0
 800a08c:	bd70      	pop	{r4, r5, r6, pc}
 800a08e:	f000 fa43 	bl	800a518 <__malloc_lock>
 800a092:	4a21      	ldr	r2, [pc, #132]	; (800a118 <_malloc_r+0xac>)
 800a094:	6814      	ldr	r4, [r2, #0]
 800a096:	4621      	mov	r1, r4
 800a098:	b991      	cbnz	r1, 800a0c0 <_malloc_r+0x54>
 800a09a:	4c20      	ldr	r4, [pc, #128]	; (800a11c <_malloc_r+0xb0>)
 800a09c:	6823      	ldr	r3, [r4, #0]
 800a09e:	b91b      	cbnz	r3, 800a0a8 <_malloc_r+0x3c>
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	f000 f97d 	bl	800a3a0 <_sbrk_r>
 800a0a6:	6020      	str	r0, [r4, #0]
 800a0a8:	4629      	mov	r1, r5
 800a0aa:	4630      	mov	r0, r6
 800a0ac:	f000 f978 	bl	800a3a0 <_sbrk_r>
 800a0b0:	1c43      	adds	r3, r0, #1
 800a0b2:	d124      	bne.n	800a0fe <_malloc_r+0x92>
 800a0b4:	230c      	movs	r3, #12
 800a0b6:	6033      	str	r3, [r6, #0]
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	f000 fa2e 	bl	800a51a <__malloc_unlock>
 800a0be:	e7e4      	b.n	800a08a <_malloc_r+0x1e>
 800a0c0:	680b      	ldr	r3, [r1, #0]
 800a0c2:	1b5b      	subs	r3, r3, r5
 800a0c4:	d418      	bmi.n	800a0f8 <_malloc_r+0x8c>
 800a0c6:	2b0b      	cmp	r3, #11
 800a0c8:	d90f      	bls.n	800a0ea <_malloc_r+0x7e>
 800a0ca:	600b      	str	r3, [r1, #0]
 800a0cc:	50cd      	str	r5, [r1, r3]
 800a0ce:	18cc      	adds	r4, r1, r3
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	f000 fa22 	bl	800a51a <__malloc_unlock>
 800a0d6:	f104 000b 	add.w	r0, r4, #11
 800a0da:	1d23      	adds	r3, r4, #4
 800a0dc:	f020 0007 	bic.w	r0, r0, #7
 800a0e0:	1ac3      	subs	r3, r0, r3
 800a0e2:	d0d3      	beq.n	800a08c <_malloc_r+0x20>
 800a0e4:	425a      	negs	r2, r3
 800a0e6:	50e2      	str	r2, [r4, r3]
 800a0e8:	e7d0      	b.n	800a08c <_malloc_r+0x20>
 800a0ea:	428c      	cmp	r4, r1
 800a0ec:	684b      	ldr	r3, [r1, #4]
 800a0ee:	bf16      	itet	ne
 800a0f0:	6063      	strne	r3, [r4, #4]
 800a0f2:	6013      	streq	r3, [r2, #0]
 800a0f4:	460c      	movne	r4, r1
 800a0f6:	e7eb      	b.n	800a0d0 <_malloc_r+0x64>
 800a0f8:	460c      	mov	r4, r1
 800a0fa:	6849      	ldr	r1, [r1, #4]
 800a0fc:	e7cc      	b.n	800a098 <_malloc_r+0x2c>
 800a0fe:	1cc4      	adds	r4, r0, #3
 800a100:	f024 0403 	bic.w	r4, r4, #3
 800a104:	42a0      	cmp	r0, r4
 800a106:	d005      	beq.n	800a114 <_malloc_r+0xa8>
 800a108:	1a21      	subs	r1, r4, r0
 800a10a:	4630      	mov	r0, r6
 800a10c:	f000 f948 	bl	800a3a0 <_sbrk_r>
 800a110:	3001      	adds	r0, #1
 800a112:	d0cf      	beq.n	800a0b4 <_malloc_r+0x48>
 800a114:	6025      	str	r5, [r4, #0]
 800a116:	e7db      	b.n	800a0d0 <_malloc_r+0x64>
 800a118:	20000200 	.word	0x20000200
 800a11c:	20000204 	.word	0x20000204

0800a120 <__sfputc_r>:
 800a120:	6893      	ldr	r3, [r2, #8]
 800a122:	3b01      	subs	r3, #1
 800a124:	2b00      	cmp	r3, #0
 800a126:	b410      	push	{r4}
 800a128:	6093      	str	r3, [r2, #8]
 800a12a:	da08      	bge.n	800a13e <__sfputc_r+0x1e>
 800a12c:	6994      	ldr	r4, [r2, #24]
 800a12e:	42a3      	cmp	r3, r4
 800a130:	db01      	blt.n	800a136 <__sfputc_r+0x16>
 800a132:	290a      	cmp	r1, #10
 800a134:	d103      	bne.n	800a13e <__sfputc_r+0x1e>
 800a136:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a13a:	f7fe bb5b 	b.w	80087f4 <__swbuf_r>
 800a13e:	6813      	ldr	r3, [r2, #0]
 800a140:	1c58      	adds	r0, r3, #1
 800a142:	6010      	str	r0, [r2, #0]
 800a144:	7019      	strb	r1, [r3, #0]
 800a146:	4608      	mov	r0, r1
 800a148:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a14c:	4770      	bx	lr

0800a14e <__sfputs_r>:
 800a14e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a150:	4606      	mov	r6, r0
 800a152:	460f      	mov	r7, r1
 800a154:	4614      	mov	r4, r2
 800a156:	18d5      	adds	r5, r2, r3
 800a158:	42ac      	cmp	r4, r5
 800a15a:	d101      	bne.n	800a160 <__sfputs_r+0x12>
 800a15c:	2000      	movs	r0, #0
 800a15e:	e007      	b.n	800a170 <__sfputs_r+0x22>
 800a160:	463a      	mov	r2, r7
 800a162:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a166:	4630      	mov	r0, r6
 800a168:	f7ff ffda 	bl	800a120 <__sfputc_r>
 800a16c:	1c43      	adds	r3, r0, #1
 800a16e:	d1f3      	bne.n	800a158 <__sfputs_r+0xa>
 800a170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a174 <_vfiprintf_r>:
 800a174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a178:	460c      	mov	r4, r1
 800a17a:	b09d      	sub	sp, #116	; 0x74
 800a17c:	4617      	mov	r7, r2
 800a17e:	461d      	mov	r5, r3
 800a180:	4606      	mov	r6, r0
 800a182:	b118      	cbz	r0, 800a18c <_vfiprintf_r+0x18>
 800a184:	6983      	ldr	r3, [r0, #24]
 800a186:	b90b      	cbnz	r3, 800a18c <_vfiprintf_r+0x18>
 800a188:	f7ff fb2a 	bl	80097e0 <__sinit>
 800a18c:	4b7c      	ldr	r3, [pc, #496]	; (800a380 <_vfiprintf_r+0x20c>)
 800a18e:	429c      	cmp	r4, r3
 800a190:	d158      	bne.n	800a244 <_vfiprintf_r+0xd0>
 800a192:	6874      	ldr	r4, [r6, #4]
 800a194:	89a3      	ldrh	r3, [r4, #12]
 800a196:	0718      	lsls	r0, r3, #28
 800a198:	d55e      	bpl.n	800a258 <_vfiprintf_r+0xe4>
 800a19a:	6923      	ldr	r3, [r4, #16]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d05b      	beq.n	800a258 <_vfiprintf_r+0xe4>
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a1a4:	2320      	movs	r3, #32
 800a1a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1aa:	2330      	movs	r3, #48	; 0x30
 800a1ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1b0:	9503      	str	r5, [sp, #12]
 800a1b2:	f04f 0b01 	mov.w	fp, #1
 800a1b6:	46b8      	mov	r8, r7
 800a1b8:	4645      	mov	r5, r8
 800a1ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a1be:	b10b      	cbz	r3, 800a1c4 <_vfiprintf_r+0x50>
 800a1c0:	2b25      	cmp	r3, #37	; 0x25
 800a1c2:	d154      	bne.n	800a26e <_vfiprintf_r+0xfa>
 800a1c4:	ebb8 0a07 	subs.w	sl, r8, r7
 800a1c8:	d00b      	beq.n	800a1e2 <_vfiprintf_r+0x6e>
 800a1ca:	4653      	mov	r3, sl
 800a1cc:	463a      	mov	r2, r7
 800a1ce:	4621      	mov	r1, r4
 800a1d0:	4630      	mov	r0, r6
 800a1d2:	f7ff ffbc 	bl	800a14e <__sfputs_r>
 800a1d6:	3001      	adds	r0, #1
 800a1d8:	f000 80c2 	beq.w	800a360 <_vfiprintf_r+0x1ec>
 800a1dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1de:	4453      	add	r3, sl
 800a1e0:	9309      	str	r3, [sp, #36]	; 0x24
 800a1e2:	f898 3000 	ldrb.w	r3, [r8]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	f000 80ba 	beq.w	800a360 <_vfiprintf_r+0x1ec>
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a1f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1f6:	9304      	str	r3, [sp, #16]
 800a1f8:	9307      	str	r3, [sp, #28]
 800a1fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1fe:	931a      	str	r3, [sp, #104]	; 0x68
 800a200:	46a8      	mov	r8, r5
 800a202:	2205      	movs	r2, #5
 800a204:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a208:	485e      	ldr	r0, [pc, #376]	; (800a384 <_vfiprintf_r+0x210>)
 800a20a:	f7f6 f809 	bl	8000220 <memchr>
 800a20e:	9b04      	ldr	r3, [sp, #16]
 800a210:	bb78      	cbnz	r0, 800a272 <_vfiprintf_r+0xfe>
 800a212:	06d9      	lsls	r1, r3, #27
 800a214:	bf44      	itt	mi
 800a216:	2220      	movmi	r2, #32
 800a218:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a21c:	071a      	lsls	r2, r3, #28
 800a21e:	bf44      	itt	mi
 800a220:	222b      	movmi	r2, #43	; 0x2b
 800a222:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a226:	782a      	ldrb	r2, [r5, #0]
 800a228:	2a2a      	cmp	r2, #42	; 0x2a
 800a22a:	d02a      	beq.n	800a282 <_vfiprintf_r+0x10e>
 800a22c:	9a07      	ldr	r2, [sp, #28]
 800a22e:	46a8      	mov	r8, r5
 800a230:	2000      	movs	r0, #0
 800a232:	250a      	movs	r5, #10
 800a234:	4641      	mov	r1, r8
 800a236:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a23a:	3b30      	subs	r3, #48	; 0x30
 800a23c:	2b09      	cmp	r3, #9
 800a23e:	d969      	bls.n	800a314 <_vfiprintf_r+0x1a0>
 800a240:	b360      	cbz	r0, 800a29c <_vfiprintf_r+0x128>
 800a242:	e024      	b.n	800a28e <_vfiprintf_r+0x11a>
 800a244:	4b50      	ldr	r3, [pc, #320]	; (800a388 <_vfiprintf_r+0x214>)
 800a246:	429c      	cmp	r4, r3
 800a248:	d101      	bne.n	800a24e <_vfiprintf_r+0xda>
 800a24a:	68b4      	ldr	r4, [r6, #8]
 800a24c:	e7a2      	b.n	800a194 <_vfiprintf_r+0x20>
 800a24e:	4b4f      	ldr	r3, [pc, #316]	; (800a38c <_vfiprintf_r+0x218>)
 800a250:	429c      	cmp	r4, r3
 800a252:	bf08      	it	eq
 800a254:	68f4      	ldreq	r4, [r6, #12]
 800a256:	e79d      	b.n	800a194 <_vfiprintf_r+0x20>
 800a258:	4621      	mov	r1, r4
 800a25a:	4630      	mov	r0, r6
 800a25c:	f7fe fb1c 	bl	8008898 <__swsetup_r>
 800a260:	2800      	cmp	r0, #0
 800a262:	d09d      	beq.n	800a1a0 <_vfiprintf_r+0x2c>
 800a264:	f04f 30ff 	mov.w	r0, #4294967295
 800a268:	b01d      	add	sp, #116	; 0x74
 800a26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a26e:	46a8      	mov	r8, r5
 800a270:	e7a2      	b.n	800a1b8 <_vfiprintf_r+0x44>
 800a272:	4a44      	ldr	r2, [pc, #272]	; (800a384 <_vfiprintf_r+0x210>)
 800a274:	1a80      	subs	r0, r0, r2
 800a276:	fa0b f000 	lsl.w	r0, fp, r0
 800a27a:	4318      	orrs	r0, r3
 800a27c:	9004      	str	r0, [sp, #16]
 800a27e:	4645      	mov	r5, r8
 800a280:	e7be      	b.n	800a200 <_vfiprintf_r+0x8c>
 800a282:	9a03      	ldr	r2, [sp, #12]
 800a284:	1d11      	adds	r1, r2, #4
 800a286:	6812      	ldr	r2, [r2, #0]
 800a288:	9103      	str	r1, [sp, #12]
 800a28a:	2a00      	cmp	r2, #0
 800a28c:	db01      	blt.n	800a292 <_vfiprintf_r+0x11e>
 800a28e:	9207      	str	r2, [sp, #28]
 800a290:	e004      	b.n	800a29c <_vfiprintf_r+0x128>
 800a292:	4252      	negs	r2, r2
 800a294:	f043 0302 	orr.w	r3, r3, #2
 800a298:	9207      	str	r2, [sp, #28]
 800a29a:	9304      	str	r3, [sp, #16]
 800a29c:	f898 3000 	ldrb.w	r3, [r8]
 800a2a0:	2b2e      	cmp	r3, #46	; 0x2e
 800a2a2:	d10e      	bne.n	800a2c2 <_vfiprintf_r+0x14e>
 800a2a4:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a2a8:	2b2a      	cmp	r3, #42	; 0x2a
 800a2aa:	d138      	bne.n	800a31e <_vfiprintf_r+0x1aa>
 800a2ac:	9b03      	ldr	r3, [sp, #12]
 800a2ae:	1d1a      	adds	r2, r3, #4
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	9203      	str	r2, [sp, #12]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	bfb8      	it	lt
 800a2b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2bc:	f108 0802 	add.w	r8, r8, #2
 800a2c0:	9305      	str	r3, [sp, #20]
 800a2c2:	4d33      	ldr	r5, [pc, #204]	; (800a390 <_vfiprintf_r+0x21c>)
 800a2c4:	f898 1000 	ldrb.w	r1, [r8]
 800a2c8:	2203      	movs	r2, #3
 800a2ca:	4628      	mov	r0, r5
 800a2cc:	f7f5 ffa8 	bl	8000220 <memchr>
 800a2d0:	b140      	cbz	r0, 800a2e4 <_vfiprintf_r+0x170>
 800a2d2:	2340      	movs	r3, #64	; 0x40
 800a2d4:	1b40      	subs	r0, r0, r5
 800a2d6:	fa03 f000 	lsl.w	r0, r3, r0
 800a2da:	9b04      	ldr	r3, [sp, #16]
 800a2dc:	4303      	orrs	r3, r0
 800a2de:	f108 0801 	add.w	r8, r8, #1
 800a2e2:	9304      	str	r3, [sp, #16]
 800a2e4:	f898 1000 	ldrb.w	r1, [r8]
 800a2e8:	482a      	ldr	r0, [pc, #168]	; (800a394 <_vfiprintf_r+0x220>)
 800a2ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2ee:	2206      	movs	r2, #6
 800a2f0:	f108 0701 	add.w	r7, r8, #1
 800a2f4:	f7f5 ff94 	bl	8000220 <memchr>
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	d037      	beq.n	800a36c <_vfiprintf_r+0x1f8>
 800a2fc:	4b26      	ldr	r3, [pc, #152]	; (800a398 <_vfiprintf_r+0x224>)
 800a2fe:	bb1b      	cbnz	r3, 800a348 <_vfiprintf_r+0x1d4>
 800a300:	9b03      	ldr	r3, [sp, #12]
 800a302:	3307      	adds	r3, #7
 800a304:	f023 0307 	bic.w	r3, r3, #7
 800a308:	3308      	adds	r3, #8
 800a30a:	9303      	str	r3, [sp, #12]
 800a30c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a30e:	444b      	add	r3, r9
 800a310:	9309      	str	r3, [sp, #36]	; 0x24
 800a312:	e750      	b.n	800a1b6 <_vfiprintf_r+0x42>
 800a314:	fb05 3202 	mla	r2, r5, r2, r3
 800a318:	2001      	movs	r0, #1
 800a31a:	4688      	mov	r8, r1
 800a31c:	e78a      	b.n	800a234 <_vfiprintf_r+0xc0>
 800a31e:	2300      	movs	r3, #0
 800a320:	f108 0801 	add.w	r8, r8, #1
 800a324:	9305      	str	r3, [sp, #20]
 800a326:	4619      	mov	r1, r3
 800a328:	250a      	movs	r5, #10
 800a32a:	4640      	mov	r0, r8
 800a32c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a330:	3a30      	subs	r2, #48	; 0x30
 800a332:	2a09      	cmp	r2, #9
 800a334:	d903      	bls.n	800a33e <_vfiprintf_r+0x1ca>
 800a336:	2b00      	cmp	r3, #0
 800a338:	d0c3      	beq.n	800a2c2 <_vfiprintf_r+0x14e>
 800a33a:	9105      	str	r1, [sp, #20]
 800a33c:	e7c1      	b.n	800a2c2 <_vfiprintf_r+0x14e>
 800a33e:	fb05 2101 	mla	r1, r5, r1, r2
 800a342:	2301      	movs	r3, #1
 800a344:	4680      	mov	r8, r0
 800a346:	e7f0      	b.n	800a32a <_vfiprintf_r+0x1b6>
 800a348:	ab03      	add	r3, sp, #12
 800a34a:	9300      	str	r3, [sp, #0]
 800a34c:	4622      	mov	r2, r4
 800a34e:	4b13      	ldr	r3, [pc, #76]	; (800a39c <_vfiprintf_r+0x228>)
 800a350:	a904      	add	r1, sp, #16
 800a352:	4630      	mov	r0, r6
 800a354:	f7fd fd20 	bl	8007d98 <_printf_float>
 800a358:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a35c:	4681      	mov	r9, r0
 800a35e:	d1d5      	bne.n	800a30c <_vfiprintf_r+0x198>
 800a360:	89a3      	ldrh	r3, [r4, #12]
 800a362:	065b      	lsls	r3, r3, #25
 800a364:	f53f af7e 	bmi.w	800a264 <_vfiprintf_r+0xf0>
 800a368:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a36a:	e77d      	b.n	800a268 <_vfiprintf_r+0xf4>
 800a36c:	ab03      	add	r3, sp, #12
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	4622      	mov	r2, r4
 800a372:	4b0a      	ldr	r3, [pc, #40]	; (800a39c <_vfiprintf_r+0x228>)
 800a374:	a904      	add	r1, sp, #16
 800a376:	4630      	mov	r0, r6
 800a378:	f7fd ffc4 	bl	8008304 <_printf_i>
 800a37c:	e7ec      	b.n	800a358 <_vfiprintf_r+0x1e4>
 800a37e:	bf00      	nop
 800a380:	0800a660 	.word	0x0800a660
 800a384:	0800a79c 	.word	0x0800a79c
 800a388:	0800a680 	.word	0x0800a680
 800a38c:	0800a640 	.word	0x0800a640
 800a390:	0800a7a2 	.word	0x0800a7a2
 800a394:	0800a7a6 	.word	0x0800a7a6
 800a398:	08007d99 	.word	0x08007d99
 800a39c:	0800a14f 	.word	0x0800a14f

0800a3a0 <_sbrk_r>:
 800a3a0:	b538      	push	{r3, r4, r5, lr}
 800a3a2:	4c06      	ldr	r4, [pc, #24]	; (800a3bc <_sbrk_r+0x1c>)
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	4605      	mov	r5, r0
 800a3a8:	4608      	mov	r0, r1
 800a3aa:	6023      	str	r3, [r4, #0]
 800a3ac:	f7f8 fe3a 	bl	8003024 <_sbrk>
 800a3b0:	1c43      	adds	r3, r0, #1
 800a3b2:	d102      	bne.n	800a3ba <_sbrk_r+0x1a>
 800a3b4:	6823      	ldr	r3, [r4, #0]
 800a3b6:	b103      	cbz	r3, 800a3ba <_sbrk_r+0x1a>
 800a3b8:	602b      	str	r3, [r5, #0]
 800a3ba:	bd38      	pop	{r3, r4, r5, pc}
 800a3bc:	200007e4 	.word	0x200007e4

0800a3c0 <__sread>:
 800a3c0:	b510      	push	{r4, lr}
 800a3c2:	460c      	mov	r4, r1
 800a3c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3c8:	f000 f8a8 	bl	800a51c <_read_r>
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	bfab      	itete	ge
 800a3d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a3d2:	89a3      	ldrhlt	r3, [r4, #12]
 800a3d4:	181b      	addge	r3, r3, r0
 800a3d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3da:	bfac      	ite	ge
 800a3dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a3de:	81a3      	strhlt	r3, [r4, #12]
 800a3e0:	bd10      	pop	{r4, pc}

0800a3e2 <__swrite>:
 800a3e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3e6:	461f      	mov	r7, r3
 800a3e8:	898b      	ldrh	r3, [r1, #12]
 800a3ea:	05db      	lsls	r3, r3, #23
 800a3ec:	4605      	mov	r5, r0
 800a3ee:	460c      	mov	r4, r1
 800a3f0:	4616      	mov	r6, r2
 800a3f2:	d505      	bpl.n	800a400 <__swrite+0x1e>
 800a3f4:	2302      	movs	r3, #2
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3fc:	f000 f868 	bl	800a4d0 <_lseek_r>
 800a400:	89a3      	ldrh	r3, [r4, #12]
 800a402:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a406:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a40a:	81a3      	strh	r3, [r4, #12]
 800a40c:	4632      	mov	r2, r6
 800a40e:	463b      	mov	r3, r7
 800a410:	4628      	mov	r0, r5
 800a412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a416:	f000 b817 	b.w	800a448 <_write_r>

0800a41a <__sseek>:
 800a41a:	b510      	push	{r4, lr}
 800a41c:	460c      	mov	r4, r1
 800a41e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a422:	f000 f855 	bl	800a4d0 <_lseek_r>
 800a426:	1c43      	adds	r3, r0, #1
 800a428:	89a3      	ldrh	r3, [r4, #12]
 800a42a:	bf15      	itete	ne
 800a42c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a42e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a432:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a436:	81a3      	strheq	r3, [r4, #12]
 800a438:	bf18      	it	ne
 800a43a:	81a3      	strhne	r3, [r4, #12]
 800a43c:	bd10      	pop	{r4, pc}

0800a43e <__sclose>:
 800a43e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a442:	f000 b813 	b.w	800a46c <_close_r>
	...

0800a448 <_write_r>:
 800a448:	b538      	push	{r3, r4, r5, lr}
 800a44a:	4c07      	ldr	r4, [pc, #28]	; (800a468 <_write_r+0x20>)
 800a44c:	4605      	mov	r5, r0
 800a44e:	4608      	mov	r0, r1
 800a450:	4611      	mov	r1, r2
 800a452:	2200      	movs	r2, #0
 800a454:	6022      	str	r2, [r4, #0]
 800a456:	461a      	mov	r2, r3
 800a458:	f7f8 fd93 	bl	8002f82 <_write>
 800a45c:	1c43      	adds	r3, r0, #1
 800a45e:	d102      	bne.n	800a466 <_write_r+0x1e>
 800a460:	6823      	ldr	r3, [r4, #0]
 800a462:	b103      	cbz	r3, 800a466 <_write_r+0x1e>
 800a464:	602b      	str	r3, [r5, #0]
 800a466:	bd38      	pop	{r3, r4, r5, pc}
 800a468:	200007e4 	.word	0x200007e4

0800a46c <_close_r>:
 800a46c:	b538      	push	{r3, r4, r5, lr}
 800a46e:	4c06      	ldr	r4, [pc, #24]	; (800a488 <_close_r+0x1c>)
 800a470:	2300      	movs	r3, #0
 800a472:	4605      	mov	r5, r0
 800a474:	4608      	mov	r0, r1
 800a476:	6023      	str	r3, [r4, #0]
 800a478:	f7f8 fd9f 	bl	8002fba <_close>
 800a47c:	1c43      	adds	r3, r0, #1
 800a47e:	d102      	bne.n	800a486 <_close_r+0x1a>
 800a480:	6823      	ldr	r3, [r4, #0]
 800a482:	b103      	cbz	r3, 800a486 <_close_r+0x1a>
 800a484:	602b      	str	r3, [r5, #0]
 800a486:	bd38      	pop	{r3, r4, r5, pc}
 800a488:	200007e4 	.word	0x200007e4

0800a48c <_fstat_r>:
 800a48c:	b538      	push	{r3, r4, r5, lr}
 800a48e:	4c07      	ldr	r4, [pc, #28]	; (800a4ac <_fstat_r+0x20>)
 800a490:	2300      	movs	r3, #0
 800a492:	4605      	mov	r5, r0
 800a494:	4608      	mov	r0, r1
 800a496:	4611      	mov	r1, r2
 800a498:	6023      	str	r3, [r4, #0]
 800a49a:	f7f8 fd9a 	bl	8002fd2 <_fstat>
 800a49e:	1c43      	adds	r3, r0, #1
 800a4a0:	d102      	bne.n	800a4a8 <_fstat_r+0x1c>
 800a4a2:	6823      	ldr	r3, [r4, #0]
 800a4a4:	b103      	cbz	r3, 800a4a8 <_fstat_r+0x1c>
 800a4a6:	602b      	str	r3, [r5, #0]
 800a4a8:	bd38      	pop	{r3, r4, r5, pc}
 800a4aa:	bf00      	nop
 800a4ac:	200007e4 	.word	0x200007e4

0800a4b0 <_isatty_r>:
 800a4b0:	b538      	push	{r3, r4, r5, lr}
 800a4b2:	4c06      	ldr	r4, [pc, #24]	; (800a4cc <_isatty_r+0x1c>)
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	4605      	mov	r5, r0
 800a4b8:	4608      	mov	r0, r1
 800a4ba:	6023      	str	r3, [r4, #0]
 800a4bc:	f7f8 fd99 	bl	8002ff2 <_isatty>
 800a4c0:	1c43      	adds	r3, r0, #1
 800a4c2:	d102      	bne.n	800a4ca <_isatty_r+0x1a>
 800a4c4:	6823      	ldr	r3, [r4, #0]
 800a4c6:	b103      	cbz	r3, 800a4ca <_isatty_r+0x1a>
 800a4c8:	602b      	str	r3, [r5, #0]
 800a4ca:	bd38      	pop	{r3, r4, r5, pc}
 800a4cc:	200007e4 	.word	0x200007e4

0800a4d0 <_lseek_r>:
 800a4d0:	b538      	push	{r3, r4, r5, lr}
 800a4d2:	4c07      	ldr	r4, [pc, #28]	; (800a4f0 <_lseek_r+0x20>)
 800a4d4:	4605      	mov	r5, r0
 800a4d6:	4608      	mov	r0, r1
 800a4d8:	4611      	mov	r1, r2
 800a4da:	2200      	movs	r2, #0
 800a4dc:	6022      	str	r2, [r4, #0]
 800a4de:	461a      	mov	r2, r3
 800a4e0:	f7f8 fd92 	bl	8003008 <_lseek>
 800a4e4:	1c43      	adds	r3, r0, #1
 800a4e6:	d102      	bne.n	800a4ee <_lseek_r+0x1e>
 800a4e8:	6823      	ldr	r3, [r4, #0]
 800a4ea:	b103      	cbz	r3, 800a4ee <_lseek_r+0x1e>
 800a4ec:	602b      	str	r3, [r5, #0]
 800a4ee:	bd38      	pop	{r3, r4, r5, pc}
 800a4f0:	200007e4 	.word	0x200007e4

0800a4f4 <__ascii_mbtowc>:
 800a4f4:	b082      	sub	sp, #8
 800a4f6:	b901      	cbnz	r1, 800a4fa <__ascii_mbtowc+0x6>
 800a4f8:	a901      	add	r1, sp, #4
 800a4fa:	b142      	cbz	r2, 800a50e <__ascii_mbtowc+0x1a>
 800a4fc:	b14b      	cbz	r3, 800a512 <__ascii_mbtowc+0x1e>
 800a4fe:	7813      	ldrb	r3, [r2, #0]
 800a500:	600b      	str	r3, [r1, #0]
 800a502:	7812      	ldrb	r2, [r2, #0]
 800a504:	1c10      	adds	r0, r2, #0
 800a506:	bf18      	it	ne
 800a508:	2001      	movne	r0, #1
 800a50a:	b002      	add	sp, #8
 800a50c:	4770      	bx	lr
 800a50e:	4610      	mov	r0, r2
 800a510:	e7fb      	b.n	800a50a <__ascii_mbtowc+0x16>
 800a512:	f06f 0001 	mvn.w	r0, #1
 800a516:	e7f8      	b.n	800a50a <__ascii_mbtowc+0x16>

0800a518 <__malloc_lock>:
 800a518:	4770      	bx	lr

0800a51a <__malloc_unlock>:
 800a51a:	4770      	bx	lr

0800a51c <_read_r>:
 800a51c:	b538      	push	{r3, r4, r5, lr}
 800a51e:	4c07      	ldr	r4, [pc, #28]	; (800a53c <_read_r+0x20>)
 800a520:	4605      	mov	r5, r0
 800a522:	4608      	mov	r0, r1
 800a524:	4611      	mov	r1, r2
 800a526:	2200      	movs	r2, #0
 800a528:	6022      	str	r2, [r4, #0]
 800a52a:	461a      	mov	r2, r3
 800a52c:	f7f8 fd0c 	bl	8002f48 <_read>
 800a530:	1c43      	adds	r3, r0, #1
 800a532:	d102      	bne.n	800a53a <_read_r+0x1e>
 800a534:	6823      	ldr	r3, [r4, #0]
 800a536:	b103      	cbz	r3, 800a53a <_read_r+0x1e>
 800a538:	602b      	str	r3, [r5, #0]
 800a53a:	bd38      	pop	{r3, r4, r5, pc}
 800a53c:	200007e4 	.word	0x200007e4

0800a540 <__ascii_wctomb>:
 800a540:	b149      	cbz	r1, 800a556 <__ascii_wctomb+0x16>
 800a542:	2aff      	cmp	r2, #255	; 0xff
 800a544:	bf85      	ittet	hi
 800a546:	238a      	movhi	r3, #138	; 0x8a
 800a548:	6003      	strhi	r3, [r0, #0]
 800a54a:	700a      	strbls	r2, [r1, #0]
 800a54c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a550:	bf98      	it	ls
 800a552:	2001      	movls	r0, #1
 800a554:	4770      	bx	lr
 800a556:	4608      	mov	r0, r1
 800a558:	4770      	bx	lr
	...

0800a55c <_init>:
 800a55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a55e:	bf00      	nop
 800a560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a562:	bc08      	pop	{r3}
 800a564:	469e      	mov	lr, r3
 800a566:	4770      	bx	lr

0800a568 <_fini>:
 800a568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a56a:	bf00      	nop
 800a56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a56e:	bc08      	pop	{r3}
 800a570:	469e      	mov	lr, r3
 800a572:	4770      	bx	lr
