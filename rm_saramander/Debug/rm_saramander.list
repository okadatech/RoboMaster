
rm_saramander.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cdc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  08006e90  08006e90  00016e90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080071d8  080071d8  000171d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080071e0  080071e0  000171e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080071e4  080071e4  000171e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  080071e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
  8 .bss          00000500  200001dc  200001dc  000201dc  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  200006dc  200006dc  000201dc  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001f89c  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000039f8  00000000  00000000  0003faa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000a5dd  00000000  00000000  000434a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001068  00000000  00000000  0004da80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa0  00000000  00000000  0004eae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000265d3  00000000  00000000  0004fa88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fc92  00000000  00000000  0007605b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d6761  00000000  00000000  00085ced  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015c44e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039dc  00000000  00000000  0015c4cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006e74 	.word	0x08006e74

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	08006e74 	.word	0x08006e74

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b972 	b.w	8000f64 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	4688      	mov	r8, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14b      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4615      	mov	r5, r2
 8000caa:	d967      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0720 	rsb	r7, r2, #32
 8000cb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cba:	fa20 f707 	lsr.w	r7, r0, r7
 8000cbe:	4095      	lsls	r5, r2
 8000cc0:	ea47 0803 	orr.w	r8, r7, r3
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cd0:	fa1f fc85 	uxth.w	ip, r5
 8000cd4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cd8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cdc:	fb07 f10c 	mul.w	r1, r7, ip
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18eb      	adds	r3, r5, r3
 8000ce6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cea:	f080 811b 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8118 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000cf4:	3f02      	subs	r7, #2
 8000cf6:	442b      	add	r3, r5
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0c:	45a4      	cmp	ip, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	192c      	adds	r4, r5, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 8107 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000d1a:	45a4      	cmp	ip, r4
 8000d1c:	f240 8104 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000d20:	3802      	subs	r0, #2
 8000d22:	442c      	add	r4, r5
 8000d24:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d28:	eba4 040c 	sub.w	r4, r4, ip
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	b11e      	cbz	r6, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c6 4300 	strd	r4, r3, [r6]
 8000d38:	4639      	mov	r1, r7
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0xbe>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80eb 	beq.w	8000f1e <__udivmoddi4+0x286>
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d4e:	4638      	mov	r0, r7
 8000d50:	4639      	mov	r1, r7
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f783 	clz	r7, r3
 8000d5a:	2f00      	cmp	r7, #0
 8000d5c:	d147      	bne.n	8000dee <__udivmoddi4+0x156>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0xd0>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80fa 	bhi.w	8000f5c <__udivmoddi4+0x2c4>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	4698      	mov	r8, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d0e0      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000d76:	e9c6 4800 	strd	r4, r8, [r6]
 8000d7a:	e7dd      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000d7c:	b902      	cbnz	r2, 8000d80 <__udivmoddi4+0xe8>
 8000d7e:	deff      	udf	#255	; 0xff
 8000d80:	fab2 f282 	clz	r2, r2
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f040 808f 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d8a:	1b49      	subs	r1, r1, r5
 8000d8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d90:	fa1f f885 	uxth.w	r8, r5
 8000d94:	2701      	movs	r7, #1
 8000d96:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d9a:	0c23      	lsrs	r3, r4, #16
 8000d9c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb08 f10c 	mul.w	r1, r8, ip
 8000da8:	4299      	cmp	r1, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000dac:	18eb      	adds	r3, r5, r3
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4299      	cmp	r1, r3
 8000db6:	f200 80cd 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1a59      	subs	r1, r3, r1
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dc8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x14c>
 8000dd4:	192c      	adds	r4, r5, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x14a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80b6 	bhi.w	8000f4e <__udivmoddi4+0x2b6>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e79f      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dee:	f1c7 0c20 	rsb	ip, r7, #32
 8000df2:	40bb      	lsls	r3, r7
 8000df4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000df8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dfc:	fa01 f407 	lsl.w	r4, r1, r7
 8000e00:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e04:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e08:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e0c:	4325      	orrs	r5, r4
 8000e0e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e12:	0c2c      	lsrs	r4, r5, #16
 8000e14:	fb08 3319 	mls	r3, r8, r9, r3
 8000e18:	fa1f fa8e 	uxth.w	sl, lr
 8000e1c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e20:	fb09 f40a 	mul.w	r4, r9, sl
 8000e24:	429c      	cmp	r4, r3
 8000e26:	fa02 f207 	lsl.w	r2, r2, r7
 8000e2a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1e 0303 	adds.w	r3, lr, r3
 8000e34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e38:	f080 8087 	bcs.w	8000f4a <__udivmoddi4+0x2b2>
 8000e3c:	429c      	cmp	r4, r3
 8000e3e:	f240 8084 	bls.w	8000f4a <__udivmoddi4+0x2b2>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4473      	add	r3, lr
 8000e48:	1b1b      	subs	r3, r3, r4
 8000e4a:	b2ad      	uxth	r5, r5
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3310 	mls	r3, r8, r0, r3
 8000e54:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e58:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e5c:	45a2      	cmp	sl, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1e 0404 	adds.w	r4, lr, r4
 8000e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e68:	d26b      	bcs.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6a:	45a2      	cmp	sl, r4
 8000e6c:	d969      	bls.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4474      	add	r4, lr
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7a:	eba4 040a 	sub.w	r4, r4, sl
 8000e7e:	454c      	cmp	r4, r9
 8000e80:	46c2      	mov	sl, r8
 8000e82:	464b      	mov	r3, r9
 8000e84:	d354      	bcc.n	8000f30 <__udivmoddi4+0x298>
 8000e86:	d051      	beq.n	8000f2c <__udivmoddi4+0x294>
 8000e88:	2e00      	cmp	r6, #0
 8000e8a:	d069      	beq.n	8000f60 <__udivmoddi4+0x2c8>
 8000e8c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e90:	eb64 0403 	sbc.w	r4, r4, r3
 8000e94:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e98:	40fd      	lsrs	r5, r7
 8000e9a:	40fc      	lsrs	r4, r7
 8000e9c:	ea4c 0505 	orr.w	r5, ip, r5
 8000ea0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ea4:	2700      	movs	r7, #0
 8000ea6:	e747      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f703 	lsr.w	r7, r0, r3
 8000eb0:	4095      	lsls	r5, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ebe:	4338      	orrs	r0, r7
 8000ec0:	0c01      	lsrs	r1, r0, #16
 8000ec2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ec6:	fa1f f885 	uxth.w	r8, r5
 8000eca:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb07 f308 	mul.w	r3, r7, r8
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	fa04 f402 	lsl.w	r4, r4, r2
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x256>
 8000ede:	1869      	adds	r1, r5, r1
 8000ee0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ee4:	d22f      	bcs.n	8000f46 <__udivmoddi4+0x2ae>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	d92d      	bls.n	8000f46 <__udivmoddi4+0x2ae>
 8000eea:	3f02      	subs	r7, #2
 8000eec:	4429      	add	r1, r5
 8000eee:	1acb      	subs	r3, r1, r3
 8000ef0:	b281      	uxth	r1, r0
 8000ef2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000efe:	fb00 f308 	mul.w	r3, r0, r8
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x27e>
 8000f06:	1869      	adds	r1, r5, r1
 8000f08:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0c:	d217      	bcs.n	8000f3e <__udivmoddi4+0x2a6>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d915      	bls.n	8000f3e <__udivmoddi4+0x2a6>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4429      	add	r1, r5
 8000f16:	1ac9      	subs	r1, r1, r3
 8000f18:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f1c:	e73b      	b.n	8000d96 <__udivmoddi4+0xfe>
 8000f1e:	4637      	mov	r7, r6
 8000f20:	4630      	mov	r0, r6
 8000f22:	e709      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f24:	4607      	mov	r7, r0
 8000f26:	e6e7      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fb      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f2c:	4541      	cmp	r1, r8
 8000f2e:	d2ab      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f30:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f34:	eb69 020e 	sbc.w	r2, r9, lr
 8000f38:	3801      	subs	r0, #1
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	e7a4      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f3e:	4660      	mov	r0, ip
 8000f40:	e7e9      	b.n	8000f16 <__udivmoddi4+0x27e>
 8000f42:	4618      	mov	r0, r3
 8000f44:	e795      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f46:	4667      	mov	r7, ip
 8000f48:	e7d1      	b.n	8000eee <__udivmoddi4+0x256>
 8000f4a:	4681      	mov	r9, r0
 8000f4c:	e77c      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	442c      	add	r4, r5
 8000f52:	e747      	b.n	8000de4 <__udivmoddi4+0x14c>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	442b      	add	r3, r5
 8000f5a:	e72f      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f5c:	4638      	mov	r0, r7
 8000f5e:	e708      	b.n	8000d72 <__udivmoddi4+0xda>
 8000f60:	4637      	mov	r7, r6
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0xa0>

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b510      	push	{r4, lr}
 8000f6a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <HAL_InitTick+0x40>)
 8000f6e:	7818      	ldrb	r0, [r3, #0]
 8000f70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f74:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f78:	4a0c      	ldr	r2, [pc, #48]	; (8000fac <HAL_InitTick+0x44>)
 8000f7a:	6810      	ldr	r0, [r2, #0]
 8000f7c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f80:	f000 fc7c 	bl	800187c <HAL_SYSTICK_Config>
 8000f84:	b968      	cbnz	r0, 8000fa2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f86:	2c0f      	cmp	r4, #15
 8000f88:	d901      	bls.n	8000f8e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	e00a      	b.n	8000fa4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	4621      	mov	r1, r4
 8000f92:	f04f 30ff 	mov.w	r0, #4294967295
 8000f96:	f000 fc31 	bl	80017fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f9a:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <HAL_InitTick+0x40>)
 8000f9c:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	e000      	b.n	8000fa4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000fa2:	2001      	movs	r0, #1
}
 8000fa4:	bd10      	pop	{r4, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	20000008 	.word	0x20000008

08000fb0 <HAL_Init>:
{
 8000fb0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <HAL_Init+0x30>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fba:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fc2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fca:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f000 fc03 	bl	80017d8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f7ff ffc8 	bl	8000f68 <HAL_InitTick>
  HAL_MspInit();
 8000fd8:	f002 ff40 	bl	8003e5c <HAL_MspInit>
}
 8000fdc:	2000      	movs	r0, #0
 8000fde:	bd08      	pop	{r3, pc}
 8000fe0:	40023c00 	.word	0x40023c00

08000fe4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000fe4:	4a03      	ldr	r2, [pc, #12]	; (8000ff4 <HAL_IncTick+0x10>)
 8000fe6:	6811      	ldr	r1, [r2, #0]
 8000fe8:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <HAL_IncTick+0x14>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	440b      	add	r3, r1
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000210 	.word	0x20000210
 8000ff8:	20000000 	.word	0x20000000

08000ffc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ffc:	4b01      	ldr	r3, [pc, #4]	; (8001004 <HAL_GetTick+0x8>)
 8000ffe:	6818      	ldr	r0, [r3, #0]
}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000210 	.word	0x20000210

08001008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001008:	b538      	push	{r3, r4, r5, lr}
 800100a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800100c:	f7ff fff6 	bl	8000ffc <HAL_GetTick>
 8001010:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001012:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001016:	d002      	beq.n	800101e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <HAL_Delay+0x24>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800101e:	f7ff ffed 	bl	8000ffc <HAL_GetTick>
 8001022:	1b40      	subs	r0, r0, r5
 8001024:	42a0      	cmp	r0, r4
 8001026:	d3fa      	bcc.n	800101e <HAL_Delay+0x16>
  {
  }
}
 8001028:	bd38      	pop	{r3, r4, r5, pc}
 800102a:	bf00      	nop
 800102c:	20000000 	.word	0x20000000

08001030 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart = 0U;

  /* Check CAN handle */
  if (hcan == NULL)
 8001030:	2800      	cmp	r0, #0
 8001032:	f000 80a1 	beq.w	8001178 <HAL_CAN_Init+0x148>
{
 8001036:	b538      	push	{r3, r4, r5, lr}
 8001038:	4604      	mov	r4, r0
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 800103a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800103e:	b1d3      	cbz	r3, 8001076 <HAL_CAN_Init+0x46>
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001040:	6822      	ldr	r2, [r4, #0]
 8001042:	6813      	ldr	r3, [r2, #0]
 8001044:	f023 0302 	bic.w	r3, r3, #2
 8001048:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800104a:	f7ff ffd7 	bl	8000ffc <HAL_GetTick>
 800104e:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 8001050:	6823      	ldr	r3, [r4, #0]
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	f012 0f02 	tst.w	r2, #2
 8001058:	d010      	beq.n	800107c <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800105a:	f7ff ffcf 	bl	8000ffc <HAL_GetTick>
 800105e:	1b40      	subs	r0, r0, r5
 8001060:	280a      	cmp	r0, #10
 8001062:	d9f5      	bls.n	8001050 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001064:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800106a:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800106c:	2305      	movs	r3, #5
 800106e:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8001072:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8001074:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8001076:	f001 ff87 	bl	8002f88 <HAL_CAN_MspInit>
 800107a:	e7e1      	b.n	8001040 <HAL_CAN_Init+0x10>
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	f042 0201 	orr.w	r2, r2, #1
 8001082:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001084:	f7ff ffba 	bl	8000ffc <HAL_GetTick>
 8001088:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 800108a:	6823      	ldr	r3, [r4, #0]
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	f012 0f01 	tst.w	r2, #1
 8001092:	d10d      	bne.n	80010b0 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001094:	f7ff ffb2 	bl	8000ffc <HAL_GetTick>
 8001098:	1b40      	subs	r0, r0, r5
 800109a:	280a      	cmp	r0, #10
 800109c:	d9f5      	bls.n	800108a <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800109e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80010a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a4:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80010a6:	2305      	movs	r3, #5
 80010a8:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 80010ac:	2001      	movs	r0, #1
 80010ae:	e7e1      	b.n	8001074 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010b0:	7e22      	ldrb	r2, [r4, #24]
 80010b2:	2a01      	cmp	r2, #1
 80010b4:	d03d      	beq.n	8001132 <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010bc:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 80010be:	7e63      	ldrb	r3, [r4, #25]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d03b      	beq.n	800113c <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010c4:	6822      	ldr	r2, [r4, #0]
 80010c6:	6813      	ldr	r3, [r2, #0]
 80010c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80010cc:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010ce:	7ea3      	ldrb	r3, [r4, #26]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d039      	beq.n	8001148 <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010d4:	6822      	ldr	r2, [r4, #0]
 80010d6:	6813      	ldr	r3, [r2, #0]
 80010d8:	f023 0320 	bic.w	r3, r3, #32
 80010dc:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010de:	7ee3      	ldrb	r3, [r4, #27]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d037      	beq.n	8001154 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010e4:	6822      	ldr	r2, [r4, #0]
 80010e6:	6813      	ldr	r3, [r2, #0]
 80010e8:	f043 0310 	orr.w	r3, r3, #16
 80010ec:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010ee:	7f23      	ldrb	r3, [r4, #28]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d035      	beq.n	8001160 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010f4:	6822      	ldr	r2, [r4, #0]
 80010f6:	6813      	ldr	r3, [r2, #0]
 80010f8:	f023 0308 	bic.w	r3, r3, #8
 80010fc:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80010fe:	7f63      	ldrb	r3, [r4, #29]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d033      	beq.n	800116c <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001104:	6822      	ldr	r2, [r4, #0]
 8001106:	6813      	ldr	r3, [r2, #0]
 8001108:	f023 0304 	bic.w	r3, r3, #4
 800110c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800110e:	68a3      	ldr	r3, [r4, #8]
 8001110:	68e2      	ldr	r2, [r4, #12]
 8001112:	4313      	orrs	r3, r2
 8001114:	6922      	ldr	r2, [r4, #16]
 8001116:	4313      	orrs	r3, r2
 8001118:	6962      	ldr	r2, [r4, #20]
 800111a:	4313      	orrs	r3, r2
 800111c:	6862      	ldr	r2, [r4, #4]
 800111e:	3a01      	subs	r2, #1
 8001120:	6821      	ldr	r1, [r4, #0]
 8001122:	4313      	orrs	r3, r2
 8001124:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001126:	2000      	movs	r0, #0
 8001128:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800112a:	2301      	movs	r3, #1
 800112c:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8001130:	e7a0      	b.n	8001074 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	e7c0      	b.n	80010be <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800113c:	6822      	ldr	r2, [r4, #0]
 800113e:	6813      	ldr	r3, [r2, #0]
 8001140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	e7c2      	b.n	80010ce <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001148:	6822      	ldr	r2, [r4, #0]
 800114a:	6813      	ldr	r3, [r2, #0]
 800114c:	f043 0320 	orr.w	r3, r3, #32
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	e7c4      	b.n	80010de <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001154:	6822      	ldr	r2, [r4, #0]
 8001156:	6813      	ldr	r3, [r2, #0]
 8001158:	f023 0310 	bic.w	r3, r3, #16
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	e7c6      	b.n	80010ee <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001160:	6822      	ldr	r2, [r4, #0]
 8001162:	6813      	ldr	r3, [r2, #0]
 8001164:	f043 0308 	orr.w	r3, r3, #8
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	e7c8      	b.n	80010fe <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800116c:	6822      	ldr	r2, [r4, #0]
 800116e:	6813      	ldr	r3, [r2, #0]
 8001170:	f043 0304 	orr.w	r3, r3, #4
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	e7ca      	b.n	800110e <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 8001178:	2001      	movs	r0, #1
}
 800117a:	4770      	bx	lr

0800117c <HAL_CAN_ConfigFilter>:
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos = 0U;
  CAN_TypeDef *can_ip = hcan->Instance;

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800117c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b01      	cmp	r3, #1
 8001184:	d00a      	beq.n	800119c <HAL_CAN_ConfigFilter+0x20>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8001186:	f890 3020 	ldrb.w	r3, [r0, #32]
 800118a:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800118c:	2b02      	cmp	r3, #2
 800118e:	d005      	beq.n	800119c <HAL_CAN_ConfigFilter+0x20>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001190:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001192:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001196:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001198:	2001      	movs	r0, #1
  }
}
 800119a:	4770      	bx	lr
{
 800119c:	b470      	push	{r4, r5, r6}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800119e:	4b42      	ldr	r3, [pc, #264]	; (80012a8 <HAL_CAN_ConfigFilter+0x12c>)
 80011a0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80011a4:	f042 0201 	orr.w	r2, r2, #1
 80011a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80011ac:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80011b0:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80011b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80011b8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80011bc:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80011be:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80011c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (1U) << sFilterConfig->FilterBank;
 80011c6:	694a      	ldr	r2, [r1, #20]
 80011c8:	2001      	movs	r0, #1
 80011ca:	fa00 f202 	lsl.w	r2, r0, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80011ce:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
 80011d2:	43d0      	mvns	r0, r2
 80011d4:	4004      	ands	r4, r0
 80011d6:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80011da:	69cb      	ldr	r3, [r1, #28]
 80011dc:	b9b3      	cbnz	r3, 800120c <HAL_CAN_ConfigFilter+0x90>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80011de:	4b32      	ldr	r3, [pc, #200]	; (80012a8 <HAL_CAN_ConfigFilter+0x12c>)
 80011e0:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
 80011e4:	4004      	ands	r4, r0
 80011e6:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011ea:	68ce      	ldr	r6, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011ec:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011ee:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011f0:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011f4:	3448      	adds	r4, #72	; 0x48
 80011f6:	f843 5034 	str.w	r5, [r3, r4, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011fa:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80011fc:	880c      	ldrh	r4, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011fe:	694d      	ldr	r5, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001200:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001204:	3548      	adds	r5, #72	; 0x48
 8001206:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800120a:	605c      	str	r4, [r3, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800120c:	69cb      	ldr	r3, [r1, #28]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d01d      	beq.n	800124e <HAL_CAN_ConfigFilter+0xd2>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001212:	698b      	ldr	r3, [r1, #24]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d132      	bne.n	800127e <HAL_CAN_ConfigFilter+0x102>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001218:	4c23      	ldr	r4, [pc, #140]	; (80012a8 <HAL_CAN_ConfigFilter+0x12c>)
 800121a:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 800121e:	4003      	ands	r3, r0
 8001220:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001224:	690b      	ldr	r3, [r1, #16]
 8001226:	bb8b      	cbnz	r3, 800128c <HAL_CAN_ConfigFilter+0x110>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001228:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <HAL_CAN_ConfigFilter+0x12c>)
 800122a:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
 800122e:	4020      	ands	r0, r4
 8001230:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == ENABLE)
 8001234:	6a0b      	ldr	r3, [r1, #32]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d02f      	beq.n	800129a <HAL_CAN_ConfigFilter+0x11e>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800123a:	4a1b      	ldr	r2, [pc, #108]	; (80012a8 <HAL_CAN_ConfigFilter+0x12c>)
 800123c:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8001240:	f023 0301 	bic.w	r3, r3, #1
 8001244:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    return HAL_OK;
 8001248:	2000      	movs	r0, #0
}
 800124a:	bc70      	pop	{r4, r5, r6}
 800124c:	4770      	bx	lr
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800124e:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <HAL_CAN_ConfigFilter+0x12c>)
 8001250:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
 8001254:	4314      	orrs	r4, r2
 8001256:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800125a:	680e      	ldr	r6, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800125c:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800125e:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001260:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001264:	3448      	adds	r4, #72	; 0x48
 8001266:	f843 5034 	str.w	r5, [r3, r4, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800126a:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800126c:	898c      	ldrh	r4, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800126e:	694d      	ldr	r5, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001270:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001274:	3548      	adds	r5, #72	; 0x48
 8001276:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800127a:	605c      	str	r4, [r3, #4]
 800127c:	e7c9      	b.n	8001212 <HAL_CAN_ConfigFilter+0x96>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800127e:	4c0a      	ldr	r4, [pc, #40]	; (80012a8 <HAL_CAN_ConfigFilter+0x12c>)
 8001280:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 8001284:	4313      	orrs	r3, r2
 8001286:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
 800128a:	e7cb      	b.n	8001224 <HAL_CAN_ConfigFilter+0xa8>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800128c:	4806      	ldr	r0, [pc, #24]	; (80012a8 <HAL_CAN_ConfigFilter+0x12c>)
 800128e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001292:	4313      	orrs	r3, r2
 8001294:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
 8001298:	e7cc      	b.n	8001234 <HAL_CAN_ConfigFilter+0xb8>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800129a:	4903      	ldr	r1, [pc, #12]	; (80012a8 <HAL_CAN_ConfigFilter+0x12c>)
 800129c:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
 80012a0:	431a      	orrs	r2, r3
 80012a2:	f8c1 221c 	str.w	r2, [r1, #540]	; 0x21c
 80012a6:	e7c8      	b.n	800123a <HAL_CAN_ConfigFilter+0xbe>
 80012a8:	40006400 	.word	0x40006400

080012ac <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80012ac:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  if (hcan->State == HAL_CAN_STATE_READY)
 80012ae:	f890 3020 	ldrb.w	r3, [r0, #32]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d005      	beq.n	80012c4 <HAL_CAN_Start+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80012b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80012ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012be:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80012c0:	2001      	movs	r0, #1
  }
}
 80012c2:	bd38      	pop	{r3, r4, r5, pc}
 80012c4:	4604      	mov	r4, r0
    hcan->State = HAL_CAN_STATE_LISTENING;
 80012c6:	2302      	movs	r3, #2
 80012c8:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012cc:	6802      	ldr	r2, [r0, #0]
 80012ce:	6813      	ldr	r3, [r2, #0]
 80012d0:	f023 0301 	bic.w	r3, r3, #1
 80012d4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80012d6:	f7ff fe91 	bl	8000ffc <HAL_GetTick>
 80012da:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != RESET)
 80012dc:	6823      	ldr	r3, [r4, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f013 0f01 	tst.w	r3, #1
 80012e4:	d00d      	beq.n	8001302 <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012e6:	f7ff fe89 	bl	8000ffc <HAL_GetTick>
 80012ea:	1b40      	subs	r0, r0, r5
 80012ec:	280a      	cmp	r0, #10
 80012ee:	d9f5      	bls.n	80012dc <HAL_CAN_Start+0x30>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f6:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80012f8:	2305      	movs	r3, #5
 80012fa:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 80012fe:	2001      	movs	r0, #1
 8001300:	e7df      	b.n	80012c2 <HAL_CAN_Start+0x16>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001302:	2000      	movs	r0, #0
 8001304:	6260      	str	r0, [r4, #36]	; 0x24
    return HAL_OK;
 8001306:	e7dc      	b.n	80012c2 <HAL_CAN_Start+0x16>

08001308 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001308:	b470      	push	{r4, r5, r6}
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800130a:	f890 4020 	ldrb.w	r4, [r0, #32]
 800130e:	b2e4      	uxtb	r4, r4
 8001310:	2c01      	cmp	r4, #1
 8001312:	d00a      	beq.n	800132a <HAL_CAN_AddTxMessage+0x22>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8001314:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001318:	b2e4      	uxtb	r4, r4
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800131a:	2c02      	cmp	r4, #2
 800131c:	d005      	beq.n	800132a <HAL_CAN_AddTxMessage+0x22>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800131e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001324:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001326:	2001      	movs	r0, #1
 8001328:	e04d      	b.n	80013c6 <HAL_CAN_AddTxMessage+0xbe>
    if (((hcan->Instance->TSR & CAN_TSR_TME0) != RESET) ||
 800132a:	6804      	ldr	r4, [r0, #0]
 800132c:	68a5      	ldr	r5, [r4, #8]
 800132e:	f015 6f80 	tst.w	r5, #67108864	; 0x4000000
 8001332:	d107      	bne.n	8001344 <HAL_CAN_AddTxMessage+0x3c>
        ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 8001334:	68a5      	ldr	r5, [r4, #8]
    if (((hcan->Instance->TSR & CAN_TSR_TME0) != RESET) ||
 8001336:	f015 6f00 	tst.w	r5, #134217728	; 0x8000000
 800133a:	d103      	bne.n	8001344 <HAL_CAN_AddTxMessage+0x3c>
        ((hcan->Instance->TSR & CAN_TSR_TME2) != RESET))
 800133c:	68a5      	ldr	r5, [r4, #8]
        ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 800133e:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8001342:	d055      	beq.n	80013f0 <HAL_CAN_AddTxMessage+0xe8>
      transmitmailbox = (hcan->Instance->TSR & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001344:	68a4      	ldr	r4, [r4, #8]
 8001346:	f3c4 6401 	ubfx	r4, r4, #24, #2
      *pTxMailbox = 1U << transmitmailbox;
 800134a:	2501      	movs	r5, #1
 800134c:	40a5      	lsls	r5, r4
 800134e:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8001350:	688b      	ldr	r3, [r1, #8]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d139      	bne.n	80013ca <HAL_CAN_AddTxMessage+0xc2>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001356:	680e      	ldr	r6, [r1, #0]
                                                           pHeader->RTR);
 8001358:	68cb      	ldr	r3, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800135a:	6805      	ldr	r5, [r0, #0]
 800135c:	ea43 5646 	orr.w	r6, r3, r6, lsl #21
 8001360:	f104 0318 	add.w	r3, r4, #24
 8001364:	011b      	lsls	r3, r3, #4
 8001366:	50ee      	str	r6, [r5, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001368:	6803      	ldr	r3, [r0, #0]
 800136a:	690d      	ldr	r5, [r1, #16]
 800136c:	f104 0618 	add.w	r6, r4, #24
 8001370:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8001374:	605d      	str	r5, [r3, #4]
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001376:	7d0b      	ldrb	r3, [r1, #20]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d031      	beq.n	80013e0 <HAL_CAN_AddTxMessage+0xd8>
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800137c:	79d1      	ldrb	r1, [r2, #7]
 800137e:	7993      	ldrb	r3, [r2, #6]
 8001380:	041b      	lsls	r3, r3, #16
 8001382:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001386:	7951      	ldrb	r1, [r2, #5]
 8001388:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800138c:	7915      	ldrb	r5, [r2, #4]
 800138e:	6801      	ldr	r1, [r0, #0]
 8001390:	432b      	orrs	r3, r5
 8001392:	0125      	lsls	r5, r4, #4
 8001394:	4429      	add	r1, r5
 8001396:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800139a:	78d1      	ldrb	r1, [r2, #3]
 800139c:	7893      	ldrb	r3, [r2, #2]
 800139e:	041b      	lsls	r3, r3, #16
 80013a0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80013a4:	7851      	ldrb	r1, [r2, #1]
 80013a6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80013aa:	7811      	ldrb	r1, [r2, #0]
 80013ac:	6802      	ldr	r2, [r0, #0]
 80013ae:	430b      	orrs	r3, r1
 80013b0:	442a      	add	r2, r5
 80013b2:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80013b6:	6802      	ldr	r2, [r0, #0]
 80013b8:	3418      	adds	r4, #24
 80013ba:	0124      	lsls	r4, r4, #4
 80013bc:	5913      	ldr	r3, [r2, r4]
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	5113      	str	r3, [r2, r4]
      return HAL_OK;
 80013c4:	2000      	movs	r0, #0
  }
}
 80013c6:	bc70      	pop	{r4, r5, r6}
 80013c8:	4770      	bx	lr
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013ca:	684d      	ldr	r5, [r1, #4]
 80013cc:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
                                                           pHeader->RTR);
 80013d0:	68cd      	ldr	r5, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013d2:	6806      	ldr	r6, [r0, #0]
                                                           pHeader->IDE |
 80013d4:	432b      	orrs	r3, r5
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013d6:	f104 0518 	add.w	r5, r4, #24
 80013da:	012d      	lsls	r5, r5, #4
 80013dc:	5173      	str	r3, [r6, r5]
 80013de:	e7c3      	b.n	8001368 <HAL_CAN_AddTxMessage+0x60>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80013e0:	6803      	ldr	r3, [r0, #0]
 80013e2:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 80013e6:	6859      	ldr	r1, [r3, #4]
 80013e8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80013ec:	6059      	str	r1, [r3, #4]
 80013ee:	e7c5      	b.n	800137c <HAL_CAN_AddTxMessage+0x74>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80013f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013f6:	6243      	str	r3, [r0, #36]	; 0x24
      return HAL_ERROR;
 80013f8:	2001      	movs	r0, #1
 80013fa:	e7e4      	b.n	80013c6 <HAL_CAN_AddTxMessage+0xbe>

080013fc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80013fc:	b430      	push	{r4, r5}
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80013fe:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001402:	b2e4      	uxtb	r4, r4
 8001404:	2c01      	cmp	r4, #1
 8001406:	d00b      	beq.n	8001420 <HAL_CAN_GetRxMessage+0x24>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8001408:	f890 4020 	ldrb.w	r4, [r0, #32]
 800140c:	b2e4      	uxtb	r4, r4
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800140e:	2c02      	cmp	r4, #2
 8001410:	d006      	beq.n	8001420 <HAL_CAN_GetRxMessage+0x24>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001412:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001414:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001418:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800141a:	2001      	movs	r0, #1
  }
}
 800141c:	bc30      	pop	{r4, r5}
 800141e:	4770      	bx	lr
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001420:	b951      	cbnz	r1, 8001438 <HAL_CAN_GetRxMessage+0x3c>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == RESET)
 8001422:	6804      	ldr	r4, [r0, #0]
 8001424:	68e4      	ldr	r4, [r4, #12]
 8001426:	f014 0f03 	tst.w	r4, #3
 800142a:	d107      	bne.n	800143c <HAL_CAN_GetRxMessage+0x40>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800142c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800142e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001432:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 8001434:	2001      	movs	r0, #1
 8001436:	e7f1      	b.n	800141c <HAL_CAN_GetRxMessage+0x20>
    else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
 8001438:	2901      	cmp	r1, #1
 800143a:	d05d      	beq.n	80014f8 <HAL_CAN_GetRxMessage+0xfc>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800143c:	6805      	ldr	r5, [r0, #0]
 800143e:	f101 041b 	add.w	r4, r1, #27
 8001442:	0124      	lsls	r4, r4, #4
 8001444:	592c      	ldr	r4, [r5, r4]
 8001446:	f004 0404 	and.w	r4, r4, #4
 800144a:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800144c:	2c00      	cmp	r4, #0
 800144e:	d15e      	bne.n	800150e <HAL_CAN_GetRxMessage+0x112>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001450:	6805      	ldr	r5, [r0, #0]
 8001452:	f101 041b 	add.w	r4, r1, #27
 8001456:	0124      	lsls	r4, r4, #4
 8001458:	592c      	ldr	r4, [r5, r4]
 800145a:	0d64      	lsrs	r4, r4, #21
 800145c:	6014      	str	r4, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 800145e:	6805      	ldr	r5, [r0, #0]
 8001460:	f101 041b 	add.w	r4, r1, #27
 8001464:	0124      	lsls	r4, r4, #4
 8001466:	592d      	ldr	r5, [r5, r4]
 8001468:	f3c5 0540 	ubfx	r5, r5, #1, #1
 800146c:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800146e:	6805      	ldr	r5, [r0, #0]
 8001470:	4425      	add	r5, r4
 8001472:	686d      	ldr	r5, [r5, #4]
 8001474:	f005 050f 	and.w	r5, r5, #15
 8001478:	6115      	str	r5, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800147a:	6805      	ldr	r5, [r0, #0]
 800147c:	4425      	add	r5, r4
 800147e:	686d      	ldr	r5, [r5, #4]
 8001480:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8001484:	6195      	str	r5, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001486:	6805      	ldr	r5, [r0, #0]
 8001488:	442c      	add	r4, r5
 800148a:	6864      	ldr	r4, [r4, #4]
 800148c:	0c24      	lsrs	r4, r4, #16
 800148e:	6154      	str	r4, [r2, #20]
    aData[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos;
 8001490:	6804      	ldr	r4, [r0, #0]
 8001492:	010a      	lsls	r2, r1, #4
 8001494:	4414      	add	r4, r2
 8001496:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 800149a:	701c      	strb	r4, [r3, #0]
    aData[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos;
 800149c:	6804      	ldr	r4, [r0, #0]
 800149e:	4414      	add	r4, r2
 80014a0:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 80014a4:	0a24      	lsrs	r4, r4, #8
 80014a6:	705c      	strb	r4, [r3, #1]
    aData[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos;
 80014a8:	6804      	ldr	r4, [r0, #0]
 80014aa:	4414      	add	r4, r2
 80014ac:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 80014b0:	0c24      	lsrs	r4, r4, #16
 80014b2:	709c      	strb	r4, [r3, #2]
    aData[3] = (CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos;
 80014b4:	6804      	ldr	r4, [r0, #0]
 80014b6:	4414      	add	r4, r2
 80014b8:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 80014bc:	0e24      	lsrs	r4, r4, #24
 80014be:	70dc      	strb	r4, [r3, #3]
    aData[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos;
 80014c0:	6804      	ldr	r4, [r0, #0]
 80014c2:	4414      	add	r4, r2
 80014c4:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 80014c8:	711c      	strb	r4, [r3, #4]
    aData[5] = (CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos;
 80014ca:	6804      	ldr	r4, [r0, #0]
 80014cc:	4414      	add	r4, r2
 80014ce:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 80014d2:	0a24      	lsrs	r4, r4, #8
 80014d4:	715c      	strb	r4, [r3, #5]
    aData[6] = (CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos;
 80014d6:	6804      	ldr	r4, [r0, #0]
 80014d8:	4414      	add	r4, r2
 80014da:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 80014de:	0c24      	lsrs	r4, r4, #16
 80014e0:	719c      	strb	r4, [r3, #6]
    aData[7] = (CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos;
 80014e2:	6804      	ldr	r4, [r0, #0]
 80014e4:	4422      	add	r2, r4
 80014e6:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80014ea:	0e12      	lsrs	r2, r2, #24
 80014ec:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014ee:	b1b1      	cbz	r1, 800151e <HAL_CAN_GetRxMessage+0x122>
    else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
 80014f0:	2901      	cmp	r1, #1
 80014f2:	d01b      	beq.n	800152c <HAL_CAN_GetRxMessage+0x130>
    return HAL_OK;
 80014f4:	2000      	movs	r0, #0
 80014f6:	e791      	b.n	800141c <HAL_CAN_GetRxMessage+0x20>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == RESET)
 80014f8:	6804      	ldr	r4, [r0, #0]
 80014fa:	6924      	ldr	r4, [r4, #16]
 80014fc:	f014 0f03 	tst.w	r4, #3
 8001500:	d19c      	bne.n	800143c <HAL_CAN_GetRxMessage+0x40>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001502:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001504:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001508:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 800150a:	2001      	movs	r0, #1
 800150c:	e786      	b.n	800141c <HAL_CAN_GetRxMessage+0x20>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800150e:	6805      	ldr	r5, [r0, #0]
 8001510:	f101 041b 	add.w	r4, r1, #27
 8001514:	0124      	lsls	r4, r4, #4
 8001516:	592c      	ldr	r4, [r5, r4]
 8001518:	08e4      	lsrs	r4, r4, #3
 800151a:	6054      	str	r4, [r2, #4]
 800151c:	e79f      	b.n	800145e <HAL_CAN_GetRxMessage+0x62>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800151e:	6802      	ldr	r2, [r0, #0]
 8001520:	68d3      	ldr	r3, [r2, #12]
 8001522:	f043 0320 	orr.w	r3, r3, #32
 8001526:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8001528:	2000      	movs	r0, #0
 800152a:	e777      	b.n	800141c <HAL_CAN_GetRxMessage+0x20>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800152c:	6802      	ldr	r2, [r0, #0]
 800152e:	6913      	ldr	r3, [r2, #16]
 8001530:	f043 0320 	orr.w	r3, r3, #32
 8001534:	6113      	str	r3, [r2, #16]
    return HAL_OK;
 8001536:	2000      	movs	r0, #0
 8001538:	e770      	b.n	800141c <HAL_CAN_GetRxMessage+0x20>

0800153a <HAL_CAN_ActivateNotification>:
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800153a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b01      	cmp	r3, #1
 8001542:	d00a      	beq.n	800155a <HAL_CAN_ActivateNotification+0x20>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8001544:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001548:	b2db      	uxtb	r3, r3
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800154a:	2b02      	cmp	r3, #2
 800154c:	d005      	beq.n	800155a <HAL_CAN_ActivateNotification+0x20>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800154e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001554:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001556:	2001      	movs	r0, #1
  }
}
 8001558:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800155a:	6802      	ldr	r2, [r0, #0]
 800155c:	6953      	ldr	r3, [r2, #20]
 800155e:	4319      	orrs	r1, r3
 8001560:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8001562:	2000      	movs	r0, #0
 8001564:	4770      	bx	lr

08001566 <HAL_CAN_TxMailbox0CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001566:	4770      	bx	lr

08001568 <HAL_CAN_TxMailbox1CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001568:	4770      	bx	lr

0800156a <HAL_CAN_TxMailbox2CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800156a:	4770      	bx	lr

0800156c <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800156c:	4770      	bx	lr

0800156e <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800156e:	4770      	bx	lr

08001570 <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001570:	4770      	bx	lr

08001572 <HAL_CAN_RxFifo0FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001572:	4770      	bx	lr

08001574 <HAL_CAN_RxFifo1MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001574:	4770      	bx	lr

08001576 <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001576:	4770      	bx	lr

08001578 <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001578:	4770      	bx	lr

0800157a <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800157a:	4770      	bx	lr

0800157c <HAL_CAN_ErrorCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800157c:	4770      	bx	lr

0800157e <HAL_CAN_IRQHandler>:
{
 800157e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001582:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001584:	6803      	ldr	r3, [r0, #0]
 8001586:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001588:	685f      	ldr	r7, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800158a:	689e      	ldr	r6, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800158c:	f8d3 900c 	ldr.w	r9, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001590:	f8d3 8010 	ldr.w	r8, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001594:	f8d3 a018 	ldr.w	sl, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != RESET)
 8001598:	f014 0f01 	tst.w	r4, #1
 800159c:	d05a      	beq.n	8001654 <HAL_CAN_IRQHandler+0xd6>
    if ((tsrflags & CAN_TSR_RQCP0) != RESET)
 800159e:	f016 0f01 	tst.w	r6, #1
 80015a2:	d017      	beq.n	80015d4 <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80015a4:	2201      	movs	r2, #1
 80015a6:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != RESET)
 80015a8:	f016 0f02 	tst.w	r6, #2
 80015ac:	d108      	bne.n	80015c0 <HAL_CAN_IRQHandler+0x42>
        if ((tsrflags & CAN_TSR_ALST0) != RESET)
 80015ae:	f016 0f04 	tst.w	r6, #4
 80015b2:	d130      	bne.n	8001616 <HAL_CAN_IRQHandler+0x98>
        else if ((tsrflags & CAN_TSR_TERR0) != RESET)
 80015b4:	f016 0f08 	tst.w	r6, #8
 80015b8:	d007      	beq.n	80015ca <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80015ba:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
 80015be:	e00b      	b.n	80015d8 <HAL_CAN_IRQHandler+0x5a>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80015c0:	f7ff ffd1 	bl	8001566 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80015c4:	f04f 0b00 	mov.w	fp, #0
 80015c8:	e006      	b.n	80015d8 <HAL_CAN_IRQHandler+0x5a>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80015ca:	f7ff ffcf 	bl	800156c <HAL_CAN_TxMailbox0AbortCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80015ce:	f04f 0b00 	mov.w	fp, #0
 80015d2:	e001      	b.n	80015d8 <HAL_CAN_IRQHandler+0x5a>
 80015d4:	f04f 0b00 	mov.w	fp, #0
    if ((tsrflags & CAN_TSR_RQCP1) != RESET)
 80015d8:	f416 7f80 	tst.w	r6, #256	; 0x100
 80015dc:	d00b      	beq.n	80015f6 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80015de:	682b      	ldr	r3, [r5, #0]
 80015e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015e4:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != RESET)
 80015e6:	f416 7f00 	tst.w	r6, #512	; 0x200
 80015ea:	d117      	bne.n	800161c <HAL_CAN_IRQHandler+0x9e>
        if ((tsrflags & CAN_TSR_ALST1) != RESET)
 80015ec:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80015f0:	d018      	beq.n	8001624 <HAL_CAN_IRQHandler+0xa6>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80015f2:	f44b 5b00 	orr.w	fp, fp, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != RESET)
 80015f6:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 80015fa:	d02d      	beq.n	8001658 <HAL_CAN_IRQHandler+0xda>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80015fc:	682b      	ldr	r3, [r5, #0]
 80015fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001602:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != RESET)
 8001604:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8001608:	d116      	bne.n	8001638 <HAL_CAN_IRQHandler+0xba>
        if ((tsrflags & CAN_TSR_ALST2) != RESET)
 800160a:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 800160e:	d017      	beq.n	8001640 <HAL_CAN_IRQHandler+0xc2>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001610:	f44b 4b00 	orr.w	fp, fp, #32768	; 0x8000
 8001614:	e020      	b.n	8001658 <HAL_CAN_IRQHandler+0xda>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001616:	f44f 6b00 	mov.w	fp, #2048	; 0x800
 800161a:	e7dd      	b.n	80015d8 <HAL_CAN_IRQHandler+0x5a>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800161c:	4628      	mov	r0, r5
 800161e:	f7ff ffa3 	bl	8001568 <HAL_CAN_TxMailbox1CompleteCallback>
 8001622:	e7e8      	b.n	80015f6 <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != RESET)
 8001624:	f416 6f00 	tst.w	r6, #2048	; 0x800
 8001628:	d002      	beq.n	8001630 <HAL_CAN_IRQHandler+0xb2>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800162a:	f44b 4b80 	orr.w	fp, fp, #16384	; 0x4000
 800162e:	e7e2      	b.n	80015f6 <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001630:	4628      	mov	r0, r5
 8001632:	f7ff ff9c 	bl	800156e <HAL_CAN_TxMailbox1AbortCallback>
 8001636:	e7de      	b.n	80015f6 <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001638:	4628      	mov	r0, r5
 800163a:	f7ff ff96 	bl	800156a <HAL_CAN_TxMailbox2CompleteCallback>
 800163e:	e00b      	b.n	8001658 <HAL_CAN_IRQHandler+0xda>
        else if ((tsrflags & CAN_TSR_TERR2) != RESET)
 8001640:	f416 2f00 	tst.w	r6, #524288	; 0x80000
 8001644:	d002      	beq.n	800164c <HAL_CAN_IRQHandler+0xce>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001646:	f44b 3b80 	orr.w	fp, fp, #65536	; 0x10000
 800164a:	e005      	b.n	8001658 <HAL_CAN_IRQHandler+0xda>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800164c:	4628      	mov	r0, r5
 800164e:	f7ff ff8f 	bl	8001570 <HAL_CAN_TxMailbox2AbortCallback>
 8001652:	e001      	b.n	8001658 <HAL_CAN_IRQHandler+0xda>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001654:	f04f 0b00 	mov.w	fp, #0
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != RESET)
 8001658:	f014 0f08 	tst.w	r4, #8
 800165c:	d007      	beq.n	800166e <HAL_CAN_IRQHandler+0xf0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != RESET)
 800165e:	f019 0f10 	tst.w	r9, #16
 8001662:	d004      	beq.n	800166e <HAL_CAN_IRQHandler+0xf0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001664:	f44b 7b00 	orr.w	fp, fp, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001668:	682b      	ldr	r3, [r5, #0]
 800166a:	2210      	movs	r2, #16
 800166c:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != RESET)
 800166e:	f014 0f04 	tst.w	r4, #4
 8001672:	d002      	beq.n	800167a <HAL_CAN_IRQHandler+0xfc>
    if ((rf0rflags & CAN_RF0R_FULL0) != RESET)
 8001674:	f019 0f08 	tst.w	r9, #8
 8001678:	d160      	bne.n	800173c <HAL_CAN_IRQHandler+0x1be>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != RESET)
 800167a:	f014 0f02 	tst.w	r4, #2
 800167e:	d004      	beq.n	800168a <HAL_CAN_IRQHandler+0x10c>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != RESET)
 8001680:	682b      	ldr	r3, [r5, #0]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	f013 0f03 	tst.w	r3, #3
 8001688:	d15f      	bne.n	800174a <HAL_CAN_IRQHandler+0x1cc>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != RESET)
 800168a:	f014 0f40 	tst.w	r4, #64	; 0x40
 800168e:	d007      	beq.n	80016a0 <HAL_CAN_IRQHandler+0x122>
    if ((rf1rflags & CAN_RF1R_FOVR1) != RESET)
 8001690:	f018 0f10 	tst.w	r8, #16
 8001694:	d004      	beq.n	80016a0 <HAL_CAN_IRQHandler+0x122>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001696:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800169a:	682b      	ldr	r3, [r5, #0]
 800169c:	2210      	movs	r2, #16
 800169e:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != RESET)
 80016a0:	f014 0f20 	tst.w	r4, #32
 80016a4:	d002      	beq.n	80016ac <HAL_CAN_IRQHandler+0x12e>
    if ((rf1rflags & CAN_RF1R_FULL1) != RESET)
 80016a6:	f018 0f08 	tst.w	r8, #8
 80016aa:	d152      	bne.n	8001752 <HAL_CAN_IRQHandler+0x1d4>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != RESET)
 80016ac:	f014 0f10 	tst.w	r4, #16
 80016b0:	d004      	beq.n	80016bc <HAL_CAN_IRQHandler+0x13e>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != RESET)
 80016b2:	682b      	ldr	r3, [r5, #0]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	f013 0f03 	tst.w	r3, #3
 80016ba:	d151      	bne.n	8001760 <HAL_CAN_IRQHandler+0x1e2>
  if ((interrupts & CAN_IT_SLEEP_ACK) != RESET)
 80016bc:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 80016c0:	d002      	beq.n	80016c8 <HAL_CAN_IRQHandler+0x14a>
    if ((msrflags & CAN_MSR_SLAKI) != RESET)
 80016c2:	f017 0f10 	tst.w	r7, #16
 80016c6:	d14f      	bne.n	8001768 <HAL_CAN_IRQHandler+0x1ea>
  if ((interrupts & CAN_IT_WAKEUP) != RESET)
 80016c8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 80016cc:	d002      	beq.n	80016d4 <HAL_CAN_IRQHandler+0x156>
    if ((msrflags & CAN_MSR_WKUI) != RESET)
 80016ce:	f017 0f08 	tst.w	r7, #8
 80016d2:	d150      	bne.n	8001776 <HAL_CAN_IRQHandler+0x1f8>
  if ((interrupts & CAN_IT_ERROR) != RESET)
 80016d4:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80016d8:	d067      	beq.n	80017aa <HAL_CAN_IRQHandler+0x22c>
    if ((msrflags & CAN_MSR_ERRI) != RESET)
 80016da:	f017 0f04 	tst.w	r7, #4
 80016de:	d061      	beq.n	80017a4 <HAL_CAN_IRQHandler+0x226>
      if (((interrupts & CAN_IT_ERROR_WARNING) != RESET) &&
 80016e0:	f414 7f80 	tst.w	r4, #256	; 0x100
 80016e4:	d004      	beq.n	80016f0 <HAL_CAN_IRQHandler+0x172>
 80016e6:	f01a 0f01 	tst.w	sl, #1
 80016ea:	d001      	beq.n	80016f0 <HAL_CAN_IRQHandler+0x172>
        errorcode |= HAL_CAN_ERROR_EWG;
 80016ec:	f04b 0b01 	orr.w	fp, fp, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != RESET) &&
 80016f0:	f414 7f00 	tst.w	r4, #512	; 0x200
 80016f4:	d004      	beq.n	8001700 <HAL_CAN_IRQHandler+0x182>
 80016f6:	f01a 0f02 	tst.w	sl, #2
 80016fa:	d001      	beq.n	8001700 <HAL_CAN_IRQHandler+0x182>
        errorcode |= HAL_CAN_ERROR_EPV;
 80016fc:	f04b 0b02 	orr.w	fp, fp, #2
      if (((interrupts & CAN_IT_BUSOFF) != RESET) &&
 8001700:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8001704:	d004      	beq.n	8001710 <HAL_CAN_IRQHandler+0x192>
 8001706:	f01a 0f04 	tst.w	sl, #4
 800170a:	d001      	beq.n	8001710 <HAL_CAN_IRQHandler+0x192>
        errorcode |= HAL_CAN_ERROR_BOF;
 800170c:	f04b 0b04 	orr.w	fp, fp, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != RESET) &&
 8001710:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8001714:	d046      	beq.n	80017a4 <HAL_CAN_IRQHandler+0x226>
 8001716:	f01a 0a70 	ands.w	sl, sl, #112	; 0x70
 800171a:	d043      	beq.n	80017a4 <HAL_CAN_IRQHandler+0x226>
        switch (esrflags & CAN_ESR_LEC)
 800171c:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8001720:	d048      	beq.n	80017b4 <HAL_CAN_IRQHandler+0x236>
 8001722:	d92f      	bls.n	8001784 <HAL_CAN_IRQHandler+0x206>
 8001724:	f1ba 0f50 	cmp.w	sl, #80	; 0x50
 8001728:	d047      	beq.n	80017ba <HAL_CAN_IRQHandler+0x23c>
 800172a:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 800172e:	d047      	beq.n	80017c0 <HAL_CAN_IRQHandler+0x242>
 8001730:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8001734:	d131      	bne.n	800179a <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_BR;
 8001736:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
            break;
 800173a:	e02e      	b.n	800179a <HAL_CAN_IRQHandler+0x21c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800173c:	682b      	ldr	r3, [r5, #0]
 800173e:	2208      	movs	r2, #8
 8001740:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001742:	4628      	mov	r0, r5
 8001744:	f7ff ff15 	bl	8001572 <HAL_CAN_RxFifo0FullCallback>
 8001748:	e797      	b.n	800167a <HAL_CAN_IRQHandler+0xfc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800174a:	4628      	mov	r0, r5
 800174c:	f001 fde0 	bl	8003310 <HAL_CAN_RxFifo0MsgPendingCallback>
 8001750:	e79b      	b.n	800168a <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001752:	682b      	ldr	r3, [r5, #0]
 8001754:	2208      	movs	r2, #8
 8001756:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001758:	4628      	mov	r0, r5
 800175a:	f7ff ff0c 	bl	8001576 <HAL_CAN_RxFifo1FullCallback>
 800175e:	e7a5      	b.n	80016ac <HAL_CAN_IRQHandler+0x12e>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001760:	4628      	mov	r0, r5
 8001762:	f7ff ff07 	bl	8001574 <HAL_CAN_RxFifo1MsgPendingCallback>
 8001766:	e7a9      	b.n	80016bc <HAL_CAN_IRQHandler+0x13e>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001768:	682b      	ldr	r3, [r5, #0]
 800176a:	2210      	movs	r2, #16
 800176c:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 800176e:	4628      	mov	r0, r5
 8001770:	f7ff ff02 	bl	8001578 <HAL_CAN_SleepCallback>
 8001774:	e7a8      	b.n	80016c8 <HAL_CAN_IRQHandler+0x14a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001776:	682b      	ldr	r3, [r5, #0]
 8001778:	2208      	movs	r2, #8
 800177a:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800177c:	4628      	mov	r0, r5
 800177e:	f7ff fefc 	bl	800157a <HAL_CAN_WakeUpFromRxMsgCallback>
 8001782:	e7a7      	b.n	80016d4 <HAL_CAN_IRQHandler+0x156>
        switch (esrflags & CAN_ESR_LEC)
 8001784:	f1ba 0f10 	cmp.w	sl, #16
 8001788:	d005      	beq.n	8001796 <HAL_CAN_IRQHandler+0x218>
 800178a:	f1ba 0f20 	cmp.w	sl, #32
 800178e:	d104      	bne.n	800179a <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001790:	f04b 0b10 	orr.w	fp, fp, #16
            break;
 8001794:	e001      	b.n	800179a <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_STF;
 8001796:	f04b 0b08 	orr.w	fp, fp, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800179a:	682a      	ldr	r2, [r5, #0]
 800179c:	6993      	ldr	r3, [r2, #24]
 800179e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017a2:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80017a4:	682b      	ldr	r3, [r5, #0]
 80017a6:	2204      	movs	r2, #4
 80017a8:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 80017aa:	f1bb 0f00 	cmp.w	fp, #0
 80017ae:	d10a      	bne.n	80017c6 <HAL_CAN_IRQHandler+0x248>
}
 80017b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            errorcode |= HAL_CAN_ERROR_ACK;
 80017b4:	f04b 0b20 	orr.w	fp, fp, #32
            break;
 80017b8:	e7ef      	b.n	800179a <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_BD;
 80017ba:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
            break;
 80017be:	e7ec      	b.n	800179a <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_CRC;
 80017c0:	f44b 7b80 	orr.w	fp, fp, #256	; 0x100
            break;
 80017c4:	e7e9      	b.n	800179a <HAL_CAN_IRQHandler+0x21c>
    hcan->ErrorCode |= errorcode;
 80017c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80017c8:	ea43 030b 	orr.w	r3, r3, fp
 80017cc:	626b      	str	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 80017ce:	4628      	mov	r0, r5
 80017d0:	f7ff fed4 	bl	800157c <HAL_CAN_ErrorCallback>
}
 80017d4:	e7ec      	b.n	80017b0 <HAL_CAN_IRQHandler+0x232>
	...

080017d8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d8:	4a07      	ldr	r2, [pc, #28]	; (80017f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80017da:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017dc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80017e0:	041b      	lsls	r3, r3, #16
 80017e2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80017e4:	0200      	lsls	r0, r0, #8
 80017e6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ea:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80017ec:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80017f0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80017f4:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80017f6:	4770      	bx	lr
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017fc:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017fe:	4b17      	ldr	r3, [pc, #92]	; (800185c <HAL_NVIC_SetPriority+0x60>)
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001806:	f1c3 0407 	rsb	r4, r3, #7
 800180a:	2c04      	cmp	r4, #4
 800180c:	bf28      	it	cs
 800180e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001810:	1d1d      	adds	r5, r3, #4
 8001812:	2d06      	cmp	r5, #6
 8001814:	d918      	bls.n	8001848 <HAL_NVIC_SetPriority+0x4c>
 8001816:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	f04f 35ff 	mov.w	r5, #4294967295
 800181c:	fa05 f404 	lsl.w	r4, r5, r4
 8001820:	ea21 0104 	bic.w	r1, r1, r4
 8001824:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001826:	fa05 f303 	lsl.w	r3, r5, r3
 800182a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8001830:	2800      	cmp	r0, #0
 8001832:	db0b      	blt.n	800184c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001834:	0109      	lsls	r1, r1, #4
 8001836:	b2c9      	uxtb	r1, r1
 8001838:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800183c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001840:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001844:	bc30      	pop	{r4, r5}
 8001846:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001848:	2300      	movs	r3, #0
 800184a:	e7e5      	b.n	8001818 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184c:	f000 000f 	and.w	r0, r0, #15
 8001850:	0109      	lsls	r1, r1, #4
 8001852:	b2c9      	uxtb	r1, r1
 8001854:	4b02      	ldr	r3, [pc, #8]	; (8001860 <HAL_NVIC_SetPriority+0x64>)
 8001856:	5419      	strb	r1, [r3, r0]
 8001858:	e7f4      	b.n	8001844 <HAL_NVIC_SetPriority+0x48>
 800185a:	bf00      	nop
 800185c:	e000ed00 	.word	0xe000ed00
 8001860:	e000ed14 	.word	0xe000ed14

08001864 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001864:	f000 021f 	and.w	r2, r0, #31
 8001868:	0940      	lsrs	r0, r0, #5
 800186a:	2301      	movs	r3, #1
 800186c:	4093      	lsls	r3, r2
 800186e:	4a02      	ldr	r2, [pc, #8]	; (8001878 <HAL_NVIC_EnableIRQ+0x14>)
 8001870:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000e100 	.word	0xe000e100

0800187c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800187c:	3801      	subs	r0, #1
 800187e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001882:	d20a      	bcs.n	800189a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_SYSTICK_Config+0x24>)
 8001886:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001888:	4a06      	ldr	r2, [pc, #24]	; (80018a4 <HAL_SYSTICK_Config+0x28>)
 800188a:	21f0      	movs	r1, #240	; 0xf0
 800188c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001890:	2000      	movs	r0, #0
 8001892:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001894:	2207      	movs	r2, #7
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800189a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000e010 	.word	0xe000e010
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80018a8:	2804      	cmp	r0, #4
 80018aa:	d005      	beq.n	80018b8 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80018ac:	4a05      	ldr	r2, [pc, #20]	; (80018c4 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80018ae:	6813      	ldr	r3, [r2, #0]
 80018b0:	f023 0304 	bic.w	r3, r3, #4
 80018b4:	6013      	str	r3, [r2, #0]
  }
}
 80018b6:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80018b8:	4a02      	ldr	r2, [pc, #8]	; (80018c4 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80018ba:	6813      	ldr	r3, [r2, #0]
 80018bc:	f043 0304 	orr.w	r3, r3, #4
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	4770      	bx	lr
 80018c4:	e000e010 	.word	0xe000e010

080018c8 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80018c8:	4770      	bx	lr

080018ca <HAL_SYSTICK_IRQHandler>:
{
 80018ca:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80018cc:	f7ff fffc 	bl	80018c8 <HAL_SYSTICK_Callback>
}
 80018d0:	bd08      	pop	{r3, pc}

080018d2 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018d2:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d003      	beq.n	80018e4 <HAL_DMA_Abort_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80018e0:	2001      	movs	r0, #1
 80018e2:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018e4:	2305      	movs	r3, #5
 80018e6:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018ea:	6802      	ldr	r2, [r0, #0]
 80018ec:	6813      	ldr	r3, [r2, #0]
 80018ee:	f023 0301 	bic.w	r3, r3, #1
 80018f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80018f4:	2000      	movs	r0, #0
}
 80018f6:	4770      	bx	lr

080018f8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018f8:	2300      	movs	r3, #0
 80018fa:	2b0f      	cmp	r3, #15
 80018fc:	f200 80e3 	bhi.w	8001ac6 <HAL_GPIO_Init+0x1ce>
{
 8001900:	b4f0      	push	{r4, r5, r6, r7}
 8001902:	b082      	sub	sp, #8
 8001904:	e039      	b.n	800197a <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001906:	2209      	movs	r2, #9
 8001908:	e000      	b.n	800190c <HAL_GPIO_Init+0x14>
 800190a:	2200      	movs	r2, #0
 800190c:	40b2      	lsls	r2, r6
 800190e:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001910:	3402      	adds	r4, #2
 8001912:	4e6d      	ldr	r6, [pc, #436]	; (8001ac8 <HAL_GPIO_Init+0x1d0>)
 8001914:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001918:	4a6c      	ldr	r2, [pc, #432]	; (8001acc <HAL_GPIO_Init+0x1d4>)
 800191a:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800191c:	43ea      	mvns	r2, r5
 800191e:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001922:	684f      	ldr	r7, [r1, #4]
 8001924:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001928:	d001      	beq.n	800192e <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 800192a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 800192e:	4c67      	ldr	r4, [pc, #412]	; (8001acc <HAL_GPIO_Init+0x1d4>)
 8001930:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8001932:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001934:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001938:	684f      	ldr	r7, [r1, #4]
 800193a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800193e:	d001      	beq.n	8001944 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8001940:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8001944:	4c61      	ldr	r4, [pc, #388]	; (8001acc <HAL_GPIO_Init+0x1d4>)
 8001946:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001948:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 800194a:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800194e:	684f      	ldr	r7, [r1, #4]
 8001950:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001954:	d001      	beq.n	800195a <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8001956:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 800195a:	4c5c      	ldr	r4, [pc, #368]	; (8001acc <HAL_GPIO_Init+0x1d4>)
 800195c:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 800195e:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001960:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001962:	684e      	ldr	r6, [r1, #4]
 8001964:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001968:	d001      	beq.n	800196e <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 800196a:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 800196e:	4c57      	ldr	r4, [pc, #348]	; (8001acc <HAL_GPIO_Init+0x1d4>)
 8001970:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001972:	3301      	adds	r3, #1
 8001974:	2b0f      	cmp	r3, #15
 8001976:	f200 80a3 	bhi.w	8001ac0 <HAL_GPIO_Init+0x1c8>
    ioposition = 0x01U << position;
 800197a:	2201      	movs	r2, #1
 800197c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800197e:	680c      	ldr	r4, [r1, #0]
 8001980:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8001984:	42aa      	cmp	r2, r5
 8001986:	d1f4      	bne.n	8001972 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001988:	684c      	ldr	r4, [r1, #4]
 800198a:	2c02      	cmp	r4, #2
 800198c:	d001      	beq.n	8001992 <HAL_GPIO_Init+0x9a>
 800198e:	2c12      	cmp	r4, #18
 8001990:	d110      	bne.n	80019b4 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 8001992:	08de      	lsrs	r6, r3, #3
 8001994:	3608      	adds	r6, #8
 8001996:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800199a:	f003 0407 	and.w	r4, r3, #7
 800199e:	00a7      	lsls	r7, r4, #2
 80019a0:	240f      	movs	r4, #15
 80019a2:	40bc      	lsls	r4, r7
 80019a4:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019a8:	690c      	ldr	r4, [r1, #16]
 80019aa:	40bc      	lsls	r4, r7
 80019ac:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 80019b0:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 80019b4:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019b6:	005f      	lsls	r7, r3, #1
 80019b8:	2603      	movs	r6, #3
 80019ba:	40be      	lsls	r6, r7
 80019bc:	43f6      	mvns	r6, r6
 80019be:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019c2:	684c      	ldr	r4, [r1, #4]
 80019c4:	f004 0403 	and.w	r4, r4, #3
 80019c8:	40bc      	lsls	r4, r7
 80019ca:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80019ce:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019d0:	684c      	ldr	r4, [r1, #4]
 80019d2:	f104 3cff 	add.w	ip, r4, #4294967295
 80019d6:	f1bc 0f01 	cmp.w	ip, #1
 80019da:	d903      	bls.n	80019e4 <HAL_GPIO_Init+0xec>
 80019dc:	2c11      	cmp	r4, #17
 80019de:	d001      	beq.n	80019e4 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019e0:	2c12      	cmp	r4, #18
 80019e2:	d110      	bne.n	8001a06 <HAL_GPIO_Init+0x10e>
        temp = GPIOx->OSPEEDR; 
 80019e4:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019e6:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ea:	68cc      	ldr	r4, [r1, #12]
 80019ec:	40bc      	lsls	r4, r7
 80019ee:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 80019f2:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80019f4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019f6:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019fa:	684c      	ldr	r4, [r1, #4]
 80019fc:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8001a00:	409c      	lsls	r4, r3
 8001a02:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8001a04:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8001a06:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a08:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a0a:	688a      	ldr	r2, [r1, #8]
 8001a0c:	40ba      	lsls	r2, r7
 8001a0e:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8001a10:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a12:	684a      	ldr	r2, [r1, #4]
 8001a14:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001a18:	d0ab      	beq.n	8001972 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	9201      	str	r2, [sp, #4]
 8001a1e:	4a2c      	ldr	r2, [pc, #176]	; (8001ad0 <HAL_GPIO_Init+0x1d8>)
 8001a20:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001a22:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001a26:	6454      	str	r4, [r2, #68]	; 0x44
 8001a28:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a2a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001a2e:	9201      	str	r2, [sp, #4]
 8001a30:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001a32:	089c      	lsrs	r4, r3, #2
 8001a34:	1ca6      	adds	r6, r4, #2
 8001a36:	4a24      	ldr	r2, [pc, #144]	; (8001ac8 <HAL_GPIO_Init+0x1d0>)
 8001a38:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a3c:	f003 0203 	and.w	r2, r3, #3
 8001a40:	0096      	lsls	r6, r2, #2
 8001a42:	220f      	movs	r2, #15
 8001a44:	40b2      	lsls	r2, r6
 8001a46:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a4a:	4a22      	ldr	r2, [pc, #136]	; (8001ad4 <HAL_GPIO_Init+0x1dc>)
 8001a4c:	4290      	cmp	r0, r2
 8001a4e:	f43f af5c 	beq.w	800190a <HAL_GPIO_Init+0x12>
 8001a52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a56:	4290      	cmp	r0, r2
 8001a58:	d022      	beq.n	8001aa0 <HAL_GPIO_Init+0x1a8>
 8001a5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a5e:	4290      	cmp	r0, r2
 8001a60:	d020      	beq.n	8001aa4 <HAL_GPIO_Init+0x1ac>
 8001a62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a66:	4290      	cmp	r0, r2
 8001a68:	d01e      	beq.n	8001aa8 <HAL_GPIO_Init+0x1b0>
 8001a6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a6e:	4290      	cmp	r0, r2
 8001a70:	d01c      	beq.n	8001aac <HAL_GPIO_Init+0x1b4>
 8001a72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a76:	4290      	cmp	r0, r2
 8001a78:	d01a      	beq.n	8001ab0 <HAL_GPIO_Init+0x1b8>
 8001a7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a7e:	4290      	cmp	r0, r2
 8001a80:	d018      	beq.n	8001ab4 <HAL_GPIO_Init+0x1bc>
 8001a82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a86:	4290      	cmp	r0, r2
 8001a88:	d016      	beq.n	8001ab8 <HAL_GPIO_Init+0x1c0>
 8001a8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a8e:	4290      	cmp	r0, r2
 8001a90:	d014      	beq.n	8001abc <HAL_GPIO_Init+0x1c4>
 8001a92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a96:	4290      	cmp	r0, r2
 8001a98:	f43f af35 	beq.w	8001906 <HAL_GPIO_Init+0xe>
 8001a9c:	220a      	movs	r2, #10
 8001a9e:	e735      	b.n	800190c <HAL_GPIO_Init+0x14>
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	e733      	b.n	800190c <HAL_GPIO_Init+0x14>
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	e731      	b.n	800190c <HAL_GPIO_Init+0x14>
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	e72f      	b.n	800190c <HAL_GPIO_Init+0x14>
 8001aac:	2204      	movs	r2, #4
 8001aae:	e72d      	b.n	800190c <HAL_GPIO_Init+0x14>
 8001ab0:	2205      	movs	r2, #5
 8001ab2:	e72b      	b.n	800190c <HAL_GPIO_Init+0x14>
 8001ab4:	2206      	movs	r2, #6
 8001ab6:	e729      	b.n	800190c <HAL_GPIO_Init+0x14>
 8001ab8:	2207      	movs	r2, #7
 8001aba:	e727      	b.n	800190c <HAL_GPIO_Init+0x14>
 8001abc:	2208      	movs	r2, #8
 8001abe:	e725      	b.n	800190c <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8001ac0:	b002      	add	sp, #8
 8001ac2:	bcf0      	pop	{r4, r5, r6, r7}
 8001ac4:	4770      	bx	lr
 8001ac6:	4770      	bx	lr
 8001ac8:	40013800 	.word	0x40013800
 8001acc:	40013c00 	.word	0x40013c00
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40020000 	.word	0x40020000

08001ad8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ad8:	b912      	cbnz	r2, 8001ae0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ada:	0409      	lsls	r1, r1, #16
 8001adc:	6181      	str	r1, [r0, #24]
  }
}
 8001ade:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8001ae0:	6181      	str	r1, [r0, #24]
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001ae4:	6943      	ldr	r3, [r0, #20]
 8001ae6:	4059      	eors	r1, r3
 8001ae8:	6141      	str	r1, [r0, #20]
}
 8001aea:	4770      	bx	lr

08001aec <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aec:	2800      	cmp	r0, #0
 8001aee:	f000 81bb 	beq.w	8001e68 <HAL_RCC_OscConfig+0x37c>
{
 8001af2:	b570      	push	{r4, r5, r6, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af8:	6803      	ldr	r3, [r0, #0]
 8001afa:	f013 0f01 	tst.w	r3, #1
 8001afe:	d03b      	beq.n	8001b78 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b00:	4ba7      	ldr	r3, [pc, #668]	; (8001da0 <HAL_RCC_OscConfig+0x2b4>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 030c 	and.w	r3, r3, #12
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d02c      	beq.n	8001b66 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b0c:	4ba4      	ldr	r3, [pc, #656]	; (8001da0 <HAL_RCC_OscConfig+0x2b4>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	d021      	beq.n	8001b5c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b18:	6863      	ldr	r3, [r4, #4]
 8001b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b1e:	d04f      	beq.n	8001bc0 <HAL_RCC_OscConfig+0xd4>
 8001b20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b24:	d052      	beq.n	8001bcc <HAL_RCC_OscConfig+0xe0>
 8001b26:	4b9e      	ldr	r3, [pc, #632]	; (8001da0 <HAL_RCC_OscConfig+0x2b4>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b36:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b38:	6863      	ldr	r3, [r4, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d050      	beq.n	8001be0 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3e:	f7ff fa5d 	bl	8000ffc <HAL_GetTick>
 8001b42:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b44:	4b96      	ldr	r3, [pc, #600]	; (8001da0 <HAL_RCC_OscConfig+0x2b4>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001b4c:	d114      	bne.n	8001b78 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b4e:	f7ff fa55 	bl	8000ffc <HAL_GetTick>
 8001b52:	1b40      	subs	r0, r0, r5
 8001b54:	2864      	cmp	r0, #100	; 0x64
 8001b56:	d9f5      	bls.n	8001b44 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001b58:	2003      	movs	r0, #3
 8001b5a:	e18a      	b.n	8001e72 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b5c:	4b90      	ldr	r3, [pc, #576]	; (8001da0 <HAL_RCC_OscConfig+0x2b4>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001b64:	d0d8      	beq.n	8001b18 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b66:	4b8e      	ldr	r3, [pc, #568]	; (8001da0 <HAL_RCC_OscConfig+0x2b4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001b6e:	d003      	beq.n	8001b78 <HAL_RCC_OscConfig+0x8c>
 8001b70:	6863      	ldr	r3, [r4, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 817a 	beq.w	8001e6c <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b78:	6823      	ldr	r3, [r4, #0]
 8001b7a:	f013 0f02 	tst.w	r3, #2
 8001b7e:	d055      	beq.n	8001c2c <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b80:	4b87      	ldr	r3, [pc, #540]	; (8001da0 <HAL_RCC_OscConfig+0x2b4>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f013 0f0c 	tst.w	r3, #12
 8001b88:	d03e      	beq.n	8001c08 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b8a:	4b85      	ldr	r3, [pc, #532]	; (8001da0 <HAL_RCC_OscConfig+0x2b4>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b92:	2b08      	cmp	r3, #8
 8001b94:	d033      	beq.n	8001bfe <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b96:	68e3      	ldr	r3, [r4, #12]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d068      	beq.n	8001c6e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b9c:	4b81      	ldr	r3, [pc, #516]	; (8001da4 <HAL_RCC_OscConfig+0x2b8>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba2:	f7ff fa2b 	bl	8000ffc <HAL_GetTick>
 8001ba6:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba8:	4b7d      	ldr	r3, [pc, #500]	; (8001da0 <HAL_RCC_OscConfig+0x2b4>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f013 0f02 	tst.w	r3, #2
 8001bb0:	d154      	bne.n	8001c5c <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bb2:	f7ff fa23 	bl	8000ffc <HAL_GetTick>
 8001bb6:	1b40      	subs	r0, r0, r5
 8001bb8:	2802      	cmp	r0, #2
 8001bba:	d9f5      	bls.n	8001ba8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001bbc:	2003      	movs	r0, #3
 8001bbe:	e158      	b.n	8001e72 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bc0:	4a77      	ldr	r2, [pc, #476]	; (8001da0 <HAL_RCC_OscConfig+0x2b4>)
 8001bc2:	6813      	ldr	r3, [r2, #0]
 8001bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	e7b5      	b.n	8001b38 <HAL_RCC_OscConfig+0x4c>
 8001bcc:	4b74      	ldr	r3, [pc, #464]	; (8001da0 <HAL_RCC_OscConfig+0x2b4>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	e7ab      	b.n	8001b38 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001be0:	f7ff fa0c 	bl	8000ffc <HAL_GetTick>
 8001be4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be6:	4b6e      	ldr	r3, [pc, #440]	; (8001da0 <HAL_RCC_OscConfig+0x2b4>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001bee:	d0c3      	beq.n	8001b78 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bf0:	f7ff fa04 	bl	8000ffc <HAL_GetTick>
 8001bf4:	1b40      	subs	r0, r0, r5
 8001bf6:	2864      	cmp	r0, #100	; 0x64
 8001bf8:	d9f5      	bls.n	8001be6 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001bfa:	2003      	movs	r0, #3
 8001bfc:	e139      	b.n	8001e72 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bfe:	4b68      	ldr	r3, [pc, #416]	; (8001da0 <HAL_RCC_OscConfig+0x2b4>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001c06:	d1c6      	bne.n	8001b96 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c08:	4b65      	ldr	r3, [pc, #404]	; (8001da0 <HAL_RCC_OscConfig+0x2b4>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f013 0f02 	tst.w	r3, #2
 8001c10:	d004      	beq.n	8001c1c <HAL_RCC_OscConfig+0x130>
 8001c12:	68e3      	ldr	r3, [r4, #12]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d001      	beq.n	8001c1c <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8001c18:	2001      	movs	r0, #1
 8001c1a:	e12a      	b.n	8001e72 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1c:	4a60      	ldr	r2, [pc, #384]	; (8001da0 <HAL_RCC_OscConfig+0x2b4>)
 8001c1e:	6813      	ldr	r3, [r2, #0]
 8001c20:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c24:	6921      	ldr	r1, [r4, #16]
 8001c26:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001c2a:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c2c:	6823      	ldr	r3, [r4, #0]
 8001c2e:	f013 0f08 	tst.w	r3, #8
 8001c32:	d040      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c34:	6963      	ldr	r3, [r4, #20]
 8001c36:	b363      	cbz	r3, 8001c92 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c38:	4b5b      	ldr	r3, [pc, #364]	; (8001da8 <HAL_RCC_OscConfig+0x2bc>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c3e:	f7ff f9dd 	bl	8000ffc <HAL_GetTick>
 8001c42:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c44:	4b56      	ldr	r3, [pc, #344]	; (8001da0 <HAL_RCC_OscConfig+0x2b4>)
 8001c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c48:	f013 0f02 	tst.w	r3, #2
 8001c4c:	d133      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c4e:	f7ff f9d5 	bl	8000ffc <HAL_GetTick>
 8001c52:	1b40      	subs	r0, r0, r5
 8001c54:	2802      	cmp	r0, #2
 8001c56:	d9f5      	bls.n	8001c44 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001c58:	2003      	movs	r0, #3
 8001c5a:	e10a      	b.n	8001e72 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5c:	4a50      	ldr	r2, [pc, #320]	; (8001da0 <HAL_RCC_OscConfig+0x2b4>)
 8001c5e:	6813      	ldr	r3, [r2, #0]
 8001c60:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c64:	6921      	ldr	r1, [r4, #16]
 8001c66:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	e7de      	b.n	8001c2c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8001c6e:	4b4d      	ldr	r3, [pc, #308]	; (8001da4 <HAL_RCC_OscConfig+0x2b8>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c74:	f7ff f9c2 	bl	8000ffc <HAL_GetTick>
 8001c78:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7a:	4b49      	ldr	r3, [pc, #292]	; (8001da0 <HAL_RCC_OscConfig+0x2b4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f013 0f02 	tst.w	r3, #2
 8001c82:	d0d3      	beq.n	8001c2c <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c84:	f7ff f9ba 	bl	8000ffc <HAL_GetTick>
 8001c88:	1b40      	subs	r0, r0, r5
 8001c8a:	2802      	cmp	r0, #2
 8001c8c:	d9f5      	bls.n	8001c7a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8001c8e:	2003      	movs	r0, #3
 8001c90:	e0ef      	b.n	8001e72 <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c92:	4b45      	ldr	r3, [pc, #276]	; (8001da8 <HAL_RCC_OscConfig+0x2bc>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c98:	f7ff f9b0 	bl	8000ffc <HAL_GetTick>
 8001c9c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c9e:	4b40      	ldr	r3, [pc, #256]	; (8001da0 <HAL_RCC_OscConfig+0x2b4>)
 8001ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ca2:	f013 0f02 	tst.w	r3, #2
 8001ca6:	d006      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ca8:	f7ff f9a8 	bl	8000ffc <HAL_GetTick>
 8001cac:	1b40      	subs	r0, r0, r5
 8001cae:	2802      	cmp	r0, #2
 8001cb0:	d9f5      	bls.n	8001c9e <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8001cb2:	2003      	movs	r0, #3
 8001cb4:	e0dd      	b.n	8001e72 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb6:	6823      	ldr	r3, [r4, #0]
 8001cb8:	f013 0f04 	tst.w	r3, #4
 8001cbc:	d079      	beq.n	8001db2 <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cbe:	4b38      	ldr	r3, [pc, #224]	; (8001da0 <HAL_RCC_OscConfig+0x2b4>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001cc6:	d133      	bne.n	8001d30 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc8:	2300      	movs	r3, #0
 8001cca:	9301      	str	r3, [sp, #4]
 8001ccc:	4b34      	ldr	r3, [pc, #208]	; (8001da0 <HAL_RCC_OscConfig+0x2b4>)
 8001cce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cd0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001cd4:	641a      	str	r2, [r3, #64]	; 0x40
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001ce0:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce2:	4b32      	ldr	r3, [pc, #200]	; (8001dac <HAL_RCC_OscConfig+0x2c0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001cea:	d023      	beq.n	8001d34 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cec:	68a3      	ldr	r3, [r4, #8]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d034      	beq.n	8001d5c <HAL_RCC_OscConfig+0x270>
 8001cf2:	2b05      	cmp	r3, #5
 8001cf4:	d038      	beq.n	8001d68 <HAL_RCC_OscConfig+0x27c>
 8001cf6:	4b2a      	ldr	r3, [pc, #168]	; (8001da0 <HAL_RCC_OscConfig+0x2b4>)
 8001cf8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001cfa:	f022 0201 	bic.w	r2, r2, #1
 8001cfe:	671a      	str	r2, [r3, #112]	; 0x70
 8001d00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d02:	f022 0204 	bic.w	r2, r2, #4
 8001d06:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d08:	68a3      	ldr	r3, [r4, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d036      	beq.n	8001d7c <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0e:	f7ff f975 	bl	8000ffc <HAL_GetTick>
 8001d12:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d14:	4b22      	ldr	r3, [pc, #136]	; (8001da0 <HAL_RCC_OscConfig+0x2b4>)
 8001d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d18:	f013 0f02 	tst.w	r3, #2
 8001d1c:	d148      	bne.n	8001db0 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d1e:	f7ff f96d 	bl	8000ffc <HAL_GetTick>
 8001d22:	1b80      	subs	r0, r0, r6
 8001d24:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d28:	4298      	cmp	r0, r3
 8001d2a:	d9f3      	bls.n	8001d14 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8001d2c:	2003      	movs	r0, #3
 8001d2e:	e0a0      	b.n	8001e72 <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8001d30:	2500      	movs	r5, #0
 8001d32:	e7d6      	b.n	8001ce2 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d34:	4a1d      	ldr	r2, [pc, #116]	; (8001dac <HAL_RCC_OscConfig+0x2c0>)
 8001d36:	6813      	ldr	r3, [r2, #0]
 8001d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001d3e:	f7ff f95d 	bl	8000ffc <HAL_GetTick>
 8001d42:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d44:	4b19      	ldr	r3, [pc, #100]	; (8001dac <HAL_RCC_OscConfig+0x2c0>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001d4c:	d1ce      	bne.n	8001cec <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d4e:	f7ff f955 	bl	8000ffc <HAL_GetTick>
 8001d52:	1b80      	subs	r0, r0, r6
 8001d54:	2802      	cmp	r0, #2
 8001d56:	d9f5      	bls.n	8001d44 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8001d58:	2003      	movs	r0, #3
 8001d5a:	e08a      	b.n	8001e72 <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d5c:	4a10      	ldr	r2, [pc, #64]	; (8001da0 <HAL_RCC_OscConfig+0x2b4>)
 8001d5e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6713      	str	r3, [r2, #112]	; 0x70
 8001d66:	e7cf      	b.n	8001d08 <HAL_RCC_OscConfig+0x21c>
 8001d68:	4b0d      	ldr	r3, [pc, #52]	; (8001da0 <HAL_RCC_OscConfig+0x2b4>)
 8001d6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d6c:	f042 0204 	orr.w	r2, r2, #4
 8001d70:	671a      	str	r2, [r3, #112]	; 0x70
 8001d72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d74:	f042 0201 	orr.w	r2, r2, #1
 8001d78:	671a      	str	r2, [r3, #112]	; 0x70
 8001d7a:	e7c5      	b.n	8001d08 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7c:	f7ff f93e 	bl	8000ffc <HAL_GetTick>
 8001d80:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d82:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <HAL_RCC_OscConfig+0x2b4>)
 8001d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d86:	f013 0f02 	tst.w	r3, #2
 8001d8a:	d011      	beq.n	8001db0 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d8c:	f7ff f936 	bl	8000ffc <HAL_GetTick>
 8001d90:	1b80      	subs	r0, r0, r6
 8001d92:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d96:	4298      	cmp	r0, r3
 8001d98:	d9f3      	bls.n	8001d82 <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8001d9a:	2003      	movs	r0, #3
 8001d9c:	e069      	b.n	8001e72 <HAL_RCC_OscConfig+0x386>
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800
 8001da4:	42470000 	.word	0x42470000
 8001da8:	42470e80 	.word	0x42470e80
 8001dac:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001db0:	b9e5      	cbnz	r5, 8001dec <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001db2:	69a3      	ldr	r3, [r4, #24]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d05b      	beq.n	8001e70 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001db8:	4a30      	ldr	r2, [pc, #192]	; (8001e7c <HAL_RCC_OscConfig+0x390>)
 8001dba:	6892      	ldr	r2, [r2, #8]
 8001dbc:	f002 020c 	and.w	r2, r2, #12
 8001dc0:	2a08      	cmp	r2, #8
 8001dc2:	d058      	beq.n	8001e76 <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d017      	beq.n	8001df8 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc8:	4b2d      	ldr	r3, [pc, #180]	; (8001e80 <HAL_RCC_OscConfig+0x394>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dce:	f7ff f915 	bl	8000ffc <HAL_GetTick>
 8001dd2:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd4:	4b29      	ldr	r3, [pc, #164]	; (8001e7c <HAL_RCC_OscConfig+0x390>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001ddc:	d042      	beq.n	8001e64 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dde:	f7ff f90d 	bl	8000ffc <HAL_GetTick>
 8001de2:	1b00      	subs	r0, r0, r4
 8001de4:	2802      	cmp	r0, #2
 8001de6:	d9f5      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001de8:	2003      	movs	r0, #3
 8001dea:	e042      	b.n	8001e72 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dec:	4a23      	ldr	r2, [pc, #140]	; (8001e7c <HAL_RCC_OscConfig+0x390>)
 8001dee:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001df0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001df4:	6413      	str	r3, [r2, #64]	; 0x40
 8001df6:	e7dc      	b.n	8001db2 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8001df8:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <HAL_RCC_OscConfig+0x394>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001dfe:	f7ff f8fd 	bl	8000ffc <HAL_GetTick>
 8001e02:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e04:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <HAL_RCC_OscConfig+0x390>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001e0c:	d006      	beq.n	8001e1c <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e0e:	f7ff f8f5 	bl	8000ffc <HAL_GetTick>
 8001e12:	1b40      	subs	r0, r0, r5
 8001e14:	2802      	cmp	r0, #2
 8001e16:	d9f5      	bls.n	8001e04 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001e18:	2003      	movs	r0, #3
 8001e1a:	e02a      	b.n	8001e72 <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e1c:	69e3      	ldr	r3, [r4, #28]
 8001e1e:	6a22      	ldr	r2, [r4, #32]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e24:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001e28:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e2a:	0852      	lsrs	r2, r2, #1
 8001e2c:	3a01      	subs	r2, #1
 8001e2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001e32:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e34:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001e38:	4a10      	ldr	r2, [pc, #64]	; (8001e7c <HAL_RCC_OscConfig+0x390>)
 8001e3a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001e3c:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <HAL_RCC_OscConfig+0x394>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e42:	f7ff f8db 	bl	8000ffc <HAL_GetTick>
 8001e46:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e48:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <HAL_RCC_OscConfig+0x390>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001e50:	d106      	bne.n	8001e60 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e52:	f7ff f8d3 	bl	8000ffc <HAL_GetTick>
 8001e56:	1b00      	subs	r0, r0, r4
 8001e58:	2802      	cmp	r0, #2
 8001e5a:	d9f5      	bls.n	8001e48 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001e5c:	2003      	movs	r0, #3
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001e60:	2000      	movs	r0, #0
 8001e62:	e006      	b.n	8001e72 <HAL_RCC_OscConfig+0x386>
 8001e64:	2000      	movs	r0, #0
 8001e66:	e004      	b.n	8001e72 <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8001e68:	2001      	movs	r0, #1
}
 8001e6a:	4770      	bx	lr
        return HAL_ERROR;
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	e000      	b.n	8001e72 <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8001e70:	2000      	movs	r0, #0
}
 8001e72:	b002      	add	sp, #8
 8001e74:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001e76:	2001      	movs	r0, #1
 8001e78:	e7fb      	b.n	8001e72 <HAL_RCC_OscConfig+0x386>
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	42470060 	.word	0x42470060

08001e84 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e84:	4b26      	ldr	r3, [pc, #152]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 030c 	and.w	r3, r3, #12
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d044      	beq.n	8001f1a <HAL_RCC_GetSysClockFreq+0x96>
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d001      	beq.n	8001e98 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e94:	4823      	ldr	r0, [pc, #140]	; (8001f24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e96:	4770      	bx	lr
{
 8001e98:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e9c:	4b20      	ldr	r3, [pc, #128]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001eaa:	d013      	beq.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eac:	4b1c      	ldr	r3, [pc, #112]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001eae:	6859      	ldr	r1, [r3, #4]
 8001eb0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	481c      	ldr	r0, [pc, #112]	; (8001f28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001eb8:	fba1 0100 	umull	r0, r1, r1, r0
 8001ebc:	f7fe fed4 	bl	8000c68 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ec0:	4b17      	ldr	r3, [pc, #92]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001ec8:	3301      	adds	r3, #1
 8001eca:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001ecc:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001ed0:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ed4:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001edc:	461e      	mov	r6, r3
 8001ede:	2700      	movs	r7, #0
 8001ee0:	015c      	lsls	r4, r3, #5
 8001ee2:	2500      	movs	r5, #0
 8001ee4:	1ae4      	subs	r4, r4, r3
 8001ee6:	eb65 0507 	sbc.w	r5, r5, r7
 8001eea:	01a9      	lsls	r1, r5, #6
 8001eec:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001ef0:	01a0      	lsls	r0, r4, #6
 8001ef2:	1b00      	subs	r0, r0, r4
 8001ef4:	eb61 0105 	sbc.w	r1, r1, r5
 8001ef8:	00cb      	lsls	r3, r1, #3
 8001efa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001efe:	00c4      	lsls	r4, r0, #3
 8001f00:	19a0      	adds	r0, r4, r6
 8001f02:	eb43 0107 	adc.w	r1, r3, r7
 8001f06:	028b      	lsls	r3, r1, #10
 8001f08:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001f0c:	0284      	lsls	r4, r0, #10
 8001f0e:	4620      	mov	r0, r4
 8001f10:	4619      	mov	r1, r3
 8001f12:	2300      	movs	r3, #0
 8001f14:	f7fe fea8 	bl	8000c68 <__aeabi_uldivmod>
 8001f18:	e7d2      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 8001f1a:	4803      	ldr	r0, [pc, #12]	; (8001f28 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40023800 	.word	0x40023800
 8001f24:	00f42400 	.word	0x00f42400
 8001f28:	00b71b00 	.word	0x00b71b00

08001f2c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001f2c:	2800      	cmp	r0, #0
 8001f2e:	f000 809d 	beq.w	800206c <HAL_RCC_ClockConfig+0x140>
{
 8001f32:	b570      	push	{r4, r5, r6, lr}
 8001f34:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f36:	4b4f      	ldr	r3, [pc, #316]	; (8002074 <HAL_RCC_ClockConfig+0x148>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	428b      	cmp	r3, r1
 8001f40:	d209      	bcs.n	8001f56 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f42:	b2cb      	uxtb	r3, r1
 8001f44:	4a4b      	ldr	r2, [pc, #300]	; (8002074 <HAL_RCC_ClockConfig+0x148>)
 8001f46:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f48:	6813      	ldr	r3, [r2, #0]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	428b      	cmp	r3, r1
 8001f50:	d001      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8001f52:	2001      	movs	r0, #1
}
 8001f54:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f56:	6823      	ldr	r3, [r4, #0]
 8001f58:	f013 0f02 	tst.w	r3, #2
 8001f5c:	d017      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5e:	f013 0f04 	tst.w	r3, #4
 8001f62:	d004      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f64:	4a44      	ldr	r2, [pc, #272]	; (8002078 <HAL_RCC_ClockConfig+0x14c>)
 8001f66:	6893      	ldr	r3, [r2, #8]
 8001f68:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f6c:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6e:	6823      	ldr	r3, [r4, #0]
 8001f70:	f013 0f08 	tst.w	r3, #8
 8001f74:	d004      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f76:	4a40      	ldr	r2, [pc, #256]	; (8002078 <HAL_RCC_ClockConfig+0x14c>)
 8001f78:	6893      	ldr	r3, [r2, #8]
 8001f7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f7e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f80:	4a3d      	ldr	r2, [pc, #244]	; (8002078 <HAL_RCC_ClockConfig+0x14c>)
 8001f82:	6893      	ldr	r3, [r2, #8]
 8001f84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f88:	68a0      	ldr	r0, [r4, #8]
 8001f8a:	4303      	orrs	r3, r0
 8001f8c:	6093      	str	r3, [r2, #8]
 8001f8e:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f90:	6823      	ldr	r3, [r4, #0]
 8001f92:	f013 0f01 	tst.w	r3, #1
 8001f96:	d032      	beq.n	8001ffe <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f98:	6863      	ldr	r3, [r4, #4]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d021      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f9e:	1e9a      	subs	r2, r3, #2
 8001fa0:	2a01      	cmp	r2, #1
 8001fa2:	d925      	bls.n	8001ff0 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa4:	4a34      	ldr	r2, [pc, #208]	; (8002078 <HAL_RCC_ClockConfig+0x14c>)
 8001fa6:	6812      	ldr	r2, [r2, #0]
 8001fa8:	f012 0f02 	tst.w	r2, #2
 8001fac:	d060      	beq.n	8002070 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fae:	4932      	ldr	r1, [pc, #200]	; (8002078 <HAL_RCC_ClockConfig+0x14c>)
 8001fb0:	688a      	ldr	r2, [r1, #8]
 8001fb2:	f022 0203 	bic.w	r2, r2, #3
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001fba:	f7ff f81f 	bl	8000ffc <HAL_GetTick>
 8001fbe:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc0:	4b2d      	ldr	r3, [pc, #180]	; (8002078 <HAL_RCC_ClockConfig+0x14c>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 030c 	and.w	r3, r3, #12
 8001fc8:	6862      	ldr	r2, [r4, #4]
 8001fca:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001fce:	d016      	beq.n	8001ffe <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd0:	f7ff f814 	bl	8000ffc <HAL_GetTick>
 8001fd4:	1b80      	subs	r0, r0, r6
 8001fd6:	f241 3388 	movw	r3, #5000	; 0x1388
 8001fda:	4298      	cmp	r0, r3
 8001fdc:	d9f0      	bls.n	8001fc0 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8001fde:	2003      	movs	r0, #3
 8001fe0:	e7b8      	b.n	8001f54 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe2:	4a25      	ldr	r2, [pc, #148]	; (8002078 <HAL_RCC_ClockConfig+0x14c>)
 8001fe4:	6812      	ldr	r2, [r2, #0]
 8001fe6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001fea:	d1e0      	bne.n	8001fae <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001fec:	2001      	movs	r0, #1
 8001fee:	e7b1      	b.n	8001f54 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff0:	4a21      	ldr	r2, [pc, #132]	; (8002078 <HAL_RCC_ClockConfig+0x14c>)
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001ff8:	d1d9      	bne.n	8001fae <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001ffa:	2001      	movs	r0, #1
 8001ffc:	e7aa      	b.n	8001f54 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ffe:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <HAL_RCC_ClockConfig+0x148>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	42ab      	cmp	r3, r5
 8002008:	d909      	bls.n	800201e <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200a:	b2ea      	uxtb	r2, r5
 800200c:	4b19      	ldr	r3, [pc, #100]	; (8002074 <HAL_RCC_ClockConfig+0x148>)
 800200e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	42ab      	cmp	r3, r5
 8002018:	d001      	beq.n	800201e <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 800201a:	2001      	movs	r0, #1
 800201c:	e79a      	b.n	8001f54 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201e:	6823      	ldr	r3, [r4, #0]
 8002020:	f013 0f04 	tst.w	r3, #4
 8002024:	d006      	beq.n	8002034 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002026:	4a14      	ldr	r2, [pc, #80]	; (8002078 <HAL_RCC_ClockConfig+0x14c>)
 8002028:	6893      	ldr	r3, [r2, #8]
 800202a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800202e:	68e1      	ldr	r1, [r4, #12]
 8002030:	430b      	orrs	r3, r1
 8002032:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002034:	6823      	ldr	r3, [r4, #0]
 8002036:	f013 0f08 	tst.w	r3, #8
 800203a:	d007      	beq.n	800204c <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800203c:	4a0e      	ldr	r2, [pc, #56]	; (8002078 <HAL_RCC_ClockConfig+0x14c>)
 800203e:	6893      	ldr	r3, [r2, #8]
 8002040:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002044:	6921      	ldr	r1, [r4, #16]
 8002046:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800204a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800204c:	f7ff ff1a 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 8002050:	4b09      	ldr	r3, [pc, #36]	; (8002078 <HAL_RCC_ClockConfig+0x14c>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002058:	4a08      	ldr	r2, [pc, #32]	; (800207c <HAL_RCC_ClockConfig+0x150>)
 800205a:	5cd3      	ldrb	r3, [r2, r3]
 800205c:	40d8      	lsrs	r0, r3
 800205e:	4b08      	ldr	r3, [pc, #32]	; (8002080 <HAL_RCC_ClockConfig+0x154>)
 8002060:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002062:	2000      	movs	r0, #0
 8002064:	f7fe ff80 	bl	8000f68 <HAL_InitTick>
  return HAL_OK;
 8002068:	2000      	movs	r0, #0
 800206a:	e773      	b.n	8001f54 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 800206c:	2001      	movs	r0, #1
}
 800206e:	4770      	bx	lr
        return HAL_ERROR;
 8002070:	2001      	movs	r0, #1
 8002072:	e76f      	b.n	8001f54 <HAL_RCC_ClockConfig+0x28>
 8002074:	40023c00 	.word	0x40023c00
 8002078:	40023800 	.word	0x40023800
 800207c:	08006e90 	.word	0x08006e90
 8002080:	20000008 	.word	0x20000008

08002084 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002084:	4b01      	ldr	r3, [pc, #4]	; (800208c <HAL_RCC_GetHCLKFreq+0x8>)
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	20000008 	.word	0x20000008

08002090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002090:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002092:	f7ff fff7 	bl	8002084 <HAL_RCC_GetHCLKFreq>
 8002096:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800209e:	4a03      	ldr	r2, [pc, #12]	; (80020ac <HAL_RCC_GetPCLK1Freq+0x1c>)
 80020a0:	5cd3      	ldrb	r3, [r2, r3]
}
 80020a2:	40d8      	lsrs	r0, r3
 80020a4:	bd08      	pop	{r3, pc}
 80020a6:	bf00      	nop
 80020a8:	40023800 	.word	0x40023800
 80020ac:	08006ea0 	.word	0x08006ea0

080020b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020b0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020b2:	f7ff ffe7 	bl	8002084 <HAL_RCC_GetHCLKFreq>
 80020b6:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80020be:	4a03      	ldr	r2, [pc, #12]	; (80020cc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80020c0:	5cd3      	ldrb	r3, [r2, r3]
}
 80020c2:	40d8      	lsrs	r0, r3
 80020c4:	bd08      	pop	{r3, pc}
 80020c6:	bf00      	nop
 80020c8:	40023800 	.word	0x40023800
 80020cc:	08006ea0 	.word	0x08006ea0

080020d0 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80020d0:	2800      	cmp	r0, #0
 80020d2:	d03b      	beq.n	800214c <HAL_SPI_Init+0x7c>
{
 80020d4:	b510      	push	{r4, lr}
 80020d6:	4604      	mov	r4, r0
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020d8:	2300      	movs	r3, #0
 80020da:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 80020dc:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d02e      	beq.n	8002142 <HAL_SPI_Init+0x72>

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020e4:	2302      	movs	r3, #2
 80020e6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020ea:	6822      	ldr	r2, [r4, #0]
 80020ec:	6813      	ldr	r3, [r2, #0]
 80020ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020f2:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80020f4:	6863      	ldr	r3, [r4, #4]
 80020f6:	68a2      	ldr	r2, [r4, #8]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	68e2      	ldr	r2, [r4, #12]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	6922      	ldr	r2, [r4, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	6962      	ldr	r2, [r4, #20]
 8002104:	4313      	orrs	r3, r2
 8002106:	69a2      	ldr	r2, [r4, #24]
 8002108:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800210c:	4313      	orrs	r3, r2
 800210e:	69e2      	ldr	r2, [r4, #28]
 8002110:	4313      	orrs	r3, r2
 8002112:	6a22      	ldr	r2, [r4, #32]
 8002114:	4313      	orrs	r3, r2
 8002116:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002118:	6822      	ldr	r2, [r4, #0]
 800211a:	430b      	orrs	r3, r1
 800211c:	6013      	str	r3, [r2, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800211e:	8b63      	ldrh	r3, [r4, #26]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002126:	6822      	ldr	r2, [r4, #0]
 8002128:	430b      	orrs	r3, r1
 800212a:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800212c:	6822      	ldr	r2, [r4, #0]
 800212e:	69d3      	ldr	r3, [r2, #28]
 8002130:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002134:	61d3      	str	r3, [r2, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002136:	2000      	movs	r0, #0
 8002138:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800213a:	2301      	movs	r3, #1
 800213c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 8002140:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002142:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002146:	f001 fe5f 	bl	8003e08 <HAL_SPI_MspInit>
 800214a:	e7cb      	b.n	80020e4 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 800214c:	2001      	movs	r0, #1
}
 800214e:	4770      	bx	lr

08002150 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002150:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002152:	6a03      	ldr	r3, [r0, #32]
 8002154:	f023 0301 	bic.w	r3, r3, #1
 8002158:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800215a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800215c:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800215e:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002160:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002164:	680d      	ldr	r5, [r1, #0]
 8002166:	ea45 0604 	orr.w	r6, r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800216a:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800216e:	688b      	ldr	r3, [r1, #8]
 8002170:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002172:	4d0c      	ldr	r5, [pc, #48]	; (80021a4 <TIM_OC1_SetConfig+0x54>)
 8002174:	42a8      	cmp	r0, r5
 8002176:	d002      	beq.n	800217e <TIM_OC1_SetConfig+0x2e>
 8002178:	4c0b      	ldr	r4, [pc, #44]	; (80021a8 <TIM_OC1_SetConfig+0x58>)
 800217a:	42a0      	cmp	r0, r4
 800217c:	d10b      	bne.n	8002196 <TIM_OC1_SetConfig+0x46>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800217e:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002182:	68cd      	ldr	r5, [r1, #12]
 8002184:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002186:	f023 0304 	bic.w	r3, r3, #4
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800218a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800218e:	694d      	ldr	r5, [r1, #20]
 8002190:	4315      	orrs	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002192:	698a      	ldr	r2, [r1, #24]
 8002194:	432a      	orrs	r2, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002196:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002198:	6186      	str	r6, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800219a:	684a      	ldr	r2, [r1, #4]
 800219c:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800219e:	6203      	str	r3, [r0, #32]
} 
 80021a0:	bc70      	pop	{r4, r5, r6}
 80021a2:	4770      	bx	lr
 80021a4:	40010000 	.word	0x40010000
 80021a8:	40010400 	.word	0x40010400

080021ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021ac:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021ae:	6a03      	ldr	r3, [r0, #32]
 80021b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021b4:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021b6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80021b8:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021ba:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80021bc:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021c0:	680d      	ldr	r5, [r1, #0]
 80021c2:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80021c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80021c8:	688d      	ldr	r5, [r1, #8]
 80021ca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80021ce:	4d0e      	ldr	r5, [pc, #56]	; (8002208 <TIM_OC3_SetConfig+0x5c>)
 80021d0:	42a8      	cmp	r0, r5
 80021d2:	d003      	beq.n	80021dc <TIM_OC3_SetConfig+0x30>
 80021d4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80021d8:	42a8      	cmp	r0, r5
 80021da:	d10e      	bne.n	80021fa <TIM_OC3_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80021dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80021e0:	68cd      	ldr	r5, [r1, #12]
 80021e2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80021e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80021ea:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80021ee:	694d      	ldr	r5, [r1, #20]
 80021f0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80021f4:	698d      	ldr	r5, [r1, #24]
 80021f6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021fa:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80021fc:	61c4      	str	r4, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80021fe:	684a      	ldr	r2, [r1, #4]
 8002200:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002202:	6203      	str	r3, [r0, #32]
}
 8002204:	bc30      	pop	{r4, r5}
 8002206:	4770      	bx	lr
 8002208:	40010000 	.word	0x40010000

0800220c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800220c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800220e:	6a03      	ldr	r3, [r0, #32]
 8002210:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002214:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002216:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002218:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800221a:	69c2      	ldr	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800221c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002220:	680d      	ldr	r5, [r1, #0]
 8002222:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002226:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800222a:	688d      	ldr	r5, [r1, #8]
 800222c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002230:	4d09      	ldr	r5, [pc, #36]	; (8002258 <TIM_OC4_SetConfig+0x4c>)
 8002232:	42a8      	cmp	r0, r5
 8002234:	d003      	beq.n	800223e <TIM_OC4_SetConfig+0x32>
 8002236:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800223a:	42a8      	cmp	r0, r5
 800223c:	d104      	bne.n	8002248 <TIM_OC4_SetConfig+0x3c>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800223e:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002242:	694d      	ldr	r5, [r1, #20]
 8002244:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002248:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800224a:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800224c:	684a      	ldr	r2, [r1, #4]
 800224e:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002250:	6203      	str	r3, [r0, #32]
}
 8002252:	bc30      	pop	{r4, r5}
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40010000 	.word	0x40010000

0800225c <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800225c:	6802      	ldr	r2, [r0, #0]
 800225e:	68d3      	ldr	r3, [r2, #12]
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8002266:	6802      	ldr	r2, [r0, #0]
 8002268:	6813      	ldr	r3, [r2, #0]
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	6013      	str	r3, [r2, #0]
}
 8002270:	2000      	movs	r0, #0
 8002272:	4770      	bx	lr

08002274 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8002274:	4770      	bx	lr

08002276 <HAL_TIM_IC_CaptureCallback>:
}
 8002276:	4770      	bx	lr

08002278 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8002278:	4770      	bx	lr

0800227a <HAL_TIM_TriggerCallback>:
}
 800227a:	4770      	bx	lr

0800227c <HAL_TIM_IRQHandler>:
{
 800227c:	b510      	push	{r4, lr}
 800227e:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002280:	6803      	ldr	r3, [r0, #0]
 8002282:	691a      	ldr	r2, [r3, #16]
 8002284:	f012 0f02 	tst.w	r2, #2
 8002288:	d011      	beq.n	80022ae <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800228a:	68da      	ldr	r2, [r3, #12]
 800228c:	f012 0f02 	tst.w	r2, #2
 8002290:	d00d      	beq.n	80022ae <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002292:	f06f 0202 	mvn.w	r2, #2
 8002296:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002298:	2301      	movs	r3, #1
 800229a:	7603      	strb	r3, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800229c:	6803      	ldr	r3, [r0, #0]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	f013 0f03 	tst.w	r3, #3
 80022a4:	d070      	beq.n	8002388 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80022a6:	f7ff ffe6 	bl	8002276 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022aa:	2300      	movs	r3, #0
 80022ac:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022ae:	6823      	ldr	r3, [r4, #0]
 80022b0:	691a      	ldr	r2, [r3, #16]
 80022b2:	f012 0f04 	tst.w	r2, #4
 80022b6:	d012      	beq.n	80022de <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	f012 0f04 	tst.w	r2, #4
 80022be:	d00e      	beq.n	80022de <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022c0:	f06f 0204 	mvn.w	r2, #4
 80022c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022c6:	2302      	movs	r3, #2
 80022c8:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022ca:	6823      	ldr	r3, [r4, #0]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	f413 7f40 	tst.w	r3, #768	; 0x300
 80022d2:	d05f      	beq.n	8002394 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80022d4:	4620      	mov	r0, r4
 80022d6:	f7ff ffce 	bl	8002276 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022da:	2300      	movs	r3, #0
 80022dc:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022de:	6823      	ldr	r3, [r4, #0]
 80022e0:	691a      	ldr	r2, [r3, #16]
 80022e2:	f012 0f08 	tst.w	r2, #8
 80022e6:	d012      	beq.n	800230e <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80022e8:	68da      	ldr	r2, [r3, #12]
 80022ea:	f012 0f08 	tst.w	r2, #8
 80022ee:	d00e      	beq.n	800230e <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022f0:	f06f 0208 	mvn.w	r2, #8
 80022f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022f6:	2304      	movs	r3, #4
 80022f8:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022fa:	6823      	ldr	r3, [r4, #0]
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	f013 0f03 	tst.w	r3, #3
 8002302:	d04e      	beq.n	80023a2 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8002304:	4620      	mov	r0, r4
 8002306:	f7ff ffb6 	bl	8002276 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800230a:	2300      	movs	r3, #0
 800230c:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800230e:	6823      	ldr	r3, [r4, #0]
 8002310:	691a      	ldr	r2, [r3, #16]
 8002312:	f012 0f10 	tst.w	r2, #16
 8002316:	d012      	beq.n	800233e <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002318:	68da      	ldr	r2, [r3, #12]
 800231a:	f012 0f10 	tst.w	r2, #16
 800231e:	d00e      	beq.n	800233e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002320:	f06f 0210 	mvn.w	r2, #16
 8002324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002326:	2308      	movs	r3, #8
 8002328:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800232a:	6823      	ldr	r3, [r4, #0]
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002332:	d03d      	beq.n	80023b0 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8002334:	4620      	mov	r0, r4
 8002336:	f7ff ff9e 	bl	8002276 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800233a:	2300      	movs	r3, #0
 800233c:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800233e:	6823      	ldr	r3, [r4, #0]
 8002340:	691a      	ldr	r2, [r3, #16]
 8002342:	f012 0f01 	tst.w	r2, #1
 8002346:	d003      	beq.n	8002350 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	f012 0f01 	tst.w	r2, #1
 800234e:	d136      	bne.n	80023be <HAL_TIM_IRQHandler+0x142>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002350:	6823      	ldr	r3, [r4, #0]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002358:	d003      	beq.n	8002362 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800235a:	68da      	ldr	r2, [r3, #12]
 800235c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002360:	d134      	bne.n	80023cc <HAL_TIM_IRQHandler+0x150>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002362:	6823      	ldr	r3, [r4, #0]
 8002364:	691a      	ldr	r2, [r3, #16]
 8002366:	f012 0f40 	tst.w	r2, #64	; 0x40
 800236a:	d003      	beq.n	8002374 <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002372:	d132      	bne.n	80023da <HAL_TIM_IRQHandler+0x15e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002374:	6823      	ldr	r3, [r4, #0]
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	f012 0f20 	tst.w	r2, #32
 800237c:	d003      	beq.n	8002386 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	f012 0f20 	tst.w	r2, #32
 8002384:	d130      	bne.n	80023e8 <HAL_TIM_IRQHandler+0x16c>
}
 8002386:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002388:	f7ff ff74 	bl	8002274 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800238c:	4620      	mov	r0, r4
 800238e:	f7ff ff73 	bl	8002278 <HAL_TIM_PWM_PulseFinishedCallback>
 8002392:	e78a      	b.n	80022aa <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002394:	4620      	mov	r0, r4
 8002396:	f7ff ff6d 	bl	8002274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800239a:	4620      	mov	r0, r4
 800239c:	f7ff ff6c 	bl	8002278 <HAL_TIM_PWM_PulseFinishedCallback>
 80023a0:	e79b      	b.n	80022da <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023a2:	4620      	mov	r0, r4
 80023a4:	f7ff ff66 	bl	8002274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80023a8:	4620      	mov	r0, r4
 80023aa:	f7ff ff65 	bl	8002278 <HAL_TIM_PWM_PulseFinishedCallback>
 80023ae:	e7ac      	b.n	800230a <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023b0:	4620      	mov	r0, r4
 80023b2:	f7ff ff5f 	bl	8002274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b6:	4620      	mov	r0, r4
 80023b8:	f7ff ff5e 	bl	8002278 <HAL_TIM_PWM_PulseFinishedCallback>
 80023bc:	e7bd      	b.n	800233a <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023be:	f06f 0201 	mvn.w	r2, #1
 80023c2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80023c4:	4620      	mov	r0, r4
 80023c6:	f001 fa1f 	bl	8003808 <HAL_TIM_PeriodElapsedCallback>
 80023ca:	e7c1      	b.n	8002350 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023d0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80023d2:	4620      	mov	r0, r4
 80023d4:	f000 f9c4 	bl	8002760 <HAL_TIMEx_BreakCallback>
 80023d8:	e7c3      	b.n	8002362 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023de:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80023e0:	4620      	mov	r0, r4
 80023e2:	f7ff ff4a 	bl	800227a <HAL_TIM_TriggerCallback>
 80023e6:	e7c5      	b.n	8002374 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023e8:	f06f 0220 	mvn.w	r2, #32
 80023ec:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80023ee:	4620      	mov	r0, r4
 80023f0:	f000 f9b5 	bl	800275e <HAL_TIMEx_CommutationCallback>
}
 80023f4:	e7c7      	b.n	8002386 <HAL_TIM_IRQHandler+0x10a>
	...

080023f8 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80023f8:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80023fa:	4a2e      	ldr	r2, [pc, #184]	; (80024b4 <TIM_Base_SetConfig+0xbc>)
 80023fc:	4290      	cmp	r0, r2
 80023fe:	d012      	beq.n	8002426 <TIM_Base_SetConfig+0x2e>
 8002400:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002404:	d00f      	beq.n	8002426 <TIM_Base_SetConfig+0x2e>
 8002406:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800240a:	4290      	cmp	r0, r2
 800240c:	d00b      	beq.n	8002426 <TIM_Base_SetConfig+0x2e>
 800240e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002412:	4290      	cmp	r0, r2
 8002414:	d007      	beq.n	8002426 <TIM_Base_SetConfig+0x2e>
 8002416:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800241a:	4290      	cmp	r0, r2
 800241c:	d003      	beq.n	8002426 <TIM_Base_SetConfig+0x2e>
 800241e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002422:	4290      	cmp	r0, r2
 8002424:	d103      	bne.n	800242e <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800242a:	684a      	ldr	r2, [r1, #4]
 800242c:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800242e:	4a21      	ldr	r2, [pc, #132]	; (80024b4 <TIM_Base_SetConfig+0xbc>)
 8002430:	4290      	cmp	r0, r2
 8002432:	d02a      	beq.n	800248a <TIM_Base_SetConfig+0x92>
 8002434:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002438:	d027      	beq.n	800248a <TIM_Base_SetConfig+0x92>
 800243a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800243e:	4290      	cmp	r0, r2
 8002440:	d023      	beq.n	800248a <TIM_Base_SetConfig+0x92>
 8002442:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002446:	4290      	cmp	r0, r2
 8002448:	d01f      	beq.n	800248a <TIM_Base_SetConfig+0x92>
 800244a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800244e:	4290      	cmp	r0, r2
 8002450:	d01b      	beq.n	800248a <TIM_Base_SetConfig+0x92>
 8002452:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002456:	4290      	cmp	r0, r2
 8002458:	d017      	beq.n	800248a <TIM_Base_SetConfig+0x92>
 800245a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800245e:	4290      	cmp	r0, r2
 8002460:	d013      	beq.n	800248a <TIM_Base_SetConfig+0x92>
 8002462:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002466:	4290      	cmp	r0, r2
 8002468:	d00f      	beq.n	800248a <TIM_Base_SetConfig+0x92>
 800246a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800246e:	4290      	cmp	r0, r2
 8002470:	d00b      	beq.n	800248a <TIM_Base_SetConfig+0x92>
 8002472:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002476:	4290      	cmp	r0, r2
 8002478:	d007      	beq.n	800248a <TIM_Base_SetConfig+0x92>
 800247a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800247e:	4290      	cmp	r0, r2
 8002480:	d003      	beq.n	800248a <TIM_Base_SetConfig+0x92>
 8002482:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002486:	4290      	cmp	r0, r2
 8002488:	d103      	bne.n	8002492 <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 800248a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800248e:	68ca      	ldr	r2, [r1, #12]
 8002490:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002492:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002494:	688b      	ldr	r3, [r1, #8]
 8002496:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002498:	680b      	ldr	r3, [r1, #0]
 800249a:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <TIM_Base_SetConfig+0xbc>)
 800249e:	4298      	cmp	r0, r3
 80024a0:	d003      	beq.n	80024aa <TIM_Base_SetConfig+0xb2>
 80024a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024a6:	4298      	cmp	r0, r3
 80024a8:	d101      	bne.n	80024ae <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
 80024aa:	690b      	ldr	r3, [r1, #16]
 80024ac:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80024ae:	2301      	movs	r3, #1
 80024b0:	6143      	str	r3, [r0, #20]
}
 80024b2:	4770      	bx	lr
 80024b4:	40010000 	.word	0x40010000

080024b8 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 80024b8:	b1a8      	cbz	r0, 80024e6 <HAL_TIM_Base_Init+0x2e>
{ 
 80024ba:	b510      	push	{r4, lr}
 80024bc:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 80024be:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80024c2:	b15b      	cbz	r3, 80024dc <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 80024c4:	2302      	movs	r3, #2
 80024c6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80024ca:	1d21      	adds	r1, r4, #4
 80024cc:	6820      	ldr	r0, [r4, #0]
 80024ce:	f7ff ff93 	bl	80023f8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80024d2:	2301      	movs	r3, #1
 80024d4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80024d8:	2000      	movs	r0, #0
}
 80024da:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80024dc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80024e0:	f001 fe14 	bl	800410c <HAL_TIM_Base_MspInit>
 80024e4:	e7ee      	b.n	80024c4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80024e6:	2001      	movs	r0, #1
}
 80024e8:	4770      	bx	lr

080024ea <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 80024ea:	b1a8      	cbz	r0, 8002518 <HAL_TIM_PWM_Init+0x2e>
{
 80024ec:	b510      	push	{r4, lr}
 80024ee:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 80024f0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80024f4:	b15b      	cbz	r3, 800250e <HAL_TIM_PWM_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;  
 80024f6:	2302      	movs	r3, #2
 80024f8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80024fc:	1d21      	adds	r1, r4, #4
 80024fe:	6820      	ldr	r0, [r4, #0]
 8002500:	f7ff ff7a 	bl	80023f8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002504:	2301      	movs	r3, #1
 8002506:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800250a:	2000      	movs	r0, #0
}  
 800250c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800250e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8002512:	f001 fdd1 	bl	80040b8 <HAL_TIM_PWM_MspInit>
 8002516:	e7ee      	b.n	80024f6 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8002518:	2001      	movs	r0, #1
}  
 800251a:	4770      	bx	lr

0800251c <TIM_OC2_SetConfig>:
{
 800251c:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800251e:	6a03      	ldr	r3, [r0, #32]
 8002520:	f023 0310 	bic.w	r3, r3, #16
 8002524:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002526:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8002528:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800252a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800252c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002530:	680d      	ldr	r5, [r1, #0]
 8002532:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8002536:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800253a:	688d      	ldr	r5, [r1, #8]
 800253c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002540:	4d0e      	ldr	r5, [pc, #56]	; (800257c <TIM_OC2_SetConfig+0x60>)
 8002542:	42a8      	cmp	r0, r5
 8002544:	d003      	beq.n	800254e <TIM_OC2_SetConfig+0x32>
 8002546:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800254a:	42a8      	cmp	r0, r5
 800254c:	d10e      	bne.n	800256c <TIM_OC2_SetConfig+0x50>
    tmpccer &= ~TIM_CCER_CC2NP;
 800254e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002552:	68cd      	ldr	r5, [r1, #12]
 8002554:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800255c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002560:	694d      	ldr	r5, [r1, #20]
 8002562:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002566:	698d      	ldr	r5, [r1, #24]
 8002568:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800256c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800256e:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002570:	684a      	ldr	r2, [r1, #4]
 8002572:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002574:	6203      	str	r3, [r0, #32]
}
 8002576:	bc30      	pop	{r4, r5}
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	40010000 	.word	0x40010000

08002580 <HAL_TIM_PWM_ConfigChannel>:
{
 8002580:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002582:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002586:	2b01      	cmp	r3, #1
 8002588:	d066      	beq.n	8002658 <HAL_TIM_PWM_ConfigChannel+0xd8>
 800258a:	460d      	mov	r5, r1
 800258c:	4604      	mov	r4, r0
 800258e:	2301      	movs	r3, #1
 8002590:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8002594:	2302      	movs	r3, #2
 8002596:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  switch (Channel)
 800259a:	2a0c      	cmp	r2, #12
 800259c:	d81a      	bhi.n	80025d4 <HAL_TIM_PWM_ConfigChannel+0x54>
 800259e:	e8df f002 	tbb	[pc, r2]
 80025a2:	1907      	.short	0x1907
 80025a4:	19201919 	.word	0x19201919
 80025a8:	19341919 	.word	0x19341919
 80025ac:	1919      	.short	0x1919
 80025ae:	47          	.byte	0x47
 80025af:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025b0:	6800      	ldr	r0, [r0, #0]
 80025b2:	f7ff fdcd 	bl	8002150 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025b6:	6822      	ldr	r2, [r4, #0]
 80025b8:	6993      	ldr	r3, [r2, #24]
 80025ba:	f043 0308 	orr.w	r3, r3, #8
 80025be:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025c0:	6822      	ldr	r2, [r4, #0]
 80025c2:	6993      	ldr	r3, [r2, #24]
 80025c4:	f023 0304 	bic.w	r3, r3, #4
 80025c8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025ca:	6822      	ldr	r2, [r4, #0]
 80025cc:	6993      	ldr	r3, [r2, #24]
 80025ce:	6929      	ldr	r1, [r5, #16]
 80025d0:	430b      	orrs	r3, r1
 80025d2:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 80025d4:	2301      	movs	r3, #1
 80025d6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80025da:	2000      	movs	r0, #0
 80025dc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 80025e0:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025e2:	6800      	ldr	r0, [r0, #0]
 80025e4:	f7ff ff9a 	bl	800251c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025e8:	6822      	ldr	r2, [r4, #0]
 80025ea:	6993      	ldr	r3, [r2, #24]
 80025ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025f0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025f2:	6822      	ldr	r2, [r4, #0]
 80025f4:	6993      	ldr	r3, [r2, #24]
 80025f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025fa:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025fc:	6822      	ldr	r2, [r4, #0]
 80025fe:	6993      	ldr	r3, [r2, #24]
 8002600:	6929      	ldr	r1, [r5, #16]
 8002602:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002606:	6193      	str	r3, [r2, #24]
    break;
 8002608:	e7e4      	b.n	80025d4 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800260a:	6800      	ldr	r0, [r0, #0]
 800260c:	f7ff fdce 	bl	80021ac <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002610:	6822      	ldr	r2, [r4, #0]
 8002612:	69d3      	ldr	r3, [r2, #28]
 8002614:	f043 0308 	orr.w	r3, r3, #8
 8002618:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800261a:	6822      	ldr	r2, [r4, #0]
 800261c:	69d3      	ldr	r3, [r2, #28]
 800261e:	f023 0304 	bic.w	r3, r3, #4
 8002622:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002624:	6822      	ldr	r2, [r4, #0]
 8002626:	69d3      	ldr	r3, [r2, #28]
 8002628:	6929      	ldr	r1, [r5, #16]
 800262a:	430b      	orrs	r3, r1
 800262c:	61d3      	str	r3, [r2, #28]
    break;
 800262e:	e7d1      	b.n	80025d4 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002630:	6800      	ldr	r0, [r0, #0]
 8002632:	f7ff fdeb 	bl	800220c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002636:	6822      	ldr	r2, [r4, #0]
 8002638:	69d3      	ldr	r3, [r2, #28]
 800263a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800263e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002640:	6822      	ldr	r2, [r4, #0]
 8002642:	69d3      	ldr	r3, [r2, #28]
 8002644:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002648:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800264a:	6822      	ldr	r2, [r4, #0]
 800264c:	69d3      	ldr	r3, [r2, #28]
 800264e:	6929      	ldr	r1, [r5, #16]
 8002650:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002654:	61d3      	str	r3, [r2, #28]
    break;
 8002656:	e7bd      	b.n	80025d4 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8002658:	2002      	movs	r0, #2
 800265a:	e7c1      	b.n	80025e0 <HAL_TIM_PWM_ConfigChannel+0x60>

0800265c <TIM_CCxChannelCmd>:
{
 800265c:	b410      	push	{r4}
  tmp = TIM_CCER_CC1E << Channel;
 800265e:	2301      	movs	r3, #1
 8002660:	fa03 f401 	lsl.w	r4, r3, r1
  TIMx->CCER &= ~tmp;
 8002664:	6a03      	ldr	r3, [r0, #32]
 8002666:	ea23 0304 	bic.w	r3, r3, r4
 800266a:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800266c:	6a03      	ldr	r3, [r0, #32]
 800266e:	408a      	lsls	r2, r1
 8002670:	4313      	orrs	r3, r2
 8002672:	6203      	str	r3, [r0, #32]
}
 8002674:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <HAL_TIM_PWM_Start>:
{
 800267c:	b510      	push	{r4, lr}
 800267e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002680:	2201      	movs	r2, #1
 8002682:	6800      	ldr	r0, [r0, #0]
 8002684:	f7ff ffea 	bl	800265c <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8002688:	6823      	ldr	r3, [r4, #0]
 800268a:	4a09      	ldr	r2, [pc, #36]	; (80026b0 <HAL_TIM_PWM_Start+0x34>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d003      	beq.n	8002698 <HAL_TIM_PWM_Start+0x1c>
 8002690:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002694:	4293      	cmp	r3, r2
 8002696:	d103      	bne.n	80026a0 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8002698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800269a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800269e:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80026a0:	6822      	ldr	r2, [r4, #0]
 80026a2:	6813      	ldr	r3, [r2, #0]
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	6013      	str	r3, [r2, #0]
} 
 80026aa:	2000      	movs	r0, #0
 80026ac:	bd10      	pop	{r4, pc}
 80026ae:	bf00      	nop
 80026b0:	40010000 	.word	0x40010000

080026b4 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80026b4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d022      	beq.n	8002702 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
{
 80026bc:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80026be:	2201      	movs	r2, #1
 80026c0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 80026c4:	2302      	movs	r3, #2
 80026c6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80026ca:	6804      	ldr	r4, [r0, #0]
 80026cc:	6863      	ldr	r3, [r4, #4]
 80026ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026d2:	6063      	str	r3, [r4, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80026d4:	6804      	ldr	r4, [r0, #0]
 80026d6:	6863      	ldr	r3, [r4, #4]
 80026d8:	680d      	ldr	r5, [r1, #0]
 80026da:	432b      	orrs	r3, r5
 80026dc:	6063      	str	r3, [r4, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80026de:	6804      	ldr	r4, [r0, #0]
 80026e0:	68a3      	ldr	r3, [r4, #8]
 80026e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026e6:	60a3      	str	r3, [r4, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80026e8:	6804      	ldr	r4, [r0, #0]
 80026ea:	68a3      	ldr	r3, [r4, #8]
 80026ec:	6849      	ldr	r1, [r1, #4]
 80026ee:	430b      	orrs	r3, r1
 80026f0:	60a3      	str	r3, [r4, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80026f2:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80026f6:	2300      	movs	r3, #0
 80026f8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 80026fc:	4618      	mov	r0, r3
} 
 80026fe:	bc30      	pop	{r4, r5}
 8002700:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002702:	2002      	movs	r0, #2
} 
 8002704:	4770      	bx	lr

08002706 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002706:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800270a:	2b01      	cmp	r3, #1
 800270c:	d025      	beq.n	800275a <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 800270e:	2301      	movs	r3, #1
 8002710:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002714:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800271a:	688a      	ldr	r2, [r1, #8]
 800271c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800271e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002722:	684a      	ldr	r2, [r1, #4]
 8002724:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002726:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800272a:	680a      	ldr	r2, [r1, #0]
 800272c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800272e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002732:	690a      	ldr	r2, [r1, #16]
 8002734:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002736:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800273a:	694a      	ldr	r2, [r1, #20]
 800273c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800273e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002742:	698a      	ldr	r2, [r1, #24]
 8002744:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002746:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800274a:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800274c:	6802      	ldr	r2, [r0, #0]
 800274e:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8002750:	2300      	movs	r3, #0
 8002752:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8002756:	4618      	mov	r0, r3
 8002758:	4770      	bx	lr
  __HAL_LOCK(htim);
 800275a:	2002      	movs	r0, #2
}
 800275c:	4770      	bx	lr

0800275e <HAL_TIMEx_CommutationCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800275e:	4770      	bx	lr

08002760 <HAL_TIMEx_BreakCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002760:	4770      	bx	lr

08002762 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002762:	6802      	ldr	r2, [r0, #0]
 8002764:	68d3      	ldr	r3, [r2, #12]
 8002766:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800276a:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800276c:	6802      	ldr	r2, [r0, #0]
 800276e:	6953      	ldr	r3, [r2, #20]
 8002770:	f023 0301 	bic.w	r3, r3, #1
 8002774:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002776:	2320      	movs	r3, #32
 8002778:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 800277c:	4770      	bx	lr

0800277e <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800277e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b21      	cmp	r3, #33	; 0x21
 8002786:	d12a      	bne.n	80027de <UART_Transmit_IT+0x60>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002788:	6883      	ldr	r3, [r0, #8]
 800278a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800278e:	d016      	beq.n	80027be <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002790:	6a03      	ldr	r3, [r0, #32]
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	6202      	str	r2, [r0, #32]
 8002796:	781a      	ldrb	r2, [r3, #0]
 8002798:	6803      	ldr	r3, [r0, #0]
 800279a:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 800279c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800279e:	3b01      	subs	r3, #1
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	84c3      	strh	r3, [r0, #38]	; 0x26
 80027a4:	b9eb      	cbnz	r3, 80027e2 <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80027a6:	6802      	ldr	r2, [r0, #0]
 80027a8:	68d3      	ldr	r3, [r2, #12]
 80027aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027ae:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80027b0:	6802      	ldr	r2, [r0, #0]
 80027b2:	68d3      	ldr	r3, [r2, #12]
 80027b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027b8:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 80027ba:	2000      	movs	r0, #0
 80027bc:	4770      	bx	lr
      tmp = (uint16_t*) huart->pTxBuffPtr;
 80027be:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	6802      	ldr	r2, [r0, #0]
 80027c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027c8:	6053      	str	r3, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80027ca:	6903      	ldr	r3, [r0, #16]
 80027cc:	b91b      	cbnz	r3, 80027d6 <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 80027ce:	6a03      	ldr	r3, [r0, #32]
 80027d0:	3302      	adds	r3, #2
 80027d2:	6203      	str	r3, [r0, #32]
 80027d4:	e7e2      	b.n	800279c <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 80027d6:	6a03      	ldr	r3, [r0, #32]
 80027d8:	3301      	adds	r3, #1
 80027da:	6203      	str	r3, [r0, #32]
 80027dc:	e7de      	b.n	800279c <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 80027de:	2002      	movs	r0, #2
 80027e0:	4770      	bx	lr
    return HAL_OK;
 80027e2:	2000      	movs	r0, #0
  }
}
 80027e4:	4770      	bx	lr
	...

080027e8 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027ec:	4604      	mov	r4, r0
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80027ee:	6801      	ldr	r1, [r0, #0]
 80027f0:	690a      	ldr	r2, [r1, #16]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80027f2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80027f6:	68c3      	ldr	r3, [r0, #12]
 80027f8:	4313      	orrs	r3, r2
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80027fa:	610b      	str	r3, [r1, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80027fc:	6801      	ldr	r1, [r0, #0]
 80027fe:	68ca      	ldr	r2, [r1, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002800:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8002804:	f022 020c 	bic.w	r2, r2, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002808:	6883      	ldr	r3, [r0, #8]
 800280a:	6900      	ldr	r0, [r0, #16]
 800280c:	4303      	orrs	r3, r0
 800280e:	6960      	ldr	r0, [r4, #20]
 8002810:	4303      	orrs	r3, r0
 8002812:	69e0      	ldr	r0, [r4, #28]
 8002814:	4303      	orrs	r3, r0
 8002816:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002818:	60cb      	str	r3, [r1, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800281a:	6821      	ldr	r1, [r4, #0]
 800281c:	694a      	ldr	r2, [r1, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800281e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8002822:	69a3      	ldr	r3, [r4, #24]
 8002824:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8002826:	614b      	str	r3, [r1, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002828:	69e3      	ldr	r3, [r4, #28]
 800282a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800282e:	d060      	beq.n	80028f2 <UART_SetConfig+0x10a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002830:	6823      	ldr	r3, [r4, #0]
 8002832:	4ab8      	ldr	r2, [pc, #736]	; (8002b14 <UART_SetConfig+0x32c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	f000 8114 	beq.w	8002a62 <UART_SetConfig+0x27a>
 800283a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800283e:	4293      	cmp	r3, r2
 8002840:	f000 810f 	beq.w	8002a62 <UART_SetConfig+0x27a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002844:	f7ff fc24 	bl	8002090 <HAL_RCC_GetPCLK1Freq>
 8002848:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800284c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002850:	6865      	ldr	r5, [r4, #4]
 8002852:	00ad      	lsls	r5, r5, #2
 8002854:	fbb0 f5f5 	udiv	r5, r0, r5
 8002858:	4faf      	ldr	r7, [pc, #700]	; (8002b18 <UART_SetConfig+0x330>)
 800285a:	fba7 3505 	umull	r3, r5, r7, r5
 800285e:	096d      	lsrs	r5, r5, #5
 8002860:	012e      	lsls	r6, r5, #4
 8002862:	f7ff fc15 	bl	8002090 <HAL_RCC_GetPCLK1Freq>
 8002866:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800286a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800286e:	6865      	ldr	r5, [r4, #4]
 8002870:	00ad      	lsls	r5, r5, #2
 8002872:	fbb0 f9f5 	udiv	r9, r0, r5
 8002876:	f7ff fc0b 	bl	8002090 <HAL_RCC_GetPCLK1Freq>
 800287a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800287e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002882:	6865      	ldr	r5, [r4, #4]
 8002884:	00ad      	lsls	r5, r5, #2
 8002886:	fbb0 f5f5 	udiv	r5, r0, r5
 800288a:	fba7 3505 	umull	r3, r5, r7, r5
 800288e:	096d      	lsrs	r5, r5, #5
 8002890:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002894:	fb08 9515 	mls	r5, r8, r5, r9
 8002898:	012d      	lsls	r5, r5, #4
 800289a:	3532      	adds	r5, #50	; 0x32
 800289c:	fba7 3505 	umull	r3, r5, r7, r5
 80028a0:	096d      	lsrs	r5, r5, #5
 80028a2:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 80028a6:	4435      	add	r5, r6
 80028a8:	f7ff fbf2 	bl	8002090 <HAL_RCC_GetPCLK1Freq>
 80028ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028b4:	6866      	ldr	r6, [r4, #4]
 80028b6:	00b6      	lsls	r6, r6, #2
 80028b8:	fbb0 f6f6 	udiv	r6, r0, r6
 80028bc:	f7ff fbe8 	bl	8002090 <HAL_RCC_GetPCLK1Freq>
 80028c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028c8:	6863      	ldr	r3, [r4, #4]
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	fbb0 f0f3 	udiv	r0, r0, r3
 80028d0:	fba7 3000 	umull	r3, r0, r7, r0
 80028d4:	0940      	lsrs	r0, r0, #5
 80028d6:	fb08 6810 	mls	r8, r8, r0, r6
 80028da:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80028de:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80028e2:	fba7 3708 	umull	r3, r7, r7, r8
 80028e6:	f3c7 1743 	ubfx	r7, r7, #5, #4
 80028ea:	6823      	ldr	r3, [r4, #0]
 80028ec:	442f      	add	r7, r5
 80028ee:	609f      	str	r7, [r3, #8]
    }
  }
}
 80028f0:	e10d      	b.n	8002b0e <UART_SetConfig+0x326>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80028f2:	6823      	ldr	r3, [r4, #0]
 80028f4:	4a87      	ldr	r2, [pc, #540]	; (8002b14 <UART_SetConfig+0x32c>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d05b      	beq.n	80029b2 <UART_SetConfig+0x1ca>
 80028fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028fe:	4293      	cmp	r3, r2
 8002900:	d057      	beq.n	80029b2 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002902:	f7ff fbc5 	bl	8002090 <HAL_RCC_GetPCLK1Freq>
 8002906:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800290a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800290e:	6865      	ldr	r5, [r4, #4]
 8002910:	006d      	lsls	r5, r5, #1
 8002912:	fbb0 f5f5 	udiv	r5, r0, r5
 8002916:	4f80      	ldr	r7, [pc, #512]	; (8002b18 <UART_SetConfig+0x330>)
 8002918:	fba7 3505 	umull	r3, r5, r7, r5
 800291c:	096d      	lsrs	r5, r5, #5
 800291e:	012e      	lsls	r6, r5, #4
 8002920:	f7ff fbb6 	bl	8002090 <HAL_RCC_GetPCLK1Freq>
 8002924:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002928:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800292c:	6865      	ldr	r5, [r4, #4]
 800292e:	006d      	lsls	r5, r5, #1
 8002930:	fbb0 f9f5 	udiv	r9, r0, r5
 8002934:	f7ff fbac 	bl	8002090 <HAL_RCC_GetPCLK1Freq>
 8002938:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800293c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002940:	6865      	ldr	r5, [r4, #4]
 8002942:	006d      	lsls	r5, r5, #1
 8002944:	fbb0 f5f5 	udiv	r5, r0, r5
 8002948:	fba7 3505 	umull	r3, r5, r7, r5
 800294c:	096d      	lsrs	r5, r5, #5
 800294e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002952:	fb08 9515 	mls	r5, r8, r5, r9
 8002956:	00ed      	lsls	r5, r5, #3
 8002958:	3532      	adds	r5, #50	; 0x32
 800295a:	fba7 3505 	umull	r3, r5, r7, r5
 800295e:	096d      	lsrs	r5, r5, #5
 8002960:	006d      	lsls	r5, r5, #1
 8002962:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8002966:	4435      	add	r5, r6
 8002968:	f7ff fb92 	bl	8002090 <HAL_RCC_GetPCLK1Freq>
 800296c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002970:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002974:	6866      	ldr	r6, [r4, #4]
 8002976:	0076      	lsls	r6, r6, #1
 8002978:	fbb0 f6f6 	udiv	r6, r0, r6
 800297c:	f7ff fb88 	bl	8002090 <HAL_RCC_GetPCLK1Freq>
 8002980:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002984:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002988:	6863      	ldr	r3, [r4, #4]
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002990:	fba7 2303 	umull	r2, r3, r7, r3
 8002994:	095b      	lsrs	r3, r3, #5
 8002996:	fb08 6813 	mls	r8, r8, r3, r6
 800299a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800299e:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80029a2:	fba7 3708 	umull	r3, r7, r7, r8
 80029a6:	f3c7 1742 	ubfx	r7, r7, #5, #3
 80029aa:	6823      	ldr	r3, [r4, #0]
 80029ac:	442f      	add	r7, r5
 80029ae:	609f      	str	r7, [r3, #8]
 80029b0:	e0ad      	b.n	8002b0e <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80029b2:	f7ff fb7d 	bl	80020b0 <HAL_RCC_GetPCLK2Freq>
 80029b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029be:	6865      	ldr	r5, [r4, #4]
 80029c0:	006d      	lsls	r5, r5, #1
 80029c2:	fbb0 f5f5 	udiv	r5, r0, r5
 80029c6:	4f54      	ldr	r7, [pc, #336]	; (8002b18 <UART_SetConfig+0x330>)
 80029c8:	fba7 3505 	umull	r3, r5, r7, r5
 80029cc:	096d      	lsrs	r5, r5, #5
 80029ce:	012e      	lsls	r6, r5, #4
 80029d0:	f7ff fb6e 	bl	80020b0 <HAL_RCC_GetPCLK2Freq>
 80029d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029dc:	6865      	ldr	r5, [r4, #4]
 80029de:	006d      	lsls	r5, r5, #1
 80029e0:	fbb0 f9f5 	udiv	r9, r0, r5
 80029e4:	f7ff fb64 	bl	80020b0 <HAL_RCC_GetPCLK2Freq>
 80029e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029f0:	6865      	ldr	r5, [r4, #4]
 80029f2:	006d      	lsls	r5, r5, #1
 80029f4:	fbb0 f5f5 	udiv	r5, r0, r5
 80029f8:	fba7 3505 	umull	r3, r5, r7, r5
 80029fc:	096d      	lsrs	r5, r5, #5
 80029fe:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002a02:	fb08 9515 	mls	r5, r8, r5, r9
 8002a06:	00ed      	lsls	r5, r5, #3
 8002a08:	3532      	adds	r5, #50	; 0x32
 8002a0a:	fba7 3505 	umull	r3, r5, r7, r5
 8002a0e:	096d      	lsrs	r5, r5, #5
 8002a10:	006d      	lsls	r5, r5, #1
 8002a12:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8002a16:	4435      	add	r5, r6
 8002a18:	f7ff fb4a 	bl	80020b0 <HAL_RCC_GetPCLK2Freq>
 8002a1c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a20:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a24:	6866      	ldr	r6, [r4, #4]
 8002a26:	0076      	lsls	r6, r6, #1
 8002a28:	fbb0 f6f6 	udiv	r6, r0, r6
 8002a2c:	f7ff fb40 	bl	80020b0 <HAL_RCC_GetPCLK2Freq>
 8002a30:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a34:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a38:	6863      	ldr	r3, [r4, #4]
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a40:	fba7 2303 	umull	r2, r3, r7, r3
 8002a44:	095b      	lsrs	r3, r3, #5
 8002a46:	fb08 6813 	mls	r8, r8, r3, r6
 8002a4a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8002a4e:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8002a52:	fba7 3708 	umull	r3, r7, r7, r8
 8002a56:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8002a5a:	6823      	ldr	r3, [r4, #0]
 8002a5c:	442f      	add	r7, r5
 8002a5e:	609f      	str	r7, [r3, #8]
 8002a60:	e055      	b.n	8002b0e <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002a62:	f7ff fb25 	bl	80020b0 <HAL_RCC_GetPCLK2Freq>
 8002a66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a6e:	6865      	ldr	r5, [r4, #4]
 8002a70:	00ad      	lsls	r5, r5, #2
 8002a72:	fbb0 f5f5 	udiv	r5, r0, r5
 8002a76:	4f28      	ldr	r7, [pc, #160]	; (8002b18 <UART_SetConfig+0x330>)
 8002a78:	fba7 3505 	umull	r3, r5, r7, r5
 8002a7c:	096d      	lsrs	r5, r5, #5
 8002a7e:	012e      	lsls	r6, r5, #4
 8002a80:	f7ff fb16 	bl	80020b0 <HAL_RCC_GetPCLK2Freq>
 8002a84:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a8c:	6865      	ldr	r5, [r4, #4]
 8002a8e:	00ad      	lsls	r5, r5, #2
 8002a90:	fbb0 f9f5 	udiv	r9, r0, r5
 8002a94:	f7ff fb0c 	bl	80020b0 <HAL_RCC_GetPCLK2Freq>
 8002a98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a9c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002aa0:	6865      	ldr	r5, [r4, #4]
 8002aa2:	00ad      	lsls	r5, r5, #2
 8002aa4:	fbb0 f5f5 	udiv	r5, r0, r5
 8002aa8:	fba7 3505 	umull	r3, r5, r7, r5
 8002aac:	096d      	lsrs	r5, r5, #5
 8002aae:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002ab2:	fb08 9515 	mls	r5, r8, r5, r9
 8002ab6:	012d      	lsls	r5, r5, #4
 8002ab8:	3532      	adds	r5, #50	; 0x32
 8002aba:	fba7 3505 	umull	r3, r5, r7, r5
 8002abe:	096d      	lsrs	r5, r5, #5
 8002ac0:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8002ac4:	4435      	add	r5, r6
 8002ac6:	f7ff faf3 	bl	80020b0 <HAL_RCC_GetPCLK2Freq>
 8002aca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002ace:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002ad2:	6866      	ldr	r6, [r4, #4]
 8002ad4:	00b6      	lsls	r6, r6, #2
 8002ad6:	fbb0 f6f6 	udiv	r6, r0, r6
 8002ada:	f7ff fae9 	bl	80020b0 <HAL_RCC_GetPCLK2Freq>
 8002ade:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002ae2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002ae6:	6863      	ldr	r3, [r4, #4]
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	fbb0 f0f3 	udiv	r0, r0, r3
 8002aee:	fba7 3000 	umull	r3, r0, r7, r0
 8002af2:	0940      	lsrs	r0, r0, #5
 8002af4:	fb08 6810 	mls	r8, r8, r0, r6
 8002af8:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8002afc:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8002b00:	fba7 3708 	umull	r3, r7, r7, r8
 8002b04:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8002b08:	6823      	ldr	r3, [r4, #0]
 8002b0a:	442f      	add	r7, r5
 8002b0c:	609f      	str	r7, [r3, #8]
}
 8002b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b12:	bf00      	nop
 8002b14:	40011000 	.word	0x40011000
 8002b18:	51eb851f 	.word	0x51eb851f

08002b1c <UART_WaitOnFlagUntilTimeout>:
{
 8002b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b20:	4605      	mov	r5, r0
 8002b22:	460f      	mov	r7, r1
 8002b24:	4616      	mov	r6, r2
 8002b26:	4698      	mov	r8, r3
 8002b28:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002b2a:	682b      	ldr	r3, [r5, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	ea37 0303 	bics.w	r3, r7, r3
 8002b32:	bf0c      	ite	eq
 8002b34:	2301      	moveq	r3, #1
 8002b36:	2300      	movne	r3, #0
 8002b38:	42b3      	cmp	r3, r6
 8002b3a:	d11d      	bne.n	8002b78 <UART_WaitOnFlagUntilTimeout+0x5c>
    if(Timeout != HAL_MAX_DELAY)
 8002b3c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002b40:	d0f3      	beq.n	8002b2a <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002b42:	b12c      	cbz	r4, 8002b50 <UART_WaitOnFlagUntilTimeout+0x34>
 8002b44:	f7fe fa5a 	bl	8000ffc <HAL_GetTick>
 8002b48:	eba0 0008 	sub.w	r0, r0, r8
 8002b4c:	42a0      	cmp	r0, r4
 8002b4e:	d9ec      	bls.n	8002b2a <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b50:	682a      	ldr	r2, [r5, #0]
 8002b52:	68d3      	ldr	r3, [r2, #12]
 8002b54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b58:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b5a:	682a      	ldr	r2, [r5, #0]
 8002b5c:	6953      	ldr	r3, [r2, #20]
 8002b5e:	f023 0301 	bic.w	r3, r3, #1
 8002b62:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002b64:	2320      	movs	r3, #32
 8002b66:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002b6a:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8002b74:	2003      	movs	r0, #3
 8002b76:	e000      	b.n	8002b7a <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 8002b78:	2000      	movs	r0, #0
}
 8002b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002b7e <HAL_UART_Init>:
  if(huart == NULL)
 8002b7e:	b358      	cbz	r0, 8002bd8 <HAL_UART_Init+0x5a>
{
 8002b80:	b510      	push	{r4, lr}
 8002b82:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8002b84:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002b88:	b30b      	cbz	r3, 8002bce <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002b8a:	2324      	movs	r3, #36	; 0x24
 8002b8c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002b90:	6822      	ldr	r2, [r4, #0]
 8002b92:	68d3      	ldr	r3, [r2, #12]
 8002b94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b98:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	f7ff fe24 	bl	80027e8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ba0:	6822      	ldr	r2, [r4, #0]
 8002ba2:	6913      	ldr	r3, [r2, #16]
 8002ba4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002ba8:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002baa:	6822      	ldr	r2, [r4, #0]
 8002bac:	6953      	ldr	r3, [r2, #20]
 8002bae:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002bb2:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002bb4:	6822      	ldr	r2, [r4, #0]
 8002bb6:	68d3      	ldr	r3, [r2, #12]
 8002bb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bbc:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002bc2:	2320      	movs	r3, #32
 8002bc4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002bc8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8002bcc:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002bce:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002bd2:	f001 fc0b 	bl	80043ec <HAL_UART_MspInit>
 8002bd6:	e7d8      	b.n	8002b8a <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002bd8:	2001      	movs	r0, #1
}
 8002bda:	4770      	bx	lr

08002bdc <HAL_UART_Transmit>:
{
 8002bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8002be4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b20      	cmp	r3, #32
 8002bec:	d155      	bne.n	8002c9a <HAL_UART_Transmit+0xbe>
 8002bee:	4604      	mov	r4, r0
 8002bf0:	460d      	mov	r5, r1
 8002bf2:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0)) 
 8002bf4:	2900      	cmp	r1, #0
 8002bf6:	d055      	beq.n	8002ca4 <HAL_UART_Transmit+0xc8>
 8002bf8:	2a00      	cmp	r2, #0
 8002bfa:	d055      	beq.n	8002ca8 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8002bfc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d053      	beq.n	8002cac <HAL_UART_Transmit+0xd0>
 8002c04:	2301      	movs	r3, #1
 8002c06:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c0e:	2321      	movs	r3, #33	; 0x21
 8002c10:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002c14:	f7fe f9f2 	bl	8000ffc <HAL_GetTick>
 8002c18:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002c1a:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c1e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002c22:	e010      	b.n	8002c46 <HAL_UART_Transmit+0x6a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c24:	9600      	str	r6, [sp, #0]
 8002c26:	463b      	mov	r3, r7
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2180      	movs	r1, #128	; 0x80
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	f7ff ff75 	bl	8002b1c <UART_WaitOnFlagUntilTimeout>
 8002c32:	2800      	cmp	r0, #0
 8002c34:	d13c      	bne.n	8002cb0 <HAL_UART_Transmit+0xd4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002c36:	882b      	ldrh	r3, [r5, #0]
 8002c38:	6822      	ldr	r2, [r4, #0]
 8002c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c3e:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002c40:	6923      	ldr	r3, [r4, #16]
 8002c42:	b9c3      	cbnz	r3, 8002c76 <HAL_UART_Transmit+0x9a>
          pData +=2U;
 8002c44:	3502      	adds	r5, #2
    while(huart->TxXferCount > 0U)
 8002c46:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	b1b3      	cbz	r3, 8002c7a <HAL_UART_Transmit+0x9e>
      huart->TxXferCount--;
 8002c4c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c54:	68a3      	ldr	r3, [r4, #8]
 8002c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c5a:	d0e3      	beq.n	8002c24 <HAL_UART_Transmit+0x48>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c5c:	9600      	str	r6, [sp, #0]
 8002c5e:	463b      	mov	r3, r7
 8002c60:	2200      	movs	r2, #0
 8002c62:	2180      	movs	r1, #128	; 0x80
 8002c64:	4620      	mov	r0, r4
 8002c66:	f7ff ff59 	bl	8002b1c <UART_WaitOnFlagUntilTimeout>
 8002c6a:	bb18      	cbnz	r0, 8002cb4 <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002c6c:	782a      	ldrb	r2, [r5, #0]
 8002c6e:	6823      	ldr	r3, [r4, #0]
 8002c70:	605a      	str	r2, [r3, #4]
 8002c72:	3501      	adds	r5, #1
 8002c74:	e7e7      	b.n	8002c46 <HAL_UART_Transmit+0x6a>
          pData +=1U;
 8002c76:	3501      	adds	r5, #1
 8002c78:	e7e5      	b.n	8002c46 <HAL_UART_Transmit+0x6a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c7a:	9600      	str	r6, [sp, #0]
 8002c7c:	463b      	mov	r3, r7
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2140      	movs	r1, #64	; 0x40
 8002c82:	4620      	mov	r0, r4
 8002c84:	f7ff ff4a 	bl	8002b1c <UART_WaitOnFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	b9a8      	cbnz	r0, 8002cb8 <HAL_UART_Transmit+0xdc>
      huart->gState = HAL_UART_STATE_READY;
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002c92:	2200      	movs	r2, #0
 8002c94:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8002c98:	e000      	b.n	8002c9c <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 8002c9a:	2302      	movs	r3, #2
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	b002      	add	sp, #8
 8002ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e7f9      	b.n	8002c9c <HAL_UART_Transmit+0xc0>
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e7f7      	b.n	8002c9c <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 8002cac:	2302      	movs	r3, #2
 8002cae:	e7f5      	b.n	8002c9c <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e7f3      	b.n	8002c9c <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e7f1      	b.n	8002c9c <HAL_UART_Transmit+0xc0>
      return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e7ef      	b.n	8002c9c <HAL_UART_Transmit+0xc0>

08002cbc <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8002cbc:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b20      	cmp	r3, #32
 8002cc4:	d11b      	bne.n	8002cfe <HAL_UART_Receive_IT+0x42>
    if((pData == NULL ) || (Size == 0)) 
 8002cc6:	b1e1      	cbz	r1, 8002d02 <HAL_UART_Receive_IT+0x46>
 8002cc8:	b1ea      	cbz	r2, 8002d06 <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 8002cca:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d01b      	beq.n	8002d0a <HAL_UART_Receive_IT+0x4e>
    huart->pRxBuffPtr = pData;
 8002cd2:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8002cd4:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002cd6:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cdc:	2222      	movs	r2, #34	; 0x22
 8002cde:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 8002ce2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ce6:	6801      	ldr	r1, [r0, #0]
 8002ce8:	694a      	ldr	r2, [r1, #20]
 8002cea:	f042 0201 	orr.w	r2, r2, #1
 8002cee:	614a      	str	r2, [r1, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002cf0:	6801      	ldr	r1, [r0, #0]
 8002cf2:	68ca      	ldr	r2, [r1, #12]
 8002cf4:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8002cf8:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	4770      	bx	lr
    return HAL_BUSY; 
 8002cfe:	2002      	movs	r0, #2
 8002d00:	4770      	bx	lr
      return HAL_ERROR;
 8002d02:	2001      	movs	r0, #1
 8002d04:	4770      	bx	lr
 8002d06:	2001      	movs	r0, #1
 8002d08:	4770      	bx	lr
    __HAL_LOCK(huart);
 8002d0a:	2002      	movs	r0, #2
}
 8002d0c:	4770      	bx	lr

08002d0e <HAL_UART_TxCpltCallback>:
}
 8002d0e:	4770      	bx	lr

08002d10 <UART_EndTransmit_IT>:
{
 8002d10:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002d12:	6801      	ldr	r1, [r0, #0]
 8002d14:	68cb      	ldr	r3, [r1, #12]
 8002d16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d1a:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002d1c:	2320      	movs	r3, #32
 8002d1e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002d22:	f7ff fff4 	bl	8002d0e <HAL_UART_TxCpltCallback>
}
 8002d26:	2000      	movs	r0, #0
 8002d28:	bd08      	pop	{r3, pc}

08002d2a <UART_Receive_IT>:
{
 8002d2a:	b508      	push	{r3, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002d2c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b22      	cmp	r3, #34	; 0x22
 8002d34:	d140      	bne.n	8002db8 <UART_Receive_IT+0x8e>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d36:	6883      	ldr	r3, [r0, #8]
 8002d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d3c:	d00e      	beq.n	8002d5c <UART_Receive_IT+0x32>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002d3e:	6903      	ldr	r3, [r0, #16]
 8002d40:	bb03      	cbnz	r3, 8002d84 <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d42:	6803      	ldr	r3, [r0, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002d48:	1c59      	adds	r1, r3, #1
 8002d4a:	6281      	str	r1, [r0, #40]	; 0x28
 8002d4c:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0U)
 8002d4e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8002d56:	b1f3      	cbz	r3, 8002d96 <UART_Receive_IT+0x6c>
    return HAL_OK;
 8002d58:	2000      	movs	r0, #0
 8002d5a:	e02e      	b.n	8002dba <UART_Receive_IT+0x90>
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8002d5c:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002d5e:	6903      	ldr	r3, [r0, #16]
 8002d60:	b943      	cbnz	r3, 8002d74 <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d62:	6803      	ldr	r3, [r0, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d6a:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8002d6c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002d6e:	3302      	adds	r3, #2
 8002d70:	6283      	str	r3, [r0, #40]	; 0x28
 8002d72:	e7ec      	b.n	8002d4e <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002d74:	6803      	ldr	r3, [r0, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8002d7c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002d7e:	3301      	adds	r3, #1
 8002d80:	6283      	str	r3, [r0, #40]	; 0x28
 8002d82:	e7e4      	b.n	8002d4e <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d84:	6803      	ldr	r3, [r0, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002d8a:	1c51      	adds	r1, r2, #1
 8002d8c:	6281      	str	r1, [r0, #40]	; 0x28
 8002d8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d92:	7013      	strb	r3, [r2, #0]
 8002d94:	e7db      	b.n	8002d4e <UART_Receive_IT+0x24>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d96:	6802      	ldr	r2, [r0, #0]
 8002d98:	68d3      	ldr	r3, [r2, #12]
 8002d9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d9e:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002da0:	6802      	ldr	r2, [r0, #0]
 8002da2:	6953      	ldr	r3, [r2, #20]
 8002da4:	f023 0301 	bic.w	r3, r3, #1
 8002da8:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002daa:	2320      	movs	r3, #32
 8002dac:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002db0:	f000 fa38 	bl	8003224 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8002db4:	2000      	movs	r0, #0
 8002db6:	e000      	b.n	8002dba <UART_Receive_IT+0x90>
    return HAL_BUSY;
 8002db8:	2002      	movs	r0, #2
}
 8002dba:	bd08      	pop	{r3, pc}

08002dbc <HAL_UART_ErrorCallback>:
}
 8002dbc:	4770      	bx	lr
	...

08002dc0 <HAL_UART_IRQHandler>:
{
 8002dc0:	b510      	push	{r4, lr}
 8002dc2:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002dc4:	6802      	ldr	r2, [r0, #0]
 8002dc6:	6813      	ldr	r3, [r2, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dc8:	68d1      	ldr	r1, [r2, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002dca:	6952      	ldr	r2, [r2, #20]
  if(errorflags == RESET)
 8002dcc:	f013 000f 	ands.w	r0, r3, #15
 8002dd0:	d105      	bne.n	8002dde <HAL_UART_IRQHandler+0x1e>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dd2:	f013 0f20 	tst.w	r3, #32
 8002dd6:	d002      	beq.n	8002dde <HAL_UART_IRQHandler+0x1e>
 8002dd8:	f011 0f20 	tst.w	r1, #32
 8002ddc:	d153      	bne.n	8002e86 <HAL_UART_IRQHandler+0xc6>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dde:	2800      	cmp	r0, #0
 8002de0:	d067      	beq.n	8002eb2 <HAL_UART_IRQHandler+0xf2>
 8002de2:	f012 0201 	ands.w	r2, r2, #1
 8002de6:	d102      	bne.n	8002dee <HAL_UART_IRQHandler+0x2e>
 8002de8:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002dec:	d061      	beq.n	8002eb2 <HAL_UART_IRQHandler+0xf2>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002dee:	f013 0f01 	tst.w	r3, #1
 8002df2:	d006      	beq.n	8002e02 <HAL_UART_IRQHandler+0x42>
 8002df4:	f411 7f80 	tst.w	r1, #256	; 0x100
 8002df8:	d003      	beq.n	8002e02 <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002dfa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002dfc:	f040 0001 	orr.w	r0, r0, #1
 8002e00:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e02:	f013 0f04 	tst.w	r3, #4
 8002e06:	d004      	beq.n	8002e12 <HAL_UART_IRQHandler+0x52>
 8002e08:	b11a      	cbz	r2, 8002e12 <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e0a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002e0c:	f040 0002 	orr.w	r0, r0, #2
 8002e10:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e12:	f013 0f02 	tst.w	r3, #2
 8002e16:	d004      	beq.n	8002e22 <HAL_UART_IRQHandler+0x62>
 8002e18:	b11a      	cbz	r2, 8002e22 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e1a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002e1c:	f040 0004 	orr.w	r0, r0, #4
 8002e20:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e22:	f013 0f08 	tst.w	r3, #8
 8002e26:	d004      	beq.n	8002e32 <HAL_UART_IRQHandler+0x72>
 8002e28:	b11a      	cbz	r2, 8002e32 <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e2a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002e2c:	f042 0208 	orr.w	r2, r2, #8
 8002e30:	63e2      	str	r2, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e32:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002e34:	2a00      	cmp	r2, #0
 8002e36:	d048      	beq.n	8002eca <HAL_UART_IRQHandler+0x10a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e38:	f013 0f20 	tst.w	r3, #32
 8002e3c:	d002      	beq.n	8002e44 <HAL_UART_IRQHandler+0x84>
 8002e3e:	f011 0f20 	tst.w	r1, #32
 8002e42:	d124      	bne.n	8002e8e <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e44:	6823      	ldr	r3, [r4, #0]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e4c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002e4e:	f012 0f08 	tst.w	r2, #8
 8002e52:	d100      	bne.n	8002e56 <HAL_UART_IRQHandler+0x96>
 8002e54:	b33b      	cbz	r3, 8002ea6 <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8002e56:	4620      	mov	r0, r4
 8002e58:	f7ff fc83 	bl	8002762 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e5c:	6823      	ldr	r3, [r4, #0]
 8002e5e:	695a      	ldr	r2, [r3, #20]
 8002e60:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002e64:	d01b      	beq.n	8002e9e <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e66:	695a      	ldr	r2, [r3, #20]
 8002e68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e6c:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002e6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e70:	b18b      	cbz	r3, 8002e96 <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e72:	4a1a      	ldr	r2, [pc, #104]	; (8002edc <HAL_UART_IRQHandler+0x11c>)
 8002e74:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e76:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002e78:	f7fe fd2b 	bl	80018d2 <HAL_DMA_Abort_IT>
 8002e7c:	b328      	cbz	r0, 8002eca <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e7e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002e80:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002e82:	4798      	blx	r3
 8002e84:	e021      	b.n	8002eca <HAL_UART_IRQHandler+0x10a>
      UART_Receive_IT(huart);
 8002e86:	4620      	mov	r0, r4
 8002e88:	f7ff ff4f 	bl	8002d2a <UART_Receive_IT>
      return;
 8002e8c:	e01d      	b.n	8002eca <HAL_UART_IRQHandler+0x10a>
        UART_Receive_IT(huart);
 8002e8e:	4620      	mov	r0, r4
 8002e90:	f7ff ff4b 	bl	8002d2a <UART_Receive_IT>
 8002e94:	e7d6      	b.n	8002e44 <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 8002e96:	4620      	mov	r0, r4
 8002e98:	f7ff ff90 	bl	8002dbc <HAL_UART_ErrorCallback>
 8002e9c:	e015      	b.n	8002eca <HAL_UART_IRQHandler+0x10a>
          HAL_UART_ErrorCallback(huart);
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	f7ff ff8c 	bl	8002dbc <HAL_UART_ErrorCallback>
 8002ea4:	e011      	b.n	8002eca <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 8002ea6:	4620      	mov	r0, r4
 8002ea8:	f7ff ff88 	bl	8002dbc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eac:	2300      	movs	r3, #0
 8002eae:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002eb0:	e00b      	b.n	8002eca <HAL_UART_IRQHandler+0x10a>
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002eb2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002eb6:	d002      	beq.n	8002ebe <HAL_UART_IRQHandler+0xfe>
 8002eb8:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002ebc:	d106      	bne.n	8002ecc <HAL_UART_IRQHandler+0x10c>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ebe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002ec2:	d002      	beq.n	8002eca <HAL_UART_IRQHandler+0x10a>
 8002ec4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002ec8:	d104      	bne.n	8002ed4 <HAL_UART_IRQHandler+0x114>
}
 8002eca:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8002ecc:	4620      	mov	r0, r4
 8002ece:	f7ff fc56 	bl	800277e <UART_Transmit_IT>
    return;
 8002ed2:	e7fa      	b.n	8002eca <HAL_UART_IRQHandler+0x10a>
    UART_EndTransmit_IT(huart);
 8002ed4:	4620      	mov	r0, r4
 8002ed6:	f7ff ff1b 	bl	8002d10 <UART_EndTransmit_IT>
    return;
 8002eda:	e7f6      	b.n	8002eca <HAL_UART_IRQHandler+0x10a>
 8002edc:	08002ee1 	.word	0x08002ee1

08002ee0 <UART_DMAAbortOnError>:
{
 8002ee0:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ee2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8002ee8:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002eea:	f7ff ff67 	bl	8002dbc <HAL_UART_ErrorCallback>
}
 8002eee:	bd08      	pop	{r3, pc}

08002ef0 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002ef0:	b508      	push	{r3, lr}

  hcan1.Instance = CAN1;
 8002ef2:	480f      	ldr	r0, [pc, #60]	; (8002f30 <MX_CAN1_Init+0x40>)
 8002ef4:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <MX_CAN1_Init+0x44>)
 8002ef6:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 7;
 8002ef8:	2307      	movs	r3, #7
 8002efa:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002f00:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8002f02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f06:	6102      	str	r2, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002f08:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002f0c:	6142      	str	r2, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002f0e:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002f10:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002f12:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002f14:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002f16:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002f1c:	f7fe f888 	bl	8001030 <HAL_CAN_Init>
 8002f20:	b900      	cbnz	r0, 8002f24 <MX_CAN1_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8002f22:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8002f24:	2146      	movs	r1, #70	; 0x46
 8002f26:	4804      	ldr	r0, [pc, #16]	; (8002f38 <MX_CAN1_Init+0x48>)
 8002f28:	f000 fc88 	bl	800383c <_Error_Handler>
}
 8002f2c:	e7f9      	b.n	8002f22 <MX_CAN1_Init+0x32>
 8002f2e:	bf00      	nop
 8002f30:	2000023c 	.word	0x2000023c
 8002f34:	40006400 	.word	0x40006400
 8002f38:	08006ea8 	.word	0x08006ea8

08002f3c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8002f3c:	b508      	push	{r3, lr}

  hcan2.Instance = CAN2;
 8002f3e:	480f      	ldr	r0, [pc, #60]	; (8002f7c <MX_CAN2_Init+0x40>)
 8002f40:	4b0f      	ldr	r3, [pc, #60]	; (8002f80 <MX_CAN2_Init+0x44>)
 8002f42:	6003      	str	r3, [r0, #0]
  hcan2.Init.Prescaler = 7;
 8002f44:	2307      	movs	r3, #7
 8002f46:	6043      	str	r3, [r0, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	6083      	str	r3, [r0, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002f4c:	60c3      	str	r3, [r0, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8002f4e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f52:	6102      	str	r2, [r0, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002f54:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002f58:	6142      	str	r2, [r0, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002f5a:	7603      	strb	r3, [r0, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8002f5c:	7643      	strb	r3, [r0, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002f5e:	7683      	strb	r3, [r0, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002f60:	76c3      	strb	r3, [r0, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002f62:	7703      	strb	r3, [r0, #28]
  hcan2.Init.TransmitFifoPriority = ENABLE;
 8002f64:	2301      	movs	r3, #1
 8002f66:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002f68:	f7fe f862 	bl	8001030 <HAL_CAN_Init>
 8002f6c:	b900      	cbnz	r0, 8002f70 <MX_CAN2_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8002f6e:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8002f70:	215c      	movs	r1, #92	; 0x5c
 8002f72:	4804      	ldr	r0, [pc, #16]	; (8002f84 <MX_CAN2_Init+0x48>)
 8002f74:	f000 fc62 	bl	800383c <_Error_Handler>
}
 8002f78:	e7f9      	b.n	8002f6e <MX_CAN2_Init+0x32>
 8002f7a:	bf00      	nop
 8002f7c:	20000214 	.word	0x20000214
 8002f80:	40006800 	.word	0x40006800
 8002f84:	08006ea8 	.word	0x08006ea8

08002f88 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002f88:	b510      	push	{r4, lr}
 8002f8a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;
  if(canHandle->Instance==CAN1)
 8002f8c:	6803      	ldr	r3, [r0, #0]
 8002f8e:	4a3c      	ldr	r2, [pc, #240]	; (8003080 <HAL_CAN_MspInit+0xf8>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d004      	beq.n	8002f9e <HAL_CAN_MspInit+0x16>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
  else if(canHandle->Instance==CAN2)
 8002f94:	4a3b      	ldr	r2, [pc, #236]	; (8003084 <HAL_CAN_MspInit+0xfc>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d032      	beq.n	8003000 <HAL_CAN_MspInit+0x78>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8002f9a:	b008      	add	sp, #32
 8002f9c:	bd10      	pop	{r4, pc}
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002f9e:	4a3a      	ldr	r2, [pc, #232]	; (8003088 <HAL_CAN_MspInit+0x100>)
 8002fa0:	6813      	ldr	r3, [r2, #0]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d01d      	beq.n	8002fe6 <HAL_CAN_MspInit+0x5e>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002faa:	2303      	movs	r3, #3
 8002fac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fae:	2202      	movs	r2, #2
 8002fb0:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb2:	2400      	movs	r4, #0
 8002fb4:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002fb8:	2309      	movs	r3, #9
 8002fba:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fbc:	a903      	add	r1, sp, #12
 8002fbe:	4833      	ldr	r0, [pc, #204]	; (800308c <HAL_CAN_MspInit+0x104>)
 8002fc0:	f7fe fc9a 	bl	80018f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002fc4:	4622      	mov	r2, r4
 8002fc6:	4621      	mov	r1, r4
 8002fc8:	2014      	movs	r0, #20
 8002fca:	f7fe fc17 	bl	80017fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002fce:	2014      	movs	r0, #20
 8002fd0:	f7fe fc48 	bl	8001864 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8002fd4:	4622      	mov	r2, r4
 8002fd6:	4621      	mov	r1, r4
 8002fd8:	2015      	movs	r0, #21
 8002fda:	f7fe fc0f 	bl	80017fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002fde:	2015      	movs	r0, #21
 8002fe0:	f7fe fc40 	bl	8001864 <HAL_NVIC_EnableIRQ>
 8002fe4:	e7d9      	b.n	8002f9a <HAL_CAN_MspInit+0x12>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	4b29      	ldr	r3, [pc, #164]	; (8003090 <HAL_CAN_MspInit+0x108>)
 8002fec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fee:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002ff2:	641a      	str	r2, [r3, #64]	; 0x40
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	9b00      	ldr	r3, [sp, #0]
 8002ffe:	e7d4      	b.n	8002faa <HAL_CAN_MspInit+0x22>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003000:	2300      	movs	r3, #0
 8003002:	9301      	str	r3, [sp, #4]
 8003004:	4b22      	ldr	r3, [pc, #136]	; (8003090 <HAL_CAN_MspInit+0x108>)
 8003006:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003008:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800300c:	641a      	str	r2, [r3, #64]	; 0x40
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003014:	9301      	str	r3, [sp, #4]
 8003016:	9b01      	ldr	r3, [sp, #4]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003018:	4a1b      	ldr	r2, [pc, #108]	; (8003088 <HAL_CAN_MspInit+0x100>)
 800301a:	6813      	ldr	r3, [r2, #0]
 800301c:	3301      	adds	r3, #1
 800301e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003020:	2b01      	cmp	r3, #1
 8003022:	d01f      	beq.n	8003064 <HAL_CAN_MspInit+0xdc>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003024:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003028:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302a:	2302      	movs	r3, #2
 800302c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302e:	2400      	movs	r4, #0
 8003030:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003032:	2303      	movs	r3, #3
 8003034:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003036:	2309      	movs	r3, #9
 8003038:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800303a:	a903      	add	r1, sp, #12
 800303c:	4815      	ldr	r0, [pc, #84]	; (8003094 <HAL_CAN_MspInit+0x10c>)
 800303e:	f7fe fc5b 	bl	80018f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8003042:	4622      	mov	r2, r4
 8003044:	4621      	mov	r1, r4
 8003046:	2040      	movs	r0, #64	; 0x40
 8003048:	f7fe fbd8 	bl	80017fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800304c:	2040      	movs	r0, #64	; 0x40
 800304e:	f7fe fc09 	bl	8001864 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8003052:	4622      	mov	r2, r4
 8003054:	4621      	mov	r1, r4
 8003056:	2041      	movs	r0, #65	; 0x41
 8003058:	f7fe fbd0 	bl	80017fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800305c:	2041      	movs	r0, #65	; 0x41
 800305e:	f7fe fc01 	bl	8001864 <HAL_NVIC_EnableIRQ>
}
 8003062:	e79a      	b.n	8002f9a <HAL_CAN_MspInit+0x12>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003064:	2300      	movs	r3, #0
 8003066:	9302      	str	r3, [sp, #8]
 8003068:	4b09      	ldr	r3, [pc, #36]	; (8003090 <HAL_CAN_MspInit+0x108>)
 800306a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800306c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003070:	641a      	str	r2, [r3, #64]	; 0x40
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003078:	9302      	str	r3, [sp, #8]
 800307a:	9b02      	ldr	r3, [sp, #8]
 800307c:	e7d2      	b.n	8003024 <HAL_CAN_MspInit+0x9c>
 800307e:	bf00      	nop
 8003080:	40006400 	.word	0x40006400
 8003084:	40006800 	.word	0x40006800
 8003088:	200001f8 	.word	0x200001f8
 800308c:	40020c00 	.word	0x40020c00
 8003090:	40023800 	.word	0x40023800
 8003094:	40020400 	.word	0x40020400

08003098 <initCanFilter>:
  /* USER CODE END CAN2_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void initCanFilter() {
 8003098:	b510      	push	{r4, lr}
 800309a:	b08a      	sub	sp, #40	; 0x28
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 800309c:	2400      	movs	r4, #0
 800309e:	9405      	str	r4, [sp, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80030a0:	9406      	str	r4, [sp, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80030a2:	2301      	movs	r3, #1
 80030a4:	9307      	str	r3, [sp, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 80030a6:	9400      	str	r4, [sp, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80030a8:	9401      	str	r4, [sp, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80030aa:	9402      	str	r4, [sp, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80030ac:	9403      	str	r4, [sp, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80030ae:	9404      	str	r4, [sp, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80030b0:	9308      	str	r3, [sp, #32]
	sFilterConfig.SlaveStartFilterBank = 0;
 80030b2:	9409      	str	r4, [sp, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80030b4:	4669      	mov	r1, sp
 80030b6:	4805      	ldr	r0, [pc, #20]	; (80030cc <initCanFilter+0x34>)
 80030b8:	f7fe f860 	bl	800117c <HAL_CAN_ConfigFilter>

	sFilterConfig.SlaveStartFilterBank = 0;
 80030bc:	9409      	str	r4, [sp, #36]	; 0x24
	sFilterConfig.FilterBank = 0;
 80030be:	9405      	str	r4, [sp, #20]

	HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig);
 80030c0:	4669      	mov	r1, sp
 80030c2:	4803      	ldr	r0, [pc, #12]	; (80030d0 <initCanFilter+0x38>)
 80030c4:	f7fe f85a 	bl	800117c <HAL_CAN_ConfigFilter>
}
 80030c8:	b00a      	add	sp, #40	; 0x28
 80030ca:	bd10      	pop	{r4, pc}
 80030cc:	2000023c 	.word	0x2000023c
 80030d0:	20000214 	.word	0x20000214

080030d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80030d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030d8:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80030da:	2400      	movs	r4, #0
 80030dc:	9400      	str	r4, [sp, #0]
 80030de:	4b3e      	ldr	r3, [pc, #248]	; (80031d8 <MX_GPIO_Init+0x104>)
 80030e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030e2:	f042 0210 	orr.w	r2, r2, #16
 80030e6:	631a      	str	r2, [r3, #48]	; 0x30
 80030e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ea:	f002 0210 	and.w	r2, r2, #16
 80030ee:	9200      	str	r2, [sp, #0]
 80030f0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80030f2:	9401      	str	r4, [sp, #4]
 80030f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030fa:	631a      	str	r2, [r3, #48]	; 0x30
 80030fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030fe:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003102:	9201      	str	r2, [sp, #4]
 8003104:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003106:	9402      	str	r4, [sp, #8]
 8003108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800310a:	f042 0201 	orr.w	r2, r2, #1
 800310e:	631a      	str	r2, [r3, #48]	; 0x30
 8003110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003112:	f002 0201 	and.w	r2, r2, #1
 8003116:	9202      	str	r2, [sp, #8]
 8003118:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800311a:	9403      	str	r4, [sp, #12]
 800311c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800311e:	f042 0202 	orr.w	r2, r2, #2
 8003122:	631a      	str	r2, [r3, #48]	; 0x30
 8003124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003126:	f002 0202 	and.w	r2, r2, #2
 800312a:	9203      	str	r2, [sp, #12]
 800312c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800312e:	9404      	str	r4, [sp, #16]
 8003130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003132:	f042 0208 	orr.w	r2, r2, #8
 8003136:	631a      	str	r2, [r3, #48]	; 0x30
 8003138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800313a:	f002 0208 	and.w	r2, r2, #8
 800313e:	9204      	str	r2, [sp, #16]
 8003140:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003142:	9405      	str	r4, [sp, #20]
 8003144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003146:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800314a:	631a      	str	r2, [r3, #48]	; 0x30
 800314c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800314e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003152:	9205      	str	r2, [sp, #20]
 8003154:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003156:	9406      	str	r4, [sp, #24]
 8003158:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800315a:	f042 0220 	orr.w	r2, r2, #32
 800315e:	631a      	str	r2, [r3, #48]	; 0x30
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	f003 0320 	and.w	r3, r3, #32
 8003166:	9306      	str	r3, [sp, #24]
 8003168:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, POWER_OUT1_Pin|POWER_OUT2_Pin|POWER_OUT3_Pin|POWER_OUT4_Pin, GPIO_PIN_RESET);
 800316a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80031e4 <MX_GPIO_Init+0x110>
 800316e:	4622      	mov	r2, r4
 8003170:	213c      	movs	r1, #60	; 0x3c
 8003172:	4640      	mov	r0, r8
 8003174:	f7fe fcb0 	bl	8001ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI_MPU_CS_Pin|LED_G_Pin, GPIO_PIN_SET);
 8003178:	4f18      	ldr	r7, [pc, #96]	; (80031dc <MX_GPIO_Init+0x108>)
 800317a:	2201      	movs	r2, #1
 800317c:	f244 0140 	movw	r1, #16448	; 0x4040
 8003180:	4638      	mov	r0, r7
 8003182:	f7fe fca9 	bl	8001ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 8003186:	4e16      	ldr	r6, [pc, #88]	; (80031e0 <MX_GPIO_Init+0x10c>)
 8003188:	2201      	movs	r2, #1
 800318a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800318e:	4630      	mov	r0, r6
 8003190:	f7fe fca2 	bl	8001ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = POWER_OUT1_Pin|POWER_OUT2_Pin|POWER_OUT3_Pin|POWER_OUT4_Pin;
 8003194:	233c      	movs	r3, #60	; 0x3c
 8003196:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003198:	2501      	movs	r5, #1
 800319a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80031a0:	a907      	add	r1, sp, #28
 80031a2:	4640      	mov	r0, r8
 80031a4:	f7fe fba8 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = SPI_MPU_CS_Pin|LED_G_Pin;
 80031a8:	f244 0340 	movw	r3, #16448	; 0x4040
 80031ac:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ae:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b2:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80031b4:	a907      	add	r1, sp, #28
 80031b6:	4638      	mov	r0, r7
 80031b8:	f7fe fb9e 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 80031bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031c0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031c2:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c6:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 80031c8:	a907      	add	r1, sp, #28
 80031ca:	4630      	mov	r0, r6
 80031cc:	f7fe fb94 	bl	80018f8 <HAL_GPIO_Init>

}
 80031d0:	b00c      	add	sp, #48	; 0x30
 80031d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031d6:	bf00      	nop
 80031d8:	40023800 	.word	0x40023800
 80031dc:	40021400 	.word	0x40021400
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40021c00 	.word	0x40021c00

080031e8 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch) {
 80031e8:	b500      	push	{lr}
 80031ea:	b083      	sub	sp, #12
 80031ec:	a902      	add	r1, sp, #8
 80031ee:	f801 0d01 	strb.w	r0, [r1, #-1]!
HAL_UART_Transmit(&huart7, &ch, 1, 1);
 80031f2:	2301      	movs	r3, #1
 80031f4:	461a      	mov	r2, r3
 80031f6:	4803      	ldr	r0, [pc, #12]	; (8003204 <__io_putchar+0x1c>)
 80031f8:	f7ff fcf0 	bl	8002bdc <HAL_UART_Transmit>
}
 80031fc:	b003      	add	sp, #12
 80031fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8003202:	bf00      	nop
 8003204:	200005d8 	.word	0x200005d8

08003208 <map>:
void initLoadPID();
void Gimbal_Task();
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8003208:	b410      	push	{r4}
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800320a:	1a40      	subs	r0, r0, r1
 800320c:	9c01      	ldr	r4, [sp, #4]
 800320e:	1ae4      	subs	r4, r4, r3
 8003210:	fb04 f000 	mul.w	r0, r4, r0
 8003214:	1a52      	subs	r2, r2, r1
 8003216:	fb90 f0f2 	sdiv	r0, r0, r2
}
 800321a:	4418      	add	r0, r3
 800321c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003220:	4770      	bx	lr
	...

08003224 <HAL_UART_RxCpltCallback>:
		timerTask();
		HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8003224:	b538      	push	{r3, r4, r5, lr}
	if (UartHandle->Instance == huart1.Instance) {	//Propo-receive Interrupts
 8003226:	6802      	ldr	r2, [r0, #0]
 8003228:	4b35      	ldr	r3, [pc, #212]	; (8003300 <HAL_UART_RxCpltCallback+0xdc>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d000      	beq.n	8003232 <HAL_UART_RxCpltCallback+0xe>
		rc.key_Ctrl =  (0b0000000000100000 & rc.key_v)>>5;
		rc.key_Q =     (0b0000000001000000 & rc.key_v)>>6;
		rc.key_E =     (0b0000000010000000 & rc.key_v)>>7;

	}
}
 8003230:	bd38      	pop	{r3, r4, r5, pc}
		HAL_UART_Receive_IT(&huart1, rcData, 18);
 8003232:	4c34      	ldr	r4, [pc, #208]	; (8003304 <HAL_UART_RxCpltCallback+0xe0>)
 8003234:	2212      	movs	r2, #18
 8003236:	4621      	mov	r1, r4
 8003238:	4831      	ldr	r0, [pc, #196]	; (8003300 <HAL_UART_RxCpltCallback+0xdc>)
 800323a:	f7ff fd3f 	bl	8002cbc <HAL_UART_Receive_IT>
		rc.ch1 = (((rcData[1] & 0x07) << 8) | rcData[0]);
 800323e:	7860      	ldrb	r0, [r4, #1]
 8003240:	0202      	lsls	r2, r0, #8
 8003242:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003246:	7823      	ldrb	r3, [r4, #0]
 8003248:	431a      	orrs	r2, r3
		rc.ch1 -= 1024;
 800324a:	4b2f      	ldr	r3, [pc, #188]	; (8003308 <HAL_UART_RxCpltCallback+0xe4>)
 800324c:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8003250:	801a      	strh	r2, [r3, #0]
		rc.ch2 = (((rcData[2] & 0x3F) << 5) | (rcData[1] >> 3));
 8003252:	78a5      	ldrb	r5, [r4, #2]
 8003254:	0169      	lsls	r1, r5, #5
 8003256:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 800325a:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
		rc.ch2 -= 1024;
 800325e:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 8003262:	8059      	strh	r1, [r3, #2]
		rc.ch3 = (((rcData[4] & 0x01) << 10) | (rcData[3] << 2)
 8003264:	7920      	ldrb	r0, [r4, #4]
 8003266:	0282      	lsls	r2, r0, #10
 8003268:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800326c:	78e1      	ldrb	r1, [r4, #3]
 800326e:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
				| (rcData[2] >> 6));
 8003272:	ea42 1295 	orr.w	r2, r2, r5, lsr #6
		rc.ch3 -= 1024;
 8003276:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800327a:	809a      	strh	r2, [r3, #4]
		rc.ch4 = (((rcData[5] & 0x0F) << 7) | (rcData[4] >> 1));
 800327c:	7961      	ldrb	r1, [r4, #5]
 800327e:	01ca      	lsls	r2, r1, #7
 8003280:	f402 62f0 	and.w	r2, r2, #1920	; 0x780
 8003284:	ea42 0250 	orr.w	r2, r2, r0, lsr #1
		rc.ch4 -= 1024;
 8003288:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800328c:	80da      	strh	r2, [r3, #6]
		rc.ch5 = (rcData[17]<<8) | rcData[16];
 800328e:	7c60      	ldrb	r0, [r4, #17]
 8003290:	7c22      	ldrb	r2, [r4, #16]
		rc.ch5 = 1024-rc.ch5;
 8003292:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003296:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 800329a:	811a      	strh	r2, [r3, #8]
		rc.sw1 = ((rcData[5] & 0x30) >> 4);
 800329c:	f3c1 1201 	ubfx	r2, r1, #4, #2
 80032a0:	729a      	strb	r2, [r3, #10]
		rc.sw2 = ((rcData[5] & 0xC0) >> 6);
 80032a2:	0989      	lsrs	r1, r1, #6
 80032a4:	72d9      	strb	r1, [r3, #11]
		rc.mouse_x = ((int16_t)rcData[6]) | ((int16_t)rcData[7] << 8);
 80032a6:	79a2      	ldrb	r2, [r4, #6]
 80032a8:	79e1      	ldrb	r1, [r4, #7]
 80032aa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80032ae:	819a      	strh	r2, [r3, #12]
		rc.mouse_y = ((int16_t)rcData[8]) | ((int16_t)rcData[9] << 8);
 80032b0:	7a22      	ldrb	r2, [r4, #8]
 80032b2:	7a61      	ldrb	r1, [r4, #9]
 80032b4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80032b8:	81da      	strh	r2, [r3, #14]
		rc.mouse_z = ((int16_t)rcData[10]) | ((int16_t)rcData[11] << 8);
 80032ba:	7aa2      	ldrb	r2, [r4, #10]
 80032bc:	7ae1      	ldrb	r1, [r4, #11]
 80032be:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80032c2:	821a      	strh	r2, [r3, #16]
		rc.mouse_press_l = rcData[12];
 80032c4:	7b22      	ldrb	r2, [r4, #12]
 80032c6:	825a      	strh	r2, [r3, #18]
		rc.mouse_press_r = rcData[13];
 80032c8:	7b62      	ldrb	r2, [r4, #13]
 80032ca:	829a      	strh	r2, [r3, #20]
		rc.key_v = ((int16_t)rcData[14]);
 80032cc:	7ba2      	ldrb	r2, [r4, #14]
 80032ce:	82da      	strh	r2, [r3, #22]
		rc.key_W =     (0b0000000000000001 & rc.key_v);
 80032d0:	f002 0101 	and.w	r1, r2, #1
 80032d4:	7619      	strb	r1, [r3, #24]
		rc.key_S =     (0b0000000000000010 & rc.key_v)>>1;
 80032d6:	f3c2 0140 	ubfx	r1, r2, #1, #1
 80032da:	7699      	strb	r1, [r3, #26]
		rc.key_A =     (0b0000000000000100 & rc.key_v)>>2;
 80032dc:	f3c2 0180 	ubfx	r1, r2, #2, #1
 80032e0:	7659      	strb	r1, [r3, #25]
		rc.key_D =     (0b0000000000001000 & rc.key_v)>>3;
 80032e2:	f3c2 01c0 	ubfx	r1, r2, #3, #1
 80032e6:	76d9      	strb	r1, [r3, #27]
		rc.key_Shift = (0b0000000000010000 & rc.key_v)>>4;
 80032e8:	f3c2 1100 	ubfx	r1, r2, #4, #1
 80032ec:	7799      	strb	r1, [r3, #30]
		rc.key_Ctrl =  (0b0000000000100000 & rc.key_v)>>5;
 80032ee:	f3c2 1140 	ubfx	r1, r2, #5, #1
 80032f2:	77d9      	strb	r1, [r3, #31]
		rc.key_Q =     (0b0000000001000000 & rc.key_v)>>6;
 80032f4:	f3c2 1180 	ubfx	r1, r2, #6, #1
 80032f8:	7719      	strb	r1, [r3, #28]
		rc.key_E =     (0b0000000010000000 & rc.key_v)>>7;
 80032fa:	09d2      	lsrs	r2, r2, #7
 80032fc:	775a      	strb	r2, [r3, #29]
}
 80032fe:	e797      	b.n	8003230 <HAL_UART_RxCpltCallback+0xc>
 8003300:	20000618 	.word	0x20000618
 8003304:	20000488 	.word	0x20000488
 8003308:	20000264 	.word	0x20000264
 800330c:	00000000 	.word	0x00000000

08003310 <HAL_CAN_RxFifo0MsgPendingCallback>:

//can fifo0 receive interrupt
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8003310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003314:	4604      	mov	r4, r0
	/* Get RX message */
	if (hcan->Instance == hcan2.Instance) {// can2 bus receive interrupt
 8003316:	6802      	ldr	r2, [r0, #0]
 8003318:	4b43      	ldr	r3, [pc, #268]	; (8003428 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d006      	beq.n	800332e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		wheelFdb[id].rpm = canRxData[2] * 256 + canRxData[3];
		wheelFdb[id].torque = canRxData[4] * 256 + canRxData[5];
		wheelFdb[id].temp = canRxData[6];
		wheelFdb[id].omg = 6.28318530718 * (wheelFdb[id].rpm) / 1140.0;
	}
	if (hcan->Instance == hcan1.Instance) {// can1 bus receive interrupt
 8003320:	6822      	ldr	r2, [r4, #0]
 8003322:	4b42      	ldr	r3, [pc, #264]	; (800342c <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	429a      	cmp	r2, r3
 8003328:	d037      	beq.n	800339a <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
		fdb->rpm = canRxData[2] * 256 + canRxData[3];
		fdb->torque = canRxData[4] * 256 + canRxData[5];
		fdb->temp = canRxData[6];
		fdb->omg = 6.28318530718 * (fdb->rpm) / 1140.0;
	}
}
 800332a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, canRxData);
 800332e:	4d40      	ldr	r5, [pc, #256]	; (8003430 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 8003330:	4e40      	ldr	r6, [pc, #256]	; (8003434 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8003332:	462b      	mov	r3, r5
 8003334:	4632      	mov	r2, r6
 8003336:	2100      	movs	r1, #0
 8003338:	f7fe f860 	bl	80013fc <HAL_CAN_GetRxMessage>
		int id = canRxHeader.StdId - 513;
 800333c:	6837      	ldr	r7, [r6, #0]
 800333e:	f2a7 2801 	subw	r8, r7, #513	; 0x201
		wheelFdb[id].angle = canRxData[0] * 256 + canRxData[1];
 8003342:	782b      	ldrb	r3, [r5, #0]
 8003344:	7869      	ldrb	r1, [r5, #1]
 8003346:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800334a:	4e3b      	ldr	r6, [pc, #236]	; (8003438 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 800334c:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8003350:	eb07 0308 	add.w	r3, r7, r8
 8003354:	009a      	lsls	r2, r3, #2
 8003356:	18b3      	adds	r3, r6, r2
 8003358:	52b1      	strh	r1, [r6, r2]
		wheelFdb[id].rpm = canRxData[2] * 256 + canRxData[3];
 800335a:	78aa      	ldrb	r2, [r5, #2]
 800335c:	78e8      	ldrb	r0, [r5, #3]
 800335e:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8003362:	b200      	sxth	r0, r0
 8003364:	8058      	strh	r0, [r3, #2]
		wheelFdb[id].torque = canRxData[4] * 256 + canRxData[5];
 8003366:	7929      	ldrb	r1, [r5, #4]
 8003368:	796a      	ldrb	r2, [r5, #5]
 800336a:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800336e:	809a      	strh	r2, [r3, #4]
		wheelFdb[id].temp = canRxData[6];
 8003370:	79aa      	ldrb	r2, [r5, #6]
 8003372:	80da      	strh	r2, [r3, #6]
		wheelFdb[id].omg = 6.28318530718 * (wheelFdb[id].rpm) / 1140.0;
 8003374:	f7fd f8e6 	bl	8000544 <__aeabi_i2d>
 8003378:	a327      	add	r3, pc, #156	; (adr r3, 8003418 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 800337a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337e:	f7fd f94b 	bl	8000618 <__aeabi_dmul>
 8003382:	a327      	add	r3, pc, #156	; (adr r3, 8003420 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8003384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003388:	f7fd fa70 	bl	800086c <__aeabi_ddiv>
 800338c:	f7fd fc1c 	bl	8000bc8 <__aeabi_d2f>
 8003390:	4447      	add	r7, r8
 8003392:	00bb      	lsls	r3, r7, #2
 8003394:	441e      	add	r6, r3
 8003396:	60b0      	str	r0, [r6, #8]
 8003398:	e7c2      	b.n	8003320 <HAL_CAN_RxFifo0MsgPendingCallback+0x10>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, canRxData);
 800339a:	4d26      	ldr	r5, [pc, #152]	; (8003434 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 800339c:	4b24      	ldr	r3, [pc, #144]	; (8003430 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 800339e:	462a      	mov	r2, r5
 80033a0:	2100      	movs	r1, #0
 80033a2:	4620      	mov	r0, r4
 80033a4:	f7fe f82a 	bl	80013fc <HAL_CAN_GetRxMessage>
		switch (canRxHeader.StdId) {
 80033a8:	682b      	ldr	r3, [r5, #0]
 80033aa:	f240 2206 	movw	r2, #518	; 0x206
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d02b      	beq.n	800340a <HAL_CAN_RxFifo0MsgPendingCallback+0xfa>
 80033b2:	f240 2207 	movw	r2, #519	; 0x207
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d029      	beq.n	800340e <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
 80033ba:	f240 2205 	movw	r2, #517	; 0x205
 80033be:	4293      	cmp	r3, r2
 80033c0:	d027      	beq.n	8003412 <HAL_CAN_RxFifo0MsgPendingCallback+0x102>
		motor_fdb *fdb = 0;
 80033c2:	2400      	movs	r4, #0
		fdb->angle = canRxData[0] * 256 + canRxData[1];
 80033c4:	4b1a      	ldr	r3, [pc, #104]	; (8003430 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 80033c6:	7819      	ldrb	r1, [r3, #0]
 80033c8:	785a      	ldrb	r2, [r3, #1]
 80033ca:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 80033ce:	8022      	strh	r2, [r4, #0]
		fdb->rpm = canRxData[2] * 256 + canRxData[3];
 80033d0:	789a      	ldrb	r2, [r3, #2]
 80033d2:	78d8      	ldrb	r0, [r3, #3]
 80033d4:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 80033d8:	b200      	sxth	r0, r0
 80033da:	8060      	strh	r0, [r4, #2]
		fdb->torque = canRxData[4] * 256 + canRxData[5];
 80033dc:	7919      	ldrb	r1, [r3, #4]
 80033de:	795a      	ldrb	r2, [r3, #5]
 80033e0:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 80033e4:	80a2      	strh	r2, [r4, #4]
		fdb->temp = canRxData[6];
 80033e6:	799b      	ldrb	r3, [r3, #6]
 80033e8:	80e3      	strh	r3, [r4, #6]
		fdb->omg = 6.28318530718 * (fdb->rpm) / 1140.0;
 80033ea:	f7fd f8ab 	bl	8000544 <__aeabi_i2d>
 80033ee:	a30a      	add	r3, pc, #40	; (adr r3, 8003418 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 80033f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f4:	f7fd f910 	bl	8000618 <__aeabi_dmul>
 80033f8:	a309      	add	r3, pc, #36	; (adr r3, 8003420 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80033fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fe:	f7fd fa35 	bl	800086c <__aeabi_ddiv>
 8003402:	f7fd fbe1 	bl	8000bc8 <__aeabi_d2f>
 8003406:	60a0      	str	r0, [r4, #8]
}
 8003408:	e78f      	b.n	800332a <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
			fdb = &gimbalPitchFdb;
 800340a:	4c0c      	ldr	r4, [pc, #48]	; (800343c <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
			break;
 800340c:	e7da      	b.n	80033c4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
			fdb = &loadMotorFdb;
 800340e:	4c0c      	ldr	r4, [pc, #48]	; (8003440 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>)
			break;
 8003410:	e7d8      	b.n	80033c4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
			fdb = &gimbalYawFdb;
 8003412:	4c0c      	ldr	r4, [pc, #48]	; (8003444 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8003414:	e7d6      	b.n	80033c4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 8003416:	bf00      	nop
 8003418:	54442eea 	.word	0x54442eea
 800341c:	401921fb 	.word	0x401921fb
 8003420:	00000000 	.word	0x00000000
 8003424:	4091d000 	.word	0x4091d000
 8003428:	20000214 	.word	0x20000214
 800342c:	2000023c 	.word	0x2000023c
 8003430:	200003f8 	.word	0x200003f8
 8003434:	20000450 	.word	0x20000450
 8003438:	20000290 	.word	0x20000290
 800343c:	20000478 	.word	0x20000478
 8003440:	2000046c 	.word	0x2000046c
 8003444:	20000284 	.word	0x20000284

08003448 <driveWheelTask>:

void driveWheelTask() {
 8003448:	b530      	push	{r4, r5, lr}
 800344a:	b083      	sub	sp, #12

	mecanum.speed.vx = (float) rc.ch4 / 660 * MAX_CHASSIS_VX_SPEED;
 800344c:	4b31      	ldr	r3, [pc, #196]	; (8003514 <driveWheelTask+0xcc>)
 800344e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8003452:	ee07 2a90 	vmov	s15, r2
 8003456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800345a:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8003518 <driveWheelTask+0xd0>
 800345e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003462:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800351c <driveWheelTask+0xd4>
 8003466:	ee27 7a06 	vmul.f32	s14, s14, s12
 800346a:	482d      	ldr	r0, [pc, #180]	; (8003520 <driveWheelTask+0xd8>)
 800346c:	ed80 7a05 	vstr	s14, [r0, #20]
	mecanum.speed.vy = -(float) rc.ch3 / 660 * MAX_CHASSIS_VX_SPEED;
 8003470:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8003474:	ee07 2a90 	vmov	s15, r2
 8003478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800347c:	eef1 7a67 	vneg.f32	s15, s15
 8003480:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003484:	ee67 7a06 	vmul.f32	s15, s14, s12
 8003488:	edc0 7a06 	vstr	s15, [r0, #24]
	mecanum.speed.vw = -(float) rc.ch1 / 660 * MAX_CHASSIS_VW_SPEED;
 800348c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003490:	ee07 3a90 	vmov	s15, r3
 8003494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003498:	eef1 7a67 	vneg.f32	s15, s15
 800349c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80034a0:	eddf 7a20 	vldr	s15, [pc, #128]	; 8003524 <driveWheelTask+0xdc>
 80034a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034a8:	edc0 7a07 	vstr	s15, [r0, #28]

	mecanum_calculate(&mecanum);
 80034ac:	f000 fac4 	bl	8003a38 <mecanum_calculate>

	int16_t u[4];
	for (int i = 0; i < 4; i++) {
 80034b0:	2400      	movs	r4, #0
 80034b2:	e028      	b.n	8003506 <driveWheelTask+0xbe>
		int error = mecanum.wheel_rpm[i] - wheelFdb[i].rpm;
 80034b4:	f104 0210 	add.w	r2, r4, #16
 80034b8:	4b19      	ldr	r3, [pc, #100]	; (8003520 <driveWheelTask+0xd8>)
 80034ba:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80034be:	ed93 7a00 	vldr	s14, [r3]
 80034c2:	0065      	lsls	r5, r4, #1
 80034c4:	192b      	adds	r3, r5, r4
 80034c6:	009a      	lsls	r2, r3, #2
 80034c8:	4b17      	ldr	r3, [pc, #92]	; (8003528 <driveWheelTask+0xe0>)
 80034ca:	4413      	add	r3, r2
 80034cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80034d0:	ee07 3a90 	vmov	s15, r3
 80034d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		wheelPID[i].error = error;
 80034e0:	4b12      	ldr	r3, [pc, #72]	; (800352c <driveWheelTask+0xe4>)
 80034e2:	202c      	movs	r0, #44	; 0x2c
 80034e4:	fb00 3004 	mla	r0, r0, r4, r3
 80034e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034ec:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
		u[i] = (int16_t) pidExecute(&(wheelPID[i]));
 80034f0:	f000 fbfe 	bl	8003cf0 <pidExecute>
 80034f4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80034f8:	ab02      	add	r3, sp, #8
 80034fa:	441d      	add	r5, r3
 80034fc:	ee10 3a10 	vmov	r3, s0
 8003500:	f825 3c08 	strh.w	r3, [r5, #-8]
	for (int i = 0; i < 4; i++) {
 8003504:	3401      	adds	r4, #1
 8003506:	2c03      	cmp	r4, #3
 8003508:	ddd4      	ble.n	80034b4 <driveWheelTask+0x6c>
	}
	driveWheel(u);
 800350a:	4668      	mov	r0, sp
 800350c:	f000 fb7e 	bl	8003c0c <driveWheel>
}
 8003510:	b003      	add	sp, #12
 8003512:	bd30      	pop	{r4, r5, pc}
 8003514:	20000264 	.word	0x20000264
 8003518:	44250000 	.word	0x44250000
 800351c:	454e4000 	.word	0x454e4000
 8003520:	20000400 	.word	0x20000400
 8003524:	43960000 	.word	0x43960000
 8003528:	20000290 	.word	0x20000290
 800352c:	20000348 	.word	0x20000348

08003530 <initPID>:

void initPID() {
	for (int i = 0; i < 4; i++) {
 8003530:	2200      	movs	r2, #0
 8003532:	e013      	b.n	800355c <initPID+0x2c>
		wheelPID[i].t = 2.0f;
 8003534:	490b      	ldr	r1, [pc, #44]	; (8003564 <initPID+0x34>)
 8003536:	232c      	movs	r3, #44	; 0x2c
 8003538:	fb03 1302 	mla	r3, r3, r2, r1
 800353c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003540:	6019      	str	r1, [r3, #0]
		wheelPID[i].p = 6.5f;
 8003542:	4909      	ldr	r1, [pc, #36]	; (8003568 <initPID+0x38>)
 8003544:	6059      	str	r1, [r3, #4]
		wheelPID[i].i = 50.0f;
 8003546:	4909      	ldr	r1, [pc, #36]	; (800356c <initPID+0x3c>)
 8003548:	6099      	str	r1, [r3, #8]
		wheelPID[i].d = 0.0f;
 800354a:	2100      	movs	r1, #0
 800354c:	60d9      	str	r1, [r3, #12]
		wheelPID[i].outLimit = 15000.0f;
 800354e:	4908      	ldr	r1, [pc, #32]	; (8003570 <initPID+0x40>)
 8003550:	6119      	str	r1, [r3, #16]
		wheelPID[i].integralOutLimit = 500.0f;
 8003552:	4908      	ldr	r1, [pc, #32]	; (8003574 <initPID+0x44>)
 8003554:	6159      	str	r1, [r3, #20]
		wheelPID[i].differentialFilterRate = 0.9f;
 8003556:	4908      	ldr	r1, [pc, #32]	; (8003578 <initPID+0x48>)
 8003558:	6199      	str	r1, [r3, #24]
	for (int i = 0; i < 4; i++) {
 800355a:	3201      	adds	r2, #1
 800355c:	2a03      	cmp	r2, #3
 800355e:	dde9      	ble.n	8003534 <initPID+0x4>
	}
}
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	20000348 	.word	0x20000348
 8003568:	40d00000 	.word	0x40d00000
 800356c:	42480000 	.word	0x42480000
 8003570:	466a6000 	.word	0x466a6000
 8003574:	43fa0000 	.word	0x43fa0000
 8003578:	3f666666 	.word	0x3f666666

0800357c <initMecanum>:

void initMecanum() {
	mecanum.param.wheel_perimeter = PERIMETER;
 800357c:	4b05      	ldr	r3, [pc, #20]	; (8003594 <initMecanum+0x18>)
 800357e:	4a06      	ldr	r2, [pc, #24]	; (8003598 <initMecanum+0x1c>)
 8003580:	601a      	str	r2, [r3, #0]
	mecanum.param.wheeltrack = WHEELTRACK;
 8003582:	4a06      	ldr	r2, [pc, #24]	; (800359c <initMecanum+0x20>)
 8003584:	605a      	str	r2, [r3, #4]
	mecanum.param.wheelbase = WHEELBASE;
 8003586:	4a06      	ldr	r2, [pc, #24]	; (80035a0 <initMecanum+0x24>)
 8003588:	609a      	str	r2, [r3, #8]
	mecanum.param.rotate_x_offset = 0;
 800358a:	2200      	movs	r2, #0
 800358c:	60da      	str	r2, [r3, #12]
	mecanum.param.rotate_y_offset = 0;
 800358e:	611a      	str	r2, [r3, #16]
}
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	20000400 	.word	0x20000400
 8003598:	43ef0000 	.word	0x43ef0000
 800359c:	43c50000 	.word	0x43c50000
 80035a0:	43cf8000 	.word	0x43cf8000

080035a4 <initFriction>:

void initFriction() {
 80035a4:	b510      	push	{r4, lr}
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1500);
 80035a6:	4c10      	ldr	r4, [pc, #64]	; (80035e8 <initFriction+0x44>)
 80035a8:	6823      	ldr	r3, [r4, #0]
 80035aa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80035ae:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1500);
 80035b0:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(3000);
 80035b2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80035b6:	f7fd fd27 	bl	8001008 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1220);
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	f240 44c4 	movw	r4, #1220	; 0x4c4
 80035c0:	635c      	str	r4, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1220);
 80035c2:	641c      	str	r4, [r3, #64]	; 0x40
	HAL_Delay(5000);
 80035c4:	f241 3088 	movw	r0, #5000	; 0x1388
 80035c8:	f7fd fd1e 	bl	8001008 <HAL_Delay>
	for (int i = 1220; i < 1400; i++) {
 80035cc:	e007      	b.n	80035de <initFriction+0x3a>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);
 80035ce:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <initFriction+0x44>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	635c      	str	r4, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, i);
 80035d4:	641c      	str	r4, [r3, #64]	; 0x40
		HAL_Delay(30);
 80035d6:	201e      	movs	r0, #30
 80035d8:	f7fd fd16 	bl	8001008 <HAL_Delay>
	for (int i = 1220; i < 1400; i++) {
 80035dc:	3401      	adds	r4, #1
 80035de:	f5b4 6faf 	cmp.w	r4, #1400	; 0x578
 80035e2:	dbf4      	blt.n	80035ce <initFriction+0x2a>
	}
}
 80035e4:	bd10      	pop	{r4, pc}
 80035e6:	bf00      	nop
 80035e8:	20000560 	.word	0x20000560

080035ec <initLoadPID>:

void initLoadPID() {
	loadPID.t = 2.0f;
 80035ec:	4b08      	ldr	r3, [pc, #32]	; (8003610 <initLoadPID+0x24>)
 80035ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035f2:	601a      	str	r2, [r3, #0]
	loadPID.p = 10.0f;
 80035f4:	4a07      	ldr	r2, [pc, #28]	; (8003614 <initLoadPID+0x28>)
 80035f6:	605a      	str	r2, [r3, #4]
	loadPID.i = 0.1f*500;
 80035f8:	4a07      	ldr	r2, [pc, #28]	; (8003618 <initLoadPID+0x2c>)
 80035fa:	609a      	str	r2, [r3, #8]
	loadPID.d = 0.07f;
 80035fc:	4a07      	ldr	r2, [pc, #28]	; (800361c <initLoadPID+0x30>)
 80035fe:	60da      	str	r2, [r3, #12]
	loadPID.outLimit = 30000.0f;
 8003600:	4a07      	ldr	r2, [pc, #28]	; (8003620 <initLoadPID+0x34>)
 8003602:	611a      	str	r2, [r3, #16]
	loadPID.integralOutLimit = 10000.0f;
 8003604:	4a07      	ldr	r2, [pc, #28]	; (8003624 <initLoadPID+0x38>)
 8003606:	615a      	str	r2, [r3, #20]
	loadPID.differentialFilterRate = 0.9f;
 8003608:	4a07      	ldr	r2, [pc, #28]	; (8003628 <initLoadPID+0x3c>)
 800360a:	619a      	str	r2, [r3, #24]
}
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	2000049c 	.word	0x2000049c
 8003614:	41200000 	.word	0x41200000
 8003618:	42480000 	.word	0x42480000
 800361c:	3d8f5c29 	.word	0x3d8f5c29
 8003620:	46ea6000 	.word	0x46ea6000
 8003624:	461c4000 	.word	0x461c4000
 8003628:	3f666666 	.word	0x3f666666
 800362c:	00000000 	.word	0x00000000

08003630 <Gimbal_Task>:


void Gimbal_Task(){
 8003630:	b530      	push	{r4, r5, lr}
 8003632:	ed2d 8b02 	vpush	{d8}
 8003636:	b085      	sub	sp, #20
	int fire = 0;
	int16_t u[4];
	if (rc.sw2 == 1) {
 8003638:	4b5d      	ldr	r3, [pc, #372]	; (80037b0 <Gimbal_Task+0x180>)
 800363a:	7adb      	ldrb	r3, [r3, #11]
 800363c:	2b01      	cmp	r3, #1
 800363e:	f000 80af 	beq.w	80037a0 <Gimbal_Task+0x170>
		fire = 1;
	} else {
		fire = 0;
 8003642:	eddf 7a5c 	vldr	s15, [pc, #368]	; 80037b4 <Gimbal_Task+0x184>
	}
	DBUFF[1] = loadPID.error = -900.0f*fire - loadMotorFdb.rpm;
 8003646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800364a:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80037b8 <Gimbal_Task+0x188>
 800364e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003652:	4b5a      	ldr	r3, [pc, #360]	; (80037bc <Gimbal_Task+0x18c>)
 8003654:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003658:	ee07 3a90 	vmov	s15, r3
 800365c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003660:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003664:	4856      	ldr	r0, [pc, #344]	; (80037c0 <Gimbal_Task+0x190>)
 8003666:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
 800366a:	4c56      	ldr	r4, [pc, #344]	; (80037c4 <Gimbal_Task+0x194>)
 800366c:	edc4 7a01 	vstr	s15, [r4, #4]
	DBUFF[3] = u[2] = pidExecute(&loadPID);
 8003670:	f000 fb3e 	bl	8003cf0 <pidExecute>
 8003674:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003678:	ee10 3a10 	vmov	r3, s0
 800367c:	b21b      	sxth	r3, r3
 800367e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003682:	ee07 3a90 	vmov	s15, r3
 8003686:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800368a:	ed84 0a03 	vstr	s0, [r4, #12]

	target_yaw =(float) rc.ch1 / 660 * 70;
 800368e:	4d48      	ldr	r5, [pc, #288]	; (80037b0 <Gimbal_Task+0x180>)
 8003690:	f9b5 3000 	ldrsh.w	r3, [r5]
 8003694:	ee07 3a10 	vmov	s14, r3
 8003698:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800369c:	ed9f 8a4a 	vldr	s16, [pc, #296]	; 80037c8 <Gimbal_Task+0x198>
 80036a0:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80036a4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80037cc <Gimbal_Task+0x19c>
 80036a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036b0:	ee17 3a90 	vmov	r3, s15
 80036b4:	b21c      	sxth	r4, r3
 80036b6:	4b46      	ldr	r3, [pc, #280]	; (80037d0 <Gimbal_Task+0x1a0>)
 80036b8:	801c      	strh	r4, [r3, #0]
	yaw_now=(float)((gimbalYawFdb.angle-4096.0)/8191.0*360.0);
 80036ba:	4b46      	ldr	r3, [pc, #280]	; (80037d4 <Gimbal_Task+0x1a4>)
 80036bc:	f9b3 0000 	ldrsh.w	r0, [r3]
 80036c0:	f7fc ff40 	bl	8000544 <__aeabi_i2d>
 80036c4:	2200      	movs	r2, #0
 80036c6:	4b44      	ldr	r3, [pc, #272]	; (80037d8 <Gimbal_Task+0x1a8>)
 80036c8:	f7fc fdee 	bl	80002a8 <__aeabi_dsub>
 80036cc:	a336      	add	r3, pc, #216	; (adr r3, 80037a8 <Gimbal_Task+0x178>)
 80036ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d2:	f7fd f8cb 	bl	800086c <__aeabi_ddiv>
 80036d6:	2200      	movs	r2, #0
 80036d8:	4b40      	ldr	r3, [pc, #256]	; (80037dc <Gimbal_Task+0x1ac>)
 80036da:	f7fc ff9d 	bl	8000618 <__aeabi_dmul>
 80036de:	f7fd fa73 	bl	8000bc8 <__aeabi_d2f>
 80036e2:	ee07 0a90 	vmov	s15, r0
 80036e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036ea:	ee17 3a90 	vmov	r3, s15
 80036ee:	b218      	sxth	r0, r3
 80036f0:	4b3b      	ldr	r3, [pc, #236]	; (80037e0 <Gimbal_Task+0x1b0>)
 80036f2:	8018      	strh	r0, [r3, #0]
	u[0]=map(target_yaw-yaw_now, -180, 180, -30000, 30000);
 80036f4:	f247 5330 	movw	r3, #30000	; 0x7530
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	4b3a      	ldr	r3, [pc, #232]	; (80037e4 <Gimbal_Task+0x1b4>)
 80036fc:	22b4      	movs	r2, #180	; 0xb4
 80036fe:	f06f 01b3 	mvn.w	r1, #179	; 0xb3
 8003702:	1a20      	subs	r0, r4, r0
 8003704:	f7ff fd80 	bl	8003208 <map>
 8003708:	f8ad 0008 	strh.w	r0, [sp, #8]

	target_pich=(float) rc.ch2 / 660 * (-30);
 800370c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8003710:	ee07 3a10 	vmov	s14, r3
 8003714:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003718:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800371c:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8003720:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003724:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003728:	ee17 3a90 	vmov	r3, s15
 800372c:	b21c      	sxth	r4, r3
 800372e:	4b2e      	ldr	r3, [pc, #184]	; (80037e8 <Gimbal_Task+0x1b8>)
 8003730:	801c      	strh	r4, [r3, #0]
	pich_now=(float)((gimbalPitchFdb.angle-4096.0)/8191.0*360.0)+24;
 8003732:	4b2e      	ldr	r3, [pc, #184]	; (80037ec <Gimbal_Task+0x1bc>)
 8003734:	f9b3 0000 	ldrsh.w	r0, [r3]
 8003738:	f7fc ff04 	bl	8000544 <__aeabi_i2d>
 800373c:	2200      	movs	r2, #0
 800373e:	4b26      	ldr	r3, [pc, #152]	; (80037d8 <Gimbal_Task+0x1a8>)
 8003740:	f7fc fdb2 	bl	80002a8 <__aeabi_dsub>
 8003744:	a318      	add	r3, pc, #96	; (adr r3, 80037a8 <Gimbal_Task+0x178>)
 8003746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374a:	f7fd f88f 	bl	800086c <__aeabi_ddiv>
 800374e:	2200      	movs	r2, #0
 8003750:	4b22      	ldr	r3, [pc, #136]	; (80037dc <Gimbal_Task+0x1ac>)
 8003752:	f7fc ff61 	bl	8000618 <__aeabi_dmul>
 8003756:	f7fd fa37 	bl	8000bc8 <__aeabi_d2f>
 800375a:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
 800375e:	ee07 0a10 	vmov	s14, r0
 8003762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003766:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800376a:	ee17 3a90 	vmov	r3, s15
 800376e:	b218      	sxth	r0, r3
 8003770:	4b1f      	ldr	r3, [pc, #124]	; (80037f0 <Gimbal_Task+0x1c0>)
 8003772:	8018      	strh	r0, [r3, #0]
	u[1]=map(target_pich-pich_now, -30, 20, -15000, 15000);
 8003774:	f643 2398 	movw	r3, #15000	; 0x3a98
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	4b1e      	ldr	r3, [pc, #120]	; (80037f4 <Gimbal_Task+0x1c4>)
 800377c:	2214      	movs	r2, #20
 800377e:	f06f 011d 	mvn.w	r1, #29
 8003782:	1a20      	subs	r0, r4, r0
 8003784:	f7ff fd40 	bl	8003208 <map>
 8003788:	f8ad 000a 	strh.w	r0, [sp, #10]


	u[3]=0;
 800378c:	2300      	movs	r3, #0
 800378e:	f8ad 300e 	strh.w	r3, [sp, #14]
	driveGimbalMotors(u);
 8003792:	a802      	add	r0, sp, #8
 8003794:	f000 fa72 	bl	8003c7c <driveGimbalMotors>
}
 8003798:	b005      	add	sp, #20
 800379a:	ecbd 8b02 	vpop	{d8}
 800379e:	bd30      	pop	{r4, r5, pc}
		fire = 1;
 80037a0:	eddf 7a15 	vldr	s15, [pc, #84]	; 80037f8 <Gimbal_Task+0x1c8>
 80037a4:	e74f      	b.n	8003646 <Gimbal_Task+0x16>
 80037a6:	bf00      	nop
 80037a8:	00000000 	.word	0x00000000
 80037ac:	40bfff00 	.word	0x40bfff00
 80037b0:	20000264 	.word	0x20000264
 80037b4:	00000000 	.word	0x00000000
 80037b8:	c4610000 	.word	0xc4610000
 80037bc:	2000046c 	.word	0x2000046c
 80037c0:	2000049c 	.word	0x2000049c
 80037c4:	200002c8 	.word	0x200002c8
 80037c8:	44250000 	.word	0x44250000
 80037cc:	428c0000 	.word	0x428c0000
 80037d0:	20000484 	.word	0x20000484
 80037d4:	20000284 	.word	0x20000284
 80037d8:	40b00000 	.word	0x40b00000
 80037dc:	40768000 	.word	0x40768000
 80037e0:	2000049a 	.word	0x2000049a
 80037e4:	ffff8ad0 	.word	0xffff8ad0
 80037e8:	200002c0 	.word	0x200002c0
 80037ec:	20000478 	.word	0x20000478
 80037f0:	200004c8 	.word	0x200004c8
 80037f4:	ffffc568 	.word	0xffffc568
 80037f8:	00000001 	.word	0x00000001

080037fc <timerTask>:
void timerTask() { //call 500Hz
 80037fc:	b508      	push	{r3, lr}
	driveWheelTask();
 80037fe:	f7ff fe23 	bl	8003448 <driveWheelTask>
	Gimbal_Task();
 8003802:	f7ff ff15 	bl	8003630 <Gimbal_Task>
}
 8003806:	bd08      	pop	{r3, pc}

08003808 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003808:	b508      	push	{r3, lr}
	c++;
 800380a:	4a09      	ldr	r2, [pc, #36]	; (8003830 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800380c:	6813      	ldr	r3, [r2, #0]
 800380e:	3301      	adds	r3, #1
 8003810:	6013      	str	r3, [r2, #0]
	if (htim->Instance == htim6.Instance) {//500Hz
 8003812:	6802      	ldr	r2, [r0, #0]
 8003814:	4b07      	ldr	r3, [pc, #28]	; (8003834 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	429a      	cmp	r2, r3
 800381a:	d000      	beq.n	800381e <HAL_TIM_PeriodElapsedCallback+0x16>
}
 800381c:	bd08      	pop	{r3, pc}
		timerTask();
 800381e:	f7ff ffed 	bl	80037fc <timerTask>
		HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8003822:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003826:	4804      	ldr	r0, [pc, #16]	; (8003838 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003828:	f7fe f95c 	bl	8001ae4 <HAL_GPIO_TogglePin>
}
 800382c:	e7f6      	b.n	800381c <HAL_TIM_PeriodElapsedCallback+0x14>
 800382e:	bf00      	nop
 8003830:	200001fc 	.word	0x200001fc
 8003834:	20000524 	.word	0x20000524
 8003838:	40021400 	.word	0x40021400

0800383c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800383c:	e7fe      	b.n	800383c <_Error_Handler>
	...

08003840 <SystemClock_Config>:
{
 8003840:	b500      	push	{lr}
 8003842:	b095      	sub	sp, #84	; 0x54
  __HAL_RCC_PWR_CLK_ENABLE();
 8003844:	2100      	movs	r1, #0
 8003846:	9101      	str	r1, [sp, #4]
 8003848:	4b2b      	ldr	r3, [pc, #172]	; (80038f8 <SystemClock_Config+0xb8>)
 800384a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800384c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003850:	641a      	str	r2, [r3, #64]	; 0x40
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003858:	9301      	str	r3, [sp, #4]
 800385a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800385c:	9102      	str	r1, [sp, #8]
 800385e:	4b27      	ldr	r3, [pc, #156]	; (80038fc <SystemClock_Config+0xbc>)
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800386e:	9302      	str	r3, [sp, #8]
 8003870:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003872:	2301      	movs	r3, #1
 8003874:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003876:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800387a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800387c:	2302      	movs	r3, #2
 800387e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003880:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003884:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8003886:	2206      	movs	r2, #6
 8003888:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800388a:	22a8      	movs	r2, #168	; 0xa8
 800388c:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800388e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003890:	2304      	movs	r3, #4
 8003892:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003894:	a808      	add	r0, sp, #32
 8003896:	f7fe f929 	bl	8001aec <HAL_RCC_OscConfig>
 800389a:	bb20      	cbnz	r0, 80038e6 <SystemClock_Config+0xa6>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800389c:	230f      	movs	r3, #15
 800389e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038a0:	2302      	movs	r3, #2
 80038a2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038a4:	2300      	movs	r3, #0
 80038a6:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80038a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80038ac:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80038ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038b2:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80038b4:	2105      	movs	r1, #5
 80038b6:	a803      	add	r0, sp, #12
 80038b8:	f7fe fb38 	bl	8001f2c <HAL_RCC_ClockConfig>
 80038bc:	b9b8      	cbnz	r0, 80038ee <SystemClock_Config+0xae>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80038be:	f7fe fbe1 	bl	8002084 <HAL_RCC_GetHCLKFreq>
 80038c2:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <SystemClock_Config+0xc0>)
 80038c4:	fba3 3000 	umull	r3, r0, r3, r0
 80038c8:	0980      	lsrs	r0, r0, #6
 80038ca:	f7fd ffd7 	bl	800187c <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80038ce:	2004      	movs	r0, #4
 80038d0:	f7fd ffea 	bl	80018a8 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80038d4:	2200      	movs	r2, #0
 80038d6:	4611      	mov	r1, r2
 80038d8:	f04f 30ff 	mov.w	r0, #4294967295
 80038dc:	f7fd ff8e 	bl	80017fc <HAL_NVIC_SetPriority>
}
 80038e0:	b015      	add	sp, #84	; 0x54
 80038e2:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80038e6:	21ce      	movs	r1, #206	; 0xce
 80038e8:	4806      	ldr	r0, [pc, #24]	; (8003904 <SystemClock_Config+0xc4>)
 80038ea:	f7ff ffa7 	bl	800383c <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80038ee:	21dc      	movs	r1, #220	; 0xdc
 80038f0:	4804      	ldr	r0, [pc, #16]	; (8003904 <SystemClock_Config+0xc4>)
 80038f2:	f7ff ffa3 	bl	800383c <_Error_Handler>
 80038f6:	bf00      	nop
 80038f8:	40023800 	.word	0x40023800
 80038fc:	40007000 	.word	0x40007000
 8003900:	10624dd3 	.word	0x10624dd3
 8003904:	08006eb8 	.word	0x08006eb8

08003908 <main>:
{
 8003908:	b500      	push	{lr}
 800390a:	b083      	sub	sp, #12
  HAL_Init();
 800390c:	f7fd fb50 	bl	8000fb0 <HAL_Init>
  SystemClock_Config();
 8003910:	f7ff ff96 	bl	8003840 <SystemClock_Config>
  MX_GPIO_Init();
 8003914:	f7ff fbde 	bl	80030d4 <MX_GPIO_Init>
  MX_TIM6_Init();
 8003918:	f000 fba4 	bl	8004064 <MX_TIM6_Init>
  MX_SPI5_Init();
 800391c:	f000 fa4e 	bl	8003dbc <MX_SPI5_Init>
  MX_CAN2_Init();
 8003920:	f7ff fb0c 	bl	8002f3c <MX_CAN2_Init>
  MX_CAN1_Init();
 8003924:	f7ff fae4 	bl	8002ef0 <MX_CAN1_Init>
  MX_TIM12_Init();
 8003928:	f000 fcb4 	bl	8004294 <MX_TIM12_Init>
  MX_TIM1_Init();
 800392c:	f000 fc4c 	bl	80041c8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8003930:	f000 fd1e 	bl	8004370 <MX_USART1_UART_Init>
  MX_UART7_Init();
 8003934:	f000 fce0 	bl	80042f8 <MX_UART7_Init>
  MX_UART8_Init();
 8003938:	f000 fcfc 	bl	8004334 <MX_UART8_Init>
  MX_USART6_UART_Init();
 800393c:	f000 fd38 	bl	80043b0 <MX_USART6_UART_Init>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 8003940:	4d31      	ldr	r5, [pc, #196]	; (8003a08 <main+0x100>)
 8003942:	2200      	movs	r2, #0
 8003944:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003948:	4628      	mov	r0, r5
 800394a:	f7fe f8c5 	bl	8001ad8 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // friction wheel
 800394e:	4c2f      	ldr	r4, [pc, #188]	; (8003a0c <main+0x104>)
 8003950:	2100      	movs	r1, #0
 8003952:	4620      	mov	r0, r4
 8003954:	f7fe fe92 	bl	800267c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8003958:	210c      	movs	r1, #12
 800395a:	4620      	mov	r0, r4
 800395c:	f7fe fe8e 	bl	800267c <HAL_TIM_PWM_Start>
  initFriction();
 8003960:	f7ff fe20 	bl	80035a4 <initFriction>
  initPID();
 8003964:	f7ff fde4 	bl	8003530 <initPID>
  initLoadPID();
 8003968:	f7ff fe40 	bl	80035ec <initLoadPID>
  initCanFilter();
 800396c:	f7ff fb94 	bl	8003098 <initCanFilter>
  initMecanum();
 8003970:	f7ff fe04 	bl	800357c <initMecanum>
  HAL_UART_Receive_IT(&huart1, rcData, 18);
 8003974:	2212      	movs	r2, #18
 8003976:	4926      	ldr	r1, [pc, #152]	; (8003a10 <main+0x108>)
 8003978:	4826      	ldr	r0, [pc, #152]	; (8003a14 <main+0x10c>)
 800397a:	f7ff f99f 	bl	8002cbc <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 800397e:	4826      	ldr	r0, [pc, #152]	; (8003a18 <main+0x110>)
 8003980:	f7fe fc6c 	bl	800225c <HAL_TIM_Base_Start_IT>
  setbuf(stdout, NULL);
 8003984:	4b25      	ldr	r3, [pc, #148]	; (8003a1c <main+0x114>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2100      	movs	r1, #0
 800398a:	6898      	ldr	r0, [r3, #8]
 800398c:	f001 fb08 	bl	8004fa0 <setbuf>
  HAL_CAN_Start(&hcan1);
 8003990:	4e23      	ldr	r6, [pc, #140]	; (8003a20 <main+0x118>)
 8003992:	4630      	mov	r0, r6
 8003994:	f7fd fc8a 	bl	80012ac <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 8003998:	4c22      	ldr	r4, [pc, #136]	; (8003a24 <main+0x11c>)
 800399a:	4620      	mov	r0, r4
 800399c:	f7fd fc86 	bl	80012ac <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80039a0:	2102      	movs	r1, #2
 80039a2:	4630      	mov	r0, r6
 80039a4:	f7fd fdc9 	bl	800153a <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80039a8:	2102      	movs	r1, #2
 80039aa:	4620      	mov	r0, r4
 80039ac:	f7fd fdc5 	bl	800153a <HAL_CAN_ActivateNotification>
  HAL_GPIO_WritePin(POWER_OUT1_GPIO_Port, POWER_OUT1_Pin, 1);
 80039b0:	4c1d      	ldr	r4, [pc, #116]	; (8003a28 <main+0x120>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	2104      	movs	r1, #4
 80039b6:	4620      	mov	r0, r4
 80039b8:	f7fe f88e 	bl	8001ad8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(POWER_OUT2_GPIO_Port, POWER_OUT2_Pin, 1);
 80039bc:	2201      	movs	r2, #1
 80039be:	2108      	movs	r1, #8
 80039c0:	4620      	mov	r0, r4
 80039c2:	f7fe f889 	bl	8001ad8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(POWER_OUT3_GPIO_Port, POWER_OUT3_Pin, 1);
 80039c6:	2201      	movs	r2, #1
 80039c8:	2110      	movs	r1, #16
 80039ca:	4620      	mov	r0, r4
 80039cc:	f7fe f884 	bl	8001ad8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(POWER_OUT4_GPIO_Port, POWER_OUT4_Pin, 1);
 80039d0:	2201      	movs	r2, #1
 80039d2:	2120      	movs	r1, #32
 80039d4:	4620      	mov	r0, r4
 80039d6:	f7fe f87f 	bl	8001ad8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 80039da:	2201      	movs	r2, #1
 80039dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80039e0:	4628      	mov	r0, r5
 80039e2:	f7fe f879 	bl	8001ad8 <HAL_GPIO_WritePin>
	  printf("M0=%d M1=%d M2=%d M3=%d",wheelFdb[0].rpm,wheelFdb[1].rpm,wheelFdb[2].rpm,wheelFdb[3].rpm);
 80039e6:	4811      	ldr	r0, [pc, #68]	; (8003a2c <main+0x124>)
 80039e8:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80039ec:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 80039f0:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 80039f4:	f9b0 0026 	ldrsh.w	r0, [r0, #38]	; 0x26
 80039f8:	9000      	str	r0, [sp, #0]
 80039fa:	480d      	ldr	r0, [pc, #52]	; (8003a30 <main+0x128>)
 80039fc:	f001 fa54 	bl	8004ea8 <iprintf>
	  printf("\r\n");
 8003a00:	480c      	ldr	r0, [pc, #48]	; (8003a34 <main+0x12c>)
 8003a02:	f001 fac5 	bl	8004f90 <puts>
 8003a06:	e7ee      	b.n	80039e6 <main+0xde>
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	20000560 	.word	0x20000560
 8003a10:	20000488 	.word	0x20000488
 8003a14:	20000618 	.word	0x20000618
 8003a18:	20000524 	.word	0x20000524
 8003a1c:	2000000c 	.word	0x2000000c
 8003a20:	2000023c 	.word	0x2000023c
 8003a24:	20000214 	.word	0x20000214
 8003a28:	40021c00 	.word	0x40021c00
 8003a2c:	20000290 	.word	0x20000290
 8003a30:	08006ec8 	.word	0x08006ec8
 8003a34:	08006ee0 	.word	0x08006ee0

08003a38 <mecanum_calculate>:
  * @param input : ccx=+vx(mm/s)  ccy=+vy(mm/s)  ccw=+vw(deg/s)
  *        output: every wheel speed(rpm)
  * @note  1=FR 2=FL 3=BL 4=BR
  */
void mecanum_calculate(struct mecanum *mec)
{
 8003a38:	b470      	push	{r4, r5, r6}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	4604      	mov	r4, r0
  static float rotate_ratio_fl;
  static float rotate_ratio_bl;
  static float rotate_ratio_br;
  static float wheel_rpm_ratio;

  rotate_ratio_fr = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 8003a3e:	edd0 7a02 	vldr	s15, [r0, #8]
 8003a42:	ed90 7a01 	vldr	s14, [r0, #4]
 8003a46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a4a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003a4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a52:	ed90 7a03 	vldr	s14, [r0, #12]
 8003a56:	ee37 6ac7 	vsub.f32	s12, s15, s14
 8003a5a:	edd0 6a04 	vldr	s13, [r0, #16]
 8003a5e:	ee76 5a26 	vadd.f32	s11, s12, s13
 8003a62:	ed9f 5a61 	vldr	s10, [pc, #388]	; 8003be8 <mecanum_calculate+0x1b0>
 8003a66:	ee85 3a85 	vdiv.f32	s6, s11, s10
  rotate_ratio_fl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset - mec->param.rotate_y_offset) / RADIAN_COEF;
 8003a6a:	ee36 6a66 	vsub.f32	s12, s12, s13
 8003a6e:	eec6 3a05 	vdiv.f32	s7, s12, s10
  rotate_ratio_bl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f + mec->param.rotate_x_offset - mec->param.rotate_y_offset) / RADIAN_COEF;
 8003a72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a76:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8003a7a:	ee87 4a05 	vdiv.f32	s8, s14, s10
  rotate_ratio_br = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f + mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 8003a7e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003a82:	eec6 4a85 	vdiv.f32	s9, s13, s10

  wheel_rpm_ratio = 60.0f / (mec->param.wheel_perimeter * MOTOR_DECELE_RATIO);
 8003a86:	edd0 7a00 	vldr	s15, [r0]
 8003a8a:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8003bec <mecanum_calculate+0x1b4>
 8003a8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a92:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8003bf0 <mecanum_calculate+0x1b8>
 8003a96:	eec7 6a27 	vdiv.f32	s13, s14, s15

  MEC_VAL_LIMIT(mec->speed.vx, -MAX_CHASSIS_VX_SPEED, MAX_CHASSIS_VX_SPEED); //mm/s
 8003a9a:	edd0 7a05 	vldr	s15, [r0, #20]
 8003a9e:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8003bf4 <mecanum_calculate+0x1bc>
 8003aa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aaa:	d84b      	bhi.n	8003b44 <mecanum_calculate+0x10c>
 8003aac:	ed84 7a05 	vstr	s14, [r4, #20]
  MEC_VAL_LIMIT(mec->speed.vy, -MAX_CHASSIS_VY_SPEED, MAX_CHASSIS_VY_SPEED); //mm/s
 8003ab0:	edd4 7a06 	vldr	s15, [r4, #24]
 8003ab4:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8003bf4 <mecanum_calculate+0x1bc>
 8003ab8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac0:	d84a      	bhi.n	8003b58 <mecanum_calculate+0x120>
 8003ac2:	ed84 7a06 	vstr	s14, [r4, #24]
  MEC_VAL_LIMIT(mec->speed.vw, -MAX_CHASSIS_VW_SPEED, MAX_CHASSIS_VW_SPEED); //deg/s
 8003ac6:	edd4 7a07 	vldr	s15, [r4, #28]
 8003aca:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8003bf8 <mecanum_calculate+0x1c0>
 8003ace:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad6:	d849      	bhi.n	8003b6c <mecanum_calculate+0x134>
 8003ad8:	ed84 7a07 	vstr	s14, [r4, #28]

  float wheel_rpm[4];
  float max = 0;

  wheel_rpm[0] = (-mec->speed.vx - mec->speed.vy - mec->speed.vw * rotate_ratio_fr) * wheel_rpm_ratio;
 8003adc:	ed94 5a05 	vldr	s10, [r4, #20]
 8003ae0:	eeb1 7a45 	vneg.f32	s14, s10
 8003ae4:	edd4 7a06 	vldr	s15, [r4, #24]
 8003ae8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003aec:	edd4 5a07 	vldr	s11, [r4, #28]
 8003af0:	ee23 6a25 	vmul.f32	s12, s6, s11
 8003af4:	ee37 7a46 	vsub.f32	s14, s14, s12
 8003af8:	ee26 7a87 	vmul.f32	s14, s13, s14
 8003afc:	ed8d 7a00 	vstr	s14, [sp]
  wheel_rpm[1] = (mec->speed.vx - mec->speed.vy - mec->speed.vw * rotate_ratio_fl) * wheel_rpm_ratio;
 8003b00:	ee35 6a67 	vsub.f32	s12, s10, s15
 8003b04:	ee23 7aa5 	vmul.f32	s14, s7, s11
 8003b08:	ee36 6a47 	vsub.f32	s12, s12, s14
 8003b0c:	ee26 6a86 	vmul.f32	s12, s13, s12
 8003b10:	ed8d 6a01 	vstr	s12, [sp, #4]
  wheel_rpm[2] = (mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_bl) * wheel_rpm_ratio;
 8003b14:	ee35 7a27 	vadd.f32	s14, s10, s15
 8003b18:	ee24 6a25 	vmul.f32	s12, s8, s11
 8003b1c:	ee37 7a46 	vsub.f32	s14, s14, s12
 8003b20:	ee26 7a87 	vmul.f32	s14, s13, s14
 8003b24:	ed8d 7a02 	vstr	s14, [sp, #8]
  wheel_rpm[3] = (-mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_br) * wheel_rpm_ratio;
 8003b28:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8003b2c:	ee64 5aa5 	vmul.f32	s11, s9, s11
 8003b30:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8003b34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b38:	edcd 7a03 	vstr	s15, [sp, #12]

  //find max item
  for (uint8_t i = 0; i < 4; i++)
 8003b3c:	2300      	movs	r3, #0
  float max = 0;
 8003b3e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003bfc <mecanum_calculate+0x1c4>
  for (uint8_t i = 0; i < 4; i++)
 8003b42:	e01f      	b.n	8003b84 <mecanum_calculate+0x14c>
  MEC_VAL_LIMIT(mec->speed.vx, -MAX_CHASSIS_VX_SPEED, MAX_CHASSIS_VX_SPEED); //mm/s
 8003b44:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003c00 <mecanum_calculate+0x1c8>
 8003b48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b50:	dbae      	blt.n	8003ab0 <mecanum_calculate+0x78>
 8003b52:	ed84 7a05 	vstr	s14, [r4, #20]
 8003b56:	e7ab      	b.n	8003ab0 <mecanum_calculate+0x78>
  MEC_VAL_LIMIT(mec->speed.vy, -MAX_CHASSIS_VY_SPEED, MAX_CHASSIS_VY_SPEED); //mm/s
 8003b58:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003c00 <mecanum_calculate+0x1c8>
 8003b5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b64:	dbaf      	blt.n	8003ac6 <mecanum_calculate+0x8e>
 8003b66:	ed84 7a06 	vstr	s14, [r4, #24]
 8003b6a:	e7ac      	b.n	8003ac6 <mecanum_calculate+0x8e>
  MEC_VAL_LIMIT(mec->speed.vw, -MAX_CHASSIS_VW_SPEED, MAX_CHASSIS_VW_SPEED); //deg/s
 8003b6c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003c04 <mecanum_calculate+0x1cc>
 8003b70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b78:	dbb0      	blt.n	8003adc <mecanum_calculate+0xa4>
 8003b7a:	ed84 7a07 	vstr	s14, [r4, #28]
 8003b7e:	e7ad      	b.n	8003adc <mecanum_calculate+0xa4>
  for (uint8_t i = 0; i < 4; i++)
 8003b80:	3301      	adds	r3, #1
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d80e      	bhi.n	8003ba6 <mecanum_calculate+0x16e>
  {
    if (fabs(wheel_rpm[i]) > max)
 8003b88:	aa04      	add	r2, sp, #16
 8003b8a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8003b8e:	ed52 7a04 	vldr	s15, [r2, #-16]
 8003b92:	eef0 7ae7 	vabs.f32	s15, s15
 8003b96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b9e:	ddef      	ble.n	8003b80 <mecanum_calculate+0x148>
      max = fabs(wheel_rpm[i]);
 8003ba0:	eeb0 7a67 	vmov.f32	s14, s15
 8003ba4:	e7ec      	b.n	8003b80 <mecanum_calculate+0x148>
  }

  //equal proportion
  if (max > MAX_WHEEL_RPM)
 8003ba6:	eddf 7a18 	vldr	s15, [pc, #96]	; 8003c08 <mecanum_calculate+0x1d0>
 8003baa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb2:	dd10      	ble.n	8003bd6 <mecanum_calculate+0x19e>
  {
    float rate = MAX_WHEEL_RPM / max;
 8003bb4:	eec7 6a87 	vdiv.f32	s13, s15, s14
    for (uint8_t i = 0; i < 4; i++)
 8003bb8:	2300      	movs	r3, #0
 8003bba:	e00a      	b.n	8003bd2 <mecanum_calculate+0x19a>
      wheel_rpm[i] *= rate;
 8003bbc:	aa04      	add	r2, sp, #16
 8003bbe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8003bc2:	ed52 7a04 	vldr	s15, [r2, #-16]
 8003bc6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003bca:	ed42 7a04 	vstr	s15, [r2, #-16]
    for (uint8_t i = 0; i < 4; i++)
 8003bce:	3301      	adds	r3, #1
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b03      	cmp	r3, #3
 8003bd4:	d9f2      	bls.n	8003bbc <mecanum_calculate+0x184>
  }
  memcpy(mec->wheel_rpm, wheel_rpm, 4 * sizeof(float));
 8003bd6:	466d      	mov	r5, sp
 8003bd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bda:	6420      	str	r0, [r4, #64]	; 0x40
 8003bdc:	6461      	str	r1, [r4, #68]	; 0x44
 8003bde:	64a2      	str	r2, [r4, #72]	; 0x48
 8003be0:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8003be2:	b005      	add	sp, #20
 8003be4:	bc70      	pop	{r4, r5, r6}
 8003be6:	4770      	bx	lr
 8003be8:	42653333 	.word	0x42653333
 8003bec:	3d579436 	.word	0x3d579436
 8003bf0:	42700000 	.word	0x42700000
 8003bf4:	c54e4000 	.word	0xc54e4000
 8003bf8:	c3960000 	.word	0xc3960000
 8003bfc:	00000000 	.word	0x00000000
 8003c00:	454e4000 	.word	0x454e4000
 8003c04:	43960000 	.word	0x43960000
 8003c08:	4604d000 	.word	0x4604d000

08003c0c <driveWheel>:
 */
#include "motor.h"

const int CaseMotor_MaxSpeed = 30 * 256;

void driveWheel(int16_t *u) {
 8003c0c:	b530      	push	{r4, r5, lr}
 8003c0e:	b08b      	sub	sp, #44	; 0x2c
	CAN_TxHeaderTypeDef header;
	uint8_t TxData[8] = { 0 };
 8003c10:	2300      	movs	r3, #0
 8003c12:	9302      	str	r3, [sp, #8]
 8003c14:	9303      	str	r3, [sp, #12]
	uint32_t TxMailbox;

	header.StdId = 0x200;
 8003c16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c1a:	9204      	str	r2, [sp, #16]
	header.RTR = CAN_RTR_DATA;
 8003c1c:	9307      	str	r3, [sp, #28]
	header.IDE = CAN_ID_STD;
 8003c1e:	9306      	str	r3, [sp, #24]
	header.DLC = 8;
 8003c20:	2208      	movs	r2, #8
 8003c22:	9208      	str	r2, [sp, #32]
	//header.TransmitGlobalTime = DISABLE;

	for (int i = 0; i < 4; i++) {
 8003c24:	e012      	b.n	8003c4c <driveWheel+0x40>
		if (CaseMotor_MaxSpeed < u[i]) {
			u[i] = CaseMotor_MaxSpeed - 1;
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 8003c26:	f512 5ff0 	cmn.w	r2, #7680	; 0x1e00
 8003c2a:	da02      	bge.n	8003c32 <driveWheel+0x26>
			u[i] = -CaseMotor_MaxSpeed + 1;
 8003c2c:	f24e 2201 	movw	r2, #57857	; 0xe201
 8003c30:	5242      	strh	r2, [r0, r1]
		}
		TxData[i * 2] = u[i] >> 8;
 8003c32:	5e41      	ldrsh	r1, [r0, r1]
 8003c34:	005a      	lsls	r2, r3, #1
 8003c36:	ac0a      	add	r4, sp, #40	; 0x28
 8003c38:	4414      	add	r4, r2
 8003c3a:	120d      	asrs	r5, r1, #8
 8003c3c:	f804 5c20 	strb.w	r5, [r4, #-32]
		TxData[i * 2 + 1] = u[i] & 0xFF;
 8003c40:	3201      	adds	r2, #1
 8003c42:	ac0a      	add	r4, sp, #40	; 0x28
 8003c44:	4422      	add	r2, r4
 8003c46:	f802 1c20 	strb.w	r1, [r2, #-32]
	for (int i = 0; i < 4; i++) {
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	2b03      	cmp	r3, #3
 8003c4e:	dc0a      	bgt.n	8003c66 <driveWheel+0x5a>
		if (CaseMotor_MaxSpeed < u[i]) {
 8003c50:	0059      	lsls	r1, r3, #1
 8003c52:	f930 2013 	ldrsh.w	r2, [r0, r3, lsl #1]
 8003c56:	f5b2 5ff0 	cmp.w	r2, #7680	; 0x1e00
 8003c5a:	dde4      	ble.n	8003c26 <driveWheel+0x1a>
			u[i] = CaseMotor_MaxSpeed - 1;
 8003c5c:	f641 52ff 	movw	r2, #7679	; 0x1dff
 8003c60:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8003c64:	e7e5      	b.n	8003c32 <driveWheel+0x26>
	}

	HAL_CAN_AddTxMessage(&hcan2, &header, TxData, &TxMailbox);
 8003c66:	ab01      	add	r3, sp, #4
 8003c68:	aa02      	add	r2, sp, #8
 8003c6a:	a904      	add	r1, sp, #16
 8003c6c:	4802      	ldr	r0, [pc, #8]	; (8003c78 <driveWheel+0x6c>)
 8003c6e:	f7fd fb4b 	bl	8001308 <HAL_CAN_AddTxMessage>

}
 8003c72:	b00b      	add	sp, #44	; 0x2c
 8003c74:	bd30      	pop	{r4, r5, pc}
 8003c76:	bf00      	nop
 8003c78:	20000214 	.word	0x20000214

08003c7c <driveGimbalMotors>:

void driveGimbalMotors(int16_t *u) {
 8003c7c:	b530      	push	{r4, r5, lr}
 8003c7e:	b08b      	sub	sp, #44	; 0x2c
	CAN_TxHeaderTypeDef header;
	uint8_t TxData[8] = { 0 };
 8003c80:	2300      	movs	r3, #0
 8003c82:	9302      	str	r3, [sp, #8]
 8003c84:	9303      	str	r3, [sp, #12]
	uint32_t TxMailbox;

	header.StdId = 0x1ff;
 8003c86:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003c8a:	9204      	str	r2, [sp, #16]
	header.RTR = CAN_RTR_DATA;
 8003c8c:	9307      	str	r3, [sp, #28]
	header.IDE = CAN_ID_STD;
 8003c8e:	9306      	str	r3, [sp, #24]
	header.DLC = 8;
 8003c90:	2208      	movs	r2, #8
 8003c92:	9208      	str	r2, [sp, #32]
	//header.TransmitGlobalTime = DISABLE;

	for (int i = 0; i < 4; i++) {
 8003c94:	e013      	b.n	8003cbe <driveGimbalMotors+0x42>
		if(i==2){
		if (CaseMotor_MaxSpeed < u[i]) {
			u[i] = CaseMotor_MaxSpeed - 1;
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 8003c96:	f512 5ff0 	cmn.w	r2, #7680	; 0x1e00
 8003c9a:	da02      	bge.n	8003ca2 <driveGimbalMotors+0x26>
			u[i] = -CaseMotor_MaxSpeed + 1;
 8003c9c:	f24e 2201 	movw	r2, #57857	; 0xe201
 8003ca0:	5242      	strh	r2, [r0, r1]
		}
		}
		TxData[i * 2] = u[i] >> 8;
 8003ca2:	005a      	lsls	r2, r3, #1
 8003ca4:	f930 1013 	ldrsh.w	r1, [r0, r3, lsl #1]
 8003ca8:	ac0a      	add	r4, sp, #40	; 0x28
 8003caa:	4414      	add	r4, r2
 8003cac:	120d      	asrs	r5, r1, #8
 8003cae:	f804 5c20 	strb.w	r5, [r4, #-32]
		TxData[i * 2 + 1] = u[i] & 0xFF;
 8003cb2:	3201      	adds	r2, #1
 8003cb4:	ac0a      	add	r4, sp, #40	; 0x28
 8003cb6:	4422      	add	r2, r4
 8003cb8:	f802 1c20 	strb.w	r1, [r2, #-32]
	for (int i = 0; i < 4; i++) {
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	2b03      	cmp	r3, #3
 8003cc0:	dc0c      	bgt.n	8003cdc <driveGimbalMotors+0x60>
		if(i==2){
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d1ed      	bne.n	8003ca2 <driveGimbalMotors+0x26>
		if (CaseMotor_MaxSpeed < u[i]) {
 8003cc6:	0059      	lsls	r1, r3, #1
 8003cc8:	f930 2013 	ldrsh.w	r2, [r0, r3, lsl #1]
 8003ccc:	f5b2 5ff0 	cmp.w	r2, #7680	; 0x1e00
 8003cd0:	dde1      	ble.n	8003c96 <driveGimbalMotors+0x1a>
			u[i] = CaseMotor_MaxSpeed - 1;
 8003cd2:	f641 52ff 	movw	r2, #7679	; 0x1dff
 8003cd6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8003cda:	e7e2      	b.n	8003ca2 <driveGimbalMotors+0x26>
	}

	HAL_CAN_AddTxMessage(&hcan1, &header, TxData, &TxMailbox);
 8003cdc:	ab01      	add	r3, sp, #4
 8003cde:	aa02      	add	r2, sp, #8
 8003ce0:	a904      	add	r1, sp, #16
 8003ce2:	4802      	ldr	r0, [pc, #8]	; (8003cec <driveGimbalMotors+0x70>)
 8003ce4:	f7fd fb10 	bl	8001308 <HAL_CAN_AddTxMessage>
}
 8003ce8:	b00b      	add	sp, #44	; 0x2c
 8003cea:	bd30      	pop	{r4, r5, pc}
 8003cec:	2000023c 	.word	0x2000023c

08003cf0 <pidExecute>:
 */
#include "pid.h"

float pidExecute(_pid_t *pid) {
	float u = 0;
	pid->integralOut += pid->i * pid->error * (pid->t/1000.0f);
 8003cf0:	edd0 7a02 	vldr	s15, [r0, #8]
 8003cf4:	edd0 6a0a 	vldr	s13, [r0, #40]	; 0x28
 8003cf8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003cfc:	ed90 6a00 	vldr	s12, [r0]
 8003d00:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003db8 <pidExecute+0xc8>
 8003d04:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8003d08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d0c:	ed90 7a07 	vldr	s14, [r0, #28]
 8003d10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d14:	edc0 7a07 	vstr	s15, [r0, #28]
	if (pid->integralOutLimit < pid->integralOut) pid->integralOut = pid->integralOutLimit;
 8003d18:	ed90 7a05 	vldr	s14, [r0, #20]
 8003d1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d24:	dd3a      	ble.n	8003d9c <pidExecute+0xac>
 8003d26:	ed80 7a07 	vstr	s14, [r0, #28]
	else if (pid->integralOut < -pid->integralOutLimit) pid->integralOut = -pid->integralOutLimit;
	pid->differentialFilter = pid->differentialFilter * pid->differentialFilterRate + (pid->d * (pid->error - pid->lastError)*(1000.0f/pid->t)) * (1 - pid->differentialFilterRate);
 8003d2a:	edd0 7a09 	vldr	s15, [r0, #36]	; 0x24
 8003d2e:	ed90 5a06 	vldr	s10, [r0, #24]
 8003d32:	ee67 7a85 	vmul.f32	s15, s15, s10
 8003d36:	ed90 7a03 	vldr	s14, [r0, #12]
 8003d3a:	edd0 5a08 	vldr	s11, [r0, #32]
 8003d3e:	ee76 5ae5 	vsub.f32	s11, s13, s11
 8003d42:	ee27 7a25 	vmul.f32	s14, s14, s11
 8003d46:	eddf 4a1c 	vldr	s9, [pc, #112]	; 8003db8 <pidExecute+0xc8>
 8003d4a:	eec4 5a86 	vdiv.f32	s11, s9, s12
 8003d4e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8003d52:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003d56:	ee36 6a45 	vsub.f32	s12, s12, s10
 8003d5a:	ee27 7a06 	vmul.f32	s14, s14, s12
 8003d5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d62:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
	u = pid->p * pid->error + pid->integralOut + pid->differentialFilter;
 8003d66:	ed90 7a01 	vldr	s14, [r0, #4]
 8003d6a:	ee26 7a87 	vmul.f32	s14, s13, s14
 8003d6e:	ed90 6a07 	vldr	s12, [r0, #28]
 8003d72:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003d76:	ee77 7a87 	vadd.f32	s15, s15, s14
	if (pid->outLimit < u) u = pid->outLimit;
 8003d7a:	ed90 0a04 	vldr	s0, [r0, #16]
 8003d7e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d86:	d406      	bmi.n	8003d96 <pidExecute+0xa6>
	else if (u < -pid->outLimit)u = -pid->outLimit;
 8003d88:	eeb1 0a40 	vneg.f32	s0, s0
 8003d8c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d94:	dd0c      	ble.n	8003db0 <pidExecute+0xc0>
	pid->lastError = pid->error;
 8003d96:	edc0 6a08 	vstr	s13, [r0, #32]
	return u;
}
 8003d9a:	4770      	bx	lr
	else if (pid->integralOut < -pid->integralOutLimit) pid->integralOut = -pid->integralOutLimit;
 8003d9c:	eeb1 7a47 	vneg.f32	s14, s14
 8003da0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da8:	d5bf      	bpl.n	8003d2a <pidExecute+0x3a>
 8003daa:	ed80 7a07 	vstr	s14, [r0, #28]
 8003dae:	e7bc      	b.n	8003d2a <pidExecute+0x3a>
	u = pid->p * pid->error + pid->integralOut + pid->differentialFilter;
 8003db0:	eeb0 0a67 	vmov.f32	s0, s15
 8003db4:	e7ef      	b.n	8003d96 <pidExecute+0xa6>
 8003db6:	bf00      	nop
 8003db8:	447a0000 	.word	0x447a0000

08003dbc <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8003dbc:	b508      	push	{r3, lr}

  hspi5.Instance = SPI5;
 8003dbe:	480f      	ldr	r0, [pc, #60]	; (8003dfc <MX_SPI5_Init+0x40>)
 8003dc0:	4b0f      	ldr	r3, [pc, #60]	; (8003e00 <MX_SPI5_Init+0x44>)
 8003dc2:	6003      	str	r3, [r0, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003dc4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003dc8:	6043      	str	r3, [r0, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	6083      	str	r3, [r0, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003dce:	60c3      	str	r3, [r0, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dd0:	6103      	str	r3, [r0, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003dd2:	6143      	str	r3, [r0, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8003dd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dd8:	6182      	str	r2, [r0, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003dda:	2230      	movs	r2, #48	; 0x30
 8003ddc:	61c2      	str	r2, [r0, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003dde:	6203      	str	r3, [r0, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003de0:	6243      	str	r3, [r0, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003de2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8003de4:	230a      	movs	r3, #10
 8003de6:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003de8:	f7fe f972 	bl	80020d0 <HAL_SPI_Init>
 8003dec:	b900      	cbnz	r0, 8003df0 <MX_SPI5_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8003dee:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8003df0:	2145      	movs	r1, #69	; 0x45
 8003df2:	4804      	ldr	r0, [pc, #16]	; (8003e04 <MX_SPI5_Init+0x48>)
 8003df4:	f7ff fd22 	bl	800383c <_Error_Handler>
}
 8003df8:	e7f9      	b.n	8003dee <MX_SPI5_Init+0x32>
 8003dfa:	bf00      	nop
 8003dfc:	200004cc 	.word	0x200004cc
 8003e00:	40015000 	.word	0x40015000
 8003e04:	08006ee4 	.word	0x08006ee4

08003e08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI5)
 8003e08:	6802      	ldr	r2, [r0, #0]
 8003e0a:	4b12      	ldr	r3, [pc, #72]	; (8003e54 <HAL_SPI_MspInit+0x4c>)
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d000      	beq.n	8003e12 <HAL_SPI_MspInit+0xa>
 8003e10:	4770      	bx	lr
{
 8003e12:	b500      	push	{lr}
 8003e14:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003e16:	2100      	movs	r1, #0
 8003e18:	9100      	str	r1, [sp, #0]
 8003e1a:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8003e1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e20:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003e24:	645a      	str	r2, [r3, #68]	; 0x44
 8003e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	9b00      	ldr	r3, [sp, #0]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 8003e30:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003e34:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e36:	2302      	movs	r3, #2
 8003e38:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3a:	9103      	str	r1, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003e40:	2305      	movs	r3, #5
 8003e42:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e44:	a901      	add	r1, sp, #4
 8003e46:	4804      	ldr	r0, [pc, #16]	; (8003e58 <HAL_SPI_MspInit+0x50>)
 8003e48:	f7fd fd56 	bl	80018f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8003e4c:	b007      	add	sp, #28
 8003e4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e52:	bf00      	nop
 8003e54:	40015000 	.word	0x40015000
 8003e58:	40021400 	.word	0x40021400

08003e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e5c:	b510      	push	{r4, lr}
 8003e5e:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e60:	2400      	movs	r4, #0
 8003e62:	9400      	str	r4, [sp, #0]
 8003e64:	4b21      	ldr	r3, [pc, #132]	; (8003eec <HAL_MspInit+0x90>)
 8003e66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e6c:	645a      	str	r2, [r3, #68]	; 0x44
 8003e6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e70:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003e74:	9200      	str	r2, [sp, #0]
 8003e76:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e78:	9401      	str	r4, [sp, #4]
 8003e7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e7c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003e80:	641a      	str	r2, [r3, #64]	; 0x40
 8003e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e88:	9301      	str	r3, [sp, #4]
 8003e8a:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e8c:	2003      	movs	r0, #3
 8003e8e:	f7fd fca3 	bl	80017d8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003e92:	4622      	mov	r2, r4
 8003e94:	4621      	mov	r1, r4
 8003e96:	f06f 000b 	mvn.w	r0, #11
 8003e9a:	f7fd fcaf 	bl	80017fc <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003e9e:	4622      	mov	r2, r4
 8003ea0:	4621      	mov	r1, r4
 8003ea2:	f06f 000a 	mvn.w	r0, #10
 8003ea6:	f7fd fca9 	bl	80017fc <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003eaa:	4622      	mov	r2, r4
 8003eac:	4621      	mov	r1, r4
 8003eae:	f06f 0009 	mvn.w	r0, #9
 8003eb2:	f7fd fca3 	bl	80017fc <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003eb6:	4622      	mov	r2, r4
 8003eb8:	4621      	mov	r1, r4
 8003eba:	f06f 0004 	mvn.w	r0, #4
 8003ebe:	f7fd fc9d 	bl	80017fc <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003ec2:	4622      	mov	r2, r4
 8003ec4:	4621      	mov	r1, r4
 8003ec6:	f06f 0003 	mvn.w	r0, #3
 8003eca:	f7fd fc97 	bl	80017fc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003ece:	4622      	mov	r2, r4
 8003ed0:	4621      	mov	r1, r4
 8003ed2:	f06f 0001 	mvn.w	r0, #1
 8003ed6:	f7fd fc91 	bl	80017fc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003eda:	4622      	mov	r2, r4
 8003edc:	4621      	mov	r1, r4
 8003ede:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee2:	f7fd fc8b 	bl	80017fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ee6:	b002      	add	sp, #8
 8003ee8:	bd10      	pop	{r4, pc}
 8003eea:	bf00      	nop
 8003eec:	40023800 	.word	0x40023800

08003ef0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003ef0:	4770      	bx	lr

08003ef2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003ef2:	e7fe      	b.n	8003ef2 <HardFault_Handler>

08003ef4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003ef4:	e7fe      	b.n	8003ef4 <MemManage_Handler>

08003ef6 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003ef6:	e7fe      	b.n	8003ef6 <BusFault_Handler>

08003ef8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003ef8:	e7fe      	b.n	8003ef8 <UsageFault_Handler>

08003efa <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003efa:	4770      	bx	lr

08003efc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003efc:	4770      	bx	lr

08003efe <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003efe:	4770      	bx	lr

08003f00 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003f00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f02:	f7fd f86f 	bl	8000fe4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8003f06:	f7fd fce0 	bl	80018ca <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f0a:	bd08      	pop	{r3, pc}

08003f0c <CAN1_RX0_IRQHandler>:

/**
* @brief This function handles CAN1 RX0 interrupts.
*/
void CAN1_RX0_IRQHandler(void)
{
 8003f0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003f0e:	4802      	ldr	r0, [pc, #8]	; (8003f18 <CAN1_RX0_IRQHandler+0xc>)
 8003f10:	f7fd fb35 	bl	800157e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003f14:	bd08      	pop	{r3, pc}
 8003f16:	bf00      	nop
 8003f18:	2000023c 	.word	0x2000023c

08003f1c <CAN1_RX1_IRQHandler>:

/**
* @brief This function handles CAN1 RX1 interrupt.
*/
void CAN1_RX1_IRQHandler(void)
{
 8003f1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003f1e:	4802      	ldr	r0, [pc, #8]	; (8003f28 <CAN1_RX1_IRQHandler+0xc>)
 8003f20:	f7fd fb2d 	bl	800157e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003f24:	bd08      	pop	{r3, pc}
 8003f26:	bf00      	nop
 8003f28:	2000023c 	.word	0x2000023c

08003f2c <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 8003f2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003f2e:	4802      	ldr	r0, [pc, #8]	; (8003f38 <USART1_IRQHandler+0xc>)
 8003f30:	f7fe ff46 	bl	8002dc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003f34:	bd08      	pop	{r3, pc}
 8003f36:	bf00      	nop
 8003f38:	20000618 	.word	0x20000618

08003f3c <TIM6_DAC_IRQHandler>:

/**
* @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
*/
void TIM6_DAC_IRQHandler(void)
{
 8003f3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003f3e:	4802      	ldr	r0, [pc, #8]	; (8003f48 <TIM6_DAC_IRQHandler+0xc>)
 8003f40:	f7fe f99c 	bl	800227c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003f44:	bd08      	pop	{r3, pc}
 8003f46:	bf00      	nop
 8003f48:	20000524 	.word	0x20000524

08003f4c <CAN2_RX0_IRQHandler>:

/**
* @brief This function handles CAN2 RX0 interrupts.
*/
void CAN2_RX0_IRQHandler(void)
{
 8003f4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003f4e:	4802      	ldr	r0, [pc, #8]	; (8003f58 <CAN2_RX0_IRQHandler+0xc>)
 8003f50:	f7fd fb15 	bl	800157e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8003f54:	bd08      	pop	{r3, pc}
 8003f56:	bf00      	nop
 8003f58:	20000214 	.word	0x20000214

08003f5c <CAN2_RX1_IRQHandler>:

/**
* @brief This function handles CAN2 RX1 interrupt.
*/
void CAN2_RX1_IRQHandler(void)
{
 8003f5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003f5e:	4802      	ldr	r0, [pc, #8]	; (8003f68 <CAN2_RX1_IRQHandler+0xc>)
 8003f60:	f7fd fb0d 	bl	800157e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8003f64:	bd08      	pop	{r3, pc}
 8003f66:	bf00      	nop
 8003f68:	20000214 	.word	0x20000214

08003f6c <USART6_IRQHandler>:

/**
* @brief This function handles USART6 global interrupt.
*/
void USART6_IRQHandler(void)
{
 8003f6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003f6e:	4802      	ldr	r0, [pc, #8]	; (8003f78 <USART6_IRQHandler+0xc>)
 8003f70:	f7fe ff26 	bl	8002dc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003f74:	bd08      	pop	{r3, pc}
 8003f76:	bf00      	nop
 8003f78:	20000698 	.word	0x20000698

08003f7c <UART8_IRQHandler>:

/**
* @brief This function handles UART8 global interrupt.
*/
void UART8_IRQHandler(void)
{
 8003f7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8003f7e:	4802      	ldr	r0, [pc, #8]	; (8003f88 <UART8_IRQHandler+0xc>)
 8003f80:	f7fe ff1e 	bl	8002dc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8003f84:	bd08      	pop	{r3, pc}
 8003f86:	bf00      	nop
 8003f88:	20000658 	.word	0x20000658

08003f8c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8003f8c:	b570      	push	{r4, r5, r6, lr}
 8003f8e:	460d      	mov	r5, r1
 8003f90:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f92:	2400      	movs	r4, #0
 8003f94:	e004      	b.n	8003fa0 <_read+0x14>
	{
		*ptr++ = __io_getchar();
 8003f96:	f3af 8000 	nop.w
 8003f9a:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f9c:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 8003f9e:	3501      	adds	r5, #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fa0:	42b4      	cmp	r4, r6
 8003fa2:	dbf8      	blt.n	8003f96 <_read+0xa>
	}

return len;
}
 8003fa4:	4630      	mov	r0, r6
 8003fa6:	bd70      	pop	{r4, r5, r6, pc}

08003fa8 <_write>:

int _write(int file, char *ptr, int len)
{
 8003fa8:	b570      	push	{r4, r5, r6, lr}
 8003faa:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fac:	2400      	movs	r4, #0
 8003fae:	e005      	b.n	8003fbc <_write+0x14>
	{
		__io_putchar(*ptr++);
 8003fb0:	1c4d      	adds	r5, r1, #1
 8003fb2:	7808      	ldrb	r0, [r1, #0]
 8003fb4:	f7ff f918 	bl	80031e8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fb8:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 8003fba:	4629      	mov	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fbc:	42b4      	cmp	r4, r6
 8003fbe:	dbf7      	blt.n	8003fb0 <_write+0x8>
	}
	return len;
}
 8003fc0:	4630      	mov	r0, r6
 8003fc2:	bd70      	pop	{r4, r5, r6, pc}

08003fc4 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8003fc4:	b508      	push	{r3, lr}
 8003fc6:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003fc8:	4a0b      	ldr	r2, [pc, #44]	; (8003ff8 <_sbrk+0x34>)
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	b142      	cbz	r2, 8003fe0 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8003fce:	4a0a      	ldr	r2, [pc, #40]	; (8003ff8 <_sbrk+0x34>)
 8003fd0:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8003fd2:	4403      	add	r3, r0
 8003fd4:	466a      	mov	r2, sp
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d806      	bhi.n	8003fe8 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8003fda:	4a07      	ldr	r2, [pc, #28]	; (8003ff8 <_sbrk+0x34>)
 8003fdc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8003fde:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8003fe0:	4a05      	ldr	r2, [pc, #20]	; (8003ff8 <_sbrk+0x34>)
 8003fe2:	4906      	ldr	r1, [pc, #24]	; (8003ffc <_sbrk+0x38>)
 8003fe4:	6011      	str	r1, [r2, #0]
 8003fe6:	e7f2      	b.n	8003fce <_sbrk+0xa>
		errno = ENOMEM;
 8003fe8:	f000 fad0 	bl	800458c <__errno>
 8003fec:	230c      	movs	r3, #12
 8003fee:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff4:	e7f3      	b.n	8003fde <_sbrk+0x1a>
 8003ff6:	bf00      	nop
 8003ff8:	20000200 	.word	0x20000200
 8003ffc:	200006e0 	.word	0x200006e0

08004000 <_close>:

int _close(int file)
{
	return -1;
}
 8004000:	f04f 30ff 	mov.w	r0, #4294967295
 8004004:	4770      	bx	lr

08004006 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004006:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800400a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800400c:	2000      	movs	r0, #0
 800400e:	4770      	bx	lr

08004010 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004010:	2001      	movs	r0, #1
 8004012:	4770      	bx	lr

08004014 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004014:	2000      	movs	r0, #0
 8004016:	4770      	bx	lr

08004018 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004018:	490f      	ldr	r1, [pc, #60]	; (8004058 <SystemInit+0x40>)
 800401a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800401e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004026:	4b0d      	ldr	r3, [pc, #52]	; (800405c <SystemInit+0x44>)
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004030:	2000      	movs	r0, #0
 8004032:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800403a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800403e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004040:	4a07      	ldr	r2, [pc, #28]	; (8004060 <SystemInit+0x48>)
 8004042:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800404a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800404c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800404e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004052:	608b      	str	r3, [r1, #8]
#endif
}
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	e000ed00 	.word	0xe000ed00
 800405c:	40023800 	.word	0x40023800
 8004060:	24003010 	.word	0x24003010

08004064 <MX_TIM6_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004064:	b500      	push	{lr}
 8004066:	b083      	sub	sp, #12
  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
 8004068:	4810      	ldr	r0, [pc, #64]	; (80040ac <MX_TIM6_Init+0x48>)
 800406a:	4b11      	ldr	r3, [pc, #68]	; (80040b0 <MX_TIM6_Init+0x4c>)
 800406c:	6003      	str	r3, [r0, #0]
  htim6.Init.Prescaler = 10-1;
 800406e:	2309      	movs	r3, #9
 8004070:	6043      	str	r3, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004072:	2300      	movs	r3, #0
 8004074:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 16800;
 8004076:	f244 13a0 	movw	r3, #16800	; 0x41a0
 800407a:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800407c:	f7fe fa1c 	bl	80024b8 <HAL_TIM_Base_Init>
 8004080:	b950      	cbnz	r0, 8004098 <MX_TIM6_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004082:	2300      	movs	r3, #0
 8004084:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004086:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004088:	4669      	mov	r1, sp
 800408a:	4808      	ldr	r0, [pc, #32]	; (80040ac <MX_TIM6_Init+0x48>)
 800408c:	f7fe fb12 	bl	80026b4 <HAL_TIMEx_MasterConfigSynchronization>
 8004090:	b938      	cbnz	r0, 80040a2 <MX_TIM6_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8004092:	b003      	add	sp, #12
 8004094:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8004098:	2177      	movs	r1, #119	; 0x77
 800409a:	4806      	ldr	r0, [pc, #24]	; (80040b4 <MX_TIM6_Init+0x50>)
 800409c:	f7ff fbce 	bl	800383c <_Error_Handler>
 80040a0:	e7ef      	b.n	8004082 <MX_TIM6_Init+0x1e>
    _Error_Handler(__FILE__, __LINE__);
 80040a2:	217e      	movs	r1, #126	; 0x7e
 80040a4:	4803      	ldr	r0, [pc, #12]	; (80040b4 <MX_TIM6_Init+0x50>)
 80040a6:	f7ff fbc9 	bl	800383c <_Error_Handler>
}
 80040aa:	e7f2      	b.n	8004092 <MX_TIM6_Init+0x2e>
 80040ac:	20000524 	.word	0x20000524
 80040b0:	40001000 	.word	0x40001000
 80040b4:	08006ef4 	.word	0x08006ef4

080040b8 <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim12);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80040b8:	b082      	sub	sp, #8

  if(tim_pwmHandle->Instance==TIM1)
 80040ba:	6803      	ldr	r3, [r0, #0]
 80040bc:	4a10      	ldr	r2, [pc, #64]	; (8004100 <HAL_TIM_PWM_MspInit+0x48>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d004      	beq.n	80040cc <HAL_TIM_PWM_MspInit+0x14>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM12)
 80040c2:	4a10      	ldr	r2, [pc, #64]	; (8004104 <HAL_TIM_PWM_MspInit+0x4c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d00e      	beq.n	80040e6 <HAL_TIM_PWM_MspInit+0x2e>
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80040c8:	b002      	add	sp, #8
 80040ca:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 80040cc:	2300      	movs	r3, #0
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	4b0d      	ldr	r3, [pc, #52]	; (8004108 <HAL_TIM_PWM_MspInit+0x50>)
 80040d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040d4:	f042 0201 	orr.w	r2, r2, #1
 80040d8:	645a      	str	r2, [r3, #68]	; 0x44
 80040da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	9b00      	ldr	r3, [sp, #0]
 80040e4:	e7f0      	b.n	80040c8 <HAL_TIM_PWM_MspInit+0x10>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80040e6:	2300      	movs	r3, #0
 80040e8:	9301      	str	r3, [sp, #4]
 80040ea:	4b07      	ldr	r3, [pc, #28]	; (8004108 <HAL_TIM_PWM_MspInit+0x50>)
 80040ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040f2:	641a      	str	r2, [r3, #64]	; 0x40
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fa:	9301      	str	r3, [sp, #4]
 80040fc:	9b01      	ldr	r3, [sp, #4]
}
 80040fe:	e7e3      	b.n	80040c8 <HAL_TIM_PWM_MspInit+0x10>
 8004100:	40010000 	.word	0x40010000
 8004104:	40001800 	.word	0x40001800
 8004108:	40023800 	.word	0x40023800

0800410c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM6)
 800410c:	6802      	ldr	r2, [r0, #0]
 800410e:	4b0e      	ldr	r3, [pc, #56]	; (8004148 <HAL_TIM_Base_MspInit+0x3c>)
 8004110:	429a      	cmp	r2, r3
 8004112:	d000      	beq.n	8004116 <HAL_TIM_Base_MspInit+0xa>
 8004114:	4770      	bx	lr
{
 8004116:	b500      	push	{lr}
 8004118:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800411a:	2200      	movs	r2, #0
 800411c:	9201      	str	r2, [sp, #4]
 800411e:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 8004122:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004124:	f041 0110 	orr.w	r1, r1, #16
 8004128:	6419      	str	r1, [r3, #64]	; 0x40
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	f003 0310 	and.w	r3, r3, #16
 8004130:	9301      	str	r3, [sp, #4]
 8004132:	9b01      	ldr	r3, [sp, #4]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8004134:	2101      	movs	r1, #1
 8004136:	2036      	movs	r0, #54	; 0x36
 8004138:	f7fd fb60 	bl	80017fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800413c:	2036      	movs	r0, #54	; 0x36
 800413e:	f7fd fb91 	bl	8001864 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8004142:	b003      	add	sp, #12
 8004144:	f85d fb04 	ldr.w	pc, [sp], #4
 8004148:	40001000 	.word	0x40001000

0800414c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800414c:	b570      	push	{r4, r5, r6, lr}
 800414e:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 8004150:	6803      	ldr	r3, [r0, #0]
 8004152:	4a18      	ldr	r2, [pc, #96]	; (80041b4 <HAL_TIM_MspPostInit+0x68>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d004      	beq.n	8004162 <HAL_TIM_MspPostInit+0x16>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM12)
 8004158:	4a17      	ldr	r2, [pc, #92]	; (80041b8 <HAL_TIM_MspPostInit+0x6c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d01b      	beq.n	8004196 <HAL_TIM_MspPostInit+0x4a>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800415e:	b006      	add	sp, #24
 8004160:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = FRICTION_L_Pin;
 8004162:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004166:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004168:	2602      	movs	r6, #2
 800416a:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416c:	2400      	movs	r4, #0
 800416e:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004170:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004172:	2501      	movs	r5, #1
 8004174:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 8004176:	a901      	add	r1, sp, #4
 8004178:	4810      	ldr	r0, [pc, #64]	; (80041bc <HAL_TIM_MspPostInit+0x70>)
 800417a:	f7fd fbbd 	bl	80018f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = FRICTION_R_Pin;
 800417e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004182:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004184:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004186:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004188:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800418a:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(FRICTION_R_GPIO_Port, &GPIO_InitStruct);
 800418c:	a901      	add	r1, sp, #4
 800418e:	480c      	ldr	r0, [pc, #48]	; (80041c0 <HAL_TIM_MspPostInit+0x74>)
 8004190:	f7fd fbb2 	bl	80018f8 <HAL_GPIO_Init>
 8004194:	e7e3      	b.n	800415e <HAL_TIM_MspPostInit+0x12>
    GPIO_InitStruct.Pin = BEEP_CTRL_Pin;
 8004196:	2340      	movs	r3, #64	; 0x40
 8004198:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800419a:	2302      	movs	r3, #2
 800419c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800419e:	2300      	movs	r3, #0
 80041a0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041a2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80041a4:	2309      	movs	r3, #9
 80041a6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 80041a8:	a901      	add	r1, sp, #4
 80041aa:	4806      	ldr	r0, [pc, #24]	; (80041c4 <HAL_TIM_MspPostInit+0x78>)
 80041ac:	f7fd fba4 	bl	80018f8 <HAL_GPIO_Init>
}
 80041b0:	e7d5      	b.n	800415e <HAL_TIM_MspPostInit+0x12>
 80041b2:	bf00      	nop
 80041b4:	40010000 	.word	0x40010000
 80041b8:	40001800 	.word	0x40001800
 80041bc:	40020000 	.word	0x40020000
 80041c0:	40021000 	.word	0x40021000
 80041c4:	40021c00 	.word	0x40021c00

080041c8 <MX_TIM1_Init>:
{
 80041c8:	b500      	push	{lr}
 80041ca:	b091      	sub	sp, #68	; 0x44
  htim1.Instance = TIM1;
 80041cc:	482e      	ldr	r0, [pc, #184]	; (8004288 <MX_TIM1_Init+0xc0>)
 80041ce:	4b2f      	ldr	r3, [pc, #188]	; (800428c <MX_TIM1_Init+0xc4>)
 80041d0:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 167;
 80041d2:	23a7      	movs	r3, #167	; 0xa7
 80041d4:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041d6:	2300      	movs	r3, #0
 80041d8:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 20000-1;
 80041da:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80041de:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041e0:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80041e2:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80041e4:	f7fe f981 	bl	80024ea <HAL_TIM_PWM_Init>
 80041e8:	2800      	cmp	r0, #0
 80041ea:	d133      	bne.n	8004254 <MX_TIM1_Init+0x8c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041ec:	2300      	movs	r3, #0
 80041ee:	930e      	str	r3, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041f0:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80041f2:	a90e      	add	r1, sp, #56	; 0x38
 80041f4:	4824      	ldr	r0, [pc, #144]	; (8004288 <MX_TIM1_Init+0xc0>)
 80041f6:	f7fe fa5d 	bl	80026b4 <HAL_TIMEx_MasterConfigSynchronization>
 80041fa:	2800      	cmp	r0, #0
 80041fc:	d12f      	bne.n	800425e <MX_TIM1_Init+0x96>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041fe:	2360      	movs	r3, #96	; 0x60
 8004200:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 1000;
 8004202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004206:	9308      	str	r3, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004208:	2200      	movs	r2, #0
 800420a:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800420c:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800420e:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004210:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004212:	920d      	str	r2, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004214:	a907      	add	r1, sp, #28
 8004216:	481c      	ldr	r0, [pc, #112]	; (8004288 <MX_TIM1_Init+0xc0>)
 8004218:	f7fe f9b2 	bl	8002580 <HAL_TIM_PWM_ConfigChannel>
 800421c:	bb20      	cbnz	r0, 8004268 <MX_TIM1_Init+0xa0>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800421e:	220c      	movs	r2, #12
 8004220:	a907      	add	r1, sp, #28
 8004222:	4819      	ldr	r0, [pc, #100]	; (8004288 <MX_TIM1_Init+0xc0>)
 8004224:	f7fe f9ac 	bl	8002580 <HAL_TIM_PWM_ConfigChannel>
 8004228:	bb18      	cbnz	r0, 8004272 <MX_TIM1_Init+0xaa>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800422a:	2300      	movs	r3, #0
 800422c:	9300      	str	r3, [sp, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800422e:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004230:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004232:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004234:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004236:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800423a:	9205      	str	r2, [sp, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800423c:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800423e:	4669      	mov	r1, sp
 8004240:	4811      	ldr	r0, [pc, #68]	; (8004288 <MX_TIM1_Init+0xc0>)
 8004242:	f7fe fa60 	bl	8002706 <HAL_TIMEx_ConfigBreakDeadTime>
 8004246:	b9c8      	cbnz	r0, 800427c <MX_TIM1_Init+0xb4>
  HAL_TIM_MspPostInit(&htim1);
 8004248:	480f      	ldr	r0, [pc, #60]	; (8004288 <MX_TIM1_Init+0xc0>)
 800424a:	f7ff ff7f 	bl	800414c <HAL_TIM_MspPostInit>
}
 800424e:	b011      	add	sp, #68	; 0x44
 8004250:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8004254:	2142      	movs	r1, #66	; 0x42
 8004256:	480e      	ldr	r0, [pc, #56]	; (8004290 <MX_TIM1_Init+0xc8>)
 8004258:	f7ff faf0 	bl	800383c <_Error_Handler>
 800425c:	e7c6      	b.n	80041ec <MX_TIM1_Init+0x24>
    _Error_Handler(__FILE__, __LINE__);
 800425e:	2149      	movs	r1, #73	; 0x49
 8004260:	480b      	ldr	r0, [pc, #44]	; (8004290 <MX_TIM1_Init+0xc8>)
 8004262:	f7ff faeb 	bl	800383c <_Error_Handler>
 8004266:	e7ca      	b.n	80041fe <MX_TIM1_Init+0x36>
    _Error_Handler(__FILE__, __LINE__);
 8004268:	2155      	movs	r1, #85	; 0x55
 800426a:	4809      	ldr	r0, [pc, #36]	; (8004290 <MX_TIM1_Init+0xc8>)
 800426c:	f7ff fae6 	bl	800383c <_Error_Handler>
 8004270:	e7d5      	b.n	800421e <MX_TIM1_Init+0x56>
    _Error_Handler(__FILE__, __LINE__);
 8004272:	215a      	movs	r1, #90	; 0x5a
 8004274:	4806      	ldr	r0, [pc, #24]	; (8004290 <MX_TIM1_Init+0xc8>)
 8004276:	f7ff fae1 	bl	800383c <_Error_Handler>
 800427a:	e7d6      	b.n	800422a <MX_TIM1_Init+0x62>
    _Error_Handler(__FILE__, __LINE__);
 800427c:	2166      	movs	r1, #102	; 0x66
 800427e:	4804      	ldr	r0, [pc, #16]	; (8004290 <MX_TIM1_Init+0xc8>)
 8004280:	f7ff fadc 	bl	800383c <_Error_Handler>
 8004284:	e7e0      	b.n	8004248 <MX_TIM1_Init+0x80>
 8004286:	bf00      	nop
 8004288:	20000560 	.word	0x20000560
 800428c:	40010000 	.word	0x40010000
 8004290:	08006ef4 	.word	0x08006ef4

08004294 <MX_TIM12_Init>:
{
 8004294:	b500      	push	{lr}
 8004296:	b089      	sub	sp, #36	; 0x24
  htim12.Instance = TIM12;
 8004298:	4814      	ldr	r0, [pc, #80]	; (80042ec <MX_TIM12_Init+0x58>)
 800429a:	4b15      	ldr	r3, [pc, #84]	; (80042f0 <MX_TIM12_Init+0x5c>)
 800429c:	6003      	str	r3, [r0, #0]
  htim12.Init.Prescaler = 83;
 800429e:	2353      	movs	r3, #83	; 0x53
 80042a0:	6043      	str	r3, [r0, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042a2:	2300      	movs	r3, #0
 80042a4:	6083      	str	r3, [r0, #8]
  htim12.Init.Period = 20000-1;
 80042a6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80042aa:	60c2      	str	r2, [r0, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042ac:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80042ae:	f7fe f91c 	bl	80024ea <HAL_TIM_PWM_Init>
 80042b2:	b980      	cbnz	r0, 80042d6 <MX_TIM12_Init+0x42>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042b4:	2360      	movs	r3, #96	; 0x60
 80042b6:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80042b8:	2200      	movs	r2, #0
 80042ba:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042bc:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042be:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042c0:	a901      	add	r1, sp, #4
 80042c2:	480a      	ldr	r0, [pc, #40]	; (80042ec <MX_TIM12_Init+0x58>)
 80042c4:	f7fe f95c 	bl	8002580 <HAL_TIM_PWM_ConfigChannel>
 80042c8:	b950      	cbnz	r0, 80042e0 <MX_TIM12_Init+0x4c>
  HAL_TIM_MspPostInit(&htim12);
 80042ca:	4808      	ldr	r0, [pc, #32]	; (80042ec <MX_TIM12_Init+0x58>)
 80042cc:	f7ff ff3e 	bl	800414c <HAL_TIM_MspPostInit>
}
 80042d0:	b009      	add	sp, #36	; 0x24
 80042d2:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80042d6:	218e      	movs	r1, #142	; 0x8e
 80042d8:	4806      	ldr	r0, [pc, #24]	; (80042f4 <MX_TIM12_Init+0x60>)
 80042da:	f7ff faaf 	bl	800383c <_Error_Handler>
 80042de:	e7e9      	b.n	80042b4 <MX_TIM12_Init+0x20>
    _Error_Handler(__FILE__, __LINE__);
 80042e0:	2197      	movs	r1, #151	; 0x97
 80042e2:	4804      	ldr	r0, [pc, #16]	; (80042f4 <MX_TIM12_Init+0x60>)
 80042e4:	f7ff faaa 	bl	800383c <_Error_Handler>
 80042e8:	e7ef      	b.n	80042ca <MX_TIM12_Init+0x36>
 80042ea:	bf00      	nop
 80042ec:	2000059c 	.word	0x2000059c
 80042f0:	40001800 	.word	0x40001800
 80042f4:	08006ef4 	.word	0x08006ef4

080042f8 <MX_UART7_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 80042f8:	b508      	push	{r3, lr}

  huart7.Instance = UART7;
 80042fa:	480b      	ldr	r0, [pc, #44]	; (8004328 <MX_UART7_Init+0x30>)
 80042fc:	4b0b      	ldr	r3, [pc, #44]	; (800432c <MX_UART7_Init+0x34>)
 80042fe:	6003      	str	r3, [r0, #0]
  huart7.Init.BaudRate = 115200;
 8004300:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004304:	6043      	str	r3, [r0, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8004306:	2300      	movs	r3, #0
 8004308:	6083      	str	r3, [r0, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800430a:	60c3      	str	r3, [r0, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800430c:	6103      	str	r3, [r0, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800430e:	220c      	movs	r2, #12
 8004310:	6142      	str	r2, [r0, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004312:	6183      	str	r3, [r0, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8004314:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8004316:	f7fe fc32 	bl	8002b7e <HAL_UART_Init>
 800431a:	b900      	cbnz	r0, 800431e <MX_UART7_Init+0x26>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 800431c:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 800431e:	2144      	movs	r1, #68	; 0x44
 8004320:	4803      	ldr	r0, [pc, #12]	; (8004330 <MX_UART7_Init+0x38>)
 8004322:	f7ff fa8b 	bl	800383c <_Error_Handler>
}
 8004326:	e7f9      	b.n	800431c <MX_UART7_Init+0x24>
 8004328:	200005d8 	.word	0x200005d8
 800432c:	40007800 	.word	0x40007800
 8004330:	08006f04 	.word	0x08006f04

08004334 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8004334:	b508      	push	{r3, lr}

  huart8.Instance = UART8;
 8004336:	480b      	ldr	r0, [pc, #44]	; (8004364 <MX_UART8_Init+0x30>)
 8004338:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <MX_UART8_Init+0x34>)
 800433a:	6003      	str	r3, [r0, #0]
  huart8.Init.BaudRate = 115200;
 800433c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004340:	6043      	str	r3, [r0, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8004342:	2300      	movs	r3, #0
 8004344:	6083      	str	r3, [r0, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8004346:	60c3      	str	r3, [r0, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8004348:	6103      	str	r3, [r0, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800434a:	220c      	movs	r2, #12
 800434c:	6142      	str	r2, [r0, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800434e:	6183      	str	r3, [r0, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8004350:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8004352:	f7fe fc14 	bl	8002b7e <HAL_UART_Init>
 8004356:	b900      	cbnz	r0, 800435a <MX_UART8_Init+0x26>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8004358:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 800435a:	2156      	movs	r1, #86	; 0x56
 800435c:	4803      	ldr	r0, [pc, #12]	; (800436c <MX_UART8_Init+0x38>)
 800435e:	f7ff fa6d 	bl	800383c <_Error_Handler>
}
 8004362:	e7f9      	b.n	8004358 <MX_UART8_Init+0x24>
 8004364:	20000658 	.word	0x20000658
 8004368:	40007c00 	.word	0x40007c00
 800436c:	08006f04 	.word	0x08006f04

08004370 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004370:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8004372:	480b      	ldr	r0, [pc, #44]	; (80043a0 <MX_USART1_UART_Init+0x30>)
 8004374:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <MX_USART1_UART_Init+0x34>)
 8004376:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 100000;
 8004378:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <MX_USART1_UART_Init+0x38>)
 800437a:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800437c:	2300      	movs	r3, #0
 800437e:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004380:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004382:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004384:	220c      	movs	r2, #12
 8004386:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004388:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800438a:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800438c:	f7fe fbf7 	bl	8002b7e <HAL_UART_Init>
 8004390:	b900      	cbnz	r0, 8004394 <MX_USART1_UART_Init+0x24>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8004392:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8004394:	2169      	movs	r1, #105	; 0x69
 8004396:	4805      	ldr	r0, [pc, #20]	; (80043ac <MX_USART1_UART_Init+0x3c>)
 8004398:	f7ff fa50 	bl	800383c <_Error_Handler>
}
 800439c:	e7f9      	b.n	8004392 <MX_USART1_UART_Init+0x22>
 800439e:	bf00      	nop
 80043a0:	20000618 	.word	0x20000618
 80043a4:	40011000 	.word	0x40011000
 80043a8:	000186a0 	.word	0x000186a0
 80043ac:	08006f04 	.word	0x08006f04

080043b0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80043b0:	b508      	push	{r3, lr}

  huart6.Instance = USART6;
 80043b2:	480b      	ldr	r0, [pc, #44]	; (80043e0 <MX_USART6_UART_Init+0x30>)
 80043b4:	4b0b      	ldr	r3, [pc, #44]	; (80043e4 <MX_USART6_UART_Init+0x34>)
 80043b6:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 115200;
 80043b8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80043bc:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80043be:	2300      	movs	r3, #0
 80043c0:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80043c2:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80043c4:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80043c6:	220c      	movs	r2, #12
 80043c8:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043ca:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80043cc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80043ce:	f7fe fbd6 	bl	8002b7e <HAL_UART_Init>
 80043d2:	b900      	cbnz	r0, 80043d6 <MX_USART6_UART_Init+0x26>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 80043d4:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 80043d6:	217c      	movs	r1, #124	; 0x7c
 80043d8:	4803      	ldr	r0, [pc, #12]	; (80043e8 <MX_USART6_UART_Init+0x38>)
 80043da:	f7ff fa2f 	bl	800383c <_Error_Handler>
}
 80043de:	e7f9      	b.n	80043d4 <MX_USART6_UART_Init+0x24>
 80043e0:	20000698 	.word	0x20000698
 80043e4:	40011400 	.word	0x40011400
 80043e8:	08006f04 	.word	0x08006f04

080043ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80043ec:	b510      	push	{r4, lr}
 80043ee:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART7)
 80043f0:	6803      	ldr	r3, [r0, #0]
 80043f2:	4a49      	ldr	r2, [pc, #292]	; (8004518 <HAL_UART_MspInit+0x12c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d00a      	beq.n	800440e <HAL_UART_MspInit+0x22>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(uartHandle->Instance==UART8)
 80043f8:	4a48      	ldr	r2, [pc, #288]	; (800451c <HAL_UART_MspInit+0x130>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d023      	beq.n	8004446 <HAL_UART_MspInit+0x5a>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 80043fe:	4a48      	ldr	r2, [pc, #288]	; (8004520 <HAL_UART_MspInit+0x134>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d042      	beq.n	800448a <HAL_UART_MspInit+0x9e>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART6)
 8004404:	4a47      	ldr	r2, [pc, #284]	; (8004524 <HAL_UART_MspInit+0x138>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d062      	beq.n	80044d0 <HAL_UART_MspInit+0xe4>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800440a:	b00a      	add	sp, #40	; 0x28
 800440c:	bd10      	pop	{r4, pc}
    __HAL_RCC_UART7_CLK_ENABLE();
 800440e:	2300      	movs	r3, #0
 8004410:	9301      	str	r3, [sp, #4]
 8004412:	4b45      	ldr	r3, [pc, #276]	; (8004528 <HAL_UART_MspInit+0x13c>)
 8004414:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004416:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800441a:	641a      	str	r2, [r3, #64]	; 0x40
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004422:	9301      	str	r3, [sp, #4]
 8004424:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8004426:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800442a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800442c:	2302      	movs	r3, #2
 800442e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004430:	2301      	movs	r3, #1
 8004432:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004434:	2303      	movs	r3, #3
 8004436:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004438:	2308      	movs	r3, #8
 800443a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800443c:	a905      	add	r1, sp, #20
 800443e:	483b      	ldr	r0, [pc, #236]	; (800452c <HAL_UART_MspInit+0x140>)
 8004440:	f7fd fa5a 	bl	80018f8 <HAL_GPIO_Init>
 8004444:	e7e1      	b.n	800440a <HAL_UART_MspInit+0x1e>
    __HAL_RCC_UART8_CLK_ENABLE();
 8004446:	2400      	movs	r4, #0
 8004448:	9402      	str	r4, [sp, #8]
 800444a:	4b37      	ldr	r3, [pc, #220]	; (8004528 <HAL_UART_MspInit+0x13c>)
 800444c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800444e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004452:	641a      	str	r2, [r3, #64]	; 0x40
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800445a:	9302      	str	r3, [sp, #8]
 800445c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800445e:	2303      	movs	r3, #3
 8004460:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004462:	2202      	movs	r2, #2
 8004464:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004466:	2201      	movs	r2, #1
 8004468:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800446a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800446c:	2308      	movs	r3, #8
 800446e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004470:	a905      	add	r1, sp, #20
 8004472:	482e      	ldr	r0, [pc, #184]	; (800452c <HAL_UART_MspInit+0x140>)
 8004474:	f7fd fa40 	bl	80018f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8004478:	4622      	mov	r2, r4
 800447a:	4621      	mov	r1, r4
 800447c:	2053      	movs	r0, #83	; 0x53
 800447e:	f7fd f9bd 	bl	80017fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8004482:	2053      	movs	r0, #83	; 0x53
 8004484:	f7fd f9ee 	bl	8001864 <HAL_NVIC_EnableIRQ>
 8004488:	e7bf      	b.n	800440a <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART1_CLK_ENABLE();
 800448a:	2400      	movs	r4, #0
 800448c:	9403      	str	r4, [sp, #12]
 800448e:	4b26      	ldr	r3, [pc, #152]	; (8004528 <HAL_UART_MspInit+0x13c>)
 8004490:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004492:	f042 0210 	orr.w	r2, r2, #16
 8004496:	645a      	str	r2, [r3, #68]	; 0x44
 8004498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449a:	f003 0310 	and.w	r3, r3, #16
 800449e:	9303      	str	r3, [sp, #12]
 80044a0:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80044a2:	23c0      	movs	r3, #192	; 0xc0
 80044a4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a6:	2302      	movs	r3, #2
 80044a8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044aa:	2301      	movs	r3, #1
 80044ac:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044ae:	2303      	movs	r3, #3
 80044b0:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80044b2:	2307      	movs	r3, #7
 80044b4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044b6:	a905      	add	r1, sp, #20
 80044b8:	481d      	ldr	r0, [pc, #116]	; (8004530 <HAL_UART_MspInit+0x144>)
 80044ba:	f7fd fa1d 	bl	80018f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80044be:	4622      	mov	r2, r4
 80044c0:	4621      	mov	r1, r4
 80044c2:	2025      	movs	r0, #37	; 0x25
 80044c4:	f7fd f99a 	bl	80017fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80044c8:	2025      	movs	r0, #37	; 0x25
 80044ca:	f7fd f9cb 	bl	8001864 <HAL_NVIC_EnableIRQ>
 80044ce:	e79c      	b.n	800440a <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART6_CLK_ENABLE();
 80044d0:	2400      	movs	r4, #0
 80044d2:	9404      	str	r4, [sp, #16]
 80044d4:	4b14      	ldr	r3, [pc, #80]	; (8004528 <HAL_UART_MspInit+0x13c>)
 80044d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044d8:	f042 0220 	orr.w	r2, r2, #32
 80044dc:	645a      	str	r2, [r3, #68]	; 0x44
 80044de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e0:	f003 0320 	and.w	r3, r3, #32
 80044e4:	9304      	str	r3, [sp, #16]
 80044e6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80044e8:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80044ec:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ee:	2302      	movs	r3, #2
 80044f0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044f2:	2301      	movs	r3, #1
 80044f4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044f6:	2303      	movs	r3, #3
 80044f8:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80044fa:	2308      	movs	r3, #8
 80044fc:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80044fe:	a905      	add	r1, sp, #20
 8004500:	480c      	ldr	r0, [pc, #48]	; (8004534 <HAL_UART_MspInit+0x148>)
 8004502:	f7fd f9f9 	bl	80018f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004506:	4622      	mov	r2, r4
 8004508:	4621      	mov	r1, r4
 800450a:	2047      	movs	r0, #71	; 0x47
 800450c:	f7fd f976 	bl	80017fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004510:	2047      	movs	r0, #71	; 0x47
 8004512:	f7fd f9a7 	bl	8001864 <HAL_NVIC_EnableIRQ>
}
 8004516:	e778      	b.n	800440a <HAL_UART_MspInit+0x1e>
 8004518:	40007800 	.word	0x40007800
 800451c:	40007c00 	.word	0x40007c00
 8004520:	40011000 	.word	0x40011000
 8004524:	40011400 	.word	0x40011400
 8004528:	40023800 	.word	0x40023800
 800452c:	40021000 	.word	0x40021000
 8004530:	40020400 	.word	0x40020400
 8004534:	40021800 	.word	0x40021800

08004538 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004538:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004570 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800453c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800453e:	e003      	b.n	8004548 <LoopCopyDataInit>

08004540 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004540:	4b0c      	ldr	r3, [pc, #48]	; (8004574 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004542:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004544:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004546:	3104      	adds	r1, #4

08004548 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004548:	480b      	ldr	r0, [pc, #44]	; (8004578 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800454a:	4b0c      	ldr	r3, [pc, #48]	; (800457c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800454c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800454e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004550:	d3f6      	bcc.n	8004540 <CopyDataInit>
  ldr  r2, =_sbss
 8004552:	4a0b      	ldr	r2, [pc, #44]	; (8004580 <LoopFillZerobss+0x24>)

  b  LoopFillZerobss
 8004554:	e002      	b.n	800455c <LoopFillZerobss>

08004556 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004556:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004558:	f842 3b04 	str.w	r3, [r2], #4

0800455c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800455c:	4b09      	ldr	r3, [pc, #36]	; (8004584 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800455e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004560:	d3f9      	bcc.n	8004556 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004562:	f7ff fd59 	bl	8004018 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004566:	f000 f817 	bl	8004598 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800456a:	f7ff f9cd 	bl	8003908 <main>
  bx  lr    
 800456e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004570:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004574:	080071e8 	.word	0x080071e8
  ldr  r0, =_sdata
 8004578:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800457c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8004580:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8004584:	200006dc 	.word	0x200006dc

08004588 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004588:	e7fe      	b.n	8004588 <ADC_IRQHandler>
	...

0800458c <__errno>:
 800458c:	4b01      	ldr	r3, [pc, #4]	; (8004594 <__errno+0x8>)
 800458e:	6818      	ldr	r0, [r3, #0]
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	2000000c 	.word	0x2000000c

08004598 <__libc_init_array>:
 8004598:	b570      	push	{r4, r5, r6, lr}
 800459a:	4e0d      	ldr	r6, [pc, #52]	; (80045d0 <__libc_init_array+0x38>)
 800459c:	4c0d      	ldr	r4, [pc, #52]	; (80045d4 <__libc_init_array+0x3c>)
 800459e:	1ba4      	subs	r4, r4, r6
 80045a0:	10a4      	asrs	r4, r4, #2
 80045a2:	2500      	movs	r5, #0
 80045a4:	42a5      	cmp	r5, r4
 80045a6:	d109      	bne.n	80045bc <__libc_init_array+0x24>
 80045a8:	4e0b      	ldr	r6, [pc, #44]	; (80045d8 <__libc_init_array+0x40>)
 80045aa:	4c0c      	ldr	r4, [pc, #48]	; (80045dc <__libc_init_array+0x44>)
 80045ac:	f002 fc62 	bl	8006e74 <_init>
 80045b0:	1ba4      	subs	r4, r4, r6
 80045b2:	10a4      	asrs	r4, r4, #2
 80045b4:	2500      	movs	r5, #0
 80045b6:	42a5      	cmp	r5, r4
 80045b8:	d105      	bne.n	80045c6 <__libc_init_array+0x2e>
 80045ba:	bd70      	pop	{r4, r5, r6, pc}
 80045bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045c0:	4798      	blx	r3
 80045c2:	3501      	adds	r5, #1
 80045c4:	e7ee      	b.n	80045a4 <__libc_init_array+0xc>
 80045c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045ca:	4798      	blx	r3
 80045cc:	3501      	adds	r5, #1
 80045ce:	e7f2      	b.n	80045b6 <__libc_init_array+0x1e>
 80045d0:	080071e0 	.word	0x080071e0
 80045d4:	080071e0 	.word	0x080071e0
 80045d8:	080071e0 	.word	0x080071e0
 80045dc:	080071e4 	.word	0x080071e4

080045e0 <memset>:
 80045e0:	4402      	add	r2, r0
 80045e2:	4603      	mov	r3, r0
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d100      	bne.n	80045ea <memset+0xa>
 80045e8:	4770      	bx	lr
 80045ea:	f803 1b01 	strb.w	r1, [r3], #1
 80045ee:	e7f9      	b.n	80045e4 <memset+0x4>

080045f0 <__cvt>:
 80045f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045f4:	ec55 4b10 	vmov	r4, r5, d0
 80045f8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80045fa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80045fe:	2d00      	cmp	r5, #0
 8004600:	460e      	mov	r6, r1
 8004602:	4691      	mov	r9, r2
 8004604:	4619      	mov	r1, r3
 8004606:	bfb8      	it	lt
 8004608:	4622      	movlt	r2, r4
 800460a:	462b      	mov	r3, r5
 800460c:	f027 0720 	bic.w	r7, r7, #32
 8004610:	bfbb      	ittet	lt
 8004612:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004616:	461d      	movlt	r5, r3
 8004618:	2300      	movge	r3, #0
 800461a:	232d      	movlt	r3, #45	; 0x2d
 800461c:	bfb8      	it	lt
 800461e:	4614      	movlt	r4, r2
 8004620:	2f46      	cmp	r7, #70	; 0x46
 8004622:	700b      	strb	r3, [r1, #0]
 8004624:	d004      	beq.n	8004630 <__cvt+0x40>
 8004626:	2f45      	cmp	r7, #69	; 0x45
 8004628:	d100      	bne.n	800462c <__cvt+0x3c>
 800462a:	3601      	adds	r6, #1
 800462c:	2102      	movs	r1, #2
 800462e:	e000      	b.n	8004632 <__cvt+0x42>
 8004630:	2103      	movs	r1, #3
 8004632:	ab03      	add	r3, sp, #12
 8004634:	9301      	str	r3, [sp, #4]
 8004636:	ab02      	add	r3, sp, #8
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	4632      	mov	r2, r6
 800463c:	4653      	mov	r3, sl
 800463e:	ec45 4b10 	vmov	d0, r4, r5
 8004642:	f000 feb1 	bl	80053a8 <_dtoa_r>
 8004646:	2f47      	cmp	r7, #71	; 0x47
 8004648:	4680      	mov	r8, r0
 800464a:	d102      	bne.n	8004652 <__cvt+0x62>
 800464c:	f019 0f01 	tst.w	r9, #1
 8004650:	d026      	beq.n	80046a0 <__cvt+0xb0>
 8004652:	2f46      	cmp	r7, #70	; 0x46
 8004654:	eb08 0906 	add.w	r9, r8, r6
 8004658:	d111      	bne.n	800467e <__cvt+0x8e>
 800465a:	f898 3000 	ldrb.w	r3, [r8]
 800465e:	2b30      	cmp	r3, #48	; 0x30
 8004660:	d10a      	bne.n	8004678 <__cvt+0x88>
 8004662:	2200      	movs	r2, #0
 8004664:	2300      	movs	r3, #0
 8004666:	4620      	mov	r0, r4
 8004668:	4629      	mov	r1, r5
 800466a:	f7fc fa3d 	bl	8000ae8 <__aeabi_dcmpeq>
 800466e:	b918      	cbnz	r0, 8004678 <__cvt+0x88>
 8004670:	f1c6 0601 	rsb	r6, r6, #1
 8004674:	f8ca 6000 	str.w	r6, [sl]
 8004678:	f8da 3000 	ldr.w	r3, [sl]
 800467c:	4499      	add	r9, r3
 800467e:	2200      	movs	r2, #0
 8004680:	2300      	movs	r3, #0
 8004682:	4620      	mov	r0, r4
 8004684:	4629      	mov	r1, r5
 8004686:	f7fc fa2f 	bl	8000ae8 <__aeabi_dcmpeq>
 800468a:	b938      	cbnz	r0, 800469c <__cvt+0xac>
 800468c:	2230      	movs	r2, #48	; 0x30
 800468e:	9b03      	ldr	r3, [sp, #12]
 8004690:	454b      	cmp	r3, r9
 8004692:	d205      	bcs.n	80046a0 <__cvt+0xb0>
 8004694:	1c59      	adds	r1, r3, #1
 8004696:	9103      	str	r1, [sp, #12]
 8004698:	701a      	strb	r2, [r3, #0]
 800469a:	e7f8      	b.n	800468e <__cvt+0x9e>
 800469c:	f8cd 900c 	str.w	r9, [sp, #12]
 80046a0:	9b03      	ldr	r3, [sp, #12]
 80046a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80046a4:	eba3 0308 	sub.w	r3, r3, r8
 80046a8:	4640      	mov	r0, r8
 80046aa:	6013      	str	r3, [r2, #0]
 80046ac:	b004      	add	sp, #16
 80046ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080046b2 <__exponent>:
 80046b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046b4:	2900      	cmp	r1, #0
 80046b6:	4604      	mov	r4, r0
 80046b8:	bfba      	itte	lt
 80046ba:	4249      	neglt	r1, r1
 80046bc:	232d      	movlt	r3, #45	; 0x2d
 80046be:	232b      	movge	r3, #43	; 0x2b
 80046c0:	2909      	cmp	r1, #9
 80046c2:	f804 2b02 	strb.w	r2, [r4], #2
 80046c6:	7043      	strb	r3, [r0, #1]
 80046c8:	dd20      	ble.n	800470c <__exponent+0x5a>
 80046ca:	f10d 0307 	add.w	r3, sp, #7
 80046ce:	461f      	mov	r7, r3
 80046d0:	260a      	movs	r6, #10
 80046d2:	fb91 f5f6 	sdiv	r5, r1, r6
 80046d6:	fb06 1115 	mls	r1, r6, r5, r1
 80046da:	3130      	adds	r1, #48	; 0x30
 80046dc:	2d09      	cmp	r5, #9
 80046de:	f803 1c01 	strb.w	r1, [r3, #-1]
 80046e2:	f103 32ff 	add.w	r2, r3, #4294967295
 80046e6:	4629      	mov	r1, r5
 80046e8:	dc09      	bgt.n	80046fe <__exponent+0x4c>
 80046ea:	3130      	adds	r1, #48	; 0x30
 80046ec:	3b02      	subs	r3, #2
 80046ee:	f802 1c01 	strb.w	r1, [r2, #-1]
 80046f2:	42bb      	cmp	r3, r7
 80046f4:	4622      	mov	r2, r4
 80046f6:	d304      	bcc.n	8004702 <__exponent+0x50>
 80046f8:	1a10      	subs	r0, r2, r0
 80046fa:	b003      	add	sp, #12
 80046fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046fe:	4613      	mov	r3, r2
 8004700:	e7e7      	b.n	80046d2 <__exponent+0x20>
 8004702:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004706:	f804 2b01 	strb.w	r2, [r4], #1
 800470a:	e7f2      	b.n	80046f2 <__exponent+0x40>
 800470c:	2330      	movs	r3, #48	; 0x30
 800470e:	4419      	add	r1, r3
 8004710:	7083      	strb	r3, [r0, #2]
 8004712:	1d02      	adds	r2, r0, #4
 8004714:	70c1      	strb	r1, [r0, #3]
 8004716:	e7ef      	b.n	80046f8 <__exponent+0x46>

08004718 <_printf_float>:
 8004718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800471c:	b08d      	sub	sp, #52	; 0x34
 800471e:	460c      	mov	r4, r1
 8004720:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004724:	4616      	mov	r6, r2
 8004726:	461f      	mov	r7, r3
 8004728:	4605      	mov	r5, r0
 800472a:	f001 fd6f 	bl	800620c <_localeconv_r>
 800472e:	6803      	ldr	r3, [r0, #0]
 8004730:	9304      	str	r3, [sp, #16]
 8004732:	4618      	mov	r0, r3
 8004734:	f7fb fd5c 	bl	80001f0 <strlen>
 8004738:	2300      	movs	r3, #0
 800473a:	930a      	str	r3, [sp, #40]	; 0x28
 800473c:	f8d8 3000 	ldr.w	r3, [r8]
 8004740:	9005      	str	r0, [sp, #20]
 8004742:	3307      	adds	r3, #7
 8004744:	f023 0307 	bic.w	r3, r3, #7
 8004748:	f103 0208 	add.w	r2, r3, #8
 800474c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004750:	f8d4 b000 	ldr.w	fp, [r4]
 8004754:	f8c8 2000 	str.w	r2, [r8]
 8004758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004760:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004764:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004768:	9307      	str	r3, [sp, #28]
 800476a:	f8cd 8018 	str.w	r8, [sp, #24]
 800476e:	f04f 32ff 	mov.w	r2, #4294967295
 8004772:	4ba7      	ldr	r3, [pc, #668]	; (8004a10 <_printf_float+0x2f8>)
 8004774:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004778:	f7fc f9e8 	bl	8000b4c <__aeabi_dcmpun>
 800477c:	bb70      	cbnz	r0, 80047dc <_printf_float+0xc4>
 800477e:	f04f 32ff 	mov.w	r2, #4294967295
 8004782:	4ba3      	ldr	r3, [pc, #652]	; (8004a10 <_printf_float+0x2f8>)
 8004784:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004788:	f7fc f9c2 	bl	8000b10 <__aeabi_dcmple>
 800478c:	bb30      	cbnz	r0, 80047dc <_printf_float+0xc4>
 800478e:	2200      	movs	r2, #0
 8004790:	2300      	movs	r3, #0
 8004792:	4640      	mov	r0, r8
 8004794:	4649      	mov	r1, r9
 8004796:	f7fc f9b1 	bl	8000afc <__aeabi_dcmplt>
 800479a:	b110      	cbz	r0, 80047a2 <_printf_float+0x8a>
 800479c:	232d      	movs	r3, #45	; 0x2d
 800479e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047a2:	4a9c      	ldr	r2, [pc, #624]	; (8004a14 <_printf_float+0x2fc>)
 80047a4:	4b9c      	ldr	r3, [pc, #624]	; (8004a18 <_printf_float+0x300>)
 80047a6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80047aa:	bf8c      	ite	hi
 80047ac:	4690      	movhi	r8, r2
 80047ae:	4698      	movls	r8, r3
 80047b0:	2303      	movs	r3, #3
 80047b2:	f02b 0204 	bic.w	r2, fp, #4
 80047b6:	6123      	str	r3, [r4, #16]
 80047b8:	6022      	str	r2, [r4, #0]
 80047ba:	f04f 0900 	mov.w	r9, #0
 80047be:	9700      	str	r7, [sp, #0]
 80047c0:	4633      	mov	r3, r6
 80047c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80047c4:	4621      	mov	r1, r4
 80047c6:	4628      	mov	r0, r5
 80047c8:	f000 f9e6 	bl	8004b98 <_printf_common>
 80047cc:	3001      	adds	r0, #1
 80047ce:	f040 808d 	bne.w	80048ec <_printf_float+0x1d4>
 80047d2:	f04f 30ff 	mov.w	r0, #4294967295
 80047d6:	b00d      	add	sp, #52	; 0x34
 80047d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047dc:	4642      	mov	r2, r8
 80047de:	464b      	mov	r3, r9
 80047e0:	4640      	mov	r0, r8
 80047e2:	4649      	mov	r1, r9
 80047e4:	f7fc f9b2 	bl	8000b4c <__aeabi_dcmpun>
 80047e8:	b110      	cbz	r0, 80047f0 <_printf_float+0xd8>
 80047ea:	4a8c      	ldr	r2, [pc, #560]	; (8004a1c <_printf_float+0x304>)
 80047ec:	4b8c      	ldr	r3, [pc, #560]	; (8004a20 <_printf_float+0x308>)
 80047ee:	e7da      	b.n	80047a6 <_printf_float+0x8e>
 80047f0:	6861      	ldr	r1, [r4, #4]
 80047f2:	1c4b      	adds	r3, r1, #1
 80047f4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80047f8:	a80a      	add	r0, sp, #40	; 0x28
 80047fa:	d13e      	bne.n	800487a <_printf_float+0x162>
 80047fc:	2306      	movs	r3, #6
 80047fe:	6063      	str	r3, [r4, #4]
 8004800:	2300      	movs	r3, #0
 8004802:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004806:	ab09      	add	r3, sp, #36	; 0x24
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	ec49 8b10 	vmov	d0, r8, r9
 800480e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004812:	6022      	str	r2, [r4, #0]
 8004814:	f8cd a004 	str.w	sl, [sp, #4]
 8004818:	6861      	ldr	r1, [r4, #4]
 800481a:	4628      	mov	r0, r5
 800481c:	f7ff fee8 	bl	80045f0 <__cvt>
 8004820:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004824:	2b47      	cmp	r3, #71	; 0x47
 8004826:	4680      	mov	r8, r0
 8004828:	d109      	bne.n	800483e <_printf_float+0x126>
 800482a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800482c:	1cd8      	adds	r0, r3, #3
 800482e:	db02      	blt.n	8004836 <_printf_float+0x11e>
 8004830:	6862      	ldr	r2, [r4, #4]
 8004832:	4293      	cmp	r3, r2
 8004834:	dd47      	ble.n	80048c6 <_printf_float+0x1ae>
 8004836:	f1aa 0a02 	sub.w	sl, sl, #2
 800483a:	fa5f fa8a 	uxtb.w	sl, sl
 800483e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004842:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004844:	d824      	bhi.n	8004890 <_printf_float+0x178>
 8004846:	3901      	subs	r1, #1
 8004848:	4652      	mov	r2, sl
 800484a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800484e:	9109      	str	r1, [sp, #36]	; 0x24
 8004850:	f7ff ff2f 	bl	80046b2 <__exponent>
 8004854:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004856:	1813      	adds	r3, r2, r0
 8004858:	2a01      	cmp	r2, #1
 800485a:	4681      	mov	r9, r0
 800485c:	6123      	str	r3, [r4, #16]
 800485e:	dc02      	bgt.n	8004866 <_printf_float+0x14e>
 8004860:	6822      	ldr	r2, [r4, #0]
 8004862:	07d1      	lsls	r1, r2, #31
 8004864:	d501      	bpl.n	800486a <_printf_float+0x152>
 8004866:	3301      	adds	r3, #1
 8004868:	6123      	str	r3, [r4, #16]
 800486a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0a5      	beq.n	80047be <_printf_float+0xa6>
 8004872:	232d      	movs	r3, #45	; 0x2d
 8004874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004878:	e7a1      	b.n	80047be <_printf_float+0xa6>
 800487a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800487e:	f000 8177 	beq.w	8004b70 <_printf_float+0x458>
 8004882:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004886:	d1bb      	bne.n	8004800 <_printf_float+0xe8>
 8004888:	2900      	cmp	r1, #0
 800488a:	d1b9      	bne.n	8004800 <_printf_float+0xe8>
 800488c:	2301      	movs	r3, #1
 800488e:	e7b6      	b.n	80047fe <_printf_float+0xe6>
 8004890:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004894:	d119      	bne.n	80048ca <_printf_float+0x1b2>
 8004896:	2900      	cmp	r1, #0
 8004898:	6863      	ldr	r3, [r4, #4]
 800489a:	dd0c      	ble.n	80048b6 <_printf_float+0x19e>
 800489c:	6121      	str	r1, [r4, #16]
 800489e:	b913      	cbnz	r3, 80048a6 <_printf_float+0x18e>
 80048a0:	6822      	ldr	r2, [r4, #0]
 80048a2:	07d2      	lsls	r2, r2, #31
 80048a4:	d502      	bpl.n	80048ac <_printf_float+0x194>
 80048a6:	3301      	adds	r3, #1
 80048a8:	440b      	add	r3, r1
 80048aa:	6123      	str	r3, [r4, #16]
 80048ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048ae:	65a3      	str	r3, [r4, #88]	; 0x58
 80048b0:	f04f 0900 	mov.w	r9, #0
 80048b4:	e7d9      	b.n	800486a <_printf_float+0x152>
 80048b6:	b913      	cbnz	r3, 80048be <_printf_float+0x1a6>
 80048b8:	6822      	ldr	r2, [r4, #0]
 80048ba:	07d0      	lsls	r0, r2, #31
 80048bc:	d501      	bpl.n	80048c2 <_printf_float+0x1aa>
 80048be:	3302      	adds	r3, #2
 80048c0:	e7f3      	b.n	80048aa <_printf_float+0x192>
 80048c2:	2301      	movs	r3, #1
 80048c4:	e7f1      	b.n	80048aa <_printf_float+0x192>
 80048c6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80048ca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80048ce:	4293      	cmp	r3, r2
 80048d0:	db05      	blt.n	80048de <_printf_float+0x1c6>
 80048d2:	6822      	ldr	r2, [r4, #0]
 80048d4:	6123      	str	r3, [r4, #16]
 80048d6:	07d1      	lsls	r1, r2, #31
 80048d8:	d5e8      	bpl.n	80048ac <_printf_float+0x194>
 80048da:	3301      	adds	r3, #1
 80048dc:	e7e5      	b.n	80048aa <_printf_float+0x192>
 80048de:	2b00      	cmp	r3, #0
 80048e0:	bfd4      	ite	le
 80048e2:	f1c3 0302 	rsble	r3, r3, #2
 80048e6:	2301      	movgt	r3, #1
 80048e8:	4413      	add	r3, r2
 80048ea:	e7de      	b.n	80048aa <_printf_float+0x192>
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	055a      	lsls	r2, r3, #21
 80048f0:	d407      	bmi.n	8004902 <_printf_float+0x1ea>
 80048f2:	6923      	ldr	r3, [r4, #16]
 80048f4:	4642      	mov	r2, r8
 80048f6:	4631      	mov	r1, r6
 80048f8:	4628      	mov	r0, r5
 80048fa:	47b8      	blx	r7
 80048fc:	3001      	adds	r0, #1
 80048fe:	d12b      	bne.n	8004958 <_printf_float+0x240>
 8004900:	e767      	b.n	80047d2 <_printf_float+0xba>
 8004902:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004906:	f240 80dc 	bls.w	8004ac2 <_printf_float+0x3aa>
 800490a:	2200      	movs	r2, #0
 800490c:	2300      	movs	r3, #0
 800490e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004912:	f7fc f8e9 	bl	8000ae8 <__aeabi_dcmpeq>
 8004916:	2800      	cmp	r0, #0
 8004918:	d033      	beq.n	8004982 <_printf_float+0x26a>
 800491a:	2301      	movs	r3, #1
 800491c:	4a41      	ldr	r2, [pc, #260]	; (8004a24 <_printf_float+0x30c>)
 800491e:	4631      	mov	r1, r6
 8004920:	4628      	mov	r0, r5
 8004922:	47b8      	blx	r7
 8004924:	3001      	adds	r0, #1
 8004926:	f43f af54 	beq.w	80047d2 <_printf_float+0xba>
 800492a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800492e:	429a      	cmp	r2, r3
 8004930:	db02      	blt.n	8004938 <_printf_float+0x220>
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	07d8      	lsls	r0, r3, #31
 8004936:	d50f      	bpl.n	8004958 <_printf_float+0x240>
 8004938:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800493c:	4631      	mov	r1, r6
 800493e:	4628      	mov	r0, r5
 8004940:	47b8      	blx	r7
 8004942:	3001      	adds	r0, #1
 8004944:	f43f af45 	beq.w	80047d2 <_printf_float+0xba>
 8004948:	f04f 0800 	mov.w	r8, #0
 800494c:	f104 091a 	add.w	r9, r4, #26
 8004950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004952:	3b01      	subs	r3, #1
 8004954:	4543      	cmp	r3, r8
 8004956:	dc09      	bgt.n	800496c <_printf_float+0x254>
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	079b      	lsls	r3, r3, #30
 800495c:	f100 8103 	bmi.w	8004b66 <_printf_float+0x44e>
 8004960:	68e0      	ldr	r0, [r4, #12]
 8004962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004964:	4298      	cmp	r0, r3
 8004966:	bfb8      	it	lt
 8004968:	4618      	movlt	r0, r3
 800496a:	e734      	b.n	80047d6 <_printf_float+0xbe>
 800496c:	2301      	movs	r3, #1
 800496e:	464a      	mov	r2, r9
 8004970:	4631      	mov	r1, r6
 8004972:	4628      	mov	r0, r5
 8004974:	47b8      	blx	r7
 8004976:	3001      	adds	r0, #1
 8004978:	f43f af2b 	beq.w	80047d2 <_printf_float+0xba>
 800497c:	f108 0801 	add.w	r8, r8, #1
 8004980:	e7e6      	b.n	8004950 <_printf_float+0x238>
 8004982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004984:	2b00      	cmp	r3, #0
 8004986:	dc2b      	bgt.n	80049e0 <_printf_float+0x2c8>
 8004988:	2301      	movs	r3, #1
 800498a:	4a26      	ldr	r2, [pc, #152]	; (8004a24 <_printf_float+0x30c>)
 800498c:	4631      	mov	r1, r6
 800498e:	4628      	mov	r0, r5
 8004990:	47b8      	blx	r7
 8004992:	3001      	adds	r0, #1
 8004994:	f43f af1d 	beq.w	80047d2 <_printf_float+0xba>
 8004998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800499a:	b923      	cbnz	r3, 80049a6 <_printf_float+0x28e>
 800499c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800499e:	b913      	cbnz	r3, 80049a6 <_printf_float+0x28e>
 80049a0:	6823      	ldr	r3, [r4, #0]
 80049a2:	07d9      	lsls	r1, r3, #31
 80049a4:	d5d8      	bpl.n	8004958 <_printf_float+0x240>
 80049a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049aa:	4631      	mov	r1, r6
 80049ac:	4628      	mov	r0, r5
 80049ae:	47b8      	blx	r7
 80049b0:	3001      	adds	r0, #1
 80049b2:	f43f af0e 	beq.w	80047d2 <_printf_float+0xba>
 80049b6:	f04f 0900 	mov.w	r9, #0
 80049ba:	f104 0a1a 	add.w	sl, r4, #26
 80049be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049c0:	425b      	negs	r3, r3
 80049c2:	454b      	cmp	r3, r9
 80049c4:	dc01      	bgt.n	80049ca <_printf_float+0x2b2>
 80049c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049c8:	e794      	b.n	80048f4 <_printf_float+0x1dc>
 80049ca:	2301      	movs	r3, #1
 80049cc:	4652      	mov	r2, sl
 80049ce:	4631      	mov	r1, r6
 80049d0:	4628      	mov	r0, r5
 80049d2:	47b8      	blx	r7
 80049d4:	3001      	adds	r0, #1
 80049d6:	f43f aefc 	beq.w	80047d2 <_printf_float+0xba>
 80049da:	f109 0901 	add.w	r9, r9, #1
 80049de:	e7ee      	b.n	80049be <_printf_float+0x2a6>
 80049e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049e4:	429a      	cmp	r2, r3
 80049e6:	bfa8      	it	ge
 80049e8:	461a      	movge	r2, r3
 80049ea:	2a00      	cmp	r2, #0
 80049ec:	4691      	mov	r9, r2
 80049ee:	dd07      	ble.n	8004a00 <_printf_float+0x2e8>
 80049f0:	4613      	mov	r3, r2
 80049f2:	4631      	mov	r1, r6
 80049f4:	4642      	mov	r2, r8
 80049f6:	4628      	mov	r0, r5
 80049f8:	47b8      	blx	r7
 80049fa:	3001      	adds	r0, #1
 80049fc:	f43f aee9 	beq.w	80047d2 <_printf_float+0xba>
 8004a00:	f104 031a 	add.w	r3, r4, #26
 8004a04:	f04f 0b00 	mov.w	fp, #0
 8004a08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a0c:	9306      	str	r3, [sp, #24]
 8004a0e:	e015      	b.n	8004a3c <_printf_float+0x324>
 8004a10:	7fefffff 	.word	0x7fefffff
 8004a14:	08006f1c 	.word	0x08006f1c
 8004a18:	08006f18 	.word	0x08006f18
 8004a1c:	08006f24 	.word	0x08006f24
 8004a20:	08006f20 	.word	0x08006f20
 8004a24:	08006f28 	.word	0x08006f28
 8004a28:	2301      	movs	r3, #1
 8004a2a:	9a06      	ldr	r2, [sp, #24]
 8004a2c:	4631      	mov	r1, r6
 8004a2e:	4628      	mov	r0, r5
 8004a30:	47b8      	blx	r7
 8004a32:	3001      	adds	r0, #1
 8004a34:	f43f aecd 	beq.w	80047d2 <_printf_float+0xba>
 8004a38:	f10b 0b01 	add.w	fp, fp, #1
 8004a3c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004a40:	ebaa 0309 	sub.w	r3, sl, r9
 8004a44:	455b      	cmp	r3, fp
 8004a46:	dcef      	bgt.n	8004a28 <_printf_float+0x310>
 8004a48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	44d0      	add	r8, sl
 8004a50:	db15      	blt.n	8004a7e <_printf_float+0x366>
 8004a52:	6823      	ldr	r3, [r4, #0]
 8004a54:	07da      	lsls	r2, r3, #31
 8004a56:	d412      	bmi.n	8004a7e <_printf_float+0x366>
 8004a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a5c:	eba3 020a 	sub.w	r2, r3, sl
 8004a60:	eba3 0a01 	sub.w	sl, r3, r1
 8004a64:	4592      	cmp	sl, r2
 8004a66:	bfa8      	it	ge
 8004a68:	4692      	movge	sl, r2
 8004a6a:	f1ba 0f00 	cmp.w	sl, #0
 8004a6e:	dc0e      	bgt.n	8004a8e <_printf_float+0x376>
 8004a70:	f04f 0800 	mov.w	r8, #0
 8004a74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004a78:	f104 091a 	add.w	r9, r4, #26
 8004a7c:	e019      	b.n	8004ab2 <_printf_float+0x39a>
 8004a7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a82:	4631      	mov	r1, r6
 8004a84:	4628      	mov	r0, r5
 8004a86:	47b8      	blx	r7
 8004a88:	3001      	adds	r0, #1
 8004a8a:	d1e5      	bne.n	8004a58 <_printf_float+0x340>
 8004a8c:	e6a1      	b.n	80047d2 <_printf_float+0xba>
 8004a8e:	4653      	mov	r3, sl
 8004a90:	4642      	mov	r2, r8
 8004a92:	4631      	mov	r1, r6
 8004a94:	4628      	mov	r0, r5
 8004a96:	47b8      	blx	r7
 8004a98:	3001      	adds	r0, #1
 8004a9a:	d1e9      	bne.n	8004a70 <_printf_float+0x358>
 8004a9c:	e699      	b.n	80047d2 <_printf_float+0xba>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	464a      	mov	r2, r9
 8004aa2:	4631      	mov	r1, r6
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	47b8      	blx	r7
 8004aa8:	3001      	adds	r0, #1
 8004aaa:	f43f ae92 	beq.w	80047d2 <_printf_float+0xba>
 8004aae:	f108 0801 	add.w	r8, r8, #1
 8004ab2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ab6:	1a9b      	subs	r3, r3, r2
 8004ab8:	eba3 030a 	sub.w	r3, r3, sl
 8004abc:	4543      	cmp	r3, r8
 8004abe:	dcee      	bgt.n	8004a9e <_printf_float+0x386>
 8004ac0:	e74a      	b.n	8004958 <_printf_float+0x240>
 8004ac2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ac4:	2a01      	cmp	r2, #1
 8004ac6:	dc01      	bgt.n	8004acc <_printf_float+0x3b4>
 8004ac8:	07db      	lsls	r3, r3, #31
 8004aca:	d53a      	bpl.n	8004b42 <_printf_float+0x42a>
 8004acc:	2301      	movs	r3, #1
 8004ace:	4642      	mov	r2, r8
 8004ad0:	4631      	mov	r1, r6
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	47b8      	blx	r7
 8004ad6:	3001      	adds	r0, #1
 8004ad8:	f43f ae7b 	beq.w	80047d2 <_printf_float+0xba>
 8004adc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ae0:	4631      	mov	r1, r6
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	47b8      	blx	r7
 8004ae6:	3001      	adds	r0, #1
 8004ae8:	f108 0801 	add.w	r8, r8, #1
 8004aec:	f43f ae71 	beq.w	80047d2 <_printf_float+0xba>
 8004af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004af2:	2200      	movs	r2, #0
 8004af4:	f103 3aff 	add.w	sl, r3, #4294967295
 8004af8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004afc:	2300      	movs	r3, #0
 8004afe:	f7fb fff3 	bl	8000ae8 <__aeabi_dcmpeq>
 8004b02:	b9c8      	cbnz	r0, 8004b38 <_printf_float+0x420>
 8004b04:	4653      	mov	r3, sl
 8004b06:	4642      	mov	r2, r8
 8004b08:	4631      	mov	r1, r6
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	47b8      	blx	r7
 8004b0e:	3001      	adds	r0, #1
 8004b10:	d10e      	bne.n	8004b30 <_printf_float+0x418>
 8004b12:	e65e      	b.n	80047d2 <_printf_float+0xba>
 8004b14:	2301      	movs	r3, #1
 8004b16:	4652      	mov	r2, sl
 8004b18:	4631      	mov	r1, r6
 8004b1a:	4628      	mov	r0, r5
 8004b1c:	47b8      	blx	r7
 8004b1e:	3001      	adds	r0, #1
 8004b20:	f43f ae57 	beq.w	80047d2 <_printf_float+0xba>
 8004b24:	f108 0801 	add.w	r8, r8, #1
 8004b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	4543      	cmp	r3, r8
 8004b2e:	dcf1      	bgt.n	8004b14 <_printf_float+0x3fc>
 8004b30:	464b      	mov	r3, r9
 8004b32:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004b36:	e6de      	b.n	80048f6 <_printf_float+0x1de>
 8004b38:	f04f 0800 	mov.w	r8, #0
 8004b3c:	f104 0a1a 	add.w	sl, r4, #26
 8004b40:	e7f2      	b.n	8004b28 <_printf_float+0x410>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e7df      	b.n	8004b06 <_printf_float+0x3ee>
 8004b46:	2301      	movs	r3, #1
 8004b48:	464a      	mov	r2, r9
 8004b4a:	4631      	mov	r1, r6
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	47b8      	blx	r7
 8004b50:	3001      	adds	r0, #1
 8004b52:	f43f ae3e 	beq.w	80047d2 <_printf_float+0xba>
 8004b56:	f108 0801 	add.w	r8, r8, #1
 8004b5a:	68e3      	ldr	r3, [r4, #12]
 8004b5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004b5e:	1a9b      	subs	r3, r3, r2
 8004b60:	4543      	cmp	r3, r8
 8004b62:	dcf0      	bgt.n	8004b46 <_printf_float+0x42e>
 8004b64:	e6fc      	b.n	8004960 <_printf_float+0x248>
 8004b66:	f04f 0800 	mov.w	r8, #0
 8004b6a:	f104 0919 	add.w	r9, r4, #25
 8004b6e:	e7f4      	b.n	8004b5a <_printf_float+0x442>
 8004b70:	2900      	cmp	r1, #0
 8004b72:	f43f ae8b 	beq.w	800488c <_printf_float+0x174>
 8004b76:	2300      	movs	r3, #0
 8004b78:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004b7c:	ab09      	add	r3, sp, #36	; 0x24
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	ec49 8b10 	vmov	d0, r8, r9
 8004b84:	6022      	str	r2, [r4, #0]
 8004b86:	f8cd a004 	str.w	sl, [sp, #4]
 8004b8a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004b8e:	4628      	mov	r0, r5
 8004b90:	f7ff fd2e 	bl	80045f0 <__cvt>
 8004b94:	4680      	mov	r8, r0
 8004b96:	e648      	b.n	800482a <_printf_float+0x112>

08004b98 <_printf_common>:
 8004b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b9c:	4691      	mov	r9, r2
 8004b9e:	461f      	mov	r7, r3
 8004ba0:	688a      	ldr	r2, [r1, #8]
 8004ba2:	690b      	ldr	r3, [r1, #16]
 8004ba4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	bfb8      	it	lt
 8004bac:	4613      	movlt	r3, r2
 8004bae:	f8c9 3000 	str.w	r3, [r9]
 8004bb2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bb6:	4606      	mov	r6, r0
 8004bb8:	460c      	mov	r4, r1
 8004bba:	b112      	cbz	r2, 8004bc2 <_printf_common+0x2a>
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	f8c9 3000 	str.w	r3, [r9]
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	0699      	lsls	r1, r3, #26
 8004bc6:	bf42      	ittt	mi
 8004bc8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004bcc:	3302      	addmi	r3, #2
 8004bce:	f8c9 3000 	strmi.w	r3, [r9]
 8004bd2:	6825      	ldr	r5, [r4, #0]
 8004bd4:	f015 0506 	ands.w	r5, r5, #6
 8004bd8:	d107      	bne.n	8004bea <_printf_common+0x52>
 8004bda:	f104 0a19 	add.w	sl, r4, #25
 8004bde:	68e3      	ldr	r3, [r4, #12]
 8004be0:	f8d9 2000 	ldr.w	r2, [r9]
 8004be4:	1a9b      	subs	r3, r3, r2
 8004be6:	42ab      	cmp	r3, r5
 8004be8:	dc28      	bgt.n	8004c3c <_printf_common+0xa4>
 8004bea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004bee:	6822      	ldr	r2, [r4, #0]
 8004bf0:	3300      	adds	r3, #0
 8004bf2:	bf18      	it	ne
 8004bf4:	2301      	movne	r3, #1
 8004bf6:	0692      	lsls	r2, r2, #26
 8004bf8:	d42d      	bmi.n	8004c56 <_printf_common+0xbe>
 8004bfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bfe:	4639      	mov	r1, r7
 8004c00:	4630      	mov	r0, r6
 8004c02:	47c0      	blx	r8
 8004c04:	3001      	adds	r0, #1
 8004c06:	d020      	beq.n	8004c4a <_printf_common+0xb2>
 8004c08:	6823      	ldr	r3, [r4, #0]
 8004c0a:	68e5      	ldr	r5, [r4, #12]
 8004c0c:	f8d9 2000 	ldr.w	r2, [r9]
 8004c10:	f003 0306 	and.w	r3, r3, #6
 8004c14:	2b04      	cmp	r3, #4
 8004c16:	bf08      	it	eq
 8004c18:	1aad      	subeq	r5, r5, r2
 8004c1a:	68a3      	ldr	r3, [r4, #8]
 8004c1c:	6922      	ldr	r2, [r4, #16]
 8004c1e:	bf0c      	ite	eq
 8004c20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c24:	2500      	movne	r5, #0
 8004c26:	4293      	cmp	r3, r2
 8004c28:	bfc4      	itt	gt
 8004c2a:	1a9b      	subgt	r3, r3, r2
 8004c2c:	18ed      	addgt	r5, r5, r3
 8004c2e:	f04f 0900 	mov.w	r9, #0
 8004c32:	341a      	adds	r4, #26
 8004c34:	454d      	cmp	r5, r9
 8004c36:	d11a      	bne.n	8004c6e <_printf_common+0xd6>
 8004c38:	2000      	movs	r0, #0
 8004c3a:	e008      	b.n	8004c4e <_printf_common+0xb6>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	4652      	mov	r2, sl
 8004c40:	4639      	mov	r1, r7
 8004c42:	4630      	mov	r0, r6
 8004c44:	47c0      	blx	r8
 8004c46:	3001      	adds	r0, #1
 8004c48:	d103      	bne.n	8004c52 <_printf_common+0xba>
 8004c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c52:	3501      	adds	r5, #1
 8004c54:	e7c3      	b.n	8004bde <_printf_common+0x46>
 8004c56:	18e1      	adds	r1, r4, r3
 8004c58:	1c5a      	adds	r2, r3, #1
 8004c5a:	2030      	movs	r0, #48	; 0x30
 8004c5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c60:	4422      	add	r2, r4
 8004c62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c6a:	3302      	adds	r3, #2
 8004c6c:	e7c5      	b.n	8004bfa <_printf_common+0x62>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	4622      	mov	r2, r4
 8004c72:	4639      	mov	r1, r7
 8004c74:	4630      	mov	r0, r6
 8004c76:	47c0      	blx	r8
 8004c78:	3001      	adds	r0, #1
 8004c7a:	d0e6      	beq.n	8004c4a <_printf_common+0xb2>
 8004c7c:	f109 0901 	add.w	r9, r9, #1
 8004c80:	e7d8      	b.n	8004c34 <_printf_common+0x9c>
	...

08004c84 <_printf_i>:
 8004c84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c88:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004c8c:	460c      	mov	r4, r1
 8004c8e:	7e09      	ldrb	r1, [r1, #24]
 8004c90:	b085      	sub	sp, #20
 8004c92:	296e      	cmp	r1, #110	; 0x6e
 8004c94:	4617      	mov	r7, r2
 8004c96:	4606      	mov	r6, r0
 8004c98:	4698      	mov	r8, r3
 8004c9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c9c:	f000 80b3 	beq.w	8004e06 <_printf_i+0x182>
 8004ca0:	d822      	bhi.n	8004ce8 <_printf_i+0x64>
 8004ca2:	2963      	cmp	r1, #99	; 0x63
 8004ca4:	d036      	beq.n	8004d14 <_printf_i+0x90>
 8004ca6:	d80a      	bhi.n	8004cbe <_printf_i+0x3a>
 8004ca8:	2900      	cmp	r1, #0
 8004caa:	f000 80b9 	beq.w	8004e20 <_printf_i+0x19c>
 8004cae:	2958      	cmp	r1, #88	; 0x58
 8004cb0:	f000 8083 	beq.w	8004dba <_printf_i+0x136>
 8004cb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cb8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004cbc:	e032      	b.n	8004d24 <_printf_i+0xa0>
 8004cbe:	2964      	cmp	r1, #100	; 0x64
 8004cc0:	d001      	beq.n	8004cc6 <_printf_i+0x42>
 8004cc2:	2969      	cmp	r1, #105	; 0x69
 8004cc4:	d1f6      	bne.n	8004cb4 <_printf_i+0x30>
 8004cc6:	6820      	ldr	r0, [r4, #0]
 8004cc8:	6813      	ldr	r3, [r2, #0]
 8004cca:	0605      	lsls	r5, r0, #24
 8004ccc:	f103 0104 	add.w	r1, r3, #4
 8004cd0:	d52a      	bpl.n	8004d28 <_printf_i+0xa4>
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6011      	str	r1, [r2, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	da03      	bge.n	8004ce2 <_printf_i+0x5e>
 8004cda:	222d      	movs	r2, #45	; 0x2d
 8004cdc:	425b      	negs	r3, r3
 8004cde:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004ce2:	486f      	ldr	r0, [pc, #444]	; (8004ea0 <_printf_i+0x21c>)
 8004ce4:	220a      	movs	r2, #10
 8004ce6:	e039      	b.n	8004d5c <_printf_i+0xd8>
 8004ce8:	2973      	cmp	r1, #115	; 0x73
 8004cea:	f000 809d 	beq.w	8004e28 <_printf_i+0x1a4>
 8004cee:	d808      	bhi.n	8004d02 <_printf_i+0x7e>
 8004cf0:	296f      	cmp	r1, #111	; 0x6f
 8004cf2:	d020      	beq.n	8004d36 <_printf_i+0xb2>
 8004cf4:	2970      	cmp	r1, #112	; 0x70
 8004cf6:	d1dd      	bne.n	8004cb4 <_printf_i+0x30>
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	f043 0320 	orr.w	r3, r3, #32
 8004cfe:	6023      	str	r3, [r4, #0]
 8004d00:	e003      	b.n	8004d0a <_printf_i+0x86>
 8004d02:	2975      	cmp	r1, #117	; 0x75
 8004d04:	d017      	beq.n	8004d36 <_printf_i+0xb2>
 8004d06:	2978      	cmp	r1, #120	; 0x78
 8004d08:	d1d4      	bne.n	8004cb4 <_printf_i+0x30>
 8004d0a:	2378      	movs	r3, #120	; 0x78
 8004d0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d10:	4864      	ldr	r0, [pc, #400]	; (8004ea4 <_printf_i+0x220>)
 8004d12:	e055      	b.n	8004dc0 <_printf_i+0x13c>
 8004d14:	6813      	ldr	r3, [r2, #0]
 8004d16:	1d19      	adds	r1, r3, #4
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6011      	str	r1, [r2, #0]
 8004d1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d24:	2301      	movs	r3, #1
 8004d26:	e08c      	b.n	8004e42 <_printf_i+0x1be>
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6011      	str	r1, [r2, #0]
 8004d2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d30:	bf18      	it	ne
 8004d32:	b21b      	sxthne	r3, r3
 8004d34:	e7cf      	b.n	8004cd6 <_printf_i+0x52>
 8004d36:	6813      	ldr	r3, [r2, #0]
 8004d38:	6825      	ldr	r5, [r4, #0]
 8004d3a:	1d18      	adds	r0, r3, #4
 8004d3c:	6010      	str	r0, [r2, #0]
 8004d3e:	0628      	lsls	r0, r5, #24
 8004d40:	d501      	bpl.n	8004d46 <_printf_i+0xc2>
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	e002      	b.n	8004d4c <_printf_i+0xc8>
 8004d46:	0668      	lsls	r0, r5, #25
 8004d48:	d5fb      	bpl.n	8004d42 <_printf_i+0xbe>
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	4854      	ldr	r0, [pc, #336]	; (8004ea0 <_printf_i+0x21c>)
 8004d4e:	296f      	cmp	r1, #111	; 0x6f
 8004d50:	bf14      	ite	ne
 8004d52:	220a      	movne	r2, #10
 8004d54:	2208      	moveq	r2, #8
 8004d56:	2100      	movs	r1, #0
 8004d58:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d5c:	6865      	ldr	r5, [r4, #4]
 8004d5e:	60a5      	str	r5, [r4, #8]
 8004d60:	2d00      	cmp	r5, #0
 8004d62:	f2c0 8095 	blt.w	8004e90 <_printf_i+0x20c>
 8004d66:	6821      	ldr	r1, [r4, #0]
 8004d68:	f021 0104 	bic.w	r1, r1, #4
 8004d6c:	6021      	str	r1, [r4, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d13d      	bne.n	8004dee <_printf_i+0x16a>
 8004d72:	2d00      	cmp	r5, #0
 8004d74:	f040 808e 	bne.w	8004e94 <_printf_i+0x210>
 8004d78:	4665      	mov	r5, ip
 8004d7a:	2a08      	cmp	r2, #8
 8004d7c:	d10b      	bne.n	8004d96 <_printf_i+0x112>
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	07db      	lsls	r3, r3, #31
 8004d82:	d508      	bpl.n	8004d96 <_printf_i+0x112>
 8004d84:	6923      	ldr	r3, [r4, #16]
 8004d86:	6862      	ldr	r2, [r4, #4]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	bfde      	ittt	le
 8004d8c:	2330      	movle	r3, #48	; 0x30
 8004d8e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d92:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d96:	ebac 0305 	sub.w	r3, ip, r5
 8004d9a:	6123      	str	r3, [r4, #16]
 8004d9c:	f8cd 8000 	str.w	r8, [sp]
 8004da0:	463b      	mov	r3, r7
 8004da2:	aa03      	add	r2, sp, #12
 8004da4:	4621      	mov	r1, r4
 8004da6:	4630      	mov	r0, r6
 8004da8:	f7ff fef6 	bl	8004b98 <_printf_common>
 8004dac:	3001      	adds	r0, #1
 8004dae:	d14d      	bne.n	8004e4c <_printf_i+0x1c8>
 8004db0:	f04f 30ff 	mov.w	r0, #4294967295
 8004db4:	b005      	add	sp, #20
 8004db6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004dba:	4839      	ldr	r0, [pc, #228]	; (8004ea0 <_printf_i+0x21c>)
 8004dbc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004dc0:	6813      	ldr	r3, [r2, #0]
 8004dc2:	6821      	ldr	r1, [r4, #0]
 8004dc4:	1d1d      	adds	r5, r3, #4
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6015      	str	r5, [r2, #0]
 8004dca:	060a      	lsls	r2, r1, #24
 8004dcc:	d50b      	bpl.n	8004de6 <_printf_i+0x162>
 8004dce:	07ca      	lsls	r2, r1, #31
 8004dd0:	bf44      	itt	mi
 8004dd2:	f041 0120 	orrmi.w	r1, r1, #32
 8004dd6:	6021      	strmi	r1, [r4, #0]
 8004dd8:	b91b      	cbnz	r3, 8004de2 <_printf_i+0x15e>
 8004dda:	6822      	ldr	r2, [r4, #0]
 8004ddc:	f022 0220 	bic.w	r2, r2, #32
 8004de0:	6022      	str	r2, [r4, #0]
 8004de2:	2210      	movs	r2, #16
 8004de4:	e7b7      	b.n	8004d56 <_printf_i+0xd2>
 8004de6:	064d      	lsls	r5, r1, #25
 8004de8:	bf48      	it	mi
 8004dea:	b29b      	uxthmi	r3, r3
 8004dec:	e7ef      	b.n	8004dce <_printf_i+0x14a>
 8004dee:	4665      	mov	r5, ip
 8004df0:	fbb3 f1f2 	udiv	r1, r3, r2
 8004df4:	fb02 3311 	mls	r3, r2, r1, r3
 8004df8:	5cc3      	ldrb	r3, [r0, r3]
 8004dfa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004dfe:	460b      	mov	r3, r1
 8004e00:	2900      	cmp	r1, #0
 8004e02:	d1f5      	bne.n	8004df0 <_printf_i+0x16c>
 8004e04:	e7b9      	b.n	8004d7a <_printf_i+0xf6>
 8004e06:	6813      	ldr	r3, [r2, #0]
 8004e08:	6825      	ldr	r5, [r4, #0]
 8004e0a:	6961      	ldr	r1, [r4, #20]
 8004e0c:	1d18      	adds	r0, r3, #4
 8004e0e:	6010      	str	r0, [r2, #0]
 8004e10:	0628      	lsls	r0, r5, #24
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	d501      	bpl.n	8004e1a <_printf_i+0x196>
 8004e16:	6019      	str	r1, [r3, #0]
 8004e18:	e002      	b.n	8004e20 <_printf_i+0x19c>
 8004e1a:	066a      	lsls	r2, r5, #25
 8004e1c:	d5fb      	bpl.n	8004e16 <_printf_i+0x192>
 8004e1e:	8019      	strh	r1, [r3, #0]
 8004e20:	2300      	movs	r3, #0
 8004e22:	6123      	str	r3, [r4, #16]
 8004e24:	4665      	mov	r5, ip
 8004e26:	e7b9      	b.n	8004d9c <_printf_i+0x118>
 8004e28:	6813      	ldr	r3, [r2, #0]
 8004e2a:	1d19      	adds	r1, r3, #4
 8004e2c:	6011      	str	r1, [r2, #0]
 8004e2e:	681d      	ldr	r5, [r3, #0]
 8004e30:	6862      	ldr	r2, [r4, #4]
 8004e32:	2100      	movs	r1, #0
 8004e34:	4628      	mov	r0, r5
 8004e36:	f7fb f9e3 	bl	8000200 <memchr>
 8004e3a:	b108      	cbz	r0, 8004e40 <_printf_i+0x1bc>
 8004e3c:	1b40      	subs	r0, r0, r5
 8004e3e:	6060      	str	r0, [r4, #4]
 8004e40:	6863      	ldr	r3, [r4, #4]
 8004e42:	6123      	str	r3, [r4, #16]
 8004e44:	2300      	movs	r3, #0
 8004e46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e4a:	e7a7      	b.n	8004d9c <_printf_i+0x118>
 8004e4c:	6923      	ldr	r3, [r4, #16]
 8004e4e:	462a      	mov	r2, r5
 8004e50:	4639      	mov	r1, r7
 8004e52:	4630      	mov	r0, r6
 8004e54:	47c0      	blx	r8
 8004e56:	3001      	adds	r0, #1
 8004e58:	d0aa      	beq.n	8004db0 <_printf_i+0x12c>
 8004e5a:	6823      	ldr	r3, [r4, #0]
 8004e5c:	079b      	lsls	r3, r3, #30
 8004e5e:	d413      	bmi.n	8004e88 <_printf_i+0x204>
 8004e60:	68e0      	ldr	r0, [r4, #12]
 8004e62:	9b03      	ldr	r3, [sp, #12]
 8004e64:	4298      	cmp	r0, r3
 8004e66:	bfb8      	it	lt
 8004e68:	4618      	movlt	r0, r3
 8004e6a:	e7a3      	b.n	8004db4 <_printf_i+0x130>
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	464a      	mov	r2, r9
 8004e70:	4639      	mov	r1, r7
 8004e72:	4630      	mov	r0, r6
 8004e74:	47c0      	blx	r8
 8004e76:	3001      	adds	r0, #1
 8004e78:	d09a      	beq.n	8004db0 <_printf_i+0x12c>
 8004e7a:	3501      	adds	r5, #1
 8004e7c:	68e3      	ldr	r3, [r4, #12]
 8004e7e:	9a03      	ldr	r2, [sp, #12]
 8004e80:	1a9b      	subs	r3, r3, r2
 8004e82:	42ab      	cmp	r3, r5
 8004e84:	dcf2      	bgt.n	8004e6c <_printf_i+0x1e8>
 8004e86:	e7eb      	b.n	8004e60 <_printf_i+0x1dc>
 8004e88:	2500      	movs	r5, #0
 8004e8a:	f104 0919 	add.w	r9, r4, #25
 8004e8e:	e7f5      	b.n	8004e7c <_printf_i+0x1f8>
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1ac      	bne.n	8004dee <_printf_i+0x16a>
 8004e94:	7803      	ldrb	r3, [r0, #0]
 8004e96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e9a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e9e:	e76c      	b.n	8004d7a <_printf_i+0xf6>
 8004ea0:	08006f2a 	.word	0x08006f2a
 8004ea4:	08006f3b 	.word	0x08006f3b

08004ea8 <iprintf>:
 8004ea8:	b40f      	push	{r0, r1, r2, r3}
 8004eaa:	4b0a      	ldr	r3, [pc, #40]	; (8004ed4 <iprintf+0x2c>)
 8004eac:	b513      	push	{r0, r1, r4, lr}
 8004eae:	681c      	ldr	r4, [r3, #0]
 8004eb0:	b124      	cbz	r4, 8004ebc <iprintf+0x14>
 8004eb2:	69a3      	ldr	r3, [r4, #24]
 8004eb4:	b913      	cbnz	r3, 8004ebc <iprintf+0x14>
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	f001 f91e 	bl	80060f8 <__sinit>
 8004ebc:	ab05      	add	r3, sp, #20
 8004ebe:	9a04      	ldr	r2, [sp, #16]
 8004ec0:	68a1      	ldr	r1, [r4, #8]
 8004ec2:	9301      	str	r3, [sp, #4]
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	f001 fde1 	bl	8006a8c <_vfiprintf_r>
 8004eca:	b002      	add	sp, #8
 8004ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ed0:	b004      	add	sp, #16
 8004ed2:	4770      	bx	lr
 8004ed4:	2000000c 	.word	0x2000000c

08004ed8 <_puts_r>:
 8004ed8:	b570      	push	{r4, r5, r6, lr}
 8004eda:	460e      	mov	r6, r1
 8004edc:	4605      	mov	r5, r0
 8004ede:	b118      	cbz	r0, 8004ee8 <_puts_r+0x10>
 8004ee0:	6983      	ldr	r3, [r0, #24]
 8004ee2:	b90b      	cbnz	r3, 8004ee8 <_puts_r+0x10>
 8004ee4:	f001 f908 	bl	80060f8 <__sinit>
 8004ee8:	69ab      	ldr	r3, [r5, #24]
 8004eea:	68ac      	ldr	r4, [r5, #8]
 8004eec:	b913      	cbnz	r3, 8004ef4 <_puts_r+0x1c>
 8004eee:	4628      	mov	r0, r5
 8004ef0:	f001 f902 	bl	80060f8 <__sinit>
 8004ef4:	4b23      	ldr	r3, [pc, #140]	; (8004f84 <_puts_r+0xac>)
 8004ef6:	429c      	cmp	r4, r3
 8004ef8:	d117      	bne.n	8004f2a <_puts_r+0x52>
 8004efa:	686c      	ldr	r4, [r5, #4]
 8004efc:	89a3      	ldrh	r3, [r4, #12]
 8004efe:	071b      	lsls	r3, r3, #28
 8004f00:	d51d      	bpl.n	8004f3e <_puts_r+0x66>
 8004f02:	6923      	ldr	r3, [r4, #16]
 8004f04:	b1db      	cbz	r3, 8004f3e <_puts_r+0x66>
 8004f06:	3e01      	subs	r6, #1
 8004f08:	68a3      	ldr	r3, [r4, #8]
 8004f0a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	60a3      	str	r3, [r4, #8]
 8004f12:	b9e9      	cbnz	r1, 8004f50 <_puts_r+0x78>
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	da2e      	bge.n	8004f76 <_puts_r+0x9e>
 8004f18:	4622      	mov	r2, r4
 8004f1a:	210a      	movs	r1, #10
 8004f1c:	4628      	mov	r0, r5
 8004f1e:	f000 f8f5 	bl	800510c <__swbuf_r>
 8004f22:	3001      	adds	r0, #1
 8004f24:	d011      	beq.n	8004f4a <_puts_r+0x72>
 8004f26:	200a      	movs	r0, #10
 8004f28:	e011      	b.n	8004f4e <_puts_r+0x76>
 8004f2a:	4b17      	ldr	r3, [pc, #92]	; (8004f88 <_puts_r+0xb0>)
 8004f2c:	429c      	cmp	r4, r3
 8004f2e:	d101      	bne.n	8004f34 <_puts_r+0x5c>
 8004f30:	68ac      	ldr	r4, [r5, #8]
 8004f32:	e7e3      	b.n	8004efc <_puts_r+0x24>
 8004f34:	4b15      	ldr	r3, [pc, #84]	; (8004f8c <_puts_r+0xb4>)
 8004f36:	429c      	cmp	r4, r3
 8004f38:	bf08      	it	eq
 8004f3a:	68ec      	ldreq	r4, [r5, #12]
 8004f3c:	e7de      	b.n	8004efc <_puts_r+0x24>
 8004f3e:	4621      	mov	r1, r4
 8004f40:	4628      	mov	r0, r5
 8004f42:	f000 f935 	bl	80051b0 <__swsetup_r>
 8004f46:	2800      	cmp	r0, #0
 8004f48:	d0dd      	beq.n	8004f06 <_puts_r+0x2e>
 8004f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f4e:	bd70      	pop	{r4, r5, r6, pc}
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	da04      	bge.n	8004f5e <_puts_r+0x86>
 8004f54:	69a2      	ldr	r2, [r4, #24]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	dc06      	bgt.n	8004f68 <_puts_r+0x90>
 8004f5a:	290a      	cmp	r1, #10
 8004f5c:	d004      	beq.n	8004f68 <_puts_r+0x90>
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	1c5a      	adds	r2, r3, #1
 8004f62:	6022      	str	r2, [r4, #0]
 8004f64:	7019      	strb	r1, [r3, #0]
 8004f66:	e7cf      	b.n	8004f08 <_puts_r+0x30>
 8004f68:	4622      	mov	r2, r4
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	f000 f8ce 	bl	800510c <__swbuf_r>
 8004f70:	3001      	adds	r0, #1
 8004f72:	d1c9      	bne.n	8004f08 <_puts_r+0x30>
 8004f74:	e7e9      	b.n	8004f4a <_puts_r+0x72>
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	200a      	movs	r0, #10
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	6022      	str	r2, [r4, #0]
 8004f7e:	7018      	strb	r0, [r3, #0]
 8004f80:	e7e5      	b.n	8004f4e <_puts_r+0x76>
 8004f82:	bf00      	nop
 8004f84:	08006f7c 	.word	0x08006f7c
 8004f88:	08006f9c 	.word	0x08006f9c
 8004f8c:	08006f5c 	.word	0x08006f5c

08004f90 <puts>:
 8004f90:	4b02      	ldr	r3, [pc, #8]	; (8004f9c <puts+0xc>)
 8004f92:	4601      	mov	r1, r0
 8004f94:	6818      	ldr	r0, [r3, #0]
 8004f96:	f7ff bf9f 	b.w	8004ed8 <_puts_r>
 8004f9a:	bf00      	nop
 8004f9c:	2000000c 	.word	0x2000000c

08004fa0 <setbuf>:
 8004fa0:	2900      	cmp	r1, #0
 8004fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fa6:	bf0c      	ite	eq
 8004fa8:	2202      	moveq	r2, #2
 8004faa:	2200      	movne	r2, #0
 8004fac:	f000 b800 	b.w	8004fb0 <setvbuf>

08004fb0 <setvbuf>:
 8004fb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004fb4:	461d      	mov	r5, r3
 8004fb6:	4b51      	ldr	r3, [pc, #324]	; (80050fc <setvbuf+0x14c>)
 8004fb8:	681e      	ldr	r6, [r3, #0]
 8004fba:	4604      	mov	r4, r0
 8004fbc:	460f      	mov	r7, r1
 8004fbe:	4690      	mov	r8, r2
 8004fc0:	b126      	cbz	r6, 8004fcc <setvbuf+0x1c>
 8004fc2:	69b3      	ldr	r3, [r6, #24]
 8004fc4:	b913      	cbnz	r3, 8004fcc <setvbuf+0x1c>
 8004fc6:	4630      	mov	r0, r6
 8004fc8:	f001 f896 	bl	80060f8 <__sinit>
 8004fcc:	4b4c      	ldr	r3, [pc, #304]	; (8005100 <setvbuf+0x150>)
 8004fce:	429c      	cmp	r4, r3
 8004fd0:	d152      	bne.n	8005078 <setvbuf+0xc8>
 8004fd2:	6874      	ldr	r4, [r6, #4]
 8004fd4:	f1b8 0f02 	cmp.w	r8, #2
 8004fd8:	d006      	beq.n	8004fe8 <setvbuf+0x38>
 8004fda:	f1b8 0f01 	cmp.w	r8, #1
 8004fde:	f200 8089 	bhi.w	80050f4 <setvbuf+0x144>
 8004fe2:	2d00      	cmp	r5, #0
 8004fe4:	f2c0 8086 	blt.w	80050f4 <setvbuf+0x144>
 8004fe8:	4621      	mov	r1, r4
 8004fea:	4630      	mov	r0, r6
 8004fec:	f001 f81a 	bl	8006024 <_fflush_r>
 8004ff0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ff2:	b141      	cbz	r1, 8005006 <setvbuf+0x56>
 8004ff4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ff8:	4299      	cmp	r1, r3
 8004ffa:	d002      	beq.n	8005002 <setvbuf+0x52>
 8004ffc:	4630      	mov	r0, r6
 8004ffe:	f001 fc73 	bl	80068e8 <_free_r>
 8005002:	2300      	movs	r3, #0
 8005004:	6363      	str	r3, [r4, #52]	; 0x34
 8005006:	2300      	movs	r3, #0
 8005008:	61a3      	str	r3, [r4, #24]
 800500a:	6063      	str	r3, [r4, #4]
 800500c:	89a3      	ldrh	r3, [r4, #12]
 800500e:	061b      	lsls	r3, r3, #24
 8005010:	d503      	bpl.n	800501a <setvbuf+0x6a>
 8005012:	6921      	ldr	r1, [r4, #16]
 8005014:	4630      	mov	r0, r6
 8005016:	f001 fc67 	bl	80068e8 <_free_r>
 800501a:	89a3      	ldrh	r3, [r4, #12]
 800501c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005020:	f023 0303 	bic.w	r3, r3, #3
 8005024:	f1b8 0f02 	cmp.w	r8, #2
 8005028:	81a3      	strh	r3, [r4, #12]
 800502a:	d05d      	beq.n	80050e8 <setvbuf+0x138>
 800502c:	ab01      	add	r3, sp, #4
 800502e:	466a      	mov	r2, sp
 8005030:	4621      	mov	r1, r4
 8005032:	4630      	mov	r0, r6
 8005034:	f001 f8f8 	bl	8006228 <__swhatbuf_r>
 8005038:	89a3      	ldrh	r3, [r4, #12]
 800503a:	4318      	orrs	r0, r3
 800503c:	81a0      	strh	r0, [r4, #12]
 800503e:	bb2d      	cbnz	r5, 800508c <setvbuf+0xdc>
 8005040:	9d00      	ldr	r5, [sp, #0]
 8005042:	4628      	mov	r0, r5
 8005044:	f001 f954 	bl	80062f0 <malloc>
 8005048:	4607      	mov	r7, r0
 800504a:	2800      	cmp	r0, #0
 800504c:	d14e      	bne.n	80050ec <setvbuf+0x13c>
 800504e:	f8dd 9000 	ldr.w	r9, [sp]
 8005052:	45a9      	cmp	r9, r5
 8005054:	d13c      	bne.n	80050d0 <setvbuf+0x120>
 8005056:	f04f 30ff 	mov.w	r0, #4294967295
 800505a:	89a3      	ldrh	r3, [r4, #12]
 800505c:	f043 0302 	orr.w	r3, r3, #2
 8005060:	81a3      	strh	r3, [r4, #12]
 8005062:	2300      	movs	r3, #0
 8005064:	60a3      	str	r3, [r4, #8]
 8005066:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800506a:	6023      	str	r3, [r4, #0]
 800506c:	6123      	str	r3, [r4, #16]
 800506e:	2301      	movs	r3, #1
 8005070:	6163      	str	r3, [r4, #20]
 8005072:	b003      	add	sp, #12
 8005074:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005078:	4b22      	ldr	r3, [pc, #136]	; (8005104 <setvbuf+0x154>)
 800507a:	429c      	cmp	r4, r3
 800507c:	d101      	bne.n	8005082 <setvbuf+0xd2>
 800507e:	68b4      	ldr	r4, [r6, #8]
 8005080:	e7a8      	b.n	8004fd4 <setvbuf+0x24>
 8005082:	4b21      	ldr	r3, [pc, #132]	; (8005108 <setvbuf+0x158>)
 8005084:	429c      	cmp	r4, r3
 8005086:	bf08      	it	eq
 8005088:	68f4      	ldreq	r4, [r6, #12]
 800508a:	e7a3      	b.n	8004fd4 <setvbuf+0x24>
 800508c:	2f00      	cmp	r7, #0
 800508e:	d0d8      	beq.n	8005042 <setvbuf+0x92>
 8005090:	69b3      	ldr	r3, [r6, #24]
 8005092:	b913      	cbnz	r3, 800509a <setvbuf+0xea>
 8005094:	4630      	mov	r0, r6
 8005096:	f001 f82f 	bl	80060f8 <__sinit>
 800509a:	f1b8 0f01 	cmp.w	r8, #1
 800509e:	bf08      	it	eq
 80050a0:	89a3      	ldrheq	r3, [r4, #12]
 80050a2:	6027      	str	r7, [r4, #0]
 80050a4:	bf04      	itt	eq
 80050a6:	f043 0301 	orreq.w	r3, r3, #1
 80050aa:	81a3      	strheq	r3, [r4, #12]
 80050ac:	89a3      	ldrh	r3, [r4, #12]
 80050ae:	f013 0008 	ands.w	r0, r3, #8
 80050b2:	e9c4 7504 	strd	r7, r5, [r4, #16]
 80050b6:	d01b      	beq.n	80050f0 <setvbuf+0x140>
 80050b8:	f013 0001 	ands.w	r0, r3, #1
 80050bc:	bf18      	it	ne
 80050be:	426d      	negne	r5, r5
 80050c0:	f04f 0300 	mov.w	r3, #0
 80050c4:	bf1d      	ittte	ne
 80050c6:	60a3      	strne	r3, [r4, #8]
 80050c8:	61a5      	strne	r5, [r4, #24]
 80050ca:	4618      	movne	r0, r3
 80050cc:	60a5      	streq	r5, [r4, #8]
 80050ce:	e7d0      	b.n	8005072 <setvbuf+0xc2>
 80050d0:	4648      	mov	r0, r9
 80050d2:	f001 f90d 	bl	80062f0 <malloc>
 80050d6:	4607      	mov	r7, r0
 80050d8:	2800      	cmp	r0, #0
 80050da:	d0bc      	beq.n	8005056 <setvbuf+0xa6>
 80050dc:	89a3      	ldrh	r3, [r4, #12]
 80050de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e2:	81a3      	strh	r3, [r4, #12]
 80050e4:	464d      	mov	r5, r9
 80050e6:	e7d3      	b.n	8005090 <setvbuf+0xe0>
 80050e8:	2000      	movs	r0, #0
 80050ea:	e7b6      	b.n	800505a <setvbuf+0xaa>
 80050ec:	46a9      	mov	r9, r5
 80050ee:	e7f5      	b.n	80050dc <setvbuf+0x12c>
 80050f0:	60a0      	str	r0, [r4, #8]
 80050f2:	e7be      	b.n	8005072 <setvbuf+0xc2>
 80050f4:	f04f 30ff 	mov.w	r0, #4294967295
 80050f8:	e7bb      	b.n	8005072 <setvbuf+0xc2>
 80050fa:	bf00      	nop
 80050fc:	2000000c 	.word	0x2000000c
 8005100:	08006f7c 	.word	0x08006f7c
 8005104:	08006f9c 	.word	0x08006f9c
 8005108:	08006f5c 	.word	0x08006f5c

0800510c <__swbuf_r>:
 800510c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510e:	460e      	mov	r6, r1
 8005110:	4614      	mov	r4, r2
 8005112:	4605      	mov	r5, r0
 8005114:	b118      	cbz	r0, 800511e <__swbuf_r+0x12>
 8005116:	6983      	ldr	r3, [r0, #24]
 8005118:	b90b      	cbnz	r3, 800511e <__swbuf_r+0x12>
 800511a:	f000 ffed 	bl	80060f8 <__sinit>
 800511e:	4b21      	ldr	r3, [pc, #132]	; (80051a4 <__swbuf_r+0x98>)
 8005120:	429c      	cmp	r4, r3
 8005122:	d12a      	bne.n	800517a <__swbuf_r+0x6e>
 8005124:	686c      	ldr	r4, [r5, #4]
 8005126:	69a3      	ldr	r3, [r4, #24]
 8005128:	60a3      	str	r3, [r4, #8]
 800512a:	89a3      	ldrh	r3, [r4, #12]
 800512c:	071a      	lsls	r2, r3, #28
 800512e:	d52e      	bpl.n	800518e <__swbuf_r+0x82>
 8005130:	6923      	ldr	r3, [r4, #16]
 8005132:	b363      	cbz	r3, 800518e <__swbuf_r+0x82>
 8005134:	6923      	ldr	r3, [r4, #16]
 8005136:	6820      	ldr	r0, [r4, #0]
 8005138:	1ac0      	subs	r0, r0, r3
 800513a:	6963      	ldr	r3, [r4, #20]
 800513c:	b2f6      	uxtb	r6, r6
 800513e:	4283      	cmp	r3, r0
 8005140:	4637      	mov	r7, r6
 8005142:	dc04      	bgt.n	800514e <__swbuf_r+0x42>
 8005144:	4621      	mov	r1, r4
 8005146:	4628      	mov	r0, r5
 8005148:	f000 ff6c 	bl	8006024 <_fflush_r>
 800514c:	bb28      	cbnz	r0, 800519a <__swbuf_r+0x8e>
 800514e:	68a3      	ldr	r3, [r4, #8]
 8005150:	3b01      	subs	r3, #1
 8005152:	60a3      	str	r3, [r4, #8]
 8005154:	6823      	ldr	r3, [r4, #0]
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	6022      	str	r2, [r4, #0]
 800515a:	701e      	strb	r6, [r3, #0]
 800515c:	6963      	ldr	r3, [r4, #20]
 800515e:	3001      	adds	r0, #1
 8005160:	4283      	cmp	r3, r0
 8005162:	d004      	beq.n	800516e <__swbuf_r+0x62>
 8005164:	89a3      	ldrh	r3, [r4, #12]
 8005166:	07db      	lsls	r3, r3, #31
 8005168:	d519      	bpl.n	800519e <__swbuf_r+0x92>
 800516a:	2e0a      	cmp	r6, #10
 800516c:	d117      	bne.n	800519e <__swbuf_r+0x92>
 800516e:	4621      	mov	r1, r4
 8005170:	4628      	mov	r0, r5
 8005172:	f000 ff57 	bl	8006024 <_fflush_r>
 8005176:	b190      	cbz	r0, 800519e <__swbuf_r+0x92>
 8005178:	e00f      	b.n	800519a <__swbuf_r+0x8e>
 800517a:	4b0b      	ldr	r3, [pc, #44]	; (80051a8 <__swbuf_r+0x9c>)
 800517c:	429c      	cmp	r4, r3
 800517e:	d101      	bne.n	8005184 <__swbuf_r+0x78>
 8005180:	68ac      	ldr	r4, [r5, #8]
 8005182:	e7d0      	b.n	8005126 <__swbuf_r+0x1a>
 8005184:	4b09      	ldr	r3, [pc, #36]	; (80051ac <__swbuf_r+0xa0>)
 8005186:	429c      	cmp	r4, r3
 8005188:	bf08      	it	eq
 800518a:	68ec      	ldreq	r4, [r5, #12]
 800518c:	e7cb      	b.n	8005126 <__swbuf_r+0x1a>
 800518e:	4621      	mov	r1, r4
 8005190:	4628      	mov	r0, r5
 8005192:	f000 f80d 	bl	80051b0 <__swsetup_r>
 8005196:	2800      	cmp	r0, #0
 8005198:	d0cc      	beq.n	8005134 <__swbuf_r+0x28>
 800519a:	f04f 37ff 	mov.w	r7, #4294967295
 800519e:	4638      	mov	r0, r7
 80051a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051a2:	bf00      	nop
 80051a4:	08006f7c 	.word	0x08006f7c
 80051a8:	08006f9c 	.word	0x08006f9c
 80051ac:	08006f5c 	.word	0x08006f5c

080051b0 <__swsetup_r>:
 80051b0:	4b32      	ldr	r3, [pc, #200]	; (800527c <__swsetup_r+0xcc>)
 80051b2:	b570      	push	{r4, r5, r6, lr}
 80051b4:	681d      	ldr	r5, [r3, #0]
 80051b6:	4606      	mov	r6, r0
 80051b8:	460c      	mov	r4, r1
 80051ba:	b125      	cbz	r5, 80051c6 <__swsetup_r+0x16>
 80051bc:	69ab      	ldr	r3, [r5, #24]
 80051be:	b913      	cbnz	r3, 80051c6 <__swsetup_r+0x16>
 80051c0:	4628      	mov	r0, r5
 80051c2:	f000 ff99 	bl	80060f8 <__sinit>
 80051c6:	4b2e      	ldr	r3, [pc, #184]	; (8005280 <__swsetup_r+0xd0>)
 80051c8:	429c      	cmp	r4, r3
 80051ca:	d10f      	bne.n	80051ec <__swsetup_r+0x3c>
 80051cc:	686c      	ldr	r4, [r5, #4]
 80051ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	0715      	lsls	r5, r2, #28
 80051d6:	d42c      	bmi.n	8005232 <__swsetup_r+0x82>
 80051d8:	06d0      	lsls	r0, r2, #27
 80051da:	d411      	bmi.n	8005200 <__swsetup_r+0x50>
 80051dc:	2209      	movs	r2, #9
 80051de:	6032      	str	r2, [r6, #0]
 80051e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051e4:	81a3      	strh	r3, [r4, #12]
 80051e6:	f04f 30ff 	mov.w	r0, #4294967295
 80051ea:	e03e      	b.n	800526a <__swsetup_r+0xba>
 80051ec:	4b25      	ldr	r3, [pc, #148]	; (8005284 <__swsetup_r+0xd4>)
 80051ee:	429c      	cmp	r4, r3
 80051f0:	d101      	bne.n	80051f6 <__swsetup_r+0x46>
 80051f2:	68ac      	ldr	r4, [r5, #8]
 80051f4:	e7eb      	b.n	80051ce <__swsetup_r+0x1e>
 80051f6:	4b24      	ldr	r3, [pc, #144]	; (8005288 <__swsetup_r+0xd8>)
 80051f8:	429c      	cmp	r4, r3
 80051fa:	bf08      	it	eq
 80051fc:	68ec      	ldreq	r4, [r5, #12]
 80051fe:	e7e6      	b.n	80051ce <__swsetup_r+0x1e>
 8005200:	0751      	lsls	r1, r2, #29
 8005202:	d512      	bpl.n	800522a <__swsetup_r+0x7a>
 8005204:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005206:	b141      	cbz	r1, 800521a <__swsetup_r+0x6a>
 8005208:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800520c:	4299      	cmp	r1, r3
 800520e:	d002      	beq.n	8005216 <__swsetup_r+0x66>
 8005210:	4630      	mov	r0, r6
 8005212:	f001 fb69 	bl	80068e8 <_free_r>
 8005216:	2300      	movs	r3, #0
 8005218:	6363      	str	r3, [r4, #52]	; 0x34
 800521a:	89a3      	ldrh	r3, [r4, #12]
 800521c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005220:	81a3      	strh	r3, [r4, #12]
 8005222:	2300      	movs	r3, #0
 8005224:	6063      	str	r3, [r4, #4]
 8005226:	6923      	ldr	r3, [r4, #16]
 8005228:	6023      	str	r3, [r4, #0]
 800522a:	89a3      	ldrh	r3, [r4, #12]
 800522c:	f043 0308 	orr.w	r3, r3, #8
 8005230:	81a3      	strh	r3, [r4, #12]
 8005232:	6923      	ldr	r3, [r4, #16]
 8005234:	b94b      	cbnz	r3, 800524a <__swsetup_r+0x9a>
 8005236:	89a3      	ldrh	r3, [r4, #12]
 8005238:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800523c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005240:	d003      	beq.n	800524a <__swsetup_r+0x9a>
 8005242:	4621      	mov	r1, r4
 8005244:	4630      	mov	r0, r6
 8005246:	f001 f813 	bl	8006270 <__smakebuf_r>
 800524a:	89a2      	ldrh	r2, [r4, #12]
 800524c:	f012 0301 	ands.w	r3, r2, #1
 8005250:	d00c      	beq.n	800526c <__swsetup_r+0xbc>
 8005252:	2300      	movs	r3, #0
 8005254:	60a3      	str	r3, [r4, #8]
 8005256:	6963      	ldr	r3, [r4, #20]
 8005258:	425b      	negs	r3, r3
 800525a:	61a3      	str	r3, [r4, #24]
 800525c:	6923      	ldr	r3, [r4, #16]
 800525e:	b953      	cbnz	r3, 8005276 <__swsetup_r+0xc6>
 8005260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005264:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005268:	d1ba      	bne.n	80051e0 <__swsetup_r+0x30>
 800526a:	bd70      	pop	{r4, r5, r6, pc}
 800526c:	0792      	lsls	r2, r2, #30
 800526e:	bf58      	it	pl
 8005270:	6963      	ldrpl	r3, [r4, #20]
 8005272:	60a3      	str	r3, [r4, #8]
 8005274:	e7f2      	b.n	800525c <__swsetup_r+0xac>
 8005276:	2000      	movs	r0, #0
 8005278:	e7f7      	b.n	800526a <__swsetup_r+0xba>
 800527a:	bf00      	nop
 800527c:	2000000c 	.word	0x2000000c
 8005280:	08006f7c 	.word	0x08006f7c
 8005284:	08006f9c 	.word	0x08006f9c
 8005288:	08006f5c 	.word	0x08006f5c

0800528c <quorem>:
 800528c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005290:	6903      	ldr	r3, [r0, #16]
 8005292:	690c      	ldr	r4, [r1, #16]
 8005294:	42a3      	cmp	r3, r4
 8005296:	4680      	mov	r8, r0
 8005298:	f2c0 8082 	blt.w	80053a0 <quorem+0x114>
 800529c:	3c01      	subs	r4, #1
 800529e:	f101 0714 	add.w	r7, r1, #20
 80052a2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80052a6:	f100 0614 	add.w	r6, r0, #20
 80052aa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80052ae:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80052b2:	eb06 030c 	add.w	r3, r6, ip
 80052b6:	3501      	adds	r5, #1
 80052b8:	eb07 090c 	add.w	r9, r7, ip
 80052bc:	9301      	str	r3, [sp, #4]
 80052be:	fbb0 f5f5 	udiv	r5, r0, r5
 80052c2:	b395      	cbz	r5, 800532a <quorem+0x9e>
 80052c4:	f04f 0a00 	mov.w	sl, #0
 80052c8:	4638      	mov	r0, r7
 80052ca:	46b6      	mov	lr, r6
 80052cc:	46d3      	mov	fp, sl
 80052ce:	f850 2b04 	ldr.w	r2, [r0], #4
 80052d2:	b293      	uxth	r3, r2
 80052d4:	fb05 a303 	mla	r3, r5, r3, sl
 80052d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80052dc:	b29b      	uxth	r3, r3
 80052de:	ebab 0303 	sub.w	r3, fp, r3
 80052e2:	0c12      	lsrs	r2, r2, #16
 80052e4:	f8de b000 	ldr.w	fp, [lr]
 80052e8:	fb05 a202 	mla	r2, r5, r2, sl
 80052ec:	fa13 f38b 	uxtah	r3, r3, fp
 80052f0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80052f4:	fa1f fb82 	uxth.w	fp, r2
 80052f8:	f8de 2000 	ldr.w	r2, [lr]
 80052fc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005300:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005304:	b29b      	uxth	r3, r3
 8005306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800530a:	4581      	cmp	r9, r0
 800530c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005310:	f84e 3b04 	str.w	r3, [lr], #4
 8005314:	d2db      	bcs.n	80052ce <quorem+0x42>
 8005316:	f856 300c 	ldr.w	r3, [r6, ip]
 800531a:	b933      	cbnz	r3, 800532a <quorem+0x9e>
 800531c:	9b01      	ldr	r3, [sp, #4]
 800531e:	3b04      	subs	r3, #4
 8005320:	429e      	cmp	r6, r3
 8005322:	461a      	mov	r2, r3
 8005324:	d330      	bcc.n	8005388 <quorem+0xfc>
 8005326:	f8c8 4010 	str.w	r4, [r8, #16]
 800532a:	4640      	mov	r0, r8
 800532c:	f001 fa08 	bl	8006740 <__mcmp>
 8005330:	2800      	cmp	r0, #0
 8005332:	db25      	blt.n	8005380 <quorem+0xf4>
 8005334:	3501      	adds	r5, #1
 8005336:	4630      	mov	r0, r6
 8005338:	f04f 0c00 	mov.w	ip, #0
 800533c:	f857 2b04 	ldr.w	r2, [r7], #4
 8005340:	f8d0 e000 	ldr.w	lr, [r0]
 8005344:	b293      	uxth	r3, r2
 8005346:	ebac 0303 	sub.w	r3, ip, r3
 800534a:	0c12      	lsrs	r2, r2, #16
 800534c:	fa13 f38e 	uxtah	r3, r3, lr
 8005350:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005354:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005358:	b29b      	uxth	r3, r3
 800535a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800535e:	45b9      	cmp	r9, r7
 8005360:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005364:	f840 3b04 	str.w	r3, [r0], #4
 8005368:	d2e8      	bcs.n	800533c <quorem+0xb0>
 800536a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800536e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005372:	b92a      	cbnz	r2, 8005380 <quorem+0xf4>
 8005374:	3b04      	subs	r3, #4
 8005376:	429e      	cmp	r6, r3
 8005378:	461a      	mov	r2, r3
 800537a:	d30b      	bcc.n	8005394 <quorem+0x108>
 800537c:	f8c8 4010 	str.w	r4, [r8, #16]
 8005380:	4628      	mov	r0, r5
 8005382:	b003      	add	sp, #12
 8005384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005388:	6812      	ldr	r2, [r2, #0]
 800538a:	3b04      	subs	r3, #4
 800538c:	2a00      	cmp	r2, #0
 800538e:	d1ca      	bne.n	8005326 <quorem+0x9a>
 8005390:	3c01      	subs	r4, #1
 8005392:	e7c5      	b.n	8005320 <quorem+0x94>
 8005394:	6812      	ldr	r2, [r2, #0]
 8005396:	3b04      	subs	r3, #4
 8005398:	2a00      	cmp	r2, #0
 800539a:	d1ef      	bne.n	800537c <quorem+0xf0>
 800539c:	3c01      	subs	r4, #1
 800539e:	e7ea      	b.n	8005376 <quorem+0xea>
 80053a0:	2000      	movs	r0, #0
 80053a2:	e7ee      	b.n	8005382 <quorem+0xf6>
 80053a4:	0000      	movs	r0, r0
	...

080053a8 <_dtoa_r>:
 80053a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ac:	ec57 6b10 	vmov	r6, r7, d0
 80053b0:	b097      	sub	sp, #92	; 0x5c
 80053b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80053b4:	9106      	str	r1, [sp, #24]
 80053b6:	4604      	mov	r4, r0
 80053b8:	920b      	str	r2, [sp, #44]	; 0x2c
 80053ba:	9312      	str	r3, [sp, #72]	; 0x48
 80053bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80053c0:	e9cd 6700 	strd	r6, r7, [sp]
 80053c4:	b93d      	cbnz	r5, 80053d6 <_dtoa_r+0x2e>
 80053c6:	2010      	movs	r0, #16
 80053c8:	f000 ff92 	bl	80062f0 <malloc>
 80053cc:	6260      	str	r0, [r4, #36]	; 0x24
 80053ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80053d2:	6005      	str	r5, [r0, #0]
 80053d4:	60c5      	str	r5, [r0, #12]
 80053d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053d8:	6819      	ldr	r1, [r3, #0]
 80053da:	b151      	cbz	r1, 80053f2 <_dtoa_r+0x4a>
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	604a      	str	r2, [r1, #4]
 80053e0:	2301      	movs	r3, #1
 80053e2:	4093      	lsls	r3, r2
 80053e4:	608b      	str	r3, [r1, #8]
 80053e6:	4620      	mov	r0, r4
 80053e8:	f000 ffc9 	bl	800637e <_Bfree>
 80053ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053ee:	2200      	movs	r2, #0
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	1e3b      	subs	r3, r7, #0
 80053f4:	bfbb      	ittet	lt
 80053f6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80053fa:	9301      	strlt	r3, [sp, #4]
 80053fc:	2300      	movge	r3, #0
 80053fe:	2201      	movlt	r2, #1
 8005400:	bfac      	ite	ge
 8005402:	f8c8 3000 	strge.w	r3, [r8]
 8005406:	f8c8 2000 	strlt.w	r2, [r8]
 800540a:	4baf      	ldr	r3, [pc, #700]	; (80056c8 <_dtoa_r+0x320>)
 800540c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005410:	ea33 0308 	bics.w	r3, r3, r8
 8005414:	d114      	bne.n	8005440 <_dtoa_r+0x98>
 8005416:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005418:	f242 730f 	movw	r3, #9999	; 0x270f
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	9b00      	ldr	r3, [sp, #0]
 8005420:	b923      	cbnz	r3, 800542c <_dtoa_r+0x84>
 8005422:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005426:	2800      	cmp	r0, #0
 8005428:	f000 8542 	beq.w	8005eb0 <_dtoa_r+0xb08>
 800542c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800542e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80056dc <_dtoa_r+0x334>
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 8544 	beq.w	8005ec0 <_dtoa_r+0xb18>
 8005438:	f10b 0303 	add.w	r3, fp, #3
 800543c:	f000 bd3e 	b.w	8005ebc <_dtoa_r+0xb14>
 8005440:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005444:	2200      	movs	r2, #0
 8005446:	2300      	movs	r3, #0
 8005448:	4630      	mov	r0, r6
 800544a:	4639      	mov	r1, r7
 800544c:	f7fb fb4c 	bl	8000ae8 <__aeabi_dcmpeq>
 8005450:	4681      	mov	r9, r0
 8005452:	b168      	cbz	r0, 8005470 <_dtoa_r+0xc8>
 8005454:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005456:	2301      	movs	r3, #1
 8005458:	6013      	str	r3, [r2, #0]
 800545a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 8524 	beq.w	8005eaa <_dtoa_r+0xb02>
 8005462:	4b9a      	ldr	r3, [pc, #616]	; (80056cc <_dtoa_r+0x324>)
 8005464:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005466:	f103 3bff 	add.w	fp, r3, #4294967295
 800546a:	6013      	str	r3, [r2, #0]
 800546c:	f000 bd28 	b.w	8005ec0 <_dtoa_r+0xb18>
 8005470:	aa14      	add	r2, sp, #80	; 0x50
 8005472:	a915      	add	r1, sp, #84	; 0x54
 8005474:	ec47 6b10 	vmov	d0, r6, r7
 8005478:	4620      	mov	r0, r4
 800547a:	f001 f9d8 	bl	800682e <__d2b>
 800547e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005482:	9004      	str	r0, [sp, #16]
 8005484:	2d00      	cmp	r5, #0
 8005486:	d07c      	beq.n	8005582 <_dtoa_r+0x1da>
 8005488:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800548c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005490:	46b2      	mov	sl, r6
 8005492:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005496:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800549a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800549e:	2200      	movs	r2, #0
 80054a0:	4b8b      	ldr	r3, [pc, #556]	; (80056d0 <_dtoa_r+0x328>)
 80054a2:	4650      	mov	r0, sl
 80054a4:	4659      	mov	r1, fp
 80054a6:	f7fa feff 	bl	80002a8 <__aeabi_dsub>
 80054aa:	a381      	add	r3, pc, #516	; (adr r3, 80056b0 <_dtoa_r+0x308>)
 80054ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b0:	f7fb f8b2 	bl	8000618 <__aeabi_dmul>
 80054b4:	a380      	add	r3, pc, #512	; (adr r3, 80056b8 <_dtoa_r+0x310>)
 80054b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ba:	f7fa fef7 	bl	80002ac <__adddf3>
 80054be:	4606      	mov	r6, r0
 80054c0:	4628      	mov	r0, r5
 80054c2:	460f      	mov	r7, r1
 80054c4:	f7fb f83e 	bl	8000544 <__aeabi_i2d>
 80054c8:	a37d      	add	r3, pc, #500	; (adr r3, 80056c0 <_dtoa_r+0x318>)
 80054ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ce:	f7fb f8a3 	bl	8000618 <__aeabi_dmul>
 80054d2:	4602      	mov	r2, r0
 80054d4:	460b      	mov	r3, r1
 80054d6:	4630      	mov	r0, r6
 80054d8:	4639      	mov	r1, r7
 80054da:	f7fa fee7 	bl	80002ac <__adddf3>
 80054de:	4606      	mov	r6, r0
 80054e0:	460f      	mov	r7, r1
 80054e2:	f7fb fb49 	bl	8000b78 <__aeabi_d2iz>
 80054e6:	2200      	movs	r2, #0
 80054e8:	4682      	mov	sl, r0
 80054ea:	2300      	movs	r3, #0
 80054ec:	4630      	mov	r0, r6
 80054ee:	4639      	mov	r1, r7
 80054f0:	f7fb fb04 	bl	8000afc <__aeabi_dcmplt>
 80054f4:	b148      	cbz	r0, 800550a <_dtoa_r+0x162>
 80054f6:	4650      	mov	r0, sl
 80054f8:	f7fb f824 	bl	8000544 <__aeabi_i2d>
 80054fc:	4632      	mov	r2, r6
 80054fe:	463b      	mov	r3, r7
 8005500:	f7fb faf2 	bl	8000ae8 <__aeabi_dcmpeq>
 8005504:	b908      	cbnz	r0, 800550a <_dtoa_r+0x162>
 8005506:	f10a 3aff 	add.w	sl, sl, #4294967295
 800550a:	f1ba 0f16 	cmp.w	sl, #22
 800550e:	d859      	bhi.n	80055c4 <_dtoa_r+0x21c>
 8005510:	4970      	ldr	r1, [pc, #448]	; (80056d4 <_dtoa_r+0x32c>)
 8005512:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005516:	e9dd 2300 	ldrd	r2, r3, [sp]
 800551a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800551e:	f7fb fb0b 	bl	8000b38 <__aeabi_dcmpgt>
 8005522:	2800      	cmp	r0, #0
 8005524:	d050      	beq.n	80055c8 <_dtoa_r+0x220>
 8005526:	f10a 3aff 	add.w	sl, sl, #4294967295
 800552a:	2300      	movs	r3, #0
 800552c:	930f      	str	r3, [sp, #60]	; 0x3c
 800552e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005530:	1b5d      	subs	r5, r3, r5
 8005532:	f1b5 0801 	subs.w	r8, r5, #1
 8005536:	bf49      	itett	mi
 8005538:	f1c5 0301 	rsbmi	r3, r5, #1
 800553c:	2300      	movpl	r3, #0
 800553e:	9305      	strmi	r3, [sp, #20]
 8005540:	f04f 0800 	movmi.w	r8, #0
 8005544:	bf58      	it	pl
 8005546:	9305      	strpl	r3, [sp, #20]
 8005548:	f1ba 0f00 	cmp.w	sl, #0
 800554c:	db3e      	blt.n	80055cc <_dtoa_r+0x224>
 800554e:	2300      	movs	r3, #0
 8005550:	44d0      	add	r8, sl
 8005552:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005556:	9307      	str	r3, [sp, #28]
 8005558:	9b06      	ldr	r3, [sp, #24]
 800555a:	2b09      	cmp	r3, #9
 800555c:	f200 8090 	bhi.w	8005680 <_dtoa_r+0x2d8>
 8005560:	2b05      	cmp	r3, #5
 8005562:	bfc4      	itt	gt
 8005564:	3b04      	subgt	r3, #4
 8005566:	9306      	strgt	r3, [sp, #24]
 8005568:	9b06      	ldr	r3, [sp, #24]
 800556a:	f1a3 0302 	sub.w	r3, r3, #2
 800556e:	bfcc      	ite	gt
 8005570:	2500      	movgt	r5, #0
 8005572:	2501      	movle	r5, #1
 8005574:	2b03      	cmp	r3, #3
 8005576:	f200 808f 	bhi.w	8005698 <_dtoa_r+0x2f0>
 800557a:	e8df f003 	tbb	[pc, r3]
 800557e:	7f7d      	.short	0x7f7d
 8005580:	7131      	.short	0x7131
 8005582:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005586:	441d      	add	r5, r3
 8005588:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800558c:	2820      	cmp	r0, #32
 800558e:	dd13      	ble.n	80055b8 <_dtoa_r+0x210>
 8005590:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005594:	9b00      	ldr	r3, [sp, #0]
 8005596:	fa08 f800 	lsl.w	r8, r8, r0
 800559a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800559e:	fa23 f000 	lsr.w	r0, r3, r0
 80055a2:	ea48 0000 	orr.w	r0, r8, r0
 80055a6:	f7fa ffbd 	bl	8000524 <__aeabi_ui2d>
 80055aa:	2301      	movs	r3, #1
 80055ac:	4682      	mov	sl, r0
 80055ae:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80055b2:	3d01      	subs	r5, #1
 80055b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80055b6:	e772      	b.n	800549e <_dtoa_r+0xf6>
 80055b8:	9b00      	ldr	r3, [sp, #0]
 80055ba:	f1c0 0020 	rsb	r0, r0, #32
 80055be:	fa03 f000 	lsl.w	r0, r3, r0
 80055c2:	e7f0      	b.n	80055a6 <_dtoa_r+0x1fe>
 80055c4:	2301      	movs	r3, #1
 80055c6:	e7b1      	b.n	800552c <_dtoa_r+0x184>
 80055c8:	900f      	str	r0, [sp, #60]	; 0x3c
 80055ca:	e7b0      	b.n	800552e <_dtoa_r+0x186>
 80055cc:	9b05      	ldr	r3, [sp, #20]
 80055ce:	eba3 030a 	sub.w	r3, r3, sl
 80055d2:	9305      	str	r3, [sp, #20]
 80055d4:	f1ca 0300 	rsb	r3, sl, #0
 80055d8:	9307      	str	r3, [sp, #28]
 80055da:	2300      	movs	r3, #0
 80055dc:	930e      	str	r3, [sp, #56]	; 0x38
 80055de:	e7bb      	b.n	8005558 <_dtoa_r+0x1b0>
 80055e0:	2301      	movs	r3, #1
 80055e2:	930a      	str	r3, [sp, #40]	; 0x28
 80055e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	dd59      	ble.n	800569e <_dtoa_r+0x2f6>
 80055ea:	9302      	str	r3, [sp, #8]
 80055ec:	4699      	mov	r9, r3
 80055ee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80055f0:	2200      	movs	r2, #0
 80055f2:	6072      	str	r2, [r6, #4]
 80055f4:	2204      	movs	r2, #4
 80055f6:	f102 0014 	add.w	r0, r2, #20
 80055fa:	4298      	cmp	r0, r3
 80055fc:	6871      	ldr	r1, [r6, #4]
 80055fe:	d953      	bls.n	80056a8 <_dtoa_r+0x300>
 8005600:	4620      	mov	r0, r4
 8005602:	f000 fe88 	bl	8006316 <_Balloc>
 8005606:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005608:	6030      	str	r0, [r6, #0]
 800560a:	f1b9 0f0e 	cmp.w	r9, #14
 800560e:	f8d3 b000 	ldr.w	fp, [r3]
 8005612:	f200 80e6 	bhi.w	80057e2 <_dtoa_r+0x43a>
 8005616:	2d00      	cmp	r5, #0
 8005618:	f000 80e3 	beq.w	80057e2 <_dtoa_r+0x43a>
 800561c:	ed9d 7b00 	vldr	d7, [sp]
 8005620:	f1ba 0f00 	cmp.w	sl, #0
 8005624:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005628:	dd74      	ble.n	8005714 <_dtoa_r+0x36c>
 800562a:	4a2a      	ldr	r2, [pc, #168]	; (80056d4 <_dtoa_r+0x32c>)
 800562c:	f00a 030f 	and.w	r3, sl, #15
 8005630:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005634:	ed93 7b00 	vldr	d7, [r3]
 8005638:	ea4f 162a 	mov.w	r6, sl, asr #4
 800563c:	06f0      	lsls	r0, r6, #27
 800563e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005642:	d565      	bpl.n	8005710 <_dtoa_r+0x368>
 8005644:	4b24      	ldr	r3, [pc, #144]	; (80056d8 <_dtoa_r+0x330>)
 8005646:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800564a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800564e:	f7fb f90d 	bl	800086c <__aeabi_ddiv>
 8005652:	e9cd 0100 	strd	r0, r1, [sp]
 8005656:	f006 060f 	and.w	r6, r6, #15
 800565a:	2503      	movs	r5, #3
 800565c:	4f1e      	ldr	r7, [pc, #120]	; (80056d8 <_dtoa_r+0x330>)
 800565e:	e04c      	b.n	80056fa <_dtoa_r+0x352>
 8005660:	2301      	movs	r3, #1
 8005662:	930a      	str	r3, [sp, #40]	; 0x28
 8005664:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005666:	4453      	add	r3, sl
 8005668:	f103 0901 	add.w	r9, r3, #1
 800566c:	9302      	str	r3, [sp, #8]
 800566e:	464b      	mov	r3, r9
 8005670:	2b01      	cmp	r3, #1
 8005672:	bfb8      	it	lt
 8005674:	2301      	movlt	r3, #1
 8005676:	e7ba      	b.n	80055ee <_dtoa_r+0x246>
 8005678:	2300      	movs	r3, #0
 800567a:	e7b2      	b.n	80055e2 <_dtoa_r+0x23a>
 800567c:	2300      	movs	r3, #0
 800567e:	e7f0      	b.n	8005662 <_dtoa_r+0x2ba>
 8005680:	2501      	movs	r5, #1
 8005682:	2300      	movs	r3, #0
 8005684:	9306      	str	r3, [sp, #24]
 8005686:	950a      	str	r5, [sp, #40]	; 0x28
 8005688:	f04f 33ff 	mov.w	r3, #4294967295
 800568c:	9302      	str	r3, [sp, #8]
 800568e:	4699      	mov	r9, r3
 8005690:	2200      	movs	r2, #0
 8005692:	2312      	movs	r3, #18
 8005694:	920b      	str	r2, [sp, #44]	; 0x2c
 8005696:	e7aa      	b.n	80055ee <_dtoa_r+0x246>
 8005698:	2301      	movs	r3, #1
 800569a:	930a      	str	r3, [sp, #40]	; 0x28
 800569c:	e7f4      	b.n	8005688 <_dtoa_r+0x2e0>
 800569e:	2301      	movs	r3, #1
 80056a0:	9302      	str	r3, [sp, #8]
 80056a2:	4699      	mov	r9, r3
 80056a4:	461a      	mov	r2, r3
 80056a6:	e7f5      	b.n	8005694 <_dtoa_r+0x2ec>
 80056a8:	3101      	adds	r1, #1
 80056aa:	6071      	str	r1, [r6, #4]
 80056ac:	0052      	lsls	r2, r2, #1
 80056ae:	e7a2      	b.n	80055f6 <_dtoa_r+0x24e>
 80056b0:	636f4361 	.word	0x636f4361
 80056b4:	3fd287a7 	.word	0x3fd287a7
 80056b8:	8b60c8b3 	.word	0x8b60c8b3
 80056bc:	3fc68a28 	.word	0x3fc68a28
 80056c0:	509f79fb 	.word	0x509f79fb
 80056c4:	3fd34413 	.word	0x3fd34413
 80056c8:	7ff00000 	.word	0x7ff00000
 80056cc:	08006f29 	.word	0x08006f29
 80056d0:	3ff80000 	.word	0x3ff80000
 80056d4:	08006fe8 	.word	0x08006fe8
 80056d8:	08006fc0 	.word	0x08006fc0
 80056dc:	08006f55 	.word	0x08006f55
 80056e0:	07f1      	lsls	r1, r6, #31
 80056e2:	d508      	bpl.n	80056f6 <_dtoa_r+0x34e>
 80056e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80056e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056ec:	f7fa ff94 	bl	8000618 <__aeabi_dmul>
 80056f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80056f4:	3501      	adds	r5, #1
 80056f6:	1076      	asrs	r6, r6, #1
 80056f8:	3708      	adds	r7, #8
 80056fa:	2e00      	cmp	r6, #0
 80056fc:	d1f0      	bne.n	80056e0 <_dtoa_r+0x338>
 80056fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005702:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005706:	f7fb f8b1 	bl	800086c <__aeabi_ddiv>
 800570a:	e9cd 0100 	strd	r0, r1, [sp]
 800570e:	e01a      	b.n	8005746 <_dtoa_r+0x39e>
 8005710:	2502      	movs	r5, #2
 8005712:	e7a3      	b.n	800565c <_dtoa_r+0x2b4>
 8005714:	f000 80a0 	beq.w	8005858 <_dtoa_r+0x4b0>
 8005718:	f1ca 0600 	rsb	r6, sl, #0
 800571c:	4b9f      	ldr	r3, [pc, #636]	; (800599c <_dtoa_r+0x5f4>)
 800571e:	4fa0      	ldr	r7, [pc, #640]	; (80059a0 <_dtoa_r+0x5f8>)
 8005720:	f006 020f 	and.w	r2, r6, #15
 8005724:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005730:	f7fa ff72 	bl	8000618 <__aeabi_dmul>
 8005734:	e9cd 0100 	strd	r0, r1, [sp]
 8005738:	1136      	asrs	r6, r6, #4
 800573a:	2300      	movs	r3, #0
 800573c:	2502      	movs	r5, #2
 800573e:	2e00      	cmp	r6, #0
 8005740:	d17f      	bne.n	8005842 <_dtoa_r+0x49a>
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1e1      	bne.n	800570a <_dtoa_r+0x362>
 8005746:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 8087 	beq.w	800585c <_dtoa_r+0x4b4>
 800574e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005752:	2200      	movs	r2, #0
 8005754:	4b93      	ldr	r3, [pc, #588]	; (80059a4 <_dtoa_r+0x5fc>)
 8005756:	4630      	mov	r0, r6
 8005758:	4639      	mov	r1, r7
 800575a:	f7fb f9cf 	bl	8000afc <__aeabi_dcmplt>
 800575e:	2800      	cmp	r0, #0
 8005760:	d07c      	beq.n	800585c <_dtoa_r+0x4b4>
 8005762:	f1b9 0f00 	cmp.w	r9, #0
 8005766:	d079      	beq.n	800585c <_dtoa_r+0x4b4>
 8005768:	9b02      	ldr	r3, [sp, #8]
 800576a:	2b00      	cmp	r3, #0
 800576c:	dd35      	ble.n	80057da <_dtoa_r+0x432>
 800576e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005772:	9308      	str	r3, [sp, #32]
 8005774:	4639      	mov	r1, r7
 8005776:	2200      	movs	r2, #0
 8005778:	4b8b      	ldr	r3, [pc, #556]	; (80059a8 <_dtoa_r+0x600>)
 800577a:	4630      	mov	r0, r6
 800577c:	f7fa ff4c 	bl	8000618 <__aeabi_dmul>
 8005780:	e9cd 0100 	strd	r0, r1, [sp]
 8005784:	9f02      	ldr	r7, [sp, #8]
 8005786:	3501      	adds	r5, #1
 8005788:	4628      	mov	r0, r5
 800578a:	f7fa fedb 	bl	8000544 <__aeabi_i2d>
 800578e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005792:	f7fa ff41 	bl	8000618 <__aeabi_dmul>
 8005796:	2200      	movs	r2, #0
 8005798:	4b84      	ldr	r3, [pc, #528]	; (80059ac <_dtoa_r+0x604>)
 800579a:	f7fa fd87 	bl	80002ac <__adddf3>
 800579e:	4605      	mov	r5, r0
 80057a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80057a4:	2f00      	cmp	r7, #0
 80057a6:	d15d      	bne.n	8005864 <_dtoa_r+0x4bc>
 80057a8:	2200      	movs	r2, #0
 80057aa:	4b81      	ldr	r3, [pc, #516]	; (80059b0 <_dtoa_r+0x608>)
 80057ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057b0:	f7fa fd7a 	bl	80002a8 <__aeabi_dsub>
 80057b4:	462a      	mov	r2, r5
 80057b6:	4633      	mov	r3, r6
 80057b8:	e9cd 0100 	strd	r0, r1, [sp]
 80057bc:	f7fb f9bc 	bl	8000b38 <__aeabi_dcmpgt>
 80057c0:	2800      	cmp	r0, #0
 80057c2:	f040 8288 	bne.w	8005cd6 <_dtoa_r+0x92e>
 80057c6:	462a      	mov	r2, r5
 80057c8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80057cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057d0:	f7fb f994 	bl	8000afc <__aeabi_dcmplt>
 80057d4:	2800      	cmp	r0, #0
 80057d6:	f040 827c 	bne.w	8005cd2 <_dtoa_r+0x92a>
 80057da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80057de:	e9cd 2300 	strd	r2, r3, [sp]
 80057e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f2c0 8150 	blt.w	8005a8a <_dtoa_r+0x6e2>
 80057ea:	f1ba 0f0e 	cmp.w	sl, #14
 80057ee:	f300 814c 	bgt.w	8005a8a <_dtoa_r+0x6e2>
 80057f2:	4b6a      	ldr	r3, [pc, #424]	; (800599c <_dtoa_r+0x5f4>)
 80057f4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80057f8:	ed93 7b00 	vldr	d7, [r3]
 80057fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057fe:	2b00      	cmp	r3, #0
 8005800:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005804:	f280 80d8 	bge.w	80059b8 <_dtoa_r+0x610>
 8005808:	f1b9 0f00 	cmp.w	r9, #0
 800580c:	f300 80d4 	bgt.w	80059b8 <_dtoa_r+0x610>
 8005810:	f040 825e 	bne.w	8005cd0 <_dtoa_r+0x928>
 8005814:	2200      	movs	r2, #0
 8005816:	4b66      	ldr	r3, [pc, #408]	; (80059b0 <_dtoa_r+0x608>)
 8005818:	ec51 0b17 	vmov	r0, r1, d7
 800581c:	f7fa fefc 	bl	8000618 <__aeabi_dmul>
 8005820:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005824:	f7fb f97e 	bl	8000b24 <__aeabi_dcmpge>
 8005828:	464f      	mov	r7, r9
 800582a:	464e      	mov	r6, r9
 800582c:	2800      	cmp	r0, #0
 800582e:	f040 8234 	bne.w	8005c9a <_dtoa_r+0x8f2>
 8005832:	2331      	movs	r3, #49	; 0x31
 8005834:	f10b 0501 	add.w	r5, fp, #1
 8005838:	f88b 3000 	strb.w	r3, [fp]
 800583c:	f10a 0a01 	add.w	sl, sl, #1
 8005840:	e22f      	b.n	8005ca2 <_dtoa_r+0x8fa>
 8005842:	07f2      	lsls	r2, r6, #31
 8005844:	d505      	bpl.n	8005852 <_dtoa_r+0x4aa>
 8005846:	e9d7 2300 	ldrd	r2, r3, [r7]
 800584a:	f7fa fee5 	bl	8000618 <__aeabi_dmul>
 800584e:	3501      	adds	r5, #1
 8005850:	2301      	movs	r3, #1
 8005852:	1076      	asrs	r6, r6, #1
 8005854:	3708      	adds	r7, #8
 8005856:	e772      	b.n	800573e <_dtoa_r+0x396>
 8005858:	2502      	movs	r5, #2
 800585a:	e774      	b.n	8005746 <_dtoa_r+0x39e>
 800585c:	f8cd a020 	str.w	sl, [sp, #32]
 8005860:	464f      	mov	r7, r9
 8005862:	e791      	b.n	8005788 <_dtoa_r+0x3e0>
 8005864:	4b4d      	ldr	r3, [pc, #308]	; (800599c <_dtoa_r+0x5f4>)
 8005866:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800586a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800586e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005870:	2b00      	cmp	r3, #0
 8005872:	d047      	beq.n	8005904 <_dtoa_r+0x55c>
 8005874:	4602      	mov	r2, r0
 8005876:	460b      	mov	r3, r1
 8005878:	2000      	movs	r0, #0
 800587a:	494e      	ldr	r1, [pc, #312]	; (80059b4 <_dtoa_r+0x60c>)
 800587c:	f7fa fff6 	bl	800086c <__aeabi_ddiv>
 8005880:	462a      	mov	r2, r5
 8005882:	4633      	mov	r3, r6
 8005884:	f7fa fd10 	bl	80002a8 <__aeabi_dsub>
 8005888:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800588c:	465d      	mov	r5, fp
 800588e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005892:	f7fb f971 	bl	8000b78 <__aeabi_d2iz>
 8005896:	4606      	mov	r6, r0
 8005898:	f7fa fe54 	bl	8000544 <__aeabi_i2d>
 800589c:	4602      	mov	r2, r0
 800589e:	460b      	mov	r3, r1
 80058a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058a4:	f7fa fd00 	bl	80002a8 <__aeabi_dsub>
 80058a8:	3630      	adds	r6, #48	; 0x30
 80058aa:	f805 6b01 	strb.w	r6, [r5], #1
 80058ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80058b2:	e9cd 0100 	strd	r0, r1, [sp]
 80058b6:	f7fb f921 	bl	8000afc <__aeabi_dcmplt>
 80058ba:	2800      	cmp	r0, #0
 80058bc:	d163      	bne.n	8005986 <_dtoa_r+0x5de>
 80058be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058c2:	2000      	movs	r0, #0
 80058c4:	4937      	ldr	r1, [pc, #220]	; (80059a4 <_dtoa_r+0x5fc>)
 80058c6:	f7fa fcef 	bl	80002a8 <__aeabi_dsub>
 80058ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80058ce:	f7fb f915 	bl	8000afc <__aeabi_dcmplt>
 80058d2:	2800      	cmp	r0, #0
 80058d4:	f040 80b7 	bne.w	8005a46 <_dtoa_r+0x69e>
 80058d8:	eba5 030b 	sub.w	r3, r5, fp
 80058dc:	429f      	cmp	r7, r3
 80058de:	f77f af7c 	ble.w	80057da <_dtoa_r+0x432>
 80058e2:	2200      	movs	r2, #0
 80058e4:	4b30      	ldr	r3, [pc, #192]	; (80059a8 <_dtoa_r+0x600>)
 80058e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058ea:	f7fa fe95 	bl	8000618 <__aeabi_dmul>
 80058ee:	2200      	movs	r2, #0
 80058f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80058f4:	4b2c      	ldr	r3, [pc, #176]	; (80059a8 <_dtoa_r+0x600>)
 80058f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058fa:	f7fa fe8d 	bl	8000618 <__aeabi_dmul>
 80058fe:	e9cd 0100 	strd	r0, r1, [sp]
 8005902:	e7c4      	b.n	800588e <_dtoa_r+0x4e6>
 8005904:	462a      	mov	r2, r5
 8005906:	4633      	mov	r3, r6
 8005908:	f7fa fe86 	bl	8000618 <__aeabi_dmul>
 800590c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005910:	eb0b 0507 	add.w	r5, fp, r7
 8005914:	465e      	mov	r6, fp
 8005916:	e9dd 0100 	ldrd	r0, r1, [sp]
 800591a:	f7fb f92d 	bl	8000b78 <__aeabi_d2iz>
 800591e:	4607      	mov	r7, r0
 8005920:	f7fa fe10 	bl	8000544 <__aeabi_i2d>
 8005924:	3730      	adds	r7, #48	; 0x30
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800592e:	f7fa fcbb 	bl	80002a8 <__aeabi_dsub>
 8005932:	f806 7b01 	strb.w	r7, [r6], #1
 8005936:	42ae      	cmp	r6, r5
 8005938:	e9cd 0100 	strd	r0, r1, [sp]
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	d126      	bne.n	8005990 <_dtoa_r+0x5e8>
 8005942:	4b1c      	ldr	r3, [pc, #112]	; (80059b4 <_dtoa_r+0x60c>)
 8005944:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005948:	f7fa fcb0 	bl	80002ac <__adddf3>
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005954:	f7fb f8f0 	bl	8000b38 <__aeabi_dcmpgt>
 8005958:	2800      	cmp	r0, #0
 800595a:	d174      	bne.n	8005a46 <_dtoa_r+0x69e>
 800595c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005960:	2000      	movs	r0, #0
 8005962:	4914      	ldr	r1, [pc, #80]	; (80059b4 <_dtoa_r+0x60c>)
 8005964:	f7fa fca0 	bl	80002a8 <__aeabi_dsub>
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005970:	f7fb f8c4 	bl	8000afc <__aeabi_dcmplt>
 8005974:	2800      	cmp	r0, #0
 8005976:	f43f af30 	beq.w	80057da <_dtoa_r+0x432>
 800597a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800597e:	2b30      	cmp	r3, #48	; 0x30
 8005980:	f105 32ff 	add.w	r2, r5, #4294967295
 8005984:	d002      	beq.n	800598c <_dtoa_r+0x5e4>
 8005986:	f8dd a020 	ldr.w	sl, [sp, #32]
 800598a:	e04a      	b.n	8005a22 <_dtoa_r+0x67a>
 800598c:	4615      	mov	r5, r2
 800598e:	e7f4      	b.n	800597a <_dtoa_r+0x5d2>
 8005990:	4b05      	ldr	r3, [pc, #20]	; (80059a8 <_dtoa_r+0x600>)
 8005992:	f7fa fe41 	bl	8000618 <__aeabi_dmul>
 8005996:	e9cd 0100 	strd	r0, r1, [sp]
 800599a:	e7bc      	b.n	8005916 <_dtoa_r+0x56e>
 800599c:	08006fe8 	.word	0x08006fe8
 80059a0:	08006fc0 	.word	0x08006fc0
 80059a4:	3ff00000 	.word	0x3ff00000
 80059a8:	40240000 	.word	0x40240000
 80059ac:	401c0000 	.word	0x401c0000
 80059b0:	40140000 	.word	0x40140000
 80059b4:	3fe00000 	.word	0x3fe00000
 80059b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80059bc:	465d      	mov	r5, fp
 80059be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059c2:	4630      	mov	r0, r6
 80059c4:	4639      	mov	r1, r7
 80059c6:	f7fa ff51 	bl	800086c <__aeabi_ddiv>
 80059ca:	f7fb f8d5 	bl	8000b78 <__aeabi_d2iz>
 80059ce:	4680      	mov	r8, r0
 80059d0:	f7fa fdb8 	bl	8000544 <__aeabi_i2d>
 80059d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059d8:	f7fa fe1e 	bl	8000618 <__aeabi_dmul>
 80059dc:	4602      	mov	r2, r0
 80059de:	460b      	mov	r3, r1
 80059e0:	4630      	mov	r0, r6
 80059e2:	4639      	mov	r1, r7
 80059e4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80059e8:	f7fa fc5e 	bl	80002a8 <__aeabi_dsub>
 80059ec:	f805 6b01 	strb.w	r6, [r5], #1
 80059f0:	eba5 060b 	sub.w	r6, r5, fp
 80059f4:	45b1      	cmp	r9, r6
 80059f6:	4602      	mov	r2, r0
 80059f8:	460b      	mov	r3, r1
 80059fa:	d139      	bne.n	8005a70 <_dtoa_r+0x6c8>
 80059fc:	f7fa fc56 	bl	80002ac <__adddf3>
 8005a00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a04:	4606      	mov	r6, r0
 8005a06:	460f      	mov	r7, r1
 8005a08:	f7fb f896 	bl	8000b38 <__aeabi_dcmpgt>
 8005a0c:	b9c8      	cbnz	r0, 8005a42 <_dtoa_r+0x69a>
 8005a0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a12:	4630      	mov	r0, r6
 8005a14:	4639      	mov	r1, r7
 8005a16:	f7fb f867 	bl	8000ae8 <__aeabi_dcmpeq>
 8005a1a:	b110      	cbz	r0, 8005a22 <_dtoa_r+0x67a>
 8005a1c:	f018 0f01 	tst.w	r8, #1
 8005a20:	d10f      	bne.n	8005a42 <_dtoa_r+0x69a>
 8005a22:	9904      	ldr	r1, [sp, #16]
 8005a24:	4620      	mov	r0, r4
 8005a26:	f000 fcaa 	bl	800637e <_Bfree>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a2e:	702b      	strb	r3, [r5, #0]
 8005a30:	f10a 0301 	add.w	r3, sl, #1
 8005a34:	6013      	str	r3, [r2, #0]
 8005a36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 8241 	beq.w	8005ec0 <_dtoa_r+0xb18>
 8005a3e:	601d      	str	r5, [r3, #0]
 8005a40:	e23e      	b.n	8005ec0 <_dtoa_r+0xb18>
 8005a42:	f8cd a020 	str.w	sl, [sp, #32]
 8005a46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005a4a:	2a39      	cmp	r2, #57	; 0x39
 8005a4c:	f105 33ff 	add.w	r3, r5, #4294967295
 8005a50:	d108      	bne.n	8005a64 <_dtoa_r+0x6bc>
 8005a52:	459b      	cmp	fp, r3
 8005a54:	d10a      	bne.n	8005a6c <_dtoa_r+0x6c4>
 8005a56:	9b08      	ldr	r3, [sp, #32]
 8005a58:	3301      	adds	r3, #1
 8005a5a:	9308      	str	r3, [sp, #32]
 8005a5c:	2330      	movs	r3, #48	; 0x30
 8005a5e:	f88b 3000 	strb.w	r3, [fp]
 8005a62:	465b      	mov	r3, fp
 8005a64:	781a      	ldrb	r2, [r3, #0]
 8005a66:	3201      	adds	r2, #1
 8005a68:	701a      	strb	r2, [r3, #0]
 8005a6a:	e78c      	b.n	8005986 <_dtoa_r+0x5de>
 8005a6c:	461d      	mov	r5, r3
 8005a6e:	e7ea      	b.n	8005a46 <_dtoa_r+0x69e>
 8005a70:	2200      	movs	r2, #0
 8005a72:	4b9b      	ldr	r3, [pc, #620]	; (8005ce0 <_dtoa_r+0x938>)
 8005a74:	f7fa fdd0 	bl	8000618 <__aeabi_dmul>
 8005a78:	2200      	movs	r2, #0
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	4606      	mov	r6, r0
 8005a7e:	460f      	mov	r7, r1
 8005a80:	f7fb f832 	bl	8000ae8 <__aeabi_dcmpeq>
 8005a84:	2800      	cmp	r0, #0
 8005a86:	d09a      	beq.n	80059be <_dtoa_r+0x616>
 8005a88:	e7cb      	b.n	8005a22 <_dtoa_r+0x67a>
 8005a8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a8c:	2a00      	cmp	r2, #0
 8005a8e:	f000 808b 	beq.w	8005ba8 <_dtoa_r+0x800>
 8005a92:	9a06      	ldr	r2, [sp, #24]
 8005a94:	2a01      	cmp	r2, #1
 8005a96:	dc6e      	bgt.n	8005b76 <_dtoa_r+0x7ce>
 8005a98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005a9a:	2a00      	cmp	r2, #0
 8005a9c:	d067      	beq.n	8005b6e <_dtoa_r+0x7c6>
 8005a9e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005aa2:	9f07      	ldr	r7, [sp, #28]
 8005aa4:	9d05      	ldr	r5, [sp, #20]
 8005aa6:	9a05      	ldr	r2, [sp, #20]
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	441a      	add	r2, r3
 8005aac:	4620      	mov	r0, r4
 8005aae:	9205      	str	r2, [sp, #20]
 8005ab0:	4498      	add	r8, r3
 8005ab2:	f000 fd04 	bl	80064be <__i2b>
 8005ab6:	4606      	mov	r6, r0
 8005ab8:	2d00      	cmp	r5, #0
 8005aba:	dd0c      	ble.n	8005ad6 <_dtoa_r+0x72e>
 8005abc:	f1b8 0f00 	cmp.w	r8, #0
 8005ac0:	dd09      	ble.n	8005ad6 <_dtoa_r+0x72e>
 8005ac2:	4545      	cmp	r5, r8
 8005ac4:	9a05      	ldr	r2, [sp, #20]
 8005ac6:	462b      	mov	r3, r5
 8005ac8:	bfa8      	it	ge
 8005aca:	4643      	movge	r3, r8
 8005acc:	1ad2      	subs	r2, r2, r3
 8005ace:	9205      	str	r2, [sp, #20]
 8005ad0:	1aed      	subs	r5, r5, r3
 8005ad2:	eba8 0803 	sub.w	r8, r8, r3
 8005ad6:	9b07      	ldr	r3, [sp, #28]
 8005ad8:	b1eb      	cbz	r3, 8005b16 <_dtoa_r+0x76e>
 8005ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d067      	beq.n	8005bb0 <_dtoa_r+0x808>
 8005ae0:	b18f      	cbz	r7, 8005b06 <_dtoa_r+0x75e>
 8005ae2:	4631      	mov	r1, r6
 8005ae4:	463a      	mov	r2, r7
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	f000 fd88 	bl	80065fc <__pow5mult>
 8005aec:	9a04      	ldr	r2, [sp, #16]
 8005aee:	4601      	mov	r1, r0
 8005af0:	4606      	mov	r6, r0
 8005af2:	4620      	mov	r0, r4
 8005af4:	f000 fcec 	bl	80064d0 <__multiply>
 8005af8:	9904      	ldr	r1, [sp, #16]
 8005afa:	9008      	str	r0, [sp, #32]
 8005afc:	4620      	mov	r0, r4
 8005afe:	f000 fc3e 	bl	800637e <_Bfree>
 8005b02:	9b08      	ldr	r3, [sp, #32]
 8005b04:	9304      	str	r3, [sp, #16]
 8005b06:	9b07      	ldr	r3, [sp, #28]
 8005b08:	1bda      	subs	r2, r3, r7
 8005b0a:	d004      	beq.n	8005b16 <_dtoa_r+0x76e>
 8005b0c:	9904      	ldr	r1, [sp, #16]
 8005b0e:	4620      	mov	r0, r4
 8005b10:	f000 fd74 	bl	80065fc <__pow5mult>
 8005b14:	9004      	str	r0, [sp, #16]
 8005b16:	2101      	movs	r1, #1
 8005b18:	4620      	mov	r0, r4
 8005b1a:	f000 fcd0 	bl	80064be <__i2b>
 8005b1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b20:	4607      	mov	r7, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 81d0 	beq.w	8005ec8 <_dtoa_r+0xb20>
 8005b28:	461a      	mov	r2, r3
 8005b2a:	4601      	mov	r1, r0
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	f000 fd65 	bl	80065fc <__pow5mult>
 8005b32:	9b06      	ldr	r3, [sp, #24]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	4607      	mov	r7, r0
 8005b38:	dc40      	bgt.n	8005bbc <_dtoa_r+0x814>
 8005b3a:	9b00      	ldr	r3, [sp, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d139      	bne.n	8005bb4 <_dtoa_r+0x80c>
 8005b40:	9b01      	ldr	r3, [sp, #4]
 8005b42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d136      	bne.n	8005bb8 <_dtoa_r+0x810>
 8005b4a:	9b01      	ldr	r3, [sp, #4]
 8005b4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b50:	0d1b      	lsrs	r3, r3, #20
 8005b52:	051b      	lsls	r3, r3, #20
 8005b54:	b12b      	cbz	r3, 8005b62 <_dtoa_r+0x7ba>
 8005b56:	9b05      	ldr	r3, [sp, #20]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	9305      	str	r3, [sp, #20]
 8005b5c:	f108 0801 	add.w	r8, r8, #1
 8005b60:	2301      	movs	r3, #1
 8005b62:	9307      	str	r3, [sp, #28]
 8005b64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d12a      	bne.n	8005bc0 <_dtoa_r+0x818>
 8005b6a:	2001      	movs	r0, #1
 8005b6c:	e030      	b.n	8005bd0 <_dtoa_r+0x828>
 8005b6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b70:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b74:	e795      	b.n	8005aa2 <_dtoa_r+0x6fa>
 8005b76:	9b07      	ldr	r3, [sp, #28]
 8005b78:	f109 37ff 	add.w	r7, r9, #4294967295
 8005b7c:	42bb      	cmp	r3, r7
 8005b7e:	bfbf      	itttt	lt
 8005b80:	9b07      	ldrlt	r3, [sp, #28]
 8005b82:	9707      	strlt	r7, [sp, #28]
 8005b84:	1afa      	sublt	r2, r7, r3
 8005b86:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005b88:	bfbb      	ittet	lt
 8005b8a:	189b      	addlt	r3, r3, r2
 8005b8c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005b8e:	1bdf      	subge	r7, r3, r7
 8005b90:	2700      	movlt	r7, #0
 8005b92:	f1b9 0f00 	cmp.w	r9, #0
 8005b96:	bfb5      	itete	lt
 8005b98:	9b05      	ldrlt	r3, [sp, #20]
 8005b9a:	9d05      	ldrge	r5, [sp, #20]
 8005b9c:	eba3 0509 	sublt.w	r5, r3, r9
 8005ba0:	464b      	movge	r3, r9
 8005ba2:	bfb8      	it	lt
 8005ba4:	2300      	movlt	r3, #0
 8005ba6:	e77e      	b.n	8005aa6 <_dtoa_r+0x6fe>
 8005ba8:	9f07      	ldr	r7, [sp, #28]
 8005baa:	9d05      	ldr	r5, [sp, #20]
 8005bac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005bae:	e783      	b.n	8005ab8 <_dtoa_r+0x710>
 8005bb0:	9a07      	ldr	r2, [sp, #28]
 8005bb2:	e7ab      	b.n	8005b0c <_dtoa_r+0x764>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	e7d4      	b.n	8005b62 <_dtoa_r+0x7ba>
 8005bb8:	9b00      	ldr	r3, [sp, #0]
 8005bba:	e7d2      	b.n	8005b62 <_dtoa_r+0x7ba>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	9307      	str	r3, [sp, #28]
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005bc6:	6918      	ldr	r0, [r3, #16]
 8005bc8:	f000 fc2b 	bl	8006422 <__hi0bits>
 8005bcc:	f1c0 0020 	rsb	r0, r0, #32
 8005bd0:	4440      	add	r0, r8
 8005bd2:	f010 001f 	ands.w	r0, r0, #31
 8005bd6:	d047      	beq.n	8005c68 <_dtoa_r+0x8c0>
 8005bd8:	f1c0 0320 	rsb	r3, r0, #32
 8005bdc:	2b04      	cmp	r3, #4
 8005bde:	dd3b      	ble.n	8005c58 <_dtoa_r+0x8b0>
 8005be0:	9b05      	ldr	r3, [sp, #20]
 8005be2:	f1c0 001c 	rsb	r0, r0, #28
 8005be6:	4403      	add	r3, r0
 8005be8:	9305      	str	r3, [sp, #20]
 8005bea:	4405      	add	r5, r0
 8005bec:	4480      	add	r8, r0
 8005bee:	9b05      	ldr	r3, [sp, #20]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	dd05      	ble.n	8005c00 <_dtoa_r+0x858>
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	9904      	ldr	r1, [sp, #16]
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	f000 fd4d 	bl	8006698 <__lshift>
 8005bfe:	9004      	str	r0, [sp, #16]
 8005c00:	f1b8 0f00 	cmp.w	r8, #0
 8005c04:	dd05      	ble.n	8005c12 <_dtoa_r+0x86a>
 8005c06:	4639      	mov	r1, r7
 8005c08:	4642      	mov	r2, r8
 8005c0a:	4620      	mov	r0, r4
 8005c0c:	f000 fd44 	bl	8006698 <__lshift>
 8005c10:	4607      	mov	r7, r0
 8005c12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c14:	b353      	cbz	r3, 8005c6c <_dtoa_r+0x8c4>
 8005c16:	4639      	mov	r1, r7
 8005c18:	9804      	ldr	r0, [sp, #16]
 8005c1a:	f000 fd91 	bl	8006740 <__mcmp>
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	da24      	bge.n	8005c6c <_dtoa_r+0x8c4>
 8005c22:	2300      	movs	r3, #0
 8005c24:	220a      	movs	r2, #10
 8005c26:	9904      	ldr	r1, [sp, #16]
 8005c28:	4620      	mov	r0, r4
 8005c2a:	f000 fbbf 	bl	80063ac <__multadd>
 8005c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c30:	9004      	str	r0, [sp, #16]
 8005c32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	f000 814d 	beq.w	8005ed6 <_dtoa_r+0xb2e>
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	4631      	mov	r1, r6
 8005c40:	220a      	movs	r2, #10
 8005c42:	4620      	mov	r0, r4
 8005c44:	f000 fbb2 	bl	80063ac <__multadd>
 8005c48:	9b02      	ldr	r3, [sp, #8]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	4606      	mov	r6, r0
 8005c4e:	dc4f      	bgt.n	8005cf0 <_dtoa_r+0x948>
 8005c50:	9b06      	ldr	r3, [sp, #24]
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	dd4c      	ble.n	8005cf0 <_dtoa_r+0x948>
 8005c56:	e011      	b.n	8005c7c <_dtoa_r+0x8d4>
 8005c58:	d0c9      	beq.n	8005bee <_dtoa_r+0x846>
 8005c5a:	9a05      	ldr	r2, [sp, #20]
 8005c5c:	331c      	adds	r3, #28
 8005c5e:	441a      	add	r2, r3
 8005c60:	9205      	str	r2, [sp, #20]
 8005c62:	441d      	add	r5, r3
 8005c64:	4498      	add	r8, r3
 8005c66:	e7c2      	b.n	8005bee <_dtoa_r+0x846>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	e7f6      	b.n	8005c5a <_dtoa_r+0x8b2>
 8005c6c:	f1b9 0f00 	cmp.w	r9, #0
 8005c70:	dc38      	bgt.n	8005ce4 <_dtoa_r+0x93c>
 8005c72:	9b06      	ldr	r3, [sp, #24]
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	dd35      	ble.n	8005ce4 <_dtoa_r+0x93c>
 8005c78:	f8cd 9008 	str.w	r9, [sp, #8]
 8005c7c:	9b02      	ldr	r3, [sp, #8]
 8005c7e:	b963      	cbnz	r3, 8005c9a <_dtoa_r+0x8f2>
 8005c80:	4639      	mov	r1, r7
 8005c82:	2205      	movs	r2, #5
 8005c84:	4620      	mov	r0, r4
 8005c86:	f000 fb91 	bl	80063ac <__multadd>
 8005c8a:	4601      	mov	r1, r0
 8005c8c:	4607      	mov	r7, r0
 8005c8e:	9804      	ldr	r0, [sp, #16]
 8005c90:	f000 fd56 	bl	8006740 <__mcmp>
 8005c94:	2800      	cmp	r0, #0
 8005c96:	f73f adcc 	bgt.w	8005832 <_dtoa_r+0x48a>
 8005c9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c9c:	465d      	mov	r5, fp
 8005c9e:	ea6f 0a03 	mvn.w	sl, r3
 8005ca2:	f04f 0900 	mov.w	r9, #0
 8005ca6:	4639      	mov	r1, r7
 8005ca8:	4620      	mov	r0, r4
 8005caa:	f000 fb68 	bl	800637e <_Bfree>
 8005cae:	2e00      	cmp	r6, #0
 8005cb0:	f43f aeb7 	beq.w	8005a22 <_dtoa_r+0x67a>
 8005cb4:	f1b9 0f00 	cmp.w	r9, #0
 8005cb8:	d005      	beq.n	8005cc6 <_dtoa_r+0x91e>
 8005cba:	45b1      	cmp	r9, r6
 8005cbc:	d003      	beq.n	8005cc6 <_dtoa_r+0x91e>
 8005cbe:	4649      	mov	r1, r9
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	f000 fb5c 	bl	800637e <_Bfree>
 8005cc6:	4631      	mov	r1, r6
 8005cc8:	4620      	mov	r0, r4
 8005cca:	f000 fb58 	bl	800637e <_Bfree>
 8005cce:	e6a8      	b.n	8005a22 <_dtoa_r+0x67a>
 8005cd0:	2700      	movs	r7, #0
 8005cd2:	463e      	mov	r6, r7
 8005cd4:	e7e1      	b.n	8005c9a <_dtoa_r+0x8f2>
 8005cd6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005cda:	463e      	mov	r6, r7
 8005cdc:	e5a9      	b.n	8005832 <_dtoa_r+0x48a>
 8005cde:	bf00      	nop
 8005ce0:	40240000 	.word	0x40240000
 8005ce4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ce6:	f8cd 9008 	str.w	r9, [sp, #8]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f000 80fa 	beq.w	8005ee4 <_dtoa_r+0xb3c>
 8005cf0:	2d00      	cmp	r5, #0
 8005cf2:	dd05      	ble.n	8005d00 <_dtoa_r+0x958>
 8005cf4:	4631      	mov	r1, r6
 8005cf6:	462a      	mov	r2, r5
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	f000 fccd 	bl	8006698 <__lshift>
 8005cfe:	4606      	mov	r6, r0
 8005d00:	9b07      	ldr	r3, [sp, #28]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d04c      	beq.n	8005da0 <_dtoa_r+0x9f8>
 8005d06:	6871      	ldr	r1, [r6, #4]
 8005d08:	4620      	mov	r0, r4
 8005d0a:	f000 fb04 	bl	8006316 <_Balloc>
 8005d0e:	6932      	ldr	r2, [r6, #16]
 8005d10:	3202      	adds	r2, #2
 8005d12:	4605      	mov	r5, r0
 8005d14:	0092      	lsls	r2, r2, #2
 8005d16:	f106 010c 	add.w	r1, r6, #12
 8005d1a:	300c      	adds	r0, #12
 8005d1c:	f000 faf0 	bl	8006300 <memcpy>
 8005d20:	2201      	movs	r2, #1
 8005d22:	4629      	mov	r1, r5
 8005d24:	4620      	mov	r0, r4
 8005d26:	f000 fcb7 	bl	8006698 <__lshift>
 8005d2a:	9b00      	ldr	r3, [sp, #0]
 8005d2c:	f8cd b014 	str.w	fp, [sp, #20]
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	46b1      	mov	r9, r6
 8005d36:	9307      	str	r3, [sp, #28]
 8005d38:	4606      	mov	r6, r0
 8005d3a:	4639      	mov	r1, r7
 8005d3c:	9804      	ldr	r0, [sp, #16]
 8005d3e:	f7ff faa5 	bl	800528c <quorem>
 8005d42:	4649      	mov	r1, r9
 8005d44:	4605      	mov	r5, r0
 8005d46:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005d4a:	9804      	ldr	r0, [sp, #16]
 8005d4c:	f000 fcf8 	bl	8006740 <__mcmp>
 8005d50:	4632      	mov	r2, r6
 8005d52:	9000      	str	r0, [sp, #0]
 8005d54:	4639      	mov	r1, r7
 8005d56:	4620      	mov	r0, r4
 8005d58:	f000 fd0c 	bl	8006774 <__mdiff>
 8005d5c:	68c3      	ldr	r3, [r0, #12]
 8005d5e:	4602      	mov	r2, r0
 8005d60:	bb03      	cbnz	r3, 8005da4 <_dtoa_r+0x9fc>
 8005d62:	4601      	mov	r1, r0
 8005d64:	9008      	str	r0, [sp, #32]
 8005d66:	9804      	ldr	r0, [sp, #16]
 8005d68:	f000 fcea 	bl	8006740 <__mcmp>
 8005d6c:	9a08      	ldr	r2, [sp, #32]
 8005d6e:	4603      	mov	r3, r0
 8005d70:	4611      	mov	r1, r2
 8005d72:	4620      	mov	r0, r4
 8005d74:	9308      	str	r3, [sp, #32]
 8005d76:	f000 fb02 	bl	800637e <_Bfree>
 8005d7a:	9b08      	ldr	r3, [sp, #32]
 8005d7c:	b9a3      	cbnz	r3, 8005da8 <_dtoa_r+0xa00>
 8005d7e:	9a06      	ldr	r2, [sp, #24]
 8005d80:	b992      	cbnz	r2, 8005da8 <_dtoa_r+0xa00>
 8005d82:	9a07      	ldr	r2, [sp, #28]
 8005d84:	b982      	cbnz	r2, 8005da8 <_dtoa_r+0xa00>
 8005d86:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005d8a:	d029      	beq.n	8005de0 <_dtoa_r+0xa38>
 8005d8c:	9b00      	ldr	r3, [sp, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	dd01      	ble.n	8005d96 <_dtoa_r+0x9ee>
 8005d92:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005d96:	9b05      	ldr	r3, [sp, #20]
 8005d98:	1c5d      	adds	r5, r3, #1
 8005d9a:	f883 8000 	strb.w	r8, [r3]
 8005d9e:	e782      	b.n	8005ca6 <_dtoa_r+0x8fe>
 8005da0:	4630      	mov	r0, r6
 8005da2:	e7c2      	b.n	8005d2a <_dtoa_r+0x982>
 8005da4:	2301      	movs	r3, #1
 8005da6:	e7e3      	b.n	8005d70 <_dtoa_r+0x9c8>
 8005da8:	9a00      	ldr	r2, [sp, #0]
 8005daa:	2a00      	cmp	r2, #0
 8005dac:	db04      	blt.n	8005db8 <_dtoa_r+0xa10>
 8005dae:	d125      	bne.n	8005dfc <_dtoa_r+0xa54>
 8005db0:	9a06      	ldr	r2, [sp, #24]
 8005db2:	bb1a      	cbnz	r2, 8005dfc <_dtoa_r+0xa54>
 8005db4:	9a07      	ldr	r2, [sp, #28]
 8005db6:	bb0a      	cbnz	r2, 8005dfc <_dtoa_r+0xa54>
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	ddec      	ble.n	8005d96 <_dtoa_r+0x9ee>
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	9904      	ldr	r1, [sp, #16]
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	f000 fc69 	bl	8006698 <__lshift>
 8005dc6:	4639      	mov	r1, r7
 8005dc8:	9004      	str	r0, [sp, #16]
 8005dca:	f000 fcb9 	bl	8006740 <__mcmp>
 8005dce:	2800      	cmp	r0, #0
 8005dd0:	dc03      	bgt.n	8005dda <_dtoa_r+0xa32>
 8005dd2:	d1e0      	bne.n	8005d96 <_dtoa_r+0x9ee>
 8005dd4:	f018 0f01 	tst.w	r8, #1
 8005dd8:	d0dd      	beq.n	8005d96 <_dtoa_r+0x9ee>
 8005dda:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005dde:	d1d8      	bne.n	8005d92 <_dtoa_r+0x9ea>
 8005de0:	9b05      	ldr	r3, [sp, #20]
 8005de2:	9a05      	ldr	r2, [sp, #20]
 8005de4:	1c5d      	adds	r5, r3, #1
 8005de6:	2339      	movs	r3, #57	; 0x39
 8005de8:	7013      	strb	r3, [r2, #0]
 8005dea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005dee:	2b39      	cmp	r3, #57	; 0x39
 8005df0:	f105 32ff 	add.w	r2, r5, #4294967295
 8005df4:	d04f      	beq.n	8005e96 <_dtoa_r+0xaee>
 8005df6:	3301      	adds	r3, #1
 8005df8:	7013      	strb	r3, [r2, #0]
 8005dfa:	e754      	b.n	8005ca6 <_dtoa_r+0x8fe>
 8005dfc:	9a05      	ldr	r2, [sp, #20]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f102 0501 	add.w	r5, r2, #1
 8005e04:	dd06      	ble.n	8005e14 <_dtoa_r+0xa6c>
 8005e06:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005e0a:	d0e9      	beq.n	8005de0 <_dtoa_r+0xa38>
 8005e0c:	f108 0801 	add.w	r8, r8, #1
 8005e10:	9b05      	ldr	r3, [sp, #20]
 8005e12:	e7c2      	b.n	8005d9a <_dtoa_r+0x9f2>
 8005e14:	9a02      	ldr	r2, [sp, #8]
 8005e16:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005e1a:	eba5 030b 	sub.w	r3, r5, fp
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d021      	beq.n	8005e66 <_dtoa_r+0xabe>
 8005e22:	2300      	movs	r3, #0
 8005e24:	220a      	movs	r2, #10
 8005e26:	9904      	ldr	r1, [sp, #16]
 8005e28:	4620      	mov	r0, r4
 8005e2a:	f000 fabf 	bl	80063ac <__multadd>
 8005e2e:	45b1      	cmp	r9, r6
 8005e30:	9004      	str	r0, [sp, #16]
 8005e32:	f04f 0300 	mov.w	r3, #0
 8005e36:	f04f 020a 	mov.w	r2, #10
 8005e3a:	4649      	mov	r1, r9
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	d105      	bne.n	8005e4c <_dtoa_r+0xaa4>
 8005e40:	f000 fab4 	bl	80063ac <__multadd>
 8005e44:	4681      	mov	r9, r0
 8005e46:	4606      	mov	r6, r0
 8005e48:	9505      	str	r5, [sp, #20]
 8005e4a:	e776      	b.n	8005d3a <_dtoa_r+0x992>
 8005e4c:	f000 faae 	bl	80063ac <__multadd>
 8005e50:	4631      	mov	r1, r6
 8005e52:	4681      	mov	r9, r0
 8005e54:	2300      	movs	r3, #0
 8005e56:	220a      	movs	r2, #10
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f000 faa7 	bl	80063ac <__multadd>
 8005e5e:	4606      	mov	r6, r0
 8005e60:	e7f2      	b.n	8005e48 <_dtoa_r+0xaa0>
 8005e62:	f04f 0900 	mov.w	r9, #0
 8005e66:	2201      	movs	r2, #1
 8005e68:	9904      	ldr	r1, [sp, #16]
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	f000 fc14 	bl	8006698 <__lshift>
 8005e70:	4639      	mov	r1, r7
 8005e72:	9004      	str	r0, [sp, #16]
 8005e74:	f000 fc64 	bl	8006740 <__mcmp>
 8005e78:	2800      	cmp	r0, #0
 8005e7a:	dcb6      	bgt.n	8005dea <_dtoa_r+0xa42>
 8005e7c:	d102      	bne.n	8005e84 <_dtoa_r+0xadc>
 8005e7e:	f018 0f01 	tst.w	r8, #1
 8005e82:	d1b2      	bne.n	8005dea <_dtoa_r+0xa42>
 8005e84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e88:	2b30      	cmp	r3, #48	; 0x30
 8005e8a:	f105 32ff 	add.w	r2, r5, #4294967295
 8005e8e:	f47f af0a 	bne.w	8005ca6 <_dtoa_r+0x8fe>
 8005e92:	4615      	mov	r5, r2
 8005e94:	e7f6      	b.n	8005e84 <_dtoa_r+0xadc>
 8005e96:	4593      	cmp	fp, r2
 8005e98:	d105      	bne.n	8005ea6 <_dtoa_r+0xafe>
 8005e9a:	2331      	movs	r3, #49	; 0x31
 8005e9c:	f10a 0a01 	add.w	sl, sl, #1
 8005ea0:	f88b 3000 	strb.w	r3, [fp]
 8005ea4:	e6ff      	b.n	8005ca6 <_dtoa_r+0x8fe>
 8005ea6:	4615      	mov	r5, r2
 8005ea8:	e79f      	b.n	8005dea <_dtoa_r+0xa42>
 8005eaa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005f10 <_dtoa_r+0xb68>
 8005eae:	e007      	b.n	8005ec0 <_dtoa_r+0xb18>
 8005eb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005eb2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005f14 <_dtoa_r+0xb6c>
 8005eb6:	b11b      	cbz	r3, 8005ec0 <_dtoa_r+0xb18>
 8005eb8:	f10b 0308 	add.w	r3, fp, #8
 8005ebc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005ebe:	6013      	str	r3, [r2, #0]
 8005ec0:	4658      	mov	r0, fp
 8005ec2:	b017      	add	sp, #92	; 0x5c
 8005ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ec8:	9b06      	ldr	r3, [sp, #24]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	f77f ae35 	ble.w	8005b3a <_dtoa_r+0x792>
 8005ed0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ed2:	9307      	str	r3, [sp, #28]
 8005ed4:	e649      	b.n	8005b6a <_dtoa_r+0x7c2>
 8005ed6:	9b02      	ldr	r3, [sp, #8]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	dc03      	bgt.n	8005ee4 <_dtoa_r+0xb3c>
 8005edc:	9b06      	ldr	r3, [sp, #24]
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	f73f aecc 	bgt.w	8005c7c <_dtoa_r+0x8d4>
 8005ee4:	465d      	mov	r5, fp
 8005ee6:	4639      	mov	r1, r7
 8005ee8:	9804      	ldr	r0, [sp, #16]
 8005eea:	f7ff f9cf 	bl	800528c <quorem>
 8005eee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005ef2:	f805 8b01 	strb.w	r8, [r5], #1
 8005ef6:	9a02      	ldr	r2, [sp, #8]
 8005ef8:	eba5 030b 	sub.w	r3, r5, fp
 8005efc:	429a      	cmp	r2, r3
 8005efe:	ddb0      	ble.n	8005e62 <_dtoa_r+0xaba>
 8005f00:	2300      	movs	r3, #0
 8005f02:	220a      	movs	r2, #10
 8005f04:	9904      	ldr	r1, [sp, #16]
 8005f06:	4620      	mov	r0, r4
 8005f08:	f000 fa50 	bl	80063ac <__multadd>
 8005f0c:	9004      	str	r0, [sp, #16]
 8005f0e:	e7ea      	b.n	8005ee6 <_dtoa_r+0xb3e>
 8005f10:	08006f28 	.word	0x08006f28
 8005f14:	08006f4c 	.word	0x08006f4c

08005f18 <__sflush_r>:
 8005f18:	898a      	ldrh	r2, [r1, #12]
 8005f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f1e:	4605      	mov	r5, r0
 8005f20:	0710      	lsls	r0, r2, #28
 8005f22:	460c      	mov	r4, r1
 8005f24:	d458      	bmi.n	8005fd8 <__sflush_r+0xc0>
 8005f26:	684b      	ldr	r3, [r1, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	dc05      	bgt.n	8005f38 <__sflush_r+0x20>
 8005f2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	dc02      	bgt.n	8005f38 <__sflush_r+0x20>
 8005f32:	2000      	movs	r0, #0
 8005f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f3a:	2e00      	cmp	r6, #0
 8005f3c:	d0f9      	beq.n	8005f32 <__sflush_r+0x1a>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f44:	682f      	ldr	r7, [r5, #0]
 8005f46:	6a21      	ldr	r1, [r4, #32]
 8005f48:	602b      	str	r3, [r5, #0]
 8005f4a:	d032      	beq.n	8005fb2 <__sflush_r+0x9a>
 8005f4c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f4e:	89a3      	ldrh	r3, [r4, #12]
 8005f50:	075a      	lsls	r2, r3, #29
 8005f52:	d505      	bpl.n	8005f60 <__sflush_r+0x48>
 8005f54:	6863      	ldr	r3, [r4, #4]
 8005f56:	1ac0      	subs	r0, r0, r3
 8005f58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f5a:	b10b      	cbz	r3, 8005f60 <__sflush_r+0x48>
 8005f5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f5e:	1ac0      	subs	r0, r0, r3
 8005f60:	2300      	movs	r3, #0
 8005f62:	4602      	mov	r2, r0
 8005f64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f66:	6a21      	ldr	r1, [r4, #32]
 8005f68:	4628      	mov	r0, r5
 8005f6a:	47b0      	blx	r6
 8005f6c:	1c43      	adds	r3, r0, #1
 8005f6e:	89a3      	ldrh	r3, [r4, #12]
 8005f70:	d106      	bne.n	8005f80 <__sflush_r+0x68>
 8005f72:	6829      	ldr	r1, [r5, #0]
 8005f74:	291d      	cmp	r1, #29
 8005f76:	d848      	bhi.n	800600a <__sflush_r+0xf2>
 8005f78:	4a29      	ldr	r2, [pc, #164]	; (8006020 <__sflush_r+0x108>)
 8005f7a:	40ca      	lsrs	r2, r1
 8005f7c:	07d6      	lsls	r6, r2, #31
 8005f7e:	d544      	bpl.n	800600a <__sflush_r+0xf2>
 8005f80:	2200      	movs	r2, #0
 8005f82:	6062      	str	r2, [r4, #4]
 8005f84:	04d9      	lsls	r1, r3, #19
 8005f86:	6922      	ldr	r2, [r4, #16]
 8005f88:	6022      	str	r2, [r4, #0]
 8005f8a:	d504      	bpl.n	8005f96 <__sflush_r+0x7e>
 8005f8c:	1c42      	adds	r2, r0, #1
 8005f8e:	d101      	bne.n	8005f94 <__sflush_r+0x7c>
 8005f90:	682b      	ldr	r3, [r5, #0]
 8005f92:	b903      	cbnz	r3, 8005f96 <__sflush_r+0x7e>
 8005f94:	6560      	str	r0, [r4, #84]	; 0x54
 8005f96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f98:	602f      	str	r7, [r5, #0]
 8005f9a:	2900      	cmp	r1, #0
 8005f9c:	d0c9      	beq.n	8005f32 <__sflush_r+0x1a>
 8005f9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fa2:	4299      	cmp	r1, r3
 8005fa4:	d002      	beq.n	8005fac <__sflush_r+0x94>
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	f000 fc9e 	bl	80068e8 <_free_r>
 8005fac:	2000      	movs	r0, #0
 8005fae:	6360      	str	r0, [r4, #52]	; 0x34
 8005fb0:	e7c0      	b.n	8005f34 <__sflush_r+0x1c>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	47b0      	blx	r6
 8005fb8:	1c41      	adds	r1, r0, #1
 8005fba:	d1c8      	bne.n	8005f4e <__sflush_r+0x36>
 8005fbc:	682b      	ldr	r3, [r5, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d0c5      	beq.n	8005f4e <__sflush_r+0x36>
 8005fc2:	2b1d      	cmp	r3, #29
 8005fc4:	d001      	beq.n	8005fca <__sflush_r+0xb2>
 8005fc6:	2b16      	cmp	r3, #22
 8005fc8:	d101      	bne.n	8005fce <__sflush_r+0xb6>
 8005fca:	602f      	str	r7, [r5, #0]
 8005fcc:	e7b1      	b.n	8005f32 <__sflush_r+0x1a>
 8005fce:	89a3      	ldrh	r3, [r4, #12]
 8005fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fd4:	81a3      	strh	r3, [r4, #12]
 8005fd6:	e7ad      	b.n	8005f34 <__sflush_r+0x1c>
 8005fd8:	690f      	ldr	r7, [r1, #16]
 8005fda:	2f00      	cmp	r7, #0
 8005fdc:	d0a9      	beq.n	8005f32 <__sflush_r+0x1a>
 8005fde:	0793      	lsls	r3, r2, #30
 8005fe0:	680e      	ldr	r6, [r1, #0]
 8005fe2:	bf08      	it	eq
 8005fe4:	694b      	ldreq	r3, [r1, #20]
 8005fe6:	600f      	str	r7, [r1, #0]
 8005fe8:	bf18      	it	ne
 8005fea:	2300      	movne	r3, #0
 8005fec:	eba6 0807 	sub.w	r8, r6, r7
 8005ff0:	608b      	str	r3, [r1, #8]
 8005ff2:	f1b8 0f00 	cmp.w	r8, #0
 8005ff6:	dd9c      	ble.n	8005f32 <__sflush_r+0x1a>
 8005ff8:	4643      	mov	r3, r8
 8005ffa:	463a      	mov	r2, r7
 8005ffc:	6a21      	ldr	r1, [r4, #32]
 8005ffe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006000:	4628      	mov	r0, r5
 8006002:	47b0      	blx	r6
 8006004:	2800      	cmp	r0, #0
 8006006:	dc06      	bgt.n	8006016 <__sflush_r+0xfe>
 8006008:	89a3      	ldrh	r3, [r4, #12]
 800600a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800600e:	81a3      	strh	r3, [r4, #12]
 8006010:	f04f 30ff 	mov.w	r0, #4294967295
 8006014:	e78e      	b.n	8005f34 <__sflush_r+0x1c>
 8006016:	4407      	add	r7, r0
 8006018:	eba8 0800 	sub.w	r8, r8, r0
 800601c:	e7e9      	b.n	8005ff2 <__sflush_r+0xda>
 800601e:	bf00      	nop
 8006020:	20400001 	.word	0x20400001

08006024 <_fflush_r>:
 8006024:	b538      	push	{r3, r4, r5, lr}
 8006026:	690b      	ldr	r3, [r1, #16]
 8006028:	4605      	mov	r5, r0
 800602a:	460c      	mov	r4, r1
 800602c:	b1db      	cbz	r3, 8006066 <_fflush_r+0x42>
 800602e:	b118      	cbz	r0, 8006038 <_fflush_r+0x14>
 8006030:	6983      	ldr	r3, [r0, #24]
 8006032:	b90b      	cbnz	r3, 8006038 <_fflush_r+0x14>
 8006034:	f000 f860 	bl	80060f8 <__sinit>
 8006038:	4b0c      	ldr	r3, [pc, #48]	; (800606c <_fflush_r+0x48>)
 800603a:	429c      	cmp	r4, r3
 800603c:	d109      	bne.n	8006052 <_fflush_r+0x2e>
 800603e:	686c      	ldr	r4, [r5, #4]
 8006040:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006044:	b17b      	cbz	r3, 8006066 <_fflush_r+0x42>
 8006046:	4621      	mov	r1, r4
 8006048:	4628      	mov	r0, r5
 800604a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800604e:	f7ff bf63 	b.w	8005f18 <__sflush_r>
 8006052:	4b07      	ldr	r3, [pc, #28]	; (8006070 <_fflush_r+0x4c>)
 8006054:	429c      	cmp	r4, r3
 8006056:	d101      	bne.n	800605c <_fflush_r+0x38>
 8006058:	68ac      	ldr	r4, [r5, #8]
 800605a:	e7f1      	b.n	8006040 <_fflush_r+0x1c>
 800605c:	4b05      	ldr	r3, [pc, #20]	; (8006074 <_fflush_r+0x50>)
 800605e:	429c      	cmp	r4, r3
 8006060:	bf08      	it	eq
 8006062:	68ec      	ldreq	r4, [r5, #12]
 8006064:	e7ec      	b.n	8006040 <_fflush_r+0x1c>
 8006066:	2000      	movs	r0, #0
 8006068:	bd38      	pop	{r3, r4, r5, pc}
 800606a:	bf00      	nop
 800606c:	08006f7c 	.word	0x08006f7c
 8006070:	08006f9c 	.word	0x08006f9c
 8006074:	08006f5c 	.word	0x08006f5c

08006078 <std>:
 8006078:	2300      	movs	r3, #0
 800607a:	b510      	push	{r4, lr}
 800607c:	4604      	mov	r4, r0
 800607e:	e9c0 3300 	strd	r3, r3, [r0]
 8006082:	6083      	str	r3, [r0, #8]
 8006084:	8181      	strh	r1, [r0, #12]
 8006086:	6643      	str	r3, [r0, #100]	; 0x64
 8006088:	81c2      	strh	r2, [r0, #14]
 800608a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800608e:	6183      	str	r3, [r0, #24]
 8006090:	4619      	mov	r1, r3
 8006092:	2208      	movs	r2, #8
 8006094:	305c      	adds	r0, #92	; 0x5c
 8006096:	f7fe faa3 	bl	80045e0 <memset>
 800609a:	4b05      	ldr	r3, [pc, #20]	; (80060b0 <std+0x38>)
 800609c:	6263      	str	r3, [r4, #36]	; 0x24
 800609e:	4b05      	ldr	r3, [pc, #20]	; (80060b4 <std+0x3c>)
 80060a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80060a2:	4b05      	ldr	r3, [pc, #20]	; (80060b8 <std+0x40>)
 80060a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80060a6:	4b05      	ldr	r3, [pc, #20]	; (80060bc <std+0x44>)
 80060a8:	6224      	str	r4, [r4, #32]
 80060aa:	6323      	str	r3, [r4, #48]	; 0x30
 80060ac:	bd10      	pop	{r4, pc}
 80060ae:	bf00      	nop
 80060b0:	08006cd9 	.word	0x08006cd9
 80060b4:	08006cfb 	.word	0x08006cfb
 80060b8:	08006d33 	.word	0x08006d33
 80060bc:	08006d57 	.word	0x08006d57

080060c0 <_cleanup_r>:
 80060c0:	4901      	ldr	r1, [pc, #4]	; (80060c8 <_cleanup_r+0x8>)
 80060c2:	f000 b885 	b.w	80061d0 <_fwalk_reent>
 80060c6:	bf00      	nop
 80060c8:	08006025 	.word	0x08006025

080060cc <__sfmoreglue>:
 80060cc:	b570      	push	{r4, r5, r6, lr}
 80060ce:	1e4a      	subs	r2, r1, #1
 80060d0:	2568      	movs	r5, #104	; 0x68
 80060d2:	4355      	muls	r5, r2
 80060d4:	460e      	mov	r6, r1
 80060d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80060da:	f000 fc53 	bl	8006984 <_malloc_r>
 80060de:	4604      	mov	r4, r0
 80060e0:	b140      	cbz	r0, 80060f4 <__sfmoreglue+0x28>
 80060e2:	2100      	movs	r1, #0
 80060e4:	e9c0 1600 	strd	r1, r6, [r0]
 80060e8:	300c      	adds	r0, #12
 80060ea:	60a0      	str	r0, [r4, #8]
 80060ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80060f0:	f7fe fa76 	bl	80045e0 <memset>
 80060f4:	4620      	mov	r0, r4
 80060f6:	bd70      	pop	{r4, r5, r6, pc}

080060f8 <__sinit>:
 80060f8:	6983      	ldr	r3, [r0, #24]
 80060fa:	b510      	push	{r4, lr}
 80060fc:	4604      	mov	r4, r0
 80060fe:	bb33      	cbnz	r3, 800614e <__sinit+0x56>
 8006100:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006104:	6503      	str	r3, [r0, #80]	; 0x50
 8006106:	4b12      	ldr	r3, [pc, #72]	; (8006150 <__sinit+0x58>)
 8006108:	4a12      	ldr	r2, [pc, #72]	; (8006154 <__sinit+0x5c>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6282      	str	r2, [r0, #40]	; 0x28
 800610e:	4298      	cmp	r0, r3
 8006110:	bf04      	itt	eq
 8006112:	2301      	moveq	r3, #1
 8006114:	6183      	streq	r3, [r0, #24]
 8006116:	f000 f81f 	bl	8006158 <__sfp>
 800611a:	6060      	str	r0, [r4, #4]
 800611c:	4620      	mov	r0, r4
 800611e:	f000 f81b 	bl	8006158 <__sfp>
 8006122:	60a0      	str	r0, [r4, #8]
 8006124:	4620      	mov	r0, r4
 8006126:	f000 f817 	bl	8006158 <__sfp>
 800612a:	2200      	movs	r2, #0
 800612c:	60e0      	str	r0, [r4, #12]
 800612e:	2104      	movs	r1, #4
 8006130:	6860      	ldr	r0, [r4, #4]
 8006132:	f7ff ffa1 	bl	8006078 <std>
 8006136:	2201      	movs	r2, #1
 8006138:	2109      	movs	r1, #9
 800613a:	68a0      	ldr	r0, [r4, #8]
 800613c:	f7ff ff9c 	bl	8006078 <std>
 8006140:	2202      	movs	r2, #2
 8006142:	2112      	movs	r1, #18
 8006144:	68e0      	ldr	r0, [r4, #12]
 8006146:	f7ff ff97 	bl	8006078 <std>
 800614a:	2301      	movs	r3, #1
 800614c:	61a3      	str	r3, [r4, #24]
 800614e:	bd10      	pop	{r4, pc}
 8006150:	08006f14 	.word	0x08006f14
 8006154:	080060c1 	.word	0x080060c1

08006158 <__sfp>:
 8006158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615a:	4b1b      	ldr	r3, [pc, #108]	; (80061c8 <__sfp+0x70>)
 800615c:	681e      	ldr	r6, [r3, #0]
 800615e:	69b3      	ldr	r3, [r6, #24]
 8006160:	4607      	mov	r7, r0
 8006162:	b913      	cbnz	r3, 800616a <__sfp+0x12>
 8006164:	4630      	mov	r0, r6
 8006166:	f7ff ffc7 	bl	80060f8 <__sinit>
 800616a:	3648      	adds	r6, #72	; 0x48
 800616c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006170:	3b01      	subs	r3, #1
 8006172:	d503      	bpl.n	800617c <__sfp+0x24>
 8006174:	6833      	ldr	r3, [r6, #0]
 8006176:	b133      	cbz	r3, 8006186 <__sfp+0x2e>
 8006178:	6836      	ldr	r6, [r6, #0]
 800617a:	e7f7      	b.n	800616c <__sfp+0x14>
 800617c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006180:	b16d      	cbz	r5, 800619e <__sfp+0x46>
 8006182:	3468      	adds	r4, #104	; 0x68
 8006184:	e7f4      	b.n	8006170 <__sfp+0x18>
 8006186:	2104      	movs	r1, #4
 8006188:	4638      	mov	r0, r7
 800618a:	f7ff ff9f 	bl	80060cc <__sfmoreglue>
 800618e:	6030      	str	r0, [r6, #0]
 8006190:	2800      	cmp	r0, #0
 8006192:	d1f1      	bne.n	8006178 <__sfp+0x20>
 8006194:	230c      	movs	r3, #12
 8006196:	603b      	str	r3, [r7, #0]
 8006198:	4604      	mov	r4, r0
 800619a:	4620      	mov	r0, r4
 800619c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800619e:	4b0b      	ldr	r3, [pc, #44]	; (80061cc <__sfp+0x74>)
 80061a0:	6665      	str	r5, [r4, #100]	; 0x64
 80061a2:	e9c4 5500 	strd	r5, r5, [r4]
 80061a6:	60a5      	str	r5, [r4, #8]
 80061a8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80061ac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80061b0:	2208      	movs	r2, #8
 80061b2:	4629      	mov	r1, r5
 80061b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80061b8:	f7fe fa12 	bl	80045e0 <memset>
 80061bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80061c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80061c4:	e7e9      	b.n	800619a <__sfp+0x42>
 80061c6:	bf00      	nop
 80061c8:	08006f14 	.word	0x08006f14
 80061cc:	ffff0001 	.word	0xffff0001

080061d0 <_fwalk_reent>:
 80061d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061d4:	4680      	mov	r8, r0
 80061d6:	4689      	mov	r9, r1
 80061d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80061dc:	2600      	movs	r6, #0
 80061de:	b914      	cbnz	r4, 80061e6 <_fwalk_reent+0x16>
 80061e0:	4630      	mov	r0, r6
 80061e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061e6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80061ea:	3f01      	subs	r7, #1
 80061ec:	d501      	bpl.n	80061f2 <_fwalk_reent+0x22>
 80061ee:	6824      	ldr	r4, [r4, #0]
 80061f0:	e7f5      	b.n	80061de <_fwalk_reent+0xe>
 80061f2:	89ab      	ldrh	r3, [r5, #12]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d907      	bls.n	8006208 <_fwalk_reent+0x38>
 80061f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061fc:	3301      	adds	r3, #1
 80061fe:	d003      	beq.n	8006208 <_fwalk_reent+0x38>
 8006200:	4629      	mov	r1, r5
 8006202:	4640      	mov	r0, r8
 8006204:	47c8      	blx	r9
 8006206:	4306      	orrs	r6, r0
 8006208:	3568      	adds	r5, #104	; 0x68
 800620a:	e7ee      	b.n	80061ea <_fwalk_reent+0x1a>

0800620c <_localeconv_r>:
 800620c:	4b04      	ldr	r3, [pc, #16]	; (8006220 <_localeconv_r+0x14>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6a18      	ldr	r0, [r3, #32]
 8006212:	4b04      	ldr	r3, [pc, #16]	; (8006224 <_localeconv_r+0x18>)
 8006214:	2800      	cmp	r0, #0
 8006216:	bf08      	it	eq
 8006218:	4618      	moveq	r0, r3
 800621a:	30f0      	adds	r0, #240	; 0xf0
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	2000000c 	.word	0x2000000c
 8006224:	20000070 	.word	0x20000070

08006228 <__swhatbuf_r>:
 8006228:	b570      	push	{r4, r5, r6, lr}
 800622a:	460e      	mov	r6, r1
 800622c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006230:	2900      	cmp	r1, #0
 8006232:	b096      	sub	sp, #88	; 0x58
 8006234:	4614      	mov	r4, r2
 8006236:	461d      	mov	r5, r3
 8006238:	da07      	bge.n	800624a <__swhatbuf_r+0x22>
 800623a:	2300      	movs	r3, #0
 800623c:	602b      	str	r3, [r5, #0]
 800623e:	89b3      	ldrh	r3, [r6, #12]
 8006240:	061a      	lsls	r2, r3, #24
 8006242:	d410      	bmi.n	8006266 <__swhatbuf_r+0x3e>
 8006244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006248:	e00e      	b.n	8006268 <__swhatbuf_r+0x40>
 800624a:	466a      	mov	r2, sp
 800624c:	f000 fdaa 	bl	8006da4 <_fstat_r>
 8006250:	2800      	cmp	r0, #0
 8006252:	dbf2      	blt.n	800623a <__swhatbuf_r+0x12>
 8006254:	9a01      	ldr	r2, [sp, #4]
 8006256:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800625a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800625e:	425a      	negs	r2, r3
 8006260:	415a      	adcs	r2, r3
 8006262:	602a      	str	r2, [r5, #0]
 8006264:	e7ee      	b.n	8006244 <__swhatbuf_r+0x1c>
 8006266:	2340      	movs	r3, #64	; 0x40
 8006268:	2000      	movs	r0, #0
 800626a:	6023      	str	r3, [r4, #0]
 800626c:	b016      	add	sp, #88	; 0x58
 800626e:	bd70      	pop	{r4, r5, r6, pc}

08006270 <__smakebuf_r>:
 8006270:	898b      	ldrh	r3, [r1, #12]
 8006272:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006274:	079d      	lsls	r5, r3, #30
 8006276:	4606      	mov	r6, r0
 8006278:	460c      	mov	r4, r1
 800627a:	d507      	bpl.n	800628c <__smakebuf_r+0x1c>
 800627c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006280:	6023      	str	r3, [r4, #0]
 8006282:	6123      	str	r3, [r4, #16]
 8006284:	2301      	movs	r3, #1
 8006286:	6163      	str	r3, [r4, #20]
 8006288:	b002      	add	sp, #8
 800628a:	bd70      	pop	{r4, r5, r6, pc}
 800628c:	ab01      	add	r3, sp, #4
 800628e:	466a      	mov	r2, sp
 8006290:	f7ff ffca 	bl	8006228 <__swhatbuf_r>
 8006294:	9900      	ldr	r1, [sp, #0]
 8006296:	4605      	mov	r5, r0
 8006298:	4630      	mov	r0, r6
 800629a:	f000 fb73 	bl	8006984 <_malloc_r>
 800629e:	b948      	cbnz	r0, 80062b4 <__smakebuf_r+0x44>
 80062a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062a4:	059a      	lsls	r2, r3, #22
 80062a6:	d4ef      	bmi.n	8006288 <__smakebuf_r+0x18>
 80062a8:	f023 0303 	bic.w	r3, r3, #3
 80062ac:	f043 0302 	orr.w	r3, r3, #2
 80062b0:	81a3      	strh	r3, [r4, #12]
 80062b2:	e7e3      	b.n	800627c <__smakebuf_r+0xc>
 80062b4:	4b0d      	ldr	r3, [pc, #52]	; (80062ec <__smakebuf_r+0x7c>)
 80062b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80062b8:	89a3      	ldrh	r3, [r4, #12]
 80062ba:	6020      	str	r0, [r4, #0]
 80062bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c0:	81a3      	strh	r3, [r4, #12]
 80062c2:	9b00      	ldr	r3, [sp, #0]
 80062c4:	6163      	str	r3, [r4, #20]
 80062c6:	9b01      	ldr	r3, [sp, #4]
 80062c8:	6120      	str	r0, [r4, #16]
 80062ca:	b15b      	cbz	r3, 80062e4 <__smakebuf_r+0x74>
 80062cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062d0:	4630      	mov	r0, r6
 80062d2:	f000 fd79 	bl	8006dc8 <_isatty_r>
 80062d6:	b128      	cbz	r0, 80062e4 <__smakebuf_r+0x74>
 80062d8:	89a3      	ldrh	r3, [r4, #12]
 80062da:	f023 0303 	bic.w	r3, r3, #3
 80062de:	f043 0301 	orr.w	r3, r3, #1
 80062e2:	81a3      	strh	r3, [r4, #12]
 80062e4:	89a3      	ldrh	r3, [r4, #12]
 80062e6:	431d      	orrs	r5, r3
 80062e8:	81a5      	strh	r5, [r4, #12]
 80062ea:	e7cd      	b.n	8006288 <__smakebuf_r+0x18>
 80062ec:	080060c1 	.word	0x080060c1

080062f0 <malloc>:
 80062f0:	4b02      	ldr	r3, [pc, #8]	; (80062fc <malloc+0xc>)
 80062f2:	4601      	mov	r1, r0
 80062f4:	6818      	ldr	r0, [r3, #0]
 80062f6:	f000 bb45 	b.w	8006984 <_malloc_r>
 80062fa:	bf00      	nop
 80062fc:	2000000c 	.word	0x2000000c

08006300 <memcpy>:
 8006300:	b510      	push	{r4, lr}
 8006302:	1e43      	subs	r3, r0, #1
 8006304:	440a      	add	r2, r1
 8006306:	4291      	cmp	r1, r2
 8006308:	d100      	bne.n	800630c <memcpy+0xc>
 800630a:	bd10      	pop	{r4, pc}
 800630c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006310:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006314:	e7f7      	b.n	8006306 <memcpy+0x6>

08006316 <_Balloc>:
 8006316:	b570      	push	{r4, r5, r6, lr}
 8006318:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800631a:	4604      	mov	r4, r0
 800631c:	460e      	mov	r6, r1
 800631e:	b93d      	cbnz	r5, 8006330 <_Balloc+0x1a>
 8006320:	2010      	movs	r0, #16
 8006322:	f7ff ffe5 	bl	80062f0 <malloc>
 8006326:	6260      	str	r0, [r4, #36]	; 0x24
 8006328:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800632c:	6005      	str	r5, [r0, #0]
 800632e:	60c5      	str	r5, [r0, #12]
 8006330:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006332:	68eb      	ldr	r3, [r5, #12]
 8006334:	b183      	cbz	r3, 8006358 <_Balloc+0x42>
 8006336:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800633e:	b9b8      	cbnz	r0, 8006370 <_Balloc+0x5a>
 8006340:	2101      	movs	r1, #1
 8006342:	fa01 f506 	lsl.w	r5, r1, r6
 8006346:	1d6a      	adds	r2, r5, #5
 8006348:	0092      	lsls	r2, r2, #2
 800634a:	4620      	mov	r0, r4
 800634c:	f000 fabe 	bl	80068cc <_calloc_r>
 8006350:	b160      	cbz	r0, 800636c <_Balloc+0x56>
 8006352:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006356:	e00e      	b.n	8006376 <_Balloc+0x60>
 8006358:	2221      	movs	r2, #33	; 0x21
 800635a:	2104      	movs	r1, #4
 800635c:	4620      	mov	r0, r4
 800635e:	f000 fab5 	bl	80068cc <_calloc_r>
 8006362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006364:	60e8      	str	r0, [r5, #12]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1e4      	bne.n	8006336 <_Balloc+0x20>
 800636c:	2000      	movs	r0, #0
 800636e:	bd70      	pop	{r4, r5, r6, pc}
 8006370:	6802      	ldr	r2, [r0, #0]
 8006372:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006376:	2300      	movs	r3, #0
 8006378:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800637c:	e7f7      	b.n	800636e <_Balloc+0x58>

0800637e <_Bfree>:
 800637e:	b570      	push	{r4, r5, r6, lr}
 8006380:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006382:	4606      	mov	r6, r0
 8006384:	460d      	mov	r5, r1
 8006386:	b93c      	cbnz	r4, 8006398 <_Bfree+0x1a>
 8006388:	2010      	movs	r0, #16
 800638a:	f7ff ffb1 	bl	80062f0 <malloc>
 800638e:	6270      	str	r0, [r6, #36]	; 0x24
 8006390:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006394:	6004      	str	r4, [r0, #0]
 8006396:	60c4      	str	r4, [r0, #12]
 8006398:	b13d      	cbz	r5, 80063aa <_Bfree+0x2c>
 800639a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800639c:	686a      	ldr	r2, [r5, #4]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063a4:	6029      	str	r1, [r5, #0]
 80063a6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80063aa:	bd70      	pop	{r4, r5, r6, pc}

080063ac <__multadd>:
 80063ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063b0:	690d      	ldr	r5, [r1, #16]
 80063b2:	461f      	mov	r7, r3
 80063b4:	4606      	mov	r6, r0
 80063b6:	460c      	mov	r4, r1
 80063b8:	f101 0c14 	add.w	ip, r1, #20
 80063bc:	2300      	movs	r3, #0
 80063be:	f8dc 0000 	ldr.w	r0, [ip]
 80063c2:	b281      	uxth	r1, r0
 80063c4:	fb02 7101 	mla	r1, r2, r1, r7
 80063c8:	0c0f      	lsrs	r7, r1, #16
 80063ca:	0c00      	lsrs	r0, r0, #16
 80063cc:	fb02 7000 	mla	r0, r2, r0, r7
 80063d0:	b289      	uxth	r1, r1
 80063d2:	3301      	adds	r3, #1
 80063d4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80063d8:	429d      	cmp	r5, r3
 80063da:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80063de:	f84c 1b04 	str.w	r1, [ip], #4
 80063e2:	dcec      	bgt.n	80063be <__multadd+0x12>
 80063e4:	b1d7      	cbz	r7, 800641c <__multadd+0x70>
 80063e6:	68a3      	ldr	r3, [r4, #8]
 80063e8:	42ab      	cmp	r3, r5
 80063ea:	dc12      	bgt.n	8006412 <__multadd+0x66>
 80063ec:	6861      	ldr	r1, [r4, #4]
 80063ee:	4630      	mov	r0, r6
 80063f0:	3101      	adds	r1, #1
 80063f2:	f7ff ff90 	bl	8006316 <_Balloc>
 80063f6:	6922      	ldr	r2, [r4, #16]
 80063f8:	3202      	adds	r2, #2
 80063fa:	f104 010c 	add.w	r1, r4, #12
 80063fe:	4680      	mov	r8, r0
 8006400:	0092      	lsls	r2, r2, #2
 8006402:	300c      	adds	r0, #12
 8006404:	f7ff ff7c 	bl	8006300 <memcpy>
 8006408:	4621      	mov	r1, r4
 800640a:	4630      	mov	r0, r6
 800640c:	f7ff ffb7 	bl	800637e <_Bfree>
 8006410:	4644      	mov	r4, r8
 8006412:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006416:	3501      	adds	r5, #1
 8006418:	615f      	str	r7, [r3, #20]
 800641a:	6125      	str	r5, [r4, #16]
 800641c:	4620      	mov	r0, r4
 800641e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006422 <__hi0bits>:
 8006422:	0c02      	lsrs	r2, r0, #16
 8006424:	0412      	lsls	r2, r2, #16
 8006426:	4603      	mov	r3, r0
 8006428:	b9b2      	cbnz	r2, 8006458 <__hi0bits+0x36>
 800642a:	0403      	lsls	r3, r0, #16
 800642c:	2010      	movs	r0, #16
 800642e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006432:	bf04      	itt	eq
 8006434:	021b      	lsleq	r3, r3, #8
 8006436:	3008      	addeq	r0, #8
 8006438:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800643c:	bf04      	itt	eq
 800643e:	011b      	lsleq	r3, r3, #4
 8006440:	3004      	addeq	r0, #4
 8006442:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006446:	bf04      	itt	eq
 8006448:	009b      	lsleq	r3, r3, #2
 800644a:	3002      	addeq	r0, #2
 800644c:	2b00      	cmp	r3, #0
 800644e:	db06      	blt.n	800645e <__hi0bits+0x3c>
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	d503      	bpl.n	800645c <__hi0bits+0x3a>
 8006454:	3001      	adds	r0, #1
 8006456:	4770      	bx	lr
 8006458:	2000      	movs	r0, #0
 800645a:	e7e8      	b.n	800642e <__hi0bits+0xc>
 800645c:	2020      	movs	r0, #32
 800645e:	4770      	bx	lr

08006460 <__lo0bits>:
 8006460:	6803      	ldr	r3, [r0, #0]
 8006462:	f013 0207 	ands.w	r2, r3, #7
 8006466:	4601      	mov	r1, r0
 8006468:	d00b      	beq.n	8006482 <__lo0bits+0x22>
 800646a:	07da      	lsls	r2, r3, #31
 800646c:	d423      	bmi.n	80064b6 <__lo0bits+0x56>
 800646e:	0798      	lsls	r0, r3, #30
 8006470:	bf49      	itett	mi
 8006472:	085b      	lsrmi	r3, r3, #1
 8006474:	089b      	lsrpl	r3, r3, #2
 8006476:	2001      	movmi	r0, #1
 8006478:	600b      	strmi	r3, [r1, #0]
 800647a:	bf5c      	itt	pl
 800647c:	600b      	strpl	r3, [r1, #0]
 800647e:	2002      	movpl	r0, #2
 8006480:	4770      	bx	lr
 8006482:	b298      	uxth	r0, r3
 8006484:	b9a8      	cbnz	r0, 80064b2 <__lo0bits+0x52>
 8006486:	0c1b      	lsrs	r3, r3, #16
 8006488:	2010      	movs	r0, #16
 800648a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800648e:	bf04      	itt	eq
 8006490:	0a1b      	lsreq	r3, r3, #8
 8006492:	3008      	addeq	r0, #8
 8006494:	071a      	lsls	r2, r3, #28
 8006496:	bf04      	itt	eq
 8006498:	091b      	lsreq	r3, r3, #4
 800649a:	3004      	addeq	r0, #4
 800649c:	079a      	lsls	r2, r3, #30
 800649e:	bf04      	itt	eq
 80064a0:	089b      	lsreq	r3, r3, #2
 80064a2:	3002      	addeq	r0, #2
 80064a4:	07da      	lsls	r2, r3, #31
 80064a6:	d402      	bmi.n	80064ae <__lo0bits+0x4e>
 80064a8:	085b      	lsrs	r3, r3, #1
 80064aa:	d006      	beq.n	80064ba <__lo0bits+0x5a>
 80064ac:	3001      	adds	r0, #1
 80064ae:	600b      	str	r3, [r1, #0]
 80064b0:	4770      	bx	lr
 80064b2:	4610      	mov	r0, r2
 80064b4:	e7e9      	b.n	800648a <__lo0bits+0x2a>
 80064b6:	2000      	movs	r0, #0
 80064b8:	4770      	bx	lr
 80064ba:	2020      	movs	r0, #32
 80064bc:	4770      	bx	lr

080064be <__i2b>:
 80064be:	b510      	push	{r4, lr}
 80064c0:	460c      	mov	r4, r1
 80064c2:	2101      	movs	r1, #1
 80064c4:	f7ff ff27 	bl	8006316 <_Balloc>
 80064c8:	2201      	movs	r2, #1
 80064ca:	6144      	str	r4, [r0, #20]
 80064cc:	6102      	str	r2, [r0, #16]
 80064ce:	bd10      	pop	{r4, pc}

080064d0 <__multiply>:
 80064d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d4:	4614      	mov	r4, r2
 80064d6:	690a      	ldr	r2, [r1, #16]
 80064d8:	6923      	ldr	r3, [r4, #16]
 80064da:	429a      	cmp	r2, r3
 80064dc:	bfb8      	it	lt
 80064de:	460b      	movlt	r3, r1
 80064e0:	4688      	mov	r8, r1
 80064e2:	bfbc      	itt	lt
 80064e4:	46a0      	movlt	r8, r4
 80064e6:	461c      	movlt	r4, r3
 80064e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80064ec:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80064f0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80064f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80064f8:	eb07 0609 	add.w	r6, r7, r9
 80064fc:	42b3      	cmp	r3, r6
 80064fe:	bfb8      	it	lt
 8006500:	3101      	addlt	r1, #1
 8006502:	f7ff ff08 	bl	8006316 <_Balloc>
 8006506:	f100 0514 	add.w	r5, r0, #20
 800650a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800650e:	462b      	mov	r3, r5
 8006510:	2200      	movs	r2, #0
 8006512:	4573      	cmp	r3, lr
 8006514:	d316      	bcc.n	8006544 <__multiply+0x74>
 8006516:	f104 0214 	add.w	r2, r4, #20
 800651a:	f108 0114 	add.w	r1, r8, #20
 800651e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006522:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	9b00      	ldr	r3, [sp, #0]
 800652a:	9201      	str	r2, [sp, #4]
 800652c:	4293      	cmp	r3, r2
 800652e:	d80c      	bhi.n	800654a <__multiply+0x7a>
 8006530:	2e00      	cmp	r6, #0
 8006532:	dd03      	ble.n	800653c <__multiply+0x6c>
 8006534:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006538:	2b00      	cmp	r3, #0
 800653a:	d05d      	beq.n	80065f8 <__multiply+0x128>
 800653c:	6106      	str	r6, [r0, #16]
 800653e:	b003      	add	sp, #12
 8006540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006544:	f843 2b04 	str.w	r2, [r3], #4
 8006548:	e7e3      	b.n	8006512 <__multiply+0x42>
 800654a:	f8b2 b000 	ldrh.w	fp, [r2]
 800654e:	f1bb 0f00 	cmp.w	fp, #0
 8006552:	d023      	beq.n	800659c <__multiply+0xcc>
 8006554:	4689      	mov	r9, r1
 8006556:	46ac      	mov	ip, r5
 8006558:	f04f 0800 	mov.w	r8, #0
 800655c:	f859 4b04 	ldr.w	r4, [r9], #4
 8006560:	f8dc a000 	ldr.w	sl, [ip]
 8006564:	b2a3      	uxth	r3, r4
 8006566:	fa1f fa8a 	uxth.w	sl, sl
 800656a:	fb0b a303 	mla	r3, fp, r3, sl
 800656e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006572:	f8dc 4000 	ldr.w	r4, [ip]
 8006576:	4443      	add	r3, r8
 8006578:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800657c:	fb0b 840a 	mla	r4, fp, sl, r8
 8006580:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006584:	46e2      	mov	sl, ip
 8006586:	b29b      	uxth	r3, r3
 8006588:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800658c:	454f      	cmp	r7, r9
 800658e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006592:	f84a 3b04 	str.w	r3, [sl], #4
 8006596:	d82b      	bhi.n	80065f0 <__multiply+0x120>
 8006598:	f8cc 8004 	str.w	r8, [ip, #4]
 800659c:	9b01      	ldr	r3, [sp, #4]
 800659e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80065a2:	3204      	adds	r2, #4
 80065a4:	f1ba 0f00 	cmp.w	sl, #0
 80065a8:	d020      	beq.n	80065ec <__multiply+0x11c>
 80065aa:	682b      	ldr	r3, [r5, #0]
 80065ac:	4689      	mov	r9, r1
 80065ae:	46a8      	mov	r8, r5
 80065b0:	f04f 0b00 	mov.w	fp, #0
 80065b4:	f8b9 c000 	ldrh.w	ip, [r9]
 80065b8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80065bc:	fb0a 440c 	mla	r4, sl, ip, r4
 80065c0:	445c      	add	r4, fp
 80065c2:	46c4      	mov	ip, r8
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80065ca:	f84c 3b04 	str.w	r3, [ip], #4
 80065ce:	f859 3b04 	ldr.w	r3, [r9], #4
 80065d2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80065d6:	0c1b      	lsrs	r3, r3, #16
 80065d8:	fb0a b303 	mla	r3, sl, r3, fp
 80065dc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80065e0:	454f      	cmp	r7, r9
 80065e2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80065e6:	d805      	bhi.n	80065f4 <__multiply+0x124>
 80065e8:	f8c8 3004 	str.w	r3, [r8, #4]
 80065ec:	3504      	adds	r5, #4
 80065ee:	e79b      	b.n	8006528 <__multiply+0x58>
 80065f0:	46d4      	mov	ip, sl
 80065f2:	e7b3      	b.n	800655c <__multiply+0x8c>
 80065f4:	46e0      	mov	r8, ip
 80065f6:	e7dd      	b.n	80065b4 <__multiply+0xe4>
 80065f8:	3e01      	subs	r6, #1
 80065fa:	e799      	b.n	8006530 <__multiply+0x60>

080065fc <__pow5mult>:
 80065fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006600:	4615      	mov	r5, r2
 8006602:	f012 0203 	ands.w	r2, r2, #3
 8006606:	4606      	mov	r6, r0
 8006608:	460f      	mov	r7, r1
 800660a:	d007      	beq.n	800661c <__pow5mult+0x20>
 800660c:	3a01      	subs	r2, #1
 800660e:	4c21      	ldr	r4, [pc, #132]	; (8006694 <__pow5mult+0x98>)
 8006610:	2300      	movs	r3, #0
 8006612:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006616:	f7ff fec9 	bl	80063ac <__multadd>
 800661a:	4607      	mov	r7, r0
 800661c:	10ad      	asrs	r5, r5, #2
 800661e:	d035      	beq.n	800668c <__pow5mult+0x90>
 8006620:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006622:	b93c      	cbnz	r4, 8006634 <__pow5mult+0x38>
 8006624:	2010      	movs	r0, #16
 8006626:	f7ff fe63 	bl	80062f0 <malloc>
 800662a:	6270      	str	r0, [r6, #36]	; 0x24
 800662c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006630:	6004      	str	r4, [r0, #0]
 8006632:	60c4      	str	r4, [r0, #12]
 8006634:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006638:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800663c:	b94c      	cbnz	r4, 8006652 <__pow5mult+0x56>
 800663e:	f240 2171 	movw	r1, #625	; 0x271
 8006642:	4630      	mov	r0, r6
 8006644:	f7ff ff3b 	bl	80064be <__i2b>
 8006648:	2300      	movs	r3, #0
 800664a:	f8c8 0008 	str.w	r0, [r8, #8]
 800664e:	4604      	mov	r4, r0
 8006650:	6003      	str	r3, [r0, #0]
 8006652:	f04f 0800 	mov.w	r8, #0
 8006656:	07eb      	lsls	r3, r5, #31
 8006658:	d50a      	bpl.n	8006670 <__pow5mult+0x74>
 800665a:	4639      	mov	r1, r7
 800665c:	4622      	mov	r2, r4
 800665e:	4630      	mov	r0, r6
 8006660:	f7ff ff36 	bl	80064d0 <__multiply>
 8006664:	4639      	mov	r1, r7
 8006666:	4681      	mov	r9, r0
 8006668:	4630      	mov	r0, r6
 800666a:	f7ff fe88 	bl	800637e <_Bfree>
 800666e:	464f      	mov	r7, r9
 8006670:	106d      	asrs	r5, r5, #1
 8006672:	d00b      	beq.n	800668c <__pow5mult+0x90>
 8006674:	6820      	ldr	r0, [r4, #0]
 8006676:	b938      	cbnz	r0, 8006688 <__pow5mult+0x8c>
 8006678:	4622      	mov	r2, r4
 800667a:	4621      	mov	r1, r4
 800667c:	4630      	mov	r0, r6
 800667e:	f7ff ff27 	bl	80064d0 <__multiply>
 8006682:	6020      	str	r0, [r4, #0]
 8006684:	f8c0 8000 	str.w	r8, [r0]
 8006688:	4604      	mov	r4, r0
 800668a:	e7e4      	b.n	8006656 <__pow5mult+0x5a>
 800668c:	4638      	mov	r0, r7
 800668e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006692:	bf00      	nop
 8006694:	080070b0 	.word	0x080070b0

08006698 <__lshift>:
 8006698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800669c:	460c      	mov	r4, r1
 800669e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80066a2:	6923      	ldr	r3, [r4, #16]
 80066a4:	6849      	ldr	r1, [r1, #4]
 80066a6:	eb0a 0903 	add.w	r9, sl, r3
 80066aa:	68a3      	ldr	r3, [r4, #8]
 80066ac:	4607      	mov	r7, r0
 80066ae:	4616      	mov	r6, r2
 80066b0:	f109 0501 	add.w	r5, r9, #1
 80066b4:	42ab      	cmp	r3, r5
 80066b6:	db32      	blt.n	800671e <__lshift+0x86>
 80066b8:	4638      	mov	r0, r7
 80066ba:	f7ff fe2c 	bl	8006316 <_Balloc>
 80066be:	2300      	movs	r3, #0
 80066c0:	4680      	mov	r8, r0
 80066c2:	f100 0114 	add.w	r1, r0, #20
 80066c6:	461a      	mov	r2, r3
 80066c8:	4553      	cmp	r3, sl
 80066ca:	db2b      	blt.n	8006724 <__lshift+0x8c>
 80066cc:	6920      	ldr	r0, [r4, #16]
 80066ce:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066d2:	f104 0314 	add.w	r3, r4, #20
 80066d6:	f016 021f 	ands.w	r2, r6, #31
 80066da:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066de:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80066e2:	d025      	beq.n	8006730 <__lshift+0x98>
 80066e4:	f1c2 0e20 	rsb	lr, r2, #32
 80066e8:	2000      	movs	r0, #0
 80066ea:	681e      	ldr	r6, [r3, #0]
 80066ec:	468a      	mov	sl, r1
 80066ee:	4096      	lsls	r6, r2
 80066f0:	4330      	orrs	r0, r6
 80066f2:	f84a 0b04 	str.w	r0, [sl], #4
 80066f6:	f853 0b04 	ldr.w	r0, [r3], #4
 80066fa:	459c      	cmp	ip, r3
 80066fc:	fa20 f00e 	lsr.w	r0, r0, lr
 8006700:	d814      	bhi.n	800672c <__lshift+0x94>
 8006702:	6048      	str	r0, [r1, #4]
 8006704:	b108      	cbz	r0, 800670a <__lshift+0x72>
 8006706:	f109 0502 	add.w	r5, r9, #2
 800670a:	3d01      	subs	r5, #1
 800670c:	4638      	mov	r0, r7
 800670e:	f8c8 5010 	str.w	r5, [r8, #16]
 8006712:	4621      	mov	r1, r4
 8006714:	f7ff fe33 	bl	800637e <_Bfree>
 8006718:	4640      	mov	r0, r8
 800671a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800671e:	3101      	adds	r1, #1
 8006720:	005b      	lsls	r3, r3, #1
 8006722:	e7c7      	b.n	80066b4 <__lshift+0x1c>
 8006724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006728:	3301      	adds	r3, #1
 800672a:	e7cd      	b.n	80066c8 <__lshift+0x30>
 800672c:	4651      	mov	r1, sl
 800672e:	e7dc      	b.n	80066ea <__lshift+0x52>
 8006730:	3904      	subs	r1, #4
 8006732:	f853 2b04 	ldr.w	r2, [r3], #4
 8006736:	f841 2f04 	str.w	r2, [r1, #4]!
 800673a:	459c      	cmp	ip, r3
 800673c:	d8f9      	bhi.n	8006732 <__lshift+0x9a>
 800673e:	e7e4      	b.n	800670a <__lshift+0x72>

08006740 <__mcmp>:
 8006740:	6903      	ldr	r3, [r0, #16]
 8006742:	690a      	ldr	r2, [r1, #16]
 8006744:	1a9b      	subs	r3, r3, r2
 8006746:	b530      	push	{r4, r5, lr}
 8006748:	d10c      	bne.n	8006764 <__mcmp+0x24>
 800674a:	0092      	lsls	r2, r2, #2
 800674c:	3014      	adds	r0, #20
 800674e:	3114      	adds	r1, #20
 8006750:	1884      	adds	r4, r0, r2
 8006752:	4411      	add	r1, r2
 8006754:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006758:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800675c:	4295      	cmp	r5, r2
 800675e:	d003      	beq.n	8006768 <__mcmp+0x28>
 8006760:	d305      	bcc.n	800676e <__mcmp+0x2e>
 8006762:	2301      	movs	r3, #1
 8006764:	4618      	mov	r0, r3
 8006766:	bd30      	pop	{r4, r5, pc}
 8006768:	42a0      	cmp	r0, r4
 800676a:	d3f3      	bcc.n	8006754 <__mcmp+0x14>
 800676c:	e7fa      	b.n	8006764 <__mcmp+0x24>
 800676e:	f04f 33ff 	mov.w	r3, #4294967295
 8006772:	e7f7      	b.n	8006764 <__mcmp+0x24>

08006774 <__mdiff>:
 8006774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006778:	460d      	mov	r5, r1
 800677a:	4607      	mov	r7, r0
 800677c:	4611      	mov	r1, r2
 800677e:	4628      	mov	r0, r5
 8006780:	4614      	mov	r4, r2
 8006782:	f7ff ffdd 	bl	8006740 <__mcmp>
 8006786:	1e06      	subs	r6, r0, #0
 8006788:	d108      	bne.n	800679c <__mdiff+0x28>
 800678a:	4631      	mov	r1, r6
 800678c:	4638      	mov	r0, r7
 800678e:	f7ff fdc2 	bl	8006316 <_Balloc>
 8006792:	2301      	movs	r3, #1
 8006794:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800679c:	bfa4      	itt	ge
 800679e:	4623      	movge	r3, r4
 80067a0:	462c      	movge	r4, r5
 80067a2:	4638      	mov	r0, r7
 80067a4:	6861      	ldr	r1, [r4, #4]
 80067a6:	bfa6      	itte	ge
 80067a8:	461d      	movge	r5, r3
 80067aa:	2600      	movge	r6, #0
 80067ac:	2601      	movlt	r6, #1
 80067ae:	f7ff fdb2 	bl	8006316 <_Balloc>
 80067b2:	692b      	ldr	r3, [r5, #16]
 80067b4:	60c6      	str	r6, [r0, #12]
 80067b6:	6926      	ldr	r6, [r4, #16]
 80067b8:	f105 0914 	add.w	r9, r5, #20
 80067bc:	f104 0214 	add.w	r2, r4, #20
 80067c0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80067c4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80067c8:	f100 0514 	add.w	r5, r0, #20
 80067cc:	f04f 0e00 	mov.w	lr, #0
 80067d0:	f852 ab04 	ldr.w	sl, [r2], #4
 80067d4:	f859 4b04 	ldr.w	r4, [r9], #4
 80067d8:	fa1e f18a 	uxtah	r1, lr, sl
 80067dc:	b2a3      	uxth	r3, r4
 80067de:	1ac9      	subs	r1, r1, r3
 80067e0:	0c23      	lsrs	r3, r4, #16
 80067e2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80067e6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80067ea:	b289      	uxth	r1, r1
 80067ec:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80067f0:	45c8      	cmp	r8, r9
 80067f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80067f6:	4694      	mov	ip, r2
 80067f8:	f845 3b04 	str.w	r3, [r5], #4
 80067fc:	d8e8      	bhi.n	80067d0 <__mdiff+0x5c>
 80067fe:	45bc      	cmp	ip, r7
 8006800:	d304      	bcc.n	800680c <__mdiff+0x98>
 8006802:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006806:	b183      	cbz	r3, 800682a <__mdiff+0xb6>
 8006808:	6106      	str	r6, [r0, #16]
 800680a:	e7c5      	b.n	8006798 <__mdiff+0x24>
 800680c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006810:	fa1e f381 	uxtah	r3, lr, r1
 8006814:	141a      	asrs	r2, r3, #16
 8006816:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800681a:	b29b      	uxth	r3, r3
 800681c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006820:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006824:	f845 3b04 	str.w	r3, [r5], #4
 8006828:	e7e9      	b.n	80067fe <__mdiff+0x8a>
 800682a:	3e01      	subs	r6, #1
 800682c:	e7e9      	b.n	8006802 <__mdiff+0x8e>

0800682e <__d2b>:
 800682e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006832:	460e      	mov	r6, r1
 8006834:	2101      	movs	r1, #1
 8006836:	ec59 8b10 	vmov	r8, r9, d0
 800683a:	4615      	mov	r5, r2
 800683c:	f7ff fd6b 	bl	8006316 <_Balloc>
 8006840:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006844:	4607      	mov	r7, r0
 8006846:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800684a:	bb34      	cbnz	r4, 800689a <__d2b+0x6c>
 800684c:	9301      	str	r3, [sp, #4]
 800684e:	f1b8 0300 	subs.w	r3, r8, #0
 8006852:	d027      	beq.n	80068a4 <__d2b+0x76>
 8006854:	a802      	add	r0, sp, #8
 8006856:	f840 3d08 	str.w	r3, [r0, #-8]!
 800685a:	f7ff fe01 	bl	8006460 <__lo0bits>
 800685e:	9900      	ldr	r1, [sp, #0]
 8006860:	b1f0      	cbz	r0, 80068a0 <__d2b+0x72>
 8006862:	9a01      	ldr	r2, [sp, #4]
 8006864:	f1c0 0320 	rsb	r3, r0, #32
 8006868:	fa02 f303 	lsl.w	r3, r2, r3
 800686c:	430b      	orrs	r3, r1
 800686e:	40c2      	lsrs	r2, r0
 8006870:	617b      	str	r3, [r7, #20]
 8006872:	9201      	str	r2, [sp, #4]
 8006874:	9b01      	ldr	r3, [sp, #4]
 8006876:	61bb      	str	r3, [r7, #24]
 8006878:	2b00      	cmp	r3, #0
 800687a:	bf14      	ite	ne
 800687c:	2102      	movne	r1, #2
 800687e:	2101      	moveq	r1, #1
 8006880:	6139      	str	r1, [r7, #16]
 8006882:	b1c4      	cbz	r4, 80068b6 <__d2b+0x88>
 8006884:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006888:	4404      	add	r4, r0
 800688a:	6034      	str	r4, [r6, #0]
 800688c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006890:	6028      	str	r0, [r5, #0]
 8006892:	4638      	mov	r0, r7
 8006894:	b003      	add	sp, #12
 8006896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800689a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800689e:	e7d5      	b.n	800684c <__d2b+0x1e>
 80068a0:	6179      	str	r1, [r7, #20]
 80068a2:	e7e7      	b.n	8006874 <__d2b+0x46>
 80068a4:	a801      	add	r0, sp, #4
 80068a6:	f7ff fddb 	bl	8006460 <__lo0bits>
 80068aa:	9b01      	ldr	r3, [sp, #4]
 80068ac:	617b      	str	r3, [r7, #20]
 80068ae:	2101      	movs	r1, #1
 80068b0:	6139      	str	r1, [r7, #16]
 80068b2:	3020      	adds	r0, #32
 80068b4:	e7e5      	b.n	8006882 <__d2b+0x54>
 80068b6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80068ba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80068be:	6030      	str	r0, [r6, #0]
 80068c0:	6918      	ldr	r0, [r3, #16]
 80068c2:	f7ff fdae 	bl	8006422 <__hi0bits>
 80068c6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80068ca:	e7e1      	b.n	8006890 <__d2b+0x62>

080068cc <_calloc_r>:
 80068cc:	b538      	push	{r3, r4, r5, lr}
 80068ce:	fb02 f401 	mul.w	r4, r2, r1
 80068d2:	4621      	mov	r1, r4
 80068d4:	f000 f856 	bl	8006984 <_malloc_r>
 80068d8:	4605      	mov	r5, r0
 80068da:	b118      	cbz	r0, 80068e4 <_calloc_r+0x18>
 80068dc:	4622      	mov	r2, r4
 80068de:	2100      	movs	r1, #0
 80068e0:	f7fd fe7e 	bl	80045e0 <memset>
 80068e4:	4628      	mov	r0, r5
 80068e6:	bd38      	pop	{r3, r4, r5, pc}

080068e8 <_free_r>:
 80068e8:	b538      	push	{r3, r4, r5, lr}
 80068ea:	4605      	mov	r5, r0
 80068ec:	2900      	cmp	r1, #0
 80068ee:	d045      	beq.n	800697c <_free_r+0x94>
 80068f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068f4:	1f0c      	subs	r4, r1, #4
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	bfb8      	it	lt
 80068fa:	18e4      	addlt	r4, r4, r3
 80068fc:	f000 fa98 	bl	8006e30 <__malloc_lock>
 8006900:	4a1f      	ldr	r2, [pc, #124]	; (8006980 <_free_r+0x98>)
 8006902:	6813      	ldr	r3, [r2, #0]
 8006904:	4610      	mov	r0, r2
 8006906:	b933      	cbnz	r3, 8006916 <_free_r+0x2e>
 8006908:	6063      	str	r3, [r4, #4]
 800690a:	6014      	str	r4, [r2, #0]
 800690c:	4628      	mov	r0, r5
 800690e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006912:	f000 ba8e 	b.w	8006e32 <__malloc_unlock>
 8006916:	42a3      	cmp	r3, r4
 8006918:	d90c      	bls.n	8006934 <_free_r+0x4c>
 800691a:	6821      	ldr	r1, [r4, #0]
 800691c:	1862      	adds	r2, r4, r1
 800691e:	4293      	cmp	r3, r2
 8006920:	bf04      	itt	eq
 8006922:	681a      	ldreq	r2, [r3, #0]
 8006924:	685b      	ldreq	r3, [r3, #4]
 8006926:	6063      	str	r3, [r4, #4]
 8006928:	bf04      	itt	eq
 800692a:	1852      	addeq	r2, r2, r1
 800692c:	6022      	streq	r2, [r4, #0]
 800692e:	6004      	str	r4, [r0, #0]
 8006930:	e7ec      	b.n	800690c <_free_r+0x24>
 8006932:	4613      	mov	r3, r2
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	b10a      	cbz	r2, 800693c <_free_r+0x54>
 8006938:	42a2      	cmp	r2, r4
 800693a:	d9fa      	bls.n	8006932 <_free_r+0x4a>
 800693c:	6819      	ldr	r1, [r3, #0]
 800693e:	1858      	adds	r0, r3, r1
 8006940:	42a0      	cmp	r0, r4
 8006942:	d10b      	bne.n	800695c <_free_r+0x74>
 8006944:	6820      	ldr	r0, [r4, #0]
 8006946:	4401      	add	r1, r0
 8006948:	1858      	adds	r0, r3, r1
 800694a:	4282      	cmp	r2, r0
 800694c:	6019      	str	r1, [r3, #0]
 800694e:	d1dd      	bne.n	800690c <_free_r+0x24>
 8006950:	6810      	ldr	r0, [r2, #0]
 8006952:	6852      	ldr	r2, [r2, #4]
 8006954:	605a      	str	r2, [r3, #4]
 8006956:	4401      	add	r1, r0
 8006958:	6019      	str	r1, [r3, #0]
 800695a:	e7d7      	b.n	800690c <_free_r+0x24>
 800695c:	d902      	bls.n	8006964 <_free_r+0x7c>
 800695e:	230c      	movs	r3, #12
 8006960:	602b      	str	r3, [r5, #0]
 8006962:	e7d3      	b.n	800690c <_free_r+0x24>
 8006964:	6820      	ldr	r0, [r4, #0]
 8006966:	1821      	adds	r1, r4, r0
 8006968:	428a      	cmp	r2, r1
 800696a:	bf04      	itt	eq
 800696c:	6811      	ldreq	r1, [r2, #0]
 800696e:	6852      	ldreq	r2, [r2, #4]
 8006970:	6062      	str	r2, [r4, #4]
 8006972:	bf04      	itt	eq
 8006974:	1809      	addeq	r1, r1, r0
 8006976:	6021      	streq	r1, [r4, #0]
 8006978:	605c      	str	r4, [r3, #4]
 800697a:	e7c7      	b.n	800690c <_free_r+0x24>
 800697c:	bd38      	pop	{r3, r4, r5, pc}
 800697e:	bf00      	nop
 8006980:	20000208 	.word	0x20000208

08006984 <_malloc_r>:
 8006984:	b570      	push	{r4, r5, r6, lr}
 8006986:	1ccd      	adds	r5, r1, #3
 8006988:	f025 0503 	bic.w	r5, r5, #3
 800698c:	3508      	adds	r5, #8
 800698e:	2d0c      	cmp	r5, #12
 8006990:	bf38      	it	cc
 8006992:	250c      	movcc	r5, #12
 8006994:	2d00      	cmp	r5, #0
 8006996:	4606      	mov	r6, r0
 8006998:	db01      	blt.n	800699e <_malloc_r+0x1a>
 800699a:	42a9      	cmp	r1, r5
 800699c:	d903      	bls.n	80069a6 <_malloc_r+0x22>
 800699e:	230c      	movs	r3, #12
 80069a0:	6033      	str	r3, [r6, #0]
 80069a2:	2000      	movs	r0, #0
 80069a4:	bd70      	pop	{r4, r5, r6, pc}
 80069a6:	f000 fa43 	bl	8006e30 <__malloc_lock>
 80069aa:	4a21      	ldr	r2, [pc, #132]	; (8006a30 <_malloc_r+0xac>)
 80069ac:	6814      	ldr	r4, [r2, #0]
 80069ae:	4621      	mov	r1, r4
 80069b0:	b991      	cbnz	r1, 80069d8 <_malloc_r+0x54>
 80069b2:	4c20      	ldr	r4, [pc, #128]	; (8006a34 <_malloc_r+0xb0>)
 80069b4:	6823      	ldr	r3, [r4, #0]
 80069b6:	b91b      	cbnz	r3, 80069c0 <_malloc_r+0x3c>
 80069b8:	4630      	mov	r0, r6
 80069ba:	f000 f97d 	bl	8006cb8 <_sbrk_r>
 80069be:	6020      	str	r0, [r4, #0]
 80069c0:	4629      	mov	r1, r5
 80069c2:	4630      	mov	r0, r6
 80069c4:	f000 f978 	bl	8006cb8 <_sbrk_r>
 80069c8:	1c43      	adds	r3, r0, #1
 80069ca:	d124      	bne.n	8006a16 <_malloc_r+0x92>
 80069cc:	230c      	movs	r3, #12
 80069ce:	6033      	str	r3, [r6, #0]
 80069d0:	4630      	mov	r0, r6
 80069d2:	f000 fa2e 	bl	8006e32 <__malloc_unlock>
 80069d6:	e7e4      	b.n	80069a2 <_malloc_r+0x1e>
 80069d8:	680b      	ldr	r3, [r1, #0]
 80069da:	1b5b      	subs	r3, r3, r5
 80069dc:	d418      	bmi.n	8006a10 <_malloc_r+0x8c>
 80069de:	2b0b      	cmp	r3, #11
 80069e0:	d90f      	bls.n	8006a02 <_malloc_r+0x7e>
 80069e2:	600b      	str	r3, [r1, #0]
 80069e4:	50cd      	str	r5, [r1, r3]
 80069e6:	18cc      	adds	r4, r1, r3
 80069e8:	4630      	mov	r0, r6
 80069ea:	f000 fa22 	bl	8006e32 <__malloc_unlock>
 80069ee:	f104 000b 	add.w	r0, r4, #11
 80069f2:	1d23      	adds	r3, r4, #4
 80069f4:	f020 0007 	bic.w	r0, r0, #7
 80069f8:	1ac3      	subs	r3, r0, r3
 80069fa:	d0d3      	beq.n	80069a4 <_malloc_r+0x20>
 80069fc:	425a      	negs	r2, r3
 80069fe:	50e2      	str	r2, [r4, r3]
 8006a00:	e7d0      	b.n	80069a4 <_malloc_r+0x20>
 8006a02:	428c      	cmp	r4, r1
 8006a04:	684b      	ldr	r3, [r1, #4]
 8006a06:	bf16      	itet	ne
 8006a08:	6063      	strne	r3, [r4, #4]
 8006a0a:	6013      	streq	r3, [r2, #0]
 8006a0c:	460c      	movne	r4, r1
 8006a0e:	e7eb      	b.n	80069e8 <_malloc_r+0x64>
 8006a10:	460c      	mov	r4, r1
 8006a12:	6849      	ldr	r1, [r1, #4]
 8006a14:	e7cc      	b.n	80069b0 <_malloc_r+0x2c>
 8006a16:	1cc4      	adds	r4, r0, #3
 8006a18:	f024 0403 	bic.w	r4, r4, #3
 8006a1c:	42a0      	cmp	r0, r4
 8006a1e:	d005      	beq.n	8006a2c <_malloc_r+0xa8>
 8006a20:	1a21      	subs	r1, r4, r0
 8006a22:	4630      	mov	r0, r6
 8006a24:	f000 f948 	bl	8006cb8 <_sbrk_r>
 8006a28:	3001      	adds	r0, #1
 8006a2a:	d0cf      	beq.n	80069cc <_malloc_r+0x48>
 8006a2c:	6025      	str	r5, [r4, #0]
 8006a2e:	e7db      	b.n	80069e8 <_malloc_r+0x64>
 8006a30:	20000208 	.word	0x20000208
 8006a34:	2000020c 	.word	0x2000020c

08006a38 <__sfputc_r>:
 8006a38:	6893      	ldr	r3, [r2, #8]
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	b410      	push	{r4}
 8006a40:	6093      	str	r3, [r2, #8]
 8006a42:	da08      	bge.n	8006a56 <__sfputc_r+0x1e>
 8006a44:	6994      	ldr	r4, [r2, #24]
 8006a46:	42a3      	cmp	r3, r4
 8006a48:	db01      	blt.n	8006a4e <__sfputc_r+0x16>
 8006a4a:	290a      	cmp	r1, #10
 8006a4c:	d103      	bne.n	8006a56 <__sfputc_r+0x1e>
 8006a4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a52:	f7fe bb5b 	b.w	800510c <__swbuf_r>
 8006a56:	6813      	ldr	r3, [r2, #0]
 8006a58:	1c58      	adds	r0, r3, #1
 8006a5a:	6010      	str	r0, [r2, #0]
 8006a5c:	7019      	strb	r1, [r3, #0]
 8006a5e:	4608      	mov	r0, r1
 8006a60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a64:	4770      	bx	lr

08006a66 <__sfputs_r>:
 8006a66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a68:	4606      	mov	r6, r0
 8006a6a:	460f      	mov	r7, r1
 8006a6c:	4614      	mov	r4, r2
 8006a6e:	18d5      	adds	r5, r2, r3
 8006a70:	42ac      	cmp	r4, r5
 8006a72:	d101      	bne.n	8006a78 <__sfputs_r+0x12>
 8006a74:	2000      	movs	r0, #0
 8006a76:	e007      	b.n	8006a88 <__sfputs_r+0x22>
 8006a78:	463a      	mov	r2, r7
 8006a7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a7e:	4630      	mov	r0, r6
 8006a80:	f7ff ffda 	bl	8006a38 <__sfputc_r>
 8006a84:	1c43      	adds	r3, r0, #1
 8006a86:	d1f3      	bne.n	8006a70 <__sfputs_r+0xa>
 8006a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a8c <_vfiprintf_r>:
 8006a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a90:	460c      	mov	r4, r1
 8006a92:	b09d      	sub	sp, #116	; 0x74
 8006a94:	4617      	mov	r7, r2
 8006a96:	461d      	mov	r5, r3
 8006a98:	4606      	mov	r6, r0
 8006a9a:	b118      	cbz	r0, 8006aa4 <_vfiprintf_r+0x18>
 8006a9c:	6983      	ldr	r3, [r0, #24]
 8006a9e:	b90b      	cbnz	r3, 8006aa4 <_vfiprintf_r+0x18>
 8006aa0:	f7ff fb2a 	bl	80060f8 <__sinit>
 8006aa4:	4b7c      	ldr	r3, [pc, #496]	; (8006c98 <_vfiprintf_r+0x20c>)
 8006aa6:	429c      	cmp	r4, r3
 8006aa8:	d158      	bne.n	8006b5c <_vfiprintf_r+0xd0>
 8006aaa:	6874      	ldr	r4, [r6, #4]
 8006aac:	89a3      	ldrh	r3, [r4, #12]
 8006aae:	0718      	lsls	r0, r3, #28
 8006ab0:	d55e      	bpl.n	8006b70 <_vfiprintf_r+0xe4>
 8006ab2:	6923      	ldr	r3, [r4, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d05b      	beq.n	8006b70 <_vfiprintf_r+0xe4>
 8006ab8:	2300      	movs	r3, #0
 8006aba:	9309      	str	r3, [sp, #36]	; 0x24
 8006abc:	2320      	movs	r3, #32
 8006abe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ac2:	2330      	movs	r3, #48	; 0x30
 8006ac4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ac8:	9503      	str	r5, [sp, #12]
 8006aca:	f04f 0b01 	mov.w	fp, #1
 8006ace:	46b8      	mov	r8, r7
 8006ad0:	4645      	mov	r5, r8
 8006ad2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006ad6:	b10b      	cbz	r3, 8006adc <_vfiprintf_r+0x50>
 8006ad8:	2b25      	cmp	r3, #37	; 0x25
 8006ada:	d154      	bne.n	8006b86 <_vfiprintf_r+0xfa>
 8006adc:	ebb8 0a07 	subs.w	sl, r8, r7
 8006ae0:	d00b      	beq.n	8006afa <_vfiprintf_r+0x6e>
 8006ae2:	4653      	mov	r3, sl
 8006ae4:	463a      	mov	r2, r7
 8006ae6:	4621      	mov	r1, r4
 8006ae8:	4630      	mov	r0, r6
 8006aea:	f7ff ffbc 	bl	8006a66 <__sfputs_r>
 8006aee:	3001      	adds	r0, #1
 8006af0:	f000 80c2 	beq.w	8006c78 <_vfiprintf_r+0x1ec>
 8006af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006af6:	4453      	add	r3, sl
 8006af8:	9309      	str	r3, [sp, #36]	; 0x24
 8006afa:	f898 3000 	ldrb.w	r3, [r8]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f000 80ba 	beq.w	8006c78 <_vfiprintf_r+0x1ec>
 8006b04:	2300      	movs	r3, #0
 8006b06:	f04f 32ff 	mov.w	r2, #4294967295
 8006b0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b0e:	9304      	str	r3, [sp, #16]
 8006b10:	9307      	str	r3, [sp, #28]
 8006b12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b16:	931a      	str	r3, [sp, #104]	; 0x68
 8006b18:	46a8      	mov	r8, r5
 8006b1a:	2205      	movs	r2, #5
 8006b1c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006b20:	485e      	ldr	r0, [pc, #376]	; (8006c9c <_vfiprintf_r+0x210>)
 8006b22:	f7f9 fb6d 	bl	8000200 <memchr>
 8006b26:	9b04      	ldr	r3, [sp, #16]
 8006b28:	bb78      	cbnz	r0, 8006b8a <_vfiprintf_r+0xfe>
 8006b2a:	06d9      	lsls	r1, r3, #27
 8006b2c:	bf44      	itt	mi
 8006b2e:	2220      	movmi	r2, #32
 8006b30:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b34:	071a      	lsls	r2, r3, #28
 8006b36:	bf44      	itt	mi
 8006b38:	222b      	movmi	r2, #43	; 0x2b
 8006b3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b3e:	782a      	ldrb	r2, [r5, #0]
 8006b40:	2a2a      	cmp	r2, #42	; 0x2a
 8006b42:	d02a      	beq.n	8006b9a <_vfiprintf_r+0x10e>
 8006b44:	9a07      	ldr	r2, [sp, #28]
 8006b46:	46a8      	mov	r8, r5
 8006b48:	2000      	movs	r0, #0
 8006b4a:	250a      	movs	r5, #10
 8006b4c:	4641      	mov	r1, r8
 8006b4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b52:	3b30      	subs	r3, #48	; 0x30
 8006b54:	2b09      	cmp	r3, #9
 8006b56:	d969      	bls.n	8006c2c <_vfiprintf_r+0x1a0>
 8006b58:	b360      	cbz	r0, 8006bb4 <_vfiprintf_r+0x128>
 8006b5a:	e024      	b.n	8006ba6 <_vfiprintf_r+0x11a>
 8006b5c:	4b50      	ldr	r3, [pc, #320]	; (8006ca0 <_vfiprintf_r+0x214>)
 8006b5e:	429c      	cmp	r4, r3
 8006b60:	d101      	bne.n	8006b66 <_vfiprintf_r+0xda>
 8006b62:	68b4      	ldr	r4, [r6, #8]
 8006b64:	e7a2      	b.n	8006aac <_vfiprintf_r+0x20>
 8006b66:	4b4f      	ldr	r3, [pc, #316]	; (8006ca4 <_vfiprintf_r+0x218>)
 8006b68:	429c      	cmp	r4, r3
 8006b6a:	bf08      	it	eq
 8006b6c:	68f4      	ldreq	r4, [r6, #12]
 8006b6e:	e79d      	b.n	8006aac <_vfiprintf_r+0x20>
 8006b70:	4621      	mov	r1, r4
 8006b72:	4630      	mov	r0, r6
 8006b74:	f7fe fb1c 	bl	80051b0 <__swsetup_r>
 8006b78:	2800      	cmp	r0, #0
 8006b7a:	d09d      	beq.n	8006ab8 <_vfiprintf_r+0x2c>
 8006b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b80:	b01d      	add	sp, #116	; 0x74
 8006b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b86:	46a8      	mov	r8, r5
 8006b88:	e7a2      	b.n	8006ad0 <_vfiprintf_r+0x44>
 8006b8a:	4a44      	ldr	r2, [pc, #272]	; (8006c9c <_vfiprintf_r+0x210>)
 8006b8c:	1a80      	subs	r0, r0, r2
 8006b8e:	fa0b f000 	lsl.w	r0, fp, r0
 8006b92:	4318      	orrs	r0, r3
 8006b94:	9004      	str	r0, [sp, #16]
 8006b96:	4645      	mov	r5, r8
 8006b98:	e7be      	b.n	8006b18 <_vfiprintf_r+0x8c>
 8006b9a:	9a03      	ldr	r2, [sp, #12]
 8006b9c:	1d11      	adds	r1, r2, #4
 8006b9e:	6812      	ldr	r2, [r2, #0]
 8006ba0:	9103      	str	r1, [sp, #12]
 8006ba2:	2a00      	cmp	r2, #0
 8006ba4:	db01      	blt.n	8006baa <_vfiprintf_r+0x11e>
 8006ba6:	9207      	str	r2, [sp, #28]
 8006ba8:	e004      	b.n	8006bb4 <_vfiprintf_r+0x128>
 8006baa:	4252      	negs	r2, r2
 8006bac:	f043 0302 	orr.w	r3, r3, #2
 8006bb0:	9207      	str	r2, [sp, #28]
 8006bb2:	9304      	str	r3, [sp, #16]
 8006bb4:	f898 3000 	ldrb.w	r3, [r8]
 8006bb8:	2b2e      	cmp	r3, #46	; 0x2e
 8006bba:	d10e      	bne.n	8006bda <_vfiprintf_r+0x14e>
 8006bbc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006bc0:	2b2a      	cmp	r3, #42	; 0x2a
 8006bc2:	d138      	bne.n	8006c36 <_vfiprintf_r+0x1aa>
 8006bc4:	9b03      	ldr	r3, [sp, #12]
 8006bc6:	1d1a      	adds	r2, r3, #4
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	9203      	str	r2, [sp, #12]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	bfb8      	it	lt
 8006bd0:	f04f 33ff 	movlt.w	r3, #4294967295
 8006bd4:	f108 0802 	add.w	r8, r8, #2
 8006bd8:	9305      	str	r3, [sp, #20]
 8006bda:	4d33      	ldr	r5, [pc, #204]	; (8006ca8 <_vfiprintf_r+0x21c>)
 8006bdc:	f898 1000 	ldrb.w	r1, [r8]
 8006be0:	2203      	movs	r2, #3
 8006be2:	4628      	mov	r0, r5
 8006be4:	f7f9 fb0c 	bl	8000200 <memchr>
 8006be8:	b140      	cbz	r0, 8006bfc <_vfiprintf_r+0x170>
 8006bea:	2340      	movs	r3, #64	; 0x40
 8006bec:	1b40      	subs	r0, r0, r5
 8006bee:	fa03 f000 	lsl.w	r0, r3, r0
 8006bf2:	9b04      	ldr	r3, [sp, #16]
 8006bf4:	4303      	orrs	r3, r0
 8006bf6:	f108 0801 	add.w	r8, r8, #1
 8006bfa:	9304      	str	r3, [sp, #16]
 8006bfc:	f898 1000 	ldrb.w	r1, [r8]
 8006c00:	482a      	ldr	r0, [pc, #168]	; (8006cac <_vfiprintf_r+0x220>)
 8006c02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c06:	2206      	movs	r2, #6
 8006c08:	f108 0701 	add.w	r7, r8, #1
 8006c0c:	f7f9 faf8 	bl	8000200 <memchr>
 8006c10:	2800      	cmp	r0, #0
 8006c12:	d037      	beq.n	8006c84 <_vfiprintf_r+0x1f8>
 8006c14:	4b26      	ldr	r3, [pc, #152]	; (8006cb0 <_vfiprintf_r+0x224>)
 8006c16:	bb1b      	cbnz	r3, 8006c60 <_vfiprintf_r+0x1d4>
 8006c18:	9b03      	ldr	r3, [sp, #12]
 8006c1a:	3307      	adds	r3, #7
 8006c1c:	f023 0307 	bic.w	r3, r3, #7
 8006c20:	3308      	adds	r3, #8
 8006c22:	9303      	str	r3, [sp, #12]
 8006c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c26:	444b      	add	r3, r9
 8006c28:	9309      	str	r3, [sp, #36]	; 0x24
 8006c2a:	e750      	b.n	8006ace <_vfiprintf_r+0x42>
 8006c2c:	fb05 3202 	mla	r2, r5, r2, r3
 8006c30:	2001      	movs	r0, #1
 8006c32:	4688      	mov	r8, r1
 8006c34:	e78a      	b.n	8006b4c <_vfiprintf_r+0xc0>
 8006c36:	2300      	movs	r3, #0
 8006c38:	f108 0801 	add.w	r8, r8, #1
 8006c3c:	9305      	str	r3, [sp, #20]
 8006c3e:	4619      	mov	r1, r3
 8006c40:	250a      	movs	r5, #10
 8006c42:	4640      	mov	r0, r8
 8006c44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c48:	3a30      	subs	r2, #48	; 0x30
 8006c4a:	2a09      	cmp	r2, #9
 8006c4c:	d903      	bls.n	8006c56 <_vfiprintf_r+0x1ca>
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d0c3      	beq.n	8006bda <_vfiprintf_r+0x14e>
 8006c52:	9105      	str	r1, [sp, #20]
 8006c54:	e7c1      	b.n	8006bda <_vfiprintf_r+0x14e>
 8006c56:	fb05 2101 	mla	r1, r5, r1, r2
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	4680      	mov	r8, r0
 8006c5e:	e7f0      	b.n	8006c42 <_vfiprintf_r+0x1b6>
 8006c60:	ab03      	add	r3, sp, #12
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	4622      	mov	r2, r4
 8006c66:	4b13      	ldr	r3, [pc, #76]	; (8006cb4 <_vfiprintf_r+0x228>)
 8006c68:	a904      	add	r1, sp, #16
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	f7fd fd54 	bl	8004718 <_printf_float>
 8006c70:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006c74:	4681      	mov	r9, r0
 8006c76:	d1d5      	bne.n	8006c24 <_vfiprintf_r+0x198>
 8006c78:	89a3      	ldrh	r3, [r4, #12]
 8006c7a:	065b      	lsls	r3, r3, #25
 8006c7c:	f53f af7e 	bmi.w	8006b7c <_vfiprintf_r+0xf0>
 8006c80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c82:	e77d      	b.n	8006b80 <_vfiprintf_r+0xf4>
 8006c84:	ab03      	add	r3, sp, #12
 8006c86:	9300      	str	r3, [sp, #0]
 8006c88:	4622      	mov	r2, r4
 8006c8a:	4b0a      	ldr	r3, [pc, #40]	; (8006cb4 <_vfiprintf_r+0x228>)
 8006c8c:	a904      	add	r1, sp, #16
 8006c8e:	4630      	mov	r0, r6
 8006c90:	f7fd fff8 	bl	8004c84 <_printf_i>
 8006c94:	e7ec      	b.n	8006c70 <_vfiprintf_r+0x1e4>
 8006c96:	bf00      	nop
 8006c98:	08006f7c 	.word	0x08006f7c
 8006c9c:	080070bc 	.word	0x080070bc
 8006ca0:	08006f9c 	.word	0x08006f9c
 8006ca4:	08006f5c 	.word	0x08006f5c
 8006ca8:	080070c2 	.word	0x080070c2
 8006cac:	080070c6 	.word	0x080070c6
 8006cb0:	08004719 	.word	0x08004719
 8006cb4:	08006a67 	.word	0x08006a67

08006cb8 <_sbrk_r>:
 8006cb8:	b538      	push	{r3, r4, r5, lr}
 8006cba:	4c06      	ldr	r4, [pc, #24]	; (8006cd4 <_sbrk_r+0x1c>)
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	4605      	mov	r5, r0
 8006cc0:	4608      	mov	r0, r1
 8006cc2:	6023      	str	r3, [r4, #0]
 8006cc4:	f7fd f97e 	bl	8003fc4 <_sbrk>
 8006cc8:	1c43      	adds	r3, r0, #1
 8006cca:	d102      	bne.n	8006cd2 <_sbrk_r+0x1a>
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	b103      	cbz	r3, 8006cd2 <_sbrk_r+0x1a>
 8006cd0:	602b      	str	r3, [r5, #0]
 8006cd2:	bd38      	pop	{r3, r4, r5, pc}
 8006cd4:	200006d8 	.word	0x200006d8

08006cd8 <__sread>:
 8006cd8:	b510      	push	{r4, lr}
 8006cda:	460c      	mov	r4, r1
 8006cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ce0:	f000 f8a8 	bl	8006e34 <_read_r>
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	bfab      	itete	ge
 8006ce8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006cea:	89a3      	ldrhlt	r3, [r4, #12]
 8006cec:	181b      	addge	r3, r3, r0
 8006cee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cf2:	bfac      	ite	ge
 8006cf4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cf6:	81a3      	strhlt	r3, [r4, #12]
 8006cf8:	bd10      	pop	{r4, pc}

08006cfa <__swrite>:
 8006cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cfe:	461f      	mov	r7, r3
 8006d00:	898b      	ldrh	r3, [r1, #12]
 8006d02:	05db      	lsls	r3, r3, #23
 8006d04:	4605      	mov	r5, r0
 8006d06:	460c      	mov	r4, r1
 8006d08:	4616      	mov	r6, r2
 8006d0a:	d505      	bpl.n	8006d18 <__swrite+0x1e>
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d14:	f000 f868 	bl	8006de8 <_lseek_r>
 8006d18:	89a3      	ldrh	r3, [r4, #12]
 8006d1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d22:	81a3      	strh	r3, [r4, #12]
 8006d24:	4632      	mov	r2, r6
 8006d26:	463b      	mov	r3, r7
 8006d28:	4628      	mov	r0, r5
 8006d2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d2e:	f000 b817 	b.w	8006d60 <_write_r>

08006d32 <__sseek>:
 8006d32:	b510      	push	{r4, lr}
 8006d34:	460c      	mov	r4, r1
 8006d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d3a:	f000 f855 	bl	8006de8 <_lseek_r>
 8006d3e:	1c43      	adds	r3, r0, #1
 8006d40:	89a3      	ldrh	r3, [r4, #12]
 8006d42:	bf15      	itete	ne
 8006d44:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d4e:	81a3      	strheq	r3, [r4, #12]
 8006d50:	bf18      	it	ne
 8006d52:	81a3      	strhne	r3, [r4, #12]
 8006d54:	bd10      	pop	{r4, pc}

08006d56 <__sclose>:
 8006d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d5a:	f000 b813 	b.w	8006d84 <_close_r>
	...

08006d60 <_write_r>:
 8006d60:	b538      	push	{r3, r4, r5, lr}
 8006d62:	4c07      	ldr	r4, [pc, #28]	; (8006d80 <_write_r+0x20>)
 8006d64:	4605      	mov	r5, r0
 8006d66:	4608      	mov	r0, r1
 8006d68:	4611      	mov	r1, r2
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	6022      	str	r2, [r4, #0]
 8006d6e:	461a      	mov	r2, r3
 8006d70:	f7fd f91a 	bl	8003fa8 <_write>
 8006d74:	1c43      	adds	r3, r0, #1
 8006d76:	d102      	bne.n	8006d7e <_write_r+0x1e>
 8006d78:	6823      	ldr	r3, [r4, #0]
 8006d7a:	b103      	cbz	r3, 8006d7e <_write_r+0x1e>
 8006d7c:	602b      	str	r3, [r5, #0]
 8006d7e:	bd38      	pop	{r3, r4, r5, pc}
 8006d80:	200006d8 	.word	0x200006d8

08006d84 <_close_r>:
 8006d84:	b538      	push	{r3, r4, r5, lr}
 8006d86:	4c06      	ldr	r4, [pc, #24]	; (8006da0 <_close_r+0x1c>)
 8006d88:	2300      	movs	r3, #0
 8006d8a:	4605      	mov	r5, r0
 8006d8c:	4608      	mov	r0, r1
 8006d8e:	6023      	str	r3, [r4, #0]
 8006d90:	f7fd f936 	bl	8004000 <_close>
 8006d94:	1c43      	adds	r3, r0, #1
 8006d96:	d102      	bne.n	8006d9e <_close_r+0x1a>
 8006d98:	6823      	ldr	r3, [r4, #0]
 8006d9a:	b103      	cbz	r3, 8006d9e <_close_r+0x1a>
 8006d9c:	602b      	str	r3, [r5, #0]
 8006d9e:	bd38      	pop	{r3, r4, r5, pc}
 8006da0:	200006d8 	.word	0x200006d8

08006da4 <_fstat_r>:
 8006da4:	b538      	push	{r3, r4, r5, lr}
 8006da6:	4c07      	ldr	r4, [pc, #28]	; (8006dc4 <_fstat_r+0x20>)
 8006da8:	2300      	movs	r3, #0
 8006daa:	4605      	mov	r5, r0
 8006dac:	4608      	mov	r0, r1
 8006dae:	4611      	mov	r1, r2
 8006db0:	6023      	str	r3, [r4, #0]
 8006db2:	f7fd f928 	bl	8004006 <_fstat>
 8006db6:	1c43      	adds	r3, r0, #1
 8006db8:	d102      	bne.n	8006dc0 <_fstat_r+0x1c>
 8006dba:	6823      	ldr	r3, [r4, #0]
 8006dbc:	b103      	cbz	r3, 8006dc0 <_fstat_r+0x1c>
 8006dbe:	602b      	str	r3, [r5, #0]
 8006dc0:	bd38      	pop	{r3, r4, r5, pc}
 8006dc2:	bf00      	nop
 8006dc4:	200006d8 	.word	0x200006d8

08006dc8 <_isatty_r>:
 8006dc8:	b538      	push	{r3, r4, r5, lr}
 8006dca:	4c06      	ldr	r4, [pc, #24]	; (8006de4 <_isatty_r+0x1c>)
 8006dcc:	2300      	movs	r3, #0
 8006dce:	4605      	mov	r5, r0
 8006dd0:	4608      	mov	r0, r1
 8006dd2:	6023      	str	r3, [r4, #0]
 8006dd4:	f7fd f91c 	bl	8004010 <_isatty>
 8006dd8:	1c43      	adds	r3, r0, #1
 8006dda:	d102      	bne.n	8006de2 <_isatty_r+0x1a>
 8006ddc:	6823      	ldr	r3, [r4, #0]
 8006dde:	b103      	cbz	r3, 8006de2 <_isatty_r+0x1a>
 8006de0:	602b      	str	r3, [r5, #0]
 8006de2:	bd38      	pop	{r3, r4, r5, pc}
 8006de4:	200006d8 	.word	0x200006d8

08006de8 <_lseek_r>:
 8006de8:	b538      	push	{r3, r4, r5, lr}
 8006dea:	4c07      	ldr	r4, [pc, #28]	; (8006e08 <_lseek_r+0x20>)
 8006dec:	4605      	mov	r5, r0
 8006dee:	4608      	mov	r0, r1
 8006df0:	4611      	mov	r1, r2
 8006df2:	2200      	movs	r2, #0
 8006df4:	6022      	str	r2, [r4, #0]
 8006df6:	461a      	mov	r2, r3
 8006df8:	f7fd f90c 	bl	8004014 <_lseek>
 8006dfc:	1c43      	adds	r3, r0, #1
 8006dfe:	d102      	bne.n	8006e06 <_lseek_r+0x1e>
 8006e00:	6823      	ldr	r3, [r4, #0]
 8006e02:	b103      	cbz	r3, 8006e06 <_lseek_r+0x1e>
 8006e04:	602b      	str	r3, [r5, #0]
 8006e06:	bd38      	pop	{r3, r4, r5, pc}
 8006e08:	200006d8 	.word	0x200006d8

08006e0c <__ascii_mbtowc>:
 8006e0c:	b082      	sub	sp, #8
 8006e0e:	b901      	cbnz	r1, 8006e12 <__ascii_mbtowc+0x6>
 8006e10:	a901      	add	r1, sp, #4
 8006e12:	b142      	cbz	r2, 8006e26 <__ascii_mbtowc+0x1a>
 8006e14:	b14b      	cbz	r3, 8006e2a <__ascii_mbtowc+0x1e>
 8006e16:	7813      	ldrb	r3, [r2, #0]
 8006e18:	600b      	str	r3, [r1, #0]
 8006e1a:	7812      	ldrb	r2, [r2, #0]
 8006e1c:	1c10      	adds	r0, r2, #0
 8006e1e:	bf18      	it	ne
 8006e20:	2001      	movne	r0, #1
 8006e22:	b002      	add	sp, #8
 8006e24:	4770      	bx	lr
 8006e26:	4610      	mov	r0, r2
 8006e28:	e7fb      	b.n	8006e22 <__ascii_mbtowc+0x16>
 8006e2a:	f06f 0001 	mvn.w	r0, #1
 8006e2e:	e7f8      	b.n	8006e22 <__ascii_mbtowc+0x16>

08006e30 <__malloc_lock>:
 8006e30:	4770      	bx	lr

08006e32 <__malloc_unlock>:
 8006e32:	4770      	bx	lr

08006e34 <_read_r>:
 8006e34:	b538      	push	{r3, r4, r5, lr}
 8006e36:	4c07      	ldr	r4, [pc, #28]	; (8006e54 <_read_r+0x20>)
 8006e38:	4605      	mov	r5, r0
 8006e3a:	4608      	mov	r0, r1
 8006e3c:	4611      	mov	r1, r2
 8006e3e:	2200      	movs	r2, #0
 8006e40:	6022      	str	r2, [r4, #0]
 8006e42:	461a      	mov	r2, r3
 8006e44:	f7fd f8a2 	bl	8003f8c <_read>
 8006e48:	1c43      	adds	r3, r0, #1
 8006e4a:	d102      	bne.n	8006e52 <_read_r+0x1e>
 8006e4c:	6823      	ldr	r3, [r4, #0]
 8006e4e:	b103      	cbz	r3, 8006e52 <_read_r+0x1e>
 8006e50:	602b      	str	r3, [r5, #0]
 8006e52:	bd38      	pop	{r3, r4, r5, pc}
 8006e54:	200006d8 	.word	0x200006d8

08006e58 <__ascii_wctomb>:
 8006e58:	b149      	cbz	r1, 8006e6e <__ascii_wctomb+0x16>
 8006e5a:	2aff      	cmp	r2, #255	; 0xff
 8006e5c:	bf85      	ittet	hi
 8006e5e:	238a      	movhi	r3, #138	; 0x8a
 8006e60:	6003      	strhi	r3, [r0, #0]
 8006e62:	700a      	strbls	r2, [r1, #0]
 8006e64:	f04f 30ff 	movhi.w	r0, #4294967295
 8006e68:	bf98      	it	ls
 8006e6a:	2001      	movls	r0, #1
 8006e6c:	4770      	bx	lr
 8006e6e:	4608      	mov	r0, r1
 8006e70:	4770      	bx	lr
	...

08006e74 <_init>:
 8006e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e76:	bf00      	nop
 8006e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e7a:	bc08      	pop	{r3}
 8006e7c:	469e      	mov	lr, r3
 8006e7e:	4770      	bx	lr

08006e80 <_fini>:
 8006e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e82:	bf00      	nop
 8006e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e86:	bc08      	pop	{r3}
 8006e88:	469e      	mov	lr, r3
 8006e8a:	4770      	bx	lr
