/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "can.h"
#include "dma.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "management.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch) {
HAL_UART_Transmit(&huart1, &ch, 1, 1);
}
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t program_No;
uint8_t start_sw,move_fire,sw1,sw2,limit_sw1,limit_sw2;
uint8_t cnt_tim,cnt_tim_fire,cnt_tim_task,cnt_time_main,cnt_task_servo;
uint8_t cnt_tim_servo;
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan);
void driveWheelTask();
void initFriction();
void initPID();
void initLoadPID();
void timerTask();
void Gimbal_Task();
void fire_Task();
void initCanFilter() ;
long map(long x, long in_min, long in_max, long out_min, long out_max);

int cnt_tim1;
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  //No0:not move any-time shoot
  //No1:put center use Cam and shoot
  //No2:put random use Cam and shoot
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_CAN1_Init();
  MX_CAN2_Init();
  MX_TIM1_Init();
  MX_TIM2_Init();
  MX_TIM3_Init();
  MX_TIM7_Init();
  MX_TIM8_Init();
  MX_UART5_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  MX_USART3_UART_Init();
  MX_USART6_UART_Init();
  /* USER CODE BEGIN 2 */
  setbuf(stdout, NULL);
  sConfigOC.Pulse = 1500;
  HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3);
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
  sConfigOC.Pulse = 1500;
  HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4);
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
  sConfigOC.Pulse = 1500;
  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  sConfigOC.Pulse = 1500;
  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
  sConfigOC.Pulse = 1500;
  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
  sConfigOC.Pulse = 1500;
  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
  if(HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK){Error_Handler();}
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
  TIM1->CNT=15000;
  if(HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK){Error_Handler();}
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
  TIM2->CNT=15000;
  HAL_CAN_Start(&hcan1);
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){Error_Handler();}
  HAL_CAN_Start(&hcan2);
  if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){Error_Handler();}
  HAL_Delay(1000);
  initPID();
  initLoadPID();
  initCanFilter();
  HAL_UART_Receive_DMA(&huart3,(uint8_t*) Rxbuf_jetson, 7);
  initFriction();
  fire=0.0;
  torque_sum=0.0;
  target_pit=90;
  target_yaw=90;
  target_place=2325;
  HAL_TIM_Base_Start_IT(&htim7);
  program_No=!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)+!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)*2+
 				!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)*4+!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14)*8;

  /* USER CODE END 2 */
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15,start_sw);
	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
	  printf("start=%d ",start_sw);
	  printf(" E1=%d",(int)TIM1->CNT);
	  printf(" X=%d Y=%d cnt=%d check=%d pit=%d yaw=%d",target_X,target_Y,cnt_tartget,data_Jetson[5],target_pit,target_yaw);
	  printf(" torque_sum=%f cnt_tim1=%d",torque_sum,cnt_tim1);
//	 / printf(" sw1=%d sw2=%d",limit_sw1,limit_sw2);
	  //printf(" =%d",ics_set_pos(1,7500));
	  //printf(" =%d",ics_set_pos(2,7500));
	  printf("\r\n");
	  target_X=((data_Jetson[0]<<8) | data_Jetson[1])- 32767;
	  	target_Y=((data_Jetson[2]<<8) | data_Jetson[3])- 32767;
	  	cnt_tartget=data_Jetson[4];

		if(limit_sw1==0){TIM1->CNT=15000;}
		if(limit_sw2==0){TIM1->CNT=16800;}
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	if (htim->Instance == htim7.Instance) {
		//1kHz
		if(cnt_tim_task>1){
		//500Hz
		timerTask();
		cnt_tim_task=0;
		}
		cnt_tim_task++;
		if(cnt_tim>100){
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
			cnt_tim=0;
			if(temp_data_Jetson!=data_Jetson[5]){
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,1);
				jetson_connect=1;
			}
			else{
				jetson_connect=0;
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,0);
				data_Jetson[0]=0;
				data_Jetson[1]=0;
				data_Jetson[2]=0;
				data_Jetson[3]=0;
				data_Jetson[4]=0;
			}
			temp_data_Jetson=data_Jetson[5];
		}

		cnt_tim++;
	}
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
	/* Get RX message */
	if (hcan->Instance == hcan2.Instance) {// can2 bus receive interrupt
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, canRxData);
		//check ESC identifier
		int id = canRxHeader.StdId - 513;

		wheelFdb[id].angle = canRxData[0] * 256 + canRxData[1];
		wheelFdb[id].rpm = canRxData[2] * 256 + canRxData[3];
		wheelFdb[id].torque = canRxData[4] * 256 + canRxData[5];
		wheelFdb[id].temp = canRxData[6];
		wheelFdb[id].omg = 6.28318530718 * (wheelFdb[id].rpm) / 1140.0;
	}
	if (hcan->Instance == hcan1.Instance) {// can1 bus receive interrupt
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, canRxData);
		motor_fdb *fdb = 0;
		switch (canRxHeader.StdId) {
		case 0x205:
			fdb = &gimbalYawFdb;
			break;
		case 0x206:
			fdb = &gimbalPitchFdb;
			break;
		case 0x207:
			fdb = &loadMotorFdb;
			break;
		}
		fdb->angle = canRxData[0] * 256 + canRxData[1];
		fdb->rpm = canRxData[2] * 256 + canRxData[3];
		fdb->torque = canRxData[4] * 256 + canRxData[5];
		fdb->temp = canRxData[6];
		fdb->omg = 6.28318530718 * (fdb->rpm) / 1140.0;
	}
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
	uint8_t j = 0;
	while (Rxbuf_jetson[j] != 253 &&  j<sizeof(Rxbuf_jetson)) {
		j++;
	}
	if(j>=sizeof(Rxbuf_jetson)){
		for(uint8_t k=0;k<(sizeof(data_Jetson));k++){
			data_Jetson[k]=0;
		}
	}
	else{
		for (uint8_t k = 0; k < sizeof(data_Jetson); k++) {
			if ((j + k) >= sizeof(data_Jetson)) {
				data_Jetson[k] = Rxbuf_jetson[k - (sizeof(data_Jetson) - j)];
			}
			else {
				data_Jetson[k] = Rxbuf_jetson[j + k + 1];
			}
		}
	}


}


void timerTask() { //call 500Hz
	driveWheelTask();
	Gimbal_Task();
	fire_Task();
	limit_sw1=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15);
	limit_sw2=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
	start_sw=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
	move_fire=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
	sw1=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
	sw2=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
	program_No=!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)+!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)*2+
	 				!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)*4+!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14)*8;
}

void driveWheelTask() {
	int16_t u[4];
	cnt_tim1=15000-TIM1->CNT;
	if(start_sw==0){
		if(program_No==0){
			//target_place=2325;
			target_place=15000-TIM1->CNT;
		}
		else if(program_No==1){
			target_place=900;
		}
		else if(program_No==2){
			if(abs((int)target_place-cnt_tim1)<10){target_place=(int)(rand()*(1300.0-500.0+1.0)/(1.0+RAND_MAX));}
			if(target_place>1300){target_place=1300;}
			if(target_place<500){target_place=500;}
		}
		else{target_place=15000-TIM1->CNT;}

		if(limit_sw1==0){TIM1->CNT=15000;}
		if(limit_sw2==0){TIM1->CNT=16800;}

		if(abs((int)target_place-cnt_tim1)<10){
			mecanum.wheel_rpm[0]=0.0;
			mecanum.wheel_rpm[1]=0.0;
		}
		else if(((int)target_place-cnt_tim1)<0){
			if((float)abs((int)cnt_tim1-target_place)>1500){
				mecanum.wheel_rpm[0]=4000;
				mecanum.wheel_rpm[1]=4000;
			}
			else{
				mecanum.wheel_rpm[0]=(float)map(abs((int)cnt_tim1-target_place),0,1500,1000,4000);
				mecanum.wheel_rpm[1]=(float)map(abs((int)cnt_tim1-target_place),0,1500,1000,4000);
			}
		}
		else if(((int)target_place-cnt_tim1)>0){
			if((float)abs((int)cnt_tim1-target_place)>1500){
				mecanum.wheel_rpm[0]=-4000;
				mecanum.wheel_rpm[1]=-4000;
			}
			else{
				mecanum.wheel_rpm[0]=(float)-1.0*map(abs((int)cnt_tim1-target_place),0,1500,1000,4000);
				mecanum.wheel_rpm[1]=(float)-1.0*map(abs((int)cnt_tim1-target_place),0,1500,1000,4000);
			}
		}
		else{
			mecanum.wheel_rpm[0]=0.0;
			mecanum.wheel_rpm[1]=0.0;
		}

		if(sw1==0){
			mecanum.wheel_rpm[0]=1200;
			mecanum.wheel_rpm[1]=1200;
			target_place=15000-TIM1->CNT;
		}
		else if(sw2==0){
			mecanum.wheel_rpm[0]=-1200;
			mecanum.wheel_rpm[1]=-1200;
			target_place=15000-TIM1->CNT;
		}

	}
	else{
		mecanum.wheel_rpm[0]=0.0;
		mecanum.wheel_rpm[1]=0.0;
	}

	    torque_sum = fabs((float)wheelFdb[0].torque/16384.0*20.0)+fabs((float)wheelFdb[1].torque/16384.0*20.0);
	for (int i = 0; i < 2; i++) {
		int error = mecanum.wheel_rpm[i] - wheelFdb[i].rpm;
		wheelPID[i].error = error;
		u[i] = (int16_t) pidExecute(&(wheelPID[i]));

		if(torque_sum>2.5){
			for (int i = 0; i < 2; i++) {
				u[i] = 0;
			}
		}
	}
	driveWheel(u);
}
void Gimbal_Task(){
	if(cnt_task_servo>40){
		if(start_sw==0){
			if(program_No>0){
				if(jetson_connect==1){
					if(cnt_tartget>0){
							target_yaw=target_yaw-map(target_X,480,-480,30,-30);
							target_pit=target_pit-map(target_Y,360,-360,30,-30);

							if(target_yaw>160){target_yaw=160;}
							if(target_yaw<20){target_yaw=20;}
							if(target_pit>90){target_pit=90;}
							if(target_pit<45){target_pit=45;}

							target_pit_temp=map(target_pit,180,0,4833,10166);
							target_yaw_temp=map(target_yaw,180,0,4833,10166);
							now_pit=ics_set_pos(2,target_pit_temp);
							now_yaw=ics_set_pos(1,target_yaw_temp);

							if(abs(target_X)<10 && abs(target_X)<10){
								fire=1.0;
							}
							else{
								fire=0.0;
							}
					}
					else{
						now_pit=ics_set_pos(2,target_pit_temp);
						now_yaw=ics_set_pos(1,target_yaw_temp);
						target_pit=70;
						target_yaw=90;
						fire=0.0;
						cnt_tim_servo=0;
					}
				}
			}
			else if(start_sw==0){
				cnt_tim_servo=0;
				ics_set_pos(2,map(80,180,0,4833,10166));
				ics_set_pos(1,map(90,180,0,4833,10166));
				target_pit=90;
				target_yaw=90;
				fire=1.0;

			}
			else{
				cnt_tim_servo=0;
				ics_set_pos(2,map(90,180,0,4833,10166));
				ics_set_pos(1,map(90,180,0,4833,10166));
				target_pit=90;
				target_yaw=90;
				fire=0.0;
			}
		}
		else{
			cnt_tim_servo=0;
			ics_set_pos(2,map(90,180,0,4833,10166));
			ics_set_pos(1,map(90,180,0,4833,10166));
			target_pit=90;
			target_yaw=90;
			fire=0.0;
		}


		cnt_task_servo=0;
	}
	else{
		cnt_task_servo++;
	}

}


void fire_Task(){
	int16_t u[4];
	if(fire>1.0){
		fire=0.0;
	}
	if(start_sw==1){
		DBUFF[1] = loadPID.error = 0.0 - loadMotorFdb.rpm;
		DBUFF[3] = u[2] = pidExecute(&loadPID);
		u[2]=0;
		u[0]=0;
		u[1]=0;
		u[3]=0;
		driveGimbalMotors(u);

	}
	else{
		DBUFF[1] = loadPID.error = -900.0f*fire*2.0 - loadMotorFdb.rpm;
		DBUFF[3] = u[2] = pidExecute(&loadPID);
		u[0]=0;
		u[1]=0;
		u[3]=0;
		driveGimbalMotors(u);

	}


	if(move_fire==0){
		 sConfigOC.Pulse = 1650;
		 HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3);
		 HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
		 sConfigOC.Pulse = 1650;
		 HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4);
		 HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
	}
	else{
		 sConfigOC.Pulse = 1500;
		 HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3);
		 HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
		 sConfigOC.Pulse = 1500;
		 HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4);
		 HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
	}
}

void initFriction() {
	for(int i=0;i<2000;i++){
		HAL_Delay(1);
		  sConfigOC.Pulse = 2000;
		  HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3);
		  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
		  sConfigOC.Pulse = 2000;
		  HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4);
		  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
	}
	for(int i=0;i<2300;i++){
		HAL_Delay(1);
		  sConfigOC.Pulse = 1500;
		  HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3);
		  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
		  sConfigOC.Pulse = 1500;
		  HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4);
		  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
	}

}
void initPID() {
	for (int i = 0; i < 4; i++) {
		wheelPID[i].t = 2.0f;
		wheelPID[i].p = 3.0f;
		wheelPID[i].i = 30.0f;
		wheelPID[i].d = 0.0f;
		wheelPID[i].outLimit = 15000.0f;
		wheelPID[i].integralOutLimit = 500.0f;
		wheelPID[i].differentialFilterRate = 0.9f;
	}
}

void initLoadPID() {
	loadPID.t = 2.0f;
	loadPID.p = 5.0f;
	loadPID.i = 0.0;
	loadPID.d = 0.07f;
	loadPID.outLimit = 30000.0f;
	loadPID.integralOutLimit = 10000.0f;
	loadPID.differentialFilterRate = 0.9f;
}

void initCanFilter() {
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
	sFilterConfig.FilterIdHigh = 0x0000;
	sFilterConfig.FilterIdLow = 0x0000;
	sFilterConfig.FilterMaskIdHigh = 0x0000;
	sFilterConfig.FilterMaskIdLow = 0x0000;
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
	sFilterConfig.FilterActivation = ENABLE;
	sFilterConfig.SlaveStartFilterBank = 0;

	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);

	sFilterConfig.SlaveStartFilterBank = 0;
	sFilterConfig.FilterBank = 0;

	HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig);
}

long map(long x, long in_min, long in_max, long out_min, long out_max) {
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
