
F427IIH_RM_Saramander.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007344  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080074f4  080074f4  000174f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007610  08007610  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007610  08007610  00017610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007618  08007618  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007618  08007618  00017618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800761c  0800761c  0001761c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007620  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  20000070  08007690  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000058c  08007690  0002058c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013aa9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ded  00000000  00000000  00033b49  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001158  00000000  00000000  00036938  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fd0  00000000  00000000  00037a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000257e8  00000000  00000000  00038a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e190  00000000  00000000  0005e248  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000db61c  00000000  00000000  0006c3d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001479f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fd4  00000000  00000000  00147a70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080074dc 	.word	0x080074dc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080074dc 	.word	0x080074dc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b972 	b.w	8000dc8 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9e08      	ldr	r6, [sp, #32]
 8000b02:	4604      	mov	r4, r0
 8000b04:	4688      	mov	r8, r1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d14b      	bne.n	8000ba2 <__udivmoddi4+0xa6>
 8000b0a:	428a      	cmp	r2, r1
 8000b0c:	4615      	mov	r5, r2
 8000b0e:	d967      	bls.n	8000be0 <__udivmoddi4+0xe4>
 8000b10:	fab2 f282 	clz	r2, r2
 8000b14:	b14a      	cbz	r2, 8000b2a <__udivmoddi4+0x2e>
 8000b16:	f1c2 0720 	rsb	r7, r2, #32
 8000b1a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b1e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b22:	4095      	lsls	r5, r2
 8000b24:	ea47 0803 	orr.w	r8, r7, r3
 8000b28:	4094      	lsls	r4, r2
 8000b2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b2e:	0c23      	lsrs	r3, r4, #16
 8000b30:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b34:	fa1f fc85 	uxth.w	ip, r5
 8000b38:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b3c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b40:	fb07 f10c 	mul.w	r1, r7, ip
 8000b44:	4299      	cmp	r1, r3
 8000b46:	d909      	bls.n	8000b5c <__udivmoddi4+0x60>
 8000b48:	18eb      	adds	r3, r5, r3
 8000b4a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b4e:	f080 811b 	bcs.w	8000d88 <__udivmoddi4+0x28c>
 8000b52:	4299      	cmp	r1, r3
 8000b54:	f240 8118 	bls.w	8000d88 <__udivmoddi4+0x28c>
 8000b58:	3f02      	subs	r7, #2
 8000b5a:	442b      	add	r3, r5
 8000b5c:	1a5b      	subs	r3, r3, r1
 8000b5e:	b2a4      	uxth	r4, r4
 8000b60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b6c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b70:	45a4      	cmp	ip, r4
 8000b72:	d909      	bls.n	8000b88 <__udivmoddi4+0x8c>
 8000b74:	192c      	adds	r4, r5, r4
 8000b76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b7a:	f080 8107 	bcs.w	8000d8c <__udivmoddi4+0x290>
 8000b7e:	45a4      	cmp	ip, r4
 8000b80:	f240 8104 	bls.w	8000d8c <__udivmoddi4+0x290>
 8000b84:	3802      	subs	r0, #2
 8000b86:	442c      	add	r4, r5
 8000b88:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b8c:	eba4 040c 	sub.w	r4, r4, ip
 8000b90:	2700      	movs	r7, #0
 8000b92:	b11e      	cbz	r6, 8000b9c <__udivmoddi4+0xa0>
 8000b94:	40d4      	lsrs	r4, r2
 8000b96:	2300      	movs	r3, #0
 8000b98:	e9c6 4300 	strd	r4, r3, [r6]
 8000b9c:	4639      	mov	r1, r7
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0xbe>
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	f000 80eb 	beq.w	8000d82 <__udivmoddi4+0x286>
 8000bac:	2700      	movs	r7, #0
 8000bae:	e9c6 0100 	strd	r0, r1, [r6]
 8000bb2:	4638      	mov	r0, r7
 8000bb4:	4639      	mov	r1, r7
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f783 	clz	r7, r3
 8000bbe:	2f00      	cmp	r7, #0
 8000bc0:	d147      	bne.n	8000c52 <__udivmoddi4+0x156>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0xd0>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80fa 	bhi.w	8000dc0 <__udivmoddi4+0x2c4>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0303 	sbc.w	r3, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	4698      	mov	r8, r3
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	d0e0      	beq.n	8000b9c <__udivmoddi4+0xa0>
 8000bda:	e9c6 4800 	strd	r4, r8, [r6]
 8000bde:	e7dd      	b.n	8000b9c <__udivmoddi4+0xa0>
 8000be0:	b902      	cbnz	r2, 8000be4 <__udivmoddi4+0xe8>
 8000be2:	deff      	udf	#255	; 0xff
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	2a00      	cmp	r2, #0
 8000bea:	f040 808f 	bne.w	8000d0c <__udivmoddi4+0x210>
 8000bee:	1b49      	subs	r1, r1, r5
 8000bf0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bf4:	fa1f f885 	uxth.w	r8, r5
 8000bf8:	2701      	movs	r7, #1
 8000bfa:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bfe:	0c23      	lsrs	r3, r4, #16
 8000c00:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb08 f10c 	mul.w	r1, r8, ip
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	d907      	bls.n	8000c20 <__udivmoddi4+0x124>
 8000c10:	18eb      	adds	r3, r5, r3
 8000c12:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x122>
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	f200 80cd 	bhi.w	8000db8 <__udivmoddi4+0x2bc>
 8000c1e:	4684      	mov	ip, r0
 8000c20:	1a59      	subs	r1, r3, r1
 8000c22:	b2a3      	uxth	r3, r4
 8000c24:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c28:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c2c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c30:	fb08 f800 	mul.w	r8, r8, r0
 8000c34:	45a0      	cmp	r8, r4
 8000c36:	d907      	bls.n	8000c48 <__udivmoddi4+0x14c>
 8000c38:	192c      	adds	r4, r5, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x14a>
 8000c40:	45a0      	cmp	r8, r4
 8000c42:	f200 80b6 	bhi.w	8000db2 <__udivmoddi4+0x2b6>
 8000c46:	4618      	mov	r0, r3
 8000c48:	eba4 0408 	sub.w	r4, r4, r8
 8000c4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c50:	e79f      	b.n	8000b92 <__udivmoddi4+0x96>
 8000c52:	f1c7 0c20 	rsb	ip, r7, #32
 8000c56:	40bb      	lsls	r3, r7
 8000c58:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c5c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c60:	fa01 f407 	lsl.w	r4, r1, r7
 8000c64:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c68:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c6c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c70:	4325      	orrs	r5, r4
 8000c72:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c76:	0c2c      	lsrs	r4, r5, #16
 8000c78:	fb08 3319 	mls	r3, r8, r9, r3
 8000c7c:	fa1f fa8e 	uxth.w	sl, lr
 8000c80:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c84:	fb09 f40a 	mul.w	r4, r9, sl
 8000c88:	429c      	cmp	r4, r3
 8000c8a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c8e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c92:	d90b      	bls.n	8000cac <__udivmoddi4+0x1b0>
 8000c94:	eb1e 0303 	adds.w	r3, lr, r3
 8000c98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c9c:	f080 8087 	bcs.w	8000dae <__udivmoddi4+0x2b2>
 8000ca0:	429c      	cmp	r4, r3
 8000ca2:	f240 8084 	bls.w	8000dae <__udivmoddi4+0x2b2>
 8000ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8000caa:	4473      	add	r3, lr
 8000cac:	1b1b      	subs	r3, r3, r4
 8000cae:	b2ad      	uxth	r5, r5
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cbc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cc0:	45a2      	cmp	sl, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x1da>
 8000cc4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ccc:	d26b      	bcs.n	8000da6 <__udivmoddi4+0x2aa>
 8000cce:	45a2      	cmp	sl, r4
 8000cd0:	d969      	bls.n	8000da6 <__udivmoddi4+0x2aa>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4474      	add	r4, lr
 8000cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cda:	fba0 8902 	umull	r8, r9, r0, r2
 8000cde:	eba4 040a 	sub.w	r4, r4, sl
 8000ce2:	454c      	cmp	r4, r9
 8000ce4:	46c2      	mov	sl, r8
 8000ce6:	464b      	mov	r3, r9
 8000ce8:	d354      	bcc.n	8000d94 <__udivmoddi4+0x298>
 8000cea:	d051      	beq.n	8000d90 <__udivmoddi4+0x294>
 8000cec:	2e00      	cmp	r6, #0
 8000cee:	d069      	beq.n	8000dc4 <__udivmoddi4+0x2c8>
 8000cf0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cf4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cf8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cfc:	40fd      	lsrs	r5, r7
 8000cfe:	40fc      	lsrs	r4, r7
 8000d00:	ea4c 0505 	orr.w	r5, ip, r5
 8000d04:	e9c6 5400 	strd	r5, r4, [r6]
 8000d08:	2700      	movs	r7, #0
 8000d0a:	e747      	b.n	8000b9c <__udivmoddi4+0xa0>
 8000d0c:	f1c2 0320 	rsb	r3, r2, #32
 8000d10:	fa20 f703 	lsr.w	r7, r0, r3
 8000d14:	4095      	lsls	r5, r2
 8000d16:	fa01 f002 	lsl.w	r0, r1, r2
 8000d1a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d1e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d22:	4338      	orrs	r0, r7
 8000d24:	0c01      	lsrs	r1, r0, #16
 8000d26:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d2a:	fa1f f885 	uxth.w	r8, r5
 8000d2e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d36:	fb07 f308 	mul.w	r3, r7, r8
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d40:	d907      	bls.n	8000d52 <__udivmoddi4+0x256>
 8000d42:	1869      	adds	r1, r5, r1
 8000d44:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d48:	d22f      	bcs.n	8000daa <__udivmoddi4+0x2ae>
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	d92d      	bls.n	8000daa <__udivmoddi4+0x2ae>
 8000d4e:	3f02      	subs	r7, #2
 8000d50:	4429      	add	r1, r5
 8000d52:	1acb      	subs	r3, r1, r3
 8000d54:	b281      	uxth	r1, r0
 8000d56:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d5a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d62:	fb00 f308 	mul.w	r3, r0, r8
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d907      	bls.n	8000d7a <__udivmoddi4+0x27e>
 8000d6a:	1869      	adds	r1, r5, r1
 8000d6c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d70:	d217      	bcs.n	8000da2 <__udivmoddi4+0x2a6>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d915      	bls.n	8000da2 <__udivmoddi4+0x2a6>
 8000d76:	3802      	subs	r0, #2
 8000d78:	4429      	add	r1, r5
 8000d7a:	1ac9      	subs	r1, r1, r3
 8000d7c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d80:	e73b      	b.n	8000bfa <__udivmoddi4+0xfe>
 8000d82:	4637      	mov	r7, r6
 8000d84:	4630      	mov	r0, r6
 8000d86:	e709      	b.n	8000b9c <__udivmoddi4+0xa0>
 8000d88:	4607      	mov	r7, r0
 8000d8a:	e6e7      	b.n	8000b5c <__udivmoddi4+0x60>
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	e6fb      	b.n	8000b88 <__udivmoddi4+0x8c>
 8000d90:	4541      	cmp	r1, r8
 8000d92:	d2ab      	bcs.n	8000cec <__udivmoddi4+0x1f0>
 8000d94:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d98:	eb69 020e 	sbc.w	r2, r9, lr
 8000d9c:	3801      	subs	r0, #1
 8000d9e:	4613      	mov	r3, r2
 8000da0:	e7a4      	b.n	8000cec <__udivmoddi4+0x1f0>
 8000da2:	4660      	mov	r0, ip
 8000da4:	e7e9      	b.n	8000d7a <__udivmoddi4+0x27e>
 8000da6:	4618      	mov	r0, r3
 8000da8:	e795      	b.n	8000cd6 <__udivmoddi4+0x1da>
 8000daa:	4667      	mov	r7, ip
 8000dac:	e7d1      	b.n	8000d52 <__udivmoddi4+0x256>
 8000dae:	4681      	mov	r9, r0
 8000db0:	e77c      	b.n	8000cac <__udivmoddi4+0x1b0>
 8000db2:	3802      	subs	r0, #2
 8000db4:	442c      	add	r4, r5
 8000db6:	e747      	b.n	8000c48 <__udivmoddi4+0x14c>
 8000db8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dbc:	442b      	add	r3, r5
 8000dbe:	e72f      	b.n	8000c20 <__udivmoddi4+0x124>
 8000dc0:	4638      	mov	r0, r7
 8000dc2:	e708      	b.n	8000bd6 <__udivmoddi4+0xda>
 8000dc4:	4637      	mov	r7, r6
 8000dc6:	e6e9      	b.n	8000b9c <__udivmoddi4+0xa0>

08000dc8 <__aeabi_idiv0>:
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop

08000dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <HAL_Init+0x40>)
 8000dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <HAL_Init+0x40>)
 8000de2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <HAL_Init+0x40>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <HAL_Init+0x40>)
 8000dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df4:	2003      	movs	r0, #3
 8000df6:	f000 ffab 	bl	8001d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f000 f808 	bl	8000e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e00:	f004 fe3a 	bl	8005a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40023c00 	.word	0x40023c00

08000e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <HAL_InitTick+0x54>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <HAL_InitTick+0x58>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	4619      	mov	r1, r3
 8000e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 ffc3 	bl	8001dba <HAL_SYSTICK_Config>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e00e      	b.n	8000e5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b0f      	cmp	r3, #15
 8000e42:	d80a      	bhi.n	8000e5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e44:	2200      	movs	r2, #0
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4c:	f000 ff8b 	bl	8001d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e50:	4a06      	ldr	r2, [pc, #24]	; (8000e6c <HAL_InitTick+0x5c>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e56:	2300      	movs	r3, #0
 8000e58:	e000      	b.n	8000e5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000008 	.word	0x20000008
 8000e68:	20000004 	.word	0x20000004
 8000e6c:	20000000 	.word	0x20000000

08000e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_IncTick+0x20>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_IncTick+0x24>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <HAL_IncTick+0x24>)
 8000e82:	6013      	str	r3, [r2, #0]
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000004 	.word	0x20000004
 8000e94:	200000b4 	.word	0x200000b4

08000e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <HAL_GetTick+0x14>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	200000b4 	.word	0x200000b4

08000eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb8:	f7ff ffee 	bl	8000e98 <HAL_GetTick>
 8000ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec8:	d005      	beq.n	8000ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <HAL_Delay+0x40>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ed6:	bf00      	nop
 8000ed8:	f7ff ffde 	bl	8000e98 <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d8f7      	bhi.n	8000ed8 <HAL_Delay+0x28>
  {
  }
}
 8000ee8:	bf00      	nop
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000004 	.word	0x20000004

08000ef4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e0ed      	b.n	80010e2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d102      	bne.n	8000f18 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f003 f9fa 	bl	800430c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 0202 	bic.w	r2, r2, #2
 8000f26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f28:	f7ff ffb6 	bl	8000e98 <HAL_GetTick>
 8000f2c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f2e:	e012      	b.n	8000f56 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f30:	f7ff ffb2 	bl	8000e98 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b0a      	cmp	r3, #10
 8000f3c:	d90b      	bls.n	8000f56 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f42:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2205      	movs	r2, #5
 8000f4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e0c5      	b.n	80010e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0302 	and.w	r3, r3, #2
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1e5      	bne.n	8000f30 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f042 0201 	orr.w	r2, r2, #1
 8000f72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f74:	f7ff ff90 	bl	8000e98 <HAL_GetTick>
 8000f78:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f7a:	e012      	b.n	8000fa2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f7c:	f7ff ff8c 	bl	8000e98 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b0a      	cmp	r3, #10
 8000f88:	d90b      	bls.n	8000fa2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2205      	movs	r2, #5
 8000f9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e09f      	b.n	80010e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d0e5      	beq.n	8000f7c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	7e1b      	ldrb	r3, [r3, #24]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d108      	bne.n	8000fca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	e007      	b.n	8000fda <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	7e5b      	ldrb	r3, [r3, #25]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d108      	bne.n	8000ff4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	e007      	b.n	8001004 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001002:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	7e9b      	ldrb	r3, [r3, #26]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d108      	bne.n	800101e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f042 0220 	orr.w	r2, r2, #32
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	e007      	b.n	800102e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f022 0220 	bic.w	r2, r2, #32
 800102c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	7edb      	ldrb	r3, [r3, #27]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d108      	bne.n	8001048 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f022 0210 	bic.w	r2, r2, #16
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	e007      	b.n	8001058 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f042 0210 	orr.w	r2, r2, #16
 8001056:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	7f1b      	ldrb	r3, [r3, #28]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d108      	bne.n	8001072 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f042 0208 	orr.w	r2, r2, #8
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	e007      	b.n	8001082 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f022 0208 	bic.w	r2, r2, #8
 8001080:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	7f5b      	ldrb	r3, [r3, #29]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d108      	bne.n	800109c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f042 0204 	orr.w	r2, r2, #4
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	e007      	b.n	80010ac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 0204 	bic.w	r2, r2, #4
 80010aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	431a      	orrs	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	431a      	orrs	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	ea42 0103 	orr.w	r1, r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	1e5a      	subs	r2, r3, #1
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	430a      	orrs	r2, r1
 80010d0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2201      	movs	r2, #1
 80010dc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b087      	sub	sp, #28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001102:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001104:	7cfb      	ldrb	r3, [r7, #19]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d003      	beq.n	8001112 <HAL_CAN_ConfigFilter+0x26>
 800110a:	7cfb      	ldrb	r3, [r7, #19]
 800110c:	2b02      	cmp	r3, #2
 800110e:	f040 80be 	bne.w	800128e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001112:	4b65      	ldr	r3, [pc, #404]	; (80012a8 <HAL_CAN_ConfigFilter+0x1bc>)
 8001114:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800111c:	f043 0201 	orr.w	r2, r3, #1
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800112c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	431a      	orrs	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	f003 031f 	and.w	r3, r3, #31
 8001152:	2201      	movs	r2, #1
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	43db      	mvns	r3, r3
 8001164:	401a      	ands	r2, r3
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	69db      	ldr	r3, [r3, #28]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d123      	bne.n	80011bc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	43db      	mvns	r3, r3
 800117e:	401a      	ands	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001196:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	3248      	adds	r2, #72	; 0x48
 800119c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011b0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011b2:	6979      	ldr	r1, [r7, #20]
 80011b4:	3348      	adds	r3, #72	; 0x48
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	440b      	add	r3, r1
 80011ba:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	69db      	ldr	r3, [r3, #28]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d122      	bne.n	800120a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	431a      	orrs	r2, r3
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011e4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3248      	adds	r2, #72	; 0x48
 80011ea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011fe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001200:	6979      	ldr	r1, [r7, #20]
 8001202:	3348      	adds	r3, #72	; 0x48
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	440b      	add	r3, r1
 8001208:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d109      	bne.n	8001226 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	43db      	mvns	r3, r3
 800121c:	401a      	ands	r2, r3
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001224:	e007      	b.n	8001236 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	431a      	orrs	r2, r3
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d109      	bne.n	8001252 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	43db      	mvns	r3, r3
 8001248:	401a      	ands	r2, r3
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001250:	e007      	b.n	8001262 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	431a      	orrs	r2, r3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d107      	bne.n	800127a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	431a      	orrs	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001280:	f023 0201 	bic.w	r2, r3, #1
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	e006      	b.n	800129c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001292:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
  }
}
 800129c:	4618      	mov	r0, r3
 800129e:	371c      	adds	r7, #28
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	40006400 	.word	0x40006400

080012ac <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d12e      	bne.n	800131e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2202      	movs	r2, #2
 80012c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 0201 	bic.w	r2, r2, #1
 80012d6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80012d8:	f7ff fdde 	bl	8000e98 <HAL_GetTick>
 80012dc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012de:	e012      	b.n	8001306 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012e0:	f7ff fdda 	bl	8000e98 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b0a      	cmp	r3, #10
 80012ec:	d90b      	bls.n	8001306 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2205      	movs	r2, #5
 80012fe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e012      	b.n	800132c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1e5      	bne.n	80012e0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	e006      	b.n	800132c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001322:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
  }
}
 800132c:	4618      	mov	r0, r3
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001334:	b480      	push	{r7}
 8001336:	b089      	sub	sp, #36	; 0x24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
 8001340:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001348:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001352:	7ffb      	ldrb	r3, [r7, #31]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d003      	beq.n	8001360 <HAL_CAN_AddTxMessage+0x2c>
 8001358:	7ffb      	ldrb	r3, [r7, #31]
 800135a:	2b02      	cmp	r3, #2
 800135c:	f040 80b8 	bne.w	80014d0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d10a      	bne.n	8001380 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001370:	2b00      	cmp	r3, #0
 8001372:	d105      	bne.n	8001380 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800137a:	2b00      	cmp	r3, #0
 800137c:	f000 80a0 	beq.w	80014c0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	0e1b      	lsrs	r3, r3, #24
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	2b02      	cmp	r3, #2
 800138e:	d907      	bls.n	80013a0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001394:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e09e      	b.n	80014de <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80013a0:	2201      	movs	r2, #1
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	409a      	lsls	r2, r3
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d10d      	bne.n	80013ce <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80013bc:	68f9      	ldr	r1, [r7, #12]
 80013be:	6809      	ldr	r1, [r1, #0]
 80013c0:	431a      	orrs	r2, r3
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	3318      	adds	r3, #24
 80013c6:	011b      	lsls	r3, r3, #4
 80013c8:	440b      	add	r3, r1
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	e00f      	b.n	80013ee <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013d8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013de:	68f9      	ldr	r1, [r7, #12]
 80013e0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80013e2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	3318      	adds	r3, #24
 80013e8:	011b      	lsls	r3, r3, #4
 80013ea:	440b      	add	r3, r1
 80013ec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6819      	ldr	r1, [r3, #0]
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	691a      	ldr	r2, [r3, #16]
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	3318      	adds	r3, #24
 80013fa:	011b      	lsls	r3, r3, #4
 80013fc:	440b      	add	r3, r1
 80013fe:	3304      	adds	r3, #4
 8001400:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	7d1b      	ldrb	r3, [r3, #20]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d111      	bne.n	800142e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	3318      	adds	r3, #24
 8001412:	011b      	lsls	r3, r3, #4
 8001414:	4413      	add	r3, r2
 8001416:	3304      	adds	r3, #4
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	6811      	ldr	r1, [r2, #0]
 800141e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	3318      	adds	r3, #24
 8001426:	011b      	lsls	r3, r3, #4
 8001428:	440b      	add	r3, r1
 800142a:	3304      	adds	r3, #4
 800142c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3307      	adds	r3, #7
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	061a      	lsls	r2, r3, #24
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3306      	adds	r3, #6
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	041b      	lsls	r3, r3, #16
 800143e:	431a      	orrs	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3305      	adds	r3, #5
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	4313      	orrs	r3, r2
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	3204      	adds	r2, #4
 800144e:	7812      	ldrb	r2, [r2, #0]
 8001450:	4610      	mov	r0, r2
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	6811      	ldr	r1, [r2, #0]
 8001456:	ea43 0200 	orr.w	r2, r3, r0
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	011b      	lsls	r3, r3, #4
 800145e:	440b      	add	r3, r1
 8001460:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001464:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3303      	adds	r3, #3
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	061a      	lsls	r2, r3, #24
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3302      	adds	r3, #2
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	041b      	lsls	r3, r3, #16
 8001476:	431a      	orrs	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3301      	adds	r3, #1
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	4313      	orrs	r3, r2
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	7812      	ldrb	r2, [r2, #0]
 8001486:	4610      	mov	r0, r2
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	6811      	ldr	r1, [r2, #0]
 800148c:	ea43 0200 	orr.w	r2, r3, r0
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	011b      	lsls	r3, r3, #4
 8001494:	440b      	add	r3, r1
 8001496:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800149a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	3318      	adds	r3, #24
 80014a4:	011b      	lsls	r3, r3, #4
 80014a6:	4413      	add	r3, r2
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	6811      	ldr	r1, [r2, #0]
 80014ae:	f043 0201 	orr.w	r2, r3, #1
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	3318      	adds	r3, #24
 80014b6:	011b      	lsls	r3, r3, #4
 80014b8:	440b      	add	r3, r1
 80014ba:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	e00e      	b.n	80014de <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e006      	b.n	80014de <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
  }
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3724      	adds	r7, #36	; 0x24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80014ea:	b480      	push	{r7}
 80014ec:	b087      	sub	sp, #28
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	60f8      	str	r0, [r7, #12]
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
 80014f6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014fe:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001500:	7dfb      	ldrb	r3, [r7, #23]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d003      	beq.n	800150e <HAL_CAN_GetRxMessage+0x24>
 8001506:	7dfb      	ldrb	r3, [r7, #23]
 8001508:	2b02      	cmp	r3, #2
 800150a:	f040 80f4 	bne.w	80016f6 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d10e      	bne.n	8001532 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d116      	bne.n	8001550 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001526:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e0e8      	b.n	8001704 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	f003 0303 	and.w	r3, r3, #3
 800153c:	2b00      	cmp	r3, #0
 800153e:	d107      	bne.n	8001550 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001544:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e0d9      	b.n	8001704 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	331b      	adds	r3, #27
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	4413      	add	r3, r2
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0204 	and.w	r2, r3, #4
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10c      	bne.n	8001588 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	331b      	adds	r3, #27
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	4413      	add	r3, r2
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	0d5b      	lsrs	r3, r3, #21
 800157e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	e00b      	b.n	80015a0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	331b      	adds	r3, #27
 8001590:	011b      	lsls	r3, r3, #4
 8001592:	4413      	add	r3, r2
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	08db      	lsrs	r3, r3, #3
 8001598:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	331b      	adds	r3, #27
 80015a8:	011b      	lsls	r3, r3, #4
 80015aa:	4413      	add	r3, r2
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	085b      	lsrs	r3, r3, #1
 80015b0:	f003 0201 	and.w	r2, r3, #1
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	331b      	adds	r3, #27
 80015c0:	011b      	lsls	r3, r3, #4
 80015c2:	4413      	add	r3, r2
 80015c4:	3304      	adds	r3, #4
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 020f 	and.w	r2, r3, #15
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	331b      	adds	r3, #27
 80015d8:	011b      	lsls	r3, r3, #4
 80015da:	4413      	add	r3, r2
 80015dc:	3304      	adds	r3, #4
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	0a1b      	lsrs	r3, r3, #8
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	331b      	adds	r3, #27
 80015f0:	011b      	lsls	r3, r3, #4
 80015f2:	4413      	add	r3, r2
 80015f4:	3304      	adds	r3, #4
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	0c1b      	lsrs	r3, r3, #16
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	011b      	lsls	r3, r3, #4
 8001608:	4413      	add	r3, r2
 800160a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	b2da      	uxtb	r2, r3
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	011b      	lsls	r3, r3, #4
 800161e:	4413      	add	r3, r2
 8001620:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	0a1a      	lsrs	r2, r3, #8
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	3301      	adds	r3, #1
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	011b      	lsls	r3, r3, #4
 8001638:	4413      	add	r3, r2
 800163a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	0c1a      	lsrs	r2, r3, #16
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	3302      	adds	r3, #2
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	011b      	lsls	r3, r3, #4
 8001652:	4413      	add	r3, r2
 8001654:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	0e1a      	lsrs	r2, r3, #24
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	3303      	adds	r3, #3
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	011b      	lsls	r3, r3, #4
 800166c:	4413      	add	r3, r2
 800166e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	3304      	adds	r3, #4
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	011b      	lsls	r3, r3, #4
 8001684:	4413      	add	r3, r2
 8001686:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	0a1a      	lsrs	r2, r3, #8
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	3305      	adds	r3, #5
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	4413      	add	r3, r2
 80016a0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	0c1a      	lsrs	r2, r3, #16
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	3306      	adds	r3, #6
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	011b      	lsls	r3, r3, #4
 80016b8:	4413      	add	r3, r2
 80016ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	0e1a      	lsrs	r2, r3, #24
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	3307      	adds	r3, #7
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d108      	bne.n	80016e2 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68da      	ldr	r2, [r3, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0220 	orr.w	r2, r2, #32
 80016de:	60da      	str	r2, [r3, #12]
 80016e0:	e007      	b.n	80016f2 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	691a      	ldr	r2, [r3, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f042 0220 	orr.w	r2, r2, #32
 80016f0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	e006      	b.n	8001704 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
  }
}
 8001704:	4618      	mov	r0, r3
 8001706:	371c      	adds	r7, #28
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001720:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d002      	beq.n	800172e <HAL_CAN_ActivateNotification+0x1e>
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d109      	bne.n	8001742 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6959      	ldr	r1, [r3, #20]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800173e:	2300      	movs	r3, #0
 8001740:	e006      	b.n	8001750 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001746:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
  }
}
 8001750:	4618      	mov	r0, r3
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001764:	2300      	movs	r3, #0
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001798:	6a3b      	ldr	r3, [r7, #32]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d07c      	beq.n	800189c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d023      	beq.n	80017f4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2201      	movs	r2, #1
 80017b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f97d 	bl	8001abe <HAL_CAN_TxMailbox0CompleteCallback>
 80017c4:	e016      	b.n	80017f4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d004      	beq.n	80017da <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
 80017d8:	e00c      	b.n	80017f4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d004      	beq.n	80017ee <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
 80017ec:	e002      	b.n	80017f4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 f983 	bl	8001afa <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d024      	beq.n	8001848 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001806:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 f95d 	bl	8001ad2 <HAL_CAN_TxMailbox1CompleteCallback>
 8001818:	e016      	b.n	8001848 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001820:	2b00      	cmp	r3, #0
 8001822:	d004      	beq.n	800182e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
 800182c:	e00c      	b.n	8001848 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001834:	2b00      	cmp	r3, #0
 8001836:	d004      	beq.n	8001842 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
 8001840:	e002      	b.n	8001848 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f963 	bl	8001b0e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d024      	beq.n	800189c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800185a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 f93d 	bl	8001ae6 <HAL_CAN_TxMailbox2CompleteCallback>
 800186c:	e016      	b.n	800189c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d004      	beq.n	8001882 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
 8001880:	e00c      	b.n	800189c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d004      	beq.n	8001896 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
 8001894:	e002      	b.n	800189c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f943 	bl	8001b22 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800189c:	6a3b      	ldr	r3, [r7, #32]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00c      	beq.n	80018c0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f003 0310 	and.w	r3, r3, #16
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d007      	beq.n	80018c0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2210      	movs	r2, #16
 80018be:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	f003 0304 	and.w	r3, r3, #4
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00b      	beq.n	80018e2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f003 0308 	and.w	r3, r3, #8
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d006      	beq.n	80018e2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2208      	movs	r2, #8
 80018da:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 f92a 	bl	8001b36 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d009      	beq.n	8001900 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f003 f918 	bl	8004b30 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00c      	beq.n	8001924 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	f003 0310 	and.w	r3, r3, #16
 8001910:	2b00      	cmp	r3, #0
 8001912:	d007      	beq.n	8001924 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800191a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2210      	movs	r2, #16
 8001922:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	f003 0320 	and.w	r3, r3, #32
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00b      	beq.n	8001946 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	f003 0308 	and.w	r3, r3, #8
 8001934:	2b00      	cmp	r3, #0
 8001936:	d006      	beq.n	8001946 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2208      	movs	r2, #8
 800193e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 f90c 	bl	8001b5e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001946:	6a3b      	ldr	r3, [r7, #32]
 8001948:	f003 0310 	and.w	r3, r3, #16
 800194c:	2b00      	cmp	r3, #0
 800194e:	d009      	beq.n	8001964 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d002      	beq.n	8001964 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f8f3 	bl	8001b4a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001964:	6a3b      	ldr	r3, [r7, #32]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00b      	beq.n	8001986 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	f003 0310 	and.w	r3, r3, #16
 8001974:	2b00      	cmp	r3, #0
 8001976:	d006      	beq.n	8001986 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2210      	movs	r2, #16
 800197e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 f8f6 	bl	8001b72 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001986:	6a3b      	ldr	r3, [r7, #32]
 8001988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d00b      	beq.n	80019a8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	2b00      	cmp	r3, #0
 8001998:	d006      	beq.n	80019a8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2208      	movs	r2, #8
 80019a0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f8ef 	bl	8001b86 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d075      	beq.n	8001a9e <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d06c      	beq.n	8001a96 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019bc:	6a3b      	ldr	r3, [r7, #32]
 80019be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d008      	beq.n	80019d8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019d8:	6a3b      	ldr	r3, [r7, #32]
 80019da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d008      	beq.n	80019f4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	f043 0302 	orr.w	r3, r3, #2
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019f4:	6a3b      	ldr	r3, [r7, #32]
 80019f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d008      	beq.n	8001a10 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	f043 0304 	orr.w	r3, r3, #4
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a10:	6a3b      	ldr	r3, [r7, #32]
 8001a12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d03d      	beq.n	8001a96 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d038      	beq.n	8001a96 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a2a:	2b30      	cmp	r3, #48	; 0x30
 8001a2c:	d017      	beq.n	8001a5e <HAL_CAN_IRQHandler+0x302>
 8001a2e:	2b30      	cmp	r3, #48	; 0x30
 8001a30:	d804      	bhi.n	8001a3c <HAL_CAN_IRQHandler+0x2e0>
 8001a32:	2b10      	cmp	r3, #16
 8001a34:	d009      	beq.n	8001a4a <HAL_CAN_IRQHandler+0x2ee>
 8001a36:	2b20      	cmp	r3, #32
 8001a38:	d00c      	beq.n	8001a54 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001a3a:	e024      	b.n	8001a86 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001a3c:	2b50      	cmp	r3, #80	; 0x50
 8001a3e:	d018      	beq.n	8001a72 <HAL_CAN_IRQHandler+0x316>
 8001a40:	2b60      	cmp	r3, #96	; 0x60
 8001a42:	d01b      	beq.n	8001a7c <HAL_CAN_IRQHandler+0x320>
 8001a44:	2b40      	cmp	r3, #64	; 0x40
 8001a46:	d00f      	beq.n	8001a68 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001a48:	e01d      	b.n	8001a86 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	f043 0308 	orr.w	r3, r3, #8
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a52:	e018      	b.n	8001a86 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	f043 0310 	orr.w	r3, r3, #16
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a5c:	e013      	b.n	8001a86 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	f043 0320 	orr.w	r3, r3, #32
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a66:	e00e      	b.n	8001a86 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a70:	e009      	b.n	8001a86 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a7a:	e004      	b.n	8001a86 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a84:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	699a      	ldr	r2, [r3, #24]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001a94:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2204      	movs	r2, #4
 8001a9c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d008      	beq.n	8001ab6 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f872 	bl	8001b9a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001ab6:	bf00      	nop
 8001ab8:	3728      	adds	r7, #40	; 0x28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be2:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	60d3      	str	r3, [r2, #12]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <__NVIC_GetPriorityGrouping+0x18>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	0a1b      	lsrs	r3, r3, #8
 8001c02:	f003 0307 	and.w	r3, r3, #7
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	db0b      	blt.n	8001c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	f003 021f 	and.w	r2, r3, #31
 8001c2c:	4907      	ldr	r1, [pc, #28]	; (8001c4c <__NVIC_EnableIRQ+0x38>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	095b      	lsrs	r3, r3, #5
 8001c34:	2001      	movs	r0, #1
 8001c36:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000e100 	.word	0xe000e100

08001c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	6039      	str	r1, [r7, #0]
 8001c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	db0a      	blt.n	8001c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	490c      	ldr	r1, [pc, #48]	; (8001c9c <__NVIC_SetPriority+0x4c>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	0112      	lsls	r2, r2, #4
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	440b      	add	r3, r1
 8001c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c78:	e00a      	b.n	8001c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	4908      	ldr	r1, [pc, #32]	; (8001ca0 <__NVIC_SetPriority+0x50>)
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	3b04      	subs	r3, #4
 8001c88:	0112      	lsls	r2, r2, #4
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	761a      	strb	r2, [r3, #24]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000e100 	.word	0xe000e100
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b089      	sub	sp, #36	; 0x24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f1c3 0307 	rsb	r3, r3, #7
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	bf28      	it	cs
 8001cc2:	2304      	movcs	r3, #4
 8001cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3304      	adds	r3, #4
 8001cca:	2b06      	cmp	r3, #6
 8001ccc:	d902      	bls.n	8001cd4 <NVIC_EncodePriority+0x30>
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3b03      	subs	r3, #3
 8001cd2:	e000      	b.n	8001cd6 <NVIC_EncodePriority+0x32>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cec:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf6:	43d9      	mvns	r1, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfc:	4313      	orrs	r3, r2
         );
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3724      	adds	r7, #36	; 0x24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
	...

08001d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d1c:	d301      	bcc.n	8001d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e00f      	b.n	8001d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d22:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <SysTick_Config+0x40>)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d2a:	210f      	movs	r1, #15
 8001d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d30:	f7ff ff8e 	bl	8001c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <SysTick_Config+0x40>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d3a:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <SysTick_Config+0x40>)
 8001d3c:	2207      	movs	r2, #7
 8001d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	e000e010 	.word	0xe000e010

08001d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff ff29 	bl	8001bb0 <__NVIC_SetPriorityGrouping>
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b086      	sub	sp, #24
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	60b9      	str	r1, [r7, #8]
 8001d70:	607a      	str	r2, [r7, #4]
 8001d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d78:	f7ff ff3e 	bl	8001bf8 <__NVIC_GetPriorityGrouping>
 8001d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	68b9      	ldr	r1, [r7, #8]
 8001d82:	6978      	ldr	r0, [r7, #20]
 8001d84:	f7ff ff8e 	bl	8001ca4 <NVIC_EncodePriority>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d8e:	4611      	mov	r1, r2
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff5d 	bl	8001c50 <__NVIC_SetPriority>
}
 8001d96:	bf00      	nop
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff31 	bl	8001c14 <__NVIC_EnableIRQ>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff ffa2 	bl	8001d0c <SysTick_Config>
 8001dc8:	4603      	mov	r3, r0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d106      	bne.n	8001df0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001de2:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a08      	ldr	r2, [pc, #32]	; (8001e08 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001de8:	f043 0304 	orr.w	r3, r3, #4
 8001dec:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001dee:	e005      	b.n	8001dfc <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001df6:	f023 0304 	bic.w	r3, r3, #4
 8001dfa:	6013      	str	r3, [r2, #0]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000e010 	.word	0xe000e010

08001e0c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001e10:	f000 f802 	bl	8001e18 <HAL_SYSTICK_Callback>
}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d004      	beq.n	8001e44 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2280      	movs	r2, #128	; 0x80
 8001e3e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e00c      	b.n	8001e5e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2205      	movs	r2, #5
 8001e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0201 	bic.w	r2, r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b089      	sub	sp, #36	; 0x24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
 8001e86:	e177      	b.n	8002178 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e88:	2201      	movs	r2, #1
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	f040 8166 	bne.w	8002172 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x4a>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b12      	cmp	r3, #18
 8001eb4:	d123      	bne.n	8001efe <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	08da      	lsrs	r2, r3, #3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3208      	adds	r2, #8
 8001ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	220f      	movs	r2, #15
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	691a      	ldr	r2, [r3, #16]
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	08da      	lsrs	r2, r3, #3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3208      	adds	r2, #8
 8001ef8:	69b9      	ldr	r1, [r7, #24]
 8001efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	2203      	movs	r2, #3
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 0203 	and.w	r2, r3, #3
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d00b      	beq.n	8001f52 <HAL_GPIO_Init+0xe6>
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d007      	beq.n	8001f52 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f46:	2b11      	cmp	r3, #17
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b12      	cmp	r3, #18
 8001f50:	d130      	bne.n	8001fb4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4013      	ands	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f88:	2201      	movs	r2, #1
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	091b      	lsrs	r3, r3, #4
 8001f9e:	f003 0201 	and.w	r2, r3, #1
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 80c0 	beq.w	8002172 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	4b65      	ldr	r3, [pc, #404]	; (800218c <HAL_GPIO_Init+0x320>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	4a64      	ldr	r2, [pc, #400]	; (800218c <HAL_GPIO_Init+0x320>)
 8001ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002000:	6453      	str	r3, [r2, #68]	; 0x44
 8002002:	4b62      	ldr	r3, [pc, #392]	; (800218c <HAL_GPIO_Init+0x320>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800200e:	4a60      	ldr	r2, [pc, #384]	; (8002190 <HAL_GPIO_Init+0x324>)
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	089b      	lsrs	r3, r3, #2
 8002014:	3302      	adds	r3, #2
 8002016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800201a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	220f      	movs	r2, #15
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a57      	ldr	r2, [pc, #348]	; (8002194 <HAL_GPIO_Init+0x328>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d037      	beq.n	80020aa <HAL_GPIO_Init+0x23e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a56      	ldr	r2, [pc, #344]	; (8002198 <HAL_GPIO_Init+0x32c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d031      	beq.n	80020a6 <HAL_GPIO_Init+0x23a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a55      	ldr	r2, [pc, #340]	; (800219c <HAL_GPIO_Init+0x330>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d02b      	beq.n	80020a2 <HAL_GPIO_Init+0x236>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a54      	ldr	r2, [pc, #336]	; (80021a0 <HAL_GPIO_Init+0x334>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d025      	beq.n	800209e <HAL_GPIO_Init+0x232>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a53      	ldr	r2, [pc, #332]	; (80021a4 <HAL_GPIO_Init+0x338>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d01f      	beq.n	800209a <HAL_GPIO_Init+0x22e>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a52      	ldr	r2, [pc, #328]	; (80021a8 <HAL_GPIO_Init+0x33c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d019      	beq.n	8002096 <HAL_GPIO_Init+0x22a>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a51      	ldr	r2, [pc, #324]	; (80021ac <HAL_GPIO_Init+0x340>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d013      	beq.n	8002092 <HAL_GPIO_Init+0x226>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a50      	ldr	r2, [pc, #320]	; (80021b0 <HAL_GPIO_Init+0x344>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d00d      	beq.n	800208e <HAL_GPIO_Init+0x222>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a4f      	ldr	r2, [pc, #316]	; (80021b4 <HAL_GPIO_Init+0x348>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d007      	beq.n	800208a <HAL_GPIO_Init+0x21e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a4e      	ldr	r2, [pc, #312]	; (80021b8 <HAL_GPIO_Init+0x34c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d101      	bne.n	8002086 <HAL_GPIO_Init+0x21a>
 8002082:	2309      	movs	r3, #9
 8002084:	e012      	b.n	80020ac <HAL_GPIO_Init+0x240>
 8002086:	230a      	movs	r3, #10
 8002088:	e010      	b.n	80020ac <HAL_GPIO_Init+0x240>
 800208a:	2308      	movs	r3, #8
 800208c:	e00e      	b.n	80020ac <HAL_GPIO_Init+0x240>
 800208e:	2307      	movs	r3, #7
 8002090:	e00c      	b.n	80020ac <HAL_GPIO_Init+0x240>
 8002092:	2306      	movs	r3, #6
 8002094:	e00a      	b.n	80020ac <HAL_GPIO_Init+0x240>
 8002096:	2305      	movs	r3, #5
 8002098:	e008      	b.n	80020ac <HAL_GPIO_Init+0x240>
 800209a:	2304      	movs	r3, #4
 800209c:	e006      	b.n	80020ac <HAL_GPIO_Init+0x240>
 800209e:	2303      	movs	r3, #3
 80020a0:	e004      	b.n	80020ac <HAL_GPIO_Init+0x240>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e002      	b.n	80020ac <HAL_GPIO_Init+0x240>
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <HAL_GPIO_Init+0x240>
 80020aa:	2300      	movs	r3, #0
 80020ac:	69fa      	ldr	r2, [r7, #28]
 80020ae:	f002 0203 	and.w	r2, r2, #3
 80020b2:	0092      	lsls	r2, r2, #2
 80020b4:	4093      	lsls	r3, r2
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020bc:	4934      	ldr	r1, [pc, #208]	; (8002190 <HAL_GPIO_Init+0x324>)
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	089b      	lsrs	r3, r3, #2
 80020c2:	3302      	adds	r3, #2
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020ca:	4b3c      	ldr	r3, [pc, #240]	; (80021bc <HAL_GPIO_Init+0x350>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4013      	ands	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020ee:	4a33      	ldr	r2, [pc, #204]	; (80021bc <HAL_GPIO_Init+0x350>)
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020f4:	4b31      	ldr	r3, [pc, #196]	; (80021bc <HAL_GPIO_Init+0x350>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002118:	4a28      	ldr	r2, [pc, #160]	; (80021bc <HAL_GPIO_Init+0x350>)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800211e:	4b27      	ldr	r3, [pc, #156]	; (80021bc <HAL_GPIO_Init+0x350>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002142:	4a1e      	ldr	r2, [pc, #120]	; (80021bc <HAL_GPIO_Init+0x350>)
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002148:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <HAL_GPIO_Init+0x350>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800216c:	4a13      	ldr	r2, [pc, #76]	; (80021bc <HAL_GPIO_Init+0x350>)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	3301      	adds	r3, #1
 8002176:	61fb      	str	r3, [r7, #28]
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	2b0f      	cmp	r3, #15
 800217c:	f67f ae84 	bls.w	8001e88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002180:	bf00      	nop
 8002182:	3724      	adds	r7, #36	; 0x24
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	40023800 	.word	0x40023800
 8002190:	40013800 	.word	0x40013800
 8002194:	40020000 	.word	0x40020000
 8002198:	40020400 	.word	0x40020400
 800219c:	40020800 	.word	0x40020800
 80021a0:	40020c00 	.word	0x40020c00
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40021400 	.word	0x40021400
 80021ac:	40021800 	.word	0x40021800
 80021b0:	40021c00 	.word	0x40021c00
 80021b4:	40022000 	.word	0x40022000
 80021b8:	40022400 	.word	0x40022400
 80021bc:	40013c00 	.word	0x40013c00

080021c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	807b      	strh	r3, [r7, #2]
 80021cc:	4613      	mov	r3, r2
 80021ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021d0:	787b      	ldrb	r3, [r7, #1]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021d6:	887a      	ldrh	r2, [r7, #2]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021dc:	e003      	b.n	80021e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021de:	887b      	ldrh	r3, [r7, #2]
 80021e0:	041a      	lsls	r2, r3, #16
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	619a      	str	r2, [r3, #24]
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
 80021fa:	460b      	mov	r3, r1
 80021fc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695a      	ldr	r2, [r3, #20]
 8002202:	887b      	ldrh	r3, [r7, #2]
 8002204:	401a      	ands	r2, r3
 8002206:	887b      	ldrh	r3, [r7, #2]
 8002208:	429a      	cmp	r2, r3
 800220a:	d104      	bne.n	8002216 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800220c:	887b      	ldrh	r3, [r7, #2]
 800220e:	041a      	lsls	r2, r3, #16
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002214:	e002      	b.n	800221c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002216:	887a      	ldrh	r2, [r7, #2]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	619a      	str	r2, [r3, #24]
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e22d      	b.n	8002696 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	d075      	beq.n	8002332 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002246:	4ba3      	ldr	r3, [pc, #652]	; (80024d4 <HAL_RCC_OscConfig+0x2ac>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 030c 	and.w	r3, r3, #12
 800224e:	2b04      	cmp	r3, #4
 8002250:	d00c      	beq.n	800226c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002252:	4ba0      	ldr	r3, [pc, #640]	; (80024d4 <HAL_RCC_OscConfig+0x2ac>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800225a:	2b08      	cmp	r3, #8
 800225c:	d112      	bne.n	8002284 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800225e:	4b9d      	ldr	r3, [pc, #628]	; (80024d4 <HAL_RCC_OscConfig+0x2ac>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002266:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800226a:	d10b      	bne.n	8002284 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226c:	4b99      	ldr	r3, [pc, #612]	; (80024d4 <HAL_RCC_OscConfig+0x2ac>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d05b      	beq.n	8002330 <HAL_RCC_OscConfig+0x108>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d157      	bne.n	8002330 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e208      	b.n	8002696 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800228c:	d106      	bne.n	800229c <HAL_RCC_OscConfig+0x74>
 800228e:	4b91      	ldr	r3, [pc, #580]	; (80024d4 <HAL_RCC_OscConfig+0x2ac>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a90      	ldr	r2, [pc, #576]	; (80024d4 <HAL_RCC_OscConfig+0x2ac>)
 8002294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	e01d      	b.n	80022d8 <HAL_RCC_OscConfig+0xb0>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022a4:	d10c      	bne.n	80022c0 <HAL_RCC_OscConfig+0x98>
 80022a6:	4b8b      	ldr	r3, [pc, #556]	; (80024d4 <HAL_RCC_OscConfig+0x2ac>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a8a      	ldr	r2, [pc, #552]	; (80024d4 <HAL_RCC_OscConfig+0x2ac>)
 80022ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	4b88      	ldr	r3, [pc, #544]	; (80024d4 <HAL_RCC_OscConfig+0x2ac>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a87      	ldr	r2, [pc, #540]	; (80024d4 <HAL_RCC_OscConfig+0x2ac>)
 80022b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	e00b      	b.n	80022d8 <HAL_RCC_OscConfig+0xb0>
 80022c0:	4b84      	ldr	r3, [pc, #528]	; (80024d4 <HAL_RCC_OscConfig+0x2ac>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a83      	ldr	r2, [pc, #524]	; (80024d4 <HAL_RCC_OscConfig+0x2ac>)
 80022c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	4b81      	ldr	r3, [pc, #516]	; (80024d4 <HAL_RCC_OscConfig+0x2ac>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a80      	ldr	r2, [pc, #512]	; (80024d4 <HAL_RCC_OscConfig+0x2ac>)
 80022d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d013      	beq.n	8002308 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e0:	f7fe fdda 	bl	8000e98 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022e8:	f7fe fdd6 	bl	8000e98 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b64      	cmp	r3, #100	; 0x64
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e1cd      	b.n	8002696 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fa:	4b76      	ldr	r3, [pc, #472]	; (80024d4 <HAL_RCC_OscConfig+0x2ac>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0xc0>
 8002306:	e014      	b.n	8002332 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7fe fdc6 	bl	8000e98 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002310:	f7fe fdc2 	bl	8000e98 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b64      	cmp	r3, #100	; 0x64
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e1b9      	b.n	8002696 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002322:	4b6c      	ldr	r3, [pc, #432]	; (80024d4 <HAL_RCC_OscConfig+0x2ac>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0xe8>
 800232e:	e000      	b.n	8002332 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d063      	beq.n	8002406 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800233e:	4b65      	ldr	r3, [pc, #404]	; (80024d4 <HAL_RCC_OscConfig+0x2ac>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 030c 	and.w	r3, r3, #12
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00b      	beq.n	8002362 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800234a:	4b62      	ldr	r3, [pc, #392]	; (80024d4 <HAL_RCC_OscConfig+0x2ac>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002352:	2b08      	cmp	r3, #8
 8002354:	d11c      	bne.n	8002390 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002356:	4b5f      	ldr	r3, [pc, #380]	; (80024d4 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d116      	bne.n	8002390 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002362:	4b5c      	ldr	r3, [pc, #368]	; (80024d4 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d005      	beq.n	800237a <HAL_RCC_OscConfig+0x152>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d001      	beq.n	800237a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e18d      	b.n	8002696 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237a:	4b56      	ldr	r3, [pc, #344]	; (80024d4 <HAL_RCC_OscConfig+0x2ac>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4952      	ldr	r1, [pc, #328]	; (80024d4 <HAL_RCC_OscConfig+0x2ac>)
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238e:	e03a      	b.n	8002406 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d020      	beq.n	80023da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002398:	4b4f      	ldr	r3, [pc, #316]	; (80024d8 <HAL_RCC_OscConfig+0x2b0>)
 800239a:	2201      	movs	r2, #1
 800239c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239e:	f7fe fd7b 	bl	8000e98 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023a6:	f7fe fd77 	bl	8000e98 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e16e      	b.n	8002696 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b8:	4b46      	ldr	r3, [pc, #280]	; (80024d4 <HAL_RCC_OscConfig+0x2ac>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c4:	4b43      	ldr	r3, [pc, #268]	; (80024d4 <HAL_RCC_OscConfig+0x2ac>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4940      	ldr	r1, [pc, #256]	; (80024d4 <HAL_RCC_OscConfig+0x2ac>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	600b      	str	r3, [r1, #0]
 80023d8:	e015      	b.n	8002406 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023da:	4b3f      	ldr	r3, [pc, #252]	; (80024d8 <HAL_RCC_OscConfig+0x2b0>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e0:	f7fe fd5a 	bl	8000e98 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023e8:	f7fe fd56 	bl	8000e98 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e14d      	b.n	8002696 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fa:	4b36      	ldr	r3, [pc, #216]	; (80024d4 <HAL_RCC_OscConfig+0x2ac>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d030      	beq.n	8002474 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d016      	beq.n	8002448 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800241a:	4b30      	ldr	r3, [pc, #192]	; (80024dc <HAL_RCC_OscConfig+0x2b4>)
 800241c:	2201      	movs	r2, #1
 800241e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002420:	f7fe fd3a 	bl	8000e98 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002428:	f7fe fd36 	bl	8000e98 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e12d      	b.n	8002696 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800243a:	4b26      	ldr	r3, [pc, #152]	; (80024d4 <HAL_RCC_OscConfig+0x2ac>)
 800243c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0x200>
 8002446:	e015      	b.n	8002474 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002448:	4b24      	ldr	r3, [pc, #144]	; (80024dc <HAL_RCC_OscConfig+0x2b4>)
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244e:	f7fe fd23 	bl	8000e98 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002456:	f7fe fd1f 	bl	8000e98 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e116      	b.n	8002696 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002468:	4b1a      	ldr	r3, [pc, #104]	; (80024d4 <HAL_RCC_OscConfig+0x2ac>)
 800246a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1f0      	bne.n	8002456 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 80a0 	beq.w	80025c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002482:	2300      	movs	r3, #0
 8002484:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002486:	4b13      	ldr	r3, [pc, #76]	; (80024d4 <HAL_RCC_OscConfig+0x2ac>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10f      	bne.n	80024b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <HAL_RCC_OscConfig+0x2ac>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	4a0e      	ldr	r2, [pc, #56]	; (80024d4 <HAL_RCC_OscConfig+0x2ac>)
 800249c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a0:	6413      	str	r3, [r2, #64]	; 0x40
 80024a2:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <HAL_RCC_OscConfig+0x2ac>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80024ae:	2301      	movs	r3, #1
 80024b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b2:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <HAL_RCC_OscConfig+0x2b8>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d121      	bne.n	8002502 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024be:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <HAL_RCC_OscConfig+0x2b8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a07      	ldr	r2, [pc, #28]	; (80024e0 <HAL_RCC_OscConfig+0x2b8>)
 80024c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ca:	f7fe fce5 	bl	8000e98 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d0:	e011      	b.n	80024f6 <HAL_RCC_OscConfig+0x2ce>
 80024d2:	bf00      	nop
 80024d4:	40023800 	.word	0x40023800
 80024d8:	42470000 	.word	0x42470000
 80024dc:	42470e80 	.word	0x42470e80
 80024e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e4:	f7fe fcd8 	bl	8000e98 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e0cf      	b.n	8002696 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f6:	4b6a      	ldr	r3, [pc, #424]	; (80026a0 <HAL_RCC_OscConfig+0x478>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d106      	bne.n	8002518 <HAL_RCC_OscConfig+0x2f0>
 800250a:	4b66      	ldr	r3, [pc, #408]	; (80026a4 <HAL_RCC_OscConfig+0x47c>)
 800250c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250e:	4a65      	ldr	r2, [pc, #404]	; (80026a4 <HAL_RCC_OscConfig+0x47c>)
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	6713      	str	r3, [r2, #112]	; 0x70
 8002516:	e01c      	b.n	8002552 <HAL_RCC_OscConfig+0x32a>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2b05      	cmp	r3, #5
 800251e:	d10c      	bne.n	800253a <HAL_RCC_OscConfig+0x312>
 8002520:	4b60      	ldr	r3, [pc, #384]	; (80026a4 <HAL_RCC_OscConfig+0x47c>)
 8002522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002524:	4a5f      	ldr	r2, [pc, #380]	; (80026a4 <HAL_RCC_OscConfig+0x47c>)
 8002526:	f043 0304 	orr.w	r3, r3, #4
 800252a:	6713      	str	r3, [r2, #112]	; 0x70
 800252c:	4b5d      	ldr	r3, [pc, #372]	; (80026a4 <HAL_RCC_OscConfig+0x47c>)
 800252e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002530:	4a5c      	ldr	r2, [pc, #368]	; (80026a4 <HAL_RCC_OscConfig+0x47c>)
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	6713      	str	r3, [r2, #112]	; 0x70
 8002538:	e00b      	b.n	8002552 <HAL_RCC_OscConfig+0x32a>
 800253a:	4b5a      	ldr	r3, [pc, #360]	; (80026a4 <HAL_RCC_OscConfig+0x47c>)
 800253c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253e:	4a59      	ldr	r2, [pc, #356]	; (80026a4 <HAL_RCC_OscConfig+0x47c>)
 8002540:	f023 0301 	bic.w	r3, r3, #1
 8002544:	6713      	str	r3, [r2, #112]	; 0x70
 8002546:	4b57      	ldr	r3, [pc, #348]	; (80026a4 <HAL_RCC_OscConfig+0x47c>)
 8002548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254a:	4a56      	ldr	r2, [pc, #344]	; (80026a4 <HAL_RCC_OscConfig+0x47c>)
 800254c:	f023 0304 	bic.w	r3, r3, #4
 8002550:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d015      	beq.n	8002586 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255a:	f7fe fc9d 	bl	8000e98 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002560:	e00a      	b.n	8002578 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002562:	f7fe fc99 	bl	8000e98 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002570:	4293      	cmp	r3, r2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e08e      	b.n	8002696 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002578:	4b4a      	ldr	r3, [pc, #296]	; (80026a4 <HAL_RCC_OscConfig+0x47c>)
 800257a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0ee      	beq.n	8002562 <HAL_RCC_OscConfig+0x33a>
 8002584:	e014      	b.n	80025b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002586:	f7fe fc87 	bl	8000e98 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800258c:	e00a      	b.n	80025a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800258e:	f7fe fc83 	bl	8000e98 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	f241 3288 	movw	r2, #5000	; 0x1388
 800259c:	4293      	cmp	r3, r2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e078      	b.n	8002696 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a4:	4b3f      	ldr	r3, [pc, #252]	; (80026a4 <HAL_RCC_OscConfig+0x47c>)
 80025a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1ee      	bne.n	800258e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025b0:	7dfb      	ldrb	r3, [r7, #23]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d105      	bne.n	80025c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b6:	4b3b      	ldr	r3, [pc, #236]	; (80026a4 <HAL_RCC_OscConfig+0x47c>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	4a3a      	ldr	r2, [pc, #232]	; (80026a4 <HAL_RCC_OscConfig+0x47c>)
 80025bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d064      	beq.n	8002694 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025ca:	4b36      	ldr	r3, [pc, #216]	; (80026a4 <HAL_RCC_OscConfig+0x47c>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d05c      	beq.n	8002690 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d141      	bne.n	8002662 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025de:	4b32      	ldr	r3, [pc, #200]	; (80026a8 <HAL_RCC_OscConfig+0x480>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7fe fc58 	bl	8000e98 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ec:	f7fe fc54 	bl	8000e98 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e04b      	b.n	8002696 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025fe:	4b29      	ldr	r3, [pc, #164]	; (80026a4 <HAL_RCC_OscConfig+0x47c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f0      	bne.n	80025ec <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69da      	ldr	r2, [r3, #28]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	019b      	lsls	r3, r3, #6
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002620:	085b      	lsrs	r3, r3, #1
 8002622:	3b01      	subs	r3, #1
 8002624:	041b      	lsls	r3, r3, #16
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262c:	061b      	lsls	r3, r3, #24
 800262e:	491d      	ldr	r1, [pc, #116]	; (80026a4 <HAL_RCC_OscConfig+0x47c>)
 8002630:	4313      	orrs	r3, r2
 8002632:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002634:	4b1c      	ldr	r3, [pc, #112]	; (80026a8 <HAL_RCC_OscConfig+0x480>)
 8002636:	2201      	movs	r2, #1
 8002638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263a:	f7fe fc2d 	bl	8000e98 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002642:	f7fe fc29 	bl	8000e98 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e020      	b.n	8002696 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002654:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <HAL_RCC_OscConfig+0x47c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f0      	beq.n	8002642 <HAL_RCC_OscConfig+0x41a>
 8002660:	e018      	b.n	8002694 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002662:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <HAL_RCC_OscConfig+0x480>)
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7fe fc16 	bl	8000e98 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002670:	f7fe fc12 	bl	8000e98 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e009      	b.n	8002696 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002682:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <HAL_RCC_OscConfig+0x47c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x448>
 800268e:	e001      	b.n	8002694 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e000      	b.n	8002696 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40007000 	.word	0x40007000
 80026a4:	40023800 	.word	0x40023800
 80026a8:	42470060 	.word	0x42470060

080026ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0ca      	b.n	8002856 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026c0:	4b67      	ldr	r3, [pc, #412]	; (8002860 <HAL_RCC_ClockConfig+0x1b4>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 030f 	and.w	r3, r3, #15
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d90c      	bls.n	80026e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ce:	4b64      	ldr	r3, [pc, #400]	; (8002860 <HAL_RCC_ClockConfig+0x1b4>)
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d6:	4b62      	ldr	r3, [pc, #392]	; (8002860 <HAL_RCC_ClockConfig+0x1b4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0b6      	b.n	8002856 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d020      	beq.n	8002736 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002700:	4b58      	ldr	r3, [pc, #352]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	4a57      	ldr	r2, [pc, #348]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 8002706:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800270a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002718:	4b52      	ldr	r3, [pc, #328]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	4a51      	ldr	r2, [pc, #324]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 800271e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002722:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002724:	4b4f      	ldr	r3, [pc, #316]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	494c      	ldr	r1, [pc, #304]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 8002732:	4313      	orrs	r3, r2
 8002734:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d044      	beq.n	80027cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d107      	bne.n	800275a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274a:	4b46      	ldr	r3, [pc, #280]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d119      	bne.n	800278a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e07d      	b.n	8002856 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d003      	beq.n	800276a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002766:	2b03      	cmp	r3, #3
 8002768:	d107      	bne.n	800277a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276a:	4b3e      	ldr	r3, [pc, #248]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e06d      	b.n	8002856 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277a:	4b3a      	ldr	r3, [pc, #232]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e065      	b.n	8002856 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800278a:	4b36      	ldr	r3, [pc, #216]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f023 0203 	bic.w	r2, r3, #3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	4933      	ldr	r1, [pc, #204]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 8002798:	4313      	orrs	r3, r2
 800279a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800279c:	f7fe fb7c 	bl	8000e98 <HAL_GetTick>
 80027a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a2:	e00a      	b.n	80027ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a4:	f7fe fb78 	bl	8000e98 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e04d      	b.n	8002856 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ba:	4b2a      	ldr	r3, [pc, #168]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 020c 	and.w	r2, r3, #12
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d1eb      	bne.n	80027a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027cc:	4b24      	ldr	r3, [pc, #144]	; (8002860 <HAL_RCC_ClockConfig+0x1b4>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 030f 	and.w	r3, r3, #15
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d20c      	bcs.n	80027f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027da:	4b21      	ldr	r3, [pc, #132]	; (8002860 <HAL_RCC_ClockConfig+0x1b4>)
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e2:	4b1f      	ldr	r3, [pc, #124]	; (8002860 <HAL_RCC_ClockConfig+0x1b4>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d001      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e030      	b.n	8002856 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002800:	4b18      	ldr	r3, [pc, #96]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	4915      	ldr	r1, [pc, #84]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 800280e:	4313      	orrs	r3, r2
 8002810:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d009      	beq.n	8002832 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800281e:	4b11      	ldr	r3, [pc, #68]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	490d      	ldr	r1, [pc, #52]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 800282e:	4313      	orrs	r3, r2
 8002830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002832:	f000 f81d 	bl	8002870 <HAL_RCC_GetSysClockFreq>
 8002836:	4601      	mov	r1, r0
 8002838:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	4a09      	ldr	r2, [pc, #36]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002844:	5cd3      	ldrb	r3, [r2, r3]
 8002846:	fa21 f303 	lsr.w	r3, r1, r3
 800284a:	4a08      	ldr	r2, [pc, #32]	; (800286c <HAL_RCC_ClockConfig+0x1c0>)
 800284c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800284e:	2000      	movs	r0, #0
 8002850:	f7fe fade 	bl	8000e10 <HAL_InitTick>

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40023c00 	.word	0x40023c00
 8002864:	40023800 	.word	0x40023800
 8002868:	08007560 	.word	0x08007560
 800286c:	20000008 	.word	0x20000008

08002870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002876:	2300      	movs	r3, #0
 8002878:	607b      	str	r3, [r7, #4]
 800287a:	2300      	movs	r3, #0
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	2300      	movs	r3, #0
 8002880:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002882:	2300      	movs	r3, #0
 8002884:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002886:	4b50      	ldr	r3, [pc, #320]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b04      	cmp	r3, #4
 8002890:	d007      	beq.n	80028a2 <HAL_RCC_GetSysClockFreq+0x32>
 8002892:	2b08      	cmp	r3, #8
 8002894:	d008      	beq.n	80028a8 <HAL_RCC_GetSysClockFreq+0x38>
 8002896:	2b00      	cmp	r3, #0
 8002898:	f040 808d 	bne.w	80029b6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800289c:	4b4b      	ldr	r3, [pc, #300]	; (80029cc <HAL_RCC_GetSysClockFreq+0x15c>)
 800289e:	60bb      	str	r3, [r7, #8]
       break;
 80028a0:	e08c      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028a2:	4b4b      	ldr	r3, [pc, #300]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80028a4:	60bb      	str	r3, [r7, #8]
      break;
 80028a6:	e089      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028a8:	4b47      	ldr	r3, [pc, #284]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028b2:	4b45      	ldr	r3, [pc, #276]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d023      	beq.n	8002906 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028be:	4b42      	ldr	r3, [pc, #264]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	099b      	lsrs	r3, r3, #6
 80028c4:	f04f 0400 	mov.w	r4, #0
 80028c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	ea03 0501 	and.w	r5, r3, r1
 80028d4:	ea04 0602 	and.w	r6, r4, r2
 80028d8:	4a3d      	ldr	r2, [pc, #244]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80028da:	fb02 f106 	mul.w	r1, r2, r6
 80028de:	2200      	movs	r2, #0
 80028e0:	fb02 f205 	mul.w	r2, r2, r5
 80028e4:	440a      	add	r2, r1
 80028e6:	493a      	ldr	r1, [pc, #232]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80028e8:	fba5 0101 	umull	r0, r1, r5, r1
 80028ec:	1853      	adds	r3, r2, r1
 80028ee:	4619      	mov	r1, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f04f 0400 	mov.w	r4, #0
 80028f6:	461a      	mov	r2, r3
 80028f8:	4623      	mov	r3, r4
 80028fa:	f7fe f8e7 	bl	8000acc <__aeabi_uldivmod>
 80028fe:	4603      	mov	r3, r0
 8002900:	460c      	mov	r4, r1
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	e049      	b.n	800299a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002906:	4b30      	ldr	r3, [pc, #192]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	099b      	lsrs	r3, r3, #6
 800290c:	f04f 0400 	mov.w	r4, #0
 8002910:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002914:	f04f 0200 	mov.w	r2, #0
 8002918:	ea03 0501 	and.w	r5, r3, r1
 800291c:	ea04 0602 	and.w	r6, r4, r2
 8002920:	4629      	mov	r1, r5
 8002922:	4632      	mov	r2, r6
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	f04f 0400 	mov.w	r4, #0
 800292c:	0154      	lsls	r4, r2, #5
 800292e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002932:	014b      	lsls	r3, r1, #5
 8002934:	4619      	mov	r1, r3
 8002936:	4622      	mov	r2, r4
 8002938:	1b49      	subs	r1, r1, r5
 800293a:	eb62 0206 	sbc.w	r2, r2, r6
 800293e:	f04f 0300 	mov.w	r3, #0
 8002942:	f04f 0400 	mov.w	r4, #0
 8002946:	0194      	lsls	r4, r2, #6
 8002948:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800294c:	018b      	lsls	r3, r1, #6
 800294e:	1a5b      	subs	r3, r3, r1
 8002950:	eb64 0402 	sbc.w	r4, r4, r2
 8002954:	f04f 0100 	mov.w	r1, #0
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	00e2      	lsls	r2, r4, #3
 800295e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002962:	00d9      	lsls	r1, r3, #3
 8002964:	460b      	mov	r3, r1
 8002966:	4614      	mov	r4, r2
 8002968:	195b      	adds	r3, r3, r5
 800296a:	eb44 0406 	adc.w	r4, r4, r6
 800296e:	f04f 0100 	mov.w	r1, #0
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	02a2      	lsls	r2, r4, #10
 8002978:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800297c:	0299      	lsls	r1, r3, #10
 800297e:	460b      	mov	r3, r1
 8002980:	4614      	mov	r4, r2
 8002982:	4618      	mov	r0, r3
 8002984:	4621      	mov	r1, r4
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f04f 0400 	mov.w	r4, #0
 800298c:	461a      	mov	r2, r3
 800298e:	4623      	mov	r3, r4
 8002990:	f7fe f89c 	bl	8000acc <__aeabi_uldivmod>
 8002994:	4603      	mov	r3, r0
 8002996:	460c      	mov	r4, r1
 8002998:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800299a:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x158>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	0c1b      	lsrs	r3, r3, #16
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	3301      	adds	r3, #1
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b2:	60bb      	str	r3, [r7, #8]
      break;
 80029b4:	e002      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029b6:	4b05      	ldr	r3, [pc, #20]	; (80029cc <HAL_RCC_GetSysClockFreq+0x15c>)
 80029b8:	60bb      	str	r3, [r7, #8]
      break;
 80029ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029bc:	68bb      	ldr	r3, [r7, #8]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40023800 	.word	0x40023800
 80029cc:	00f42400 	.word	0x00f42400
 80029d0:	00b71b00 	.word	0x00b71b00

080029d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029d8:	4b03      	ldr	r3, [pc, #12]	; (80029e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80029da:	681b      	ldr	r3, [r3, #0]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	20000008 	.word	0x20000008

080029ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029f0:	f7ff fff0 	bl	80029d4 <HAL_RCC_GetHCLKFreq>
 80029f4:	4601      	mov	r1, r0
 80029f6:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <HAL_RCC_GetPCLK1Freq+0x20>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	0a9b      	lsrs	r3, r3, #10
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	4a03      	ldr	r2, [pc, #12]	; (8002a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a02:	5cd3      	ldrb	r3, [r2, r3]
 8002a04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	08007570 	.word	0x08007570

08002a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a18:	f7ff ffdc 	bl	80029d4 <HAL_RCC_GetHCLKFreq>
 8002a1c:	4601      	mov	r1, r0
 8002a1e:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	0b5b      	lsrs	r3, r3, #13
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	4a03      	ldr	r2, [pc, #12]	; (8002a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a2a:	5cd3      	ldrb	r3, [r2, r3]
 8002a2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40023800 	.word	0x40023800
 8002a38:	08007570 	.word	0x08007570

08002a3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e056      	b.n	8002afc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d106      	bne.n	8002a6e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f002 ffd3 	bl	8005a14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2202      	movs	r2, #2
 8002a72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a84:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	ea42 0103 	orr.w	r1, r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	0c1b      	lsrs	r3, r3, #16
 8002acc:	f003 0104 	and.w	r1, r3, #4
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	69da      	ldr	r2, [r3, #28]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e01d      	b.n	8002b52 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d106      	bne.n	8002b30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f003 fa76 	bl	800601c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3304      	adds	r3, #4
 8002b40:	4619      	mov	r1, r3
 8002b42:	4610      	mov	r0, r2
 8002b44:	f000 fa8c 	bl	8003060 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b085      	sub	sp, #20
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68da      	ldr	r2, [r3, #12]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f042 0201 	orr.w	r2, r2, #1
 8002b70:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2b06      	cmp	r3, #6
 8002b82:	d007      	beq.n	8002b94 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0201 	orr.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e01d      	b.n	8002bf0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d106      	bne.n	8002bce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f003 f9ef 	bl	8005fac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3304      	adds	r3, #4
 8002bde:	4619      	mov	r1, r3
 8002be0:	4610      	mov	r0, r2
 8002be2:	f000 fa3d 	bl	8003060 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2201      	movs	r2, #1
 8002c08:	6839      	ldr	r1, [r7, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 fc78 	bl	8003500 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a15      	ldr	r2, [pc, #84]	; (8002c6c <HAL_TIM_PWM_Start+0x74>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d004      	beq.n	8002c24 <HAL_TIM_PWM_Start+0x2c>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a14      	ldr	r2, [pc, #80]	; (8002c70 <HAL_TIM_PWM_Start+0x78>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d101      	bne.n	8002c28 <HAL_TIM_PWM_Start+0x30>
 8002c24:	2301      	movs	r3, #1
 8002c26:	e000      	b.n	8002c2a <HAL_TIM_PWM_Start+0x32>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d007      	beq.n	8002c3e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2b06      	cmp	r3, #6
 8002c4e:	d007      	beq.n	8002c60 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0201 	orr.w	r2, r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40010000 	.word	0x40010000
 8002c70:	40010400 	.word	0x40010400

08002c74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d122      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d11b      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f06f 0202 	mvn.w	r2, #2
 8002ca0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f9b4 	bl	8003024 <HAL_TIM_IC_CaptureCallback>
 8002cbc:	e005      	b.n	8002cca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f9a6 	bl	8003010 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 f9b7 	bl	8003038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f003 0304 	and.w	r3, r3, #4
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d122      	bne.n	8002d24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d11b      	bne.n	8002d24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f06f 0204 	mvn.w	r2, #4
 8002cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f98a 	bl	8003024 <HAL_TIM_IC_CaptureCallback>
 8002d10:	e005      	b.n	8002d1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f97c 	bl	8003010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f98d 	bl	8003038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d122      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d11b      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0208 	mvn.w	r2, #8
 8002d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2204      	movs	r2, #4
 8002d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f960 	bl	8003024 <HAL_TIM_IC_CaptureCallback>
 8002d64:	e005      	b.n	8002d72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f952 	bl	8003010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f963 	bl	8003038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f003 0310 	and.w	r3, r3, #16
 8002d82:	2b10      	cmp	r3, #16
 8002d84:	d122      	bne.n	8002dcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f003 0310 	and.w	r3, r3, #16
 8002d90:	2b10      	cmp	r3, #16
 8002d92:	d11b      	bne.n	8002dcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f06f 0210 	mvn.w	r2, #16
 8002d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2208      	movs	r2, #8
 8002da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f936 	bl	8003024 <HAL_TIM_IC_CaptureCallback>
 8002db8:	e005      	b.n	8002dc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f928 	bl	8003010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f939 	bl	8003038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d10e      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d107      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f06f 0201 	mvn.w	r2, #1
 8002df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f001 fd4a 	bl	800488c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e02:	2b80      	cmp	r3, #128	; 0x80
 8002e04:	d10e      	bne.n	8002e24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e10:	2b80      	cmp	r3, #128	; 0x80
 8002e12:	d107      	bne.n	8002e24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 fc34 	bl	800368c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2e:	2b40      	cmp	r3, #64	; 0x40
 8002e30:	d10e      	bne.n	8002e50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3c:	2b40      	cmp	r3, #64	; 0x40
 8002e3e:	d107      	bne.n	8002e50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f8fe 	bl	800304c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	f003 0320 	and.w	r3, r3, #32
 8002e5a:	2b20      	cmp	r3, #32
 8002e5c:	d10e      	bne.n	8002e7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	2b20      	cmp	r3, #32
 8002e6a:	d107      	bne.n	8002e7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f06f 0220 	mvn.w	r2, #32
 8002e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 fbfe 	bl	8003678 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e7c:	bf00      	nop
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d101      	bne.n	8002e9e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e0b4      	b.n	8003008 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b0c      	cmp	r3, #12
 8002eb2:	f200 809f 	bhi.w	8002ff4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002eb6:	a201      	add	r2, pc, #4	; (adr r2, 8002ebc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ebc:	08002ef1 	.word	0x08002ef1
 8002ec0:	08002ff5 	.word	0x08002ff5
 8002ec4:	08002ff5 	.word	0x08002ff5
 8002ec8:	08002ff5 	.word	0x08002ff5
 8002ecc:	08002f31 	.word	0x08002f31
 8002ed0:	08002ff5 	.word	0x08002ff5
 8002ed4:	08002ff5 	.word	0x08002ff5
 8002ed8:	08002ff5 	.word	0x08002ff5
 8002edc:	08002f73 	.word	0x08002f73
 8002ee0:	08002ff5 	.word	0x08002ff5
 8002ee4:	08002ff5 	.word	0x08002ff5
 8002ee8:	08002ff5 	.word	0x08002ff5
 8002eec:	08002fb3 	.word	0x08002fb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68b9      	ldr	r1, [r7, #8]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 f952 	bl	80031a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699a      	ldr	r2, [r3, #24]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0208 	orr.w	r2, r2, #8
 8002f0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	699a      	ldr	r2, [r3, #24]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0204 	bic.w	r2, r2, #4
 8002f1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6999      	ldr	r1, [r3, #24]
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	691a      	ldr	r2, [r3, #16]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	619a      	str	r2, [r3, #24]
      break;
 8002f2e:	e062      	b.n	8002ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68b9      	ldr	r1, [r7, #8]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 f9a2 	bl	8003280 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699a      	ldr	r2, [r3, #24]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	699a      	ldr	r2, [r3, #24]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6999      	ldr	r1, [r3, #24]
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	021a      	lsls	r2, r3, #8
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	619a      	str	r2, [r3, #24]
      break;
 8002f70:	e041      	b.n	8002ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68b9      	ldr	r1, [r7, #8]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 f9f7 	bl	800336c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	69da      	ldr	r2, [r3, #28]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f042 0208 	orr.w	r2, r2, #8
 8002f8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	69da      	ldr	r2, [r3, #28]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 0204 	bic.w	r2, r2, #4
 8002f9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	69d9      	ldr	r1, [r3, #28]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	61da      	str	r2, [r3, #28]
      break;
 8002fb0:	e021      	b.n	8002ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68b9      	ldr	r1, [r7, #8]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 fa4b 	bl	8003454 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	69da      	ldr	r2, [r3, #28]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	69da      	ldr	r2, [r3, #28]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	69d9      	ldr	r1, [r3, #28]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	021a      	lsls	r2, r3, #8
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	61da      	str	r2, [r3, #28]
      break;
 8002ff2:	e000      	b.n	8002ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002ff4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a40      	ldr	r2, [pc, #256]	; (8003174 <TIM_Base_SetConfig+0x114>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d013      	beq.n	80030a0 <TIM_Base_SetConfig+0x40>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800307e:	d00f      	beq.n	80030a0 <TIM_Base_SetConfig+0x40>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a3d      	ldr	r2, [pc, #244]	; (8003178 <TIM_Base_SetConfig+0x118>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d00b      	beq.n	80030a0 <TIM_Base_SetConfig+0x40>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a3c      	ldr	r2, [pc, #240]	; (800317c <TIM_Base_SetConfig+0x11c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d007      	beq.n	80030a0 <TIM_Base_SetConfig+0x40>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a3b      	ldr	r2, [pc, #236]	; (8003180 <TIM_Base_SetConfig+0x120>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d003      	beq.n	80030a0 <TIM_Base_SetConfig+0x40>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a3a      	ldr	r2, [pc, #232]	; (8003184 <TIM_Base_SetConfig+0x124>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d108      	bne.n	80030b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a2f      	ldr	r2, [pc, #188]	; (8003174 <TIM_Base_SetConfig+0x114>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d02b      	beq.n	8003112 <TIM_Base_SetConfig+0xb2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c0:	d027      	beq.n	8003112 <TIM_Base_SetConfig+0xb2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a2c      	ldr	r2, [pc, #176]	; (8003178 <TIM_Base_SetConfig+0x118>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d023      	beq.n	8003112 <TIM_Base_SetConfig+0xb2>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a2b      	ldr	r2, [pc, #172]	; (800317c <TIM_Base_SetConfig+0x11c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d01f      	beq.n	8003112 <TIM_Base_SetConfig+0xb2>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a2a      	ldr	r2, [pc, #168]	; (8003180 <TIM_Base_SetConfig+0x120>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d01b      	beq.n	8003112 <TIM_Base_SetConfig+0xb2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a29      	ldr	r2, [pc, #164]	; (8003184 <TIM_Base_SetConfig+0x124>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d017      	beq.n	8003112 <TIM_Base_SetConfig+0xb2>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a28      	ldr	r2, [pc, #160]	; (8003188 <TIM_Base_SetConfig+0x128>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d013      	beq.n	8003112 <TIM_Base_SetConfig+0xb2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a27      	ldr	r2, [pc, #156]	; (800318c <TIM_Base_SetConfig+0x12c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d00f      	beq.n	8003112 <TIM_Base_SetConfig+0xb2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a26      	ldr	r2, [pc, #152]	; (8003190 <TIM_Base_SetConfig+0x130>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00b      	beq.n	8003112 <TIM_Base_SetConfig+0xb2>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a25      	ldr	r2, [pc, #148]	; (8003194 <TIM_Base_SetConfig+0x134>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d007      	beq.n	8003112 <TIM_Base_SetConfig+0xb2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a24      	ldr	r2, [pc, #144]	; (8003198 <TIM_Base_SetConfig+0x138>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d003      	beq.n	8003112 <TIM_Base_SetConfig+0xb2>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a23      	ldr	r2, [pc, #140]	; (800319c <TIM_Base_SetConfig+0x13c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d108      	bne.n	8003124 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4313      	orrs	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	4313      	orrs	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a0a      	ldr	r2, [pc, #40]	; (8003174 <TIM_Base_SetConfig+0x114>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d003      	beq.n	8003158 <TIM_Base_SetConfig+0xf8>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a0c      	ldr	r2, [pc, #48]	; (8003184 <TIM_Base_SetConfig+0x124>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d103      	bne.n	8003160 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	615a      	str	r2, [r3, #20]
}
 8003166:	bf00      	nop
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	40010000 	.word	0x40010000
 8003178:	40000400 	.word	0x40000400
 800317c:	40000800 	.word	0x40000800
 8003180:	40000c00 	.word	0x40000c00
 8003184:	40010400 	.word	0x40010400
 8003188:	40014000 	.word	0x40014000
 800318c:	40014400 	.word	0x40014400
 8003190:	40014800 	.word	0x40014800
 8003194:	40001800 	.word	0x40001800
 8003198:	40001c00 	.word	0x40001c00
 800319c:	40002000 	.word	0x40002000

080031a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b087      	sub	sp, #28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	f023 0201 	bic.w	r2, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f023 0303 	bic.w	r3, r3, #3
 80031d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	4313      	orrs	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f023 0302 	bic.w	r3, r3, #2
 80031e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a20      	ldr	r2, [pc, #128]	; (8003278 <TIM_OC1_SetConfig+0xd8>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d003      	beq.n	8003204 <TIM_OC1_SetConfig+0x64>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a1f      	ldr	r2, [pc, #124]	; (800327c <TIM_OC1_SetConfig+0xdc>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d10c      	bne.n	800321e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	f023 0308 	bic.w	r3, r3, #8
 800320a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	4313      	orrs	r3, r2
 8003214:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	f023 0304 	bic.w	r3, r3, #4
 800321c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a15      	ldr	r2, [pc, #84]	; (8003278 <TIM_OC1_SetConfig+0xd8>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d003      	beq.n	800322e <TIM_OC1_SetConfig+0x8e>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a14      	ldr	r2, [pc, #80]	; (800327c <TIM_OC1_SetConfig+0xdc>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d111      	bne.n	8003252 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003234:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800323c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	621a      	str	r2, [r3, #32]
}
 800326c:	bf00      	nop
 800326e:	371c      	adds	r7, #28
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	40010000 	.word	0x40010000
 800327c:	40010400 	.word	0x40010400

08003280 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003280:	b480      	push	{r7}
 8003282:	b087      	sub	sp, #28
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	f023 0210 	bic.w	r2, r3, #16
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	021b      	lsls	r3, r3, #8
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f023 0320 	bic.w	r3, r3, #32
 80032ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a22      	ldr	r2, [pc, #136]	; (8003364 <TIM_OC2_SetConfig+0xe4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d003      	beq.n	80032e8 <TIM_OC2_SetConfig+0x68>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a21      	ldr	r2, [pc, #132]	; (8003368 <TIM_OC2_SetConfig+0xe8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d10d      	bne.n	8003304 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003302:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a17      	ldr	r2, [pc, #92]	; (8003364 <TIM_OC2_SetConfig+0xe4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d003      	beq.n	8003314 <TIM_OC2_SetConfig+0x94>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a16      	ldr	r2, [pc, #88]	; (8003368 <TIM_OC2_SetConfig+0xe8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d113      	bne.n	800333c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800331a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003322:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4313      	orrs	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	621a      	str	r2, [r3, #32]
}
 8003356:	bf00      	nop
 8003358:	371c      	adds	r7, #28
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40010000 	.word	0x40010000
 8003368:	40010400 	.word	0x40010400

0800336c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f023 0303 	bic.w	r3, r3, #3
 80033a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	021b      	lsls	r3, r3, #8
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	4313      	orrs	r3, r2
 80033c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a21      	ldr	r2, [pc, #132]	; (800344c <TIM_OC3_SetConfig+0xe0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d003      	beq.n	80033d2 <TIM_OC3_SetConfig+0x66>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a20      	ldr	r2, [pc, #128]	; (8003450 <TIM_OC3_SetConfig+0xe4>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d10d      	bne.n	80033ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	021b      	lsls	r3, r3, #8
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a16      	ldr	r2, [pc, #88]	; (800344c <TIM_OC3_SetConfig+0xe0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d003      	beq.n	80033fe <TIM_OC3_SetConfig+0x92>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a15      	ldr	r2, [pc, #84]	; (8003450 <TIM_OC3_SetConfig+0xe4>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d113      	bne.n	8003426 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003404:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800340c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	621a      	str	r2, [r3, #32]
}
 8003440:	bf00      	nop
 8003442:	371c      	adds	r7, #28
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	40010000 	.word	0x40010000
 8003450:	40010400 	.word	0x40010400

08003454 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003454:	b480      	push	{r7}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800348a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	021b      	lsls	r3, r3, #8
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	4313      	orrs	r3, r2
 8003496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800349e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	031b      	lsls	r3, r3, #12
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a12      	ldr	r2, [pc, #72]	; (80034f8 <TIM_OC4_SetConfig+0xa4>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d003      	beq.n	80034bc <TIM_OC4_SetConfig+0x68>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a11      	ldr	r2, [pc, #68]	; (80034fc <TIM_OC4_SetConfig+0xa8>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d109      	bne.n	80034d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	019b      	lsls	r3, r3, #6
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	621a      	str	r2, [r3, #32]
}
 80034ea:	bf00      	nop
 80034ec:	371c      	adds	r7, #28
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	40010000 	.word	0x40010000
 80034fc:	40010400 	.word	0x40010400

08003500 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003500:	b480      	push	{r7}
 8003502:	b087      	sub	sp, #28
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f003 031f 	and.w	r3, r3, #31
 8003512:	2201      	movs	r2, #1
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a1a      	ldr	r2, [r3, #32]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	43db      	mvns	r3, r3
 8003522:	401a      	ands	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a1a      	ldr	r2, [r3, #32]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f003 031f 	and.w	r3, r3, #31
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	fa01 f303 	lsl.w	r3, r1, r3
 8003538:	431a      	orrs	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	621a      	str	r2, [r3, #32]
}
 800353e:	bf00      	nop
 8003540:	371c      	adds	r7, #28
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800354a:	b480      	push	{r7}
 800354c:	b085      	sub	sp, #20
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800355a:	2b01      	cmp	r3, #1
 800355c:	d101      	bne.n	8003562 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800355e:	2302      	movs	r3, #2
 8003560:	e032      	b.n	80035c8 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2202      	movs	r2, #2
 800356e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003588:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4313      	orrs	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800359a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80035de:	2300      	movs	r3, #0
 80035e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d101      	bne.n	80035f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e03d      	b.n	800366c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	4313      	orrs	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	4313      	orrs	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	4313      	orrs	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4313      	orrs	r3, r2
 800362e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	4313      	orrs	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	4313      	orrs	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e03f      	b.n	8003732 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d106      	bne.n	80036cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f002 fdd8 	bl	800627c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2224      	movs	r2, #36	; 0x24
 80036d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 fb93 	bl	8003e10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695a      	ldr	r2, [r3, #20]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003708:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003718:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b088      	sub	sp, #32
 800373e:	af02      	add	r7, sp, #8
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	603b      	str	r3, [r7, #0]
 8003746:	4613      	mov	r3, r2
 8003748:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800374a:	2300      	movs	r3, #0
 800374c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b20      	cmp	r3, #32
 8003758:	f040 8083 	bne.w	8003862 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d002      	beq.n	8003768 <HAL_UART_Transmit+0x2e>
 8003762:	88fb      	ldrh	r3, [r7, #6]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e07b      	b.n	8003864 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <HAL_UART_Transmit+0x40>
 8003776:	2302      	movs	r3, #2
 8003778:	e074      	b.n	8003864 <HAL_UART_Transmit+0x12a>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2221      	movs	r2, #33	; 0x21
 800378c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003790:	f7fd fb82 	bl	8000e98 <HAL_GetTick>
 8003794:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	88fa      	ldrh	r2, [r7, #6]
 800379a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	88fa      	ldrh	r2, [r7, #6]
 80037a0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037a2:	e042      	b.n	800382a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ba:	d122      	bne.n	8003802 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2200      	movs	r2, #0
 80037c4:	2180      	movs	r1, #128	; 0x80
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 f9b6 	bl	8003b38 <UART_WaitOnFlagUntilTimeout>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e046      	b.n	8003864 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	881b      	ldrh	r3, [r3, #0]
 80037de:	461a      	mov	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037e8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d103      	bne.n	80037fa <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	3302      	adds	r3, #2
 80037f6:	60bb      	str	r3, [r7, #8]
 80037f8:	e017      	b.n	800382a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	3301      	adds	r3, #1
 80037fe:	60bb      	str	r3, [r7, #8]
 8003800:	e013      	b.n	800382a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2200      	movs	r2, #0
 800380a:	2180      	movs	r1, #128	; 0x80
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f993 	bl	8003b38 <UART_WaitOnFlagUntilTimeout>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e023      	b.n	8003864 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	60ba      	str	r2, [r7, #8]
 8003822:	781a      	ldrb	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800382e:	b29b      	uxth	r3, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1b7      	bne.n	80037a4 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	2200      	movs	r2, #0
 800383c:	2140      	movs	r1, #64	; 0x40
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 f97a 	bl	8003b38 <UART_WaitOnFlagUntilTimeout>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e00a      	b.n	8003864 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2220      	movs	r2, #32
 8003852:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800385e:	2300      	movs	r3, #0
 8003860:	e000      	b.n	8003864 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003862:	2302      	movs	r3, #2
  }
}
 8003864:	4618      	mov	r0, r3
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	4613      	mov	r3, r2
 8003878:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b20      	cmp	r3, #32
 8003884:	d140      	bne.n	8003908 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <HAL_UART_Receive_IT+0x26>
 800388c:	88fb      	ldrh	r3, [r7, #6]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e039      	b.n	800390a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <HAL_UART_Receive_IT+0x38>
 80038a0:	2302      	movs	r3, #2
 80038a2:	e032      	b.n	800390a <HAL_UART_Receive_IT+0x9e>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	88fa      	ldrh	r2, [r7, #6]
 80038b6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	88fa      	ldrh	r2, [r7, #6]
 80038bc:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2222      	movs	r2, #34	; 0x22
 80038c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038e2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695a      	ldr	r2, [r3, #20]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0220 	orr.w	r2, r2, #32
 8003902:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003904:	2300      	movs	r3, #0
 8003906:	e000      	b.n	800390a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003908:	2302      	movs	r3, #2
  }
}
 800390a:	4618      	mov	r0, r3
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
	...

08003918 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b088      	sub	sp, #32
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003938:	2300      	movs	r3, #0
 800393a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800393c:	2300      	movs	r3, #0
 800393e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10d      	bne.n	800396a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	f003 0320 	and.w	r3, r3, #32
 8003954:	2b00      	cmp	r3, #0
 8003956:	d008      	beq.n	800396a <HAL_UART_IRQHandler+0x52>
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	f003 0320 	and.w	r3, r3, #32
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f9d2 	bl	8003d0c <UART_Receive_IT>
      return;
 8003968:	e0cc      	b.n	8003b04 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 80ab 	beq.w	8003ac8 <HAL_UART_IRQHandler+0x1b0>
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	d105      	bne.n	8003988 <HAL_UART_IRQHandler+0x70>
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 80a0 	beq.w	8003ac8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00a      	beq.n	80039a8 <HAL_UART_IRQHandler+0x90>
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003998:	2b00      	cmp	r3, #0
 800399a:	d005      	beq.n	80039a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a0:	f043 0201 	orr.w	r2, r3, #1
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <HAL_UART_IRQHandler+0xb0>
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d005      	beq.n	80039c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c0:	f043 0202 	orr.w	r2, r3, #2
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00a      	beq.n	80039e8 <HAL_UART_IRQHandler+0xd0>
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d005      	beq.n	80039e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e0:	f043 0204 	orr.w	r2, r3, #4
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <HAL_UART_IRQHandler+0xf0>
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d005      	beq.n	8003a08 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a00:	f043 0208 	orr.w	r2, r3, #8
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d078      	beq.n	8003b02 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f003 0320 	and.w	r3, r3, #32
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d007      	beq.n	8003a2a <HAL_UART_IRQHandler+0x112>
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f971 	bl	8003d0c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a34:	2b40      	cmp	r3, #64	; 0x40
 8003a36:	bf0c      	ite	eq
 8003a38:	2301      	moveq	r3, #1
 8003a3a:	2300      	movne	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d102      	bne.n	8003a52 <HAL_UART_IRQHandler+0x13a>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d031      	beq.n	8003ab6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f8ba 	bl	8003bcc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a62:	2b40      	cmp	r3, #64	; 0x40
 8003a64:	d123      	bne.n	8003aae <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	695a      	ldr	r2, [r3, #20]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a74:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d013      	beq.n	8003aa6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a82:	4a22      	ldr	r2, [pc, #136]	; (8003b0c <HAL_UART_IRQHandler+0x1f4>)
 8003a84:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fe f9cb 	bl	8001e26 <HAL_DMA_Abort_IT>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d016      	beq.n	8003ac4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa4:	e00e      	b.n	8003ac4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f83c 	bl	8003b24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aac:	e00a      	b.n	8003ac4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f838 	bl	8003b24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab4:	e006      	b.n	8003ac4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f834 	bl	8003b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003ac2:	e01e      	b.n	8003b02 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac4:	bf00      	nop
    return;
 8003ac6:	e01c      	b.n	8003b02 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d008      	beq.n	8003ae4 <HAL_UART_IRQHandler+0x1cc>
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 f8a7 	bl	8003c30 <UART_Transmit_IT>
    return;
 8003ae2:	e00f      	b.n	8003b04 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <HAL_UART_IRQHandler+0x1ec>
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d005      	beq.n	8003b04 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f8ef 	bl	8003cdc <UART_EndTransmit_IT>
    return;
 8003afe:	bf00      	nop
 8003b00:	e000      	b.n	8003b04 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003b02:	bf00      	nop
  }
}
 8003b04:	3720      	adds	r7, #32
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	08003c09 	.word	0x08003c09

08003b10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	4613      	mov	r3, r2
 8003b46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b48:	e02c      	b.n	8003ba4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b50:	d028      	beq.n	8003ba4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d007      	beq.n	8003b68 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b58:	f7fd f99e 	bl	8000e98 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d21d      	bcs.n	8003ba4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b76:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695a      	ldr	r2, [r3, #20]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0201 	bic.w	r2, r2, #1
 8003b86:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e00f      	b.n	8003bc4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	4013      	ands	r3, r2
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	bf0c      	ite	eq
 8003bb4:	2301      	moveq	r3, #1
 8003bb6:	2300      	movne	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	461a      	mov	r2, r3
 8003bbc:	79fb      	ldrb	r3, [r7, #7]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d0c3      	beq.n	8003b4a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003be2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695a      	ldr	r2, [r3, #20]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0201 	bic.w	r2, r2, #1
 8003bf2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f7ff ff7e 	bl	8003b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c28:	bf00      	nop
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b21      	cmp	r3, #33	; 0x21
 8003c42:	d144      	bne.n	8003cce <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c4c:	d11a      	bne.n	8003c84 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	881b      	ldrh	r3, [r3, #0]
 8003c58:	461a      	mov	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c62:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d105      	bne.n	8003c78 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	1c9a      	adds	r2, r3, #2
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	621a      	str	r2, [r3, #32]
 8003c76:	e00e      	b.n	8003c96 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	621a      	str	r2, [r3, #32]
 8003c82:	e008      	b.n	8003c96 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	1c59      	adds	r1, r3, #1
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6211      	str	r1, [r2, #32]
 8003c8e:	781a      	ldrb	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10f      	bne.n	8003cca <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68da      	ldr	r2, [r3, #12]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cb8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cc8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	e000      	b.n	8003cd0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003cce:	2302      	movs	r3, #2
  }
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cf2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f7ff ff07 	bl	8003b10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b22      	cmp	r3, #34	; 0x22
 8003d1e:	d171      	bne.n	8003e04 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d28:	d123      	bne.n	8003d72 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10e      	bne.n	8003d56 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4e:	1c9a      	adds	r2, r3, #2
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	629a      	str	r2, [r3, #40]	; 0x28
 8003d54:	e029      	b.n	8003daa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	629a      	str	r2, [r3, #40]	; 0x28
 8003d70:	e01b      	b.n	8003daa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10a      	bne.n	8003d90 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6858      	ldr	r0, [r3, #4]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d84:	1c59      	adds	r1, r3, #1
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6291      	str	r1, [r2, #40]	; 0x28
 8003d8a:	b2c2      	uxtb	r2, r0
 8003d8c:	701a      	strb	r2, [r3, #0]
 8003d8e:	e00c      	b.n	8003daa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9c:	1c58      	adds	r0, r3, #1
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	6288      	str	r0, [r1, #40]	; 0x28
 8003da2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	3b01      	subs	r3, #1
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	4619      	mov	r1, r3
 8003db8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d120      	bne.n	8003e00 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68da      	ldr	r2, [r3, #12]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0220 	bic.w	r2, r2, #32
 8003dcc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ddc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695a      	ldr	r2, [r3, #20]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0201 	bic.w	r2, r2, #1
 8003dec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2220      	movs	r2, #32
 8003df2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fd68 	bl	80048cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	e002      	b.n	8003e06 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003e00:	2300      	movs	r3, #0
 8003e02:	e000      	b.n	8003e06 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003e04:	2302      	movs	r3, #2
  }
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
	...

08003e10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e10:	b5b0      	push	{r4, r5, r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003e50:	f023 030c 	bic.w	r3, r3, #12
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6812      	ldr	r2, [r2, #0]
 8003e58:	68f9      	ldr	r1, [r7, #12]
 8003e5a:	430b      	orrs	r3, r1
 8003e5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	699a      	ldr	r2, [r3, #24]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e7c:	f040 80e4 	bne.w	8004048 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4aab      	ldr	r2, [pc, #684]	; (8004134 <UART_SetConfig+0x324>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d004      	beq.n	8003e94 <UART_SetConfig+0x84>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4aaa      	ldr	r2, [pc, #680]	; (8004138 <UART_SetConfig+0x328>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d16c      	bne.n	8003f6e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003e94:	f7fe fdbe 	bl	8002a14 <HAL_RCC_GetPCLK2Freq>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	009a      	lsls	r2, r3, #2
 8003ea2:	441a      	add	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eae:	4aa3      	ldr	r2, [pc, #652]	; (800413c <UART_SetConfig+0x32c>)
 8003eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb4:	095b      	lsrs	r3, r3, #5
 8003eb6:	011c      	lsls	r4, r3, #4
 8003eb8:	f7fe fdac 	bl	8002a14 <HAL_RCC_GetPCLK2Freq>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009a      	lsls	r2, r3, #2
 8003ec6:	441a      	add	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	fbb2 f5f3 	udiv	r5, r2, r3
 8003ed2:	f7fe fd9f 	bl	8002a14 <HAL_RCC_GetPCLK2Freq>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	009a      	lsls	r2, r3, #2
 8003ee0:	441a      	add	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eec:	4a93      	ldr	r2, [pc, #588]	; (800413c <UART_SetConfig+0x32c>)
 8003eee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	2264      	movs	r2, #100	; 0x64
 8003ef6:	fb02 f303 	mul.w	r3, r2, r3
 8003efa:	1aeb      	subs	r3, r5, r3
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	3332      	adds	r3, #50	; 0x32
 8003f00:	4a8e      	ldr	r2, [pc, #568]	; (800413c <UART_SetConfig+0x32c>)
 8003f02:	fba2 2303 	umull	r2, r3, r2, r3
 8003f06:	095b      	lsrs	r3, r3, #5
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f0e:	441c      	add	r4, r3
 8003f10:	f7fe fd80 	bl	8002a14 <HAL_RCC_GetPCLK2Freq>
 8003f14:	4602      	mov	r2, r0
 8003f16:	4613      	mov	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4413      	add	r3, r2
 8003f1c:	009a      	lsls	r2, r3, #2
 8003f1e:	441a      	add	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	fbb2 f5f3 	udiv	r5, r2, r3
 8003f2a:	f7fe fd73 	bl	8002a14 <HAL_RCC_GetPCLK2Freq>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	4613      	mov	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	009a      	lsls	r2, r3, #2
 8003f38:	441a      	add	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f44:	4a7d      	ldr	r2, [pc, #500]	; (800413c <UART_SetConfig+0x32c>)
 8003f46:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4a:	095b      	lsrs	r3, r3, #5
 8003f4c:	2264      	movs	r2, #100	; 0x64
 8003f4e:	fb02 f303 	mul.w	r3, r2, r3
 8003f52:	1aeb      	subs	r3, r5, r3
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	3332      	adds	r3, #50	; 0x32
 8003f58:	4a78      	ldr	r2, [pc, #480]	; (800413c <UART_SetConfig+0x32c>)
 8003f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5e:	095b      	lsrs	r3, r3, #5
 8003f60:	f003 0207 	and.w	r2, r3, #7
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4422      	add	r2, r4
 8003f6a:	609a      	str	r2, [r3, #8]
 8003f6c:	e154      	b.n	8004218 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003f6e:	f7fe fd3d 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 8003f72:	4602      	mov	r2, r0
 8003f74:	4613      	mov	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	009a      	lsls	r2, r3, #2
 8003f7c:	441a      	add	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f88:	4a6c      	ldr	r2, [pc, #432]	; (800413c <UART_SetConfig+0x32c>)
 8003f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8e:	095b      	lsrs	r3, r3, #5
 8003f90:	011c      	lsls	r4, r3, #4
 8003f92:	f7fe fd2b 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 8003f96:	4602      	mov	r2, r0
 8003f98:	4613      	mov	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	009a      	lsls	r2, r3, #2
 8003fa0:	441a      	add	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	fbb2 f5f3 	udiv	r5, r2, r3
 8003fac:	f7fe fd1e 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	009a      	lsls	r2, r3, #2
 8003fba:	441a      	add	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc6:	4a5d      	ldr	r2, [pc, #372]	; (800413c <UART_SetConfig+0x32c>)
 8003fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fcc:	095b      	lsrs	r3, r3, #5
 8003fce:	2264      	movs	r2, #100	; 0x64
 8003fd0:	fb02 f303 	mul.w	r3, r2, r3
 8003fd4:	1aeb      	subs	r3, r5, r3
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	3332      	adds	r3, #50	; 0x32
 8003fda:	4a58      	ldr	r2, [pc, #352]	; (800413c <UART_SetConfig+0x32c>)
 8003fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe0:	095b      	lsrs	r3, r3, #5
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fe8:	441c      	add	r4, r3
 8003fea:	f7fe fcff 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	009a      	lsls	r2, r3, #2
 8003ff8:	441a      	add	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	fbb2 f5f3 	udiv	r5, r2, r3
 8004004:	f7fe fcf2 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 8004008:	4602      	mov	r2, r0
 800400a:	4613      	mov	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	009a      	lsls	r2, r3, #2
 8004012:	441a      	add	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	fbb2 f3f3 	udiv	r3, r2, r3
 800401e:	4a47      	ldr	r2, [pc, #284]	; (800413c <UART_SetConfig+0x32c>)
 8004020:	fba2 2303 	umull	r2, r3, r2, r3
 8004024:	095b      	lsrs	r3, r3, #5
 8004026:	2264      	movs	r2, #100	; 0x64
 8004028:	fb02 f303 	mul.w	r3, r2, r3
 800402c:	1aeb      	subs	r3, r5, r3
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	3332      	adds	r3, #50	; 0x32
 8004032:	4a42      	ldr	r2, [pc, #264]	; (800413c <UART_SetConfig+0x32c>)
 8004034:	fba2 2303 	umull	r2, r3, r2, r3
 8004038:	095b      	lsrs	r3, r3, #5
 800403a:	f003 0207 	and.w	r2, r3, #7
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4422      	add	r2, r4
 8004044:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004046:	e0e7      	b.n	8004218 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a39      	ldr	r2, [pc, #228]	; (8004134 <UART_SetConfig+0x324>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d004      	beq.n	800405c <UART_SetConfig+0x24c>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a38      	ldr	r2, [pc, #224]	; (8004138 <UART_SetConfig+0x328>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d171      	bne.n	8004140 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800405c:	f7fe fcda 	bl	8002a14 <HAL_RCC_GetPCLK2Freq>
 8004060:	4602      	mov	r2, r0
 8004062:	4613      	mov	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	4413      	add	r3, r2
 8004068:	009a      	lsls	r2, r3, #2
 800406a:	441a      	add	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	fbb2 f3f3 	udiv	r3, r2, r3
 8004076:	4a31      	ldr	r2, [pc, #196]	; (800413c <UART_SetConfig+0x32c>)
 8004078:	fba2 2303 	umull	r2, r3, r2, r3
 800407c:	095b      	lsrs	r3, r3, #5
 800407e:	011c      	lsls	r4, r3, #4
 8004080:	f7fe fcc8 	bl	8002a14 <HAL_RCC_GetPCLK2Freq>
 8004084:	4602      	mov	r2, r0
 8004086:	4613      	mov	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	009a      	lsls	r2, r3, #2
 800408e:	441a      	add	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	fbb2 f5f3 	udiv	r5, r2, r3
 800409a:	f7fe fcbb 	bl	8002a14 <HAL_RCC_GetPCLK2Freq>
 800409e:	4602      	mov	r2, r0
 80040a0:	4613      	mov	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	009a      	lsls	r2, r3, #2
 80040a8:	441a      	add	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b4:	4a21      	ldr	r2, [pc, #132]	; (800413c <UART_SetConfig+0x32c>)
 80040b6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	2264      	movs	r2, #100	; 0x64
 80040be:	fb02 f303 	mul.w	r3, r2, r3
 80040c2:	1aeb      	subs	r3, r5, r3
 80040c4:	011b      	lsls	r3, r3, #4
 80040c6:	3332      	adds	r3, #50	; 0x32
 80040c8:	4a1c      	ldr	r2, [pc, #112]	; (800413c <UART_SetConfig+0x32c>)
 80040ca:	fba2 2303 	umull	r2, r3, r2, r3
 80040ce:	095b      	lsrs	r3, r3, #5
 80040d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040d4:	441c      	add	r4, r3
 80040d6:	f7fe fc9d 	bl	8002a14 <HAL_RCC_GetPCLK2Freq>
 80040da:	4602      	mov	r2, r0
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	009a      	lsls	r2, r3, #2
 80040e4:	441a      	add	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	fbb2 f5f3 	udiv	r5, r2, r3
 80040f0:	f7fe fc90 	bl	8002a14 <HAL_RCC_GetPCLK2Freq>
 80040f4:	4602      	mov	r2, r0
 80040f6:	4613      	mov	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	009a      	lsls	r2, r3, #2
 80040fe:	441a      	add	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	fbb2 f3f3 	udiv	r3, r2, r3
 800410a:	4a0c      	ldr	r2, [pc, #48]	; (800413c <UART_SetConfig+0x32c>)
 800410c:	fba2 2303 	umull	r2, r3, r2, r3
 8004110:	095b      	lsrs	r3, r3, #5
 8004112:	2264      	movs	r2, #100	; 0x64
 8004114:	fb02 f303 	mul.w	r3, r2, r3
 8004118:	1aeb      	subs	r3, r5, r3
 800411a:	011b      	lsls	r3, r3, #4
 800411c:	3332      	adds	r3, #50	; 0x32
 800411e:	4a07      	ldr	r2, [pc, #28]	; (800413c <UART_SetConfig+0x32c>)
 8004120:	fba2 2303 	umull	r2, r3, r2, r3
 8004124:	095b      	lsrs	r3, r3, #5
 8004126:	f003 020f 	and.w	r2, r3, #15
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4422      	add	r2, r4
 8004130:	609a      	str	r2, [r3, #8]
 8004132:	e071      	b.n	8004218 <UART_SetConfig+0x408>
 8004134:	40011000 	.word	0x40011000
 8004138:	40011400 	.word	0x40011400
 800413c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004140:	f7fe fc54 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 8004144:	4602      	mov	r2, r0
 8004146:	4613      	mov	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4413      	add	r3, r2
 800414c:	009a      	lsls	r2, r3, #2
 800414e:	441a      	add	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	fbb2 f3f3 	udiv	r3, r2, r3
 800415a:	4a31      	ldr	r2, [pc, #196]	; (8004220 <UART_SetConfig+0x410>)
 800415c:	fba2 2303 	umull	r2, r3, r2, r3
 8004160:	095b      	lsrs	r3, r3, #5
 8004162:	011c      	lsls	r4, r3, #4
 8004164:	f7fe fc42 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 8004168:	4602      	mov	r2, r0
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	009a      	lsls	r2, r3, #2
 8004172:	441a      	add	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	fbb2 f5f3 	udiv	r5, r2, r3
 800417e:	f7fe fc35 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 8004182:	4602      	mov	r2, r0
 8004184:	4613      	mov	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	009a      	lsls	r2, r3, #2
 800418c:	441a      	add	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	fbb2 f3f3 	udiv	r3, r2, r3
 8004198:	4a21      	ldr	r2, [pc, #132]	; (8004220 <UART_SetConfig+0x410>)
 800419a:	fba2 2303 	umull	r2, r3, r2, r3
 800419e:	095b      	lsrs	r3, r3, #5
 80041a0:	2264      	movs	r2, #100	; 0x64
 80041a2:	fb02 f303 	mul.w	r3, r2, r3
 80041a6:	1aeb      	subs	r3, r5, r3
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	3332      	adds	r3, #50	; 0x32
 80041ac:	4a1c      	ldr	r2, [pc, #112]	; (8004220 <UART_SetConfig+0x410>)
 80041ae:	fba2 2303 	umull	r2, r3, r2, r3
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041b8:	441c      	add	r4, r3
 80041ba:	f7fe fc17 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 80041be:	4602      	mov	r2, r0
 80041c0:	4613      	mov	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	009a      	lsls	r2, r3, #2
 80041c8:	441a      	add	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	fbb2 f5f3 	udiv	r5, r2, r3
 80041d4:	f7fe fc0a 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 80041d8:	4602      	mov	r2, r0
 80041da:	4613      	mov	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	009a      	lsls	r2, r3, #2
 80041e2:	441a      	add	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ee:	4a0c      	ldr	r2, [pc, #48]	; (8004220 <UART_SetConfig+0x410>)
 80041f0:	fba2 2303 	umull	r2, r3, r2, r3
 80041f4:	095b      	lsrs	r3, r3, #5
 80041f6:	2264      	movs	r2, #100	; 0x64
 80041f8:	fb02 f303 	mul.w	r3, r2, r3
 80041fc:	1aeb      	subs	r3, r5, r3
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	3332      	adds	r3, #50	; 0x32
 8004202:	4a07      	ldr	r2, [pc, #28]	; (8004220 <UART_SetConfig+0x410>)
 8004204:	fba2 2303 	umull	r2, r3, r2, r3
 8004208:	095b      	lsrs	r3, r3, #5
 800420a:	f003 020f 	and.w	r2, r3, #15
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4422      	add	r2, r4
 8004214:	609a      	str	r2, [r3, #8]
}
 8004216:	e7ff      	b.n	8004218 <UART_SetConfig+0x408>
 8004218:	bf00      	nop
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bdb0      	pop	{r4, r5, r7, pc}
 8004220:	51eb851f 	.word	0x51eb851f

08004224 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8004228:	4b18      	ldr	r3, [pc, #96]	; (800428c <MX_CAN1_Init+0x68>)
 800422a:	4a19      	ldr	r2, [pc, #100]	; (8004290 <MX_CAN1_Init+0x6c>)
 800422c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 800422e:	4b17      	ldr	r3, [pc, #92]	; (800428c <MX_CAN1_Init+0x68>)
 8004230:	2207      	movs	r2, #7
 8004232:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8004234:	4b15      	ldr	r3, [pc, #84]	; (800428c <MX_CAN1_Init+0x68>)
 8004236:	2200      	movs	r2, #0
 8004238:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800423a:	4b14      	ldr	r3, [pc, #80]	; (800428c <MX_CAN1_Init+0x68>)
 800423c:	2200      	movs	r2, #0
 800423e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8004240:	4b12      	ldr	r3, [pc, #72]	; (800428c <MX_CAN1_Init+0x68>)
 8004242:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004246:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8004248:	4b10      	ldr	r3, [pc, #64]	; (800428c <MX_CAN1_Init+0x68>)
 800424a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800424e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8004250:	4b0e      	ldr	r3, [pc, #56]	; (800428c <MX_CAN1_Init+0x68>)
 8004252:	2200      	movs	r2, #0
 8004254:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8004256:	4b0d      	ldr	r3, [pc, #52]	; (800428c <MX_CAN1_Init+0x68>)
 8004258:	2200      	movs	r2, #0
 800425a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800425c:	4b0b      	ldr	r3, [pc, #44]	; (800428c <MX_CAN1_Init+0x68>)
 800425e:	2200      	movs	r2, #0
 8004260:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8004262:	4b0a      	ldr	r3, [pc, #40]	; (800428c <MX_CAN1_Init+0x68>)
 8004264:	2200      	movs	r2, #0
 8004266:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8004268:	4b08      	ldr	r3, [pc, #32]	; (800428c <MX_CAN1_Init+0x68>)
 800426a:	2200      	movs	r2, #0
 800426c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 800426e:	4b07      	ldr	r3, [pc, #28]	; (800428c <MX_CAN1_Init+0x68>)
 8004270:	2201      	movs	r2, #1
 8004272:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8004274:	4805      	ldr	r0, [pc, #20]	; (800428c <MX_CAN1_Init+0x68>)
 8004276:	f7fc fe3d 	bl	8000ef4 <HAL_CAN_Init>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <MX_CAN1_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004280:	2146      	movs	r1, #70	; 0x46
 8004282:	4804      	ldr	r0, [pc, #16]	; (8004294 <MX_CAN1_Init+0x70>)
 8004284:	f001 f80e 	bl	80052a4 <_Error_Handler>
  }

}
 8004288:	bf00      	nop
 800428a:	bd80      	pop	{r7, pc}
 800428c:	200000e0 	.word	0x200000e0
 8004290:	40006400 	.word	0x40006400
 8004294:	080074f4 	.word	0x080074f4

08004298 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 800429c:	4b18      	ldr	r3, [pc, #96]	; (8004300 <MX_CAN2_Init+0x68>)
 800429e:	4a19      	ldr	r2, [pc, #100]	; (8004304 <MX_CAN2_Init+0x6c>)
 80042a0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 7;
 80042a2:	4b17      	ldr	r3, [pc, #92]	; (8004300 <MX_CAN2_Init+0x68>)
 80042a4:	2207      	movs	r2, #7
 80042a6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80042a8:	4b15      	ldr	r3, [pc, #84]	; (8004300 <MX_CAN2_Init+0x68>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80042ae:	4b14      	ldr	r3, [pc, #80]	; (8004300 <MX_CAN2_Init+0x68>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 80042b4:	4b12      	ldr	r3, [pc, #72]	; (8004300 <MX_CAN2_Init+0x68>)
 80042b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80042ba:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 80042bc:	4b10      	ldr	r3, [pc, #64]	; (8004300 <MX_CAN2_Init+0x68>)
 80042be:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80042c2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80042c4:	4b0e      	ldr	r3, [pc, #56]	; (8004300 <MX_CAN2_Init+0x68>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80042ca:	4b0d      	ldr	r3, [pc, #52]	; (8004300 <MX_CAN2_Init+0x68>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80042d0:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <MX_CAN2_Init+0x68>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80042d6:	4b0a      	ldr	r3, [pc, #40]	; (8004300 <MX_CAN2_Init+0x68>)
 80042d8:	2200      	movs	r2, #0
 80042da:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80042dc:	4b08      	ldr	r3, [pc, #32]	; (8004300 <MX_CAN2_Init+0x68>)
 80042de:	2200      	movs	r2, #0
 80042e0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = ENABLE;
 80042e2:	4b07      	ldr	r3, [pc, #28]	; (8004300 <MX_CAN2_Init+0x68>)
 80042e4:	2201      	movs	r2, #1
 80042e6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80042e8:	4805      	ldr	r0, [pc, #20]	; (8004300 <MX_CAN2_Init+0x68>)
 80042ea:	f7fc fe03 	bl	8000ef4 <HAL_CAN_Init>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <MX_CAN2_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 80042f4:	215c      	movs	r1, #92	; 0x5c
 80042f6:	4804      	ldr	r0, [pc, #16]	; (8004308 <MX_CAN2_Init+0x70>)
 80042f8:	f000 ffd4 	bl	80052a4 <_Error_Handler>
  }

}
 80042fc:	bf00      	nop
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	200000b8 	.word	0x200000b8
 8004304:	40006800 	.word	0x40006800
 8004308:	080074f4 	.word	0x080074f4

0800430c <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b08a      	sub	sp, #40	; 0x28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(canHandle->Instance==CAN1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a44      	ldr	r2, [pc, #272]	; (800442c <HAL_CAN_MspInit+0x120>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d137      	bne.n	800438e <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800431e:	4b44      	ldr	r3, [pc, #272]	; (8004430 <HAL_CAN_MspInit+0x124>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3301      	adds	r3, #1
 8004324:	4a42      	ldr	r2, [pc, #264]	; (8004430 <HAL_CAN_MspInit+0x124>)
 8004326:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004328:	4b41      	ldr	r3, [pc, #260]	; (8004430 <HAL_CAN_MspInit+0x124>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d10d      	bne.n	800434c <HAL_CAN_MspInit+0x40>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004330:	2300      	movs	r3, #0
 8004332:	613b      	str	r3, [r7, #16]
 8004334:	4b3f      	ldr	r3, [pc, #252]	; (8004434 <HAL_CAN_MspInit+0x128>)
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	4a3e      	ldr	r2, [pc, #248]	; (8004434 <HAL_CAN_MspInit+0x128>)
 800433a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800433e:	6413      	str	r3, [r2, #64]	; 0x40
 8004340:	4b3c      	ldr	r3, [pc, #240]	; (8004434 <HAL_CAN_MspInit+0x128>)
 8004342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	693b      	ldr	r3, [r7, #16]
  
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800434c:	2303      	movs	r3, #3
 800434e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004350:	2302      	movs	r3, #2
 8004352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004354:	2300      	movs	r3, #0
 8004356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004358:	2303      	movs	r3, #3
 800435a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800435c:	2309      	movs	r3, #9
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004360:	f107 0314 	add.w	r3, r7, #20
 8004364:	4619      	mov	r1, r3
 8004366:	4834      	ldr	r0, [pc, #208]	; (8004438 <HAL_CAN_MspInit+0x12c>)
 8004368:	f7fd fd80 	bl	8001e6c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800436c:	2200      	movs	r2, #0
 800436e:	2100      	movs	r1, #0
 8004370:	2014      	movs	r0, #20
 8004372:	f7fd fcf8 	bl	8001d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8004376:	2014      	movs	r0, #20
 8004378:	f7fd fd11 	bl	8001d9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800437c:	2200      	movs	r2, #0
 800437e:	2100      	movs	r1, #0
 8004380:	2015      	movs	r0, #21
 8004382:	f7fd fcf0 	bl	8001d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8004386:	2015      	movs	r0, #21
 8004388:	f7fd fd09 	bl	8001d9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800438c:	e04a      	b.n	8004424 <HAL_CAN_MspInit+0x118>
  else if(canHandle->Instance==CAN2)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a2a      	ldr	r2, [pc, #168]	; (800443c <HAL_CAN_MspInit+0x130>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d145      	bne.n	8004424 <HAL_CAN_MspInit+0x118>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8004398:	2300      	movs	r3, #0
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	4b25      	ldr	r3, [pc, #148]	; (8004434 <HAL_CAN_MspInit+0x128>)
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	4a24      	ldr	r2, [pc, #144]	; (8004434 <HAL_CAN_MspInit+0x128>)
 80043a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043a6:	6413      	str	r3, [r2, #64]	; 0x40
 80043a8:	4b22      	ldr	r3, [pc, #136]	; (8004434 <HAL_CAN_MspInit+0x128>)
 80043aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	68fb      	ldr	r3, [r7, #12]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80043b4:	4b1e      	ldr	r3, [pc, #120]	; (8004430 <HAL_CAN_MspInit+0x124>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3301      	adds	r3, #1
 80043ba:	4a1d      	ldr	r2, [pc, #116]	; (8004430 <HAL_CAN_MspInit+0x124>)
 80043bc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80043be:	4b1c      	ldr	r3, [pc, #112]	; (8004430 <HAL_CAN_MspInit+0x124>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d10d      	bne.n	80043e2 <HAL_CAN_MspInit+0xd6>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80043c6:	2300      	movs	r3, #0
 80043c8:	60bb      	str	r3, [r7, #8]
 80043ca:	4b1a      	ldr	r3, [pc, #104]	; (8004434 <HAL_CAN_MspInit+0x128>)
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	4a19      	ldr	r2, [pc, #100]	; (8004434 <HAL_CAN_MspInit+0x128>)
 80043d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043d4:	6413      	str	r3, [r2, #64]	; 0x40
 80043d6:	4b17      	ldr	r3, [pc, #92]	; (8004434 <HAL_CAN_MspInit+0x128>)
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043de:	60bb      	str	r3, [r7, #8]
 80043e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80043e2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80043e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043e8:	2302      	movs	r3, #2
 80043ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ec:	2300      	movs	r3, #0
 80043ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043f0:	2303      	movs	r3, #3
 80043f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80043f4:	2309      	movs	r3, #9
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043f8:	f107 0314 	add.w	r3, r7, #20
 80043fc:	4619      	mov	r1, r3
 80043fe:	4810      	ldr	r0, [pc, #64]	; (8004440 <HAL_CAN_MspInit+0x134>)
 8004400:	f7fd fd34 	bl	8001e6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8004404:	2200      	movs	r2, #0
 8004406:	2100      	movs	r1, #0
 8004408:	2040      	movs	r0, #64	; 0x40
 800440a:	f7fd fcac 	bl	8001d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800440e:	2040      	movs	r0, #64	; 0x40
 8004410:	f7fd fcc5 	bl	8001d9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8004414:	2200      	movs	r2, #0
 8004416:	2100      	movs	r1, #0
 8004418:	2041      	movs	r0, #65	; 0x41
 800441a:	f7fd fca4 	bl	8001d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800441e:	2041      	movs	r0, #65	; 0x41
 8004420:	f7fd fcbd 	bl	8001d9e <HAL_NVIC_EnableIRQ>
}
 8004424:	bf00      	nop
 8004426:	3728      	adds	r7, #40	; 0x28
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40006400 	.word	0x40006400
 8004430:	2000008c 	.word	0x2000008c
 8004434:	40023800 	.word	0x40023800
 8004438:	40020c00 	.word	0x40020c00
 800443c:	40006800 	.word	0x40006800
 8004440:	40020400 	.word	0x40020400

08004444 <initCanFilter>:
  /* USER CODE END CAN2_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void initCanFilter() {
 8004444:	b580      	push	{r7, lr}
 8004446:	b08a      	sub	sp, #40	; 0x28
 8004448:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 800444a:	2300      	movs	r3, #0
 800444c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800444e:	2300      	movs	r3, #0
 8004450:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8004452:	2301      	movs	r3, #1
 8004454:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8004456:	2300      	movs	r3, #0
 8004458:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 800445a:	2300      	movs	r3, #0
 800445c:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 800445e:	2300      	movs	r3, #0
 8004460:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8004462:	2300      	movs	r3, #0
 8004464:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8004466:	2300      	movs	r3, #0
 8004468:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800446a:	2301      	movs	r3, #1
 800446c:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 0;
 800446e:	2300      	movs	r3, #0
 8004470:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8004472:	463b      	mov	r3, r7
 8004474:	4619      	mov	r1, r3
 8004476:	4808      	ldr	r0, [pc, #32]	; (8004498 <initCanFilter+0x54>)
 8004478:	f7fc fe38 	bl	80010ec <HAL_CAN_ConfigFilter>

	sFilterConfig.SlaveStartFilterBank = 0;
 800447c:	2300      	movs	r3, #0
 800447e:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterBank = 0;
 8004480:	2300      	movs	r3, #0
 8004482:	617b      	str	r3, [r7, #20]

	HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig);
 8004484:	463b      	mov	r3, r7
 8004486:	4619      	mov	r1, r3
 8004488:	4804      	ldr	r0, [pc, #16]	; (800449c <initCanFilter+0x58>)
 800448a:	f7fc fe2f 	bl	80010ec <HAL_CAN_ConfigFilter>
}
 800448e:	bf00      	nop
 8004490:	3728      	adds	r7, #40	; 0x28
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	200000e0 	.word	0x200000e0
 800449c:	200000b8 	.word	0x200000b8

080044a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08c      	sub	sp, #48	; 0x30
 80044a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80044a6:	2300      	movs	r3, #0
 80044a8:	61bb      	str	r3, [r7, #24]
 80044aa:	4b50      	ldr	r3, [pc, #320]	; (80045ec <MX_GPIO_Init+0x14c>)
 80044ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ae:	4a4f      	ldr	r2, [pc, #316]	; (80045ec <MX_GPIO_Init+0x14c>)
 80044b0:	f043 0310 	orr.w	r3, r3, #16
 80044b4:	6313      	str	r3, [r2, #48]	; 0x30
 80044b6:	4b4d      	ldr	r3, [pc, #308]	; (80045ec <MX_GPIO_Init+0x14c>)
 80044b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ba:	f003 0310 	and.w	r3, r3, #16
 80044be:	61bb      	str	r3, [r7, #24]
 80044c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80044c2:	2300      	movs	r3, #0
 80044c4:	617b      	str	r3, [r7, #20]
 80044c6:	4b49      	ldr	r3, [pc, #292]	; (80045ec <MX_GPIO_Init+0x14c>)
 80044c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ca:	4a48      	ldr	r2, [pc, #288]	; (80045ec <MX_GPIO_Init+0x14c>)
 80044cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044d0:	6313      	str	r3, [r2, #48]	; 0x30
 80044d2:	4b46      	ldr	r3, [pc, #280]	; (80045ec <MX_GPIO_Init+0x14c>)
 80044d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044de:	2300      	movs	r3, #0
 80044e0:	613b      	str	r3, [r7, #16]
 80044e2:	4b42      	ldr	r3, [pc, #264]	; (80045ec <MX_GPIO_Init+0x14c>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	4a41      	ldr	r2, [pc, #260]	; (80045ec <MX_GPIO_Init+0x14c>)
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	6313      	str	r3, [r2, #48]	; 0x30
 80044ee:	4b3f      	ldr	r3, [pc, #252]	; (80045ec <MX_GPIO_Init+0x14c>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	613b      	str	r3, [r7, #16]
 80044f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044fa:	2300      	movs	r3, #0
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	4b3b      	ldr	r3, [pc, #236]	; (80045ec <MX_GPIO_Init+0x14c>)
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	4a3a      	ldr	r2, [pc, #232]	; (80045ec <MX_GPIO_Init+0x14c>)
 8004504:	f043 0302 	orr.w	r3, r3, #2
 8004508:	6313      	str	r3, [r2, #48]	; 0x30
 800450a:	4b38      	ldr	r3, [pc, #224]	; (80045ec <MX_GPIO_Init+0x14c>)
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004516:	2300      	movs	r3, #0
 8004518:	60bb      	str	r3, [r7, #8]
 800451a:	4b34      	ldr	r3, [pc, #208]	; (80045ec <MX_GPIO_Init+0x14c>)
 800451c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451e:	4a33      	ldr	r2, [pc, #204]	; (80045ec <MX_GPIO_Init+0x14c>)
 8004520:	f043 0308 	orr.w	r3, r3, #8
 8004524:	6313      	str	r3, [r2, #48]	; 0x30
 8004526:	4b31      	ldr	r3, [pc, #196]	; (80045ec <MX_GPIO_Init+0x14c>)
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	60bb      	str	r3, [r7, #8]
 8004530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004532:	2300      	movs	r3, #0
 8004534:	607b      	str	r3, [r7, #4]
 8004536:	4b2d      	ldr	r3, [pc, #180]	; (80045ec <MX_GPIO_Init+0x14c>)
 8004538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453a:	4a2c      	ldr	r2, [pc, #176]	; (80045ec <MX_GPIO_Init+0x14c>)
 800453c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004540:	6313      	str	r3, [r2, #48]	; 0x30
 8004542:	4b2a      	ldr	r3, [pc, #168]	; (80045ec <MX_GPIO_Init+0x14c>)
 8004544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800454a:	607b      	str	r3, [r7, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800454e:	2300      	movs	r3, #0
 8004550:	603b      	str	r3, [r7, #0]
 8004552:	4b26      	ldr	r3, [pc, #152]	; (80045ec <MX_GPIO_Init+0x14c>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004556:	4a25      	ldr	r2, [pc, #148]	; (80045ec <MX_GPIO_Init+0x14c>)
 8004558:	f043 0320 	orr.w	r3, r3, #32
 800455c:	6313      	str	r3, [r2, #48]	; 0x30
 800455e:	4b23      	ldr	r3, [pc, #140]	; (80045ec <MX_GPIO_Init+0x14c>)
 8004560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004562:	f003 0320 	and.w	r3, r3, #32
 8004566:	603b      	str	r3, [r7, #0]
 8004568:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, POWER_OUT1_Pin|POWER_OUT2_Pin|POWER_OUT3_Pin|POWER_OUT4_Pin, GPIO_PIN_RESET);
 800456a:	2200      	movs	r2, #0
 800456c:	213c      	movs	r1, #60	; 0x3c
 800456e:	4820      	ldr	r0, [pc, #128]	; (80045f0 <MX_GPIO_Init+0x150>)
 8004570:	f7fd fe26 	bl	80021c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI_MPU_CS_Pin|LED_G_Pin, GPIO_PIN_SET);
 8004574:	2201      	movs	r2, #1
 8004576:	f244 0140 	movw	r1, #16448	; 0x4040
 800457a:	481e      	ldr	r0, [pc, #120]	; (80045f4 <MX_GPIO_Init+0x154>)
 800457c:	f7fd fe20 	bl	80021c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 8004580:	2201      	movs	r2, #1
 8004582:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004586:	481c      	ldr	r0, [pc, #112]	; (80045f8 <MX_GPIO_Init+0x158>)
 8004588:	f7fd fe1a 	bl	80021c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = POWER_OUT1_Pin|POWER_OUT2_Pin|POWER_OUT3_Pin|POWER_OUT4_Pin;
 800458c:	233c      	movs	r3, #60	; 0x3c
 800458e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004590:	2301      	movs	r3, #1
 8004592:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004594:	2300      	movs	r3, #0
 8004596:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004598:	2300      	movs	r3, #0
 800459a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800459c:	f107 031c 	add.w	r3, r7, #28
 80045a0:	4619      	mov	r1, r3
 80045a2:	4813      	ldr	r0, [pc, #76]	; (80045f0 <MX_GPIO_Init+0x150>)
 80045a4:	f7fd fc62 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = SPI_MPU_CS_Pin|LED_G_Pin;
 80045a8:	f244 0340 	movw	r3, #16448	; 0x4040
 80045ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045ae:	2301      	movs	r3, #1
 80045b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b2:	2300      	movs	r3, #0
 80045b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045b6:	2300      	movs	r3, #0
 80045b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80045ba:	f107 031c 	add.w	r3, r7, #28
 80045be:	4619      	mov	r1, r3
 80045c0:	480c      	ldr	r0, [pc, #48]	; (80045f4 <MX_GPIO_Init+0x154>)
 80045c2:	f7fd fc53 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 80045c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80045ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045cc:	2301      	movs	r3, #1
 80045ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d0:	2300      	movs	r3, #0
 80045d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045d4:	2300      	movs	r3, #0
 80045d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 80045d8:	f107 031c 	add.w	r3, r7, #28
 80045dc:	4619      	mov	r1, r3
 80045de:	4806      	ldr	r0, [pc, #24]	; (80045f8 <MX_GPIO_Init+0x158>)
 80045e0:	f7fd fc44 	bl	8001e6c <HAL_GPIO_Init>

}
 80045e4:	bf00      	nop
 80045e6:	3730      	adds	r7, #48	; 0x30
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40023800 	.word	0x40023800
 80045f0:	40021c00 	.word	0x40021c00
 80045f4:	40021400 	.word	0x40021400
 80045f8:	40021000 	.word	0x40021000

080045fc <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch) {
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	71fb      	strb	r3, [r7, #7]
HAL_UART_Transmit(&huart7, &ch, 1, 1);
 8004606:	1df9      	adds	r1, r7, #7
 8004608:	2301      	movs	r3, #1
 800460a:	2201      	movs	r2, #1
 800460c:	4803      	ldr	r0, [pc, #12]	; (800461c <__io_putchar+0x20>)
 800460e:	f7ff f894 	bl	800373a <HAL_UART_Transmit>
}
 8004612:	bf00      	nop
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20000488 	.word	0x20000488

08004620 <map>:
void initLoadPID();
void Gimbal_Task();
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
 800462c:	603b      	str	r3, [r7, #0]
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	69b9      	ldr	r1, [r7, #24]
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	1a8a      	subs	r2, r1, r2
 800463a:	fb02 f203 	mul.w	r2, r2, r3
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	1acb      	subs	r3, r1, r3
 8004644:	fb92 f2f3 	sdiv	r2, r2, r3
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	4413      	add	r3, r2
}
 800464c:	4618      	mov	r0, r3
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <timerTask>:

void timerTask() { //call 500Hz
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
	driveWheelTask();
 800465c:	f000 fb7c 	bl	8004d58 <driveWheelTask>
	Gimbal_Task();
 8004660:	f000 fd02 	bl	8005068 <Gimbal_Task>
}
 8004664:	bf00      	nop
 8004666:	bd80      	pop	{r7, pc}

08004668 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800466e:	f7fc fbad 	bl	8000dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004672:	f000 f895 	bl	80047a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004676:	f7ff ff13 	bl	80044a0 <MX_GPIO_Init>
  MX_TIM6_Init();
 800467a:	f001 fc23 	bl	8005ec4 <MX_TIM6_Init>
  MX_SPI5_Init();
 800467e:	f001 f98f 	bl	80059a0 <MX_SPI5_Init>
  MX_CAN2_Init();
 8004682:	f7ff fe09 	bl	8004298 <MX_CAN2_Init>
  MX_CAN1_Init();
 8004686:	f7ff fdcd 	bl	8004224 <MX_CAN1_Init>
  MX_TIM12_Init();
 800468a:	f001 fc4f 	bl	8005f2c <MX_TIM12_Init>
  MX_TIM1_Init();
 800468e:	f001 fb95 	bl	8005dbc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8004692:	f001 fd97 	bl	80061c4 <MX_USART1_UART_Init>
  MX_UART7_Init();
 8004696:	f001 fd39 	bl	800610c <MX_UART7_Init>
  MX_UART8_Init();
 800469a:	f001 fd65 	bl	8006168 <MX_UART8_Init>
  MX_USART6_UART_Init();
 800469e:	f001 fdbf 	bl	8006220 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 80046a2:	2200      	movs	r2, #0
 80046a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80046a8:	4831      	ldr	r0, [pc, #196]	; (8004770 <main+0x108>)
 80046aa:	f7fd fd89 	bl	80021c0 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // friction wheel
 80046ae:	2100      	movs	r1, #0
 80046b0:	4830      	ldr	r0, [pc, #192]	; (8004774 <main+0x10c>)
 80046b2:	f7fe faa1 	bl	8002bf8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80046b6:	210c      	movs	r1, #12
 80046b8:	482e      	ldr	r0, [pc, #184]	; (8004774 <main+0x10c>)
 80046ba:	f7fe fa9d 	bl	8002bf8 <HAL_TIM_PWM_Start>
  initFriction();
 80046be:	f000 fc69 	bl	8004f94 <initFriction>
  initPID();
 80046c2:	f000 fbe9 	bl	8004e98 <initPID>
  initLoadPID();
 80046c6:	f000 fca1 	bl	800500c <initLoadPID>
  initCanFilter();
 80046ca:	f7ff febb 	bl	8004444 <initCanFilter>
  initMecanum();
 80046ce:	f000 fc41 	bl	8004f54 <initMecanum>
  HAL_UART_Receive_IT(&huart1, rcData, 18);
 80046d2:	2212      	movs	r2, #18
 80046d4:	4928      	ldr	r1, [pc, #160]	; (8004778 <main+0x110>)
 80046d6:	4829      	ldr	r0, [pc, #164]	; (800477c <main+0x114>)
 80046d8:	f7ff f8c8 	bl	800386c <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80046dc:	4828      	ldr	r0, [pc, #160]	; (8004780 <main+0x118>)
 80046de:	f7fe fa3c 	bl	8002b5a <HAL_TIM_Base_Start_IT>
  setbuf(stdout, NULL);
 80046e2:	4b28      	ldr	r3, [pc, #160]	; (8004784 <main+0x11c>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	2100      	movs	r1, #0
 80046ea:	4618      	mov	r0, r3
 80046ec:	f001 ff6c 	bl	80065c8 <setbuf>
  HAL_CAN_Start(&hcan1);
 80046f0:	4825      	ldr	r0, [pc, #148]	; (8004788 <main+0x120>)
 80046f2:	f7fc fddb 	bl	80012ac <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 80046f6:	4825      	ldr	r0, [pc, #148]	; (800478c <main+0x124>)
 80046f8:	f7fc fdd8 	bl	80012ac <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80046fc:	2102      	movs	r1, #2
 80046fe:	4822      	ldr	r0, [pc, #136]	; (8004788 <main+0x120>)
 8004700:	f7fd f806 	bl	8001710 <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8004704:	2102      	movs	r1, #2
 8004706:	4821      	ldr	r0, [pc, #132]	; (800478c <main+0x124>)
 8004708:	f7fd f802 	bl	8001710 <HAL_CAN_ActivateNotification>
  HAL_GPIO_WritePin(POWER_OUT1_GPIO_Port, POWER_OUT1_Pin, 1);
 800470c:	2201      	movs	r2, #1
 800470e:	2104      	movs	r1, #4
 8004710:	481f      	ldr	r0, [pc, #124]	; (8004790 <main+0x128>)
 8004712:	f7fd fd55 	bl	80021c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(POWER_OUT2_GPIO_Port, POWER_OUT2_Pin, 1);
 8004716:	2201      	movs	r2, #1
 8004718:	2108      	movs	r1, #8
 800471a:	481d      	ldr	r0, [pc, #116]	; (8004790 <main+0x128>)
 800471c:	f7fd fd50 	bl	80021c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(POWER_OUT3_GPIO_Port, POWER_OUT3_Pin, 1);
 8004720:	2201      	movs	r2, #1
 8004722:	2110      	movs	r1, #16
 8004724:	481a      	ldr	r0, [pc, #104]	; (8004790 <main+0x128>)
 8004726:	f7fd fd4b 	bl	80021c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(POWER_OUT4_GPIO_Port, POWER_OUT4_Pin, 1);
 800472a:	2201      	movs	r2, #1
 800472c:	2120      	movs	r1, #32
 800472e:	4818      	ldr	r0, [pc, #96]	; (8004790 <main+0x128>)
 8004730:	f7fd fd46 	bl	80021c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 8004734:	2201      	movs	r2, #1
 8004736:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800473a:	480d      	ldr	r0, [pc, #52]	; (8004770 <main+0x108>)
 800473c:	f7fd fd40 	bl	80021c0 <HAL_GPIO_WritePin>


	 /* printf("ch1=%d ch2=%d ch3=%d ch4=%d ch5=%d sw1=%d sw2=%d m_x=%d m_y=%d m_l=%d m_r=%d W=%d S=%d A=%d D=%d Q=%d E=%d Shift=%d Ctrl=%d"
			 ,rc.ch1,rc.ch2,rc.ch3,rc.ch4,rc.ch5,rc.sw1,rc.sw2,rc.mouse_x, rc.mouse_y,rc.mouse_press_l,rc.mouse_press_r
			 ,rc.key_W,rc.key_S,rc.key_A,rc.key_D,rc.key_Q,rc.key_E,rc.key_Shift,rc.key_Ctrl);*/
	  printf("M0=%d M1=%d M2=%d M3=%d",wheelFdb[0].rpm,wheelFdb[1].rpm,wheelFdb[2].rpm,wheelFdb[3].rpm);
 8004740:	4b14      	ldr	r3, [pc, #80]	; (8004794 <main+0x12c>)
 8004742:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004746:	4619      	mov	r1, r3
 8004748:	4b12      	ldr	r3, [pc, #72]	; (8004794 <main+0x12c>)
 800474a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800474e:	461a      	mov	r2, r3
 8004750:	4b10      	ldr	r3, [pc, #64]	; (8004794 <main+0x12c>)
 8004752:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8004756:	4618      	mov	r0, r3
 8004758:	4b0e      	ldr	r3, [pc, #56]	; (8004794 <main+0x12c>)
 800475a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	4603      	mov	r3, r0
 8004762:	480d      	ldr	r0, [pc, #52]	; (8004798 <main+0x130>)
 8004764:	f001 feb4 	bl	80064d0 <iprintf>
	  //printf(" target_yaw=%d angle=%f",target_yaw,(float)((gimbalYawFdb.angle-4096.0)/8191.0*360.0));
	  printf("\r\n");
 8004768:	480c      	ldr	r0, [pc, #48]	; (800479c <main+0x134>)
 800476a:	f001 ff25 	bl	80065b8 <puts>
	  printf("M0=%d M1=%d M2=%d M3=%d",wheelFdb[0].rpm,wheelFdb[1].rpm,wheelFdb[2].rpm,wheelFdb[3].rpm);
 800476e:	e7e7      	b.n	8004740 <main+0xd8>
 8004770:	40021000 	.word	0x40021000
 8004774:	20000408 	.word	0x20000408
 8004778:	2000032c 	.word	0x2000032c
 800477c:	200004c8 	.word	0x200004c8
 8004780:	200003c8 	.word	0x200003c8
 8004784:	2000000c 	.word	0x2000000c
 8004788:	200000e0 	.word	0x200000e0
 800478c:	200000b8 	.word	0x200000b8
 8004790:	40021c00 	.word	0x40021c00
 8004794:	20000134 	.word	0x20000134
 8004798:	08007504 	.word	0x08007504
 800479c:	0800751c 	.word	0x0800751c

080047a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b094      	sub	sp, #80	; 0x50
 80047a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80047a6:	2300      	movs	r3, #0
 80047a8:	60bb      	str	r3, [r7, #8]
 80047aa:	4b34      	ldr	r3, [pc, #208]	; (800487c <SystemClock_Config+0xdc>)
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	4a33      	ldr	r2, [pc, #204]	; (800487c <SystemClock_Config+0xdc>)
 80047b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b4:	6413      	str	r3, [r2, #64]	; 0x40
 80047b6:	4b31      	ldr	r3, [pc, #196]	; (800487c <SystemClock_Config+0xdc>)
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047be:	60bb      	str	r3, [r7, #8]
 80047c0:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80047c2:	2300      	movs	r3, #0
 80047c4:	607b      	str	r3, [r7, #4]
 80047c6:	4b2e      	ldr	r3, [pc, #184]	; (8004880 <SystemClock_Config+0xe0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a2d      	ldr	r2, [pc, #180]	; (8004880 <SystemClock_Config+0xe0>)
 80047cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047d0:	6013      	str	r3, [r2, #0]
 80047d2:	4b2b      	ldr	r3, [pc, #172]	; (8004880 <SystemClock_Config+0xe0>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80047da:	607b      	str	r3, [r7, #4]
 80047dc:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80047de:	2301      	movs	r3, #1
 80047e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80047e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047e6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80047e8:	2302      	movs	r3, #2
 80047ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80047ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80047f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80047f2:	2306      	movs	r3, #6
 80047f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80047f6:	23a8      	movs	r3, #168	; 0xa8
 80047f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80047fa:	2302      	movs	r3, #2
 80047fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80047fe:	2304      	movs	r3, #4
 8004800:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004802:	f107 0320 	add.w	r3, r7, #32
 8004806:	4618      	mov	r0, r3
 8004808:	f7fd fd0e 	bl	8002228 <HAL_RCC_OscConfig>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <SystemClock_Config+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004812:	21ce      	movs	r1, #206	; 0xce
 8004814:	481b      	ldr	r0, [pc, #108]	; (8004884 <SystemClock_Config+0xe4>)
 8004816:	f000 fd45 	bl	80052a4 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800481a:	230f      	movs	r3, #15
 800481c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800481e:	2302      	movs	r3, #2
 8004820:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004822:	2300      	movs	r3, #0
 8004824:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004826:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800482a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800482c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004830:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004832:	f107 030c 	add.w	r3, r7, #12
 8004836:	2105      	movs	r1, #5
 8004838:	4618      	mov	r0, r3
 800483a:	f7fd ff37 	bl	80026ac <HAL_RCC_ClockConfig>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <SystemClock_Config+0xac>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004844:	21dc      	movs	r1, #220	; 0xdc
 8004846:	480f      	ldr	r0, [pc, #60]	; (8004884 <SystemClock_Config+0xe4>)
 8004848:	f000 fd2c 	bl	80052a4 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800484c:	f7fe f8c2 	bl	80029d4 <HAL_RCC_GetHCLKFreq>
 8004850:	4602      	mov	r2, r0
 8004852:	4b0d      	ldr	r3, [pc, #52]	; (8004888 <SystemClock_Config+0xe8>)
 8004854:	fba3 2302 	umull	r2, r3, r3, r2
 8004858:	099b      	lsrs	r3, r3, #6
 800485a:	4618      	mov	r0, r3
 800485c:	f7fd faad 	bl	8001dba <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004860:	2004      	movs	r0, #4
 8004862:	f7fd fab7 	bl	8001dd4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004866:	2200      	movs	r2, #0
 8004868:	2100      	movs	r1, #0
 800486a:	f04f 30ff 	mov.w	r0, #4294967295
 800486e:	f7fd fa7a 	bl	8001d66 <HAL_NVIC_SetPriority>
}
 8004872:	bf00      	nop
 8004874:	3750      	adds	r7, #80	; 0x50
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	40023800 	.word	0x40023800
 8004880:	40007000 	.word	0x40007000
 8004884:	08007520 	.word	0x08007520
 8004888:	10624dd3 	.word	0x10624dd3

0800488c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
	static long unsigned int c = 0;
	c++;
 8004894:	4b0a      	ldr	r3, [pc, #40]	; (80048c0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	3301      	adds	r3, #1
 800489a:	4a09      	ldr	r2, [pc, #36]	; (80048c0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800489c:	6013      	str	r3, [r2, #0]
	if (htim->Instance == htim6.Instance) {//500Hz
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	4b08      	ldr	r3, [pc, #32]	; (80048c4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d106      	bne.n	80048b8 <HAL_TIM_PeriodElapsedCallback+0x2c>
		timerTask();
 80048aa:	f7ff fed5 	bl	8004658 <timerTask>
		HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 80048ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80048b2:	4805      	ldr	r0, [pc, #20]	; (80048c8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80048b4:	f7fd fc9d 	bl	80021f2 <HAL_GPIO_TogglePin>
	}
}
 80048b8:	bf00      	nop
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	20000090 	.word	0x20000090
 80048c4:	200003c8 	.word	0x200003c8
 80048c8:	40021400 	.word	0x40021400

080048cc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == huart1.Instance) {	//Propo-receive Interrupts
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	4b91      	ldr	r3, [pc, #580]	; (8004b20 <HAL_UART_RxCpltCallback+0x254>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	429a      	cmp	r2, r3
 80048de:	f040 811b 	bne.w	8004b18 <HAL_UART_RxCpltCallback+0x24c>
		HAL_UART_Receive_IT(&huart1, rcData, 18);
 80048e2:	2212      	movs	r2, #18
 80048e4:	498f      	ldr	r1, [pc, #572]	; (8004b24 <HAL_UART_RxCpltCallback+0x258>)
 80048e6:	488e      	ldr	r0, [pc, #568]	; (8004b20 <HAL_UART_RxCpltCallback+0x254>)
 80048e8:	f7fe ffc0 	bl	800386c <HAL_UART_Receive_IT>
		//HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
		rc.ch1 = (((rcData[1] & 0x07) << 8) | rcData[0]);
 80048ec:	4b8d      	ldr	r3, [pc, #564]	; (8004b24 <HAL_UART_RxCpltCallback+0x258>)
 80048ee:	785b      	ldrb	r3, [r3, #1]
 80048f0:	021b      	lsls	r3, r3, #8
 80048f2:	b21b      	sxth	r3, r3
 80048f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048f8:	b21a      	sxth	r2, r3
 80048fa:	4b8a      	ldr	r3, [pc, #552]	; (8004b24 <HAL_UART_RxCpltCallback+0x258>)
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	b21b      	sxth	r3, r3
 8004900:	4313      	orrs	r3, r2
 8004902:	b21a      	sxth	r2, r3
 8004904:	4b88      	ldr	r3, [pc, #544]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 8004906:	801a      	strh	r2, [r3, #0]
		rc.ch1 -= 1024;
 8004908:	4b87      	ldr	r3, [pc, #540]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 800490a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800490e:	b29b      	uxth	r3, r3
 8004910:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004914:	b29b      	uxth	r3, r3
 8004916:	b21a      	sxth	r2, r3
 8004918:	4b83      	ldr	r3, [pc, #524]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 800491a:	801a      	strh	r2, [r3, #0]
		rc.ch2 = (((rcData[2] & 0x3F) << 5) | (rcData[1] >> 3));
 800491c:	4b81      	ldr	r3, [pc, #516]	; (8004b24 <HAL_UART_RxCpltCallback+0x258>)
 800491e:	789b      	ldrb	r3, [r3, #2]
 8004920:	015b      	lsls	r3, r3, #5
 8004922:	b21b      	sxth	r3, r3
 8004924:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8004928:	b21a      	sxth	r2, r3
 800492a:	4b7e      	ldr	r3, [pc, #504]	; (8004b24 <HAL_UART_RxCpltCallback+0x258>)
 800492c:	785b      	ldrb	r3, [r3, #1]
 800492e:	08db      	lsrs	r3, r3, #3
 8004930:	b2db      	uxtb	r3, r3
 8004932:	b21b      	sxth	r3, r3
 8004934:	4313      	orrs	r3, r2
 8004936:	b21a      	sxth	r2, r3
 8004938:	4b7b      	ldr	r3, [pc, #492]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 800493a:	805a      	strh	r2, [r3, #2]
		rc.ch2 -= 1024;
 800493c:	4b7a      	ldr	r3, [pc, #488]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 800493e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004942:	b29b      	uxth	r3, r3
 8004944:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004948:	b29b      	uxth	r3, r3
 800494a:	b21a      	sxth	r2, r3
 800494c:	4b76      	ldr	r3, [pc, #472]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 800494e:	805a      	strh	r2, [r3, #2]
		rc.ch3 = (((rcData[4] & 0x01) << 10) | (rcData[3] << 2)
 8004950:	4b74      	ldr	r3, [pc, #464]	; (8004b24 <HAL_UART_RxCpltCallback+0x258>)
 8004952:	791b      	ldrb	r3, [r3, #4]
 8004954:	029b      	lsls	r3, r3, #10
 8004956:	b21b      	sxth	r3, r3
 8004958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800495c:	b21a      	sxth	r2, r3
 800495e:	4b71      	ldr	r3, [pc, #452]	; (8004b24 <HAL_UART_RxCpltCallback+0x258>)
 8004960:	78db      	ldrb	r3, [r3, #3]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	b21b      	sxth	r3, r3
 8004966:	4313      	orrs	r3, r2
 8004968:	b21a      	sxth	r2, r3
				| (rcData[2] >> 6));
 800496a:	4b6e      	ldr	r3, [pc, #440]	; (8004b24 <HAL_UART_RxCpltCallback+0x258>)
 800496c:	789b      	ldrb	r3, [r3, #2]
 800496e:	099b      	lsrs	r3, r3, #6
 8004970:	b2db      	uxtb	r3, r3
 8004972:	b21b      	sxth	r3, r3
 8004974:	4313      	orrs	r3, r2
 8004976:	b21a      	sxth	r2, r3
		rc.ch3 = (((rcData[4] & 0x01) << 10) | (rcData[3] << 2)
 8004978:	4b6b      	ldr	r3, [pc, #428]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 800497a:	809a      	strh	r2, [r3, #4]
		rc.ch3 -= 1024;
 800497c:	4b6a      	ldr	r3, [pc, #424]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 800497e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004982:	b29b      	uxth	r3, r3
 8004984:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004988:	b29b      	uxth	r3, r3
 800498a:	b21a      	sxth	r2, r3
 800498c:	4b66      	ldr	r3, [pc, #408]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 800498e:	809a      	strh	r2, [r3, #4]
		rc.ch4 = (((rcData[5] & 0x0F) << 7) | (rcData[4] >> 1));
 8004990:	4b64      	ldr	r3, [pc, #400]	; (8004b24 <HAL_UART_RxCpltCallback+0x258>)
 8004992:	795b      	ldrb	r3, [r3, #5]
 8004994:	01db      	lsls	r3, r3, #7
 8004996:	b21b      	sxth	r3, r3
 8004998:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 800499c:	b21a      	sxth	r2, r3
 800499e:	4b61      	ldr	r3, [pc, #388]	; (8004b24 <HAL_UART_RxCpltCallback+0x258>)
 80049a0:	791b      	ldrb	r3, [r3, #4]
 80049a2:	085b      	lsrs	r3, r3, #1
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	b21b      	sxth	r3, r3
 80049a8:	4313      	orrs	r3, r2
 80049aa:	b21a      	sxth	r2, r3
 80049ac:	4b5e      	ldr	r3, [pc, #376]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 80049ae:	80da      	strh	r2, [r3, #6]
		rc.ch4 -= 1024;
 80049b0:	4b5d      	ldr	r3, [pc, #372]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 80049b2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80049bc:	b29b      	uxth	r3, r3
 80049be:	b21a      	sxth	r2, r3
 80049c0:	4b59      	ldr	r3, [pc, #356]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 80049c2:	80da      	strh	r2, [r3, #6]
		rc.ch5 = (rcData[17]<<8) | rcData[16];
 80049c4:	4b57      	ldr	r3, [pc, #348]	; (8004b24 <HAL_UART_RxCpltCallback+0x258>)
 80049c6:	7c5b      	ldrb	r3, [r3, #17]
 80049c8:	021b      	lsls	r3, r3, #8
 80049ca:	b21a      	sxth	r2, r3
 80049cc:	4b55      	ldr	r3, [pc, #340]	; (8004b24 <HAL_UART_RxCpltCallback+0x258>)
 80049ce:	7c1b      	ldrb	r3, [r3, #16]
 80049d0:	b21b      	sxth	r3, r3
 80049d2:	4313      	orrs	r3, r2
 80049d4:	b21a      	sxth	r2, r3
 80049d6:	4b54      	ldr	r3, [pc, #336]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 80049d8:	811a      	strh	r2, [r3, #8]
		rc.ch5 = 1024-rc.ch5;
 80049da:	4b53      	ldr	r3, [pc, #332]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 80049dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	b21a      	sxth	r2, r3
 80049ea:	4b4f      	ldr	r3, [pc, #316]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 80049ec:	811a      	strh	r2, [r3, #8]
		rc.sw1 = ((rcData[5] & 0x30) >> 4);
 80049ee:	4b4d      	ldr	r3, [pc, #308]	; (8004b24 <HAL_UART_RxCpltCallback+0x258>)
 80049f0:	795b      	ldrb	r3, [r3, #5]
 80049f2:	111b      	asrs	r3, r3, #4
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	4b4a      	ldr	r3, [pc, #296]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 80049fe:	729a      	strb	r2, [r3, #10]
		rc.sw2 = ((rcData[5] & 0xC0) >> 6);
 8004a00:	4b48      	ldr	r3, [pc, #288]	; (8004b24 <HAL_UART_RxCpltCallback+0x258>)
 8004a02:	795b      	ldrb	r3, [r3, #5]
 8004a04:	099b      	lsrs	r3, r3, #6
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	4b47      	ldr	r3, [pc, #284]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 8004a0a:	72da      	strb	r2, [r3, #11]
		rc.mouse_x = ((int16_t)rcData[6]) | ((int16_t)rcData[7] << 8);
 8004a0c:	4b45      	ldr	r3, [pc, #276]	; (8004b24 <HAL_UART_RxCpltCallback+0x258>)
 8004a0e:	799b      	ldrb	r3, [r3, #6]
 8004a10:	b21a      	sxth	r2, r3
 8004a12:	4b44      	ldr	r3, [pc, #272]	; (8004b24 <HAL_UART_RxCpltCallback+0x258>)
 8004a14:	79db      	ldrb	r3, [r3, #7]
 8004a16:	021b      	lsls	r3, r3, #8
 8004a18:	b21b      	sxth	r3, r3
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	b21a      	sxth	r2, r3
 8004a1e:	4b42      	ldr	r3, [pc, #264]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 8004a20:	819a      	strh	r2, [r3, #12]
		rc.mouse_y = ((int16_t)rcData[8]) | ((int16_t)rcData[9] << 8);
 8004a22:	4b40      	ldr	r3, [pc, #256]	; (8004b24 <HAL_UART_RxCpltCallback+0x258>)
 8004a24:	7a1b      	ldrb	r3, [r3, #8]
 8004a26:	b21a      	sxth	r2, r3
 8004a28:	4b3e      	ldr	r3, [pc, #248]	; (8004b24 <HAL_UART_RxCpltCallback+0x258>)
 8004a2a:	7a5b      	ldrb	r3, [r3, #9]
 8004a2c:	021b      	lsls	r3, r3, #8
 8004a2e:	b21b      	sxth	r3, r3
 8004a30:	4313      	orrs	r3, r2
 8004a32:	b21a      	sxth	r2, r3
 8004a34:	4b3c      	ldr	r3, [pc, #240]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 8004a36:	81da      	strh	r2, [r3, #14]
		rc.mouse_z = ((int16_t)rcData[10]) | ((int16_t)rcData[11] << 8);
 8004a38:	4b3a      	ldr	r3, [pc, #232]	; (8004b24 <HAL_UART_RxCpltCallback+0x258>)
 8004a3a:	7a9b      	ldrb	r3, [r3, #10]
 8004a3c:	b21a      	sxth	r2, r3
 8004a3e:	4b39      	ldr	r3, [pc, #228]	; (8004b24 <HAL_UART_RxCpltCallback+0x258>)
 8004a40:	7adb      	ldrb	r3, [r3, #11]
 8004a42:	021b      	lsls	r3, r3, #8
 8004a44:	b21b      	sxth	r3, r3
 8004a46:	4313      	orrs	r3, r2
 8004a48:	b21a      	sxth	r2, r3
 8004a4a:	4b37      	ldr	r3, [pc, #220]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 8004a4c:	821a      	strh	r2, [r3, #16]
		rc.mouse_press_l = rcData[12];
 8004a4e:	4b35      	ldr	r3, [pc, #212]	; (8004b24 <HAL_UART_RxCpltCallback+0x258>)
 8004a50:	7b1b      	ldrb	r3, [r3, #12]
 8004a52:	b21a      	sxth	r2, r3
 8004a54:	4b34      	ldr	r3, [pc, #208]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 8004a56:	825a      	strh	r2, [r3, #18]
		rc.mouse_press_r = rcData[13];
 8004a58:	4b32      	ldr	r3, [pc, #200]	; (8004b24 <HAL_UART_RxCpltCallback+0x258>)
 8004a5a:	7b5b      	ldrb	r3, [r3, #13]
 8004a5c:	b21a      	sxth	r2, r3
 8004a5e:	4b32      	ldr	r3, [pc, #200]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 8004a60:	829a      	strh	r2, [r3, #20]
		rc.key_v = ((int16_t)rcData[14]);
 8004a62:	4b30      	ldr	r3, [pc, #192]	; (8004b24 <HAL_UART_RxCpltCallback+0x258>)
 8004a64:	7b9b      	ldrb	r3, [r3, #14]
 8004a66:	b21a      	sxth	r2, r3
 8004a68:	4b2f      	ldr	r3, [pc, #188]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 8004a6a:	82da      	strh	r2, [r3, #22]
		rc.key_W =     (0b0000000000000001 & rc.key_v);
 8004a6c:	4b2e      	ldr	r3, [pc, #184]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 8004a6e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004a72:	b25b      	sxtb	r3, r3
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	b25a      	sxtb	r2, r3
 8004a7a:	4b2b      	ldr	r3, [pc, #172]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 8004a7c:	761a      	strb	r2, [r3, #24]
		rc.key_S =     (0b0000000000000010 & rc.key_v)>>1;
 8004a7e:	4b2a      	ldr	r3, [pc, #168]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 8004a80:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004a84:	105b      	asrs	r3, r3, #1
 8004a86:	b21b      	sxth	r3, r3
 8004a88:	b25b      	sxtb	r3, r3
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	b25a      	sxtb	r2, r3
 8004a90:	4b25      	ldr	r3, [pc, #148]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 8004a92:	769a      	strb	r2, [r3, #26]
		rc.key_A =     (0b0000000000000100 & rc.key_v)>>2;
 8004a94:	4b24      	ldr	r3, [pc, #144]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 8004a96:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004a9a:	109b      	asrs	r3, r3, #2
 8004a9c:	b21b      	sxth	r3, r3
 8004a9e:	b25b      	sxtb	r3, r3
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	b25a      	sxtb	r2, r3
 8004aa6:	4b20      	ldr	r3, [pc, #128]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 8004aa8:	765a      	strb	r2, [r3, #25]
		rc.key_D =     (0b0000000000001000 & rc.key_v)>>3;
 8004aaa:	4b1f      	ldr	r3, [pc, #124]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 8004aac:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004ab0:	10db      	asrs	r3, r3, #3
 8004ab2:	b21b      	sxth	r3, r3
 8004ab4:	b25b      	sxtb	r3, r3
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	b25a      	sxtb	r2, r3
 8004abc:	4b1a      	ldr	r3, [pc, #104]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 8004abe:	76da      	strb	r2, [r3, #27]
		rc.key_Shift = (0b0000000000010000 & rc.key_v)>>4;
 8004ac0:	4b19      	ldr	r3, [pc, #100]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 8004ac2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004ac6:	111b      	asrs	r3, r3, #4
 8004ac8:	b21b      	sxth	r3, r3
 8004aca:	b25b      	sxtb	r3, r3
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	b25a      	sxtb	r2, r3
 8004ad2:	4b15      	ldr	r3, [pc, #84]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 8004ad4:	779a      	strb	r2, [r3, #30]
		rc.key_Ctrl =  (0b0000000000100000 & rc.key_v)>>5;
 8004ad6:	4b14      	ldr	r3, [pc, #80]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 8004ad8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004adc:	115b      	asrs	r3, r3, #5
 8004ade:	b21b      	sxth	r3, r3
 8004ae0:	b25b      	sxtb	r3, r3
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	b25a      	sxtb	r2, r3
 8004ae8:	4b0f      	ldr	r3, [pc, #60]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 8004aea:	77da      	strb	r2, [r3, #31]
		rc.key_Q =     (0b0000000001000000 & rc.key_v)>>6;
 8004aec:	4b0e      	ldr	r3, [pc, #56]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 8004aee:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004af2:	119b      	asrs	r3, r3, #6
 8004af4:	b21b      	sxth	r3, r3
 8004af6:	b25b      	sxtb	r3, r3
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	b25a      	sxtb	r2, r3
 8004afe:	4b0a      	ldr	r3, [pc, #40]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 8004b00:	771a      	strb	r2, [r3, #28]
		rc.key_E =     (0b0000000010000000 & rc.key_v)>>7;
 8004b02:	4b09      	ldr	r3, [pc, #36]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 8004b04:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004b08:	11db      	asrs	r3, r3, #7
 8004b0a:	b21b      	sxth	r3, r3
 8004b0c:	b25b      	sxtb	r3, r3
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	b25a      	sxtb	r2, r3
 8004b14:	4b04      	ldr	r3, [pc, #16]	; (8004b28 <HAL_UART_RxCpltCallback+0x25c>)
 8004b16:	775a      	strb	r2, [r3, #29]

	}
}
 8004b18:	bf00      	nop
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	200004c8 	.word	0x200004c8
 8004b24:	2000032c 	.word	0x2000032c
 8004b28:	20000108 	.word	0x20000108
 8004b2c:	00000000 	.word	0x00000000

08004b30 <HAL_CAN_RxFifo0MsgPendingCallback>:

//can fifo0 receive interrupt
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8004b30:	b590      	push	{r4, r7, lr}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
	/* Get RX message */
	if (hcan->Instance == hcan2.Instance) {// can2 bus receive interrupt
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	4b7e      	ldr	r3, [pc, #504]	; (8004d38 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d17f      	bne.n	8004c44 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, canRxData);
 8004b44:	4b7d      	ldr	r3, [pc, #500]	; (8004d3c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8004b46:	4a7e      	ldr	r2, [pc, #504]	; (8004d40 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8004b48:	2100      	movs	r1, #0
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7fc fccd 	bl	80014ea <HAL_CAN_GetRxMessage>
		//check ESC identifier
		int id = canRxHeader.StdId - 513;
 8004b50:	4b7b      	ldr	r3, [pc, #492]	; (8004d40 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8004b58:	60bb      	str	r3, [r7, #8]

		wheelFdb[id].angle = canRxData[0] * 256 + canRxData[1];
 8004b5a:	4b78      	ldr	r3, [pc, #480]	; (8004d3c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	021b      	lsls	r3, r3, #8
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	4b75      	ldr	r3, [pc, #468]	; (8004d3c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8004b66:	785b      	ldrb	r3, [r3, #1]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	4413      	add	r3, r2
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	b218      	sxth	r0, r3
 8004b70:	4974      	ldr	r1, [pc, #464]	; (8004d44 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	4613      	mov	r3, r2
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	4413      	add	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	440b      	add	r3, r1
 8004b7e:	4602      	mov	r2, r0
 8004b80:	801a      	strh	r2, [r3, #0]
		wheelFdb[id].rpm = canRxData[2] * 256 + canRxData[3];
 8004b82:	4b6e      	ldr	r3, [pc, #440]	; (8004d3c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8004b84:	789b      	ldrb	r3, [r3, #2]
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	021b      	lsls	r3, r3, #8
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	4b6b      	ldr	r3, [pc, #428]	; (8004d3c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8004b8e:	78db      	ldrb	r3, [r3, #3]
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	4413      	add	r3, r2
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	b218      	sxth	r0, r3
 8004b98:	496a      	ldr	r1, [pc, #424]	; (8004d44 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	4413      	add	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	440b      	add	r3, r1
 8004ba6:	3302      	adds	r3, #2
 8004ba8:	4602      	mov	r2, r0
 8004baa:	801a      	strh	r2, [r3, #0]
		wheelFdb[id].torque = canRxData[4] * 256 + canRxData[5];
 8004bac:	4b63      	ldr	r3, [pc, #396]	; (8004d3c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8004bae:	791b      	ldrb	r3, [r3, #4]
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	021b      	lsls	r3, r3, #8
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	4b61      	ldr	r3, [pc, #388]	; (8004d3c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8004bb8:	795b      	ldrb	r3, [r3, #5]
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	4413      	add	r3, r2
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	b218      	sxth	r0, r3
 8004bc2:	4960      	ldr	r1, [pc, #384]	; (8004d44 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	4413      	add	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	440b      	add	r3, r1
 8004bd0:	3304      	adds	r3, #4
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	801a      	strh	r2, [r3, #0]
		wheelFdb[id].temp = canRxData[6];
 8004bd6:	4b59      	ldr	r3, [pc, #356]	; (8004d3c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8004bd8:	799b      	ldrb	r3, [r3, #6]
 8004bda:	b218      	sxth	r0, r3
 8004bdc:	4959      	ldr	r1, [pc, #356]	; (8004d44 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	4613      	mov	r3, r2
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	4413      	add	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	3306      	adds	r3, #6
 8004bec:	4602      	mov	r2, r0
 8004bee:	801a      	strh	r2, [r3, #0]
		wheelFdb[id].omg = 6.28318530718 * (wheelFdb[id].rpm) / 1140.0;
 8004bf0:	4954      	ldr	r1, [pc, #336]	; (8004d44 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	4413      	add	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	3302      	adds	r3, #2
 8004c00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fb fc95 	bl	8000534 <__aeabi_i2d>
 8004c0a:	a347      	add	r3, pc, #284	; (adr r3, 8004d28 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8004c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c10:	f7fb fcfa 	bl	8000608 <__aeabi_dmul>
 8004c14:	4603      	mov	r3, r0
 8004c16:	460c      	mov	r4, r1
 8004c18:	4618      	mov	r0, r3
 8004c1a:	4621      	mov	r1, r4
 8004c1c:	a344      	add	r3, pc, #272	; (adr r3, 8004d30 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8004c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c22:	f7fb fe1b 	bl	800085c <__aeabi_ddiv>
 8004c26:	4603      	mov	r3, r0
 8004c28:	460c      	mov	r4, r1
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	4621      	mov	r1, r4
 8004c2e:	f7fb fefd 	bl	8000a2c <__aeabi_d2f>
 8004c32:	4944      	ldr	r1, [pc, #272]	; (8004d44 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	4613      	mov	r3, r2
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	4413      	add	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	440b      	add	r3, r1
 8004c40:	3308      	adds	r3, #8
 8004c42:	6018      	str	r0, [r3, #0]
	}
	if (hcan->Instance == hcan1.Instance) {// can1 bus receive interrupt
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	4b3f      	ldr	r3, [pc, #252]	; (8004d48 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d167      	bne.n	8004d20 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, canRxData);
 8004c50:	4b3a      	ldr	r3, [pc, #232]	; (8004d3c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8004c52:	4a3b      	ldr	r2, [pc, #236]	; (8004d40 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8004c54:	2100      	movs	r1, #0
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7fc fc47 	bl	80014ea <HAL_CAN_GetRxMessage>
		motor_fdb *fdb = 0;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	60fb      	str	r3, [r7, #12]
		switch (canRxHeader.StdId) {
 8004c60:	4b37      	ldr	r3, [pc, #220]	; (8004d40 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f240 2206 	movw	r2, #518	; 0x206
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d00a      	beq.n	8004c82 <HAL_CAN_RxFifo0MsgPendingCallback+0x152>
 8004c6c:	f240 2207 	movw	r2, #519	; 0x207
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d009      	beq.n	8004c88 <HAL_CAN_RxFifo0MsgPendingCallback+0x158>
 8004c74:	f240 2205 	movw	r2, #517	; 0x205
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d108      	bne.n	8004c8e <HAL_CAN_RxFifo0MsgPendingCallback+0x15e>
		case 0x205:
			fdb = &gimbalYawFdb;
 8004c7c:	4b33      	ldr	r3, [pc, #204]	; (8004d4c <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8004c7e:	60fb      	str	r3, [r7, #12]
			break;
 8004c80:	e005      	b.n	8004c8e <HAL_CAN_RxFifo0MsgPendingCallback+0x15e>
		case 0x206:
			fdb = &gimbalPitchFdb;
 8004c82:	4b33      	ldr	r3, [pc, #204]	; (8004d50 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8004c84:	60fb      	str	r3, [r7, #12]
			break;
 8004c86:	e002      	b.n	8004c8e <HAL_CAN_RxFifo0MsgPendingCallback+0x15e>
		case 0x207:
			fdb = &loadMotorFdb;
 8004c88:	4b32      	ldr	r3, [pc, #200]	; (8004d54 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8004c8a:	60fb      	str	r3, [r7, #12]
			break;
 8004c8c:	bf00      	nop
		}
		fdb->angle = canRxData[0] * 256 + canRxData[1];
 8004c8e:	4b2b      	ldr	r3, [pc, #172]	; (8004d3c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	021b      	lsls	r3, r3, #8
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	4b28      	ldr	r3, [pc, #160]	; (8004d3c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8004c9a:	785b      	ldrb	r3, [r3, #1]
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	4413      	add	r3, r2
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	b21a      	sxth	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	801a      	strh	r2, [r3, #0]
		fdb->rpm = canRxData[2] * 256 + canRxData[3];
 8004ca8:	4b24      	ldr	r3, [pc, #144]	; (8004d3c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8004caa:	789b      	ldrb	r3, [r3, #2]
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	021b      	lsls	r3, r3, #8
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	4b22      	ldr	r3, [pc, #136]	; (8004d3c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8004cb4:	78db      	ldrb	r3, [r3, #3]
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	4413      	add	r3, r2
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	b21a      	sxth	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	805a      	strh	r2, [r3, #2]
		fdb->torque = canRxData[4] * 256 + canRxData[5];
 8004cc2:	4b1e      	ldr	r3, [pc, #120]	; (8004d3c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8004cc4:	791b      	ldrb	r3, [r3, #4]
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	021b      	lsls	r3, r3, #8
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	4b1b      	ldr	r3, [pc, #108]	; (8004d3c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8004cce:	795b      	ldrb	r3, [r3, #5]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	b21a      	sxth	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	809a      	strh	r2, [r3, #4]
		fdb->temp = canRxData[6];
 8004cdc:	4b17      	ldr	r3, [pc, #92]	; (8004d3c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8004cde:	799b      	ldrb	r3, [r3, #6]
 8004ce0:	b21a      	sxth	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	80da      	strh	r2, [r3, #6]
		fdb->omg = 6.28318530718 * (fdb->rpm) / 1140.0;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7fb fc21 	bl	8000534 <__aeabi_i2d>
 8004cf2:	a30d      	add	r3, pc, #52	; (adr r3, 8004d28 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8004cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf8:	f7fb fc86 	bl	8000608 <__aeabi_dmul>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	460c      	mov	r4, r1
 8004d00:	4618      	mov	r0, r3
 8004d02:	4621      	mov	r1, r4
 8004d04:	a30a      	add	r3, pc, #40	; (adr r3, 8004d30 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8004d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0a:	f7fb fda7 	bl	800085c <__aeabi_ddiv>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	460c      	mov	r4, r1
 8004d12:	4618      	mov	r0, r3
 8004d14:	4621      	mov	r1, r4
 8004d16:	f7fb fe89 	bl	8000a2c <__aeabi_d2f>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	609a      	str	r2, [r3, #8]
	}
}
 8004d20:	bf00      	nop
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd90      	pop	{r4, r7, pc}
 8004d28:	54442eea 	.word	0x54442eea
 8004d2c:	401921fb 	.word	0x401921fb
 8004d30:	00000000 	.word	0x00000000
 8004d34:	4091d000 	.word	0x4091d000
 8004d38:	200000b8 	.word	0x200000b8
 8004d3c:	2000029c 	.word	0x2000029c
 8004d40:	200002f4 	.word	0x200002f4
 8004d44:	20000134 	.word	0x20000134
 8004d48:	200000e0 	.word	0x200000e0
 8004d4c:	20000128 	.word	0x20000128
 8004d50:	2000031c 	.word	0x2000031c
 8004d54:	20000310 	.word	0x20000310

08004d58 <driveWheelTask>:

void driveWheelTask() {
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0

	mecanum.speed.vx = (float) rc.ch4 / 660 * MAX_CHASSIS_VX_SPEED;
 8004d5e:	4b47      	ldr	r3, [pc, #284]	; (8004e7c <driveWheelTask+0x124>)
 8004d60:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004d64:	ee07 3a90 	vmov	s15, r3
 8004d68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d6c:	eddf 6a44 	vldr	s13, [pc, #272]	; 8004e80 <driveWheelTask+0x128>
 8004d70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d74:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8004e84 <driveWheelTask+0x12c>
 8004d78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d7c:	4b42      	ldr	r3, [pc, #264]	; (8004e88 <driveWheelTask+0x130>)
 8004d7e:	edc3 7a05 	vstr	s15, [r3, #20]
	mecanum.speed.vy = -(float) rc.ch3 / 660 * MAX_CHASSIS_VX_SPEED;
 8004d82:	4b3e      	ldr	r3, [pc, #248]	; (8004e7c <driveWheelTask+0x124>)
 8004d84:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004d88:	ee07 3a90 	vmov	s15, r3
 8004d8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d90:	eeb1 7a67 	vneg.f32	s14, s15
 8004d94:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8004e80 <driveWheelTask+0x128>
 8004d98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d9c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8004e84 <driveWheelTask+0x12c>
 8004da0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004da4:	4b38      	ldr	r3, [pc, #224]	; (8004e88 <driveWheelTask+0x130>)
 8004da6:	edc3 7a06 	vstr	s15, [r3, #24]
	mecanum.speed.vw = -(float) rc.ch1 / 660 * MAX_CHASSIS_VW_SPEED;
 8004daa:	4b34      	ldr	r3, [pc, #208]	; (8004e7c <driveWheelTask+0x124>)
 8004dac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004db0:	ee07 3a90 	vmov	s15, r3
 8004db4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004db8:	eeb1 7a67 	vneg.f32	s14, s15
 8004dbc:	eddf 6a30 	vldr	s13, [pc, #192]	; 8004e80 <driveWheelTask+0x128>
 8004dc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004dc4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8004e8c <driveWheelTask+0x134>
 8004dc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dcc:	4b2e      	ldr	r3, [pc, #184]	; (8004e88 <driveWheelTask+0x130>)
 8004dce:	edc3 7a07 	vstr	s15, [r3, #28]

	mecanum_calculate(&mecanum);
 8004dd2:	482d      	ldr	r0, [pc, #180]	; (8004e88 <driveWheelTask+0x130>)
 8004dd4:	f000 fa6c 	bl	80052b0 <mecanum_calculate>

	int16_t u[4];
	for (int i = 0; i < 4; i++) {
 8004dd8:	2300      	movs	r3, #0
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	e043      	b.n	8004e66 <driveWheelTask+0x10e>
		int error = mecanum.wheel_rpm[i] - wheelFdb[i].rpm;
 8004dde:	4a2a      	ldr	r2, [pc, #168]	; (8004e88 <driveWheelTask+0x130>)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	3310      	adds	r3, #16
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	ed93 7a00 	vldr	s14, [r3]
 8004dec:	4928      	ldr	r1, [pc, #160]	; (8004e90 <driveWheelTask+0x138>)
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	4613      	mov	r3, r2
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	4413      	add	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	440b      	add	r3, r1
 8004dfa:	3302      	adds	r3, #2
 8004dfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e00:	ee07 3a90 	vmov	s15, r3
 8004e04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e10:	ee17 3a90 	vmov	r3, s15
 8004e14:	60bb      	str	r3, [r7, #8]
		wheelPID[i].error = error;
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	ee07 3a90 	vmov	s15, r3
 8004e1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e20:	4a1c      	ldr	r2, [pc, #112]	; (8004e94 <driveWheelTask+0x13c>)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	212c      	movs	r1, #44	; 0x2c
 8004e26:	fb01 f303 	mul.w	r3, r1, r3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	3328      	adds	r3, #40	; 0x28
 8004e2e:	edc3 7a00 	vstr	s15, [r3]
		u[i] = (int16_t) pidExecute(&(wheelPID[i]));
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	222c      	movs	r2, #44	; 0x2c
 8004e36:	fb02 f303 	mul.w	r3, r2, r3
 8004e3a:	4a16      	ldr	r2, [pc, #88]	; (8004e94 <driveWheelTask+0x13c>)
 8004e3c:	4413      	add	r3, r2
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 fcf8 	bl	8005834 <pidExecute>
 8004e44:	eef0 7a40 	vmov.f32	s15, s0
 8004e48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e4c:	ee17 3a90 	vmov	r3, s15
 8004e50:	b21a      	sxth	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	f107 0110 	add.w	r1, r7, #16
 8004e5a:	440b      	add	r3, r1
 8004e5c:	f823 2c10 	strh.w	r2, [r3, #-16]
	for (int i = 0; i < 4; i++) {
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	3301      	adds	r3, #1
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2b03      	cmp	r3, #3
 8004e6a:	ddb8      	ble.n	8004dde <driveWheelTask+0x86>
	}
	driveWheel(u);
 8004e6c:	463b      	mov	r3, r7
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 fbec 	bl	800564c <driveWheel>
}
 8004e74:	bf00      	nop
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	20000108 	.word	0x20000108
 8004e80:	44250000 	.word	0x44250000
 8004e84:	454e4000 	.word	0x454e4000
 8004e88:	200002a4 	.word	0x200002a4
 8004e8c:	43960000 	.word	0x43960000
 8004e90:	20000134 	.word	0x20000134
 8004e94:	200001ec 	.word	0x200001ec

08004e98 <initPID>:

void initPID() {
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++) {
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	607b      	str	r3, [r7, #4]
 8004ea2:	e042      	b.n	8004f2a <initPID+0x92>
		wheelPID[i].t = 2.0f;
 8004ea4:	4a25      	ldr	r2, [pc, #148]	; (8004f3c <initPID+0xa4>)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	212c      	movs	r1, #44	; 0x2c
 8004eaa:	fb01 f303 	mul.w	r3, r1, r3
 8004eae:	4413      	add	r3, r2
 8004eb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004eb4:	601a      	str	r2, [r3, #0]
		wheelPID[i].p = 6.5f;
 8004eb6:	4a21      	ldr	r2, [pc, #132]	; (8004f3c <initPID+0xa4>)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	212c      	movs	r1, #44	; 0x2c
 8004ebc:	fb01 f303 	mul.w	r3, r1, r3
 8004ec0:	4413      	add	r3, r2
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	4a1e      	ldr	r2, [pc, #120]	; (8004f40 <initPID+0xa8>)
 8004ec6:	601a      	str	r2, [r3, #0]
		wheelPID[i].i = 50.0f;
 8004ec8:	4a1c      	ldr	r2, [pc, #112]	; (8004f3c <initPID+0xa4>)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	212c      	movs	r1, #44	; 0x2c
 8004ece:	fb01 f303 	mul.w	r3, r1, r3
 8004ed2:	4413      	add	r3, r2
 8004ed4:	3308      	adds	r3, #8
 8004ed6:	4a1b      	ldr	r2, [pc, #108]	; (8004f44 <initPID+0xac>)
 8004ed8:	601a      	str	r2, [r3, #0]
		wheelPID[i].d = 0.0f;
 8004eda:	4a18      	ldr	r2, [pc, #96]	; (8004f3c <initPID+0xa4>)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	212c      	movs	r1, #44	; 0x2c
 8004ee0:	fb01 f303 	mul.w	r3, r1, r3
 8004ee4:	4413      	add	r3, r2
 8004ee6:	330c      	adds	r3, #12
 8004ee8:	f04f 0200 	mov.w	r2, #0
 8004eec:	601a      	str	r2, [r3, #0]
		wheelPID[i].outLimit = 15000.0f;
 8004eee:	4a13      	ldr	r2, [pc, #76]	; (8004f3c <initPID+0xa4>)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	212c      	movs	r1, #44	; 0x2c
 8004ef4:	fb01 f303 	mul.w	r3, r1, r3
 8004ef8:	4413      	add	r3, r2
 8004efa:	3310      	adds	r3, #16
 8004efc:	4a12      	ldr	r2, [pc, #72]	; (8004f48 <initPID+0xb0>)
 8004efe:	601a      	str	r2, [r3, #0]
		wheelPID[i].integralOutLimit = 500.0f;
 8004f00:	4a0e      	ldr	r2, [pc, #56]	; (8004f3c <initPID+0xa4>)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	212c      	movs	r1, #44	; 0x2c
 8004f06:	fb01 f303 	mul.w	r3, r1, r3
 8004f0a:	4413      	add	r3, r2
 8004f0c:	3314      	adds	r3, #20
 8004f0e:	4a0f      	ldr	r2, [pc, #60]	; (8004f4c <initPID+0xb4>)
 8004f10:	601a      	str	r2, [r3, #0]
		wheelPID[i].differentialFilterRate = 0.9f;
 8004f12:	4a0a      	ldr	r2, [pc, #40]	; (8004f3c <initPID+0xa4>)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	212c      	movs	r1, #44	; 0x2c
 8004f18:	fb01 f303 	mul.w	r3, r1, r3
 8004f1c:	4413      	add	r3, r2
 8004f1e:	3318      	adds	r3, #24
 8004f20:	4a0b      	ldr	r2, [pc, #44]	; (8004f50 <initPID+0xb8>)
 8004f22:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3301      	adds	r3, #1
 8004f28:	607b      	str	r3, [r7, #4]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b03      	cmp	r3, #3
 8004f2e:	ddb9      	ble.n	8004ea4 <initPID+0xc>
	}
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	200001ec 	.word	0x200001ec
 8004f40:	40d00000 	.word	0x40d00000
 8004f44:	42480000 	.word	0x42480000
 8004f48:	466a6000 	.word	0x466a6000
 8004f4c:	43fa0000 	.word	0x43fa0000
 8004f50:	3f666666 	.word	0x3f666666

08004f54 <initMecanum>:

void initMecanum() {
 8004f54:	b480      	push	{r7}
 8004f56:	af00      	add	r7, sp, #0
	mecanum.param.wheel_perimeter = PERIMETER;
 8004f58:	4b0a      	ldr	r3, [pc, #40]	; (8004f84 <initMecanum+0x30>)
 8004f5a:	4a0b      	ldr	r2, [pc, #44]	; (8004f88 <initMecanum+0x34>)
 8004f5c:	601a      	str	r2, [r3, #0]
	mecanum.param.wheeltrack = WHEELTRACK;
 8004f5e:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <initMecanum+0x30>)
 8004f60:	4a0a      	ldr	r2, [pc, #40]	; (8004f8c <initMecanum+0x38>)
 8004f62:	605a      	str	r2, [r3, #4]
	mecanum.param.wheelbase = WHEELBASE;
 8004f64:	4b07      	ldr	r3, [pc, #28]	; (8004f84 <initMecanum+0x30>)
 8004f66:	4a0a      	ldr	r2, [pc, #40]	; (8004f90 <initMecanum+0x3c>)
 8004f68:	609a      	str	r2, [r3, #8]
	mecanum.param.rotate_x_offset = 0;
 8004f6a:	4b06      	ldr	r3, [pc, #24]	; (8004f84 <initMecanum+0x30>)
 8004f6c:	f04f 0200 	mov.w	r2, #0
 8004f70:	60da      	str	r2, [r3, #12]
	mecanum.param.rotate_y_offset = 0;
 8004f72:	4b04      	ldr	r3, [pc, #16]	; (8004f84 <initMecanum+0x30>)
 8004f74:	f04f 0200 	mov.w	r2, #0
 8004f78:	611a      	str	r2, [r3, #16]
}
 8004f7a:	bf00      	nop
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr
 8004f84:	200002a4 	.word	0x200002a4
 8004f88:	43ef0000 	.word	0x43ef0000
 8004f8c:	43c50000 	.word	0x43c50000
 8004f90:	43cf8000 	.word	0x43cf8000

08004f94 <initFriction>:

void initFriction() {
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1500);
 8004f9a:	4b1b      	ldr	r3, [pc, #108]	; (8005008 <initFriction+0x74>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004fa2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1500);
 8004fa4:	4b18      	ldr	r3, [pc, #96]	; (8005008 <initFriction+0x74>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004fac:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(3000);
 8004fae:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004fb2:	f7fb ff7d 	bl	8000eb0 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1220);
 8004fb6:	4b14      	ldr	r3, [pc, #80]	; (8005008 <initFriction+0x74>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8004fbe:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1220);
 8004fc0:	4b11      	ldr	r3, [pc, #68]	; (8005008 <initFriction+0x74>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8004fc8:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(5000);
 8004fca:	f241 3088 	movw	r0, #5000	; 0x1388
 8004fce:	f7fb ff6f 	bl	8000eb0 <HAL_Delay>
	for (int i = 1220; i < 1400; i++) {
 8004fd2:	f240 43c4 	movw	r3, #1220	; 0x4c4
 8004fd6:	607b      	str	r3, [r7, #4]
 8004fd8:	e00d      	b.n	8004ff6 <initFriction+0x62>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);
 8004fda:	4b0b      	ldr	r3, [pc, #44]	; (8005008 <initFriction+0x74>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, i);
 8004fe2:	4b09      	ldr	r3, [pc, #36]	; (8005008 <initFriction+0x74>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(30);
 8004fea:	201e      	movs	r0, #30
 8004fec:	f7fb ff60 	bl	8000eb0 <HAL_Delay>
	for (int i = 1220; i < 1400; i++) {
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	607b      	str	r3, [r7, #4]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8004ffc:	dbed      	blt.n	8004fda <initFriction+0x46>
	}
}
 8004ffe:	bf00      	nop
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	20000408 	.word	0x20000408

0800500c <initLoadPID>:

void initLoadPID() {
 800500c:	b480      	push	{r7}
 800500e:	af00      	add	r7, sp, #0
	loadPID.t = 2.0f;
 8005010:	4b0d      	ldr	r3, [pc, #52]	; (8005048 <initLoadPID+0x3c>)
 8005012:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005016:	601a      	str	r2, [r3, #0]
	loadPID.p = 10.0f;
 8005018:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <initLoadPID+0x3c>)
 800501a:	4a0c      	ldr	r2, [pc, #48]	; (800504c <initLoadPID+0x40>)
 800501c:	605a      	str	r2, [r3, #4]
	loadPID.i = 0.1f*500;
 800501e:	4b0a      	ldr	r3, [pc, #40]	; (8005048 <initLoadPID+0x3c>)
 8005020:	4a0b      	ldr	r2, [pc, #44]	; (8005050 <initLoadPID+0x44>)
 8005022:	609a      	str	r2, [r3, #8]
	loadPID.d = 0.07f;
 8005024:	4b08      	ldr	r3, [pc, #32]	; (8005048 <initLoadPID+0x3c>)
 8005026:	4a0b      	ldr	r2, [pc, #44]	; (8005054 <initLoadPID+0x48>)
 8005028:	60da      	str	r2, [r3, #12]
	loadPID.outLimit = 30000.0f;
 800502a:	4b07      	ldr	r3, [pc, #28]	; (8005048 <initLoadPID+0x3c>)
 800502c:	4a0a      	ldr	r2, [pc, #40]	; (8005058 <initLoadPID+0x4c>)
 800502e:	611a      	str	r2, [r3, #16]
	loadPID.integralOutLimit = 10000.0f;
 8005030:	4b05      	ldr	r3, [pc, #20]	; (8005048 <initLoadPID+0x3c>)
 8005032:	4a0a      	ldr	r2, [pc, #40]	; (800505c <initLoadPID+0x50>)
 8005034:	615a      	str	r2, [r3, #20]
	loadPID.differentialFilterRate = 0.9f;
 8005036:	4b04      	ldr	r3, [pc, #16]	; (8005048 <initLoadPID+0x3c>)
 8005038:	4a09      	ldr	r2, [pc, #36]	; (8005060 <initLoadPID+0x54>)
 800503a:	619a      	str	r2, [r3, #24]
}
 800503c:	bf00      	nop
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	20000340 	.word	0x20000340
 800504c:	41200000 	.word	0x41200000
 8005050:	42480000 	.word	0x42480000
 8005054:	3d8f5c29 	.word	0x3d8f5c29
 8005058:	46ea6000 	.word	0x46ea6000
 800505c:	461c4000 	.word	0x461c4000
 8005060:	3f666666 	.word	0x3f666666
 8005064:	00000000 	.word	0x00000000

08005068 <Gimbal_Task>:


void Gimbal_Task(){
 8005068:	b590      	push	{r4, r7, lr}
 800506a:	b087      	sub	sp, #28
 800506c:	af02      	add	r7, sp, #8
	int fire = 0;
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
	int16_t u[4];
	if (rc.sw2 == 1) {
 8005072:	4b7b      	ldr	r3, [pc, #492]	; (8005260 <Gimbal_Task+0x1f8>)
 8005074:	7adb      	ldrb	r3, [r3, #11]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d102      	bne.n	8005080 <Gimbal_Task+0x18>
		fire = 1;
 800507a:	2301      	movs	r3, #1
 800507c:	60fb      	str	r3, [r7, #12]
 800507e:	e001      	b.n	8005084 <Gimbal_Task+0x1c>
	} else {
		fire = 0;
 8005080:	2300      	movs	r3, #0
 8005082:	60fb      	str	r3, [r7, #12]
	}
	DBUFF[1] = loadPID.error = -900.0f*fire - loadMotorFdb.rpm;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	ee07 3a90 	vmov	s15, r3
 800508a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800508e:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8005264 <Gimbal_Task+0x1fc>
 8005092:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005096:	4b74      	ldr	r3, [pc, #464]	; (8005268 <Gimbal_Task+0x200>)
 8005098:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800509c:	ee07 3a90 	vmov	s15, r3
 80050a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050a8:	4b70      	ldr	r3, [pc, #448]	; (800526c <Gimbal_Task+0x204>)
 80050aa:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 80050ae:	4b6f      	ldr	r3, [pc, #444]	; (800526c <Gimbal_Task+0x204>)
 80050b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b2:	4a6f      	ldr	r2, [pc, #444]	; (8005270 <Gimbal_Task+0x208>)
 80050b4:	6053      	str	r3, [r2, #4]
	DBUFF[3] = u[2] = pidExecute(&loadPID);
 80050b6:	486d      	ldr	r0, [pc, #436]	; (800526c <Gimbal_Task+0x204>)
 80050b8:	f000 fbbc 	bl	8005834 <pidExecute>
 80050bc:	eef0 7a40 	vmov.f32	s15, s0
 80050c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050c4:	ee17 3a90 	vmov	r3, s15
 80050c8:	b21b      	sxth	r3, r3
 80050ca:	813b      	strh	r3, [r7, #8]
 80050cc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80050d0:	ee07 3a90 	vmov	s15, r3
 80050d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050d8:	4b65      	ldr	r3, [pc, #404]	; (8005270 <Gimbal_Task+0x208>)
 80050da:	edc3 7a03 	vstr	s15, [r3, #12]

	target_yaw =(float) rc.ch1 / 660 * 70;
 80050de:	4b60      	ldr	r3, [pc, #384]	; (8005260 <Gimbal_Task+0x1f8>)
 80050e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050e4:	ee07 3a90 	vmov	s15, r3
 80050e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050ec:	eddf 6a61 	vldr	s13, [pc, #388]	; 8005274 <Gimbal_Task+0x20c>
 80050f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050f4:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8005278 <Gimbal_Task+0x210>
 80050f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005100:	ee17 3a90 	vmov	r3, s15
 8005104:	b21a      	sxth	r2, r3
 8005106:	4b5d      	ldr	r3, [pc, #372]	; (800527c <Gimbal_Task+0x214>)
 8005108:	801a      	strh	r2, [r3, #0]
	yaw_now=(float)((gimbalYawFdb.angle-4096.0)/8191.0*360.0);
 800510a:	4b5d      	ldr	r3, [pc, #372]	; (8005280 <Gimbal_Task+0x218>)
 800510c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005110:	4618      	mov	r0, r3
 8005112:	f7fb fa0f 	bl	8000534 <__aeabi_i2d>
 8005116:	f04f 0200 	mov.w	r2, #0
 800511a:	4b5a      	ldr	r3, [pc, #360]	; (8005284 <Gimbal_Task+0x21c>)
 800511c:	f7fb f8bc 	bl	8000298 <__aeabi_dsub>
 8005120:	4603      	mov	r3, r0
 8005122:	460c      	mov	r4, r1
 8005124:	4618      	mov	r0, r3
 8005126:	4621      	mov	r1, r4
 8005128:	a34b      	add	r3, pc, #300	; (adr r3, 8005258 <Gimbal_Task+0x1f0>)
 800512a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512e:	f7fb fb95 	bl	800085c <__aeabi_ddiv>
 8005132:	4603      	mov	r3, r0
 8005134:	460c      	mov	r4, r1
 8005136:	4618      	mov	r0, r3
 8005138:	4621      	mov	r1, r4
 800513a:	f04f 0200 	mov.w	r2, #0
 800513e:	4b52      	ldr	r3, [pc, #328]	; (8005288 <Gimbal_Task+0x220>)
 8005140:	f7fb fa62 	bl	8000608 <__aeabi_dmul>
 8005144:	4603      	mov	r3, r0
 8005146:	460c      	mov	r4, r1
 8005148:	4618      	mov	r0, r3
 800514a:	4621      	mov	r1, r4
 800514c:	f7fb fc6e 	bl	8000a2c <__aeabi_d2f>
 8005150:	ee07 0a90 	vmov	s15, r0
 8005154:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005158:	ee17 3a90 	vmov	r3, s15
 800515c:	b21a      	sxth	r2, r3
 800515e:	4b4b      	ldr	r3, [pc, #300]	; (800528c <Gimbal_Task+0x224>)
 8005160:	801a      	strh	r2, [r3, #0]
	u[0]=map(target_yaw-yaw_now, -180, 180, -30000, 30000);
 8005162:	4b46      	ldr	r3, [pc, #280]	; (800527c <Gimbal_Task+0x214>)
 8005164:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005168:	461a      	mov	r2, r3
 800516a:	4b48      	ldr	r3, [pc, #288]	; (800528c <Gimbal_Task+0x224>)
 800516c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005170:	1ad0      	subs	r0, r2, r3
 8005172:	f247 5330 	movw	r3, #30000	; 0x7530
 8005176:	9300      	str	r3, [sp, #0]
 8005178:	4b45      	ldr	r3, [pc, #276]	; (8005290 <Gimbal_Task+0x228>)
 800517a:	22b4      	movs	r2, #180	; 0xb4
 800517c:	f06f 01b3 	mvn.w	r1, #179	; 0xb3
 8005180:	f7ff fa4e 	bl	8004620 <map>
 8005184:	4603      	mov	r3, r0
 8005186:	b21b      	sxth	r3, r3
 8005188:	80bb      	strh	r3, [r7, #4]

	target_pich=(float) rc.ch2 / 660 * (-30);
 800518a:	4b35      	ldr	r3, [pc, #212]	; (8005260 <Gimbal_Task+0x1f8>)
 800518c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005190:	ee07 3a90 	vmov	s15, r3
 8005194:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005198:	eddf 6a36 	vldr	s13, [pc, #216]	; 8005274 <Gimbal_Task+0x20c>
 800519c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051a0:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 80051a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051ac:	ee17 3a90 	vmov	r3, s15
 80051b0:	b21a      	sxth	r2, r3
 80051b2:	4b38      	ldr	r3, [pc, #224]	; (8005294 <Gimbal_Task+0x22c>)
 80051b4:	801a      	strh	r2, [r3, #0]
	pich_now=(float)((gimbalPitchFdb.angle-4096.0)/8191.0*360.0)+24;
 80051b6:	4b38      	ldr	r3, [pc, #224]	; (8005298 <Gimbal_Task+0x230>)
 80051b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fb f9b9 	bl	8000534 <__aeabi_i2d>
 80051c2:	f04f 0200 	mov.w	r2, #0
 80051c6:	4b2f      	ldr	r3, [pc, #188]	; (8005284 <Gimbal_Task+0x21c>)
 80051c8:	f7fb f866 	bl	8000298 <__aeabi_dsub>
 80051cc:	4603      	mov	r3, r0
 80051ce:	460c      	mov	r4, r1
 80051d0:	4618      	mov	r0, r3
 80051d2:	4621      	mov	r1, r4
 80051d4:	a320      	add	r3, pc, #128	; (adr r3, 8005258 <Gimbal_Task+0x1f0>)
 80051d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051da:	f7fb fb3f 	bl	800085c <__aeabi_ddiv>
 80051de:	4603      	mov	r3, r0
 80051e0:	460c      	mov	r4, r1
 80051e2:	4618      	mov	r0, r3
 80051e4:	4621      	mov	r1, r4
 80051e6:	f04f 0200 	mov.w	r2, #0
 80051ea:	4b27      	ldr	r3, [pc, #156]	; (8005288 <Gimbal_Task+0x220>)
 80051ec:	f7fb fa0c 	bl	8000608 <__aeabi_dmul>
 80051f0:	4603      	mov	r3, r0
 80051f2:	460c      	mov	r4, r1
 80051f4:	4618      	mov	r0, r3
 80051f6:	4621      	mov	r1, r4
 80051f8:	f7fb fc18 	bl	8000a2c <__aeabi_d2f>
 80051fc:	ee07 0a10 	vmov	s14, r0
 8005200:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
 8005204:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005208:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800520c:	ee17 3a90 	vmov	r3, s15
 8005210:	b21a      	sxth	r2, r3
 8005212:	4b22      	ldr	r3, [pc, #136]	; (800529c <Gimbal_Task+0x234>)
 8005214:	801a      	strh	r2, [r3, #0]
	u[1]=map(target_pich-pich_now, -30, 20, -15000, 15000);
 8005216:	4b1f      	ldr	r3, [pc, #124]	; (8005294 <Gimbal_Task+0x22c>)
 8005218:	f9b3 3000 	ldrsh.w	r3, [r3]
 800521c:	461a      	mov	r2, r3
 800521e:	4b1f      	ldr	r3, [pc, #124]	; (800529c <Gimbal_Task+0x234>)
 8005220:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005224:	1ad0      	subs	r0, r2, r3
 8005226:	f643 2398 	movw	r3, #15000	; 0x3a98
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	4b1c      	ldr	r3, [pc, #112]	; (80052a0 <Gimbal_Task+0x238>)
 800522e:	2214      	movs	r2, #20
 8005230:	f06f 011d 	mvn.w	r1, #29
 8005234:	f7ff f9f4 	bl	8004620 <map>
 8005238:	4603      	mov	r3, r0
 800523a:	b21b      	sxth	r3, r3
 800523c:	80fb      	strh	r3, [r7, #6]


	u[3]=0;
 800523e:	2300      	movs	r3, #0
 8005240:	817b      	strh	r3, [r7, #10]
	driveGimbalMotors(u);
 8005242:	1d3b      	adds	r3, r7, #4
 8005244:	4618      	mov	r0, r3
 8005246:	f000 fa79 	bl	800573c <driveGimbalMotors>
}
 800524a:	bf00      	nop
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	bd90      	pop	{r4, r7, pc}
 8005252:	bf00      	nop
 8005254:	f3af 8000 	nop.w
 8005258:	00000000 	.word	0x00000000
 800525c:	40bfff00 	.word	0x40bfff00
 8005260:	20000108 	.word	0x20000108
 8005264:	c4610000 	.word	0xc4610000
 8005268:	20000310 	.word	0x20000310
 800526c:	20000340 	.word	0x20000340
 8005270:	2000016c 	.word	0x2000016c
 8005274:	44250000 	.word	0x44250000
 8005278:	428c0000 	.word	0x428c0000
 800527c:	20000328 	.word	0x20000328
 8005280:	20000128 	.word	0x20000128
 8005284:	40b00000 	.word	0x40b00000
 8005288:	40768000 	.word	0x40768000
 800528c:	2000033e 	.word	0x2000033e
 8005290:	ffff8ad0 	.word	0xffff8ad0
 8005294:	20000164 	.word	0x20000164
 8005298:	2000031c 	.word	0x2000031c
 800529c:	2000036c 	.word	0x2000036c
 80052a0:	ffffc568 	.word	0xffffc568

080052a4 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80052ae:	e7fe      	b.n	80052ae <_Error_Handler+0xa>

080052b0 <mecanum_calculate>:
  * @param input : ccx=+vx(mm/s)  ccy=+vy(mm/s)  ccw=+vw(deg/s)
  *        output: every wheel speed(rpm)
  * @note  1=FR 2=FL 3=BL 4=BR
  */
void mecanum_calculate(struct mecanum *mec)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b08a      	sub	sp, #40	; 0x28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  static float rotate_ratio_fl;
  static float rotate_ratio_bl;
  static float rotate_ratio_br;
  static float wheel_rpm_ratio;

  rotate_ratio_fr = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	ed93 7a02 	vldr	s14, [r3, #8]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80052c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052c8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80052cc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80052d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	edd3 7a04 	vldr	s15, [r3, #16]
 80052e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80052e4:	eddf 6ac8 	vldr	s13, [pc, #800]	; 8005608 <mecanum_calculate+0x358>
 80052e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80052ec:	4bc7      	ldr	r3, [pc, #796]	; (800560c <mecanum_calculate+0x35c>)
 80052ee:	edc3 7a00 	vstr	s15, [r3]
  rotate_ratio_fl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset - mec->param.rotate_y_offset) / RADIAN_COEF;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	ed93 7a02 	vldr	s14, [r3, #8]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80052fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005302:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005306:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005310:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	edd3 7a04 	vldr	s15, [r3, #16]
 800531a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800531e:	eddf 6aba 	vldr	s13, [pc, #744]	; 8005608 <mecanum_calculate+0x358>
 8005322:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005326:	4bba      	ldr	r3, [pc, #744]	; (8005610 <mecanum_calculate+0x360>)
 8005328:	edc3 7a00 	vstr	s15, [r3]
  rotate_ratio_bl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f + mec->param.rotate_x_offset - mec->param.rotate_y_offset) / RADIAN_COEF;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	ed93 7a02 	vldr	s14, [r3, #8]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	edd3 7a01 	vldr	s15, [r3, #4]
 8005338:	ee77 7a27 	vadd.f32	s15, s14, s15
 800533c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005340:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	edd3 7a03 	vldr	s15, [r3, #12]
 800534a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	edd3 7a04 	vldr	s15, [r3, #16]
 8005354:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005358:	eddf 6aab 	vldr	s13, [pc, #684]	; 8005608 <mecanum_calculate+0x358>
 800535c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005360:	4bac      	ldr	r3, [pc, #688]	; (8005614 <mecanum_calculate+0x364>)
 8005362:	edc3 7a00 	vstr	s15, [r3]
  rotate_ratio_br = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f + mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	ed93 7a02 	vldr	s14, [r3, #8]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005372:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005376:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800537a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	edd3 7a03 	vldr	s15, [r3, #12]
 8005384:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	edd3 7a04 	vldr	s15, [r3, #16]
 800538e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005392:	eddf 6a9d 	vldr	s13, [pc, #628]	; 8005608 <mecanum_calculate+0x358>
 8005396:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800539a:	4b9f      	ldr	r3, [pc, #636]	; (8005618 <mecanum_calculate+0x368>)
 800539c:	edc3 7a00 	vstr	s15, [r3]

  wheel_rpm_ratio = 60.0f / (mec->param.wheel_perimeter * MOTOR_DECELE_RATIO);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	edd3 7a00 	vldr	s15, [r3]
 80053a6:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 800561c <mecanum_calculate+0x36c>
 80053aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80053ae:	eddf 6a9c 	vldr	s13, [pc, #624]	; 8005620 <mecanum_calculate+0x370>
 80053b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053b6:	4b9b      	ldr	r3, [pc, #620]	; (8005624 <mecanum_calculate+0x374>)
 80053b8:	edc3 7a00 	vstr	s15, [r3]

  MEC_VAL_LIMIT(mec->speed.vx, -MAX_CHASSIS_VX_SPEED, MAX_CHASSIS_VX_SPEED); //mm/s
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	edd3 7a05 	vldr	s15, [r3, #20]
 80053c2:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8005628 <mecanum_calculate+0x378>
 80053c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ce:	d803      	bhi.n	80053d8 <mecanum_calculate+0x128>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a96      	ldr	r2, [pc, #600]	; (800562c <mecanum_calculate+0x37c>)
 80053d4:	615a      	str	r2, [r3, #20]
 80053d6:	e00c      	b.n	80053f2 <mecanum_calculate+0x142>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	edd3 7a05 	vldr	s15, [r3, #20]
 80053de:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8005630 <mecanum_calculate+0x380>
 80053e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ea:	db02      	blt.n	80053f2 <mecanum_calculate+0x142>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a91      	ldr	r2, [pc, #580]	; (8005634 <mecanum_calculate+0x384>)
 80053f0:	615a      	str	r2, [r3, #20]
  MEC_VAL_LIMIT(mec->speed.vy, -MAX_CHASSIS_VY_SPEED, MAX_CHASSIS_VY_SPEED); //mm/s
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	edd3 7a06 	vldr	s15, [r3, #24]
 80053f8:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8005628 <mecanum_calculate+0x378>
 80053fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005404:	d803      	bhi.n	800540e <mecanum_calculate+0x15e>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a88      	ldr	r2, [pc, #544]	; (800562c <mecanum_calculate+0x37c>)
 800540a:	619a      	str	r2, [r3, #24]
 800540c:	e00c      	b.n	8005428 <mecanum_calculate+0x178>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	edd3 7a06 	vldr	s15, [r3, #24]
 8005414:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8005630 <mecanum_calculate+0x380>
 8005418:	eef4 7ac7 	vcmpe.f32	s15, s14
 800541c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005420:	db02      	blt.n	8005428 <mecanum_calculate+0x178>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a83      	ldr	r2, [pc, #524]	; (8005634 <mecanum_calculate+0x384>)
 8005426:	619a      	str	r2, [r3, #24]
  MEC_VAL_LIMIT(mec->speed.vw, -MAX_CHASSIS_VW_SPEED, MAX_CHASSIS_VW_SPEED); //deg/s
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	edd3 7a07 	vldr	s15, [r3, #28]
 800542e:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8005638 <mecanum_calculate+0x388>
 8005432:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800543a:	d803      	bhi.n	8005444 <mecanum_calculate+0x194>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a7f      	ldr	r2, [pc, #508]	; (800563c <mecanum_calculate+0x38c>)
 8005440:	61da      	str	r2, [r3, #28]
 8005442:	e00c      	b.n	800545e <mecanum_calculate+0x1ae>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	edd3 7a07 	vldr	s15, [r3, #28]
 800544a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8005640 <mecanum_calculate+0x390>
 800544e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005456:	db02      	blt.n	800545e <mecanum_calculate+0x1ae>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a7a      	ldr	r2, [pc, #488]	; (8005644 <mecanum_calculate+0x394>)
 800545c:	61da      	str	r2, [r3, #28]

  float wheel_rpm[4];
  float max = 0;
 800545e:	f04f 0300 	mov.w	r3, #0
 8005462:	627b      	str	r3, [r7, #36]	; 0x24

  wheel_rpm[0] = (-mec->speed.vx - mec->speed.vy - mec->speed.vw * rotate_ratio_fr) * wheel_rpm_ratio;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	edd3 7a05 	vldr	s15, [r3, #20]
 800546a:	eeb1 7a67 	vneg.f32	s14, s15
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	edd3 7a06 	vldr	s15, [r3, #24]
 8005474:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	edd3 6a07 	vldr	s13, [r3, #28]
 800547e:	4b63      	ldr	r3, [pc, #396]	; (800560c <mecanum_calculate+0x35c>)
 8005480:	edd3 7a00 	vldr	s15, [r3]
 8005484:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005488:	ee37 7a67 	vsub.f32	s14, s14, s15
 800548c:	4b65      	ldr	r3, [pc, #404]	; (8005624 <mecanum_calculate+0x374>)
 800548e:	edd3 7a00 	vldr	s15, [r3]
 8005492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005496:	edc7 7a03 	vstr	s15, [r7, #12]
  wheel_rpm[1] = (mec->speed.vx - mec->speed.vy - mec->speed.vw * rotate_ratio_fl) * wheel_rpm_ratio;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	ed93 7a05 	vldr	s14, [r3, #20]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80054a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	edd3 6a07 	vldr	s13, [r3, #28]
 80054b0:	4b57      	ldr	r3, [pc, #348]	; (8005610 <mecanum_calculate+0x360>)
 80054b2:	edd3 7a00 	vldr	s15, [r3]
 80054b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80054be:	4b59      	ldr	r3, [pc, #356]	; (8005624 <mecanum_calculate+0x374>)
 80054c0:	edd3 7a00 	vldr	s15, [r3]
 80054c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054c8:	edc7 7a04 	vstr	s15, [r7, #16]
  wheel_rpm[2] = (mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_bl) * wheel_rpm_ratio;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	ed93 7a05 	vldr	s14, [r3, #20]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	edd3 7a06 	vldr	s15, [r3, #24]
 80054d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	edd3 6a07 	vldr	s13, [r3, #28]
 80054e2:	4b4c      	ldr	r3, [pc, #304]	; (8005614 <mecanum_calculate+0x364>)
 80054e4:	edd3 7a00 	vldr	s15, [r3]
 80054e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80054f0:	4b4c      	ldr	r3, [pc, #304]	; (8005624 <mecanum_calculate+0x374>)
 80054f2:	edd3 7a00 	vldr	s15, [r3]
 80054f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054fa:	edc7 7a05 	vstr	s15, [r7, #20]
  wheel_rpm[3] = (-mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_br) * wheel_rpm_ratio;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	ed93 7a06 	vldr	s14, [r3, #24]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	edd3 7a05 	vldr	s15, [r3, #20]
 800550a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	edd3 6a07 	vldr	s13, [r3, #28]
 8005514:	4b40      	ldr	r3, [pc, #256]	; (8005618 <mecanum_calculate+0x368>)
 8005516:	edd3 7a00 	vldr	s15, [r3]
 800551a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800551e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005522:	4b40      	ldr	r3, [pc, #256]	; (8005624 <mecanum_calculate+0x374>)
 8005524:	edd3 7a00 	vldr	s15, [r3]
 8005528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800552c:	edc7 7a06 	vstr	s15, [r7, #24]

  //find max item
  for (uint8_t i = 0; i < 4; i++)
 8005530:	2300      	movs	r3, #0
 8005532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005536:	e023      	b.n	8005580 <mecanum_calculate+0x2d0>
  {
    if (fabs(wheel_rpm[i]) > max)
 8005538:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005542:	4413      	add	r3, r2
 8005544:	3b1c      	subs	r3, #28
 8005546:	edd3 7a00 	vldr	s15, [r3]
 800554a:	eef0 7ae7 	vabs.f32	s15, s15
 800554e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005552:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800555a:	d50c      	bpl.n	8005576 <mecanum_calculate+0x2c6>
      max = fabs(wheel_rpm[i]);
 800555c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005566:	4413      	add	r3, r2
 8005568:	3b1c      	subs	r3, #28
 800556a:	edd3 7a00 	vldr	s15, [r3]
 800556e:	eef0 7ae7 	vabs.f32	s15, s15
 8005572:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint8_t i = 0; i < 4; i++)
 8005576:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800557a:	3301      	adds	r3, #1
 800557c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005580:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005584:	2b03      	cmp	r3, #3
 8005586:	d9d7      	bls.n	8005538 <mecanum_calculate+0x288>
  }

  //equal proportion
  if (max > MAX_WHEEL_RPM)
 8005588:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800558c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8005648 <mecanum_calculate+0x398>
 8005590:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005598:	dd2a      	ble.n	80055f0 <mecanum_calculate+0x340>
  {
    float rate = MAX_WHEEL_RPM / max;
 800559a:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8005648 <mecanum_calculate+0x398>
 800559e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80055a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055a6:	edc7 7a07 	vstr	s15, [r7, #28]
    for (uint8_t i = 0; i < 4; i++)
 80055aa:	2300      	movs	r3, #0
 80055ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80055b0:	e01a      	b.n	80055e8 <mecanum_calculate+0x338>
      wheel_rpm[i] *= rate;
 80055b2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80055bc:	4413      	add	r3, r2
 80055be:	3b1c      	subs	r3, #28
 80055c0:	ed93 7a00 	vldr	s14, [r3]
 80055c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80055c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80055cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80055d6:	4413      	add	r3, r2
 80055d8:	3b1c      	subs	r3, #28
 80055da:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t i = 0; i < 4; i++)
 80055de:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80055e2:	3301      	adds	r3, #1
 80055e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80055e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80055ec:	2b03      	cmp	r3, #3
 80055ee:	d9e0      	bls.n	80055b2 <mecanum_calculate+0x302>
  }
  memcpy(mec->wheel_rpm, wheel_rpm, 4 * sizeof(float));
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	3340      	adds	r3, #64	; 0x40
 80055f4:	f107 010c 	add.w	r1, r7, #12
 80055f8:	2210      	movs	r2, #16
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 ff54 	bl	80064a8 <memcpy>
}
 8005600:	bf00      	nop
 8005602:	3728      	adds	r7, #40	; 0x28
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	42653333 	.word	0x42653333
 800560c:	20000094 	.word	0x20000094
 8005610:	20000098 	.word	0x20000098
 8005614:	2000009c 	.word	0x2000009c
 8005618:	200000a0 	.word	0x200000a0
 800561c:	3d579436 	.word	0x3d579436
 8005620:	42700000 	.word	0x42700000
 8005624:	200000a4 	.word	0x200000a4
 8005628:	c54e4000 	.word	0xc54e4000
 800562c:	c54e4000 	.word	0xc54e4000
 8005630:	454e4000 	.word	0x454e4000
 8005634:	454e4000 	.word	0x454e4000
 8005638:	c3960000 	.word	0xc3960000
 800563c:	c3960000 	.word	0xc3960000
 8005640:	43960000 	.word	0x43960000
 8005644:	43960000 	.word	0x43960000
 8005648:	4604d000 	.word	0x4604d000

0800564c <driveWheel>:
 */
#include "motor.h"

const int CaseMotor_MaxSpeed = 30 * 256;

void driveWheel(int16_t *u) {
 800564c:	b580      	push	{r7, lr}
 800564e:	b08c      	sub	sp, #48	; 0x30
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef header;
	uint8_t TxData[8] = { 0 };
 8005654:	f107 030c 	add.w	r3, r7, #12
 8005658:	2200      	movs	r2, #0
 800565a:	601a      	str	r2, [r3, #0]
 800565c:	605a      	str	r2, [r3, #4]
	uint32_t TxMailbox;

	header.StdId = 0x200;
 800565e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005662:	617b      	str	r3, [r7, #20]
	header.RTR = CAN_RTR_DATA;
 8005664:	2300      	movs	r3, #0
 8005666:	623b      	str	r3, [r7, #32]
	header.IDE = CAN_ID_STD;
 8005668:	2300      	movs	r3, #0
 800566a:	61fb      	str	r3, [r7, #28]
	header.DLC = 8;
 800566c:	2308      	movs	r3, #8
 800566e:	627b      	str	r3, [r7, #36]	; 0x24
	//header.TransmitGlobalTime = DISABLE;

	for (int i = 0; i < 4; i++) {
 8005670:	2300      	movs	r3, #0
 8005672:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005674:	e050      	b.n	8005718 <driveWheel+0xcc>
		if (CaseMotor_MaxSpeed < u[i]) {
 8005676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	4413      	add	r3, r2
 800567e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005682:	461a      	mov	r2, r3
 8005684:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8005688:	429a      	cmp	r2, r3
 800568a:	dd0b      	ble.n	80056a4 <driveWheel+0x58>
			u[i] = CaseMotor_MaxSpeed - 1;
 800568c:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8005690:	b29b      	uxth	r3, r3
 8005692:	3b01      	subs	r3, #1
 8005694:	b299      	uxth	r1, r3
 8005696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	4413      	add	r3, r2
 800569e:	b20a      	sxth	r2, r1
 80056a0:	801a      	strh	r2, [r3, #0]
 80056a2:	e017      	b.n	80056d4 <driveWheel+0x88>
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 80056a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	4413      	add	r3, r2
 80056ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056b0:	461a      	mov	r2, r3
 80056b2:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80056b6:	425b      	negs	r3, r3
 80056b8:	429a      	cmp	r2, r3
 80056ba:	da0b      	bge.n	80056d4 <driveWheel+0x88>
			u[i] = -CaseMotor_MaxSpeed + 1;
 80056bc:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	f1c3 0301 	rsb	r3, r3, #1
 80056c6:	b299      	uxth	r1, r3
 80056c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ca:	005b      	lsls	r3, r3, #1
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	4413      	add	r3, r2
 80056d0:	b20a      	sxth	r2, r1
 80056d2:	801a      	strh	r2, [r3, #0]
		}
		TxData[i * 2] = u[i] >> 8;
 80056d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d6:	005b      	lsls	r3, r3, #1
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	4413      	add	r3, r2
 80056dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056e0:	121b      	asrs	r3, r3, #8
 80056e2:	b21a      	sxth	r2, r3
 80056e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e6:	005b      	lsls	r3, r3, #1
 80056e8:	b2d2      	uxtb	r2, r2
 80056ea:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80056ee:	440b      	add	r3, r1
 80056f0:	f803 2c24 	strb.w	r2, [r3, #-36]
		TxData[i * 2 + 1] = u[i] & 0xFF;
 80056f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f6:	005b      	lsls	r3, r3, #1
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	4413      	add	r3, r2
 80056fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005702:	005b      	lsls	r3, r3, #1
 8005704:	3301      	adds	r3, #1
 8005706:	b2d2      	uxtb	r2, r2
 8005708:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800570c:	440b      	add	r3, r1
 800570e:	f803 2c24 	strb.w	r2, [r3, #-36]
	for (int i = 0; i < 4; i++) {
 8005712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005714:	3301      	adds	r3, #1
 8005716:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571a:	2b03      	cmp	r3, #3
 800571c:	ddab      	ble.n	8005676 <driveWheel+0x2a>
	}

	HAL_CAN_AddTxMessage(&hcan2, &header, TxData, &TxMailbox);
 800571e:	f107 0308 	add.w	r3, r7, #8
 8005722:	f107 020c 	add.w	r2, r7, #12
 8005726:	f107 0114 	add.w	r1, r7, #20
 800572a:	4803      	ldr	r0, [pc, #12]	; (8005738 <driveWheel+0xec>)
 800572c:	f7fb fe02 	bl	8001334 <HAL_CAN_AddTxMessage>

}
 8005730:	bf00      	nop
 8005732:	3730      	adds	r7, #48	; 0x30
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	200000b8 	.word	0x200000b8

0800573c <driveGimbalMotors>:

void driveGimbalMotors(int16_t *u) {
 800573c:	b580      	push	{r7, lr}
 800573e:	b08c      	sub	sp, #48	; 0x30
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef header;
	uint8_t TxData[8] = { 0 };
 8005744:	f107 030c 	add.w	r3, r7, #12
 8005748:	2200      	movs	r2, #0
 800574a:	601a      	str	r2, [r3, #0]
 800574c:	605a      	str	r2, [r3, #4]
	uint32_t TxMailbox;

	header.StdId = 0x1ff;
 800574e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8005752:	617b      	str	r3, [r7, #20]
	header.RTR = CAN_RTR_DATA;
 8005754:	2300      	movs	r3, #0
 8005756:	623b      	str	r3, [r7, #32]
	header.IDE = CAN_ID_STD;
 8005758:	2300      	movs	r3, #0
 800575a:	61fb      	str	r3, [r7, #28]
	header.DLC = 8;
 800575c:	2308      	movs	r3, #8
 800575e:	627b      	str	r3, [r7, #36]	; 0x24
	//header.TransmitGlobalTime = DISABLE;

	for (int i = 0; i < 4; i++) {
 8005760:	2300      	movs	r3, #0
 8005762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005764:	e053      	b.n	800580e <driveGimbalMotors+0xd2>
		if(i==2){
 8005766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005768:	2b02      	cmp	r3, #2
 800576a:	d12e      	bne.n	80057ca <driveGimbalMotors+0x8e>
		if (CaseMotor_MaxSpeed < u[i]) {
 800576c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	4413      	add	r3, r2
 8005774:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005778:	461a      	mov	r2, r3
 800577a:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800577e:	429a      	cmp	r2, r3
 8005780:	dd0b      	ble.n	800579a <driveGimbalMotors+0x5e>
			u[i] = CaseMotor_MaxSpeed - 1;
 8005782:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8005786:	b29b      	uxth	r3, r3
 8005788:	3b01      	subs	r3, #1
 800578a:	b299      	uxth	r1, r3
 800578c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	4413      	add	r3, r2
 8005794:	b20a      	sxth	r2, r1
 8005796:	801a      	strh	r2, [r3, #0]
 8005798:	e017      	b.n	80057ca <driveGimbalMotors+0x8e>
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 800579a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	4413      	add	r3, r2
 80057a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057a6:	461a      	mov	r2, r3
 80057a8:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80057ac:	425b      	negs	r3, r3
 80057ae:	429a      	cmp	r2, r3
 80057b0:	da0b      	bge.n	80057ca <driveGimbalMotors+0x8e>
			u[i] = -CaseMotor_MaxSpeed + 1;
 80057b2:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	f1c3 0301 	rsb	r3, r3, #1
 80057bc:	b299      	uxth	r1, r3
 80057be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	4413      	add	r3, r2
 80057c6:	b20a      	sxth	r2, r1
 80057c8:	801a      	strh	r2, [r3, #0]
		}
		}
		TxData[i * 2] = u[i] >> 8;
 80057ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057cc:	005b      	lsls	r3, r3, #1
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	4413      	add	r3, r2
 80057d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057d6:	121b      	asrs	r3, r3, #8
 80057d8:	b21a      	sxth	r2, r3
 80057da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	b2d2      	uxtb	r2, r2
 80057e0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80057e4:	440b      	add	r3, r1
 80057e6:	f803 2c24 	strb.w	r2, [r3, #-36]
		TxData[i * 2 + 1] = u[i] & 0xFF;
 80057ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ec:	005b      	lsls	r3, r3, #1
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	4413      	add	r3, r2
 80057f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80057f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f8:	005b      	lsls	r3, r3, #1
 80057fa:	3301      	adds	r3, #1
 80057fc:	b2d2      	uxtb	r2, r2
 80057fe:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8005802:	440b      	add	r3, r1
 8005804:	f803 2c24 	strb.w	r2, [r3, #-36]
	for (int i = 0; i < 4; i++) {
 8005808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580a:	3301      	adds	r3, #1
 800580c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800580e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005810:	2b03      	cmp	r3, #3
 8005812:	dda8      	ble.n	8005766 <driveGimbalMotors+0x2a>
	}

	HAL_CAN_AddTxMessage(&hcan1, &header, TxData, &TxMailbox);
 8005814:	f107 0308 	add.w	r3, r7, #8
 8005818:	f107 020c 	add.w	r2, r7, #12
 800581c:	f107 0114 	add.w	r1, r7, #20
 8005820:	4803      	ldr	r0, [pc, #12]	; (8005830 <driveGimbalMotors+0xf4>)
 8005822:	f7fb fd87 	bl	8001334 <HAL_CAN_AddTxMessage>
}
 8005826:	bf00      	nop
 8005828:	3730      	adds	r7, #48	; 0x30
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	200000e0 	.word	0x200000e0

08005834 <pidExecute>:
 *  Created on: 2019/03/12
 *      Author: User
 */
#include "pid.h"

float pidExecute(_pid_t *pid) {
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
	float u = 0;
 800583c:	f04f 0300 	mov.w	r3, #0
 8005840:	60fb      	str	r3, [r7, #12]
	pid->integralOut += pid->i * pid->error * (pid->t/1000.0f);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	ed93 7a07 	vldr	s14, [r3, #28]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	edd3 6a02 	vldr	s13, [r3, #8]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005854:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	ed93 6a00 	vldr	s12, [r3]
 800585e:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800599c <pidExecute+0x168>
 8005862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005866:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800586a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	edc3 7a07 	vstr	s15, [r3, #28]
	if (pid->integralOutLimit < pid->integralOut) pid->integralOut = pid->integralOutLimit;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	ed93 7a05 	vldr	s14, [r3, #20]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	edd3 7a07 	vldr	s15, [r3, #28]
 8005880:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005888:	d504      	bpl.n	8005894 <pidExecute+0x60>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	695a      	ldr	r2, [r3, #20]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	61da      	str	r2, [r3, #28]
 8005892:	e014      	b.n	80058be <pidExecute+0x8a>
	else if (pid->integralOut < -pid->integralOutLimit) pid->integralOut = -pid->integralOutLimit;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	ed93 7a07 	vldr	s14, [r3, #28]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	edd3 7a05 	vldr	s15, [r3, #20]
 80058a0:	eef1 7a67 	vneg.f32	s15, s15
 80058a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80058a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ac:	d507      	bpl.n	80058be <pidExecute+0x8a>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	edd3 7a05 	vldr	s15, [r3, #20]
 80058b4:	eef1 7a67 	vneg.f32	s15, s15
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	edc3 7a07 	vstr	s15, [r3, #28]
	pid->differentialFilter = pid->differentialFilter * pid->differentialFilterRate + (pid->d * (pid->error - pid->lastError)*(1000.0f/pid->t)) * (1 - pid->differentialFilterRate);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	edd3 7a06 	vldr	s15, [r3, #24]
 80058ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	edd3 6a03 	vldr	s13, [r3, #12]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	edd3 7a08 	vldr	s15, [r3, #32]
 80058e0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80058e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	ed93 6a00 	vldr	s12, [r3]
 80058ee:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800599c <pidExecute+0x168>
 80058f2:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80058f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8005900:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005904:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005908:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800590c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	u = pid->p * pid->error + pid->integralOut + pid->differentialFilter;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	ed93 7a01 	vldr	s14, [r3, #4]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005922:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	edd3 7a07 	vldr	s15, [r3, #28]
 800592c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800593a:	edc7 7a03 	vstr	s15, [r7, #12]
	if (pid->outLimit < u) u = pid->outLimit;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	edd3 7a04 	vldr	s15, [r3, #16]
 8005944:	ed97 7a03 	vldr	s14, [r7, #12]
 8005948:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800594c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005950:	dd03      	ble.n	800595a <pidExecute+0x126>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	e012      	b.n	8005980 <pidExecute+0x14c>
	else if (u < -pid->outLimit)u = -pid->outLimit;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005960:	eef1 7a67 	vneg.f32	s15, s15
 8005964:	ed97 7a03 	vldr	s14, [r7, #12]
 8005968:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800596c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005970:	d506      	bpl.n	8005980 <pidExecute+0x14c>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	edd3 7a04 	vldr	s15, [r3, #16]
 8005978:	eef1 7a67 	vneg.f32	s15, s15
 800597c:	edc7 7a03 	vstr	s15, [r7, #12]
	pid->lastError = pid->error;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	621a      	str	r2, [r3, #32]
	return u;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	ee07 3a90 	vmov	s15, r3
}
 800598e:	eeb0 0a67 	vmov.f32	s0, s15
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	447a0000 	.word	0x447a0000

080059a0 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 80059a4:	4b18      	ldr	r3, [pc, #96]	; (8005a08 <MX_SPI5_Init+0x68>)
 80059a6:	4a19      	ldr	r2, [pc, #100]	; (8005a0c <MX_SPI5_Init+0x6c>)
 80059a8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80059aa:	4b17      	ldr	r3, [pc, #92]	; (8005a08 <MX_SPI5_Init+0x68>)
 80059ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80059b0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80059b2:	4b15      	ldr	r3, [pc, #84]	; (8005a08 <MX_SPI5_Init+0x68>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80059b8:	4b13      	ldr	r3, [pc, #76]	; (8005a08 <MX_SPI5_Init+0x68>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80059be:	4b12      	ldr	r3, [pc, #72]	; (8005a08 <MX_SPI5_Init+0x68>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80059c4:	4b10      	ldr	r3, [pc, #64]	; (8005a08 <MX_SPI5_Init+0x68>)
 80059c6:	2200      	movs	r2, #0
 80059c8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80059ca:	4b0f      	ldr	r3, [pc, #60]	; (8005a08 <MX_SPI5_Init+0x68>)
 80059cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059d0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80059d2:	4b0d      	ldr	r3, [pc, #52]	; (8005a08 <MX_SPI5_Init+0x68>)
 80059d4:	2230      	movs	r2, #48	; 0x30
 80059d6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80059d8:	4b0b      	ldr	r3, [pc, #44]	; (8005a08 <MX_SPI5_Init+0x68>)
 80059da:	2200      	movs	r2, #0
 80059dc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80059de:	4b0a      	ldr	r3, [pc, #40]	; (8005a08 <MX_SPI5_Init+0x68>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059e4:	4b08      	ldr	r3, [pc, #32]	; (8005a08 <MX_SPI5_Init+0x68>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80059ea:	4b07      	ldr	r3, [pc, #28]	; (8005a08 <MX_SPI5_Init+0x68>)
 80059ec:	220a      	movs	r2, #10
 80059ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80059f0:	4805      	ldr	r0, [pc, #20]	; (8005a08 <MX_SPI5_Init+0x68>)
 80059f2:	f7fd f823 	bl	8002a3c <HAL_SPI_Init>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d003      	beq.n	8005a04 <MX_SPI5_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 80059fc:	2145      	movs	r1, #69	; 0x45
 80059fe:	4804      	ldr	r0, [pc, #16]	; (8005a10 <MX_SPI5_Init+0x70>)
 8005a00:	f7ff fc50 	bl	80052a4 <_Error_Handler>
  }

}
 8005a04:	bf00      	nop
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	20000370 	.word	0x20000370
 8005a0c:	40015000 	.word	0x40015000
 8005a10:	08007530 	.word	0x08007530

08005a14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b088      	sub	sp, #32
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI5)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a12      	ldr	r2, [pc, #72]	; (8005a6c <HAL_SPI_MspInit+0x58>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d11e      	bne.n	8005a64 <HAL_SPI_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8005a26:	2300      	movs	r3, #0
 8005a28:	60bb      	str	r3, [r7, #8]
 8005a2a:	4b11      	ldr	r3, [pc, #68]	; (8005a70 <HAL_SPI_MspInit+0x5c>)
 8005a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2e:	4a10      	ldr	r2, [pc, #64]	; (8005a70 <HAL_SPI_MspInit+0x5c>)
 8005a30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a34:	6453      	str	r3, [r2, #68]	; 0x44
 8005a36:	4b0e      	ldr	r3, [pc, #56]	; (8005a70 <HAL_SPI_MspInit+0x5c>)
 8005a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a3e:	60bb      	str	r3, [r7, #8]
 8005a40:	68bb      	ldr	r3, [r7, #8]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 8005a42:	f44f 7360 	mov.w	r3, #896	; 0x380
 8005a46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a48:	2302      	movs	r3, #2
 8005a4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a50:	2303      	movs	r3, #3
 8005a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8005a54:	2305      	movs	r3, #5
 8005a56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005a58:	f107 030c 	add.w	r3, r7, #12
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	4805      	ldr	r0, [pc, #20]	; (8005a74 <HAL_SPI_MspInit+0x60>)
 8005a60:	f7fc fa04 	bl	8001e6c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8005a64:	bf00      	nop
 8005a66:	3720      	adds	r7, #32
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	40015000 	.word	0x40015000
 8005a70:	40023800 	.word	0x40023800
 8005a74:	40021400 	.word	0x40021400

08005a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a7e:	2300      	movs	r3, #0
 8005a80:	607b      	str	r3, [r7, #4]
 8005a82:	4b25      	ldr	r3, [pc, #148]	; (8005b18 <HAL_MspInit+0xa0>)
 8005a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a86:	4a24      	ldr	r2, [pc, #144]	; (8005b18 <HAL_MspInit+0xa0>)
 8005a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8005a8e:	4b22      	ldr	r3, [pc, #136]	; (8005b18 <HAL_MspInit+0xa0>)
 8005a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a96:	607b      	str	r3, [r7, #4]
 8005a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	603b      	str	r3, [r7, #0]
 8005a9e:	4b1e      	ldr	r3, [pc, #120]	; (8005b18 <HAL_MspInit+0xa0>)
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	4a1d      	ldr	r2, [pc, #116]	; (8005b18 <HAL_MspInit+0xa0>)
 8005aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8005aaa:	4b1b      	ldr	r3, [pc, #108]	; (8005b18 <HAL_MspInit+0xa0>)
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ab2:	603b      	str	r3, [r7, #0]
 8005ab4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ab6:	2003      	movs	r0, #3
 8005ab8:	f7fc f94a 	bl	8001d50 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8005abc:	2200      	movs	r2, #0
 8005abe:	2100      	movs	r1, #0
 8005ac0:	f06f 000b 	mvn.w	r0, #11
 8005ac4:	f7fc f94f 	bl	8001d66 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8005ac8:	2200      	movs	r2, #0
 8005aca:	2100      	movs	r1, #0
 8005acc:	f06f 000a 	mvn.w	r0, #10
 8005ad0:	f7fc f949 	bl	8001d66 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	2100      	movs	r1, #0
 8005ad8:	f06f 0009 	mvn.w	r0, #9
 8005adc:	f7fc f943 	bl	8001d66 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	f06f 0004 	mvn.w	r0, #4
 8005ae8:	f7fc f93d 	bl	8001d66 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8005aec:	2200      	movs	r2, #0
 8005aee:	2100      	movs	r1, #0
 8005af0:	f06f 0003 	mvn.w	r0, #3
 8005af4:	f7fc f937 	bl	8001d66 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8005af8:	2200      	movs	r2, #0
 8005afa:	2100      	movs	r1, #0
 8005afc:	f06f 0001 	mvn.w	r0, #1
 8005b00:	f7fc f931 	bl	8001d66 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005b04:	2200      	movs	r2, #0
 8005b06:	2100      	movs	r1, #0
 8005b08:	f04f 30ff 	mov.w	r0, #4294967295
 8005b0c:	f7fc f92b 	bl	8001d66 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b10:	bf00      	nop
 8005b12:	3708      	adds	r7, #8
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	40023800 	.word	0x40023800

08005b1c <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005b20:	bf00      	nop
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b2e:	e7fe      	b.n	8005b2e <HardFault_Handler+0x4>

08005b30 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8005b30:	b480      	push	{r7}
 8005b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b34:	e7fe      	b.n	8005b34 <MemManage_Handler+0x4>

08005b36 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8005b36:	b480      	push	{r7}
 8005b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b3a:	e7fe      	b.n	8005b3a <BusFault_Handler+0x4>

08005b3c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b40:	e7fe      	b.n	8005b40 <UsageFault_Handler+0x4>

08005b42 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8005b42:	b480      	push	{r7}
 8005b44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005b46:	bf00      	nop
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8005b50:	b480      	push	{r7}
 8005b52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b54:	bf00      	nop
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005b62:	bf00      	nop
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005b70:	f7fb f97e 	bl	8000e70 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8005b74:	f7fc f94a 	bl	8001e0c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005b78:	bf00      	nop
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <CAN1_RX0_IRQHandler>:

/**
* @brief This function handles CAN1 RX0 interrupts.
*/
void CAN1_RX0_IRQHandler(void)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005b80:	4802      	ldr	r0, [pc, #8]	; (8005b8c <CAN1_RX0_IRQHandler+0x10>)
 8005b82:	f7fb fdeb 	bl	800175c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8005b86:	bf00      	nop
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	200000e0 	.word	0x200000e0

08005b90 <CAN1_RX1_IRQHandler>:

/**
* @brief This function handles CAN1 RX1 interrupt.
*/
void CAN1_RX1_IRQHandler(void)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005b94:	4802      	ldr	r0, [pc, #8]	; (8005ba0 <CAN1_RX1_IRQHandler+0x10>)
 8005b96:	f7fb fde1 	bl	800175c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8005b9a:	bf00      	nop
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	200000e0 	.word	0x200000e0

08005ba4 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005ba8:	4802      	ldr	r0, [pc, #8]	; (8005bb4 <USART1_IRQHandler+0x10>)
 8005baa:	f7fd feb5 	bl	8003918 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005bae:	bf00      	nop
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	200004c8 	.word	0x200004c8

08005bb8 <TIM6_DAC_IRQHandler>:

/**
* @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
*/
void TIM6_DAC_IRQHandler(void)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005bbc:	4802      	ldr	r0, [pc, #8]	; (8005bc8 <TIM6_DAC_IRQHandler+0x10>)
 8005bbe:	f7fd f859 	bl	8002c74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005bc2:	bf00      	nop
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	200003c8 	.word	0x200003c8

08005bcc <CAN2_RX0_IRQHandler>:

/**
* @brief This function handles CAN2 RX0 interrupts.
*/
void CAN2_RX0_IRQHandler(void)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8005bd0:	4802      	ldr	r0, [pc, #8]	; (8005bdc <CAN2_RX0_IRQHandler+0x10>)
 8005bd2:	f7fb fdc3 	bl	800175c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8005bd6:	bf00      	nop
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	200000b8 	.word	0x200000b8

08005be0 <CAN2_RX1_IRQHandler>:

/**
* @brief This function handles CAN2 RX1 interrupt.
*/
void CAN2_RX1_IRQHandler(void)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8005be4:	4802      	ldr	r0, [pc, #8]	; (8005bf0 <CAN2_RX1_IRQHandler+0x10>)
 8005be6:	f7fb fdb9 	bl	800175c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8005bea:	bf00      	nop
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	200000b8 	.word	0x200000b8

08005bf4 <USART6_IRQHandler>:

/**
* @brief This function handles USART6 global interrupt.
*/
void USART6_IRQHandler(void)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005bf8:	4802      	ldr	r0, [pc, #8]	; (8005c04 <USART6_IRQHandler+0x10>)
 8005bfa:	f7fd fe8d 	bl	8003918 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8005bfe:	bf00      	nop
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	20000548 	.word	0x20000548

08005c08 <UART8_IRQHandler>:

/**
* @brief This function handles UART8 global interrupt.
*/
void UART8_IRQHandler(void)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8005c0c:	4802      	ldr	r0, [pc, #8]	; (8005c18 <UART8_IRQHandler+0x10>)
 8005c0e:	f7fd fe83 	bl	8003918 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8005c12:	bf00      	nop
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	20000508 	.word	0x20000508

08005c1c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c28:	2300      	movs	r3, #0
 8005c2a:	617b      	str	r3, [r7, #20]
 8005c2c:	e00a      	b.n	8005c44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005c2e:	f3af 8000 	nop.w
 8005c32:	4601      	mov	r1, r0
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	1c5a      	adds	r2, r3, #1
 8005c38:	60ba      	str	r2, [r7, #8]
 8005c3a:	b2ca      	uxtb	r2, r1
 8005c3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	3301      	adds	r3, #1
 8005c42:	617b      	str	r3, [r7, #20]
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	dbf0      	blt.n	8005c2e <_read+0x12>
	}

return len;
 8005c4c:	687b      	ldr	r3, [r7, #4]
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <_write>:

int _write(int file, char *ptr, int len)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b086      	sub	sp, #24
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	60f8      	str	r0, [r7, #12]
 8005c5e:	60b9      	str	r1, [r7, #8]
 8005c60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c62:	2300      	movs	r3, #0
 8005c64:	617b      	str	r3, [r7, #20]
 8005c66:	e009      	b.n	8005c7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	1c5a      	adds	r2, r3, #1
 8005c6c:	60ba      	str	r2, [r7, #8]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7fe fcc3 	bl	80045fc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	617b      	str	r3, [r7, #20]
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	dbf1      	blt.n	8005c68 <_write+0x12>
	}
	return len;
 8005c84:	687b      	ldr	r3, [r7, #4]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3718      	adds	r7, #24
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <_close>:


int _close(int file)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b083      	sub	sp, #12
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
	return -1;
 8005c96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b083      	sub	sp, #12
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005cb6:	605a      	str	r2, [r3, #4]
	return 0;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	370c      	adds	r7, #12
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <_isatty>:

int _isatty(int file)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
	return 1;
 8005cce:	2301      	movs	r3, #1
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
	return 0;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
	...

08005cf8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005d00:	4b11      	ldr	r3, [pc, #68]	; (8005d48 <_sbrk+0x50>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d102      	bne.n	8005d0e <_sbrk+0x16>
		heap_end = &end;
 8005d08:	4b0f      	ldr	r3, [pc, #60]	; (8005d48 <_sbrk+0x50>)
 8005d0a:	4a10      	ldr	r2, [pc, #64]	; (8005d4c <_sbrk+0x54>)
 8005d0c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005d0e:	4b0e      	ldr	r3, [pc, #56]	; (8005d48 <_sbrk+0x50>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005d14:	4b0c      	ldr	r3, [pc, #48]	; (8005d48 <_sbrk+0x50>)
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	466a      	mov	r2, sp
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d907      	bls.n	8005d32 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005d22:	f000 fb97 	bl	8006454 <__errno>
 8005d26:	4602      	mov	r2, r0
 8005d28:	230c      	movs	r3, #12
 8005d2a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d30:	e006      	b.n	8005d40 <_sbrk+0x48>
	}

	heap_end += incr;
 8005d32:	4b05      	ldr	r3, [pc, #20]	; (8005d48 <_sbrk+0x50>)
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4413      	add	r3, r2
 8005d3a:	4a03      	ldr	r2, [pc, #12]	; (8005d48 <_sbrk+0x50>)
 8005d3c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	200000a8 	.word	0x200000a8
 8005d4c:	20000590 	.word	0x20000590

08005d50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005d50:	b480      	push	{r7}
 8005d52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005d54:	4b16      	ldr	r3, [pc, #88]	; (8005db0 <SystemInit+0x60>)
 8005d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5a:	4a15      	ldr	r2, [pc, #84]	; (8005db0 <SystemInit+0x60>)
 8005d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005d64:	4b13      	ldr	r3, [pc, #76]	; (8005db4 <SystemInit+0x64>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a12      	ldr	r2, [pc, #72]	; (8005db4 <SystemInit+0x64>)
 8005d6a:	f043 0301 	orr.w	r3, r3, #1
 8005d6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005d70:	4b10      	ldr	r3, [pc, #64]	; (8005db4 <SystemInit+0x64>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005d76:	4b0f      	ldr	r3, [pc, #60]	; (8005db4 <SystemInit+0x64>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a0e      	ldr	r2, [pc, #56]	; (8005db4 <SystemInit+0x64>)
 8005d7c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d84:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005d86:	4b0b      	ldr	r3, [pc, #44]	; (8005db4 <SystemInit+0x64>)
 8005d88:	4a0b      	ldr	r2, [pc, #44]	; (8005db8 <SystemInit+0x68>)
 8005d8a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005d8c:	4b09      	ldr	r3, [pc, #36]	; (8005db4 <SystemInit+0x64>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a08      	ldr	r2, [pc, #32]	; (8005db4 <SystemInit+0x64>)
 8005d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d96:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005d98:	4b06      	ldr	r3, [pc, #24]	; (8005db4 <SystemInit+0x64>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005d9e:	4b04      	ldr	r3, [pc, #16]	; (8005db0 <SystemInit+0x60>)
 8005da0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005da4:	609a      	str	r2, [r3, #8]
#endif
}
 8005da6:	bf00      	nop
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr
 8005db0:	e000ed00 	.word	0xe000ed00
 8005db4:	40023800 	.word	0x40023800
 8005db8:	24003010 	.word	0x24003010

08005dbc <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b092      	sub	sp, #72	; 0x48
 8005dc0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
 8005dc2:	4b3d      	ldr	r3, [pc, #244]	; (8005eb8 <MX_TIM1_Init+0xfc>)
 8005dc4:	4a3d      	ldr	r2, [pc, #244]	; (8005ebc <MX_TIM1_Init+0x100>)
 8005dc6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8005dc8:	4b3b      	ldr	r3, [pc, #236]	; (8005eb8 <MX_TIM1_Init+0xfc>)
 8005dca:	22a7      	movs	r2, #167	; 0xa7
 8005dcc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005dce:	4b3a      	ldr	r3, [pc, #232]	; (8005eb8 <MX_TIM1_Init+0xfc>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8005dd4:	4b38      	ldr	r3, [pc, #224]	; (8005eb8 <MX_TIM1_Init+0xfc>)
 8005dd6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005dda:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ddc:	4b36      	ldr	r3, [pc, #216]	; (8005eb8 <MX_TIM1_Init+0xfc>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005de2:	4b35      	ldr	r3, [pc, #212]	; (8005eb8 <MX_TIM1_Init+0xfc>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005de8:	4833      	ldr	r0, [pc, #204]	; (8005eb8 <MX_TIM1_Init+0xfc>)
 8005dea:	f7fc feda 	bl	8002ba2 <HAL_TIM_PWM_Init>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d003      	beq.n	8005dfc <MX_TIM1_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005df4:	2142      	movs	r1, #66	; 0x42
 8005df6:	4832      	ldr	r0, [pc, #200]	; (8005ec0 <MX_TIM1_Init+0x104>)
 8005df8:	f7ff fa54 	bl	80052a4 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e00:	2300      	movs	r3, #0
 8005e02:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005e04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e08:	4619      	mov	r1, r3
 8005e0a:	482b      	ldr	r0, [pc, #172]	; (8005eb8 <MX_TIM1_Init+0xfc>)
 8005e0c:	f7fd fb9d 	bl	800354a <HAL_TIMEx_MasterConfigSynchronization>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <MX_TIM1_Init+0x62>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005e16:	2149      	movs	r1, #73	; 0x49
 8005e18:	4829      	ldr	r0, [pc, #164]	; (8005ec0 <MX_TIM1_Init+0x104>)
 8005e1a:	f7ff fa43 	bl	80052a4 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005e1e:	2360      	movs	r3, #96	; 0x60
 8005e20:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8005e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e26:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005e30:	2300      	movs	r3, #0
 8005e32:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005e34:	2300      	movs	r3, #0
 8005e36:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e40:	2200      	movs	r2, #0
 8005e42:	4619      	mov	r1, r3
 8005e44:	481c      	ldr	r0, [pc, #112]	; (8005eb8 <MX_TIM1_Init+0xfc>)
 8005e46:	f7fd f81d 	bl	8002e84 <HAL_TIM_PWM_ConfigChannel>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d003      	beq.n	8005e58 <MX_TIM1_Init+0x9c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005e50:	2155      	movs	r1, #85	; 0x55
 8005e52:	481b      	ldr	r0, [pc, #108]	; (8005ec0 <MX_TIM1_Init+0x104>)
 8005e54:	f7ff fa26 	bl	80052a4 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e5c:	220c      	movs	r2, #12
 8005e5e:	4619      	mov	r1, r3
 8005e60:	4815      	ldr	r0, [pc, #84]	; (8005eb8 <MX_TIM1_Init+0xfc>)
 8005e62:	f7fd f80f 	bl	8002e84 <HAL_TIM_PWM_ConfigChannel>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d003      	beq.n	8005e74 <MX_TIM1_Init+0xb8>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005e6c:	215a      	movs	r1, #90	; 0x5a
 8005e6e:	4814      	ldr	r0, [pc, #80]	; (8005ec0 <MX_TIM1_Init+0x104>)
 8005e70:	f7ff fa18 	bl	80052a4 <_Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005e74:	2300      	movs	r3, #0
 8005e76:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005e80:	2300      	movs	r3, #0
 8005e82:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005e84:	2300      	movs	r3, #0
 8005e86:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005e88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e8c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005e92:	1d3b      	adds	r3, r7, #4
 8005e94:	4619      	mov	r1, r3
 8005e96:	4808      	ldr	r0, [pc, #32]	; (8005eb8 <MX_TIM1_Init+0xfc>)
 8005e98:	f7fd fb9c 	bl	80035d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d003      	beq.n	8005eaa <MX_TIM1_Init+0xee>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005ea2:	2166      	movs	r1, #102	; 0x66
 8005ea4:	4806      	ldr	r0, [pc, #24]	; (8005ec0 <MX_TIM1_Init+0x104>)
 8005ea6:	f7ff f9fd 	bl	80052a4 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 8005eaa:	4803      	ldr	r0, [pc, #12]	; (8005eb8 <MX_TIM1_Init+0xfc>)
 8005eac:	f000 f8de 	bl	800606c <HAL_TIM_MspPostInit>

}
 8005eb0:	bf00      	nop
 8005eb2:	3748      	adds	r7, #72	; 0x48
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	20000408 	.word	0x20000408
 8005ebc:	40010000 	.word	0x40010000
 8005ec0:	08007540 	.word	0x08007540

08005ec4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
 8005eca:	4b15      	ldr	r3, [pc, #84]	; (8005f20 <MX_TIM6_Init+0x5c>)
 8005ecc:	4a15      	ldr	r2, [pc, #84]	; (8005f24 <MX_TIM6_Init+0x60>)
 8005ece:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10-1;
 8005ed0:	4b13      	ldr	r3, [pc, #76]	; (8005f20 <MX_TIM6_Init+0x5c>)
 8005ed2:	2209      	movs	r2, #9
 8005ed4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ed6:	4b12      	ldr	r3, [pc, #72]	; (8005f20 <MX_TIM6_Init+0x5c>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 16800;
 8005edc:	4b10      	ldr	r3, [pc, #64]	; (8005f20 <MX_TIM6_Init+0x5c>)
 8005ede:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8005ee2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005ee4:	480e      	ldr	r0, [pc, #56]	; (8005f20 <MX_TIM6_Init+0x5c>)
 8005ee6:	f7fc fe0d 	bl	8002b04 <HAL_TIM_Base_Init>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <MX_TIM6_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005ef0:	2177      	movs	r1, #119	; 0x77
 8005ef2:	480d      	ldr	r0, [pc, #52]	; (8005f28 <MX_TIM6_Init+0x64>)
 8005ef4:	f7ff f9d6 	bl	80052a4 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005efc:	2300      	movs	r3, #0
 8005efe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005f00:	463b      	mov	r3, r7
 8005f02:	4619      	mov	r1, r3
 8005f04:	4806      	ldr	r0, [pc, #24]	; (8005f20 <MX_TIM6_Init+0x5c>)
 8005f06:	f7fd fb20 	bl	800354a <HAL_TIMEx_MasterConfigSynchronization>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d003      	beq.n	8005f18 <MX_TIM6_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005f10:	217e      	movs	r1, #126	; 0x7e
 8005f12:	4805      	ldr	r0, [pc, #20]	; (8005f28 <MX_TIM6_Init+0x64>)
 8005f14:	f7ff f9c6 	bl	80052a4 <_Error_Handler>
  }

}
 8005f18:	bf00      	nop
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	200003c8 	.word	0x200003c8
 8005f24:	40001000 	.word	0x40001000
 8005f28:	08007540 	.word	0x08007540

08005f2c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b088      	sub	sp, #32
 8005f30:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC;

  htim12.Instance = TIM12;
 8005f32:	4b1b      	ldr	r3, [pc, #108]	; (8005fa0 <MX_TIM12_Init+0x74>)
 8005f34:	4a1b      	ldr	r2, [pc, #108]	; (8005fa4 <MX_TIM12_Init+0x78>)
 8005f36:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 83;
 8005f38:	4b19      	ldr	r3, [pc, #100]	; (8005fa0 <MX_TIM12_Init+0x74>)
 8005f3a:	2253      	movs	r2, #83	; 0x53
 8005f3c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f3e:	4b18      	ldr	r3, [pc, #96]	; (8005fa0 <MX_TIM12_Init+0x74>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 20000-1;
 8005f44:	4b16      	ldr	r3, [pc, #88]	; (8005fa0 <MX_TIM12_Init+0x74>)
 8005f46:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005f4a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f4c:	4b14      	ldr	r3, [pc, #80]	; (8005fa0 <MX_TIM12_Init+0x74>)
 8005f4e:	2200      	movs	r2, #0
 8005f50:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8005f52:	4813      	ldr	r0, [pc, #76]	; (8005fa0 <MX_TIM12_Init+0x74>)
 8005f54:	f7fc fe25 	bl	8002ba2 <HAL_TIM_PWM_Init>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <MX_TIM12_Init+0x3a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005f5e:	218e      	movs	r1, #142	; 0x8e
 8005f60:	4811      	ldr	r0, [pc, #68]	; (8005fa8 <MX_TIM12_Init+0x7c>)
 8005f62:	f7ff f99f 	bl	80052a4 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005f66:	2360      	movs	r3, #96	; 0x60
 8005f68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005f72:	2300      	movs	r3, #0
 8005f74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005f76:	1d3b      	adds	r3, r7, #4
 8005f78:	2200      	movs	r2, #0
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	4808      	ldr	r0, [pc, #32]	; (8005fa0 <MX_TIM12_Init+0x74>)
 8005f7e:	f7fc ff81 	bl	8002e84 <HAL_TIM_PWM_ConfigChannel>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d003      	beq.n	8005f90 <MX_TIM12_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005f88:	2197      	movs	r1, #151	; 0x97
 8005f8a:	4807      	ldr	r0, [pc, #28]	; (8005fa8 <MX_TIM12_Init+0x7c>)
 8005f8c:	f7ff f98a 	bl	80052a4 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim12);
 8005f90:	4803      	ldr	r0, [pc, #12]	; (8005fa0 <MX_TIM12_Init+0x74>)
 8005f92:	f000 f86b 	bl	800606c <HAL_TIM_MspPostInit>

}
 8005f96:	bf00      	nop
 8005f98:	3720      	adds	r7, #32
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	20000448 	.word	0x20000448
 8005fa4:	40001800 	.word	0x40001800
 8005fa8:	08007540 	.word	0x08007540

08005fac <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a15      	ldr	r2, [pc, #84]	; (8006010 <HAL_TIM_PWM_MspInit+0x64>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d10e      	bne.n	8005fdc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	60fb      	str	r3, [r7, #12]
 8005fc2:	4b14      	ldr	r3, [pc, #80]	; (8006014 <HAL_TIM_PWM_MspInit+0x68>)
 8005fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fc6:	4a13      	ldr	r2, [pc, #76]	; (8006014 <HAL_TIM_PWM_MspInit+0x68>)
 8005fc8:	f043 0301 	orr.w	r3, r3, #1
 8005fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8005fce:	4b11      	ldr	r3, [pc, #68]	; (8006014 <HAL_TIM_PWM_MspInit+0x68>)
 8005fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	60fb      	str	r3, [r7, #12]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8005fda:	e012      	b.n	8006002 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM12)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a0d      	ldr	r2, [pc, #52]	; (8006018 <HAL_TIM_PWM_MspInit+0x6c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d10d      	bne.n	8006002 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60bb      	str	r3, [r7, #8]
 8005fea:	4b0a      	ldr	r3, [pc, #40]	; (8006014 <HAL_TIM_PWM_MspInit+0x68>)
 8005fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fee:	4a09      	ldr	r2, [pc, #36]	; (8006014 <HAL_TIM_PWM_MspInit+0x68>)
 8005ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ff6:	4b07      	ldr	r3, [pc, #28]	; (8006014 <HAL_TIM_PWM_MspInit+0x68>)
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffe:	60bb      	str	r3, [r7, #8]
 8006000:	68bb      	ldr	r3, [r7, #8]
}
 8006002:	bf00      	nop
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	40010000 	.word	0x40010000
 8006014:	40023800 	.word	0x40023800
 8006018:	40001800 	.word	0x40001800

0800601c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a0e      	ldr	r2, [pc, #56]	; (8006064 <HAL_TIM_Base_MspInit+0x48>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d115      	bne.n	800605a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800602e:	2300      	movs	r3, #0
 8006030:	60fb      	str	r3, [r7, #12]
 8006032:	4b0d      	ldr	r3, [pc, #52]	; (8006068 <HAL_TIM_Base_MspInit+0x4c>)
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	4a0c      	ldr	r2, [pc, #48]	; (8006068 <HAL_TIM_Base_MspInit+0x4c>)
 8006038:	f043 0310 	orr.w	r3, r3, #16
 800603c:	6413      	str	r3, [r2, #64]	; 0x40
 800603e:	4b0a      	ldr	r3, [pc, #40]	; (8006068 <HAL_TIM_Base_MspInit+0x4c>)
 8006040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006042:	f003 0310 	and.w	r3, r3, #16
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800604a:	2200      	movs	r2, #0
 800604c:	2101      	movs	r1, #1
 800604e:	2036      	movs	r0, #54	; 0x36
 8006050:	f7fb fe89 	bl	8001d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006054:	2036      	movs	r0, #54	; 0x36
 8006056:	f7fb fea2 	bl	8001d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800605a:	bf00      	nop
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	40001000 	.word	0x40001000
 8006068:	40023800 	.word	0x40023800

0800606c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b088      	sub	sp, #32
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a1f      	ldr	r2, [pc, #124]	; (80060f8 <HAL_TIM_MspPostInit+0x8c>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d122      	bne.n	80060c4 <HAL_TIM_MspPostInit+0x58>
  /* USER CODE END TIM1_MspPostInit 0 */
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PE14     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = FRICTION_L_Pin;
 800607e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006082:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006084:	2302      	movs	r3, #2
 8006086:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006088:	2300      	movs	r3, #0
 800608a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800608c:	2300      	movs	r3, #0
 800608e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006090:	2301      	movs	r3, #1
 8006092:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 8006094:	f107 030c 	add.w	r3, r7, #12
 8006098:	4619      	mov	r1, r3
 800609a:	4818      	ldr	r0, [pc, #96]	; (80060fc <HAL_TIM_MspPostInit+0x90>)
 800609c:	f7fb fee6 	bl	8001e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FRICTION_R_Pin;
 80060a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80060a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060a6:	2302      	movs	r3, #2
 80060a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060aa:	2300      	movs	r3, #0
 80060ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060ae:	2300      	movs	r3, #0
 80060b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80060b2:	2301      	movs	r3, #1
 80060b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FRICTION_R_GPIO_Port, &GPIO_InitStruct);
 80060b6:	f107 030c 	add.w	r3, r7, #12
 80060ba:	4619      	mov	r1, r3
 80060bc:	4810      	ldr	r0, [pc, #64]	; (8006100 <HAL_TIM_MspPostInit+0x94>)
 80060be:	f7fb fed5 	bl	8001e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80060c2:	e014      	b.n	80060ee <HAL_TIM_MspPostInit+0x82>
  else if(timHandle->Instance==TIM12)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a0e      	ldr	r2, [pc, #56]	; (8006104 <HAL_TIM_MspPostInit+0x98>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d10f      	bne.n	80060ee <HAL_TIM_MspPostInit+0x82>
    GPIO_InitStruct.Pin = BEEP_CTRL_Pin;
 80060ce:	2340      	movs	r3, #64	; 0x40
 80060d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060d2:	2302      	movs	r3, #2
 80060d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060d6:	2300      	movs	r3, #0
 80060d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060da:	2300      	movs	r3, #0
 80060dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80060de:	2309      	movs	r3, #9
 80060e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 80060e2:	f107 030c 	add.w	r3, r7, #12
 80060e6:	4619      	mov	r1, r3
 80060e8:	4807      	ldr	r0, [pc, #28]	; (8006108 <HAL_TIM_MspPostInit+0x9c>)
 80060ea:	f7fb febf 	bl	8001e6c <HAL_GPIO_Init>
}
 80060ee:	bf00      	nop
 80060f0:	3720      	adds	r7, #32
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	40010000 	.word	0x40010000
 80060fc:	40020000 	.word	0x40020000
 8006100:	40021000 	.word	0x40021000
 8006104:	40001800 	.word	0x40001800
 8006108:	40021c00 	.word	0x40021c00

0800610c <MX_UART7_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8006110:	4b12      	ldr	r3, [pc, #72]	; (800615c <MX_UART7_Init+0x50>)
 8006112:	4a13      	ldr	r2, [pc, #76]	; (8006160 <MX_UART7_Init+0x54>)
 8006114:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8006116:	4b11      	ldr	r3, [pc, #68]	; (800615c <MX_UART7_Init+0x50>)
 8006118:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800611c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800611e:	4b0f      	ldr	r3, [pc, #60]	; (800615c <MX_UART7_Init+0x50>)
 8006120:	2200      	movs	r2, #0
 8006122:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8006124:	4b0d      	ldr	r3, [pc, #52]	; (800615c <MX_UART7_Init+0x50>)
 8006126:	2200      	movs	r2, #0
 8006128:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800612a:	4b0c      	ldr	r3, [pc, #48]	; (800615c <MX_UART7_Init+0x50>)
 800612c:	2200      	movs	r2, #0
 800612e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8006130:	4b0a      	ldr	r3, [pc, #40]	; (800615c <MX_UART7_Init+0x50>)
 8006132:	220c      	movs	r2, #12
 8006134:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006136:	4b09      	ldr	r3, [pc, #36]	; (800615c <MX_UART7_Init+0x50>)
 8006138:	2200      	movs	r2, #0
 800613a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800613c:	4b07      	ldr	r3, [pc, #28]	; (800615c <MX_UART7_Init+0x50>)
 800613e:	2200      	movs	r2, #0
 8006140:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8006142:	4806      	ldr	r0, [pc, #24]	; (800615c <MX_UART7_Init+0x50>)
 8006144:	f7fd faac 	bl	80036a0 <HAL_UART_Init>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <MX_UART7_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800614e:	2144      	movs	r1, #68	; 0x44
 8006150:	4804      	ldr	r0, [pc, #16]	; (8006164 <MX_UART7_Init+0x58>)
 8006152:	f7ff f8a7 	bl	80052a4 <_Error_Handler>
  }

}
 8006156:	bf00      	nop
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	20000488 	.word	0x20000488
 8006160:	40007800 	.word	0x40007800
 8006164:	08007550 	.word	0x08007550

08006168 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 800616c:	4b12      	ldr	r3, [pc, #72]	; (80061b8 <MX_UART8_Init+0x50>)
 800616e:	4a13      	ldr	r2, [pc, #76]	; (80061bc <MX_UART8_Init+0x54>)
 8006170:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8006172:	4b11      	ldr	r3, [pc, #68]	; (80061b8 <MX_UART8_Init+0x50>)
 8006174:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006178:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800617a:	4b0f      	ldr	r3, [pc, #60]	; (80061b8 <MX_UART8_Init+0x50>)
 800617c:	2200      	movs	r2, #0
 800617e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8006180:	4b0d      	ldr	r3, [pc, #52]	; (80061b8 <MX_UART8_Init+0x50>)
 8006182:	2200      	movs	r2, #0
 8006184:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8006186:	4b0c      	ldr	r3, [pc, #48]	; (80061b8 <MX_UART8_Init+0x50>)
 8006188:	2200      	movs	r2, #0
 800618a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800618c:	4b0a      	ldr	r3, [pc, #40]	; (80061b8 <MX_UART8_Init+0x50>)
 800618e:	220c      	movs	r2, #12
 8006190:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006192:	4b09      	ldr	r3, [pc, #36]	; (80061b8 <MX_UART8_Init+0x50>)
 8006194:	2200      	movs	r2, #0
 8006196:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8006198:	4b07      	ldr	r3, [pc, #28]	; (80061b8 <MX_UART8_Init+0x50>)
 800619a:	2200      	movs	r2, #0
 800619c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800619e:	4806      	ldr	r0, [pc, #24]	; (80061b8 <MX_UART8_Init+0x50>)
 80061a0:	f7fd fa7e 	bl	80036a0 <HAL_UART_Init>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d003      	beq.n	80061b2 <MX_UART8_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80061aa:	2156      	movs	r1, #86	; 0x56
 80061ac:	4804      	ldr	r0, [pc, #16]	; (80061c0 <MX_UART8_Init+0x58>)
 80061ae:	f7ff f879 	bl	80052a4 <_Error_Handler>
  }

}
 80061b2:	bf00      	nop
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	20000508 	.word	0x20000508
 80061bc:	40007c00 	.word	0x40007c00
 80061c0:	08007550 	.word	0x08007550

080061c4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80061c8:	4b11      	ldr	r3, [pc, #68]	; (8006210 <MX_USART1_UART_Init+0x4c>)
 80061ca:	4a12      	ldr	r2, [pc, #72]	; (8006214 <MX_USART1_UART_Init+0x50>)
 80061cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 80061ce:	4b10      	ldr	r3, [pc, #64]	; (8006210 <MX_USART1_UART_Init+0x4c>)
 80061d0:	4a11      	ldr	r2, [pc, #68]	; (8006218 <MX_USART1_UART_Init+0x54>)
 80061d2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80061d4:	4b0e      	ldr	r3, [pc, #56]	; (8006210 <MX_USART1_UART_Init+0x4c>)
 80061d6:	2200      	movs	r2, #0
 80061d8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80061da:	4b0d      	ldr	r3, [pc, #52]	; (8006210 <MX_USART1_UART_Init+0x4c>)
 80061dc:	2200      	movs	r2, #0
 80061de:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80061e0:	4b0b      	ldr	r3, [pc, #44]	; (8006210 <MX_USART1_UART_Init+0x4c>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80061e6:	4b0a      	ldr	r3, [pc, #40]	; (8006210 <MX_USART1_UART_Init+0x4c>)
 80061e8:	220c      	movs	r2, #12
 80061ea:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80061ec:	4b08      	ldr	r3, [pc, #32]	; (8006210 <MX_USART1_UART_Init+0x4c>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80061f2:	4b07      	ldr	r3, [pc, #28]	; (8006210 <MX_USART1_UART_Init+0x4c>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80061f8:	4805      	ldr	r0, [pc, #20]	; (8006210 <MX_USART1_UART_Init+0x4c>)
 80061fa:	f7fd fa51 	bl	80036a0 <HAL_UART_Init>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d003      	beq.n	800620c <MX_USART1_UART_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006204:	2169      	movs	r1, #105	; 0x69
 8006206:	4805      	ldr	r0, [pc, #20]	; (800621c <MX_USART1_UART_Init+0x58>)
 8006208:	f7ff f84c 	bl	80052a4 <_Error_Handler>
  }

}
 800620c:	bf00      	nop
 800620e:	bd80      	pop	{r7, pc}
 8006210:	200004c8 	.word	0x200004c8
 8006214:	40011000 	.word	0x40011000
 8006218:	000186a0 	.word	0x000186a0
 800621c:	08007550 	.word	0x08007550

08006220 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8006224:	4b12      	ldr	r3, [pc, #72]	; (8006270 <MX_USART6_UART_Init+0x50>)
 8006226:	4a13      	ldr	r2, [pc, #76]	; (8006274 <MX_USART6_UART_Init+0x54>)
 8006228:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800622a:	4b11      	ldr	r3, [pc, #68]	; (8006270 <MX_USART6_UART_Init+0x50>)
 800622c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006230:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8006232:	4b0f      	ldr	r3, [pc, #60]	; (8006270 <MX_USART6_UART_Init+0x50>)
 8006234:	2200      	movs	r2, #0
 8006236:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8006238:	4b0d      	ldr	r3, [pc, #52]	; (8006270 <MX_USART6_UART_Init+0x50>)
 800623a:	2200      	movs	r2, #0
 800623c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800623e:	4b0c      	ldr	r3, [pc, #48]	; (8006270 <MX_USART6_UART_Init+0x50>)
 8006240:	2200      	movs	r2, #0
 8006242:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8006244:	4b0a      	ldr	r3, [pc, #40]	; (8006270 <MX_USART6_UART_Init+0x50>)
 8006246:	220c      	movs	r2, #12
 8006248:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800624a:	4b09      	ldr	r3, [pc, #36]	; (8006270 <MX_USART6_UART_Init+0x50>)
 800624c:	2200      	movs	r2, #0
 800624e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8006250:	4b07      	ldr	r3, [pc, #28]	; (8006270 <MX_USART6_UART_Init+0x50>)
 8006252:	2200      	movs	r2, #0
 8006254:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8006256:	4806      	ldr	r0, [pc, #24]	; (8006270 <MX_USART6_UART_Init+0x50>)
 8006258:	f7fd fa22 	bl	80036a0 <HAL_UART_Init>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d003      	beq.n	800626a <MX_USART6_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006262:	217c      	movs	r1, #124	; 0x7c
 8006264:	4804      	ldr	r0, [pc, #16]	; (8006278 <MX_USART6_UART_Init+0x58>)
 8006266:	f7ff f81d 	bl	80052a4 <_Error_Handler>
  }

}
 800626a:	bf00      	nop
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	20000548 	.word	0x20000548
 8006274:	40011400 	.word	0x40011400
 8006278:	08007550 	.word	0x08007550

0800627c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b08c      	sub	sp, #48	; 0x30
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART7)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a55      	ldr	r2, [pc, #340]	; (80063e0 <HAL_UART_MspInit+0x164>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d11f      	bne.n	80062ce <HAL_UART_MspInit+0x52>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800628e:	2300      	movs	r3, #0
 8006290:	61bb      	str	r3, [r7, #24]
 8006292:	4b54      	ldr	r3, [pc, #336]	; (80063e4 <HAL_UART_MspInit+0x168>)
 8006294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006296:	4a53      	ldr	r2, [pc, #332]	; (80063e4 <HAL_UART_MspInit+0x168>)
 8006298:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800629c:	6413      	str	r3, [r2, #64]	; 0x40
 800629e:	4b51      	ldr	r3, [pc, #324]	; (80063e4 <HAL_UART_MspInit+0x168>)
 80062a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80062a6:	61bb      	str	r3, [r7, #24]
 80062a8:	69bb      	ldr	r3, [r7, #24]
  
    /**UART7 GPIO Configuration    
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 80062aa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80062ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062b0:	2302      	movs	r3, #2
 80062b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80062b4:	2301      	movs	r3, #1
 80062b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062b8:	2303      	movs	r3, #3
 80062ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80062bc:	2308      	movs	r3, #8
 80062be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80062c0:	f107 031c 	add.w	r3, r7, #28
 80062c4:	4619      	mov	r1, r3
 80062c6:	4848      	ldr	r0, [pc, #288]	; (80063e8 <HAL_UART_MspInit+0x16c>)
 80062c8:	f7fb fdd0 	bl	8001e6c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80062cc:	e083      	b.n	80063d6 <HAL_UART_MspInit+0x15a>
  else if(uartHandle->Instance==UART8)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a46      	ldr	r2, [pc, #280]	; (80063ec <HAL_UART_MspInit+0x170>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d126      	bne.n	8006326 <HAL_UART_MspInit+0xaa>
    __HAL_RCC_UART8_CLK_ENABLE();
 80062d8:	2300      	movs	r3, #0
 80062da:	617b      	str	r3, [r7, #20]
 80062dc:	4b41      	ldr	r3, [pc, #260]	; (80063e4 <HAL_UART_MspInit+0x168>)
 80062de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e0:	4a40      	ldr	r2, [pc, #256]	; (80063e4 <HAL_UART_MspInit+0x168>)
 80062e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062e6:	6413      	str	r3, [r2, #64]	; 0x40
 80062e8:	4b3e      	ldr	r3, [pc, #248]	; (80063e4 <HAL_UART_MspInit+0x168>)
 80062ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062f0:	617b      	str	r3, [r7, #20]
 80062f2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80062f4:	2303      	movs	r3, #3
 80062f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062f8:	2302      	movs	r3, #2
 80062fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80062fc:	2301      	movs	r3, #1
 80062fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006300:	2303      	movs	r3, #3
 8006302:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8006304:	2308      	movs	r3, #8
 8006306:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006308:	f107 031c 	add.w	r3, r7, #28
 800630c:	4619      	mov	r1, r3
 800630e:	4836      	ldr	r0, [pc, #216]	; (80063e8 <HAL_UART_MspInit+0x16c>)
 8006310:	f7fb fdac 	bl	8001e6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8006314:	2200      	movs	r2, #0
 8006316:	2100      	movs	r1, #0
 8006318:	2053      	movs	r0, #83	; 0x53
 800631a:	f7fb fd24 	bl	8001d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800631e:	2053      	movs	r0, #83	; 0x53
 8006320:	f7fb fd3d 	bl	8001d9e <HAL_NVIC_EnableIRQ>
}
 8006324:	e057      	b.n	80063d6 <HAL_UART_MspInit+0x15a>
  else if(uartHandle->Instance==USART1)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a31      	ldr	r2, [pc, #196]	; (80063f0 <HAL_UART_MspInit+0x174>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d126      	bne.n	800637e <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006330:	2300      	movs	r3, #0
 8006332:	613b      	str	r3, [r7, #16]
 8006334:	4b2b      	ldr	r3, [pc, #172]	; (80063e4 <HAL_UART_MspInit+0x168>)
 8006336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006338:	4a2a      	ldr	r2, [pc, #168]	; (80063e4 <HAL_UART_MspInit+0x168>)
 800633a:	f043 0310 	orr.w	r3, r3, #16
 800633e:	6453      	str	r3, [r2, #68]	; 0x44
 8006340:	4b28      	ldr	r3, [pc, #160]	; (80063e4 <HAL_UART_MspInit+0x168>)
 8006342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006344:	f003 0310 	and.w	r3, r3, #16
 8006348:	613b      	str	r3, [r7, #16]
 800634a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800634c:	23c0      	movs	r3, #192	; 0xc0
 800634e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006350:	2302      	movs	r3, #2
 8006352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006354:	2301      	movs	r3, #1
 8006356:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006358:	2303      	movs	r3, #3
 800635a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800635c:	2307      	movs	r3, #7
 800635e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006360:	f107 031c 	add.w	r3, r7, #28
 8006364:	4619      	mov	r1, r3
 8006366:	4823      	ldr	r0, [pc, #140]	; (80063f4 <HAL_UART_MspInit+0x178>)
 8006368:	f7fb fd80 	bl	8001e6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800636c:	2200      	movs	r2, #0
 800636e:	2100      	movs	r1, #0
 8006370:	2025      	movs	r0, #37	; 0x25
 8006372:	f7fb fcf8 	bl	8001d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006376:	2025      	movs	r0, #37	; 0x25
 8006378:	f7fb fd11 	bl	8001d9e <HAL_NVIC_EnableIRQ>
}
 800637c:	e02b      	b.n	80063d6 <HAL_UART_MspInit+0x15a>
  else if(uartHandle->Instance==USART6)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a1d      	ldr	r2, [pc, #116]	; (80063f8 <HAL_UART_MspInit+0x17c>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d126      	bne.n	80063d6 <HAL_UART_MspInit+0x15a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006388:	2300      	movs	r3, #0
 800638a:	60fb      	str	r3, [r7, #12]
 800638c:	4b15      	ldr	r3, [pc, #84]	; (80063e4 <HAL_UART_MspInit+0x168>)
 800638e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006390:	4a14      	ldr	r2, [pc, #80]	; (80063e4 <HAL_UART_MspInit+0x168>)
 8006392:	f043 0320 	orr.w	r3, r3, #32
 8006396:	6453      	str	r3, [r2, #68]	; 0x44
 8006398:	4b12      	ldr	r3, [pc, #72]	; (80063e4 <HAL_UART_MspInit+0x168>)
 800639a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800639c:	f003 0320 	and.w	r3, r3, #32
 80063a0:	60fb      	str	r3, [r7, #12]
 80063a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80063a4:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80063a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063aa:	2302      	movs	r3, #2
 80063ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80063ae:	2301      	movs	r3, #1
 80063b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063b2:	2303      	movs	r3, #3
 80063b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80063b6:	2308      	movs	r3, #8
 80063b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80063ba:	f107 031c 	add.w	r3, r7, #28
 80063be:	4619      	mov	r1, r3
 80063c0:	480e      	ldr	r0, [pc, #56]	; (80063fc <HAL_UART_MspInit+0x180>)
 80063c2:	f7fb fd53 	bl	8001e6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80063c6:	2200      	movs	r2, #0
 80063c8:	2100      	movs	r1, #0
 80063ca:	2047      	movs	r0, #71	; 0x47
 80063cc:	f7fb fccb 	bl	8001d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80063d0:	2047      	movs	r0, #71	; 0x47
 80063d2:	f7fb fce4 	bl	8001d9e <HAL_NVIC_EnableIRQ>
}
 80063d6:	bf00      	nop
 80063d8:	3730      	adds	r7, #48	; 0x30
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	40007800 	.word	0x40007800
 80063e4:	40023800 	.word	0x40023800
 80063e8:	40021000 	.word	0x40021000
 80063ec:	40007c00 	.word	0x40007c00
 80063f0:	40011000 	.word	0x40011000
 80063f4:	40020400 	.word	0x40020400
 80063f8:	40011400 	.word	0x40011400
 80063fc:	40021800 	.word	0x40021800

08006400 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006400:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006438 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006404:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006406:	e003      	b.n	8006410 <LoopCopyDataInit>

08006408 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006408:	4b0c      	ldr	r3, [pc, #48]	; (800643c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800640a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800640c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800640e:	3104      	adds	r1, #4

08006410 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006410:	480b      	ldr	r0, [pc, #44]	; (8006440 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006412:	4b0c      	ldr	r3, [pc, #48]	; (8006444 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006414:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006416:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006418:	d3f6      	bcc.n	8006408 <CopyDataInit>
  ldr  r2, =_sbss
 800641a:	4a0b      	ldr	r2, [pc, #44]	; (8006448 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800641c:	e002      	b.n	8006424 <LoopFillZerobss>

0800641e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800641e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006420:	f842 3b04 	str.w	r3, [r2], #4

08006424 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006424:	4b09      	ldr	r3, [pc, #36]	; (800644c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006426:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006428:	d3f9      	bcc.n	800641e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800642a:	f7ff fc91 	bl	8005d50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800642e:	f000 f817 	bl	8006460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006432:	f7fe f919 	bl	8004668 <main>
  bx  lr    
 8006436:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006438:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800643c:	08007620 	.word	0x08007620
  ldr  r0, =_sdata
 8006440:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006444:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8006448:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 800644c:	2000058c 	.word	0x2000058c

08006450 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006450:	e7fe      	b.n	8006450 <ADC_IRQHandler>
	...

08006454 <__errno>:
 8006454:	4b01      	ldr	r3, [pc, #4]	; (800645c <__errno+0x8>)
 8006456:	6818      	ldr	r0, [r3, #0]
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	2000000c 	.word	0x2000000c

08006460 <__libc_init_array>:
 8006460:	b570      	push	{r4, r5, r6, lr}
 8006462:	4e0d      	ldr	r6, [pc, #52]	; (8006498 <__libc_init_array+0x38>)
 8006464:	4c0d      	ldr	r4, [pc, #52]	; (800649c <__libc_init_array+0x3c>)
 8006466:	1ba4      	subs	r4, r4, r6
 8006468:	10a4      	asrs	r4, r4, #2
 800646a:	2500      	movs	r5, #0
 800646c:	42a5      	cmp	r5, r4
 800646e:	d109      	bne.n	8006484 <__libc_init_array+0x24>
 8006470:	4e0b      	ldr	r6, [pc, #44]	; (80064a0 <__libc_init_array+0x40>)
 8006472:	4c0c      	ldr	r4, [pc, #48]	; (80064a4 <__libc_init_array+0x44>)
 8006474:	f001 f832 	bl	80074dc <_init>
 8006478:	1ba4      	subs	r4, r4, r6
 800647a:	10a4      	asrs	r4, r4, #2
 800647c:	2500      	movs	r5, #0
 800647e:	42a5      	cmp	r5, r4
 8006480:	d105      	bne.n	800648e <__libc_init_array+0x2e>
 8006482:	bd70      	pop	{r4, r5, r6, pc}
 8006484:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006488:	4798      	blx	r3
 800648a:	3501      	adds	r5, #1
 800648c:	e7ee      	b.n	800646c <__libc_init_array+0xc>
 800648e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006492:	4798      	blx	r3
 8006494:	3501      	adds	r5, #1
 8006496:	e7f2      	b.n	800647e <__libc_init_array+0x1e>
 8006498:	08007618 	.word	0x08007618
 800649c:	08007618 	.word	0x08007618
 80064a0:	08007618 	.word	0x08007618
 80064a4:	0800761c 	.word	0x0800761c

080064a8 <memcpy>:
 80064a8:	b510      	push	{r4, lr}
 80064aa:	1e43      	subs	r3, r0, #1
 80064ac:	440a      	add	r2, r1
 80064ae:	4291      	cmp	r1, r2
 80064b0:	d100      	bne.n	80064b4 <memcpy+0xc>
 80064b2:	bd10      	pop	{r4, pc}
 80064b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064bc:	e7f7      	b.n	80064ae <memcpy+0x6>

080064be <memset>:
 80064be:	4402      	add	r2, r0
 80064c0:	4603      	mov	r3, r0
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d100      	bne.n	80064c8 <memset+0xa>
 80064c6:	4770      	bx	lr
 80064c8:	f803 1b01 	strb.w	r1, [r3], #1
 80064cc:	e7f9      	b.n	80064c2 <memset+0x4>
	...

080064d0 <iprintf>:
 80064d0:	b40f      	push	{r0, r1, r2, r3}
 80064d2:	4b0a      	ldr	r3, [pc, #40]	; (80064fc <iprintf+0x2c>)
 80064d4:	b513      	push	{r0, r1, r4, lr}
 80064d6:	681c      	ldr	r4, [r3, #0]
 80064d8:	b124      	cbz	r4, 80064e4 <iprintf+0x14>
 80064da:	69a3      	ldr	r3, [r4, #24]
 80064dc:	b913      	cbnz	r3, 80064e4 <iprintf+0x14>
 80064de:	4620      	mov	r0, r4
 80064e0:	f000 fad8 	bl	8006a94 <__sinit>
 80064e4:	ab05      	add	r3, sp, #20
 80064e6:	9a04      	ldr	r2, [sp, #16]
 80064e8:	68a1      	ldr	r1, [r4, #8]
 80064ea:	9301      	str	r3, [sp, #4]
 80064ec:	4620      	mov	r0, r4
 80064ee:	f000 fc99 	bl	8006e24 <_vfiprintf_r>
 80064f2:	b002      	add	sp, #8
 80064f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064f8:	b004      	add	sp, #16
 80064fa:	4770      	bx	lr
 80064fc:	2000000c 	.word	0x2000000c

08006500 <_puts_r>:
 8006500:	b570      	push	{r4, r5, r6, lr}
 8006502:	460e      	mov	r6, r1
 8006504:	4605      	mov	r5, r0
 8006506:	b118      	cbz	r0, 8006510 <_puts_r+0x10>
 8006508:	6983      	ldr	r3, [r0, #24]
 800650a:	b90b      	cbnz	r3, 8006510 <_puts_r+0x10>
 800650c:	f000 fac2 	bl	8006a94 <__sinit>
 8006510:	69ab      	ldr	r3, [r5, #24]
 8006512:	68ac      	ldr	r4, [r5, #8]
 8006514:	b913      	cbnz	r3, 800651c <_puts_r+0x1c>
 8006516:	4628      	mov	r0, r5
 8006518:	f000 fabc 	bl	8006a94 <__sinit>
 800651c:	4b23      	ldr	r3, [pc, #140]	; (80065ac <_puts_r+0xac>)
 800651e:	429c      	cmp	r4, r3
 8006520:	d117      	bne.n	8006552 <_puts_r+0x52>
 8006522:	686c      	ldr	r4, [r5, #4]
 8006524:	89a3      	ldrh	r3, [r4, #12]
 8006526:	071b      	lsls	r3, r3, #28
 8006528:	d51d      	bpl.n	8006566 <_puts_r+0x66>
 800652a:	6923      	ldr	r3, [r4, #16]
 800652c:	b1db      	cbz	r3, 8006566 <_puts_r+0x66>
 800652e:	3e01      	subs	r6, #1
 8006530:	68a3      	ldr	r3, [r4, #8]
 8006532:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006536:	3b01      	subs	r3, #1
 8006538:	60a3      	str	r3, [r4, #8]
 800653a:	b9e9      	cbnz	r1, 8006578 <_puts_r+0x78>
 800653c:	2b00      	cmp	r3, #0
 800653e:	da2e      	bge.n	800659e <_puts_r+0x9e>
 8006540:	4622      	mov	r2, r4
 8006542:	210a      	movs	r1, #10
 8006544:	4628      	mov	r0, r5
 8006546:	f000 f8f5 	bl	8006734 <__swbuf_r>
 800654a:	3001      	adds	r0, #1
 800654c:	d011      	beq.n	8006572 <_puts_r+0x72>
 800654e:	200a      	movs	r0, #10
 8006550:	e011      	b.n	8006576 <_puts_r+0x76>
 8006552:	4b17      	ldr	r3, [pc, #92]	; (80065b0 <_puts_r+0xb0>)
 8006554:	429c      	cmp	r4, r3
 8006556:	d101      	bne.n	800655c <_puts_r+0x5c>
 8006558:	68ac      	ldr	r4, [r5, #8]
 800655a:	e7e3      	b.n	8006524 <_puts_r+0x24>
 800655c:	4b15      	ldr	r3, [pc, #84]	; (80065b4 <_puts_r+0xb4>)
 800655e:	429c      	cmp	r4, r3
 8006560:	bf08      	it	eq
 8006562:	68ec      	ldreq	r4, [r5, #12]
 8006564:	e7de      	b.n	8006524 <_puts_r+0x24>
 8006566:	4621      	mov	r1, r4
 8006568:	4628      	mov	r0, r5
 800656a:	f000 f935 	bl	80067d8 <__swsetup_r>
 800656e:	2800      	cmp	r0, #0
 8006570:	d0dd      	beq.n	800652e <_puts_r+0x2e>
 8006572:	f04f 30ff 	mov.w	r0, #4294967295
 8006576:	bd70      	pop	{r4, r5, r6, pc}
 8006578:	2b00      	cmp	r3, #0
 800657a:	da04      	bge.n	8006586 <_puts_r+0x86>
 800657c:	69a2      	ldr	r2, [r4, #24]
 800657e:	429a      	cmp	r2, r3
 8006580:	dc06      	bgt.n	8006590 <_puts_r+0x90>
 8006582:	290a      	cmp	r1, #10
 8006584:	d004      	beq.n	8006590 <_puts_r+0x90>
 8006586:	6823      	ldr	r3, [r4, #0]
 8006588:	1c5a      	adds	r2, r3, #1
 800658a:	6022      	str	r2, [r4, #0]
 800658c:	7019      	strb	r1, [r3, #0]
 800658e:	e7cf      	b.n	8006530 <_puts_r+0x30>
 8006590:	4622      	mov	r2, r4
 8006592:	4628      	mov	r0, r5
 8006594:	f000 f8ce 	bl	8006734 <__swbuf_r>
 8006598:	3001      	adds	r0, #1
 800659a:	d1c9      	bne.n	8006530 <_puts_r+0x30>
 800659c:	e7e9      	b.n	8006572 <_puts_r+0x72>
 800659e:	6823      	ldr	r3, [r4, #0]
 80065a0:	200a      	movs	r0, #10
 80065a2:	1c5a      	adds	r2, r3, #1
 80065a4:	6022      	str	r2, [r4, #0]
 80065a6:	7018      	strb	r0, [r3, #0]
 80065a8:	e7e5      	b.n	8006576 <_puts_r+0x76>
 80065aa:	bf00      	nop
 80065ac:	0800759c 	.word	0x0800759c
 80065b0:	080075bc 	.word	0x080075bc
 80065b4:	0800757c 	.word	0x0800757c

080065b8 <puts>:
 80065b8:	4b02      	ldr	r3, [pc, #8]	; (80065c4 <puts+0xc>)
 80065ba:	4601      	mov	r1, r0
 80065bc:	6818      	ldr	r0, [r3, #0]
 80065be:	f7ff bf9f 	b.w	8006500 <_puts_r>
 80065c2:	bf00      	nop
 80065c4:	2000000c 	.word	0x2000000c

080065c8 <setbuf>:
 80065c8:	2900      	cmp	r1, #0
 80065ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065ce:	bf0c      	ite	eq
 80065d0:	2202      	moveq	r2, #2
 80065d2:	2200      	movne	r2, #0
 80065d4:	f000 b800 	b.w	80065d8 <setvbuf>

080065d8 <setvbuf>:
 80065d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80065dc:	461d      	mov	r5, r3
 80065de:	4b51      	ldr	r3, [pc, #324]	; (8006724 <setvbuf+0x14c>)
 80065e0:	681e      	ldr	r6, [r3, #0]
 80065e2:	4604      	mov	r4, r0
 80065e4:	460f      	mov	r7, r1
 80065e6:	4690      	mov	r8, r2
 80065e8:	b126      	cbz	r6, 80065f4 <setvbuf+0x1c>
 80065ea:	69b3      	ldr	r3, [r6, #24]
 80065ec:	b913      	cbnz	r3, 80065f4 <setvbuf+0x1c>
 80065ee:	4630      	mov	r0, r6
 80065f0:	f000 fa50 	bl	8006a94 <__sinit>
 80065f4:	4b4c      	ldr	r3, [pc, #304]	; (8006728 <setvbuf+0x150>)
 80065f6:	429c      	cmp	r4, r3
 80065f8:	d152      	bne.n	80066a0 <setvbuf+0xc8>
 80065fa:	6874      	ldr	r4, [r6, #4]
 80065fc:	f1b8 0f02 	cmp.w	r8, #2
 8006600:	d006      	beq.n	8006610 <setvbuf+0x38>
 8006602:	f1b8 0f01 	cmp.w	r8, #1
 8006606:	f200 8089 	bhi.w	800671c <setvbuf+0x144>
 800660a:	2d00      	cmp	r5, #0
 800660c:	f2c0 8086 	blt.w	800671c <setvbuf+0x144>
 8006610:	4621      	mov	r1, r4
 8006612:	4630      	mov	r0, r6
 8006614:	f000 f9d4 	bl	80069c0 <_fflush_r>
 8006618:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800661a:	b141      	cbz	r1, 800662e <setvbuf+0x56>
 800661c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006620:	4299      	cmp	r1, r3
 8006622:	d002      	beq.n	800662a <setvbuf+0x52>
 8006624:	4630      	mov	r0, r6
 8006626:	f000 fb2b 	bl	8006c80 <_free_r>
 800662a:	2300      	movs	r3, #0
 800662c:	6363      	str	r3, [r4, #52]	; 0x34
 800662e:	2300      	movs	r3, #0
 8006630:	61a3      	str	r3, [r4, #24]
 8006632:	6063      	str	r3, [r4, #4]
 8006634:	89a3      	ldrh	r3, [r4, #12]
 8006636:	061b      	lsls	r3, r3, #24
 8006638:	d503      	bpl.n	8006642 <setvbuf+0x6a>
 800663a:	6921      	ldr	r1, [r4, #16]
 800663c:	4630      	mov	r0, r6
 800663e:	f000 fb1f 	bl	8006c80 <_free_r>
 8006642:	89a3      	ldrh	r3, [r4, #12]
 8006644:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006648:	f023 0303 	bic.w	r3, r3, #3
 800664c:	f1b8 0f02 	cmp.w	r8, #2
 8006650:	81a3      	strh	r3, [r4, #12]
 8006652:	d05d      	beq.n	8006710 <setvbuf+0x138>
 8006654:	ab01      	add	r3, sp, #4
 8006656:	466a      	mov	r2, sp
 8006658:	4621      	mov	r1, r4
 800665a:	4630      	mov	r0, r6
 800665c:	f000 faa4 	bl	8006ba8 <__swhatbuf_r>
 8006660:	89a3      	ldrh	r3, [r4, #12]
 8006662:	4318      	orrs	r0, r3
 8006664:	81a0      	strh	r0, [r4, #12]
 8006666:	bb2d      	cbnz	r5, 80066b4 <setvbuf+0xdc>
 8006668:	9d00      	ldr	r5, [sp, #0]
 800666a:	4628      	mov	r0, r5
 800666c:	f000 fb00 	bl	8006c70 <malloc>
 8006670:	4607      	mov	r7, r0
 8006672:	2800      	cmp	r0, #0
 8006674:	d14e      	bne.n	8006714 <setvbuf+0x13c>
 8006676:	f8dd 9000 	ldr.w	r9, [sp]
 800667a:	45a9      	cmp	r9, r5
 800667c:	d13c      	bne.n	80066f8 <setvbuf+0x120>
 800667e:	f04f 30ff 	mov.w	r0, #4294967295
 8006682:	89a3      	ldrh	r3, [r4, #12]
 8006684:	f043 0302 	orr.w	r3, r3, #2
 8006688:	81a3      	strh	r3, [r4, #12]
 800668a:	2300      	movs	r3, #0
 800668c:	60a3      	str	r3, [r4, #8]
 800668e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006692:	6023      	str	r3, [r4, #0]
 8006694:	6123      	str	r3, [r4, #16]
 8006696:	2301      	movs	r3, #1
 8006698:	6163      	str	r3, [r4, #20]
 800669a:	b003      	add	sp, #12
 800669c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066a0:	4b22      	ldr	r3, [pc, #136]	; (800672c <setvbuf+0x154>)
 80066a2:	429c      	cmp	r4, r3
 80066a4:	d101      	bne.n	80066aa <setvbuf+0xd2>
 80066a6:	68b4      	ldr	r4, [r6, #8]
 80066a8:	e7a8      	b.n	80065fc <setvbuf+0x24>
 80066aa:	4b21      	ldr	r3, [pc, #132]	; (8006730 <setvbuf+0x158>)
 80066ac:	429c      	cmp	r4, r3
 80066ae:	bf08      	it	eq
 80066b0:	68f4      	ldreq	r4, [r6, #12]
 80066b2:	e7a3      	b.n	80065fc <setvbuf+0x24>
 80066b4:	2f00      	cmp	r7, #0
 80066b6:	d0d8      	beq.n	800666a <setvbuf+0x92>
 80066b8:	69b3      	ldr	r3, [r6, #24]
 80066ba:	b913      	cbnz	r3, 80066c2 <setvbuf+0xea>
 80066bc:	4630      	mov	r0, r6
 80066be:	f000 f9e9 	bl	8006a94 <__sinit>
 80066c2:	f1b8 0f01 	cmp.w	r8, #1
 80066c6:	bf08      	it	eq
 80066c8:	89a3      	ldrheq	r3, [r4, #12]
 80066ca:	6027      	str	r7, [r4, #0]
 80066cc:	bf04      	itt	eq
 80066ce:	f043 0301 	orreq.w	r3, r3, #1
 80066d2:	81a3      	strheq	r3, [r4, #12]
 80066d4:	89a3      	ldrh	r3, [r4, #12]
 80066d6:	f013 0008 	ands.w	r0, r3, #8
 80066da:	e9c4 7504 	strd	r7, r5, [r4, #16]
 80066de:	d01b      	beq.n	8006718 <setvbuf+0x140>
 80066e0:	f013 0001 	ands.w	r0, r3, #1
 80066e4:	bf18      	it	ne
 80066e6:	426d      	negne	r5, r5
 80066e8:	f04f 0300 	mov.w	r3, #0
 80066ec:	bf1d      	ittte	ne
 80066ee:	60a3      	strne	r3, [r4, #8]
 80066f0:	61a5      	strne	r5, [r4, #24]
 80066f2:	4618      	movne	r0, r3
 80066f4:	60a5      	streq	r5, [r4, #8]
 80066f6:	e7d0      	b.n	800669a <setvbuf+0xc2>
 80066f8:	4648      	mov	r0, r9
 80066fa:	f000 fab9 	bl	8006c70 <malloc>
 80066fe:	4607      	mov	r7, r0
 8006700:	2800      	cmp	r0, #0
 8006702:	d0bc      	beq.n	800667e <setvbuf+0xa6>
 8006704:	89a3      	ldrh	r3, [r4, #12]
 8006706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800670a:	81a3      	strh	r3, [r4, #12]
 800670c:	464d      	mov	r5, r9
 800670e:	e7d3      	b.n	80066b8 <setvbuf+0xe0>
 8006710:	2000      	movs	r0, #0
 8006712:	e7b6      	b.n	8006682 <setvbuf+0xaa>
 8006714:	46a9      	mov	r9, r5
 8006716:	e7f5      	b.n	8006704 <setvbuf+0x12c>
 8006718:	60a0      	str	r0, [r4, #8]
 800671a:	e7be      	b.n	800669a <setvbuf+0xc2>
 800671c:	f04f 30ff 	mov.w	r0, #4294967295
 8006720:	e7bb      	b.n	800669a <setvbuf+0xc2>
 8006722:	bf00      	nop
 8006724:	2000000c 	.word	0x2000000c
 8006728:	0800759c 	.word	0x0800759c
 800672c:	080075bc 	.word	0x080075bc
 8006730:	0800757c 	.word	0x0800757c

08006734 <__swbuf_r>:
 8006734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006736:	460e      	mov	r6, r1
 8006738:	4614      	mov	r4, r2
 800673a:	4605      	mov	r5, r0
 800673c:	b118      	cbz	r0, 8006746 <__swbuf_r+0x12>
 800673e:	6983      	ldr	r3, [r0, #24]
 8006740:	b90b      	cbnz	r3, 8006746 <__swbuf_r+0x12>
 8006742:	f000 f9a7 	bl	8006a94 <__sinit>
 8006746:	4b21      	ldr	r3, [pc, #132]	; (80067cc <__swbuf_r+0x98>)
 8006748:	429c      	cmp	r4, r3
 800674a:	d12a      	bne.n	80067a2 <__swbuf_r+0x6e>
 800674c:	686c      	ldr	r4, [r5, #4]
 800674e:	69a3      	ldr	r3, [r4, #24]
 8006750:	60a3      	str	r3, [r4, #8]
 8006752:	89a3      	ldrh	r3, [r4, #12]
 8006754:	071a      	lsls	r2, r3, #28
 8006756:	d52e      	bpl.n	80067b6 <__swbuf_r+0x82>
 8006758:	6923      	ldr	r3, [r4, #16]
 800675a:	b363      	cbz	r3, 80067b6 <__swbuf_r+0x82>
 800675c:	6923      	ldr	r3, [r4, #16]
 800675e:	6820      	ldr	r0, [r4, #0]
 8006760:	1ac0      	subs	r0, r0, r3
 8006762:	6963      	ldr	r3, [r4, #20]
 8006764:	b2f6      	uxtb	r6, r6
 8006766:	4283      	cmp	r3, r0
 8006768:	4637      	mov	r7, r6
 800676a:	dc04      	bgt.n	8006776 <__swbuf_r+0x42>
 800676c:	4621      	mov	r1, r4
 800676e:	4628      	mov	r0, r5
 8006770:	f000 f926 	bl	80069c0 <_fflush_r>
 8006774:	bb28      	cbnz	r0, 80067c2 <__swbuf_r+0x8e>
 8006776:	68a3      	ldr	r3, [r4, #8]
 8006778:	3b01      	subs	r3, #1
 800677a:	60a3      	str	r3, [r4, #8]
 800677c:	6823      	ldr	r3, [r4, #0]
 800677e:	1c5a      	adds	r2, r3, #1
 8006780:	6022      	str	r2, [r4, #0]
 8006782:	701e      	strb	r6, [r3, #0]
 8006784:	6963      	ldr	r3, [r4, #20]
 8006786:	3001      	adds	r0, #1
 8006788:	4283      	cmp	r3, r0
 800678a:	d004      	beq.n	8006796 <__swbuf_r+0x62>
 800678c:	89a3      	ldrh	r3, [r4, #12]
 800678e:	07db      	lsls	r3, r3, #31
 8006790:	d519      	bpl.n	80067c6 <__swbuf_r+0x92>
 8006792:	2e0a      	cmp	r6, #10
 8006794:	d117      	bne.n	80067c6 <__swbuf_r+0x92>
 8006796:	4621      	mov	r1, r4
 8006798:	4628      	mov	r0, r5
 800679a:	f000 f911 	bl	80069c0 <_fflush_r>
 800679e:	b190      	cbz	r0, 80067c6 <__swbuf_r+0x92>
 80067a0:	e00f      	b.n	80067c2 <__swbuf_r+0x8e>
 80067a2:	4b0b      	ldr	r3, [pc, #44]	; (80067d0 <__swbuf_r+0x9c>)
 80067a4:	429c      	cmp	r4, r3
 80067a6:	d101      	bne.n	80067ac <__swbuf_r+0x78>
 80067a8:	68ac      	ldr	r4, [r5, #8]
 80067aa:	e7d0      	b.n	800674e <__swbuf_r+0x1a>
 80067ac:	4b09      	ldr	r3, [pc, #36]	; (80067d4 <__swbuf_r+0xa0>)
 80067ae:	429c      	cmp	r4, r3
 80067b0:	bf08      	it	eq
 80067b2:	68ec      	ldreq	r4, [r5, #12]
 80067b4:	e7cb      	b.n	800674e <__swbuf_r+0x1a>
 80067b6:	4621      	mov	r1, r4
 80067b8:	4628      	mov	r0, r5
 80067ba:	f000 f80d 	bl	80067d8 <__swsetup_r>
 80067be:	2800      	cmp	r0, #0
 80067c0:	d0cc      	beq.n	800675c <__swbuf_r+0x28>
 80067c2:	f04f 37ff 	mov.w	r7, #4294967295
 80067c6:	4638      	mov	r0, r7
 80067c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067ca:	bf00      	nop
 80067cc:	0800759c 	.word	0x0800759c
 80067d0:	080075bc 	.word	0x080075bc
 80067d4:	0800757c 	.word	0x0800757c

080067d8 <__swsetup_r>:
 80067d8:	4b32      	ldr	r3, [pc, #200]	; (80068a4 <__swsetup_r+0xcc>)
 80067da:	b570      	push	{r4, r5, r6, lr}
 80067dc:	681d      	ldr	r5, [r3, #0]
 80067de:	4606      	mov	r6, r0
 80067e0:	460c      	mov	r4, r1
 80067e2:	b125      	cbz	r5, 80067ee <__swsetup_r+0x16>
 80067e4:	69ab      	ldr	r3, [r5, #24]
 80067e6:	b913      	cbnz	r3, 80067ee <__swsetup_r+0x16>
 80067e8:	4628      	mov	r0, r5
 80067ea:	f000 f953 	bl	8006a94 <__sinit>
 80067ee:	4b2e      	ldr	r3, [pc, #184]	; (80068a8 <__swsetup_r+0xd0>)
 80067f0:	429c      	cmp	r4, r3
 80067f2:	d10f      	bne.n	8006814 <__swsetup_r+0x3c>
 80067f4:	686c      	ldr	r4, [r5, #4]
 80067f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	0715      	lsls	r5, r2, #28
 80067fe:	d42c      	bmi.n	800685a <__swsetup_r+0x82>
 8006800:	06d0      	lsls	r0, r2, #27
 8006802:	d411      	bmi.n	8006828 <__swsetup_r+0x50>
 8006804:	2209      	movs	r2, #9
 8006806:	6032      	str	r2, [r6, #0]
 8006808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800680c:	81a3      	strh	r3, [r4, #12]
 800680e:	f04f 30ff 	mov.w	r0, #4294967295
 8006812:	e03e      	b.n	8006892 <__swsetup_r+0xba>
 8006814:	4b25      	ldr	r3, [pc, #148]	; (80068ac <__swsetup_r+0xd4>)
 8006816:	429c      	cmp	r4, r3
 8006818:	d101      	bne.n	800681e <__swsetup_r+0x46>
 800681a:	68ac      	ldr	r4, [r5, #8]
 800681c:	e7eb      	b.n	80067f6 <__swsetup_r+0x1e>
 800681e:	4b24      	ldr	r3, [pc, #144]	; (80068b0 <__swsetup_r+0xd8>)
 8006820:	429c      	cmp	r4, r3
 8006822:	bf08      	it	eq
 8006824:	68ec      	ldreq	r4, [r5, #12]
 8006826:	e7e6      	b.n	80067f6 <__swsetup_r+0x1e>
 8006828:	0751      	lsls	r1, r2, #29
 800682a:	d512      	bpl.n	8006852 <__swsetup_r+0x7a>
 800682c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800682e:	b141      	cbz	r1, 8006842 <__swsetup_r+0x6a>
 8006830:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006834:	4299      	cmp	r1, r3
 8006836:	d002      	beq.n	800683e <__swsetup_r+0x66>
 8006838:	4630      	mov	r0, r6
 800683a:	f000 fa21 	bl	8006c80 <_free_r>
 800683e:	2300      	movs	r3, #0
 8006840:	6363      	str	r3, [r4, #52]	; 0x34
 8006842:	89a3      	ldrh	r3, [r4, #12]
 8006844:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006848:	81a3      	strh	r3, [r4, #12]
 800684a:	2300      	movs	r3, #0
 800684c:	6063      	str	r3, [r4, #4]
 800684e:	6923      	ldr	r3, [r4, #16]
 8006850:	6023      	str	r3, [r4, #0]
 8006852:	89a3      	ldrh	r3, [r4, #12]
 8006854:	f043 0308 	orr.w	r3, r3, #8
 8006858:	81a3      	strh	r3, [r4, #12]
 800685a:	6923      	ldr	r3, [r4, #16]
 800685c:	b94b      	cbnz	r3, 8006872 <__swsetup_r+0x9a>
 800685e:	89a3      	ldrh	r3, [r4, #12]
 8006860:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006868:	d003      	beq.n	8006872 <__swsetup_r+0x9a>
 800686a:	4621      	mov	r1, r4
 800686c:	4630      	mov	r0, r6
 800686e:	f000 f9bf 	bl	8006bf0 <__smakebuf_r>
 8006872:	89a2      	ldrh	r2, [r4, #12]
 8006874:	f012 0301 	ands.w	r3, r2, #1
 8006878:	d00c      	beq.n	8006894 <__swsetup_r+0xbc>
 800687a:	2300      	movs	r3, #0
 800687c:	60a3      	str	r3, [r4, #8]
 800687e:	6963      	ldr	r3, [r4, #20]
 8006880:	425b      	negs	r3, r3
 8006882:	61a3      	str	r3, [r4, #24]
 8006884:	6923      	ldr	r3, [r4, #16]
 8006886:	b953      	cbnz	r3, 800689e <__swsetup_r+0xc6>
 8006888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800688c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006890:	d1ba      	bne.n	8006808 <__swsetup_r+0x30>
 8006892:	bd70      	pop	{r4, r5, r6, pc}
 8006894:	0792      	lsls	r2, r2, #30
 8006896:	bf58      	it	pl
 8006898:	6963      	ldrpl	r3, [r4, #20]
 800689a:	60a3      	str	r3, [r4, #8]
 800689c:	e7f2      	b.n	8006884 <__swsetup_r+0xac>
 800689e:	2000      	movs	r0, #0
 80068a0:	e7f7      	b.n	8006892 <__swsetup_r+0xba>
 80068a2:	bf00      	nop
 80068a4:	2000000c 	.word	0x2000000c
 80068a8:	0800759c 	.word	0x0800759c
 80068ac:	080075bc 	.word	0x080075bc
 80068b0:	0800757c 	.word	0x0800757c

080068b4 <__sflush_r>:
 80068b4:	898a      	ldrh	r2, [r1, #12]
 80068b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068ba:	4605      	mov	r5, r0
 80068bc:	0710      	lsls	r0, r2, #28
 80068be:	460c      	mov	r4, r1
 80068c0:	d458      	bmi.n	8006974 <__sflush_r+0xc0>
 80068c2:	684b      	ldr	r3, [r1, #4]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	dc05      	bgt.n	80068d4 <__sflush_r+0x20>
 80068c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	dc02      	bgt.n	80068d4 <__sflush_r+0x20>
 80068ce:	2000      	movs	r0, #0
 80068d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068d6:	2e00      	cmp	r6, #0
 80068d8:	d0f9      	beq.n	80068ce <__sflush_r+0x1a>
 80068da:	2300      	movs	r3, #0
 80068dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80068e0:	682f      	ldr	r7, [r5, #0]
 80068e2:	6a21      	ldr	r1, [r4, #32]
 80068e4:	602b      	str	r3, [r5, #0]
 80068e6:	d032      	beq.n	800694e <__sflush_r+0x9a>
 80068e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80068ea:	89a3      	ldrh	r3, [r4, #12]
 80068ec:	075a      	lsls	r2, r3, #29
 80068ee:	d505      	bpl.n	80068fc <__sflush_r+0x48>
 80068f0:	6863      	ldr	r3, [r4, #4]
 80068f2:	1ac0      	subs	r0, r0, r3
 80068f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80068f6:	b10b      	cbz	r3, 80068fc <__sflush_r+0x48>
 80068f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068fa:	1ac0      	subs	r0, r0, r3
 80068fc:	2300      	movs	r3, #0
 80068fe:	4602      	mov	r2, r0
 8006900:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006902:	6a21      	ldr	r1, [r4, #32]
 8006904:	4628      	mov	r0, r5
 8006906:	47b0      	blx	r6
 8006908:	1c43      	adds	r3, r0, #1
 800690a:	89a3      	ldrh	r3, [r4, #12]
 800690c:	d106      	bne.n	800691c <__sflush_r+0x68>
 800690e:	6829      	ldr	r1, [r5, #0]
 8006910:	291d      	cmp	r1, #29
 8006912:	d848      	bhi.n	80069a6 <__sflush_r+0xf2>
 8006914:	4a29      	ldr	r2, [pc, #164]	; (80069bc <__sflush_r+0x108>)
 8006916:	40ca      	lsrs	r2, r1
 8006918:	07d6      	lsls	r6, r2, #31
 800691a:	d544      	bpl.n	80069a6 <__sflush_r+0xf2>
 800691c:	2200      	movs	r2, #0
 800691e:	6062      	str	r2, [r4, #4]
 8006920:	04d9      	lsls	r1, r3, #19
 8006922:	6922      	ldr	r2, [r4, #16]
 8006924:	6022      	str	r2, [r4, #0]
 8006926:	d504      	bpl.n	8006932 <__sflush_r+0x7e>
 8006928:	1c42      	adds	r2, r0, #1
 800692a:	d101      	bne.n	8006930 <__sflush_r+0x7c>
 800692c:	682b      	ldr	r3, [r5, #0]
 800692e:	b903      	cbnz	r3, 8006932 <__sflush_r+0x7e>
 8006930:	6560      	str	r0, [r4, #84]	; 0x54
 8006932:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006934:	602f      	str	r7, [r5, #0]
 8006936:	2900      	cmp	r1, #0
 8006938:	d0c9      	beq.n	80068ce <__sflush_r+0x1a>
 800693a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800693e:	4299      	cmp	r1, r3
 8006940:	d002      	beq.n	8006948 <__sflush_r+0x94>
 8006942:	4628      	mov	r0, r5
 8006944:	f000 f99c 	bl	8006c80 <_free_r>
 8006948:	2000      	movs	r0, #0
 800694a:	6360      	str	r0, [r4, #52]	; 0x34
 800694c:	e7c0      	b.n	80068d0 <__sflush_r+0x1c>
 800694e:	2301      	movs	r3, #1
 8006950:	4628      	mov	r0, r5
 8006952:	47b0      	blx	r6
 8006954:	1c41      	adds	r1, r0, #1
 8006956:	d1c8      	bne.n	80068ea <__sflush_r+0x36>
 8006958:	682b      	ldr	r3, [r5, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d0c5      	beq.n	80068ea <__sflush_r+0x36>
 800695e:	2b1d      	cmp	r3, #29
 8006960:	d001      	beq.n	8006966 <__sflush_r+0xb2>
 8006962:	2b16      	cmp	r3, #22
 8006964:	d101      	bne.n	800696a <__sflush_r+0xb6>
 8006966:	602f      	str	r7, [r5, #0]
 8006968:	e7b1      	b.n	80068ce <__sflush_r+0x1a>
 800696a:	89a3      	ldrh	r3, [r4, #12]
 800696c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006970:	81a3      	strh	r3, [r4, #12]
 8006972:	e7ad      	b.n	80068d0 <__sflush_r+0x1c>
 8006974:	690f      	ldr	r7, [r1, #16]
 8006976:	2f00      	cmp	r7, #0
 8006978:	d0a9      	beq.n	80068ce <__sflush_r+0x1a>
 800697a:	0793      	lsls	r3, r2, #30
 800697c:	680e      	ldr	r6, [r1, #0]
 800697e:	bf08      	it	eq
 8006980:	694b      	ldreq	r3, [r1, #20]
 8006982:	600f      	str	r7, [r1, #0]
 8006984:	bf18      	it	ne
 8006986:	2300      	movne	r3, #0
 8006988:	eba6 0807 	sub.w	r8, r6, r7
 800698c:	608b      	str	r3, [r1, #8]
 800698e:	f1b8 0f00 	cmp.w	r8, #0
 8006992:	dd9c      	ble.n	80068ce <__sflush_r+0x1a>
 8006994:	4643      	mov	r3, r8
 8006996:	463a      	mov	r2, r7
 8006998:	6a21      	ldr	r1, [r4, #32]
 800699a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800699c:	4628      	mov	r0, r5
 800699e:	47b0      	blx	r6
 80069a0:	2800      	cmp	r0, #0
 80069a2:	dc06      	bgt.n	80069b2 <__sflush_r+0xfe>
 80069a4:	89a3      	ldrh	r3, [r4, #12]
 80069a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069aa:	81a3      	strh	r3, [r4, #12]
 80069ac:	f04f 30ff 	mov.w	r0, #4294967295
 80069b0:	e78e      	b.n	80068d0 <__sflush_r+0x1c>
 80069b2:	4407      	add	r7, r0
 80069b4:	eba8 0800 	sub.w	r8, r8, r0
 80069b8:	e7e9      	b.n	800698e <__sflush_r+0xda>
 80069ba:	bf00      	nop
 80069bc:	20400001 	.word	0x20400001

080069c0 <_fflush_r>:
 80069c0:	b538      	push	{r3, r4, r5, lr}
 80069c2:	690b      	ldr	r3, [r1, #16]
 80069c4:	4605      	mov	r5, r0
 80069c6:	460c      	mov	r4, r1
 80069c8:	b1db      	cbz	r3, 8006a02 <_fflush_r+0x42>
 80069ca:	b118      	cbz	r0, 80069d4 <_fflush_r+0x14>
 80069cc:	6983      	ldr	r3, [r0, #24]
 80069ce:	b90b      	cbnz	r3, 80069d4 <_fflush_r+0x14>
 80069d0:	f000 f860 	bl	8006a94 <__sinit>
 80069d4:	4b0c      	ldr	r3, [pc, #48]	; (8006a08 <_fflush_r+0x48>)
 80069d6:	429c      	cmp	r4, r3
 80069d8:	d109      	bne.n	80069ee <_fflush_r+0x2e>
 80069da:	686c      	ldr	r4, [r5, #4]
 80069dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069e0:	b17b      	cbz	r3, 8006a02 <_fflush_r+0x42>
 80069e2:	4621      	mov	r1, r4
 80069e4:	4628      	mov	r0, r5
 80069e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069ea:	f7ff bf63 	b.w	80068b4 <__sflush_r>
 80069ee:	4b07      	ldr	r3, [pc, #28]	; (8006a0c <_fflush_r+0x4c>)
 80069f0:	429c      	cmp	r4, r3
 80069f2:	d101      	bne.n	80069f8 <_fflush_r+0x38>
 80069f4:	68ac      	ldr	r4, [r5, #8]
 80069f6:	e7f1      	b.n	80069dc <_fflush_r+0x1c>
 80069f8:	4b05      	ldr	r3, [pc, #20]	; (8006a10 <_fflush_r+0x50>)
 80069fa:	429c      	cmp	r4, r3
 80069fc:	bf08      	it	eq
 80069fe:	68ec      	ldreq	r4, [r5, #12]
 8006a00:	e7ec      	b.n	80069dc <_fflush_r+0x1c>
 8006a02:	2000      	movs	r0, #0
 8006a04:	bd38      	pop	{r3, r4, r5, pc}
 8006a06:	bf00      	nop
 8006a08:	0800759c 	.word	0x0800759c
 8006a0c:	080075bc 	.word	0x080075bc
 8006a10:	0800757c 	.word	0x0800757c

08006a14 <std>:
 8006a14:	2300      	movs	r3, #0
 8006a16:	b510      	push	{r4, lr}
 8006a18:	4604      	mov	r4, r0
 8006a1a:	e9c0 3300 	strd	r3, r3, [r0]
 8006a1e:	6083      	str	r3, [r0, #8]
 8006a20:	8181      	strh	r1, [r0, #12]
 8006a22:	6643      	str	r3, [r0, #100]	; 0x64
 8006a24:	81c2      	strh	r2, [r0, #14]
 8006a26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a2a:	6183      	str	r3, [r0, #24]
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	2208      	movs	r2, #8
 8006a30:	305c      	adds	r0, #92	; 0x5c
 8006a32:	f7ff fd44 	bl	80064be <memset>
 8006a36:	4b05      	ldr	r3, [pc, #20]	; (8006a4c <std+0x38>)
 8006a38:	6263      	str	r3, [r4, #36]	; 0x24
 8006a3a:	4b05      	ldr	r3, [pc, #20]	; (8006a50 <std+0x3c>)
 8006a3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a3e:	4b05      	ldr	r3, [pc, #20]	; (8006a54 <std+0x40>)
 8006a40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a42:	4b05      	ldr	r3, [pc, #20]	; (8006a58 <std+0x44>)
 8006a44:	6224      	str	r4, [r4, #32]
 8006a46:	6323      	str	r3, [r4, #48]	; 0x30
 8006a48:	bd10      	pop	{r4, pc}
 8006a4a:	bf00      	nop
 8006a4c:	08007381 	.word	0x08007381
 8006a50:	080073a3 	.word	0x080073a3
 8006a54:	080073db 	.word	0x080073db
 8006a58:	080073ff 	.word	0x080073ff

08006a5c <_cleanup_r>:
 8006a5c:	4901      	ldr	r1, [pc, #4]	; (8006a64 <_cleanup_r+0x8>)
 8006a5e:	f000 b885 	b.w	8006b6c <_fwalk_reent>
 8006a62:	bf00      	nop
 8006a64:	080069c1 	.word	0x080069c1

08006a68 <__sfmoreglue>:
 8006a68:	b570      	push	{r4, r5, r6, lr}
 8006a6a:	1e4a      	subs	r2, r1, #1
 8006a6c:	2568      	movs	r5, #104	; 0x68
 8006a6e:	4355      	muls	r5, r2
 8006a70:	460e      	mov	r6, r1
 8006a72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006a76:	f000 f951 	bl	8006d1c <_malloc_r>
 8006a7a:	4604      	mov	r4, r0
 8006a7c:	b140      	cbz	r0, 8006a90 <__sfmoreglue+0x28>
 8006a7e:	2100      	movs	r1, #0
 8006a80:	e9c0 1600 	strd	r1, r6, [r0]
 8006a84:	300c      	adds	r0, #12
 8006a86:	60a0      	str	r0, [r4, #8]
 8006a88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a8c:	f7ff fd17 	bl	80064be <memset>
 8006a90:	4620      	mov	r0, r4
 8006a92:	bd70      	pop	{r4, r5, r6, pc}

08006a94 <__sinit>:
 8006a94:	6983      	ldr	r3, [r0, #24]
 8006a96:	b510      	push	{r4, lr}
 8006a98:	4604      	mov	r4, r0
 8006a9a:	bb33      	cbnz	r3, 8006aea <__sinit+0x56>
 8006a9c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006aa0:	6503      	str	r3, [r0, #80]	; 0x50
 8006aa2:	4b12      	ldr	r3, [pc, #72]	; (8006aec <__sinit+0x58>)
 8006aa4:	4a12      	ldr	r2, [pc, #72]	; (8006af0 <__sinit+0x5c>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6282      	str	r2, [r0, #40]	; 0x28
 8006aaa:	4298      	cmp	r0, r3
 8006aac:	bf04      	itt	eq
 8006aae:	2301      	moveq	r3, #1
 8006ab0:	6183      	streq	r3, [r0, #24]
 8006ab2:	f000 f81f 	bl	8006af4 <__sfp>
 8006ab6:	6060      	str	r0, [r4, #4]
 8006ab8:	4620      	mov	r0, r4
 8006aba:	f000 f81b 	bl	8006af4 <__sfp>
 8006abe:	60a0      	str	r0, [r4, #8]
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f000 f817 	bl	8006af4 <__sfp>
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	60e0      	str	r0, [r4, #12]
 8006aca:	2104      	movs	r1, #4
 8006acc:	6860      	ldr	r0, [r4, #4]
 8006ace:	f7ff ffa1 	bl	8006a14 <std>
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	2109      	movs	r1, #9
 8006ad6:	68a0      	ldr	r0, [r4, #8]
 8006ad8:	f7ff ff9c 	bl	8006a14 <std>
 8006adc:	2202      	movs	r2, #2
 8006ade:	2112      	movs	r1, #18
 8006ae0:	68e0      	ldr	r0, [r4, #12]
 8006ae2:	f7ff ff97 	bl	8006a14 <std>
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	61a3      	str	r3, [r4, #24]
 8006aea:	bd10      	pop	{r4, pc}
 8006aec:	08007578 	.word	0x08007578
 8006af0:	08006a5d 	.word	0x08006a5d

08006af4 <__sfp>:
 8006af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006af6:	4b1b      	ldr	r3, [pc, #108]	; (8006b64 <__sfp+0x70>)
 8006af8:	681e      	ldr	r6, [r3, #0]
 8006afa:	69b3      	ldr	r3, [r6, #24]
 8006afc:	4607      	mov	r7, r0
 8006afe:	b913      	cbnz	r3, 8006b06 <__sfp+0x12>
 8006b00:	4630      	mov	r0, r6
 8006b02:	f7ff ffc7 	bl	8006a94 <__sinit>
 8006b06:	3648      	adds	r6, #72	; 0x48
 8006b08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	d503      	bpl.n	8006b18 <__sfp+0x24>
 8006b10:	6833      	ldr	r3, [r6, #0]
 8006b12:	b133      	cbz	r3, 8006b22 <__sfp+0x2e>
 8006b14:	6836      	ldr	r6, [r6, #0]
 8006b16:	e7f7      	b.n	8006b08 <__sfp+0x14>
 8006b18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006b1c:	b16d      	cbz	r5, 8006b3a <__sfp+0x46>
 8006b1e:	3468      	adds	r4, #104	; 0x68
 8006b20:	e7f4      	b.n	8006b0c <__sfp+0x18>
 8006b22:	2104      	movs	r1, #4
 8006b24:	4638      	mov	r0, r7
 8006b26:	f7ff ff9f 	bl	8006a68 <__sfmoreglue>
 8006b2a:	6030      	str	r0, [r6, #0]
 8006b2c:	2800      	cmp	r0, #0
 8006b2e:	d1f1      	bne.n	8006b14 <__sfp+0x20>
 8006b30:	230c      	movs	r3, #12
 8006b32:	603b      	str	r3, [r7, #0]
 8006b34:	4604      	mov	r4, r0
 8006b36:	4620      	mov	r0, r4
 8006b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b3a:	4b0b      	ldr	r3, [pc, #44]	; (8006b68 <__sfp+0x74>)
 8006b3c:	6665      	str	r5, [r4, #100]	; 0x64
 8006b3e:	e9c4 5500 	strd	r5, r5, [r4]
 8006b42:	60a5      	str	r5, [r4, #8]
 8006b44:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006b48:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006b4c:	2208      	movs	r2, #8
 8006b4e:	4629      	mov	r1, r5
 8006b50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006b54:	f7ff fcb3 	bl	80064be <memset>
 8006b58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006b5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006b60:	e7e9      	b.n	8006b36 <__sfp+0x42>
 8006b62:	bf00      	nop
 8006b64:	08007578 	.word	0x08007578
 8006b68:	ffff0001 	.word	0xffff0001

08006b6c <_fwalk_reent>:
 8006b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b70:	4680      	mov	r8, r0
 8006b72:	4689      	mov	r9, r1
 8006b74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b78:	2600      	movs	r6, #0
 8006b7a:	b914      	cbnz	r4, 8006b82 <_fwalk_reent+0x16>
 8006b7c:	4630      	mov	r0, r6
 8006b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b82:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006b86:	3f01      	subs	r7, #1
 8006b88:	d501      	bpl.n	8006b8e <_fwalk_reent+0x22>
 8006b8a:	6824      	ldr	r4, [r4, #0]
 8006b8c:	e7f5      	b.n	8006b7a <_fwalk_reent+0xe>
 8006b8e:	89ab      	ldrh	r3, [r5, #12]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d907      	bls.n	8006ba4 <_fwalk_reent+0x38>
 8006b94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	d003      	beq.n	8006ba4 <_fwalk_reent+0x38>
 8006b9c:	4629      	mov	r1, r5
 8006b9e:	4640      	mov	r0, r8
 8006ba0:	47c8      	blx	r9
 8006ba2:	4306      	orrs	r6, r0
 8006ba4:	3568      	adds	r5, #104	; 0x68
 8006ba6:	e7ee      	b.n	8006b86 <_fwalk_reent+0x1a>

08006ba8 <__swhatbuf_r>:
 8006ba8:	b570      	push	{r4, r5, r6, lr}
 8006baa:	460e      	mov	r6, r1
 8006bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bb0:	2900      	cmp	r1, #0
 8006bb2:	b096      	sub	sp, #88	; 0x58
 8006bb4:	4614      	mov	r4, r2
 8006bb6:	461d      	mov	r5, r3
 8006bb8:	da07      	bge.n	8006bca <__swhatbuf_r+0x22>
 8006bba:	2300      	movs	r3, #0
 8006bbc:	602b      	str	r3, [r5, #0]
 8006bbe:	89b3      	ldrh	r3, [r6, #12]
 8006bc0:	061a      	lsls	r2, r3, #24
 8006bc2:	d410      	bmi.n	8006be6 <__swhatbuf_r+0x3e>
 8006bc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bc8:	e00e      	b.n	8006be8 <__swhatbuf_r+0x40>
 8006bca:	466a      	mov	r2, sp
 8006bcc:	f000 fc3e 	bl	800744c <_fstat_r>
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	dbf2      	blt.n	8006bba <__swhatbuf_r+0x12>
 8006bd4:	9a01      	ldr	r2, [sp, #4]
 8006bd6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006bda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006bde:	425a      	negs	r2, r3
 8006be0:	415a      	adcs	r2, r3
 8006be2:	602a      	str	r2, [r5, #0]
 8006be4:	e7ee      	b.n	8006bc4 <__swhatbuf_r+0x1c>
 8006be6:	2340      	movs	r3, #64	; 0x40
 8006be8:	2000      	movs	r0, #0
 8006bea:	6023      	str	r3, [r4, #0]
 8006bec:	b016      	add	sp, #88	; 0x58
 8006bee:	bd70      	pop	{r4, r5, r6, pc}

08006bf0 <__smakebuf_r>:
 8006bf0:	898b      	ldrh	r3, [r1, #12]
 8006bf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006bf4:	079d      	lsls	r5, r3, #30
 8006bf6:	4606      	mov	r6, r0
 8006bf8:	460c      	mov	r4, r1
 8006bfa:	d507      	bpl.n	8006c0c <__smakebuf_r+0x1c>
 8006bfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c00:	6023      	str	r3, [r4, #0]
 8006c02:	6123      	str	r3, [r4, #16]
 8006c04:	2301      	movs	r3, #1
 8006c06:	6163      	str	r3, [r4, #20]
 8006c08:	b002      	add	sp, #8
 8006c0a:	bd70      	pop	{r4, r5, r6, pc}
 8006c0c:	ab01      	add	r3, sp, #4
 8006c0e:	466a      	mov	r2, sp
 8006c10:	f7ff ffca 	bl	8006ba8 <__swhatbuf_r>
 8006c14:	9900      	ldr	r1, [sp, #0]
 8006c16:	4605      	mov	r5, r0
 8006c18:	4630      	mov	r0, r6
 8006c1a:	f000 f87f 	bl	8006d1c <_malloc_r>
 8006c1e:	b948      	cbnz	r0, 8006c34 <__smakebuf_r+0x44>
 8006c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c24:	059a      	lsls	r2, r3, #22
 8006c26:	d4ef      	bmi.n	8006c08 <__smakebuf_r+0x18>
 8006c28:	f023 0303 	bic.w	r3, r3, #3
 8006c2c:	f043 0302 	orr.w	r3, r3, #2
 8006c30:	81a3      	strh	r3, [r4, #12]
 8006c32:	e7e3      	b.n	8006bfc <__smakebuf_r+0xc>
 8006c34:	4b0d      	ldr	r3, [pc, #52]	; (8006c6c <__smakebuf_r+0x7c>)
 8006c36:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c38:	89a3      	ldrh	r3, [r4, #12]
 8006c3a:	6020      	str	r0, [r4, #0]
 8006c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c40:	81a3      	strh	r3, [r4, #12]
 8006c42:	9b00      	ldr	r3, [sp, #0]
 8006c44:	6163      	str	r3, [r4, #20]
 8006c46:	9b01      	ldr	r3, [sp, #4]
 8006c48:	6120      	str	r0, [r4, #16]
 8006c4a:	b15b      	cbz	r3, 8006c64 <__smakebuf_r+0x74>
 8006c4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c50:	4630      	mov	r0, r6
 8006c52:	f000 fc0d 	bl	8007470 <_isatty_r>
 8006c56:	b128      	cbz	r0, 8006c64 <__smakebuf_r+0x74>
 8006c58:	89a3      	ldrh	r3, [r4, #12]
 8006c5a:	f023 0303 	bic.w	r3, r3, #3
 8006c5e:	f043 0301 	orr.w	r3, r3, #1
 8006c62:	81a3      	strh	r3, [r4, #12]
 8006c64:	89a3      	ldrh	r3, [r4, #12]
 8006c66:	431d      	orrs	r5, r3
 8006c68:	81a5      	strh	r5, [r4, #12]
 8006c6a:	e7cd      	b.n	8006c08 <__smakebuf_r+0x18>
 8006c6c:	08006a5d 	.word	0x08006a5d

08006c70 <malloc>:
 8006c70:	4b02      	ldr	r3, [pc, #8]	; (8006c7c <malloc+0xc>)
 8006c72:	4601      	mov	r1, r0
 8006c74:	6818      	ldr	r0, [r3, #0]
 8006c76:	f000 b851 	b.w	8006d1c <_malloc_r>
 8006c7a:	bf00      	nop
 8006c7c:	2000000c 	.word	0x2000000c

08006c80 <_free_r>:
 8006c80:	b538      	push	{r3, r4, r5, lr}
 8006c82:	4605      	mov	r5, r0
 8006c84:	2900      	cmp	r1, #0
 8006c86:	d045      	beq.n	8006d14 <_free_r+0x94>
 8006c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c8c:	1f0c      	subs	r4, r1, #4
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	bfb8      	it	lt
 8006c92:	18e4      	addlt	r4, r4, r3
 8006c94:	f000 fc0e 	bl	80074b4 <__malloc_lock>
 8006c98:	4a1f      	ldr	r2, [pc, #124]	; (8006d18 <_free_r+0x98>)
 8006c9a:	6813      	ldr	r3, [r2, #0]
 8006c9c:	4610      	mov	r0, r2
 8006c9e:	b933      	cbnz	r3, 8006cae <_free_r+0x2e>
 8006ca0:	6063      	str	r3, [r4, #4]
 8006ca2:	6014      	str	r4, [r2, #0]
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006caa:	f000 bc04 	b.w	80074b6 <__malloc_unlock>
 8006cae:	42a3      	cmp	r3, r4
 8006cb0:	d90c      	bls.n	8006ccc <_free_r+0x4c>
 8006cb2:	6821      	ldr	r1, [r4, #0]
 8006cb4:	1862      	adds	r2, r4, r1
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	bf04      	itt	eq
 8006cba:	681a      	ldreq	r2, [r3, #0]
 8006cbc:	685b      	ldreq	r3, [r3, #4]
 8006cbe:	6063      	str	r3, [r4, #4]
 8006cc0:	bf04      	itt	eq
 8006cc2:	1852      	addeq	r2, r2, r1
 8006cc4:	6022      	streq	r2, [r4, #0]
 8006cc6:	6004      	str	r4, [r0, #0]
 8006cc8:	e7ec      	b.n	8006ca4 <_free_r+0x24>
 8006cca:	4613      	mov	r3, r2
 8006ccc:	685a      	ldr	r2, [r3, #4]
 8006cce:	b10a      	cbz	r2, 8006cd4 <_free_r+0x54>
 8006cd0:	42a2      	cmp	r2, r4
 8006cd2:	d9fa      	bls.n	8006cca <_free_r+0x4a>
 8006cd4:	6819      	ldr	r1, [r3, #0]
 8006cd6:	1858      	adds	r0, r3, r1
 8006cd8:	42a0      	cmp	r0, r4
 8006cda:	d10b      	bne.n	8006cf4 <_free_r+0x74>
 8006cdc:	6820      	ldr	r0, [r4, #0]
 8006cde:	4401      	add	r1, r0
 8006ce0:	1858      	adds	r0, r3, r1
 8006ce2:	4282      	cmp	r2, r0
 8006ce4:	6019      	str	r1, [r3, #0]
 8006ce6:	d1dd      	bne.n	8006ca4 <_free_r+0x24>
 8006ce8:	6810      	ldr	r0, [r2, #0]
 8006cea:	6852      	ldr	r2, [r2, #4]
 8006cec:	605a      	str	r2, [r3, #4]
 8006cee:	4401      	add	r1, r0
 8006cf0:	6019      	str	r1, [r3, #0]
 8006cf2:	e7d7      	b.n	8006ca4 <_free_r+0x24>
 8006cf4:	d902      	bls.n	8006cfc <_free_r+0x7c>
 8006cf6:	230c      	movs	r3, #12
 8006cf8:	602b      	str	r3, [r5, #0]
 8006cfa:	e7d3      	b.n	8006ca4 <_free_r+0x24>
 8006cfc:	6820      	ldr	r0, [r4, #0]
 8006cfe:	1821      	adds	r1, r4, r0
 8006d00:	428a      	cmp	r2, r1
 8006d02:	bf04      	itt	eq
 8006d04:	6811      	ldreq	r1, [r2, #0]
 8006d06:	6852      	ldreq	r2, [r2, #4]
 8006d08:	6062      	str	r2, [r4, #4]
 8006d0a:	bf04      	itt	eq
 8006d0c:	1809      	addeq	r1, r1, r0
 8006d0e:	6021      	streq	r1, [r4, #0]
 8006d10:	605c      	str	r4, [r3, #4]
 8006d12:	e7c7      	b.n	8006ca4 <_free_r+0x24>
 8006d14:	bd38      	pop	{r3, r4, r5, pc}
 8006d16:	bf00      	nop
 8006d18:	200000ac 	.word	0x200000ac

08006d1c <_malloc_r>:
 8006d1c:	b570      	push	{r4, r5, r6, lr}
 8006d1e:	1ccd      	adds	r5, r1, #3
 8006d20:	f025 0503 	bic.w	r5, r5, #3
 8006d24:	3508      	adds	r5, #8
 8006d26:	2d0c      	cmp	r5, #12
 8006d28:	bf38      	it	cc
 8006d2a:	250c      	movcc	r5, #12
 8006d2c:	2d00      	cmp	r5, #0
 8006d2e:	4606      	mov	r6, r0
 8006d30:	db01      	blt.n	8006d36 <_malloc_r+0x1a>
 8006d32:	42a9      	cmp	r1, r5
 8006d34:	d903      	bls.n	8006d3e <_malloc_r+0x22>
 8006d36:	230c      	movs	r3, #12
 8006d38:	6033      	str	r3, [r6, #0]
 8006d3a:	2000      	movs	r0, #0
 8006d3c:	bd70      	pop	{r4, r5, r6, pc}
 8006d3e:	f000 fbb9 	bl	80074b4 <__malloc_lock>
 8006d42:	4a21      	ldr	r2, [pc, #132]	; (8006dc8 <_malloc_r+0xac>)
 8006d44:	6814      	ldr	r4, [r2, #0]
 8006d46:	4621      	mov	r1, r4
 8006d48:	b991      	cbnz	r1, 8006d70 <_malloc_r+0x54>
 8006d4a:	4c20      	ldr	r4, [pc, #128]	; (8006dcc <_malloc_r+0xb0>)
 8006d4c:	6823      	ldr	r3, [r4, #0]
 8006d4e:	b91b      	cbnz	r3, 8006d58 <_malloc_r+0x3c>
 8006d50:	4630      	mov	r0, r6
 8006d52:	f000 fb05 	bl	8007360 <_sbrk_r>
 8006d56:	6020      	str	r0, [r4, #0]
 8006d58:	4629      	mov	r1, r5
 8006d5a:	4630      	mov	r0, r6
 8006d5c:	f000 fb00 	bl	8007360 <_sbrk_r>
 8006d60:	1c43      	adds	r3, r0, #1
 8006d62:	d124      	bne.n	8006dae <_malloc_r+0x92>
 8006d64:	230c      	movs	r3, #12
 8006d66:	6033      	str	r3, [r6, #0]
 8006d68:	4630      	mov	r0, r6
 8006d6a:	f000 fba4 	bl	80074b6 <__malloc_unlock>
 8006d6e:	e7e4      	b.n	8006d3a <_malloc_r+0x1e>
 8006d70:	680b      	ldr	r3, [r1, #0]
 8006d72:	1b5b      	subs	r3, r3, r5
 8006d74:	d418      	bmi.n	8006da8 <_malloc_r+0x8c>
 8006d76:	2b0b      	cmp	r3, #11
 8006d78:	d90f      	bls.n	8006d9a <_malloc_r+0x7e>
 8006d7a:	600b      	str	r3, [r1, #0]
 8006d7c:	50cd      	str	r5, [r1, r3]
 8006d7e:	18cc      	adds	r4, r1, r3
 8006d80:	4630      	mov	r0, r6
 8006d82:	f000 fb98 	bl	80074b6 <__malloc_unlock>
 8006d86:	f104 000b 	add.w	r0, r4, #11
 8006d8a:	1d23      	adds	r3, r4, #4
 8006d8c:	f020 0007 	bic.w	r0, r0, #7
 8006d90:	1ac3      	subs	r3, r0, r3
 8006d92:	d0d3      	beq.n	8006d3c <_malloc_r+0x20>
 8006d94:	425a      	negs	r2, r3
 8006d96:	50e2      	str	r2, [r4, r3]
 8006d98:	e7d0      	b.n	8006d3c <_malloc_r+0x20>
 8006d9a:	428c      	cmp	r4, r1
 8006d9c:	684b      	ldr	r3, [r1, #4]
 8006d9e:	bf16      	itet	ne
 8006da0:	6063      	strne	r3, [r4, #4]
 8006da2:	6013      	streq	r3, [r2, #0]
 8006da4:	460c      	movne	r4, r1
 8006da6:	e7eb      	b.n	8006d80 <_malloc_r+0x64>
 8006da8:	460c      	mov	r4, r1
 8006daa:	6849      	ldr	r1, [r1, #4]
 8006dac:	e7cc      	b.n	8006d48 <_malloc_r+0x2c>
 8006dae:	1cc4      	adds	r4, r0, #3
 8006db0:	f024 0403 	bic.w	r4, r4, #3
 8006db4:	42a0      	cmp	r0, r4
 8006db6:	d005      	beq.n	8006dc4 <_malloc_r+0xa8>
 8006db8:	1a21      	subs	r1, r4, r0
 8006dba:	4630      	mov	r0, r6
 8006dbc:	f000 fad0 	bl	8007360 <_sbrk_r>
 8006dc0:	3001      	adds	r0, #1
 8006dc2:	d0cf      	beq.n	8006d64 <_malloc_r+0x48>
 8006dc4:	6025      	str	r5, [r4, #0]
 8006dc6:	e7db      	b.n	8006d80 <_malloc_r+0x64>
 8006dc8:	200000ac 	.word	0x200000ac
 8006dcc:	200000b0 	.word	0x200000b0

08006dd0 <__sfputc_r>:
 8006dd0:	6893      	ldr	r3, [r2, #8]
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	b410      	push	{r4}
 8006dd8:	6093      	str	r3, [r2, #8]
 8006dda:	da08      	bge.n	8006dee <__sfputc_r+0x1e>
 8006ddc:	6994      	ldr	r4, [r2, #24]
 8006dde:	42a3      	cmp	r3, r4
 8006de0:	db01      	blt.n	8006de6 <__sfputc_r+0x16>
 8006de2:	290a      	cmp	r1, #10
 8006de4:	d103      	bne.n	8006dee <__sfputc_r+0x1e>
 8006de6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006dea:	f7ff bca3 	b.w	8006734 <__swbuf_r>
 8006dee:	6813      	ldr	r3, [r2, #0]
 8006df0:	1c58      	adds	r0, r3, #1
 8006df2:	6010      	str	r0, [r2, #0]
 8006df4:	7019      	strb	r1, [r3, #0]
 8006df6:	4608      	mov	r0, r1
 8006df8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <__sfputs_r>:
 8006dfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e00:	4606      	mov	r6, r0
 8006e02:	460f      	mov	r7, r1
 8006e04:	4614      	mov	r4, r2
 8006e06:	18d5      	adds	r5, r2, r3
 8006e08:	42ac      	cmp	r4, r5
 8006e0a:	d101      	bne.n	8006e10 <__sfputs_r+0x12>
 8006e0c:	2000      	movs	r0, #0
 8006e0e:	e007      	b.n	8006e20 <__sfputs_r+0x22>
 8006e10:	463a      	mov	r2, r7
 8006e12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e16:	4630      	mov	r0, r6
 8006e18:	f7ff ffda 	bl	8006dd0 <__sfputc_r>
 8006e1c:	1c43      	adds	r3, r0, #1
 8006e1e:	d1f3      	bne.n	8006e08 <__sfputs_r+0xa>
 8006e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e24 <_vfiprintf_r>:
 8006e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e28:	460c      	mov	r4, r1
 8006e2a:	b09d      	sub	sp, #116	; 0x74
 8006e2c:	4617      	mov	r7, r2
 8006e2e:	461d      	mov	r5, r3
 8006e30:	4606      	mov	r6, r0
 8006e32:	b118      	cbz	r0, 8006e3c <_vfiprintf_r+0x18>
 8006e34:	6983      	ldr	r3, [r0, #24]
 8006e36:	b90b      	cbnz	r3, 8006e3c <_vfiprintf_r+0x18>
 8006e38:	f7ff fe2c 	bl	8006a94 <__sinit>
 8006e3c:	4b7c      	ldr	r3, [pc, #496]	; (8007030 <_vfiprintf_r+0x20c>)
 8006e3e:	429c      	cmp	r4, r3
 8006e40:	d158      	bne.n	8006ef4 <_vfiprintf_r+0xd0>
 8006e42:	6874      	ldr	r4, [r6, #4]
 8006e44:	89a3      	ldrh	r3, [r4, #12]
 8006e46:	0718      	lsls	r0, r3, #28
 8006e48:	d55e      	bpl.n	8006f08 <_vfiprintf_r+0xe4>
 8006e4a:	6923      	ldr	r3, [r4, #16]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d05b      	beq.n	8006f08 <_vfiprintf_r+0xe4>
 8006e50:	2300      	movs	r3, #0
 8006e52:	9309      	str	r3, [sp, #36]	; 0x24
 8006e54:	2320      	movs	r3, #32
 8006e56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e5a:	2330      	movs	r3, #48	; 0x30
 8006e5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e60:	9503      	str	r5, [sp, #12]
 8006e62:	f04f 0b01 	mov.w	fp, #1
 8006e66:	46b8      	mov	r8, r7
 8006e68:	4645      	mov	r5, r8
 8006e6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006e6e:	b10b      	cbz	r3, 8006e74 <_vfiprintf_r+0x50>
 8006e70:	2b25      	cmp	r3, #37	; 0x25
 8006e72:	d154      	bne.n	8006f1e <_vfiprintf_r+0xfa>
 8006e74:	ebb8 0a07 	subs.w	sl, r8, r7
 8006e78:	d00b      	beq.n	8006e92 <_vfiprintf_r+0x6e>
 8006e7a:	4653      	mov	r3, sl
 8006e7c:	463a      	mov	r2, r7
 8006e7e:	4621      	mov	r1, r4
 8006e80:	4630      	mov	r0, r6
 8006e82:	f7ff ffbc 	bl	8006dfe <__sfputs_r>
 8006e86:	3001      	adds	r0, #1
 8006e88:	f000 80c2 	beq.w	8007010 <_vfiprintf_r+0x1ec>
 8006e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e8e:	4453      	add	r3, sl
 8006e90:	9309      	str	r3, [sp, #36]	; 0x24
 8006e92:	f898 3000 	ldrb.w	r3, [r8]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f000 80ba 	beq.w	8007010 <_vfiprintf_r+0x1ec>
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ea6:	9304      	str	r3, [sp, #16]
 8006ea8:	9307      	str	r3, [sp, #28]
 8006eaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006eae:	931a      	str	r3, [sp, #104]	; 0x68
 8006eb0:	46a8      	mov	r8, r5
 8006eb2:	2205      	movs	r2, #5
 8006eb4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006eb8:	485e      	ldr	r0, [pc, #376]	; (8007034 <_vfiprintf_r+0x210>)
 8006eba:	f7f9 f999 	bl	80001f0 <memchr>
 8006ebe:	9b04      	ldr	r3, [sp, #16]
 8006ec0:	bb78      	cbnz	r0, 8006f22 <_vfiprintf_r+0xfe>
 8006ec2:	06d9      	lsls	r1, r3, #27
 8006ec4:	bf44      	itt	mi
 8006ec6:	2220      	movmi	r2, #32
 8006ec8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006ecc:	071a      	lsls	r2, r3, #28
 8006ece:	bf44      	itt	mi
 8006ed0:	222b      	movmi	r2, #43	; 0x2b
 8006ed2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006ed6:	782a      	ldrb	r2, [r5, #0]
 8006ed8:	2a2a      	cmp	r2, #42	; 0x2a
 8006eda:	d02a      	beq.n	8006f32 <_vfiprintf_r+0x10e>
 8006edc:	9a07      	ldr	r2, [sp, #28]
 8006ede:	46a8      	mov	r8, r5
 8006ee0:	2000      	movs	r0, #0
 8006ee2:	250a      	movs	r5, #10
 8006ee4:	4641      	mov	r1, r8
 8006ee6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006eea:	3b30      	subs	r3, #48	; 0x30
 8006eec:	2b09      	cmp	r3, #9
 8006eee:	d969      	bls.n	8006fc4 <_vfiprintf_r+0x1a0>
 8006ef0:	b360      	cbz	r0, 8006f4c <_vfiprintf_r+0x128>
 8006ef2:	e024      	b.n	8006f3e <_vfiprintf_r+0x11a>
 8006ef4:	4b50      	ldr	r3, [pc, #320]	; (8007038 <_vfiprintf_r+0x214>)
 8006ef6:	429c      	cmp	r4, r3
 8006ef8:	d101      	bne.n	8006efe <_vfiprintf_r+0xda>
 8006efa:	68b4      	ldr	r4, [r6, #8]
 8006efc:	e7a2      	b.n	8006e44 <_vfiprintf_r+0x20>
 8006efe:	4b4f      	ldr	r3, [pc, #316]	; (800703c <_vfiprintf_r+0x218>)
 8006f00:	429c      	cmp	r4, r3
 8006f02:	bf08      	it	eq
 8006f04:	68f4      	ldreq	r4, [r6, #12]
 8006f06:	e79d      	b.n	8006e44 <_vfiprintf_r+0x20>
 8006f08:	4621      	mov	r1, r4
 8006f0a:	4630      	mov	r0, r6
 8006f0c:	f7ff fc64 	bl	80067d8 <__swsetup_r>
 8006f10:	2800      	cmp	r0, #0
 8006f12:	d09d      	beq.n	8006e50 <_vfiprintf_r+0x2c>
 8006f14:	f04f 30ff 	mov.w	r0, #4294967295
 8006f18:	b01d      	add	sp, #116	; 0x74
 8006f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f1e:	46a8      	mov	r8, r5
 8006f20:	e7a2      	b.n	8006e68 <_vfiprintf_r+0x44>
 8006f22:	4a44      	ldr	r2, [pc, #272]	; (8007034 <_vfiprintf_r+0x210>)
 8006f24:	1a80      	subs	r0, r0, r2
 8006f26:	fa0b f000 	lsl.w	r0, fp, r0
 8006f2a:	4318      	orrs	r0, r3
 8006f2c:	9004      	str	r0, [sp, #16]
 8006f2e:	4645      	mov	r5, r8
 8006f30:	e7be      	b.n	8006eb0 <_vfiprintf_r+0x8c>
 8006f32:	9a03      	ldr	r2, [sp, #12]
 8006f34:	1d11      	adds	r1, r2, #4
 8006f36:	6812      	ldr	r2, [r2, #0]
 8006f38:	9103      	str	r1, [sp, #12]
 8006f3a:	2a00      	cmp	r2, #0
 8006f3c:	db01      	blt.n	8006f42 <_vfiprintf_r+0x11e>
 8006f3e:	9207      	str	r2, [sp, #28]
 8006f40:	e004      	b.n	8006f4c <_vfiprintf_r+0x128>
 8006f42:	4252      	negs	r2, r2
 8006f44:	f043 0302 	orr.w	r3, r3, #2
 8006f48:	9207      	str	r2, [sp, #28]
 8006f4a:	9304      	str	r3, [sp, #16]
 8006f4c:	f898 3000 	ldrb.w	r3, [r8]
 8006f50:	2b2e      	cmp	r3, #46	; 0x2e
 8006f52:	d10e      	bne.n	8006f72 <_vfiprintf_r+0x14e>
 8006f54:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006f58:	2b2a      	cmp	r3, #42	; 0x2a
 8006f5a:	d138      	bne.n	8006fce <_vfiprintf_r+0x1aa>
 8006f5c:	9b03      	ldr	r3, [sp, #12]
 8006f5e:	1d1a      	adds	r2, r3, #4
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	9203      	str	r2, [sp, #12]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	bfb8      	it	lt
 8006f68:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f6c:	f108 0802 	add.w	r8, r8, #2
 8006f70:	9305      	str	r3, [sp, #20]
 8006f72:	4d33      	ldr	r5, [pc, #204]	; (8007040 <_vfiprintf_r+0x21c>)
 8006f74:	f898 1000 	ldrb.w	r1, [r8]
 8006f78:	2203      	movs	r2, #3
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	f7f9 f938 	bl	80001f0 <memchr>
 8006f80:	b140      	cbz	r0, 8006f94 <_vfiprintf_r+0x170>
 8006f82:	2340      	movs	r3, #64	; 0x40
 8006f84:	1b40      	subs	r0, r0, r5
 8006f86:	fa03 f000 	lsl.w	r0, r3, r0
 8006f8a:	9b04      	ldr	r3, [sp, #16]
 8006f8c:	4303      	orrs	r3, r0
 8006f8e:	f108 0801 	add.w	r8, r8, #1
 8006f92:	9304      	str	r3, [sp, #16]
 8006f94:	f898 1000 	ldrb.w	r1, [r8]
 8006f98:	482a      	ldr	r0, [pc, #168]	; (8007044 <_vfiprintf_r+0x220>)
 8006f9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f9e:	2206      	movs	r2, #6
 8006fa0:	f108 0701 	add.w	r7, r8, #1
 8006fa4:	f7f9 f924 	bl	80001f0 <memchr>
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	d037      	beq.n	800701c <_vfiprintf_r+0x1f8>
 8006fac:	4b26      	ldr	r3, [pc, #152]	; (8007048 <_vfiprintf_r+0x224>)
 8006fae:	bb1b      	cbnz	r3, 8006ff8 <_vfiprintf_r+0x1d4>
 8006fb0:	9b03      	ldr	r3, [sp, #12]
 8006fb2:	3307      	adds	r3, #7
 8006fb4:	f023 0307 	bic.w	r3, r3, #7
 8006fb8:	3308      	adds	r3, #8
 8006fba:	9303      	str	r3, [sp, #12]
 8006fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fbe:	444b      	add	r3, r9
 8006fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8006fc2:	e750      	b.n	8006e66 <_vfiprintf_r+0x42>
 8006fc4:	fb05 3202 	mla	r2, r5, r2, r3
 8006fc8:	2001      	movs	r0, #1
 8006fca:	4688      	mov	r8, r1
 8006fcc:	e78a      	b.n	8006ee4 <_vfiprintf_r+0xc0>
 8006fce:	2300      	movs	r3, #0
 8006fd0:	f108 0801 	add.w	r8, r8, #1
 8006fd4:	9305      	str	r3, [sp, #20]
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	250a      	movs	r5, #10
 8006fda:	4640      	mov	r0, r8
 8006fdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fe0:	3a30      	subs	r2, #48	; 0x30
 8006fe2:	2a09      	cmp	r2, #9
 8006fe4:	d903      	bls.n	8006fee <_vfiprintf_r+0x1ca>
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d0c3      	beq.n	8006f72 <_vfiprintf_r+0x14e>
 8006fea:	9105      	str	r1, [sp, #20]
 8006fec:	e7c1      	b.n	8006f72 <_vfiprintf_r+0x14e>
 8006fee:	fb05 2101 	mla	r1, r5, r1, r2
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	4680      	mov	r8, r0
 8006ff6:	e7f0      	b.n	8006fda <_vfiprintf_r+0x1b6>
 8006ff8:	ab03      	add	r3, sp, #12
 8006ffa:	9300      	str	r3, [sp, #0]
 8006ffc:	4622      	mov	r2, r4
 8006ffe:	4b13      	ldr	r3, [pc, #76]	; (800704c <_vfiprintf_r+0x228>)
 8007000:	a904      	add	r1, sp, #16
 8007002:	4630      	mov	r0, r6
 8007004:	f3af 8000 	nop.w
 8007008:	f1b0 3fff 	cmp.w	r0, #4294967295
 800700c:	4681      	mov	r9, r0
 800700e:	d1d5      	bne.n	8006fbc <_vfiprintf_r+0x198>
 8007010:	89a3      	ldrh	r3, [r4, #12]
 8007012:	065b      	lsls	r3, r3, #25
 8007014:	f53f af7e 	bmi.w	8006f14 <_vfiprintf_r+0xf0>
 8007018:	9809      	ldr	r0, [sp, #36]	; 0x24
 800701a:	e77d      	b.n	8006f18 <_vfiprintf_r+0xf4>
 800701c:	ab03      	add	r3, sp, #12
 800701e:	9300      	str	r3, [sp, #0]
 8007020:	4622      	mov	r2, r4
 8007022:	4b0a      	ldr	r3, [pc, #40]	; (800704c <_vfiprintf_r+0x228>)
 8007024:	a904      	add	r1, sp, #16
 8007026:	4630      	mov	r0, r6
 8007028:	f000 f888 	bl	800713c <_printf_i>
 800702c:	e7ec      	b.n	8007008 <_vfiprintf_r+0x1e4>
 800702e:	bf00      	nop
 8007030:	0800759c 	.word	0x0800759c
 8007034:	080075dc 	.word	0x080075dc
 8007038:	080075bc 	.word	0x080075bc
 800703c:	0800757c 	.word	0x0800757c
 8007040:	080075e2 	.word	0x080075e2
 8007044:	080075e6 	.word	0x080075e6
 8007048:	00000000 	.word	0x00000000
 800704c:	08006dff 	.word	0x08006dff

08007050 <_printf_common>:
 8007050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007054:	4691      	mov	r9, r2
 8007056:	461f      	mov	r7, r3
 8007058:	688a      	ldr	r2, [r1, #8]
 800705a:	690b      	ldr	r3, [r1, #16]
 800705c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007060:	4293      	cmp	r3, r2
 8007062:	bfb8      	it	lt
 8007064:	4613      	movlt	r3, r2
 8007066:	f8c9 3000 	str.w	r3, [r9]
 800706a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800706e:	4606      	mov	r6, r0
 8007070:	460c      	mov	r4, r1
 8007072:	b112      	cbz	r2, 800707a <_printf_common+0x2a>
 8007074:	3301      	adds	r3, #1
 8007076:	f8c9 3000 	str.w	r3, [r9]
 800707a:	6823      	ldr	r3, [r4, #0]
 800707c:	0699      	lsls	r1, r3, #26
 800707e:	bf42      	ittt	mi
 8007080:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007084:	3302      	addmi	r3, #2
 8007086:	f8c9 3000 	strmi.w	r3, [r9]
 800708a:	6825      	ldr	r5, [r4, #0]
 800708c:	f015 0506 	ands.w	r5, r5, #6
 8007090:	d107      	bne.n	80070a2 <_printf_common+0x52>
 8007092:	f104 0a19 	add.w	sl, r4, #25
 8007096:	68e3      	ldr	r3, [r4, #12]
 8007098:	f8d9 2000 	ldr.w	r2, [r9]
 800709c:	1a9b      	subs	r3, r3, r2
 800709e:	42ab      	cmp	r3, r5
 80070a0:	dc28      	bgt.n	80070f4 <_printf_common+0xa4>
 80070a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80070a6:	6822      	ldr	r2, [r4, #0]
 80070a8:	3300      	adds	r3, #0
 80070aa:	bf18      	it	ne
 80070ac:	2301      	movne	r3, #1
 80070ae:	0692      	lsls	r2, r2, #26
 80070b0:	d42d      	bmi.n	800710e <_printf_common+0xbe>
 80070b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070b6:	4639      	mov	r1, r7
 80070b8:	4630      	mov	r0, r6
 80070ba:	47c0      	blx	r8
 80070bc:	3001      	adds	r0, #1
 80070be:	d020      	beq.n	8007102 <_printf_common+0xb2>
 80070c0:	6823      	ldr	r3, [r4, #0]
 80070c2:	68e5      	ldr	r5, [r4, #12]
 80070c4:	f8d9 2000 	ldr.w	r2, [r9]
 80070c8:	f003 0306 	and.w	r3, r3, #6
 80070cc:	2b04      	cmp	r3, #4
 80070ce:	bf08      	it	eq
 80070d0:	1aad      	subeq	r5, r5, r2
 80070d2:	68a3      	ldr	r3, [r4, #8]
 80070d4:	6922      	ldr	r2, [r4, #16]
 80070d6:	bf0c      	ite	eq
 80070d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070dc:	2500      	movne	r5, #0
 80070de:	4293      	cmp	r3, r2
 80070e0:	bfc4      	itt	gt
 80070e2:	1a9b      	subgt	r3, r3, r2
 80070e4:	18ed      	addgt	r5, r5, r3
 80070e6:	f04f 0900 	mov.w	r9, #0
 80070ea:	341a      	adds	r4, #26
 80070ec:	454d      	cmp	r5, r9
 80070ee:	d11a      	bne.n	8007126 <_printf_common+0xd6>
 80070f0:	2000      	movs	r0, #0
 80070f2:	e008      	b.n	8007106 <_printf_common+0xb6>
 80070f4:	2301      	movs	r3, #1
 80070f6:	4652      	mov	r2, sl
 80070f8:	4639      	mov	r1, r7
 80070fa:	4630      	mov	r0, r6
 80070fc:	47c0      	blx	r8
 80070fe:	3001      	adds	r0, #1
 8007100:	d103      	bne.n	800710a <_printf_common+0xba>
 8007102:	f04f 30ff 	mov.w	r0, #4294967295
 8007106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800710a:	3501      	adds	r5, #1
 800710c:	e7c3      	b.n	8007096 <_printf_common+0x46>
 800710e:	18e1      	adds	r1, r4, r3
 8007110:	1c5a      	adds	r2, r3, #1
 8007112:	2030      	movs	r0, #48	; 0x30
 8007114:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007118:	4422      	add	r2, r4
 800711a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800711e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007122:	3302      	adds	r3, #2
 8007124:	e7c5      	b.n	80070b2 <_printf_common+0x62>
 8007126:	2301      	movs	r3, #1
 8007128:	4622      	mov	r2, r4
 800712a:	4639      	mov	r1, r7
 800712c:	4630      	mov	r0, r6
 800712e:	47c0      	blx	r8
 8007130:	3001      	adds	r0, #1
 8007132:	d0e6      	beq.n	8007102 <_printf_common+0xb2>
 8007134:	f109 0901 	add.w	r9, r9, #1
 8007138:	e7d8      	b.n	80070ec <_printf_common+0x9c>
	...

0800713c <_printf_i>:
 800713c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007140:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007144:	460c      	mov	r4, r1
 8007146:	7e09      	ldrb	r1, [r1, #24]
 8007148:	b085      	sub	sp, #20
 800714a:	296e      	cmp	r1, #110	; 0x6e
 800714c:	4617      	mov	r7, r2
 800714e:	4606      	mov	r6, r0
 8007150:	4698      	mov	r8, r3
 8007152:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007154:	f000 80b3 	beq.w	80072be <_printf_i+0x182>
 8007158:	d822      	bhi.n	80071a0 <_printf_i+0x64>
 800715a:	2963      	cmp	r1, #99	; 0x63
 800715c:	d036      	beq.n	80071cc <_printf_i+0x90>
 800715e:	d80a      	bhi.n	8007176 <_printf_i+0x3a>
 8007160:	2900      	cmp	r1, #0
 8007162:	f000 80b9 	beq.w	80072d8 <_printf_i+0x19c>
 8007166:	2958      	cmp	r1, #88	; 0x58
 8007168:	f000 8083 	beq.w	8007272 <_printf_i+0x136>
 800716c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007170:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007174:	e032      	b.n	80071dc <_printf_i+0xa0>
 8007176:	2964      	cmp	r1, #100	; 0x64
 8007178:	d001      	beq.n	800717e <_printf_i+0x42>
 800717a:	2969      	cmp	r1, #105	; 0x69
 800717c:	d1f6      	bne.n	800716c <_printf_i+0x30>
 800717e:	6820      	ldr	r0, [r4, #0]
 8007180:	6813      	ldr	r3, [r2, #0]
 8007182:	0605      	lsls	r5, r0, #24
 8007184:	f103 0104 	add.w	r1, r3, #4
 8007188:	d52a      	bpl.n	80071e0 <_printf_i+0xa4>
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	6011      	str	r1, [r2, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	da03      	bge.n	800719a <_printf_i+0x5e>
 8007192:	222d      	movs	r2, #45	; 0x2d
 8007194:	425b      	negs	r3, r3
 8007196:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800719a:	486f      	ldr	r0, [pc, #444]	; (8007358 <_printf_i+0x21c>)
 800719c:	220a      	movs	r2, #10
 800719e:	e039      	b.n	8007214 <_printf_i+0xd8>
 80071a0:	2973      	cmp	r1, #115	; 0x73
 80071a2:	f000 809d 	beq.w	80072e0 <_printf_i+0x1a4>
 80071a6:	d808      	bhi.n	80071ba <_printf_i+0x7e>
 80071a8:	296f      	cmp	r1, #111	; 0x6f
 80071aa:	d020      	beq.n	80071ee <_printf_i+0xb2>
 80071ac:	2970      	cmp	r1, #112	; 0x70
 80071ae:	d1dd      	bne.n	800716c <_printf_i+0x30>
 80071b0:	6823      	ldr	r3, [r4, #0]
 80071b2:	f043 0320 	orr.w	r3, r3, #32
 80071b6:	6023      	str	r3, [r4, #0]
 80071b8:	e003      	b.n	80071c2 <_printf_i+0x86>
 80071ba:	2975      	cmp	r1, #117	; 0x75
 80071bc:	d017      	beq.n	80071ee <_printf_i+0xb2>
 80071be:	2978      	cmp	r1, #120	; 0x78
 80071c0:	d1d4      	bne.n	800716c <_printf_i+0x30>
 80071c2:	2378      	movs	r3, #120	; 0x78
 80071c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071c8:	4864      	ldr	r0, [pc, #400]	; (800735c <_printf_i+0x220>)
 80071ca:	e055      	b.n	8007278 <_printf_i+0x13c>
 80071cc:	6813      	ldr	r3, [r2, #0]
 80071ce:	1d19      	adds	r1, r3, #4
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	6011      	str	r1, [r2, #0]
 80071d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071dc:	2301      	movs	r3, #1
 80071de:	e08c      	b.n	80072fa <_printf_i+0x1be>
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6011      	str	r1, [r2, #0]
 80071e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80071e8:	bf18      	it	ne
 80071ea:	b21b      	sxthne	r3, r3
 80071ec:	e7cf      	b.n	800718e <_printf_i+0x52>
 80071ee:	6813      	ldr	r3, [r2, #0]
 80071f0:	6825      	ldr	r5, [r4, #0]
 80071f2:	1d18      	adds	r0, r3, #4
 80071f4:	6010      	str	r0, [r2, #0]
 80071f6:	0628      	lsls	r0, r5, #24
 80071f8:	d501      	bpl.n	80071fe <_printf_i+0xc2>
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	e002      	b.n	8007204 <_printf_i+0xc8>
 80071fe:	0668      	lsls	r0, r5, #25
 8007200:	d5fb      	bpl.n	80071fa <_printf_i+0xbe>
 8007202:	881b      	ldrh	r3, [r3, #0]
 8007204:	4854      	ldr	r0, [pc, #336]	; (8007358 <_printf_i+0x21c>)
 8007206:	296f      	cmp	r1, #111	; 0x6f
 8007208:	bf14      	ite	ne
 800720a:	220a      	movne	r2, #10
 800720c:	2208      	moveq	r2, #8
 800720e:	2100      	movs	r1, #0
 8007210:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007214:	6865      	ldr	r5, [r4, #4]
 8007216:	60a5      	str	r5, [r4, #8]
 8007218:	2d00      	cmp	r5, #0
 800721a:	f2c0 8095 	blt.w	8007348 <_printf_i+0x20c>
 800721e:	6821      	ldr	r1, [r4, #0]
 8007220:	f021 0104 	bic.w	r1, r1, #4
 8007224:	6021      	str	r1, [r4, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d13d      	bne.n	80072a6 <_printf_i+0x16a>
 800722a:	2d00      	cmp	r5, #0
 800722c:	f040 808e 	bne.w	800734c <_printf_i+0x210>
 8007230:	4665      	mov	r5, ip
 8007232:	2a08      	cmp	r2, #8
 8007234:	d10b      	bne.n	800724e <_printf_i+0x112>
 8007236:	6823      	ldr	r3, [r4, #0]
 8007238:	07db      	lsls	r3, r3, #31
 800723a:	d508      	bpl.n	800724e <_printf_i+0x112>
 800723c:	6923      	ldr	r3, [r4, #16]
 800723e:	6862      	ldr	r2, [r4, #4]
 8007240:	429a      	cmp	r2, r3
 8007242:	bfde      	ittt	le
 8007244:	2330      	movle	r3, #48	; 0x30
 8007246:	f805 3c01 	strble.w	r3, [r5, #-1]
 800724a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800724e:	ebac 0305 	sub.w	r3, ip, r5
 8007252:	6123      	str	r3, [r4, #16]
 8007254:	f8cd 8000 	str.w	r8, [sp]
 8007258:	463b      	mov	r3, r7
 800725a:	aa03      	add	r2, sp, #12
 800725c:	4621      	mov	r1, r4
 800725e:	4630      	mov	r0, r6
 8007260:	f7ff fef6 	bl	8007050 <_printf_common>
 8007264:	3001      	adds	r0, #1
 8007266:	d14d      	bne.n	8007304 <_printf_i+0x1c8>
 8007268:	f04f 30ff 	mov.w	r0, #4294967295
 800726c:	b005      	add	sp, #20
 800726e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007272:	4839      	ldr	r0, [pc, #228]	; (8007358 <_printf_i+0x21c>)
 8007274:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007278:	6813      	ldr	r3, [r2, #0]
 800727a:	6821      	ldr	r1, [r4, #0]
 800727c:	1d1d      	adds	r5, r3, #4
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6015      	str	r5, [r2, #0]
 8007282:	060a      	lsls	r2, r1, #24
 8007284:	d50b      	bpl.n	800729e <_printf_i+0x162>
 8007286:	07ca      	lsls	r2, r1, #31
 8007288:	bf44      	itt	mi
 800728a:	f041 0120 	orrmi.w	r1, r1, #32
 800728e:	6021      	strmi	r1, [r4, #0]
 8007290:	b91b      	cbnz	r3, 800729a <_printf_i+0x15e>
 8007292:	6822      	ldr	r2, [r4, #0]
 8007294:	f022 0220 	bic.w	r2, r2, #32
 8007298:	6022      	str	r2, [r4, #0]
 800729a:	2210      	movs	r2, #16
 800729c:	e7b7      	b.n	800720e <_printf_i+0xd2>
 800729e:	064d      	lsls	r5, r1, #25
 80072a0:	bf48      	it	mi
 80072a2:	b29b      	uxthmi	r3, r3
 80072a4:	e7ef      	b.n	8007286 <_printf_i+0x14a>
 80072a6:	4665      	mov	r5, ip
 80072a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80072ac:	fb02 3311 	mls	r3, r2, r1, r3
 80072b0:	5cc3      	ldrb	r3, [r0, r3]
 80072b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80072b6:	460b      	mov	r3, r1
 80072b8:	2900      	cmp	r1, #0
 80072ba:	d1f5      	bne.n	80072a8 <_printf_i+0x16c>
 80072bc:	e7b9      	b.n	8007232 <_printf_i+0xf6>
 80072be:	6813      	ldr	r3, [r2, #0]
 80072c0:	6825      	ldr	r5, [r4, #0]
 80072c2:	6961      	ldr	r1, [r4, #20]
 80072c4:	1d18      	adds	r0, r3, #4
 80072c6:	6010      	str	r0, [r2, #0]
 80072c8:	0628      	lsls	r0, r5, #24
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	d501      	bpl.n	80072d2 <_printf_i+0x196>
 80072ce:	6019      	str	r1, [r3, #0]
 80072d0:	e002      	b.n	80072d8 <_printf_i+0x19c>
 80072d2:	066a      	lsls	r2, r5, #25
 80072d4:	d5fb      	bpl.n	80072ce <_printf_i+0x192>
 80072d6:	8019      	strh	r1, [r3, #0]
 80072d8:	2300      	movs	r3, #0
 80072da:	6123      	str	r3, [r4, #16]
 80072dc:	4665      	mov	r5, ip
 80072de:	e7b9      	b.n	8007254 <_printf_i+0x118>
 80072e0:	6813      	ldr	r3, [r2, #0]
 80072e2:	1d19      	adds	r1, r3, #4
 80072e4:	6011      	str	r1, [r2, #0]
 80072e6:	681d      	ldr	r5, [r3, #0]
 80072e8:	6862      	ldr	r2, [r4, #4]
 80072ea:	2100      	movs	r1, #0
 80072ec:	4628      	mov	r0, r5
 80072ee:	f7f8 ff7f 	bl	80001f0 <memchr>
 80072f2:	b108      	cbz	r0, 80072f8 <_printf_i+0x1bc>
 80072f4:	1b40      	subs	r0, r0, r5
 80072f6:	6060      	str	r0, [r4, #4]
 80072f8:	6863      	ldr	r3, [r4, #4]
 80072fa:	6123      	str	r3, [r4, #16]
 80072fc:	2300      	movs	r3, #0
 80072fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007302:	e7a7      	b.n	8007254 <_printf_i+0x118>
 8007304:	6923      	ldr	r3, [r4, #16]
 8007306:	462a      	mov	r2, r5
 8007308:	4639      	mov	r1, r7
 800730a:	4630      	mov	r0, r6
 800730c:	47c0      	blx	r8
 800730e:	3001      	adds	r0, #1
 8007310:	d0aa      	beq.n	8007268 <_printf_i+0x12c>
 8007312:	6823      	ldr	r3, [r4, #0]
 8007314:	079b      	lsls	r3, r3, #30
 8007316:	d413      	bmi.n	8007340 <_printf_i+0x204>
 8007318:	68e0      	ldr	r0, [r4, #12]
 800731a:	9b03      	ldr	r3, [sp, #12]
 800731c:	4298      	cmp	r0, r3
 800731e:	bfb8      	it	lt
 8007320:	4618      	movlt	r0, r3
 8007322:	e7a3      	b.n	800726c <_printf_i+0x130>
 8007324:	2301      	movs	r3, #1
 8007326:	464a      	mov	r2, r9
 8007328:	4639      	mov	r1, r7
 800732a:	4630      	mov	r0, r6
 800732c:	47c0      	blx	r8
 800732e:	3001      	adds	r0, #1
 8007330:	d09a      	beq.n	8007268 <_printf_i+0x12c>
 8007332:	3501      	adds	r5, #1
 8007334:	68e3      	ldr	r3, [r4, #12]
 8007336:	9a03      	ldr	r2, [sp, #12]
 8007338:	1a9b      	subs	r3, r3, r2
 800733a:	42ab      	cmp	r3, r5
 800733c:	dcf2      	bgt.n	8007324 <_printf_i+0x1e8>
 800733e:	e7eb      	b.n	8007318 <_printf_i+0x1dc>
 8007340:	2500      	movs	r5, #0
 8007342:	f104 0919 	add.w	r9, r4, #25
 8007346:	e7f5      	b.n	8007334 <_printf_i+0x1f8>
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1ac      	bne.n	80072a6 <_printf_i+0x16a>
 800734c:	7803      	ldrb	r3, [r0, #0]
 800734e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007352:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007356:	e76c      	b.n	8007232 <_printf_i+0xf6>
 8007358:	080075ed 	.word	0x080075ed
 800735c:	080075fe 	.word	0x080075fe

08007360 <_sbrk_r>:
 8007360:	b538      	push	{r3, r4, r5, lr}
 8007362:	4c06      	ldr	r4, [pc, #24]	; (800737c <_sbrk_r+0x1c>)
 8007364:	2300      	movs	r3, #0
 8007366:	4605      	mov	r5, r0
 8007368:	4608      	mov	r0, r1
 800736a:	6023      	str	r3, [r4, #0]
 800736c:	f7fe fcc4 	bl	8005cf8 <_sbrk>
 8007370:	1c43      	adds	r3, r0, #1
 8007372:	d102      	bne.n	800737a <_sbrk_r+0x1a>
 8007374:	6823      	ldr	r3, [r4, #0]
 8007376:	b103      	cbz	r3, 800737a <_sbrk_r+0x1a>
 8007378:	602b      	str	r3, [r5, #0]
 800737a:	bd38      	pop	{r3, r4, r5, pc}
 800737c:	20000588 	.word	0x20000588

08007380 <__sread>:
 8007380:	b510      	push	{r4, lr}
 8007382:	460c      	mov	r4, r1
 8007384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007388:	f000 f896 	bl	80074b8 <_read_r>
 800738c:	2800      	cmp	r0, #0
 800738e:	bfab      	itete	ge
 8007390:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007392:	89a3      	ldrhlt	r3, [r4, #12]
 8007394:	181b      	addge	r3, r3, r0
 8007396:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800739a:	bfac      	ite	ge
 800739c:	6563      	strge	r3, [r4, #84]	; 0x54
 800739e:	81a3      	strhlt	r3, [r4, #12]
 80073a0:	bd10      	pop	{r4, pc}

080073a2 <__swrite>:
 80073a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073a6:	461f      	mov	r7, r3
 80073a8:	898b      	ldrh	r3, [r1, #12]
 80073aa:	05db      	lsls	r3, r3, #23
 80073ac:	4605      	mov	r5, r0
 80073ae:	460c      	mov	r4, r1
 80073b0:	4616      	mov	r6, r2
 80073b2:	d505      	bpl.n	80073c0 <__swrite+0x1e>
 80073b4:	2302      	movs	r3, #2
 80073b6:	2200      	movs	r2, #0
 80073b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073bc:	f000 f868 	bl	8007490 <_lseek_r>
 80073c0:	89a3      	ldrh	r3, [r4, #12]
 80073c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073ca:	81a3      	strh	r3, [r4, #12]
 80073cc:	4632      	mov	r2, r6
 80073ce:	463b      	mov	r3, r7
 80073d0:	4628      	mov	r0, r5
 80073d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073d6:	f000 b817 	b.w	8007408 <_write_r>

080073da <__sseek>:
 80073da:	b510      	push	{r4, lr}
 80073dc:	460c      	mov	r4, r1
 80073de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073e2:	f000 f855 	bl	8007490 <_lseek_r>
 80073e6:	1c43      	adds	r3, r0, #1
 80073e8:	89a3      	ldrh	r3, [r4, #12]
 80073ea:	bf15      	itete	ne
 80073ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80073ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80073f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80073f6:	81a3      	strheq	r3, [r4, #12]
 80073f8:	bf18      	it	ne
 80073fa:	81a3      	strhne	r3, [r4, #12]
 80073fc:	bd10      	pop	{r4, pc}

080073fe <__sclose>:
 80073fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007402:	f000 b813 	b.w	800742c <_close_r>
	...

08007408 <_write_r>:
 8007408:	b538      	push	{r3, r4, r5, lr}
 800740a:	4c07      	ldr	r4, [pc, #28]	; (8007428 <_write_r+0x20>)
 800740c:	4605      	mov	r5, r0
 800740e:	4608      	mov	r0, r1
 8007410:	4611      	mov	r1, r2
 8007412:	2200      	movs	r2, #0
 8007414:	6022      	str	r2, [r4, #0]
 8007416:	461a      	mov	r2, r3
 8007418:	f7fe fc1d 	bl	8005c56 <_write>
 800741c:	1c43      	adds	r3, r0, #1
 800741e:	d102      	bne.n	8007426 <_write_r+0x1e>
 8007420:	6823      	ldr	r3, [r4, #0]
 8007422:	b103      	cbz	r3, 8007426 <_write_r+0x1e>
 8007424:	602b      	str	r3, [r5, #0]
 8007426:	bd38      	pop	{r3, r4, r5, pc}
 8007428:	20000588 	.word	0x20000588

0800742c <_close_r>:
 800742c:	b538      	push	{r3, r4, r5, lr}
 800742e:	4c06      	ldr	r4, [pc, #24]	; (8007448 <_close_r+0x1c>)
 8007430:	2300      	movs	r3, #0
 8007432:	4605      	mov	r5, r0
 8007434:	4608      	mov	r0, r1
 8007436:	6023      	str	r3, [r4, #0]
 8007438:	f7fe fc29 	bl	8005c8e <_close>
 800743c:	1c43      	adds	r3, r0, #1
 800743e:	d102      	bne.n	8007446 <_close_r+0x1a>
 8007440:	6823      	ldr	r3, [r4, #0]
 8007442:	b103      	cbz	r3, 8007446 <_close_r+0x1a>
 8007444:	602b      	str	r3, [r5, #0]
 8007446:	bd38      	pop	{r3, r4, r5, pc}
 8007448:	20000588 	.word	0x20000588

0800744c <_fstat_r>:
 800744c:	b538      	push	{r3, r4, r5, lr}
 800744e:	4c07      	ldr	r4, [pc, #28]	; (800746c <_fstat_r+0x20>)
 8007450:	2300      	movs	r3, #0
 8007452:	4605      	mov	r5, r0
 8007454:	4608      	mov	r0, r1
 8007456:	4611      	mov	r1, r2
 8007458:	6023      	str	r3, [r4, #0]
 800745a:	f7fe fc24 	bl	8005ca6 <_fstat>
 800745e:	1c43      	adds	r3, r0, #1
 8007460:	d102      	bne.n	8007468 <_fstat_r+0x1c>
 8007462:	6823      	ldr	r3, [r4, #0]
 8007464:	b103      	cbz	r3, 8007468 <_fstat_r+0x1c>
 8007466:	602b      	str	r3, [r5, #0]
 8007468:	bd38      	pop	{r3, r4, r5, pc}
 800746a:	bf00      	nop
 800746c:	20000588 	.word	0x20000588

08007470 <_isatty_r>:
 8007470:	b538      	push	{r3, r4, r5, lr}
 8007472:	4c06      	ldr	r4, [pc, #24]	; (800748c <_isatty_r+0x1c>)
 8007474:	2300      	movs	r3, #0
 8007476:	4605      	mov	r5, r0
 8007478:	4608      	mov	r0, r1
 800747a:	6023      	str	r3, [r4, #0]
 800747c:	f7fe fc23 	bl	8005cc6 <_isatty>
 8007480:	1c43      	adds	r3, r0, #1
 8007482:	d102      	bne.n	800748a <_isatty_r+0x1a>
 8007484:	6823      	ldr	r3, [r4, #0]
 8007486:	b103      	cbz	r3, 800748a <_isatty_r+0x1a>
 8007488:	602b      	str	r3, [r5, #0]
 800748a:	bd38      	pop	{r3, r4, r5, pc}
 800748c:	20000588 	.word	0x20000588

08007490 <_lseek_r>:
 8007490:	b538      	push	{r3, r4, r5, lr}
 8007492:	4c07      	ldr	r4, [pc, #28]	; (80074b0 <_lseek_r+0x20>)
 8007494:	4605      	mov	r5, r0
 8007496:	4608      	mov	r0, r1
 8007498:	4611      	mov	r1, r2
 800749a:	2200      	movs	r2, #0
 800749c:	6022      	str	r2, [r4, #0]
 800749e:	461a      	mov	r2, r3
 80074a0:	f7fe fc1c 	bl	8005cdc <_lseek>
 80074a4:	1c43      	adds	r3, r0, #1
 80074a6:	d102      	bne.n	80074ae <_lseek_r+0x1e>
 80074a8:	6823      	ldr	r3, [r4, #0]
 80074aa:	b103      	cbz	r3, 80074ae <_lseek_r+0x1e>
 80074ac:	602b      	str	r3, [r5, #0]
 80074ae:	bd38      	pop	{r3, r4, r5, pc}
 80074b0:	20000588 	.word	0x20000588

080074b4 <__malloc_lock>:
 80074b4:	4770      	bx	lr

080074b6 <__malloc_unlock>:
 80074b6:	4770      	bx	lr

080074b8 <_read_r>:
 80074b8:	b538      	push	{r3, r4, r5, lr}
 80074ba:	4c07      	ldr	r4, [pc, #28]	; (80074d8 <_read_r+0x20>)
 80074bc:	4605      	mov	r5, r0
 80074be:	4608      	mov	r0, r1
 80074c0:	4611      	mov	r1, r2
 80074c2:	2200      	movs	r2, #0
 80074c4:	6022      	str	r2, [r4, #0]
 80074c6:	461a      	mov	r2, r3
 80074c8:	f7fe fba8 	bl	8005c1c <_read>
 80074cc:	1c43      	adds	r3, r0, #1
 80074ce:	d102      	bne.n	80074d6 <_read_r+0x1e>
 80074d0:	6823      	ldr	r3, [r4, #0]
 80074d2:	b103      	cbz	r3, 80074d6 <_read_r+0x1e>
 80074d4:	602b      	str	r3, [r5, #0]
 80074d6:	bd38      	pop	{r3, r4, r5, pc}
 80074d8:	20000588 	.word	0x20000588

080074dc <_init>:
 80074dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074de:	bf00      	nop
 80074e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074e2:	bc08      	pop	{r3}
 80074e4:	469e      	mov	lr, r3
 80074e6:	4770      	bx	lr

080074e8 <_fini>:
 80074e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ea:	bf00      	nop
 80074ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ee:	bc08      	pop	{r3}
 80074f0:	469e      	mov	lr, r3
 80074f2:	4770      	bx	lr
