
F427IIH_RM_Saramander.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052c0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08005470  08005470  00015470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005548  08005548  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005548  08005548  00015548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005550  08005550  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005550  08005550  00015550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005554  08005554  00015554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  20000070  080055c8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000578  080055c8  00020578  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e18  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000398c  00000000  00000000  00038eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000e488  00000000  00000000  0003c844  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000d98  00000000  00000000  0004acd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002438  00000000  00000000  0004ba68  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002596a  00000000  00000000  0004dea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000f70d  00000000  00000000  0007380a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000dbe50  00000000  00000000  00082f17  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0015ed67  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000378c  00000000  00000000  0015ede4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005458 	.word	0x08005458

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08005458 	.word	0x08005458

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b972 	b.w	8000dc8 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9e08      	ldr	r6, [sp, #32]
 8000b02:	4604      	mov	r4, r0
 8000b04:	4688      	mov	r8, r1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d14b      	bne.n	8000ba2 <__udivmoddi4+0xa6>
 8000b0a:	428a      	cmp	r2, r1
 8000b0c:	4615      	mov	r5, r2
 8000b0e:	d967      	bls.n	8000be0 <__udivmoddi4+0xe4>
 8000b10:	fab2 f282 	clz	r2, r2
 8000b14:	b14a      	cbz	r2, 8000b2a <__udivmoddi4+0x2e>
 8000b16:	f1c2 0720 	rsb	r7, r2, #32
 8000b1a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b1e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b22:	4095      	lsls	r5, r2
 8000b24:	ea47 0803 	orr.w	r8, r7, r3
 8000b28:	4094      	lsls	r4, r2
 8000b2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b2e:	0c23      	lsrs	r3, r4, #16
 8000b30:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b34:	fa1f fc85 	uxth.w	ip, r5
 8000b38:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b3c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b40:	fb07 f10c 	mul.w	r1, r7, ip
 8000b44:	4299      	cmp	r1, r3
 8000b46:	d909      	bls.n	8000b5c <__udivmoddi4+0x60>
 8000b48:	18eb      	adds	r3, r5, r3
 8000b4a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b4e:	f080 811b 	bcs.w	8000d88 <__udivmoddi4+0x28c>
 8000b52:	4299      	cmp	r1, r3
 8000b54:	f240 8118 	bls.w	8000d88 <__udivmoddi4+0x28c>
 8000b58:	3f02      	subs	r7, #2
 8000b5a:	442b      	add	r3, r5
 8000b5c:	1a5b      	subs	r3, r3, r1
 8000b5e:	b2a4      	uxth	r4, r4
 8000b60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b6c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b70:	45a4      	cmp	ip, r4
 8000b72:	d909      	bls.n	8000b88 <__udivmoddi4+0x8c>
 8000b74:	192c      	adds	r4, r5, r4
 8000b76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b7a:	f080 8107 	bcs.w	8000d8c <__udivmoddi4+0x290>
 8000b7e:	45a4      	cmp	ip, r4
 8000b80:	f240 8104 	bls.w	8000d8c <__udivmoddi4+0x290>
 8000b84:	3802      	subs	r0, #2
 8000b86:	442c      	add	r4, r5
 8000b88:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b8c:	eba4 040c 	sub.w	r4, r4, ip
 8000b90:	2700      	movs	r7, #0
 8000b92:	b11e      	cbz	r6, 8000b9c <__udivmoddi4+0xa0>
 8000b94:	40d4      	lsrs	r4, r2
 8000b96:	2300      	movs	r3, #0
 8000b98:	e9c6 4300 	strd	r4, r3, [r6]
 8000b9c:	4639      	mov	r1, r7
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0xbe>
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	f000 80eb 	beq.w	8000d82 <__udivmoddi4+0x286>
 8000bac:	2700      	movs	r7, #0
 8000bae:	e9c6 0100 	strd	r0, r1, [r6]
 8000bb2:	4638      	mov	r0, r7
 8000bb4:	4639      	mov	r1, r7
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f783 	clz	r7, r3
 8000bbe:	2f00      	cmp	r7, #0
 8000bc0:	d147      	bne.n	8000c52 <__udivmoddi4+0x156>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0xd0>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80fa 	bhi.w	8000dc0 <__udivmoddi4+0x2c4>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0303 	sbc.w	r3, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	4698      	mov	r8, r3
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	d0e0      	beq.n	8000b9c <__udivmoddi4+0xa0>
 8000bda:	e9c6 4800 	strd	r4, r8, [r6]
 8000bde:	e7dd      	b.n	8000b9c <__udivmoddi4+0xa0>
 8000be0:	b902      	cbnz	r2, 8000be4 <__udivmoddi4+0xe8>
 8000be2:	deff      	udf	#255	; 0xff
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	2a00      	cmp	r2, #0
 8000bea:	f040 808f 	bne.w	8000d0c <__udivmoddi4+0x210>
 8000bee:	1b49      	subs	r1, r1, r5
 8000bf0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bf4:	fa1f f885 	uxth.w	r8, r5
 8000bf8:	2701      	movs	r7, #1
 8000bfa:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bfe:	0c23      	lsrs	r3, r4, #16
 8000c00:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb08 f10c 	mul.w	r1, r8, ip
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	d907      	bls.n	8000c20 <__udivmoddi4+0x124>
 8000c10:	18eb      	adds	r3, r5, r3
 8000c12:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x122>
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	f200 80cd 	bhi.w	8000db8 <__udivmoddi4+0x2bc>
 8000c1e:	4684      	mov	ip, r0
 8000c20:	1a59      	subs	r1, r3, r1
 8000c22:	b2a3      	uxth	r3, r4
 8000c24:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c28:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c2c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c30:	fb08 f800 	mul.w	r8, r8, r0
 8000c34:	45a0      	cmp	r8, r4
 8000c36:	d907      	bls.n	8000c48 <__udivmoddi4+0x14c>
 8000c38:	192c      	adds	r4, r5, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x14a>
 8000c40:	45a0      	cmp	r8, r4
 8000c42:	f200 80b6 	bhi.w	8000db2 <__udivmoddi4+0x2b6>
 8000c46:	4618      	mov	r0, r3
 8000c48:	eba4 0408 	sub.w	r4, r4, r8
 8000c4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c50:	e79f      	b.n	8000b92 <__udivmoddi4+0x96>
 8000c52:	f1c7 0c20 	rsb	ip, r7, #32
 8000c56:	40bb      	lsls	r3, r7
 8000c58:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c5c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c60:	fa01 f407 	lsl.w	r4, r1, r7
 8000c64:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c68:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c6c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c70:	4325      	orrs	r5, r4
 8000c72:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c76:	0c2c      	lsrs	r4, r5, #16
 8000c78:	fb08 3319 	mls	r3, r8, r9, r3
 8000c7c:	fa1f fa8e 	uxth.w	sl, lr
 8000c80:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c84:	fb09 f40a 	mul.w	r4, r9, sl
 8000c88:	429c      	cmp	r4, r3
 8000c8a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c8e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c92:	d90b      	bls.n	8000cac <__udivmoddi4+0x1b0>
 8000c94:	eb1e 0303 	adds.w	r3, lr, r3
 8000c98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c9c:	f080 8087 	bcs.w	8000dae <__udivmoddi4+0x2b2>
 8000ca0:	429c      	cmp	r4, r3
 8000ca2:	f240 8084 	bls.w	8000dae <__udivmoddi4+0x2b2>
 8000ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8000caa:	4473      	add	r3, lr
 8000cac:	1b1b      	subs	r3, r3, r4
 8000cae:	b2ad      	uxth	r5, r5
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cbc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cc0:	45a2      	cmp	sl, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x1da>
 8000cc4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ccc:	d26b      	bcs.n	8000da6 <__udivmoddi4+0x2aa>
 8000cce:	45a2      	cmp	sl, r4
 8000cd0:	d969      	bls.n	8000da6 <__udivmoddi4+0x2aa>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4474      	add	r4, lr
 8000cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cda:	fba0 8902 	umull	r8, r9, r0, r2
 8000cde:	eba4 040a 	sub.w	r4, r4, sl
 8000ce2:	454c      	cmp	r4, r9
 8000ce4:	46c2      	mov	sl, r8
 8000ce6:	464b      	mov	r3, r9
 8000ce8:	d354      	bcc.n	8000d94 <__udivmoddi4+0x298>
 8000cea:	d051      	beq.n	8000d90 <__udivmoddi4+0x294>
 8000cec:	2e00      	cmp	r6, #0
 8000cee:	d069      	beq.n	8000dc4 <__udivmoddi4+0x2c8>
 8000cf0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cf4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cf8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cfc:	40fd      	lsrs	r5, r7
 8000cfe:	40fc      	lsrs	r4, r7
 8000d00:	ea4c 0505 	orr.w	r5, ip, r5
 8000d04:	e9c6 5400 	strd	r5, r4, [r6]
 8000d08:	2700      	movs	r7, #0
 8000d0a:	e747      	b.n	8000b9c <__udivmoddi4+0xa0>
 8000d0c:	f1c2 0320 	rsb	r3, r2, #32
 8000d10:	fa20 f703 	lsr.w	r7, r0, r3
 8000d14:	4095      	lsls	r5, r2
 8000d16:	fa01 f002 	lsl.w	r0, r1, r2
 8000d1a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d1e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d22:	4338      	orrs	r0, r7
 8000d24:	0c01      	lsrs	r1, r0, #16
 8000d26:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d2a:	fa1f f885 	uxth.w	r8, r5
 8000d2e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d36:	fb07 f308 	mul.w	r3, r7, r8
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d40:	d907      	bls.n	8000d52 <__udivmoddi4+0x256>
 8000d42:	1869      	adds	r1, r5, r1
 8000d44:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d48:	d22f      	bcs.n	8000daa <__udivmoddi4+0x2ae>
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	d92d      	bls.n	8000daa <__udivmoddi4+0x2ae>
 8000d4e:	3f02      	subs	r7, #2
 8000d50:	4429      	add	r1, r5
 8000d52:	1acb      	subs	r3, r1, r3
 8000d54:	b281      	uxth	r1, r0
 8000d56:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d5a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d62:	fb00 f308 	mul.w	r3, r0, r8
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d907      	bls.n	8000d7a <__udivmoddi4+0x27e>
 8000d6a:	1869      	adds	r1, r5, r1
 8000d6c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d70:	d217      	bcs.n	8000da2 <__udivmoddi4+0x2a6>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d915      	bls.n	8000da2 <__udivmoddi4+0x2a6>
 8000d76:	3802      	subs	r0, #2
 8000d78:	4429      	add	r1, r5
 8000d7a:	1ac9      	subs	r1, r1, r3
 8000d7c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d80:	e73b      	b.n	8000bfa <__udivmoddi4+0xfe>
 8000d82:	4637      	mov	r7, r6
 8000d84:	4630      	mov	r0, r6
 8000d86:	e709      	b.n	8000b9c <__udivmoddi4+0xa0>
 8000d88:	4607      	mov	r7, r0
 8000d8a:	e6e7      	b.n	8000b5c <__udivmoddi4+0x60>
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	e6fb      	b.n	8000b88 <__udivmoddi4+0x8c>
 8000d90:	4541      	cmp	r1, r8
 8000d92:	d2ab      	bcs.n	8000cec <__udivmoddi4+0x1f0>
 8000d94:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d98:	eb69 020e 	sbc.w	r2, r9, lr
 8000d9c:	3801      	subs	r0, #1
 8000d9e:	4613      	mov	r3, r2
 8000da0:	e7a4      	b.n	8000cec <__udivmoddi4+0x1f0>
 8000da2:	4660      	mov	r0, ip
 8000da4:	e7e9      	b.n	8000d7a <__udivmoddi4+0x27e>
 8000da6:	4618      	mov	r0, r3
 8000da8:	e795      	b.n	8000cd6 <__udivmoddi4+0x1da>
 8000daa:	4667      	mov	r7, ip
 8000dac:	e7d1      	b.n	8000d52 <__udivmoddi4+0x256>
 8000dae:	4681      	mov	r9, r0
 8000db0:	e77c      	b.n	8000cac <__udivmoddi4+0x1b0>
 8000db2:	3802      	subs	r0, #2
 8000db4:	442c      	add	r4, r5
 8000db6:	e747      	b.n	8000c48 <__udivmoddi4+0x14c>
 8000db8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dbc:	442b      	add	r3, r5
 8000dbe:	e72f      	b.n	8000c20 <__udivmoddi4+0x124>
 8000dc0:	4638      	mov	r0, r7
 8000dc2:	e708      	b.n	8000bd6 <__udivmoddi4+0xda>
 8000dc4:	4637      	mov	r7, r6
 8000dc6:	e6e9      	b.n	8000b9c <__udivmoddi4+0xa0>

08000dc8 <__aeabi_idiv0>:
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop

08000dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dcc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dce:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <HAL_InitTick+0x3c>)
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <HAL_InitTick+0x40>)
 8000dd2:	7812      	ldrb	r2, [r2, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
{
 8000dd6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ddc:	fbb0 f0f2 	udiv	r0, r0, r2
 8000de0:	fbb3 f0f0 	udiv	r0, r3, r0
 8000de4:	f000 fc0a 	bl	80015fc <HAL_SYSTICK_Config>
 8000de8:	b908      	cbnz	r0, 8000dee <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dea:	2d0f      	cmp	r5, #15
 8000dec:	d901      	bls.n	8000df2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000dee:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000df0:	bd38      	pop	{r3, r4, r5, pc}
 8000df2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df4:	4602      	mov	r2, r0
 8000df6:	4629      	mov	r1, r5
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f000 fbba 	bl	8001574 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e00:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <HAL_InitTick+0x44>)
 8000e02:	4620      	mov	r0, r4
 8000e04:	601d      	str	r5, [r3, #0]
}
 8000e06:	bd38      	pop	{r3, r4, r5, pc}
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	20000004 	.word	0x20000004

08000e14 <HAL_Init>:
{
 8000e14:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <HAL_Init+0x30>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e1e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e26:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e2e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e30:	2003      	movs	r0, #3
 8000e32:	f000 fb8d 	bl	8001550 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f7ff ffc8 	bl	8000dcc <HAL_InitTick>
  HAL_MspInit();
 8000e3c:	f002 feee 	bl	8003c1c <HAL_MspInit>
}
 8000e40:	2000      	movs	r0, #0
 8000e42:	bd08      	pop	{r3, pc}
 8000e44:	40023c00 	.word	0x40023c00

08000e48 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e48:	4a03      	ldr	r2, [pc, #12]	; (8000e58 <HAL_IncTick+0x10>)
 8000e4a:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <HAL_IncTick+0x14>)
 8000e4c:	6811      	ldr	r1, [r2, #0]
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	440b      	add	r3, r1
 8000e52:	6013      	str	r3, [r2, #0]
}
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	200000a0 	.word	0x200000a0
 8000e5c:	20000000 	.word	0x20000000

08000e60 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e60:	4b01      	ldr	r3, [pc, #4]	; (8000e68 <HAL_GetTick+0x8>)
 8000e62:	6818      	ldr	r0, [r3, #0]
}
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	200000a0 	.word	0x200000a0

08000e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e6c:	b538      	push	{r3, r4, r5, lr}
 8000e6e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e70:	f7ff fff6 	bl	8000e60 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e74:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000e76:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000e78:	d002      	beq.n	8000e80 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7a:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <HAL_Delay+0x20>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e80:	f7ff ffee 	bl	8000e60 <HAL_GetTick>
 8000e84:	1b40      	subs	r0, r0, r5
 8000e86:	42a0      	cmp	r0, r4
 8000e88:	d3fa      	bcc.n	8000e80 <HAL_Delay+0x14>
  {
  }
}
 8000e8a:	bd38      	pop	{r3, r4, r5, pc}
 8000e8c:	20000000 	.word	0x20000000

08000e90 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e90:	2800      	cmp	r0, #0
 8000e92:	d07c      	beq.n	8000f8e <HAL_CAN_Init+0xfe>
{
 8000e94:	b538      	push	{r3, r4, r5, lr}
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e96:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000e9a:	4604      	mov	r4, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d073      	beq.n	8000f88 <HAL_CAN_Init+0xf8>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ea0:	6822      	ldr	r2, [r4, #0]
 8000ea2:	6813      	ldr	r3, [r2, #0]
 8000ea4:	f023 0302 	bic.w	r3, r3, #2
 8000ea8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000eaa:	f7ff ffd9 	bl	8000e60 <HAL_GetTick>
 8000eae:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000eb0:	e004      	b.n	8000ebc <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000eb2:	f7ff ffd5 	bl	8000e60 <HAL_GetTick>
 8000eb6:	1b40      	subs	r0, r0, r5
 8000eb8:	280a      	cmp	r0, #10
 8000eba:	d85c      	bhi.n	8000f76 <HAL_CAN_Init+0xe6>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ebc:	6823      	ldr	r3, [r4, #0]
 8000ebe:	685a      	ldr	r2, [r3, #4]
 8000ec0:	0791      	lsls	r1, r2, #30
 8000ec2:	d4f6      	bmi.n	8000eb2 <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	f042 0201 	orr.w	r2, r2, #1
 8000eca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ecc:	f7ff ffc8 	bl	8000e60 <HAL_GetTick>
 8000ed0:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ed2:	e004      	b.n	8000ede <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ed4:	f7ff ffc4 	bl	8000e60 <HAL_GetTick>
 8000ed8:	1b40      	subs	r0, r0, r5
 8000eda:	280a      	cmp	r0, #10
 8000edc:	d84b      	bhi.n	8000f76 <HAL_CAN_Init+0xe6>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ede:	6823      	ldr	r3, [r4, #0]
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	07d2      	lsls	r2, r2, #31
 8000ee4:	d5f6      	bpl.n	8000ed4 <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ee6:	7e22      	ldrb	r2, [r4, #24]
 8000ee8:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	bf0c      	ite	eq
 8000eee:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ef2:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000ef6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ef8:	7e62      	ldrb	r2, [r4, #25]
 8000efa:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	bf0c      	ite	eq
 8000f00:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f04:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8000f08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f0a:	7ea2      	ldrb	r2, [r4, #26]
 8000f0c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	bf0c      	ite	eq
 8000f12:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f16:	f022 0220 	bicne.w	r2, r2, #32
 8000f1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f1c:	7ee2      	ldrb	r2, [r4, #27]
 8000f1e:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	bf0c      	ite	eq
 8000f24:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f28:	f042 0210 	orrne.w	r2, r2, #16
 8000f2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f2e:	7f22      	ldrb	r2, [r4, #28]
 8000f30:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	bf0c      	ite	eq
 8000f36:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f3a:	f022 0208 	bicne.w	r2, r2, #8
 8000f3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f40:	7f62      	ldrb	r2, [r4, #29]
 8000f42:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	bf0c      	ite	eq
 8000f48:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f4c:	f022 0204 	bicne.w	r2, r2, #4
 8000f50:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f52:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8000f56:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	6861      	ldr	r1, [r4, #4]
 8000f5e:	432a      	orrs	r2, r5
 8000f60:	4302      	orrs	r2, r0
 8000f62:	3901      	subs	r1, #1
 8000f64:	430a      	orrs	r2, r1

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f66:	2501      	movs	r5, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f68:	2100      	movs	r1, #0
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f6a:	61da      	str	r2, [r3, #28]

  /* Return function status */
  return HAL_OK;
 8000f6c:	4608      	mov	r0, r1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f6e:	6261      	str	r1, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000f70:	f884 5020 	strb.w	r5, [r4, #32]
}
 8000f74:	bd38      	pop	{r3, r4, r5, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f76:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f78:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f7e:	6263      	str	r3, [r4, #36]	; 0x24
      return HAL_ERROR;
 8000f80:	2001      	movs	r0, #1
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f82:	f884 2020 	strb.w	r2, [r4, #32]
}
 8000f86:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8000f88:	f001 fe66 	bl	8002c58 <HAL_CAN_MspInit>
 8000f8c:	e788      	b.n	8000ea0 <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 8000f8e:	2001      	movs	r0, #1
}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f94:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d905      	bls.n	8000faa <HAL_CAN_ConfigFilter+0x16>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f9e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa4:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000fa6:	2001      	movs	r0, #1
  }
}
 8000fa8:	4770      	bx	lr
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000faa:	4b3c      	ldr	r3, [pc, #240]	; (800109c <HAL_CAN_ConfigFilter+0x108>)
 8000fac:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000fb0:	f042 0201 	orr.w	r2, r2, #1
{
 8000fb4:	b4f0      	push	{r4, r5, r6, r7}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000fb6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000fba:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000fbe:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8000fc2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000fc6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000fca:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8000fcc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8000fd0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000fd4:	694a      	ldr	r2, [r1, #20]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000fd6:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000fda:	2401      	movs	r4, #1
 8000fdc:	f002 001f 	and.w	r0, r2, #31
 8000fe0:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000fe4:	43c4      	mvns	r4, r0
 8000fe6:	4025      	ands	r5, r4
 8000fe8:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000fec:	69cd      	ldr	r5, [r1, #28]
 8000fee:	2d00      	cmp	r5, #0
 8000ff0:	d03a      	beq.n	8001068 <HAL_CAN_ConfigFilter+0xd4>
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000ff2:	2d01      	cmp	r5, #1
 8000ff4:	d115      	bne.n	8001022 <HAL_CAN_ConfigFilter+0x8e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000ff6:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8000ffa:	4305      	orrs	r5, r0
 8000ffc:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
 8001000:	00d2      	lsls	r2, r2, #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001002:	680f      	ldr	r7, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001004:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001006:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001008:	898b      	ldrh	r3, [r1, #12]
 800100a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800100e:	f502 42c8 	add.w	r2, r2, #25600	; 0x6400
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001012:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001016:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800101a:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800101e:	f8c2 3244 	str.w	r3, [r2, #580]	; 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001022:	698b      	ldr	r3, [r1, #24]
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001024:	4a1d      	ldr	r2, [pc, #116]	; (800109c <HAL_CAN_ConfigFilter+0x108>)
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001026:	bb9b      	cbnz	r3, 8001090 <HAL_CAN_ConfigFilter+0xfc>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001028:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 800102c:	4023      	ands	r3, r4
 800102e:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001032:	690b      	ldr	r3, [r1, #16]
 8001034:	bb2b      	cbnz	r3, 8001082 <HAL_CAN_ConfigFilter+0xee>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001036:	4b19      	ldr	r3, [pc, #100]	; (800109c <HAL_CAN_ConfigFilter+0x108>)
 8001038:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800103c:	4014      	ands	r4, r2
 800103e:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001042:	6a0b      	ldr	r3, [r1, #32]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d105      	bne.n	8001054 <HAL_CAN_ConfigFilter+0xc0>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001048:	4a14      	ldr	r2, [pc, #80]	; (800109c <HAL_CAN_ConfigFilter+0x108>)
 800104a:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
 800104e:	4318      	orrs	r0, r3
 8001050:	f8c2 021c 	str.w	r0, [r2, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001054:	4a11      	ldr	r2, [pc, #68]	; (800109c <HAL_CAN_ConfigFilter+0x108>)
 8001056:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 800105a:	f023 0301 	bic.w	r3, r3, #1
    return HAL_OK;
 800105e:	2000      	movs	r0, #0
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001060:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 8001064:	bcf0      	pop	{r4, r5, r6, r7}
 8001066:	4770      	bx	lr
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001068:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 800106c:	4025      	ands	r5, r4
 800106e:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
 8001072:	00d2      	lsls	r2, r2, #3
 8001074:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001078:	68cf      	ldr	r7, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800107a:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800107c:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800107e:	880b      	ldrh	r3, [r1, #0]
 8001080:	e7c5      	b.n	800100e <HAL_CAN_ConfigFilter+0x7a>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001082:	4a06      	ldr	r2, [pc, #24]	; (800109c <HAL_CAN_ConfigFilter+0x108>)
 8001084:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8001088:	4303      	orrs	r3, r0
 800108a:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 800108e:	e7d8      	b.n	8001042 <HAL_CAN_ConfigFilter+0xae>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001090:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 8001094:	4303      	orrs	r3, r0
 8001096:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 800109a:	e7ca      	b.n	8001032 <HAL_CAN_ConfigFilter+0x9e>
 800109c:	40006400 	.word	0x40006400

080010a0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80010a0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80010a2:	f890 3020 	ldrb.w	r3, [r0, #32]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d005      	beq.n	80010b6 <HAL_CAN_Start+0x16>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80010aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80010ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80010b0:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80010b2:	2001      	movs	r0, #1
  }
}
 80010b4:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010b6:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 80010b8:	2302      	movs	r3, #2
 80010ba:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010be:	6813      	ldr	r3, [r2, #0]
 80010c0:	f023 0301 	bic.w	r3, r3, #1
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 80010c8:	f7ff feca 	bl	8000e60 <HAL_GetTick>
 80010cc:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010ce:	e004      	b.n	80010da <HAL_CAN_Start+0x3a>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010d0:	f7ff fec6 	bl	8000e60 <HAL_GetTick>
 80010d4:	1b40      	subs	r0, r0, r5
 80010d6:	280a      	cmp	r0, #10
 80010d8:	d807      	bhi.n	80010ea <HAL_CAN_Start+0x4a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010da:	6823      	ldr	r3, [r4, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f013 0301 	ands.w	r3, r3, #1
 80010e2:	d1f5      	bne.n	80010d0 <HAL_CAN_Start+0x30>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010e4:	6263      	str	r3, [r4, #36]	; 0x24
    return HAL_OK;
 80010e6:	4618      	mov	r0, r3
}
 80010e8:	bd38      	pop	{r3, r4, r5, pc}
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80010ec:	2205      	movs	r2, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f2:	6263      	str	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 80010f4:	2001      	movs	r0, #1
        hcan->State = HAL_CAN_STATE_ERROR;
 80010f6:	f884 2020 	strb.w	r2, [r4, #32]
}
 80010fa:	bd38      	pop	{r3, r4, r5, pc}

080010fc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80010fc:	b470      	push	{r4, r5, r6}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80010fe:	f890 4020 	ldrb.w	r4, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001102:	6805      	ldr	r5, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001104:	3c01      	subs	r4, #1
 8001106:	2c01      	cmp	r4, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001108:	68ae      	ldr	r6, [r5, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 800110a:	d906      	bls.n	800111a <HAL_CAN_AddTxMessage+0x1e>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800110c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800110e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001112:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001114:	2001      	movs	r0, #1
  }
}
 8001116:	bc70      	pop	{r4, r5, r6}
 8001118:	4770      	bx	lr
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800111a:	f016 5fe0 	tst.w	r6, #469762048	; 0x1c000000
 800111e:	d02e      	beq.n	800117e <HAL_CAN_AddTxMessage+0x82>
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001120:	f3c6 6601 	ubfx	r6, r6, #24, #2
      if (transmitmailbox > 2U)
 8001124:	2e03      	cmp	r6, #3
 8001126:	d031      	beq.n	800118c <HAL_CAN_AddTxMessage+0x90>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001128:	2001      	movs	r0, #1
 800112a:	40b0      	lsls	r0, r6
 800112c:	6018      	str	r0, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 800112e:	688b      	ldr	r3, [r1, #8]
 8001130:	bb93      	cbnz	r3, 8001198 <HAL_CAN_AddTxMessage+0x9c>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001132:	680c      	ldr	r4, [r1, #0]
 8001134:	68c8      	ldr	r0, [r1, #12]
 8001136:	f106 0318 	add.w	r3, r6, #24
 800113a:	011b      	lsls	r3, r3, #4
 800113c:	ea40 5044 	orr.w	r0, r0, r4, lsl #21
 8001140:	50e8      	str	r0, [r5, r3]
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001142:	7d08      	ldrb	r0, [r1, #20]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001144:	6909      	ldr	r1, [r1, #16]
 8001146:	0136      	lsls	r6, r6, #4
 8001148:	19ab      	adds	r3, r5, r6
      if (pHeader->TransmitGlobalTime == ENABLE)
 800114a:	2801      	cmp	r0, #1
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800114c:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001150:	d105      	bne.n	800115e <HAL_CAN_AddTxMessage+0x62>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001152:	f8d3 1184 	ldr.w	r1, [r3, #388]	; 0x184
 8001156:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800115a:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800115e:	4435      	add	r5, r6
 8001160:	6851      	ldr	r1, [r2, #4]
 8001162:	f8c5 118c 	str.w	r1, [r5, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001166:	6812      	ldr	r2, [r2, #0]
 8001168:	f8c5 2188 	str.w	r2, [r5, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800116c:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8001170:	f042 0201 	orr.w	r2, r2, #1
      return HAL_OK;
 8001174:	2000      	movs	r0, #0
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001176:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
 800117a:	bc70      	pop	{r4, r5, r6}
 800117c:	4770      	bx	lr
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800117e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001180:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001184:	6243      	str	r3, [r0, #36]	; 0x24
}
 8001186:	bc70      	pop	{r4, r5, r6}
      return HAL_ERROR;
 8001188:	2001      	movs	r0, #1
}
 800118a:	4770      	bx	lr
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800118c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800118e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001192:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 8001194:	2001      	movs	r0, #1
 8001196:	e7be      	b.n	8001116 <HAL_CAN_AddTxMessage+0x1a>
                                                           pHeader->IDE |
 8001198:	68c8      	ldr	r0, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800119a:	684c      	ldr	r4, [r1, #4]
                                                           pHeader->IDE |
 800119c:	4303      	orrs	r3, r0
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800119e:	f106 0018 	add.w	r0, r6, #24
 80011a2:	0100      	lsls	r0, r0, #4
                                                           pHeader->IDE |
 80011a4:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011a8:	502b      	str	r3, [r5, r0]
 80011aa:	e7ca      	b.n	8001142 <HAL_CAN_AddTxMessage+0x46>

080011ac <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80011ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 80011b0:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80011b4:	3c01      	subs	r4, #1
 80011b6:	2c01      	cmp	r4, #1
 80011b8:	d906      	bls.n	80011c8 <HAL_CAN_GetRxMessage+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80011bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c0:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80011c2:	2001      	movs	r0, #1
  }
}
 80011c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011c8:	6805      	ldr	r5, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80011ca:	2900      	cmp	r1, #0
 80011cc:	d058      	beq.n	8001280 <HAL_CAN_GetRxMessage+0xd4>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80011ce:	692c      	ldr	r4, [r5, #16]
 80011d0:	07a4      	lsls	r4, r4, #30
 80011d2:	d058      	beq.n	8001286 <HAL_CAN_GetRxMessage+0xda>
 80011d4:	010c      	lsls	r4, r1, #4
 80011d6:	192e      	adds	r6, r5, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80011d8:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 80011dc:	f007 0704 	and.w	r7, r7, #4
 80011e0:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80011e2:	2f00      	cmp	r7, #0
 80011e4:	d15c      	bne.n	80012a0 <HAL_CAN_GetRxMessage+0xf4>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80011e6:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 80011ea:	0d7f      	lsrs	r7, r7, #21
 80011ec:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 80011ee:	f8d6 e1b0 	ldr.w	lr, [r6, #432]	; 0x1b0
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80011f2:	f8d6 c1b4 	ldr.w	ip, [r6, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80011f6:	f8d6 71b4 	ldr.w	r7, [r6, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80011fa:	f8d6 61b4 	ldr.w	r6, [r6, #436]	; 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80011fe:	4425      	add	r5, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8001200:	f3ce 0e40 	ubfx	lr, lr, #1, #1
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001204:	f8d5 81b8 	ldr.w	r8, [r5, #440]	; 0x1b8
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001208:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800120c:	f00c 050f 	and.w	r5, ip, #15
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001210:	0c36      	lsrs	r6, r6, #16
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001212:	e9c2 e503 	strd	lr, r5, [r2, #12]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001216:	e9c2 6705 	strd	r6, r7, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800121a:	f883 8000 	strb.w	r8, [r3]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800121e:	6802      	ldr	r2, [r0, #0]
 8001220:	4422      	add	r2, r4
 8001222:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8001226:	0a12      	lsrs	r2, r2, #8
 8001228:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800122a:	6802      	ldr	r2, [r0, #0]
 800122c:	4422      	add	r2, r4
 800122e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8001232:	0c12      	lsrs	r2, r2, #16
 8001234:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001236:	6802      	ldr	r2, [r0, #0]
 8001238:	4422      	add	r2, r4
 800123a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800123e:	0e12      	lsrs	r2, r2, #24
 8001240:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001242:	6802      	ldr	r2, [r0, #0]
 8001244:	4422      	add	r2, r4
 8001246:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800124a:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800124c:	6802      	ldr	r2, [r0, #0]
 800124e:	4422      	add	r2, r4
 8001250:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001254:	0a12      	lsrs	r2, r2, #8
 8001256:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001258:	6802      	ldr	r2, [r0, #0]
 800125a:	4422      	add	r2, r4
 800125c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001260:	0c12      	lsrs	r2, r2, #16
 8001262:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001264:	6802      	ldr	r2, [r0, #0]
 8001266:	4414      	add	r4, r2
 8001268:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 800126c:	0e12      	lsrs	r2, r2, #24
 800126e:	71da      	strb	r2, [r3, #7]
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001270:	6802      	ldr	r2, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001272:	b979      	cbnz	r1, 8001294 <HAL_CAN_GetRxMessage+0xe8>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001274:	68d3      	ldr	r3, [r2, #12]
 8001276:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 800127a:	4608      	mov	r0, r1
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800127c:	60d3      	str	r3, [r2, #12]
 800127e:	e7a1      	b.n	80011c4 <HAL_CAN_GetRxMessage+0x18>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001280:	68ec      	ldr	r4, [r5, #12]
 8001282:	07a6      	lsls	r6, r4, #30
 8001284:	d1a6      	bne.n	80011d4 <HAL_CAN_GetRxMessage+0x28>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001286:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001288:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800128c:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 800128e:	2001      	movs	r0, #1
}
 8001290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001294:	6913      	ldr	r3, [r2, #16]
 8001296:	f043 0320 	orr.w	r3, r3, #32
 800129a:	6113      	str	r3, [r2, #16]
    return HAL_OK;
 800129c:	2000      	movs	r0, #0
 800129e:	e791      	b.n	80011c4 <HAL_CAN_GetRxMessage+0x18>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80012a0:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 80012a4:	08ff      	lsrs	r7, r7, #3
 80012a6:	6057      	str	r7, [r2, #4]
 80012a8:	e7a1      	b.n	80011ee <HAL_CAN_GetRxMessage+0x42>
 80012aa:	bf00      	nop

080012ac <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 80012ac:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80012b0:	3b01      	subs	r3, #1
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d905      	bls.n	80012c2 <HAL_CAN_ActivateNotification+0x16>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012b6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80012b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012bc:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80012be:	2001      	movs	r0, #1
  }
}
 80012c0:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80012c2:	6802      	ldr	r2, [r0, #0]
 80012c4:	6953      	ldr	r3, [r2, #20]
 80012c6:	4319      	orrs	r1, r3
 80012c8:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 80012ca:	2000      	movs	r0, #0
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop

080012d0 <HAL_CAN_TxMailbox0CompleteCallback>:
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop

080012d4 <HAL_CAN_TxMailbox1CompleteCallback>:
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop

080012d8 <HAL_CAN_TxMailbox2CompleteCallback>:
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop

080012dc <HAL_CAN_TxMailbox0AbortCallback>:
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop

080012e0 <HAL_CAN_TxMailbox1AbortCallback>:
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop

080012e4 <HAL_CAN_TxMailbox2AbortCallback>:
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop

080012e8 <HAL_CAN_RxFifo0FullCallback>:
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop

080012ec <HAL_CAN_RxFifo1MsgPendingCallback>:
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop

080012f0 <HAL_CAN_RxFifo1FullCallback>:
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop

080012f4 <HAL_CAN_SleepCallback>:
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop

080012f8 <HAL_CAN_WakeUpFromRxMsgCallback>:
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop

080012fc <HAL_CAN_ErrorCallback>:
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop

08001300 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001300:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001304:	6803      	ldr	r3, [r0, #0]
 8001306:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001308:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800130c:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800130e:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001312:	f8d3 9010 	ldr.w	r9, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001316:	f8d3 a018 	ldr.w	sl, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800131a:	f014 0601 	ands.w	r6, r4, #1
{
 800131e:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001320:	d025      	beq.n	800136e <HAL_CAN_IRQHandler+0x6e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001322:	f017 0601 	ands.w	r6, r7, #1
 8001326:	f040 809c 	bne.w	8001462 <HAL_CAN_IRQHandler+0x162>
 800132a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800132e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001332:	05f8      	lsls	r0, r7, #23
 8001334:	d50d      	bpl.n	8001352 <HAL_CAN_IRQHandler+0x52>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001336:	682b      	ldr	r3, [r5, #0]
 8001338:	f44f 7080 	mov.w	r0, #256	; 0x100
 800133c:	6098      	str	r0, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800133e:	05bb      	lsls	r3, r7, #22
 8001340:	f100 80c7 	bmi.w	80014d2 <HAL_CAN_IRQHandler+0x1d2>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001344:	0578      	lsls	r0, r7, #21
 8001346:	f100 80d7 	bmi.w	80014f8 <HAL_CAN_IRQHandler+0x1f8>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800134a:	053a      	lsls	r2, r7, #20
 800134c:	f140 80e8 	bpl.w	8001520 <HAL_CAN_IRQHandler+0x220>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001350:	460e      	mov	r6, r1
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001352:	03fb      	lsls	r3, r7, #15
 8001354:	d50b      	bpl.n	800136e <HAL_CAN_IRQHandler+0x6e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001356:	682b      	ldr	r3, [r5, #0]
 8001358:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800135c:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800135e:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001360:	f100 80b3 	bmi.w	80014ca <HAL_CAN_IRQHandler+0x1ca>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001364:	0379      	lsls	r1, r7, #13
 8001366:	f140 80c9 	bpl.w	80014fc <HAL_CAN_IRQHandler+0x1fc>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800136a:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800136e:	0723      	lsls	r3, r4, #28
 8001370:	d502      	bpl.n	8001378 <HAL_CAN_IRQHandler+0x78>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001372:	f01b 0f10 	tst.w	fp, #16
 8001376:	d16e      	bne.n	8001456 <HAL_CAN_IRQHandler+0x156>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001378:	0767      	lsls	r7, r4, #29
 800137a:	d502      	bpl.n	8001382 <HAL_CAN_IRQHandler+0x82>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800137c:	f01b 0f08 	tst.w	fp, #8
 8001380:	d17f      	bne.n	8001482 <HAL_CAN_IRQHandler+0x182>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001382:	07a0      	lsls	r0, r4, #30
 8001384:	d504      	bpl.n	8001390 <HAL_CAN_IRQHandler+0x90>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001386:	682b      	ldr	r3, [r5, #0]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	0799      	lsls	r1, r3, #30
 800138c:	f040 808e 	bne.w	80014ac <HAL_CAN_IRQHandler+0x1ac>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001390:	0662      	lsls	r2, r4, #25
 8001392:	d502      	bpl.n	800139a <HAL_CAN_IRQHandler+0x9a>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001394:	f019 0f10 	tst.w	r9, #16
 8001398:	d157      	bne.n	800144a <HAL_CAN_IRQHandler+0x14a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800139a:	06a3      	lsls	r3, r4, #26
 800139c:	d503      	bpl.n	80013a6 <HAL_CAN_IRQHandler+0xa6>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800139e:	f019 0f08 	tst.w	r9, #8
 80013a2:	f040 8087 	bne.w	80014b4 <HAL_CAN_IRQHandler+0x1b4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80013a6:	06e7      	lsls	r7, r4, #27
 80013a8:	d504      	bpl.n	80013b4 <HAL_CAN_IRQHandler+0xb4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80013aa:	682b      	ldr	r3, [r5, #0]
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	0798      	lsls	r0, r3, #30
 80013b0:	f040 8087 	bne.w	80014c2 <HAL_CAN_IRQHandler+0x1c2>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80013b4:	03a1      	lsls	r1, r4, #14
 80013b6:	d502      	bpl.n	80013be <HAL_CAN_IRQHandler+0xbe>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80013b8:	f018 0f10 	tst.w	r8, #16
 80013bc:	d168      	bne.n	8001490 <HAL_CAN_IRQHandler+0x190>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80013be:	03e2      	lsls	r2, r4, #15
 80013c0:	d502      	bpl.n	80013c8 <HAL_CAN_IRQHandler+0xc8>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80013c2:	f018 0f08 	tst.w	r8, #8
 80013c6:	d16a      	bne.n	800149e <HAL_CAN_IRQHandler+0x19e>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80013c8:	0423      	lsls	r3, r4, #16
 80013ca:	d535      	bpl.n	8001438 <HAL_CAN_IRQHandler+0x138>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80013cc:	f018 0f04 	tst.w	r8, #4
 80013d0:	682b      	ldr	r3, [r5, #0]
 80013d2:	d02f      	beq.n	8001434 <HAL_CAN_IRQHandler+0x134>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013d4:	05e7      	lsls	r7, r4, #23
 80013d6:	d504      	bpl.n	80013e2 <HAL_CAN_IRQHandler+0xe2>
 80013d8:	f01a 0f01 	tst.w	sl, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80013dc:	bf18      	it	ne
 80013de:	f046 0601 	orrne.w	r6, r6, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013e2:	05a0      	lsls	r0, r4, #22
 80013e4:	d504      	bpl.n	80013f0 <HAL_CAN_IRQHandler+0xf0>
 80013e6:	f01a 0f02 	tst.w	sl, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80013ea:	bf18      	it	ne
 80013ec:	f046 0602 	orrne.w	r6, r6, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013f0:	0561      	lsls	r1, r4, #21
 80013f2:	d504      	bpl.n	80013fe <HAL_CAN_IRQHandler+0xfe>
 80013f4:	f01a 0f04 	tst.w	sl, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80013f8:	bf18      	it	ne
 80013fa:	f046 0604 	orrne.w	r6, r6, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013fe:	0522      	lsls	r2, r4, #20
 8001400:	d518      	bpl.n	8001434 <HAL_CAN_IRQHandler+0x134>
 8001402:	f01a 0a70 	ands.w	sl, sl, #112	; 0x70
 8001406:	d015      	beq.n	8001434 <HAL_CAN_IRQHandler+0x134>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 8001408:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 800140c:	f000 8096 	beq.w	800153c <HAL_CAN_IRQHandler+0x23c>
 8001410:	d979      	bls.n	8001506 <HAL_CAN_IRQHandler+0x206>
 8001412:	f1ba 0f50 	cmp.w	sl, #80	; 0x50
 8001416:	f000 808e 	beq.w	8001536 <HAL_CAN_IRQHandler+0x236>
 800141a:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 800141e:	f000 8090 	beq.w	8001542 <HAL_CAN_IRQHandler+0x242>
 8001422:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8001426:	d101      	bne.n	800142c <HAL_CAN_IRQHandler+0x12c>
            /* Set CAN error code to Acknowledgement error */
            errorcode |= HAL_CAN_ERROR_ACK;
            break;
          case (CAN_ESR_LEC_2):
            /* Set CAN error code to Bit recessive error */
            errorcode |= HAL_CAN_ERROR_BR;
 8001428:	f046 0640 	orr.w	r6, r6, #64	; 0x40
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800142c:	699a      	ldr	r2, [r3, #24]
 800142e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001432:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001434:	2204      	movs	r2, #4
 8001436:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001438:	b12e      	cbz	r6, 8001446 <HAL_CAN_IRQHandler+0x146>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800143a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800143c:	431e      	orrs	r6, r3
 800143e:	626e      	str	r6, [r5, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001440:	4628      	mov	r0, r5
 8001442:	f7ff ff5b 	bl	80012fc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001446:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800144a:	682b      	ldr	r3, [r5, #0]
 800144c:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800144e:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001452:	611a      	str	r2, [r3, #16]
 8001454:	e7a1      	b.n	800139a <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001456:	682b      	ldr	r3, [r5, #0]
 8001458:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800145a:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800145e:	60da      	str	r2, [r3, #12]
 8001460:	e78a      	b.n	8001378 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001462:	2201      	movs	r2, #1
 8001464:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001466:	07bb      	lsls	r3, r7, #30
 8001468:	d437      	bmi.n	80014da <HAL_CAN_IRQHandler+0x1da>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800146a:	077e      	lsls	r6, r7, #29
 800146c:	d43d      	bmi.n	80014ea <HAL_CAN_IRQHandler+0x1ea>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800146e:	f017 0608 	ands.w	r6, r7, #8
 8001472:	d059      	beq.n	8001528 <HAL_CAN_IRQHandler+0x228>
 8001474:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001478:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800147c:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8001480:	e757      	b.n	8001332 <HAL_CAN_IRQHandler+0x32>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001482:	682b      	ldr	r3, [r5, #0]
 8001484:	2208      	movs	r2, #8
 8001486:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001488:	4628      	mov	r0, r5
 800148a:	f7ff ff2d 	bl	80012e8 <HAL_CAN_RxFifo0FullCallback>
 800148e:	e778      	b.n	8001382 <HAL_CAN_IRQHandler+0x82>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001490:	682b      	ldr	r3, [r5, #0]
 8001492:	2210      	movs	r2, #16
 8001494:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8001496:	4628      	mov	r0, r5
 8001498:	f7ff ff2c 	bl	80012f4 <HAL_CAN_SleepCallback>
 800149c:	e78f      	b.n	80013be <HAL_CAN_IRQHandler+0xbe>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800149e:	682b      	ldr	r3, [r5, #0]
 80014a0:	2208      	movs	r2, #8
 80014a2:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80014a4:	4628      	mov	r0, r5
 80014a6:	f7ff ff27 	bl	80012f8 <HAL_CAN_WakeUpFromRxMsgCallback>
 80014aa:	e78d      	b.n	80013c8 <HAL_CAN_IRQHandler+0xc8>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80014ac:	4628      	mov	r0, r5
 80014ae:	f001 fe2f 	bl	8003110 <HAL_CAN_RxFifo0MsgPendingCallback>
 80014b2:	e76d      	b.n	8001390 <HAL_CAN_IRQHandler+0x90>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80014b4:	682b      	ldr	r3, [r5, #0]
 80014b6:	2208      	movs	r2, #8
 80014b8:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80014ba:	4628      	mov	r0, r5
 80014bc:	f7ff ff18 	bl	80012f0 <HAL_CAN_RxFifo1FullCallback>
 80014c0:	e771      	b.n	80013a6 <HAL_CAN_IRQHandler+0xa6>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80014c2:	4628      	mov	r0, r5
 80014c4:	f7ff ff12 	bl	80012ec <HAL_CAN_RxFifo1MsgPendingCallback>
 80014c8:	e774      	b.n	80013b4 <HAL_CAN_IRQHandler+0xb4>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80014ca:	4628      	mov	r0, r5
 80014cc:	f7ff ff04 	bl	80012d8 <HAL_CAN_TxMailbox2CompleteCallback>
 80014d0:	e74d      	b.n	800136e <HAL_CAN_IRQHandler+0x6e>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80014d2:	4628      	mov	r0, r5
 80014d4:	f7ff fefe 	bl	80012d4 <HAL_CAN_TxMailbox1CompleteCallback>
 80014d8:	e73b      	b.n	8001352 <HAL_CAN_IRQHandler+0x52>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80014da:	f7ff fef9 	bl	80012d0 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80014de:	2600      	movs	r6, #0
 80014e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014e8:	e723      	b.n	8001332 <HAL_CAN_IRQHandler+0x32>
 80014ea:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80014ee:	f44f 4190 	mov.w	r1, #18432	; 0x4800
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80014f2:	f44f 6600 	mov.w	r6, #2048	; 0x800
 80014f6:	e71c      	b.n	8001332 <HAL_CAN_IRQHandler+0x32>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80014f8:	4616      	mov	r6, r2
 80014fa:	e72a      	b.n	8001352 <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80014fc:	033a      	lsls	r2, r7, #12
 80014fe:	d50b      	bpl.n	8001518 <HAL_CAN_IRQHandler+0x218>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001500:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 8001504:	e733      	b.n	800136e <HAL_CAN_IRQHandler+0x6e>
        switch (esrflags & CAN_ESR_LEC)
 8001506:	f1ba 0f10 	cmp.w	sl, #16
 800150a:	d01d      	beq.n	8001548 <HAL_CAN_IRQHandler+0x248>
 800150c:	f1ba 0f20 	cmp.w	sl, #32
 8001510:	d18c      	bne.n	800142c <HAL_CAN_IRQHandler+0x12c>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001512:	f046 0610 	orr.w	r6, r6, #16
            break;
 8001516:	e789      	b.n	800142c <HAL_CAN_IRQHandler+0x12c>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001518:	4628      	mov	r0, r5
 800151a:	f7ff fee3 	bl	80012e4 <HAL_CAN_TxMailbox2AbortCallback>
 800151e:	e726      	b.n	800136e <HAL_CAN_IRQHandler+0x6e>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001520:	4628      	mov	r0, r5
 8001522:	f7ff fedd 	bl	80012e0 <HAL_CAN_TxMailbox1AbortCallback>
 8001526:	e714      	b.n	8001352 <HAL_CAN_IRQHandler+0x52>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001528:	f7ff fed8 	bl	80012dc <HAL_CAN_TxMailbox0AbortCallback>
 800152c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001530:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001534:	e6fd      	b.n	8001332 <HAL_CAN_IRQHandler+0x32>
            errorcode |= HAL_CAN_ERROR_BD;
 8001536:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 800153a:	e777      	b.n	800142c <HAL_CAN_IRQHandler+0x12c>
            errorcode |= HAL_CAN_ERROR_ACK;
 800153c:	f046 0620 	orr.w	r6, r6, #32
            break;
 8001540:	e774      	b.n	800142c <HAL_CAN_IRQHandler+0x12c>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001542:	f446 7680 	orr.w	r6, r6, #256	; 0x100
            break;
 8001546:	e771      	b.n	800142c <HAL_CAN_IRQHandler+0x12c>
            errorcode |= HAL_CAN_ERROR_STF;
 8001548:	f046 0608 	orr.w	r6, r6, #8
            break;
 800154c:	e76e      	b.n	800142c <HAL_CAN_IRQHandler+0x12c>
 800154e:	bf00      	nop

08001550 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001550:	4a07      	ldr	r2, [pc, #28]	; (8001570 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001552:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001554:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8001558:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800155a:	0200      	lsls	r0, r0, #8
 800155c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001560:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001568:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800156a:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001574:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <HAL_NVIC_SetPriority+0x64>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800157c:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800157e:	f1c3 0507 	rsb	r5, r3, #7
 8001582:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001584:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001588:	bf28      	it	cs
 800158a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158c:	2c06      	cmp	r4, #6
 800158e:	d919      	bls.n	80015c4 <HAL_NVIC_SetPriority+0x50>
 8001590:	3b03      	subs	r3, #3
 8001592:	f04f 34ff 	mov.w	r4, #4294967295
 8001596:	409c      	lsls	r4, r3
 8001598:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	f04f 32ff 	mov.w	r2, #4294967295
 80015a0:	40aa      	lsls	r2, r5
 80015a2:	ea21 0102 	bic.w	r1, r1, r2
 80015a6:	fa01 f203 	lsl.w	r2, r1, r3
 80015aa:	4322      	orrs	r2, r4
 80015ac:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 80015ae:	2800      	cmp	r0, #0
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	db0a      	blt.n	80015ca <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80015b8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80015bc:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80015c0:	bc30      	pop	{r4, r5}
 80015c2:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c4:	2400      	movs	r4, #0
 80015c6:	4623      	mov	r3, r4
 80015c8:	e7e8      	b.n	800159c <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ca:	4b04      	ldr	r3, [pc, #16]	; (80015dc <HAL_NVIC_SetPriority+0x68>)
 80015cc:	f000 000f 	and.w	r0, r0, #15
 80015d0:	4403      	add	r3, r0
 80015d2:	761a      	strb	r2, [r3, #24]
 80015d4:	bc30      	pop	{r4, r5}
 80015d6:	4770      	bx	lr
 80015d8:	e000ed00 	.word	0xe000ed00
 80015dc:	e000ecfc 	.word	0xe000ecfc

080015e0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80015e0:	2800      	cmp	r0, #0
 80015e2:	db07      	blt.n	80015f4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e4:	f000 011f 	and.w	r1, r0, #31
 80015e8:	2301      	movs	r3, #1
 80015ea:	0940      	lsrs	r0, r0, #5
 80015ec:	4a02      	ldr	r2, [pc, #8]	; (80015f8 <HAL_NVIC_EnableIRQ+0x18>)
 80015ee:	408b      	lsls	r3, r1
 80015f0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000e100 	.word	0xe000e100

080015fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015fc:	3801      	subs	r0, #1
 80015fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001602:	d20e      	bcs.n	8001622 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001604:	4b08      	ldr	r3, [pc, #32]	; (8001628 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001606:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001608:	4c08      	ldr	r4, [pc, #32]	; (800162c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800160a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160c:	20f0      	movs	r0, #240	; 0xf0
 800160e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001612:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001614:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001616:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161a:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800161c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001620:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001622:	2001      	movs	r0, #1
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000e010 	.word	0xe000e010
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001630:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001634:	2b02      	cmp	r3, #2
 8001636:	d003      	beq.n	8001640 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800163c:	2001      	movs	r0, #1
 800163e:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001640:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001642:	2305      	movs	r3, #5
 8001644:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001648:	6813      	ldr	r3, [r2, #0]
 800164a:	f023 0301 	bic.w	r3, r3, #1
 800164e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8001650:	2000      	movs	r0, #0
}
 8001652:	4770      	bx	lr

08001654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001658:	f8df c260 	ldr.w	ip, [pc, #608]	; 80018bc <HAL_GPIO_Init+0x268>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165c:	f8df 8260 	ldr.w	r8, [pc, #608]	; 80018c0 <HAL_GPIO_Init+0x26c>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001660:	f8d1 e000 	ldr.w	lr, [r1]
{
 8001664:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001666:	2500      	movs	r5, #0
 8001668:	e003      	b.n	8001672 <HAL_GPIO_Init+0x1e>
 800166a:	3501      	adds	r5, #1
 800166c:	2d10      	cmp	r5, #16
 800166e:	f000 80a4 	beq.w	80017ba <HAL_GPIO_Init+0x166>
    ioposition = 0x01U << position;
 8001672:	2301      	movs	r3, #1
 8001674:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001676:	ea0e 0403 	and.w	r4, lr, r3
    if(iocurrent == ioposition)
 800167a:	42a3      	cmp	r3, r4
 800167c:	d1f5      	bne.n	800166a <HAL_GPIO_Init+0x16>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800167e:	684e      	ldr	r6, [r1, #4]
 8001680:	f026 0a10 	bic.w	sl, r6, #16
 8001684:	f1ba 0f02 	cmp.w	sl, #2
 8001688:	f000 809a 	beq.w	80017c0 <HAL_GPIO_Init+0x16c>
 800168c:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001690:	2203      	movs	r2, #3
      temp = GPIOx->MODER;
 8001692:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001696:	fa02 f209 	lsl.w	r2, r2, r9
 800169a:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800169c:	f006 0703 	and.w	r7, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016a0:	ea02 0b0b 	and.w	fp, r2, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016a4:	fa07 f709 	lsl.w	r7, r7, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016a8:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016ac:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016b0:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 80016b4:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016b6:	f240 80a9 	bls.w	800180c <HAL_GPIO_Init+0x1b8>
      temp = GPIOx->PUPDR;
 80016ba:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016bc:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016be:	403a      	ands	r2, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016c0:	fa03 f309 	lsl.w	r3, r3, r9
 80016c4:	4313      	orrs	r3, r2
      GPIOx->PUPDR = temp;
 80016c6:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016c8:	00f3      	lsls	r3, r6, #3
 80016ca:	d5ce      	bpl.n	800166a <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016cc:	2300      	movs	r3, #0
 80016ce:	9301      	str	r3, [sp, #4]
 80016d0:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80016d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d8:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
 80016dc:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80016e0:	f025 0203 	bic.w	r2, r5, #3
 80016e4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80016e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ec:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 80016f0:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016f2:	f005 0703 	and.w	r7, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f6:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80016f8:	f8d2 9008 	ldr.w	r9, [r2, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016fc:	00bf      	lsls	r7, r7, #2
 80016fe:	230f      	movs	r3, #15
 8001700:	40bb      	lsls	r3, r7
 8001702:	ea29 0a03 	bic.w	sl, r9, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001706:	4b67      	ldr	r3, [pc, #412]	; (80018a4 <HAL_GPIO_Init+0x250>)
 8001708:	4298      	cmp	r0, r3
 800170a:	d02e      	beq.n	800176a <HAL_GPIO_Init+0x116>
 800170c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001710:	4298      	cmp	r0, r3
 8001712:	f000 808e 	beq.w	8001832 <HAL_GPIO_Init+0x1de>
 8001716:	4b64      	ldr	r3, [pc, #400]	; (80018a8 <HAL_GPIO_Init+0x254>)
 8001718:	4298      	cmp	r0, r3
 800171a:	f000 8091 	beq.w	8001840 <HAL_GPIO_Init+0x1ec>
 800171e:	4b63      	ldr	r3, [pc, #396]	; (80018ac <HAL_GPIO_Init+0x258>)
 8001720:	4298      	cmp	r0, r3
 8001722:	f000 8094 	beq.w	800184e <HAL_GPIO_Init+0x1fa>
 8001726:	4b62      	ldr	r3, [pc, #392]	; (80018b0 <HAL_GPIO_Init+0x25c>)
 8001728:	4298      	cmp	r0, r3
 800172a:	f000 8097 	beq.w	800185c <HAL_GPIO_Init+0x208>
 800172e:	4b61      	ldr	r3, [pc, #388]	; (80018b4 <HAL_GPIO_Init+0x260>)
 8001730:	4298      	cmp	r0, r3
 8001732:	f000 80a1 	beq.w	8001878 <HAL_GPIO_Init+0x224>
 8001736:	4b60      	ldr	r3, [pc, #384]	; (80018b8 <HAL_GPIO_Init+0x264>)
 8001738:	4298      	cmp	r0, r3
 800173a:	f000 80a4 	beq.w	8001886 <HAL_GPIO_Init+0x232>
 800173e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80018c4 <HAL_GPIO_Init+0x270>
 8001742:	4548      	cmp	r0, r9
 8001744:	f000 8091 	beq.w	800186a <HAL_GPIO_Init+0x216>
 8001748:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80018c8 <HAL_GPIO_Init+0x274>
 800174c:	4548      	cmp	r0, r9
 800174e:	f000 80a1 	beq.w	8001894 <HAL_GPIO_Init+0x240>
 8001752:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80018cc <HAL_GPIO_Init+0x278>
 8001756:	4548      	cmp	r0, r9
 8001758:	bf0c      	ite	eq
 800175a:	f04f 0909 	moveq.w	r9, #9
 800175e:	f04f 090a 	movne.w	r9, #10
 8001762:	fa09 f707 	lsl.w	r7, r9, r7
 8001766:	ea4a 0a07 	orr.w	sl, sl, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800176a:	f8c2 a008 	str.w	sl, [r2, #8]
        temp = EXTI->IMR;
 800176e:	f8dc 3000 	ldr.w	r3, [ip]
        temp &= ~((uint32_t)iocurrent);
 8001772:	43e2      	mvns	r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001774:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 8001776:	bf54      	ite	pl
 8001778:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800177a:	4323      	orrmi	r3, r4
        }
        EXTI->IMR = temp;
 800177c:	f8cc 3000 	str.w	r3, [ip]

        temp = EXTI->EMR;
 8001780:	f8dc 3004 	ldr.w	r3, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001784:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 8001786:	bf54      	ite	pl
 8001788:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800178a:	4323      	orrmi	r3, r4
        }
        EXTI->EMR = temp;
 800178c:	f8cc 3004 	str.w	r3, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001790:	f8dc 3008 	ldr.w	r3, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001794:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 8001796:	bf54      	ite	pl
 8001798:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800179a:	4323      	orrmi	r3, r4
        }
        EXTI->RTSR = temp;
 800179c:	f8cc 3008 	str.w	r3, [ip, #8]

        temp = EXTI->FTSR;
 80017a0:	f8dc 300c 	ldr.w	r3, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017a4:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017a6:	f105 0501 	add.w	r5, r5, #1
        temp &= ~((uint32_t)iocurrent);
 80017aa:	bf54      	ite	pl
 80017ac:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80017ae:	4323      	orrmi	r3, r4
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017b0:	2d10      	cmp	r5, #16
        }
        EXTI->FTSR = temp;
 80017b2:	f8cc 300c 	str.w	r3, [ip, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017b6:	f47f af5c 	bne.w	8001672 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 80017ba:	b003      	add	sp, #12
 80017bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->AFR[position >> 3U];
 80017c0:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 80017c4:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017c8:	f005 0707 	and.w	r7, r5, #7
        temp = GPIOx->AFR[position >> 3U];
 80017cc:	f8d9 2020 	ldr.w	r2, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017d0:	00bf      	lsls	r7, r7, #2
 80017d2:	f04f 0b0f 	mov.w	fp, #15
 80017d6:	fa0b fb07 	lsl.w	fp, fp, r7
 80017da:	ea22 0a0b 	bic.w	sl, r2, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017de:	690a      	ldr	r2, [r1, #16]
 80017e0:	40ba      	lsls	r2, r7
 80017e2:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->AFR[position >> 3U] = temp;
 80017e6:	f8c9 2020 	str.w	r2, [r9, #32]
 80017ea:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017ee:	2203      	movs	r2, #3
      temp = GPIOx->MODER;
 80017f0:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017f4:	fa02 f209 	lsl.w	r2, r2, r9
 80017f8:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017fa:	f006 0703 	and.w	r7, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017fe:	ea02 0a0a 	and.w	sl, r2, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001802:	fa07 f709 	lsl.w	r7, r7, r9
 8001806:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->MODER = temp;
 800180a:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 800180c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800180e:	ea07 0a02 	and.w	sl, r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001812:	68cf      	ldr	r7, [r1, #12]
 8001814:	fa07 f709 	lsl.w	r7, r7, r9
 8001818:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800181c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800181e:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001822:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001826:	ea2a 0303 	bic.w	r3, sl, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800182a:	40af      	lsls	r7, r5
 800182c:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 800182e:	6047      	str	r7, [r0, #4]
 8001830:	e743      	b.n	80016ba <HAL_GPIO_Init+0x66>
 8001832:	f04f 0901 	mov.w	r9, #1
 8001836:	fa09 f707 	lsl.w	r7, r9, r7
 800183a:	ea4a 0a07 	orr.w	sl, sl, r7
 800183e:	e794      	b.n	800176a <HAL_GPIO_Init+0x116>
 8001840:	f04f 0902 	mov.w	r9, #2
 8001844:	fa09 f707 	lsl.w	r7, r9, r7
 8001848:	ea4a 0a07 	orr.w	sl, sl, r7
 800184c:	e78d      	b.n	800176a <HAL_GPIO_Init+0x116>
 800184e:	f04f 0903 	mov.w	r9, #3
 8001852:	fa09 f707 	lsl.w	r7, r9, r7
 8001856:	ea4a 0a07 	orr.w	sl, sl, r7
 800185a:	e786      	b.n	800176a <HAL_GPIO_Init+0x116>
 800185c:	f04f 0904 	mov.w	r9, #4
 8001860:	fa09 f707 	lsl.w	r7, r9, r7
 8001864:	ea4a 0a07 	orr.w	sl, sl, r7
 8001868:	e77f      	b.n	800176a <HAL_GPIO_Init+0x116>
 800186a:	f04f 0907 	mov.w	r9, #7
 800186e:	fa09 f707 	lsl.w	r7, r9, r7
 8001872:	ea4a 0a07 	orr.w	sl, sl, r7
 8001876:	e778      	b.n	800176a <HAL_GPIO_Init+0x116>
 8001878:	f04f 0905 	mov.w	r9, #5
 800187c:	fa09 f707 	lsl.w	r7, r9, r7
 8001880:	ea4a 0a07 	orr.w	sl, sl, r7
 8001884:	e771      	b.n	800176a <HAL_GPIO_Init+0x116>
 8001886:	f04f 0906 	mov.w	r9, #6
 800188a:	fa09 f707 	lsl.w	r7, r9, r7
 800188e:	ea4a 0a07 	orr.w	sl, sl, r7
 8001892:	e76a      	b.n	800176a <HAL_GPIO_Init+0x116>
 8001894:	f04f 0908 	mov.w	r9, #8
 8001898:	fa09 f707 	lsl.w	r7, r9, r7
 800189c:	ea4a 0a07 	orr.w	sl, sl, r7
 80018a0:	e763      	b.n	800176a <HAL_GPIO_Init+0x116>
 80018a2:	bf00      	nop
 80018a4:	40020000 	.word	0x40020000
 80018a8:	40020800 	.word	0x40020800
 80018ac:	40020c00 	.word	0x40020c00
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40021400 	.word	0x40021400
 80018b8:	40021800 	.word	0x40021800
 80018bc:	40013c00 	.word	0x40013c00
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40021c00 	.word	0x40021c00
 80018c8:	40022000 	.word	0x40022000
 80018cc:	40022400 	.word	0x40022400

080018d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018d0:	b902      	cbnz	r2, 80018d4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018d2:	0409      	lsls	r1, r1, #16
 80018d4:	6181      	str	r1, [r0, #24]
  }
}
 80018d6:	4770      	bx	lr

080018d8 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80018d8:	6943      	ldr	r3, [r0, #20]
 80018da:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80018de:	bf08      	it	eq
 80018e0:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 80018e2:	6181      	str	r1, [r0, #24]
  }
}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop

080018e8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018e8:	2800      	cmp	r0, #0
 80018ea:	f000 8132 	beq.w	8001b52 <HAL_RCC_OscConfig+0x26a>
{
 80018ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018f2:	6803      	ldr	r3, [r0, #0]
 80018f4:	07dd      	lsls	r5, r3, #31
{
 80018f6:	b082      	sub	sp, #8
 80018f8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018fa:	d52f      	bpl.n	800195c <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018fc:	49ac      	ldr	r1, [pc, #688]	; (8001bb0 <HAL_RCC_OscConfig+0x2c8>)
 80018fe:	688a      	ldr	r2, [r1, #8]
 8001900:	f002 020c 	and.w	r2, r2, #12
 8001904:	2a04      	cmp	r2, #4
 8001906:	f000 80ea 	beq.w	8001ade <HAL_RCC_OscConfig+0x1f6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800190a:	688a      	ldr	r2, [r1, #8]
 800190c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001910:	2a08      	cmp	r2, #8
 8001912:	f000 80e0 	beq.w	8001ad6 <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001916:	6863      	ldr	r3, [r4, #4]
 8001918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800191c:	f000 80e9 	beq.w	8001af2 <HAL_RCC_OscConfig+0x20a>
 8001920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001924:	f000 8154 	beq.w	8001bd0 <HAL_RCC_OscConfig+0x2e8>
 8001928:	4da1      	ldr	r5, [pc, #644]	; (8001bb0 <HAL_RCC_OscConfig+0x2c8>)
 800192a:	682a      	ldr	r2, [r5, #0]
 800192c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001930:	602a      	str	r2, [r5, #0]
 8001932:	682a      	ldr	r2, [r5, #0]
 8001934:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001938:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800193a:	2b00      	cmp	r3, #0
 800193c:	f040 80de 	bne.w	8001afc <HAL_RCC_OscConfig+0x214>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001940:	f7ff fa8e 	bl	8000e60 <HAL_GetTick>
 8001944:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001946:	e005      	b.n	8001954 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001948:	f7ff fa8a 	bl	8000e60 <HAL_GetTick>
 800194c:	1b80      	subs	r0, r0, r6
 800194e:	2864      	cmp	r0, #100	; 0x64
 8001950:	f200 80f2 	bhi.w	8001b38 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001954:	682b      	ldr	r3, [r5, #0]
 8001956:	039b      	lsls	r3, r3, #14
 8001958:	d4f6      	bmi.n	8001948 <HAL_RCC_OscConfig+0x60>
 800195a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800195c:	079f      	lsls	r7, r3, #30
 800195e:	d475      	bmi.n	8001a4c <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001960:	071a      	lsls	r2, r3, #28
 8001962:	d515      	bpl.n	8001990 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001964:	6963      	ldr	r3, [r4, #20]
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 80a5 	beq.w	8001ab6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800196c:	4b91      	ldr	r3, [pc, #580]	; (8001bb4 <HAL_RCC_OscConfig+0x2cc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800196e:	4d90      	ldr	r5, [pc, #576]	; (8001bb0 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8001970:	2201      	movs	r2, #1
 8001972:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001974:	f7ff fa74 	bl	8000e60 <HAL_GetTick>
 8001978:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800197a:	e005      	b.n	8001988 <HAL_RCC_OscConfig+0xa0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800197c:	f7ff fa70 	bl	8000e60 <HAL_GetTick>
 8001980:	1b80      	subs	r0, r0, r6
 8001982:	2802      	cmp	r0, #2
 8001984:	f200 80d8 	bhi.w	8001b38 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001988:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800198a:	079b      	lsls	r3, r3, #30
 800198c:	d5f6      	bpl.n	800197c <HAL_RCC_OscConfig+0x94>
 800198e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001990:	0758      	lsls	r0, r3, #29
 8001992:	d53b      	bpl.n	8001a0c <HAL_RCC_OscConfig+0x124>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001994:	4a86      	ldr	r2, [pc, #536]	; (8001bb0 <HAL_RCC_OscConfig+0x2c8>)
 8001996:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001998:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 800199c:	f040 80db 	bne.w	8001b56 <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019a0:	9301      	str	r3, [sp, #4]
 80019a2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80019a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a8:	6413      	str	r3, [r2, #64]	; 0x40
 80019aa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80019ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b0:	9301      	str	r3, [sp, #4]
 80019b2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80019b4:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b6:	4d80      	ldr	r5, [pc, #512]	; (8001bb8 <HAL_RCC_OscConfig+0x2d0>)
 80019b8:	682a      	ldr	r2, [r5, #0]
 80019ba:	05d1      	lsls	r1, r2, #23
 80019bc:	f140 80ac 	bpl.w	8001b18 <HAL_RCC_OscConfig+0x230>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019c0:	68a3      	ldr	r3, [r4, #8]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	f000 80c9 	beq.w	8001b5a <HAL_RCC_OscConfig+0x272>
 80019c8:	2b05      	cmp	r3, #5
 80019ca:	f000 810b 	beq.w	8001be4 <HAL_RCC_OscConfig+0x2fc>
 80019ce:	4d78      	ldr	r5, [pc, #480]	; (8001bb0 <HAL_RCC_OscConfig+0x2c8>)
 80019d0:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80019d2:	f022 0201 	bic.w	r2, r2, #1
 80019d6:	672a      	str	r2, [r5, #112]	; 0x70
 80019d8:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80019da:	f022 0204 	bic.w	r2, r2, #4
 80019de:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f040 80bf 	bne.w	8001b64 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e6:	f7ff fa3b 	bl	8000e60 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ea:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80019ee:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f0:	e006      	b.n	8001a00 <HAL_RCC_OscConfig+0x118>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019f2:	f7ff fa35 	bl	8000e60 <HAL_GetTick>
 80019f6:	eba0 0008 	sub.w	r0, r0, r8
 80019fa:	42b8      	cmp	r0, r7
 80019fc:	f200 809c 	bhi.w	8001b38 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a00:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a02:	0798      	lsls	r0, r3, #30
 8001a04:	d4f5      	bmi.n	80019f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a06:	2e00      	cmp	r6, #0
 8001a08:	f040 80dc 	bne.w	8001bc4 <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a0c:	69a2      	ldr	r2, [r4, #24]
 8001a0e:	b1ca      	cbz	r2, 8001a44 <HAL_RCC_OscConfig+0x15c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a10:	4d67      	ldr	r5, [pc, #412]	; (8001bb0 <HAL_RCC_OscConfig+0x2c8>)
 8001a12:	68a9      	ldr	r1, [r5, #8]
 8001a14:	f001 010c 	and.w	r1, r1, #12
 8001a18:	2908      	cmp	r1, #8
 8001a1a:	d048      	beq.n	8001aae <HAL_RCC_OscConfig+0x1c6>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a1c:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1e:	4a67      	ldr	r2, [pc, #412]	; (8001bbc <HAL_RCC_OscConfig+0x2d4>)
 8001a20:	f04f 0100 	mov.w	r1, #0
 8001a24:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a26:	f000 80e7 	beq.w	8001bf8 <HAL_RCC_OscConfig+0x310>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2a:	f7ff fa19 	bl	8000e60 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2e:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8001a30:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a32:	e004      	b.n	8001a3e <HAL_RCC_OscConfig+0x156>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a34:	f7ff fa14 	bl	8000e60 <HAL_GetTick>
 8001a38:	1b40      	subs	r0, r0, r5
 8001a3a:	2802      	cmp	r0, #2
 8001a3c:	d87c      	bhi.n	8001b38 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a3e:	6823      	ldr	r3, [r4, #0]
 8001a40:	019b      	lsls	r3, r3, #6
 8001a42:	d4f7      	bmi.n	8001a34 <HAL_RCC_OscConfig+0x14c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001a44:	2000      	movs	r0, #0
}
 8001a46:	b002      	add	sp, #8
 8001a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a4c:	4a58      	ldr	r2, [pc, #352]	; (8001bb0 <HAL_RCC_OscConfig+0x2c8>)
 8001a4e:	6891      	ldr	r1, [r2, #8]
 8001a50:	f011 0f0c 	tst.w	r1, #12
 8001a54:	d024      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a56:	6891      	ldr	r1, [r2, #8]
 8001a58:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a5c:	2908      	cmp	r1, #8
 8001a5e:	d01c      	beq.n	8001a9a <HAL_RCC_OscConfig+0x1b2>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a60:	68e3      	ldr	r3, [r4, #12]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 8092 	beq.w	8001b8c <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSI_ENABLE();
 8001a68:	4b55      	ldr	r3, [pc, #340]	; (8001bc0 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6a:	4d51      	ldr	r5, [pc, #324]	; (8001bb0 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a70:	f7ff f9f6 	bl	8000e60 <HAL_GetTick>
 8001a74:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a76:	e004      	b.n	8001a82 <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a78:	f7ff f9f2 	bl	8000e60 <HAL_GetTick>
 8001a7c:	1b80      	subs	r0, r0, r6
 8001a7e:	2802      	cmp	r0, #2
 8001a80:	d85a      	bhi.n	8001b38 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a82:	682b      	ldr	r3, [r5, #0]
 8001a84:	0798      	lsls	r0, r3, #30
 8001a86:	d5f7      	bpl.n	8001a78 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a88:	682b      	ldr	r3, [r5, #0]
 8001a8a:	6922      	ldr	r2, [r4, #16]
 8001a8c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a90:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a94:	602b      	str	r3, [r5, #0]
 8001a96:	6823      	ldr	r3, [r4, #0]
 8001a98:	e762      	b.n	8001960 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a9a:	6852      	ldr	r2, [r2, #4]
 8001a9c:	0256      	lsls	r6, r2, #9
 8001a9e:	d4df      	bmi.n	8001a60 <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa0:	4a43      	ldr	r2, [pc, #268]	; (8001bb0 <HAL_RCC_OscConfig+0x2c8>)
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	0795      	lsls	r5, r2, #30
 8001aa6:	d54b      	bpl.n	8001b40 <HAL_RCC_OscConfig+0x258>
 8001aa8:	68e2      	ldr	r2, [r4, #12]
 8001aaa:	2a01      	cmp	r2, #1
 8001aac:	d048      	beq.n	8001b40 <HAL_RCC_OscConfig+0x258>
    return HAL_ERROR;
 8001aae:	2001      	movs	r0, #1
}
 8001ab0:	b002      	add	sp, #8
 8001ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8001ab6:	4a3f      	ldr	r2, [pc, #252]	; (8001bb4 <HAL_RCC_OscConfig+0x2cc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab8:	4d3d      	ldr	r5, [pc, #244]	; (8001bb0 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 8001aba:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001abc:	f7ff f9d0 	bl	8000e60 <HAL_GetTick>
 8001ac0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac2:	e004      	b.n	8001ace <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ac4:	f7ff f9cc 	bl	8000e60 <HAL_GetTick>
 8001ac8:	1b80      	subs	r0, r0, r6
 8001aca:	2802      	cmp	r0, #2
 8001acc:	d834      	bhi.n	8001b38 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ace:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001ad0:	079f      	lsls	r7, r3, #30
 8001ad2:	d4f7      	bmi.n	8001ac4 <HAL_RCC_OscConfig+0x1dc>
 8001ad4:	e75b      	b.n	800198e <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ad6:	684a      	ldr	r2, [r1, #4]
 8001ad8:	0250      	lsls	r0, r2, #9
 8001ada:	f57f af1c 	bpl.w	8001916 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ade:	4a34      	ldr	r2, [pc, #208]	; (8001bb0 <HAL_RCC_OscConfig+0x2c8>)
 8001ae0:	6812      	ldr	r2, [r2, #0]
 8001ae2:	0391      	lsls	r1, r2, #14
 8001ae4:	f57f af3a 	bpl.w	800195c <HAL_RCC_OscConfig+0x74>
 8001ae8:	6862      	ldr	r2, [r4, #4]
 8001aea:	2a00      	cmp	r2, #0
 8001aec:	f47f af36 	bne.w	800195c <HAL_RCC_OscConfig+0x74>
 8001af0:	e7dd      	b.n	8001aae <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af2:	4a2f      	ldr	r2, [pc, #188]	; (8001bb0 <HAL_RCC_OscConfig+0x2c8>)
 8001af4:	6813      	ldr	r3, [r2, #0]
 8001af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001afc:	f7ff f9b0 	bl	8000e60 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b00:	4d2b      	ldr	r5, [pc, #172]	; (8001bb0 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001b02:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b04:	e004      	b.n	8001b10 <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b06:	f7ff f9ab 	bl	8000e60 <HAL_GetTick>
 8001b0a:	1b80      	subs	r0, r0, r6
 8001b0c:	2864      	cmp	r0, #100	; 0x64
 8001b0e:	d813      	bhi.n	8001b38 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b10:	682b      	ldr	r3, [r5, #0]
 8001b12:	039a      	lsls	r2, r3, #14
 8001b14:	d5f7      	bpl.n	8001b06 <HAL_RCC_OscConfig+0x21e>
 8001b16:	e720      	b.n	800195a <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b18:	682a      	ldr	r2, [r5, #0]
 8001b1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b1e:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8001b20:	f7ff f99e 	bl	8000e60 <HAL_GetTick>
 8001b24:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b26:	682b      	ldr	r3, [r5, #0]
 8001b28:	05da      	lsls	r2, r3, #23
 8001b2a:	f53f af49 	bmi.w	80019c0 <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b2e:	f7ff f997 	bl	8000e60 <HAL_GetTick>
 8001b32:	1bc0      	subs	r0, r0, r7
 8001b34:	2802      	cmp	r0, #2
 8001b36:	d9f6      	bls.n	8001b26 <HAL_RCC_OscConfig+0x23e>
            return HAL_TIMEOUT;
 8001b38:	2003      	movs	r0, #3
}
 8001b3a:	b002      	add	sp, #8
 8001b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b40:	491b      	ldr	r1, [pc, #108]	; (8001bb0 <HAL_RCC_OscConfig+0x2c8>)
 8001b42:	6920      	ldr	r0, [r4, #16]
 8001b44:	680a      	ldr	r2, [r1, #0]
 8001b46:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001b4a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001b4e:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b50:	e706      	b.n	8001960 <HAL_RCC_OscConfig+0x78>
    return HAL_ERROR;
 8001b52:	2001      	movs	r0, #1
}
 8001b54:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 8001b56:	2600      	movs	r6, #0
 8001b58:	e72d      	b.n	80019b6 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b5a:	4a15      	ldr	r2, [pc, #84]	; (8001bb0 <HAL_RCC_OscConfig+0x2c8>)
 8001b5c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001b64:	f7ff f97c 	bl	8000e60 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b68:	4d11      	ldr	r5, [pc, #68]	; (8001bb0 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001b6a:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6c:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b70:	e005      	b.n	8001b7e <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b72:	f7ff f975 	bl	8000e60 <HAL_GetTick>
 8001b76:	eba0 0008 	sub.w	r0, r0, r8
 8001b7a:	42b8      	cmp	r0, r7
 8001b7c:	d8dc      	bhi.n	8001b38 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b80:	079b      	lsls	r3, r3, #30
 8001b82:	d5f6      	bpl.n	8001b72 <HAL_RCC_OscConfig+0x28a>
    if(pwrclkchanged == SET)
 8001b84:	2e00      	cmp	r6, #0
 8001b86:	f43f af41 	beq.w	8001a0c <HAL_RCC_OscConfig+0x124>
 8001b8a:	e01b      	b.n	8001bc4 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_HSI_DISABLE();
 8001b8c:	4a0c      	ldr	r2, [pc, #48]	; (8001bc0 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8e:	4d08      	ldr	r5, [pc, #32]	; (8001bb0 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8001b90:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001b92:	f7ff f965 	bl	8000e60 <HAL_GetTick>
 8001b96:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b98:	e004      	b.n	8001ba4 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b9a:	f7ff f961 	bl	8000e60 <HAL_GetTick>
 8001b9e:	1b80      	subs	r0, r0, r6
 8001ba0:	2802      	cmp	r0, #2
 8001ba2:	d8c9      	bhi.n	8001b38 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba4:	682b      	ldr	r3, [r5, #0]
 8001ba6:	0799      	lsls	r1, r3, #30
 8001ba8:	d4f7      	bmi.n	8001b9a <HAL_RCC_OscConfig+0x2b2>
 8001baa:	6823      	ldr	r3, [r4, #0]
 8001bac:	e6d8      	b.n	8001960 <HAL_RCC_OscConfig+0x78>
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	42470e80 	.word	0x42470e80
 8001bb8:	40007000 	.word	0x40007000
 8001bbc:	42470060 	.word	0x42470060
 8001bc0:	42470000 	.word	0x42470000
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc4:	4a23      	ldr	r2, [pc, #140]	; (8001c54 <HAL_RCC_OscConfig+0x36c>)
 8001bc6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bce:	e71d      	b.n	8001a0c <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd0:	4b20      	ldr	r3, [pc, #128]	; (8001c54 <HAL_RCC_OscConfig+0x36c>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	e78b      	b.n	8001afc <HAL_RCC_OscConfig+0x214>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001be4:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <HAL_RCC_OscConfig+0x36c>)
 8001be6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001be8:	f042 0204 	orr.w	r2, r2, #4
 8001bec:	671a      	str	r2, [r3, #112]	; 0x70
 8001bee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001bf0:	f042 0201 	orr.w	r2, r2, #1
 8001bf4:	671a      	str	r2, [r3, #112]	; 0x70
 8001bf6:	e7b5      	b.n	8001b64 <HAL_RCC_OscConfig+0x27c>
        tickstart = HAL_GetTick();
 8001bf8:	f7ff f932 	bl	8000e60 <HAL_GetTick>
 8001bfc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bfe:	e004      	b.n	8001c0a <HAL_RCC_OscConfig+0x322>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c00:	f7ff f92e 	bl	8000e60 <HAL_GetTick>
 8001c04:	1b80      	subs	r0, r0, r6
 8001c06:	2802      	cmp	r0, #2
 8001c08:	d896      	bhi.n	8001b38 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c0a:	682b      	ldr	r3, [r5, #0]
 8001c0c:	0199      	lsls	r1, r3, #6
 8001c0e:	d4f7      	bmi.n	8001c00 <HAL_RCC_OscConfig+0x318>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c10:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 8001c14:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8001c18:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c1a:	4c0e      	ldr	r4, [pc, #56]	; (8001c54 <HAL_RCC_OscConfig+0x36c>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c1c:	4333      	orrs	r3, r6
 8001c1e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001c22:	0852      	lsrs	r2, r2, #1
 8001c24:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001c28:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8001c2a:	490b      	ldr	r1, [pc, #44]	; (8001c58 <HAL_RCC_OscConfig+0x370>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8001c30:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c32:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001c34:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8001c36:	f7ff f913 	bl	8000e60 <HAL_GetTick>
 8001c3a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c3c:	e005      	b.n	8001c4a <HAL_RCC_OscConfig+0x362>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c3e:	f7ff f90f 	bl	8000e60 <HAL_GetTick>
 8001c42:	1b40      	subs	r0, r0, r5
 8001c44:	2802      	cmp	r0, #2
 8001c46:	f63f af77 	bhi.w	8001b38 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c4a:	6823      	ldr	r3, [r4, #0]
 8001c4c:	019a      	lsls	r2, r3, #6
 8001c4e:	d5f6      	bpl.n	8001c3e <HAL_RCC_OscConfig+0x356>
 8001c50:	e6f8      	b.n	8001a44 <HAL_RCC_OscConfig+0x15c>
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800
 8001c58:	42470060 	.word	0x42470060

08001c5c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c5c:	4917      	ldr	r1, [pc, #92]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x60>)
{
 8001c5e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c60:	688b      	ldr	r3, [r1, #8]
 8001c62:	f003 030c 	and.w	r3, r3, #12
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d01b      	beq.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x46>
 8001c6a:	2b08      	cmp	r3, #8
 8001c6c:	d117      	bne.n	8001c9e <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c6e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c70:	684b      	ldr	r3, [r1, #4]
 8001c72:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c76:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c7a:	d114      	bne.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c7c:	6849      	ldr	r1, [r1, #4]
 8001c7e:	4810      	ldr	r0, [pc, #64]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x64>)
 8001c80:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001c84:	fba1 0100 	umull	r0, r1, r1, r0
 8001c88:	f7fe ff20 	bl	8000acc <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x60>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001c94:	3301      	adds	r3, #1
 8001c96:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001c98:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001c9c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8001c9e:	4808      	ldr	r0, [pc, #32]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001ca0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001ca2:	4808      	ldr	r0, [pc, #32]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8001ca4:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca6:	684b      	ldr	r3, [r1, #4]
 8001ca8:	4806      	ldr	r0, [pc, #24]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x68>)
 8001caa:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001cae:	fba3 0100 	umull	r0, r1, r3, r0
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f7fe ff0a 	bl	8000acc <__aeabi_uldivmod>
 8001cb8:	e7e8      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0x30>
 8001cba:	bf00      	nop
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	00f42400 	.word	0x00f42400
 8001cc4:	00b71b00 	.word	0x00b71b00

08001cc8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001cc8:	b160      	cbz	r0, 8001ce4 <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cca:	4a48      	ldr	r2, [pc, #288]	; (8001dec <HAL_RCC_ClockConfig+0x124>)
 8001ccc:	6813      	ldr	r3, [r2, #0]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	428b      	cmp	r3, r1
 8001cd4:	d208      	bcs.n	8001ce8 <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd6:	b2cb      	uxtb	r3, r1
 8001cd8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cda:	6813      	ldr	r3, [r2, #0]
 8001cdc:	f003 030f 	and.w	r3, r3, #15
 8001ce0:	428b      	cmp	r3, r1
 8001ce2:	d001      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 8001ce4:	2001      	movs	r0, #1
}
 8001ce6:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce8:	6803      	ldr	r3, [r0, #0]
{
 8001cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cee:	079d      	lsls	r5, r3, #30
 8001cf0:	d514      	bpl.n	8001d1c <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf2:	075c      	lsls	r4, r3, #29
 8001cf4:	d504      	bpl.n	8001d00 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cf6:	4c3e      	ldr	r4, [pc, #248]	; (8001df0 <HAL_RCC_ClockConfig+0x128>)
 8001cf8:	68a2      	ldr	r2, [r4, #8]
 8001cfa:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001cfe:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d00:	071a      	lsls	r2, r3, #28
 8001d02:	d504      	bpl.n	8001d0e <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d04:	4c3a      	ldr	r4, [pc, #232]	; (8001df0 <HAL_RCC_ClockConfig+0x128>)
 8001d06:	68a2      	ldr	r2, [r4, #8]
 8001d08:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001d0c:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d0e:	4c38      	ldr	r4, [pc, #224]	; (8001df0 <HAL_RCC_ClockConfig+0x128>)
 8001d10:	6885      	ldr	r5, [r0, #8]
 8001d12:	68a2      	ldr	r2, [r4, #8]
 8001d14:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001d18:	432a      	orrs	r2, r5
 8001d1a:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d1c:	07df      	lsls	r7, r3, #31
 8001d1e:	4604      	mov	r4, r0
 8001d20:	460d      	mov	r5, r1
 8001d22:	d522      	bpl.n	8001d6a <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d24:	6842      	ldr	r2, [r0, #4]
 8001d26:	2a01      	cmp	r2, #1
 8001d28:	d056      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x110>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d2a:	1e93      	subs	r3, r2, #2
 8001d2c:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d2e:	4b30      	ldr	r3, [pc, #192]	; (8001df0 <HAL_RCC_ClockConfig+0x128>)
 8001d30:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d32:	d958      	bls.n	8001de6 <HAL_RCC_ClockConfig+0x11e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d34:	0799      	lsls	r1, r3, #30
 8001d36:	d525      	bpl.n	8001d84 <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d38:	4e2d      	ldr	r6, [pc, #180]	; (8001df0 <HAL_RCC_ClockConfig+0x128>)
 8001d3a:	68b3      	ldr	r3, [r6, #8]
 8001d3c:	f023 0303 	bic.w	r3, r3, #3
 8001d40:	4313      	orrs	r3, r2
 8001d42:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001d44:	f7ff f88c 	bl	8000e60 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d48:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001d4c:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4e:	e005      	b.n	8001d5c <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d50:	f7ff f886 	bl	8000e60 <HAL_GetTick>
 8001d54:	eba0 0008 	sub.w	r0, r0, r8
 8001d58:	42b8      	cmp	r0, r7
 8001d5a:	d842      	bhi.n	8001de2 <HAL_RCC_ClockConfig+0x11a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5c:	68b3      	ldr	r3, [r6, #8]
 8001d5e:	6862      	ldr	r2, [r4, #4]
 8001d60:	f003 030c 	and.w	r3, r3, #12
 8001d64:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001d68:	d1f2      	bne.n	8001d50 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d6a:	4a20      	ldr	r2, [pc, #128]	; (8001dec <HAL_RCC_ClockConfig+0x124>)
 8001d6c:	6813      	ldr	r3, [r2, #0]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	42ab      	cmp	r3, r5
 8001d74:	d909      	bls.n	8001d8a <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d76:	b2eb      	uxtb	r3, r5
 8001d78:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7a:	6813      	ldr	r3, [r2, #0]
 8001d7c:	f003 030f 	and.w	r3, r3, #15
 8001d80:	42ab      	cmp	r3, r5
 8001d82:	d002      	beq.n	8001d8a <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 8001d84:	2001      	movs	r0, #1
}
 8001d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d8a:	6823      	ldr	r3, [r4, #0]
 8001d8c:	075a      	lsls	r2, r3, #29
 8001d8e:	d506      	bpl.n	8001d9e <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d90:	4917      	ldr	r1, [pc, #92]	; (8001df0 <HAL_RCC_ClockConfig+0x128>)
 8001d92:	68e0      	ldr	r0, [r4, #12]
 8001d94:	688a      	ldr	r2, [r1, #8]
 8001d96:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8001d9a:	4302      	orrs	r2, r0
 8001d9c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9e:	071b      	lsls	r3, r3, #28
 8001da0:	d411      	bmi.n	8001dc6 <HAL_RCC_ClockConfig+0xfe>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001da2:	f7ff ff5b 	bl	8001c5c <HAL_RCC_GetSysClockFreq>
 8001da6:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <HAL_RCC_ClockConfig+0x128>)
 8001da8:	4912      	ldr	r1, [pc, #72]	; (8001df4 <HAL_RCC_ClockConfig+0x12c>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	4a12      	ldr	r2, [pc, #72]	; (8001df8 <HAL_RCC_ClockConfig+0x130>)
 8001dae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001db2:	5ccb      	ldrb	r3, [r1, r3]
 8001db4:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (TICK_INT_PRIORITY);
 8001db8:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dba:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001dbc:	f7ff f806 	bl	8000dcc <HAL_InitTick>
  return HAL_OK;
 8001dc0:	2000      	movs	r0, #0
}
 8001dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <HAL_RCC_ClockConfig+0x128>)
 8001dc8:	6921      	ldr	r1, [r4, #16]
 8001dca:	6893      	ldr	r3, [r2, #8]
 8001dcc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001dd0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001dd4:	6093      	str	r3, [r2, #8]
 8001dd6:	e7e4      	b.n	8001da2 <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <HAL_RCC_ClockConfig+0x128>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	039e      	lsls	r6, r3, #14
 8001dde:	d4ab      	bmi.n	8001d38 <HAL_RCC_ClockConfig+0x70>
 8001de0:	e7d0      	b.n	8001d84 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8001de2:	2003      	movs	r0, #3
 8001de4:	e7ed      	b.n	8001dc2 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de6:	0198      	lsls	r0, r3, #6
 8001de8:	d4a6      	bmi.n	8001d38 <HAL_RCC_ClockConfig+0x70>
 8001dea:	e7cb      	b.n	8001d84 <HAL_RCC_ClockConfig+0xbc>
 8001dec:	40023c00 	.word	0x40023c00
 8001df0:	40023800 	.word	0x40023800
 8001df4:	08005498 	.word	0x08005498
 8001df8:	20000008 	.word	0x20000008

08001dfc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dfc:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001dfe:	4a05      	ldr	r2, [pc, #20]	; (8001e14 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001e00:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8001e02:	4905      	ldr	r1, [pc, #20]	; (8001e18 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e04:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001e08:	6808      	ldr	r0, [r1, #0]
 8001e0a:	5cd3      	ldrb	r3, [r2, r3]
}
 8001e0c:	40d8      	lsrs	r0, r3
 8001e0e:	4770      	bx	lr
 8001e10:	40023800 	.word	0x40023800
 8001e14:	080054a8 	.word	0x080054a8
 8001e18:	20000008 	.word	0x20000008

08001e1c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e1c:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001e1e:	4a05      	ldr	r2, [pc, #20]	; (8001e34 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001e20:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8001e22:	4905      	ldr	r1, [pc, #20]	; (8001e38 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e24:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001e28:	6808      	ldr	r0, [r1, #0]
 8001e2a:	5cd3      	ldrb	r3, [r2, r3]
}
 8001e2c:	40d8      	lsrs	r0, r3
 8001e2e:	4770      	bx	lr
 8001e30:	40023800 	.word	0x40023800
 8001e34:	080054a8 	.word	0x080054a8
 8001e38:	20000008 	.word	0x20000008

08001e3c <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e3c:	2800      	cmp	r0, #0
 8001e3e:	d03b      	beq.n	8001eb8 <HAL_SPI_Init+0x7c>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e40:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e44:	2300      	movs	r3, #0
{
 8001e46:	b570      	push	{r4, r5, r6, lr}
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e48:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8001e4c:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e4e:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e50:	b362      	cbz	r2, 8001eac <HAL_SPI_Init+0x70>
 8001e52:	4618      	mov	r0, r3
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001e54:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8001e58:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 8001e5c:	432b      	orrs	r3, r5
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	6962      	ldr	r2, [r4, #20]
 8001e62:	69e5      	ldr	r5, [r4, #28]
 8001e64:	6a26      	ldr	r6, [r4, #32]
 8001e66:	430b      	orrs	r3, r1
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	69a2      	ldr	r2, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8001e6c:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001e6e:	432b      	orrs	r3, r5
  hspi->State = HAL_SPI_STATE_BUSY;
 8001e70:	2502      	movs	r5, #2
 8001e72:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001e76:	4333      	orrs	r3, r6
 8001e78:	f402 7500 	and.w	r5, r2, #512	; 0x200
  __HAL_SPI_DISABLE(hspi);
 8001e7c:	680e      	ldr	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001e7e:	432b      	orrs	r3, r5
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001e80:	0c12      	lsrs	r2, r2, #16
 8001e82:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001e84:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001e88:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001e8a:	432a      	orrs	r2, r5
  __HAL_SPI_DISABLE(hspi);
 8001e8c:	f026 0640 	bic.w	r6, r6, #64	; 0x40
 8001e90:	600e      	str	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001e92:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001e94:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e96:	69cb      	ldr	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e98:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8001e9e:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ea0:	61cb      	str	r3, [r1, #28]

  return HAL_OK;
 8001ea2:	4610      	mov	r0, r2
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ea4:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ea6:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
}
 8001eaa:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8001eac:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001eb0:	f001 fe7c 	bl	8003bac <HAL_SPI_MspInit>
 8001eb4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001eb6:	e7cd      	b.n	8001e54 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8001eb8:	2001      	movs	r0, #1
}
 8001eba:	4770      	bx	lr

08001ebc <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ebc:	2800      	cmp	r0, #0
 8001ebe:	d05c      	beq.n	8001f7a <HAL_TIM_Base_Init+0xbe>
{
 8001ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ec2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001ec6:	4604      	mov	r4, r0
 8001ec8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ecc:	b3bb      	cbz	r3, 8001f3e <HAL_TIM_Base_Init+0x82>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ece:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ed0:	4e3a      	ldr	r6, [pc, #232]	; (8001fbc <HAL_TIM_Base_Init+0x100>)
 8001ed2:	69a5      	ldr	r5, [r4, #24]
 8001ed4:	68e0      	ldr	r0, [r4, #12]
 8001ed6:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ede:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8001ee0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ee2:	d04c      	beq.n	8001f7e <HAL_TIM_Base_Init+0xc2>
 8001ee4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8001ee8:	d058      	beq.n	8001f9c <HAL_TIM_Base_Init+0xe0>
 8001eea:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8001eee:	42b2      	cmp	r2, r6
 8001ef0:	d02a      	beq.n	8001f48 <HAL_TIM_Base_Init+0x8c>
 8001ef2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001ef6:	42b2      	cmp	r2, r6
 8001ef8:	d026      	beq.n	8001f48 <HAL_TIM_Base_Init+0x8c>
 8001efa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001efe:	42b2      	cmp	r2, r6
 8001f00:	d022      	beq.n	8001f48 <HAL_TIM_Base_Init+0x8c>
 8001f02:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8001f06:	42b2      	cmp	r2, r6
 8001f08:	d01e      	beq.n	8001f48 <HAL_TIM_Base_Init+0x8c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f0a:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8001f0e:	42b2      	cmp	r2, r6
 8001f10:	d013      	beq.n	8001f3a <HAL_TIM_Base_Init+0x7e>
 8001f12:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f16:	42b2      	cmp	r2, r6
 8001f18:	d00f      	beq.n	8001f3a <HAL_TIM_Base_Init+0x7e>
 8001f1a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f1e:	42b2      	cmp	r2, r6
 8001f20:	d00b      	beq.n	8001f3a <HAL_TIM_Base_Init+0x7e>
 8001f22:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 8001f26:	42b2      	cmp	r2, r6
 8001f28:	d007      	beq.n	8001f3a <HAL_TIM_Base_Init+0x7e>
 8001f2a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f2e:	42b2      	cmp	r2, r6
 8001f30:	d003      	beq.n	8001f3a <HAL_TIM_Base_Init+0x7e>
 8001f32:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f36:	42b2      	cmp	r2, r6
 8001f38:	d138      	bne.n	8001fac <HAL_TIM_Base_Init+0xf0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f3a:	6926      	ldr	r6, [r4, #16]
 8001f3c:	e033      	b.n	8001fa6 <HAL_TIM_Base_Init+0xea>
    htim->Lock = HAL_UNLOCKED;
 8001f3e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001f42:	f002 f8bf 	bl	80040c4 <HAL_TIM_Base_MspInit>
 8001f46:	e7c2      	b.n	8001ece <HAL_TIM_Base_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8001f48:	68a6      	ldr	r6, [r4, #8]
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f4a:	4f1d      	ldr	r7, [pc, #116]	; (8001fc0 <HAL_TIM_Base_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001f50:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f52:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f58:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f5e:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f60:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 8001f62:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f64:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001f66:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f68:	d101      	bne.n	8001f6e <HAL_TIM_Base_Init+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f6a:	6963      	ldr	r3, [r4, #20]
 8001f6c:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8001f72:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001f74:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8001f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001f7a:	2001      	movs	r0, #1
}
 8001f7c:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8001f7e:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f80:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001f86:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f8c:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f92:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8001f94:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f96:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001f98:	6291      	str	r1, [r2, #40]	; 0x28
 8001f9a:	e7e6      	b.n	8001f6a <HAL_TIM_Base_Init+0xae>
    tmpcr1 |= Structure->CounterMode;
 8001f9c:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f9e:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001fa4:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001faa:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fb0:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8001fb2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fb4:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001fb6:	6291      	str	r1, [r2, #40]	; 0x28
 8001fb8:	e7d9      	b.n	8001f6e <HAL_TIM_Base_Init+0xb2>
 8001fba:	bf00      	nop
 8001fbc:	40010000 	.word	0x40010000
 8001fc0:	40010400 	.word	0x40010400

08001fc4 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fc4:	6803      	ldr	r3, [r0, #0]
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	f042 0201 	orr.w	r2, r2, #1
 8001fcc:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fd4:	2a06      	cmp	r2, #6
 8001fd6:	d003      	beq.n	8001fe0 <HAL_TIM_Base_Start_IT+0x1c>
    __HAL_TIM_ENABLE(htim);
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	f042 0201 	orr.w	r2, r2, #1
 8001fde:	601a      	str	r2, [r3, #0]
}
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8001fe4:	2800      	cmp	r0, #0
 8001fe6:	d05c      	beq.n	80020a2 <HAL_TIM_PWM_Init+0xbe>
{
 8001fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8001fea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001fee:	4604      	mov	r4, r0
 8001ff0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ff4:	b3bb      	cbz	r3, 8002066 <HAL_TIM_PWM_Init+0x82>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ff6:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ff8:	4e3a      	ldr	r6, [pc, #232]	; (80020e4 <HAL_TIM_PWM_Init+0x100>)
 8001ffa:	69a5      	ldr	r5, [r4, #24]
 8001ffc:	68e0      	ldr	r0, [r4, #12]
 8001ffe:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8002000:	2302      	movs	r3, #2
 8002002:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002006:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8002008:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800200a:	d04c      	beq.n	80020a6 <HAL_TIM_PWM_Init+0xc2>
 800200c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002010:	d058      	beq.n	80020c4 <HAL_TIM_PWM_Init+0xe0>
 8002012:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8002016:	42b2      	cmp	r2, r6
 8002018:	d02a      	beq.n	8002070 <HAL_TIM_PWM_Init+0x8c>
 800201a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800201e:	42b2      	cmp	r2, r6
 8002020:	d026      	beq.n	8002070 <HAL_TIM_PWM_Init+0x8c>
 8002022:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002026:	42b2      	cmp	r2, r6
 8002028:	d022      	beq.n	8002070 <HAL_TIM_PWM_Init+0x8c>
 800202a:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 800202e:	42b2      	cmp	r2, r6
 8002030:	d01e      	beq.n	8002070 <HAL_TIM_PWM_Init+0x8c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002032:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8002036:	42b2      	cmp	r2, r6
 8002038:	d013      	beq.n	8002062 <HAL_TIM_PWM_Init+0x7e>
 800203a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800203e:	42b2      	cmp	r2, r6
 8002040:	d00f      	beq.n	8002062 <HAL_TIM_PWM_Init+0x7e>
 8002042:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002046:	42b2      	cmp	r2, r6
 8002048:	d00b      	beq.n	8002062 <HAL_TIM_PWM_Init+0x7e>
 800204a:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 800204e:	42b2      	cmp	r2, r6
 8002050:	d007      	beq.n	8002062 <HAL_TIM_PWM_Init+0x7e>
 8002052:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002056:	42b2      	cmp	r2, r6
 8002058:	d003      	beq.n	8002062 <HAL_TIM_PWM_Init+0x7e>
 800205a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800205e:	42b2      	cmp	r2, r6
 8002060:	d138      	bne.n	80020d4 <HAL_TIM_PWM_Init+0xf0>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002062:	6926      	ldr	r6, [r4, #16]
 8002064:	e033      	b.n	80020ce <HAL_TIM_PWM_Init+0xea>
    htim->Lock = HAL_UNLOCKED;
 8002066:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800206a:	f001 ffff 	bl	800406c <HAL_TIM_PWM_MspInit>
 800206e:	e7c2      	b.n	8001ff6 <HAL_TIM_PWM_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8002070:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002072:	4f1d      	ldr	r7, [pc, #116]	; (80020e8 <HAL_TIM_PWM_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002078:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800207a:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800207c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002080:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002086:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002088:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 800208a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800208c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800208e:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002090:	d101      	bne.n	8002096 <HAL_TIM_PWM_Init+0xb2>
    TIMx->RCR = Structure->RepetitionCounter;
 8002092:	6963      	ldr	r3, [r4, #20]
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002096:	2301      	movs	r3, #1
 8002098:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 800209a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800209c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80020a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80020a2:	2001      	movs	r0, #1
}
 80020a4:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80020a6:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020a8:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80020ae:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80020b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020b4:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020ba:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80020bc:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020be:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80020c0:	6291      	str	r1, [r2, #40]	; 0x28
 80020c2:	e7e6      	b.n	8002092 <HAL_TIM_PWM_Init+0xae>
    tmpcr1 |= Structure->CounterMode;
 80020c4:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020c6:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80020cc:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020d2:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020d8:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80020da:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020dc:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80020de:	6291      	str	r1, [r2, #40]	; 0x28
 80020e0:	e7d9      	b.n	8002096 <HAL_TIM_PWM_Init+0xb2>
 80020e2:	bf00      	nop
 80020e4:	40010000 	.word	0x40010000
 80020e8:	40010400 	.word	0x40010400

080020ec <HAL_TIM_PWM_Start>:
 80020ec:	6803      	ldr	r3, [r0, #0]
 80020ee:	2201      	movs	r2, #1
 80020f0:	6a18      	ldr	r0, [r3, #32]
 80020f2:	f001 011f 	and.w	r1, r1, #31
 80020f6:	fa02 f101 	lsl.w	r1, r2, r1
 80020fa:	ea20 0001 	bic.w	r0, r0, r1
 80020fe:	b410      	push	{r4}
 8002100:	6218      	str	r0, [r3, #32]
 8002102:	6a1a      	ldr	r2, [r3, #32]
 8002104:	4c0c      	ldr	r4, [pc, #48]	; (8002138 <HAL_TIM_PWM_Start+0x4c>)
 8002106:	4311      	orrs	r1, r2
 8002108:	42a3      	cmp	r3, r4
 800210a:	6219      	str	r1, [r3, #32]
 800210c:	d00f      	beq.n	800212e <HAL_TIM_PWM_Start+0x42>
 800210e:	4a0b      	ldr	r2, [pc, #44]	; (800213c <HAL_TIM_PWM_Start+0x50>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d00c      	beq.n	800212e <HAL_TIM_PWM_Start+0x42>
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	f002 0207 	and.w	r2, r2, #7
 800211a:	2a06      	cmp	r2, #6
 800211c:	d003      	beq.n	8002126 <HAL_TIM_PWM_Start+0x3a>
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	f042 0201 	orr.w	r2, r2, #1
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	2000      	movs	r0, #0
 8002128:	f85d 4b04 	ldr.w	r4, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002130:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002134:	645a      	str	r2, [r3, #68]	; 0x44
 8002136:	e7ed      	b.n	8002114 <HAL_TIM_PWM_Start+0x28>
 8002138:	40010000 	.word	0x40010000
 800213c:	40010400 	.word	0x40010400

08002140 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8002140:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002144:	2b01      	cmp	r3, #1
 8002146:	f000 80cc 	beq.w	80022e2 <HAL_TIM_PWM_ConfigChannel+0x1a2>
{
 800214a:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 800214c:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800214e:	2401      	movs	r4, #1
 8002150:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002154:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8002158:	2a0c      	cmp	r2, #12
 800215a:	d835      	bhi.n	80021c8 <HAL_TIM_PWM_ConfigChannel+0x88>
 800215c:	e8df f002 	tbb	[pc, r2]
 8002160:	34343407 	.word	0x34343407
 8002164:	3434346a 	.word	0x3434346a
 8002168:	34343496 	.word	0x34343496
 800216c:	3d          	.byte	0x3d
 800216d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800216e:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002170:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002174:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8002176:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002178:	4e74      	ldr	r6, [pc, #464]	; (800234c <HAL_TIM_PWM_ConfigChannel+0x20c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800217a:	f025 0501 	bic.w	r5, r5, #1
 800217e:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8002180:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8002182:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8002184:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8002186:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800218a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800218e:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 8002190:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmrx |= OC_Config->OCMode;
 8002194:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002198:	f000 80bb 	beq.w	8002312 <HAL_TIM_PWM_ConfigChannel+0x1d2>
 800219c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80021a0:	42b3      	cmp	r3, r6
 80021a2:	f000 80b6 	beq.w	8002312 <HAL_TIM_PWM_ConfigChannel+0x1d2>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80021a6:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80021a8:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80021aa:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80021ac:	635e      	str	r6, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021ae:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021b0:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021b2:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021b4:	f044 0408 	orr.w	r4, r4, #8
 80021b8:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021ba:	6999      	ldr	r1, [r3, #24]
 80021bc:	f021 0104 	bic.w	r1, r1, #4
 80021c0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021c2:	699a      	ldr	r2, [r3, #24]
 80021c4:	432a      	orrs	r2, r5
 80021c6:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80021c8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80021ca:	2201      	movs	r2, #1
 80021cc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80021d0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80021d4:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80021d6:	4618      	mov	r0, r3
}
 80021d8:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021da:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80021dc:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80021e0:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021e2:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021e4:	4e59      	ldr	r6, [pc, #356]	; (800234c <HAL_TIM_PWM_ConfigChannel+0x20c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80021e6:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 80021ea:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80021ec:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80021ee:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80021f0:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 80021f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80021f6:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021fa:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80021fc:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002200:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002204:	d06f      	beq.n	80022e6 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 8002206:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800220a:	42b3      	cmp	r3, r6
 800220c:	d06b      	beq.n	80022e6 <HAL_TIM_PWM_ConfigChannel+0x1a6>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800220e:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002210:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002212:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002214:	641e      	str	r6, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002216:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002218:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800221a:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800221c:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8002220:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002222:	69d9      	ldr	r1, [r3, #28]
 8002224:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002228:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800222a:	69da      	ldr	r2, [r3, #28]
 800222c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8002230:	61da      	str	r2, [r3, #28]
      break;
 8002232:	e7c9      	b.n	80021c8 <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002234:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002236:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002238:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800223a:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800223c:	f8df c10c 	ldr.w	ip, [pc, #268]	; 800234c <HAL_TIM_PWM_ConfigChannel+0x20c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002240:	f025 0510 	bic.w	r5, r5, #16
 8002244:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8002246:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8002248:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800224a:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800224c:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002250:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002254:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002256:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800225a:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800225e:	d065      	beq.n	800232c <HAL_TIM_PWM_ConfigChannel+0x1ec>
 8002260:	4f3b      	ldr	r7, [pc, #236]	; (8002350 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8002262:	42bb      	cmp	r3, r7
 8002264:	d062      	beq.n	800232c <HAL_TIM_PWM_ConfigChannel+0x1ec>
  TIMx->CCR2 = OC_Config->Pulse;
 8002266:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002268:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800226a:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800226c:	639e      	str	r6, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800226e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002270:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002272:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002274:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8002278:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800227a:	6999      	ldr	r1, [r3, #24]
 800227c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002280:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002282:	699a      	ldr	r2, [r3, #24]
 8002284:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8002288:	619a      	str	r2, [r3, #24]
      break;
 800228a:	e79d      	b.n	80021c8 <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800228c:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800228e:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002290:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8002292:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002294:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800234c <HAL_TIM_PWM_ConfigChannel+0x20c>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002298:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 800229c:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800229e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80022a0:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80022a2:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 80022a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80022a8:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80022ac:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80022ae:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 80022b2:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80022b6:	d01c      	beq.n	80022f2 <HAL_TIM_PWM_ConfigChannel+0x1b2>
 80022b8:	4f25      	ldr	r7, [pc, #148]	; (8002350 <HAL_TIM_PWM_ConfigChannel+0x210>)
 80022ba:	42bb      	cmp	r3, r7
 80022bc:	d019      	beq.n	80022f2 <HAL_TIM_PWM_ConfigChannel+0x1b2>
  TIMx->CCR3 = OC_Config->Pulse;
 80022be:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80022c0:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80022c2:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80022c4:	63de      	str	r6, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80022c6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022c8:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022ca:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022cc:	f044 0408 	orr.w	r4, r4, #8
 80022d0:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022d2:	69d9      	ldr	r1, [r3, #28]
 80022d4:	f021 0104 	bic.w	r1, r1, #4
 80022d8:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022da:	69da      	ldr	r2, [r3, #28]
 80022dc:	432a      	orrs	r2, r5
 80022de:	61da      	str	r2, [r3, #28]
      break;
 80022e0:	e772      	b.n	80021c8 <HAL_TIM_PWM_ConfigChannel+0x88>
  __HAL_LOCK(htim);
 80022e2:	2002      	movs	r0, #2
}
 80022e4:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80022e6:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80022e8:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80022ec:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 80022f0:	e78d      	b.n	800220e <HAL_TIM_PWM_ConfigChannel+0xce>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80022f2:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80022f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80022f8:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80022fc:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002300:	f425 5c40 	bic.w	ip, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002304:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8002308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800230c:	ea4c 1505 	orr.w	r5, ip, r5, lsl #4
 8002310:	e7d5      	b.n	80022be <HAL_TIM_PWM_ConfigChannel+0x17e>
    tmpccer |= OC_Config->OCNPolarity;
 8002312:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002314:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002318:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 800231a:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800231e:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002322:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 8002324:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002328:	4335      	orrs	r5, r6
 800232a:	e73c      	b.n	80021a6 <HAL_TIM_PWM_ConfigChannel+0x66>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800232c:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800232e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002332:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002336:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800233a:	f425 6c40 	bic.w	ip, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800233e:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8002342:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002346:	ea4c 0585 	orr.w	r5, ip, r5, lsl #2
 800234a:	e78c      	b.n	8002266 <HAL_TIM_PWM_ConfigChannel+0x126>
 800234c:	40010000 	.word	0x40010000
 8002350:	40010400 	.word	0x40010400

08002354 <HAL_TIM_OC_DelayElapsedCallback>:
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop

08002358 <HAL_TIM_IC_CaptureCallback>:
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop

0800235c <HAL_TIM_PWM_PulseFinishedCallback>:
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop

08002360 <HAL_TIM_TriggerCallback>:
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop

08002364 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002364:	6803      	ldr	r3, [r0, #0]
 8002366:	691a      	ldr	r2, [r3, #16]
 8002368:	0791      	lsls	r1, r2, #30
{
 800236a:	b510      	push	{r4, lr}
 800236c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800236e:	d502      	bpl.n	8002376 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002370:	68da      	ldr	r2, [r3, #12]
 8002372:	0792      	lsls	r2, r2, #30
 8002374:	d45f      	bmi.n	8002436 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	0750      	lsls	r0, r2, #29
 800237a:	d502      	bpl.n	8002382 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	0751      	lsls	r1, r2, #29
 8002380:	d446      	bmi.n	8002410 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	0712      	lsls	r2, r2, #28
 8002386:	d502      	bpl.n	800238e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	0710      	lsls	r0, r2, #28
 800238c:	d42e      	bmi.n	80023ec <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	06d2      	lsls	r2, r2, #27
 8002392:	d502      	bpl.n	800239a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002394:	68da      	ldr	r2, [r3, #12]
 8002396:	06d0      	lsls	r0, r2, #27
 8002398:	d418      	bmi.n	80023cc <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800239a:	691a      	ldr	r2, [r3, #16]
 800239c:	07d1      	lsls	r1, r2, #31
 800239e:	d502      	bpl.n	80023a6 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	07d2      	lsls	r2, r2, #31
 80023a4:	d45d      	bmi.n	8002462 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023a6:	691a      	ldr	r2, [r3, #16]
 80023a8:	0610      	lsls	r0, r2, #24
 80023aa:	d502      	bpl.n	80023b2 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	0611      	lsls	r1, r2, #24
 80023b0:	d45f      	bmi.n	8002472 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023b2:	691a      	ldr	r2, [r3, #16]
 80023b4:	0652      	lsls	r2, r2, #25
 80023b6:	d502      	bpl.n	80023be <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	0650      	lsls	r0, r2, #25
 80023bc:	d461      	bmi.n	8002482 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023be:	691a      	ldr	r2, [r3, #16]
 80023c0:	0691      	lsls	r1, r2, #26
 80023c2:	d502      	bpl.n	80023ca <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	0692      	lsls	r2, r2, #26
 80023c8:	d443      	bmi.n	8002452 <HAL_TIM_IRQHandler+0xee>
}
 80023ca:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023cc:	f06f 0210 	mvn.w	r2, #16
 80023d0:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023d2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023d4:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023d6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023da:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80023dc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023de:	d064      	beq.n	80024aa <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80023e0:	f7ff ffba 	bl	8002358 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e4:	2200      	movs	r2, #0
 80023e6:	6823      	ldr	r3, [r4, #0]
 80023e8:	7722      	strb	r2, [r4, #28]
 80023ea:	e7d6      	b.n	800239a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023ec:	f06f 0208 	mvn.w	r2, #8
 80023f0:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023f2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023f4:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023f6:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023f8:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80023fa:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023fc:	d152      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023fe:	f7ff ffa9 	bl	8002354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002402:	4620      	mov	r0, r4
 8002404:	f7ff ffaa 	bl	800235c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002408:	2200      	movs	r2, #0
 800240a:	6823      	ldr	r3, [r4, #0]
 800240c:	7722      	strb	r2, [r4, #28]
 800240e:	e7be      	b.n	800238e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002410:	f06f 0204 	mvn.w	r2, #4
 8002414:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002416:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002418:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800241a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800241e:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002420:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002422:	d13c      	bne.n	800249e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002424:	f7ff ff96 	bl	8002354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002428:	4620      	mov	r0, r4
 800242a:	f7ff ff97 	bl	800235c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242e:	2200      	movs	r2, #0
 8002430:	6823      	ldr	r3, [r4, #0]
 8002432:	7722      	strb	r2, [r4, #28]
 8002434:	e7a5      	b.n	8002382 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002436:	f06f 0202 	mvn.w	r2, #2
 800243a:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800243c:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800243e:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002440:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002442:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002444:	d025      	beq.n	8002492 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8002446:	f7ff ff87 	bl	8002358 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800244a:	2200      	movs	r2, #0
 800244c:	6823      	ldr	r3, [r4, #0]
 800244e:	7722      	strb	r2, [r4, #28]
 8002450:	e791      	b.n	8002376 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002452:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8002456:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002458:	611a      	str	r2, [r3, #16]
}
 800245a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800245e:	f000 b877 	b.w	8002550 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002462:	f06f 0201 	mvn.w	r2, #1
 8002466:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002468:	4620      	mov	r0, r4
 800246a:	f001 f8ed 	bl	8003648 <HAL_TIM_PeriodElapsedCallback>
 800246e:	6823      	ldr	r3, [r4, #0]
 8002470:	e799      	b.n	80023a6 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002472:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002476:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002478:	4620      	mov	r0, r4
 800247a:	f000 f86b 	bl	8002554 <HAL_TIMEx_BreakCallback>
 800247e:	6823      	ldr	r3, [r4, #0]
 8002480:	e797      	b.n	80023b2 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002482:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002486:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002488:	4620      	mov	r0, r4
 800248a:	f7ff ff69 	bl	8002360 <HAL_TIM_TriggerCallback>
 800248e:	6823      	ldr	r3, [r4, #0]
 8002490:	e795      	b.n	80023be <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002492:	f7ff ff5f 	bl	8002354 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002496:	4620      	mov	r0, r4
 8002498:	f7ff ff60 	bl	800235c <HAL_TIM_PWM_PulseFinishedCallback>
 800249c:	e7d5      	b.n	800244a <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 800249e:	f7ff ff5b 	bl	8002358 <HAL_TIM_IC_CaptureCallback>
 80024a2:	e7c4      	b.n	800242e <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 80024a4:	f7ff ff58 	bl	8002358 <HAL_TIM_IC_CaptureCallback>
 80024a8:	e7ae      	b.n	8002408 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024aa:	f7ff ff53 	bl	8002354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ae:	4620      	mov	r0, r4
 80024b0:	f7ff ff54 	bl	800235c <HAL_TIM_PWM_PulseFinishedCallback>
 80024b4:	e796      	b.n	80023e4 <HAL_TIM_IRQHandler+0x80>
 80024b6:	bf00      	nop

080024b8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024b8:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80024bc:	2a01      	cmp	r2, #1
 80024be:	d01a      	beq.n	80024f6 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
{
 80024c0:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c2:	2202      	movs	r2, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024c4:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80024c6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024ca:	e9d1 6500 	ldrd	r6, r5, [r1]
 80024ce:	4603      	mov	r3, r0
  tmpcr2 = htim->Instance->CR2;
 80024d0:	6860      	ldr	r0, [r4, #4]
  tmpsmcr = htim->Instance->SMCR;
 80024d2:	68a2      	ldr	r2, [r4, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80024d4:	f020 0170 	bic.w	r1, r0, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 80024d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024dc:	4331      	orrs	r1, r6
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024de:	432a      	orrs	r2, r5

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024e0:	2601      	movs	r6, #1

  __HAL_UNLOCK(htim);
 80024e2:	2500      	movs	r5, #0
  htim->Instance->CR2 = tmpcr2;
 80024e4:	6061      	str	r1, [r4, #4]

  return HAL_OK;
 80024e6:	4628      	mov	r0, r5
  htim->Instance->SMCR = tmpsmcr;
 80024e8:	60a2      	str	r2, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 80024ea:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80024ee:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
}
 80024f2:	bc70      	pop	{r4, r5, r6}
 80024f4:	4770      	bx	lr
  __HAL_LOCK(htim);
 80024f6:	2002      	movs	r0, #2
}
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop

080024fc <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80024fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002500:	2b01      	cmp	r3, #1
 8002502:	d021      	beq.n	8002548 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>
{
 8002504:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002506:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800250a:	e9d1 2400 	ldrd	r2, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800250e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002512:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002514:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002518:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800251a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800251e:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002522:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002524:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002528:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800252a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800252e:	69c9      	ldr	r1, [r1, #28]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002530:	6802      	ldr	r2, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002532:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002534:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002538:	430b      	orrs	r3, r1

  __HAL_UNLOCK(htim);
 800253a:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 800253c:	6453      	str	r3, [r2, #68]	; 0x44

  return HAL_OK;
}
 800253e:	bc30      	pop	{r4, r5}
  __HAL_UNLOCK(htim);
 8002540:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
}
 8002544:	4608      	mov	r0, r1
 8002546:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002548:	2302      	movs	r3, #2
}
 800254a:	4618      	mov	r0, r3
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop

08002550 <HAL_TIMEx_CommutCallback>:
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop

08002554 <HAL_TIMEx_BreakCallback>:
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop

08002558 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002558:	2800      	cmp	r0, #0
 800255a:	f000 8104 	beq.w	8002766 <HAL_UART_Init+0x20e>
{
 800255e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002562:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002566:	4604      	mov	r4, r0
 8002568:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 80f5 	beq.w	800275c <HAL_UART_Init+0x204>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002572:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002574:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8002576:	2224      	movs	r2, #36	; 0x24
 8002578:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800257c:	68d8      	ldr	r0, [r3, #12]
 800257e:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002582:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8002586:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002588:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800258a:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800258c:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002590:	4329      	orrs	r1, r5
 8002592:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002594:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002596:	6965      	ldr	r5, [r4, #20]
 8002598:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 800259a:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800259e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80025a0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025a4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80025a6:	430a      	orrs	r2, r1
 80025a8:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025aa:	695a      	ldr	r2, [r3, #20]
 80025ac:	69a1      	ldr	r1, [r4, #24]
 80025ae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80025b2:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025b4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025b8:	615a      	str	r2, [r3, #20]
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025ba:	4aaa      	ldr	r2, [pc, #680]	; (8002864 <HAL_UART_Init+0x30c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025bc:	d071      	beq.n	80026a2 <HAL_UART_Init+0x14a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025be:	4293      	cmp	r3, r2
 80025c0:	f000 80d3 	beq.w	800276a <HAL_UART_Init+0x212>
 80025c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025c8:	4293      	cmp	r3, r2
 80025ca:	f000 80ce 	beq.w	800276a <HAL_UART_Init+0x212>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80025ce:	f7ff fc15 	bl	8001dfc <HAL_RCC_GetPCLK1Freq>
 80025d2:	4fa5      	ldr	r7, [pc, #660]	; (8002868 <HAL_UART_Init+0x310>)
 80025d4:	6863      	ldr	r3, [r4, #4]
 80025d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80025e4:	fba7 2303 	umull	r2, r3, r7, r3
 80025e8:	095b      	lsrs	r3, r3, #5
 80025ea:	011d      	lsls	r5, r3, #4
 80025ec:	f7ff fc06 	bl	8001dfc <HAL_RCC_GetPCLK1Freq>
 80025f0:	6866      	ldr	r6, [r4, #4]
 80025f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025fa:	00b6      	lsls	r6, r6, #2
 80025fc:	fbb0 f6f6 	udiv	r6, r0, r6
 8002600:	f7ff fbfc 	bl	8001dfc <HAL_RCC_GetPCLK1Freq>
 8002604:	6863      	ldr	r3, [r4, #4]
 8002606:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800260a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	fbb0 f3f3 	udiv	r3, r0, r3
 8002614:	fba7 2303 	umull	r2, r3, r7, r3
 8002618:	095b      	lsrs	r3, r3, #5
 800261a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800261e:	fb09 6313 	mls	r3, r9, r3, r6
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	3332      	adds	r3, #50	; 0x32
 8002626:	fba7 2303 	umull	r2, r3, r7, r3
 800262a:	095b      	lsrs	r3, r3, #5
 800262c:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8002630:	f7ff fbe4 	bl	8001dfc <HAL_RCC_GetPCLK1Freq>
 8002634:	6862      	ldr	r2, [r4, #4]
 8002636:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800263a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800263e:	0093      	lsls	r3, r2, #2
 8002640:	fbb0 f8f3 	udiv	r8, r0, r3
 8002644:	f7ff fbda 	bl	8001dfc <HAL_RCC_GetPCLK1Freq>
 8002648:	e9d4 2100 	ldrd	r2, r1, [r4]
 800264c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002650:	008b      	lsls	r3, r1, #2
 8002652:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002656:	fbb0 f3f3 	udiv	r3, r0, r3
 800265a:	fba7 1303 	umull	r1, r3, r7, r3
 800265e:	095b      	lsrs	r3, r3, #5
 8002660:	fb09 8313 	mls	r3, r9, r3, r8
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	3332      	adds	r3, #50	; 0x32
 8002668:	fba7 1303 	umull	r1, r3, r7, r3
 800266c:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8002670:	4333      	orrs	r3, r6
 8002672:	442b      	add	r3, r5
 8002674:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002676:	6913      	ldr	r3, [r2, #16]
 8002678:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800267c:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800267e:	6953      	ldr	r3, [r2, #20]
 8002680:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002684:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002686:	68d3      	ldr	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002688:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 800268a:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 800268c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002690:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8002692:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002694:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002696:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800269a:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 800269e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026a2:	4293      	cmp	r3, r2
 80026a4:	f000 809f 	beq.w	80027e6 <HAL_UART_Init+0x28e>
 80026a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026ac:	4293      	cmp	r3, r2
 80026ae:	f000 809a 	beq.w	80027e6 <HAL_UART_Init+0x28e>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80026b2:	f7ff fba3 	bl	8001dfc <HAL_RCC_GetPCLK1Freq>
 80026b6:	4f6c      	ldr	r7, [pc, #432]	; (8002868 <HAL_UART_Init+0x310>)
 80026b8:	6863      	ldr	r3, [r4, #4]
 80026ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c8:	fba7 2303 	umull	r2, r3, r7, r3
 80026cc:	095b      	lsrs	r3, r3, #5
 80026ce:	011e      	lsls	r6, r3, #4
 80026d0:	f7ff fb94 	bl	8001dfc <HAL_RCC_GetPCLK1Freq>
 80026d4:	6865      	ldr	r5, [r4, #4]
 80026d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026de:	006d      	lsls	r5, r5, #1
 80026e0:	fbb0 f5f5 	udiv	r5, r0, r5
 80026e4:	f7ff fb8a 	bl	8001dfc <HAL_RCC_GetPCLK1Freq>
 80026e8:	6863      	ldr	r3, [r4, #4]
 80026ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80026f8:	fba7 2303 	umull	r2, r3, r7, r3
 80026fc:	095b      	lsrs	r3, r3, #5
 80026fe:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002702:	fb09 5313 	mls	r3, r9, r3, r5
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	3332      	adds	r3, #50	; 0x32
 800270a:	fba7 2303 	umull	r2, r3, r7, r3
 800270e:	091b      	lsrs	r3, r3, #4
 8002710:	f403 75f8 	and.w	r5, r3, #496	; 0x1f0
 8002714:	f7ff fb72 	bl	8001dfc <HAL_RCC_GetPCLK1Freq>
 8002718:	6862      	ldr	r2, [r4, #4]
 800271a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800271e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002722:	0053      	lsls	r3, r2, #1
 8002724:	fbb0 f8f3 	udiv	r8, r0, r3
 8002728:	f7ff fb68 	bl	8001dfc <HAL_RCC_GetPCLK1Freq>
 800272c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8002730:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002734:	004b      	lsls	r3, r1, #1
 8002736:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800273a:	fbb0 f3f3 	udiv	r3, r0, r3
 800273e:	fba7 1303 	umull	r1, r3, r7, r3
 8002742:	095b      	lsrs	r3, r3, #5
 8002744:	fb09 8313 	mls	r3, r9, r3, r8
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	3332      	adds	r3, #50	; 0x32
 800274c:	fba7 1303 	umull	r1, r3, r7, r3
 8002750:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002754:	4433      	add	r3, r6
 8002756:	442b      	add	r3, r5
 8002758:	6093      	str	r3, [r2, #8]
 800275a:	e78c      	b.n	8002676 <HAL_UART_Init+0x11e>
    huart->Lock = HAL_UNLOCKED;
 800275c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002760:	f001 fd42 	bl	80041e8 <HAL_UART_MspInit>
 8002764:	e705      	b.n	8002572 <HAL_UART_Init+0x1a>
    return HAL_ERROR;
 8002766:	2001      	movs	r0, #1
}
 8002768:	4770      	bx	lr
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800276a:	f7ff fb57 	bl	8001e1c <HAL_RCC_GetPCLK2Freq>
 800276e:	4f3e      	ldr	r7, [pc, #248]	; (8002868 <HAL_UART_Init+0x310>)
 8002770:	6863      	ldr	r3, [r4, #4]
 8002772:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002776:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002780:	fba7 2303 	umull	r2, r3, r7, r3
 8002784:	095b      	lsrs	r3, r3, #5
 8002786:	011d      	lsls	r5, r3, #4
 8002788:	f7ff fb48 	bl	8001e1c <HAL_RCC_GetPCLK2Freq>
 800278c:	6866      	ldr	r6, [r4, #4]
 800278e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002792:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002796:	00b6      	lsls	r6, r6, #2
 8002798:	fbb0 f6f6 	udiv	r6, r0, r6
 800279c:	f7ff fb3e 	bl	8001e1c <HAL_RCC_GetPCLK2Freq>
 80027a0:	6863      	ldr	r3, [r4, #4]
 80027a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80027b0:	fba7 2303 	umull	r2, r3, r7, r3
 80027b4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80027b8:	095b      	lsrs	r3, r3, #5
 80027ba:	fb09 6313 	mls	r3, r9, r3, r6
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	3332      	adds	r3, #50	; 0x32
 80027c2:	fba7 2303 	umull	r2, r3, r7, r3
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 80027cc:	f7ff fb26 	bl	8001e1c <HAL_RCC_GetPCLK2Freq>
 80027d0:	6862      	ldr	r2, [r4, #4]
 80027d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027d6:	0093      	lsls	r3, r2, #2
 80027d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027dc:	fbb0 f8f3 	udiv	r8, r0, r3
 80027e0:	f7ff fb1c 	bl	8001e1c <HAL_RCC_GetPCLK2Freq>
 80027e4:	e730      	b.n	8002648 <HAL_UART_Init+0xf0>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80027e6:	f7ff fb19 	bl	8001e1c <HAL_RCC_GetPCLK2Freq>
 80027ea:	4f1f      	ldr	r7, [pc, #124]	; (8002868 <HAL_UART_Init+0x310>)
 80027ec:	6863      	ldr	r3, [r4, #4]
 80027ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80027fc:	fba7 2303 	umull	r2, r3, r7, r3
 8002800:	095b      	lsrs	r3, r3, #5
 8002802:	011e      	lsls	r6, r3, #4
 8002804:	f7ff fb0a 	bl	8001e1c <HAL_RCC_GetPCLK2Freq>
 8002808:	6865      	ldr	r5, [r4, #4]
 800280a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800280e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002812:	006d      	lsls	r5, r5, #1
 8002814:	fbb0 f5f5 	udiv	r5, r0, r5
 8002818:	f7ff fb00 	bl	8001e1c <HAL_RCC_GetPCLK2Freq>
 800281c:	6863      	ldr	r3, [r4, #4]
 800281e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002822:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	fbb0 f3f3 	udiv	r3, r0, r3
 800282c:	fba7 2303 	umull	r2, r3, r7, r3
 8002830:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002834:	095b      	lsrs	r3, r3, #5
 8002836:	fb09 5313 	mls	r3, r9, r3, r5
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	3332      	adds	r3, #50	; 0x32
 800283e:	fba7 2303 	umull	r2, r3, r7, r3
 8002842:	091b      	lsrs	r3, r3, #4
 8002844:	f403 75f8 	and.w	r5, r3, #496	; 0x1f0
 8002848:	f7ff fae8 	bl	8001e1c <HAL_RCC_GetPCLK2Freq>
 800284c:	6862      	ldr	r2, [r4, #4]
 800284e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002852:	0053      	lsls	r3, r2, #1
 8002854:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002858:	fbb0 f8f3 	udiv	r8, r0, r3
 800285c:	f7ff fade 	bl	8001e1c <HAL_RCC_GetPCLK2Freq>
 8002860:	e764      	b.n	800272c <HAL_UART_Init+0x1d4>
 8002862:	bf00      	nop
 8002864:	40011000 	.word	0x40011000
 8002868:	51eb851f 	.word	0x51eb851f

0800286c <HAL_UART_Transmit>:
{
 800286c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800286e:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8002870:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8002874:	2920      	cmp	r1, #32
{
 8002876:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8002878:	d12d      	bne.n	80028d6 <HAL_UART_Transmit+0x6a>
    if ((pData == NULL) || (Size == 0U))
 800287a:	2e00      	cmp	r6, #0
 800287c:	d02e      	beq.n	80028dc <HAL_UART_Transmit+0x70>
 800287e:	9201      	str	r2, [sp, #4]
 8002880:	b362      	cbz	r2, 80028dc <HAL_UART_Transmit+0x70>
 8002882:	461f      	mov	r7, r3
    __HAL_LOCK(huart);
 8002884:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002888:	2b01      	cmp	r3, #1
 800288a:	4604      	mov	r4, r0
 800288c:	d023      	beq.n	80028d6 <HAL_UART_Transmit+0x6a>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800288e:	2300      	movs	r3, #0
 8002890:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_LOCK(huart);
 8002892:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002894:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8002896:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800289a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800289e:	f7fe fadf 	bl	8000e60 <HAL_GetTick>
    huart->TxXferSize = Size;
 80028a2:	9a01      	ldr	r2, [sp, #4]
 80028a4:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80028a6:	84e2      	strh	r2, [r4, #38]	; 0x26
 80028a8:	6822      	ldr	r2, [r4, #0]
    tickstart = HAL_GetTick();
 80028aa:	4605      	mov	r5, r0
    while (huart->TxXferCount > 0U)
 80028ac:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d039      	beq.n	8002928 <HAL_UART_Transmit+0xbc>
      huart->TxXferCount--;
 80028b4:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028b6:	68a1      	ldr	r1, [r4, #8]
      huart->TxXferCount--;
 80028b8:	3801      	subs	r0, #1
 80028ba:	b280      	uxth	r0, r0
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028bc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      huart->TxXferCount--;
 80028c0:	84e0      	strh	r0, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028c2:	d019      	beq.n	80028f8 <HAL_UART_Transmit+0x8c>
 80028c4:	1c78      	adds	r0, r7, #1
 80028c6:	d13b      	bne.n	8002940 <HAL_UART_Transmit+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028c8:	6810      	ldr	r0, [r2, #0]
 80028ca:	0601      	lsls	r1, r0, #24
 80028cc:	d5fc      	bpl.n	80028c8 <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80028ce:	7833      	ldrb	r3, [r6, #0]
 80028d0:	6053      	str	r3, [r2, #4]
 80028d2:	3601      	adds	r6, #1
 80028d4:	e7ea      	b.n	80028ac <HAL_UART_Transmit+0x40>
    return HAL_BUSY;
 80028d6:	2002      	movs	r0, #2
}
 80028d8:	b003      	add	sp, #12
 80028da:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 80028dc:	2001      	movs	r0, #1
}
 80028de:	b003      	add	sp, #12
 80028e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028e2:	6813      	ldr	r3, [r2, #0]
 80028e4:	061b      	lsls	r3, r3, #24
 80028e6:	d40c      	bmi.n	8002902 <HAL_UART_Transmit+0x96>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028e8:	2f00      	cmp	r7, #0
 80028ea:	d033      	beq.n	8002954 <HAL_UART_Transmit+0xe8>
 80028ec:	f7fe fab8 	bl	8000e60 <HAL_GetTick>
 80028f0:	1b40      	subs	r0, r0, r5
 80028f2:	4287      	cmp	r7, r0
 80028f4:	6822      	ldr	r2, [r4, #0]
 80028f6:	d32d      	bcc.n	8002954 <HAL_UART_Transmit+0xe8>
 80028f8:	1c78      	adds	r0, r7, #1
 80028fa:	d1f2      	bne.n	80028e2 <HAL_UART_Transmit+0x76>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028fc:	6810      	ldr	r0, [r2, #0]
 80028fe:	0601      	lsls	r1, r0, #24
 8002900:	d5fc      	bpl.n	80028fc <HAL_UART_Transmit+0x90>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002902:	8833      	ldrh	r3, [r6, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002904:	6921      	ldr	r1, [r4, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800290a:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800290c:	2900      	cmp	r1, #0
 800290e:	d1e0      	bne.n	80028d2 <HAL_UART_Transmit+0x66>
          pData += 2U;
 8002910:	3602      	adds	r6, #2
 8002912:	e7cb      	b.n	80028ac <HAL_UART_Transmit+0x40>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002914:	6813      	ldr	r3, [r2, #0]
 8002916:	065b      	lsls	r3, r3, #25
 8002918:	d40b      	bmi.n	8002932 <HAL_UART_Transmit+0xc6>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800291a:	b1df      	cbz	r7, 8002954 <HAL_UART_Transmit+0xe8>
 800291c:	f7fe faa0 	bl	8000e60 <HAL_GetTick>
 8002920:	1b40      	subs	r0, r0, r5
 8002922:	4287      	cmp	r7, r0
 8002924:	6822      	ldr	r2, [r4, #0]
 8002926:	d315      	bcc.n	8002954 <HAL_UART_Transmit+0xe8>
 8002928:	1c78      	adds	r0, r7, #1
 800292a:	d1f3      	bne.n	8002914 <HAL_UART_Transmit+0xa8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800292c:	6813      	ldr	r3, [r2, #0]
 800292e:	0659      	lsls	r1, r3, #25
 8002930:	d5fc      	bpl.n	800292c <HAL_UART_Transmit+0xc0>
    huart->gState = HAL_UART_STATE_READY;
 8002932:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002934:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 8002936:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800293a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 800293e:	e7cb      	b.n	80028d8 <HAL_UART_Transmit+0x6c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002940:	6813      	ldr	r3, [r2, #0]
 8002942:	061b      	lsls	r3, r3, #24
 8002944:	d4c3      	bmi.n	80028ce <HAL_UART_Transmit+0x62>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002946:	b12f      	cbz	r7, 8002954 <HAL_UART_Transmit+0xe8>
 8002948:	f7fe fa8a 	bl	8000e60 <HAL_GetTick>
 800294c:	1b40      	subs	r0, r0, r5
 800294e:	4287      	cmp	r7, r0
 8002950:	6822      	ldr	r2, [r4, #0]
 8002952:	d2b7      	bcs.n	80028c4 <HAL_UART_Transmit+0x58>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002954:	68d3      	ldr	r3, [r2, #12]
 8002956:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800295a:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800295c:	6953      	ldr	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800295e:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002960:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8002964:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 8002966:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002968:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800296a:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
        __HAL_UNLOCK(huart);
 800296e:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 8002972:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8002976:	b003      	add	sp, #12
 8002978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800297a:	bf00      	nop

0800297c <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800297c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002980:	2b20      	cmp	r3, #32
 8002982:	d120      	bne.n	80029c6 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8002984:	b309      	cbz	r1, 80029ca <HAL_UART_Receive_IT+0x4e>
 8002986:	b302      	cbz	r2, 80029ca <HAL_UART_Receive_IT+0x4e>
    __HAL_LOCK(huart);
 8002988:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800298c:	2b01      	cmp	r3, #1
 800298e:	d01a      	beq.n	80029c6 <HAL_UART_Receive_IT+0x4a>
{
 8002990:	b430      	push	{r4, r5}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002992:	2300      	movs	r3, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002994:	6804      	ldr	r4, [r0, #0]
    huart->RxXferCount = Size;
 8002996:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002998:	2522      	movs	r5, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800299a:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800299c:	f880 503a 	strb.w	r5, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80029a0:	68e5      	ldr	r5, [r4, #12]
    huart->RxXferSize = Size;
 80029a2:	8582      	strh	r2, [r0, #44]	; 0x2c
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80029a4:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    huart->pRxBuffPtr = pData;
 80029a8:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UNLOCK(huart);
 80029aa:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80029ae:	60e5      	str	r5, [r4, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80029b0:	6962      	ldr	r2, [r4, #20]
 80029b2:	f042 0201 	orr.w	r2, r2, #1
 80029b6:	6162      	str	r2, [r4, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80029b8:	68e2      	ldr	r2, [r4, #12]
 80029ba:	f042 0220 	orr.w	r2, r2, #32
    return HAL_OK;
 80029be:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80029c0:	60e2      	str	r2, [r4, #12]
}
 80029c2:	bc30      	pop	{r4, r5}
 80029c4:	4770      	bx	lr
    return HAL_BUSY;
 80029c6:	2002      	movs	r0, #2
}
 80029c8:	4770      	bx	lr
      return HAL_ERROR;
 80029ca:	2001      	movs	r0, #1
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop

080029d0 <HAL_UART_TxCpltCallback>:
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop

080029d4 <UART_Receive_IT.part.1>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80029d4:	b510      	push	{r4, lr}
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80029d6:	6884      	ldr	r4, [r0, #8]
 80029d8:	6901      	ldr	r1, [r0, #16]
 80029da:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80029dc:	6802      	ldr	r2, [r0, #0]
 80029de:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80029e2:	d020      	beq.n	8002a26 <UART_Receive_IT.part.1+0x52>
 80029e4:	1c5c      	adds	r4, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029e6:	6852      	ldr	r2, [r2, #4]
 80029e8:	6284      	str	r4, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 80029ea:	b9c9      	cbnz	r1, 8002a20 <UART_Receive_IT.part.1+0x4c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029ec:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 80029ee:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80029f0:	3b01      	subs	r3, #1
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80029f6:	b98b      	cbnz	r3, 8002a1c <UART_Receive_IT.part.1+0x48>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80029f8:	6802      	ldr	r2, [r0, #0]
 80029fa:	68d1      	ldr	r1, [r2, #12]
 80029fc:	f021 0120 	bic.w	r1, r1, #32
 8002a00:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a02:	68d1      	ldr	r1, [r2, #12]
 8002a04:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002a08:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a0a:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002a0c:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a0e:	f021 0101 	bic.w	r1, r1, #1
 8002a12:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002a14:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002a18:	f000 fafa 	bl	8003010 <HAL_UART_RxCpltCallback>
}
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	bd10      	pop	{r4, pc}
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a20:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a24:	e7e2      	b.n	80029ec <UART_Receive_IT.part.1+0x18>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a26:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002a28:	b929      	cbnz	r1, 8002a36 <UART_Receive_IT.part.1+0x62>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a2e:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 2U;
 8002a32:	6283      	str	r3, [r0, #40]	; 0x28
 8002a34:	e7db      	b.n	80029ee <UART_Receive_IT.part.1+0x1a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1U;
 8002a3c:	6283      	str	r3, [r0, #40]	; 0x28
 8002a3e:	e7d6      	b.n	80029ee <UART_Receive_IT.part.1+0x1a>

08002a40 <HAL_UART_ErrorCallback>:
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop

08002a44 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a44:	6803      	ldr	r3, [r0, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
{
 8002a48:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8002a4a:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a4c:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a4e:	6959      	ldr	r1, [r3, #20]
{
 8002a50:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8002a52:	d049      	beq.n	8002ae8 <HAL_UART_IRQHandler+0xa4>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a54:	f011 0101 	ands.w	r1, r1, #1
 8002a58:	d04f      	beq.n	8002afa <HAL_UART_IRQHandler+0xb6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a5a:	07d6      	lsls	r6, r2, #31
 8002a5c:	d505      	bpl.n	8002a6a <HAL_UART_IRQHandler+0x26>
 8002a5e:	05e8      	lsls	r0, r5, #23
 8002a60:	d503      	bpl.n	8002a6a <HAL_UART_IRQHandler+0x26>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a62:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002a64:	f040 0001 	orr.w	r0, r0, #1
 8002a68:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a6a:	0756      	lsls	r6, r2, #29
 8002a6c:	f002 0002 	and.w	r0, r2, #2
 8002a70:	d575      	bpl.n	8002b5e <HAL_UART_IRQHandler+0x11a>
 8002a72:	b161      	cbz	r1, 8002a8e <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a74:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002a76:	f041 0102 	orr.w	r1, r1, #2
 8002a7a:	63e1      	str	r1, [r4, #60]	; 0x3c
 8002a7c:	f002 0608 	and.w	r6, r2, #8
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a80:	2800      	cmp	r0, #0
 8002a82:	d171      	bne.n	8002b68 <HAL_UART_IRQHandler+0x124>
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a84:	b11e      	cbz	r6, 8002a8e <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a86:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002a88:	f041 0108 	orr.w	r1, r1, #8
 8002a8c:	63e1      	str	r1, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a8e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002a90:	2900      	cmp	r1, #0
 8002a92:	d031      	beq.n	8002af8 <HAL_UART_IRQHandler+0xb4>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a94:	0696      	lsls	r6, r2, #26
 8002a96:	d501      	bpl.n	8002a9c <HAL_UART_IRQHandler+0x58>
 8002a98:	06a8      	lsls	r0, r5, #26
 8002a9a:	d473      	bmi.n	8002b84 <HAL_UART_IRQHandler+0x140>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a9c:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a9e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002aa0:	0709      	lsls	r1, r1, #28
 8002aa2:	d402      	bmi.n	8002aaa <HAL_UART_IRQHandler+0x66>
 8002aa4:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002aa8:	d079      	beq.n	8002b9e <HAL_UART_IRQHandler+0x15a>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ab0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ab2:	695a      	ldr	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8002ab4:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ab6:	f022 0201 	bic.w	r2, r2, #1
 8002aba:	615a      	str	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8002abc:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ac0:	695a      	ldr	r2, [r3, #20]
 8002ac2:	0652      	lsls	r2, r2, #25
 8002ac4:	d55a      	bpl.n	8002b7c <HAL_UART_IRQHandler+0x138>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ac6:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002ac8:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ace:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002ad0:	2800      	cmp	r0, #0
 8002ad2:	d053      	beq.n	8002b7c <HAL_UART_IRQHandler+0x138>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ad4:	4b3a      	ldr	r3, [pc, #232]	; (8002bc0 <HAL_UART_IRQHandler+0x17c>)
 8002ad6:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ad8:	f7fe fdaa 	bl	8001630 <HAL_DMA_Abort_IT>
 8002adc:	b160      	cbz	r0, 8002af8 <HAL_UART_IRQHandler+0xb4>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ade:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002ae0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ae4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002ae6:	4718      	bx	r3
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ae8:	0696      	lsls	r6, r2, #26
 8002aea:	d509      	bpl.n	8002b00 <HAL_UART_IRQHandler+0xbc>
 8002aec:	06a9      	lsls	r1, r5, #26
 8002aee:	d507      	bpl.n	8002b00 <HAL_UART_IRQHandler+0xbc>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002af0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002af4:	2b22      	cmp	r3, #34	; 0x22
 8002af6:	d04e      	beq.n	8002b96 <HAL_UART_IRQHandler+0x152>
}
 8002af8:	bd70      	pop	{r4, r5, r6, pc}
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002afa:	f415 7f90 	tst.w	r5, #288	; 0x120
 8002afe:	d1ac      	bne.n	8002a5a <HAL_UART_IRQHandler+0x16>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b00:	0616      	lsls	r6, r2, #24
 8002b02:	d40e      	bmi.n	8002b22 <HAL_UART_IRQHandler+0xde>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b04:	0651      	lsls	r1, r2, #25
 8002b06:	d5f7      	bpl.n	8002af8 <HAL_UART_IRQHandler+0xb4>
 8002b08:	066a      	lsls	r2, r5, #25
 8002b0a:	d5f5      	bpl.n	8002af8 <HAL_UART_IRQHandler+0xb4>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b0c:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002b0e:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b14:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002b16:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8002b18:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002b1c:	f7ff ff58 	bl	80029d0 <HAL_UART_TxCpltCallback>
}
 8002b20:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b22:	0628      	lsls	r0, r5, #24
 8002b24:	d5ee      	bpl.n	8002b04 <HAL_UART_IRQHandler+0xc0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b26:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002b2a:	2a21      	cmp	r2, #33	; 0x21
 8002b2c:	d1e4      	bne.n	8002af8 <HAL_UART_IRQHandler+0xb4>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b2e:	68a1      	ldr	r1, [r4, #8]
 8002b30:	6a22      	ldr	r2, [r4, #32]
 8002b32:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002b36:	d037      	beq.n	8002ba8 <HAL_UART_IRQHandler+0x164>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b38:	1c51      	adds	r1, r2, #1
 8002b3a:	6221      	str	r1, [r4, #32]
 8002b3c:	7812      	ldrb	r2, [r2, #0]
 8002b3e:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8002b40:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002b42:	3a01      	subs	r2, #1
 8002b44:	b292      	uxth	r2, r2
 8002b46:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002b48:	2a00      	cmp	r2, #0
 8002b4a:	d1d5      	bne.n	8002af8 <HAL_UART_IRQHandler+0xb4>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b52:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b5a:	60da      	str	r2, [r3, #12]
}
 8002b5c:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b5e:	b140      	cbz	r0, 8002b72 <HAL_UART_IRQHandler+0x12e>
 8002b60:	2900      	cmp	r1, #0
 8002b62:	d094      	beq.n	8002a8e <HAL_UART_IRQHandler+0x4a>
 8002b64:	f002 0608 	and.w	r6, r2, #8
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b68:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002b6a:	f041 0104 	orr.w	r1, r1, #4
 8002b6e:	63e1      	str	r1, [r4, #60]	; 0x3c
 8002b70:	e788      	b.n	8002a84 <HAL_UART_IRQHandler+0x40>
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b72:	0710      	lsls	r0, r2, #28
 8002b74:	d58b      	bpl.n	8002a8e <HAL_UART_IRQHandler+0x4a>
 8002b76:	2900      	cmp	r1, #0
 8002b78:	d185      	bne.n	8002a86 <HAL_UART_IRQHandler+0x42>
 8002b7a:	e788      	b.n	8002a8e <HAL_UART_IRQHandler+0x4a>
            HAL_UART_ErrorCallback(huart);
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	f7ff ff5f 	bl	8002a40 <HAL_UART_ErrorCallback>
}
 8002b82:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b84:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
 8002b88:	2a22      	cmp	r2, #34	; 0x22
 8002b8a:	d187      	bne.n	8002a9c <HAL_UART_IRQHandler+0x58>
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f7ff ff21 	bl	80029d4 <UART_Receive_IT.part.1>
 8002b92:	6823      	ldr	r3, [r4, #0]
 8002b94:	e782      	b.n	8002a9c <HAL_UART_IRQHandler+0x58>
}
 8002b96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002b9a:	f7ff bf1b 	b.w	80029d4 <UART_Receive_IT.part.1>
        HAL_UART_ErrorCallback(huart);
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	f7ff ff4e 	bl	8002a40 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ba4:	63e5      	str	r5, [r4, #60]	; 0x3c
}
 8002ba6:	bd70      	pop	{r4, r5, r6, pc}
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ba8:	8811      	ldrh	r1, [r2, #0]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002baa:	6920      	ldr	r0, [r4, #16]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002bac:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002bb0:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002bb2:	b910      	cbnz	r0, 8002bba <HAL_UART_IRQHandler+0x176>
        huart->pTxBuffPtr += 2U;
 8002bb4:	3202      	adds	r2, #2
 8002bb6:	6222      	str	r2, [r4, #32]
 8002bb8:	e7c2      	b.n	8002b40 <HAL_UART_IRQHandler+0xfc>
        huart->pTxBuffPtr += 1U;
 8002bba:	3201      	adds	r2, #1
 8002bbc:	6222      	str	r2, [r4, #32]
 8002bbe:	e7bf      	b.n	8002b40 <HAL_UART_IRQHandler+0xfc>
 8002bc0:	08002bc5 	.word	0x08002bc5

08002bc4 <UART_DMAAbortOnError>:
{
 8002bc4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bc6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8002bc8:	2200      	movs	r2, #0
 8002bca:	85da      	strh	r2, [r3, #46]	; 0x2e
  HAL_UART_ErrorCallback(huart);
 8002bcc:	4618      	mov	r0, r3
  huart->TxXferCount = 0x00U;
 8002bce:	84da      	strh	r2, [r3, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002bd0:	f7ff ff36 	bl	8002a40 <HAL_UART_ErrorCallback>
}
 8002bd4:	bd08      	pop	{r3, pc}
 8002bd6:	bf00      	nop

08002bd8 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002bd8:	b538      	push	{r3, r4, r5, lr}

  hcan1.Instance = CAN1;
 8002bda:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <MX_CAN1_Init+0x38>)
 8002bdc:	4a0d      	ldr	r2, [pc, #52]	; (8002c14 <MX_CAN1_Init+0x3c>)
 8002bde:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 8002be0:	2207      	movs	r2, #7
 8002be2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002be4:	2200      	movs	r2, #0
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8002be6:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002bea:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
  hcan1.Init.TimeTriggeredMode = DISABLE;
  hcan1.Init.AutoBusOff = DISABLE;
  hcan1.Init.AutoWakeUp = DISABLE;
  hcan1.Init.AutoRetransmission = DISABLE;
  hcan1.Init.ReceiveFifoLocked = DISABLE;
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8002bee:	2101      	movs	r1, #1
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002bf0:	4618      	mov	r0, r3
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002bf2:	619a      	str	r2, [r3, #24]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002bf4:	e9c3 5404 	strd	r5, r4, [r3, #16]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8002bf8:	7759      	strb	r1, [r3, #29]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002bfa:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002bfe:	771a      	strb	r2, [r3, #28]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002c00:	f7fe f946 	bl	8000e90 <HAL_CAN_Init>
 8002c04:	b900      	cbnz	r0, 8002c08 <MX_CAN1_Init+0x30>
  {
    Error_Handler();
  }

}
 8002c06:	bd38      	pop	{r3, r4, r5, pc}
 8002c08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002c0c:	f000 bd9e 	b.w	800374c <Error_Handler>
 8002c10:	200000cc 	.word	0x200000cc
 8002c14:	40006400 	.word	0x40006400

08002c18 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8002c18:	b538      	push	{r3, r4, r5, lr}

  hcan2.Instance = CAN2;
 8002c1a:	4b0d      	ldr	r3, [pc, #52]	; (8002c50 <MX_CAN2_Init+0x38>)
 8002c1c:	4a0d      	ldr	r2, [pc, #52]	; (8002c54 <MX_CAN2_Init+0x3c>)
 8002c1e:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 7;
 8002c20:	2207      	movs	r2, #7
 8002c22:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002c24:	2200      	movs	r2, #0
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8002c26:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002c2a:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
  hcan2.Init.TimeTriggeredMode = DISABLE;
  hcan2.Init.AutoBusOff = DISABLE;
  hcan2.Init.AutoWakeUp = DISABLE;
  hcan2.Init.AutoRetransmission = DISABLE;
  hcan2.Init.ReceiveFifoLocked = DISABLE;
  hcan2.Init.TransmitFifoPriority = ENABLE;
 8002c2e:	2101      	movs	r1, #1
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002c30:	4618      	mov	r0, r3
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002c32:	619a      	str	r2, [r3, #24]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002c34:	e9c3 5404 	strd	r5, r4, [r3, #16]
  hcan2.Init.TransmitFifoPriority = ENABLE;
 8002c38:	7759      	strb	r1, [r3, #29]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002c3a:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002c3e:	771a      	strb	r2, [r3, #28]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002c40:	f7fe f926 	bl	8000e90 <HAL_CAN_Init>
 8002c44:	b900      	cbnz	r0, 8002c48 <MX_CAN2_Init+0x30>
  {
    Error_Handler();
  }

}
 8002c46:	bd38      	pop	{r3, r4, r5, pc}
 8002c48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002c4c:	f000 bd7e 	b.w	800374c <Error_Handler>
 8002c50:	200000a4 	.word	0x200000a4
 8002c54:	40006800 	.word	0x40006800

08002c58 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002c58:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(canHandle->Instance==CAN1)
 8002c5a:	6802      	ldr	r2, [r0, #0]
 8002c5c:	4948      	ldr	r1, [pc, #288]	; (8002d80 <HAL_CAN_MspInit+0x128>)
{
 8002c5e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c60:	2300      	movs	r3, #0
  if(canHandle->Instance==CAN1)
 8002c62:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c64:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8002c68:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8002c6c:	9309      	str	r3, [sp, #36]	; 0x24
  if(canHandle->Instance==CAN1)
 8002c6e:	d040      	beq.n	8002cf2 <HAL_CAN_MspInit+0x9a>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
  else if(canHandle->Instance==CAN2)
 8002c70:	4944      	ldr	r1, [pc, #272]	; (8002d84 <HAL_CAN_MspInit+0x12c>)
 8002c72:	428a      	cmp	r2, r1
 8002c74:	d001      	beq.n	8002c7a <HAL_CAN_MspInit+0x22>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8002c76:	b00a      	add	sp, #40	; 0x28
 8002c78:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002c7a:	4a43      	ldr	r2, [pc, #268]	; (8002d88 <HAL_CAN_MspInit+0x130>)
 8002c7c:	9302      	str	r3, [sp, #8]
 8002c7e:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002c80:	4c42      	ldr	r4, [pc, #264]	; (8002d8c <HAL_CAN_MspInit+0x134>)
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002c82:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8002c86:	6411      	str	r1, [r2, #64]	; 0x40
 8002c88:	6c10      	ldr	r0, [r2, #64]	; 0x40
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002c8a:	6821      	ldr	r1, [r4, #0]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002c8c:	f000 6080 	and.w	r0, r0, #67108864	; 0x4000000
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002c90:	3101      	adds	r1, #1
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002c92:	9002      	str	r0, [sp, #8]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002c94:	2901      	cmp	r1, #1
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002c96:	9802      	ldr	r0, [sp, #8]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002c98:	6021      	str	r1, [r4, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002c9a:	d065      	beq.n	8002d68 <HAL_CAN_MspInit+0x110>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c9c:	2400      	movs	r4, #0
 8002c9e:	4b3a      	ldr	r3, [pc, #232]	; (8002d88 <HAL_CAN_MspInit+0x130>)
 8002ca0:	9404      	str	r4, [sp, #16]
 8002ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca4:	483a      	ldr	r0, [pc, #232]	; (8002d90 <HAL_CAN_MspInit+0x138>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca6:	f042 0202 	orr.w	r2, r2, #2
 8002caa:	631a      	str	r2, [r3, #48]	; 0x30
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002cb4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb8:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cba:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002cbc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbe:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002cc0:	2309      	movs	r3, #9
 8002cc2:	e9cd 2308 	strd	r2, r3, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cc6:	9e04      	ldr	r6, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc8:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cca:	f7fe fcc3 	bl	8001654 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8002cce:	4622      	mov	r2, r4
 8002cd0:	4621      	mov	r1, r4
 8002cd2:	2040      	movs	r0, #64	; 0x40
 8002cd4:	f7fe fc4e 	bl	8001574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002cd8:	2040      	movs	r0, #64	; 0x40
 8002cda:	f7fe fc81 	bl	80015e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8002cde:	4622      	mov	r2, r4
 8002ce0:	4621      	mov	r1, r4
 8002ce2:	2041      	movs	r0, #65	; 0x41
 8002ce4:	f7fe fc46 	bl	8001574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8002ce8:	2041      	movs	r0, #65	; 0x41
 8002cea:	f7fe fc79 	bl	80015e0 <HAL_NVIC_EnableIRQ>
}
 8002cee:	b00a      	add	sp, #40	; 0x28
 8002cf0:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002cf2:	4926      	ldr	r1, [pc, #152]	; (8002d8c <HAL_CAN_MspInit+0x134>)
 8002cf4:	680a      	ldr	r2, [r1, #0]
 8002cf6:	3201      	adds	r2, #1
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002cf8:	2a01      	cmp	r2, #1
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002cfa:	600a      	str	r2, [r1, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002cfc:	d028      	beq.n	8002d50 <HAL_CAN_MspInit+0xf8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cfe:	2400      	movs	r4, #0
 8002d00:	4b21      	ldr	r3, [pc, #132]	; (8002d88 <HAL_CAN_MspInit+0x130>)
 8002d02:	9401      	str	r4, [sp, #4]
 8002d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d06:	4823      	ldr	r0, [pc, #140]	; (8002d94 <HAL_CAN_MspInit+0x13c>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d08:	f042 0208 	orr.w	r2, r2, #8
 8002d0c:	631a      	str	r2, [r3, #48]	; 0x30
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d16:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d18:	2303      	movs	r3, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002d1a:	2209      	movs	r2, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1c:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d1e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d20:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002d22:	9209      	str	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d24:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d26:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d28:	f7fe fc94 	bl	8001654 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002d2c:	4622      	mov	r2, r4
 8002d2e:	4621      	mov	r1, r4
 8002d30:	2014      	movs	r0, #20
 8002d32:	f7fe fc1f 	bl	8001574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002d36:	2014      	movs	r0, #20
 8002d38:	f7fe fc52 	bl	80015e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8002d3c:	4622      	mov	r2, r4
 8002d3e:	4621      	mov	r1, r4
 8002d40:	2015      	movs	r0, #21
 8002d42:	f7fe fc17 	bl	8001574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002d46:	2015      	movs	r0, #21
 8002d48:	f7fe fc4a 	bl	80015e0 <HAL_NVIC_EnableIRQ>
}
 8002d4c:	b00a      	add	sp, #40	; 0x28
 8002d4e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002d50:	4a0d      	ldr	r2, [pc, #52]	; (8002d88 <HAL_CAN_MspInit+0x130>)
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002d56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d5a:	6413      	str	r3, [r2, #64]	; 0x40
 8002d5c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	9b00      	ldr	r3, [sp, #0]
 8002d66:	e7ca      	b.n	8002cfe <HAL_CAN_MspInit+0xa6>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002d68:	9303      	str	r3, [sp, #12]
 8002d6a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002d6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d70:	6413      	str	r3, [r2, #64]	; 0x40
 8002d72:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d78:	9303      	str	r3, [sp, #12]
 8002d7a:	9b03      	ldr	r3, [sp, #12]
 8002d7c:	e78e      	b.n	8002c9c <HAL_CAN_MspInit+0x44>
 8002d7e:	bf00      	nop
 8002d80:	40006400 	.word	0x40006400
 8002d84:	40006800 	.word	0x40006800
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	2000008c 	.word	0x2000008c
 8002d90:	40020400 	.word	0x40020400
 8002d94:	40020c00 	.word	0x40020c00

08002d98 <initCanFilter>:
  /* USER CODE END CAN2_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void initCanFilter() {
 8002d98:	b510      	push	{r4, lr}
 8002d9a:	b08a      	sub	sp, #40	; 0x28
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8002d9c:	2400      	movs	r4, #0
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002d9e:	2301      	movs	r3, #1
	sFilterConfig.FilterMaskIdLow = 0x0000;
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
	sFilterConfig.FilterActivation = ENABLE;
	sFilterConfig.SlaveStartFilterBank = 0;

	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8002da0:	4669      	mov	r1, sp
 8002da2:	480a      	ldr	r0, [pc, #40]	; (8002dcc <initCanFilter+0x34>)
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002da4:	9404      	str	r4, [sp, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8002da6:	e9cd 3307 	strd	r3, r3, [sp, #28]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002daa:	e9cd 4405 	strd	r4, r4, [sp, #20]
	sFilterConfig.FilterIdLow = 0x0000;
 8002dae:	e9cd 4400 	strd	r4, r4, [sp]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8002db2:	e9cd 4402 	strd	r4, r4, [sp, #8]
	sFilterConfig.SlaveStartFilterBank = 0;
 8002db6:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8002db8:	f7fe f8ec 	bl	8000f94 <HAL_CAN_ConfigFilter>

	sFilterConfig.SlaveStartFilterBank = 0;
	sFilterConfig.FilterBank = 0;

	HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig);
 8002dbc:	4669      	mov	r1, sp
 8002dbe:	4804      	ldr	r0, [pc, #16]	; (8002dd0 <initCanFilter+0x38>)
	sFilterConfig.SlaveStartFilterBank = 0;
 8002dc0:	9409      	str	r4, [sp, #36]	; 0x24
	sFilterConfig.FilterBank = 0;
 8002dc2:	9405      	str	r4, [sp, #20]
	HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig);
 8002dc4:	f7fe f8e6 	bl	8000f94 <HAL_CAN_ConfigFilter>
}
 8002dc8:	b00a      	add	sp, #40	; 0x28
 8002dca:	bd10      	pop	{r4, pc}
 8002dcc:	200000cc 	.word	0x200000cc
 8002dd0:	200000a4 	.word	0x200000a4

08002dd4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd8:	2400      	movs	r4, #0
{
 8002dda:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ddc:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8002de0:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002de4:	4b54      	ldr	r3, [pc, #336]	; (8002f38 <MX_GPIO_Init+0x164>)
 8002de6:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de8:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 8002dec:	f8df a154 	ldr.w	sl, [pc, #340]	; 8002f44 <MX_GPIO_Init+0x170>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, POWER_OUT1_Pin|POWER_OUT2_Pin|POWER_OUT3_Pin|POWER_OUT4_Pin, GPIO_PIN_RESET);
 8002df0:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8002f48 <MX_GPIO_Init+0x174>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5 
 8002df4:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8002f4c <MX_GPIO_Init+0x178>
                          |GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI_MPU_CS_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8002df8:	4f50      	ldr	r7, [pc, #320]	; (8002f3c <MX_GPIO_Init+0x168>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8002dfa:	4e51      	ldr	r6, [pc, #324]	; (8002f40 <MX_GPIO_Init+0x16c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dfc:	f042 0210 	orr.w	r2, r2, #16
 8002e00:	631a      	str	r2, [r3, #48]	; 0x30
 8002e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e04:	f002 0210 	and.w	r2, r2, #16
 8002e08:	9201      	str	r2, [sp, #4]
 8002e0a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e0c:	9402      	str	r4, [sp, #8]
 8002e0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e14:	631a      	str	r2, [r3, #48]	; 0x30
 8002e16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e18:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002e1c:	9202      	str	r2, [sp, #8]
 8002e1e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e20:	9403      	str	r4, [sp, #12]
 8002e22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e24:	f042 0201 	orr.w	r2, r2, #1
 8002e28:	631a      	str	r2, [r3, #48]	; 0x30
 8002e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e2c:	f002 0201 	and.w	r2, r2, #1
 8002e30:	9203      	str	r2, [sp, #12]
 8002e32:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e34:	9404      	str	r4, [sp, #16]
 8002e36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e38:	f042 0202 	orr.w	r2, r2, #2
 8002e3c:	631a      	str	r2, [r3, #48]	; 0x30
 8002e3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e40:	f002 0202 	and.w	r2, r2, #2
 8002e44:	9204      	str	r2, [sp, #16]
 8002e46:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e48:	9405      	str	r4, [sp, #20]
 8002e4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e4c:	f042 0208 	orr.w	r2, r2, #8
 8002e50:	631a      	str	r2, [r3, #48]	; 0x30
 8002e52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e54:	f002 0208 	and.w	r2, r2, #8
 8002e58:	9205      	str	r2, [sp, #20]
 8002e5a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002e5c:	9406      	str	r4, [sp, #24]
 8002e5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e64:	631a      	str	r2, [r3, #48]	; 0x30
 8002e66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e68:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002e6c:	9206      	str	r2, [sp, #24]
 8002e6e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e70:	9407      	str	r4, [sp, #28]
 8002e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e78:	631a      	str	r2, [r3, #48]	; 0x30
 8002e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e7c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002e80:	9207      	str	r2, [sp, #28]
 8002e82:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e84:	9408      	str	r4, [sp, #32]
 8002e86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e88:	f042 0220 	orr.w	r2, r2, #32
 8002e8c:	631a      	str	r2, [r3, #48]	; 0x30
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e90:	f003 0320 	and.w	r3, r3, #32
 8002e94:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 8002e96:	4622      	mov	r2, r4
 8002e98:	4650      	mov	r0, sl
 8002e9a:	2101      	movs	r1, #1
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e9c:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 8002e9e:	f7fe fd17 	bl	80018d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOH, POWER_OUT1_Pin|POWER_OUT2_Pin|POWER_OUT3_Pin|POWER_OUT4_Pin, GPIO_PIN_RESET);
 8002ea2:	4622      	mov	r2, r4
 8002ea4:	4648      	mov	r0, r9
 8002ea6:	213c      	movs	r1, #60	; 0x3c
 8002ea8:	f7fe fd12 	bl	80018d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5 
 8002eac:	4622      	mov	r2, r4
 8002eae:	4640      	mov	r0, r8
 8002eb0:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8002eb4:	f7fe fd0c 	bl	80018d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, SPI_MPU_CS_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8002eb8:	4622      	mov	r2, r4
 8002eba:	4638      	mov	r0, r7
 8002ebc:	f244 0140 	movw	r1, #16448	; 0x4040
 8002ec0:	f7fe fd06 	bl	80018d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8002ec4:	4622      	mov	r2, r4
 8002ec6:	4630      	mov	r0, r6
 8002ec8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ecc:	f7fe fd00 	bl	80018d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ed0:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002ed2:	4650      	mov	r0, sl
 8002ed4:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed6:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eda:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002ede:	f7fe fbb9 	bl	8001654 <HAL_GPIO_Init>
  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = POWER_OUT1_Pin|POWER_OUT2_Pin|POWER_OUT3_Pin|POWER_OUT4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002ee2:	4648      	mov	r0, r9
 8002ee4:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = POWER_OUT1_Pin|POWER_OUT2_Pin|POWER_OUT3_Pin|POWER_OUT4_Pin;
 8002ee6:	233c      	movs	r3, #60	; 0x3c
 8002ee8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eea:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eee:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002ef0:	f7fe fbb0 	bl	8001654 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5 
                          |GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ef4:	4640      	mov	r0, r8
 8002ef6:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5 
 8002ef8:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8002efc:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efe:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f02:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f04:	f7fe fba6 	bl	8001654 <HAL_GPIO_Init>
  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = SPI_MPU_CS_Pin|LED_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f08:	4638      	mov	r0, r7
 8002f0a:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = SPI_MPU_CS_Pin|LED_G_Pin;
 8002f0c:	f244 0340 	movw	r3, #16448	; 0x4040
 8002f10:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f12:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f16:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f18:	f7fe fb9c 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 8002f1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8002f20:	a909      	add	r1, sp, #36	; 0x24
 8002f22:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f24:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f28:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = LED_R_Pin;
 8002f2a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8002f2c:	f7fe fb92 	bl	8001654 <HAL_GPIO_Init>

}
 8002f30:	b00e      	add	sp, #56	; 0x38
 8002f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f36:	bf00      	nop
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	40021400 	.word	0x40021400
 8002f40:	40021000 	.word	0x40021000
 8002f44:	40022000 	.word	0x40022000
 8002f48:	40021c00 	.word	0x40021c00
 8002f4c:	40021800 	.word	0x40021800

08002f50 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch) {
 8002f50:	b500      	push	{lr}
 8002f52:	b083      	sub	sp, #12
 8002f54:	a902      	add	r1, sp, #8
HAL_UART_Transmit(&huart7, &ch, 1, 1);
 8002f56:	2301      	movs	r3, #1
void __io_putchar(uint8_t ch) {
 8002f58:	f801 0d01 	strb.w	r0, [r1, #-1]!
HAL_UART_Transmit(&huart7, &ch, 1, 1);
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	4803      	ldr	r0, [pc, #12]	; (8002f6c <__io_putchar+0x1c>)
 8002f60:	f7ff fc84 	bl	800286c <HAL_UART_Transmit>
}
 8002f64:	b003      	add	sp, #12
 8002f66:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f6a:	bf00      	nop
 8002f6c:	20000474 	.word	0x20000474

08002f70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f70:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f72:	2300      	movs	r3, #0
{
 8002f74:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f76:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8002f7a:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f7e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002f82:	e9cd 3306 	strd	r3, r3, [sp, #24]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f86:	4920      	ldr	r1, [pc, #128]	; (8003008 <SystemClock_Config+0x98>)
 8002f88:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f8a:	9303      	str	r3, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f8c:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f8e:	4a1f      	ldr	r2, [pc, #124]	; (800300c <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f90:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8002f94:	6408      	str	r0, [r1, #64]	; 0x40
 8002f96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002f98:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8002f9c:	9101      	str	r1, [sp, #4]
 8002f9e:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fa0:	9302      	str	r3, [sp, #8]
 8002fa2:	6813      	ldr	r3, [r2, #0]
 8002fa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	6813      	ldr	r3, [r2, #0]
 8002fac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002fb0:	9302      	str	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002fb2:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fb8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fbc:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 6;
 8002fbe:	2106      	movs	r1, #6
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002fc0:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fc2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002fc4:	22a8      	movs	r2, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002fc6:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fc8:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fca:	a808      	add	r0, sp, #32
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fcc:	9d02      	ldr	r5, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fce:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002fd0:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002fd2:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002fd6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fd8:	f7fe fc86 	bl	80018e8 <HAL_RCC_OscConfig>
 8002fdc:	b100      	cbz	r0, 8002fe0 <SystemClock_Config+0x70>
 8002fde:	e7fe      	b.n	8002fde <SystemClock_Config+0x6e>
 8002fe0:	4603      	mov	r3, r0
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fe2:	260f      	movs	r6, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002fe4:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002fe8:	f44f 5280 	mov.w	r2, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002fec:	a803      	add	r0, sp, #12
 8002fee:	2105      	movs	r1, #5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ff0:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ff2:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ff4:	9603      	str	r6, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ff6:	e9cd 5206 	strd	r5, r2, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ffa:	f7fe fe65 	bl	8001cc8 <HAL_RCC_ClockConfig>
 8002ffe:	b100      	cbz	r0, 8003002 <SystemClock_Config+0x92>
 8003000:	e7fe      	b.n	8003000 <SystemClock_Config+0x90>
  {
    Error_Handler();
  }
}
 8003002:	b014      	add	sp, #80	; 0x50
 8003004:	bd70      	pop	{r4, r5, r6, pc}
 8003006:	bf00      	nop
 8003008:	40023800 	.word	0x40023800
 800300c:	40007000 	.word	0x40007000

08003010 <HAL_UART_RxCpltCallback>:
		}
		cnt_tim++;
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8003010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (UartHandle->Instance == huart1.Instance) {	//Propo-receive Interrupts
 8003012:	4b3a      	ldr	r3, [pc, #232]	; (80030fc <HAL_UART_RxCpltCallback+0xec>)
 8003014:	6801      	ldr	r1, [r0, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	4291      	cmp	r1, r2
 800301a:	d000      	beq.n	800301e <HAL_UART_RxCpltCallback+0xe>
		rc.key_Ctrl =  (0b0000000000100000 & rc.key_v)>>5;
		rc.key_Q =     (0b0000000001000000 & rc.key_v)>>6;
		rc.key_E =     (0b0000000010000000 & rc.key_v)>>7;

	}
}
 800301c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_UART_Receive_IT(&huart1, rcData, 18);
 800301e:	4c38      	ldr	r4, [pc, #224]	; (8003100 <HAL_UART_RxCpltCallback+0xf0>)
 8003020:	4618      	mov	r0, r3
 8003022:	4621      	mov	r1, r4
 8003024:	2212      	movs	r2, #18
 8003026:	f7ff fca9 	bl	800297c <HAL_UART_Receive_IT>
		HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_1);
 800302a:	2102      	movs	r1, #2
 800302c:	4835      	ldr	r0, [pc, #212]	; (8003104 <HAL_UART_RxCpltCallback+0xf4>)
 800302e:	f7fe fc53 	bl	80018d8 <HAL_GPIO_TogglePin>
		rc.ch1 = (((rcData[1] & 0x07) << 8) | rcData[0]);
 8003032:	f894 c001 	ldrb.w	ip, [r4, #1]
 8003036:	7821      	ldrb	r1, [r4, #0]
		rc.ch3 = (((rcData[4] & 0x01) << 10) | (rcData[3] << 2)
 8003038:	7927      	ldrb	r7, [r4, #4]
		rc.ch2 = (((rcData[2] & 0x3F) << 5) | (rcData[1] >> 3));
 800303a:	78a2      	ldrb	r2, [r4, #2]
		rc.ch5 = (rcData[17]<<8) | rcData[16];
 800303c:	7c60      	ldrb	r0, [r4, #17]
 800303e:	7c26      	ldrb	r6, [r4, #16]
		rc.ch3 = (((rcData[4] & 0x01) << 10) | (rcData[3] << 2)
 8003040:	f894 e003 	ldrb.w	lr, [r4, #3]
		rc.ch4 = (((rcData[5] & 0x0F) << 7) | (rcData[4] >> 1));
 8003044:	7965      	ldrb	r5, [r4, #5]
		rc.ch1 = (((rcData[1] & 0x07) << 8) | rcData[0]);
 8003046:	ea4f 230c 	mov.w	r3, ip, lsl #8
 800304a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800304e:	4319      	orrs	r1, r3
		rc.ch1 -= 1024;
 8003050:	4b2d      	ldr	r3, [pc, #180]	; (8003108 <HAL_UART_RxCpltCallback+0xf8>)
 8003052:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
		rc.ch5 = (rcData[17]<<8) | rcData[16];
 8003056:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
		rc.ch1 -= 1024;
 800305a:	8019      	strh	r1, [r3, #0]
		rc.ch2 = (((rcData[2] & 0x3F) << 5) | (rcData[1] >> 3));
 800305c:	0150      	lsls	r0, r2, #5
		rc.ch3 = (((rcData[4] & 0x01) << 10) | (rcData[3] << 2)
 800305e:	02b9      	lsls	r1, r7, #10
				| (rcData[2] >> 6));
 8003060:	0992      	lsrs	r2, r2, #6
		rc.ch3 = (((rcData[4] & 0x01) << 10) | (rcData[3] << 2)
 8003062:	f401 6180 	and.w	r1, r1, #1024	; 0x400
				| (rcData[2] >> 6));
 8003066:	ea42 028e 	orr.w	r2, r2, lr, lsl #2
 800306a:	430a      	orrs	r2, r1
		rc.ch2 = (((rcData[2] & 0x3F) << 5) | (rcData[1] >> 3));
 800306c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
		rc.ch4 = (((rcData[5] & 0x0F) << 7) | (rcData[4] >> 1));
 8003070:	01e9      	lsls	r1, r5, #7
		rc.ch2 = (((rcData[2] & 0x3F) << 5) | (rcData[1] >> 3));
 8003072:	ea40 00dc 	orr.w	r0, r0, ip, lsr #3
		rc.ch4 = (((rcData[5] & 0x0F) << 7) | (rcData[4] >> 1));
 8003076:	f401 61f0 	and.w	r1, r1, #1920	; 0x780
 800307a:	ea41 0157 	orr.w	r1, r1, r7, lsr #1
		rc.ch2 -= 1024;
 800307e:	f5a0 6080 	sub.w	r0, r0, #1024	; 0x400
		rc.ch4 -= 1024;
 8003082:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
		rc.ch2 -= 1024;
 8003086:	8058      	strh	r0, [r3, #2]
		rc.sw1 = ((rcData[5] & 0x30) >> 4);
 8003088:	f3c5 1001 	ubfx	r0, r5, #4, #2
		rc.ch5 = 1024-rc.ch5;
 800308c:	f5c6 6680 	rsb	r6, r6, #1024	; 0x400
		rc.ch3 -= 1024;
 8003090:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
		rc.ch4 -= 1024;
 8003094:	80d9      	strh	r1, [r3, #6]
		rc.sw1 = ((rcData[5] & 0x30) >> 4);
 8003096:	7298      	strb	r0, [r3, #10]
		rc.mouse_y = ((int16_t)rcData[8]) | ((int16_t)rcData[9] << 8);
 8003098:	7a61      	ldrb	r1, [r4, #9]
 800309a:	7a20      	ldrb	r0, [r4, #8]
		rc.ch5 = 1024-rc.ch5;
 800309c:	811e      	strh	r6, [r3, #8]
		rc.ch3 -= 1024;
 800309e:	809a      	strh	r2, [r3, #4]
		rc.mouse_x = ((int16_t)rcData[6]) | ((int16_t)rcData[7] << 8);
 80030a0:	79e6      	ldrb	r6, [r4, #7]
 80030a2:	79a2      	ldrb	r2, [r4, #6]
		rc.key_v = ((int16_t)rcData[14]);
 80030a4:	7ba7      	ldrb	r7, [r4, #14]
		rc.sw2 = ((rcData[5] & 0xC0) >> 6);
 80030a6:	09ad      	lsrs	r5, r5, #6
		rc.mouse_y = ((int16_t)rcData[8]) | ((int16_t)rcData[9] << 8);
 80030a8:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
		rc.sw2 = ((rcData[5] & 0xC0) >> 6);
 80030ac:	72dd      	strb	r5, [r3, #11]
		rc.mouse_z = ((int16_t)rcData[10]) | ((int16_t)rcData[11] << 8);
 80030ae:	7aa1      	ldrb	r1, [r4, #10]
 80030b0:	7ae5      	ldrb	r5, [r4, #11]
		rc.mouse_y = ((int16_t)rcData[8]) | ((int16_t)rcData[9] << 8);
 80030b2:	81d8      	strh	r0, [r3, #14]
		rc.mouse_x = ((int16_t)rcData[6]) | ((int16_t)rcData[7] << 8);
 80030b4:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
		rc.mouse_z = ((int16_t)rcData[10]) | ((int16_t)rcData[11] << 8);
 80030b8:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
		rc.mouse_x = ((int16_t)rcData[6]) | ((int16_t)rcData[7] << 8);
 80030bc:	819a      	strh	r2, [r3, #12]
		rc.key_v = ((int16_t)rcData[14]);
 80030be:	b23a      	sxth	r2, r7
		rc.mouse_press_l = rcData[12];
 80030c0:	7b25      	ldrb	r5, [r4, #12]
		rc.mouse_z = ((int16_t)rcData[10]) | ((int16_t)rcData[11] << 8);
 80030c2:	8219      	strh	r1, [r3, #16]
		rc.mouse_press_r = rcData[13];
 80030c4:	7b64      	ldrb	r4, [r4, #13]
		rc.mouse_press_l = rcData[12];
 80030c6:	825d      	strh	r5, [r3, #18]
		rc.key_S =     (0b0000000000000010 & rc.key_v)>>1;
 80030c8:	f3c2 0040 	ubfx	r0, r2, #1, #1
		rc.key_A =     (0b0000000000000100 & rc.key_v)>>2;
 80030cc:	f3c2 0180 	ubfx	r1, r2, #2, #1
		rc.key_W =     (0b0000000000000001 & rc.key_v);
 80030d0:	f007 0701 	and.w	r7, r7, #1
		rc.mouse_press_r = rcData[13];
 80030d4:	829c      	strh	r4, [r3, #20]
		rc.key_D =     (0b0000000000001000 & rc.key_v)>>3;
 80030d6:	f3c2 05c0 	ubfx	r5, r2, #3, #1
		rc.key_Shift = (0b0000000000010000 & rc.key_v)>>4;
 80030da:	f3c2 1400 	ubfx	r4, r2, #4, #1
		rc.key_v = ((int16_t)rcData[14]);
 80030de:	82da      	strh	r2, [r3, #22]
		rc.key_S =     (0b0000000000000010 & rc.key_v)>>1;
 80030e0:	7698      	strb	r0, [r3, #26]
		rc.key_W =     (0b0000000000000001 & rc.key_v);
 80030e2:	761f      	strb	r7, [r3, #24]
		rc.key_Ctrl =  (0b0000000000100000 & rc.key_v)>>5;
 80030e4:	f3c2 1040 	ubfx	r0, r2, #5, #1
		rc.key_A =     (0b0000000000000100 & rc.key_v)>>2;
 80030e8:	7659      	strb	r1, [r3, #25]
		rc.key_Q =     (0b0000000001000000 & rc.key_v)>>6;
 80030ea:	f3c2 1180 	ubfx	r1, r2, #6, #1
		rc.key_E =     (0b0000000010000000 & rc.key_v)>>7;
 80030ee:	11d2      	asrs	r2, r2, #7
		rc.key_D =     (0b0000000000001000 & rc.key_v)>>3;
 80030f0:	76dd      	strb	r5, [r3, #27]
		rc.key_Shift = (0b0000000000010000 & rc.key_v)>>4;
 80030f2:	779c      	strb	r4, [r3, #30]
		rc.key_Ctrl =  (0b0000000000100000 & rc.key_v)>>5;
 80030f4:	77d8      	strb	r0, [r3, #31]
		rc.key_Q =     (0b0000000001000000 & rc.key_v)>>6;
 80030f6:	7719      	strb	r1, [r3, #28]
		rc.key_E =     (0b0000000010000000 & rc.key_v)>>7;
 80030f8:	775a      	strb	r2, [r3, #29]
}
 80030fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030fc:	200004b4 	.word	0x200004b4
 8003100:	20000318 	.word	0x20000318
 8003104:	40021800 	.word	0x40021800
 8003108:	200000f4 	.word	0x200000f4
 800310c:	00000000 	.word	0x00000000

08003110 <HAL_CAN_RxFifo0MsgPendingCallback>:

//can fifo0 receive interrupt
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
	/* Get RX message */
	if (hcan->Instance == hcan2.Instance) {// can2 bus receive interrupt
 8003110:	4a39      	ldr	r2, [pc, #228]	; (80031f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8003112:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (hcan->Instance == hcan2.Instance) {// can2 bus receive interrupt
 8003114:	6812      	ldr	r2, [r2, #0]
 8003116:	6803      	ldr	r3, [r0, #0]
 8003118:	4293      	cmp	r3, r2
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800311a:	4604      	mov	r4, r0
	if (hcan->Instance == hcan2.Instance) {// can2 bus receive interrupt
 800311c:	d035      	beq.n	800318a <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
		wheelFdb[id].rpm = canRxData[2] * 256 + canRxData[3];
		wheelFdb[id].torque = canRxData[4] * 256 + canRxData[5];
		wheelFdb[id].temp = canRxData[6];
		wheelFdb[id].omg = 6.28318530718 * (wheelFdb[id].rpm) / 1140.0;
	}
	if (hcan->Instance == hcan1.Instance) {// can1 bus receive interrupt
 800311e:	4a37      	ldr	r2, [pc, #220]	; (80031fc <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8003120:	6812      	ldr	r2, [r2, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d000      	beq.n	8003128 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>
		fdb->rpm = canRxData[2] * 256 + canRxData[3];
		fdb->torque = canRxData[4] * 256 + canRxData[5];
		fdb->temp = canRxData[6];
		fdb->omg = 6.28318530718 * (fdb->rpm) / 1140.0;
	}
}
 8003126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, canRxData);
 8003128:	4e35      	ldr	r6, [pc, #212]	; (8003200 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 800312a:	4d36      	ldr	r5, [pc, #216]	; (8003204 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 800312c:	4632      	mov	r2, r6
 800312e:	462b      	mov	r3, r5
 8003130:	4620      	mov	r0, r4
 8003132:	2100      	movs	r1, #0
 8003134:	f7fe f83a 	bl	80011ac <HAL_CAN_GetRxMessage>
 8003138:	6833      	ldr	r3, [r6, #0]
 800313a:	f46f 7201 	mvn.w	r2, #516	; 0x204
 800313e:	4413      	add	r3, r2
 8003140:	2b02      	cmp	r3, #2
 8003142:	d81f      	bhi.n	8003184 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
 8003144:	4830      	ldr	r0, [pc, #192]	; (8003208 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
		fdb->angle = canRxData[0] * 256 + canRxData[1];
 8003146:	786a      	ldrb	r2, [r5, #1]
 8003148:	7829      	ldrb	r1, [r5, #0]
 800314a:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 800314e:	eb02 2301 	add.w	r3, r2, r1, lsl #8
 8003152:	8023      	strh	r3, [r4, #0]
		fdb->rpm = canRxData[2] * 256 + canRxData[3];
 8003154:	78ab      	ldrb	r3, [r5, #2]
 8003156:	78e8      	ldrb	r0, [r5, #3]
 8003158:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 800315c:	b200      	sxth	r0, r0
 800315e:	8060      	strh	r0, [r4, #2]
		fdb->torque = canRxData[4] * 256 + canRxData[5];
 8003160:	792a      	ldrb	r2, [r5, #4]
 8003162:	796b      	ldrb	r3, [r5, #5]
 8003164:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003168:	80a3      	strh	r3, [r4, #4]
		fdb->temp = canRxData[6];
 800316a:	79ab      	ldrb	r3, [r5, #6]
 800316c:	80e3      	strh	r3, [r4, #6]
		fdb->omg = 6.28318530718 * (fdb->rpm) / 1140.0;
 800316e:	f7fd f9e1 	bl	8000534 <__aeabi_i2d>
 8003172:	a31f      	add	r3, pc, #124	; (adr r3, 80031f0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8003174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003178:	f7fd fa46 	bl	8000608 <__aeabi_dmul>
 800317c:	f7fd fc56 	bl	8000a2c <__aeabi_d2f>
 8003180:	60a0      	str	r0, [r4, #8]
}
 8003182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		fdb->angle = canRxData[0] * 256 + canRxData[1];
 8003184:	2300      	movs	r3, #0
 8003186:	801b      	strh	r3, [r3, #0]
 8003188:	deff      	udf	#255	; 0xff
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, canRxData);
 800318a:	4d1e      	ldr	r5, [pc, #120]	; (8003204 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 800318c:	4e1c      	ldr	r6, [pc, #112]	; (8003200 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 800318e:	462b      	mov	r3, r5
 8003190:	4632      	mov	r2, r6
 8003192:	2100      	movs	r1, #0
 8003194:	f7fe f80a 	bl	80011ac <HAL_CAN_GetRxMessage>
		int id = canRxHeader.StdId - 513;
 8003198:	6833      	ldr	r3, [r6, #0]
		wheelFdb[id].rpm = canRxData[2] * 256 + canRxData[3];
 800319a:	78aa      	ldrb	r2, [r5, #2]
 800319c:	78e8      	ldrb	r0, [r5, #3]
		wheelFdb[id].angle = canRxData[0] * 256 + canRxData[1];
 800319e:	4e1b      	ldr	r6, [pc, #108]	; (800320c <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
		wheelFdb[id].torque = canRxData[4] * 256 + canRxData[5];
 80031a0:	f895 c004 	ldrb.w	ip, [r5, #4]
		wheelFdb[id].angle = canRxData[0] * 256 + canRxData[1];
 80031a4:	f895 e000 	ldrb.w	lr, [r5]
 80031a8:	7869      	ldrb	r1, [r5, #1]
		int id = canRxHeader.StdId - 513;
 80031aa:	f46f 7700 	mvn.w	r7, #512	; 0x200
 80031ae:	443b      	add	r3, r7
		wheelFdb[id].angle = canRxData[0] * 256 + canRxData[1];
 80031b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80031b4:	009b      	lsls	r3, r3, #2
		wheelFdb[id].rpm = canRxData[2] * 256 + canRxData[3];
 80031b6:	eb00 2002 	add.w	r0, r0, r2, lsl #8
		wheelFdb[id].torque = canRxData[4] * 256 + canRxData[5];
 80031ba:	796a      	ldrb	r2, [r5, #5]
		wheelFdb[id].temp = canRxData[6];
 80031bc:	79af      	ldrb	r7, [r5, #6]
		wheelFdb[id].angle = canRxData[0] * 256 + canRxData[1];
 80031be:	18f5      	adds	r5, r6, r3
		wheelFdb[id].torque = canRxData[4] * 256 + canRxData[5];
 80031c0:	eb02 220c 	add.w	r2, r2, ip, lsl #8
		wheelFdb[id].angle = canRxData[0] * 256 + canRxData[1];
 80031c4:	eb01 210e 	add.w	r1, r1, lr, lsl #8
		wheelFdb[id].rpm = canRxData[2] * 256 + canRxData[3];
 80031c8:	b200      	sxth	r0, r0
		wheelFdb[id].angle = canRxData[0] * 256 + canRxData[1];
 80031ca:	52f1      	strh	r1, [r6, r3]
		wheelFdb[id].torque = canRxData[4] * 256 + canRxData[5];
 80031cc:	80aa      	strh	r2, [r5, #4]
		wheelFdb[id].temp = canRxData[6];
 80031ce:	80ef      	strh	r7, [r5, #6]
		wheelFdb[id].rpm = canRxData[2] * 256 + canRxData[3];
 80031d0:	8068      	strh	r0, [r5, #2]
		wheelFdb[id].omg = 6.28318530718 * (wheelFdb[id].rpm) / 1140.0;
 80031d2:	f7fd f9af 	bl	8000534 <__aeabi_i2d>
 80031d6:	a306      	add	r3, pc, #24	; (adr r3, 80031f0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80031d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031dc:	f7fd fa14 	bl	8000608 <__aeabi_dmul>
 80031e0:	f7fd fc24 	bl	8000a2c <__aeabi_d2f>
 80031e4:	6823      	ldr	r3, [r4, #0]
 80031e6:	60a8      	str	r0, [r5, #8]
 80031e8:	e799      	b.n	800311e <HAL_CAN_RxFifo0MsgPendingCallback+0xe>
 80031ea:	bf00      	nop
 80031ec:	f3af 8000 	nop.w
 80031f0:	bf90c83b 	.word	0xbf90c83b
 80031f4:	3f76934b 	.word	0x3f76934b
 80031f8:	200000a4 	.word	0x200000a4
 80031fc:	200000cc 	.word	0x200000cc
 8003200:	200002dc 	.word	0x200002dc
 8003204:	20000284 	.word	0x20000284
 8003208:	08005470 	.word	0x08005470
 800320c:	20000120 	.word	0x20000120

08003210 <initFriction>:
	mecanum.param.wheelbase = WHEELBASE;
	mecanum.param.rotate_x_offset = 0;
	mecanum.param.rotate_y_offset = 0;
}

void initFriction() {
 8003210:	b538      	push	{r3, r4, r5, lr}
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1500);
 8003212:	4d0f      	ldr	r5, [pc, #60]	; (8003250 <initFriction+0x40>)
 8003214:	682b      	ldr	r3, [r5, #0]
 8003216:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800321a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1500);
	HAL_Delay(3000);
 800321c:	f640 30b8 	movw	r0, #3000	; 0xbb8
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1500);
 8003220:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(3000);
 8003222:	f7fd fe23 	bl	8000e6c <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1220);
 8003226:	682b      	ldr	r3, [r5, #0]
 8003228:	f240 44c4 	movw	r4, #1220	; 0x4c4
 800322c:	635c      	str	r4, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1220);
	HAL_Delay(5000);
 800322e:	f241 3088 	movw	r0, #5000	; 0x1388
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1220);
 8003232:	641c      	str	r4, [r3, #64]	; 0x40
	HAL_Delay(5000);
 8003234:	f7fd fe1a 	bl	8000e6c <HAL_Delay>
	for (int i = 1220; i < 1400; i++) {
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);
 8003238:	682b      	ldr	r3, [r5, #0]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, i);
		HAL_Delay(30);
 800323a:	201e      	movs	r0, #30
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);
 800323c:	635c      	str	r4, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, i);
 800323e:	641c      	str	r4, [r3, #64]	; 0x40
	for (int i = 1220; i < 1400; i++) {
 8003240:	3401      	adds	r4, #1
		HAL_Delay(30);
 8003242:	f7fd fe13 	bl	8000e6c <HAL_Delay>
	for (int i = 1220; i < 1400; i++) {
 8003246:	f5b4 6faf 	cmp.w	r4, #1400	; 0x578
 800324a:	d1f5      	bne.n	8003238 <initFriction+0x28>
	}
}
 800324c:	bd38      	pop	{r3, r4, r5, pc}
 800324e:	bf00      	nop
 8003250:	200003f4 	.word	0x200003f4

08003254 <main>:
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
  HAL_Init();
 8003258:	f7fd fddc 	bl	8000e14 <HAL_Init>
  SystemClock_Config();
 800325c:	f7ff fe88 	bl	8002f70 <SystemClock_Config>
  MX_GPIO_Init();
 8003260:	f7ff fdb8 	bl	8002dd4 <MX_GPIO_Init>
  MX_CAN1_Init();
 8003264:	f7ff fcb8 	bl	8002bd8 <MX_CAN1_Init>
  MX_CAN2_Init();
 8003268:	f7ff fcd6 	bl	8002c18 <MX_CAN2_Init>
  MX_SPI5_Init();
 800326c:	f000 fc7a 	bl	8003b64 <MX_SPI5_Init>
  MX_TIM1_Init();
 8003270:	f000 fda2 	bl	8003db8 <MX_TIM1_Init>
  MX_TIM6_Init();
 8003274:	f000 fe52 	bl	8003f1c <MX_TIM6_Init>
  MX_TIM12_Init();
 8003278:	f000 fe74 	bl	8003f64 <MX_TIM12_Init>
  MX_UART7_Init();
 800327c:	f000 ff42 	bl	8004104 <MX_UART7_Init>
  MX_UART8_Init();
 8003280:	f000 ff5c 	bl	800413c <MX_UART8_Init>
  MX_USART1_UART_Init();
 8003284:	f000 ff76 	bl	8004174 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8003288:	f000 ff92 	bl	80041b0 <MX_USART6_UART_Init>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 800328c:	2200      	movs	r2, #0
 800328e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003292:	4864      	ldr	r0, [pc, #400]	; (8003424 <main+0x1d0>)
		wheelPID[i].outLimit = 15000.0f;
 8003294:	4f64      	ldr	r7, [pc, #400]	; (8003428 <main+0x1d4>)
 8003296:	4c65      	ldr	r4, [pc, #404]	; (800342c <main+0x1d8>)
	  printf("M0=%d M1=%d M2=%d M3=%d",wheelFdb[0].rpm,wheelFdb[1].rpm,wheelFdb[2].rpm,wheelFdb[3].rpm);
 8003298:	4e65      	ldr	r6, [pc, #404]	; (8003430 <main+0x1dc>)
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 800329a:	f7fe fb19 	bl	80018d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, 1);
 800329e:	2201      	movs	r2, #1
 80032a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80032a4:	4863      	ldr	r0, [pc, #396]	; (8003434 <main+0x1e0>)
 80032a6:	f7fe fb13 	bl	80018d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 1);
 80032aa:	2201      	movs	r2, #1
 80032ac:	2102      	movs	r1, #2
 80032ae:	4862      	ldr	r0, [pc, #392]	; (8003438 <main+0x1e4>)
 80032b0:	f7fe fb0e 	bl	80018d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 80032b4:	2201      	movs	r2, #1
 80032b6:	2104      	movs	r1, #4
 80032b8:	485f      	ldr	r0, [pc, #380]	; (8003438 <main+0x1e4>)
 80032ba:	f7fe fb09 	bl	80018d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 80032be:	2201      	movs	r2, #1
 80032c0:	2108      	movs	r1, #8
 80032c2:	485d      	ldr	r0, [pc, #372]	; (8003438 <main+0x1e4>)
 80032c4:	f7fe fb04 	bl	80018d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, 1);
 80032c8:	2201      	movs	r2, #1
 80032ca:	2110      	movs	r1, #16
 80032cc:	485a      	ldr	r0, [pc, #360]	; (8003438 <main+0x1e4>)
 80032ce:	f7fe faff 	bl	80018d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, 1);
 80032d2:	2201      	movs	r2, #1
 80032d4:	2120      	movs	r1, #32
 80032d6:	4858      	ldr	r0, [pc, #352]	; (8003438 <main+0x1e4>)
 80032d8:	f7fe fafa 	bl	80018d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, 1);
 80032dc:	2201      	movs	r2, #1
 80032de:	2140      	movs	r1, #64	; 0x40
 80032e0:	4855      	ldr	r0, [pc, #340]	; (8003438 <main+0x1e4>)
 80032e2:	f7fe faf5 	bl	80018d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, 1);
 80032e6:	2201      	movs	r2, #1
 80032e8:	2180      	movs	r1, #128	; 0x80
 80032ea:	4853      	ldr	r0, [pc, #332]	; (8003438 <main+0x1e4>)
 80032ec:	f7fe faf0 	bl	80018d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8, 1);
 80032f0:	2201      	movs	r2, #1
 80032f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032f6:	4850      	ldr	r0, [pc, #320]	; (8003438 <main+0x1e4>)
 80032f8:	f7fe faea 	bl	80018d0 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // friction wheel
 80032fc:	2100      	movs	r1, #0
 80032fe:	484f      	ldr	r0, [pc, #316]	; (800343c <main+0x1e8>)
 8003300:	f7fe fef4 	bl	80020ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8003304:	210c      	movs	r1, #12
 8003306:	484d      	ldr	r0, [pc, #308]	; (800343c <main+0x1e8>)
 8003308:	f7fe fef0 	bl	80020ec <HAL_TIM_PWM_Start>
  initFriction();
 800330c:	f7ff ff80 	bl	8003210 <initFriction>
		wheelPID[i].t = 2.0f;
 8003310:	4b4b      	ldr	r3, [pc, #300]	; (8003440 <main+0x1ec>)

void initLoadPID() {
	loadPID.t = 2.0f;
 8003312:	4a4c      	ldr	r2, [pc, #304]	; (8003444 <main+0x1f0>)
	loadPID.p = 10.0f;
	loadPID.i = 0.1f*500;
	loadPID.d = 0.07f;
 8003314:	484c      	ldr	r0, [pc, #304]	; (8003448 <main+0x1f4>)
 8003316:	60d0      	str	r0, [r2, #12]
		wheelPID[i].t = 2.0f;
 8003318:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	loadPID.t = 2.0f;
 800331c:	6011      	str	r1, [r2, #0]
		wheelPID[i].t = 2.0f;
 800331e:	6019      	str	r1, [r3, #0]
 8003320:	62d9      	str	r1, [r3, #44]	; 0x2c
 8003322:	6599      	str	r1, [r3, #88]	; 0x58
 8003324:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	loadPID.p = 10.0f;
 8003328:	4948      	ldr	r1, [pc, #288]	; (800344c <main+0x1f8>)
		wheelPID[i].p = 6.5f;
 800332a:	4849      	ldr	r0, [pc, #292]	; (8003450 <main+0x1fc>)
	loadPID.p = 10.0f;
 800332c:	6051      	str	r1, [r2, #4]
		wheelPID[i].i = 50.0f;
 800332e:	4949      	ldr	r1, [pc, #292]	; (8003454 <main+0x200>)
	loadPID.i = 0.1f*500;
 8003330:	6091      	str	r1, [r2, #8]
		wheelPID[i].d = 0.0f;
 8003332:	2500      	movs	r5, #0
		wheelPID[i].p = 6.5f;
 8003334:	6058      	str	r0, [r3, #4]
 8003336:	6318      	str	r0, [r3, #48]	; 0x30
 8003338:	65d8      	str	r0, [r3, #92]	; 0x5c
 800333a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
		wheelPID[i].i = 50.0f;
 800333e:	6099      	str	r1, [r3, #8]
		wheelPID[i].integralOutLimit = 500.0f;
 8003340:	4845      	ldr	r0, [pc, #276]	; (8003458 <main+0x204>)
		wheelPID[i].i = 50.0f;
 8003342:	6359      	str	r1, [r3, #52]	; 0x34
 8003344:	6619      	str	r1, [r3, #96]	; 0x60
 8003346:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
		wheelPID[i].differentialFilterRate = 0.9f;
 800334a:	4944      	ldr	r1, [pc, #272]	; (800345c <main+0x208>)
 800334c:	6199      	str	r1, [r3, #24]
 800334e:	6459      	str	r1, [r3, #68]	; 0x44
 8003350:	6719      	str	r1, [r3, #112]	; 0x70
 8003352:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
		wheelPID[i].d = 0.0f;
 8003356:	60dd      	str	r5, [r3, #12]
 8003358:	639d      	str	r5, [r3, #56]	; 0x38
 800335a:	665d      	str	r5, [r3, #100]	; 0x64
 800335c:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		wheelPID[i].integralOutLimit = 500.0f;
 8003360:	6158      	str	r0, [r3, #20]
 8003362:	6418      	str	r0, [r3, #64]	; 0x40
 8003364:	66d8      	str	r0, [r3, #108]	; 0x6c
 8003366:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
		wheelPID[i].outLimit = 15000.0f;
 800336a:	611f      	str	r7, [r3, #16]
	loadPID.outLimit = 30000.0f;
 800336c:	483c      	ldr	r0, [pc, #240]	; (8003460 <main+0x20c>)
		wheelPID[i].outLimit = 15000.0f;
 800336e:	63df      	str	r7, [r3, #60]	; 0x3c
 8003370:	669f      	str	r7, [r3, #104]	; 0x68
 8003372:	f8c3 7094 	str.w	r7, [r3, #148]	; 0x94
	loadPID.integralOutLimit = 10000.0f;
 8003376:	4b3b      	ldr	r3, [pc, #236]	; (8003464 <main+0x210>)
	loadPID.outLimit = 30000.0f;
 8003378:	6110      	str	r0, [r2, #16]
	loadPID.differentialFilterRate = 0.9f;
 800337a:	6191      	str	r1, [r2, #24]
	loadPID.integralOutLimit = 10000.0f;
 800337c:	6153      	str	r3, [r2, #20]
  initCanFilter();
 800337e:	f7ff fd0b 	bl	8002d98 <initCanFilter>
	mecanum.param.wheel_perimeter = PERIMETER;
 8003382:	4b39      	ldr	r3, [pc, #228]	; (8003468 <main+0x214>)
 8003384:	4a39      	ldr	r2, [pc, #228]	; (800346c <main+0x218>)
	mecanum.param.wheeltrack = WHEELTRACK;
 8003386:	493a      	ldr	r1, [pc, #232]	; (8003470 <main+0x21c>)
	mecanum.param.wheelbase = WHEELBASE;
 8003388:	483a      	ldr	r0, [pc, #232]	; (8003474 <main+0x220>)
	mecanum.param.wheel_perimeter = PERIMETER;
 800338a:	601a      	str	r2, [r3, #0]
	mecanum.param.wheeltrack = WHEELTRACK;
 800338c:	6059      	str	r1, [r3, #4]
  HAL_UART_Receive_IT(&huart1, rcData, 18);
 800338e:	2212      	movs	r2, #18
	mecanum.param.wheelbase = WHEELBASE;
 8003390:	6098      	str	r0, [r3, #8]
  HAL_UART_Receive_IT(&huart1, rcData, 18);
 8003392:	4939      	ldr	r1, [pc, #228]	; (8003478 <main+0x224>)
 8003394:	4839      	ldr	r0, [pc, #228]	; (800347c <main+0x228>)
	mecanum.param.rotate_x_offset = 0;
 8003396:	60dd      	str	r5, [r3, #12]
	mecanum.param.rotate_y_offset = 0;
 8003398:	611d      	str	r5, [r3, #16]
  HAL_UART_Receive_IT(&huart1, rcData, 18);
 800339a:	f7ff faef 	bl	800297c <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 800339e:	4838      	ldr	r0, [pc, #224]	; (8003480 <main+0x22c>)
	  printf("\r\n");
 80033a0:	4d38      	ldr	r5, [pc, #224]	; (8003484 <main+0x230>)
  HAL_TIM_Base_Start_IT(&htim6);
 80033a2:	f7fe fe0f 	bl	8001fc4 <HAL_TIM_Base_Start_IT>
  setbuf(stdout, NULL);
 80033a6:	4b38      	ldr	r3, [pc, #224]	; (8003488 <main+0x234>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2100      	movs	r1, #0
 80033ac:	6898      	ldr	r0, [r3, #8]
 80033ae:	f001 f8c9 	bl	8004544 <setbuf>
  HAL_CAN_Start(&hcan1);
 80033b2:	4836      	ldr	r0, [pc, #216]	; (800348c <main+0x238>)
 80033b4:	f7fd fe74 	bl	80010a0 <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 80033b8:	4835      	ldr	r0, [pc, #212]	; (8003490 <main+0x23c>)
 80033ba:	f7fd fe71 	bl	80010a0 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80033be:	2102      	movs	r1, #2
 80033c0:	4832      	ldr	r0, [pc, #200]	; (800348c <main+0x238>)
 80033c2:	f7fd ff73 	bl	80012ac <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80033c6:	2102      	movs	r1, #2
 80033c8:	4831      	ldr	r0, [pc, #196]	; (8003490 <main+0x23c>)
 80033ca:	f7fd ff6f 	bl	80012ac <HAL_CAN_ActivateNotification>
  HAL_GPIO_WritePin(POWER_OUT1_GPIO_Port, POWER_OUT1_Pin, 1);
 80033ce:	2201      	movs	r2, #1
 80033d0:	2104      	movs	r1, #4
 80033d2:	4830      	ldr	r0, [pc, #192]	; (8003494 <main+0x240>)
 80033d4:	f7fe fa7c 	bl	80018d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(POWER_OUT2_GPIO_Port, POWER_OUT2_Pin, 1);
 80033d8:	2201      	movs	r2, #1
 80033da:	2108      	movs	r1, #8
 80033dc:	482d      	ldr	r0, [pc, #180]	; (8003494 <main+0x240>)
 80033de:	f7fe fa77 	bl	80018d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(POWER_OUT3_GPIO_Port, POWER_OUT3_Pin, 1);
 80033e2:	2201      	movs	r2, #1
 80033e4:	2110      	movs	r1, #16
 80033e6:	482b      	ldr	r0, [pc, #172]	; (8003494 <main+0x240>)
 80033e8:	f7fe fa72 	bl	80018d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(POWER_OUT4_GPIO_Port, POWER_OUT4_Pin, 1);
 80033ec:	2201      	movs	r2, #1
 80033ee:	2120      	movs	r1, #32
 80033f0:	4828      	ldr	r0, [pc, #160]	; (8003494 <main+0x240>)
 80033f2:	f7fe fa6d 	bl	80018d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 80033f6:	2201      	movs	r2, #1
 80033f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033fc:	4809      	ldr	r0, [pc, #36]	; (8003424 <main+0x1d0>)
 80033fe:	f7fe fa67 	bl	80018d0 <HAL_GPIO_WritePin>
	  printf("M0=%d M1=%d M2=%d M3=%d",wheelFdb[0].rpm,wheelFdb[1].rpm,wheelFdb[2].rpm,wheelFdb[3].rpm);
 8003402:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
 8003406:	9000      	str	r0, [sp, #0]
 8003408:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 800340c:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 8003410:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8003414:	4630      	mov	r0, r6
 8003416:	f001 f819 	bl	800444c <iprintf>
	  printf("\r\n");
 800341a:	4628      	mov	r0, r5
 800341c:	f001 f88a 	bl	8004534 <puts>
 8003420:	e7ef      	b.n	8003402 <main+0x1ae>
 8003422:	bf00      	nop
 8003424:	40021000 	.word	0x40021000
 8003428:	466a6000 	.word	0x466a6000
 800342c:	20000120 	.word	0x20000120
 8003430:	0800547c 	.word	0x0800547c
 8003434:	40021400 	.word	0x40021400
 8003438:	40021800 	.word	0x40021800
 800343c:	200003f4 	.word	0x200003f4
 8003440:	200001d4 	.word	0x200001d4
 8003444:	2000032c 	.word	0x2000032c
 8003448:	3d8f5c29 	.word	0x3d8f5c29
 800344c:	41200000 	.word	0x41200000
 8003450:	40d00000 	.word	0x40d00000
 8003454:	42480000 	.word	0x42480000
 8003458:	43fa0000 	.word	0x43fa0000
 800345c:	3f666666 	.word	0x3f666666
 8003460:	46ea6000 	.word	0x46ea6000
 8003464:	461c4000 	.word	0x461c4000
 8003468:	2000028c 	.word	0x2000028c
 800346c:	43ef0000 	.word	0x43ef0000
 8003470:	43c50000 	.word	0x43c50000
 8003474:	43cf8000 	.word	0x43cf8000
 8003478:	20000318 	.word	0x20000318
 800347c:	200004b4 	.word	0x200004b4
 8003480:	200003b4 	.word	0x200003b4
 8003484:	08005494 	.word	0x08005494
 8003488:	2000000c 	.word	0x2000000c
 800348c:	200000cc 	.word	0x200000cc
 8003490:	200000a4 	.word	0x200000a4
 8003494:	40021c00 	.word	0x40021c00

08003498 <Gimbal_Task>:
}


void Gimbal_Task(){
 8003498:	b570      	push	{r4, r5, r6, lr}
	int fire = 0;
	int16_t u[4];
	if (rc.sw2 == 1) {
 800349a:	4d5b      	ldr	r5, [pc, #364]	; (8003608 <Gimbal_Task+0x170>)
		fire = 1;
	} else {
		fire = 0;
	}
	DBUFF[1] = loadPID.error = -900.0f*fire - loadMotorFdb.rpm;
 800349c:	4a5b      	ldr	r2, [pc, #364]	; (800360c <Gimbal_Task+0x174>)
	if (rc.sw2 == 1) {
 800349e:	7aeb      	ldrb	r3, [r5, #11]
	DBUFF[1] = loadPID.error = -900.0f*fire - loadMotorFdb.rpm;
 80034a0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80034a4:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8003610 <Gimbal_Task+0x178>
 80034a8:	4e5a      	ldr	r6, [pc, #360]	; (8003614 <Gimbal_Task+0x17c>)
	if (rc.sw2 == 1) {
 80034aa:	f1a3 0301 	sub.w	r3, r3, #1
 80034ae:	fab3 f383 	clz	r3, r3
 80034b2:	095b      	lsrs	r3, r3, #5
	DBUFF[1] = loadPID.error = -900.0f*fire - loadMotorFdb.rpm;
 80034b4:	ee07 3a10 	vmov	s14, r3
 80034b8:	ee07 2a90 	vmov	s15, r2
 80034bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80034c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034c4:	4a54      	ldr	r2, [pc, #336]	; (8003618 <Gimbal_Task+0x180>)
 80034c6:	eed7 7a26 	vfnms.f32	s15, s14, s13
void Gimbal_Task(){
 80034ca:	b082      	sub	sp, #8
	DBUFF[3] = u[2] = pidExecute(&loadPID);
 80034cc:	4610      	mov	r0, r2
	DBUFF[1] = loadPID.error = -900.0f*fire - loadMotorFdb.rpm;
 80034ce:	edc2 7a0a 	vstr	s15, [r2, #40]	; 0x28
 80034d2:	edc6 7a01 	vstr	s15, [r6, #4]
	DBUFF[3] = u[2] = pidExecute(&loadPID);
 80034d6:	f000 fae5 	bl	8003aa4 <pidExecute>

	target_yaw =(float) rc.ch1 / 660 * 70;
 80034da:	f9b5 3000 	ldrsh.w	r3, [r5]
 80034de:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800361c <Gimbal_Task+0x184>
	yaw_now=(float)((gimbalYawFdb.angle-4096.0)/8191.0*360.0);
 80034e2:	4a4f      	ldr	r2, [pc, #316]	; (8003620 <Gimbal_Task+0x188>)
	target_yaw =(float) rc.ch1 / 660 * 70;
 80034e4:	494f      	ldr	r1, [pc, #316]	; (8003624 <Gimbal_Task+0x18c>)
 80034e6:	ee07 3a90 	vmov	s15, r3
	DBUFF[3] = u[2] = pidExecute(&loadPID);
 80034ea:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	target_yaw =(float) rc.ch1 / 660 * 70;
 80034ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	DBUFF[3] = u[2] = pidExecute(&loadPID);
 80034f2:	ee10 3a10 	vmov	r3, s0
	target_yaw =(float) rc.ch1 / 660 * 70;
 80034f6:	ee67 7a87 	vmul.f32	s15, s15, s14
	DBUFF[3] = u[2] = pidExecute(&loadPID);
 80034fa:	b21b      	sxth	r3, r3
	target_yaw =(float) rc.ch1 / 660 * 70;
 80034fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	DBUFF[3] = u[2] = pidExecute(&loadPID);
 8003500:	ee07 3a10 	vmov	s14, r3
	target_yaw =(float) rc.ch1 / 660 * 70;
 8003504:	ee17 0a90 	vmov	r0, s15
	DBUFF[3] = u[2] = pidExecute(&loadPID);
 8003508:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	target_yaw =(float) rc.ch1 / 660 * 70;
 800350c:	b204      	sxth	r4, r0
	DBUFF[3] = u[2] = pidExecute(&loadPID);
 800350e:	ed86 7a03 	vstr	s14, [r6, #12]
	yaw_now=(float)((gimbalYawFdb.angle-4096.0)/8191.0*360.0);
 8003512:	f9b2 0000 	ldrsh.w	r0, [r2]
	target_yaw =(float) rc.ch1 / 660 * 70;
 8003516:	800c      	strh	r4, [r1, #0]
	DBUFF[3] = u[2] = pidExecute(&loadPID);
 8003518:	f8ad 3004 	strh.w	r3, [sp, #4]
	yaw_now=(float)((gimbalYawFdb.angle-4096.0)/8191.0*360.0);
 800351c:	f7fd f80a 	bl	8000534 <__aeabi_i2d>
 8003520:	2200      	movs	r2, #0
 8003522:	4b41      	ldr	r3, [pc, #260]	; (8003628 <Gimbal_Task+0x190>)
 8003524:	f7fc feb8 	bl	8000298 <__aeabi_dsub>
 8003528:	a335      	add	r3, pc, #212	; (adr r3, 8003600 <Gimbal_Task+0x168>)
 800352a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352e:	f7fd f86b 	bl	8000608 <__aeabi_dmul>
 8003532:	f7fd fa7b 	bl	8000a2c <__aeabi_d2f>
 8003536:	ee07 0a90 	vmov	s15, r0
	u[0]=map(target_yaw-yaw_now, -180, 180, -30000, 30000);

	target_pich=(float) rc.ch2 / 660 * (-30);
 800353a:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800353e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800362c <Gimbal_Task+0x194>
	yaw_now=(float)((gimbalYawFdb.angle-4096.0)/8191.0*360.0);
 8003542:	4d3b      	ldr	r5, [pc, #236]	; (8003630 <Gimbal_Task+0x198>)
	target_pich=(float) rc.ch2 / 660 * (-30);
 8003544:	493b      	ldr	r1, [pc, #236]	; (8003634 <Gimbal_Task+0x19c>)
	yaw_now=(float)((gimbalYawFdb.angle-4096.0)/8191.0*360.0);
 8003546:	eefd 6ae7 	vcvt.s32.f32	s13, s15
	target_pich=(float) rc.ch2 / 660 * (-30);
 800354a:	ee07 3a90 	vmov	s15, r3
	yaw_now=(float)((gimbalYawFdb.angle-4096.0)/8191.0*360.0);
 800354e:	ee16 2a90 	vmov	r2, s13
	target_pich=(float) rc.ch2 / 660 * (-30);
 8003552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	yaw_now=(float)((gimbalYawFdb.angle-4096.0)/8191.0*360.0);
 8003556:	b210      	sxth	r0, r2
	target_pich=(float) rc.ch2 / 660 * (-30);
 8003558:	ee67 7a87 	vmul.f32	s15, s15, s14
	u[0]=map(target_yaw-yaw_now, -180, 180, -30000, 30000);
 800355c:	1a24      	subs	r4, r4, r0
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800355e:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
 8003562:	4b35      	ldr	r3, [pc, #212]	; (8003638 <Gimbal_Task+0x1a0>)
	yaw_now=(float)((gimbalYawFdb.angle-4096.0)/8191.0*360.0);
 8003564:	8028      	strh	r0, [r5, #0]
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003566:	f64e 2460 	movw	r4, #60000	; 0xea60
	target_pich=(float) rc.ch2 / 660 * (-30);
 800356a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800356e:	fb04 f402 	mul.w	r4, r4, r2
 8003572:	fb83 2304 	smull	r2, r3, r3, r4
	target_pich=(float) rc.ch2 / 660 * (-30);
 8003576:	ee17 0a90 	vmov	r0, s15
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800357a:	191a      	adds	r2, r3, r4
 800357c:	17e3      	asrs	r3, r4, #31
 800357e:	ebc3 2322 	rsb	r3, r3, r2, asr #8
	pich_now=(float)((gimbalPitchFdb.angle-4096.0)/8191.0*360.0)+24;
 8003582:	4a2e      	ldr	r2, [pc, #184]	; (800363c <Gimbal_Task+0x1a4>)
 8003584:	4d2e      	ldr	r5, [pc, #184]	; (8003640 <Gimbal_Task+0x1a8>)
	target_pich=(float) rc.ch2 / 660 * (-30);
 8003586:	b204      	sxth	r4, r0
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003588:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 800358c:	3b30      	subs	r3, #48	; 0x30
	pich_now=(float)((gimbalPitchFdb.angle-4096.0)/8191.0*360.0)+24;
 800358e:	f9b2 0000 	ldrsh.w	r0, [r2]
	target_pich=(float) rc.ch2 / 660 * (-30);
 8003592:	800c      	strh	r4, [r1, #0]
	u[0]=map(target_yaw-yaw_now, -180, 180, -30000, 30000);
 8003594:	f8ad 3000 	strh.w	r3, [sp]
	pich_now=(float)((gimbalPitchFdb.angle-4096.0)/8191.0*360.0)+24;
 8003598:	f7fc ffcc 	bl	8000534 <__aeabi_i2d>
 800359c:	2200      	movs	r2, #0
 800359e:	4b22      	ldr	r3, [pc, #136]	; (8003628 <Gimbal_Task+0x190>)
 80035a0:	f7fc fe7a 	bl	8000298 <__aeabi_dsub>
 80035a4:	a316      	add	r3, pc, #88	; (adr r3, 8003600 <Gimbal_Task+0x168>)
 80035a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035aa:	f7fd f82d 	bl	8000608 <__aeabi_dmul>
 80035ae:	f7fd fa3d 	bl	8000a2c <__aeabi_d2f>
 80035b2:	ee07 0a10 	vmov	s14, r0
 80035b6:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
 80035ba:	ee77 7a27 	vadd.f32	s15, s14, s15
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80035be:	4921      	ldr	r1, [pc, #132]	; (8003644 <Gimbal_Task+0x1ac>)
	pich_now=(float)((gimbalPitchFdb.angle-4096.0)/8191.0*360.0)+24;
 80035c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80035c4:	f247 5330 	movw	r3, #30000	; 0x7530
	pich_now=(float)((gimbalPitchFdb.angle-4096.0)/8191.0*360.0)+24;
 80035c8:	ee17 2a90 	vmov	r2, s15
 80035cc:	b212      	sxth	r2, r2
	u[1]=map(target_pich-pich_now, -30, 20, -15000, 15000);
 80035ce:	1aa4      	subs	r4, r4, r2
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80035d0:	341e      	adds	r4, #30
 80035d2:	fb03 f404 	mul.w	r4, r3, r4
 80035d6:	fb81 1304 	smull	r1, r3, r1, r4
 80035da:	17e4      	asrs	r4, r4, #31
 80035dc:	ebc4 1423 	rsb	r4, r4, r3, asr #4
 80035e0:	f5a4 546a 	sub.w	r4, r4, #14976	; 0x3a80


	u[3]=0;
 80035e4:	2300      	movs	r3, #0
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80035e6:	3c18      	subs	r4, #24
	driveGimbalMotors(u);
 80035e8:	4668      	mov	r0, sp
	pich_now=(float)((gimbalPitchFdb.angle-4096.0)/8191.0*360.0)+24;
 80035ea:	802a      	strh	r2, [r5, #0]
	u[1]=map(target_pich-pich_now, -30, 20, -15000, 15000);
 80035ec:	f8ad 4002 	strh.w	r4, [sp, #2]
	u[3]=0;
 80035f0:	f8ad 3006 	strh.w	r3, [sp, #6]
	driveGimbalMotors(u);
 80035f4:	f000 fa16 	bl	8003a24 <driveGimbalMotors>
}
 80035f8:	b002      	add	sp, #8
 80035fa:	bd70      	pop	{r4, r5, r6, pc}
 80035fc:	f3af 8000 	nop.w
 8003600:	05a02d01 	.word	0x05a02d01
 8003604:	3fa680b4 	.word	0x3fa680b4
 8003608:	200000f4 	.word	0x200000f4
 800360c:	200002fc 	.word	0x200002fc
 8003610:	c4610000 	.word	0xc4610000
 8003614:	20000154 	.word	0x20000154
 8003618:	2000032c 	.word	0x2000032c
 800361c:	3dd9364d 	.word	0x3dd9364d
 8003620:	20000114 	.word	0x20000114
 8003624:	20000314 	.word	0x20000314
 8003628:	40b00000 	.word	0x40b00000
 800362c:	bd3a2e8b 	.word	0xbd3a2e8b
 8003630:	2000032a 	.word	0x2000032a
 8003634:	20000150 	.word	0x20000150
 8003638:	b60b60b7 	.word	0xb60b60b7
 800363c:	20000308 	.word	0x20000308
 8003640:	20000358 	.word	0x20000358
 8003644:	51eb851f 	.word	0x51eb851f

08003648 <HAL_TIM_PeriodElapsedCallback>:
	c++;
 8003648:	4a37      	ldr	r2, [pc, #220]	; (8003728 <HAL_TIM_PeriodElapsedCallback+0xe0>)
	if (htim->Instance == htim6.Instance) {//500Hz
 800364a:	4938      	ldr	r1, [pc, #224]	; (800372c <HAL_TIM_PeriodElapsedCallback+0xe4>)
	c++;
 800364c:	6813      	ldr	r3, [r2, #0]
	if (htim->Instance == htim6.Instance) {//500Hz
 800364e:	6800      	ldr	r0, [r0, #0]
 8003650:	6809      	ldr	r1, [r1, #0]
	c++;
 8003652:	3301      	adds	r3, #1
	if (htim->Instance == htim6.Instance) {//500Hz
 8003654:	4288      	cmp	r0, r1
	c++;
 8003656:	6013      	str	r3, [r2, #0]
	if (htim->Instance == htim6.Instance) {//500Hz
 8003658:	d000      	beq.n	800365c <HAL_TIM_PeriodElapsedCallback+0x14>
 800365a:	4770      	bx	lr
	mecanum.speed.vx = (float) rc.ch4 / 660 * MAX_CHASSIS_VX_SPEED;
 800365c:	4b34      	ldr	r3, [pc, #208]	; (8003730 <HAL_TIM_PeriodElapsedCallback+0xe8>)
	mecanum.speed.vw = -(float) rc.ch1 / 660 * MAX_CHASSIS_VW_SPEED;
 800365e:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8003734 <HAL_TIM_PeriodElapsedCallback+0xec>
	mecanum.speed.vx = (float) rc.ch4 / 660 * MAX_CHASSIS_VX_SPEED;
 8003662:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8003666:	ee06 2a90 	vmov	s13, r2
	mecanum.speed.vy = -(float) rc.ch3 / 660 * MAX_CHASSIS_VX_SPEED;
 800366a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	mecanum.speed.vw = -(float) rc.ch1 / 660 * MAX_CHASSIS_VW_SPEED;
 800366e:	f9b3 3000 	ldrsh.w	r3, [r3]
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mecanum.speed.vy = -(float) rc.ch3 / 660 * MAX_CHASSIS_VX_SPEED;
 8003676:	ee07 2a10 	vmov	s14, r2
	mecanum.speed.vw = -(float) rc.ch1 / 660 * MAX_CHASSIS_VW_SPEED;
 800367a:	ee07 3a90 	vmov	s15, r3
	mecanum.speed.vx = (float) rc.ch4 / 660 * MAX_CHASSIS_VX_SPEED;
 800367e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	mecanum.speed.vy = -(float) rc.ch3 / 660 * MAX_CHASSIS_VX_SPEED;
 8003682:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	mecanum.speed.vw = -(float) rc.ch1 / 660 * MAX_CHASSIS_VW_SPEED;
 8003686:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	mecanum.speed.vx = (float) rc.ch4 / 660 * MAX_CHASSIS_VX_SPEED;
 800368a:	4f2b      	ldr	r7, [pc, #172]	; (8003738 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800368c:	4e2b      	ldr	r6, [pc, #172]	; (800373c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800368e:	4c2c      	ldr	r4, [pc, #176]	; (8003740 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8003690:	eeb1 5a04 	vmov.f32	s10, #20	; 0x40a00000  5.0
	mecanum.speed.vy = -(float) rc.ch3 / 660 * MAX_CHASSIS_VX_SPEED;
 8003694:	eef9 5a04 	vmov.f32	s11, #148	; 0xc0a00000 -5.0
	mecanum.speed.vx = (float) rc.ch4 / 660 * MAX_CHASSIS_VX_SPEED;
 8003698:	ee66 6a85 	vmul.f32	s13, s13, s10
	mecanum.speed.vy = -(float) rc.ch3 / 660 * MAX_CHASSIS_VX_SPEED;
 800369c:	ee27 7a25 	vmul.f32	s14, s14, s11
	mecanum.speed.vw = -(float) rc.ch1 / 660 * MAX_CHASSIS_VW_SPEED;
 80036a0:	ee67 7a86 	vmul.f32	s15, s15, s12
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80036a4:	b082      	sub	sp, #8
	mecanum_calculate(&mecanum);
 80036a6:	4638      	mov	r0, r7
	mecanum.speed.vx = (float) rc.ch4 / 660 * MAX_CHASSIS_VX_SPEED;
 80036a8:	edc7 6a05 	vstr	s13, [r7, #20]
	mecanum.speed.vy = -(float) rc.ch3 / 660 * MAX_CHASSIS_VX_SPEED;
 80036ac:	ed87 7a06 	vstr	s14, [r7, #24]
	mecanum.speed.vw = -(float) rc.ch1 / 660 * MAX_CHASSIS_VW_SPEED;
 80036b0:	edc7 7a07 	vstr	s15, [r7, #28]
	mecanum_calculate(&mecanum);
 80036b4:	f000 f84c 	bl	8003750 <mecanum_calculate>
 80036b8:	f107 0540 	add.w	r5, r7, #64	; 0x40
 80036bc:	46e8      	mov	r8, sp
 80036be:	3750      	adds	r7, #80	; 0x50
		int error = mecanum.wheel_rpm[i] - wheelFdb[i].rpm;
 80036c0:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80036c4:	ecb5 7a01 	vldmia	r5!, {s14}
 80036c8:	ee07 3a90 	vmov	s15, r3
 80036cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		u[i] = (int16_t) pidExecute(&(wheelPID[i]));
 80036d0:	4620      	mov	r0, r4
		int error = mecanum.wheel_rpm[i] - wheelFdb[i].rpm;
 80036d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036d6:	360c      	adds	r6, #12
 80036d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036dc:	342c      	adds	r4, #44	; 0x2c
		wheelPID[i].error = error;
 80036de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036e2:	ed44 7a01 	vstr	s15, [r4, #-4]
		u[i] = (int16_t) pidExecute(&(wheelPID[i]));
 80036e6:	f000 f9dd 	bl	8003aa4 <pidExecute>
 80036ea:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	for (int i = 0; i < 4; i++) {
 80036ee:	42af      	cmp	r7, r5
		u[i] = (int16_t) pidExecute(&(wheelPID[i]));
 80036f0:	ee10 3a10 	vmov	r3, s0
 80036f4:	f828 3b02 	strh.w	r3, [r8], #2
	for (int i = 0; i < 4; i++) {
 80036f8:	d1e2      	bne.n	80036c0 <HAL_TIM_PeriodElapsedCallback+0x78>
		if(cnt_tim>20){
 80036fa:	4c12      	ldr	r4, [pc, #72]	; (8003744 <HAL_TIM_PeriodElapsedCallback+0xfc>)
	driveWheel(u);
 80036fc:	4668      	mov	r0, sp
 80036fe:	f000 f911 	bl	8003924 <driveWheel>
	Gimbal_Task();
 8003702:	f7ff fec9 	bl	8003498 <Gimbal_Task>
		if(cnt_tim>20){
 8003706:	7823      	ldrb	r3, [r4, #0]
 8003708:	2b14      	cmp	r3, #20
 800370a:	d805      	bhi.n	8003718 <HAL_TIM_PeriodElapsedCallback+0xd0>
 800370c:	3301      	adds	r3, #1
 800370e:	b2db      	uxtb	r3, r3
		cnt_tim++;
 8003710:	7023      	strb	r3, [r4, #0]
}
 8003712:	b002      	add	sp, #8
 8003714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8003718:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800371c:	480a      	ldr	r0, [pc, #40]	; (8003748 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800371e:	f7fe f8db 	bl	80018d8 <HAL_GPIO_TogglePin>
 8003722:	2301      	movs	r3, #1
 8003724:	e7f4      	b.n	8003710 <HAL_TIM_PeriodElapsedCallback+0xc8>
 8003726:	bf00      	nop
 8003728:	20000090 	.word	0x20000090
 800372c:	200003b4 	.word	0x200003b4
 8003730:	200000f4 	.word	0x200000f4
 8003734:	bee8ba2e 	.word	0xbee8ba2e
 8003738:	2000028c 	.word	0x2000028c
 800373c:	20000120 	.word	0x20000120
 8003740:	200001d4 	.word	0x200001d4
 8003744:	200002f8 	.word	0x200002f8
 8003748:	40021400 	.word	0x40021400

0800374c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800374c:	e7fe      	b.n	800374c <Error_Handler>
 800374e:	bf00      	nop

08003750 <mecanum_calculate>:
  static float rotate_ratio_fl;
  static float rotate_ratio_bl;
  static float rotate_ratio_br;
  static float wheel_rpm_ratio;

  rotate_ratio_fr = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 8003750:	edd0 7a01 	vldr	s15, [r0, #4]
 8003754:	edd0 6a02 	vldr	s13, [r0, #8]
 8003758:	ed90 5a03 	vldr	s10, [r0, #12]
  rotate_ratio_bl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f + mec->param.rotate_x_offset - mec->param.rotate_y_offset) / RADIAN_COEF;
  rotate_ratio_br = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f + mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;

  wheel_rpm_ratio = 60.0f / (mec->param.wheel_perimeter * MOTOR_DECELE_RATIO);

  MEC_VAL_LIMIT(mec->speed.vx, -MAX_CHASSIS_VX_SPEED, MAX_CHASSIS_VX_SPEED); //mm/s
 800375c:	edd0 4a05 	vldr	s9, [r0, #20]
 8003760:	ed9f 6a67 	vldr	s12, [pc, #412]	; 8003900 <mecanum_calculate+0x1b0>
  rotate_ratio_fr = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 8003764:	ed90 7a04 	vldr	s14, [r0, #16]
  wheel_rpm_ratio = 60.0f / (mec->param.wheel_perimeter * MOTOR_DECELE_RATIO);
 8003768:	ed90 2a00 	vldr	s4, [r0]
 800376c:	eddf 1a65 	vldr	s3, [pc, #404]	; 8003904 <mecanum_calculate+0x1b4>
  rotate_ratio_fr = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 8003770:	ee76 6aa7 	vadd.f32	s13, s13, s15
{
 8003774:	b430      	push	{r4, r5}
  rotate_ratio_fr = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 8003776:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800377a:	eef0 7a45 	vmov.f32	s15, s10
 800377e:	eed6 7aa5 	vfnms.f32	s15, s13, s11
{
 8003782:	b084      	sub	sp, #16
 8003784:	4604      	mov	r4, r0
  rotate_ratio_bl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f + mec->param.rotate_x_offset - mec->param.rotate_y_offset) / RADIAN_COEF;
 8003786:	eea6 5aa5 	vfma.f32	s10, s13, s11
  MEC_VAL_LIMIT(mec->speed.vx, -MAX_CHASSIS_VX_SPEED, MAX_CHASSIS_VX_SPEED); //mm/s
 800378a:	eef4 4ac6 	vcmpe.f32	s9, s12
 800378e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  rotate_ratio_bl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f + mec->param.rotate_x_offset - mec->param.rotate_y_offset) / RADIAN_COEF;
 8003792:	ee35 3a47 	vsub.f32	s6, s10, s14
  rotate_ratio_fr = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 8003796:	ee77 2a87 	vadd.f32	s5, s15, s14
  rotate_ratio_fl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset - mec->param.rotate_y_offset) / RADIAN_COEF;
 800379a:	ee77 3ac7 	vsub.f32	s7, s15, s14
  rotate_ratio_br = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f + mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 800379e:	ee37 5a05 	vadd.f32	s10, s14, s10
  wheel_rpm_ratio = 60.0f / (mec->param.wheel_perimeter * MOTOR_DECELE_RATIO);
 80037a2:	ee81 4a82 	vdiv.f32	s8, s3, s4
  MEC_VAL_LIMIT(mec->speed.vx, -MAX_CHASSIS_VX_SPEED, MAX_CHASSIS_VX_SPEED); //mm/s
 80037a6:	f200 809e 	bhi.w	80038e6 <mecanum_calculate+0x196>
 80037aa:	ed80 6a05 	vstr	s12, [r0, #20]
 80037ae:	eef0 4a46 	vmov.f32	s9, s12
  MEC_VAL_LIMIT(mec->speed.vy, -MAX_CHASSIS_VY_SPEED, MAX_CHASSIS_VY_SPEED); //mm/s
 80037b2:	edd4 7a06 	vldr	s15, [r4, #24]
 80037b6:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8003900 <mecanum_calculate+0x1b0>
 80037ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c2:	f200 8084 	bhi.w	80038ce <mecanum_calculate+0x17e>
 80037c6:	ed84 7a06 	vstr	s14, [r4, #24]
 80037ca:	eef0 7a47 	vmov.f32	s15, s14
  MEC_VAL_LIMIT(mec->speed.vw, -MAX_CHASSIS_VW_SPEED, MAX_CHASSIS_VW_SPEED); //deg/s
 80037ce:	edd4 5a07 	vldr	s11, [r4, #28]
 80037d2:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003908 <mecanum_calculate+0x1b8>
 80037d6:	eef4 5ac7 	vcmpe.f32	s11, s14
 80037da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037de:	d866      	bhi.n	80038ae <mecanum_calculate+0x15e>
 80037e0:	eddf 5a4a 	vldr	s11, [pc, #296]	; 800390c <mecanum_calculate+0x1bc>
 80037e4:	ed84 7a07 	vstr	s14, [r4, #28]
 80037e8:	ee34 7aa7 	vadd.f32	s14, s9, s15

  float wheel_rpm[4];
  float max = 0;

  wheel_rpm[0] = (-mec->speed.vx - mec->speed.vy - mec->speed.vw * rotate_ratio_fr) * wheel_rpm_ratio;
  wheel_rpm[1] = (mec->speed.vx - mec->speed.vy - mec->speed.vw * rotate_ratio_fl) * wheel_rpm_ratio;
 80037ec:	ee74 6ae7 	vsub.f32	s13, s9, s15
 80037f0:	eeb0 6a47 	vmov.f32	s12, s14
 80037f4:	eea2 6aa5 	vfma.f32	s12, s5, s11
 80037f8:	eee3 6ae5 	vfms.f32	s13, s7, s11
  wheel_rpm[2] = (mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_bl) * wheel_rpm_ratio;
 80037fc:	eea3 7a65 	vfms.f32	s14, s6, s11
 8003800:	ee26 6a04 	vmul.f32	s12, s12, s8
  wheel_rpm[1] = (mec->speed.vx - mec->speed.vy - mec->speed.vw * rotate_ratio_fl) * wheel_rpm_ratio;
 8003804:	ee66 6a84 	vmul.f32	s13, s13, s8
  wheel_rpm[3] = (-mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_br) * wheel_rpm_ratio;
 8003808:	ee77 7ae4 	vsub.f32	s15, s15, s9

  //find max item
  for (uint8_t i = 0; i < 4; i++)
  {
    if (fabs(wheel_rpm[i]) > max)
 800380c:	eef0 4ac6 	vabs.f32	s9, s12
  wheel_rpm[3] = (-mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_br) * wheel_rpm_ratio;
 8003810:	eee5 7a65 	vfms.f32	s15, s10, s11
    if (fabs(wheel_rpm[i]) > max)
 8003814:	eef0 5ae6 	vabs.f32	s11, s13
 8003818:	eef4 5ae4 	vcmpe.f32	s11, s9
  wheel_rpm[2] = (mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_bl) * wheel_rpm_ratio;
 800381c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8003820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003824:	bfb4      	ite	lt
 8003826:	eeb0 5a64 	vmovlt.f32	s10, s9
 800382a:	eeb0 5a65 	vmovge.f32	s10, s11
    if (fabs(wheel_rpm[i]) > max)
 800382e:	eef0 5ac7 	vabs.f32	s11, s14
 8003832:	eef4 5ac5 	vcmpe.f32	s11, s10
  wheel_rpm[3] = (-mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_br) * wheel_rpm_ratio;
 8003836:	ee67 7a84 	vmul.f32	s15, s15, s8
 800383a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800383e:	bfb8      	it	lt
 8003840:	eef0 5a45 	vmovlt.f32	s11, s10
    if (fabs(wheel_rpm[i]) > max)
 8003844:	eeb0 5ae7 	vabs.f32	s10, s15
 8003848:	eeb4 5ae5 	vcmpe.f32	s10, s11
 800384c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      max = fabs(wheel_rpm[i]);
  }

  //equal proportion
  if (max > MAX_WHEEL_RPM)
 8003850:	eddf 4a2f 	vldr	s9, [pc, #188]	; 8003910 <mecanum_calculate+0x1c0>
  wheel_rpm[1] = (mec->speed.vx - mec->speed.vy - mec->speed.vw * rotate_ratio_fl) * wheel_rpm_ratio;
 8003854:	edcd 6a01 	vstr	s13, [sp, #4]
 8003858:	bfa8      	it	ge
 800385a:	eef0 5a45 	vmovge.f32	s11, s10
  if (max > MAX_WHEEL_RPM)
 800385e:	eef4 5ae4 	vcmpe.f32	s11, s9
 8003862:	eeb1 6a46 	vneg.f32	s12, s12
 8003866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  wheel_rpm[2] = (mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_bl) * wheel_rpm_ratio;
 800386a:	ed8d 7a02 	vstr	s14, [sp, #8]
  wheel_rpm[0] = (-mec->speed.vx - mec->speed.vy - mec->speed.vw * rotate_ratio_fr) * wheel_rpm_ratio;
 800386e:	ed8d 6a00 	vstr	s12, [sp]
  wheel_rpm[3] = (-mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_br) * wheel_rpm_ratio;
 8003872:	edcd 7a03 	vstr	s15, [sp, #12]
  if (max > MAX_WHEEL_RPM)
 8003876:	dd11      	ble.n	800389c <mecanum_calculate+0x14c>
  {
    float rate = MAX_WHEEL_RPM / max;
 8003878:	ee84 5aa5 	vdiv.f32	s10, s9, s11
    for (uint8_t i = 0; i < 4; i++)
      wheel_rpm[i] *= rate;
 800387c:	ee26 6a05 	vmul.f32	s12, s12, s10
 8003880:	ee66 6a85 	vmul.f32	s13, s13, s10
 8003884:	ee27 7a05 	vmul.f32	s14, s14, s10
 8003888:	ee67 7a85 	vmul.f32	s15, s15, s10
 800388c:	ed8d 6a00 	vstr	s12, [sp]
 8003890:	edcd 6a01 	vstr	s13, [sp, #4]
 8003894:	ed8d 7a02 	vstr	s14, [sp, #8]
 8003898:	edcd 7a03 	vstr	s15, [sp, #12]
  }
  memcpy(mec->wheel_rpm, wheel_rpm, 4 * sizeof(float));
 800389c:	466d      	mov	r5, sp
 800389e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038a0:	6420      	str	r0, [r4, #64]	; 0x40
 80038a2:	6461      	str	r1, [r4, #68]	; 0x44
 80038a4:	64a2      	str	r2, [r4, #72]	; 0x48
 80038a6:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 80038a8:	b004      	add	sp, #16
 80038aa:	bc30      	pop	{r4, r5}
 80038ac:	4770      	bx	lr
  MEC_VAL_LIMIT(mec->speed.vw, -MAX_CHASSIS_VW_SPEED, MAX_CHASSIS_VW_SPEED); //deg/s
 80038ae:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003914 <mecanum_calculate+0x1c4>
 80038b2:	eef4 5ac7 	vcmpe.f32	s11, s14
 80038b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ba:	bfb3      	iteet	lt
 80038bc:	ed9f 7a16 	vldrlt	s14, [pc, #88]	; 8003918 <mecanum_calculate+0x1c8>
 80038c0:	eddf 5a16 	vldrge	s11, [pc, #88]	; 800391c <mecanum_calculate+0x1cc>
 80038c4:	ed84 7a07 	vstrge	s14, [r4, #28]
 80038c8:	ee65 5a87 	vmullt.f32	s11, s11, s14
 80038cc:	e78c      	b.n	80037e8 <mecanum_calculate+0x98>
  MEC_VAL_LIMIT(mec->speed.vy, -MAX_CHASSIS_VY_SPEED, MAX_CHASSIS_VY_SPEED); //mm/s
 80038ce:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003920 <mecanum_calculate+0x1d0>
 80038d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038da:	bfa4      	itt	ge
 80038dc:	eef0 7a47 	vmovge.f32	s15, s14
 80038e0:	ed84 7a06 	vstrge	s14, [r4, #24]
 80038e4:	e773      	b.n	80037ce <mecanum_calculate+0x7e>
  MEC_VAL_LIMIT(mec->speed.vx, -MAX_CHASSIS_VX_SPEED, MAX_CHASSIS_VX_SPEED); //mm/s
 80038e6:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8003920 <mecanum_calculate+0x1d0>
 80038ea:	eef4 4ae7 	vcmpe.f32	s9, s15
 80038ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f2:	bfa4      	itt	ge
 80038f4:	eef0 4a67 	vmovge.f32	s9, s15
 80038f8:	edc0 7a05 	vstrge	s15, [r0, #20]
 80038fc:	e759      	b.n	80037b2 <mecanum_calculate+0x62>
 80038fe:	bf00      	nop
 8003900:	c54e4000 	.word	0xc54e4000
 8003904:	448e8000 	.word	0x448e8000
 8003908:	c3960000 	.word	0xc3960000
 800390c:	c0a78a0e 	.word	0xc0a78a0e
 8003910:	4604d000 	.word	0x4604d000
 8003914:	43960000 	.word	0x43960000
 8003918:	3c8ef783 	.word	0x3c8ef783
 800391c:	40a78a0e 	.word	0x40a78a0e
 8003920:	454e4000 	.word	0x454e4000

08003924 <driveWheel>:
 */
#include "motor.h"

const int CaseMotor_MaxSpeed = 30 * 256;

void driveWheel(int16_t *u) {
 8003924:	b530      	push	{r4, r5, lr}
	header.IDE = CAN_ID_STD;
	header.DLC = 8;
	//header.TransmitGlobalTime = DISABLE;

	for (int i = 0; i < 4; i++) {
		if (CaseMotor_MaxSpeed < u[i]) {
 8003926:	f9b0 3000 	ldrsh.w	r3, [r0]
void driveWheel(int16_t *u) {
 800392a:	b08b      	sub	sp, #44	; 0x2c
	uint8_t TxData[8] = { 0 };
 800392c:	2200      	movs	r2, #0
	header.StdId = 0x200;
 800392e:	f44f 7400 	mov.w	r4, #512	; 0x200
	header.DLC = 8;
 8003932:	2108      	movs	r1, #8
		if (CaseMotor_MaxSpeed < u[i]) {
 8003934:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
	header.RTR = CAN_RTR_DATA;
 8003938:	9207      	str	r2, [sp, #28]
	header.IDE = CAN_ID_STD;
 800393a:	9206      	str	r2, [sp, #24]
	header.StdId = 0x200;
 800393c:	9404      	str	r4, [sp, #16]
	header.DLC = 8;
 800393e:	9108      	str	r1, [sp, #32]
		if (CaseMotor_MaxSpeed < u[i]) {
 8003940:	dc08      	bgt.n	8003954 <driveWheel+0x30>
			u[i] = CaseMotor_MaxSpeed - 1;
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 8003942:	f513 5ff0 	cmn.w	r3, #7680	; 0x1e00
 8003946:	da67      	bge.n	8003a18 <driveWheel+0xf4>
			u[i] = -CaseMotor_MaxSpeed + 1;
 8003948:	f24e 2301 	movw	r3, #57857	; 0xe201
 800394c:	8003      	strh	r3, [r0, #0]
 800394e:	2201      	movs	r2, #1
 8003950:	21e2      	movs	r1, #226	; 0xe2
 8003952:	e004      	b.n	800395e <driveWheel+0x3a>
			u[i] = CaseMotor_MaxSpeed - 1;
 8003954:	f641 53ff 	movw	r3, #7679	; 0x1dff
 8003958:	8003      	strh	r3, [r0, #0]
 800395a:	22ff      	movs	r2, #255	; 0xff
 800395c:	211d      	movs	r1, #29
		if (CaseMotor_MaxSpeed < u[i]) {
 800395e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
		}
		TxData[i * 2] = u[i] >> 8;
 8003962:	f88d 1008 	strb.w	r1, [sp, #8]
		if (CaseMotor_MaxSpeed < u[i]) {
 8003966:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
		TxData[i * 2 + 1] = u[i] & 0xFF;
 800396a:	f88d 2009 	strb.w	r2, [sp, #9]
		if (CaseMotor_MaxSpeed < u[i]) {
 800396e:	dc08      	bgt.n	8003982 <driveWheel+0x5e>
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 8003970:	f513 5ff0 	cmn.w	r3, #7680	; 0x1e00
 8003974:	da4c      	bge.n	8003a10 <driveWheel+0xec>
			u[i] = -CaseMotor_MaxSpeed + 1;
 8003976:	f24e 2301 	movw	r3, #57857	; 0xe201
 800397a:	8043      	strh	r3, [r0, #2]
 800397c:	2201      	movs	r2, #1
 800397e:	21e2      	movs	r1, #226	; 0xe2
 8003980:	e004      	b.n	800398c <driveWheel+0x68>
			u[i] = CaseMotor_MaxSpeed - 1;
 8003982:	f641 53ff 	movw	r3, #7679	; 0x1dff
 8003986:	8043      	strh	r3, [r0, #2]
 8003988:	22ff      	movs	r2, #255	; 0xff
 800398a:	211d      	movs	r1, #29
		if (CaseMotor_MaxSpeed < u[i]) {
 800398c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
		TxData[i * 2] = u[i] >> 8;
 8003990:	f88d 100a 	strb.w	r1, [sp, #10]
		if (CaseMotor_MaxSpeed < u[i]) {
 8003994:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
		TxData[i * 2 + 1] = u[i] & 0xFF;
 8003998:	f88d 200b 	strb.w	r2, [sp, #11]
		if (CaseMotor_MaxSpeed < u[i]) {
 800399c:	dc08      	bgt.n	80039b0 <driveWheel+0x8c>
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 800399e:	f513 5ff0 	cmn.w	r3, #7680	; 0x1e00
 80039a2:	da31      	bge.n	8003a08 <driveWheel+0xe4>
			u[i] = -CaseMotor_MaxSpeed + 1;
 80039a4:	f24e 2301 	movw	r3, #57857	; 0xe201
 80039a8:	8083      	strh	r3, [r0, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	21e2      	movs	r1, #226	; 0xe2
 80039ae:	e004      	b.n	80039ba <driveWheel+0x96>
			u[i] = CaseMotor_MaxSpeed - 1;
 80039b0:	f641 53ff 	movw	r3, #7679	; 0x1dff
 80039b4:	8083      	strh	r3, [r0, #4]
 80039b6:	22ff      	movs	r2, #255	; 0xff
 80039b8:	211d      	movs	r1, #29
		if (CaseMotor_MaxSpeed < u[i]) {
 80039ba:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
		TxData[i * 2] = u[i] >> 8;
 80039be:	f88d 100c 	strb.w	r1, [sp, #12]
		if (CaseMotor_MaxSpeed < u[i]) {
 80039c2:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
		TxData[i * 2 + 1] = u[i] & 0xFF;
 80039c6:	f88d 200d 	strb.w	r2, [sp, #13]
		if (CaseMotor_MaxSpeed < u[i]) {
 80039ca:	dd10      	ble.n	80039ee <driveWheel+0xca>
			u[i] = CaseMotor_MaxSpeed - 1;
 80039cc:	f641 53ff 	movw	r3, #7679	; 0x1dff
 80039d0:	80c3      	strh	r3, [r0, #6]
 80039d2:	24ff      	movs	r4, #255	; 0xff
 80039d4:	251d      	movs	r5, #29
	}

	HAL_CAN_AddTxMessage(&hcan2, &header, TxData, &TxMailbox);
 80039d6:	aa02      	add	r2, sp, #8
 80039d8:	ab01      	add	r3, sp, #4
 80039da:	a904      	add	r1, sp, #16
 80039dc:	4810      	ldr	r0, [pc, #64]	; (8003a20 <driveWheel+0xfc>)
		TxData[i * 2] = u[i] >> 8;
 80039de:	f88d 500e 	strb.w	r5, [sp, #14]
		TxData[i * 2 + 1] = u[i] & 0xFF;
 80039e2:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_CAN_AddTxMessage(&hcan2, &header, TxData, &TxMailbox);
 80039e6:	f7fd fb89 	bl	80010fc <HAL_CAN_AddTxMessage>

}
 80039ea:	b00b      	add	sp, #44	; 0x2c
 80039ec:	bd30      	pop	{r4, r5, pc}
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 80039ee:	f513 5ff0 	cmn.w	r3, #7680	; 0x1e00
 80039f2:	da05      	bge.n	8003a00 <driveWheel+0xdc>
			u[i] = -CaseMotor_MaxSpeed + 1;
 80039f4:	f24e 2301 	movw	r3, #57857	; 0xe201
 80039f8:	80c3      	strh	r3, [r0, #6]
 80039fa:	2401      	movs	r4, #1
 80039fc:	25e2      	movs	r5, #226	; 0xe2
 80039fe:	e7ea      	b.n	80039d6 <driveWheel+0xb2>
 8003a00:	f3c3 2507 	ubfx	r5, r3, #8, #8
 8003a04:	b2dc      	uxtb	r4, r3
 8003a06:	e7e6      	b.n	80039d6 <driveWheel+0xb2>
 8003a08:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	e7d4      	b.n	80039ba <driveWheel+0x96>
 8003a10:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	e7b9      	b.n	800398c <driveWheel+0x68>
 8003a18:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	e79e      	b.n	800395e <driveWheel+0x3a>
 8003a20:	200000a4 	.word	0x200000a4

08003a24 <driveGimbalMotors>:

void driveGimbalMotors(int16_t *u) {
 8003a24:	b5f0      	push	{r4, r5, r6, r7, lr}
			u[i] = CaseMotor_MaxSpeed - 1;
		} else if (u[i] < -CaseMotor_MaxSpeed) {
			u[i] = -CaseMotor_MaxSpeed + 1;
		}
		}
		TxData[i * 2] = u[i] >> 8;
 8003a26:	f9b0 3000 	ldrsh.w	r3, [r0]
 8003a2a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
		if (CaseMotor_MaxSpeed < u[i]) {
 8003a2e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
void driveGimbalMotors(int16_t *u) {
 8003a32:	b08b      	sub	sp, #44	; 0x2c
	header.StdId = 0x1ff;
 8003a34:	f240 11ff 	movw	r1, #511	; 0x1ff
		TxData[i * 2 + 1] = u[i] & 0xFF;
 8003a38:	f88d 3009 	strb.w	r3, [sp, #9]
		TxData[i * 2] = u[i] >> 8;
 8003a3c:	121b      	asrs	r3, r3, #8
 8003a3e:	1215      	asrs	r5, r2, #8
 8003a40:	f88d 3008 	strb.w	r3, [sp, #8]
	header.IDE = CAN_ID_STD;
 8003a44:	2600      	movs	r6, #0
	header.DLC = 8;
 8003a46:	2308      	movs	r3, #8
	header.IDE = CAN_ID_STD;
 8003a48:	2700      	movs	r7, #0
		if (CaseMotor_MaxSpeed < u[i]) {
 8003a4a:	f5b4 5ff0 	cmp.w	r4, #7680	; 0x1e00
		TxData[i * 2 + 1] = u[i] & 0xFF;
 8003a4e:	f88d 200b 	strb.w	r2, [sp, #11]
		TxData[i * 2] = u[i] >> 8;
 8003a52:	f88d 500a 	strb.w	r5, [sp, #10]
	header.StdId = 0x1ff;
 8003a56:	9104      	str	r1, [sp, #16]
	header.IDE = CAN_ID_STD;
 8003a58:	e9cd 6706 	strd	r6, r7, [sp, #24]
	header.DLC = 8;
 8003a5c:	9308      	str	r3, [sp, #32]
		if (CaseMotor_MaxSpeed < u[i]) {
 8003a5e:	dd16      	ble.n	8003a8e <driveGimbalMotors+0x6a>
			u[i] = CaseMotor_MaxSpeed - 1;
 8003a60:	f641 54ff 	movw	r4, #7679	; 0x1dff
 8003a64:	8084      	strh	r4, [r0, #4]
		TxData[i * 2] = u[i] >> 8;
 8003a66:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
		TxData[i * 2 + 1] = u[i] & 0xFF;
 8003a6a:	f88d 300f 	strb.w	r3, [sp, #15]
		TxData[i * 2] = u[i] >> 8;
 8003a6e:	1219      	asrs	r1, r3, #8
 8003a70:	f88d 100e 	strb.w	r1, [sp, #14]
 8003a74:	1225      	asrs	r5, r4, #8
	}

	HAL_CAN_AddTxMessage(&hcan1, &header, TxData, &TxMailbox);
 8003a76:	ab01      	add	r3, sp, #4
 8003a78:	aa02      	add	r2, sp, #8
 8003a7a:	a904      	add	r1, sp, #16
 8003a7c:	4808      	ldr	r0, [pc, #32]	; (8003aa0 <driveGimbalMotors+0x7c>)
		TxData[i * 2 + 1] = u[i] & 0xFF;
 8003a7e:	f88d 400d 	strb.w	r4, [sp, #13]
		TxData[i * 2] = u[i] >> 8;
 8003a82:	f88d 500c 	strb.w	r5, [sp, #12]
	HAL_CAN_AddTxMessage(&hcan1, &header, TxData, &TxMailbox);
 8003a86:	f7fd fb39 	bl	80010fc <HAL_CAN_AddTxMessage>
}
 8003a8a:	b00b      	add	sp, #44	; 0x2c
 8003a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (u[i] < -CaseMotor_MaxSpeed) {
 8003a8e:	f514 5ff0 	cmn.w	r4, #7680	; 0x1e00
 8003a92:	dae8      	bge.n	8003a66 <driveGimbalMotors+0x42>
			u[i] = -CaseMotor_MaxSpeed + 1;
 8003a94:	f24e 2401 	movw	r4, #57857	; 0xe201
 8003a98:	8084      	strh	r4, [r0, #4]
 8003a9a:	b224      	sxth	r4, r4
 8003a9c:	e7e3      	b.n	8003a66 <driveGimbalMotors+0x42>
 8003a9e:	bf00      	nop
 8003aa0:	200000cc 	.word	0x200000cc

08003aa4 <pidExecute>:
 */
#include "pid.h"

float pidExecute(_pid_t *pid) {
	float u = 0;
	pid->integralOut += pid->i * pid->error * (pid->t/1000.0f);
 8003aa4:	ed90 6a0a 	vldr	s12, [r0, #40]	; 0x28
 8003aa8:	edd0 7a02 	vldr	s15, [r0, #8]
 8003aac:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8003b5c <pidExecute+0xb8>
 8003ab0:	ed90 7a07 	vldr	s14, [r0, #28]
 8003ab4:	edd0 4a00 	vldr	s9, [r0]
	if (pid->integralOutLimit < pid->integralOut) pid->integralOut = pid->integralOutLimit;
 8003ab8:	edd0 6a05 	vldr	s13, [r0, #20]
	pid->integralOut += pid->i * pid->error * (pid->t/1000.0f);
 8003abc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003ac0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003ac4:	eea4 7aa7 	vfma.f32	s14, s9, s15
	if (pid->integralOutLimit < pid->integralOut) pid->integralOut = pid->integralOutLimit;
 8003ac8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8003acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	pid->integralOut += pid->i * pid->error * (pid->t/1000.0f);
 8003ad0:	ed80 7a07 	vstr	s14, [r0, #28]
	if (pid->integralOutLimit < pid->integralOut) pid->integralOut = pid->integralOutLimit;
 8003ad4:	dc06      	bgt.n	8003ae4 <pidExecute+0x40>
	else if (pid->integralOut < -pid->integralOutLimit) pid->integralOut = -pid->integralOutLimit;
 8003ad6:	eef1 6a66 	vneg.f32	s13, s13
 8003ada:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8003ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae2:	d538      	bpl.n	8003b56 <pidExecute+0xb2>
 8003ae4:	edc0 6a07 	vstr	s13, [r0, #28]
	pid->differentialFilter = pid->differentialFilter * pid->differentialFilterRate + (pid->d * (pid->error - pid->lastError)*(1000.0f/pid->t)) * (1 - pid->differentialFilterRate);
 8003ae8:	ed9f 3a1d 	vldr	s6, [pc, #116]	; 8003b60 <pidExecute+0xbc>
 8003aec:	ed90 7a03 	vldr	s14, [r0, #12]
 8003af0:	edd0 5a08 	vldr	s11, [r0, #32]
 8003af4:	ed90 5a06 	vldr	s10, [r0, #24]
 8003af8:	edd0 3a09 	vldr	s7, [r0, #36]	; 0x24
	u = pid->p * pid->error + pid->integralOut + pid->differentialFilter;
 8003afc:	ed90 4a01 	vldr	s8, [r0, #4]
	if (pid->outLimit < u) u = pid->outLimit;
 8003b00:	ed90 0a04 	vldr	s0, [r0, #16]
	pid->differentialFilter = pid->differentialFilter * pid->differentialFilterRate + (pid->d * (pid->error - pid->lastError)*(1000.0f/pid->t)) * (1 - pid->differentialFilterRate);
 8003b04:	eec3 7a24 	vdiv.f32	s15, s6, s9
 8003b08:	ee76 5a65 	vsub.f32	s11, s12, s11
 8003b0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b14:	ee37 7a45 	vsub.f32	s14, s14, s10
 8003b18:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003b1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b20:	eee3 7a85 	vfma.f32	s15, s7, s10
	u = pid->p * pid->error + pid->integralOut + pid->differentialFilter;
 8003b24:	eeb0 7a67 	vmov.f32	s14, s15
 8003b28:	eea6 7a04 	vfma.f32	s14, s12, s8
	pid->differentialFilter = pid->differentialFilter * pid->differentialFilterRate + (pid->d * (pid->error - pid->lastError)*(1000.0f/pid->t)) * (1 - pid->differentialFilterRate);
 8003b2c:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
	u = pid->p * pid->error + pid->integralOut + pid->differentialFilter;
 8003b30:	ee77 6a26 	vadd.f32	s13, s14, s13
	if (pid->outLimit < u) u = pid->outLimit;
 8003b34:	eeb4 0ae6 	vcmpe.f32	s0, s13
 8003b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b3c:	d408      	bmi.n	8003b50 <pidExecute+0xac>
	else if (u < -pid->outLimit)u = -pid->outLimit;
 8003b3e:	eeb1 0a40 	vneg.f32	s0, s0
 8003b42:	eeb4 0ae6 	vcmpe.f32	s0, s13
 8003b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b4a:	bfb8      	it	lt
 8003b4c:	eeb0 0a66 	vmovlt.f32	s0, s13
	pid->lastError = pid->error;
 8003b50:	ed80 6a08 	vstr	s12, [r0, #32]
	return u;
}
 8003b54:	4770      	bx	lr
 8003b56:	eef0 6a47 	vmov.f32	s13, s14
 8003b5a:	e7c5      	b.n	8003ae8 <pidExecute+0x44>
 8003b5c:	3a83126f 	.word	0x3a83126f
 8003b60:	447a0000 	.word	0x447a0000

08003b64 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8003b64:	b538      	push	{r3, r4, r5, lr}

  hspi5.Instance = SPI5;
 8003b66:	4b0f      	ldr	r3, [pc, #60]	; (8003ba4 <MX_SPI5_Init+0x40>)
 8003b68:	4a0f      	ldr	r2, [pc, #60]	; (8003ba8 <MX_SPI5_Init+0x44>)
 8003b6a:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003b6c:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8003b70:	f44f 7500 	mov.w	r5, #512	; 0x200
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003b74:	2430      	movs	r4, #48	; 0x30
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi5.Init.CRCPolynomial = 10;
 8003b76:	210a      	movs	r1, #10
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003b78:	605a      	str	r2, [r3, #4]
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003b7a:	4618      	mov	r0, r3
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003b7c:	2200      	movs	r2, #0
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003b7e:	e9c3 5406 	strd	r5, r4, [r3, #24]
  hspi5.Init.CRCPolynomial = 10;
 8003b82:	62d9      	str	r1, [r3, #44]	; 0x2c
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b84:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b88:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b8c:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b90:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003b92:	f7fe f953 	bl	8001e3c <HAL_SPI_Init>
 8003b96:	b900      	cbnz	r0, 8003b9a <MX_SPI5_Init+0x36>
  {
    Error_Handler();
  }

}
 8003b98:	bd38      	pop	{r3, r4, r5, pc}
 8003b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8003b9e:	f7ff bdd5 	b.w	800374c <Error_Handler>
 8003ba2:	bf00      	nop
 8003ba4:	2000035c 	.word	0x2000035c
 8003ba8:	40015000 	.word	0x40015000

08003bac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003bac:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI5)
 8003bae:	6801      	ldr	r1, [r0, #0]
 8003bb0:	4a18      	ldr	r2, [pc, #96]	; (8003c14 <HAL_SPI_MspInit+0x68>)
{
 8003bb2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb4:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI5)
 8003bb6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8003bbc:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003bc0:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI5)
 8003bc2:	d001      	beq.n	8003bc8 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8003bc4:	b008      	add	sp, #32
 8003bc6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003bc8:	f502 4268 	add.w	r2, r2, #59392	; 0xe800
 8003bcc:	9301      	str	r3, [sp, #4]
 8003bce:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003bd0:	4811      	ldr	r0, [pc, #68]	; (8003c18 <HAL_SPI_MspInit+0x6c>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003bd2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003bd6:	6451      	str	r1, [r2, #68]	; 0x44
 8003bd8:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003bda:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
 8003bde:	9101      	str	r1, [sp, #4]
 8003be0:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003be2:	9302      	str	r3, [sp, #8]
 8003be4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003be6:	f043 0320 	orr.w	r3, r3, #32
 8003bea:	6313      	str	r3, [r2, #48]	; 0x30
 8003bec:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bf4:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003bf6:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003bf8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 8003bfa:	f44f 7560 	mov.w	r5, #896	; 0x380
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bfe:	2402      	movs	r4, #2
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c00:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c02:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003c06:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003c0a:	f7fd fd23 	bl	8001654 <HAL_GPIO_Init>
}
 8003c0e:	b008      	add	sp, #32
 8003c10:	bd70      	pop	{r4, r5, r6, pc}
 8003c12:	bf00      	nop
 8003c14:	40015000 	.word	0x40015000
 8003c18:	40021400 	.word	0x40021400

08003c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c1c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c1e:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <HAL_MspInit+0x34>)
 8003c20:	2100      	movs	r1, #0
 8003c22:	9100      	str	r1, [sp, #0]
 8003c24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c2a:	645a      	str	r2, [r3, #68]	; 0x44
 8003c2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c2e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003c32:	9200      	str	r2, [sp, #0]
 8003c34:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c36:	9101      	str	r1, [sp, #4]
 8003c38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c3a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c3e:	641a      	str	r2, [r3, #64]	; 0x40
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c46:	9301      	str	r3, [sp, #4]
 8003c48:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c4a:	b002      	add	sp, #8
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	40023800 	.word	0x40023800

08003c54 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop

08003c58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c58:	e7fe      	b.n	8003c58 <HardFault_Handler>
 8003c5a:	bf00      	nop

08003c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c5c:	e7fe      	b.n	8003c5c <MemManage_Handler>
 8003c5e:	bf00      	nop

08003c60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c60:	e7fe      	b.n	8003c60 <BusFault_Handler>
 8003c62:	bf00      	nop

08003c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c64:	e7fe      	b.n	8003c64 <UsageFault_Handler>
 8003c66:	bf00      	nop

08003c68 <SVC_Handler>:
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop

08003c6c <DebugMon_Handler>:
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop

08003c70 <PendSV_Handler>:
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop

08003c74 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c74:	f7fd b8e8 	b.w	8000e48 <HAL_IncTick>

08003c78 <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003c78:	4801      	ldr	r0, [pc, #4]	; (8003c80 <CAN1_RX0_IRQHandler+0x8>)
 8003c7a:	f7fd bb41 	b.w	8001300 <HAL_CAN_IRQHandler>
 8003c7e:	bf00      	nop
 8003c80:	200000cc 	.word	0x200000cc

08003c84 <CAN1_RX1_IRQHandler>:
 8003c84:	4801      	ldr	r0, [pc, #4]	; (8003c8c <CAN1_RX1_IRQHandler+0x8>)
 8003c86:	f7fd bb3b 	b.w	8001300 <HAL_CAN_IRQHandler>
 8003c8a:	bf00      	nop
 8003c8c:	200000cc 	.word	0x200000cc

08003c90 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c90:	4801      	ldr	r0, [pc, #4]	; (8003c98 <USART1_IRQHandler+0x8>)
 8003c92:	f7fe bed7 	b.w	8002a44 <HAL_UART_IRQHandler>
 8003c96:	bf00      	nop
 8003c98:	200004b4 	.word	0x200004b4

08003c9c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003c9c:	4801      	ldr	r0, [pc, #4]	; (8003ca4 <TIM6_DAC_IRQHandler+0x8>)
 8003c9e:	f7fe bb61 	b.w	8002364 <HAL_TIM_IRQHandler>
 8003ca2:	bf00      	nop
 8003ca4:	200003b4 	.word	0x200003b4

08003ca8 <CAN2_RX0_IRQHandler>:
void CAN2_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003ca8:	4801      	ldr	r0, [pc, #4]	; (8003cb0 <CAN2_RX0_IRQHandler+0x8>)
 8003caa:	f7fd bb29 	b.w	8001300 <HAL_CAN_IRQHandler>
 8003cae:	bf00      	nop
 8003cb0:	200000a4 	.word	0x200000a4

08003cb4 <CAN2_RX1_IRQHandler>:
 8003cb4:	4801      	ldr	r0, [pc, #4]	; (8003cbc <CAN2_RX1_IRQHandler+0x8>)
 8003cb6:	f7fd bb23 	b.w	8001300 <HAL_CAN_IRQHandler>
 8003cba:	bf00      	nop
 8003cbc:	200000a4 	.word	0x200000a4

08003cc0 <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003cc0:	4801      	ldr	r0, [pc, #4]	; (8003cc8 <USART6_IRQHandler+0x8>)
 8003cc2:	f7fe bebf 	b.w	8002a44 <HAL_UART_IRQHandler>
 8003cc6:	bf00      	nop
 8003cc8:	20000534 	.word	0x20000534

08003ccc <UART8_IRQHandler>:
void UART8_IRQHandler(void)
{
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8003ccc:	4801      	ldr	r0, [pc, #4]	; (8003cd4 <UART8_IRQHandler+0x8>)
 8003cce:	f7fe beb9 	b.w	8002a44 <HAL_UART_IRQHandler>
 8003cd2:	bf00      	nop
 8003cd4:	200004f4 	.word	0x200004f4

08003cd8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8003cd8:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cda:	1e16      	subs	r6, r2, #0
 8003cdc:	dd07      	ble.n	8003cee <_read+0x16>
 8003cde:	460c      	mov	r4, r1
 8003ce0:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8003ce2:	f3af 8000 	nop.w
 8003ce6:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cea:	42a5      	cmp	r5, r4
 8003cec:	d1f9      	bne.n	8003ce2 <_read+0xa>
	}

return len;
}
 8003cee:	4630      	mov	r0, r6
 8003cf0:	bd70      	pop	{r4, r5, r6, pc}
 8003cf2:	bf00      	nop

08003cf4 <_write>:

int _write(int file, char *ptr, int len)
{
 8003cf4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cf6:	1e16      	subs	r6, r2, #0
 8003cf8:	dd07      	ble.n	8003d0a <_write+0x16>
 8003cfa:	460c      	mov	r4, r1
 8003cfc:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8003cfe:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003d02:	f7ff f925 	bl	8002f50 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d06:	42ac      	cmp	r4, r5
 8003d08:	d1f9      	bne.n	8003cfe <_write+0xa>
	}
	return len;
}
 8003d0a:	4630      	mov	r0, r6
 8003d0c:	bd70      	pop	{r4, r5, r6, pc}
 8003d0e:	bf00      	nop

08003d10 <_close>:


int _close(int file)
{
	return -1;
}
 8003d10:	f04f 30ff 	mov.w	r0, #4294967295
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop

08003d18 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003d18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d1c:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003d1e:	2000      	movs	r0, #0
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop

08003d24 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003d24:	2001      	movs	r0, #1
 8003d26:	4770      	bx	lr

08003d28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003d28:	2000      	movs	r0, #0
 8003d2a:	4770      	bx	lr

08003d2c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003d2c:	4a0c      	ldr	r2, [pc, #48]	; (8003d60 <_sbrk+0x34>)
{
 8003d2e:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8003d30:	6813      	ldr	r3, [r2, #0]
 8003d32:	b133      	cbz	r3, 8003d42 <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8003d34:	4418      	add	r0, r3
 8003d36:	4669      	mov	r1, sp
 8003d38:	4288      	cmp	r0, r1
 8003d3a:	d808      	bhi.n	8003d4e <_sbrk+0x22>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8003d3c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8003d42:	4b08      	ldr	r3, [pc, #32]	; (8003d64 <_sbrk+0x38>)
 8003d44:	6013      	str	r3, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8003d46:	4418      	add	r0, r3
 8003d48:	4669      	mov	r1, sp
 8003d4a:	4288      	cmp	r0, r1
 8003d4c:	d9f6      	bls.n	8003d3c <_sbrk+0x10>
		errno = ENOMEM;
 8003d4e:	f000 fb4b 	bl	80043e8 <__errno>
 8003d52:	230c      	movs	r3, #12
 8003d54:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003d56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	bd08      	pop	{r3, pc}
 8003d5e:	bf00      	nop
 8003d60:	20000094 	.word	0x20000094
 8003d64:	20000578 	.word	0x20000578

08003d68 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d68:	4910      	ldr	r1, [pc, #64]	; (8003dac <SystemInit+0x44>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003d6a:	4b11      	ldr	r3, [pc, #68]	; (8003db0 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d6c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003d70:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 8003d74:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d76:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8003d7a:	681a      	ldr	r2, [r3, #0]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003d7c:	4c0d      	ldr	r4, [pc, #52]	; (8003db4 <SystemInit+0x4c>)
  RCC->CFGR = 0x00000000;
 8003d7e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003d80:	f042 0201 	orr.w	r2, r2, #1
 8003d84:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003d86:	6098      	str	r0, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003d8e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003d92:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8003d94:	605c      	str	r4, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003d96:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d98:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003d9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003da0:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x00000000;
 8003da2:	60d8      	str	r0, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003da4:	608c      	str	r4, [r1, #8]
#endif
}
 8003da6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	e000ed00 	.word	0xe000ed00
 8003db0:	40023800 	.word	0x40023800
 8003db4:	24003010 	.word	0x24003010

08003db8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003db8:	b570      	push	{r4, r5, r6, lr}
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
 8003dba:	4c51      	ldr	r4, [pc, #324]	; (8003f00 <MX_TIM1_Init+0x148>)
 8003dbc:	4b51      	ldr	r3, [pc, #324]	; (8003f04 <MX_TIM1_Init+0x14c>)
 8003dbe:	6023      	str	r3, [r4, #0]
{
 8003dc0:	b09a      	sub	sp, #104	; 0x68
  htim1.Init.Prescaler = 167;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dc2:	2300      	movs	r3, #0
  htim1.Init.Prescaler = 167;
 8003dc4:	21a7      	movs	r1, #167	; 0xa7
  htim1.Init.Period = 20000-1;
 8003dc6:	f644 621f 	movw	r2, #19999	; 0x4e1f
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003dca:	4620      	mov	r0, r4
  htim1.Init.Prescaler = 167;
 8003dcc:	6061      	str	r1, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dce:	e9c4 3202 	strd	r3, r2, [r4, #8]
  htim1.Init.RepetitionCounter = 0;
 8003dd2:	e9c4 3304 	strd	r3, r3, [r4, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dd6:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003dd8:	f7fe f904 	bl	8001fe4 <HAL_TIM_PWM_Init>
 8003ddc:	2800      	cmp	r0, #0
 8003dde:	d148      	bne.n	8003e72 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003de0:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003de2:	a904      	add	r1, sp, #16
 8003de4:	4846      	ldr	r0, [pc, #280]	; (8003f00 <MX_TIM1_Init+0x148>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003de6:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003dea:	f7fe fb65 	bl	80024b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003dee:	2800      	cmp	r0, #0
 8003df0:	d13c      	bne.n	8003e6c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 1000;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003df2:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003df4:	2060      	movs	r0, #96	; 0x60
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003df6:	461a      	mov	r2, r3
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003df8:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003dfc:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003e00:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e02:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 1000;
 8003e04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e08:	a90b      	add	r1, sp, #44	; 0x2c
 8003e0a:	483d      	ldr	r0, [pc, #244]	; (8003f00 <MX_TIM1_Init+0x148>)
  sConfigOC.Pulse = 1000;
 8003e0c:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e0e:	f7fe f997 	bl	8002140 <HAL_TIM_PWM_ConfigChannel>
 8003e12:	bb40      	cbnz	r0, 8003e66 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003e14:	a90b      	add	r1, sp, #44	; 0x2c
 8003e16:	220c      	movs	r2, #12
 8003e18:	4839      	ldr	r0, [pc, #228]	; (8003f00 <MX_TIM1_Init+0x148>)
 8003e1a:	f7fe f991 	bl	8002140 <HAL_TIM_PWM_ConfigChannel>
 8003e1e:	b9f8      	cbnz	r0, 8003e60 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003e20:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003e22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003e26:	a912      	add	r1, sp, #72	; 0x48
 8003e28:	4835      	ldr	r0, [pc, #212]	; (8003f00 <MX_TIM1_Init+0x148>)
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003e2a:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003e2c:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.DeadTime = 0;
 8003e30:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003e34:	9319      	str	r3, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003e36:	9217      	str	r2, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003e38:	f7fe fb60 	bl	80024fc <HAL_TIMEx_ConfigBreakDeadTime>
 8003e3c:	b108      	cbz	r0, 8003e42 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8003e3e:	f7ff fc85 	bl	800374c <Error_Handler>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 8003e42:	6823      	ldr	r3, [r4, #0]
 8003e44:	4a2f      	ldr	r2, [pc, #188]	; (8003f04 <MX_TIM1_Init+0x14c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e46:	2400      	movs	r4, #0
  if(timHandle->Instance==TIM1)
 8003e48:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e4a:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8003e4e:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8003e52:	940a      	str	r4, [sp, #40]	; 0x28
  if(timHandle->Instance==TIM1)
 8003e54:	d027      	beq.n	8003ea6 <MX_TIM1_Init+0xee>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM12)
 8003e56:	4a2c      	ldr	r2, [pc, #176]	; (8003f08 <MX_TIM1_Init+0x150>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d00d      	beq.n	8003e78 <MX_TIM1_Init+0xc0>
}
 8003e5c:	b01a      	add	sp, #104	; 0x68
 8003e5e:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8003e60:	f7ff fc74 	bl	800374c <Error_Handler>
 8003e64:	e7dc      	b.n	8003e20 <MX_TIM1_Init+0x68>
    Error_Handler();
 8003e66:	f7ff fc71 	bl	800374c <Error_Handler>
 8003e6a:	e7d3      	b.n	8003e14 <MX_TIM1_Init+0x5c>
    Error_Handler();
 8003e6c:	f7ff fc6e 	bl	800374c <Error_Handler>
 8003e70:	e7bf      	b.n	8003df2 <MX_TIM1_Init+0x3a>
    Error_Handler();
 8003e72:	f7ff fc6b 	bl	800374c <Error_Handler>
 8003e76:	e7b3      	b.n	8003de0 <MX_TIM1_Init+0x28>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
  
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e78:	4b24      	ldr	r3, [pc, #144]	; (8003f0c <MX_TIM1_Init+0x154>)
 8003e7a:	9403      	str	r4, [sp, #12]
 8003e7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = BEEP_CTRL_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 8003e7e:	4824      	ldr	r0, [pc, #144]	; (8003f10 <MX_TIM1_Init+0x158>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e84:	631a      	str	r2, [r3, #48]	; 0x30
 8003e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e8e:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003e90:	2309      	movs	r3, #9
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 8003e92:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = BEEP_CTRL_Pin;
 8003e94:	2440      	movs	r4, #64	; 0x40
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e96:	9d03      	ldr	r5, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003e98:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e9a:	e9cd 4206 	strd	r4, r2, [sp, #24]
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 8003e9e:	f7fd fbd9 	bl	8001654 <HAL_GPIO_Init>
}
 8003ea2:	b01a      	add	sp, #104	; 0x68
 8003ea4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ea6:	4b19      	ldr	r3, [pc, #100]	; (8003f0c <MX_TIM1_Init+0x154>)
 8003ea8:	9401      	str	r4, [sp, #4]
 8003eaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 8003eac:	4819      	ldr	r0, [pc, #100]	; (8003f14 <MX_TIM1_Init+0x15c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eae:	f042 0201 	orr.w	r2, r2, #1
 8003eb2:	631a      	str	r2, [r3, #48]	; 0x30
 8003eb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eb6:	f002 0201 	and.w	r2, r2, #1
 8003eba:	9201      	str	r2, [sp, #4]
 8003ebc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ebe:	9402      	str	r4, [sp, #8]
 8003ec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ec2:	f042 0210 	orr.w	r2, r2, #16
 8003ec6:	631a      	str	r2, [r3, #48]	; 0x30
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	f003 0310 	and.w	r3, r3, #16
 8003ece:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed0:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = FRICTION_L_Pin;
 8003ed2:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003ed6:	2501      	movs	r5, #1
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 8003ed8:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003eda:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003edc:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ede:	e9cd 3606 	strd	r3, r6, [sp, #24]
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 8003ee2:	f7fd fbb7 	bl	8001654 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = FRICTION_R_Pin;
 8003ee6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    HAL_GPIO_Init(FRICTION_R_GPIO_Port, &GPIO_InitStruct);
 8003eea:	a906      	add	r1, sp, #24
 8003eec:	480a      	ldr	r0, [pc, #40]	; (8003f18 <MX_TIM1_Init+0x160>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eee:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003ef0:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ef2:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Pin = FRICTION_R_Pin;
 8003ef6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(FRICTION_R_GPIO_Port, &GPIO_InitStruct);
 8003ef8:	f7fd fbac 	bl	8001654 <HAL_GPIO_Init>
}
 8003efc:	b01a      	add	sp, #104	; 0x68
 8003efe:	bd70      	pop	{r4, r5, r6, pc}
 8003f00:	200003f4 	.word	0x200003f4
 8003f04:	40010000 	.word	0x40010000
 8003f08:	40001800 	.word	0x40001800
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	40021c00 	.word	0x40021c00
 8003f14:	40020000 	.word	0x40020000
 8003f18:	40021000 	.word	0x40021000

08003f1c <MX_TIM6_Init>:
{
 8003f1c:	b510      	push	{r4, lr}
  htim6.Instance = TIM6;
 8003f1e:	4b0f      	ldr	r3, [pc, #60]	; (8003f5c <MX_TIM6_Init+0x40>)
 8003f20:	4a0f      	ldr	r2, [pc, #60]	; (8003f60 <MX_TIM6_Init+0x44>)
 8003f22:	601a      	str	r2, [r3, #0]
{
 8003f24:	b082      	sub	sp, #8
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f26:	2200      	movs	r2, #0
  htim6.Init.Prescaler = 10-1;
 8003f28:	2409      	movs	r4, #9
  htim6.Init.Period = 16800;
 8003f2a:	f244 11a0 	movw	r1, #16800	; 0x41a0
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003f2e:	4618      	mov	r0, r3
  htim6.Init.Prescaler = 10-1;
 8003f30:	605c      	str	r4, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f32:	e9c3 2102 	strd	r2, r1, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003f38:	f7fd ffc0 	bl	8001ebc <HAL_TIM_Base_Init>
 8003f3c:	b958      	cbnz	r0, 8003f56 <MX_TIM6_Init+0x3a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f3e:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003f40:	4669      	mov	r1, sp
 8003f42:	4806      	ldr	r0, [pc, #24]	; (8003f5c <MX_TIM6_Init+0x40>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f44:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003f48:	f7fe fab6 	bl	80024b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003f4c:	b108      	cbz	r0, 8003f52 <MX_TIM6_Init+0x36>
    Error_Handler();
 8003f4e:	f7ff fbfd 	bl	800374c <Error_Handler>
}
 8003f52:	b002      	add	sp, #8
 8003f54:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003f56:	f7ff fbf9 	bl	800374c <Error_Handler>
 8003f5a:	e7f0      	b.n	8003f3e <MX_TIM6_Init+0x22>
 8003f5c:	200003b4 	.word	0x200003b4
 8003f60:	40001000 	.word	0x40001000

08003f64 <MX_TIM12_Init>:
{
 8003f64:	b570      	push	{r4, r5, r6, lr}
  htim12.Instance = TIM12;
 8003f66:	4c3a      	ldr	r4, [pc, #232]	; (8004050 <MX_TIM12_Init+0xec>)
 8003f68:	4b3a      	ldr	r3, [pc, #232]	; (8004054 <MX_TIM12_Init+0xf0>)
 8003f6a:	6023      	str	r3, [r4, #0]
{
 8003f6c:	b090      	sub	sp, #64	; 0x40
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f6e:	2300      	movs	r3, #0
  htim12.Init.Prescaler = 83;
 8003f70:	2153      	movs	r1, #83	; 0x53
  htim12.Init.Period = 20000-1;
 8003f72:	f644 621f 	movw	r2, #19999	; 0x4e1f
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8003f76:	4620      	mov	r0, r4
  htim12.Init.Prescaler = 83;
 8003f78:	6061      	str	r1, [r4, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f7a:	e9c4 3202 	strd	r3, r2, [r4, #8]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f7e:	6123      	str	r3, [r4, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f80:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8003f82:	f7fe f82f 	bl	8001fe4 <HAL_TIM_PWM_Init>
 8003f86:	b9e0      	cbnz	r0, 8003fc2 <MX_TIM12_Init+0x5e>
  sConfigOC.Pulse = 0;
 8003f88:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f8a:	2560      	movs	r5, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	a909      	add	r1, sp, #36	; 0x24
 8003f90:	482f      	ldr	r0, [pc, #188]	; (8004050 <MX_TIM12_Init+0xec>)
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f92:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f94:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f98:	9509      	str	r5, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f9a:	f7fe f8d1 	bl	8002140 <HAL_TIM_PWM_ConfigChannel>
 8003f9e:	b108      	cbz	r0, 8003fa4 <MX_TIM12_Init+0x40>
    Error_Handler();
 8003fa0:	f7ff fbd4 	bl	800374c <Error_Handler>
  if(timHandle->Instance==TIM1)
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	4a2c      	ldr	r2, [pc, #176]	; (8004058 <MX_TIM12_Init+0xf4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa8:	2400      	movs	r4, #0
  if(timHandle->Instance==TIM1)
 8003faa:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fac:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003fb0:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8003fb4:	9408      	str	r4, [sp, #32]
  if(timHandle->Instance==TIM1)
 8003fb6:	d01e      	beq.n	8003ff6 <MX_TIM12_Init+0x92>
  else if(timHandle->Instance==TIM12)
 8003fb8:	4a26      	ldr	r2, [pc, #152]	; (8004054 <MX_TIM12_Init+0xf0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d004      	beq.n	8003fc8 <MX_TIM12_Init+0x64>
}
 8003fbe:	b010      	add	sp, #64	; 0x40
 8003fc0:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8003fc2:	f7ff fbc3 	bl	800374c <Error_Handler>
 8003fc6:	e7df      	b.n	8003f88 <MX_TIM12_Init+0x24>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fc8:	4b24      	ldr	r3, [pc, #144]	; (800405c <MX_TIM12_Init+0xf8>)
 8003fca:	9403      	str	r4, [sp, #12]
 8003fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 8003fce:	4824      	ldr	r0, [pc, #144]	; (8004060 <MX_TIM12_Init+0xfc>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fd0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fd4:	631a      	str	r2, [r3, #48]	; 0x30
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fdc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fde:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003fe0:	2309      	movs	r3, #9
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 8003fe2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = BEEP_CTRL_Pin;
 8003fe4:	2440      	movs	r4, #64	; 0x40
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fe6:	9d03      	ldr	r5, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003fe8:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fea:	e9cd 4204 	strd	r4, r2, [sp, #16]
    HAL_GPIO_Init(BEEP_CTRL_GPIO_Port, &GPIO_InitStruct);
 8003fee:	f7fd fb31 	bl	8001654 <HAL_GPIO_Init>
}
 8003ff2:	b010      	add	sp, #64	; 0x40
 8003ff4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ff6:	4b19      	ldr	r3, [pc, #100]	; (800405c <MX_TIM12_Init+0xf8>)
 8003ff8:	9401      	str	r4, [sp, #4]
 8003ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 8003ffc:	4819      	ldr	r0, [pc, #100]	; (8004064 <MX_TIM12_Init+0x100>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ffe:	f042 0201 	orr.w	r2, r2, #1
 8004002:	631a      	str	r2, [r3, #48]	; 0x30
 8004004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004006:	f002 0201 	and.w	r2, r2, #1
 800400a:	9201      	str	r2, [sp, #4]
 800400c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800400e:	9402      	str	r4, [sp, #8]
 8004010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004012:	f042 0210 	orr.w	r2, r2, #16
 8004016:	631a      	str	r2, [r3, #48]	; 0x30
 8004018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401a:	f003 0310 	and.w	r3, r3, #16
 800401e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004020:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = FRICTION_L_Pin;
 8004022:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004026:	2501      	movs	r5, #1
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 8004028:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800402a:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800402c:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800402e:	e9cd 3604 	strd	r3, r6, [sp, #16]
    HAL_GPIO_Init(FRICTION_L_GPIO_Port, &GPIO_InitStruct);
 8004032:	f7fd fb0f 	bl	8001654 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = FRICTION_R_Pin;
 8004036:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    HAL_GPIO_Init(FRICTION_R_GPIO_Port, &GPIO_InitStruct);
 800403a:	a904      	add	r1, sp, #16
 800403c:	480a      	ldr	r0, [pc, #40]	; (8004068 <MX_TIM12_Init+0x104>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800403e:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004040:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004042:	e9cd 4406 	strd	r4, r4, [sp, #24]
    GPIO_InitStruct.Pin = FRICTION_R_Pin;
 8004046:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(FRICTION_R_GPIO_Port, &GPIO_InitStruct);
 8004048:	f7fd fb04 	bl	8001654 <HAL_GPIO_Init>
}
 800404c:	b010      	add	sp, #64	; 0x40
 800404e:	bd70      	pop	{r4, r5, r6, pc}
 8004050:	20000434 	.word	0x20000434
 8004054:	40001800 	.word	0x40001800
 8004058:	40010000 	.word	0x40010000
 800405c:	40023800 	.word	0x40023800
 8004060:	40021c00 	.word	0x40021c00
 8004064:	40020000 	.word	0x40020000
 8004068:	40021000 	.word	0x40021000

0800406c <HAL_TIM_PWM_MspInit>:
  if(tim_pwmHandle->Instance==TIM1)
 800406c:	6803      	ldr	r3, [r0, #0]
 800406e:	4a12      	ldr	r2, [pc, #72]	; (80040b8 <HAL_TIM_PWM_MspInit+0x4c>)
 8004070:	4293      	cmp	r3, r2
{
 8004072:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM1)
 8004074:	d012      	beq.n	800409c <HAL_TIM_PWM_MspInit+0x30>
  else if(tim_pwmHandle->Instance==TIM12)
 8004076:	4a11      	ldr	r2, [pc, #68]	; (80040bc <HAL_TIM_PWM_MspInit+0x50>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d001      	beq.n	8004080 <HAL_TIM_PWM_MspInit+0x14>
}
 800407c:	b002      	add	sp, #8
 800407e:	4770      	bx	lr
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004080:	4b0f      	ldr	r3, [pc, #60]	; (80040c0 <HAL_TIM_PWM_MspInit+0x54>)
 8004082:	2200      	movs	r2, #0
 8004084:	9201      	str	r2, [sp, #4]
 8004086:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004088:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800408c:	641a      	str	r2, [r3, #64]	; 0x40
 800408e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004094:	9301      	str	r3, [sp, #4]
 8004096:	9b01      	ldr	r3, [sp, #4]
}
 8004098:	b002      	add	sp, #8
 800409a:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 800409c:	4b08      	ldr	r3, [pc, #32]	; (80040c0 <HAL_TIM_PWM_MspInit+0x54>)
 800409e:	2200      	movs	r2, #0
 80040a0:	9200      	str	r2, [sp, #0]
 80040a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040a4:	f042 0201 	orr.w	r2, r2, #1
 80040a8:	645a      	str	r2, [r3, #68]	; 0x44
 80040aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	9b00      	ldr	r3, [sp, #0]
}
 80040b4:	b002      	add	sp, #8
 80040b6:	4770      	bx	lr
 80040b8:	40010000 	.word	0x40010000
 80040bc:	40001800 	.word	0x40001800
 80040c0:	40023800 	.word	0x40023800

080040c4 <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM6)
 80040c4:	6802      	ldr	r2, [r0, #0]
 80040c6:	4b0e      	ldr	r3, [pc, #56]	; (8004100 <HAL_TIM_Base_MspInit+0x3c>)
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d000      	beq.n	80040ce <HAL_TIM_Base_MspInit+0xa>
 80040cc:	4770      	bx	lr
{
 80040ce:	b500      	push	{lr}
 80040d0:	b083      	sub	sp, #12
    __HAL_RCC_TIM6_CLK_ENABLE();
 80040d2:	2200      	movs	r2, #0
 80040d4:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 80040d8:	9201      	str	r2, [sp, #4]
 80040da:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80040dc:	f041 0110 	orr.w	r1, r1, #16
 80040e0:	6419      	str	r1, [r3, #64]	; 0x40
 80040e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e4:	f003 0310 	and.w	r3, r3, #16
 80040e8:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80040ea:	2101      	movs	r1, #1
 80040ec:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 80040ee:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80040f0:	f7fd fa40 	bl	8001574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80040f4:	2036      	movs	r0, #54	; 0x36
}
 80040f6:	b003      	add	sp, #12
 80040f8:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80040fc:	f7fd ba70 	b.w	80015e0 <HAL_NVIC_EnableIRQ>
 8004100:	40001000 	.word	0x40001000

08004104 <MX_UART7_Init>:

/* UART7 init function */
void MX_UART7_Init(void)
{

  huart7.Instance = UART7;
 8004104:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <MX_UART7_Init+0x30>)
 8004106:	4a0c      	ldr	r2, [pc, #48]	; (8004138 <MX_UART7_Init+0x34>)
{
 8004108:	b510      	push	{r4, lr}
  huart7.Init.BaudRate = 115200;
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
  huart7.Init.StopBits = UART_STOPBITS_1;
  huart7.Init.Parity = UART_PARITY_NONE;
  huart7.Init.Mode = UART_MODE_TX_RX;
 800410a:	210c      	movs	r1, #12
  huart7.Instance = UART7;
 800410c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800410e:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8004112:	2200      	movs	r2, #0
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8004114:	4618      	mov	r0, r3
  huart7.Init.BaudRate = 115200;
 8004116:	605c      	str	r4, [r3, #4]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8004118:	6159      	str	r1, [r3, #20]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800411a:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart7.Init.Parity = UART_PARITY_NONE;
 800411e:	611a      	str	r2, [r3, #16]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8004120:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8004124:	f7fe fa18 	bl	8002558 <HAL_UART_Init>
 8004128:	b900      	cbnz	r0, 800412c <MX_UART7_Init+0x28>
  {
    Error_Handler();
  }

}
 800412a:	bd10      	pop	{r4, pc}
 800412c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8004130:	f7ff bb0c 	b.w	800374c <Error_Handler>
 8004134:	20000474 	.word	0x20000474
 8004138:	40007800 	.word	0x40007800

0800413c <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{

  huart8.Instance = UART8;
 800413c:	4b0b      	ldr	r3, [pc, #44]	; (800416c <MX_UART8_Init+0x30>)
 800413e:	4a0c      	ldr	r2, [pc, #48]	; (8004170 <MX_UART8_Init+0x34>)
{
 8004140:	b510      	push	{r4, lr}
  huart8.Init.BaudRate = 115200;
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
  huart8.Init.StopBits = UART_STOPBITS_1;
  huart8.Init.Parity = UART_PARITY_NONE;
  huart8.Init.Mode = UART_MODE_TX_RX;
 8004142:	210c      	movs	r1, #12
  huart8.Instance = UART8;
 8004144:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8004146:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800414a:	2200      	movs	r2, #0
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800414c:	4618      	mov	r0, r3
  huart8.Init.BaudRate = 115200;
 800414e:	605c      	str	r4, [r3, #4]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8004150:	6159      	str	r1, [r3, #20]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8004152:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart8.Init.Parity = UART_PARITY_NONE;
 8004156:	611a      	str	r2, [r3, #16]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8004158:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800415c:	f7fe f9fc 	bl	8002558 <HAL_UART_Init>
 8004160:	b900      	cbnz	r0, 8004164 <MX_UART8_Init+0x28>
  {
    Error_Handler();
  }

}
 8004162:	bd10      	pop	{r4, pc}
 8004164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8004168:	f7ff baf0 	b.w	800374c <Error_Handler>
 800416c:	200004f4 	.word	0x200004f4
 8004170:	40007c00 	.word	0x40007c00

08004174 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8004174:	4b0b      	ldr	r3, [pc, #44]	; (80041a4 <MX_USART1_UART_Init+0x30>)
 8004176:	4a0c      	ldr	r2, [pc, #48]	; (80041a8 <MX_USART1_UART_Init+0x34>)
{
 8004178:	b510      	push	{r4, lr}
  huart1.Init.BaudRate = 100000;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800417a:	210c      	movs	r1, #12
  huart1.Init.BaudRate = 100000;
 800417c:	4c0b      	ldr	r4, [pc, #44]	; (80041ac <MX_USART1_UART_Init+0x38>)
  huart1.Instance = USART1;
 800417e:	601a      	str	r2, [r3, #0]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004180:	4618      	mov	r0, r3
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004182:	2200      	movs	r2, #0
  huart1.Init.BaudRate = 100000;
 8004184:	605c      	str	r4, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004186:	6159      	str	r1, [r3, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004188:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 800418c:	611a      	str	r2, [r3, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800418e:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004192:	f7fe f9e1 	bl	8002558 <HAL_UART_Init>
 8004196:	b900      	cbnz	r0, 800419a <MX_USART1_UART_Init+0x26>
  {
    Error_Handler();
  }

}
 8004198:	bd10      	pop	{r4, pc}
 800419a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800419e:	f7ff bad5 	b.w	800374c <Error_Handler>
 80041a2:	bf00      	nop
 80041a4:	200004b4 	.word	0x200004b4
 80041a8:	40011000 	.word	0x40011000
 80041ac:	000186a0 	.word	0x000186a0

080041b0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{

  huart6.Instance = USART6;
 80041b0:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <MX_USART6_UART_Init+0x30>)
 80041b2:	4a0c      	ldr	r2, [pc, #48]	; (80041e4 <MX_USART6_UART_Init+0x34>)
{
 80041b4:	b510      	push	{r4, lr}
  huart6.Init.BaudRate = 115200;
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
 80041b6:	210c      	movs	r1, #12
  huart6.Instance = USART6;
 80041b8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80041ba:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80041be:	2200      	movs	r2, #0
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80041c0:	4618      	mov	r0, r3
  huart6.Init.BaudRate = 115200;
 80041c2:	605c      	str	r4, [r3, #4]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80041c4:	6159      	str	r1, [r3, #20]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80041c6:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart6.Init.Parity = UART_PARITY_NONE;
 80041ca:	611a      	str	r2, [r3, #16]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80041cc:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80041d0:	f7fe f9c2 	bl	8002558 <HAL_UART_Init>
 80041d4:	b900      	cbnz	r0, 80041d8 <MX_USART6_UART_Init+0x28>
  {
    Error_Handler();
  }

}
 80041d6:	bd10      	pop	{r4, pc}
 80041d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80041dc:	f7ff bab6 	b.w	800374c <Error_Handler>
 80041e0:	20000534 	.word	0x20000534
 80041e4:	40011400 	.word	0x40011400

080041e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80041e8:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==UART7)
 80041ea:	6803      	ldr	r3, [r0, #0]
 80041ec:	4a61      	ldr	r2, [pc, #388]	; (8004374 <HAL_UART_MspInit+0x18c>)
{
 80041ee:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041f0:	2400      	movs	r4, #0
  if(uartHandle->Instance==UART7)
 80041f2:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041f4:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80041f8:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80041fc:	940d      	str	r4, [sp, #52]	; 0x34
  if(uartHandle->Instance==UART7)
 80041fe:	d039      	beq.n	8004274 <HAL_UART_MspInit+0x8c>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(uartHandle->Instance==UART8)
 8004200:	4a5d      	ldr	r2, [pc, #372]	; (8004378 <HAL_UART_MspInit+0x190>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d05c      	beq.n	80042c0 <HAL_UART_MspInit+0xd8>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 8004206:	4a5d      	ldr	r2, [pc, #372]	; (800437c <HAL_UART_MspInit+0x194>)
 8004208:	4293      	cmp	r3, r2
 800420a:	f000 8085 	beq.w	8004318 <HAL_UART_MspInit+0x130>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART6)
 800420e:	4a5c      	ldr	r2, [pc, #368]	; (8004380 <HAL_UART_MspInit+0x198>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d001      	beq.n	8004218 <HAL_UART_MspInit+0x30>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004214:	b00e      	add	sp, #56	; 0x38
 8004216:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART6_CLK_ENABLE();
 8004218:	4b5a      	ldr	r3, [pc, #360]	; (8004384 <HAL_UART_MspInit+0x19c>)
 800421a:	9407      	str	r4, [sp, #28]
 800421c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800421e:	485a      	ldr	r0, [pc, #360]	; (8004388 <HAL_UART_MspInit+0x1a0>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8004220:	f042 0220 	orr.w	r2, r2, #32
 8004224:	645a      	str	r2, [r3, #68]	; 0x44
 8004226:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004228:	f002 0220 	and.w	r2, r2, #32
 800422c:	9207      	str	r2, [sp, #28]
 800422e:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004230:	9408      	str	r4, [sp, #32]
 8004232:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004234:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004238:	631a      	str	r2, [r3, #48]	; 0x30
 800423a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004240:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8004242:	f44f 4284 	mov.w	r2, #16896	; 0x4200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004246:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004248:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 800424a:	9209      	str	r2, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800424c:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800424e:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004250:	2308      	movs	r3, #8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004252:	2501      	movs	r5, #1
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004254:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004256:	e9cd 520b 	strd	r5, r2, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800425a:	9e08      	ldr	r6, [sp, #32]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800425c:	f7fd f9fa 	bl	8001654 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004260:	4622      	mov	r2, r4
 8004262:	4621      	mov	r1, r4
 8004264:	2047      	movs	r0, #71	; 0x47
 8004266:	f7fd f985 	bl	8001574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800426a:	2047      	movs	r0, #71	; 0x47
 800426c:	f7fd f9b8 	bl	80015e0 <HAL_NVIC_EnableIRQ>
}
 8004270:	b00e      	add	sp, #56	; 0x38
 8004272:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_UART7_CLK_ENABLE();
 8004274:	4b43      	ldr	r3, [pc, #268]	; (8004384 <HAL_UART_MspInit+0x19c>)
 8004276:	9401      	str	r4, [sp, #4]
 8004278:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800427a:	4844      	ldr	r0, [pc, #272]	; (800438c <HAL_UART_MspInit+0x1a4>)
    __HAL_RCC_UART7_CLK_ENABLE();
 800427c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004280:	641a      	str	r2, [r3, #64]	; 0x40
 8004282:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004284:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004288:	9201      	str	r2, [sp, #4]
 800428a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800428c:	9402      	str	r4, [sp, #8]
 800428e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004290:	f042 0210 	orr.w	r2, r2, #16
 8004294:	631a      	str	r2, [r3, #48]	; 0x30
 8004296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004298:	f003 0310 	and.w	r3, r3, #16
 800429c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 800429e:	f44f 73c0 	mov.w	r3, #384	; 0x180
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042a2:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 80042a4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80042a6:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80042a8:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042aa:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042ac:	2401      	movs	r4, #1
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80042ae:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042b0:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80042b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80042b8:	f7fd f9cc 	bl	8001654 <HAL_GPIO_Init>
}
 80042bc:	b00e      	add	sp, #56	; 0x38
 80042be:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_UART8_CLK_ENABLE();
 80042c0:	4b30      	ldr	r3, [pc, #192]	; (8004384 <HAL_UART_MspInit+0x19c>)
 80042c2:	9403      	str	r4, [sp, #12]
 80042c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80042c6:	4831      	ldr	r0, [pc, #196]	; (800438c <HAL_UART_MspInit+0x1a4>)
    __HAL_RCC_UART8_CLK_ENABLE();
 80042c8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80042cc:	641a      	str	r2, [r3, #64]	; 0x40
 80042ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042d0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80042d4:	9203      	str	r2, [sp, #12]
 80042d6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80042d8:	9404      	str	r4, [sp, #16]
 80042da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042dc:	f042 0210 	orr.w	r2, r2, #16
 80042e0:	631a      	str	r2, [r3, #48]	; 0x30
 80042e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e4:	f003 0310 	and.w	r3, r3, #16
 80042e8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80042ea:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80042ec:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042ee:	2201      	movs	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80042f0:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042f2:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042f4:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80042f6:	2308      	movs	r3, #8
 80042f8:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042fa:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80042fe:	9e04      	ldr	r6, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004300:	f7fd f9a8 	bl	8001654 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8004304:	4622      	mov	r2, r4
 8004306:	4621      	mov	r1, r4
 8004308:	2053      	movs	r0, #83	; 0x53
 800430a:	f7fd f933 	bl	8001574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800430e:	2053      	movs	r0, #83	; 0x53
 8004310:	f7fd f966 	bl	80015e0 <HAL_NVIC_EnableIRQ>
}
 8004314:	b00e      	add	sp, #56	; 0x38
 8004316:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8004318:	4b1a      	ldr	r3, [pc, #104]	; (8004384 <HAL_UART_MspInit+0x19c>)
 800431a:	9405      	str	r4, [sp, #20]
 800431c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800431e:	481c      	ldr	r0, [pc, #112]	; (8004390 <HAL_UART_MspInit+0x1a8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004320:	f042 0210 	orr.w	r2, r2, #16
 8004324:	645a      	str	r2, [r3, #68]	; 0x44
 8004326:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004328:	f002 0210 	and.w	r2, r2, #16
 800432c:	9205      	str	r2, [sp, #20]
 800432e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004330:	9406      	str	r4, [sp, #24]
 8004332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004334:	f042 0202 	orr.w	r2, r2, #2
 8004338:	631a      	str	r2, [r3, #48]	; 0x30
 800433a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004342:	22c0      	movs	r2, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004344:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004346:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004348:	9209      	str	r2, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800434a:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800434c:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800434e:	2307      	movs	r3, #7
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004350:	2501      	movs	r5, #1
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004352:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004354:	e9cd 520b 	strd	r5, r2, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004358:	9e06      	ldr	r6, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800435a:	f7fd f97b 	bl	8001654 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800435e:	4622      	mov	r2, r4
 8004360:	4621      	mov	r1, r4
 8004362:	2025      	movs	r0, #37	; 0x25
 8004364:	f7fd f906 	bl	8001574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004368:	2025      	movs	r0, #37	; 0x25
 800436a:	f7fd f939 	bl	80015e0 <HAL_NVIC_EnableIRQ>
}
 800436e:	b00e      	add	sp, #56	; 0x38
 8004370:	bd70      	pop	{r4, r5, r6, pc}
 8004372:	bf00      	nop
 8004374:	40007800 	.word	0x40007800
 8004378:	40007c00 	.word	0x40007c00
 800437c:	40011000 	.word	0x40011000
 8004380:	40011400 	.word	0x40011400
 8004384:	40023800 	.word	0x40023800
 8004388:	40021800 	.word	0x40021800
 800438c:	40021000 	.word	0x40021000
 8004390:	40020400 	.word	0x40020400

08004394 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004394:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004398:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800439a:	e003      	b.n	80043a4 <LoopCopyDataInit>

0800439c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800439c:	4b0c      	ldr	r3, [pc, #48]	; (80043d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800439e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80043a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80043a2:	3104      	adds	r1, #4

080043a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80043a4:	480b      	ldr	r0, [pc, #44]	; (80043d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80043a6:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80043a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80043aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80043ac:	d3f6      	bcc.n	800439c <CopyDataInit>
  ldr  r2, =_sbss
 80043ae:	4a0b      	ldr	r2, [pc, #44]	; (80043dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80043b0:	e002      	b.n	80043b8 <LoopFillZerobss>

080043b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80043b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80043b4:	f842 3b04 	str.w	r3, [r2], #4

080043b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80043b8:	4b09      	ldr	r3, [pc, #36]	; (80043e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80043ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80043bc:	d3f9      	bcc.n	80043b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80043be:	f7ff fcd3 	bl	8003d68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043c2:	f000 f817 	bl	80043f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043c6:	f7fe ff45 	bl	8003254 <main>
  bx  lr    
 80043ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80043cc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80043d0:	08005558 	.word	0x08005558
  ldr  r0, =_sdata
 80043d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80043d8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80043dc:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80043e0:	20000578 	.word	0x20000578

080043e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043e4:	e7fe      	b.n	80043e4 <ADC_IRQHandler>
	...

080043e8 <__errno>:
 80043e8:	4b01      	ldr	r3, [pc, #4]	; (80043f0 <__errno+0x8>)
 80043ea:	6818      	ldr	r0, [r3, #0]
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	2000000c 	.word	0x2000000c

080043f4 <__libc_init_array>:
 80043f4:	b570      	push	{r4, r5, r6, lr}
 80043f6:	4e0d      	ldr	r6, [pc, #52]	; (800442c <__libc_init_array+0x38>)
 80043f8:	4c0d      	ldr	r4, [pc, #52]	; (8004430 <__libc_init_array+0x3c>)
 80043fa:	1ba4      	subs	r4, r4, r6
 80043fc:	10a4      	asrs	r4, r4, #2
 80043fe:	2500      	movs	r5, #0
 8004400:	42a5      	cmp	r5, r4
 8004402:	d109      	bne.n	8004418 <__libc_init_array+0x24>
 8004404:	4e0b      	ldr	r6, [pc, #44]	; (8004434 <__libc_init_array+0x40>)
 8004406:	4c0c      	ldr	r4, [pc, #48]	; (8004438 <__libc_init_array+0x44>)
 8004408:	f001 f826 	bl	8005458 <_init>
 800440c:	1ba4      	subs	r4, r4, r6
 800440e:	10a4      	asrs	r4, r4, #2
 8004410:	2500      	movs	r5, #0
 8004412:	42a5      	cmp	r5, r4
 8004414:	d105      	bne.n	8004422 <__libc_init_array+0x2e>
 8004416:	bd70      	pop	{r4, r5, r6, pc}
 8004418:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800441c:	4798      	blx	r3
 800441e:	3501      	adds	r5, #1
 8004420:	e7ee      	b.n	8004400 <__libc_init_array+0xc>
 8004422:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004426:	4798      	blx	r3
 8004428:	3501      	adds	r5, #1
 800442a:	e7f2      	b.n	8004412 <__libc_init_array+0x1e>
 800442c:	08005550 	.word	0x08005550
 8004430:	08005550 	.word	0x08005550
 8004434:	08005550 	.word	0x08005550
 8004438:	08005554 	.word	0x08005554

0800443c <memset>:
 800443c:	4402      	add	r2, r0
 800443e:	4603      	mov	r3, r0
 8004440:	4293      	cmp	r3, r2
 8004442:	d100      	bne.n	8004446 <memset+0xa>
 8004444:	4770      	bx	lr
 8004446:	f803 1b01 	strb.w	r1, [r3], #1
 800444a:	e7f9      	b.n	8004440 <memset+0x4>

0800444c <iprintf>:
 800444c:	b40f      	push	{r0, r1, r2, r3}
 800444e:	4b0a      	ldr	r3, [pc, #40]	; (8004478 <iprintf+0x2c>)
 8004450:	b513      	push	{r0, r1, r4, lr}
 8004452:	681c      	ldr	r4, [r3, #0]
 8004454:	b124      	cbz	r4, 8004460 <iprintf+0x14>
 8004456:	69a3      	ldr	r3, [r4, #24]
 8004458:	b913      	cbnz	r3, 8004460 <iprintf+0x14>
 800445a:	4620      	mov	r0, r4
 800445c:	f000 fad8 	bl	8004a10 <__sinit>
 8004460:	ab05      	add	r3, sp, #20
 8004462:	9a04      	ldr	r2, [sp, #16]
 8004464:	68a1      	ldr	r1, [r4, #8]
 8004466:	9301      	str	r3, [sp, #4]
 8004468:	4620      	mov	r0, r4
 800446a:	f000 fc99 	bl	8004da0 <_vfiprintf_r>
 800446e:	b002      	add	sp, #8
 8004470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004474:	b004      	add	sp, #16
 8004476:	4770      	bx	lr
 8004478:	2000000c 	.word	0x2000000c

0800447c <_puts_r>:
 800447c:	b570      	push	{r4, r5, r6, lr}
 800447e:	460e      	mov	r6, r1
 8004480:	4605      	mov	r5, r0
 8004482:	b118      	cbz	r0, 800448c <_puts_r+0x10>
 8004484:	6983      	ldr	r3, [r0, #24]
 8004486:	b90b      	cbnz	r3, 800448c <_puts_r+0x10>
 8004488:	f000 fac2 	bl	8004a10 <__sinit>
 800448c:	69ab      	ldr	r3, [r5, #24]
 800448e:	68ac      	ldr	r4, [r5, #8]
 8004490:	b913      	cbnz	r3, 8004498 <_puts_r+0x1c>
 8004492:	4628      	mov	r0, r5
 8004494:	f000 fabc 	bl	8004a10 <__sinit>
 8004498:	4b23      	ldr	r3, [pc, #140]	; (8004528 <_puts_r+0xac>)
 800449a:	429c      	cmp	r4, r3
 800449c:	d117      	bne.n	80044ce <_puts_r+0x52>
 800449e:	686c      	ldr	r4, [r5, #4]
 80044a0:	89a3      	ldrh	r3, [r4, #12]
 80044a2:	071b      	lsls	r3, r3, #28
 80044a4:	d51d      	bpl.n	80044e2 <_puts_r+0x66>
 80044a6:	6923      	ldr	r3, [r4, #16]
 80044a8:	b1db      	cbz	r3, 80044e2 <_puts_r+0x66>
 80044aa:	3e01      	subs	r6, #1
 80044ac:	68a3      	ldr	r3, [r4, #8]
 80044ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80044b2:	3b01      	subs	r3, #1
 80044b4:	60a3      	str	r3, [r4, #8]
 80044b6:	b9e9      	cbnz	r1, 80044f4 <_puts_r+0x78>
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	da2e      	bge.n	800451a <_puts_r+0x9e>
 80044bc:	4622      	mov	r2, r4
 80044be:	210a      	movs	r1, #10
 80044c0:	4628      	mov	r0, r5
 80044c2:	f000 f8f5 	bl	80046b0 <__swbuf_r>
 80044c6:	3001      	adds	r0, #1
 80044c8:	d011      	beq.n	80044ee <_puts_r+0x72>
 80044ca:	200a      	movs	r0, #10
 80044cc:	e011      	b.n	80044f2 <_puts_r+0x76>
 80044ce:	4b17      	ldr	r3, [pc, #92]	; (800452c <_puts_r+0xb0>)
 80044d0:	429c      	cmp	r4, r3
 80044d2:	d101      	bne.n	80044d8 <_puts_r+0x5c>
 80044d4:	68ac      	ldr	r4, [r5, #8]
 80044d6:	e7e3      	b.n	80044a0 <_puts_r+0x24>
 80044d8:	4b15      	ldr	r3, [pc, #84]	; (8004530 <_puts_r+0xb4>)
 80044da:	429c      	cmp	r4, r3
 80044dc:	bf08      	it	eq
 80044de:	68ec      	ldreq	r4, [r5, #12]
 80044e0:	e7de      	b.n	80044a0 <_puts_r+0x24>
 80044e2:	4621      	mov	r1, r4
 80044e4:	4628      	mov	r0, r5
 80044e6:	f000 f935 	bl	8004754 <__swsetup_r>
 80044ea:	2800      	cmp	r0, #0
 80044ec:	d0dd      	beq.n	80044aa <_puts_r+0x2e>
 80044ee:	f04f 30ff 	mov.w	r0, #4294967295
 80044f2:	bd70      	pop	{r4, r5, r6, pc}
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	da04      	bge.n	8004502 <_puts_r+0x86>
 80044f8:	69a2      	ldr	r2, [r4, #24]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	dc06      	bgt.n	800450c <_puts_r+0x90>
 80044fe:	290a      	cmp	r1, #10
 8004500:	d004      	beq.n	800450c <_puts_r+0x90>
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	6022      	str	r2, [r4, #0]
 8004508:	7019      	strb	r1, [r3, #0]
 800450a:	e7cf      	b.n	80044ac <_puts_r+0x30>
 800450c:	4622      	mov	r2, r4
 800450e:	4628      	mov	r0, r5
 8004510:	f000 f8ce 	bl	80046b0 <__swbuf_r>
 8004514:	3001      	adds	r0, #1
 8004516:	d1c9      	bne.n	80044ac <_puts_r+0x30>
 8004518:	e7e9      	b.n	80044ee <_puts_r+0x72>
 800451a:	6823      	ldr	r3, [r4, #0]
 800451c:	200a      	movs	r0, #10
 800451e:	1c5a      	adds	r2, r3, #1
 8004520:	6022      	str	r2, [r4, #0]
 8004522:	7018      	strb	r0, [r3, #0]
 8004524:	e7e5      	b.n	80044f2 <_puts_r+0x76>
 8004526:	bf00      	nop
 8004528:	080054d4 	.word	0x080054d4
 800452c:	080054f4 	.word	0x080054f4
 8004530:	080054b4 	.word	0x080054b4

08004534 <puts>:
 8004534:	4b02      	ldr	r3, [pc, #8]	; (8004540 <puts+0xc>)
 8004536:	4601      	mov	r1, r0
 8004538:	6818      	ldr	r0, [r3, #0]
 800453a:	f7ff bf9f 	b.w	800447c <_puts_r>
 800453e:	bf00      	nop
 8004540:	2000000c 	.word	0x2000000c

08004544 <setbuf>:
 8004544:	2900      	cmp	r1, #0
 8004546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800454a:	bf0c      	ite	eq
 800454c:	2202      	moveq	r2, #2
 800454e:	2200      	movne	r2, #0
 8004550:	f000 b800 	b.w	8004554 <setvbuf>

08004554 <setvbuf>:
 8004554:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004558:	461d      	mov	r5, r3
 800455a:	4b51      	ldr	r3, [pc, #324]	; (80046a0 <setvbuf+0x14c>)
 800455c:	681e      	ldr	r6, [r3, #0]
 800455e:	4604      	mov	r4, r0
 8004560:	460f      	mov	r7, r1
 8004562:	4690      	mov	r8, r2
 8004564:	b126      	cbz	r6, 8004570 <setvbuf+0x1c>
 8004566:	69b3      	ldr	r3, [r6, #24]
 8004568:	b913      	cbnz	r3, 8004570 <setvbuf+0x1c>
 800456a:	4630      	mov	r0, r6
 800456c:	f000 fa50 	bl	8004a10 <__sinit>
 8004570:	4b4c      	ldr	r3, [pc, #304]	; (80046a4 <setvbuf+0x150>)
 8004572:	429c      	cmp	r4, r3
 8004574:	d152      	bne.n	800461c <setvbuf+0xc8>
 8004576:	6874      	ldr	r4, [r6, #4]
 8004578:	f1b8 0f02 	cmp.w	r8, #2
 800457c:	d006      	beq.n	800458c <setvbuf+0x38>
 800457e:	f1b8 0f01 	cmp.w	r8, #1
 8004582:	f200 8089 	bhi.w	8004698 <setvbuf+0x144>
 8004586:	2d00      	cmp	r5, #0
 8004588:	f2c0 8086 	blt.w	8004698 <setvbuf+0x144>
 800458c:	4621      	mov	r1, r4
 800458e:	4630      	mov	r0, r6
 8004590:	f000 f9d4 	bl	800493c <_fflush_r>
 8004594:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004596:	b141      	cbz	r1, 80045aa <setvbuf+0x56>
 8004598:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800459c:	4299      	cmp	r1, r3
 800459e:	d002      	beq.n	80045a6 <setvbuf+0x52>
 80045a0:	4630      	mov	r0, r6
 80045a2:	f000 fb2b 	bl	8004bfc <_free_r>
 80045a6:	2300      	movs	r3, #0
 80045a8:	6363      	str	r3, [r4, #52]	; 0x34
 80045aa:	2300      	movs	r3, #0
 80045ac:	61a3      	str	r3, [r4, #24]
 80045ae:	6063      	str	r3, [r4, #4]
 80045b0:	89a3      	ldrh	r3, [r4, #12]
 80045b2:	061b      	lsls	r3, r3, #24
 80045b4:	d503      	bpl.n	80045be <setvbuf+0x6a>
 80045b6:	6921      	ldr	r1, [r4, #16]
 80045b8:	4630      	mov	r0, r6
 80045ba:	f000 fb1f 	bl	8004bfc <_free_r>
 80045be:	89a3      	ldrh	r3, [r4, #12]
 80045c0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80045c4:	f023 0303 	bic.w	r3, r3, #3
 80045c8:	f1b8 0f02 	cmp.w	r8, #2
 80045cc:	81a3      	strh	r3, [r4, #12]
 80045ce:	d05d      	beq.n	800468c <setvbuf+0x138>
 80045d0:	ab01      	add	r3, sp, #4
 80045d2:	466a      	mov	r2, sp
 80045d4:	4621      	mov	r1, r4
 80045d6:	4630      	mov	r0, r6
 80045d8:	f000 faa4 	bl	8004b24 <__swhatbuf_r>
 80045dc:	89a3      	ldrh	r3, [r4, #12]
 80045de:	4318      	orrs	r0, r3
 80045e0:	81a0      	strh	r0, [r4, #12]
 80045e2:	bb2d      	cbnz	r5, 8004630 <setvbuf+0xdc>
 80045e4:	9d00      	ldr	r5, [sp, #0]
 80045e6:	4628      	mov	r0, r5
 80045e8:	f000 fb00 	bl	8004bec <malloc>
 80045ec:	4607      	mov	r7, r0
 80045ee:	2800      	cmp	r0, #0
 80045f0:	d14e      	bne.n	8004690 <setvbuf+0x13c>
 80045f2:	f8dd 9000 	ldr.w	r9, [sp]
 80045f6:	45a9      	cmp	r9, r5
 80045f8:	d13c      	bne.n	8004674 <setvbuf+0x120>
 80045fa:	f04f 30ff 	mov.w	r0, #4294967295
 80045fe:	89a3      	ldrh	r3, [r4, #12]
 8004600:	f043 0302 	orr.w	r3, r3, #2
 8004604:	81a3      	strh	r3, [r4, #12]
 8004606:	2300      	movs	r3, #0
 8004608:	60a3      	str	r3, [r4, #8]
 800460a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800460e:	6023      	str	r3, [r4, #0]
 8004610:	6123      	str	r3, [r4, #16]
 8004612:	2301      	movs	r3, #1
 8004614:	6163      	str	r3, [r4, #20]
 8004616:	b003      	add	sp, #12
 8004618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800461c:	4b22      	ldr	r3, [pc, #136]	; (80046a8 <setvbuf+0x154>)
 800461e:	429c      	cmp	r4, r3
 8004620:	d101      	bne.n	8004626 <setvbuf+0xd2>
 8004622:	68b4      	ldr	r4, [r6, #8]
 8004624:	e7a8      	b.n	8004578 <setvbuf+0x24>
 8004626:	4b21      	ldr	r3, [pc, #132]	; (80046ac <setvbuf+0x158>)
 8004628:	429c      	cmp	r4, r3
 800462a:	bf08      	it	eq
 800462c:	68f4      	ldreq	r4, [r6, #12]
 800462e:	e7a3      	b.n	8004578 <setvbuf+0x24>
 8004630:	2f00      	cmp	r7, #0
 8004632:	d0d8      	beq.n	80045e6 <setvbuf+0x92>
 8004634:	69b3      	ldr	r3, [r6, #24]
 8004636:	b913      	cbnz	r3, 800463e <setvbuf+0xea>
 8004638:	4630      	mov	r0, r6
 800463a:	f000 f9e9 	bl	8004a10 <__sinit>
 800463e:	f1b8 0f01 	cmp.w	r8, #1
 8004642:	bf08      	it	eq
 8004644:	89a3      	ldrheq	r3, [r4, #12]
 8004646:	6027      	str	r7, [r4, #0]
 8004648:	bf04      	itt	eq
 800464a:	f043 0301 	orreq.w	r3, r3, #1
 800464e:	81a3      	strheq	r3, [r4, #12]
 8004650:	89a3      	ldrh	r3, [r4, #12]
 8004652:	f013 0008 	ands.w	r0, r3, #8
 8004656:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800465a:	d01b      	beq.n	8004694 <setvbuf+0x140>
 800465c:	f013 0001 	ands.w	r0, r3, #1
 8004660:	bf18      	it	ne
 8004662:	426d      	negne	r5, r5
 8004664:	f04f 0300 	mov.w	r3, #0
 8004668:	bf1d      	ittte	ne
 800466a:	60a3      	strne	r3, [r4, #8]
 800466c:	61a5      	strne	r5, [r4, #24]
 800466e:	4618      	movne	r0, r3
 8004670:	60a5      	streq	r5, [r4, #8]
 8004672:	e7d0      	b.n	8004616 <setvbuf+0xc2>
 8004674:	4648      	mov	r0, r9
 8004676:	f000 fab9 	bl	8004bec <malloc>
 800467a:	4607      	mov	r7, r0
 800467c:	2800      	cmp	r0, #0
 800467e:	d0bc      	beq.n	80045fa <setvbuf+0xa6>
 8004680:	89a3      	ldrh	r3, [r4, #12]
 8004682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004686:	81a3      	strh	r3, [r4, #12]
 8004688:	464d      	mov	r5, r9
 800468a:	e7d3      	b.n	8004634 <setvbuf+0xe0>
 800468c:	2000      	movs	r0, #0
 800468e:	e7b6      	b.n	80045fe <setvbuf+0xaa>
 8004690:	46a9      	mov	r9, r5
 8004692:	e7f5      	b.n	8004680 <setvbuf+0x12c>
 8004694:	60a0      	str	r0, [r4, #8]
 8004696:	e7be      	b.n	8004616 <setvbuf+0xc2>
 8004698:	f04f 30ff 	mov.w	r0, #4294967295
 800469c:	e7bb      	b.n	8004616 <setvbuf+0xc2>
 800469e:	bf00      	nop
 80046a0:	2000000c 	.word	0x2000000c
 80046a4:	080054d4 	.word	0x080054d4
 80046a8:	080054f4 	.word	0x080054f4
 80046ac:	080054b4 	.word	0x080054b4

080046b0 <__swbuf_r>:
 80046b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b2:	460e      	mov	r6, r1
 80046b4:	4614      	mov	r4, r2
 80046b6:	4605      	mov	r5, r0
 80046b8:	b118      	cbz	r0, 80046c2 <__swbuf_r+0x12>
 80046ba:	6983      	ldr	r3, [r0, #24]
 80046bc:	b90b      	cbnz	r3, 80046c2 <__swbuf_r+0x12>
 80046be:	f000 f9a7 	bl	8004a10 <__sinit>
 80046c2:	4b21      	ldr	r3, [pc, #132]	; (8004748 <__swbuf_r+0x98>)
 80046c4:	429c      	cmp	r4, r3
 80046c6:	d12a      	bne.n	800471e <__swbuf_r+0x6e>
 80046c8:	686c      	ldr	r4, [r5, #4]
 80046ca:	69a3      	ldr	r3, [r4, #24]
 80046cc:	60a3      	str	r3, [r4, #8]
 80046ce:	89a3      	ldrh	r3, [r4, #12]
 80046d0:	071a      	lsls	r2, r3, #28
 80046d2:	d52e      	bpl.n	8004732 <__swbuf_r+0x82>
 80046d4:	6923      	ldr	r3, [r4, #16]
 80046d6:	b363      	cbz	r3, 8004732 <__swbuf_r+0x82>
 80046d8:	6923      	ldr	r3, [r4, #16]
 80046da:	6820      	ldr	r0, [r4, #0]
 80046dc:	1ac0      	subs	r0, r0, r3
 80046de:	6963      	ldr	r3, [r4, #20]
 80046e0:	b2f6      	uxtb	r6, r6
 80046e2:	4283      	cmp	r3, r0
 80046e4:	4637      	mov	r7, r6
 80046e6:	dc04      	bgt.n	80046f2 <__swbuf_r+0x42>
 80046e8:	4621      	mov	r1, r4
 80046ea:	4628      	mov	r0, r5
 80046ec:	f000 f926 	bl	800493c <_fflush_r>
 80046f0:	bb28      	cbnz	r0, 800473e <__swbuf_r+0x8e>
 80046f2:	68a3      	ldr	r3, [r4, #8]
 80046f4:	3b01      	subs	r3, #1
 80046f6:	60a3      	str	r3, [r4, #8]
 80046f8:	6823      	ldr	r3, [r4, #0]
 80046fa:	1c5a      	adds	r2, r3, #1
 80046fc:	6022      	str	r2, [r4, #0]
 80046fe:	701e      	strb	r6, [r3, #0]
 8004700:	6963      	ldr	r3, [r4, #20]
 8004702:	3001      	adds	r0, #1
 8004704:	4283      	cmp	r3, r0
 8004706:	d004      	beq.n	8004712 <__swbuf_r+0x62>
 8004708:	89a3      	ldrh	r3, [r4, #12]
 800470a:	07db      	lsls	r3, r3, #31
 800470c:	d519      	bpl.n	8004742 <__swbuf_r+0x92>
 800470e:	2e0a      	cmp	r6, #10
 8004710:	d117      	bne.n	8004742 <__swbuf_r+0x92>
 8004712:	4621      	mov	r1, r4
 8004714:	4628      	mov	r0, r5
 8004716:	f000 f911 	bl	800493c <_fflush_r>
 800471a:	b190      	cbz	r0, 8004742 <__swbuf_r+0x92>
 800471c:	e00f      	b.n	800473e <__swbuf_r+0x8e>
 800471e:	4b0b      	ldr	r3, [pc, #44]	; (800474c <__swbuf_r+0x9c>)
 8004720:	429c      	cmp	r4, r3
 8004722:	d101      	bne.n	8004728 <__swbuf_r+0x78>
 8004724:	68ac      	ldr	r4, [r5, #8]
 8004726:	e7d0      	b.n	80046ca <__swbuf_r+0x1a>
 8004728:	4b09      	ldr	r3, [pc, #36]	; (8004750 <__swbuf_r+0xa0>)
 800472a:	429c      	cmp	r4, r3
 800472c:	bf08      	it	eq
 800472e:	68ec      	ldreq	r4, [r5, #12]
 8004730:	e7cb      	b.n	80046ca <__swbuf_r+0x1a>
 8004732:	4621      	mov	r1, r4
 8004734:	4628      	mov	r0, r5
 8004736:	f000 f80d 	bl	8004754 <__swsetup_r>
 800473a:	2800      	cmp	r0, #0
 800473c:	d0cc      	beq.n	80046d8 <__swbuf_r+0x28>
 800473e:	f04f 37ff 	mov.w	r7, #4294967295
 8004742:	4638      	mov	r0, r7
 8004744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004746:	bf00      	nop
 8004748:	080054d4 	.word	0x080054d4
 800474c:	080054f4 	.word	0x080054f4
 8004750:	080054b4 	.word	0x080054b4

08004754 <__swsetup_r>:
 8004754:	4b32      	ldr	r3, [pc, #200]	; (8004820 <__swsetup_r+0xcc>)
 8004756:	b570      	push	{r4, r5, r6, lr}
 8004758:	681d      	ldr	r5, [r3, #0]
 800475a:	4606      	mov	r6, r0
 800475c:	460c      	mov	r4, r1
 800475e:	b125      	cbz	r5, 800476a <__swsetup_r+0x16>
 8004760:	69ab      	ldr	r3, [r5, #24]
 8004762:	b913      	cbnz	r3, 800476a <__swsetup_r+0x16>
 8004764:	4628      	mov	r0, r5
 8004766:	f000 f953 	bl	8004a10 <__sinit>
 800476a:	4b2e      	ldr	r3, [pc, #184]	; (8004824 <__swsetup_r+0xd0>)
 800476c:	429c      	cmp	r4, r3
 800476e:	d10f      	bne.n	8004790 <__swsetup_r+0x3c>
 8004770:	686c      	ldr	r4, [r5, #4]
 8004772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004776:	b29a      	uxth	r2, r3
 8004778:	0715      	lsls	r5, r2, #28
 800477a:	d42c      	bmi.n	80047d6 <__swsetup_r+0x82>
 800477c:	06d0      	lsls	r0, r2, #27
 800477e:	d411      	bmi.n	80047a4 <__swsetup_r+0x50>
 8004780:	2209      	movs	r2, #9
 8004782:	6032      	str	r2, [r6, #0]
 8004784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004788:	81a3      	strh	r3, [r4, #12]
 800478a:	f04f 30ff 	mov.w	r0, #4294967295
 800478e:	e03e      	b.n	800480e <__swsetup_r+0xba>
 8004790:	4b25      	ldr	r3, [pc, #148]	; (8004828 <__swsetup_r+0xd4>)
 8004792:	429c      	cmp	r4, r3
 8004794:	d101      	bne.n	800479a <__swsetup_r+0x46>
 8004796:	68ac      	ldr	r4, [r5, #8]
 8004798:	e7eb      	b.n	8004772 <__swsetup_r+0x1e>
 800479a:	4b24      	ldr	r3, [pc, #144]	; (800482c <__swsetup_r+0xd8>)
 800479c:	429c      	cmp	r4, r3
 800479e:	bf08      	it	eq
 80047a0:	68ec      	ldreq	r4, [r5, #12]
 80047a2:	e7e6      	b.n	8004772 <__swsetup_r+0x1e>
 80047a4:	0751      	lsls	r1, r2, #29
 80047a6:	d512      	bpl.n	80047ce <__swsetup_r+0x7a>
 80047a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047aa:	b141      	cbz	r1, 80047be <__swsetup_r+0x6a>
 80047ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047b0:	4299      	cmp	r1, r3
 80047b2:	d002      	beq.n	80047ba <__swsetup_r+0x66>
 80047b4:	4630      	mov	r0, r6
 80047b6:	f000 fa21 	bl	8004bfc <_free_r>
 80047ba:	2300      	movs	r3, #0
 80047bc:	6363      	str	r3, [r4, #52]	; 0x34
 80047be:	89a3      	ldrh	r3, [r4, #12]
 80047c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80047c4:	81a3      	strh	r3, [r4, #12]
 80047c6:	2300      	movs	r3, #0
 80047c8:	6063      	str	r3, [r4, #4]
 80047ca:	6923      	ldr	r3, [r4, #16]
 80047cc:	6023      	str	r3, [r4, #0]
 80047ce:	89a3      	ldrh	r3, [r4, #12]
 80047d0:	f043 0308 	orr.w	r3, r3, #8
 80047d4:	81a3      	strh	r3, [r4, #12]
 80047d6:	6923      	ldr	r3, [r4, #16]
 80047d8:	b94b      	cbnz	r3, 80047ee <__swsetup_r+0x9a>
 80047da:	89a3      	ldrh	r3, [r4, #12]
 80047dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80047e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047e4:	d003      	beq.n	80047ee <__swsetup_r+0x9a>
 80047e6:	4621      	mov	r1, r4
 80047e8:	4630      	mov	r0, r6
 80047ea:	f000 f9bf 	bl	8004b6c <__smakebuf_r>
 80047ee:	89a2      	ldrh	r2, [r4, #12]
 80047f0:	f012 0301 	ands.w	r3, r2, #1
 80047f4:	d00c      	beq.n	8004810 <__swsetup_r+0xbc>
 80047f6:	2300      	movs	r3, #0
 80047f8:	60a3      	str	r3, [r4, #8]
 80047fa:	6963      	ldr	r3, [r4, #20]
 80047fc:	425b      	negs	r3, r3
 80047fe:	61a3      	str	r3, [r4, #24]
 8004800:	6923      	ldr	r3, [r4, #16]
 8004802:	b953      	cbnz	r3, 800481a <__swsetup_r+0xc6>
 8004804:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004808:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800480c:	d1ba      	bne.n	8004784 <__swsetup_r+0x30>
 800480e:	bd70      	pop	{r4, r5, r6, pc}
 8004810:	0792      	lsls	r2, r2, #30
 8004812:	bf58      	it	pl
 8004814:	6963      	ldrpl	r3, [r4, #20]
 8004816:	60a3      	str	r3, [r4, #8]
 8004818:	e7f2      	b.n	8004800 <__swsetup_r+0xac>
 800481a:	2000      	movs	r0, #0
 800481c:	e7f7      	b.n	800480e <__swsetup_r+0xba>
 800481e:	bf00      	nop
 8004820:	2000000c 	.word	0x2000000c
 8004824:	080054d4 	.word	0x080054d4
 8004828:	080054f4 	.word	0x080054f4
 800482c:	080054b4 	.word	0x080054b4

08004830 <__sflush_r>:
 8004830:	898a      	ldrh	r2, [r1, #12]
 8004832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004836:	4605      	mov	r5, r0
 8004838:	0710      	lsls	r0, r2, #28
 800483a:	460c      	mov	r4, r1
 800483c:	d458      	bmi.n	80048f0 <__sflush_r+0xc0>
 800483e:	684b      	ldr	r3, [r1, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	dc05      	bgt.n	8004850 <__sflush_r+0x20>
 8004844:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004846:	2b00      	cmp	r3, #0
 8004848:	dc02      	bgt.n	8004850 <__sflush_r+0x20>
 800484a:	2000      	movs	r0, #0
 800484c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004850:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004852:	2e00      	cmp	r6, #0
 8004854:	d0f9      	beq.n	800484a <__sflush_r+0x1a>
 8004856:	2300      	movs	r3, #0
 8004858:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800485c:	682f      	ldr	r7, [r5, #0]
 800485e:	6a21      	ldr	r1, [r4, #32]
 8004860:	602b      	str	r3, [r5, #0]
 8004862:	d032      	beq.n	80048ca <__sflush_r+0x9a>
 8004864:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004866:	89a3      	ldrh	r3, [r4, #12]
 8004868:	075a      	lsls	r2, r3, #29
 800486a:	d505      	bpl.n	8004878 <__sflush_r+0x48>
 800486c:	6863      	ldr	r3, [r4, #4]
 800486e:	1ac0      	subs	r0, r0, r3
 8004870:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004872:	b10b      	cbz	r3, 8004878 <__sflush_r+0x48>
 8004874:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004876:	1ac0      	subs	r0, r0, r3
 8004878:	2300      	movs	r3, #0
 800487a:	4602      	mov	r2, r0
 800487c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800487e:	6a21      	ldr	r1, [r4, #32]
 8004880:	4628      	mov	r0, r5
 8004882:	47b0      	blx	r6
 8004884:	1c43      	adds	r3, r0, #1
 8004886:	89a3      	ldrh	r3, [r4, #12]
 8004888:	d106      	bne.n	8004898 <__sflush_r+0x68>
 800488a:	6829      	ldr	r1, [r5, #0]
 800488c:	291d      	cmp	r1, #29
 800488e:	d848      	bhi.n	8004922 <__sflush_r+0xf2>
 8004890:	4a29      	ldr	r2, [pc, #164]	; (8004938 <__sflush_r+0x108>)
 8004892:	40ca      	lsrs	r2, r1
 8004894:	07d6      	lsls	r6, r2, #31
 8004896:	d544      	bpl.n	8004922 <__sflush_r+0xf2>
 8004898:	2200      	movs	r2, #0
 800489a:	6062      	str	r2, [r4, #4]
 800489c:	04d9      	lsls	r1, r3, #19
 800489e:	6922      	ldr	r2, [r4, #16]
 80048a0:	6022      	str	r2, [r4, #0]
 80048a2:	d504      	bpl.n	80048ae <__sflush_r+0x7e>
 80048a4:	1c42      	adds	r2, r0, #1
 80048a6:	d101      	bne.n	80048ac <__sflush_r+0x7c>
 80048a8:	682b      	ldr	r3, [r5, #0]
 80048aa:	b903      	cbnz	r3, 80048ae <__sflush_r+0x7e>
 80048ac:	6560      	str	r0, [r4, #84]	; 0x54
 80048ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048b0:	602f      	str	r7, [r5, #0]
 80048b2:	2900      	cmp	r1, #0
 80048b4:	d0c9      	beq.n	800484a <__sflush_r+0x1a>
 80048b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048ba:	4299      	cmp	r1, r3
 80048bc:	d002      	beq.n	80048c4 <__sflush_r+0x94>
 80048be:	4628      	mov	r0, r5
 80048c0:	f000 f99c 	bl	8004bfc <_free_r>
 80048c4:	2000      	movs	r0, #0
 80048c6:	6360      	str	r0, [r4, #52]	; 0x34
 80048c8:	e7c0      	b.n	800484c <__sflush_r+0x1c>
 80048ca:	2301      	movs	r3, #1
 80048cc:	4628      	mov	r0, r5
 80048ce:	47b0      	blx	r6
 80048d0:	1c41      	adds	r1, r0, #1
 80048d2:	d1c8      	bne.n	8004866 <__sflush_r+0x36>
 80048d4:	682b      	ldr	r3, [r5, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0c5      	beq.n	8004866 <__sflush_r+0x36>
 80048da:	2b1d      	cmp	r3, #29
 80048dc:	d001      	beq.n	80048e2 <__sflush_r+0xb2>
 80048de:	2b16      	cmp	r3, #22
 80048e0:	d101      	bne.n	80048e6 <__sflush_r+0xb6>
 80048e2:	602f      	str	r7, [r5, #0]
 80048e4:	e7b1      	b.n	800484a <__sflush_r+0x1a>
 80048e6:	89a3      	ldrh	r3, [r4, #12]
 80048e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048ec:	81a3      	strh	r3, [r4, #12]
 80048ee:	e7ad      	b.n	800484c <__sflush_r+0x1c>
 80048f0:	690f      	ldr	r7, [r1, #16]
 80048f2:	2f00      	cmp	r7, #0
 80048f4:	d0a9      	beq.n	800484a <__sflush_r+0x1a>
 80048f6:	0793      	lsls	r3, r2, #30
 80048f8:	680e      	ldr	r6, [r1, #0]
 80048fa:	bf08      	it	eq
 80048fc:	694b      	ldreq	r3, [r1, #20]
 80048fe:	600f      	str	r7, [r1, #0]
 8004900:	bf18      	it	ne
 8004902:	2300      	movne	r3, #0
 8004904:	eba6 0807 	sub.w	r8, r6, r7
 8004908:	608b      	str	r3, [r1, #8]
 800490a:	f1b8 0f00 	cmp.w	r8, #0
 800490e:	dd9c      	ble.n	800484a <__sflush_r+0x1a>
 8004910:	4643      	mov	r3, r8
 8004912:	463a      	mov	r2, r7
 8004914:	6a21      	ldr	r1, [r4, #32]
 8004916:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004918:	4628      	mov	r0, r5
 800491a:	47b0      	blx	r6
 800491c:	2800      	cmp	r0, #0
 800491e:	dc06      	bgt.n	800492e <__sflush_r+0xfe>
 8004920:	89a3      	ldrh	r3, [r4, #12]
 8004922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004926:	81a3      	strh	r3, [r4, #12]
 8004928:	f04f 30ff 	mov.w	r0, #4294967295
 800492c:	e78e      	b.n	800484c <__sflush_r+0x1c>
 800492e:	4407      	add	r7, r0
 8004930:	eba8 0800 	sub.w	r8, r8, r0
 8004934:	e7e9      	b.n	800490a <__sflush_r+0xda>
 8004936:	bf00      	nop
 8004938:	20400001 	.word	0x20400001

0800493c <_fflush_r>:
 800493c:	b538      	push	{r3, r4, r5, lr}
 800493e:	690b      	ldr	r3, [r1, #16]
 8004940:	4605      	mov	r5, r0
 8004942:	460c      	mov	r4, r1
 8004944:	b1db      	cbz	r3, 800497e <_fflush_r+0x42>
 8004946:	b118      	cbz	r0, 8004950 <_fflush_r+0x14>
 8004948:	6983      	ldr	r3, [r0, #24]
 800494a:	b90b      	cbnz	r3, 8004950 <_fflush_r+0x14>
 800494c:	f000 f860 	bl	8004a10 <__sinit>
 8004950:	4b0c      	ldr	r3, [pc, #48]	; (8004984 <_fflush_r+0x48>)
 8004952:	429c      	cmp	r4, r3
 8004954:	d109      	bne.n	800496a <_fflush_r+0x2e>
 8004956:	686c      	ldr	r4, [r5, #4]
 8004958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800495c:	b17b      	cbz	r3, 800497e <_fflush_r+0x42>
 800495e:	4621      	mov	r1, r4
 8004960:	4628      	mov	r0, r5
 8004962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004966:	f7ff bf63 	b.w	8004830 <__sflush_r>
 800496a:	4b07      	ldr	r3, [pc, #28]	; (8004988 <_fflush_r+0x4c>)
 800496c:	429c      	cmp	r4, r3
 800496e:	d101      	bne.n	8004974 <_fflush_r+0x38>
 8004970:	68ac      	ldr	r4, [r5, #8]
 8004972:	e7f1      	b.n	8004958 <_fflush_r+0x1c>
 8004974:	4b05      	ldr	r3, [pc, #20]	; (800498c <_fflush_r+0x50>)
 8004976:	429c      	cmp	r4, r3
 8004978:	bf08      	it	eq
 800497a:	68ec      	ldreq	r4, [r5, #12]
 800497c:	e7ec      	b.n	8004958 <_fflush_r+0x1c>
 800497e:	2000      	movs	r0, #0
 8004980:	bd38      	pop	{r3, r4, r5, pc}
 8004982:	bf00      	nop
 8004984:	080054d4 	.word	0x080054d4
 8004988:	080054f4 	.word	0x080054f4
 800498c:	080054b4 	.word	0x080054b4

08004990 <std>:
 8004990:	2300      	movs	r3, #0
 8004992:	b510      	push	{r4, lr}
 8004994:	4604      	mov	r4, r0
 8004996:	e9c0 3300 	strd	r3, r3, [r0]
 800499a:	6083      	str	r3, [r0, #8]
 800499c:	8181      	strh	r1, [r0, #12]
 800499e:	6643      	str	r3, [r0, #100]	; 0x64
 80049a0:	81c2      	strh	r2, [r0, #14]
 80049a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049a6:	6183      	str	r3, [r0, #24]
 80049a8:	4619      	mov	r1, r3
 80049aa:	2208      	movs	r2, #8
 80049ac:	305c      	adds	r0, #92	; 0x5c
 80049ae:	f7ff fd45 	bl	800443c <memset>
 80049b2:	4b05      	ldr	r3, [pc, #20]	; (80049c8 <std+0x38>)
 80049b4:	6263      	str	r3, [r4, #36]	; 0x24
 80049b6:	4b05      	ldr	r3, [pc, #20]	; (80049cc <std+0x3c>)
 80049b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80049ba:	4b05      	ldr	r3, [pc, #20]	; (80049d0 <std+0x40>)
 80049bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049be:	4b05      	ldr	r3, [pc, #20]	; (80049d4 <std+0x44>)
 80049c0:	6224      	str	r4, [r4, #32]
 80049c2:	6323      	str	r3, [r4, #48]	; 0x30
 80049c4:	bd10      	pop	{r4, pc}
 80049c6:	bf00      	nop
 80049c8:	080052fd 	.word	0x080052fd
 80049cc:	0800531f 	.word	0x0800531f
 80049d0:	08005357 	.word	0x08005357
 80049d4:	0800537b 	.word	0x0800537b

080049d8 <_cleanup_r>:
 80049d8:	4901      	ldr	r1, [pc, #4]	; (80049e0 <_cleanup_r+0x8>)
 80049da:	f000 b885 	b.w	8004ae8 <_fwalk_reent>
 80049de:	bf00      	nop
 80049e0:	0800493d 	.word	0x0800493d

080049e4 <__sfmoreglue>:
 80049e4:	b570      	push	{r4, r5, r6, lr}
 80049e6:	1e4a      	subs	r2, r1, #1
 80049e8:	2568      	movs	r5, #104	; 0x68
 80049ea:	4355      	muls	r5, r2
 80049ec:	460e      	mov	r6, r1
 80049ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80049f2:	f000 f951 	bl	8004c98 <_malloc_r>
 80049f6:	4604      	mov	r4, r0
 80049f8:	b140      	cbz	r0, 8004a0c <__sfmoreglue+0x28>
 80049fa:	2100      	movs	r1, #0
 80049fc:	e9c0 1600 	strd	r1, r6, [r0]
 8004a00:	300c      	adds	r0, #12
 8004a02:	60a0      	str	r0, [r4, #8]
 8004a04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a08:	f7ff fd18 	bl	800443c <memset>
 8004a0c:	4620      	mov	r0, r4
 8004a0e:	bd70      	pop	{r4, r5, r6, pc}

08004a10 <__sinit>:
 8004a10:	6983      	ldr	r3, [r0, #24]
 8004a12:	b510      	push	{r4, lr}
 8004a14:	4604      	mov	r4, r0
 8004a16:	bb33      	cbnz	r3, 8004a66 <__sinit+0x56>
 8004a18:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004a1c:	6503      	str	r3, [r0, #80]	; 0x50
 8004a1e:	4b12      	ldr	r3, [pc, #72]	; (8004a68 <__sinit+0x58>)
 8004a20:	4a12      	ldr	r2, [pc, #72]	; (8004a6c <__sinit+0x5c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6282      	str	r2, [r0, #40]	; 0x28
 8004a26:	4298      	cmp	r0, r3
 8004a28:	bf04      	itt	eq
 8004a2a:	2301      	moveq	r3, #1
 8004a2c:	6183      	streq	r3, [r0, #24]
 8004a2e:	f000 f81f 	bl	8004a70 <__sfp>
 8004a32:	6060      	str	r0, [r4, #4]
 8004a34:	4620      	mov	r0, r4
 8004a36:	f000 f81b 	bl	8004a70 <__sfp>
 8004a3a:	60a0      	str	r0, [r4, #8]
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	f000 f817 	bl	8004a70 <__sfp>
 8004a42:	2200      	movs	r2, #0
 8004a44:	60e0      	str	r0, [r4, #12]
 8004a46:	2104      	movs	r1, #4
 8004a48:	6860      	ldr	r0, [r4, #4]
 8004a4a:	f7ff ffa1 	bl	8004990 <std>
 8004a4e:	2201      	movs	r2, #1
 8004a50:	2109      	movs	r1, #9
 8004a52:	68a0      	ldr	r0, [r4, #8]
 8004a54:	f7ff ff9c 	bl	8004990 <std>
 8004a58:	2202      	movs	r2, #2
 8004a5a:	2112      	movs	r1, #18
 8004a5c:	68e0      	ldr	r0, [r4, #12]
 8004a5e:	f7ff ff97 	bl	8004990 <std>
 8004a62:	2301      	movs	r3, #1
 8004a64:	61a3      	str	r3, [r4, #24]
 8004a66:	bd10      	pop	{r4, pc}
 8004a68:	080054b0 	.word	0x080054b0
 8004a6c:	080049d9 	.word	0x080049d9

08004a70 <__sfp>:
 8004a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a72:	4b1b      	ldr	r3, [pc, #108]	; (8004ae0 <__sfp+0x70>)
 8004a74:	681e      	ldr	r6, [r3, #0]
 8004a76:	69b3      	ldr	r3, [r6, #24]
 8004a78:	4607      	mov	r7, r0
 8004a7a:	b913      	cbnz	r3, 8004a82 <__sfp+0x12>
 8004a7c:	4630      	mov	r0, r6
 8004a7e:	f7ff ffc7 	bl	8004a10 <__sinit>
 8004a82:	3648      	adds	r6, #72	; 0x48
 8004a84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	d503      	bpl.n	8004a94 <__sfp+0x24>
 8004a8c:	6833      	ldr	r3, [r6, #0]
 8004a8e:	b133      	cbz	r3, 8004a9e <__sfp+0x2e>
 8004a90:	6836      	ldr	r6, [r6, #0]
 8004a92:	e7f7      	b.n	8004a84 <__sfp+0x14>
 8004a94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a98:	b16d      	cbz	r5, 8004ab6 <__sfp+0x46>
 8004a9a:	3468      	adds	r4, #104	; 0x68
 8004a9c:	e7f4      	b.n	8004a88 <__sfp+0x18>
 8004a9e:	2104      	movs	r1, #4
 8004aa0:	4638      	mov	r0, r7
 8004aa2:	f7ff ff9f 	bl	80049e4 <__sfmoreglue>
 8004aa6:	6030      	str	r0, [r6, #0]
 8004aa8:	2800      	cmp	r0, #0
 8004aaa:	d1f1      	bne.n	8004a90 <__sfp+0x20>
 8004aac:	230c      	movs	r3, #12
 8004aae:	603b      	str	r3, [r7, #0]
 8004ab0:	4604      	mov	r4, r0
 8004ab2:	4620      	mov	r0, r4
 8004ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ab6:	4b0b      	ldr	r3, [pc, #44]	; (8004ae4 <__sfp+0x74>)
 8004ab8:	6665      	str	r5, [r4, #100]	; 0x64
 8004aba:	e9c4 5500 	strd	r5, r5, [r4]
 8004abe:	60a5      	str	r5, [r4, #8]
 8004ac0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004ac4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004ac8:	2208      	movs	r2, #8
 8004aca:	4629      	mov	r1, r5
 8004acc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004ad0:	f7ff fcb4 	bl	800443c <memset>
 8004ad4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004ad8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004adc:	e7e9      	b.n	8004ab2 <__sfp+0x42>
 8004ade:	bf00      	nop
 8004ae0:	080054b0 	.word	0x080054b0
 8004ae4:	ffff0001 	.word	0xffff0001

08004ae8 <_fwalk_reent>:
 8004ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004aec:	4680      	mov	r8, r0
 8004aee:	4689      	mov	r9, r1
 8004af0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004af4:	2600      	movs	r6, #0
 8004af6:	b914      	cbnz	r4, 8004afe <_fwalk_reent+0x16>
 8004af8:	4630      	mov	r0, r6
 8004afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004afe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004b02:	3f01      	subs	r7, #1
 8004b04:	d501      	bpl.n	8004b0a <_fwalk_reent+0x22>
 8004b06:	6824      	ldr	r4, [r4, #0]
 8004b08:	e7f5      	b.n	8004af6 <_fwalk_reent+0xe>
 8004b0a:	89ab      	ldrh	r3, [r5, #12]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d907      	bls.n	8004b20 <_fwalk_reent+0x38>
 8004b10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b14:	3301      	adds	r3, #1
 8004b16:	d003      	beq.n	8004b20 <_fwalk_reent+0x38>
 8004b18:	4629      	mov	r1, r5
 8004b1a:	4640      	mov	r0, r8
 8004b1c:	47c8      	blx	r9
 8004b1e:	4306      	orrs	r6, r0
 8004b20:	3568      	adds	r5, #104	; 0x68
 8004b22:	e7ee      	b.n	8004b02 <_fwalk_reent+0x1a>

08004b24 <__swhatbuf_r>:
 8004b24:	b570      	push	{r4, r5, r6, lr}
 8004b26:	460e      	mov	r6, r1
 8004b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b2c:	2900      	cmp	r1, #0
 8004b2e:	b096      	sub	sp, #88	; 0x58
 8004b30:	4614      	mov	r4, r2
 8004b32:	461d      	mov	r5, r3
 8004b34:	da07      	bge.n	8004b46 <__swhatbuf_r+0x22>
 8004b36:	2300      	movs	r3, #0
 8004b38:	602b      	str	r3, [r5, #0]
 8004b3a:	89b3      	ldrh	r3, [r6, #12]
 8004b3c:	061a      	lsls	r2, r3, #24
 8004b3e:	d410      	bmi.n	8004b62 <__swhatbuf_r+0x3e>
 8004b40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b44:	e00e      	b.n	8004b64 <__swhatbuf_r+0x40>
 8004b46:	466a      	mov	r2, sp
 8004b48:	f000 fc3e 	bl	80053c8 <_fstat_r>
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	dbf2      	blt.n	8004b36 <__swhatbuf_r+0x12>
 8004b50:	9a01      	ldr	r2, [sp, #4]
 8004b52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004b5a:	425a      	negs	r2, r3
 8004b5c:	415a      	adcs	r2, r3
 8004b5e:	602a      	str	r2, [r5, #0]
 8004b60:	e7ee      	b.n	8004b40 <__swhatbuf_r+0x1c>
 8004b62:	2340      	movs	r3, #64	; 0x40
 8004b64:	2000      	movs	r0, #0
 8004b66:	6023      	str	r3, [r4, #0]
 8004b68:	b016      	add	sp, #88	; 0x58
 8004b6a:	bd70      	pop	{r4, r5, r6, pc}

08004b6c <__smakebuf_r>:
 8004b6c:	898b      	ldrh	r3, [r1, #12]
 8004b6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b70:	079d      	lsls	r5, r3, #30
 8004b72:	4606      	mov	r6, r0
 8004b74:	460c      	mov	r4, r1
 8004b76:	d507      	bpl.n	8004b88 <__smakebuf_r+0x1c>
 8004b78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b7c:	6023      	str	r3, [r4, #0]
 8004b7e:	6123      	str	r3, [r4, #16]
 8004b80:	2301      	movs	r3, #1
 8004b82:	6163      	str	r3, [r4, #20]
 8004b84:	b002      	add	sp, #8
 8004b86:	bd70      	pop	{r4, r5, r6, pc}
 8004b88:	ab01      	add	r3, sp, #4
 8004b8a:	466a      	mov	r2, sp
 8004b8c:	f7ff ffca 	bl	8004b24 <__swhatbuf_r>
 8004b90:	9900      	ldr	r1, [sp, #0]
 8004b92:	4605      	mov	r5, r0
 8004b94:	4630      	mov	r0, r6
 8004b96:	f000 f87f 	bl	8004c98 <_malloc_r>
 8004b9a:	b948      	cbnz	r0, 8004bb0 <__smakebuf_r+0x44>
 8004b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ba0:	059a      	lsls	r2, r3, #22
 8004ba2:	d4ef      	bmi.n	8004b84 <__smakebuf_r+0x18>
 8004ba4:	f023 0303 	bic.w	r3, r3, #3
 8004ba8:	f043 0302 	orr.w	r3, r3, #2
 8004bac:	81a3      	strh	r3, [r4, #12]
 8004bae:	e7e3      	b.n	8004b78 <__smakebuf_r+0xc>
 8004bb0:	4b0d      	ldr	r3, [pc, #52]	; (8004be8 <__smakebuf_r+0x7c>)
 8004bb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8004bb4:	89a3      	ldrh	r3, [r4, #12]
 8004bb6:	6020      	str	r0, [r4, #0]
 8004bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bbc:	81a3      	strh	r3, [r4, #12]
 8004bbe:	9b00      	ldr	r3, [sp, #0]
 8004bc0:	6163      	str	r3, [r4, #20]
 8004bc2:	9b01      	ldr	r3, [sp, #4]
 8004bc4:	6120      	str	r0, [r4, #16]
 8004bc6:	b15b      	cbz	r3, 8004be0 <__smakebuf_r+0x74>
 8004bc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bcc:	4630      	mov	r0, r6
 8004bce:	f000 fc0d 	bl	80053ec <_isatty_r>
 8004bd2:	b128      	cbz	r0, 8004be0 <__smakebuf_r+0x74>
 8004bd4:	89a3      	ldrh	r3, [r4, #12]
 8004bd6:	f023 0303 	bic.w	r3, r3, #3
 8004bda:	f043 0301 	orr.w	r3, r3, #1
 8004bde:	81a3      	strh	r3, [r4, #12]
 8004be0:	89a3      	ldrh	r3, [r4, #12]
 8004be2:	431d      	orrs	r5, r3
 8004be4:	81a5      	strh	r5, [r4, #12]
 8004be6:	e7cd      	b.n	8004b84 <__smakebuf_r+0x18>
 8004be8:	080049d9 	.word	0x080049d9

08004bec <malloc>:
 8004bec:	4b02      	ldr	r3, [pc, #8]	; (8004bf8 <malloc+0xc>)
 8004bee:	4601      	mov	r1, r0
 8004bf0:	6818      	ldr	r0, [r3, #0]
 8004bf2:	f000 b851 	b.w	8004c98 <_malloc_r>
 8004bf6:	bf00      	nop
 8004bf8:	2000000c 	.word	0x2000000c

08004bfc <_free_r>:
 8004bfc:	b538      	push	{r3, r4, r5, lr}
 8004bfe:	4605      	mov	r5, r0
 8004c00:	2900      	cmp	r1, #0
 8004c02:	d045      	beq.n	8004c90 <_free_r+0x94>
 8004c04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c08:	1f0c      	subs	r4, r1, #4
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	bfb8      	it	lt
 8004c0e:	18e4      	addlt	r4, r4, r3
 8004c10:	f000 fc0e 	bl	8005430 <__malloc_lock>
 8004c14:	4a1f      	ldr	r2, [pc, #124]	; (8004c94 <_free_r+0x98>)
 8004c16:	6813      	ldr	r3, [r2, #0]
 8004c18:	4610      	mov	r0, r2
 8004c1a:	b933      	cbnz	r3, 8004c2a <_free_r+0x2e>
 8004c1c:	6063      	str	r3, [r4, #4]
 8004c1e:	6014      	str	r4, [r2, #0]
 8004c20:	4628      	mov	r0, r5
 8004c22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c26:	f000 bc04 	b.w	8005432 <__malloc_unlock>
 8004c2a:	42a3      	cmp	r3, r4
 8004c2c:	d90c      	bls.n	8004c48 <_free_r+0x4c>
 8004c2e:	6821      	ldr	r1, [r4, #0]
 8004c30:	1862      	adds	r2, r4, r1
 8004c32:	4293      	cmp	r3, r2
 8004c34:	bf04      	itt	eq
 8004c36:	681a      	ldreq	r2, [r3, #0]
 8004c38:	685b      	ldreq	r3, [r3, #4]
 8004c3a:	6063      	str	r3, [r4, #4]
 8004c3c:	bf04      	itt	eq
 8004c3e:	1852      	addeq	r2, r2, r1
 8004c40:	6022      	streq	r2, [r4, #0]
 8004c42:	6004      	str	r4, [r0, #0]
 8004c44:	e7ec      	b.n	8004c20 <_free_r+0x24>
 8004c46:	4613      	mov	r3, r2
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	b10a      	cbz	r2, 8004c50 <_free_r+0x54>
 8004c4c:	42a2      	cmp	r2, r4
 8004c4e:	d9fa      	bls.n	8004c46 <_free_r+0x4a>
 8004c50:	6819      	ldr	r1, [r3, #0]
 8004c52:	1858      	adds	r0, r3, r1
 8004c54:	42a0      	cmp	r0, r4
 8004c56:	d10b      	bne.n	8004c70 <_free_r+0x74>
 8004c58:	6820      	ldr	r0, [r4, #0]
 8004c5a:	4401      	add	r1, r0
 8004c5c:	1858      	adds	r0, r3, r1
 8004c5e:	4282      	cmp	r2, r0
 8004c60:	6019      	str	r1, [r3, #0]
 8004c62:	d1dd      	bne.n	8004c20 <_free_r+0x24>
 8004c64:	6810      	ldr	r0, [r2, #0]
 8004c66:	6852      	ldr	r2, [r2, #4]
 8004c68:	605a      	str	r2, [r3, #4]
 8004c6a:	4401      	add	r1, r0
 8004c6c:	6019      	str	r1, [r3, #0]
 8004c6e:	e7d7      	b.n	8004c20 <_free_r+0x24>
 8004c70:	d902      	bls.n	8004c78 <_free_r+0x7c>
 8004c72:	230c      	movs	r3, #12
 8004c74:	602b      	str	r3, [r5, #0]
 8004c76:	e7d3      	b.n	8004c20 <_free_r+0x24>
 8004c78:	6820      	ldr	r0, [r4, #0]
 8004c7a:	1821      	adds	r1, r4, r0
 8004c7c:	428a      	cmp	r2, r1
 8004c7e:	bf04      	itt	eq
 8004c80:	6811      	ldreq	r1, [r2, #0]
 8004c82:	6852      	ldreq	r2, [r2, #4]
 8004c84:	6062      	str	r2, [r4, #4]
 8004c86:	bf04      	itt	eq
 8004c88:	1809      	addeq	r1, r1, r0
 8004c8a:	6021      	streq	r1, [r4, #0]
 8004c8c:	605c      	str	r4, [r3, #4]
 8004c8e:	e7c7      	b.n	8004c20 <_free_r+0x24>
 8004c90:	bd38      	pop	{r3, r4, r5, pc}
 8004c92:	bf00      	nop
 8004c94:	20000098 	.word	0x20000098

08004c98 <_malloc_r>:
 8004c98:	b570      	push	{r4, r5, r6, lr}
 8004c9a:	1ccd      	adds	r5, r1, #3
 8004c9c:	f025 0503 	bic.w	r5, r5, #3
 8004ca0:	3508      	adds	r5, #8
 8004ca2:	2d0c      	cmp	r5, #12
 8004ca4:	bf38      	it	cc
 8004ca6:	250c      	movcc	r5, #12
 8004ca8:	2d00      	cmp	r5, #0
 8004caa:	4606      	mov	r6, r0
 8004cac:	db01      	blt.n	8004cb2 <_malloc_r+0x1a>
 8004cae:	42a9      	cmp	r1, r5
 8004cb0:	d903      	bls.n	8004cba <_malloc_r+0x22>
 8004cb2:	230c      	movs	r3, #12
 8004cb4:	6033      	str	r3, [r6, #0]
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	bd70      	pop	{r4, r5, r6, pc}
 8004cba:	f000 fbb9 	bl	8005430 <__malloc_lock>
 8004cbe:	4a21      	ldr	r2, [pc, #132]	; (8004d44 <_malloc_r+0xac>)
 8004cc0:	6814      	ldr	r4, [r2, #0]
 8004cc2:	4621      	mov	r1, r4
 8004cc4:	b991      	cbnz	r1, 8004cec <_malloc_r+0x54>
 8004cc6:	4c20      	ldr	r4, [pc, #128]	; (8004d48 <_malloc_r+0xb0>)
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	b91b      	cbnz	r3, 8004cd4 <_malloc_r+0x3c>
 8004ccc:	4630      	mov	r0, r6
 8004cce:	f000 fb05 	bl	80052dc <_sbrk_r>
 8004cd2:	6020      	str	r0, [r4, #0]
 8004cd4:	4629      	mov	r1, r5
 8004cd6:	4630      	mov	r0, r6
 8004cd8:	f000 fb00 	bl	80052dc <_sbrk_r>
 8004cdc:	1c43      	adds	r3, r0, #1
 8004cde:	d124      	bne.n	8004d2a <_malloc_r+0x92>
 8004ce0:	230c      	movs	r3, #12
 8004ce2:	6033      	str	r3, [r6, #0]
 8004ce4:	4630      	mov	r0, r6
 8004ce6:	f000 fba4 	bl	8005432 <__malloc_unlock>
 8004cea:	e7e4      	b.n	8004cb6 <_malloc_r+0x1e>
 8004cec:	680b      	ldr	r3, [r1, #0]
 8004cee:	1b5b      	subs	r3, r3, r5
 8004cf0:	d418      	bmi.n	8004d24 <_malloc_r+0x8c>
 8004cf2:	2b0b      	cmp	r3, #11
 8004cf4:	d90f      	bls.n	8004d16 <_malloc_r+0x7e>
 8004cf6:	600b      	str	r3, [r1, #0]
 8004cf8:	50cd      	str	r5, [r1, r3]
 8004cfa:	18cc      	adds	r4, r1, r3
 8004cfc:	4630      	mov	r0, r6
 8004cfe:	f000 fb98 	bl	8005432 <__malloc_unlock>
 8004d02:	f104 000b 	add.w	r0, r4, #11
 8004d06:	1d23      	adds	r3, r4, #4
 8004d08:	f020 0007 	bic.w	r0, r0, #7
 8004d0c:	1ac3      	subs	r3, r0, r3
 8004d0e:	d0d3      	beq.n	8004cb8 <_malloc_r+0x20>
 8004d10:	425a      	negs	r2, r3
 8004d12:	50e2      	str	r2, [r4, r3]
 8004d14:	e7d0      	b.n	8004cb8 <_malloc_r+0x20>
 8004d16:	428c      	cmp	r4, r1
 8004d18:	684b      	ldr	r3, [r1, #4]
 8004d1a:	bf16      	itet	ne
 8004d1c:	6063      	strne	r3, [r4, #4]
 8004d1e:	6013      	streq	r3, [r2, #0]
 8004d20:	460c      	movne	r4, r1
 8004d22:	e7eb      	b.n	8004cfc <_malloc_r+0x64>
 8004d24:	460c      	mov	r4, r1
 8004d26:	6849      	ldr	r1, [r1, #4]
 8004d28:	e7cc      	b.n	8004cc4 <_malloc_r+0x2c>
 8004d2a:	1cc4      	adds	r4, r0, #3
 8004d2c:	f024 0403 	bic.w	r4, r4, #3
 8004d30:	42a0      	cmp	r0, r4
 8004d32:	d005      	beq.n	8004d40 <_malloc_r+0xa8>
 8004d34:	1a21      	subs	r1, r4, r0
 8004d36:	4630      	mov	r0, r6
 8004d38:	f000 fad0 	bl	80052dc <_sbrk_r>
 8004d3c:	3001      	adds	r0, #1
 8004d3e:	d0cf      	beq.n	8004ce0 <_malloc_r+0x48>
 8004d40:	6025      	str	r5, [r4, #0]
 8004d42:	e7db      	b.n	8004cfc <_malloc_r+0x64>
 8004d44:	20000098 	.word	0x20000098
 8004d48:	2000009c 	.word	0x2000009c

08004d4c <__sfputc_r>:
 8004d4c:	6893      	ldr	r3, [r2, #8]
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	b410      	push	{r4}
 8004d54:	6093      	str	r3, [r2, #8]
 8004d56:	da08      	bge.n	8004d6a <__sfputc_r+0x1e>
 8004d58:	6994      	ldr	r4, [r2, #24]
 8004d5a:	42a3      	cmp	r3, r4
 8004d5c:	db01      	blt.n	8004d62 <__sfputc_r+0x16>
 8004d5e:	290a      	cmp	r1, #10
 8004d60:	d103      	bne.n	8004d6a <__sfputc_r+0x1e>
 8004d62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d66:	f7ff bca3 	b.w	80046b0 <__swbuf_r>
 8004d6a:	6813      	ldr	r3, [r2, #0]
 8004d6c:	1c58      	adds	r0, r3, #1
 8004d6e:	6010      	str	r0, [r2, #0]
 8004d70:	7019      	strb	r1, [r3, #0]
 8004d72:	4608      	mov	r0, r1
 8004d74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <__sfputs_r>:
 8004d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d7c:	4606      	mov	r6, r0
 8004d7e:	460f      	mov	r7, r1
 8004d80:	4614      	mov	r4, r2
 8004d82:	18d5      	adds	r5, r2, r3
 8004d84:	42ac      	cmp	r4, r5
 8004d86:	d101      	bne.n	8004d8c <__sfputs_r+0x12>
 8004d88:	2000      	movs	r0, #0
 8004d8a:	e007      	b.n	8004d9c <__sfputs_r+0x22>
 8004d8c:	463a      	mov	r2, r7
 8004d8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d92:	4630      	mov	r0, r6
 8004d94:	f7ff ffda 	bl	8004d4c <__sfputc_r>
 8004d98:	1c43      	adds	r3, r0, #1
 8004d9a:	d1f3      	bne.n	8004d84 <__sfputs_r+0xa>
 8004d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004da0 <_vfiprintf_r>:
 8004da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004da4:	460c      	mov	r4, r1
 8004da6:	b09d      	sub	sp, #116	; 0x74
 8004da8:	4617      	mov	r7, r2
 8004daa:	461d      	mov	r5, r3
 8004dac:	4606      	mov	r6, r0
 8004dae:	b118      	cbz	r0, 8004db8 <_vfiprintf_r+0x18>
 8004db0:	6983      	ldr	r3, [r0, #24]
 8004db2:	b90b      	cbnz	r3, 8004db8 <_vfiprintf_r+0x18>
 8004db4:	f7ff fe2c 	bl	8004a10 <__sinit>
 8004db8:	4b7c      	ldr	r3, [pc, #496]	; (8004fac <_vfiprintf_r+0x20c>)
 8004dba:	429c      	cmp	r4, r3
 8004dbc:	d158      	bne.n	8004e70 <_vfiprintf_r+0xd0>
 8004dbe:	6874      	ldr	r4, [r6, #4]
 8004dc0:	89a3      	ldrh	r3, [r4, #12]
 8004dc2:	0718      	lsls	r0, r3, #28
 8004dc4:	d55e      	bpl.n	8004e84 <_vfiprintf_r+0xe4>
 8004dc6:	6923      	ldr	r3, [r4, #16]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d05b      	beq.n	8004e84 <_vfiprintf_r+0xe4>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	9309      	str	r3, [sp, #36]	; 0x24
 8004dd0:	2320      	movs	r3, #32
 8004dd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004dd6:	2330      	movs	r3, #48	; 0x30
 8004dd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ddc:	9503      	str	r5, [sp, #12]
 8004dde:	f04f 0b01 	mov.w	fp, #1
 8004de2:	46b8      	mov	r8, r7
 8004de4:	4645      	mov	r5, r8
 8004de6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004dea:	b10b      	cbz	r3, 8004df0 <_vfiprintf_r+0x50>
 8004dec:	2b25      	cmp	r3, #37	; 0x25
 8004dee:	d154      	bne.n	8004e9a <_vfiprintf_r+0xfa>
 8004df0:	ebb8 0a07 	subs.w	sl, r8, r7
 8004df4:	d00b      	beq.n	8004e0e <_vfiprintf_r+0x6e>
 8004df6:	4653      	mov	r3, sl
 8004df8:	463a      	mov	r2, r7
 8004dfa:	4621      	mov	r1, r4
 8004dfc:	4630      	mov	r0, r6
 8004dfe:	f7ff ffbc 	bl	8004d7a <__sfputs_r>
 8004e02:	3001      	adds	r0, #1
 8004e04:	f000 80c2 	beq.w	8004f8c <_vfiprintf_r+0x1ec>
 8004e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e0a:	4453      	add	r3, sl
 8004e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e0e:	f898 3000 	ldrb.w	r3, [r8]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 80ba 	beq.w	8004f8c <_vfiprintf_r+0x1ec>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e22:	9304      	str	r3, [sp, #16]
 8004e24:	9307      	str	r3, [sp, #28]
 8004e26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e2a:	931a      	str	r3, [sp, #104]	; 0x68
 8004e2c:	46a8      	mov	r8, r5
 8004e2e:	2205      	movs	r2, #5
 8004e30:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004e34:	485e      	ldr	r0, [pc, #376]	; (8004fb0 <_vfiprintf_r+0x210>)
 8004e36:	f7fb f9db 	bl	80001f0 <memchr>
 8004e3a:	9b04      	ldr	r3, [sp, #16]
 8004e3c:	bb78      	cbnz	r0, 8004e9e <_vfiprintf_r+0xfe>
 8004e3e:	06d9      	lsls	r1, r3, #27
 8004e40:	bf44      	itt	mi
 8004e42:	2220      	movmi	r2, #32
 8004e44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004e48:	071a      	lsls	r2, r3, #28
 8004e4a:	bf44      	itt	mi
 8004e4c:	222b      	movmi	r2, #43	; 0x2b
 8004e4e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004e52:	782a      	ldrb	r2, [r5, #0]
 8004e54:	2a2a      	cmp	r2, #42	; 0x2a
 8004e56:	d02a      	beq.n	8004eae <_vfiprintf_r+0x10e>
 8004e58:	9a07      	ldr	r2, [sp, #28]
 8004e5a:	46a8      	mov	r8, r5
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	250a      	movs	r5, #10
 8004e60:	4641      	mov	r1, r8
 8004e62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e66:	3b30      	subs	r3, #48	; 0x30
 8004e68:	2b09      	cmp	r3, #9
 8004e6a:	d969      	bls.n	8004f40 <_vfiprintf_r+0x1a0>
 8004e6c:	b360      	cbz	r0, 8004ec8 <_vfiprintf_r+0x128>
 8004e6e:	e024      	b.n	8004eba <_vfiprintf_r+0x11a>
 8004e70:	4b50      	ldr	r3, [pc, #320]	; (8004fb4 <_vfiprintf_r+0x214>)
 8004e72:	429c      	cmp	r4, r3
 8004e74:	d101      	bne.n	8004e7a <_vfiprintf_r+0xda>
 8004e76:	68b4      	ldr	r4, [r6, #8]
 8004e78:	e7a2      	b.n	8004dc0 <_vfiprintf_r+0x20>
 8004e7a:	4b4f      	ldr	r3, [pc, #316]	; (8004fb8 <_vfiprintf_r+0x218>)
 8004e7c:	429c      	cmp	r4, r3
 8004e7e:	bf08      	it	eq
 8004e80:	68f4      	ldreq	r4, [r6, #12]
 8004e82:	e79d      	b.n	8004dc0 <_vfiprintf_r+0x20>
 8004e84:	4621      	mov	r1, r4
 8004e86:	4630      	mov	r0, r6
 8004e88:	f7ff fc64 	bl	8004754 <__swsetup_r>
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	d09d      	beq.n	8004dcc <_vfiprintf_r+0x2c>
 8004e90:	f04f 30ff 	mov.w	r0, #4294967295
 8004e94:	b01d      	add	sp, #116	; 0x74
 8004e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e9a:	46a8      	mov	r8, r5
 8004e9c:	e7a2      	b.n	8004de4 <_vfiprintf_r+0x44>
 8004e9e:	4a44      	ldr	r2, [pc, #272]	; (8004fb0 <_vfiprintf_r+0x210>)
 8004ea0:	1a80      	subs	r0, r0, r2
 8004ea2:	fa0b f000 	lsl.w	r0, fp, r0
 8004ea6:	4318      	orrs	r0, r3
 8004ea8:	9004      	str	r0, [sp, #16]
 8004eaa:	4645      	mov	r5, r8
 8004eac:	e7be      	b.n	8004e2c <_vfiprintf_r+0x8c>
 8004eae:	9a03      	ldr	r2, [sp, #12]
 8004eb0:	1d11      	adds	r1, r2, #4
 8004eb2:	6812      	ldr	r2, [r2, #0]
 8004eb4:	9103      	str	r1, [sp, #12]
 8004eb6:	2a00      	cmp	r2, #0
 8004eb8:	db01      	blt.n	8004ebe <_vfiprintf_r+0x11e>
 8004eba:	9207      	str	r2, [sp, #28]
 8004ebc:	e004      	b.n	8004ec8 <_vfiprintf_r+0x128>
 8004ebe:	4252      	negs	r2, r2
 8004ec0:	f043 0302 	orr.w	r3, r3, #2
 8004ec4:	9207      	str	r2, [sp, #28]
 8004ec6:	9304      	str	r3, [sp, #16]
 8004ec8:	f898 3000 	ldrb.w	r3, [r8]
 8004ecc:	2b2e      	cmp	r3, #46	; 0x2e
 8004ece:	d10e      	bne.n	8004eee <_vfiprintf_r+0x14e>
 8004ed0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004ed4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ed6:	d138      	bne.n	8004f4a <_vfiprintf_r+0x1aa>
 8004ed8:	9b03      	ldr	r3, [sp, #12]
 8004eda:	1d1a      	adds	r2, r3, #4
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	9203      	str	r2, [sp, #12]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	bfb8      	it	lt
 8004ee4:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ee8:	f108 0802 	add.w	r8, r8, #2
 8004eec:	9305      	str	r3, [sp, #20]
 8004eee:	4d33      	ldr	r5, [pc, #204]	; (8004fbc <_vfiprintf_r+0x21c>)
 8004ef0:	f898 1000 	ldrb.w	r1, [r8]
 8004ef4:	2203      	movs	r2, #3
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	f7fb f97a 	bl	80001f0 <memchr>
 8004efc:	b140      	cbz	r0, 8004f10 <_vfiprintf_r+0x170>
 8004efe:	2340      	movs	r3, #64	; 0x40
 8004f00:	1b40      	subs	r0, r0, r5
 8004f02:	fa03 f000 	lsl.w	r0, r3, r0
 8004f06:	9b04      	ldr	r3, [sp, #16]
 8004f08:	4303      	orrs	r3, r0
 8004f0a:	f108 0801 	add.w	r8, r8, #1
 8004f0e:	9304      	str	r3, [sp, #16]
 8004f10:	f898 1000 	ldrb.w	r1, [r8]
 8004f14:	482a      	ldr	r0, [pc, #168]	; (8004fc0 <_vfiprintf_r+0x220>)
 8004f16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f1a:	2206      	movs	r2, #6
 8004f1c:	f108 0701 	add.w	r7, r8, #1
 8004f20:	f7fb f966 	bl	80001f0 <memchr>
 8004f24:	2800      	cmp	r0, #0
 8004f26:	d037      	beq.n	8004f98 <_vfiprintf_r+0x1f8>
 8004f28:	4b26      	ldr	r3, [pc, #152]	; (8004fc4 <_vfiprintf_r+0x224>)
 8004f2a:	bb1b      	cbnz	r3, 8004f74 <_vfiprintf_r+0x1d4>
 8004f2c:	9b03      	ldr	r3, [sp, #12]
 8004f2e:	3307      	adds	r3, #7
 8004f30:	f023 0307 	bic.w	r3, r3, #7
 8004f34:	3308      	adds	r3, #8
 8004f36:	9303      	str	r3, [sp, #12]
 8004f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f3a:	444b      	add	r3, r9
 8004f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f3e:	e750      	b.n	8004de2 <_vfiprintf_r+0x42>
 8004f40:	fb05 3202 	mla	r2, r5, r2, r3
 8004f44:	2001      	movs	r0, #1
 8004f46:	4688      	mov	r8, r1
 8004f48:	e78a      	b.n	8004e60 <_vfiprintf_r+0xc0>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	f108 0801 	add.w	r8, r8, #1
 8004f50:	9305      	str	r3, [sp, #20]
 8004f52:	4619      	mov	r1, r3
 8004f54:	250a      	movs	r5, #10
 8004f56:	4640      	mov	r0, r8
 8004f58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f5c:	3a30      	subs	r2, #48	; 0x30
 8004f5e:	2a09      	cmp	r2, #9
 8004f60:	d903      	bls.n	8004f6a <_vfiprintf_r+0x1ca>
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0c3      	beq.n	8004eee <_vfiprintf_r+0x14e>
 8004f66:	9105      	str	r1, [sp, #20]
 8004f68:	e7c1      	b.n	8004eee <_vfiprintf_r+0x14e>
 8004f6a:	fb05 2101 	mla	r1, r5, r1, r2
 8004f6e:	2301      	movs	r3, #1
 8004f70:	4680      	mov	r8, r0
 8004f72:	e7f0      	b.n	8004f56 <_vfiprintf_r+0x1b6>
 8004f74:	ab03      	add	r3, sp, #12
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	4622      	mov	r2, r4
 8004f7a:	4b13      	ldr	r3, [pc, #76]	; (8004fc8 <_vfiprintf_r+0x228>)
 8004f7c:	a904      	add	r1, sp, #16
 8004f7e:	4630      	mov	r0, r6
 8004f80:	f3af 8000 	nop.w
 8004f84:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004f88:	4681      	mov	r9, r0
 8004f8a:	d1d5      	bne.n	8004f38 <_vfiprintf_r+0x198>
 8004f8c:	89a3      	ldrh	r3, [r4, #12]
 8004f8e:	065b      	lsls	r3, r3, #25
 8004f90:	f53f af7e 	bmi.w	8004e90 <_vfiprintf_r+0xf0>
 8004f94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f96:	e77d      	b.n	8004e94 <_vfiprintf_r+0xf4>
 8004f98:	ab03      	add	r3, sp, #12
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	4622      	mov	r2, r4
 8004f9e:	4b0a      	ldr	r3, [pc, #40]	; (8004fc8 <_vfiprintf_r+0x228>)
 8004fa0:	a904      	add	r1, sp, #16
 8004fa2:	4630      	mov	r0, r6
 8004fa4:	f000 f888 	bl	80050b8 <_printf_i>
 8004fa8:	e7ec      	b.n	8004f84 <_vfiprintf_r+0x1e4>
 8004faa:	bf00      	nop
 8004fac:	080054d4 	.word	0x080054d4
 8004fb0:	08005514 	.word	0x08005514
 8004fb4:	080054f4 	.word	0x080054f4
 8004fb8:	080054b4 	.word	0x080054b4
 8004fbc:	0800551a 	.word	0x0800551a
 8004fc0:	0800551e 	.word	0x0800551e
 8004fc4:	00000000 	.word	0x00000000
 8004fc8:	08004d7b 	.word	0x08004d7b

08004fcc <_printf_common>:
 8004fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fd0:	4691      	mov	r9, r2
 8004fd2:	461f      	mov	r7, r3
 8004fd4:	688a      	ldr	r2, [r1, #8]
 8004fd6:	690b      	ldr	r3, [r1, #16]
 8004fd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	bfb8      	it	lt
 8004fe0:	4613      	movlt	r3, r2
 8004fe2:	f8c9 3000 	str.w	r3, [r9]
 8004fe6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fea:	4606      	mov	r6, r0
 8004fec:	460c      	mov	r4, r1
 8004fee:	b112      	cbz	r2, 8004ff6 <_printf_common+0x2a>
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	f8c9 3000 	str.w	r3, [r9]
 8004ff6:	6823      	ldr	r3, [r4, #0]
 8004ff8:	0699      	lsls	r1, r3, #26
 8004ffa:	bf42      	ittt	mi
 8004ffc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005000:	3302      	addmi	r3, #2
 8005002:	f8c9 3000 	strmi.w	r3, [r9]
 8005006:	6825      	ldr	r5, [r4, #0]
 8005008:	f015 0506 	ands.w	r5, r5, #6
 800500c:	d107      	bne.n	800501e <_printf_common+0x52>
 800500e:	f104 0a19 	add.w	sl, r4, #25
 8005012:	68e3      	ldr	r3, [r4, #12]
 8005014:	f8d9 2000 	ldr.w	r2, [r9]
 8005018:	1a9b      	subs	r3, r3, r2
 800501a:	42ab      	cmp	r3, r5
 800501c:	dc28      	bgt.n	8005070 <_printf_common+0xa4>
 800501e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005022:	6822      	ldr	r2, [r4, #0]
 8005024:	3300      	adds	r3, #0
 8005026:	bf18      	it	ne
 8005028:	2301      	movne	r3, #1
 800502a:	0692      	lsls	r2, r2, #26
 800502c:	d42d      	bmi.n	800508a <_printf_common+0xbe>
 800502e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005032:	4639      	mov	r1, r7
 8005034:	4630      	mov	r0, r6
 8005036:	47c0      	blx	r8
 8005038:	3001      	adds	r0, #1
 800503a:	d020      	beq.n	800507e <_printf_common+0xb2>
 800503c:	6823      	ldr	r3, [r4, #0]
 800503e:	68e5      	ldr	r5, [r4, #12]
 8005040:	f8d9 2000 	ldr.w	r2, [r9]
 8005044:	f003 0306 	and.w	r3, r3, #6
 8005048:	2b04      	cmp	r3, #4
 800504a:	bf08      	it	eq
 800504c:	1aad      	subeq	r5, r5, r2
 800504e:	68a3      	ldr	r3, [r4, #8]
 8005050:	6922      	ldr	r2, [r4, #16]
 8005052:	bf0c      	ite	eq
 8005054:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005058:	2500      	movne	r5, #0
 800505a:	4293      	cmp	r3, r2
 800505c:	bfc4      	itt	gt
 800505e:	1a9b      	subgt	r3, r3, r2
 8005060:	18ed      	addgt	r5, r5, r3
 8005062:	f04f 0900 	mov.w	r9, #0
 8005066:	341a      	adds	r4, #26
 8005068:	454d      	cmp	r5, r9
 800506a:	d11a      	bne.n	80050a2 <_printf_common+0xd6>
 800506c:	2000      	movs	r0, #0
 800506e:	e008      	b.n	8005082 <_printf_common+0xb6>
 8005070:	2301      	movs	r3, #1
 8005072:	4652      	mov	r2, sl
 8005074:	4639      	mov	r1, r7
 8005076:	4630      	mov	r0, r6
 8005078:	47c0      	blx	r8
 800507a:	3001      	adds	r0, #1
 800507c:	d103      	bne.n	8005086 <_printf_common+0xba>
 800507e:	f04f 30ff 	mov.w	r0, #4294967295
 8005082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005086:	3501      	adds	r5, #1
 8005088:	e7c3      	b.n	8005012 <_printf_common+0x46>
 800508a:	18e1      	adds	r1, r4, r3
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	2030      	movs	r0, #48	; 0x30
 8005090:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005094:	4422      	add	r2, r4
 8005096:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800509a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800509e:	3302      	adds	r3, #2
 80050a0:	e7c5      	b.n	800502e <_printf_common+0x62>
 80050a2:	2301      	movs	r3, #1
 80050a4:	4622      	mov	r2, r4
 80050a6:	4639      	mov	r1, r7
 80050a8:	4630      	mov	r0, r6
 80050aa:	47c0      	blx	r8
 80050ac:	3001      	adds	r0, #1
 80050ae:	d0e6      	beq.n	800507e <_printf_common+0xb2>
 80050b0:	f109 0901 	add.w	r9, r9, #1
 80050b4:	e7d8      	b.n	8005068 <_printf_common+0x9c>
	...

080050b8 <_printf_i>:
 80050b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80050bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80050c0:	460c      	mov	r4, r1
 80050c2:	7e09      	ldrb	r1, [r1, #24]
 80050c4:	b085      	sub	sp, #20
 80050c6:	296e      	cmp	r1, #110	; 0x6e
 80050c8:	4617      	mov	r7, r2
 80050ca:	4606      	mov	r6, r0
 80050cc:	4698      	mov	r8, r3
 80050ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80050d0:	f000 80b3 	beq.w	800523a <_printf_i+0x182>
 80050d4:	d822      	bhi.n	800511c <_printf_i+0x64>
 80050d6:	2963      	cmp	r1, #99	; 0x63
 80050d8:	d036      	beq.n	8005148 <_printf_i+0x90>
 80050da:	d80a      	bhi.n	80050f2 <_printf_i+0x3a>
 80050dc:	2900      	cmp	r1, #0
 80050de:	f000 80b9 	beq.w	8005254 <_printf_i+0x19c>
 80050e2:	2958      	cmp	r1, #88	; 0x58
 80050e4:	f000 8083 	beq.w	80051ee <_printf_i+0x136>
 80050e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80050f0:	e032      	b.n	8005158 <_printf_i+0xa0>
 80050f2:	2964      	cmp	r1, #100	; 0x64
 80050f4:	d001      	beq.n	80050fa <_printf_i+0x42>
 80050f6:	2969      	cmp	r1, #105	; 0x69
 80050f8:	d1f6      	bne.n	80050e8 <_printf_i+0x30>
 80050fa:	6820      	ldr	r0, [r4, #0]
 80050fc:	6813      	ldr	r3, [r2, #0]
 80050fe:	0605      	lsls	r5, r0, #24
 8005100:	f103 0104 	add.w	r1, r3, #4
 8005104:	d52a      	bpl.n	800515c <_printf_i+0xa4>
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6011      	str	r1, [r2, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	da03      	bge.n	8005116 <_printf_i+0x5e>
 800510e:	222d      	movs	r2, #45	; 0x2d
 8005110:	425b      	negs	r3, r3
 8005112:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005116:	486f      	ldr	r0, [pc, #444]	; (80052d4 <_printf_i+0x21c>)
 8005118:	220a      	movs	r2, #10
 800511a:	e039      	b.n	8005190 <_printf_i+0xd8>
 800511c:	2973      	cmp	r1, #115	; 0x73
 800511e:	f000 809d 	beq.w	800525c <_printf_i+0x1a4>
 8005122:	d808      	bhi.n	8005136 <_printf_i+0x7e>
 8005124:	296f      	cmp	r1, #111	; 0x6f
 8005126:	d020      	beq.n	800516a <_printf_i+0xb2>
 8005128:	2970      	cmp	r1, #112	; 0x70
 800512a:	d1dd      	bne.n	80050e8 <_printf_i+0x30>
 800512c:	6823      	ldr	r3, [r4, #0]
 800512e:	f043 0320 	orr.w	r3, r3, #32
 8005132:	6023      	str	r3, [r4, #0]
 8005134:	e003      	b.n	800513e <_printf_i+0x86>
 8005136:	2975      	cmp	r1, #117	; 0x75
 8005138:	d017      	beq.n	800516a <_printf_i+0xb2>
 800513a:	2978      	cmp	r1, #120	; 0x78
 800513c:	d1d4      	bne.n	80050e8 <_printf_i+0x30>
 800513e:	2378      	movs	r3, #120	; 0x78
 8005140:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005144:	4864      	ldr	r0, [pc, #400]	; (80052d8 <_printf_i+0x220>)
 8005146:	e055      	b.n	80051f4 <_printf_i+0x13c>
 8005148:	6813      	ldr	r3, [r2, #0]
 800514a:	1d19      	adds	r1, r3, #4
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	6011      	str	r1, [r2, #0]
 8005150:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005154:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005158:	2301      	movs	r3, #1
 800515a:	e08c      	b.n	8005276 <_printf_i+0x1be>
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	6011      	str	r1, [r2, #0]
 8005160:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005164:	bf18      	it	ne
 8005166:	b21b      	sxthne	r3, r3
 8005168:	e7cf      	b.n	800510a <_printf_i+0x52>
 800516a:	6813      	ldr	r3, [r2, #0]
 800516c:	6825      	ldr	r5, [r4, #0]
 800516e:	1d18      	adds	r0, r3, #4
 8005170:	6010      	str	r0, [r2, #0]
 8005172:	0628      	lsls	r0, r5, #24
 8005174:	d501      	bpl.n	800517a <_printf_i+0xc2>
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	e002      	b.n	8005180 <_printf_i+0xc8>
 800517a:	0668      	lsls	r0, r5, #25
 800517c:	d5fb      	bpl.n	8005176 <_printf_i+0xbe>
 800517e:	881b      	ldrh	r3, [r3, #0]
 8005180:	4854      	ldr	r0, [pc, #336]	; (80052d4 <_printf_i+0x21c>)
 8005182:	296f      	cmp	r1, #111	; 0x6f
 8005184:	bf14      	ite	ne
 8005186:	220a      	movne	r2, #10
 8005188:	2208      	moveq	r2, #8
 800518a:	2100      	movs	r1, #0
 800518c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005190:	6865      	ldr	r5, [r4, #4]
 8005192:	60a5      	str	r5, [r4, #8]
 8005194:	2d00      	cmp	r5, #0
 8005196:	f2c0 8095 	blt.w	80052c4 <_printf_i+0x20c>
 800519a:	6821      	ldr	r1, [r4, #0]
 800519c:	f021 0104 	bic.w	r1, r1, #4
 80051a0:	6021      	str	r1, [r4, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d13d      	bne.n	8005222 <_printf_i+0x16a>
 80051a6:	2d00      	cmp	r5, #0
 80051a8:	f040 808e 	bne.w	80052c8 <_printf_i+0x210>
 80051ac:	4665      	mov	r5, ip
 80051ae:	2a08      	cmp	r2, #8
 80051b0:	d10b      	bne.n	80051ca <_printf_i+0x112>
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	07db      	lsls	r3, r3, #31
 80051b6:	d508      	bpl.n	80051ca <_printf_i+0x112>
 80051b8:	6923      	ldr	r3, [r4, #16]
 80051ba:	6862      	ldr	r2, [r4, #4]
 80051bc:	429a      	cmp	r2, r3
 80051be:	bfde      	ittt	le
 80051c0:	2330      	movle	r3, #48	; 0x30
 80051c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80051c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80051ca:	ebac 0305 	sub.w	r3, ip, r5
 80051ce:	6123      	str	r3, [r4, #16]
 80051d0:	f8cd 8000 	str.w	r8, [sp]
 80051d4:	463b      	mov	r3, r7
 80051d6:	aa03      	add	r2, sp, #12
 80051d8:	4621      	mov	r1, r4
 80051da:	4630      	mov	r0, r6
 80051dc:	f7ff fef6 	bl	8004fcc <_printf_common>
 80051e0:	3001      	adds	r0, #1
 80051e2:	d14d      	bne.n	8005280 <_printf_i+0x1c8>
 80051e4:	f04f 30ff 	mov.w	r0, #4294967295
 80051e8:	b005      	add	sp, #20
 80051ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051ee:	4839      	ldr	r0, [pc, #228]	; (80052d4 <_printf_i+0x21c>)
 80051f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80051f4:	6813      	ldr	r3, [r2, #0]
 80051f6:	6821      	ldr	r1, [r4, #0]
 80051f8:	1d1d      	adds	r5, r3, #4
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6015      	str	r5, [r2, #0]
 80051fe:	060a      	lsls	r2, r1, #24
 8005200:	d50b      	bpl.n	800521a <_printf_i+0x162>
 8005202:	07ca      	lsls	r2, r1, #31
 8005204:	bf44      	itt	mi
 8005206:	f041 0120 	orrmi.w	r1, r1, #32
 800520a:	6021      	strmi	r1, [r4, #0]
 800520c:	b91b      	cbnz	r3, 8005216 <_printf_i+0x15e>
 800520e:	6822      	ldr	r2, [r4, #0]
 8005210:	f022 0220 	bic.w	r2, r2, #32
 8005214:	6022      	str	r2, [r4, #0]
 8005216:	2210      	movs	r2, #16
 8005218:	e7b7      	b.n	800518a <_printf_i+0xd2>
 800521a:	064d      	lsls	r5, r1, #25
 800521c:	bf48      	it	mi
 800521e:	b29b      	uxthmi	r3, r3
 8005220:	e7ef      	b.n	8005202 <_printf_i+0x14a>
 8005222:	4665      	mov	r5, ip
 8005224:	fbb3 f1f2 	udiv	r1, r3, r2
 8005228:	fb02 3311 	mls	r3, r2, r1, r3
 800522c:	5cc3      	ldrb	r3, [r0, r3]
 800522e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005232:	460b      	mov	r3, r1
 8005234:	2900      	cmp	r1, #0
 8005236:	d1f5      	bne.n	8005224 <_printf_i+0x16c>
 8005238:	e7b9      	b.n	80051ae <_printf_i+0xf6>
 800523a:	6813      	ldr	r3, [r2, #0]
 800523c:	6825      	ldr	r5, [r4, #0]
 800523e:	6961      	ldr	r1, [r4, #20]
 8005240:	1d18      	adds	r0, r3, #4
 8005242:	6010      	str	r0, [r2, #0]
 8005244:	0628      	lsls	r0, r5, #24
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	d501      	bpl.n	800524e <_printf_i+0x196>
 800524a:	6019      	str	r1, [r3, #0]
 800524c:	e002      	b.n	8005254 <_printf_i+0x19c>
 800524e:	066a      	lsls	r2, r5, #25
 8005250:	d5fb      	bpl.n	800524a <_printf_i+0x192>
 8005252:	8019      	strh	r1, [r3, #0]
 8005254:	2300      	movs	r3, #0
 8005256:	6123      	str	r3, [r4, #16]
 8005258:	4665      	mov	r5, ip
 800525a:	e7b9      	b.n	80051d0 <_printf_i+0x118>
 800525c:	6813      	ldr	r3, [r2, #0]
 800525e:	1d19      	adds	r1, r3, #4
 8005260:	6011      	str	r1, [r2, #0]
 8005262:	681d      	ldr	r5, [r3, #0]
 8005264:	6862      	ldr	r2, [r4, #4]
 8005266:	2100      	movs	r1, #0
 8005268:	4628      	mov	r0, r5
 800526a:	f7fa ffc1 	bl	80001f0 <memchr>
 800526e:	b108      	cbz	r0, 8005274 <_printf_i+0x1bc>
 8005270:	1b40      	subs	r0, r0, r5
 8005272:	6060      	str	r0, [r4, #4]
 8005274:	6863      	ldr	r3, [r4, #4]
 8005276:	6123      	str	r3, [r4, #16]
 8005278:	2300      	movs	r3, #0
 800527a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800527e:	e7a7      	b.n	80051d0 <_printf_i+0x118>
 8005280:	6923      	ldr	r3, [r4, #16]
 8005282:	462a      	mov	r2, r5
 8005284:	4639      	mov	r1, r7
 8005286:	4630      	mov	r0, r6
 8005288:	47c0      	blx	r8
 800528a:	3001      	adds	r0, #1
 800528c:	d0aa      	beq.n	80051e4 <_printf_i+0x12c>
 800528e:	6823      	ldr	r3, [r4, #0]
 8005290:	079b      	lsls	r3, r3, #30
 8005292:	d413      	bmi.n	80052bc <_printf_i+0x204>
 8005294:	68e0      	ldr	r0, [r4, #12]
 8005296:	9b03      	ldr	r3, [sp, #12]
 8005298:	4298      	cmp	r0, r3
 800529a:	bfb8      	it	lt
 800529c:	4618      	movlt	r0, r3
 800529e:	e7a3      	b.n	80051e8 <_printf_i+0x130>
 80052a0:	2301      	movs	r3, #1
 80052a2:	464a      	mov	r2, r9
 80052a4:	4639      	mov	r1, r7
 80052a6:	4630      	mov	r0, r6
 80052a8:	47c0      	blx	r8
 80052aa:	3001      	adds	r0, #1
 80052ac:	d09a      	beq.n	80051e4 <_printf_i+0x12c>
 80052ae:	3501      	adds	r5, #1
 80052b0:	68e3      	ldr	r3, [r4, #12]
 80052b2:	9a03      	ldr	r2, [sp, #12]
 80052b4:	1a9b      	subs	r3, r3, r2
 80052b6:	42ab      	cmp	r3, r5
 80052b8:	dcf2      	bgt.n	80052a0 <_printf_i+0x1e8>
 80052ba:	e7eb      	b.n	8005294 <_printf_i+0x1dc>
 80052bc:	2500      	movs	r5, #0
 80052be:	f104 0919 	add.w	r9, r4, #25
 80052c2:	e7f5      	b.n	80052b0 <_printf_i+0x1f8>
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1ac      	bne.n	8005222 <_printf_i+0x16a>
 80052c8:	7803      	ldrb	r3, [r0, #0]
 80052ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052d2:	e76c      	b.n	80051ae <_printf_i+0xf6>
 80052d4:	08005525 	.word	0x08005525
 80052d8:	08005536 	.word	0x08005536

080052dc <_sbrk_r>:
 80052dc:	b538      	push	{r3, r4, r5, lr}
 80052de:	4c06      	ldr	r4, [pc, #24]	; (80052f8 <_sbrk_r+0x1c>)
 80052e0:	2300      	movs	r3, #0
 80052e2:	4605      	mov	r5, r0
 80052e4:	4608      	mov	r0, r1
 80052e6:	6023      	str	r3, [r4, #0]
 80052e8:	f7fe fd20 	bl	8003d2c <_sbrk>
 80052ec:	1c43      	adds	r3, r0, #1
 80052ee:	d102      	bne.n	80052f6 <_sbrk_r+0x1a>
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	b103      	cbz	r3, 80052f6 <_sbrk_r+0x1a>
 80052f4:	602b      	str	r3, [r5, #0]
 80052f6:	bd38      	pop	{r3, r4, r5, pc}
 80052f8:	20000574 	.word	0x20000574

080052fc <__sread>:
 80052fc:	b510      	push	{r4, lr}
 80052fe:	460c      	mov	r4, r1
 8005300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005304:	f000 f896 	bl	8005434 <_read_r>
 8005308:	2800      	cmp	r0, #0
 800530a:	bfab      	itete	ge
 800530c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800530e:	89a3      	ldrhlt	r3, [r4, #12]
 8005310:	181b      	addge	r3, r3, r0
 8005312:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005316:	bfac      	ite	ge
 8005318:	6563      	strge	r3, [r4, #84]	; 0x54
 800531a:	81a3      	strhlt	r3, [r4, #12]
 800531c:	bd10      	pop	{r4, pc}

0800531e <__swrite>:
 800531e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005322:	461f      	mov	r7, r3
 8005324:	898b      	ldrh	r3, [r1, #12]
 8005326:	05db      	lsls	r3, r3, #23
 8005328:	4605      	mov	r5, r0
 800532a:	460c      	mov	r4, r1
 800532c:	4616      	mov	r6, r2
 800532e:	d505      	bpl.n	800533c <__swrite+0x1e>
 8005330:	2302      	movs	r3, #2
 8005332:	2200      	movs	r2, #0
 8005334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005338:	f000 f868 	bl	800540c <_lseek_r>
 800533c:	89a3      	ldrh	r3, [r4, #12]
 800533e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005342:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005346:	81a3      	strh	r3, [r4, #12]
 8005348:	4632      	mov	r2, r6
 800534a:	463b      	mov	r3, r7
 800534c:	4628      	mov	r0, r5
 800534e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005352:	f000 b817 	b.w	8005384 <_write_r>

08005356 <__sseek>:
 8005356:	b510      	push	{r4, lr}
 8005358:	460c      	mov	r4, r1
 800535a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800535e:	f000 f855 	bl	800540c <_lseek_r>
 8005362:	1c43      	adds	r3, r0, #1
 8005364:	89a3      	ldrh	r3, [r4, #12]
 8005366:	bf15      	itete	ne
 8005368:	6560      	strne	r0, [r4, #84]	; 0x54
 800536a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800536e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005372:	81a3      	strheq	r3, [r4, #12]
 8005374:	bf18      	it	ne
 8005376:	81a3      	strhne	r3, [r4, #12]
 8005378:	bd10      	pop	{r4, pc}

0800537a <__sclose>:
 800537a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800537e:	f000 b813 	b.w	80053a8 <_close_r>
	...

08005384 <_write_r>:
 8005384:	b538      	push	{r3, r4, r5, lr}
 8005386:	4c07      	ldr	r4, [pc, #28]	; (80053a4 <_write_r+0x20>)
 8005388:	4605      	mov	r5, r0
 800538a:	4608      	mov	r0, r1
 800538c:	4611      	mov	r1, r2
 800538e:	2200      	movs	r2, #0
 8005390:	6022      	str	r2, [r4, #0]
 8005392:	461a      	mov	r2, r3
 8005394:	f7fe fcae 	bl	8003cf4 <_write>
 8005398:	1c43      	adds	r3, r0, #1
 800539a:	d102      	bne.n	80053a2 <_write_r+0x1e>
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	b103      	cbz	r3, 80053a2 <_write_r+0x1e>
 80053a0:	602b      	str	r3, [r5, #0]
 80053a2:	bd38      	pop	{r3, r4, r5, pc}
 80053a4:	20000574 	.word	0x20000574

080053a8 <_close_r>:
 80053a8:	b538      	push	{r3, r4, r5, lr}
 80053aa:	4c06      	ldr	r4, [pc, #24]	; (80053c4 <_close_r+0x1c>)
 80053ac:	2300      	movs	r3, #0
 80053ae:	4605      	mov	r5, r0
 80053b0:	4608      	mov	r0, r1
 80053b2:	6023      	str	r3, [r4, #0]
 80053b4:	f7fe fcac 	bl	8003d10 <_close>
 80053b8:	1c43      	adds	r3, r0, #1
 80053ba:	d102      	bne.n	80053c2 <_close_r+0x1a>
 80053bc:	6823      	ldr	r3, [r4, #0]
 80053be:	b103      	cbz	r3, 80053c2 <_close_r+0x1a>
 80053c0:	602b      	str	r3, [r5, #0]
 80053c2:	bd38      	pop	{r3, r4, r5, pc}
 80053c4:	20000574 	.word	0x20000574

080053c8 <_fstat_r>:
 80053c8:	b538      	push	{r3, r4, r5, lr}
 80053ca:	4c07      	ldr	r4, [pc, #28]	; (80053e8 <_fstat_r+0x20>)
 80053cc:	2300      	movs	r3, #0
 80053ce:	4605      	mov	r5, r0
 80053d0:	4608      	mov	r0, r1
 80053d2:	4611      	mov	r1, r2
 80053d4:	6023      	str	r3, [r4, #0]
 80053d6:	f7fe fc9f 	bl	8003d18 <_fstat>
 80053da:	1c43      	adds	r3, r0, #1
 80053dc:	d102      	bne.n	80053e4 <_fstat_r+0x1c>
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	b103      	cbz	r3, 80053e4 <_fstat_r+0x1c>
 80053e2:	602b      	str	r3, [r5, #0]
 80053e4:	bd38      	pop	{r3, r4, r5, pc}
 80053e6:	bf00      	nop
 80053e8:	20000574 	.word	0x20000574

080053ec <_isatty_r>:
 80053ec:	b538      	push	{r3, r4, r5, lr}
 80053ee:	4c06      	ldr	r4, [pc, #24]	; (8005408 <_isatty_r+0x1c>)
 80053f0:	2300      	movs	r3, #0
 80053f2:	4605      	mov	r5, r0
 80053f4:	4608      	mov	r0, r1
 80053f6:	6023      	str	r3, [r4, #0]
 80053f8:	f7fe fc94 	bl	8003d24 <_isatty>
 80053fc:	1c43      	adds	r3, r0, #1
 80053fe:	d102      	bne.n	8005406 <_isatty_r+0x1a>
 8005400:	6823      	ldr	r3, [r4, #0]
 8005402:	b103      	cbz	r3, 8005406 <_isatty_r+0x1a>
 8005404:	602b      	str	r3, [r5, #0]
 8005406:	bd38      	pop	{r3, r4, r5, pc}
 8005408:	20000574 	.word	0x20000574

0800540c <_lseek_r>:
 800540c:	b538      	push	{r3, r4, r5, lr}
 800540e:	4c07      	ldr	r4, [pc, #28]	; (800542c <_lseek_r+0x20>)
 8005410:	4605      	mov	r5, r0
 8005412:	4608      	mov	r0, r1
 8005414:	4611      	mov	r1, r2
 8005416:	2200      	movs	r2, #0
 8005418:	6022      	str	r2, [r4, #0]
 800541a:	461a      	mov	r2, r3
 800541c:	f7fe fc84 	bl	8003d28 <_lseek>
 8005420:	1c43      	adds	r3, r0, #1
 8005422:	d102      	bne.n	800542a <_lseek_r+0x1e>
 8005424:	6823      	ldr	r3, [r4, #0]
 8005426:	b103      	cbz	r3, 800542a <_lseek_r+0x1e>
 8005428:	602b      	str	r3, [r5, #0]
 800542a:	bd38      	pop	{r3, r4, r5, pc}
 800542c:	20000574 	.word	0x20000574

08005430 <__malloc_lock>:
 8005430:	4770      	bx	lr

08005432 <__malloc_unlock>:
 8005432:	4770      	bx	lr

08005434 <_read_r>:
 8005434:	b538      	push	{r3, r4, r5, lr}
 8005436:	4c07      	ldr	r4, [pc, #28]	; (8005454 <_read_r+0x20>)
 8005438:	4605      	mov	r5, r0
 800543a:	4608      	mov	r0, r1
 800543c:	4611      	mov	r1, r2
 800543e:	2200      	movs	r2, #0
 8005440:	6022      	str	r2, [r4, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	f7fe fc48 	bl	8003cd8 <_read>
 8005448:	1c43      	adds	r3, r0, #1
 800544a:	d102      	bne.n	8005452 <_read_r+0x1e>
 800544c:	6823      	ldr	r3, [r4, #0]
 800544e:	b103      	cbz	r3, 8005452 <_read_r+0x1e>
 8005450:	602b      	str	r3, [r5, #0]
 8005452:	bd38      	pop	{r3, r4, r5, pc}
 8005454:	20000574 	.word	0x20000574

08005458 <_init>:
 8005458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800545a:	bf00      	nop
 800545c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800545e:	bc08      	pop	{r3}
 8005460:	469e      	mov	lr, r3
 8005462:	4770      	bx	lr

08005464 <_fini>:
 8005464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005466:	bf00      	nop
 8005468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800546a:	bc08      	pop	{r3}
 800546c:	469e      	mov	lr, r3
 800546e:	4770      	bx	lr
